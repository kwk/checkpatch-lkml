WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git core-iommu-for-linus

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#44: 
some fixes that didnt make it into .32.
                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#264: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#269: FILE: arch/x86/include/asm/amd_iommu_proto.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#283: FILE: arch/x86/include/asm/amd_iommu_proto.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#284: FILE: arch/x86/include/asm/amd_iommu_proto.h:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: arch/x86/include/asm/amd_iommu_proto.h:24:
+extern int amd_iommu_init_dma_ops(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: arch/x86/include/asm/amd_iommu_proto.h:25:
+extern int amd_iommu_init_passthrough(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#294: FILE: arch/x86/include/asm/amd_iommu_proto.h:26:
+extern irqreturn_t amd_iommu_int_handler(int irq, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#295: FILE: arch/x86/include/asm/amd_iommu_proto.h:27:
+extern void amd_iommu_flush_all_domains(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#296: FILE: arch/x86/include/asm/amd_iommu_proto.h:28:
+extern void amd_iommu_flush_all_devices(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#297: FILE: arch/x86/include/asm/amd_iommu_proto.h:29:
+extern void amd_iommu_apply_erratum_63(u16 devid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: arch/x86/include/asm/amd_iommu_proto.h:30:
+extern void amd_iommu_reset_cmd_buffer(struct amd_iommu *iommu);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#353: FILE: arch/x86/include/asm/amd_iommu_types.h:246:
+	unsigned dev_iommu[MAX_IOMMUS]; /* per-IOMMU reference count */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#491: FILE: arch/x86/include/asm/gart.h:38:
+extern int gart_iommu_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#536: FILE: arch/x86/include/asm/swiotlb.h:8:
+extern int pci_swiotlb_init(void);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!amd_iommu_rlookup_table[devid]"
#685: FILE: arch/x86/kernel/amd_iommu.c:130:
+	if (amd_iommu_rlookup_table[devid] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#716: FILE: arch/x86/kernel/amd_iommu.c:161:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#874: FILE: arch/x86/kernel/amd_iommu.c:571:
+static void iommu_flush_pages(struct protection_domain *domain,
+			     u64 address, size_t size)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#901: FILE: arch/x86/kernel/amd_iommu.c:588:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1241: FILE: arch/x86/kernel/amd_iommu.c:932:
+		int page  = i % APERTURE_RANGE_PAGES;
+		__set_bit(page, dom->aperture[index]->bitmap);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1277: FILE: arch/x86/kernel/amd_iommu.c:988:
+		    iommu->exclusion_start >= dma_dom->aperture[index]->offset
+		    && iommu->exclusion_start < dma_dom->aperture_size) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "alias_data->domain"
#1503: FILE: arch/x86/kernel/amd_iommu.c:1396:
+	if (alias_data->domain != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev_data->domain"
#1508: FILE: arch/x86/kernel/amd_iommu.c:1400:
+	if (dev_data->domain != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!alias_data->domain"
#1515: FILE: arch/x86/kernel/amd_iommu.c:1407:
+		if (alias_data->domain == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_data->domain"
#1521: FILE: arch/x86/kernel/amd_iommu.c:1413:
+	if (dev_data->domain == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1577: FILE: arch/x86/kernel/amd_iommu.c:1457:
+	BUG_ON(!dev_data->domain);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_data->domain"
#1609: FILE: arch/x86/kernel/amd_iommu.c:1476:
+	if (iommu_pass_through && dev_data->domain == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dom"
#1648: FILE: arch/x86/kernel/amd_iommu.c:1513:
+	if (dom == NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "alias_data->domain"
#1649: FILE: arch/x86/kernel/amd_iommu.c:1514:
+	    alias_data->domain != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "domain"
#1810: FILE: arch/x86/kernel/amd_iommu.c:1613:
+	if (domain != NULL && !dma_ops_domain(domain))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "domain"
#1814: FILE: arch/x86/kernel/amd_iommu.c:1616:
+	if (domain != NULL)

WARNING:TYPO_SPELLING: 'bount' may be misspelled - perhaps 'bound'?
#1833: FILE: arch/x86/kernel/amd_iommu.c:1619:
+	/* Device not bount yet - bind it */
 	              ^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1859: FILE: arch/x86/kernel/amd_iommu.c:1636:
+		u16 devid = get_device_id(dev_data->dev);
+		set_dte_entry(devid, domain);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dma_addr == DMA_ERROR_CODE'
#2051: FILE: arch/x86/kernel/amd_iommu.c:1838:
+	if ((dma_addr == DMA_ERROR_CODE) ||
 	    (dma_addr + size > dma_dom->aperture_size))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#2257: FILE: arch/x86/kernel/amd_iommu.c:2050:
+	if (PTR_ERR(domain) == -EINVAL) {
[...]
+	} else if (IS_ERR(domain))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2375: FILE: arch/x86/kernel/amd_iommu.c:2143:
 	while ((dev = pci_get_device(PCI_ANY_ID, PCI_ANY_ID, dev)) != NULL) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev_data->domain"
#2492: FILE: arch/x86/kernel/amd_iommu.c:2354:
+	if (dev_data->domain != NULL)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2645: FILE: arch/x86/kernel/amd_iommu_init.c:144:
+spinlock_t amd_iommu_pd_lock;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2674: FILE: arch/x86/kernel/amd_iommu_init.c:850:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2903: FILE: arch/x86/kernel/pci-calgary_64.c:269:
+		printk(KERN_WARNING "Calgary: failed to allocate %u pages in "

WARNING:SPLIT_STRING: quoted string split across lines
#2904: FILE: arch/x86/kernel/pci-calgary_64.c:270:
+		printk(KERN_WARNING "Calgary: failed to allocate %u pages in "
+		       "iommu %p\n", npages, tbl);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dma_addr >= DMA_ERROR_CODE'
#2931: FILE: arch/x86/kernel/pci-calgary_64.c:292:
+	if (unlikely((dma_addr >= DMA_ERROR_CODE) && (dma_addr < badend))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dma_addr < badend'
#2931: FILE: arch/x86/kernel/pci-calgary_64.c:292:
+	if (unlikely((dma_addr >= DMA_ERROR_CODE) && (dma_addr < badend))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3001: FILE: arch/x86/kernel/pci-calgary_64.c:1352:
+	printk(KERN_INFO "PCI-DMA: Using Calgary IOMMU\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3005: FILE: arch/x86/kernel/pci-calgary_64.c:1356:
+		printk(KERN_ERR "PCI-DMA: Calgary init failed %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#3006: FILE: arch/x86/kernel/pci-calgary_64.c:1357:
+		printk(KERN_ERR "PCI-DMA: Calgary init failed %d, "
+		       "falling back to no_iommu\n", ret);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#3085: FILE: arch/x86/kernel/pci-dma.c:18:
+struct dma_map_ops *dma_ops = &nommu_dma_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: braces {} should be used on all arms of this statement
#3141: FILE: arch/x86/kernel/pci-dma.c:289:
+	if (swiotlb) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3142: FILE: arch/x86/kernel/pci-dma.c:290:
+		printk(KERN_INFO "PCI-DMA: "

WARNING:SPLIT_STRING: quoted string split across lines
#3143: FILE: arch/x86/kernel/pci-dma.c:291:
+		printk(KERN_INFO "PCI-DMA: "
+		       "Using software bounce buffering for IO (SWIOTLB)\n");

CHECK:BRACES: Unbalanced braces around else statement
#3145: FILE: arch/x86/kernel/pci-dma.c:293:
+	} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3296: FILE: arch/x86/kernel/pci-gart_64.c:529:
+		pr_warning(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3393: FILE: arch/x86/kernel/pci-gart_64.c:687:
+	pr_info("PCI-DMA: aperture base @ %x size %u KB\n",
 	       aper_base, aper_size>>10);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3472: FILE: arch/x86/kernel/pci-gart_64.c:764:
+	end_pfn		= (aper_base>>PAGE_SHIFT) + (aper_size>>PAGE_SHIFT);
 	       		            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3472: FILE: arch/x86/kernel/pci-gart_64.c:764:
+	end_pfn		= (aper_base>>PAGE_SHIFT) + (aper_size>>PAGE_SHIFT);
 	       		                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3502: FILE: arch/x86/kernel/pci-gart_64.c:797:
+	pr_info("PCI-DMA: Reserving %luMB of IOMMU area in the AGP aperture\n",
 	       iommu_size >> 20);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3512: FILE: arch/x86/kernel/pci-gart_64.c:803:
+	iommu_gatt_base		= agp_gatt_table + (iommu_start>>PAGE_SHIFT);
 	               		                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3732: FILE: include/linux/bootmem.h:56:
+extern void free_bootmem_late(unsigned long addr, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3780: FILE: include/linux/swiotlb.h:25:
+extern void swiotlb_init(int verbose);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3789: FILE: include/linux/swiotlb.h:93:
+extern void __init swiotlb_free(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3794: FILE: include/linux/swiotlb.h:98:
+extern void swiotlb_print_info(void);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3852: FILE: lib/swiotlb.c:190:
+	swiotlb_init_with_default_size(64 * (1<<20), verbose);	/* default to 64MB */
 	                                      ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039799.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 18 warnings, 43 checks, 3446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039799.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
