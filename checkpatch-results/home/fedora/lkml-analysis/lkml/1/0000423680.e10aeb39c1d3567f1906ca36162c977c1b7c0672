ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#77: FILE: drivers/char/consolemap.c:218:
+	if (!p) return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#80: FILE: drivers/char/consolemap.c:221:
+		q = p->inverse_trans_unicode =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#98: FILE: drivers/char/consolemap.c:239:
+				if (glyph >= 0 && glyph < MAX_GLYPH
+					       && q[glyph] < 32)

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: drivers/char/consolemap.c:240:
+^I^I  ^I^I^Iq[glyph] = (i << 11) + (j << 6) + k;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#99: FILE: drivers/char/consolemap.c:240:
+^I^I  ^I^I^Iq[glyph] = (i << 11) + (j << 6) + k;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#125: FILE: drivers/char/consolemap.c:265:
+	else if (!(p = (struct uni_pagedir *)*conp->vc_uni_pagedir_loc))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#157: FILE: drivers/char/consolemap.c:404:
+	if (p->inverse_trans_unicode) {
+		kfree(p->inverse_trans_unicode);

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: drivers/char/keyboard.c:323:
+    ^I} else if (c < 0x10000) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: drivers/char/keyboard.c:323:
+    ^I} else if (c < 0x10000) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/char/keyboard.c:323:
+    ^I} else if (c < 0x10000) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: drivers/char/keyboard.c:324:
+^I       ^Iif (c >= 0xD800 && c < 0xE000)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: drivers/char/keyboard.c:324:
+^I       ^Iif (c >= 0xD800 && c < 0xE000)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: drivers/char/keyboard.c:332:
+    ^I} else if (c < 0x110000) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#238: FILE: drivers/char/keyboard.c:332:
+    ^I} else if (c < 0x110000) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: drivers/char/keyboard.c:332:
+    ^I} else if (c < 0x110000) {$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#323: FILE: drivers/char/selection.c:92:
+static inline int inword(const u16 c) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#324: FILE: drivers/char/selection.c:93:
+	return c > 0xff || (( inwordLut[c>>5] >> (c & 0x1F) ) & 1);
 	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#324: FILE: drivers/char/selection.c:93:
+	return c > 0xff || (( inwordLut[c>>5] >> (c & 0x1F) ) & 1);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#324: FILE: drivers/char/selection.c:93:
+	return c > 0xff || (( inwordLut[c>>5] >> (c & 0x1F) ) & 1);

CHECK:CAMELCASE: Avoid CamelCase: <inwordLut>
#324: FILE: drivers/char/selection.c:93:
+	return c > 0xff || (( inwordLut[c>>5] >> (c & 0x1F) ) & 1);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: drivers/char/selection.c:126:
+    ^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#344: FILE: drivers/char/selection.c:126:
+    ^I} else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: drivers/char/selection.c:126:
+    ^I} else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: drivers/char/selection.c:132:
+    ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#350: FILE: drivers/char/selection.c:132:
+    ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: drivers/char/selection.c:132:
+    ^I}$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#380: FILE: drivers/char/selection.c:271:
+	bp = kmalloc((sel_end-sel_start)/2*multiplier+1, GFP_KERNEL);
 	                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#380: FILE: drivers/char/selection.c:271:
+	bp = kmalloc((sel_end-sel_start)/2*multiplier+1, GFP_KERNEL);
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#380: FILE: drivers/char/selection.c:271:
+	bp = kmalloc((sel_end-sel_start)/2*multiplier+1, GFP_KERNEL);
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#380: FILE: drivers/char/selection.c:271:
+	bp = kmalloc((sel_end-sel_start)/2*multiplier+1, GFP_KERNEL);
 	                                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#412: FILE: include/linux/consolemap.h:15:
+extern u16 inverse_translate(struct vc_data *conp, int glyph, int use_unicode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#415: FILE: include/linux/consolemap.h:18:
+extern u32 conv_8bit_to_uni(unsigned char c);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423680.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 11 warnings, 10 checks, 323 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423680.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
