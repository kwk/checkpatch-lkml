WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
The following changes since commit 55b637c6a003a8c4850b41a2c2fd6942d8a7f530:

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '55b637c6a003a8c4850b41a2c2fd6942d8a7f530', maybe rebased or not pulled?
#48: 
The following changes since commit 55b637c6a003a8c4850b41a2c2fd6942d8a7f530:

WARNING:TYPO_SPELLING: 'supress' may be misspelled - perhaps 'suppress'?
#72: 
      kbuild: introduce __init_refok/__initdata_refok to supress section mismatch warnings
                                                         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#764: FILE: include/asm-generic/vmlinux.lds.h:15:
+	*(.data.init.refok)
 	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#774: FILE: include/asm-generic/vmlinux.lds.h:148:
+ * during second ld run in second ld pass when generating System.map */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#778: FILE: include/asm-generic/vmlinux.lds.h:152:
+		*(.text.init.refok)
 		^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#800: FILE: include/linux/init.h:57:
+ * The markers follow same syntax rules as __init / __initdata. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#801: FILE: include/linux/init.h:58:
+#define __init_refok     noinline __attribute__ ((__section__ (".text.init.refok")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#801: FILE: include/linux/init.h:58:
+#define __init_refok     noinline __attribute__ ((__section__ (".text.init.refok")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".text.init.refok") over __attribute__((__section__(".text.init.refok")))
#801: FILE: include/linux/init.h:58:
+#define __init_refok     noinline __attribute__ ((__section__ (".text.init.refok")))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#802: FILE: include/linux/init.h:59:
+#define __initdata_refok          __attribute__ ((__section__ (".data.init.refok")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#802: FILE: include/linux/init.h:59:
+#define __initdata_refok          __attribute__ ((__section__ (".data.init.refok")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.init.refok") over __attribute__((__section__(".data.init.refok")))
#802: FILE: include/linux/init.h:59:
+#define __initdata_refok          __attribute__ ((__section__ (".data.init.refok")))

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#816: FILE: init/main.c:426:
+static void noinline __init_refok rest_init(void)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#864: FILE: mm/sparse.c:47:
+static struct mem_section noinline __init_refok *sparse_index_alloc(int nid)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#911: FILE: scripts/mod/file2alias.c:356:
+    int len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#914: FILE: scripts/mod/file2alias.c:358:
+    len = sprintf (alias, "of:N%sT%s",$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#914: FILE: scripts/mod/file2alias.c:358:
+    len = sprintf (alias, "of:N%sT%s",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: scripts/mod/file2alias.c:359:
+    len = sprintf (alias, "of:N%sT%s",
                     of->name[0] ? of->name : "*",

ERROR:CODE_INDENT: code indent should use tabs where possible
#918: FILE: scripts/mod/file2alias.c:360:
+                    of->type[0] ? of->type : "*");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#918: FILE: scripts/mod/file2alias.c:360:
+                    of->type[0] ? of->type : "*");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: scripts/mod/file2alias.c:362:
+    if (of->compatible[0])$

ERROR:CODE_INDENT: code indent should use tabs where possible
#921: FILE: scripts/mod/file2alias.c:363:
+        sprintf (&alias[len], "%sC%s",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#921: FILE: scripts/mod/file2alias.c:363:
+        sprintf (&alias[len], "%sC%s",$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#921: FILE: scripts/mod/file2alias.c:363:
+        sprintf (&alias[len], "%sC%s",

ERROR:CODE_INDENT: code indent should use tabs where possible
#922: FILE: scripts/mod/file2alias.c:364:
+                     of->type[0] ? "*" : "",$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#922: FILE: scripts/mod/file2alias.c:364:
+        sprintf (&alias[len], "%sC%s",
+                     of->type[0] ? "*" : "",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#922: FILE: scripts/mod/file2alias.c:364:
+                     of->type[0] ? "*" : "",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#923: FILE: scripts/mod/file2alias.c:365:
+                     of->compatible);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#923: FILE: scripts/mod/file2alias.c:365:
+                     of->compatible);$

WARNING:TYPO_SPELLING: 'funtion' may be misspelled - perhaps 'function'?
#945: FILE: scripts/mod/modpost.c:588:
+ *   Do not warn if funtion/data are marked with __init_refok/__initdata_refok.
                     ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1049: FILE: scripts/mod/modpost.c:871:
+	 * powerpc has a GOT table in .got2 section */

WARNING:SPLIT_STRING: quoted string split across lines
#1058: FILE: scripts/mod/modpost.c:877:
+		warn("%s(%s+0x%llx): Section mismatch: reference to %s:%s "
+		     "(between '%s' and '%s')\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1071: FILE: scripts/mod/modpost.c:884:
+		warn("%s(%s+0x%llx): Section mismatch: reference to %s:%s "
+		     "(after '%s')\n",

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Rela>
#1096: FILE: scripts/mod/modpost.c:901:
+static void addend_386_rel(struct elf_info *elf, int section, Elf_Rela *r)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#1098: FILE: scripts/mod/modpost.c:903:
+	Elf_Shdr *sechdrs = elf->sechdrs;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1189: FILE: scripts/mod/modpost.c:1057:
+				if (hdr->e_machine == EM_386)
[...]
+				else if (hdr->e_machine == EM_ARM)
[...]
+				else if (hdr->e_machine == EM_MIPS) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1209: FILE: scripts/mod/modpost.h:64:
+  ((__extension__ (_Elf64_Mips_R_Info_union)(i)).r_info_fields.r_type1)$

CHECK:CAMELCASE: Avoid CamelCase: <_Elf64_Mips_R_Info_union>
#1209: FILE: scripts/mod/modpost.h:64:
+  ((__extension__ (_Elf64_Mips_R_Info_union)(i)).r_info_fields.r_type1)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000429426.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 23 warnings, 8 checks, 870 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000429426.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
