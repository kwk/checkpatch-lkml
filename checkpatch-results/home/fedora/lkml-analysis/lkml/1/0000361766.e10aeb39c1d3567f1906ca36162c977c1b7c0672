WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_wstat *' should also have an identifier name
#55: FILE: fs/9p/v9fs_vfs.h:49:
+void v9fs_stat2inode(struct p9_wstat *, struct inode *, struct super_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#55: FILE: fs/9p/v9fs_vfs.h:49:
+void v9fs_stat2inode(struct p9_wstat *, struct inode *, struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#55: FILE: fs/9p/v9fs_vfs.h:49:
+void v9fs_stat2inode(struct p9_wstat *, struct inode *, struct super_block *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: fs/9p/vfs_dir.c:86:
+		over = filldir(dirent, st->name, strlen(st->name), filp->f_pos,
 			v9fs_qid2ino(&st->qid), dt_type(st));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: fs/9p/vfs_inode.c:796:
+v9fs_stat2inode(struct p9_wstat *stat, struct inode *inode,
 	struct super_block *sb)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#142: FILE: fs/9p/vfs_inode.c:820:
+		sscanf(stat->extension, "%c %u %u", &type, &major, &minor);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#324: FILE: include/net/9p/9p.h:351:
+	/* The scatterlist contains the content of the message in
+	the wire format. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#324: FILE: include/net/9p/9p.h:351:
+	the wire format. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: include/net/9p/9p.h:399:
+struct p9_wstat *p9_deserialize_stat(struct p9_data *data, u32 offset,
 	int dotu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: include/net/9p/9p.h:421:
+struct p9_fcall *p9_create_twrite_sg(u32 fid, u64 offset, u32 count,
+	int sglen, struct scatterlist *sg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: include/net/9p/client.h:78:
+int p9_client_read_sg(struct p9_fid *fid, u64 offset, u32 count,
+	struct scatterlist *sg, int sglen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: include/net/9p/client.h:80:
+int p9_client_write_sg(struct p9_fid *fid, u64 offset, u32 count,
+	struct scatterlist *sg, int sglen);

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: net/9p/client.c:627:
+                err = p9_user_data_get(data, n, &rc->params.rread.data);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: net/9p/client.c:627:
+                err = p9_user_data_get(data, n, &rc->params.rread.data);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: net/9p/client.c:628:
+                if (err < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: net/9p/client.c:628:
+                if (err < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: net/9p/client.c:629:
+                        goto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: net/9p/client.c:629:
+                        goto error;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: net/9p/client.c:874:
+	ret = p9_deserialize_stat(&fid->rdir_fcall->params.rread.data, m,
+		clnt->dotu);

CHECK:SPACING: No space is necessary after a cast
#555: FILE: net/9p/client.c:912:
+	p = ((char *) ret) + sizeof(*ret);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#565: FILE: net/9p/client.c:922:
+	if ((err = p9_strcpy(p, &st->name)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#570: FILE: net/9p/client.c:927:
+	if ((err = p9_strcpy(p, &st->uid)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#575: FILE: net/9p/client.c:932:
+	if ((err = p9_strcpy(p, &st->gid)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#580: FILE: net/9p/client.c:937:
+	if ((err = p9_strcpy(p, &st->muid)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#589: FILE: net/9p/client.c:943:
+		if ((err = p9_strcpy(p, &st->extension)) < 0)

CHECK:BRACES: Unbalanced braces around else statement
#593: FILE: net/9p/client.c:947:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: net/9p/client.c:1113:
+				P9_DPRINTK(P9_DEBUG_ERROR, "unknown err: %s",
+					ename);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#708: FILE: net/9p/conv.c:83:
+				return;
+			else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#727: FILE: net/9p/conv.c:102:
+		/* if the entries in the scatterlist point to
+		   continuous memory, set the end pointer to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#728: FILE: net/9p/conv.c:103:
+		   the end of the last */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#766: FILE: net/9p/conv.c:139:
+	if (buf->sgcur >= 0 && buf->sgcur < buf->sglen &&
[...]
+	kunmap_atomic(sg_page(&buf->sg[buf->sgcur]), KM_USER0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: net/9p/conv.c:140:
+	if (buf->sgcur >= 0 && buf->sgcur < buf->sglen &&
+				PageHighMem(sg_page(&buf->sg[buf->sgcur])))

ERROR:SPACING: space required before the open parenthesis '('
#805: FILE: net/9p/conv.c:167:
+	for(i = buf->sgcur; i >= 0 && p != sg_page(&buf->sg[i]); i--)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: net/9p/conv.c:174:
+		P9_DPRINTK(P9_DEBUG_ERROR, "i %d sgcur %d sglen %d page %p\n",
+			i, buf->sgcur, buf->sglen, p);

ERROR:SPACING: space required before the open parenthesis '('
#814: FILE: net/9p/conv.c:176:
+		for(n = 0; n < buf->sglen; n++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: net/9p/conv.c:178:
+			P9_DPRINTK(P9_DEBUG_ERROR, "+++ %d page %p offset %d length %d\n",
+				n, sg_page(&buf->sg[n]), buf->sg[n].offset, buf->sg[n].length);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#820: FILE: net/9p/conv.c:181:
+	BUG_ON(i < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#840: FILE: net/9p/conv.c:196:
+		n = min(datalen, (int) (buf->ep - buf->p));

CHECK:SPACING: No space is necessary after a cast
#860: FILE: net/9p/conv.c:215:
+	p = (char *) data;

CHECK:SPACING: No space is necessary after a cast
#863: FILE: net/9p/conv.c:218:
+		n = min(datalen, (int) (buf->ep - buf->p));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#882: FILE: net/9p/conv.c:237:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#890: FILE: net/9p/conv.c:243:
+	} else

CHECK:SPACING: No space is necessary after a cast
#903: FILE: net/9p/conv.c:253:
+		*(__le16 *) buf->p = v;

CHECK:BRACES: Unbalanced braces around else statement
#905: FILE: net/9p/conv.c:255:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#920: FILE: net/9p/conv.c:267:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#935: FILE: net/9p/conv.c:279:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#991: FILE: net/9p/conv.c:347:
+		BUG_ON(datalen > 0);

CHECK:SPACING: No space is necessary after a cast
#1006: FILE: net/9p/conv.c:362:
+		n = min(datalen, (int) (buf->ep - buf->p));

CHECK:SPACING: No space is necessary after a cast
#1046: FILE: net/9p/conv.c:397:
+		v = *(__le16 *) buf->p;

CHECK:BRACES: Unbalanced braces around else statement
#1048: FILE: net/9p/conv.c:399:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1064: FILE: net/9p/conv.c:410:
+		v = *(__le32 *) buf->p;

CHECK:BRACES: Unbalanced braces around else statement
#1066: FILE: net/9p/conv.c:412:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1082: FILE: net/9p/conv.c:423:
+		v = *(__le64 *) buf->p;

CHECK:BRACES: Unbalanced braces around else statement
#1084: FILE: net/9p/conv.c:425:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1134: FILE: net/9p/conv.c:460:
+
+

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#1158: FILE: net/9p/conv.c:570:
+ * buf_get_wstat - safely decode a recieved metadata structure into
                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#1179: FILE: net/9p/conv.c:591:
+	buf = (char *) stat + sizeof(*stat);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1194: FILE: net/9p/conv.c:606:
+	if ((err = buf_strncpy(bufp, buf, n)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1200: FILE: net/9p/conv.c:612:
+	if ((err = buf_strncpy(bufp, buf, n)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1206: FILE: net/9p/conv.c:618:
+	if ((err = buf_strncpy(bufp, buf, n)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1212: FILE: net/9p/conv.c:624:
+	if ((err = buf_strncpy(bufp, buf, n)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1219: FILE: net/9p/conv.c:631:
+		if ((err = buf_strncpy(bufp, buf, n)) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1350: FILE: net/9p/conv.c:894:
+static int p9_put_data(struct cbuf *bufp, char *data, int datalen,
+	struct p9_data *dat)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1371: FILE: net/9p/conv.c:915:
+static int p9_put_user_data(struct cbuf *bufp, const char __user *data,
+	int datalen, struct p9_data *dat)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1459: FILE: net/9p/conv.c:986:
+        struct cbuf buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1459: FILE: net/9p/conv.c:986:
+        struct cbuf buffer;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1460: FILE: net/9p/conv.c:987:
+        struct cbuf *bufp = &buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1460: FILE: net/9p/conv.c:987:
+        struct cbuf *bufp = &buffer;$

CHECK:SPACING: No space is necessary after a cast
#1498: FILE: net/9p/conv.c:1018:
+	fc = (struct p9_fcall *) b;

CHECK:SPACING: No space is necessary after a cast
#1499: FILE: net/9p/conv.c:1019:
+	fc->sg = (struct scatterlist *) (b + sizeof(*fc));

CHECK:SPACING: No space is necessary after a cast
#1503: FILE: net/9p/conv.c:1023:
+	fc->sg[0].offset = (unsigned long) b % PAGE_SIZE;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1505: FILE: net/9p/conv.c:1025:
+	fc->sg[0].length = min((PAGE_SIZE - fc->sg[0].offset),
+		(unsigned long) (e - b));

CHECK:SPACING: No space is necessary after a cast
#1505: FILE: net/9p/conv.c:1025:
+		(unsigned long) (e - b));

ERROR:SPACING: space required before the open parenthesis '('
#1508: FILE: net/9p/conv.c:1028:
+	for(i = 1; b < e; i++, b += PAGE_SIZE) {

CHECK:SPACING: No space is necessary after a cast
#1511: FILE: net/9p/conv.c:1031:
+		fc->sg[i].length = min(PAGE_SIZE, (unsigned long) (e - b));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1541: FILE: net/9p/conv.c:1066:
+static inline struct p9_fcall *p9_fcall_create(struct cbuf *bufp, u32 size,
+	u8 id)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1550: FILE: net/9p/conv.c:1086:
+static inline struct p9_fcall *p9_fcall_check(struct p9_fcall *fc,
+	struct cbuf *bufp)

CHECK:SPACING: No space is necessary after a cast
#1580: FILE: net/9p/conv.c:1115:
+	*(__le16 *) (p + fc->sg[0].offset + 5) = cpu_to_le16(tag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1639: FILE: net/9p/conv.c:1175:
+struct p9_fcall *p9_create_tattach(u32 fid, u32 afid, char *uname, char *aname,
 	u32 n_uname, int dotu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1867: FILE: net/9p/conv.c:1379:
+struct p9_fcall *p9_create_twrite_sg(u32 fid, u64 offset, u32 count,
+	int sglen, struct scatterlist *sg)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fc)...) over kmalloc(sizeof(struct p9_fcall)...)
#1877: FILE: net/9p/conv.c:1389:
+	fc = kmalloc(sizeof(struct p9_fcall) + size +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#1883: FILE: net/9p/conv.c:1395:
+	fc->sg = (struct scatterlist *) ((char *) fc + sizeof(fc));

CHECK:SPACING: No space is necessary after a cast
#1884: FILE: net/9p/conv.c:1396:
+	data = (char *) fc->sg + (sglen + 1) * sizeof(struct scatterlist);

CHECK:SPACING: No space is necessary after a cast
#1886: FILE: net/9p/conv.c:1398:
+	fc->sg[0].offset = (unsigned long) data % PAGE_SIZE;

ERROR:SPACING: space required before the open parenthesis '('
#1888: FILE: net/9p/conv.c:1400:
+	for(i = 0; i < sglen; i++)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fc)...) over kmalloc(sizeof(struct p9_fcall)...)
#2015: FILE: net/9p/conv.c:1661:
+	fc = kmalloc(sizeof(struct p9_fcall) + size +

CHECK:SPACING: No space is necessary after a cast
#2021: FILE: net/9p/conv.c:1667:
+	fc->sg = (struct scatterlist *) ((char *) fc + sizeof(fc));

CHECK:SPACING: No space is necessary after a cast
#2022: FILE: net/9p/conv.c:1668:
+	data = (char *) fc->sg + (sglen + 1) * sizeof(struct scatterlist);

CHECK:SPACING: No space is necessary after a cast
#2024: FILE: net/9p/conv.c:1670:
+	fc->sg[0].offset = (unsigned long) data % PAGE_SIZE;

ERROR:SPACING: space required before the open parenthesis '('
#2026: FILE: net/9p/conv.c:1672:
+	for(i = 0; i < sglen; i++)

CHECK:SPACING: No space is necessary after a cast
#2053: FILE: net/9p/conv.c:1695:
+	*(__le32 *) (p + fc->sg[0].offset) = cpu_to_le32(n);

CHECK:SPACING: No space is necessary after a cast
#2054: FILE: net/9p/conv.c:1696:
+	*(__le32 *) (p + fc->sg[0].offset + 7) = cpu_to_le32(count);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2210: FILE: net/9p/fcprint.c:106:
+	n += scnprintf(buf+n, buflen-n, " '%s'", gid);
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2210: FILE: net/9p/fcprint.c:106:
+	n += scnprintf(buf+n, buflen-n, " '%s'", gid);
 	                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2215: FILE: net/9p/fcprint.c:110:
+	n += scnprintf(buf+n, buflen-n, " '%s'", muid);
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2215: FILE: net/9p/fcprint.c:110:
+	n += scnprintf(buf+n, buflen-n, " '%s'", muid);
 	                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2225: FILE: net/9p/fcprint.c:122:
+		n += scnprintf(buf+n, buflen-n, " ext '%s'", ext);
 		                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2225: FILE: net/9p/fcprint.c:122:
+		n += scnprintf(buf+n, buflen-n, " ext '%s'", ext);
 		                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2244: FILE: net/9p/fcprint.c:139:
+	if ((len = p9_data_get(b, sizeof(b), data)) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#2251: FILE: net/9p/fcprint.c:143:
+	for(i = 0; i < len && buflen > n; i++) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2367: FILE: net/9p/fcprint.c:241:
+			ret += scnprintf(buf+ret, buflen-ret, " '%s'", s);
 			                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2367: FILE: net/9p/fcprint.c:241:
+			ret += scnprintf(buf+ret, buflen-ret, " '%s'", s);
 			                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2399: FILE: net/9p/fcprint.c:300:
+		ret += p9_printdata(buf+ret, buflen-ret, &fc->params.rread.data);
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2399: FILE: net/9p/fcprint.c:300:
+		ret += p9_printdata(buf+ret, buflen-ret, &fc->params.rread.data);
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2409: FILE: net/9p/fcprint.c:309:
+		ret += p9_printdata(buf+ret, buflen-ret, &fc->params.twrite.data);
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2409: FILE: net/9p/fcprint.c:309:
+		ret += p9_printdata(buf+ret, buflen-ret, &fc->params.twrite.data);
 		                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2485: FILE: net/9p/ramfs/ramfs.c:668:
+		p9_data_get(file->data + offset, count,
+					&tc->params.twrite.data);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361766.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 22 errors, 18 warnings, 67 checks, 2381 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361766.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
