WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Linux now exposes signals, timers, and events via file descriptors through signalfd, timerfd, and eventfd. This means programmers can use a single select/[e]poll call to monitor all change in their program. This patch aims to expose child death via the same mechanism.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#84: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#89: FILE: fs/waitfd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#90: FILE: fs/waitfd.c:2:
+ *  fs/waitfd.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#108: FILE: fs/waitfd.c:20:
+long do_waitid(int which, pid_t upid,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: fs/waitfd.c:44:
+	value = do_waitid(ctx->which, ctx->upid, NULL,
+			   ctx->ops | WNOHANG | WNOWAIT, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: fs/waitfd.c:56:
+static ssize_t waitfd_read(struct file *file, char __user *buf, size_t count,
+			     loff_t *ppos)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#169: FILE: fs/waitfd.c:81:
+	return total ? total: ret;
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#186: FILE: fs/waitfd.c:98:
+	if (options & ~(WNOHANG|WEXITED|WSTOPPED|WCONTINUED))
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#186: FILE: fs/waitfd.c:98:
+	if (options & ~(WNOHANG|WEXITED|WSTOPPED|WCONTINUED))
 	                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#186: FILE: fs/waitfd.c:98:
+	if (options & ~(WNOHANG|WEXITED|WSTOPPED|WCONTINUED))
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#188: FILE: fs/waitfd.c:100:
+	if (!(options & (WEXITED|WSTOPPED|WCONTINUED)))
 	                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#188: FILE: fs/waitfd.c:100:
+	if (!(options & (WEXITED|WSTOPPED|WCONTINUED)))
 	                                 ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#214: FILE: init/Kconfig:686:
+config WAITFD
+	bool "Enable waitfd() system call" if EMBEDDED
+	select ANON_INODES
+	default y
+	help
+	  Enable the waitfd() system call that allows receving child state
+	  changes from a file descriptor.
+
+	  If unsure, say Y.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'receving' may be misspelled - perhaps 'receiving'?
#219: FILE: init/Kconfig:691:
+	  Enable the waitfd() system call that allows receving child state
 	                                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#318: FILE: kernel/exit.c:1782:
+	if (ret > 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#320: FILE: kernel/exit.c:1784:
+	else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000185341.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 7 warnings, 9 checks, 275 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000185341.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
