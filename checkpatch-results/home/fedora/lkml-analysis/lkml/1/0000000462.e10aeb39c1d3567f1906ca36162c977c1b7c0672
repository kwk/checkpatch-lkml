CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#40: FILE: arch/arm/mm/fault-armv.c:121:
+	vma_prio_tree_foreach(mpnt, struct vm_area_struct, shared, &iter,
+				&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#54: FILE: arch/arm/mm/flush.c:198:
+	vma_prio_tree_foreach(mpnt, struct vm_area_struct, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: arch/parisc/kernel/cache.c:369:
+	vma_prio_tree_foreach(mpnt, struct vm_area_struct, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: arch/x86/mm/hugetlbpage.c:78:
+	vma_prio_tree_foreach(svma, struct vm_area_struct, shared, &iter,
+					&mapping->i_mmap, idx, idx) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: fs/hugetlbfs/inode.c:404:
+	vma_prio_tree_foreach(vma, struct vm_area_struct, shared, &iter, root,
+						pgoff, ULONG_MAX) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: include/linux/mm.h:1201:
+void vma_prio_tree_add(union vma_prio_tree_node *node,
+	union vma_prio_tree_node *old);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union vma_prio_tree_node *' should also have an identifier name
#127: FILE: include/linux/mm.h:1202:
+void vma_prio_tree_insert(union vma_prio_tree_node *, struct prio_tree_root *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_root *' should also have an identifier name
#127: FILE: include/linux/mm.h:1202:
+void vma_prio_tree_insert(union vma_prio_tree_node *, struct prio_tree_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union vma_prio_tree_node *' should also have an identifier name
#128: FILE: include/linux/mm.h:1203:
+void vma_prio_tree_remove(union vma_prio_tree_node *, struct prio_tree_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_root *' should also have an identifier name
#128: FILE: include/linux/mm.h:1203:
+void vma_prio_tree_remove(union vma_prio_tree_node *, struct prio_tree_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union vma_prio_tree_node *' should also have an identifier name
#129: FILE: include/linux/mm.h:1204:
+union vma_prio_tree_node *vma_prio_tree_next(union vma_prio_tree_node *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: include/linux/mm.h:1205:
+union vma_prio_tree_node *vma_prio_tree_next(union vma_prio_tree_node *,
 	struct prio_tree_iter *iter);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'iter' - possible side-effects?
#135: FILE: include/linux/mm.h:1207:
+#define vma_prio_tree_first_entry(iter, type, field, root, begin, end)	\
+({									\
+	union vma_prio_tree_node *__t;					\
+	prio_tree_iter_init(iter, root, begin, end);			\
+	__t = vma_prio_tree_next(NULL, iter);				\
+	__t ? prio_tree_entry(__t, type, field) : NULL;\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#143: FILE: include/linux/mm.h:1215:
+#define vma_prio_tree_next_entry(obj, iter, type, field)		\
+({									\
+	union vma_prio_tree_node *__t;					\
+	__t = vma_prio_tree_next(&(obj)->field, iter);			\
+	__t ? prio_tree_entry(__t, type, field) : NULL;			\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#143: FILE: include/linux/mm.h:1215:
+#define vma_prio_tree_next_entry(obj, iter, type, field)		\
+({									\
+	union vma_prio_tree_node *__t;					\
+	__t = vma_prio_tree_next(&(obj)->field, iter);			\
+	__t ? prio_tree_entry(__t, type, field) : NULL;			\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'obj' - possible side-effects?
#150: FILE: include/linux/mm.h:1222:
+#define vma_prio_tree_foreach(obj, type, field, iter, root, begin, end)	\
+	for (obj = vma_prio_tree_first_entry(				\
+				iter, type, field, root, begin, end);	\
+	     obj ;							\
+	     obj = vma_prio_tree_next_entry(obj, iter, type, field))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#150: FILE: include/linux/mm.h:1222:
+#define vma_prio_tree_foreach(obj, type, field, iter, root, begin, end)	\
+	for (obj = vma_prio_tree_first_entry(				\
+				iter, type, field, root, begin, end);	\
+	     obj ;							\
+	     obj = vma_prio_tree_next_entry(obj, iter, type, field))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'iter' - possible side-effects?
#150: FILE: include/linux/mm.h:1222:
+#define vma_prio_tree_foreach(obj, type, field, iter, root, begin, end)	\
+	for (obj = vma_prio_tree_first_entry(				\
+				iter, type, field, root, begin, end);	\
+	     obj ;							\
+	     obj = vma_prio_tree_next_entry(obj, iter, type, field))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: mm/filemap_xip.c:187:
+	vma_prio_tree_foreach(vma, struct vm_area_struct, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: mm/hugetlb.c:2249:
+	vma_prio_tree_foreach(iter_vma, struct vm_area_struct, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: mm/memory.c:2419:
+	vma_prio_tree_foreach(vma, struct vm_area_struct, shared,
+				&iter, &mapping->i_mmap, 0, ULONG_MAX)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: mm/memory.c:2481:
+	vma_prio_tree_foreach(vma, struct vm_area_struct, shared, &iter, root,
 			details->first_index, details->last_index) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: mm/nommu.c:1945:
+	vma_prio_tree_foreach(vma, struct vm_area_struct, shared, &iter,
+				&inode->i_mapping->i_mmap, low, high) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: mm/nommu.c:1961:
+	vma_prio_tree_foreach(vma, struct vm_area_struct, shared, &iter,
+				&inode->i_mapping->i_mmap, 0, ULONG_MAX) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#455: FILE: mm/prio_tree.c:81:
+	if (!old->vm_set.parent)
[...]
+	else if (old->vm_set.head)
[...]
 	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: mm/prio_tree.c:85:
+		list_add_tail(&node->vm_set.list,
+				&old->vm_set.head->vm_set.list);

CHECK:SPACING: No space is necessary after a cast
#487: FILE: mm/prio_tree.c:102:
+	if (ptr != (struct prio_tree_node *) &node->prio_tree_node) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: mm/prio_tree.c:104:
+		old = prio_tree_entry(ptr, union vma_prio_tree_node,
+				prio_tree_node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#516: FILE: mm/prio_tree.c:121:
+		BUG_ON(target->vm_set.head->vm_set.head != target);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#519: FILE: mm/prio_tree.c:124:
+			if (!list_empty(&head->vm_set.list)) {
[...]
-				list_del_init(&head->shared.vm_set.list);
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: mm/prio_tree.c:133:
+			raw_prio_tree_replace(root, &target->prio_tree_node,
+					&head->prio_tree_node);

CHECK:BRACES: braces {} should be used on all arms of this statement
#545: FILE: mm/prio_tree.c:140:
+			if (!list_empty(&target->vm_set.list)) {
[...]
-				new_head->shared.vm_set.head = node;
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: mm/prio_tree.c:159:
+union vma_prio_tree_node *vma_prio_tree_next(union vma_prio_tree_node *node,
 					struct prio_tree_iter *iter)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: mm/prio_tree.c:171:
+			next = prio_tree_entry(ptr, union vma_prio_tree_node,
+						prio_tree_node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: mm/prio_tree.c:186:
+		next = list_entry(node->vm_set.list.next,
+				union vma_prio_tree_node, vm_set.list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: mm/prio_tree.c:196:
+		next = prio_tree_entry(ptr, union vma_prio_tree_node,
+					prio_tree_node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: mm/rmap.c:566:
+	vma_prio_tree_foreach(vma, struct vm_area_struct, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: mm/rmap.c:672:
+	vma_prio_tree_foreach(vma, struct vm_area_struct, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: mm/rmap.c:1188:
+	vma_prio_tree_foreach(vma, struct vm_area_struct, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: mm/rmap.c:1379:
+	vma_prio_tree_foreach(vma, struct vm_area_struct, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000462.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 34 checks, 535 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000462.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
