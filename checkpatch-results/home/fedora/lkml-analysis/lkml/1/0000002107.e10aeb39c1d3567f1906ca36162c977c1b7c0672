WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
> To unsubscribe from this list: send the line "unsubscribe linux-kernel" in

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#77: FILE: arch/x86/Kconfig:1817:
+config BIGPHYS_AREA
+        bool "Support for big physical area reservation"
+	depends on X86_32
+        ---help---
+          Enables kernel support for reserving large areas of physical memory
+          at boot-time for use by certain device drivers (such as video
+          framegrabbers, etc.) which require it. To use this feature, boot
+          the kernel with the boot-time option 'bigphysarea=nnn' where
+          'nnn' is the number of pages (a page is usually 4K) to reserve.
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'garantee' may be misspelled - perhaps 'guarantee'?
#100: FILE: Documentation/bigphysarea.txt:8:
+is unable to garantee allocs of this order during a prolonged
              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: Documentation/bigphysarea.txt:47:
+with 'base' set to the value returned by 'bigphysarea_alloc_pages'. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'continous' may be misspelled - perhaps 'continuous'?
#148: FILE: Documentation/bigphysarea.txt:56:
+The first function allocates 'size' bytes physically continous
                                                      ^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#159: FILE: include/linux/bigphysarea.h:1:
+/* linux/mm/bigphysarea.h, M. Welsh (mdw@cs.cornell.edu)

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/linux/bigphysarea.h:22:
+extern caddr_t	bigphysarea_alloc(int size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#181: FILE: include/linux/bigphysarea.h:23:
+extern void	bigphysarea_free(caddr_t addr, int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: include/linux/bigphysarea.h:26:
+extern caddr_t	bigphysarea_alloc_pages(int count, int align, int priority);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: include/linux/bigphysarea.h:27:
+extern void	bigphysarea_free_pages(caddr_t base);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#207: FILE: kernel/kallsyms.c:372:
+EXPORT_SYMBOL(bigphysarea_free);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#208: FILE: kernel/kallsyms.c:373:
+EXPORT_SYMBOL(bigphysarea_alloc_pages);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#209: FILE: kernel/kallsyms.c:374:
+EXPORT_SYMBOL(bigphysarea_free_pages);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#219: FILE: mm/bigphysarea.c:1:
+/* linux/mm/bigphysarea.c, M. Welsh (mdw@cs.cornell.edu)

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#219: FILE: mm/bigphysarea.c:1:
+/* linux/mm/bigphysarea.c, M. Welsh (mdw@cs.cornell.edu)

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: mm/bigphysarea.c:6:
+ * Extended and adapted for linux-2.6.x $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: mm/bigphysarea.c:9:
+ * This is a set of routines which allow you to reserve a large (?) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: mm/bigphysarea.c:11:
+ * by drivers. This memory is intended to be used for devices such as $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: mm/bigphysarea.c:20:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#245: FILE: mm/bigphysarea.c:27:
+ *   along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#246: FILE: mm/bigphysarea.c:28:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: mm/bigphysarea.c:47:
+static int read_proc(char *page, char **start, off_t off,
+		int count, int *eof, void *data);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#267: FILE: mm/bigphysarea.c:49:
+typedef struct range_struct {

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#278: FILE: mm/bigphysarea.c:60:
+static int	init_level = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#279: FILE: mm/bigphysarea.c:61:
+static int	bigphysarea_pages = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#280: FILE: mm/bigphysarea.c:62:
+static caddr_t	bigphysarea = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#281: FILE: mm/bigphysarea.c:63:
+static range_t	*free_list = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#282: FILE: mm/bigphysarea.c:64:
+static range_t	*used_list = NULL;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#283: FILE: mm/bigphysarea.c:65:
+static struct resource mem_resource = { "Bigphysarea", 0, 0, IORESOURCE_MEM|IORESOURCE_BUSY };
                                                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: mm/bigphysarea.c:70:
+        struct proc_dir_entry *res;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: mm/bigphysarea.c:70:
+        struct proc_dir_entry *res;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: mm/bigphysarea.c:76:
+        res = create_proc_entry("bigphysarea", 0444, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: mm/bigphysarea.c:76:
+        res = create_proc_entry("bigphysarea", 0444, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: mm/bigphysarea.c:77:
+        if (!res) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: mm/bigphysarea.c:77:
+        if (!res) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#295: FILE: mm/bigphysarea.c:77:
+        if (!res) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#300: FILE: mm/bigphysarea.c:82:
+/*		free_bootmem((unsigned long)bigphysarea>>PAGE_SHIFT,bigphysarea_pages<<PAGE_SHIFT);
+		bigphysarea = 0;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#304: FILE: mm/bigphysarea.c:86:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#309: FILE: mm/bigphysarea.c:91:
+	printk(KERN_INFO "bigphysarea: Allocated %d pages at 0x%p.\n",

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#315: FILE: mm/bigphysarea.c:97:
+__initcall(bigphysarea_init);

WARNING:LINE_SPACING: Missing a blank line after declarations
#328: FILE: mm/bigphysarea.c:110:
+	int par;
+	if (get_option(&str,&par)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#328: FILE: mm/bigphysarea.c:110:
+	if (get_option(&str,&par)) {
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#328: FILE: mm/bigphysarea.c:110:
+	if (get_option(&str,&par)) {
 	                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#331: FILE: mm/bigphysarea.c:113:
+		bigphysarea = alloc_bootmem_low_pages(bigphysarea_pages<<PAGE_SHIFT);
 		                                                       ^

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#333: FILE: mm/bigphysarea.c:115:
+			printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#333: FILE: mm/bigphysarea.c:115:
+			printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: mm/bigphysarea.c:115:
+			printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);
 			                                                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#339: FILE: mm/bigphysarea.c:121:
+		mem_resource.end = mem_resource.start + (bigphysarea_pages<<PAGE_SHIFT);
 		                                                          ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#345: FILE: mm/bigphysarea.c:127:
+__setup("bigphysarea=", bigphysarea_setup);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "free_list"
#356: FILE: mm/bigphysarea.c:138:
+		if (free_list != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#367: FILE: mm/bigphysarea.c:149:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#377: FILE: mm/bigphysarea.c:159:
+	caddr_t aligned_base=0;
 	                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range_ptr"
#393: FILE: mm/bigphysarea.c:175:
+	while (*range_ptr != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: mm/bigphysarea.c:179:
+^I^Iif (aligned_base + count * PAGE_SIZE <= $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!range_ptr"
#402: FILE: mm/bigphysarea.c:184:
+	if (*range_ptr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_range"
#414: FILE: mm/bigphysarea.c:196:
+		if (new_range == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!align_range"
#419: FILE: mm/bigphysarea.c:201:
+		if (align_range == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_range"
#420: FILE: mm/bigphysarea.c:202:
+			if (new_range != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_range"
#432: FILE: mm/bigphysarea.c:214:
+	if (new_range != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: mm/bigphysarea.c:247:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: mm/bigphysarea.c:247:
+  $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range_ptr"
#470: FILE: mm/bigphysarea.c:252:
+	     *range_ptr != NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!range_ptr"
#474: FILE: mm/bigphysarea.c:256:
+	if (*range_ptr == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#475: FILE: mm/bigphysarea.c:257:
+		printk("bigphysarea_free_pages(0x%08x), not allocated!\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bigphysarea_free_pages', this function's name, in a string
#475: FILE: mm/bigphysarea.c:257:
+		printk("bigphysarea_free_pages(0x%08x), not allocated!\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#476: FILE: mm/bigphysarea.c:258:
+		       (unsigned)base);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range_ptr"
#489: FILE: mm/bigphysarea.c:271:
+	     *range_ptr != NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range->next"
#500: FILE: mm/bigphysarea.c:282:
+	if (range->next != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#507: FILE: mm/bigphysarea.c:289:
+	if (prev != NULL &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: mm/bigphysarea.c:311:
+                                 int count, int *eof, int len)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#529: FILE: mm/bigphysarea.c:311:
+static int proc_calc_metrics(char *page, char **start, off_t off,
+                                 int count, int *eof, int len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: mm/bigphysarea.c:311:
+                                 int count, int *eof, int len)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: mm/bigphysarea.c:313:
+        if (len <= off+count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: mm/bigphysarea.c:313:
+        if (len <= off+count)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#531: FILE: mm/bigphysarea.c:313:
+        if (len <= off+count)
                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#533: FILE: mm/bigphysarea.c:315:
+        *start = page + off;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: mm/bigphysarea.c:315:
+        *start = page + off;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: mm/bigphysarea.c:316:
+        len -= off;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: mm/bigphysarea.c:316:
+        len -= off;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#535: FILE: mm/bigphysarea.c:317:
+        if (len>count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#535: FILE: mm/bigphysarea.c:317:
+        if (len>count)$

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#535: FILE: mm/bigphysarea.c:317:
+        if (len>count)
                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#537: FILE: mm/bigphysarea.c:319:
+        if (len<0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: mm/bigphysarea.c:319:
+        if (len<0)$

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#537: FILE: mm/bigphysarea.c:319:
+        if (len<0)
                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#539: FILE: mm/bigphysarea.c:321:
+        return len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: mm/bigphysarea.c:321:
+        return len;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: mm/bigphysarea.c:326:
+int read_proc(char *page, char **start, off_t off,
+		int count, int *eof, void *data)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#551: FILE: mm/bigphysarea.c:333:
+	if (init_level == 1)
+	  init2(GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptr"
#557: FILE: mm/bigphysarea.c:339:
+	for (ptr = free_list; ptr != NULL; ptr = ptr->next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptr"
#567: FILE: mm/bigphysarea.c:349:
+	for (ptr = used_list; ptr != NULL; ptr = ptr->next) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#577: FILE: mm/bigphysarea.c:359:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#577: FILE: mm/bigphysarea.c:359:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: mm/bigphysarea.c:361:
+		len = sprintf(page,
+			"Big physical area, size %ld kB\n"

CHECK:SPACING: spaces preferred around that '/' (ctx:WxV)
#587: FILE: mm/bigphysarea.c:369:
+		     free_total / 1024, used_total /1024);
 		                                   ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000002107.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 32 errors, 32 warnings, 31 checks, 505 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000002107.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
