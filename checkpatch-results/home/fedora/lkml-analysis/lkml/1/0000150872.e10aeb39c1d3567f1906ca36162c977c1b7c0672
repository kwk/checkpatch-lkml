ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#54: FILE: kerneltop.c:124:
+#define rmb()		asm volatile("lfence" ::: "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#54: FILE: kerneltop.c:124:
+#define rmb()		asm volatile("lfence" ::: "memory")

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#55: FILE: kerneltop.c:125:
+#define cpu_relax()	asm volatile("rep; nop" ::: "memory");

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#55: FILE: kerneltop.c:125:
+#define cpu_relax()	asm volatile("rep; nop" ::: "memory");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#61: FILE: kerneltop.c:130:
+#define rmb()		asm volatile("lfence" ::: "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#61: FILE: kerneltop.c:130:
+#define rmb()		asm volatile("lfence" ::: "memory")

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#62: FILE: kerneltop.c:131:
+#define cpu_relax()	asm volatile("rep; nop" ::: "memory");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#62: FILE: kerneltop.c:131:
+#define cpu_relax()	asm volatile("rep; nop" ::: "memory");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#67: FILE: kerneltop.c:136:
+#define rmb() ^I^Iasm volatile ("sync" ::: "memory")$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#67: FILE: kerneltop.c:136:
+#define rmb() 		asm volatile ("sync" ::: "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#67: FILE: kerneltop.c:136:
+#define rmb() 		asm volatile ("sync" ::: "memory")

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#68: FILE: kerneltop.c:137:
+#define cpu_relax()	asm volatile ("" ::: "memory");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#68: FILE: kerneltop.c:137:
+#define cpu_relax()	asm volatile ("" ::: "memory");

WARNING:MEMORY_BARRIER: memory barrier without comment
#101: FILE: kerneltop.c:1143:
+	rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#111: FILE: kerneltop.c:1153:
+	rmb();

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: kerneltop.c:1173:
+		__u64 *ptr = (__u64 *)&data[old & md->mask];
+		old += sizeof(__u64);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#171: FILE: kerneltop.c:1240:
+			mmap_array[i][counter].mask = 2*page_size - 1;
 			                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#172: FILE: kerneltop.c:1241:
+			mmap_array[i][counter].base = mmap(NULL, 3*page_size,
 			                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: kerneltop.c:1242:
+			mmap_array[i][counter].base = mmap(NULL, 3*page_size,
+					PROT_READ, MAP_SHARED, fd[i][counter], 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: kerneltop.c:1245:
+				printf("kerneltop error: failed to mmap with %d (%s)\n",
+						errno, strerror(errno));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150872.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 10 warnings, 4 checks, 152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150872.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
