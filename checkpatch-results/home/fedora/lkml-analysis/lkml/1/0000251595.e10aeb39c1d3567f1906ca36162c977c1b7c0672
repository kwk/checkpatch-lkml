WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git cpus4096-for-linus

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around data->available_cores
#285: FILE: arch/x86/kernel/cpu/cpufreq/powernow-k8.c:970:
+	for_each_cpu_mask_nr(i, *(data->available_cores)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around data->available_cores
#294: FILE: arch/x86/kernel/cpu/cpufreq/powernow-k8.c:978:
+	for_each_cpu_mask_nr(i, *(data->available_cores)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around data->available_cores
#303: FILE: arch/x86/kernel/cpu/cpufreq/powernow-k8.c:1001:
+	for_each_cpu_mask_nr(i, *(data->available_cores)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around data->available_cores
#312: FILE: arch/x86/kernel/cpu/cpufreq/powernow-k8.c:1009:
+	for_each_cpu_mask_nr(i, *(data->available_cores)) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#396: FILE: arch/x86/kernel/cpu/cpufreq/speedstep-centrino.c:70:
 };
+static int centrino_verify_cpu_id(const struct cpuinfo_x86 *c,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#466: FILE: arch/x86/kernel/cpu/cpufreq/speedstep-centrino.c:316:
+		return per_cpu(centrino_model, cpu)->op_points[i-1].frequency;
 		                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#509: FILE: arch/x86/kernel/cpu/cpufreq/speedstep-centrino.c:402:
+			printk(KERN_INFO PFX

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: arch/x86/kernel/cpu/cpufreq/speedstep-centrino.c:416:
+	ret = cpufreq_frequency_table_cpuinfo(policy,
+		per_cpu(centrino_model, policy->cpu)->op_points);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#531: FILE: arch/x86/kernel/cpu/cpufreq/speedstep-centrino.c:420:
+	cpufreq_frequency_table_get_attr(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!allmasks"
#599: FILE: arch/x86/kernel/cpu/cpufreq/speedstep-centrino.c:484:
+	if (unlikely(allmasks == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!per_cpu"
#602: FILE: arch/x86/kernel/cpu/cpufreq/speedstep-centrino.c:487:
+	if (unlikely(per_cpu(centrino_model, cpu) == NULL)) {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#803: FILE: arch/x86/kernel/cpu/mcheck/mce_64.c:583:
+	cpu_tsc = kmalloc(nr_cpu_ids * sizeof(long), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#851: FILE: arch/x86/kernel/genapic_flat_64.c:171:
+	if ((unsigned)cpu < nr_cpu_ids)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#873: FILE: arch/x86/kernel/genx2apic_uv_x.c:131:
+	if ((unsigned)cpu < nr_cpu_ids)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1031: FILE: arch/x86/kernel/reboot.c:409:
+	int reboot_cpu_id = 0;
+	cpumask_of_cpu_ptr(newmask, reboot_cpu_id);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1204: FILE: drivers/base/cpu.c:122:
+static struct sysdev_class_attribute attr_##type##_map = ^I^I\$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1334: FILE: drivers/cpufreq/cpufreq_userspace.c:37:
+static DEFINE_PER_CPU(unsigned int, cpu_set_freq); /* CPU freq desired by
+							userspace */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1334: FILE: drivers/cpufreq/cpufreq_userspace.c:37:
+							userspace */

WARNING:SPLIT_STRING: quoted string split across lines
#1408: FILE: drivers/cpufreq/cpufreq_userspace.c:138:
+		dprintk("managing cpu %u started "
+			"(%u - %u kHz, currently %u kHz)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#1660: FILE: include/linux/cpumask.h:280:
+#define	cpumask_of_cpu_ptr(v, cpu)					\
+		const cpumask_t *v = &cpumask_of_cpu(cpu)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#1662: FILE: include/linux/cpumask.h:282:
+#define	cpumask_of_cpu_ptr_declare(v)					\
+		const cpumask_t *v

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1664: FILE: include/linux/cpumask.h:284:
+#define cpumask_of_cpu_ptr_next(v, cpu)					\
+					v = &cpumask_of_cpu(cpu)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1681: FILE: include/linux/cpumask.h:298:
+#define^Icpumask_of_cpu_ptr(v, cpu) ^I^I^I^I^I\$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#1681: FILE: include/linux/cpumask.h:298:
+#define	cpumask_of_cpu_ptr(v, cpu) 					\
+		cpumask_t _##v = cpumask_of_cpu(cpu);			\
+		const cpumask_t *v = &_##v

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#1684: FILE: include/linux/cpumask.h:301:
+#define	cpumask_of_cpu_ptr_declare(v)					\
+		cpumask_t _##v;						\
+		const cpumask_t *v = &_##v

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1687: FILE: include/linux/cpumask.h:304:
+#define cpumask_of_cpu_ptr_next(v, cpu)					\
+					_##v = cpumask_of_cpu(cpu)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#1697: FILE: include/linux/cpumask.h:346:
+#define	CPUMASK_ALLOC(m)	struct m *m = kmalloc(sizeof(*m), GFP_KERNEL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#1697: FILE: include/linux/cpumask.h:346:
+#define	CPUMASK_ALLOC(m)	struct m *m = kmalloc(sizeof(*m), GFP_KERNEL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#1700: FILE: include/linux/cpumask.h:349:
+#define	CPUMASK_ALLOC(m)	struct m _m, *m = &_m

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1703: FILE: include/linux/cpumask.h:352:
+#define^ICPUMASK_PTR(v, m) ^Icpumask_t *v = &(m->v)$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around m->v
#1703: FILE: include/linux/cpumask.h:352:
+#define	CPUMASK_PTR(v, m) 	cpumask_t *v = &(m->v)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#1703: FILE: include/linux/cpumask.h:352:
+#define	CPUMASK_PTR(v, m) 	cpumask_t *v = &(m->v)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#1703: FILE: include/linux/cpumask.h:352:
+#define	CPUMASK_PTR(v, m) 	cpumask_t *v = &(m->v)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#1703: FILE: include/linux/cpumask.h:352:
+#define	CPUMASK_PTR(v, m) 	cpumask_t *v = &(m->v)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#1725: FILE: include/linux/cpumask.h:422:
+#define for_each_cpu_mask(cpu, mask)	\
 	for ((cpu) = 0; (cpu) < 1; (cpu)++, (void)mask)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#1739: FILE: include/linux/cpumask.h:435:
+#define for_each_cpu_mask(cpu, mask)			\
+	for ((cpu) = -1;				\
+		(cpu) = next_cpu((cpu), (mask)),	\
+		(cpu) < NR_CPUS; )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1742: FILE: include/linux/cpumask.h:438:
+		(cpu) < NR_CPUS; )

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1742: FILE: include/linux/cpumask.h:438:
+		(cpu) < NR_CPUS; )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#1756: FILE: include/linux/cpumask.h:452:
+#define for_each_cpu_mask_nr(cpu, mask)			\
+	for ((cpu) = -1;				\
+		(cpu) = next_cpu_nr((cpu), (mask)),	\
+		(cpu) < nr_cpu_ids; )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1759: FILE: include/linux/cpumask.h:455:
+		(cpu) < nr_cpu_ids; )

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2256: FILE: lib/cpumask.c:22:
+				find_next_bit(srcp->bits, nr_cpu_ids, n+1));
 				                                       ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000251595.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 13 warnings, 25 checks, 1868 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000251595.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
