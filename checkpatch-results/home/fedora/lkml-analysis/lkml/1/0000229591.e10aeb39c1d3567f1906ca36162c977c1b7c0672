WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#53: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#508: FILE: arch/x86/mm/numa_32.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#510: FILE: arch/x86/mm/numa_32.c:3:
+ * August 2002: added remote node KVA remap - Martin J. Bligh $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: arch/x86/mm/numa_32.c:7:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#528: FILE: arch/x86/mm/numa_32.c:21:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#529: FILE: arch/x86/mm/numa_32.c:22:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmzone.h> instead of <asm/mmzone.h>
#546: FILE: arch/x86/mm/numa_32.c:39:
+#include <asm/mmzone.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#564: FILE: arch/x86/mm/numa_32.c:57:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#585: FILE: arch/x86/mm/numa_32.c:78:
+	printk(KERN_INFO "Node: %d, start_pfn: %lx, end_pfn: %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: arch/x86/mm/numa_32.c:79:
+	printk(KERN_INFO "Node: %d, start_pfn: %lx, end_pfn: %lx\n",
+			nid, start, end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#587: FILE: arch/x86/mm/numa_32.c:80:
+	printk(KERN_DEBUG "  Setting physnode_map array to node %d for pfns:\n", nid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#588: FILE: arch/x86/mm/numa_32.c:81:
+	printk(KERN_DEBUG "  ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#591: FILE: arch/x86/mm/numa_32.c:84:
+		printk(KERN_CONT "%lx ", pfn);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#591: FILE: arch/x86/mm/numa_32.c:84:
+		printk(KERN_CONT "%lx ", pfn);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#593: FILE: arch/x86/mm/numa_32.c:86:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#593: FILE: arch/x86/mm/numa_32.c:86:
+	printk(KERN_CONT "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: arch/x86/mm/numa_32.c:90:
+unsigned long node_memmap_size_bytes(int nid, unsigned long start_pfn,
+					      unsigned long end_pfn)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#609: FILE: arch/x86/mm/numa_32.c:102:
+extern unsigned long highend_pfn, highstart_pfn;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#615: FILE: arch/x86/mm/numa_32.c:108:
+void set_pmd_pfn(unsigned long vaddr, unsigned long pfn, pgprot_t flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#626: FILE: arch/x86/mm/numa_32.c:119:
+	printk(KERN_DEBUG "NUMA - single node, flat memory mode\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: arch/x86/mm/numa_32.c:127:
+        /* Indicate there is one node available. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: arch/x86/mm/numa_32.c:141:
+^I * if a user has given mem=XXXX, then we need to make sure $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#653: FILE: arch/x86/mm/numa_32.c:146:
+	BUG_ON(node_start_pfn[nid] > node_end_pfn[nid]);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#656: FILE: arch/x86/mm/numa_32.c:149:
+/* $

CHECK:BRACES: braces {} should be used on all arms of this statement
#667: FILE: arch/x86/mm/numa_32.c:160:
+	if (node_has_online_mem(nid) && node_remap_start_vaddr[nid])
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#669: FILE: arch/x86/mm/numa_32.c:162:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#671: FILE: arch/x86/mm/numa_32.c:164:
+		unsigned long pgdat_phys;
+		pgdat_phys = find_e820_area(min_low_pfn<<PAGE_SHIFT,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#671: FILE: arch/x86/mm/numa_32.c:164:
+		pgdat_phys = find_e820_area(min_low_pfn<<PAGE_SHIFT,
 		                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: arch/x86/mm/numa_32.c:165:
+		pgdat_phys = find_e820_area(min_low_pfn<<PAGE_SHIFT,
+				 max_pfn_mapped<<PAGE_SHIFT,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#672: FILE: arch/x86/mm/numa_32.c:165:
+				 max_pfn_mapped<<PAGE_SHIFT,
 				               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#675: FILE: arch/x86/mm/numa_32.c:168:
+		NODE_DATA(nid) = (pg_data_t *)(pfn_to_kaddr(pgdat_phys>>PAGE_SHIFT));
 		                                                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#680: FILE: arch/x86/mm/numa_32.c:173:
+	printk(KERN_DEBUG "allocate_pgdat: node %d NODE_DATA %08lx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'allocate_pgdat', this function's name, in a string
#680: FILE: arch/x86/mm/numa_32.c:173:
+	printk(KERN_DEBUG "allocate_pgdat: node %d NODE_DATA %08lx\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: arch/x86/mm/numa_32.c:174:
+	printk(KERN_DEBUG "allocate_pgdat: node %d NODE_DATA %08lx\n",
+		nid, (unsigned long)NODE_DATA(nid));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#719: FILE: arch/x86/mm/numa_32.c:212:
+		printk(KERN_DEBUG "remap_numa_kva: node %d\n", node);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'remap_numa_kva', this function's name, in a string
#719: FILE: arch/x86/mm/numa_32.c:212:
+		printk(KERN_DEBUG "remap_numa_kva: node %d\n", node);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#720: FILE: arch/x86/mm/numa_32.c:213:
+		for (pfn=0; pfn < node_remap_size[node]; pfn += PTRS_PER_PTE) {
 		        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#721: FILE: arch/x86/mm/numa_32.c:214:
+			vaddr = node_remap_start_vaddr[node]+(pfn<<PAGE_SHIFT);
 			                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#721: FILE: arch/x86/mm/numa_32.c:214:
+			vaddr = node_remap_start_vaddr[node]+(pfn<<PAGE_SHIFT);
 			                                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#722: FILE: arch/x86/mm/numa_32.c:215:
+			printk(KERN_DEBUG "remap_numa_kva: %08lx to pfn %08lx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'remap_numa_kva', this function's name, in a string
#722: FILE: arch/x86/mm/numa_32.c:215:
+			printk(KERN_DEBUG "remap_numa_kva: %08lx to pfn %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: arch/x86/mm/numa_32.c:216:
+			printk(KERN_DEBUG "remap_numa_kva: %08lx to pfn %08lx\n",
+				(unsigned long)vaddr,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#725: FILE: arch/x86/mm/numa_32.c:218:
+^I^I^Iset_pmd_pfn((ulong) vaddr, $

CHECK:SPACING: No space is necessary after a cast
#725: FILE: arch/x86/mm/numa_32.c:218:
+			set_pmd_pfn((ulong) vaddr, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#726: FILE: arch/x86/mm/numa_32.c:219:
+^I^I^I^Inode_remap_start_pfn[node] + pfn, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: arch/x86/mm/numa_32.c:219:
+			set_pmd_pfn((ulong) vaddr, 
+				node_remap_start_pfn[node] + pfn, 

WARNING:TYPO_SPELLING: 'memroy' may be misspelled - perhaps 'memory'?
#742: FILE: arch/x86/mm/numa_32.c:235:
+		 * The acpi/srat node info can show hot-add memroy zones
 		                                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#745: FILE: arch/x86/mm/numa_32.c:238:
+		printk(KERN_DEBUG "node %d pfn: [%lx - %lx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: arch/x86/mm/numa_32.c:239:
+		printk(KERN_DEBUG "node %d pfn: [%lx - %lx]\n",
+			nid, node_start_pfn[nid], node_end_pfn[nid]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#763: FILE: arch/x86/mm/numa_32.c:256:
+		node_kva_target = round_down(node_end_pfn[nid] - size,
+						 PTRS_PER_PTE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: arch/x86/mm/numa_32.c:260:
+			node_kva_final = find_e820_area(node_kva_target,
+					((u64)node_end_pfn[nid])<<PAGE_SHIFT,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#767: FILE: arch/x86/mm/numa_32.c:260:
+					((u64)node_end_pfn[nid])<<PAGE_SHIFT,
 					                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#768: FILE: arch/x86/mm/numa_32.c:261:
+						((u64)size)<<PAGE_SHIFT,
 						           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#772: FILE: arch/x86/mm/numa_32.c:265:
+			 (node_kva_target>>PAGE_SHIFT) > (node_start_pfn[nid]));
 			                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#780: FILE: arch/x86/mm/numa_32.c:273:
+		printk(KERN_DEBUG "Reserving %ld pages of KVA for lmem_map of"

WARNING:SPLIT_STRING: quoted string split across lines
#781: FILE: arch/x86/mm/numa_32.c:274:
+		printk(KERN_DEBUG "Reserving %ld pages of KVA for lmem_map of"
+				  " node %d at %llx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#782: FILE: arch/x86/mm/numa_32.c:275:
+				size, nid, node_kva_final>>PAGE_SHIFT);
 				                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#796: FILE: arch/x86/mm/numa_32.c:289:
+			      node_kva_final+(((u64)size)<<PAGE_SHIFT),
 			                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#796: FILE: arch/x86/mm/numa_32.c:289:
+			      node_kva_final+(((u64)size)<<PAGE_SHIFT),
 			                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#799: FILE: arch/x86/mm/numa_32.c:292:
+		node_remap_start_pfn[nid] = node_kva_final>>PAGE_SHIFT;
 		                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#801: FILE: arch/x86/mm/numa_32.c:294:
+		remove_active_range(nid, node_remap_start_pfn[nid],
+					 node_remap_start_pfn[nid] + size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#803: FILE: arch/x86/mm/numa_32.c:296:
+	printk(KERN_INFO "Reserving total of %lx pages for numa KVA remap\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: arch/x86/mm/numa_32.c:297:
+	printk(KERN_INFO "Reserving total of %lx pages for numa KVA remap\n",
+			reserve_pages);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#810: FILE: arch/x86/mm/numa_32.c:303:
+	node_remap_start_vaddr[nid] = pfn_to_kaddr(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#817: FILE: arch/x86/mm/numa_32.c:310:
+	printk(KERN_DEBUG "node %d will remap to vaddr %08lx - %08lx\n", nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#818: FILE: arch/x86/mm/numa_32.c:311:
+	printk(KERN_DEBUG "node %d will remap to vaddr %08lx - %08lx\n", nid,
+		(ulong) node_remap_start_vaddr[nid],

CHECK:SPACING: No space is necessary after a cast
#818: FILE: arch/x86/mm/numa_32.c:311:
+		(ulong) node_remap_start_vaddr[nid],

CHECK:SPACING: No space is necessary after a cast
#819: FILE: arch/x86/mm/numa_32.c:312:
+		(ulong) node_remap_end_vaddr[nid]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#823: FILE: arch/x86/mm/numa_32.c:316:
+void __init initmem_init(unsigned long start_pfn,
+				  unsigned long end_pfn)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#842: FILE: arch/x86/mm/numa_32.c:335:
+		kva_start_pfn = find_e820_area(kva_target_pfn<<PAGE_SHIFT,
 		                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#843: FILE: arch/x86/mm/numa_32.c:336:
+		kva_start_pfn = find_e820_area(kva_target_pfn<<PAGE_SHIFT,
+					max_low_pfn<<PAGE_SHIFT,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#843: FILE: arch/x86/mm/numa_32.c:336:
+					max_low_pfn<<PAGE_SHIFT,
 					           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#844: FILE: arch/x86/mm/numa_32.c:337:
+					kva_pages<<PAGE_SHIFT,
 					         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#845: FILE: arch/x86/mm/numa_32.c:338:
+					PTRS_PER_PTE<<PAGE_SHIFT) >> PAGE_SHIFT;
 					            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#852: FILE: arch/x86/mm/numa_32.c:345:
+	printk(KERN_INFO "kva_start_pfn ~ %lx max_low_pfn ~ %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: arch/x86/mm/numa_32.c:346:
+	printk(KERN_INFO "kva_start_pfn ~ %lx max_low_pfn ~ %lx\n",
+		kva_start_pfn, max_low_pfn);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#854: FILE: arch/x86/mm/numa_32.c:347:
+	printk(KERN_INFO "max_pfn = %lx\n", max_pfn);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#857: FILE: arch/x86/mm/numa_32.c:350:
+	reserve_early(kva_start_pfn<<PAGE_SHIFT,
 	                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#858: FILE: arch/x86/mm/numa_32.c:351:
+		      (kva_start_pfn + kva_pages)<<PAGE_SHIFT,
 		                                 ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#861: FILE: arch/x86/mm/numa_32.c:354:
+	highstart_pfn = highend_pfn = max_pfn;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#864: FILE: arch/x86/mm/numa_32.c:357:
+	printk(KERN_NOTICE "%ldMB HIGHMEM available.\n",

CHECK:SPACING: No space is necessary after a cast
#867: FILE: arch/x86/mm/numa_32.c:360:
+	high_memory = (void *) __va(highstart_pfn * PAGE_SIZE - 1) + 1;

CHECK:SPACING: No space is necessary after a cast
#870: FILE: arch/x86/mm/numa_32.c:363:
+	high_memory = (void *) __va(max_low_pfn * PAGE_SIZE - 1) + 1;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#872: FILE: arch/x86/mm/numa_32.c:365:
+	printk(KERN_NOTICE "%ldMB LOWMEM available.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#873: FILE: arch/x86/mm/numa_32.c:366:
+	printk(KERN_NOTICE "%ldMB LOWMEM available.\n",
+			pages_to_mb(max_low_pfn));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#874: FILE: arch/x86/mm/numa_32.c:367:
+	printk(KERN_DEBUG "max_low_pfn = %lx, highstart_pfn = %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#875: FILE: arch/x86/mm/numa_32.c:368:
+	printk(KERN_DEBUG "max_low_pfn = %lx, highstart_pfn = %lx\n",
+			max_low_pfn, highstart_pfn);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#877: FILE: arch/x86/mm/numa_32.c:370:
+	printk(KERN_DEBUG "Low memory ends at vaddr %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: arch/x86/mm/numa_32.c:371:
+	printk(KERN_DEBUG "Low memory ends at vaddr %08lx\n",
+			(ulong) pfn_to_kaddr(max_low_pfn));

CHECK:SPACING: No space is necessary after a cast
#878: FILE: arch/x86/mm/numa_32.c:371:
+			(ulong) pfn_to_kaddr(max_low_pfn));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#886: FILE: arch/x86/mm/numa_32.c:379:
+	printk(KERN_DEBUG "High memory starts at vaddr %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#887: FILE: arch/x86/mm/numa_32.c:380:
+	printk(KERN_DEBUG "High memory starts at vaddr %08lx\n",
+			(ulong) pfn_to_kaddr(highstart_pfn));

CHECK:SPACING: No space is necessary after a cast
#887: FILE: arch/x86/mm/numa_32.c:380:
+			(ulong) pfn_to_kaddr(highstart_pfn));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#914: FILE: arch/x86/mm/numa_32.c:407:
+		printk(KERN_INFO "Initializing %s for node %d (%08lx:%08lx)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: arch/x86/mm/numa_32.c:408:
+		printk(KERN_INFO "Initializing %s for node %d (%08lx:%08lx)\n",
+				zone->name, nid, zone_start_pfn, zone_end_pfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: arch/x86/mm/numa_32.c:411:
+		add_highpages_with_active_regions(nid, zone_start_pfn,
+				 zone_end_pfn);

WARNING:LINE_SPACING: Missing a blank line after declarations
#946: FILE: arch/x86/mm/numa_32.c:439:
+	int nid = paddr_to_nid(addr);
+	return (nid >= 0) ? nid : 0;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#949: FILE: arch/x86/mm/numa_32.c:442:
+EXPORT_SYMBOL_GPL(memory_add_physaddr_to_nid);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000229591.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 37 warnings, 52 checks, 457 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000229591.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
