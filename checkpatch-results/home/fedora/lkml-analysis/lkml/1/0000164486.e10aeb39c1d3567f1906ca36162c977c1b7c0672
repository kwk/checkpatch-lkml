WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
engineered for decoration purposes. This RGB controller incorporates lighting

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#75: FILE: drivers/leds/Kconfig:174:
+config LEDS_BD2802
+	tristate "LED driver for BD2802 RGB LED"
+	depends on LEDS_CLASS && I2C
+	help
+	  This option enables support for BD2802GU RGB LED driver chips
+	  accessed via the I2C bus.
+
 comment "LED Triggers"

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#98: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: drivers/leds/leds-bd2802.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#124: FILE: drivers/leds/leds-bd2802.c:22:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: drivers/leds/leds-bd2802.c:28:
+#define BD2802_REG_CLKSETUP ^I^I0x00$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#131: FILE: drivers/leds/leds-bd2802.c:29:
+#define BD2802_REG_CONTROL ^I^I0x01$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: drivers/leds/leds-bd2802.c:95:
+^Iint ^I^I^I^Iadf_on;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#204: FILE: drivers/leds/leds-bd2802.c:102:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: drivers/leds/leds-bd2802.c:108:
+static inline int bd2802_is_rgb_off(struct bd2802_led *led, enum led_ids id,
+							enum led_colors color)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: drivers/leds/leds-bd2802.c:148:
+static inline u8 bd2802_get_reg_addr(enum led_ids id, enum led_colors color,
+								u8 reg_offset)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#255: FILE: drivers/leds/leds-bd2802.c:153:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#263: FILE: drivers/leds/leds-bd2802.c:161:
+	int ret = i2c_smbus_write_byte_data(client, reg, val);
+	if (ret >= 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: drivers/leds/leds-bd2802.c:165:
+	dev_err(&client->dev, "%s: reg 0x%x, val 0x%x, err %d\n",
+						__func__, reg, val, ret);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#332: FILE: drivers/leds/leds-bd2802.c:230:
+	udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#345: FILE: drivers/leds/leds-bd2802.c:243:
+		value = LED_CTL(1 , other_led_on);
 		                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: drivers/leds/leds-bd2802.c:249:
+static void bd2802_set_on(struct bd2802_led *led, enum led_ids id,
+							enum led_colors color)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: drivers/leds/leds-bd2802.c:268:
+static void bd2802_set_blink(struct bd2802_led *led, enum led_ids id,
+							enum led_colors color)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: drivers/leds/leds-bd2802.c:287:
+static void bd2802_turn_on(struct bd2802_led *led, enum led_ids id,
+				enum led_colors color, enum led_bits led_bit)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: drivers/leds/leds-bd2802.c:291:
+		dev_err(&led->client->dev,
+					"Only 'blink' and 'on' are allowed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: drivers/leds/leds-bd2802.c:302:
+static void bd2802_turn_off(struct bd2802_led *led, enum led_ids id,
+							enum led_colors color)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#433: FILE: drivers/leds/leds-bd2802.c:331:
+#define BD2802_SET_REGISTER(reg_addr, reg_name)				\
+static ssize_t bd2802_store_reg##reg_addr(struct device *dev,		\
+	struct device_attribute *attr, const char *buf, size_t count)	\
+{									\
+	struct bd2802_led *led = i2c_get_clientdata(to_i2c_client(dev));\
+	unsigned long val;						\
+	int ret;							\
+	if (!count)							\
+		return -EINVAL;						\
+	ret = strict_strtoul(buf, 16, &val);				\
+	if (ret)							\
+		return ret;						\
+	down_write(&led->rwsem);					\
+	bd2802_write_byte(led->client, reg_addr, (u8) val);		\
+	up_write(&led->rwsem);						\
+	return count;							\
+}									\
+static struct device_attribute bd2802_reg##reg_addr##_attr = {		\
+	.attr = {.name = reg_name, .mode = 0644, .owner = THIS_MODULE},	\
+	.store = bd2802_store_reg##reg_addr,				\
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#442: FILE: drivers/leds/leds-bd2802.c:340:
+	ret = strict_strtoul(buf, 16, &val);				\

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: No space is necessary after a cast
#446: FILE: drivers/leds/leds-bd2802.c:344:
+	bd2802_write_byte(led->client, reg_addr, (u8) val);		\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: drivers/leds/leds-bd2802.c:407:
+		ret = device_create_file(&led->client->dev,
+						bd2802_addr_attributes[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: drivers/leds/leds-bd2802.c:410:
+			dev_err(&led->client->dev, "failed to sysfs file %s\n",
+					bd2802_addr_attributes[i]->attr.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: drivers/leds/leds-bd2802.c:425:
+		device_remove_file(&led->client->dev,
+						bd2802_addr_attributes[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: drivers/leds/leds-bd2802.c:434:
+		device_remove_file(&led->client->dev,
+						bd2802_addr_attributes[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: drivers/leds/leds-bd2802.c:443:
+static ssize_t bd2802_show_adv_conf(struct device *dev,
+	struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: drivers/leds/leds-bd2802.c:459:
+static ssize_t bd2802_store_adv_conf(struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'id' - possible side-effects?
#598: FILE: drivers/leds/leds-bd2802.c:496:
+#define BD2802_CONTROL_RGBS(name, id, clr)				\
+static void bd2802_set_##name##_brightness(struct led_classdev *led_cdev,\
+					enum led_brightness value)	\
+{									\
+	struct bd2802_led *led =					\
+		container_of(led_cdev, struct bd2802_led, cdev_##name);	\
+	led->led_id = id;						\
+	led->color = clr;						\
+	if (value == LED_OFF)						\
+		led->state = BD2802_OFF;				\
+	else								\
+		led->state = BD2802_ON;					\
+	schedule_work(&led->work);					\
+}									\
+static int bd2802_set_##name##_blink(struct led_classdev *led_cdev,	\
+		unsigned long *delay_on, unsigned long *delay_off)	\
+{									\
+	struct bd2802_led *led =					\
+		container_of(led_cdev, struct bd2802_led, cdev_##name);	\
+	if (*delay_on == 0 || *delay_off == 0)				\
+		return -EINVAL;						\
+	led->led_id = id;						\
+	led->color = clr;						\
+	led->state = BD2802_BLINK;					\
+	schedule_work(&led->work);					\
+	return 0;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'clr' - possible side-effects?
#598: FILE: drivers/leds/leds-bd2802.c:496:
+#define BD2802_CONTROL_RGBS(name, id, clr)				\
+static void bd2802_set_##name##_brightness(struct led_classdev *led_cdev,\
+					enum led_brightness value)	\
+{									\
+	struct bd2802_led *led =					\
+		container_of(led_cdev, struct bd2802_led, cdev_##name);	\
+	led->led_id = id;						\
+	led->color = clr;						\
+	if (value == LED_OFF)						\
+		led->state = BD2802_OFF;				\
+	else								\
+		led->state = BD2802_ON;					\
+	schedule_work(&led->work);					\
+}									\
+static int bd2802_set_##name##_blink(struct led_classdev *led_cdev,	\
+		unsigned long *delay_on, unsigned long *delay_off)	\
+{									\
+	struct bd2802_led *led =					\
+		container_of(led_cdev, struct bd2802_led, cdev_##name);	\
+	if (*delay_on == 0 || *delay_off == 0)				\
+		return -EINVAL;						\
+	led->led_id = id;						\
+	led->color = clr;						\
+	led->state = BD2802_BLINK;					\
+	schedule_work(&led->work);					\
+	return 0;							\
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#648: FILE: drivers/leds/leds-bd2802.c:546:
+		dev_err(&led->client->dev, "couldn't register LED %s\n",
+							led->cdev_led1r.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: drivers/leds/leds-bd2802.c:559:
+		dev_err(&led->client->dev, "couldn't register LED %s\n",
+							led->cdev_led1g.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: drivers/leds/leds-bd2802.c:572:
+		dev_err(&led->client->dev, "couldn't register LED %s\n",
+							led->cdev_led1b.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: drivers/leds/leds-bd2802.c:585:
+		dev_err(&led->client->dev, "couldn't register LED %s\n",
+							led->cdev_led2r.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: drivers/leds/leds-bd2802.c:598:
+		dev_err(&led->client->dev, "couldn't register LED %s\n",
+							led->cdev_led2g.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: drivers/leds/leds-bd2802.c:611:
+		dev_err(&led->client->dev, "couldn't register LED %s\n",
+							led->cdev_led2b.name);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#740: FILE: drivers/leds/leds-bd2802.c:638:
+static int __devinit bd2802_probe(struct i2c_client *client,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: drivers/leds/leds-bd2802.c:639:
+static int __devinit bd2802_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*led)...) over kzalloc(sizeof(struct bd2802_led)...)
#747: FILE: drivers/leds/leds-bd2802.c:645:
+	led = kzalloc(sizeof(struct bd2802_led), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#749: FILE: drivers/leds/leds-bd2802.c:647:
+	if (!led) {
+		dev_err(&client->dev, "failed to allocate driver data\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#754: FILE: drivers/leds/leds-bd2802.c:652:
+	pdata = led->pdata = client->dev.platform_data;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#762: FILE: drivers/leds/leds-bd2802.c:660:
+	udelay(100);

CHECK:BRACES: braces {} should be used on all arms of this statement
#766: FILE: drivers/leds/leds-bd2802.c:664:
+	if (ret < 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#769: FILE: drivers/leds/leds-bd2802.c:667:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: drivers/leds/leds-bd2802.c:678:
+		dev_err(&client->dev, "failed to create sysfs file %s\n",
+					bd2802_adv_conf_attr.attr.name);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#829: FILE: drivers/leds/leds-bd2802.c:727:
+		udelay(100);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#874: FILE: include/linux/leds-bd2802.h:1:
+/*

WARNING:SPACING: missing space after struct definition
#890: FILE: include/linux/leds-bd2802.h:17:
+struct bd2802_led_platform_data{

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 14 warnings, 35 checks, 811 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000164486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
