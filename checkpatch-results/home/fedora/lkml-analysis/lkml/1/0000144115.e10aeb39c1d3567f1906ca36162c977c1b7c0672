WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
The patch adds the core se_device_t functionality that is used internally by

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#46: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: drivers/target/target_core_device.c:1:
+/*******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#75: FILE: drivers/target/target_core_device.c:25:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#76: FILE: drivers/target/target_core_device.c:26:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#80: FILE: drivers/target/target_core_device.c:30:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#109: FILE: drivers/target/target_core_device.c:59:
+struct block_device *linux_blockdevice_claim_bd(

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#113: FILE: drivers/target/target_core_device.c:63:
+	if (blkdev_get(bd, FMODE_WRITE|FMODE_READ) < 0)
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#122: FILE: drivers/target/target_core_device.c:72:
+		blkdev_put(bd, FMODE_WRITE|FMODE_READ);
 		                          ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#129: FILE: drivers/target/target_core_device.c:79:
+struct block_device *__linux_blockdevice_claim(

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#146: FILE: drivers/target/target_core_device.c:96:
+	if (blkdev_get(bd, FMODE_WRITE|FMODE_READ) < 0) {
 	                              ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#165: FILE: drivers/target/target_core_device.c:115:
+struct block_device *linux_blockdevice_claim(

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#179: FILE: drivers/target/target_core_device.c:129:
+	if (blkdev_get(bd, FMODE_WRITE|FMODE_READ) < 0)
 	                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#188: FILE: drivers/target/target_core_device.c:138:
+		blkdev_put(bd, FMODE_WRITE|FMODE_READ);
 		                          ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#200: FILE: drivers/target/target_core_device.c:150:
+	if (!bd_p) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#206: FILE: drivers/target/target_core_device.c:156:
+	} else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#210: FILE: drivers/target/target_core_device.c:160:
+	blkdev_put(bd, FMODE_WRITE|FMODE_READ);
 	                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#239: FILE: drivers/target/target_core_device.c:189:
+			printk(KERN_ERR "check_count(&dev->dev_feature_obj):"

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#240: FILE: drivers/target/target_core_device.c:190:
+				" %u\n", DEV_OBJ_API(dev)->check_count(

WARNING:SPLIT_STRING: quoted string split across lines
#240: FILE: drivers/target/target_core_device.c:190:
+			printk(KERN_ERR "check_count(&dev->dev_feature_obj):"
+				" %u\n", DEV_OBJ_API(dev)->check_count(

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#260: FILE: drivers/target/target_core_device.c:210:
+	list_for_each_entry(dev, &hba->hba_dev_list, dev_list) {
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#280: FILE: drivers/target/target_core_device.c:230:
+	return;
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#282: FILE: drivers/target/target_core_device.c:232:
+extern int __transport_get_lun_for_cmd(

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#293: FILE: drivers/target/target_core_device.c:243:
+	deve = se_cmd->se_deve =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#318: FILE: drivers/target/target_core_device.c:268:
+		se_lun = se_cmd->se_lun = deve->se_lun;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#331: FILE: drivers/target/target_core_device.c:281:
+			printk("TARGET_CORE[%s]: Detected WRITE_PROTECTED LUN"

WARNING:SPLIT_STRING: quoted string split across lines
#332: FILE: drivers/target/target_core_device.c:282:
+			printk("TARGET_CORE[%s]: Detected WRITE_PROTECTED LUN"
+				" Access for 0x%08x\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#337: FILE: drivers/target/target_core_device.c:287:
+			printk("TARGET_CORE[%s]: Detected NON_EXISTENT_LUN"

WARNING:SPLIT_STRING: quoted string split across lines
#338: FILE: drivers/target/target_core_device.c:288:
+			printk("TARGET_CORE[%s]: Detected NON_EXISTENT_LUN"
+				" Access for 0x%08x\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#358: FILE: drivers/target/target_core_device.c:308:
+	se_device_t *dev = se_lun->se_dev;
+	spin_lock(&dev->stats_lock);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#375: FILE: drivers/target/target_core_device.c:325:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#376: FILE: drivers/target/target_core_device.c:326:
+	printk(KERN_INFO "Adding ITT: 0x%08x to LUN LIST[%d]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: drivers/target/target_core_device.c:327:
+	printk(KERN_INFO "Adding ITT: 0x%08x to LUN LIST[%d]\n",
+		CMD_TFO(se_cmd)->get_task_tag(se_cmd), se_lun->unpacked_lun);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#384: FILE: drivers/target/target_core_device.c:334:
+extern int transport_get_lun_for_tmr(

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#395: FILE: drivers/target/target_core_device.c:345:
+	deve = se_cmd->se_deve =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#398: FILE: drivers/target/target_core_device.c:348:
+		se_lun = se_cmd->se_lun = se_tmr->tmr_lun = deve->se_lun;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#399: FILE: drivers/target/target_core_device.c:349:
+		dev = se_tmr->tmr_dev = se_lun->se_dev;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#409: FILE: drivers/target/target_core_device.c:359:
+		printk(KERN_INFO "TARGET_CORE[%s]: Detected NON_EXISTENT_LUN"

WARNING:SPLIT_STRING: quoted string split across lines
#410: FILE: drivers/target/target_core_device.c:360:
+		printk(KERN_INFO "TARGET_CORE[%s]: Detected NON_EXISTENT_LUN"
+			" Access for 0x%08x\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#433: FILE: drivers/target/target_core_device.c:383:
+int core_free_device_list_for_node(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#452: FILE: drivers/target/target_core_device.c:402:
+			printk(KERN_ERR "%s device entries device pointer is"

WARNING:SPLIT_STRING: quoted string split across lines
#453: FILE: drivers/target/target_core_device.c:403:
+			printk(KERN_ERR "%s device entries device pointer is"
+				" NULL, but Initiator has access.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: drivers/target/target_core_device.c:411:
+		core_update_device_list_for_node(lun, deve->mapped_lun,
+			TRANSPORT_LUNFLAGS_NO_ACCESS, nacl, tpg, 0);

WARNING:RETURN_VOID: void function return statements are not generally useful
#482: FILE: drivers/target/target_core_device.c:432:
+	return;
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#484: FILE: drivers/target/target_core_device.c:434:
+void core_update_device_list_access(

WARNING:RETURN_VOID: void function return statements are not generally useful
#503: FILE: drivers/target/target_core_device.c:453:
+	return;
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#510: FILE: drivers/target/target_core_device.c:460:
+void core_update_device_list_for_node(

WARNING:RETURN_VOID: void function return statements are not generally useful
#552: FILE: drivers/target/target_core_device.c:502:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: drivers/target/target_core_device.c:526:
+			core_update_device_list_for_node(lun, deve->mapped_lun,
+				TRANSPORT_LUNFLAGS_NO_ACCESS, nacl, tpg, 0);

WARNING:RETURN_VOID: void function return statements are not generally useful
#587: FILE: drivers/target/target_core_device.c:537:
+	return;
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#595: FILE: drivers/target/target_core_device.c:545:
+		printk(KERN_ERR "Unable to allocate se_port_t\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#602: FILE: drivers/target/target_core_device.c:552:
+		printk(KERN_WARNING "Reached dev->dev_port_count =="

WARNING:SPLIT_STRING: quoted string split across lines
#603: FILE: drivers/target/target_core_device.c:553:
+		printk(KERN_WARNING "Reached dev->dev_port_count =="
+				" 0x0000ffff\n");

WARNING:TYPO_SPELLING: 'IDENTIFER' may be misspelled - perhaps 'IDENTIFIER'?
#609: FILE: drivers/target/target_core_device.c:559:
+	 * Allocate the next RELATIVE TARGET PORT IDENTIFER for this se_device_t
 	                                          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'IDENTIFER' may be misspelled - perhaps 'IDENTIFIER'?
#626: FILE: drivers/target/target_core_device.c:576:
+		 * Make sure RELATIVE TARGET PORT IDENTIFER is unique
 		                                  ^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#637: FILE: drivers/target/target_core_device.c:587:
+void core_export_port(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#659: FILE: drivers/target/target_core_device.c:609:
+			printk(KERN_ERR "Unable to allocate t10_alua_tg_pt"

WARNING:SPLIT_STRING: quoted string split across lines
#660: FILE: drivers/target/target_core_device.c:610:
+			printk(KERN_ERR "Unable to allocate t10_alua_tg_pt"
+					"_gp_member_t\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#660: FILE: drivers/target/target_core_device.c:610:
+			printk(KERN_ERR "Unable to allocate t10_alua_tg_pt"
+					"_gp_member_t\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: drivers/target/target_core_device.c:615:
+		__core_alua_attach_tg_pt_gp_mem(tg_pt_gp_mem,
+			se_global->default_tg_pt_gp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#668: FILE: drivers/target/target_core_device.c:618:
+		printk(KERN_INFO "%s/%s: Adding to default ALUA Target Port"

WARNING:SPLIT_STRING: quoted string split across lines
#669: FILE: drivers/target/target_core_device.c:619:
+		printk(KERN_INFO "%s/%s: Adding to default ALUA Target Port"
+			" Group: core/alua/tg_pt_gps/default_tg_pt_gp\n",

WARNING:TYPO_SPELLING: 'IDENTIFER' may be misspelled - perhaps 'IDENTIFIER'?
#675: FILE: drivers/target/target_core_device.c:625:
+	port->sep_index = port->sep_rtpi; /* RELATIVE TARGET PORT IDENTIFER */
 	                                                          ^^^^^^^^^

WARNING:RETURN_VOID: void function return statements are not generally useful
#678: FILE: drivers/target/target_core_device.c:628:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#692: FILE: drivers/target/target_core_device.c:642:
+	return;
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#708: FILE: drivers/target/target_core_device.c:658:
+		printk(KERN_ERR "Unable to locate se_task_t for se_cmd_t\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#802: FILE: drivers/target/target_core_device.c:752:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: drivers/target/target_core_device.c:760:
+	list_for_each_entry_safe(vpd, vpd_tmp,
+			&DEV_T10_WWN(dev)->t10_vpd_list, vpd_list) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#817: FILE: drivers/target/target_core_device.c:767:
+	return;
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#819: FILE: drivers/target/target_core_device.c:769:
+int transport_get_lun_for_cmd(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lun->lun_type_ptr"
#846: FILE: drivers/target/target_core_device.c:796:
+		if (lun->lun_type_ptr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:RETURN_VOID: void function return statements are not generally useful
#860: FILE: drivers/target/target_core_device.c:810:
+	return;
+}

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#918: FILE: drivers/target/target_core_device.c:868:
+		msleep(10);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#945: FILE: drivers/target/target_core_device.c:895:
+#if 1

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#960: FILE: drivers/target/target_core_device.c:910:
+		printk(KERN_ERR "dev[%p]: Passed task_timeout: %u larger then"

WARNING:SPLIT_STRING: quoted string split across lines
#961: FILE: drivers/target/target_core_device.c:911:
+		printk(KERN_ERR "dev[%p]: Passed task_timeout: %u larger then"
+			" DA_TASK_TIMEOUT_MAX\n", dev, task_timeout);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#963: FILE: drivers/target/target_core_device.c:913:
+		return -1;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#965: FILE: drivers/target/target_core_device.c:915:
+		printk(KERN_INFO "dev[%p]: Set SE Device task_timeout: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#966: FILE: drivers/target/target_core_device.c:916:
+		printk(KERN_INFO "dev[%p]: Set SE Device task_timeout: %u\n",
+			dev, task_timeout);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag != 0'
#974: FILE: drivers/target/target_core_device.c:924:
+	if ((flag != 0) && (flag != 1) && (flag != 2)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag != 1'
#974: FILE: drivers/target/target_core_device.c:924:
+	if ((flag != 0) && (flag != 1) && (flag != 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag != 2'
#974: FILE: drivers/target/target_core_device.c:924:
+	if ((flag != 0) && (flag != 1) && (flag != 2)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#975: FILE: drivers/target/target_core_device.c:925:
+		printk(KERN_ERR "Illegal value %d\n", flag);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#980: FILE: drivers/target/target_core_device.c:930:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device"

WARNING:SPLIT_STRING: quoted string split across lines
#981: FILE: drivers/target/target_core_device.c:931:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device"
+			" UA_INTRLCK_CTRL while dev_export_obj: %d count"

WARNING:SPLIT_STRING: quoted string split across lines
#982: FILE: drivers/target/target_core_device.c:932:
+			" UA_INTRLCK_CTRL while dev_export_obj: %d count"
+			" exists\n", dev,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#987: FILE: drivers/target/target_core_device.c:937:
+	printk(KERN_INFO "dev[%p]: SE Device UA_INTRLCK_CTRL flag: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#988: FILE: drivers/target/target_core_device.c:938:
+	printk(KERN_INFO "dev[%p]: SE Device UA_INTRLCK_CTRL flag: %d\n",
+		dev, DEV_ATTRIB(dev)->emulate_ua_intlck_ctrl);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag != 0'
#995: FILE: drivers/target/target_core_device.c:945:
+	if ((flag != 0) && (flag != 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag != 1'
#995: FILE: drivers/target/target_core_device.c:945:
+	if ((flag != 0) && (flag != 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#996: FILE: drivers/target/target_core_device.c:946:
+		printk(KERN_ERR "Illegal value %d\n", flag);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1001: FILE: drivers/target/target_core_device.c:951:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device TAS while"

WARNING:SPLIT_STRING: quoted string split across lines
#1002: FILE: drivers/target/target_core_device.c:952:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device TAS while"
+			" dev_export_obj: %d count exists\n", dev,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1007: FILE: drivers/target/target_core_device.c:957:
+	printk(KERN_INFO "dev[%p]: SE Device TASK_ABORTED status bit: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1008: FILE: drivers/target/target_core_device.c:958:
+	printk(KERN_INFO "dev[%p]: SE Device TASK_ABORTED status bit: %s\n",
+		dev, (DEV_ATTRIB(dev)->emulate_tas) ? "Enabled" : "Disabled");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1021: FILE: drivers/target/target_core_device.c:971:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device TCQ while"

WARNING:SPLIT_STRING: quoted string split across lines
#1022: FILE: drivers/target/target_core_device.c:972:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device TCQ while"
+			" dev_export_obj: %d count exists\n", dev,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1027: FILE: drivers/target/target_core_device.c:977:
+		printk(KERN_ERR "dev[%p]: Illegal ZERO value for queue"

WARNING:SPLIT_STRING: quoted string split across lines
#1028: FILE: drivers/target/target_core_device.c:978:
+		printk(KERN_ERR "dev[%p]: Illegal ZERO value for queue"
+			"_depth\n", dev);

WARNING:MISSING_SPACE: break quoted strings at a space character
#1028: FILE: drivers/target/target_core_device.c:978:
+		printk(KERN_ERR "dev[%p]: Illegal ZERO value for queue"
+			"_depth\n", dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1034: FILE: drivers/target/target_core_device.c:984:
+			printk(KERN_ERR "dev[%p]: Passed queue_depth: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#1035: FILE: drivers/target/target_core_device.c:985:
+			printk(KERN_ERR "dev[%p]: Passed queue_depth: %u"
+				" exceeds LIO-Core/SE_Device TCQ: %u\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1043: FILE: drivers/target/target_core_device.c:993:
+				printk(KERN_ERR "dev[%p]: Unable to locate "

WARNING:SPLIT_STRING: quoted string split across lines
#1044: FILE: drivers/target/target_core_device.c:994:
+				printk(KERN_ERR "dev[%p]: Unable to locate "
+					"get_max_queue_depth() function"

WARNING:SPLIT_STRING: quoted string split across lines
#1045: FILE: drivers/target/target_core_device.c:995:
+					"get_max_queue_depth() function"
+					" pointer\n", dev);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1048: FILE: drivers/target/target_core_device.c:998:
+			if (queue_depth > TRANSPORT(dev)->get_max_queue_depth(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1050: FILE: drivers/target/target_core_device.c:1000:
+				printk(KERN_ERR "dev[%p]: Passed queue_depth:"

WARNING:SPLIT_STRING: quoted string split across lines
#1051: FILE: drivers/target/target_core_device.c:1001:
+				printk(KERN_ERR "dev[%p]: Passed queue_depth:"
+					" %u exceeds LIO-Core/SE_Device MAX"

WARNING:SPLIT_STRING: quoted string split across lines
#1052: FILE: drivers/target/target_core_device.c:1002:
+					" %u exceeds LIO-Core/SE_Device MAX"
+					" TCQ: %u\n", dev, queue_depth,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1053: FILE: drivers/target/target_core_device.c:1003:
+					TRANSPORT(dev)->get_max_queue_depth(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1066: FILE: drivers/target/target_core_device.c:1016:
+	printk(KERN_INFO "dev[%p]: SE Device TCQ Depth changed to: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1067: FILE: drivers/target/target_core_device.c:1017:
+	printk(KERN_INFO "dev[%p]: SE Device TCQ Depth changed to: %u\n",
+			dev, queue_depth);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1077: FILE: drivers/target/target_core_device.c:1027:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device"

WARNING:SPLIT_STRING: quoted string split across lines
#1078: FILE: drivers/target/target_core_device.c:1028:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device"
+			" max_sectors while dev_export_obj: %d count exists\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1079: FILE: drivers/target/target_core_device.c:1029:
+			dev, DEV_OBJ_API(dev)->check_count(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1084: FILE: drivers/target/target_core_device.c:1034:
+		printk(KERN_ERR "dev[%p]: Illegal ZERO value for"

WARNING:SPLIT_STRING: quoted string split across lines
#1085: FILE: drivers/target/target_core_device.c:1035:
+		printk(KERN_ERR "dev[%p]: Illegal ZERO value for"
+			" max_sectors\n", dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1089: FILE: drivers/target/target_core_device.c:1039:
+		printk(KERN_ERR "dev[%p]: Passed max_sectors: %u less than"

WARNING:SPLIT_STRING: quoted string split across lines
#1090: FILE: drivers/target/target_core_device.c:1040:
+		printk(KERN_ERR "dev[%p]: Passed max_sectors: %u less than"
+			" DA_STATUS_MAX_SECTORS_MIN: %u\n", dev, max_sectors,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1095: FILE: drivers/target/target_core_device.c:1045:
+		if (max_sectors > TRANSPORT(dev)->get_max_sectors(dev)) {
+			 printk(KERN_ERR "dev[%p]: Passed max_sectors: %u"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1096: FILE: drivers/target/target_core_device.c:1046:
+			 printk(KERN_ERR "dev[%p]: Passed max_sectors: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#1097: FILE: drivers/target/target_core_device.c:1047:
+			 printk(KERN_ERR "dev[%p]: Passed max_sectors: %u"
+				" greater than LIO-Core/SE_Device max_sectors:"

WARNING:SPLIT_STRING: quoted string split across lines
#1098: FILE: drivers/target/target_core_device.c:1048:
+				" greater than LIO-Core/SE_Device max_sectors:"
+				" %u\n", dev, max_sectors,

WARNING:TABSTOP: Statements should start on a tabstop
#1100: FILE: drivers/target/target_core_device.c:1050:
+			 return -1;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1105: FILE: drivers/target/target_core_device.c:1055:
+			printk(KERN_ERR "dev[%p]: Passed max_sectors: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#1106: FILE: drivers/target/target_core_device.c:1056:
+			printk(KERN_ERR "dev[%p]: Passed max_sectors: %u"
+				" greater than LIO-Core/SE_Device max_sectors"

WARNING:SPLIT_STRING: quoted string split across lines
#1107: FILE: drivers/target/target_core_device.c:1057:
+				" greater than LIO-Core/SE_Device max_sectors"
+				": %u, use force=1 to override.\n", dev,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1113: FILE: drivers/target/target_core_device.c:1063:
+			printk(KERN_ERR "dev[%p]: Passed max_sectors: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#1114: FILE: drivers/target/target_core_device.c:1064:
+			printk(KERN_ERR "dev[%p]: Passed max_sectors: %u"
+				" greater than DA_STATUS_MAX_SECTORS_MAX:"

WARNING:SPLIT_STRING: quoted string split across lines
#1115: FILE: drivers/target/target_core_device.c:1065:
+				" greater than DA_STATUS_MAX_SECTORS_MAX:"
+				" %u\n", dev, max_sectors,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1122: FILE: drivers/target/target_core_device.c:1072:
+	printk("dev[%p]: SE Device max_sectors changed to %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1123: FILE: drivers/target/target_core_device.c:1073:
+	printk("dev[%p]: SE Device max_sectors changed to %u\n",
+			dev, max_sectors);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1130: FILE: drivers/target/target_core_device.c:1080:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device block_size"

WARNING:SPLIT_STRING: quoted string split across lines
#1131: FILE: drivers/target/target_core_device.c:1081:
+		printk(KERN_ERR "dev[%p]: Unable to change SE Device block_size"
+			" while dev_export_obj: %d count exists\n", dev,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'block_size != 512'
#1136: FILE: drivers/target/target_core_device.c:1086:
+	if ((block_size != 512) &&
+	    (block_size != 1024) &&
+	    (block_size != 2048) &&
+	    (block_size != 4096)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'block_size != 1024'
#1136: FILE: drivers/target/target_core_device.c:1086:
+	if ((block_size != 512) &&
+	    (block_size != 1024) &&
+	    (block_size != 2048) &&
+	    (block_size != 4096)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'block_size != 2048'
#1136: FILE: drivers/target/target_core_device.c:1086:
+	if ((block_size != 512) &&
+	    (block_size != 1024) &&
+	    (block_size != 2048) &&
+	    (block_size != 4096)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'block_size != 4096'
#1136: FILE: drivers/target/target_core_device.c:1086:
+	if ((block_size != 512) &&
+	    (block_size != 1024) &&
+	    (block_size != 2048) &&
+	    (block_size != 4096)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1140: FILE: drivers/target/target_core_device.c:1090:
+		printk(KERN_ERR "dev[%p]: Illegal value for block_device: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#1141: FILE: drivers/target/target_core_device.c:1091:
+		printk(KERN_ERR "dev[%p]: Illegal value for block_device: %u"
+			" for SE device, must be 512, 1024, 2048 or 4096\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1147: FILE: drivers/target/target_core_device.c:1097:
+		printk(KERN_ERR "dev[%p]: Not allowed to change block_size for"

WARNING:SPLIT_STRING: quoted string split across lines
#1148: FILE: drivers/target/target_core_device.c:1098:
+		printk(KERN_ERR "dev[%p]: Not allowed to change block_size for"
+			" Physical Device, use for Linux/SCSI to change"

WARNING:SPLIT_STRING: quoted string split across lines
#1149: FILE: drivers/target/target_core_device.c:1099:
+			" Physical Device, use for Linux/SCSI to change"
+			" block_size for underlying hardware\n", dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1154: FILE: drivers/target/target_core_device.c:1104:
+	printk(KERN_INFO "dev[%p]: SE Device block_size changed to %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1155: FILE: drivers/target/target_core_device.c:1105:
+	printk(KERN_INFO "dev[%p]: SE Device block_size changed to %u\n",
+			dev, block_size);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1159: FILE: drivers/target/target_core_device.c:1109:
+se_lun_t *core_dev_add_lun(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1169: FILE: drivers/target/target_core_device.c:1119:
+		printk(KERN_ERR "Unable to export se_device_t while dev_access_obj: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1170: FILE: drivers/target/target_core_device.c:1120:
+		printk(KERN_ERR "Unable to export se_device_t while dev_access_obj: %d\n",
+			DEV_OBJ_API(dev)->check_count(&dev->dev_access_obj));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1184: FILE: drivers/target/target_core_device.c:1134:
+	if (core_tpg_post_addlun(tpg, lun_p, TRANSPORT_LUN_TYPE_DEVICE,
+			lun_access, dev, dev->dev_obj_api) < 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1188: FILE: drivers/target/target_core_device.c:1138:
+	printk(KERN_INFO "%s_TPG[%u]_LUN[%u] - Activated %s Logical Unit from"

WARNING:SPLIT_STRING: quoted string split across lines
#1189: FILE: drivers/target/target_core_device.c:1139:
+	printk(KERN_INFO "%s_TPG[%u]_LUN[%u] - Activated %s Logical Unit from"
+		" CORE HBA: %u\n", TPG_TFO(tpg)->get_fabric_name(),

WARNING:LINE_SPACING: Missing a blank line after declarations
#1198: FILE: drivers/target/target_core_device.c:1148:
+		se_node_acl_t *acl;
+		spin_lock_bh(&tpg->acl_node_lock);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1217: FILE: drivers/target/target_core_device.c:1167:
+int core_dev_del_lun(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1225: FILE: drivers/target/target_core_device.c:1175:
+	lun = core_tpg_pre_dellun(tpg, unpacked_lun, TRANSPORT_LUN_TYPE_DEVICE,
+			&ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1231: FILE: drivers/target/target_core_device.c:1181:
+	printk(KERN_INFO "%s_TPG[%u]_LUN[%u] - Deactivated %s Logical Unit from"

WARNING:SPLIT_STRING: quoted string split across lines
#1232: FILE: drivers/target/target_core_device.c:1182:
+	printk(KERN_INFO "%s_TPG[%u]_LUN[%u] - Deactivated %s Logical Unit from"
+		" device object\n", TPG_TFO(tpg)->get_fabric_name(),

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1245: FILE: drivers/target/target_core_device.c:1195:
+	if (unpacked_lun > (TRANSPORT_MAX_LUNS_PER_TPG-1)) {
 	                                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1246: FILE: drivers/target/target_core_device.c:1196:
+		printk(KERN_ERR "%s LUN: %u exceeds TRANSPORT_MAX_LUNS"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1246: FILE: drivers/target/target_core_device.c:1196:
+		printk(KERN_ERR "%s LUN: %u exceeds TRANSPORT_MAX_LUNS"
+			"_PER_TPG-1: %u for Target Portal Group: %hu\n",
+			TPG_TFO(tpg)->get_fabric_name(), unpacked_lun,
+			TRANSPORT_MAX_LUNS_PER_TPG-1,
+			TPG_TFO(tpg)->tpg_get_tag(tpg));

WARNING:SPLIT_STRING: quoted string split across lines
#1247: FILE: drivers/target/target_core_device.c:1197:
+		printk(KERN_ERR "%s LUN: %u exceeds TRANSPORT_MAX_LUNS"
+			"_PER_TPG-1: %u for Target Portal Group: %hu\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#1247: FILE: drivers/target/target_core_device.c:1197:
+		printk(KERN_ERR "%s LUN: %u exceeds TRANSPORT_MAX_LUNS"
+			"_PER_TPG-1: %u for Target Portal Group: %hu\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1249: FILE: drivers/target/target_core_device.c:1199:
+			TRANSPORT_MAX_LUNS_PER_TPG-1,
 			                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1257: FILE: drivers/target/target_core_device.c:1207:
+		printk(KERN_ERR "%s Logical Unit Number: %u is not free on"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1257: FILE: drivers/target/target_core_device.c:1207:
+		printk(KERN_ERR "%s Logical Unit Number: %u is not free on"
+			" Target Portal Group: %hu, ignoring request.\n",
+			TPG_TFO(tpg)->get_fabric_name(), unpacked_lun,
+			TPG_TFO(tpg)->tpg_get_tag(tpg));

WARNING:SPLIT_STRING: quoted string split across lines
#1258: FILE: drivers/target/target_core_device.c:1208:
+		printk(KERN_ERR "%s Logical Unit Number: %u is not free on"
+			" Target Portal Group: %hu, ignoring request.\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1279: FILE: drivers/target/target_core_device.c:1229:
+	if (unpacked_lun > (TRANSPORT_MAX_LUNS_PER_TPG-1)) {
 	                                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1280: FILE: drivers/target/target_core_device.c:1230:
+		printk(KERN_ERR "%s LUN: %u exceeds TRANSPORT_MAX_LUNS_PER"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1280: FILE: drivers/target/target_core_device.c:1230:
+		printk(KERN_ERR "%s LUN: %u exceeds TRANSPORT_MAX_LUNS_PER"
+			"_TPG-1: %u for Target Portal Group: %hu\n",
+			TPG_TFO(tpg)->get_fabric_name(), unpacked_lun,
+			TRANSPORT_MAX_LUNS_PER_TPG-1,
+			TPG_TFO(tpg)->tpg_get_tag(tpg));

WARNING:SPLIT_STRING: quoted string split across lines
#1281: FILE: drivers/target/target_core_device.c:1231:
+		printk(KERN_ERR "%s LUN: %u exceeds TRANSPORT_MAX_LUNS_PER"
+			"_TPG-1: %u for Target Portal Group: %hu\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#1281: FILE: drivers/target/target_core_device.c:1231:
+		printk(KERN_ERR "%s LUN: %u exceeds TRANSPORT_MAX_LUNS_PER"
+			"_TPG-1: %u for Target Portal Group: %hu\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1283: FILE: drivers/target/target_core_device.c:1233:
+			TRANSPORT_MAX_LUNS_PER_TPG-1,
 			                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1291: FILE: drivers/target/target_core_device.c:1241:
+		printk(KERN_ERR "%s Logical Unit Number: %u is not active on"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1291: FILE: drivers/target/target_core_device.c:1241:
+		printk(KERN_ERR "%s Logical Unit Number: %u is not active on"
+			" Target Portal Group: %hu, ignoring request.\n",
+			TPG_TFO(tpg)->get_fabric_name(), unpacked_lun,
+			TPG_TFO(tpg)->tpg_get_tag(tpg));

WARNING:SPLIT_STRING: quoted string split across lines
#1292: FILE: drivers/target/target_core_device.c:1242:
+		printk(KERN_ERR "%s Logical Unit Number: %u is not active on"
+			" Target Portal Group: %hu, ignoring request.\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1303: FILE: drivers/target/target_core_device.c:1253:
+se_lun_acl_t *core_dev_init_initiator_node_lun_acl(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1313: FILE: drivers/target/target_core_device.c:1263:
+		printk(KERN_ERR "%s InitiatorName exceeds maximum size.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1314: FILE: drivers/target/target_core_device.c:1264:
+		printk(KERN_ERR "%s InitiatorName exceeds maximum size.\n",
+			TPG_TFO(tpg)->get_fabric_name());

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1325: FILE: drivers/target/target_core_device.c:1275:
+		printk(KERN_ERR "Unable to allocate memory for se_lun_acl_t.\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1339: FILE: drivers/target/target_core_device.c:1289:
+int core_dev_add_initiator_node_lun_acl(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1350: FILE: drivers/target/target_core_device.c:1300:
+		printk(KERN_ERR "%s Logical Unit Number: %u is not active on"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1350: FILE: drivers/target/target_core_device.c:1300:
+		printk(KERN_ERR "%s Logical Unit Number: %u is not active on"
+			" Target Portal Group: %hu, ignoring request.\n",
+			TPG_TFO(tpg)->get_fabric_name(), unpacked_lun,
+			TPG_TFO(tpg)->tpg_get_tag(tpg));

WARNING:SPLIT_STRING: quoted string split across lines
#1351: FILE: drivers/target/target_core_device.c:1301:
+		printk(KERN_ERR "%s Logical Unit Number: %u is not active on"
+			" Target Portal Group: %hu, ignoring request.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1374: FILE: drivers/target/target_core_device.c:1324:
+	core_update_device_list_for_node(lun, lacl->mapped_lun,
+			lun_access, nacl, tpg, 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1376: FILE: drivers/target/target_core_device.c:1326:
+	printk(KERN_INFO "%s_TPG[%hu]_LUN[%u->%u] - Added %s ACL for "

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1376: FILE: drivers/target/target_core_device.c:1326:
+	printk(KERN_INFO "%s_TPG[%hu]_LUN[%u->%u] - Added %s ACL for "
+		" InitiatorNode: %s\n", TPG_TFO(tpg)->get_fabric_name(),
+		TPG_TFO(tpg)->tpg_get_tag(tpg), unpacked_lun, lacl->mapped_lun,
+		(lun_access & TRANSPORT_LUNFLAGS_READ_WRITE) ? "RW" : "RO",
+		lacl->initiatorname);

WARNING:SPLIT_STRING: quoted string split across lines
#1377: FILE: drivers/target/target_core_device.c:1327:
+	printk(KERN_INFO "%s_TPG[%hu]_LUN[%u->%u] - Added %s ACL for "
+		" InitiatorNode: %s\n", TPG_TFO(tpg)->get_fabric_name(),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1390: FILE: drivers/target/target_core_device.c:1340:
+int core_dev_del_initiator_node_lun_acl(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1408: FILE: drivers/target/target_core_device.c:1358:
+	core_update_device_list_for_node(lun, lacl->mapped_lun,
+		TRANSPORT_LUNFLAGS_NO_ACCESS, nacl, tpg, 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1412: FILE: drivers/target/target_core_device.c:1362:
+	printk(KERN_INFO "%s_TPG[%hu]_LUN[%u] - Removed ACL for"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1412: FILE: drivers/target/target_core_device.c:1362:
+	printk(KERN_INFO "%s_TPG[%hu]_LUN[%u] - Removed ACL for"
+		" InitiatorNode: %s Mapped LUN: %u\n",
+		TPG_TFO(tpg)->get_fabric_name(),
+		TPG_TFO(tpg)->tpg_get_tag(tpg), lun->unpacked_lun,
+		lacl->initiatorname, lacl->mapped_lun);

WARNING:SPLIT_STRING: quoted string split across lines
#1413: FILE: drivers/target/target_core_device.c:1363:
+	printk(KERN_INFO "%s_TPG[%hu]_LUN[%u] - Removed ACL for"
+		" InitiatorNode: %s Mapped LUN: %u\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1422: FILE: drivers/target/target_core_device.c:1372:
+void core_dev_free_initiator_node_lun_acl(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1426: FILE: drivers/target/target_core_device.c:1376:
+	printk("%s_TPG[%hu] - Freeing ACL for %s InitiatorNode: %s"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#1426: FILE: drivers/target/target_core_device.c:1376:
+	printk("%s_TPG[%hu] - Freeing ACL for %s InitiatorNode: %s"
+		" Mapped LUN: %u\n", TPG_TFO(tpg)->get_fabric_name(),
+		TPG_TFO(tpg)->tpg_get_tag(tpg),
+		TPG_TFO(tpg)->get_fabric_name(),
+		lacl->initiatorname, lacl->mapped_lun);

WARNING:SPLIT_STRING: quoted string split across lines
#1427: FILE: drivers/target/target_core_device.c:1377:
+	printk("%s_TPG[%hu] - Freeing ACL for %s InitiatorNode: %s"
+		" Mapped LUN: %u\n", TPG_TFO(tpg)->get_fabric_name(),

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1441: FILE: include/target/target_core_device.h:1:
+/*******************************************************************************

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1462: FILE: include/target/target_core_device.h:22:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1463: FILE: include/target/target_core_device.h:23:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1467: FILE: include/target/target_core_device.h:27:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1473: FILE: include/target/target_core_device.h:33:
+extern struct block_device *linux_blockdevice_claim_bd(struct block_device *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1473: FILE: include/target/target_core_device.h:33:
+extern struct block_device *linux_blockdevice_claim_bd(struct block_device *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1473: FILE: include/target/target_core_device.h:33:
+extern struct block_device *linux_blockdevice_claim_bd(struct block_device *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1474: FILE: include/target/target_core_device.h:34:
+extern struct block_device *linux_blockdevice_claim_bd(struct block_device *,
+							void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1475: FILE: include/target/target_core_device.h:35:
+extern struct block_device *__linux_blockdevice_claim(int, int, void *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1475: FILE: include/target/target_core_device.h:35:
+extern struct block_device *__linux_blockdevice_claim(int, int, void *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1475: FILE: include/target/target_core_device.h:35:
+extern struct block_device *__linux_blockdevice_claim(int, int, void *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1475: FILE: include/target/target_core_device.h:35:
+extern struct block_device *__linux_blockdevice_claim(int, int, void *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1475: FILE: include/target/target_core_device.h:35:
+extern struct block_device *__linux_blockdevice_claim(int, int, void *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1476: FILE: include/target/target_core_device.h:36:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1476: FILE: include/target/target_core_device.h:36:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1476: FILE: include/target/target_core_device.h:36:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1476: FILE: include/target/target_core_device.h:36:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1477: FILE: include/target/target_core_device.h:37:
+extern int linux_blockdevice_release(int, int, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1477: FILE: include/target/target_core_device.h:37:
+extern int linux_blockdevice_release(int, int, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1477: FILE: include/target/target_core_device.h:37:
+extern int linux_blockdevice_release(int, int, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1477: FILE: include/target/target_core_device.h:37:
+extern int linux_blockdevice_release(int, int, struct block_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1478: FILE: include/target/target_core_device.h:38:
+extern int linux_blockdevice_check(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1478: FILE: include/target/target_core_device.h:38:
+extern int linux_blockdevice_check(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1478: FILE: include/target/target_core_device.h:38:
+extern int linux_blockdevice_check(int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1479: FILE: include/target/target_core_device.h:39:
+extern int se_check_devices_access(se_hba_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1479: FILE: include/target/target_core_device.h:39:
+extern int se_check_devices_access(se_hba_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1480: FILE: include/target/target_core_device.h:40:
+extern void se_disable_devices_for_hba(se_hba_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1480: FILE: include/target/target_core_device.h:40:
+extern void se_disable_devices_for_hba(se_hba_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1481: FILE: include/target/target_core_device.h:41:
+extern int transport_get_lun_for_cmd(struct se_cmd_s *, unsigned char *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#1481: FILE: include/target/target_core_device.h:41:
+extern int transport_get_lun_for_cmd(struct se_cmd_s *, unsigned char *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#1481: FILE: include/target/target_core_device.h:41:
+extern int transport_get_lun_for_cmd(struct se_cmd_s *, unsigned char *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1481: FILE: include/target/target_core_device.h:41:
+extern int transport_get_lun_for_cmd(struct se_cmd_s *, unsigned char *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1482: FILE: include/target/target_core_device.h:42:
+extern int transport_get_lun_for_tmr(struct se_cmd_s *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#1482: FILE: include/target/target_core_device.h:42:
+extern int transport_get_lun_for_tmr(struct se_cmd_s *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1482: FILE: include/target/target_core_device.h:42:
+extern int transport_get_lun_for_tmr(struct se_cmd_s *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1483: FILE: include/target/target_core_device.h:43:
+extern int core_free_device_list_for_node(se_node_acl_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_node_acl_t *' should also have an identifier name
#1483: FILE: include/target/target_core_device.h:43:
+extern int core_free_device_list_for_node(se_node_acl_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_portal_group_t *' should also have an identifier name
#1483: FILE: include/target/target_core_device.h:43:
+extern int core_free_device_list_for_node(se_node_acl_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1484: FILE: include/target/target_core_device.h:44:
+extern int core_free_device_list_for_node(se_node_acl_t *,
+					se_portal_group_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1485: FILE: include/target/target_core_device.h:45:
+extern void core_dec_lacl_count(struct se_node_acl_s *, struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_node_acl_s *' should also have an identifier name
#1485: FILE: include/target/target_core_device.h:45:
+extern void core_dec_lacl_count(struct se_node_acl_s *, struct se_cmd_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#1485: FILE: include/target/target_core_device.h:45:
+extern void core_dec_lacl_count(struct se_node_acl_s *, struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1486: FILE: include/target/target_core_device.h:46:
+extern void core_update_device_list_access(u32, u32, se_node_acl_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1486: FILE: include/target/target_core_device.h:46:
+extern void core_update_device_list_access(u32, u32, se_node_acl_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1486: FILE: include/target/target_core_device.h:46:
+extern void core_update_device_list_access(u32, u32, se_node_acl_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_node_acl_t *' should also have an identifier name
#1486: FILE: include/target/target_core_device.h:46:
+extern void core_update_device_list_access(u32, u32, se_node_acl_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1487: FILE: include/target/target_core_device.h:47:
+extern void core_update_device_list_for_node(se_lun_t *lun, u32, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1487: FILE: include/target/target_core_device.h:47:
+extern void core_update_device_list_for_node(se_lun_t *lun, u32, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1487: FILE: include/target/target_core_device.h:47:
+extern void core_update_device_list_for_node(se_lun_t *lun, u32, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_node_acl_t *' should also have an identifier name
#1487: FILE: include/target/target_core_device.h:47:
+extern void core_update_device_list_for_node(se_lun_t *lun, u32, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_portal_group_t *' should also have an identifier name
#1487: FILE: include/target/target_core_device.h:47:
+extern void core_update_device_list_for_node(se_lun_t *lun, u32, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1487: FILE: include/target/target_core_device.h:47:
+extern void core_update_device_list_for_node(se_lun_t *lun, u32, u32,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1488: FILE: include/target/target_core_device.h:48:
+extern void core_update_device_list_for_node(se_lun_t *lun, u32, u32,
+					se_node_acl_t *, se_portal_group_t *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1490: FILE: include/target/target_core_device.h:50:
+extern void core_clear_lun_from_tpg(se_lun_t *, se_portal_group_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_lun_t *' should also have an identifier name
#1490: FILE: include/target/target_core_device.h:50:
+extern void core_clear_lun_from_tpg(se_lun_t *, se_portal_group_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_portal_group_t *' should also have an identifier name
#1490: FILE: include/target/target_core_device.h:50:
+extern void core_clear_lun_from_tpg(se_lun_t *, se_portal_group_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1491: FILE: include/target/target_core_device.h:51:
+extern struct se_port_s *core_alloc_port(struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#1491: FILE: include/target/target_core_device.h:51:
+extern struct se_port_s *core_alloc_port(struct se_device_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1492: FILE: include/target/target_core_device.h:52:
+extern void core_export_port(struct se_device_s *, struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#1492: FILE: include/target/target_core_device.h:52:
+extern void core_export_port(struct se_device_s *, struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_portal_group_s *' should also have an identifier name
#1492: FILE: include/target/target_core_device.h:52:
+extern void core_export_port(struct se_device_s *, struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_port_s *' should also have an identifier name
#1492: FILE: include/target/target_core_device.h:52:
+extern void core_export_port(struct se_device_s *, struct se_portal_group_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_lun_s *' should also have an identifier name
#1492: FILE: include/target/target_core_device.h:52:
+extern void core_export_port(struct se_device_s *, struct se_portal_group_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1493: FILE: include/target/target_core_device.h:53:
+extern void core_export_port(struct se_device_s *, struct se_portal_group_s *,
+					struct se_port_s *, struct se_lun_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1494: FILE: include/target/target_core_device.h:54:
+extern void core_release_port(struct se_device_s *, struct se_port_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#1494: FILE: include/target/target_core_device.h:54:
+extern void core_release_port(struct se_device_s *, struct se_port_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_port_s *' should also have an identifier name
#1494: FILE: include/target/target_core_device.h:54:
+extern void core_release_port(struct se_device_s *, struct se_port_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1495: FILE: include/target/target_core_device.h:55:
+extern int transport_core_report_lun_response(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#1495: FILE: include/target/target_core_device.h:55:
+extern int transport_core_report_lun_response(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1496: FILE: include/target/target_core_device.h:56:
+extern void se_release_device_for_hba(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1496: FILE: include/target/target_core_device.h:56:
+extern void se_release_device_for_hba(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1497: FILE: include/target/target_core_device.h:57:
+extern void se_release_vpd_for_dev(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1497: FILE: include/target/target_core_device.h:57:
+extern void se_release_vpd_for_dev(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1498: FILE: include/target/target_core_device.h:58:
+extern void se_clear_dev_ports(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1498: FILE: include/target/target_core_device.h:58:
+extern void se_clear_dev_ports(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1499: FILE: include/target/target_core_device.h:59:
+extern int se_free_virtual_device(se_device_t *, se_hba_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1499: FILE: include/target/target_core_device.h:59:
+extern int se_free_virtual_device(se_device_t *, se_hba_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1499: FILE: include/target/target_core_device.h:59:
+extern int se_free_virtual_device(se_device_t *, se_hba_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1500: FILE: include/target/target_core_device.h:60:
+extern void se_dev_start(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1500: FILE: include/target/target_core_device.h:60:
+extern void se_dev_start(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1501: FILE: include/target/target_core_device.h:61:
+extern void se_dev_stop(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1501: FILE: include/target/target_core_device.h:61:
+extern void se_dev_stop(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1502: FILE: include/target/target_core_device.h:62:
+extern void se_dev_set_default_attribs(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1502: FILE: include/target/target_core_device.h:62:
+extern void se_dev_set_default_attribs(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1503: FILE: include/target/target_core_device.h:63:
+extern int se_dev_set_task_timeout(se_device_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1503: FILE: include/target/target_core_device.h:63:
+extern int se_dev_set_task_timeout(se_device_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1503: FILE: include/target/target_core_device.h:63:
+extern int se_dev_set_task_timeout(se_device_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1504: FILE: include/target/target_core_device.h:64:
+extern int se_dev_set_emulate_ua_intlck_ctrl(se_device_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1504: FILE: include/target/target_core_device.h:64:
+extern int se_dev_set_emulate_ua_intlck_ctrl(se_device_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1504: FILE: include/target/target_core_device.h:64:
+extern int se_dev_set_emulate_ua_intlck_ctrl(se_device_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1505: FILE: include/target/target_core_device.h:65:
+extern int se_dev_set_emulate_tas(se_device_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1505: FILE: include/target/target_core_device.h:65:
+extern int se_dev_set_emulate_tas(se_device_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1505: FILE: include/target/target_core_device.h:65:
+extern int se_dev_set_emulate_tas(se_device_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1506: FILE: include/target/target_core_device.h:66:
+extern int se_dev_set_queue_depth(se_device_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1506: FILE: include/target/target_core_device.h:66:
+extern int se_dev_set_queue_depth(se_device_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1506: FILE: include/target/target_core_device.h:66:
+extern int se_dev_set_queue_depth(se_device_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1507: FILE: include/target/target_core_device.h:67:
+extern int se_dev_set_max_sectors(se_device_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1507: FILE: include/target/target_core_device.h:67:
+extern int se_dev_set_max_sectors(se_device_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1507: FILE: include/target/target_core_device.h:67:
+extern int se_dev_set_max_sectors(se_device_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1508: FILE: include/target/target_core_device.h:68:
+extern int se_dev_set_block_size(se_device_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1508: FILE: include/target/target_core_device.h:68:
+extern int se_dev_set_block_size(se_device_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1508: FILE: include/target/target_core_device.h:68:
+extern int se_dev_set_block_size(se_device_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1509: FILE: include/target/target_core_device.h:69:
+extern se_lun_t *core_dev_add_lun(se_portal_group_t *, se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_portal_group_t *' should also have an identifier name
#1509: FILE: include/target/target_core_device.h:69:
+extern se_lun_t *core_dev_add_lun(se_portal_group_t *, se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1509: FILE: include/target/target_core_device.h:69:
+extern se_lun_t *core_dev_add_lun(se_portal_group_t *, se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1509: FILE: include/target/target_core_device.h:69:
+extern se_lun_t *core_dev_add_lun(se_portal_group_t *, se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1509: FILE: include/target/target_core_device.h:69:
+extern se_lun_t *core_dev_add_lun(se_portal_group_t *, se_hba_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1510: FILE: include/target/target_core_device.h:70:
+extern se_lun_t *core_dev_add_lun(se_portal_group_t *, se_hba_t *,
+					se_device_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1511: FILE: include/target/target_core_device.h:71:
+extern int core_dev_del_lun(se_portal_group_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_portal_group_t *' should also have an identifier name
#1511: FILE: include/target/target_core_device.h:71:
+extern int core_dev_del_lun(se_portal_group_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1511: FILE: include/target/target_core_device.h:71:
+extern int core_dev_del_lun(se_portal_group_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1512: FILE: include/target/target_core_device.h:72:
+extern se_lun_t *core_get_lun_from_tpg(se_portal_group_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_portal_group_t *' should also have an identifier name
#1512: FILE: include/target/target_core_device.h:72:
+extern se_lun_t *core_get_lun_from_tpg(se_portal_group_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1512: FILE: include/target/target_core_device.h:72:
+extern se_lun_t *core_get_lun_from_tpg(se_portal_group_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1513: FILE: include/target/target_core_device.h:73:
+extern se_lun_acl_t *core_dev_init_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_portal_group_t *' should also have an identifier name
#1513: FILE: include/target/target_core_device.h:73:
+extern se_lun_acl_t *core_dev_init_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1513: FILE: include/target/target_core_device.h:73:
+extern se_lun_acl_t *core_dev_init_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1513: FILE: include/target/target_core_device.h:73:
+extern se_lun_acl_t *core_dev_init_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1513: FILE: include/target/target_core_device.h:73:
+extern se_lun_acl_t *core_dev_init_initiator_node_lun_acl(se_portal_group_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1514: FILE: include/target/target_core_device.h:74:
+extern se_lun_acl_t *core_dev_init_initiator_node_lun_acl(se_portal_group_t *,
+							u32, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1515: FILE: include/target/target_core_device.h:75:
+extern int core_dev_add_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_portal_group_t *' should also have an identifier name
#1515: FILE: include/target/target_core_device.h:75:
+extern int core_dev_add_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_lun_acl_t *' should also have an identifier name
#1515: FILE: include/target/target_core_device.h:75:
+extern int core_dev_add_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1515: FILE: include/target/target_core_device.h:75:
+extern int core_dev_add_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1515: FILE: include/target/target_core_device.h:75:
+extern int core_dev_add_initiator_node_lun_acl(se_portal_group_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1516: FILE: include/target/target_core_device.h:76:
+extern int core_dev_add_initiator_node_lun_acl(se_portal_group_t *,
+						se_lun_acl_t *, u32, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1517: FILE: include/target/target_core_device.h:77:
+extern int core_dev_del_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_portal_group_t *' should also have an identifier name
#1517: FILE: include/target/target_core_device.h:77:
+extern int core_dev_del_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_lun_t *' should also have an identifier name
#1517: FILE: include/target/target_core_device.h:77:
+extern int core_dev_del_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_lun_acl_t *' should also have an identifier name
#1517: FILE: include/target/target_core_device.h:77:
+extern int core_dev_del_initiator_node_lun_acl(se_portal_group_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1518: FILE: include/target/target_core_device.h:78:
+extern int core_dev_del_initiator_node_lun_acl(se_portal_group_t *,
+						se_lun_t *, se_lun_acl_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1519: FILE: include/target/target_core_device.h:79:
+extern void core_dev_free_initiator_node_lun_acl(se_portal_group_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_portal_group_t *' should also have an identifier name
#1519: FILE: include/target/target_core_device.h:79:
+extern void core_dev_free_initiator_node_lun_acl(se_portal_group_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1520: FILE: include/target/target_core_device.h:80:
+extern void core_dev_free_initiator_node_lun_acl(se_portal_group_t *,
+						se_lun_acl_t *lacl);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144115.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 211 warnings, 114 checks, 1466 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144115.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
