WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#72: FILE: include/linux/kvm_host.h:583:
+long kvm_vm_ioctl_assigned_device(struct kvm *kvm, unsigned ioctl,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#77: FILE: include/linux/kvm_host.h:588:
+static inline long kvm_vm_ioctl_assigned_device(struct kvm *kvm, unsigned ioctl,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#88: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: virt/kvm/assigned-dev.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: virt/kvm/assigned-dev.c:22:
+static struct kvm_assigned_dev_kernel *kvm_find_assigned_dev(struct list_head *head,
+						      int assigned_dev_id)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#142: FILE: virt/kvm/assigned-dev.c:50:
+		printk(KERN_WARNING "Fail to find correlated MSI-X entry!\n");

CHECK:BRACES: Unbalanced braces around else statement
#172: FILE: virt/kvm/assigned-dev.c:80:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#183: FILE: virt/kvm/assigned-dev.c:91:
+		(struct kvm_assigned_dev_kernel *) dev_id;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#188: FILE: virt/kvm/assigned-dev.c:96:
+		int index = find_index_from_host_irq(assigned_dev, irq);
+		if (index < 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#265: FILE: virt/kvm/assigned-dev.c:173:
+		int i;
+		for (i = 0; i < assigned_dev->entries_nr; i++)

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'assigned_dev->host_msix_entries[i].vector'
#267: FILE: virt/kvm/assigned-dev.c:175:
+			disable_irq_nosync(assigned_dev->
+					   host_msix_entries[i].vector);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#397: FILE: virt/kvm/assigned-dev.c:305:
+	 * initialized */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: virt/kvm/assigned-dev.c:329:
+static int assigned_device_enable_guest_intx(struct kvm *kvm,
+				struct kvm_assigned_dev_kernel *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: virt/kvm/assigned-dev.c:339:
+static int assigned_device_enable_guest_msi(struct kvm *kvm,
+			struct kvm_assigned_dev_kernel *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: virt/kvm/assigned-dev.c:351:
+static int assigned_device_enable_guest_msix(struct kvm *kvm,
+			struct kvm_assigned_dev_kernel *dev,

CHECK:BRACES: braces {} should be used on all arms of this statement
#521: FILE: virt/kvm/assigned-dev.c:429:
+	if (!r) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#524: FILE: virt/kvm/assigned-dev.c:432:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*match)...) over kzalloc(sizeof(struct kvm_assigned_dev_kernel)...)
#614: FILE: virt/kvm/assigned-dev.c:522:
+	match = kzalloc(sizeof(struct kvm_assigned_dev_kernel), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!match"
#615: FILE: virt/kvm/assigned-dev.c:523:
+	if (match == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#616: FILE: virt/kvm/assigned-dev.c:524:
+		printk(KERN_INFO "%s: Couldn't allocate memory\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#616: FILE: virt/kvm/assigned-dev.c:524:
+	if (match == NULL) {
+		printk(KERN_INFO "%s: Couldn't allocate memory\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#624: FILE: virt/kvm/assigned-dev.c:532:
+		printk(KERN_INFO "%s: host device not found\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#629: FILE: virt/kvm/assigned-dev.c:537:
+		printk(KERN_INFO "%s: Could not enable PCI device\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#635: FILE: virt/kvm/assigned-dev.c:543:
+		printk(KERN_INFO "%s: Could not get access to device regions\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: virt/kvm/assigned-dev.c:594:
+static int kvm_vm_ioctl_deassign_device(struct kvm *kvm,
+		struct kvm_assigned_pci_dev *assigned_dev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#696: FILE: virt/kvm/assigned-dev.c:604:
+		printk(KERN_INFO "%s: device hasn't been assigned before, "

WARNING:SPLIT_STRING: quoted string split across lines
#697: FILE: virt/kvm/assigned-dev.c:605:
+		printk(KERN_INFO "%s: device hasn't been assigned before, "
+		  "so cannot be deassigned\n", __func__);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#712: FILE: virt/kvm/assigned-dev.c:620:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: virt/kvm/assigned-dev.c:631:
+	adev = kvm_find_assigned_dev(&kvm->arch.assigned_dev_head,
+				      entry_nr->assigned_dev_id);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*adev->host_msix_entries)...) over kzalloc(sizeof(struct msix_entry)...)
#737: FILE: virt/kvm/assigned-dev.c:645:
+		adev->host_msix_entries = kzalloc(sizeof(struct msix_entry) *

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#744: FILE: virt/kvm/assigned-dev.c:652:
+		adev->guest_msix_entries = kzalloc(

CHECK:BRACES: Unbalanced braces around else statement
#752: FILE: virt/kvm/assigned-dev.c:660:
+	} else /* Not allowed set MSI-X number twice */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: virt/kvm/assigned-dev.c:676:
+	adev = kvm_find_assigned_dev(&kvm->arch.assigned_dev_head,
+				      entry->assigned_dev_id);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#795: FILE: virt/kvm/assigned-dev.c:703:
+long kvm_vm_ioctl_assigned_device(struct kvm *kvm, unsigned ioctl,

WARNING:SIZEOF_PARENTHESIS: sizeof assigned_dev should be sizeof(assigned_dev)
#806: FILE: virt/kvm/assigned-dev.c:714:
+		if (copy_from_user(&assigned_dev, argp, sizeof assigned_dev))

WARNING:SIZEOF_PARENTHESIS: sizeof assigned_irq should be sizeof(assigned_irq)
#822: FILE: virt/kvm/assigned-dev.c:730:
+		if (copy_from_user(&assigned_irq, argp, sizeof assigned_irq))

WARNING:SIZEOF_PARENTHESIS: sizeof assigned_irq should be sizeof(assigned_irq)
#833: FILE: virt/kvm/assigned-dev.c:741:
+		if (copy_from_user(&assigned_irq, argp, sizeof assigned_irq))

WARNING:SIZEOF_PARENTHESIS: sizeof assigned_dev should be sizeof(assigned_dev)
#846: FILE: virt/kvm/assigned-dev.c:754:
+		if (copy_from_user(&assigned_dev, argp, sizeof assigned_dev))

WARNING:INDENTED_LABEL: labels should not be indented
#879: FILE: virt/kvm/assigned-dev.c:787:
+	out_free_irq_routing:

WARNING:LINE_SPACING: Missing a blank line after declarations
#887: FILE: virt/kvm/assigned-dev.c:795:
+		struct kvm_assigned_msix_nr entry_nr;
+		r = -EFAULT;

WARNING:SIZEOF_PARENTHESIS: sizeof entry_nr should be sizeof(entry_nr)
#888: FILE: virt/kvm/assigned-dev.c:796:
+		if (copy_from_user(&entry_nr, argp, sizeof entry_nr))

WARNING:LINE_SPACING: Missing a blank line after declarations
#897: FILE: virt/kvm/assigned-dev.c:805:
+		struct kvm_assigned_msix_entry entry;
+		r = -EFAULT;

WARNING:SIZEOF_PARENTHESIS: sizeof entry should be sizeof(entry)
#898: FILE: virt/kvm/assigned-dev.c:806:
+		if (copy_from_user(&entry, argp, sizeof entry))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000047537.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 27 warnings, 17 checks, 1684 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000047537.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
