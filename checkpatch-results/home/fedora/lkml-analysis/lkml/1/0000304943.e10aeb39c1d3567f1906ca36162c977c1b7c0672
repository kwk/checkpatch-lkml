WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#122: FILE: include/linux/debugobjects.h:1:
+#ifndef _LINUX_DEBUGOBJECTS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'representaion' may be misspelled - perhaps 'representation'?
#141: FILE: include/linux/debugobjects.h:20:
+ * struct debug_obj - representaion of an tracked object
                       ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: Unnecessary space before function pointer arguments
#169: FILE: include/linux/debugobjects.h:48:
+	int (*fixup_init)	(void *addr, enum debug_obj_state state);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#170: FILE: include/linux/debugobjects.h:49:
+	int (*fixup_activate)	(void *addr, enum debug_obj_state state);

WARNING:SPACING: Unnecessary space before function pointer arguments
#171: FILE: include/linux/debugobjects.h:50:
+	int (*fixup_destroy)	(void *addr, enum debug_obj_state state);

WARNING:SPACING: Unnecessary space before function pointer arguments
#172: FILE: include/linux/debugobjects.h:51:
+	int (*fixup_free)	(void *addr, enum debug_obj_state state);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#176: FILE: include/linux/debugobjects.h:55:
+extern void debug_object_init      (void *addr, struct debug_obj_descr *descr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/debugobjects.h:55:
+extern void debug_object_init      (void *addr, struct debug_obj_descr *descr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#179: FILE: include/linux/debugobjects.h:58:
+extern void debug_object_activate  (void *addr, struct debug_obj_descr *descr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: include/linux/debugobjects.h:58:
+extern void debug_object_activate  (void *addr, struct debug_obj_descr *descr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/linux/debugobjects.h:59:
+extern void debug_object_deactivate(void *addr, struct debug_obj_descr *descr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#181: FILE: include/linux/debugobjects.h:60:
+extern void debug_object_destroy   (void *addr, struct debug_obj_descr *descr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#181: FILE: include/linux/debugobjects.h:60:
+extern void debug_object_destroy   (void *addr, struct debug_obj_descr *descr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#182: FILE: include/linux/debugobjects.h:61:
+extern void debug_object_free      (void *addr, struct debug_obj_descr *descr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: include/linux/debugobjects.h:61:
+extern void debug_object_free      (void *addr, struct debug_obj_descr *descr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: include/linux/debugobjects.h:63:
+extern void debug_objects_early_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: include/linux/debugobjects.h:64:
+extern void debug_objects_mem_init(void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#188: FILE: include/linux/debugobjects.h:67:
+debug_object_init      (void *addr, struct debug_obj_descr *descr) { }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#192: FILE: include/linux/debugobjects.h:71:
+debug_object_activate  (void *addr, struct debug_obj_descr *descr) { }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#196: FILE: include/linux/debugobjects.h:75:
+debug_object_destroy   (void *addr, struct debug_obj_descr *descr) { }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#198: FILE: include/linux/debugobjects.h:77:
+debug_object_free      (void *addr, struct debug_obj_descr *descr) { }

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/linux/debugobjects.h:84:
+extern void debug_check_no_obj_freed(const void *address, unsigned long size);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#248: FILE: lib/Kconfig.debug:186:
+config DEBUG_OBJECTS
+	bool "Debug object operations"
+	depends on DEBUG_KERNEL
+	help
+	  If you say Y here, additional code will be inserted into the
+	  kernel to track the life time of various objects and validate
+	  the operations on those objects.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#256: FILE: lib/Kconfig.debug:194:
+config DEBUG_OBJECTS_SELFTEST
+	bool "Debug objects selftest"
+	depends on DEBUG_OBJECTS
+	help
+	  This enables the selftest of the object debug code.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#291: FILE: lib/debugobjects.c:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#307: FILE: lib/debugobjects.c:17:
+#define ODEBUG_HASH_SIZE	(1 << ODEBUG_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#313: FILE: lib/debugobjects.c:23:
+#define ODEBUG_CHUNK_SIZE	(1 << ODEBUG_CHUNK_SHIFT)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#318: FILE: lib/debugobjects.c:28:
+	spinlock_t		lock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#346: FILE: lib/debugobjects.c:56:
+}
+early_param("debug_objects", enable_object_debug);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#369: FILE: lib/debugobjects.c:79:
+	while (obj_pool_free < ODEBUG_POOL_MIN_LEVEL) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#473: FILE: lib/debugobjects.c:183:
+	printk(KERN_WARNING "ODEBUG: Out of memory. ODEBUG disabled\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#503: FILE: lib/debugobjects.c:213:
+		printk(KERN_ERR "ODEBUG: %s %s object type: %s\n", msg,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#516: FILE: lib/debugobjects.c:226:
+		   void * addr, enum debug_obj_state state)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#538: FILE: lib/debugobjects.c:248:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#541: FILE: lib/debugobjects.c:251:
+		printk(KERN_WARNING

CHECK:SPACING: No space is necessary after a cast
#554: FILE: lib/debugobjects.c:264:
+	db = get_bucket((unsigned long) addr);

CHECK:SPACING: No space is necessary after a cast
#636: FILE: lib/debugobjects.c:346:
+	db = get_bucket((unsigned long) addr);

CHECK:SPACING: No space is necessary after a cast
#689: FILE: lib/debugobjects.c:399:
+	db = get_bucket((unsigned long) addr);

CHECK:SPACING: No space is necessary after a cast
#734: FILE: lib/debugobjects.c:444:
+	db = get_bucket((unsigned long) addr);

CHECK:SPACING: No space is necessary after a cast
#780: FILE: lib/debugobjects.c:490:
+	db = get_bucket((unsigned long) addr);

CHECK:SPACING: No space is necessary after a cast
#815: FILE: lib/debugobjects.c:525:
+	saddr = (unsigned long) address;

ERROR:SPACING: space required after that ';' (ctx:BxV)
#821: FILE: lib/debugobjects.c:531:
+	for (;chunks > 0; chunks--, paddr += ODEBUG_CHUNK_SIZE) {
 	     ^

CHECK:SPACING: No space is necessary after a cast
#829: FILE: lib/debugobjects.c:539:
+			oaddr = (unsigned long) obj->object;

CHECK:SPACING: No space is necessary after a cast
#840: FILE: lib/debugobjects.c:550:
+						   (void *) oaddr, state);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#875: FILE: lib/debugobjects.c:585:
+static int debug_stats_open(struct inode *inode, struct file *filp)
                                                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#877: FILE: lib/debugobjects.c:587:
+	return single_open(filp, debug_stats_show, NULL);
 	                   ^^^^

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#910: FILE: lib/debugobjects.c:620:
+__initcall(debug_objects_init_debugfs);

WARNING:MISPLACED_INIT: __initdata should be placed after descr_type_test
#925: FILE: lib/debugobjects.c:635:
+static __initdata struct debug_obj_descr descr_type_test;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#966: FILE: lib/debugobjects.c:676:
+			return 1;
+		} else {

CHECK:SPACING: No space is necessary after a cast
#1025: FILE: lib/debugobjects.c:735:
+	db = get_bucket((unsigned long) addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1031: FILE: lib/debugobjects.c:741:
+		printk(KERN_ERR "ODEBUG: selftest object not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1036: FILE: lib/debugobjects.c:746:
+		printk(KERN_ERR "ODEBUG: selftest wrong state: %d != %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1042: FILE: lib/debugobjects.c:752:
+		printk(KERN_ERR "ODEBUG: selftest fixups failed %d != %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1048: FILE: lib/debugobjects.c:758:
+		printk(KERN_ERR "ODEBUG: selftest warnings failed %d != %d\n",

WARNING:MISPLACED_INIT: __initdata should be placed after descr_type_test
#1061: FILE: lib/debugobjects.c:771:
+static __initdata struct debug_obj_descr descr_type_test = {

WARNING:MISPLACED_INIT: __initdata should be placed after obj
#1069: FILE: lib/debugobjects.c:779:
+static __initdata struct self_test obj = { .static_init = 0 };

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1078: FILE: lib/debugobjects.c:788:
+	fixups = oldfixups = debug_objects_fixups;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1079: FILE: lib/debugobjects.c:789:
+	warnings = oldwarnings = debug_objects_warnings;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1132: FILE: lib/debugobjects.c:842:
+	printk(KERN_INFO "ODEBUG: selftest passed\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1173: FILE: lib/debugobjects.c:883:
+				      sizeof (struct debug_obj), 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1201: FILE: mm/page_alloc.c:539:
+		debug_check_no_obj_freed(page_address(page),
+					   PAGE_SIZE << order);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304943.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 34 warnings, 25 checks, 1142 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304943.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
