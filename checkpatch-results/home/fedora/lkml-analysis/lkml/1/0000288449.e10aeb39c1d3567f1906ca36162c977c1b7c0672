WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ridr *' should also have an identifier name
#48: FILE: include/linux/ridr.h:66:
+void ridr_remove(struct ridr *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#48: FILE: include/linux/ridr.h:66:
+void ridr_remove(struct ridr *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#60: FILE: include/linux/idr.h:94:
+void _idr_remove_warning(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#60: FILE: include/linux/idr.h:94:
+void _idr_remove_warning(const char *, int);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#76: FILE: lib/idr.c:361:
+	printk(KERN_INFO "%s called for id=%d which is not allocated.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: lib/idr.c:362:
+	printk(KERN_INFO "%s called for id=%d which is not allocated.\n",
+		caller, id);

CHECK:SPACING: No space is necessary after a cast
#132: FILE: lib/ridr.c:289:
+		*++paa = (struct ridr_layer **) &(p->idr.ary[n]);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->idr.ary[n]
#132: FILE: lib/ridr.c:289:
+		*++paa = (struct ridr_layer **) &(p->idr.ary[n]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#137: FILE: lib/ridr.c:294:
+	if (likely(p != NULL && test_bit(n, &p->idr.bitmap))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#137: FILE: lib/ridr.c:294:
+	if (likely(p != NULL && test_bit(n, &p->idr.bitmap))) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#151: FILE: lib/ridr.c:308:
+	} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#154: FILE: lib/ridr.c:311:
+}
+/**

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idp->layers > 1'
#168: FILE: lib/ridr.c:325:
+	if (idp->top && idp->top->idr.count == 1 && (idp->layers > 1) &&
+	    idp->top->idr.ary[0]) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#180: FILE: lib/ridr.c:337:
+		to_free->idr.bitmap = to_free->idr.count = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:RETURN_VOID: void function return statements are not generally useful
#185: FILE: lib/ridr.c:342:
+	return;
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000288449.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 9 checks, 129 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000288449.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
