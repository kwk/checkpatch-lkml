WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Use reserve_memtype and free_memtype wrappers for /dev/mem mmaps. The memtype

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#56: FILE: arch/x86/mm/pat.c:25:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#91: FILE: arch/x86/mm/pat.c:227:
+			if (req_type == -1) {
[...]
+			} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#113: FILE: arch/x86/mm/pat.c:251:
+		u8 mtrr_type = mtrr_type_lookup(start, end);
+		if (mtrr_type == 0xFE) { /* MTRR match error */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#152: FILE: arch/x86/mm/pat.c:464:
+	u64 offset = ((u64) pfn) << PAGE_SHIFT;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#181: FILE: arch/x86/mm/pat.c:499:
+	if (flags != _PAGE_CACHE_UC_MINUS) {
[...]
+	} else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: arch/x86/mm/pat.c:511:
+            ioremap_change_attr((unsigned long)__va(offset), size, flags) < 0) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: arch/x86/mm/pat.c:511:
+	if (pfn <= max_pfn_mapped &&
+            ioremap_change_attr((unsigned long)__va(offset), size, flags) < 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: arch/x86/mm/pat.c:511:
+            ioremap_change_attr((unsigned long)__va(offset), size, flags) < 0) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#195: FILE: arch/x86/mm/pat.c:513:
+		printk(KERN_DEBUG

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#196: FILE: arch/x86/mm/pat.c:514:
+		"%s:%d /dev/mem ioremap_change_attr failed %s for %Lx-%Lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#216: FILE: arch/x86/mm/pat.c:534:
+		printk(KERN_DEBUG

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#217: FILE: arch/x86/mm/pat.c:535:
+		"%s:%d /dev/mem expected mapping type %s for %Lx-%Lx, got %s\n",

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#240: FILE: drivers/char/mem.c:303:
+void __attribute__((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#246: FILE: drivers/char/mem.c:309:
+void __attribute__((weak))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: drivers/char/mem.c:318:
+	map_devmem(vma->vm_pgoff,  vma->vm_end - vma->vm_start,
+			vma->vm_page_prot);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: drivers/char/mem.c:324:
+	unmap_devmem(vma->vm_pgoff,  vma->vm_end - vma->vm_start,
+			vma->vm_page_prot);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#264: FILE: drivers/char/mem.c:327:
+static struct vm_operations_struct mmap_mem_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306152.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 5 checks, 233 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306152.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
