WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#51: FILE: lib/Kconfig.debug:1057:
+config ATOMIC64_SELFTEST
+	bool "Perform an atomic64_t self-test at boot"
+	help
+	  Enable this option to test the atomic64_t functions at boot.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#75: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: lib/atomic64_test.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#91: FILE: lib/atomic64_test.c:12:
+#include <asm/atomic.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#93: FILE: lib/atomic64_test.c:14:
+#define INIT(c) do { atomic64_set(&v, c); r = c; } while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#104: FILE: lib/atomic64_test.c:25:
+	long long r = v0;
+	BUG_ON(v.counter != r);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#104: FILE: lib/atomic64_test.c:25:
+	BUG_ON(v.counter != r);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#108: FILE: lib/atomic64_test.c:29:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#109: FILE: lib/atomic64_test.c:30:
+	BUG_ON(atomic64_read(&v) != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#114: FILE: lib/atomic64_test.c:35:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#119: FILE: lib/atomic64_test.c:40:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#123: FILE: lib/atomic64_test.c:44:
+	BUG_ON(atomic64_add_return(onestwos, &v) != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#124: FILE: lib/atomic64_test.c:45:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#128: FILE: lib/atomic64_test.c:49:
+	BUG_ON(atomic64_add_return(-one, &v) != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#129: FILE: lib/atomic64_test.c:50:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#134: FILE: lib/atomic64_test.c:55:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#139: FILE: lib/atomic64_test.c:60:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#143: FILE: lib/atomic64_test.c:64:
+	BUG_ON(atomic64_sub_return(onestwos, &v) != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#144: FILE: lib/atomic64_test.c:65:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#148: FILE: lib/atomic64_test.c:69:
+	BUG_ON(atomic64_sub_return(-one, &v) != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#149: FILE: lib/atomic64_test.c:70:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#154: FILE: lib/atomic64_test.c:75:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#158: FILE: lib/atomic64_test.c:79:
+	BUG_ON(atomic64_inc_return(&v) != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#159: FILE: lib/atomic64_test.c:80:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#164: FILE: lib/atomic64_test.c:85:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#168: FILE: lib/atomic64_test.c:89:
+	BUG_ON(atomic64_dec_return(&v) != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#169: FILE: lib/atomic64_test.c:90:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#172: FILE: lib/atomic64_test.c:93:
+	BUG_ON(atomic64_xchg(&v, v1) != v0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#174: FILE: lib/atomic64_test.c:95:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#177: FILE: lib/atomic64_test.c:98:
+	BUG_ON(atomic64_cmpxchg(&v, v0, v1) != v0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#179: FILE: lib/atomic64_test.c:100:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#182: FILE: lib/atomic64_test.c:103:
+	BUG_ON(atomic64_cmpxchg(&v, v2, v1) != v0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: lib/atomic64_test.c:104:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#186: FILE: lib/atomic64_test.c:107:
+	BUG_ON(!atomic64_add_unless(&v, one, v0));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#187: FILE: lib/atomic64_test.c:108:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#190: FILE: lib/atomic64_test.c:111:
+	BUG_ON(atomic64_add_unless(&v, one, v1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#192: FILE: lib/atomic64_test.c:113:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#195: FILE: lib/atomic64_test.c:116:
+	BUG_ON(atomic64_dec_if_positive(&v) != (onestwos - 1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#197: FILE: lib/atomic64_test.c:118:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#200: FILE: lib/atomic64_test.c:121:
+	BUG_ON(atomic64_dec_if_positive(&v) != -one);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#201: FILE: lib/atomic64_test.c:122:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: lib/atomic64_test.c:125:
+	BUG_ON(atomic64_dec_if_positive(&v) != (-one - one));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#205: FILE: lib/atomic64_test.c:126:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#208: FILE: lib/atomic64_test.c:129:
+	BUG_ON(atomic64_inc_not_zero(&v));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: lib/atomic64_test.c:131:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#213: FILE: lib/atomic64_test.c:134:
+	BUG_ON(!atomic64_inc_not_zero(&v));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#214: FILE: lib/atomic64_test.c:135:
+	BUG_ON(v.counter != r);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#217: FILE: lib/atomic64_test.c:138:
+	BUG_ON(atomic64_inc_not_zero(&v));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#219: FILE: lib/atomic64_test.c:140:
+	BUG_ON(v.counter != r);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#222: FILE: lib/atomic64_test.c:143:
+	printk(KERN_INFO "atomic64 test passed for %s+ platform %s CX8 and %s SSE\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: lib/atomic64_test.c:144:
+	printk(KERN_INFO "atomic64 test passed for %s+ platform %s CX8 and %s SSE\n",
+#ifdef CONFIG_X86_CMPXCHG64

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#231: FILE: lib/atomic64_test.c:152:
+	printk(KERN_INFO "atomic64 test passed\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009713.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 50 warnings, 2 checks, 179 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009713.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
