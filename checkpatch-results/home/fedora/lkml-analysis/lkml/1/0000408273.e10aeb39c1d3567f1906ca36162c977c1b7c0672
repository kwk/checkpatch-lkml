WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/libata-dev.git upstream-linus

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#296: FILE: drivers/ata/ahci.c:571:
+		dev_printk(KERN_ERR, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_warn(... to dev_printk(KERN_WARNING, ...
#331: FILE: drivers/ata/ahci.c:869:
+		dev_printk(KERN_WARNING, &pdev->dev,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#626: FILE: drivers/ata/libata-acpi.c:28:
+#define SATA_ADR(root,pmp)	(((root) << 16) | (pmp))
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#993: FILE: drivers/ata/libata-acpi.c:199:
+		ata_port_printk(ap, KERN_ERR,
+			"ACPI set timing mode failed (status=0x%x)\n", status);

WARNING:SPLIT_STRING: quoted string split across lines
#1213: FILE: drivers/ata/libata-acpi.c:289:
 		ata_dev_printk(dev, KERN_DEBUG, "%s: returning "
+			"gtf=%p, gtf_count=%d, ptr_to_free=%p\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1214: FILE: drivers/ata/libata-acpi.c:290:
+			__FUNCTION__, *gtf, rc, *ptr_to_free);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: drivers/ata/libata-acpi.c:321:
+static int taskfile_load_raw(struct ata_device *dev,
+			      const struct ata_acpi_gtf *gtf)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tf[0] == 0'
#1257: FILE: drivers/ata/libata-acpi.c:327:
+	if ((gtf->tf[0] == 0) && (gtf->tf[1] == 0) && (gtf->tf[2] == 0)
+	    && (gtf->tf[3] == 0) && (gtf->tf[4] == 0) && (gtf->tf[5] == 0)
+	    && (gtf->tf[6] == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tf[1] == 0'
#1257: FILE: drivers/ata/libata-acpi.c:327:
+	if ((gtf->tf[0] == 0) && (gtf->tf[1] == 0) && (gtf->tf[2] == 0)
+	    && (gtf->tf[3] == 0) && (gtf->tf[4] == 0) && (gtf->tf[5] == 0)
+	    && (gtf->tf[6] == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tf[2] == 0'
#1257: FILE: drivers/ata/libata-acpi.c:327:
+	if ((gtf->tf[0] == 0) && (gtf->tf[1] == 0) && (gtf->tf[2] == 0)
+	    && (gtf->tf[3] == 0) && (gtf->tf[4] == 0) && (gtf->tf[5] == 0)
+	    && (gtf->tf[6] == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tf[3] == 0'
#1257: FILE: drivers/ata/libata-acpi.c:327:
+	if ((gtf->tf[0] == 0) && (gtf->tf[1] == 0) && (gtf->tf[2] == 0)
+	    && (gtf->tf[3] == 0) && (gtf->tf[4] == 0) && (gtf->tf[5] == 0)
+	    && (gtf->tf[6] == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tf[4] == 0'
#1257: FILE: drivers/ata/libata-acpi.c:327:
+	if ((gtf->tf[0] == 0) && (gtf->tf[1] == 0) && (gtf->tf[2] == 0)
+	    && (gtf->tf[3] == 0) && (gtf->tf[4] == 0) && (gtf->tf[5] == 0)
+	    && (gtf->tf[6] == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tf[5] == 0'
#1257: FILE: drivers/ata/libata-acpi.c:327:
+	if ((gtf->tf[0] == 0) && (gtf->tf[1] == 0) && (gtf->tf[2] == 0)
+	    && (gtf->tf[3] == 0) && (gtf->tf[4] == 0) && (gtf->tf[5] == 0)
+	    && (gtf->tf[6] == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tf[6] == 0'
#1257: FILE: drivers/ata/libata-acpi.c:327:
+	if ((gtf->tf[0] == 0) && (gtf->tf[1] == 0) && (gtf->tf[2] == 0)
+	    && (gtf->tf[3] == 0) && (gtf->tf[4] == 0) && (gtf->tf[5] == 0)
+	    && (gtf->tf[6] == 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1258: FILE: drivers/ata/libata-acpi.c:328:
+	if ((gtf->tf[0] == 0) && (gtf->tf[1] == 0) && (gtf->tf[2] == 0)
+	    && (gtf->tf[3] == 0) && (gtf->tf[4] == 0) && (gtf->tf[5] == 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1259: FILE: drivers/ata/libata-acpi.c:329:
+	    && (gtf->tf[3] == 0) && (gtf->tf[4] == 0) && (gtf->tf[5] == 0)
+	    && (gtf->tf[6] == 0))

WARNING:SPLIT_STRING: quoted string split across lines
#1337: FILE: drivers/ata/libata-acpi.c:347:
+		ata_dev_printk(dev, KERN_DEBUG, "executing ACPI cmd "
+			       "%02x/%02x:%02x:%02x:%02x:%02x:%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1345: FILE: drivers/ata/libata-acpi.c:355:
+		ata_dev_printk(dev, KERN_ERR,
+			"ACPI cmd %02x/%02x:%02x:%02x:%02x:%02x:%02x failed "

WARNING:SPLIT_STRING: quoted string split across lines
#1346: FILE: drivers/ata/libata-acpi.c:356:
+			"ACPI cmd %02x/%02x:%02x:%02x:%02x:%02x:%02x failed "
+			"(Emask=0x%x Stat=0x%02x Err=0x%02x)\n",

WARNING:TYPO_SPELLING: 'excute' may be misspelled - perhaps 'execute'?
#1364: FILE: drivers/ata/libata-acpi.c:369:
+ * Evaluate _GTF and excute returned taskfiles.
                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1562: FILE: drivers/ata/libata-acpi.c:482:
+	BUG_ON(ap->flags & ATA_FLAG_ACPI_SATA);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1594: FILE: drivers/ata/libata-acpi.c:514:
+		BUG_ON(ap->flags & ATA_FLAG_ACPI_SATA);

WARNING:SPLIT_STRING: quoted string split across lines
#1656: FILE: drivers/ata/libata-acpi.c:573:
+			ata_dev_printk(dev, KERN_ERR, "failed to IDENTIFY "
+				       "after ACPI commands\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1667: FILE: drivers/ata/libata-acpi.c:584:
+		ata_dev_printk(dev, KERN_WARNING, "ACPI on devcfg failed the "
+			       "second time, disabling (errno=%d)\n", rc);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc->__sg"
#1743: FILE: drivers/ata/libata-core.c:4124:
+	WARN_ON(qc->__sg == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#1751: FILE: drivers/ata/libata-core.c:4132:
+ ^I^I/* determine if physical DMA addr spans 64K boundary.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1751: FILE: drivers/ata/libata-core.c:4132:
+ ^I^I/* determine if physical DMA addr spans 64K boundary.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1751: FILE: drivers/ata/libata-core.c:4132:
+ ^I^I/* determine if physical DMA addr spans 64K boundary.$

CHECK:SPACING: No space is necessary after a cast
#1755: FILE: drivers/ata/libata-core.c:4136:
+		addr = (u32) sg_dma_address(sg);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1768: FILE: drivers/ata/libata-core.c:4149:
+			   /* Some PATA chipsets like the CS5530 can't
+			      cope with 0x0000 meaning 64K as the spec says */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1768: FILE: drivers/ata/libata-core.c:4149:
+			      cope with 0x0000 meaning 64K as the spec says */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1914: FILE: drivers/ata/libata.h:101:
+extern void ata_acpi_associate(struct ata_host *host);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1915: FILE: drivers/ata/libata.h:102:
+extern int ata_acpi_on_suspend(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1916: FILE: drivers/ata/libata.h:103:
+extern void ata_acpi_on_resume(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1917: FILE: drivers/ata/libata.h:104:
+extern int ata_acpi_on_devcfg(struct ata_device *adev);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2276: FILE: drivers/ata/pata_cs5530.c:204:
+^I.qc_prep ^I= ata_dumb_qc_prep,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2482: FILE: drivers/ata/pata_it8213.c:319:
+^I^I.udma_mask ^I= ATA_UDMA4, /* FIXME: want UDMA 100? */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2610: FILE: drivers/ata/pata_ixp4xx_cf.c:115:
+^I.check_status ^I^I= ata_check_status,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2611: FILE: drivers/ata/pata_ixp4xx_cf.c:116:
+^I.dev_select ^I^I= ata_std_dev_select,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2618: FILE: drivers/ata/pata_ixp4xx_cf.c:123:
+^I.qc_prep ^I^I= ata_qc_prep,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2665: FILE: drivers/ata/pata_jmicron.c:200:
+^I^I.udma_mask ^I= ATA_UDMA5,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2683: FILE: drivers/ata/pata_marvell.c:170:
+^I^I.udma_mask ^I= ATA_UDMA5,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2696: FILE: drivers/ata/pata_marvell.c:181:
+^I^I.udma_mask ^I= ATA_UDMA6,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2715: FILE: drivers/ata/pata_netcell.c:102:
+^I^I.udma_mask ^I= ATA_UDMA5, /* UDMA 133 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2881: FILE: drivers/ata/pata_sc1200.c:222:
+^I.qc_prep ^I= ata_dumb_qc_prep,$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2976: FILE: drivers/ata/pata_sil680.c:344:
+static int __devinit sil680_init_one(struct pci_dev *pdev,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3309: FILE: drivers/ata/sata_mv.c:2367:
+	       gen, (unsigned)MV_MAX_Q_DEPTH, host->n_ports,

WARNING:LINE_SPACING: Missing a blank line after declarations
#3498: FILE: drivers/ata/sata_promise.c:702:
+	const unsigned long mask = PDC_FLAG_GEN_II | PDC_FLAG_4_PORTS;
+	return (flags & mask) == mask;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#3504: FILE: drivers/ata/sata_promise.c:708:
+	static const unsigned char sataii_tx4_port_remap[4] = { 3, 1, 0, 2};
+	return is_sataii_tx4 ? sataii_tx4_port_remap[port_no] : port_no;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3749: FILE: drivers/ata/sata_svw.c:257:
+       ^Ireturn readl(ap->ioaddr.status_addr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3749: FILE: drivers/ata/sata_svw.c:257:
+       ^Ireturn readl(ap->ioaddr.status_addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3749: FILE: drivers/ata/sata_svw.c:257:
+       ^Ireturn readl(ap->ioaddr.status_addr);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3780: FILE: drivers/ata/sata_sx4.c:34:
+/*
+	Theory of operation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3811: FILE: drivers/ata/sata_sx4.c:65:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3817: FILE: drivers/ata/sata_sx4.c:71:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3976: FILE: drivers/ata/sata_sx4.c:1164:
+   ^Iwritel(data, mmio + PDC_DIMM0_CONTROL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3976: FILE: drivers/ata/sata_sx4.c:1164:
+   ^Iwritel(data, mmio + PDC_DIMM0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3976: FILE: drivers/ata/sata_sx4.c:1164:
+   ^Iwritel(data, mmio + PDC_DIMM0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#4006: FILE: drivers/ata/sata_sx4.c:1203:
+   ^Iwritel(data, mmio + PDC_SDRAM_CONTROL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4006: FILE: drivers/ata/sata_sx4.c:1203:
+   ^Iwritel(data, mmio + PDC_SDRAM_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4006: FILE: drivers/ata/sata_sx4.c:1203:
+   ^Iwritel(data, mmio + PDC_SDRAM_CONTROL);$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#4169: FILE: include/linux/libata.h:499:
+struct ata_acpi_drive
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4197: FILE: include/linux/libata.h:782:
+extern void ata_dumb_qc_prep(struct ata_queued_cmd *qc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4209: FILE: include/linux/pata_platform.h:11:
+^I/* $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408273.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 37 warnings, 19 checks, 3627 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408273.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
