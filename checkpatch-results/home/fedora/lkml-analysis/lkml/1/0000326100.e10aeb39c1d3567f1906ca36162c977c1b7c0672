WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
> It would be best to just change it now before doing further changes. Right now

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#60: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: include/linux/semaphore.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#89: FILE: include/linux/semaphore.h:25:
+	spinlock_t		lock;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#94: FILE: include/linux/semaphore.h:30:
+#define __SEMAPHORE_INITIALIZER(name, n)				\
+{									\
+	.lock		= __SPIN_LOCK_UNLOCKED((name).lock),		\
+	.count		= n,						\
+	.wait_list	= LIST_HEAD_INIT((name).wait_list),		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#101: FILE: include/linux/semaphore.h:37:
+#define __DECLARE_SEMAPHORE_GENERIC(name, count) \
+	struct semaphore name = __SEMAPHORE_INITIALIZER(name, count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: include/linux/semaphore.h:41:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: include/linux/semaphore.h:41:
+ $

CHECK:SPACING: No space is necessary after a cast
#108: FILE: include/linux/semaphore.h:44:
+	*sem = (struct semaphore) __SEMAPHORE_INITIALIZER(*sem, val);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/semaphore.h:54:
+extern void fastcall down(struct semaphore *sem);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/semaphore.h:60:
+extern int __must_check fastcall down_interruptible(struct semaphore *sem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/semaphore.h:66:
+extern int __must_check fastcall down_killable(struct semaphore *sem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/semaphore.h:73:
+extern int __must_check fastcall down_trylock(struct semaphore *sem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/semaphore.h:79:
+extern void fastcall up(struct semaphore *sem);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#152: FILE: kernel/semaphore.c:1:
+/*

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#186: FILE: kernel/semaphore.c:35:
+static void fastcall noinline __down(struct semaphore *sem);

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#187: FILE: kernel/semaphore.c:36:
+static int fastcall noinline __down_interruptible(struct semaphore *sem);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#188: FILE: kernel/semaphore.c:37:
+static int fastcall noinline __down_killable(struct semaphore *sem);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#189: FILE: kernel/semaphore.c:38:
+static void fastcall noinline __up(struct semaphore *sem);

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: kernel/semaphore.c:53:
+	int result = 0;
+	might_sleep();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: kernel/semaphore.c:65:
+	int result = 0;
+	might_sleep();

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#280: FILE: kernel/semaphore.c:129:
+static void noinline __sched __up_down_common(struct semaphore *sem)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: kernel/semaphore.c:154:
+		if (unlikely((state == TASK_INTERRUPTIBLE &&
+					signal_pending(task)) ||

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#334: FILE: kernel/semaphore.c:183:
+static void fastcall noinline __sched

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#340: FILE: kernel/semaphore.c:189:
+static int fastcall noinline __sched

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#346: FILE: kernel/semaphore.c:195:
+static int fastcall noinline __sched

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#352: FILE: kernel/semaphore.c:201:
+static void fastcall noinline __sched

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000326100.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 7 warnings, 10 checks, 289 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000326100.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
