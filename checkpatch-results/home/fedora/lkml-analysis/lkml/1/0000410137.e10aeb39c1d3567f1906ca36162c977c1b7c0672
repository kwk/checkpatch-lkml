WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
This adds support for Multi-Function General Purpose Timers.  It detects the

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#72: FILE: arch/i386/kernel/geode.c:156:
+	printk(KERN_INFO "geode:  %d MFGPT timers available.\n", timers);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#77: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: arch/i386/kernel/mfgpt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#133: FILE: arch/i386/kernel/mfgpt.c:52:
+static int disable = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#139: FILE: arch/i386/kernel/mfgpt.c:58:
+__setup("nomfgpt", mfgpt_disable);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#154: FILE: arch/i386/kernel/mfgpt.c:73:
+		printk(KERN_INFO "geode-mfgpt:  Skipping MFGPT setup\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: arch/i386/kernel/mfgpt.c:102:
+^I^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#249: FILE: arch/i386/kernel/mfgpt.c:168:
+	printk(KERN_INFO "geode-mfgpt:  Registered timer %d\n", timer);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#272: FILE: arch/i386/kernel/mfgpt.c:191:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#272: FILE: arch/i386/kernel/mfgpt.c:191:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#311: FILE: include/asm-i386/geode.h:180:
+#define MFGPT_SETUP_CNTEN	(1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#312: FILE: include/asm-i386/geode.h:181:
+#define MFGPT_SETUP_CMP2	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#313: FILE: include/asm-i386/geode.h:182:
+#define MFGPT_SETUP_CMP1	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#314: FILE: include/asm-i386/geode.h:183:
+#define MFGPT_SETUP_SETUP	(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#315: FILE: include/asm-i386/geode.h:184:
+#define MFGPT_SETUP_STOPEN	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#316: FILE: include/asm-i386/geode.h:185:
+#define MFGPT_SETUP_EXTEN	(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#317: FILE: include/asm-i386/geode.h:186:
+#define MFGPT_SETUP_REVEN	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#318: FILE: include/asm-i386/geode.h:187:
+#define MFGPT_SETUP_CLKSEL	(1 << 4)

WARNING:LINE_SPACING: Missing a blank line after declarations
#323: FILE: include/asm-i386/geode.h:192:
+	u32 base = geode_get_dev_base(GEODE_DEV_MFGPT);
+	outw(value, base + reg + (timer * 8));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#329: FILE: include/asm-i386/geode.h:198:
+	u32 base = geode_get_dev_base(GEODE_DEV_MFGPT);
+	return inw(base + reg + (timer * 8));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: include/asm-i386/geode.h:201:
+extern int __init geode_mfgpt_detect(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: include/asm-i386/geode.h:202:
+extern int geode_mfgpt_toggle_event(int timer, int cmp, int event, int enable);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: include/asm-i386/geode.h:203:
+extern int geode_mfgpt_set_irq(int timer, int cmp, int irq, int enable);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: include/asm-i386/geode.h:204:
+extern int geode_mfgpt_alloc_timer(int timer, int domain, struct module *owner);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#337: FILE: include/asm-i386/geode.h:206:
+#define geode_mfgpt_setup_irq(t,c,i) geode_mfgpt_set_irq((t),(c),(i),1)
                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#337: FILE: include/asm-i386/geode.h:206:
+#define geode_mfgpt_setup_irq(t,c,i) geode_mfgpt_set_irq((t),(c),(i),1)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#337: FILE: include/asm-i386/geode.h:206:
+#define geode_mfgpt_setup_irq(t,c,i) geode_mfgpt_set_irq((t),(c),(i),1)
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#337: FILE: include/asm-i386/geode.h:206:
+#define geode_mfgpt_setup_irq(t,c,i) geode_mfgpt_set_irq((t),(c),(i),1)
                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#337: FILE: include/asm-i386/geode.h:206:
+#define geode_mfgpt_setup_irq(t,c,i) geode_mfgpt_set_irq((t),(c),(i),1)
                                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#338: FILE: include/asm-i386/geode.h:207:
+#define geode_mfgpt_release_irq(t,c,i) geode_mfgpt_set_irq((t),(c),(i),0)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#338: FILE: include/asm-i386/geode.h:207:
+#define geode_mfgpt_release_irq(t,c,i) geode_mfgpt_set_irq((t),(c),(i),0)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#338: FILE: include/asm-i386/geode.h:207:
+#define geode_mfgpt_release_irq(t,c,i) geode_mfgpt_set_irq((t),(c),(i),0)
                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#338: FILE: include/asm-i386/geode.h:207:
+#define geode_mfgpt_release_irq(t,c,i) geode_mfgpt_set_irq((t),(c),(i),0)
                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#338: FILE: include/asm-i386/geode.h:207:
+#define geode_mfgpt_release_irq(t,c,i) geode_mfgpt_set_irq((t),(c),(i),0)
                                                                       ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000410137.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 8 warnings, 14 checks, 276 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000410137.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
