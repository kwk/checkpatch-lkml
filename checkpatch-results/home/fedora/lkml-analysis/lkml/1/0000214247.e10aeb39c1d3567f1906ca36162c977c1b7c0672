WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
Subject: [PATCH] [Target_Core_Mod/IBLOCK]: Added support for ->create_virtdevice_from_fd()

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '362d4ef391699b0282dfbef3da633a561d9cbde7', maybe rebased or not pulled?
#50: 
This patch relies upon commit 362d4ef391699b0282dfbef3da633a561d9cbde7 for

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#71: FILE: drivers/lio-core/target_core_device.c:68:
+extern struct block_device *linux_blockdevice_claim_bd (struct block_device *bd, void *claim_ptr)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#71: FILE: drivers/lio-core/target_core_device.c:68:
+extern struct block_device *linux_blockdevice_claim_bd (struct block_device *bd, void *claim_ptr)

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#73: FILE: drivers/lio-core/target_core_device.c:70:
+	if (blkdev_get(bd, FMODE_WRITE|FMODE_READ, O_RDWR) < 0)
 	                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: drivers/lio-core/target_core_device.c:71:
+^I^Ireturn(NULL);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#83: FILE: drivers/lio-core/target_core_device.c:80:
+		return(NULL);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: drivers/lio-core/target_core_device.c:82:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#99: FILE: drivers/lio-core/target_core_device.h:30:
+extern struct block_device *linux_blockdevice_claim_bd (struct block_device *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: drivers/lio-core/target_core_device.h:30:
+extern struct block_device *linux_blockdevice_claim_bd (struct block_device *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#99: FILE: drivers/lio-core/target_core_device.h:30:
+extern struct block_device *linux_blockdevice_claim_bd (struct block_device *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#99: FILE: drivers/lio-core/target_core_device.h:30:
+extern struct block_device *linux_blockdevice_claim_bd (struct block_device *, void *);

WARNING:TYPO_SPELLING: 'descritpor' may be misspelled - perhaps 'descriptor'?
#157: FILE: drivers/lio-core/target_core_iblock.c:205:
+	 * Check if we have an open file descritpor passed through configfs
 	                                 ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: drivers/lio-core/target_core_iblock.c:216:
+^I^Iif (!(bd = linux_blockdevice_claim_bd(ib_dev->ibd_bd, ib_dev))) $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#169: FILE: drivers/lio-core/target_core_iblock.c:216:
+		if (!(bd = linux_blockdevice_claim_bd(ib_dev->ibd_bd, ib_dev))) 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: drivers/lio-core/target_core_iblock.c:223:
+		PYXPRINT("IBLOCK: Claiming %p Major:Minor - %d:%d\n", ib_dev,
+			ib_dev->ibd_major, ib_dev->ibd_minor);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#178: FILE: drivers/lio-core/target_core_iblock.c:225:
+		if ((bd = __linux_blockdevice_claim(ib_dev->ibd_major,

CHECK:BRACES: braces {} should be used on all arms of this statement
#178: FILE: drivers/lio-core/target_core_iblock.c:225:
+		if ((bd = __linux_blockdevice_claim(ib_dev->ibd_major,
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: drivers/lio-core/target_core_iblock.c:226:
+		if ((bd = __linux_blockdevice_claim(ib_dev->ibd_major,
+				ib_dev->ibd_minor, ib_dev, &ret))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#180: FILE: drivers/lio-core/target_core_iblock.c:227:
+			if (ret == 1)
[...]
+			else if (ib_dev->ibd_force) {
[...]
+			} else {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: drivers/lio-core/target_core_iblock.c:232:
+				PYXPRINT("IBLOCK: DF_READ_ONLY for Major:Minor - %d:%d\n",
+					ib_dev->ibd_major, ib_dev->ibd_minor);

WARNING:SPLIT_STRING: quoted string split across lines
#188: FILE: drivers/lio-core/target_core_iblock.c:235:
+				TRACE_ERROR("WARNING: Unable to claim block device. Only use"
+					" force=1 for READ-ONLY access.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Unbalanced braces around else statement
#192: FILE: drivers/lio-core/target_core_iblock.c:239:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: drivers/lio-core/target_core_iblock.c:240:
+^I^I^Igoto failed;^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#201: FILE: drivers/lio-core/target_core_iblock.c:246:
+		printk(KERN_ERR "IBLOCK: Unable to create bioset()\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#209: FILE: drivers/lio-core/target_core_iblock.c:654:
+extern se_device_t *iblock_create_virtdevice_from_fd (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#209: FILE: drivers/lio-core/target_core_iblock.c:654:
+extern se_device_t *iblock_create_virtdevice_from_fd (

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#209: FILE: drivers/lio-core/target_core_iblock.c:654:
+extern se_device_t *iblock_create_virtdevice_from_fd (

CHECK:SPACING: No space is necessary after a cast
#213: FILE: drivers/lio-core/target_core_iblock.c:658:
+	iblock_dev_t *ibd = (iblock_dev_t *) se_dev->se_dev_su_ptr;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#215: FILE: drivers/lio-core/target_core_iblock.c:660:
+	struct file *filp;
 	             ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: drivers/lio-core/target_core_iblock.c:665:
+^Ifd = simple_strtol(p, &p, 0);^I$

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#220: FILE: drivers/lio-core/target_core_iblock.c:665:
+	fd = simple_strtol(p, &p, 0);	

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#222: FILE: drivers/lio-core/target_core_iblock.c:667:
+		printk(KERN_ERR "IBLOCK: Illegal value of file descriptor: %d\n", fd);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#223: FILE: drivers/lio-core/target_core_iblock.c:668:
+		return(ERR_PTR(-EINVAL));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#225: FILE: drivers/lio-core/target_core_iblock.c:670:
+	if (!(filp = fget(fd))) {
 	      ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#225: FILE: drivers/lio-core/target_core_iblock.c:670:
+	if (!(filp = fget(fd))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#226: FILE: drivers/lio-core/target_core_iblock.c:671:
+		printk(KERN_ERR "IBLOCK: Unable to fget() fd: %d\n", fd);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#227: FILE: drivers/lio-core/target_core_iblock.c:672:
+		return(ERR_PTR(-EBADF));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#229: FILE: drivers/lio-core/target_core_iblock.c:674:
+	if (!(inode = igrab(filp->f_mapping->host))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#230: FILE: drivers/lio-core/target_core_iblock.c:675:
+		printk(KERN_ERR "IBLOCK: Unable to locate struct inode for struct"

WARNING:SPLIT_STRING: quoted string split across lines
#231: FILE: drivers/lio-core/target_core_iblock.c:676:
+		printk(KERN_ERR "IBLOCK: Unable to locate struct inode for struct"
+				" block_device fd\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#232: FILE: drivers/lio-core/target_core_iblock.c:677:
+		fput(filp);
 		     ^^^^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#233: FILE: drivers/lio-core/target_core_iblock.c:678:
+		return(ERR_PTR(-EINVAL));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#236: FILE: drivers/lio-core/target_core_iblock.c:681:
+		printk(KERN_ERR "IBLOCK: S_ISBLK(inode->i_mode) failed for file"

WARNING:SPLIT_STRING: quoted string split across lines
#237: FILE: drivers/lio-core/target_core_iblock.c:682:
+		printk(KERN_ERR "IBLOCK: S_ISBLK(inode->i_mode) failed for file"
+				" descriptor: %d\n", fd);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#238: FILE: drivers/lio-core/target_core_iblock.c:683:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#239: FILE: drivers/lio-core/target_core_iblock.c:684:
+		fput(filp);
 		     ^^^^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#240: FILE: drivers/lio-core/target_core_iblock.c:685:
+		return(ERR_PTR(-ENODEV));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#242: FILE: drivers/lio-core/target_core_iblock.c:687:
+	if (!(ibd->ibd_bd = I_BDEV(filp->f_mapping->host))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#243: FILE: drivers/lio-core/target_core_iblock.c:688:
+		printk(KERN_ERR "IBLOCK: Unable to locate struct block_device"

WARNING:SPLIT_STRING: quoted string split across lines
#244: FILE: drivers/lio-core/target_core_iblock.c:689:
+		printk(KERN_ERR "IBLOCK: Unable to locate struct block_device"
+				" from I_BDEV()\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#245: FILE: drivers/lio-core/target_core_iblock.c:690:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#246: FILE: drivers/lio-core/target_core_iblock.c:691:
+		fput(filp);
 		     ^^^^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#247: FILE: drivers/lio-core/target_core_iblock.c:692:
+		return(ERR_PTR(-EINVAL));

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#255: FILE: drivers/lio-core/target_core_iblock.c:700:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#256: FILE: drivers/lio-core/target_core_iblock.c:701:
+	fput(filp);
 	     ^^^^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#257: FILE: drivers/lio-core/target_core_iblock.c:702:
+	return(dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#271: FILE: drivers/lio-core/target_core_iblock.h:69:
+extern se_device_t *iblock_create_virtdevice_from_fd (se_subsystem_dev_t *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: drivers/lio-core/target_core_iblock.h:69:
+extern se_device_t *iblock_create_virtdevice_from_fd (se_subsystem_dev_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#271: FILE: drivers/lio-core/target_core_iblock.h:69:
+extern se_device_t *iblock_create_virtdevice_from_fd (se_subsystem_dev_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#271: FILE: drivers/lio-core/target_core_iblock.h:69:
+extern se_device_t *iblock_create_virtdevice_from_fd (se_subsystem_dev_t *, const char *);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#279: FILE: drivers/lio-core/target_core_iblock.h:164:
+	create_virtdevice_from_fd: iblock_create_virtdevice_from_fd, \
 	                         ^

WARNING:INDENTED_LABEL: labels should not be indented
#279: FILE: drivers/lio-core/target_core_iblock.h:164:
+	create_virtdevice_from_fd: iblock_create_virtdevice_from_fd, \

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000214247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 34 warnings, 11 checks, 197 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000214247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
