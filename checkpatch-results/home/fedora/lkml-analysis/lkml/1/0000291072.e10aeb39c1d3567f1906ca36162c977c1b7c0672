WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Adds a new imv_cond() macro to declare a byte read that is meant to be embedded

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/asm-x86/immediate.h:143:
+extern int arch_imv_update(struct __imv *imv, int early);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#126: FILE: arch/x86/kernel/immediate.c:86:
+#define INSN_NOP2		0x89, 0xf6

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#135: FILE: arch/x86/kernel/immediate.c:95:
+#define printk_dbg(fmt , a...)
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#187: FILE: arch/x86/kernel/immediate.c:197:
+static inline int detect_mov_test_jne(uint8_t *addr, uint8_t **opcode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: arch/x86/kernel/immediate.c:198:
+static inline int detect_mov_test_jne(uint8_t *addr, uint8_t **opcode,
+		uint8_t **jmp_offset, int *offset_len)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#188: FILE: arch/x86/kernel/immediate.c:198:
+		uint8_t **jmp_offset, int *offset_len)

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#229: FILE: arch/x86/kernel/immediate.c:200:
+	printk_dbg(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#229: FILE: arch/x86/kernel/immediate.c:200:
+	printk_dbg(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#229: FILE: arch/x86/kernel/immediate.c:200:
+	printk_dbg(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#229: FILE: arch/x86/kernel/immediate.c:200:
+	printk_dbg(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#229: FILE: arch/x86/kernel/immediate.c:200:
+	printk_dbg(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#229: FILE: arch/x86/kernel/immediate.c:200:
+	printk_dbg(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#229: FILE: arch/x86/kernel/immediate.c:200:
+	printk_dbg(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: arch/x86/kernel/immediate.c:201:
+	printk_dbg(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#237: FILE: arch/x86/kernel/immediate.c:208:
+	printk_dbg(KERN_DEBUG "Found test %%al,%%al at %p\n", addr + 2);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#240: FILE: arch/x86/kernel/immediate.c:211:
+		printk_dbg(KERN_DEBUG "Found jne rel8 at %p\n", addr + 4);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#249: FILE: arch/x86/kernel/immediate.c:220:
+			printk_dbg(KERN_DEBUG "Found jne rel16/32 at %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: arch/x86/kernel/immediate.c:221:
+			printk_dbg(KERN_DEBUG "Found jne rel16/32 at %p\n",
+				addr + 5);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#270: FILE: arch/x86/kernel/immediate.c:238:
+static inline int detect_mov_test_je(uint8_t *addr, uint8_t **opcode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: arch/x86/kernel/immediate.c:239:
+static inline int detect_mov_test_je(uint8_t *addr, uint8_t **opcode,
+		uint8_t **jmp_offset, int *offset_len)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#271: FILE: arch/x86/kernel/immediate.c:239:
+		uint8_t **jmp_offset, int *offset_len)

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#279: FILE: arch/x86/kernel/immediate.c:247:
+	printk_dbg(KERN_DEBUG "Found test %%al,%%al at %p\n", addr + 2);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#282: FILE: arch/x86/kernel/immediate.c:250:
+		printk_dbg(KERN_DEBUG "Found je rel8 at %p\n", addr + 4);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#291: FILE: arch/x86/kernel/immediate.c:259:
+			printk_dbg(KERN_DEBUG "Found je rel16/32 at %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: arch/x86/kernel/immediate.c:260:
+			printk_dbg(KERN_DEBUG "Found je rel16/32 at %p\n",
+				addr + 5);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#317: FILE: arch/x86/kernel/immediate.c:279:
+static noinline int replace_instruction_safe(uint8_t *addr, uint8_t *newcode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: arch/x86/kernel/immediate.c:280:
+static noinline int replace_instruction_safe(uint8_t *addr, uint8_t *newcode,
+		int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: arch/x86/kernel/immediate.c:323:
+		text_poke((void *)addr,
+			((unsigned char[]){BREAKPOINT_INSTRUCTION}),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: arch/x86/kernel/immediate.c:337:
+		text_poke((void *)(addr + BREAKPOINT_INS_LEN),
+			&newcode[BREAKPOINT_INS_LEN],

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#401: FILE: arch/x86/kernel/immediate.c:366:
+	uint8_t *opcode, *jmp_offset;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: arch/x86/kernel/immediate.c:371:
+	if (!detect_mov_test_jne((uint8_t *)imv->imv - 1,
+			&opcode, &jmp_offset, &offset_len)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: arch/x86/kernel/immediate.c:388:
+			replace_instruction_safe(opcode,
+				((unsigned char[]){ JMP_REL8,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#429: FILE: arch/x86/kernel/immediate.c:394:
+			 * grow it afterward. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: arch/x86/kernel/immediate.c:398:
+			replace_instruction_safe(opcode,
+				((unsigned char[]){ INSN_NOP1, JMP_REL32,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: arch/x86/kernel/immediate.c:407:
+		replace_instruction_safe((uint8_t *)imv->imv - 1,
+			((unsigned char[]){ INSN_NOP2 }),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: arch/x86/kernel/immediate.c:411:
+		replace_instruction_safe((uint8_t *)imv->imv + 1,
+			((unsigned char[]){ INSN_NOP2 }),

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#455: FILE: arch/x86/kernel/immediate.c:420:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#460: FILE: arch/x86/kernel/immediate.c:425:
+		printk_dbg(KERN_DEBUG "Found JMP_REL8 at %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: arch/x86/kernel/immediate.c:426:
+		printk_dbg(KERN_DEBUG "Found JMP_REL8 at %p\n",
+			((uint8_t *)imv->imv - 1));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: arch/x86/kernel/immediate.c:437:
+		replace_instruction_safe((uint8_t *)imv->imv - 1,
+			((unsigned char[]){ JMP_REL8,

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#482: FILE: arch/x86/kernel/immediate.c:447:
+		printk_dbg(KERN_DEBUG "Found JMP_REL32 at %p, update with %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: arch/x86/kernel/immediate.c:448:
+		printk_dbg(KERN_DEBUG "Found JMP_REL32 at %p, update with %x\n",
+			((uint8_t *)imv->imv - 1), newoff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: arch/x86/kernel/immediate.c:459:
+		replace_instruction_safe((uint8_t *)imv->imv - 1,
+			((unsigned char[]){ JMP_REL32,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#517: FILE: arch/x86/kernel/immediate.c:482:
+	uint8_t buf[10];

WARNING:LINE_SPACING: Missing a blank line after declarations
#532: FILE: arch/x86/kernel/immediate.c:497:
+			static int nr_fail;
+			printk(KERN_DEBUG

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#532: FILE: arch/x86/kernel/immediate.c:497:
+			printk(KERN_DEBUG

WARNING:LINE_SPACING: Missing a blank line after declarations
#540: FILE: arch/x86/kernel/immediate.c:505:
+			static int nr_success;
+			printk(KERN_DEBUG "Jump target at %lX, nr success %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#540: FILE: arch/x86/kernel/immediate.c:505:
+			printk(KERN_DEBUG "Jump target at %lX, nr success %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: arch/x86/kernel/immediate.c:506:
+			printk(KERN_DEBUG "Jump target at %lX, nr success %d\n",
+				imv->imv, ++nr_success);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#557: FILE: arch/x86/kernel/immediate.c:522:
+	if (unlikely(!early
+			&& *(unsigned char *)insn == BREAKPOINT_INSTRUCTION)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#558: FILE: arch/x86/kernel/immediate.c:523:
+		printk(KERN_WARNING "Immediate value in conflict with kprobe. "

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#558: FILE: arch/x86/kernel/immediate.c:523:
+		printk(KERN_WARNING "Immediate value in conflict with kprobe. "
+				    "Variable at %p, "
+				    "instruction at %p, size %hu\n",
+				    (void *)imv->var,
+				    (void *)imv->imv, imv->size);

WARNING:SPLIT_STRING: quoted string split across lines
#559: FILE: arch/x86/kernel/immediate.c:524:
+		printk(KERN_WARNING "Immediate value in conflict with kprobe. "
+				    "Variable at %p, "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#560: FILE: arch/x86/kernel/immediate.c:525:
+				    "Variable at %p, "
+				    "instruction at %p, size %hu\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#572: FILE: arch/x86/kernel/immediate.c:537:
+	case 1:	if (*(uint8_t *)imv->imv == *(uint8_t *)imv->var)
+			return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#572: FILE: arch/x86/kernel/immediate.c:537:
+	case 1:	if (*(uint8_t *)imv->imv == *(uint8_t *)imv->var)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#575: FILE: arch/x86/kernel/immediate.c:540:
+	case 2:	if (*(uint16_t *)imv->imv == *(uint16_t *)imv->var)
+			return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#575: FILE: arch/x86/kernel/immediate.c:540:
+	case 2:	if (*(uint16_t *)imv->imv == *(uint16_t *)imv->var)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#578: FILE: arch/x86/kernel/immediate.c:543:
+	case 4:	if (*(uint32_t *)imv->imv == *(uint32_t *)imv->var)
+			return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#578: FILE: arch/x86/kernel/immediate.c:543:
+	case 4:	if (*(uint32_t *)imv->imv == *(uint32_t *)imv->var)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#582: FILE: arch/x86/kernel/immediate.c:547:
+	case 8:	if (*(uint64_t *)imv->imv == *(uint64_t *)imv->var)
+			return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#582: FILE: arch/x86/kernel/immediate.c:547:
+	case 8:	if (*(uint64_t *)imv->imv == *(uint64_t *)imv->var)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#605: FILE: include/linux/immediate.h:36:
+extern void imv_update_range(struct __imv *begin, struct __imv *end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: kernel/immediate.c:47:
+void imv_update_range(struct __imv *begin,
+		struct __imv *end)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000291072.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 29 warnings, 30 checks, 577 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000291072.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
