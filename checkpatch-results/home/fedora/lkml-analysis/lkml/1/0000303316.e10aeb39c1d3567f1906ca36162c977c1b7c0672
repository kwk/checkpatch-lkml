WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/netdev-2.6.git upstream-davem

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#130: FILE: drivers/net/b44.c:2087:
+	 * valid PHY address. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#185: FILE: drivers/net/bonding/bond_main.c:386:
+	unsigned short uninitialized_var(vlan_id);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vlan_id' should also have an identifier name
#185: FILE: drivers/net/bonding/bond_main.c:386:
+	unsigned short uninitialized_var(vlan_id);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#383: FILE: drivers/net/igb/e1000_82575.h:72:
+						    * header buffer length */

WARNING:LINE_SPACING: Missing a blank line after declarations
#635: FILE: drivers/net/igb/igb_main.c:3261:
+	void *end = (struct e1000_tx_desc *)tx_ring->desc + tx_ring->count;
+	return le32_to_cpu(*(volatile __le32 *)end);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#635: FILE: drivers/net/igb/igb_main.c:3261:
+	return le32_to_cpu(*(volatile __le32 *)end);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#711: FILE: drivers/net/netxen/netxen_nic.h:88:
+#define find_diff_among(a,b,range) ((a)<(b)?((b)-(a)):((b)+(range)-(a)))
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#711: FILE: drivers/net/netxen/netxen_nic.h:88:
+#define find_diff_among(a,b,range) ((a)<(b)?((b)-(a)):((b)+(range)-(a)))
                            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#711: FILE: drivers/net/netxen/netxen_nic.h:88:
+#define find_diff_among(a,b,range) ((a)<(b)?((b)-(a)):((b)+(range)-(a)))
                                        ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#711: FILE: drivers/net/netxen/netxen_nic.h:88:
+#define find_diff_among(a,b,range) ((a)<(b)?((b)-(a)):((b)+(range)-(a)))
                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#711: FILE: drivers/net/netxen/netxen_nic.h:88:
+#define find_diff_among(a,b,range) ((a)<(b)?((b)-(a)):((b)+(range)-(a)))
                                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#711: FILE: drivers/net/netxen/netxen_nic.h:88:
+#define find_diff_among(a,b,range) ((a)<(b)?((b)-(a)):((b)+(range)-(a)))
                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#711: FILE: drivers/net/netxen/netxen_nic.h:88:
+#define find_diff_among(a,b,range) ((a)<(b)?((b)-(a)):((b)+(range)-(a)))
                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#711: FILE: drivers/net/netxen/netxen_nic.h:88:
+#define find_diff_among(a,b,range) ((a)<(b)?((b)-(a)):((b)+(range)-(a)))
                                                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#711: FILE: drivers/net/netxen/netxen_nic.h:88:
+#define find_diff_among(a,b,range) ((a)<(b)?((b)-(a)):((b)+(range)-(a)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#711: FILE: drivers/net/netxen/netxen_nic.h:88:
+#define find_diff_among(a,b,range) ((a)<(b)?((b)-(a)):((b)+(range)-(a)))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#856: FILE: drivers/net/netxen/netxen_nic_hw.c:401:
+	adapter->msi_mode = readl(

WARNING:MEMORY_BARRIER: memory barrier without comment
#1136: FILE: drivers/net/netxen/netxen_nic_init.c:1206:
+		smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1140: FILE: drivers/net/netxen/netxen_nic_init.c:1210:
+			smp_mb();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around adapter->cmd_consumer
#1155: FILE: drivers/net/netxen/netxen_nic_init.c:1227:
+	consumer = le32_to_cpu(*(adapter->cmd_consumer));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1284: FILE: drivers/net/netxen/netxen_nic_main.c:152:
+static uint32_t msi_tgt_status[4] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1289: FILE: drivers/net/netxen/netxen_nic_main.c:157:
+static uint32_t sw_int_mask[4] = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1336: FILE: drivers/net/netxen/netxen_nic_main.c:193:
+			writel(0xffffffff, PCI_OFFSET_SECOND_RANGE(adapter,
+						msi_tgt_status[pci_fn]));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1393: FILE: drivers/net/netxen/netxen_nic_main.c:406:
+	netdev->watchdog_timeo     = 2*HZ;
 	                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1421: FILE: drivers/net/netxen/netxen_nic_main.c:848:
+		if (adapter->flags & NETXEN_NIC_MSI_ENABLED)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1423: FILE: drivers/net/netxen/netxen_nic_main.c:850:
+		else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1528: FILE: drivers/net/netxen/netxen_nic_main.c:978:
+	smp_mb();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1530: FILE: drivers/net/netxen/netxen_nic_main.c:980:
+	if ((no_of_desc+2) > find_diff_among(producer, consumer, num_txd)) {
 	               ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1532: FILE: drivers/net/netxen/netxen_nic_main.c:982:
+		smp_mb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1702: FILE: drivers/net/netxen/netxen_nic_main.c:1171:
+		writel(our_int & ~((u32)(0x80 << adapter->portnum)),
 			NETXEN_CRB_NORMALIZE(adapter, CRB_INT_VECTOR));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'work_done < budget'
#1749: FILE: drivers/net/netxen/netxen_nic_main.c:1214:
+	if ((work_done < budget) && tx_complete) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1763: FILE: drivers/net/netxen/netxen_nic_phan_reg.h:130:
+#define CRB_NIC_MSI_MODE_FW^I  ^I^INETXEN_NIC_REG(0x274)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1766: FILE: drivers/net/netxen/netxen_nic_phan_reg.h:133:
+#define MSI_MODE_MULTIFUNC^I      ^I0x1$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1862: FILE: drivers/net/phy/marvell.c:314:
+	 * was an error */

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1867: FILE: drivers/net/phy/marvell.c:319:
+	if (AUTONEG_ENABLE == phydev->autoneg) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1888: FILE: drivers/net/phy/marvell.c:340:
+		phydev->pause = phydev->asym_pause = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1926: FILE: drivers/net/phy/marvell.c:378:
+		phydev->pause = phydev->asym_pause = 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lp' - possible side-effects?
#1988: FILE: drivers/net/smc91x.h:95:
+#define SMC_GET_MAC_ADDR(lp, addr)				\
 	do {							\
 		unsigned int __v;				\
+		__v = SMC_inw(ioaddr, ADDR0_REG(lp));		\
 		addr[0] = __v; addr[1] = __v >> 8;		\
+		__v = SMC_inw(ioaddr, ADDR1_REG(lp));		\
 		addr[2] = __v; addr[3] = __v >> 8;		\
+		__v = SMC_inw(ioaddr, ADDR2_REG(lp));		\
 		addr[4] = __v; addr[5] = __v >> 8;		\
 		if (*(u32 *)(&addr[0]) == 0xFFFFFFFF) {		\
 			random_ether_addr(addr);		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#1988: FILE: drivers/net/smc91x.h:95:
+#define SMC_GET_MAC_ADDR(lp, addr)				\
 	do {							\
 		unsigned int __v;				\
+		__v = SMC_inw(ioaddr, ADDR0_REG(lp));		\
 		addr[0] = __v; addr[1] = __v >> 8;		\
+		__v = SMC_inw(ioaddr, ADDR1_REG(lp));		\
 		addr[2] = __v; addr[3] = __v >> 8;		\
+		__v = SMC_inw(ioaddr, ADDR2_REG(lp));		\
 		addr[4] = __v; addr[5] = __v >> 8;		\
 		if (*(u32 *)(&addr[0]) == 0xFFFFFFFF) {		\
 			random_ether_addr(addr);		\

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000303316.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 15 warnings, 22 checks, 1737 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000303316.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
