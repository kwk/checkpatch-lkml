WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
And when this interface is in place, X server has to use this interface for WC

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#54: FILE: fs/sysfs/bin.c:224:
+static int ioctl(struct inode *i, struct file *f, unsigned cmd,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#86: FILE: include/linux/sysfs.h:72:
+	int (*ioctl)(struct kobject *, struct bin_attribute *attr,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: include/linux/sysfs.h:73:
+	int (*ioctl)(struct kobject *, struct bin_attribute *attr,
+			unsigned cmd, unsigned long arg);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#87: FILE: include/linux/sysfs.h:73:
+			unsigned cmd, unsigned long arg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#117: FILE: drivers/pci/pci-sysfs.c:494:
+	struct coh_mmap_data *cm = vma->vm_private_data;
+	dma_free_coherent(cm->dev, vma->vm_end - vma->vm_start, cm->map,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#121: FILE: drivers/pci/pci-sysfs.c:498:
+static struct vm_operations_struct pci_coherent_vmops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: drivers/pci/pci-sysfs.c:504:
+pci_mmap_coherent_mem(struct kobject *kobj, struct bin_attribute *attr,
+		  struct vm_area_struct *vma)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cm)...) over kmalloc(sizeof(struct coh_mmap_data)...)
#131: FILE: drivers/pci/pci-sysfs.c:508:
+	struct coh_mmap_data *cm = kmalloc(sizeof(struct coh_mmap_data),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*a)...) over kzalloc(sizeof(struct bin_attribute)...)
#158: FILE: drivers/pci/pci-sysfs.c:745:
+		struct bin_attribute *a = kzalloc(sizeof(struct bin_attribute),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#164: FILE: drivers/pci/pci-sysfs.c:751:
+		a->attr.mode = S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pdev->dev.dma_mask
#166: FILE: drivers/pci/pci-sysfs.c:753:
+		a->size = *(pdev->dev.dma_mask);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347344.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 5 checks, 135 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347344.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
