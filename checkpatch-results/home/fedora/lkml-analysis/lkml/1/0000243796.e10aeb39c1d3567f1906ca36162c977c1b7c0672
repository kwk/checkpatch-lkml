CHECK:SPACING: No space is necessary after a cast
#190: FILE: fs/binfmt_elf_fdpic.c:590:
+	NEW_AUX_ENT(AT_UID,	(elf_addr_t) cred->uid);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#191: FILE: fs/binfmt_elf_fdpic.c:591:
+	NEW_AUX_ENT(AT_EUID,	(elf_addr_t) cred->euid);

CHECK:SPACING: No space is necessary after a cast
#192: FILE: fs/binfmt_elf_fdpic.c:592:
+	NEW_AUX_ENT(AT_GID,	(elf_addr_t) cred->gid);

CHECK:SPACING: No space is necessary after a cast
#193: FILE: fs/binfmt_elf_fdpic.c:593:
+	NEW_AUX_ENT(AT_EGID,	(elf_addr_t) cred->egid);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#243: FILE: fs/fcntl.c:215:
+	f_modown(filp, pid, type, cred->uid, cred->euid, force);
 	         ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#375: FILE: include/linux/cred.h:65:
+extern int groups_search(const struct group_info *, gid_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct group_info *' should also have an identifier name
#375: FILE: include/linux/cred.h:65:
+extern int groups_search(const struct group_info *, gid_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#375: FILE: include/linux/cred.h:65:
+extern int groups_search(const struct group_info *, gid_t);

CHECK:SPACING: No space is necessary after a cast
#460: FILE: include/linux/cred.h:191:
+	__cred = (struct cred *) __task_cred((task));	\

CHECK:SPACING: No space is necessary after a cast
#485: FILE: include/linux/cred.h:216:
+	__cred = (struct cred *) current_cred();	\

CHECK:SPACING: No space is necessary after a cast
#500: FILE: include/linux/cred.h:231:
+	__cred = (struct cred *) current_cred();	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xxx' - possible side-effects?
#505: FILE: include/linux/cred.h:236:
+#define task_cred_xxx(task, xxx)		\
+({						\
+	__typeof__(task->cred->xxx) ___val;	\
+	rcu_read_lock();			\
+	___val = __task_cred((task))->xxx;	\
+	rcu_read_unlock();			\
+	___val;					\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xxx' may be better as '(xxx)' to avoid precedence issues
#505: FILE: include/linux/cred.h:236:
+#define task_cred_xxx(task, xxx)		\
+({						\
+	__typeof__(task->cred->xxx) ___val;	\
+	rcu_read_lock();			\
+	___val = __task_cred((task))->xxx;	\
+	rcu_read_unlock();			\
+	___val;					\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xxx' may be better as '(xxx)' to avoid precedence issues
#517: FILE: include/linux/cred.h:248:
+#define current_cred_xxx(xxx)			\
+({						\
+	current->cred->xxx;			\
+})

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#528: FILE: include/linux/cred.h:259:
+#define current_fsuid() ^I(current_cred_xxx(fsuid))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#529: FILE: include/linux/cred.h:260:
+#define current_fsgid() ^I(current_cred_xxx(fsgid))$

ERROR:SPACING: space required before the open parenthesis '('
#540: FILE: include/linux/cred.h:271:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#548: FILE: include/linux/cred.h:279:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#556: FILE: include/linux/cred.h:287:
+} while(0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#638: FILE: kernel/sys.c:183:
+			else if ((who != cred->uid) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#665: FILE: kernel/sys.c:243:
+			user = (struct user_struct *) cred->user;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#672: FILE: kernel/sys.c:246:
+			else if ((who != cred->uid) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#699: FILE: kernel/sys.c:751:
+	if (!(retval   = put_user(cred->uid,  ruid)) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#714: FILE: kernel/sys.c:804:
+	if (!(retval   = put_user(cred->gid,  rgid)) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#780: FILE: kernel/uid16.c:90:
+	if (!(retval   = put_user(high2lowuid(cred->uid),  ruid)) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#796: FILE: kernel/uid16.c:111:
+	if (!(retval   = put_user(high2lowgid(cred->gid),  rgid)) &&

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1150: FILE: security/smack/smack_lsm.c:2289:
+	ssp->smk_in = ssp->smk_out = current_security();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243796.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 5 warnings, 13 checks, 928 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243796.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
