WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#46: 
> > > the wider question is, shouldnt the UP case be just the same as the 
                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'assymetry' may be misspelled - perhaps 'asymmetry'?
#47: 
> > > SMP case? Especially the type assymetry struct thread_group_cputime 
                                    ^^^^^^^^^

WARNING:TYPO_SPELLING: 'assymetries' may be misspelled - perhaps 'asymmetries'?
#48: 
> > > looks ugly. (and assymetries like that tend to be a constant source 
                       ^^^^^^^^^^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/sched.h:2122:
+extern int thread_group_cputime_alloc(struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#105: FILE: include/linux/sched.h:2122:
+extern int thread_group_cputime_alloc(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/sched.h:2138:
+extern void thread_group_cputime_smp(struct task_struct *, struct task_cputime *);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tsk->signal->cputime.totals
#154: FILE: include/linux/sched.h:2168:
+	*cputime = *(tsk->signal->cputime.totals);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cputime)...) over kmalloc(sizeof(struct task_cputime)...)
#193: FILE: kernel/posix-cpu-timers.c:103:
+	cputime = kmalloc(sizeof(struct task_cputime), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cputime"
#194: FILE: kernel/posix-cpu-timers.c:104:
+	if (cputime == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000227242.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 5 checks, 145 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000227242.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
