WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
descriptor operations. It expects only a single message to be transmitted at

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: include/net/9p/client.h:84:
+struct p9_trans_req *p9_client_rpcnb(struct p9_client *clnt,
+	struct p9_fcall *tc, struct p9_fcall *rc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: include/net/9p/client.h:88:
+int p9_client_rpc(struct p9_client *clnt, struct p9_fcall *tc,
+	struct p9_fcall **prc);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#109: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_trans *' should also have an identifier name
#190: FILE: include/net/9p/transport.h:36:
+	void			(*cb)(struct p9_trans *, struct p9_trans_req *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_trans_req *' should also have an identifier name
#190: FILE: include/net/9p/transport.h:36:
+	void			(*cb)(struct p9_trans *, struct p9_trans_req *);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#211: FILE: include/net/9p/transport.h:51:
+	/* The function schedules sending the data from the 'tc'
+	   over the transport. If the 'rc' is set, the response is

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_trans_req *' should also have an identifier name
#280: FILE: net/9p/client.c:43:
+	void			(*cb)(struct p9_trans_req *);

CHECK:CAMELCASE: Avoid CamelCase: <Respond>
#286: FILE: net/9p/client.c:49:
+	Respond = 1,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Flushed>
#287: FILE: net/9p/client.c:50:
+	Flushed = 2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: net/9p/client.c:988:
+static struct p9_trans_req *p9_client_req_create(struct p9_client *clnt,
+	struct p9_fcall *tc, struct p9_fcall *rc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: net/9p/client.c:1074:
+	if (!req->err && req->rc &&
+			(p9_debug_level&P9_DEBUG_FCALL) == P9_DEBUG_FCALL) {

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#605: FILE: net/9p/client.c:1074:
+			(p9_debug_level&P9_DEBUG_FCALL) == P9_DEBUG_FCALL) {
 			               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#609: FILE: net/9p/client.c:1078:
+		printk(KERN_NOTICE "<<< %s\n", buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: net/9p/client.c:1092:
+				P9_DPRINTK(P9_DEBUG_ERROR, "unknown err: %.*s",
+					ename->len, ename->str);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: net/9p/client.c:1099:
+		P9_DPRINTK(P9_DEBUG_ERROR,
+			"fcall mismatch: expected %d got %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: net/9p/client.c:1113:
+struct p9_trans_req *p9_client_rpcnb(struct p9_client *clnt,
+	struct p9_fcall *tc, struct p9_fcall *rc,

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#657: FILE: net/9p/client.c:1126:
+		if ((p9_debug_level&P9_DEBUG_FCALL) == P9_DEBUG_FCALL) {
 		                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#661: FILE: net/9p/client.c:1130:
+			printk(KERN_NOTICE ">>> %s\n", buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: net/9p/client.c:1182:
+int p9_client_rpc(struct p9_client *clnt, struct p9_fcall *tc,
+	struct p9_fcall **prc)

CHECK:BRACES: braces {} should be used on all arms of this statement
#723: FILE: net/9p/client.c:1192:
+	if (signal_pending(current)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#726: FILE: net/9p/client.c:1195:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: net/9p/client.c:1213:
+	err = wait_event_interruptible(wqueue,
+		test_bit(Respond, &creq->status) || req->err != 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: net/9p/client.c:1221:
+	if (err == -ERESTARTSYS && !clnt->trans->err && !req->err &&
+								!flushed) {

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#784: FILE: net/9p/conv.c:133:
+	buf_put_stringn(buf, s, s?strlen(s):0);
 	                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#784: FILE: net/9p/conv.c:133:
+	buf_put_stringn(buf, s, s?strlen(s):0);
 	                                   ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fc)...) over kmalloc(sizeof(struct p9_fcall)...)
#796: FILE: net/9p/conv.c:503:
+	fc = kmalloc(sizeof(struct p9_fcall) + size, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361759.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 19 checks, 661 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361759.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
