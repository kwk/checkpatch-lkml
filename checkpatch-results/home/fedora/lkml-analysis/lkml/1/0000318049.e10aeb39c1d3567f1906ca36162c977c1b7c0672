WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#49: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: include/linux/regulator/regulator.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'efficieny' may be misspelled - perhaps 'efficiency'?
#81: FILE: include/linux/regulator/regulator.h:28:
+ *   idling. Regulator r has > 90% efficieny in NORMAL mode at loads > 100mA
                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'thier' may be misspelled - perhaps 'their'?
#89: FILE: include/linux/regulator/regulator.h:36:
+ *   will dynamically change the voltage when devices disable() thier supply
                                                                 ^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#99: FILE: include/linux/regulator/regulator.h:46:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'freqency' may be misspelled - perhaps 'frequency'?
#119: FILE: include/linux/regulator/regulator.h:66:
+ *             load can quickly increase with CPU freqency increases.
                                                   ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <mV_to_uV>
#169: FILE: include/linux/regulator/regulator.h:116:
+#define mV_to_uV(mV)	(mV * 1000)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mV' may be better as '(mV)' to avoid precedence issues
#169: FILE: include/linux/regulator/regulator.h:116:
+#define mV_to_uV(mV)	(mV * 1000)

CHECK:CAMELCASE: Avoid CamelCase: <uV_to_mV>
#170: FILE: include/linux/regulator/regulator.h:117:
+#define uV_to_mV(uV)	(uV / 1000)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'uV' may be better as '(uV)' to avoid precedence issues
#170: FILE: include/linux/regulator/regulator.h:117:
+#define uV_to_mV(uV)	(uV / 1000)

CHECK:CAMELCASE: Avoid CamelCase: <V_to_uV>
#171: FILE: include/linux/regulator/regulator.h:118:
+#define V_to_uV(V)	(mV_to_uV(V * 1000))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'V' may be better as '(V)' to avoid precedence issues
#171: FILE: include/linux/regulator/regulator.h:118:
+#define V_to_uV(V)	(mV_to_uV(V * 1000))

CHECK:CAMELCASE: Avoid CamelCase: <uV_to_V>
#172: FILE: include/linux/regulator/regulator.h:119:
+#define uV_to_V(uV)	(uV_to_mV(uV) / 1000)

CHECK:CAMELCASE: Avoid CamelCase: <mA_to_uA>
#173: FILE: include/linux/regulator/regulator.h:120:
+#define mA_to_uA(mA)	(mA * 1000)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mA' may be better as '(mA)' to avoid precedence issues
#173: FILE: include/linux/regulator/regulator.h:120:
+#define mA_to_uA(mA)	(mA * 1000)

CHECK:CAMELCASE: Avoid CamelCase: <uA_to_mA>
#174: FILE: include/linux/regulator/regulator.h:121:
+#define uA_to_mA(uA)	(uA / 1000)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'uA' may be better as '(uA)' to avoid precedence issues
#174: FILE: include/linux/regulator/regulator.h:121:
+#define uA_to_mA(uA)	(uA / 1000)

CHECK:CAMELCASE: Avoid CamelCase: <A_to_uA>
#175: FILE: include/linux/regulator/regulator.h:122:
+#define A_to_uA(A)	(mA_to_uA(A * 1000))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'A' may be better as '(A)' to avoid precedence issues
#175: FILE: include/linux/regulator/regulator.h:122:
+#define A_to_uA(A)	(mA_to_uA(A * 1000))

CHECK:CAMELCASE: Avoid CamelCase: <uA_to_A>
#176: FILE: include/linux/regulator/regulator.h:123:
+#define uA_to_A(uA)	(uA_to_mA(uA) / 1000)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#180: FILE: include/linux/regulator/regulator.h:127:
+#if defined (CONFIG_REGULATOR)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: include/linux/regulator/regulator.h:138:
+struct regulator * __must_check regulator_get(struct device *dev,
+	const char *id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: include/linux/regulator/regulator.h:268:
+unsigned int regulator_get_optimum_mode(struct regulator *regulator,
+	int input_uV, int output_uV, int load_uA);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: include/linux/regulator/regulator.h:278:
+int regulator_register_client(struct regulator *regulator,
+	struct notifier_block *nb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: include/linux/regulator/regulator.h:288:
+int regulator_unregister_client(struct regulator *regulator,
+	struct notifier_block *nb);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#390: FILE: include/linux/regulator/regulator.h:337:
+#define regulator_put(regulator) do { (void)(regulator);} while (0)
                                                        ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#390: FILE: include/linux/regulator/regulator.h:337:
+#define regulator_put(regulator) do { (void)(regulator);} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ';' (ctx:VxV)
#409: FILE: include/linux/regulator/regulator.h:356:
+	do { (void)(regulator); (void)(nb);} while (0)
 	                                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#411: FILE: include/linux/regulator/regulator.h:358:
+	do { (void)(regulator); (void)(dev); (void)(uA);} while (0)
 	                                               ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#414: FILE: include/linux/regulator/regulator.h:361:
+	do { (void)(regulator); (void)(data);} while (0)
 	                                    ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000318049.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 7 warnings, 19 checks, 365 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000318049.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
