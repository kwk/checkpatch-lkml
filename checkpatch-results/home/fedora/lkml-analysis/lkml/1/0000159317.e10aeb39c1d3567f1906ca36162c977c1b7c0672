WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> The following changes since commit 1d10914bf2c8a1164aef6c341e6c3518a91b8374:

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '1d10914bf2c8a1164aef6c341e6c3518a91b8374', maybe rebased or not pulled?
#33: 
> The following changes since commit 1d10914bf2c8a1164aef6c341e6c3518a91b8374:

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '1d10914bf2c8a1164aef6c341e6c3518a91b8374', maybe rebased or not pulled?
#46: 
The following changes since commit 1d10914bf2c8a1164aef6c341e6c3518a91b8374:

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#67: FILE: arch/x86/include/asm/msr_debug.h

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#67: 
new file mode 100755

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#72: FILE: arch/x86/include/asm/msr_debug.h:1:
+#ifndef _ASM_X86_MSR_DEBUG_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#113: FILE: arch/x86/include/asm/msr_debug.h:42:
+#define	MSR_MC			(1 << MSR_MC_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#114: FILE: arch/x86/include/asm/msr_debug.h:43:
+#define	MSR_MONITOR		(1 << MSR_MONITOR_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#115: FILE: arch/x86/include/asm/msr_debug.h:44:
+#define	MSR_TIME		(1 << MSR_TIME_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#116: FILE: arch/x86/include/asm/msr_debug.h:45:
+#define	MSR_PMC			(1 << MSR_PMC_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#117: FILE: arch/x86/include/asm/msr_debug.h:46:
+#define	MSR_PLATFORM		(1 << MSR_PLATFORM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#118: FILE: arch/x86/include/asm/msr_debug.h:47:
+#define	MSR_APIC		(1 << MSR_APIC_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#119: FILE: arch/x86/include/asm/msr_debug.h:48:
+#define	MSR_POWERON		(1 << MSR_POWERON_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#120: FILE: arch/x86/include/asm/msr_debug.h:49:
+#define	MSR_CONTROL		(1 << MSR_CONTROL_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#121: FILE: arch/x86/include/asm/msr_debug.h:50:
+#define	MSR_FEATURES		(1 << MSR_FEATURES_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#122: FILE: arch/x86/include/asm/msr_debug.h:51:
+#define	MSR_LBRANCH		(1 << MSR_LBRANCH_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#123: FILE: arch/x86/include/asm/msr_debug.h:52:
+#define	MSR_BIOS		(1 << MSR_BIOS_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#124: FILE: arch/x86/include/asm/msr_debug.h:53:
+#define	MSR_FREQ		(1 << MSR_FREQ_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#125: FILE: arch/x86/include/asm/msr_debug.h:54:
+#define	MSR_MTRR		(1 << MSR_MTTR_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#126: FILE: arch/x86/include/asm/msr_debug.h:55:
+#define	MSR_PERF		(1 << MSR_PERF_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#127: FILE: arch/x86/include/asm/msr_debug.h:56:
+#define	MSR_CACHE		(1 << MSR_CACHE_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#128: FILE: arch/x86/include/asm/msr_debug.h:57:
+#define	MSR_SYSENTER		(1 << MSR_SYSENTER_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#129: FILE: arch/x86/include/asm/msr_debug.h:58:
+#define	MSR_THERM		(1 << MSR_THERM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#130: FILE: arch/x86/include/asm/msr_debug.h:59:
+#define	MSR_MISC		(1 << MSR_MISC_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#131: FILE: arch/x86/include/asm/msr_debug.h:60:
+#define	MSR_DEBUG		(1 << MSR_DEBUG_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#132: FILE: arch/x86/include/asm/msr_debug.h:61:
+#define	MSR_PAT			(1 << MSR_PAT_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#133: FILE: arch/x86/include/asm/msr_debug.h:62:
+#define	MSR_VMX			(1 << MSR_VMX_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#134: FILE: arch/x86/include/asm/msr_debug.h:63:
+#define	MSR_CALL		(1 << MSR_CALL_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#135: FILE: arch/x86/include/asm/msr_debug.h:64:
+#define	MSR_BASE		(1 << MSR_BASE_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#136: FILE: arch/x86/include/asm/msr_debug.h:65:
+#define	MSR_SMM			(1 << MSR_SMM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#137: FILE: arch/x86/include/asm/msr_debug.h:66:
+#define	MSR_SVM			(1 << MSR_SVM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#138: FILE: arch/x86/include/asm/msr_debug.h:67:
+#define	MSR_OSVM		(1 << MSR_OSVM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#182: FILE: arch/x86/include/asm/msr_debug.h:111:
+#define	MSR_INTEL_PENTIUM	(1 << MSR_INTEL_PENTIUM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#183: FILE: arch/x86/include/asm/msr_debug.h:112:
+#define	MSR_INTEL_P6		(1 << MSR_INTEL_P6_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#184: FILE: arch/x86/include/asm/msr_debug.h:113:
+#define	MSR_INTEL_PENTIUM_M	(1 << MSR_INTEL_PENTIUM_M_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#185: FILE: arch/x86/include/asm/msr_debug.h:114:
+#define	MSR_INTEL_CORE		(1 << MSR_INTEL_CORE_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#186: FILE: arch/x86/include/asm/msr_debug.h:115:
+#define	MSR_INTEL_CORE2		(1 << MSR_INTEL_CORE2_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#187: FILE: arch/x86/include/asm/msr_debug.h:116:
+#define	MSR_INTEL_ATOM		(1 << MSR_INTEL_ATOM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#188: FILE: arch/x86/include/asm/msr_debug.h:117:
+#define	MSR_INTEL_XEON_P4	(1 << MSR_INTEL_XEON_P4_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#189: FILE: arch/x86/include/asm/msr_debug.h:118:
+#define	MSR_INTEL_XEON_MP	(1 << MSR_INTEL_XEON_MP_BIT)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#216: FILE: arch/x86/include/asm/msr_debug.h:145:
+	unsigned	flag;			/* MSR flag		*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#220: FILE: arch/x86/include/asm/msr_debug.h:149:
+	unsigned	min;			/* MSR range min	*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#221: FILE: arch/x86/include/asm/msr_debug.h:150:
+	unsigned	max;			/* MSR range max	*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#222: FILE: arch/x86/include/asm/msr_debug.h:151:
+	unsigned	flag;			/* Supported flags	*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#223: FILE: arch/x86/include/asm/msr_debug.h:152:
+	unsigned	model;			/* Supported models	*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#227: FILE: arch/x86/include/asm/msr_debug.h:156:
+	unsigned cpu;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#228: FILE: arch/x86/include/asm/msr_debug.h:157:
+	unsigned msr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#229: FILE: arch/x86/include/asm/msr_debug.h:158:
+	unsigned count;

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#249: FILE: arch/x86/kernel/cpu/msr_debug.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#254: FILE: arch/x86/kernel/cpu/msr_debug.c:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#440: FILE: arch/x86/kernel/cpu/msr_debug.c:187:
+static int get_msr_intel_bit(unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#488: FILE: arch/x86/kernel/cpu/msr_debug.c:235:
+static int get_msr_cpu_bit(unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#490: FILE: arch/x86/kernel/cpu/msr_debug.c:237:
+	unsigned vendor;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#499: FILE: arch/x86/kernel/cpu/msr_debug.c:246:
+static unsigned get_msr_range(unsigned *min, unsigned *max, int index,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#499: FILE: arch/x86/kernel/cpu/msr_debug.c:246:
+static unsigned get_msr_range(unsigned *min, unsigned *max, int index,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#499: FILE: arch/x86/kernel/cpu/msr_debug.c:246:
+static unsigned get_msr_range(unsigned *min, unsigned *max, int index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: arch/x86/kernel/cpu/msr_debug.c:247:
+static unsigned get_msr_range(unsigned *min, unsigned *max, int index,
+			 unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#500: FILE: arch/x86/kernel/cpu/msr_debug.c:247:
+			 unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#500: FILE: arch/x86/kernel/cpu/msr_debug.c:247:
+			 unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#502: FILE: arch/x86/kernel/cpu/msr_debug.c:249:
+	unsigned vendor, cpu_bit;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#523: FILE: arch/x86/kernel/cpu/msr_debug.c:270:
+static int get_msr_range_count(unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#523: FILE: arch/x86/kernel/cpu/msr_debug.c:270:
+static int get_msr_range_count(unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#537: FILE: arch/x86/kernel/cpu/msr_debug.c:284:
+			    unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#537: FILE: arch/x86/kernel/cpu/msr_debug.c:284:
+			    unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#541: FILE: arch/x86/kernel/cpu/msr_debug.c:288:
+	unsigned msr, msr_min, msr_max;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#555: FILE: arch/x86/kernel/cpu/msr_debug.c:302:
+				printk(KERN_INFO " MSR_%08x: %08x_%08x\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#561: FILE: arch/x86/kernel/cpu/msr_debug.c:308:
+static void print_amd_msr(struct seq_file *seq, unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#561: FILE: arch/x86/kernel/cpu/msr_debug.c:308:
+static void print_amd_msr(struct seq_file *seq, unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#565: FILE: arch/x86/kernel/cpu/msr_debug.c:312:
+	unsigned msr, msr_min, msr_max;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#579: FILE: arch/x86/kernel/cpu/msr_debug.c:326:
+				printk(KERN_INFO " MSR_%08x: %016llx\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#587: FILE: arch/x86/kernel/cpu/msr_debug.c:334:
+	unsigned model, flag;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#603: FILE: arch/x86/kernel/cpu/msr_debug.c:350:
+	seq_printf(seq, "\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#641: FILE: arch/x86/kernel/cpu/msr_debug.c:388:
+	unsigned private = inode->i_private;

ERROR:CODE_INDENT: code indent should use tabs where possible
#647: FILE: arch/x86/kernel/cpu/msr_debug.c:394:
+        ^Iif (priv) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#647: FILE: arch/x86/kernel/cpu/msr_debug.c:394:
+        ^Iif (priv) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: arch/x86/kernel/cpu/msr_debug.c:394:
+        ^Iif (priv) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#647: FILE: arch/x86/kernel/cpu/msr_debug.c:394:
+        	if (priv) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#655: FILE: arch/x86/kernel/cpu/msr_debug.c:402:
+		} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: arch/x86/kernel/cpu/msr_debug.c:403:
+                ^Ierr = -ENOMEM;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#656: FILE: arch/x86/kernel/cpu/msr_debug.c:403:
+                ^Ierr = -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: arch/x86/kernel/cpu/msr_debug.c:403:
+                ^Ierr = -ENOMEM;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#658: FILE: arch/x86/kernel/cpu/msr_debug.c:405:
+
+	}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#687: FILE: arch/x86/kernel/cpu/msr_debug.c:434:
+	unsigned priv_data;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#699: FILE: arch/x86/kernel/cpu/msr_debug.c:446:
+		debugfs_create_file(msr_base[i].name, S_IRUGO, msr_dentry,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:NEEDLESS_IF: debugfs_remove_recursive(NULL) is safe and this check is probably not required
#708: FILE: arch/x86/kernel/cpu/msr_debug.c:455:
+	if (msr_debugfs_dir)
+		debugfs_remove_recursive(msr_debugfs_dir);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000159317.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 43 warnings, 38 checks, 653 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000159317.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
