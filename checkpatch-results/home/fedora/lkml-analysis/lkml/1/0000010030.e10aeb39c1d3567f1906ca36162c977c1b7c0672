WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#21: 
Subject: [PATCH 12/19] crypto: sha512_generic - Fix checkpatch errors

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:CAMELCASE: Avoid CamelCase: <RORu64>
#120: FILE: crypto/sha512_generic.c:71:
+#define e0(x)       (RORu64(x, 28) ^ RORu64(x, 34) ^ RORu64(x, 39))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#120: FILE: crypto/sha512_generic.c:71:
+#define e0(x)       (RORu64(x, 28) ^ RORu64(x, 34) ^ RORu64(x, 39))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#121: FILE: crypto/sha512_generic.c:72:
+#define e1(x)       (RORu64(x, 14) ^ RORu64(x, 18) ^ RORu64(x, 41))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#122: FILE: crypto/sha512_generic.c:73:
+#define s0(x)       (RORu64(x,  1) ^ RORu64(x,  8) ^ (x >> 7))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#123: FILE: crypto/sha512_generic.c:74:
+#define s1(x)       (RORu64(x, 19) ^ RORu64(x, 61) ^ (x >> 6))

CHECK:CAMELCASE: Avoid CamelCase: <Ch>
#172: FILE: crypto/sha512_generic.c:107:
+		t1 = h + e1(e) + Ch(e, f, g) + sha512_K[i]   + W[i];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#173: FILE: crypto/sha512_generic.c:108:
+		t2 = e0(a) + Maj(a, b, c);    d += t1;    h = t1+t2;
 		                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Maj>
#173: FILE: crypto/sha512_generic.c:108:
+		t2 = e0(a) + Maj(a, b, c);    d += t1;    h = t1+t2;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#174: FILE: crypto/sha512_generic.c:109:
+		t1 = g + e1(d) + Ch(d, e, f) + sha512_K[i+1] + W[i+1];
 		                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#174: FILE: crypto/sha512_generic.c:109:
+		t1 = g + e1(d) + Ch(d, e, f) + sha512_K[i+1] + W[i+1];
 		                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#175: FILE: crypto/sha512_generic.c:110:
+		t2 = e0(h) + Maj(h, a, b);    c += t1;    g = t1+t2;
 		                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#176: FILE: crypto/sha512_generic.c:111:
+		t1 = f + e1(c) + Ch(c, d, e) + sha512_K[i+2] + W[i+2];
 		                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#176: FILE: crypto/sha512_generic.c:111:
+		t1 = f + e1(c) + Ch(c, d, e) + sha512_K[i+2] + W[i+2];
 		                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#177: FILE: crypto/sha512_generic.c:112:
+		t2 = e0(g) + Maj(g, h, a);    b += t1;    f = t1+t2;
 		                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#178: FILE: crypto/sha512_generic.c:113:
+		t1 = e + e1(b) + Ch(b, c, d) + sha512_K[i+3] + W[i+3];
 		                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#178: FILE: crypto/sha512_generic.c:113:
+		t1 = e + e1(b) + Ch(b, c, d) + sha512_K[i+3] + W[i+3];
 		                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#179: FILE: crypto/sha512_generic.c:114:
+		t2 = e0(f) + Maj(f, g, h);    a += t1;    e = t1+t2;
 		                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#180: FILE: crypto/sha512_generic.c:115:
+		t1 = d + e1(a) + Ch(a, b, c) + sha512_K[i+4] + W[i+4];
 		                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#180: FILE: crypto/sha512_generic.c:115:
+		t1 = d + e1(a) + Ch(a, b, c) + sha512_K[i+4] + W[i+4];
 		                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#181: FILE: crypto/sha512_generic.c:116:
+		t2 = e0(e) + Maj(e, f, g);    h += t1;    d = t1+t2;
 		                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#182: FILE: crypto/sha512_generic.c:117:
+		t1 = c + e1(h) + Ch(h, a, b) + sha512_K[i+5] + W[i+5];
 		                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#182: FILE: crypto/sha512_generic.c:117:
+		t1 = c + e1(h) + Ch(h, a, b) + sha512_K[i+5] + W[i+5];
 		                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#183: FILE: crypto/sha512_generic.c:118:
+		t2 = e0(d) + Maj(d, e, f);    g += t1;    c = t1+t2;
 		                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#184: FILE: crypto/sha512_generic.c:119:
+		t1 = b + e1(g) + Ch(g, h, a) + sha512_K[i+6] + W[i+6];
 		                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#184: FILE: crypto/sha512_generic.c:119:
+		t1 = b + e1(g) + Ch(g, h, a) + sha512_K[i+6] + W[i+6];
 		                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#185: FILE: crypto/sha512_generic.c:120:
+		t2 = e0(c) + Maj(c, d, e);    f += t1;    b = t1+t2;
 		                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#186: FILE: crypto/sha512_generic.c:121:
+		t1 = a + e1(f) + Ch(f, g, h) + sha512_K[i+7] + W[i+7];
 		                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#186: FILE: crypto/sha512_generic.c:121:
+		t1 = a + e1(f) + Ch(f, g, h) + sha512_K[i+7] + W[i+7];
 		                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: crypto/sha512_generic.c:122:
+		t2 = e0(b) + Maj(b, c, d);    e += t1;    a = t1+t2;
 		                                                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#228: FILE: crypto/sha512_generic.c:279:
+	if ((ret = crypto_register_shash(&sha384)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#230: FILE: crypto/sha512_generic.c:281:
+	if ((ret = crypto_register_shash(&sha512)) < 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010030.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 2 warnings, 29 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010030.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
