WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#135: FILE: kernel/lockdep.c:451:
+	printk("%s %.*s\n", init_utsname()->release,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: kernel/lockdep.c:452:
+	printk("%s %.*s\n", init_utsname()->release,
+		(int)strcspn(init_utsname()->version, " "),

CHECK:SPACING: No space is necessary after a cast
#157: FILE: kernel/lockdep.c:469:
+	unsigned long start = (unsigned long) &_stext,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#158: FILE: kernel/lockdep.c:470:
+		      end   = (unsigned long) &_end,

CHECK:SPACING: No space is necessary after a cast
#159: FILE: kernel/lockdep.c:471:
+		      addr  = (unsigned long) obj;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= start'
#177: FILE: kernel/lockdep.c:479:
+	if ((addr >= start) && (addr < end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < end'
#177: FILE: kernel/lockdep.c:479:
+	if ((addr >= start) && (addr < end))

CHECK:SPACING: No space is necessary after a cast
#219: FILE: kernel/lockdep.c:487:
+		start = (unsigned long) &__per_cpu_start + per_cpu_offset(i);

CHECK:SPACING: No space is necessary after a cast
#220: FILE: kernel/lockdep.c:488:
+		end   = (unsigned long) &__per_cpu_start + PERCPU_ENOUGH_ROOM

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= start'
#225: FILE: kernel/lockdep.c:491:
+		if ((addr >= start) && (addr < end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < end'
#225: FILE: kernel/lockdep.c:491:
+		if ((addr >= start) && (addr < end))

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: kernel/lockdep.c:597:
+ ^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#390: FILE: kernel/lockdep.c:597:
+ ^I */$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#393: FILE: kernel/lockdep.c:600:
+		printk("INFO: trying to register non-static key.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#394: FILE: kernel/lockdep.c:601:
+		printk("the code is fine but needs lockdep annotation.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#395: FILE: kernel/lockdep.c:602:
+		printk("turning off the locking correctness validator.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#427: FILE: kernel/lockdep.c:634:
+		printk("BUG: MAX_LOCKDEP_KEYS too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#428: FILE: kernel/lockdep.c:635:
+		printk("turning off the locking correctness validator.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#450: FILE: kernel/lockdep.c:657:
+		printk("\nnew class %p: %s", class->key, class->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#452: FILE: kernel/lockdep.c:659:
+			printk("#%d", class->name_version);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#453: FILE: kernel/lockdep.c:660:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#486: FILE: kernel/lockdep.c:693:
+		printk("BUG: MAX_LOCKDEP_ENTRIES too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#487: FILE: kernel/lockdep.c:694:
+		printk("turning off the locking correctness validator.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#545: FILE: kernel/lockdep.c:752:
+	printk("\n-> #%u", depth);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#547: FILE: kernel/lockdep.c:754:
+	printk(":\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#565: FILE: kernel/lockdep.c:772:
+	printk("\n=======================================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#566: FILE: kernel/lockdep.c:773:
+	printk(  "[ INFO: possible circular locking dependency detected ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#566: FILE: kernel/lockdep.c:773:
+	printk(  "[ INFO: possible circular locking dependency detected ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#568: FILE: kernel/lockdep.c:775:
+	printk(  "-------------------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#568: FILE: kernel/lockdep.c:775:
+	printk(  "-------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#569: FILE: kernel/lockdep.c:776:
+	printk("%s/%d is trying to acquire lock:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: kernel/lockdep.c:777:
+	printk("%s/%d is trying to acquire lock:\n",
+		curr->comm, curr->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#572: FILE: kernel/lockdep.c:779:
+	printk("\nbut task is already holding lock:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#574: FILE: kernel/lockdep.c:781:
+	printk("\nwhich lock already depends on the new lock.\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#575: FILE: kernel/lockdep.c:782:
+	printk("\nthe existing dependency chain (in reverse order) is:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#596: FILE: kernel/lockdep.c:803:
+	printk("\nother info that might help us debug this:\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#599: FILE: kernel/lockdep.c:806:
+	printk("\nstack backtrace:\n");

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#607: FILE: kernel/lockdep.c:814:
+static int noinline print_infinite_recursion_bug(void)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#655: FILE: kernel/lockdep.c:1026:
+check_prev_add_irq(struct task_struct *curr, struct held_lock *prev,
+		struct held_lock *next)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: kernel/lockdep.c:1035:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_HARDIRQ,
+					LOCK_ENABLED_HARDIRQS, "hard"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: kernel/lockdep.c:1045:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_HARDIRQ_READ,
+					LOCK_ENABLED_HARDIRQS, "hard-read"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: kernel/lockdep.c:1055:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_SOFTIRQ,
+					LOCK_ENABLED_SOFTIRQS, "soft"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: kernel/lockdep.c:1064:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_SOFTIRQ_READ,
+					LOCK_ENABLED_SOFTIRQS, "soft"))

CHECK:BRACES: braces {} should be used on all arms of this statement
#701: FILE: kernel/lockdep.c:1072:
+	if (current->hardirq_context)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#703: FILE: kernel/lockdep.c:1074:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: kernel/lockdep.c:1086:
+check_prev_add_irq(struct task_struct *curr, struct held_lock *prev,
+		struct held_lock *next)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1012: FILE: kernel/lockdep.c:1246:
+		printk("\n new dependency: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1014: FILE: kernel/lockdep.c:1248:
+		printk(" => ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1016: FILE: kernel/lockdep.c:1250:
+		printk("\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1098: FILE: kernel/lockdep.c:1281:
+			curr->held_locks[depth-1].irq_context)
 			                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1107: FILE: kernel/lockdep.c:1286:
+		int distance = curr->lockdep_depth - depth + 1;
+		hlock = curr->held_locks + depth-1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1107: FILE: kernel/lockdep.c:1286:
+		hlock = curr->held_locks + depth-1;
 		                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1134: FILE: kernel/lockdep.c:1313:
+				curr->held_locks[depth-1].irq_context)
 				                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1185: FILE: kernel/lockdep.c:1394:
+^I       ^Istruct held_lock *hlock, int chain_head)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1185: FILE: kernel/lockdep.c:1394:
+^I       ^Istruct held_lock *hlock, int chain_head)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1185: FILE: kernel/lockdep.c:1394:
+static int validate_chain(struct task_struct *curr, struct lockdep_map *lock,
+	       	struct held_lock *hlock, int chain_head)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hlock->check == 2'
#1197: FILE: kernel/lockdep.c:1406:
+	if (!hlock->trylock && (hlock->check == 2) &&
+			lookup_chain_cache(curr->curr_chain_key, hlock->class)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1198: FILE: kernel/lockdep.c:1407:
+	if (!hlock->trylock && (hlock->check == 2) &&
+			lookup_chain_cache(curr->curr_chain_key, hlock->class)) {

CHECK:BRACES: Unbalanced braces around else statement
#1230: FILE: kernel/lockdep.c:1439:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#1239: FILE: kernel/lockdep.c:1448:
+^I       ^Istruct lockdep_map *lock, struct held_lock *hlock,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1239: FILE: kernel/lockdep.c:1448:
+^I       ^Istruct lockdep_map *lock, struct held_lock *hlock,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1239: FILE: kernel/lockdep.c:1448:
+static inline int validate_chain(struct task_struct *curr,
+	       	struct lockdep_map *lock, struct held_lock *hlock,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1258: FILE: kernel/lockdep.c:1505:
+	printk("\n=================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1259: FILE: kernel/lockdep.c:1506:
+	printk(  "[ INFO: inconsistent lock state ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1259: FILE: kernel/lockdep.c:1506:
+	printk(  "[ INFO: inconsistent lock state ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1261: FILE: kernel/lockdep.c:1508:
+	printk(  "---------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1261: FILE: kernel/lockdep.c:1508:
+	printk(  "---------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1263: FILE: kernel/lockdep.c:1510:
+	printk("inconsistent {%s} -> {%s} usage.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1264: FILE: kernel/lockdep.c:1511:
+	printk("inconsistent {%s} -> {%s} usage.\n",
+		usage_str[prev_bit], usage_str[new_bit]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1266: FILE: kernel/lockdep.c:1513:
+	printk("%s/%d [HC%u[%lu]:SC%u[%lu]:HE%u:SE%u] takes:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1267: FILE: kernel/lockdep.c:1514:
+	printk("%s/%d [HC%u[%lu]:SC%u[%lu]:HE%u:SE%u] takes:\n",
+		curr->comm, curr->pid,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1274: FILE: kernel/lockdep.c:1521:
+	printk("{%s} state was registered at:\n", usage_str[prev_bit]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1278: FILE: kernel/lockdep.c:1525:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1281: FILE: kernel/lockdep.c:1528:
+	printk("\nstack backtrace:\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1376: FILE: kernel/lockdep.c:1661:
+static int mark_lock_irq(struct task_struct *curr, struct held_lock *this,
+		enum lock_usage_bit new_bit)

ERROR:SPACING: space required before the open parenthesis '('
#1405: FILE: kernel/lockdep.c:1665:
+	switch(new_bit) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1460: FILE: kernel/lockdep.c:1925:
+EXPORT_SYMBOL(trace_hardirqs_on);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1475: FILE: kernel/lockdep.c:1940:
+	if (curr->hardirqs_enabled) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1483: FILE: kernel/lockdep.c:1948:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1487: FILE: kernel/lockdep.c:1952:
+EXPORT_SYMBOL(trace_hardirqs_off);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1536: FILE: kernel/lockdep.c:2001:
+	if (curr->softirqs_enabled) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1545: FILE: kernel/lockdep.c:2010:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1559: FILE: kernel/lockdep.c:2024:
+				if (!mark_lock(curr, hlock,
+						LOCK_USED_IN_HARDIRQ_READ))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1563: FILE: kernel/lockdep.c:2028:
+				if (!mark_lock(curr, hlock,
+						LOCK_USED_IN_SOFTIRQ_READ))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1577: FILE: kernel/lockdep.c:2042:
+			if (!mark_lock(curr, hlock,
+					LOCK_ENABLED_HARDIRQS_READ))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1581: FILE: kernel/lockdep.c:2046:
+				if (!mark_lock(curr, hlock,
+						LOCK_ENABLED_SOFTIRQS_READ))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1585: FILE: kernel/lockdep.c:2050:
+			if (!mark_lock(curr, hlock,
+					LOCK_ENABLED_HARDIRQS))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1589: FILE: kernel/lockdep.c:2054:
+				if (!mark_lock(curr, hlock,
+						LOCK_ENABLED_SOFTIRQS))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1598: FILE: kernel/lockdep.c:2063:
+static int separate_irq_context(struct task_struct *curr,
+		struct held_lock *hlock)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1605: FILE: kernel/lockdep.c:2070:
+	hlock->irq_context = 2*(curr->hardirq_context ? 1 : 0) +
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1610: FILE: kernel/lockdep.c:2075:
+		prev_hlock = curr->held_locks + depth-1;
 		                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1631: FILE: kernel/lockdep.c:2091:
+int mark_lock_irq(struct task_struct *curr, struct held_lock *this,
+		enum lock_usage_bit new_bit)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1644: FILE: kernel/lockdep.c:2098:
+static inline int mark_irqflags(struct task_struct *curr,
+		struct held_lock *hlock)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1660: FILE: kernel/lockdep.c:2104:
+static inline int separate_irq_context(struct task_struct *curr,
+		struct held_lock *hlock)

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#1708: FILE: kernel/lockdep.c:2129:
+	 * Make sure we didnt race:
 	                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1778: FILE: kernel/lockdep.c:2174:
+		printk("\nmarked lock as {%s}:\n", usage_str[new_bit]);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000424832.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 41 warnings, 46 checks, 1865 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000424832.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
