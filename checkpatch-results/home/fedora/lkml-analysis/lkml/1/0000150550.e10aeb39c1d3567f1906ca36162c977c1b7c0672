ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: drivers/ata/libata-eh.c:565:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#73: FILE: drivers/ata/libata-eh.c:567:
+		/* This must occur under the ap->lock as we don't want
+		   a polled recovery to race the real interrupt handler

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: drivers/ata/libata-eh.c:568:
+^I^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: drivers/ata/libata-eh.c:571:
+^I^I   $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#79: FILE: drivers/ata/libata-eh.c:573:
+		   this as if normal completion won the race */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: drivers/ata/libata-eh.c:577:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: drivers/ata/libata-eh.c:621:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#93: FILE: drivers/ata/libata-eh.c:623:
+	/* If we timed raced normal completion and there is nothing to
+	   recover nr_timedout == 0 why exactly are we doing error recovery ? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#93: FILE: drivers/ata/libata-eh.c:623:
+	   recover nr_timedout == 0 why exactly are we doing error recovery ? */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: drivers/ata/libata-sff.c:1653:
+unsigned int ata_sff_host_intr(struct ata_port *ap,
 				      struct ata_queued_cmd *qc)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#143: FILE: drivers/ata/libata-sff.c:1801:
+	if (qc == NULL ||  !(qc->flags & ATA_QCFLAG_ACTIVE))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#149: FILE: drivers/ata/libata-sff.c:1807:
+	/* See if the controller thinks it is still busy - if so the command
+	   isn't a lost IRQ but is still in progress */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#149: FILE: drivers/ata/libata-sff.c:1807:
+	   isn't a lost IRQ but is still in progress */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#155: FILE: drivers/ata/libata-sff.c:1813:
+	/* There was a command running, we are no longer busy and we have
+	   no interrupt. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#155: FILE: drivers/ata/libata-sff.c:1813:
+	   no interrupt. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: drivers/ata/libata-sff.c:1815:
+	ata_port_printk(ap, KERN_WARNING, "lost interrupt (Status 0x%x)\n",
+								status);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#159: FILE: drivers/ata/libata-sff.c:1817:
+	/* Run the host interrupt logic as if the interrupt had not been
+	   lost */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#159: FILE: drivers/ata/libata-sff.c:1817:
+	   lost */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#285: FILE: drivers/ata/sata_vsc.c:312:
+	/* The IRQ handling is not quite standard SFF behaviour so we
+	   cannot use the default lost interrupt handler */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#285: FILE: drivers/ata/sata_vsc.c:312:
+	   cannot use the default lost interrupt handler */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: include/linux/libata.h:1578:
+extern void ata_sff_lost_interrupt(struct ata_port *ap);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150550.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 12 warnings, 4 checks, 199 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150550.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
