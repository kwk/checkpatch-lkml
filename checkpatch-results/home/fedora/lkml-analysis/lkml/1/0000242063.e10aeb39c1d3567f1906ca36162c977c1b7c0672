WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#92: FILE: MAINTAINERS:2430:
+P:	Eduard - Gabriel Munteanu
+M:	eduard.munteanu@linux360.ro

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: include/linux/kmemtrace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/kmemtrace.h:23:
+extern void kmemtrace_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPLIT_STRING: quoted string split across lines
#138: FILE: include/linux/kmemtrace.h:34:
+	trace_mark(kmemtrace_alloc, "type_id %d call_site %lu ptr %lu "
+		   "bytes_req %lu bytes_alloc %lu gfp_flags %lu node %d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#139: FILE: include/linux/kmemtrace.h:35:
+		   type_id, call_site, (unsigned long) ptr,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#140: FILE: include/linux/kmemtrace.h:36:
+		   bytes_req, bytes_alloc, (unsigned long) gfp_flags, node);

CHECK:SPACING: No space is necessary after a cast
#148: FILE: include/linux/kmemtrace.h:44:
+		   type_id, call_site, (unsigned long) ptr);

WARNING:TYPO_SPELLING: 'an userspace' may be misspelled - perhaps 'a userspace'?
#229: FILE: lib/Kconfig.debug:688:
+	  This requires an userspace application to use. See
 	                ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#238: FILE: lib/Kconfig.debug:697:
+config KMEMTRACE_DEFAULT_ENABLED
+	bool "Enabled by default at boot"
+	depends on KMEMTRACE
+	help
+	  Say Y here to enable kmemtrace at boot-time by default. Whatever
+	  the choice, the behavior can be overridden by a kernel parameter,
+	  as described in documentation.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#265: FILE: mm/kmemtrace.c:1:
+/*

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#289: FILE: mm/kmemtrace.c:25:
+static unsigned int kmemtrace_enabled = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#318: FILE: mm/kmemtrace.c:54:
+} __attribute__ ((__packed__));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#325: FILE: mm/kmemtrace.c:61:
+} __attribute__ ((__packed__));

WARNING:SPLIT_STRING: quoted string split across lines
#443: FILE: mm/kmemtrace.c:179:
+	err = marker_probe_register("kmemtrace_alloc", "type_id %d "
+				    "call_site %lu ptr %lu "

WARNING:SPLIT_STRING: quoted string split across lines
#444: FILE: mm/kmemtrace.c:180:
+				    "call_site %lu ptr %lu "
+				    "bytes_req %lu bytes_alloc %lu "

WARNING:SPLIT_STRING: quoted string split across lines
#445: FILE: mm/kmemtrace.c:181:
+				    "bytes_req %lu bytes_alloc %lu "
+				    "gfp_flags %lu node %d",

WARNING:SPLIT_STRING: quoted string split across lines
#450: FILE: mm/kmemtrace.c:186:
+	err = marker_probe_register("kmemtrace_free", "type_id %d "
+				    "call_site %lu ptr %lu",

CHECK:SPACING: No space is necessary after a cast
#466: FILE: mm/kmemtrace.c:202:
+	*val = *((int *) data);

CHECK:SPACING: No space is necessary after a cast
#475: FILE: mm/kmemtrace.c:211:
+	*((int *) data) = !!val;

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#494: FILE: mm/kmemtrace.c:230:
+	if (kmemtrace_enabled_dentry)
+		debugfs_remove(kmemtrace_enabled_dentry);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#499: FILE: mm/kmemtrace.c:235:
+	if (kmemtrace_abi_version_dentry)
+		debugfs_remove(kmemtrace_abi_version_dentry);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#501: FILE: mm/kmemtrace.c:237:
+	if (kmemtrace_overruns_dentry)
+		debugfs_remove(kmemtrace_overruns_dentry);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#507: FILE: mm/kmemtrace.c:243:
+	if (kmemtrace_dir)
+		debugfs_remove(kmemtrace_dir);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#520: FILE: mm/kmemtrace.c:256:
+		debugfs_create_u32("abi_version", S_IRUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#523: FILE: mm/kmemtrace.c:259:
+		debugfs_create_u32("total_overruns", S_IRUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#529: FILE: mm/kmemtrace.c:265:
+		debugfs_create_file("enabled", S_IRUSR | S_IWUSR,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#538: FILE: mm/kmemtrace.c:274:
+	printk(KERN_INFO "kmemtrace: fully up.\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#563: FILE: mm/kmemtrace.c:299:
+}
+early_param("kmemtrace.enable", kmemtrace_set_boot_enabled);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#570: FILE: mm/kmemtrace.c:306:
+}
+early_param("kmemtrace.subbufs", kmemtrace_set_subbufs);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#584: FILE: mm/kmemtrace.c:320:
+		printk(KERN_ERR "kmemtrace: could not open relay channel.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#591: FILE: mm/kmemtrace.c:327:
+	printk(KERN_INFO "kmemtrace: early init successful.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#596: FILE: mm/kmemtrace.c:332:
+	printk(KERN_ERR "kmemtrace: could not register marker probes!\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000242063.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 23 warnings, 8 checks, 507 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000242063.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
