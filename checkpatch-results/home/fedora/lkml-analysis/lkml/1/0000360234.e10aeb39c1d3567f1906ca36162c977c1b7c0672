WARNING:TYPO_SPELLING: 'reqeusts' may be misspelled - perhaps 'requests'?
#15: 
Subject: [PATCH 1/8] KVM: PVDMA Host: Handle reqeusts for guest DMA mappings
                                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#139: FILE: drivers/kvm/x86.c:133:
+		printk(KERN_INFO "%s: Illegal number of pages: %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#140: FILE: drivers/kvm/x86.c:134:
+		       __FUNCTION__, npages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#146: FILE: drivers/kvm/x86.c:140:
+		printk(KERN_INFO "%s: page hpa %p not valid for page_gfn %p\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#147: FILE: drivers/kvm/x86.c:141:
+		       __FUNCTION__, (void *)page_hpa, (void *)page_gfn);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#151: FILE: drivers/kvm/x86.c:145:
+	hcall_page = shared_addr = kmap(host_page);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sg"
#157: FILE: drivers/kvm/x86.c:151:
+	if (sg == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#158: FILE: drivers/kvm/x86.c:152:
+		printk(KERN_INFO "%s: Couldn't allocate memory (sg)\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#158: FILE: drivers/kvm/x86.c:152:
+	if (sg == NULL) {
+		printk(KERN_INFO "%s: Couldn't allocate memory (sg)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#159: FILE: drivers/kvm/x86.c:153:
+		       __FUNCTION__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dmap)...) over kmalloc(sizeof(struct dma_map)...)
#168: FILE: drivers/kvm/x86.c:162:
+	dmap = kmalloc(sizeof(struct dma_map), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dmap"
#169: FILE: drivers/kvm/x86.c:163:
+	if (dmap == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#170: FILE: drivers/kvm/x86.c:164:
+		printk(KERN_INFO "%s: Couldn't allocate memory\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#170: FILE: drivers/kvm/x86.c:164:
+	if (dmap == NULL) {
+		printk(KERN_INFO "%s: Couldn't allocate memory\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#171: FILE: drivers/kvm/x86.c:165:
+		       __FUNCTION__);

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: drivers/kvm/x86.c:177:
+			int j;
+			printk(KERN_INFO "kvm %s: hpa %p not valid "

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#183: FILE: drivers/kvm/x86.c:177:
+			printk(KERN_INFO "kvm %s: hpa %p not valid "

WARNING:SPLIT_STRING: quoted string split across lines
#184: FILE: drivers/kvm/x86.c:178:
+			printk(KERN_INFO "kvm %s: hpa %p not valid "
+			       "for gpa %p\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#185: FILE: drivers/kvm/x86.c:179:
+			       __FUNCTION__, (void *)gpa, (void *)hpa);

CHECK:BRACES: braces {} should be used on all arms of this statement
#233: FILE: drivers/kvm/x86.c:227:
+	if (dmap) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#241: FILE: drivers/kvm/x86.c:235:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'match->pt_dev.guest.busnr == pv_pci_info->busnr'
#260: FILE: drivers/kvm/x86.c:254:
+		if (match &&
+		    (match->pt_dev.guest.busnr == pv_pci_info->busnr) &&
+		    (match->pt_dev.guest.devfn == pv_pci_info->devfn))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'match->pt_dev.guest.devfn == pv_pci_info->devfn'
#260: FILE: drivers/kvm/x86.c:254:
+		if (match &&
+		    (match->pt_dev.guest.busnr == pv_pci_info->busnr) &&
+		    (match->pt_dev.guest.devfn == pv_pci_info->devfn))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#279: FILE: drivers/kvm/x86.c:273:
+		printk(KERN_INFO "%s: page hpa %p not valid for page_gfn %p\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#280: FILE: drivers/kvm/x86.c:274:
+		       __FUNCTION__, (void *)page_hpa, (void *)page_gfn);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*match)...) over kmalloc(sizeof(struct pv_pci_dev_list)...)
#306: FILE: drivers/kvm/x86.c:300:
+	match = kmalloc(sizeof(struct pv_pci_dev_list), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!match"
#307: FILE: drivers/kvm/x86.c:301:
+	if (match == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#308: FILE: drivers/kvm/x86.c:302:
+		printk(KERN_INFO "%s: Couldn't allocate memory\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#308: FILE: drivers/kvm/x86.c:302:
+	if (match == NULL) {
+		printk(KERN_INFO "%s: Couldn't allocate memory\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#309: FILE: drivers/kvm/x86.c:303:
+		       __FUNCTION__);

WARNING:SIZEOF_PARENTHESIS: sizeof pv_pci_dev should be sizeof(pv_pci_dev)
#332: FILE: drivers/kvm/x86.c:1241:
+		if (copy_from_user(&pv_pci_dev, argp, sizeof pv_pci_dev)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#333: FILE: drivers/kvm/x86.c:1242:
+			printk("pv_register: failing copy from user\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000360234.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 22 warnings, 10 checks, 347 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000360234.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
