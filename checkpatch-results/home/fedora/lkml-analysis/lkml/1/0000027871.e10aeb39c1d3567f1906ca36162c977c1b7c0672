CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#50: FILE: arch/x86/include/asm/percpu.h:111:
+#define percpu_add_op(var, val)				\
+do {							\
+	typedef typeof(var) pto_T__;			\
+	if (0) {					\
+		pto_T__ pto_tmp__;			\
+		pto_tmp__ = (val);			\
+	}						\
+	switch (sizeof(var)) {				\
+	case 1:						\
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incb "__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : );				\
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decb "__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : );				\
+		else					\
+		  asm("addb %1,"__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : "qi" ((pto_T__)(val)));		\
+		break;					\
+	case 2:						\
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incw "__percpu_arg(0)	\
+		    : "+m" (var)			\
+		    : );				\
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decw "__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : );				\
+		else					\
+		asm("addw %1,"__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : "ri" ((pto_T__)(val)));		\
+		break;					\
+	case 4:						\
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incl "__percpu_arg(0)	\
+		    : "+m" (var)			\
+		    : );				\
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decl "__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : );				\
+		else					\
+		asm("addl %1,"__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : "ri" ((pto_T__)(val)));		\
+		break;					\
+	case 8:						\
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incq "__percpu_arg(0)	\
+		    : "+m" (var)			\
+		    : );				\
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decq "__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : );				\
+		else					\
+		asm("addq %1,"__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : "re" ((pto_T__)(val)));		\
+		break;					\
+	default: __bad_percpu_size();			\
+	}						\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#50: FILE: arch/x86/include/asm/percpu.h:111:
+#define percpu_add_op(var, val)				\
+do {							\
+	typedef typeof(var) pto_T__;			\
+	if (0) {					\
+		pto_T__ pto_tmp__;			\
+		pto_tmp__ = (val);			\
+	}						\
+	switch (sizeof(var)) {				\
+	case 1:						\
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incb "__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : );				\
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decb "__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : );				\
+		else					\
+		  asm("addb %1,"__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : "qi" ((pto_T__)(val)));		\
+		break;					\
+	case 2:						\
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incw "__percpu_arg(0)	\
+		    : "+m" (var)			\
+		    : );				\
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decw "__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : );				\
+		else					\
+		asm("addw %1,"__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : "ri" ((pto_T__)(val)));		\
+		break;					\
+	case 4:						\
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incl "__percpu_arg(0)	\
+		    : "+m" (var)			\
+		    : );				\
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decl "__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : );				\
+		else					\
+		asm("addl %1,"__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : "ri" ((pto_T__)(val)));		\
+		break;					\
+	case 8:						\
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incq "__percpu_arg(0)	\
+		    : "+m" (var)			\
+		    : );				\
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decq "__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : );				\
+		else					\
+		asm("addq %1,"__percpu_arg(0)		\
+		    : "+m" (var)			\
+		    : "re" ((pto_T__)(val)));		\
+		break;					\
+	default: __bad_percpu_size();			\
+	}						\
+} while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#52: FILE: arch/x86/include/asm/percpu.h:113:
+	typedef typeof(var) pto_T__;			\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#59: FILE: arch/x86/include/asm/percpu.h:120:
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incb "__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#60: FILE: arch/x86/include/asm/percpu.h:121:
+		  asm("incb "__percpu_arg(0)		\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#63: FILE: arch/x86/include/asm/percpu.h:124:
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decb "__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#64: FILE: arch/x86/include/asm/percpu.h:125:
+		  asm("decb "__percpu_arg(0)		\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#67: FILE: arch/x86/include/asm/percpu.h:128:
+		else					\
+		  asm("addb %1,"__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#68: FILE: arch/x86/include/asm/percpu.h:129:
+		  asm("addb %1,"__percpu_arg(0)		\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#73: FILE: arch/x86/include/asm/percpu.h:134:
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incw "__percpu_arg(0)	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#74: FILE: arch/x86/include/asm/percpu.h:135:
+		  asm("incw "__percpu_arg(0)	\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#77: FILE: arch/x86/include/asm/percpu.h:138:
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decw "__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#78: FILE: arch/x86/include/asm/percpu.h:139:
+		  asm("decw "__percpu_arg(0)		\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#81: FILE: arch/x86/include/asm/percpu.h:142:
+		else					\
+		asm("addw %1,"__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#82: FILE: arch/x86/include/asm/percpu.h:143:
+		asm("addw %1,"__percpu_arg(0)		\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#87: FILE: arch/x86/include/asm/percpu.h:148:
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incl "__percpu_arg(0)	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#88: FILE: arch/x86/include/asm/percpu.h:149:
+		  asm("incl "__percpu_arg(0)	\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#91: FILE: arch/x86/include/asm/percpu.h:152:
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decl "__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#92: FILE: arch/x86/include/asm/percpu.h:153:
+		  asm("decl "__percpu_arg(0)		\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#95: FILE: arch/x86/include/asm/percpu.h:156:
+		else					\
+		asm("addl %1,"__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#96: FILE: arch/x86/include/asm/percpu.h:157:
+		asm("addl %1,"__percpu_arg(0)		\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#101: FILE: arch/x86/include/asm/percpu.h:162:
+		if (__builtin_constant_p(val) == 1)	\
+		  asm("incq "__percpu_arg(0)	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#102: FILE: arch/x86/include/asm/percpu.h:163:
+		  asm("incq "__percpu_arg(0)	\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#105: FILE: arch/x86/include/asm/percpu.h:166:
+		else if (__builtin_constant_p(val) == -1) \
+		  asm("decq "__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#106: FILE: arch/x86/include/asm/percpu.h:167:
+		  asm("decq "__percpu_arg(0)		\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#109: FILE: arch/x86/include/asm/percpu.h:170:
+		else					\
+		asm("addq %1,"__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#110: FILE: arch/x86/include/asm/percpu.h:171:
+		asm("addq %1,"__percpu_arg(0)		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#114: FILE: arch/x86/include/asm/percpu.h:175:
+	default: __bad_percpu_size();			\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000027871.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 13 warnings, 14 checks, 146 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000027871.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
