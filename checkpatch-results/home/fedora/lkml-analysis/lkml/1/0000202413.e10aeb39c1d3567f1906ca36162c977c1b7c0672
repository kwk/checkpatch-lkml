WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#30: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#35: FILE: fs/pohmelfs/config.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#75: FILE: fs/pohmelfs/config.c:41:
+	if (sc->idx == ctl->idx && sc->type == ctl->type &&
+			sc->proto == ctl->proto &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: fs/pohmelfs/config.c:66:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*g)...) over kzalloc(sizeof(struct pohmelfs_config_group)...)
#105: FILE: fs/pohmelfs/config.c:71:
+	g = kzalloc(sizeof(struct pohmelfs_config_group), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dst)...) over kzalloc(sizeof(struct pohmelfs_config)...)
#148: FILE: fs/pohmelfs/config.c:114:
+		dst = kzalloc(sizeof(struct pohmelfs_config), GFP_KERNEL);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#222: FILE: fs/pohmelfs/config.c:188:
+static int pohmelfs_send_reply(int err, int msg_num, int action, struct cn_msg *msg, struct pohmelfs_ctl *ctl)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ack)...) over kmalloc(sizeof(struct pohmelfs_cn_ack)...)
#226: FILE: fs/pohmelfs/config.c:192:
+	ack = kmalloc(sizeof(struct pohmelfs_cn_ack), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: fs/pohmelfs/config.c:232:
+		struct pohmelfs_ctl *sc = &c->state.ctl;
+		if (pohmelfs_send_reply(err, g->num_entry - i, POHMELFS_CTLINFO_ACK, msg, sc)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: fs/pohmelfs/config.c:240:
+        mutex_unlock(&pohmelfs_config_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: fs/pohmelfs/config.c:240:
+        mutex_unlock(&pohmelfs_config_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: fs/pohmelfs/config.c:241:
+        return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: fs/pohmelfs/config.c:241:
+        return err;$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*c)...) over kzalloc(sizeof(struct pohmelfs_config)...)
#319: FILE: fs/pohmelfs/config.c:285:
+	c = kzalloc(sizeof(struct pohmelfs_config), GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#386: FILE: fs/pohmelfs/config.c:352:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: fs/pohmelfs/config.c:360:
+	dprintk("%s: idx: %u, strlen: %u, type: %u, keysize: %u, algo: %s.\n",
+			__func__, crypto->idx, crypto->strlen, crypto->type,

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#404: FILE: fs/pohmelfs/config.c:370:
+	switch (crypto->type) {
+		case POHMELFS_CRYPTO_HASH:
[...]
+		case POHMELFS_CRYPTO_CIPHER:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#412: FILE: fs/pohmelfs/config.c:378:
+			err = -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: fs/pohmelfs/config.c:394:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#429: FILE: fs/pohmelfs/config.c:395:
+	switch (msg->flags) {
+		case POHMELFS_FLAGS_ADD:
[...]
+		case POHMELFS_FLAGS_DEL:
[...]
+		case POHMELFS_FLAGS_SHOW:
[...]
+		case POHMELFS_FLAGS_CRYPTO:
[...]
+		default:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#443: FILE: fs/pohmelfs/config.c:409:
+			err = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#497: FILE: fs/pohmelfs/config.c:463:
+		if (g->hash_string)
+			kfree(g->hash_string);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#500: FILE: fs/pohmelfs/config.c:466:
+		if (g->cipher_string)
+			kfree(g->cipher_string);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#512: FILE: fs/pohmelfs/inode.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: fs/pohmelfs/inode.c:96:
+	dprintk("%s: cmd: %p, data: %p, len: %u, err: %u.\n",
+			__func__, cmd, data, cur_len, err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#630: FILE: fs/pohmelfs/inode.c:119:
+	printk("%s: completed ino: %llu, err: %d.\n", __func__, pi->ino, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: fs/pohmelfs/inode.c:124:
+static int pohmelfs_write_trans_complete(struct page **pages, unsigned int page_num,
+		void *private, int err)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#637: FILE: fs/pohmelfs/inode.c:126:
+	unsigned i;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: fs/pohmelfs/inode.c:129:
+	dprintk("%s: pages: %lu-%lu, page_num: %u, err: %d.\n",
+			__func__, pages[0]->index, pages[page_num-1]->index,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#640: FILE: fs/pohmelfs/inode.c:129:
+			__func__, pages[0]->index, pages[page_num-1]->index,
 			                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#671: FILE: fs/pohmelfs/inode.c:160:
+	ret = radix_tree_gang_lookup_tag(&mapping->page_tree,
+				(void **)&page, index, 1, PAGECACHE_TAG_DIRTY);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#735: FILE: fs/pohmelfs/inode.c:224:
+		trans->page_num = nr_pages = find_get_pages_tag(mapping, &index,

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#740: FILE: fs/pohmelfs/inode.c:229:
+		dprintk("%s: t: %p, nr_pages: %u, end: %lu, index: %lu, max: %u.\n",
+				__func__, trans, nr_pages, end, index, trans->page_num);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#744: FILE: fs/pohmelfs/inode.c:233:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#795: FILE: fs/pohmelfs/inode.c:284:
+				dprintk("%s: not clear for io page: %p, writeback: %d.\n",
+						__func__, page, PageWriteback(page));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#803: FILE: fs/pohmelfs/inode.c:292:
+#if 0

WARNING:LONG_LINE_STRING: line length of 115 exceeds 100 columns
#804: FILE: fs/pohmelfs/inode.c:293:
+			dprintk("%s: %u/%u added trans: %p, gen: %u, page: %p, [High: %d], size: %lu, idx: %lu.\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: fs/pohmelfs/inode.c:294:
+			dprintk("%s: %u/%u added trans: %p, gen: %u, page: %p, [High: %d], size: %lu, idx: %lu.\n",
+					__func__, i, trans->page_num, trans, trans->gen, page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#872: FILE: fs/pohmelfs/inode.c:361:
+			n = list_first_entry(&parent->sync_create_list,
+				struct pohmelfs_name, sync_create_entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#883: FILE: fs/pohmelfs/inode.c:372:
+		dprintk("%s: parent: %llu, ino: %llu, inode: %p.\n",
+				__func__, parent->ino, n->ino, inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#888: FILE: fs/pohmelfs/inode.c:377:
+			pohmelfs_meta_command(POHMELFS_I(inode),
+				NETFS_INODE_INFO, 0, NULL, NULL, 0);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#889: FILE: fs/pohmelfs/inode.c:378:
+			iput(inode);
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#902: FILE: fs/pohmelfs/inode.c:391:
+	dprintk("%s: parent: %llu, ino: %llu, name: '%s'.\n",
+			__func__, parent->ino, n->ino, n->data);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#904: FILE: fs/pohmelfs/inode.c:393:
+	return pohmelfs_meta_command_data(parent, parent->ino, NETFS_REMOVE, n->data, 0, NULL, NULL, 0);

WARNING:TYPO_SPELLING: 'childs' may be misspelled - perhaps 'children'?
#908: FILE: fs/pohmelfs/inode.c:397:
+ * Removes all childs, marked for deletion, on server.
                ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#940: FILE: fs/pohmelfs/inode.c:429:
+static int pohmelfs_write_inode_complete(struct page **pages, unsigned int page_num,
+		void *private, int err)

CHECK:BRACES: braces {} should be used on all arms of this statement
#946: FILE: fs/pohmelfs/inode.c:435:
+		if (err) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#949: FILE: fs/pohmelfs/inode.c:438:
+		} else

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1037: FILE: fs/pohmelfs/inode.c:526:
+		dprintk("%s: page: %p, locked: %d, uptodate: %d, error: %d, flags: %lx.\n",
 		                                   ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1038: FILE: fs/pohmelfs/inode.c:527:
+		dprintk("%s: page: %p, locked: %d, uptodate: %d, error: %d, flags: %lx.\n",
+				__func__, page, PageLocked(page), PageUptodate(page),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1058: FILE: fs/pohmelfs/inode.c:547:
+
+

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1062: FILE: fs/pohmelfs/inode.c:551:
+	dprintk("%s: page: %p, uptodate: %d, locked: %d, err: %d.\n",
 	                       ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1063: FILE: fs/pohmelfs/inode.c:552:
+	dprintk("%s: page: %p, uptodate: %d, locked: %d, err: %d.\n",
+			__func__, page, PageUptodate(page), PageLocked(page), err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1069: FILE: fs/pohmelfs/inode.c:558:
+static int pohmelfs_read_page_complete(struct page **pages, unsigned int page_num,
+		void *private, int err)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1072: FILE: fs/pohmelfs/inode.c:561:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1099: FILE: fs/pohmelfs/inode.c:588:
+	err = pohmelfs_data_lock(pi, page->index << PAGE_CACHE_SHIFT,
+			PAGE_SIZE, POHMELFS_READ_LOCK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1140: FILE: fs/pohmelfs/inode.c:629:
+	dprintk("%s: path: '%s', page: %p, ino: %llu, start: %llu, size: %lu.\n",
+			__func__, (char *)data, page, pi->ino, cmd->start, PAGE_CACHE_SIZE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1159: FILE: fs/pohmelfs/inode.c:648:
+	printk("%s: page: %p, start: %lu, size: %lu, err: %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1160: FILE: fs/pohmelfs/inode.c:649:
+	printk("%s: page: %p, start: %lu, size: %lu, err: %d.\n",
+		__func__, page, page->index << PAGE_CACHE_SHIFT, PAGE_CACHE_SIZE, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1170: FILE: fs/pohmelfs/inode.c:659:
+static int pohmelfs_write_begin(struct file *file, struct address_space *mapping,
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1170: FILE: fs/pohmelfs/inode.c:659:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1170: FILE: fs/pohmelfs/inode.c:659:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1176: FILE: fs/pohmelfs/inode.c:665:
+	unsigned start, end;

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1187: FILE: fs/pohmelfs/inode.c:676:
+	dprintk("%s: page: %p pos: %llu, len: %u, index: %lu, start: %u, end: %u, uptodate: %d.\n",
 	                                                                          ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1188: FILE: fs/pohmelfs/inode.c:677:
+	dprintk("%s: page: %p pos: %llu, len: %u, index: %lu, start: %u, end: %u, uptodate: %d.\n",
+			__func__, page,	pos, len, index, start, end, PageUptodate(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1229: FILE: fs/pohmelfs/inode.c:718:
+static int pohmelfs_write_end(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1229: FILE: fs/pohmelfs/inode.c:718:
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1229: FILE: fs/pohmelfs/inode.c:718:
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1235: FILE: fs/pohmelfs/inode.c:724:
+		unsigned from = pos & (PAGE_CACHE_SIZE - 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1247: FILE: fs/pohmelfs/inode.c:736:
+	dprintk("%s: page: %p [U: %d, D: %d, L: %d], pos: %llu, len: %u, copied: %u.\n",
+			__func__, page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1263: FILE: fs/pohmelfs/inode.c:752:
+static int pohmelfs_readpages_trans_complete(struct page **__pages, unsigned int page_num,
+		void *private, int err)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1270: FILE: fs/pohmelfs/inode.c:759:
+	pages = kzalloc(sizeof(void *) * page_num, GFP_NOIO);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1280: FILE: fs/pohmelfs/inode.c:769:
+	for (i=0; i<num; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1280: FILE: fs/pohmelfs/inode.c:769:
+	for (i=0; i<num; ++i) {
 	           ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1284: FILE: fs/pohmelfs/inode.c:773:
+			printk("%s: %u/%u: page: %p, index: %lu, uptodate: %d, locked: %d, err: %d.\n",
 			                                         ^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1284: FILE: fs/pohmelfs/inode.c:773:
+			printk("%s: %u/%u: page: %p, index: %lu, uptodate: %d, locked: %d, err: %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1285: FILE: fs/pohmelfs/inode.c:774:
+			printk("%s: %u/%u: page: %p, index: %lu, uptodate: %d, locked: %d, err: %d.\n",
+				__func__, i, num, page, page->index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1310: FILE: fs/pohmelfs/inode.c:799:
+	err = pohmelfs_data_lock(pi, first->index << PAGE_CACHE_SHIFT,
+			num * PAGE_SIZE, POHMELFS_READ_LOCK);

WARNING:SPLIT_STRING: quoted string split across lines
#1353: FILE: fs/pohmelfs/inode.c:842:
+	dprintk("%s: t: %p, gen: %u, path: '%s', path_len: %u, "
+			"start: %lu, num: %u.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1372: FILE: fs/pohmelfs/inode.c:861:
+static int pohmelfs_readpages(struct file *file, struct address_space *mapping,
+			struct list_head *pages, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1372: FILE: fs/pohmelfs/inode.c:861:
+			struct list_head *pages, unsigned nr_pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1384: FILE: fs/pohmelfs/inode.c:873:
+		if (!add_to_page_cache_lru(page, mapping,
+					page->index, GFP_KERNEL)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1385: FILE: fs/pohmelfs/inode.c:874:
+					page->index, GFP_KERNEL)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1394: FILE: fs/pohmelfs/inode.c:883:
+			dprintk("%s: added to lru page: %p, page_index: %lu, first_index: %lu.\n",
+					__func__, page, page->index, first->index);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'num > 500'
#1396: FILE: fs/pohmelfs/inode.c:885:
+			if (unlikely(first->index + num != page->index) || (num > 500)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1398: FILE: fs/pohmelfs/inode.c:887:
+				pohmelfs_send_readpages(POHMELFS_I(mapping->host),
+						first, num);

WARNING:TYPO_SPELLING: 'addres' may be misspelled - perhaps 'address'?
#1417: FILE: fs/pohmelfs/inode.c:906:
+ * Small addres space operations for POHMELFS.
          ^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1425: FILE: fs/pohmelfs/inode.c:914:
+^I.set_page_dirty ^I= __set_page_dirty_nobuffers,$

WARNING:TYPO_SPELLING: 'initilizes' may be misspelled - perhaps 'initializes'?
#1452: FILE: fs/pohmelfs/inode.c:941:
+ * ->alloc_inode() callback. Allocates inode and initilizes private data.
                                                  ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1497: FILE: fs/pohmelfs/inode.c:986:
+ssize_t pohmelfs_write(struct file *file, const char __user *buf,
+		size_t len, loff_t *ppos)

WARNING:STATIC_CONST: Move const after static - use 'static const struct file_operations '
#1540: FILE: fs/pohmelfs/inode.c:1029:
+const static struct file_operations pohmelfs_file_ops = {

WARNING:LONG_LINE_STRING: line length of 101 exceeds 100 columns
#1591: FILE: fs/pohmelfs/inode.c:1080:
+	dprintk("%s: ino: %llu, mode: %o -> %o, uid: %u -> %u, gid: %u -> %u, size: %llu -> %llu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1592: FILE: fs/pohmelfs/inode.c:1081:
+	dprintk("%s: ino: %llu, mode: %o -> %o, uid: %u -> %u, gid: %u -> %u, size: %llu -> %llu.\n",
+			__func__, pi->ino, inode->i_mode, attr->ia_mode,

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1593: FILE: fs/pohmelfs/inode.c:1082:
+			inode->i_uid, attr->ia_uid, inode->i_gid, attr->ia_gid, inode->i_size, attr->ia_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1626: FILE: fs/pohmelfs/inode.c:1115:
+static int pohmelfs_send_xattr_req(struct pohmelfs_inode *pi, u64 id, u64 start,
+		const char *name, const void *value, size_t attrsize, int command)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1635: FILE: fs/pohmelfs/inode.c:1124:
+	dprintk("%s: id: %llu, start: %llu, name: '%s', attrsize: %u, cmd: %d.\n",
+			__func__, id, start, name, attrsize, command);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1694: FILE: fs/pohmelfs/inode.c:1183:
+static int pohmelfs_setxattr(struct dentry *dentry, const char *name,
+		const void *value, size_t attrsize, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1704: FILE: fs/pohmelfs/inode.c:1193:
+static ssize_t pohmelfs_getxattr(struct dentry *dentry, const char *name,
+		void *value, size_t attrsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1718: FILE: fs/pohmelfs/inode.c:1207:
+	dprintk("%s: ino: %llu, name: '%s', size: %zu.\n",
+			__func__, pi->ino, name, attrsize);

WARNING:LONG_LINE_STRING: line length of 112 exceeds 100 columns
#1801: FILE: fs/pohmelfs/inode.c:1290:
+	dprintk("%s: inode: %p, num: %lu/%llu inode is regular: %d, dir: %d, link: %d, mode: %o, size: %llu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1802: FILE: fs/pohmelfs/inode.c:1291:
+	dprintk("%s: inode: %p, num: %lu/%llu inode is regular: %d, dir: %d, link: %d, mode: %o, size: %llu.\n",
+			__func__, inode, inode->i_ino, info->ino,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1806: FILE: fs/pohmelfs/inode.c:1295:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME_SEC;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1840: FILE: fs/pohmelfs/inode.c:1329:
+static struct pohmelfs_inode *pohmelfs_get_inode_from_list(struct pohmelfs_sb *psb,
+		struct list_head *head, unsigned int *count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1847: FILE: fs/pohmelfs/inode.c:1336:
+		pi = list_entry(head->next, struct pohmelfs_inode,
+					inode_entry);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1871: FILE: fs/pohmelfs/inode.c:1360:
+	dprintk("%s.\n", __func__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1873: FILE: fs/pohmelfs/inode.c:1362:
+	psb->trans_scan_timeout = psb->drop_scan_timeout = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1877: FILE: fs/pohmelfs/inode.c:1366:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1884: FILE: fs/pohmelfs/inode.c:1373:
+		dprintk("%s: ino: %llu, pi: %p, inode: %p, count: %u.\n",
+				__func__, pi->ino, pi, inode, count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1887: FILE: fs/pohmelfs/inode.c:1376:
+			printk("%s: ino: %llu, pi: %p, inode: %p, count: %u, i_count: %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1888: FILE: fs/pohmelfs/inode.c:1377:
+			printk("%s: ino: %llu, pi: %p, inode: %p, count: %u, i_count: %d.\n",
+					__func__, pi->ino, pi, inode, count,

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1895: FILE: fs/pohmelfs/inode.c:1384:
+			iput(&pi->vfs_inode);
 			^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1902: FILE: fs/pohmelfs/inode.c:1391:
+		dprintk("%s: ino: %llu, pi: %p, inode: %p, i_count: %u.\n",
+				__func__, pi->ino, pi, inode, atomic_read(&inode->i_count));

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1912: FILE: fs/pohmelfs/inode.c:1401:
+			iput(inode);
 			^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1926: FILE: fs/pohmelfs/inode.c:1415:
+	printk("%s: inodes allocated: %d, destroyed: %d.\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1927: FILE: fs/pohmelfs/inode.c:1416:
+	printk("%s: inodes allocated: %d, destroyed: %d.\n", __func__,
+		atomic_read(&inodes_allocated), atomic_read(&inodes_destroyed));

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1969: FILE: fs/pohmelfs/inode.c:1458:
+		seq_printf(seq, ",crypto_fail_unsupported");

WARNING:LINE_SPACING: Missing a blank line after declarations
#2020: FILE: fs/pohmelfs/inode.c:1509:
+		int token;
+		if (!*p)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2029: FILE: fs/pohmelfs/inode.c:1518:
+		switch (token) {
+			case pohmelfs_opt_idx:
[...]
+			case pohmelfs_opt_trans_scan_timeout:
[...]
+			case pohmelfs_opt_drop_scan_timeout:
[...]
+			case pohmelfs_opt_wait_on_page_timeout:
[...]
+			case pohmelfs_opt_mcache_timeout:
[...]
+			case pohmelfs_opt_trans_retries:
[...]
+			case pohmelfs_opt_crypto_thread_num:
[...]
+			case pohmelfs_opt_trans_max_pages:
[...]
+			case pohmelfs_opt_crypto_fail_unsupported:
[...]
+			default:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2087: FILE: fs/pohmelfs/inode.c:1576:
+	dprintk("%s: ino: %llu, pi: %p, inode: %p, count: %u.\n",
+			__func__, pi->ino, pi, &pi->vfs_inode, count);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2093: FILE: fs/pohmelfs/inode.c:1582:
+		iput(&pi->vfs_inode);
 		^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2103: FILE: fs/pohmelfs/inode.c:1592:
+	while ((pi = pohmelfs_get_inode_from_list(psb, &psb->drop_list, &count))) {
+		pohmelfs_put_inode_count(pi, count);
+	}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2132: FILE: fs/pohmelfs/inode.c:1621:
+		if (timeout && time_after(dst->send_time + timeout, jiffies)
+				&& dst->retries == 0)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2142: FILE: fs/pohmelfs/inode.c:1631:
+		if (timeout && (++dst->retries < psb->trans_retries)) {
+			err = netfs_trans_resend(t, psb);
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2185: FILE: fs/pohmelfs/inode.c:1674:
+int pohmelfs_meta_command_data(struct pohmelfs_inode *pi, u64 id, unsigned int cmd_op, char *addon,
+		unsigned int flags, netfs_trans_complete_t complete, void *priv, u64 start)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2197: FILE: fs/pohmelfs/inode.c:1686:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2199: FILE: fs/pohmelfs/inode.c:1688:
+	sz = path_len = pohmelfs_path_length(pi);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2283: FILE: fs/pohmelfs/inode.c:1772:
+int pohmelfs_meta_command(struct pohmelfs_inode *pi, unsigned int cmd_op, unsigned int flags,
+		netfs_trans_complete_t complete, void *priv, u64 start)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*psb)...) over kzalloc(sizeof(struct pohmelfs_sb)...)
#2299: FILE: fs/pohmelfs/inode.c:1788:
+	psb = kzalloc(sizeof(struct pohmelfs_sb), GFP_NOIO);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2325: FILE: fs/pohmelfs/inode.c:1814:
+^I$

CHECK:SPACING: No space is necessary after a cast
#2349: FILE: fs/pohmelfs/inode.c:1838:
+	err = pohmelfs_parse_options((char *) data, psb);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2369: FILE: fs/pohmelfs/inode.c:1858:
+	npi = pohmelfs_create_entry_local(psb, NULL, &str, 0, 0755|S_IFDIR);
 	                                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2382: FILE: fs/pohmelfs/inode.c:1871:
+^I$

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2392: FILE: fs/pohmelfs/inode.c:1881:
+	iput(root);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2412: FILE: fs/pohmelfs/inode.c:1901:
+static int pohmelfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2422: FILE: fs/pohmelfs/inode.c:1911:
+^I.kill_sb ^I= kill_anon_super,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2438: FILE: fs/pohmelfs/inode.c:1927:
+	pohmelfs_inode_cache = kmem_cache_create("pohmelfs_inode_cache",
+				sizeof(struct pohmelfs_inode),

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2439: FILE: fs/pohmelfs/inode.c:1928:
+				0, (SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD),
 				                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2492: FILE: fs/pohmelfs/inode.c:1981:
+        unregister_filesystem(&pohmel_fs_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2492: FILE: fs/pohmelfs/inode.c:1981:
+        unregister_filesystem(&pohmel_fs_type);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2512: FILE: fs/pohmelfs/dir.c:1:
+/*

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2562: FILE: fs/pohmelfs/dir.c:51:
+
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp->hash == hash'
#2572: FILE: fs/pohmelfs/dir.c:61:
+	if (tmp && (tmp->hash == hash))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2595: FILE: fs/pohmelfs/dir.c:84:
+static struct pohmelfs_name *pohmelfs_insert_hash(struct pohmelfs_inode *pi,
+		struct pohmelfs_name *new)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2607: FILE: fs/pohmelfs/dir.c:96:
+		if (cmp < 0)
[...]
+		else if (cmp > 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2611: FILE: fs/pohmelfs/dir.c:100:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2618: FILE: fs/pohmelfs/dir.c:107:
+		printk("%s: exist: ino: %llu, hash: %x, len: %u, data: '%s', new: ino: %llu, hash: %x, len: %u, data: '%s'.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2619: FILE: fs/pohmelfs/dir.c:108:
+		printk("%s: exist: ino: %llu, hash: %x, len: %u, data: '%s', new: ino: %llu, hash: %x, len: %u, data: '%s'.\n",
+				__func__, ret->ino, ret->hash, ret->len, ret->data,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*n)...) over kzalloc(sizeof(struct pohmelfs_name)...)
#2685: FILE: fs/pohmelfs/dir.c:174:
+	n = kzalloc(sizeof(struct pohmelfs_name) + len, GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2692: FILE: fs/pohmelfs/dir.c:181:
+	n->data = (char *)(n+1);
 	                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2701: FILE: fs/pohmelfs/dir.c:190:
+static int pohmelfs_add_dir(struct pohmelfs_sb *psb, struct pohmelfs_inode *parent,
+		struct pohmelfs_inode *npi, struct qstr *str, unsigned int mode, int link)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2718: FILE: fs/pohmelfs/dir.c:207:
+	if (!(str->len == 1 && str->name[0] == '.') &&
+			!(str->len == 2 && str->name[0] == '.' && str->name[1] == '.')) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2757: FILE: fs/pohmelfs/dir.c:246:
+struct pohmelfs_inode *pohmelfs_new_inode(struct pohmelfs_sb *psb,
+		struct pohmelfs_inode *parent, struct qstr *str,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2765: FILE: fs/pohmelfs/dir.c:254:
+	dprintk("%s: creating inode: parent: %llu, ino: %llu, str: %p.\n",
+			__func__, (parent)?parent->ino:0, info->ino, str);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2765: FILE: fs/pohmelfs/dir.c:254:
+			__func__, (parent)?parent->ino:0, info->ino, str);
 			                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2765: FILE: fs/pohmelfs/dir.c:254:
+			__func__, (parent)?parent->ino:0, info->ino, str);
 			                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2778: FILE: fs/pohmelfs/dir.c:267:
+		dprintk("%s: filling VFS inode: %lu/%llu.\n",
+				__func__, new->i_ino, info->ino);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2796: FILE: fs/pohmelfs/dir.c:285:
+			err = pohmelfs_add_dir(psb, npi, (parent)?parent:npi, &s,
 			                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2796: FILE: fs/pohmelfs/dir.c:285:
+			err = pohmelfs_add_dir(psb, npi, (parent)?parent:npi, &s,
 			                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2797: FILE: fs/pohmelfs/dir.c:286:
+			err = pohmelfs_add_dir(psb, npi, (parent)?parent:npi, &s,
+					(parent)?parent->vfs_inode.i_mode:npi->vfs_inode.i_mode, 0);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2797: FILE: fs/pohmelfs/dir.c:286:
+					(parent)?parent->vfs_inode.i_mode:npi->vfs_inode.i_mode, 0);
 					        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2797: FILE: fs/pohmelfs/dir.c:286:
+					(parent)?parent->vfs_inode.i_mode:npi->vfs_inode.i_mode, 0);
 					                                 ^

WARNING:LONG_LINE_STRING: line length of 107 exceeds 100 columns
#2807: FILE: fs/pohmelfs/dir.c:296:
+			dprintk("%s: %s inserted name: '%s', new_offset: %llu, ino: %llu, parent: %llu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2808: FILE: fs/pohmelfs/dir.c:297:
+			dprintk("%s: %s inserted name: '%s', new_offset: %llu, ino: %llu, parent: %llu.\n",
+					__func__, (err)?"unsuccessfully":"successfully",

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2808: FILE: fs/pohmelfs/dir.c:297:
+					__func__, (err)?"unsuccessfully":"successfully",
 					               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2808: FILE: fs/pohmelfs/dir.c:297:
+					__func__, (err)?"unsuccessfully":"successfully",
 					                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2830: FILE: fs/pohmelfs/dir.c:319:
+	printk("%s: putting inode: %p, npi: %p, error: %d.\n", __func__, new, npi, err);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2831: FILE: fs/pohmelfs/dir.c:320:
+	iput(new);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2837: FILE: fs/pohmelfs/dir.c:326:
+static int pohmelfs_remote_sync_complete(struct page **pages, unsigned int page_num,
+		void *private, int err)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2865: FILE: fs/pohmelfs/dir.c:354:
+	dprintk("%s: dir: %llu, state: %lx: created: %d, remote_synced: %d.\n",
+			__func__, pi->ino, pi->state, test_bit(NETFS_INODE_CREATED, &pi->state),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2880: FILE: fs/pohmelfs/dir.c:369:
+	err = pohmelfs_meta_command(pi, NETFS_READDIR, NETFS_TRANS_SINGLE_DST,
+			pohmelfs_remote_sync_complete, pi, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2886: FILE: fs/pohmelfs/dir.c:375:
+	ret = wait_event_interruptible_timeout(psb->wait,
+			test_bit(NETFS_INODE_REMOTE_SYNCED, &pi->state) || pi->error, ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2924: FILE: fs/pohmelfs/dir.c:413:
+	dprintk("%s: parent: %llu, fpos: %llu, hash: %08lx.\n",
+			__func__, pi->ino, (u64)file->f_pos,

WARNING:SPLIT_STRING: quoted string split across lines
#2945: FILE: fs/pohmelfs/dir.c:434:
+		dprintk("%s: offset: %llu, parent ino: %llu, name: '%s', len: %u, ino: %llu, "
+				"mode: %o/%o, fpos: %llu, hash: %08x.\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rb_node == &n->hash_node'
#2964: FILE: fs/pohmelfs/dir.c:453:
+		if (!rb_node || (rb_node == &n->hash_node)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2994: FILE: fs/pohmelfs/dir.c:483:
+static int pohmelfs_lookup_single(struct pohmelfs_inode *parent,
+		struct qstr *str, u64 ino)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3002: FILE: fs/pohmelfs/dir.c:491:
+	err = pohmelfs_meta_command_data(parent, parent->ino, NETFS_LOOKUP,
+			(char *)str->name, NETFS_TRANS_SINGLE_DST, NULL, NULL, ino);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3008: FILE: fs/pohmelfs/dir.c:497:
+	ret = wait_event_interruptible_timeout(psb->wait,
+			!test_bit(NETFS_COMMAND_PENDING, &parent->state), ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3022: FILE: fs/pohmelfs/dir.c:511:
+	printk("%s: failed: parent: %llu, ino: %llu, name: '%s', err: %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3023: FILE: fs/pohmelfs/dir.c:512:
+	printk("%s: failed: parent: %llu, ino: %llu, name: '%s', err: %d.\n",
+			__func__, parent->ino, ino, str->name, err);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3036: FILE: fs/pohmelfs/dir.c:525:
+struct dentry *pohmelfs_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)
                                                                                            ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3061: FILE: fs/pohmelfs/dir.c:550:
+	dprintk("%s: 1 ino: %lu, inode: %p, name: '%s', hash: %x, parent_state: %lx.\n",
+			__func__, ino, inode, str.name, str.hash, parent->state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3070: FILE: fs/pohmelfs/dir.c:559:
+	dprintk("%s: dir: %p, dir_ino: %llu, name: '%s', len: %u, dir_state: %lx, ino: %lu.\n",
+			__func__, dir, parent->ino,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3095: FILE: fs/pohmelfs/dir.c:584:
+		printk("%s: second lookup ino: %lu, inode: %p, name: '%s', hash: %x.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3096: FILE: fs/pohmelfs/dir.c:585:
+		printk("%s: second lookup ino: %lu, inode: %p, name: '%s', hash: %x.\n",
+				__func__, ino, inode, str.name, str.hash);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3098: FILE: fs/pohmelfs/dir.c:587:
+			printk("%s: No inode for ino: %lu, name: '%s', hash: %x.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3099: FILE: fs/pohmelfs/dir.c:588:
+			printk("%s: No inode for ino: %lu, name: '%s', hash: %x.\n",
+				__func__, ino, str.name, str.hash);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3104: FILE: fs/pohmelfs/dir.c:593:
+		printk("%s: No inode number : name: '%s', hash: %x.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3105: FILE: fs/pohmelfs/dir.c:594:
+		printk("%s: No inode number : name: '%s', hash: %x.\n",
+			__func__, str.name, str.hash);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3116: FILE: fs/pohmelfs/dir.c:605:
+struct pohmelfs_inode *pohmelfs_create_entry_local(struct pohmelfs_sb *psb,
+	struct pohmelfs_inode *parent, struct qstr *str, u64 start, int mode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3123: FILE: fs/pohmelfs/dir.c:612:
+	dprintk("%s: name: '%s', mode: %o, start: %llu.\n",
+			__func__, str->name, mode, start);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#3131: FILE: fs/pohmelfs/dir.c:620:
+	info.nlink = S_ISDIR(mode)?2:1;
 	                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#3131: FILE: fs/pohmelfs/dir.c:620:
+	info.nlink = S_ISDIR(mode)?2:1;
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3180: FILE: fs/pohmelfs/dir.c:669:
+	dprintk("%s: parent: %llu, inode: %llu, name: '%s', parent_nlink: %d, nlink: %d.\n",
+			__func__, parent->ino, npi->ino, dentry->d_name.name,

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#3181: FILE: fs/pohmelfs/dir.c:670:
+			(signed)dir->i_nlink, (signed)npi->vfs_inode.i_nlink);

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#3181: FILE: fs/pohmelfs/dir.c:670:
+			(signed)dir->i_nlink, (signed)npi->vfs_inode.i_nlink);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3190: FILE: fs/pohmelfs/dir.c:679:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3190: FILE: fs/pohmelfs/dir.c:679:
+static int pohmelfs_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3231: FILE: fs/pohmelfs/dir.c:720:
+	dprintk("%s: dir_ino: %llu, inode: %llu, name: '%s', nlink: %d.\n",
+			__func__, parent->ino, pi->ino,

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#3232: FILE: fs/pohmelfs/dir.c:721:
+			str.name, (signed)inode->i_nlink);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3238: FILE: fs/pohmelfs/dir.c:727:
+		if (test_bit(NETFS_INODE_CREATED, &pi->state)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3241: FILE: fs/pohmelfs/dir.c:730:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3280: FILE: fs/pohmelfs/dir.c:769:
+	dprintk("%s: parent: %llu, inode: %llu, name: '%s', parent_nlink: %d, nlink: %d.\n",
+			__func__, POHMELFS_I(dir)->ino, POHMELFS_I(inode)->ino,

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#3281: FILE: fs/pohmelfs/dir.c:770:
+			dentry->d_name.name, (signed)dir->i_nlink, (signed)inode->i_nlink);

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#3281: FILE: fs/pohmelfs/dir.c:770:
+			dentry->d_name.name, (signed)dir->i_nlink, (signed)inode->i_nlink);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3298: FILE: fs/pohmelfs/dir.c:787:
+static int pohmelfs_create_link(struct pohmelfs_inode *parent, struct qstr *obj,
+		struct pohmelfs_inode *target, struct qstr *tstr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3328: FILE: fs/pohmelfs/dir.c:817:
+^I$

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#3391: FILE: fs/pohmelfs/dir.c:880:
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3391: FILE: fs/pohmelfs/dir.c:880:
+	dprintk("%s: parent: %llu, obj: '%s', target_inode: %llu, target_str: '%s', full: '%s'.\n",
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#3391: FILE: fs/pohmelfs/dir.c:880:
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,
 			                                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#3391: FILE: fs/pohmelfs/dir.c:880:
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,
 			                                                      ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#3391: FILE: fs/pohmelfs/dir.c:880:
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,
 			                                                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#3391: FILE: fs/pohmelfs/dir.c:880:
+			__func__, parent->ino, obj->name, (target)?target->ino:0, (tstr)?tstr->name:NULL,
 			                                                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3399: FILE: fs/pohmelfs/dir.c:888:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3419: FILE: fs/pohmelfs/dir.c:908:
+static int pohmelfs_link(struct dentry *old_dentry, struct inode *dir,
+	struct dentry *dentry)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRWXG | S_IRWXO' are not preferred. Consider using octal permissions '0777'.
#3455: FILE: fs/pohmelfs/dir.c:944:
+	err = pohmelfs_create_entry(dir, dentry, 0, S_IFLNK | S_IRWXU | S_IRWXG | S_IRWXO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3468: FILE: fs/pohmelfs/dir.c:957:
+	iput(inode);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3474: FILE: fs/pohmelfs/dir.c:963:
+static int pohmelfs_send_rename(struct pohmelfs_inode *pi, struct pohmelfs_inode *parent,
+		struct qstr *str)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3535: FILE: fs/pohmelfs/dir.c:1024:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3547: FILE: fs/pohmelfs/dir.c:1036:
+static int pohmelfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+			struct inode *new_dir, struct dentry *new_dentry)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3556: FILE: fs/pohmelfs/dir.c:1045:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3582: FILE: fs/pohmelfs/dir.c:1071:
+		if (S_ISDIR(old_inode->i_mode) &&
+				new_parent->total_len <= 3)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3589: FILE: fs/pohmelfs/dir.c:1078:
+	dprintk("%s: ino: %llu, parent: %llu, name: '%s' -> parent: %llu, name: '%s'.\n",
+			__func__, old->ino, old_parent->ino, old_dentry->d_name.name,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3612: FILE: fs/pohmelfs/dir.c:1101:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3644: FILE: fs/pohmelfs/dir.c:1133:
+^I.lookup ^I= pohmelfs_lookup,$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000202413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 75 warnings, 129 checks, 3600 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000202413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
