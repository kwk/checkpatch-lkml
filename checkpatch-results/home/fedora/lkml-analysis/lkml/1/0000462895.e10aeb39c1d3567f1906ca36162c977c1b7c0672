WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
Of course, to add a new format qualifier, we lose out on checking the format

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: include/linux/kernel.h:110:
+extern int sprintf(char * buf, const char * fmt, ...);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: include/linux/kernel.h:110:
+extern int sprintf(char * buf, const char * fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: include/linux/kernel.h:110:
+extern int sprintf(char * buf, const char * fmt, ...);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: include/linux/kernel.h:111:
+extern int vsprintf(char *buf, const char *, va_list);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#69: FILE: include/linux/kernel.h:111:
+extern int vsprintf(char *buf, const char *, va_list);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'va_list' should also have an identifier name
#69: FILE: include/linux/kernel.h:111:
+extern int vsprintf(char *buf, const char *, va_list);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#70: FILE: include/linux/kernel.h:112:
+extern int snprintf(char * buf, size_t size, const char * fmt, ...);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#70: FILE: include/linux/kernel.h:112:
+extern int snprintf(char * buf, size_t size, const char * fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/kernel.h:112:
+extern int snprintf(char * buf, size_t size, const char * fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/kernel.h:113:
+extern int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#72: FILE: include/linux/kernel.h:114:
+extern int scnprintf(char * buf, size_t size, const char * fmt, ...);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#72: FILE: include/linux/kernel.h:114:
+extern int scnprintf(char * buf, size_t size, const char * fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/kernel.h:114:
+extern int scnprintf(char * buf, size_t size, const char * fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/kernel.h:115:
+extern int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/kernel.h:116:
+extern char *kasprintf(gfp_t gfp, const char *fmt, ...);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#76: FILE: include/linux/kernel.h:118:
+extern int sscanf(const char *, const char *, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/kernel.h:118:
+extern int sscanf(const char *, const char *, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#76: FILE: include/linux/kernel.h:118:
+extern int sscanf(const char *, const char *, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#76: FILE: include/linux/kernel.h:118:
+extern int sscanf(const char *, const char *, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: include/linux/kernel.h:119:
+extern int vsscanf(const char *, const char *, va_list);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#77: FILE: include/linux/kernel.h:119:
+extern int vsscanf(const char *, const char *, va_list);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#77: FILE: include/linux/kernel.h:119:
+extern int vsscanf(const char *, const char *, va_list);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'va_list' should also have an identifier name
#77: FILE: include/linux/kernel.h:119:
+extern int vsscanf(const char *, const char *, va_list);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: include/linux/kernel.h:135:
+asmlinkage int printk(const char * fmt, ...);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#90: FILE: include/linux/kernel.h:135:
+asmlinkage int printk(const char * fmt, ...);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#98: FILE: include/linux/kernel.h:139:
+static inline int printk(const char *s, ...);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000462895.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 11 warnings, 9 checks, 72 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000462895.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
