WARNING:TYPO_SPELLING: 'submition' may be misspelled - perhaps 'submission'?
#38: 
raised by Pavel Machek since previous LKML submition.
                                           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#82: FILE: MAINTAINERS:2252:
+M: 	anas.nashif@intel.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#82: FILE: MAINTAINERS:2252:
+P:	Anas Nashif
+M: 	anas.nashif@intel.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#84: FILE: MAINTAINERS:2254:
+P:	Marcin Obara
+M:	marcin.obara@intel.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#86: FILE: MAINTAINERS:2256:
+W:	http://www.openamt.org/
+L:	openamt-devel@lists.sourceforge.net

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#117: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#126: FILE: drivers/char/heci/Kconfig:5:
+config INTEL_MEI
+       tristate "Intel Management Engine Interface (MEI) Support (EXPERIMENTAL)"
+       depends on EXPERIMENTAL
+       ---help---
+         The Intel Management Engine Interface (Intel MEI) driver allows
+         applications to access the Active Management Technology 
+         firmware and other Management Engine sub-systems.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: drivers/char/heci/Kconfig:10:
+         applications to access the Active Management Technology $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#153: FILE: drivers/char/heci/heci.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'MERCHANTIBILITY' may be misspelled - perhaps 'MERCHANTABILITY'?
#181: FILE: drivers/char/heci/heci.h:29:
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
                                          ^^^^^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: drivers/char/heci/heci.h:141:
+int heci_ioctl_bypass_wd(struct iamt_heci_device *dev, int if_num,
+		  struct heci_message_data k_msg,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#305: FILE: drivers/char/heci/heci.h:153:
+struct heci_cb_private *find_pthi_read_list_entry(

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#325: FILE: drivers/char/heci/heci.h:173:
+	return ((fe1->host_client_id == fe2->host_client_id)
+		&& (fe1->me_client_id == fe2->me_client_id));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#335: FILE: drivers/char/heci/heci_data_structures.h:1:
+/*

WARNING:TYPO_SPELLING: 'MERCHANTIBILITY' may be misspelled - perhaps 'MERCHANTABILITY'?
#363: FILE: drivers/char/heci/heci_data_structures.h:29:
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
                                          ^^^^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#408: FILE: drivers/char/heci/heci_data_structures.h:74:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#423: FILE: drivers/char/heci/heci_data_structures.h:89:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#442: FILE: drivers/char/heci/heci_data_structures.h:108:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#445: FILE: drivers/char/heci/heci_data_structures.h:111:
+ *  - host read only access to ME_CBD */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#474: FILE: drivers/char/heci/heci_data_structures.h:140:
+#define DBG(format, arg...) do { \
+	if (heci_debug) { \
+		if (heci_dev) \
+			dev_info(heci_dev, "%s: " format, __func__, ## arg); \
+		else \
+			printk(KERN_INFO "heci: %s: " format, \
+				 __func__, ## arg); \
+	} \
+} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#479: FILE: drivers/char/heci/heci_data_structures.h:145:
+			printk(KERN_INFO "heci: %s: " format, \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#484: FILE: drivers/char/heci/heci_data_structures.h:150:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#496: FILE: drivers/char/heci/heci_data_structures.h:162:
+#define HECI_WD_STATE_INDEPENDENCE_MSG_SENT       (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#558: FILE: drivers/char/heci/heci_data_structures.h:224:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#611: FILE: drivers/char/heci/heci_data_structures.h:277:
+} __attribute__((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#613: FILE: drivers/char/heci/heci_data_structures.h:279:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#617: FILE: drivers/char/heci/heci_data_structures.h:283:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#628: FILE: drivers/char/heci/heci_data_structures.h:294:
+} __attribute__((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#630: FILE: drivers/char/heci/heci_data_structures.h:296:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#634: FILE: drivers/char/heci/heci_data_structures.h:300:
+} __attribute__((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#636: FILE: drivers/char/heci/heci_data_structures.h:302:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#640: FILE: drivers/char/heci/heci_data_structures.h:306:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#645: FILE: drivers/char/heci/heci_data_structures.h:311:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#651: FILE: drivers/char/heci/heci_data_structures.h:317:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#657: FILE: drivers/char/heci/heci_data_structures.h:323:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#663: FILE: drivers/char/heci/heci_data_structures.h:329:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#668: FILE: drivers/char/heci/heci_data_structures.h:334:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#674: FILE: drivers/char/heci/heci_data_structures.h:340:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#679: FILE: drivers/char/heci/heci_data_structures.h:345:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#685: FILE: drivers/char/heci/heci_data_structures.h:351:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#694: FILE: drivers/char/heci/heci_data_structures.h:360:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#700: FILE: drivers/char/heci/heci_data_structures.h:366:
+} __attribute__((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#702: FILE: drivers/char/heci/heci_data_structures.h:368:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#709: FILE: drivers/char/heci/heci_data_structures.h:375:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#716: FILE: drivers/char/heci/heci_data_structures.h:382:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#723: FILE: drivers/char/heci/heci_data_structures.h:389:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#730: FILE: drivers/char/heci/heci_data_structures.h:396:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#737: FILE: drivers/char/heci/heci_data_structures.h:403:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#743: FILE: drivers/char/heci/heci_data_structures.h:409:
+} __attribute__((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#819: FILE: drivers/char/heci/heci_data_structures.h:485:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#852: FILE: drivers/char/heci/heci_data_structures.h:518:
+static inline __u32 read_heci_register(struct iamt_heci_device *dev,
+					unsigned long offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: drivers/char/heci/heci_data_structures.h:531:
+static inline void write_heci_register(struct iamt_heci_device *dev,
+					unsigned long offset,  __u32 value)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#877: FILE: drivers/char/heci/heci_init.c:1:
+/*

WARNING:TYPO_SPELLING: 'MERCHANTIBILITY' may be misspelled - perhaps 'MERCHANTABILITY'?
#905: FILE: drivers/char/heci/heci_init.c:29:
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
                                          ^^^^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#932: FILE: drivers/char/heci/heci_init.c:56:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#946: FILE: drivers/char/heci/heci_init.c:70:
+};
+const struct guid heci_wd_guid = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#950: FILE: drivers/char/heci/heci_init.c:74:
+};
+const struct guid heci_pthi_guid = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#955: FILE: drivers/char/heci/heci_init.c:79:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#968: FILE: drivers/char/heci/heci_init.c:92:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1005: FILE: drivers/char/heci/heci_init.c:129:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1013: FILE: drivers/char/heci/heci_init.c:137:
+void heci_flush_list(struct io_heci_list *list,
+		struct heci_file_private *file_ext)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev)...) over kzalloc(sizeof(struct iamt_heci_device)...)
#1071: FILE: drivers/char/heci/heci_init.c:195:
+	dev = kzalloc(sizeof(struct iamt_heci_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1100: FILE: drivers/char/heci/heci_init.c:224:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1102: FILE: drivers/char/heci/heci_init.c:226:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1104: FILE: drivers/char/heci/heci_init.c:228:
+static int heci_wait_event_int_timeout(struct iamt_heci_device *dev,
+		long timeout)

WARNING:TYPO_SPELLING: 'interupts' may be misspelled - perhaps 'interrupts'?
#1127: FILE: drivers/char/heci/heci_init.c:251:
+		/* acknowledge interrupt and stop interupts */
 		                                  ^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1145: FILE: drivers/char/heci/heci_init.c:269:
+		DBG("wait_event_interruptible_timeout failed"
+		    "on wait for ME to turn on ME_RDY.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#1145: FILE: drivers/char/heci/heci_init.c:269:
+		DBG("wait_event_interruptible_timeout failed"
+		    "on wait for ME to turn on ME_RDY.\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1147: FILE: drivers/char/heci/heci_init.c:271:
+		return -ENODEV;
+	} else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1149: FILE: drivers/char/heci/heci_init.c:273:
+		if (!(((dev->host_hw_state & H_RDY) == H_RDY)
+		      && ((dev->me_hw_state & ME_RDY_HRA) == ME_RDY_HRA))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1161: FILE: drivers/char/heci/heci_init.c:285:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1170: FILE: drivers/char/heci/heci_init.c:294:
+	printk(KERN_INFO "heci: link layer has been established.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1189: FILE: drivers/char/heci/heci_init.c:313:
+	BUG_ON((dev->host_hw_state & H_RST) != H_RST);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1190: FILE: drivers/char/heci/heci_init.c:314:
+	BUG_ON((dev->host_hw_state & H_RDY) != 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev->reinit_tsk"
#1218: FILE: drivers/char/heci/heci_init.c:342:
+	if (dev->reinit_tsk != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->heci_state != HECI_DISABLED'
#1241: FILE: drivers/char/heci/heci_init.c:365:
+		if ((dev->heci_state != HECI_DISABLED) &&
+		    (dev->heci_state != HECI_POWER_DOWN))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->heci_state != HECI_POWER_DOWN'
#1241: FILE: drivers/char/heci/heci_init.c:365:
+		if ((dev->heci_state != HECI_DISABLED) &&
+		    (dev->heci_state != HECI_POWER_DOWN))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1246: FILE: drivers/char/heci/heci_init.c:370:
+		list_for_each_entry_safe(file_pos,
+				file_next, &dev->file_list, link) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1255: FILE: drivers/char/heci/heci_init.c:379:
+		heci_remove_client_from_file_list(dev,
+				dev->wd_file_ext.host_client_id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1258: FILE: drivers/char/heci/heci_init.c:382:
+		heci_remove_client_from_file_list(dev,
+				dev->iamthif_file_ext.host_client_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1278: FILE: drivers/char/heci/heci_init.c:402:
+		printk(KERN_WARNING "heci: unexpected reset.\n");

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1283: FILE: drivers/char/heci/heci_init.c:407:
+		    waitqueue_active(&file_pos->rx_wait)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1284: FILE: drivers/char/heci/heci_init.c:408:
+			printk(KERN_INFO "heci: Waking up client!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1290: FILE: drivers/char/heci/heci_init.c:414:
+	if (dev->write_list.status == 0 &&
+		!list_empty(&dev->write_list.heci_cb.cb_list)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1292: FILE: drivers/char/heci/heci_init.c:416:
+		list_for_each_entry_safe(priv_cb_pos, priv_cb_next,
+				&dev->write_list.heci_cb.cb_list, cb_list) {

CHECK:SPACING: No space is necessary after a cast
#1374: FILE: drivers/char/heci/heci_init.c:498:
+	struct iamt_heci_device *dev = (struct iamt_heci_device *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev->reinit_tsk"
#1377: FILE: drivers/char/heci/heci_init.c:501:
+	if (dev->reinit_tsk != NULL) {

CHECK:SPACING: No space is necessary after a cast
#1412: FILE: drivers/char/heci/heci_init.c:536:
+	heci_hdr = (struct heci_msg_hdr *) &dev->wr_msg_buf[0];

CHECK:SPACING: No space is necessary after a cast
#1420: FILE: drivers/char/heci/heci_init.c:544:
+	    (struct hbm_host_version_request *) &dev->wr_msg_buf[1];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1427: FILE: drivers/char/heci/heci_init.c:551:
+	if (!heci_write_message(dev, heci_hdr,
+				       (unsigned char *) (host_start_req),

CHECK:SPACING: No space is necessary after a cast
#1427: FILE: drivers/char/heci/heci_init.c:551:
+				       (unsigned char *) (host_start_req),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->version.major_version != HBM_MAJOR_VERSION'
#1441: FILE: drivers/char/heci/heci_init.c:565:
+	if ((dev->version.major_version != HBM_MAJOR_VERSION) ||
+	    (dev->version.minor_version != HBM_MINOR_VERSION)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->version.minor_version != HBM_MINOR_VERSION'
#1441: FILE: drivers/char/heci/heci_init.c:565:
+	if ((dev->version.major_version != HBM_MAJOR_VERSION) ||
+	    (dev->version.minor_version != HBM_MINOR_VERSION)) {

CHECK:SPACING: No space is necessary after a cast
#1451: FILE: drivers/char/heci/heci_init.c:575:
+		    (struct hbm_host_stop_request *) &dev->wr_msg_buf[1];

CHECK:SPACING: No space is necessary after a cast
#1457: FILE: drivers/char/heci/heci_init.c:581:
+				   (unsigned char *) (host_stop_req),

CHECK:SPACING: No space is necessary after a cast
#1481: FILE: drivers/char/heci/heci_init.c:605:
+	heci_hdr = (struct heci_msg_hdr *) &dev->wr_msg_buf[0];

CHECK:SPACING: No space is necessary after a cast
#1489: FILE: drivers/char/heci/heci_init.c:613:
+	host_enum_req = (struct hbm_host_enum_request *) &dev->wr_msg_buf[1];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1493: FILE: drivers/char/heci/heci_init.c:617:
+	if (!heci_write_message(dev, heci_hdr,
+			       (unsigned char *) (host_enum_req),

CHECK:SPACING: No space is necessary after a cast
#1493: FILE: drivers/char/heci/heci_init.c:617:
+			       (unsigned char *) (host_enum_req),

WARNING:SPLIT_STRING: quoted string split across lines
#1503: FILE: drivers/char/heci/heci_init.c:627:
+		DBG("wait_event_interruptible_timeout failed "
+				"on enumeration clients response message.\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1515: FILE: drivers/char/heci/heci_init.c:639:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#1538: FILE: drivers/char/heci/heci_init.c:662:
+	heci_hdr = (struct heci_msg_hdr *) &dev->wr_msg_buf[0];

CHECK:SPACING: No space is necessary after a cast
#1545: FILE: drivers/char/heci/heci_init.c:669:
+	host_cli_req = (struct hbm_props_request *) &dev->wr_msg_buf[1];

CHECK:SPACING: No space is necessary after a cast
#1550: FILE: drivers/char/heci/heci_init.c:674:
+				(unsigned char *) (host_cli_req),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1590: FILE: drivers/char/heci/heci_init.c:714:
+	clients = kcalloc(dev->num_heci_me_clients,
+			sizeof(struct heci_me_client), GFP_KERNEL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev == NULL'
#1661: FILE: drivers/char/heci/heci_init.c:785:
+	if ((dev == NULL) || (priv == NULL) || (cguid == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priv == NULL'
#1661: FILE: drivers/char/heci/heci_init.c:785:
+	if ((dev == NULL) || (priv == NULL) || (cguid == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cguid == NULL'
#1661: FILE: drivers/char/heci/heci_init.c:785:
+	if ((dev == NULL) || (priv == NULL) || (cguid == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#1661: FILE: drivers/char/heci/heci_init.c:785:
+	if ((dev == NULL) || (priv == NULL) || (cguid == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv"
#1661: FILE: drivers/char/heci/heci_init.c:785:
+	if ((dev == NULL) || (priv == NULL) || (cguid == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cguid"
#1661: FILE: drivers/char/heci/heci_init.c:785:
+	if ((dev == NULL) || (priv == NULL) || (cguid == NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1694: FILE: drivers/char/heci/heci_init.c:818:
+		if (memcmp(&heci_asf_guid,
+				&dev->me_clients[i].props.protocol_name,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev == NULL'
#1720: FILE: drivers/char/heci/heci_init.c:844:
+	if ((dev == NULL) || (priv == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priv == NULL'
#1720: FILE: drivers/char/heci/heci_init.c:844:
+	if ((dev == NULL) || (priv == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#1720: FILE: drivers/char/heci/heci_init.c:844:
+	if ((dev == NULL) || (priv == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv"
#1720: FILE: drivers/char/heci/heci_init.c:844:
+	if ((dev == NULL) || (priv == NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1734: FILE: drivers/char/heci/heci_init.c:858:
+	err = wait_event_timeout(dev->wait_recvd_msg,
+	    (HECI_FILE_CONNECTED == priv->state ||

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1734: FILE: drivers/char/heci/heci_init.c:858:
+	    (HECI_FILE_CONNECTED == priv->state ||

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1735: FILE: drivers/char/heci/heci_init.c:859:
+	     HECI_FILE_DISCONNECTED == priv->state),

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1737: FILE: drivers/char/heci/heci_init.c:861:
+	if (HECI_FILE_CONNECTED != priv->state) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1785: FILE: drivers/char/heci/heci_init.c:909:
+	if (HECI_FILE_CONNECTING == dev->wd_file_ext.state) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1785: FILE: drivers/char/heci/heci_init.c:909:
+	if (HECI_FILE_CONNECTING == dev->wd_file_ext.state) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1794: FILE: drivers/char/heci/heci_init.c:918:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1797: FILE: drivers/char/heci/heci_init.c:921:
+
+

CHECK:SPACING: No space is necessary after a cast
#1800: FILE: drivers/char/heci/heci_init.c:924:
+	dev->wd_timer.data = (unsigned long) dev;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1804: FILE: drivers/char/heci/heci_init.c:928:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1822: FILE: drivers/char/heci/heci_init.c:946:
+	i = heci_find_me_client(dev, &dev->iamthif_file_ext,
+			    &heci_pthi_guid, HECI_IAMTHIF_HOST_CLIENT_ID);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1829: FILE: drivers/char/heci/heci_init.c:953:
+	BUG_ON(dev->me_clients[i].props.max_msg_length != IAMTHIF_MTU);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*priv)...) over kmalloc(sizeof(struct heci_file_private)...)
#1848: FILE: drivers/char/heci/heci_init.c:972:
+	priv = kmalloc(sizeof(struct heci_file_private), GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1857: FILE: drivers/char/heci/heci_init.c:981:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1868: FILE: drivers/char/heci/heci_init.c:992:
+int heci_disconnect_host_client(struct iamt_heci_device *dev,
+		struct heci_file_private *file_ext)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#1874: FILE: drivers/char/heci/heci_init.c:998:
+	if ((!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!file_ext'
#1874: FILE: drivers/char/heci/heci_init.c:998:
+	if ((!dev) || (!file_ext))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*priv_cb)...) over kzalloc(sizeof(struct heci_cb_private)...)
#1880: FILE: drivers/char/heci/heci_init.c:1004:
+	priv_cb = kzalloc(sizeof(struct heci_cb_private), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1892: FILE: drivers/char/heci/heci_init.c:1016:
+			list_add_tail(&priv_cb->cb_list,
+				&dev->ctrl_rd_list.heci_cb.cb_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1902: FILE: drivers/char/heci/heci_init.c:1026:
+		list_add_tail(&priv_cb->cb_list,
+				&dev->ctrl_wr_list.heci_cb.cb_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1907: FILE: drivers/char/heci/heci_init.c:1031:
+	err = wait_event_timeout(dev->wait_recvd_msg,
+		 (HECI_FILE_DISCONNECTED == file_ext->state),

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1907: FILE: drivers/char/heci/heci_init.c:1031:
+		 (HECI_FILE_DISCONNECTED == file_ext->state),

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1909: FILE: drivers/char/heci/heci_init.c:1033:
+	if (HECI_FILE_DISCONNECTED == file_ext->state) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1914: FILE: drivers/char/heci/heci_init.c:1038:
+		if (HECI_FILE_DISCONNECTED != file_ext->state)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1944: FILE: drivers/char/heci/heci_init.c:1068:
+	struct heci_file_private *file_next = NULL;
+	list_for_each_entry_safe(file_pos, file_next, &dev->file_list, link) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1947: FILE: drivers/char/heci/heci_init.c:1071:
+			DBG("remove host client = %d, ME client = %d\n",
+					file_pos->host_client_id,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1960: FILE: drivers/char/heci/heci_interface.c:1:
+/*

WARNING:TYPO_SPELLING: 'MERCHANTIBILITY' may be misspelled - perhaps 'MERCHANTABILITY'?
#1988: FILE: drivers/char/heci/heci_interface.c:29:
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
                                          ^^^^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2000: FILE: drivers/char/heci/heci_interface.c:41:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2004: FILE: drivers/char/heci/heci_interface.c:45:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2038: FILE: drivers/char/heci/heci_interface.c:79:
+
+

WARNING:TYPO_SPELLING: 'numer' may be misspelled - perhaps 'number'?
#2044: FILE: drivers/char/heci/heci_interface.c:85:
+ * returns numer of filled slots
            ^^^^^

CHECK:SPACING: No space is necessary after a cast
#2050: FILE: drivers/char/heci/heci_interface.c:91:
+	read_ptr = (char) ((dev->host_hw_state & H_CBRP) >> 8);

CHECK:SPACING: No space is necessary after a cast
#2051: FILE: drivers/char/heci/heci_interface.c:92:
+	write_ptr = (char) ((dev->host_hw_state & H_CBWP) >> 16);

CHECK:SPACING: No space is necessary after a cast
#2053: FILE: drivers/char/heci/heci_interface.c:94:
+	return (unsigned char) (write_ptr - read_ptr);

CHECK:SPACING: No space is necessary after a cast
#2087: FILE: drivers/char/heci/heci_interface.c:128:
+	buffer_depth = (unsigned char) ((dev->host_hw_state & H_CBD) >> 24);

CHECK:SPACING: No space is necessary after a cast
#2096: FILE: drivers/char/heci/heci_interface.c:137:
+	return (__s32) empty_slots;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2110: FILE: drivers/char/heci/heci_interface.c:151:
+int heci_write_message(struct iamt_heci_device *dev,
+			     struct heci_msg_hdr *header,

CHECK:SPACING: No space is necessary after a cast
#2121: FILE: drivers/char/heci/heci_interface.c:162:
+	DBG("heci_write_message header=%08x.\n", *((__u32 *) header));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'heci_write_message', this function's name, in a string
#2121: FILE: drivers/char/heci/heci_interface.c:162:
+	DBG("heci_write_message header=%08x.\n", *((__u32 *) header));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#2122: FILE: drivers/char/heci/heci_interface.c:163:
+	buffer_depth = (unsigned char) ((dev->host_hw_state & H_CBD) >> 24);

CHECK:SPACING: No space is necessary after a cast
#2132: FILE: drivers/char/heci/heci_interface.c:173:
+	write_heci_register(dev, H_CB_WW, *((__u32 *) header));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2136: FILE: drivers/char/heci/heci_interface.c:177:
+		write_heci_register(dev, H_CB_WW,
+				*(__u32 *) (write_buffer + bytes_written));

CHECK:SPACING: No space is necessary after a cast
#2136: FILE: drivers/char/heci/heci_interface.c:177:
+				*(__u32 *) (write_buffer + bytes_written));

CHECK:SPACING: No space is necessary after a cast
#2170: FILE: drivers/char/heci/heci_interface.c:211:
+	read_ptr = (char) ((dev->me_hw_state & ME_CBRP_HRA) >> 8);

CHECK:SPACING: No space is necessary after a cast
#2171: FILE: drivers/char/heci/heci_interface.c:212:
+	write_ptr = (char) ((dev->me_hw_state & ME_CBWP_HRA) >> 16);

CHECK:SPACING: No space is necessary after a cast
#2172: FILE: drivers/char/heci/heci_interface.c:213:
+	filled_slots = (unsigned char) (write_ptr - read_ptr);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2179: FILE: drivers/char/heci/heci_interface.c:220:
+	DBG("filled_slots =%08x  \n", filled_slots);

CHECK:SPACING: No space is necessary after a cast
#2180: FILE: drivers/char/heci/heci_interface.c:221:
+	return (__s32) filled_slots;

CHECK:SPACING: No space is necessary after a cast
#2197: FILE: drivers/char/heci/heci_interface.c:238:
+		((__u32 *) buffer)[i] = read_heci_register(dev, ME_CB_RW);

CHECK:SPACING: No space is necessary after a cast
#2198: FILE: drivers/char/heci/heci_interface.c:239:
+		DBG("buffer[%d]= %d\n", i, ((__u32 *) buffer)[i]);

CHECK:SPACING: No space is necessary after a cast
#2204: FILE: drivers/char/heci/heci_interface.c:245:
+		*((__u32 *) &temp_buf) = read_heci_register(dev, ME_CB_RW);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2221: FILE: drivers/char/heci/heci_interface.c:262:
+int flow_ctrl_creds(struct iamt_heci_device *dev,
+				   struct heci_file_private *file_ext)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file_ext"
#2228: FILE: drivers/char/heci/heci_interface.c:269:
+	if (file_ext == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2237: FILE: drivers/char/heci/heci_interface.c:278:
+				BUG_ON(dev->me_clients[i].props.single_recv_buf

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2244: FILE: drivers/char/heci/heci_interface.c:285:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2255: FILE: drivers/char/heci/heci_interface.c:296:
+void flow_ctrl_reduce(struct iamt_heci_device *dev,
+			 struct heci_file_private *file_ext)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2265: FILE: drivers/char/heci/heci_interface.c:306:
+				BUG_ON(dev->me_clients[i].flow_ctrl_creds <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2268: FILE: drivers/char/heci/heci_interface.c:309:
+				BUG_ON(file_ext->flow_ctrl_creds <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2274: FILE: drivers/char/heci/heci_interface.c:315:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2286: FILE: drivers/char/heci/heci_interface.c:327:
+int heci_send_flow_control(struct iamt_heci_device *dev,
+				 struct heci_file_private *file_ext)

CHECK:SPACING: No space is necessary after a cast
#2291: FILE: drivers/char/heci/heci_interface.c:332:
+	heci_hdr = (struct heci_msg_hdr *) &dev->wr_msg_buf[0];

CHECK:SPACING: No space is necessary after a cast
#2298: FILE: drivers/char/heci/heci_interface.c:339:
+	heci_flow_control = (struct hbm_flow_control *) &dev->wr_msg_buf[1];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2304: FILE: drivers/char/heci/heci_interface.c:345:
+	memset(heci_flow_control->reserved, 0,
+			sizeof(heci_flow_control->reserved));

CHECK:SPACING: No space is necessary after a cast
#2308: FILE: drivers/char/heci/heci_interface.c:349:
+				(unsigned char *) heci_flow_control,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2314: FILE: drivers/char/heci/heci_interface.c:355:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2326: FILE: drivers/char/heci/heci_interface.c:367:
+int other_client_is_connecting(struct iamt_heci_device *dev,
+		struct heci_file_private *file_ext)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_pos->state == HECI_FILE_CONNECTING'
#2332: FILE: drivers/char/heci/heci_interface.c:373:
+		if ((file_pos->state == HECI_FILE_CONNECTING)
+			&& (file_pos != file_ext)
+			&& file_ext->me_client_id == file_pos->me_client_id)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_pos != file_ext'
#2332: FILE: drivers/char/heci/heci_interface.c:373:
+		if ((file_pos->state == HECI_FILE_CONNECTING)
+			&& (file_pos != file_ext)
+			&& file_ext->me_client_id == file_pos->me_client_id)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2333: FILE: drivers/char/heci/heci_interface.c:374:
+		if ((file_pos->state == HECI_FILE_CONNECTING)
+			&& (file_pos != file_ext)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2334: FILE: drivers/char/heci/heci_interface.c:375:
+			&& (file_pos != file_ext)
+			&& file_ext->me_client_id == file_pos->me_client_id)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2337: FILE: drivers/char/heci/heci_interface.c:378:
+
+	}

CHECK:SPACING: No space is necessary after a cast
#2352: FILE: drivers/char/heci/heci_interface.c:393:
+	heci_hdr = (struct heci_msg_hdr *) &dev->wr_msg_buf[0];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2359: FILE: drivers/char/heci/heci_interface.c:400:
+	if (!memcmp(dev->wd_data, heci_start_wd_params,
+			HECI_WD_PARAMS_SIZE)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2362: FILE: drivers/char/heci/heci_interface.c:403:
+		BUG_ON(memcmp(dev->wd_data, heci_stop_wd_params,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2363: FILE: drivers/char/heci/heci_interface.c:404:
+		BUG_ON(memcmp(dev->wd_data, heci_stop_wd_params,
+			HECI_WD_PARAMS_SIZE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2382: FILE: drivers/char/heci/heci_interface.c:423:
+int heci_disconnect(struct iamt_heci_device *dev,
+			  struct heci_file_private *file_ext)

CHECK:SPACING: No space is necessary after a cast
#2387: FILE: drivers/char/heci/heci_interface.c:428:
+	heci_hdr = (struct heci_msg_hdr *) &dev->wr_msg_buf[0];

CHECK:SPACING: No space is necessary after a cast
#2395: FILE: drivers/char/heci/heci_interface.c:436:
+	    (struct hbm_client_disconnect_request *) &dev->wr_msg_buf[1];

CHECK:SPACING: No space is necessary after a cast
#2403: FILE: drivers/char/heci/heci_interface.c:444:
+				(unsigned char *) heci_cli_disconnect,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2419: FILE: drivers/char/heci/heci_interface.c:460:
+int heci_connect(struct iamt_heci_device *dev,
+		       struct heci_file_private *file_ext)

CHECK:SPACING: No space is necessary after a cast
#2424: FILE: drivers/char/heci/heci_interface.c:465:
+	heci_hdr = (struct heci_msg_hdr *) &dev->wr_msg_buf[0];

CHECK:SPACING: No space is necessary after a cast
#2432: FILE: drivers/char/heci/heci_interface.c:473:
+	    (struct hbm_client_connect_request *) &dev->wr_msg_buf[1];

CHECK:SPACING: No space is necessary after a cast
#2439: FILE: drivers/char/heci/heci_interface.c:480:
+				(unsigned char *) heci_cli_connect,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2451: FILE: drivers/char/heci/heci_interface.h:1:
+/*

WARNING:TYPO_SPELLING: 'MERCHANTIBILITY' may be misspelled - perhaps 'MERCHANTABILITY'?
#2479: FILE: drivers/char/heci/heci_interface.h:29:
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
                                          ^^^^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2491: FILE: drivers/char/heci/heci_interface.h:41:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2507: FILE: drivers/char/heci/heci_interface.h:57:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2512: FILE: drivers/char/heci/heci_interface.h:62:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2535: FILE: drivers/char/heci/heci_interface.h:85:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2544: FILE: drivers/char/heci/heci_interface.h:94:
+    _IOWR('H' , 0x0, struct heci_message_data)$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2544: FILE: drivers/char/heci/heci_interface.h:94:
+    _IOWR('H' , 0x0, struct heci_message_data)
               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2546: FILE: drivers/char/heci/heci_interface.h:96:
+    _IOWR('H' , 0x01, struct heci_message_data)$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2546: FILE: drivers/char/heci/heci_interface.h:96:
+    _IOWR('H' , 0x01, struct heci_message_data)
               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2548: FILE: drivers/char/heci/heci_interface.h:98:
+    _IOWR('H' , 0x02, struct heci_message_data)$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2548: FILE: drivers/char/heci/heci_interface.h:98:
+    _IOWR('H' , 0x02, struct heci_message_data)
               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2550: FILE: drivers/char/heci/heci_interface.h:100:
+    _IOWR('H' , 0x10, struct heci_message_data)$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2550: FILE: drivers/char/heci/heci_interface.h:100:
+    _IOWR('H' , 0x10, struct heci_message_data)
               ^

WARNING:SPACING: missing space after enum definition
#2552: FILE: drivers/char/heci/heci_interface.h:102:
+enum heci_stop_reason_types{

WARNING:SPACING: missing space after enum definition
#2564: FILE: drivers/char/heci/heci_interface.h:114:
+enum me_stop_reason_types{

WARNING:SPACING: missing space after enum definition
#2568: FILE: drivers/char/heci/heci_interface.h:118:
+enum client_connect_status_types{

WARNING:SPACING: missing space after enum definition
#2576: FILE: drivers/char/heci/heci_interface.h:126:
+enum client_disconnect_status_types{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2580: FILE: drivers/char/heci/heci_interface.h:130:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2592: FILE: drivers/char/heci/heci_interface.h:142:
+int heci_write_message(struct iamt_heci_device *dev,
+			     struct heci_msg_hdr *header,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2603: FILE: drivers/char/heci/heci_interface.h:153:
+int flow_ctrl_creds(struct iamt_heci_device *dev,
+				   struct heci_file_private *file_ext);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2608: FILE: drivers/char/heci/heci_interface.h:158:
+void flow_ctrl_reduce(struct iamt_heci_device *dev,
+			 struct heci_file_private *file_ext);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2611: FILE: drivers/char/heci/heci_interface.h:161:
+int heci_send_flow_control(struct iamt_heci_device *dev,
+				 struct heci_file_private *file_ext);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2614: FILE: drivers/char/heci/heci_interface.h:164:
+int heci_disconnect(struct iamt_heci_device *dev,
+			  struct heci_file_private *file_ext);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2616: FILE: drivers/char/heci/heci_interface.h:166:
+int other_client_is_connecting(struct iamt_heci_device *dev,
+				     struct heci_file_private *file_ext);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2618: FILE: drivers/char/heci/heci_interface.h:168:
+int heci_connect(struct iamt_heci_device *dev,
+		       struct heci_file_private *file_ext);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2627: FILE: drivers/char/heci/heci_main.c:1:
+/*

WARNING:TYPO_SPELLING: 'MERCHANTIBILITY' may be misspelled - perhaps 'MERCHANTABILITY'?
#2655: FILE: drivers/char/heci/heci_main.c:29:
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
                                          ^^^^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2667: FILE: drivers/char/heci/heci_main.c:41:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2692: FILE: drivers/char/heci/heci_main.c:66:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2705: FILE: drivers/char/heci/heci_main.c:79:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2714: FILE: drivers/char/heci/heci_main.c:88:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2728: FILE: drivers/char/heci/heci_main.c:102:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2766: FILE: drivers/char/heci/heci_main.c:140:
+static int __devinit heci_probe(struct pci_dev *pdev,

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#2768: FILE: drivers/char/heci/heci_main.c:142:
+static void __devexit heci_remove(struct pci_dev *pdev);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2778: FILE: drivers/char/heci/heci_main.c:152:
+static struct heci_cb_private *find_read_list_entry(

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2805: FILE: drivers/char/heci/heci_main.c:179:
+static struct file_operations heci_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2825: FILE: drivers/char/heci/heci_main.c:199:
+				  struct file_operations *fops)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2834: FILE: drivers/char/heci/heci_main.c:208:
+		printk(KERN_ERR "heci: Error %d registering heci device %d\n",

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2847: FILE: drivers/char/heci/heci_main.c:221:
+static CLASS_ATTR(version, S_IRUGO, version_show, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2863: FILE: drivers/char/heci/heci_main.c:237:
+		printk(KERN_ERR "heci: Error allocating char device region.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2902: FILE: drivers/char/heci/heci_main.c:276:
+		printk(KERN_ERR "heci: Error creating heci class.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2909: FILE: drivers/char/heci/heci_main.c:283:
+		printk(KERN_ERR "heci: Error creating heci class file.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'heci_class == NULL'
#2933: FILE: drivers/char/heci/heci_main.c:307:
+	if ((heci_class == NULL) || (IS_ERR(heci_class)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!heci_class"
#2933: FILE: drivers/char/heci/heci_main.c:307:
+	if ((heci_class == NULL) || (IS_ERR(heci_class)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2954: FILE: drivers/char/heci/heci_main.c:328:
+	printk(KERN_INFO "heci: %s - version %s\n", heci_driver_string,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2955: FILE: drivers/char/heci/heci_main.c:329:
+	printk(KERN_INFO "heci: %s - version %s\n", heci_driver_string,
+			heci_driver_version);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2956: FILE: drivers/char/heci/heci_main.c:330:
+	printk(KERN_INFO "heci: %s\n", heci_copyright);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2961: FILE: drivers/char/heci/heci_main.c:335:
+		printk(KERN_ERR "heci: Error registering driver.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2985: FILE: drivers/char/heci/heci_main.c:359:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3001: FILE: drivers/char/heci/heci_main.c:375:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#3010: FILE: drivers/char/heci/heci_main.c:384:
+static int __devinit heci_probe(struct pci_dev *pdev,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3023: FILE: drivers/char/heci/heci_main.c:397:
+		printk(KERN_ERR "heci: Failed to enable pci device.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3031: FILE: drivers/char/heci/heci_main.c:405:
+		printk(KERN_ERR "heci: Failed to get pci regions.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3045: FILE: drivers/char/heci/heci_main.c:419:
+			printk(KERN_ERR "heci: heci has IO ports.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3049: FILE: drivers/char/heci/heci_main.c:423:
+				printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3058: FILE: drivers/char/heci/heci_main.c:432:
+		printk(KERN_ERR "heci: No address to use.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3063: FILE: drivers/char/heci/heci_main.c:437:
+	dev->mem_addr = ioremap_nocache(dev->mem_base,
+			dev->mem_length);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3065: FILE: drivers/char/heci/heci_main.c:439:
+		printk(KERN_ERR "heci: Remap IO device memory failure.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3071: FILE: drivers/char/heci/heci_main.c:445:
+	err = request_irq(pdev->irq, heci_isr_interrupt, IRQF_SHARED,
+			heci_driver_name, dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3073: FILE: drivers/char/heci/heci_main.c:447:
+		printk(KERN_ERR "heci: Request_irq failure. irq = %d \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3073: FILE: drivers/char/heci/heci_main.c:447:
+		printk(KERN_ERR "heci: Request_irq failure. irq = %d \n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3079: FILE: drivers/char/heci/heci_main.c:453:
+		printk(KERN_ERR "heci: Init hw failure.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3102: FILE: drivers/char/heci/heci_main.c:476:
+	printk(KERN_INFO "heci driver initialization successful.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3126: FILE: drivers/char/heci/heci_main.c:500:
+	printk(KERN_ERR "heci driver initialization failed.\n");

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#3138: FILE: drivers/char/heci/heci_main.c:512:
+static void __devexit heci_remove(struct pci_dev *pdev)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#3145: FILE: drivers/char/heci/heci_main.c:519:
+	if (dev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev->reinit_tsk"
#3154: FILE: drivers/char/heci/heci_main.c:528:
+	if (dev->reinit_tsk != NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3161: FILE: drivers/char/heci/heci_main.c:535:
+	if (dev->wd_file_ext.state == HECI_FILE_CONNECTED
+	    && dev->wd_timeout) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3183: FILE: drivers/char/heci/heci_main.c:557:
+		wait_event_interruptible_timeout(dev->wait_stop_wd,
+				(dev->wd_stoped), 10 * HZ);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3190: FILE: drivers/char/heci/heci_main.c:564:
+
+	}

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dev->wd_file_ext.host_client_id'
#3211: FILE: drivers/char/heci/heci_main.c:585:
+	heci_remove_client_from_file_list(dev, dev->wd_file_ext.
+					  host_client_id);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3213: FILE: drivers/char/heci/heci_main.c:587:
+	heci_remove_client_from_file_list(dev,
+			dev->iamthif_file_ext.host_client_id);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3240: FILE: drivers/char/heci/heci_main.c:614:
+ * ^I^Ifrom heci_cb_list$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3251: FILE: drivers/char/heci/heci_main.c:625:
+static int heci_clear_list(struct iamt_heci_device *dev,
+		struct file *file, struct list_head *heci_cb_list)

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#3254: FILE: drivers/char/heci/heci_main.c:628:
+	struct heci_cb_private*priv_cb_next = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!rets'
#3315: FILE: drivers/char/heci/heci_main.c:689:
+	if (dev->iamthif_current_cb && (!rets)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'if_num != HECI_MINOR_NUMBER'
#3345: FILE: drivers/char/heci/heci_main.c:719:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#3345: FILE: drivers/char/heci/heci_main.c:719:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file_ext"
#3349: FILE: drivers/char/heci/heci_main.c:723:
+	if (file_ext == NULL)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3367: FILE: drivers/char/heci/heci_main.c:741:
+		& (1 << (dev->current_host_client_id % 8))) != 0) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'if_num != HECI_MINOR_NUMBER'
#3409: FILE: drivers/char/heci/heci_main.c:783:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#3409: FILE: drivers/char/heci/heci_main.c:783:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!file_ext'
#3409: FILE: drivers/char/heci/heci_main.c:783:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

WARNING:SPLIT_STRING: quoted string split across lines
#3418: FILE: drivers/char/heci/heci_main.c:792:
+			DBG("disconnecting client host client = %d, "
+			    "ME client = %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3436: FILE: drivers/char/heci/heci_main.c:810:
+		heci_remove_client_from_file_list(dev,
+				file_ext->host_client_id);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file_ext->read_cb"
#3439: FILE: drivers/char/heci/heci_main.c:813:
+		if (file_ext->read_cb != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "priv_cb"
#3442: FILE: drivers/char/heci/heci_main.c:816:
+			if (priv_cb != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "priv_cb"
#3453: FILE: drivers/char/heci/heci_main.c:827:
+		if (priv_cb != NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3464: FILE: drivers/char/heci/heci_main.c:838:
+		if (dev->iamthif_file_object == file
+		    && dev->iamthif_state != HECI_IAMTHIF_IDLE) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#3474: FILE: drivers/char/heci/heci_main.c:848:
+		if (heci_clear_lists(dev, file))
+		    dev->iamthif_state = HECI_IAMTHIF_IDLE;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3482: FILE: drivers/char/heci/heci_main.c:856:
+static struct heci_cb_private *find_read_list_entry(

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3491: FILE: drivers/char/heci/heci_main.c:865:
+	if (dev->read_list.status == 0
+	    && !list_empty(&dev->read_list.heci_cb.cb_list)) {

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3492: FILE: drivers/char/heci/heci_main.c:866:
+		DBG("remove read_list CB \n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3494: FILE: drivers/char/heci/heci_main.c:868:
+		list_for_each_entry_safe(priv_cb_pos,
+				priv_cb_next,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3496: FILE: drivers/char/heci/heci_main.c:870:
+				&dev->read_list.heci_cb.cb_list, cb_list) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext_list_temp != NULL'
#3500: FILE: drivers/char/heci/heci_main.c:874:
+			if ((file_ext_list_temp != NULL) &&
+			    heci_fe_same_id(file_ext, file_ext_list_temp))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file_ext_list_temp"
#3500: FILE: drivers/char/heci/heci_main.c:874:
+			if ((file_ext_list_temp != NULL) &&

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3504: FILE: drivers/char/heci/heci_main.c:878:
+
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'if_num != HECI_MINOR_NUMBER'
#3534: FILE: drivers/char/heci/heci_main.c:908:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#3534: FILE: drivers/char/heci/heci_main.c:908:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!file_ext'
#3534: FILE: drivers/char/heci/heci_main.c:908:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3576: FILE: drivers/char/heci/heci_main.c:950:
+	} else if ((!file_ext->read_cb || file_ext->read_cb->information == 0)
+		    && *offset > 0) {

WARNING:TYPO_SPELLING: 'contingous' may be misspelled - perhaps 'contiguous'?
#3577: FILE: drivers/char/heci/heci_main.c:951:
+		/*Offset needs to be cleaned for contingous reads*/
 		                                 ^^^^^^^^^^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#3591: FILE: drivers/char/heci/heci_main.c:965:
+	if (HECI_READ_COMPLETE != file_ext->reading_state

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3592: FILE: drivers/char/heci/heci_main.c:966:
+	if (HECI_READ_COMPLETE != file_ext->reading_state
+			&& !waitqueue_active(&file_ext->rx_wait)) {

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#3592: FILE: drivers/char/heci/heci_main.c:966:
+			&& !waitqueue_active(&file_ext->rx_wait)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3601: FILE: drivers/char/heci/heci_main.c:975:
+		if (wait_event_interruptible(file_ext->rx_wait,
+			(HECI_READ_COMPLETE == file_ext->reading_state

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#3601: FILE: drivers/char/heci/heci_main.c:975:
+			(HECI_READ_COMPLETE == file_ext->reading_state

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3602: FILE: drivers/char/heci/heci_main.c:976:
+			(HECI_READ_COMPLETE == file_ext->reading_state
+			 || HECI_FILE_INITIALIZING == file_ext->state

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3603: FILE: drivers/char/heci/heci_main.c:977:
+			 || HECI_FILE_INITIALIZING == file_ext->state
+			 || HECI_FILE_DISCONNECTED == file_ext->state

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3604: FILE: drivers/char/heci/heci_main.c:978:
+			 || HECI_FILE_DISCONNECTED == file_ext->state
+			 || HECI_FILE_DISCONNECTING == file_ext->state))) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#3612: FILE: drivers/char/heci/heci_main.c:986:
+		if (HECI_FILE_INITIALIZING == file_ext->state ||

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#3613: FILE: drivers/char/heci/heci_main.c:987:
+		    HECI_FILE_DISCONNECTED == file_ext->state ||

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#3614: FILE: drivers/char/heci/heci_main.c:988:
+		    HECI_FILE_DISCONNECTING == file_ext->state) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ubuf"
#3638: FILE: drivers/char/heci/heci_main.c:1012:
+	if (length == 0 || ubuf == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "priv_cb_pos"
#3665: FILE: drivers/char/heci/heci_main.c:1039:
+	if (priv_cb_pos != NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'if_num != HECI_MINOR_NUMBER'
#3705: FILE: drivers/char/heci/heci_main.c:1079:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#3705: FILE: drivers/char/heci/heci_main.c:1079:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!file_ext'
#3705: FILE: drivers/char/heci/heci_main.c:1079:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priv_write_cb != NULL'
#3716: FILE: drivers/char/heci/heci_main.c:1090:
+		if ((priv_write_cb != NULL) &&
+		     (((currtime - priv_write_cb->read_time) >
+			    IAMTHIF_READ_TIMER) ||
+		      (file_ext->reading_state == HECI_READ_COMPLETE))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext->reading_state == HECI_READ_COMPLETE'
#3716: FILE: drivers/char/heci/heci_main.c:1090:
+		if ((priv_write_cb != NULL) &&
+		     (((currtime - priv_write_cb->read_time) >
+			    IAMTHIF_READ_TIMER) ||
+		      (file_ext->reading_state == HECI_READ_COMPLETE))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "priv_write_cb"
#3716: FILE: drivers/char/heci/heci_main.c:1090:
+		if ((priv_write_cb != NULL) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3717: FILE: drivers/char/heci/heci_main.c:1091:
+		if ((priv_write_cb != NULL) &&
+		     (((currtime - priv_write_cb->read_time) >

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "priv_write_cb"
#3731: FILE: drivers/char/heci/heci_main.c:1105:
+		if (priv_write_cb != NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*priv_write_cb)...) over kzalloc(sizeof(struct heci_cb_private)...)
#3747: FILE: drivers/char/heci/heci_main.c:1121:
+	priv_write_cb = kzalloc(sizeof(struct heci_cb_private), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#3758: FILE: drivers/char/heci/heci_main.c:1132:
+	DBG("length =%d\n", (int) length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3761: FILE: drivers/char/heci/heci_main.c:1135:
+	if (copy_from_user(priv_write_cb->request_buffer.data,
+		ubuf, length)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'length == 4'
#3768: FILE: drivers/char/heci/heci_main.c:1142:
+	if ((length == 4) &&
+	    ((memcmp(heci_wd_state_independence_msg[0], ubuf, 4) == 0) ||
+	     (memcmp(heci_wd_state_independence_msg[1], ubuf, 4) == 0) ||
+	     (memcmp(heci_wd_state_independence_msg[2], ubuf, 4) == 0)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3795: FILE: drivers/char/heci/heci_main.c:1169:
+		BUG_ON(dev->me_clients[i].client_id != file_ext->me_client_id);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == dev->num_heci_me_clients'
#3796: FILE: drivers/char/heci/heci_main.c:1170:
+		if ((i == dev->num_heci_me_clients) ||
+		    (dev->me_clients[i].client_id !=
+		      dev->iamthif_file_ext.me_client_id)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->me_clients[i].client_id !=
 		      dev->iamthif_file_ext.me_client_id'
#3796: FILE: drivers/char/heci/heci_main.c:1170:
+		if ((i == dev->num_heci_me_clients) ||
+		    (dev->me_clients[i].client_id !=
+		      dev->iamthif_file_ext.me_client_id)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3799: FILE: drivers/char/heci/heci_main.c:1173:
+		      dev->iamthif_file_ext.me_client_id)) {
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3804: FILE: drivers/char/heci/heci_main.c:1178:
+		} else if ((length > dev->me_clients[i].props.max_msg_length)
+			    || (length <= 0)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3810: FILE: drivers/char/heci/heci_main.c:1184:
+
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3822: FILE: drivers/char/heci/heci_main.c:1196:
+		if (!list_empty(&dev->pthi_cmd_list.heci_cb.cb_list)
+				|| dev->iamthif_state != HECI_IAMTHIF_IDLE) {

CHECK:SPACING: No space is necessary after a cast
#3823: FILE: drivers/char/heci/heci_main.c:1197:
+			DBG("pthi_state = %d\n", (int) dev->iamthif_state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3826: FILE: drivers/char/heci/heci_main.c:1200:
+			list_add_tail(&priv_write_cb->cb_list,
+					&dev->pthi_cmd_list.heci_cb.cb_list);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3866: FILE: drivers/char/heci/heci_main.c:1240:
+	BUG_ON(dev->me_clients[i].client_id != file_ext->me_client_id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3879: FILE: drivers/char/heci/heci_main.c:1253:
+	if (flow_ctrl_creds(dev, file_ext) &&
+		dev->host_buffer_is_empty) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3884: FILE: drivers/char/heci/heci_main.c:1258:
+			sizeof(__u32)) - sizeof(struct heci_msg_hdr))) {
+

CHECK:SPACING: No space is necessary after a cast
#3898: FILE: drivers/char/heci/heci_main.c:1272:
+		    *((__u32 *) &heci_hdr));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priv_write_cb->request_buffer.data'
#3902: FILE: drivers/char/heci/heci_main.c:1276:
+		if (!heci_write_message(dev, &heci_hdr,
+			(unsigned char *) (priv_write_cb->request_buffer.data),
+			heci_hdr.length)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3903: FILE: drivers/char/heci/heci_main.c:1277:
+		if (!heci_write_message(dev, &heci_hdr,
+			(unsigned char *) (priv_write_cb->request_buffer.data),

CHECK:SPACING: No space is necessary after a cast
#3903: FILE: drivers/char/heci/heci_main.c:1277:
+			(unsigned char *) (priv_write_cb->request_buffer.data),

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3905: FILE: drivers/char/heci/heci_main.c:1279:
+			heci_hdr.length)) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3925: FILE: drivers/char/heci/heci_main.c:1299:
+	} else {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3941: FILE: drivers/char/heci/heci_main.c:1315:
+
+}

CHECK:SPACING: No space is necessary after a cast
#3960: FILE: drivers/char/heci/heci_main.c:1334:
+	struct heci_message_data *u_msg = (struct heci_message_data *) data;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'if_num != HECI_MINOR_NUMBER'
#3971: FILE: drivers/char/heci/heci_main.c:1345:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#3971: FILE: drivers/char/heci/heci_main.c:1345:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!file_ext'
#3971: FILE: drivers/char/heci/heci_main.c:1345:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'if_num != HECI_MINOR_NUMBER'
#4038: FILE: drivers/char/heci/heci_main.c:1412:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#4038: FILE: drivers/char/heci/heci_main.c:1412:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!file_ext'
#4038: FILE: drivers/char/heci/heci_main.c:1412:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4052: FILE: drivers/char/heci/heci_main.c:1426:
+		if (dev->iamthif_state == HECI_IAMTHIF_READ_COMPLETE
+		    && dev->iamthif_file_object == file) {

ERROR:SPACING: space required before the open brace '{'
#4061: FILE: drivers/char/heci/heci_main.c:1435:
+	} else{

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#4064: FILE: drivers/char/heci/heci_main.c:1438:
+		if (HECI_WRITE_COMPLETE == file_ext->writing_state)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev->reinit_tsk"
#4080: FILE: drivers/char/heci/heci_main.c:1454:
+	if (dev->reinit_tsk != NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4089: FILE: drivers/char/heci/heci_main.c:1463:
+	if (dev->wd_file_ext.state == HECI_FILE_CONNECTED
+	    && dev->wd_timeout) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4095: FILE: drivers/char/heci/heci_main.c:1469:
+		memcpy(dev->wd_data, heci_stop_wd_params,
+					HECI_WD_PARAMS_SIZE);

CHECK:BRACES: braces {} should be used on all arms of this statement
#4115: FILE: drivers/char/heci/heci_main.c:1489:
+		if (!dev->wd_stoped)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4117: FILE: drivers/char/heci/heci_main.c:1491:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4155: FILE: drivers/char/heci/heci_main.c:1529:
+	err = request_irq(pdev->irq, heci_isr_interrupt, IRQF_SHARED,
+			heci_driver_name, dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4157: FILE: drivers/char/heci/heci_main.c:1531:
+		printk(KERN_ERR "heci: Request_irq failure. irq = %d \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#4157: FILE: drivers/char/heci/heci_main.c:1531:
+		printk(KERN_ERR "heci: Request_irq failure. irq = %d \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4172: FILE: drivers/char/heci/heci_main.c:1546:
+		memcpy(dev->wd_data, heci_start_wd_params,
+					HECI_WD_PARAMS_SIZE);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4196: FILE: drivers/char/heci/heci_version.h:1:
+/*

WARNING:TYPO_SPELLING: 'MERCHANTIBILITY' may be misspelled - perhaps 'MERCHANTABILITY'?
#4224: FILE: drivers/char/heci/heci_version.h:29:
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
                                          ^^^^^^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4256: FILE: drivers/char/heci/interrupt.c:1:
+/*

WARNING:TYPO_SPELLING: 'MERCHANTIBILITY' may be misspelled - perhaps 'MERCHANTABILITY'?
#4284: FILE: drivers/char/heci/interrupt.c:29:
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
                                          ^^^^^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4306: FILE: drivers/char/heci/interrupt.c:51:
+static int heci_bh_read_handler(struct io_heci_list *complete_list,
+		struct iamt_heci_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4309: FILE: drivers/char/heci/interrupt.c:54:
+static int heci_bh_write_handler(struct io_heci_list *complete_list,
+		struct iamt_heci_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4312: FILE: drivers/char/heci/interrupt.c:57:
+static void heci_bh_read_bus_message(struct iamt_heci_device *dev,
+		struct heci_msg_hdr *heci_hdr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4314: FILE: drivers/char/heci/interrupt.c:59:
+static int heci_bh_read_pthi_message(struct io_heci_list *complete_list,
+		struct iamt_heci_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4317: FILE: drivers/char/heci/interrupt.c:62:
+static int heci_bh_read_client_message(struct io_heci_list *complete_list,
+		struct iamt_heci_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4320: FILE: drivers/char/heci/interrupt.c:65:
+static void heci_client_connect_response(struct iamt_heci_device *dev,
+		struct hbm_client_connect_response *connect_res);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4322: FILE: drivers/char/heci/interrupt.c:67:
+static void heci_client_disconnect_response(struct iamt_heci_device *dev,
+		struct hbm_client_connect_response *disconnect_res);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4324: FILE: drivers/char/heci/interrupt.c:69:
+static void heci_client_flow_control_response(struct iamt_heci_device *dev,
+		struct hbm_flow_control *flow_control);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4326: FILE: drivers/char/heci/interrupt.c:71:
+static void heci_client_disconnect_request(struct iamt_heci_device *dev,
+		struct hbm_client_disconnect_request *disconnect_req);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4328: FILE: drivers/char/heci/interrupt.c:73:
+
+

CHECK:SPACING: No space is necessary after a cast
#4340: FILE: drivers/char/heci/interrupt.c:85:
+	struct iamt_heci_device *dev = (struct iamt_heci_device *) dev_id;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4359: FILE: drivers/char/heci/interrupt.c:104:
+		printk(KERN_ERR "heci: schedule the heci_bh_handler"

WARNING:SPLIT_STRING: quoted string split across lines
#4360: FILE: drivers/char/heci/interrupt.c:105:
+		printk(KERN_ERR "heci: schedule the heci_bh_handler"
+		       " failed error=%x\n", err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4372: FILE: drivers/char/heci/interrupt.c:117:
+static void _heci_cmpl(struct heci_file_private *file_ext,
+				struct heci_cb_private *priv_cb_pos)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&file_ext->tx_wait'
#4378: FILE: drivers/char/heci/interrupt.c:123:
+		if ((&file_ext->tx_wait) &&
+		    waitqueue_active(&file_ext->tx_wait))

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#4379: FILE: drivers/char/heci/interrupt.c:124:
+		    waitqueue_active(&file_ext->tx_wait))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4383: FILE: drivers/char/heci/interrupt.c:128:
+	} else if (priv_cb_pos->major_file_operations == HECI_READ
+				&& HECI_READING == file_ext->reading_state) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4385: FILE: drivers/char/heci/interrupt.c:130:
+		DBG("completing read call back information= %lu\n",
+				priv_cb_pos->information);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&file_ext->rx_wait'
#4387: FILE: drivers/char/heci/interrupt.c:132:
+		if ((&file_ext->rx_wait) &&
+		    waitqueue_active(&file_ext->rx_wait))

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#4388: FILE: drivers/char/heci/interrupt.c:133:
+		    waitqueue_active(&file_ext->rx_wait))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4391: FILE: drivers/char/heci/interrupt.c:136:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4401: FILE: drivers/char/heci/interrupt.c:146:
+static void _heci_cmpl_iamthif(struct iamt_heci_device *dev,
+				struct heci_cb_private *priv_cb_pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4407: FILE: drivers/char/heci/interrupt.c:152:
+		memcpy(priv_cb_pos->response_buffer.data,
+				dev->iamthif_msg_buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4410: FILE: drivers/char/heci/interrupt.c:155:
+		list_add_tail(&priv_cb_pos->cb_list,
+				&dev->pthi_read_complete_list.heci_cb.cb_list);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4420: FILE: drivers/char/heci/interrupt.c:165:
+}
+/**

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->heci_state != HECI_RESETING'
#4448: FILE: drivers/char/heci/interrupt.c:193:
+	if (((dev->me_hw_state & ME_RDY_HRA) == 0)
+	    && (dev->heci_state != HECI_RESETING)
+	    && (dev->heci_state != HECI_INITIALIZING)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->heci_state != HECI_INITIALIZING'
#4448: FILE: drivers/char/heci/interrupt.c:193:
+	if (((dev->me_hw_state & ME_RDY_HRA) == 0)
+	    && (dev->heci_state != HECI_RESETING)
+	    && (dev->heci_state != HECI_INITIALIZING)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4449: FILE: drivers/char/heci/interrupt.c:194:
+	if (((dev->me_hw_state & ME_RDY_HRA) == 0)
+	    && (dev->heci_state != HECI_RESETING)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4450: FILE: drivers/char/heci/interrupt.c:195:
+	    && (dev->heci_state != HECI_RESETING)
+	    && (dev->heci_state != HECI_INITIALIZING)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4475: FILE: drivers/char/heci/interrupt.c:220:
+					int rc = PTR_ERR(tsk);
+					printk(KERN_WARNING "heci: Unable to"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4475: FILE: drivers/char/heci/interrupt.c:220:
+					printk(KERN_WARNING "heci: Unable to"

WARNING:SPLIT_STRING: quoted string split across lines
#4476: FILE: drivers/char/heci/interrupt.c:221:
+					printk(KERN_WARNING "heci: Unable to"
+					"start the heci thread: %d\n", rc);

WARNING:MISSING_SPACE: break quoted strings at a space character
#4476: FILE: drivers/char/heci/interrupt.c:221:
+					printk(KERN_WARNING "heci: Unable to"
+					"start the heci thread: %d\n", rc);

WARNING:TYPO_SPELLING: 'avalable' may be misspelled - perhaps 'available'?
#4487: FILE: drivers/char/heci/interrupt.c:232:
+	/* check slots avalable for reading */
 	               ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4490: FILE: drivers/char/heci/interrupt.c:235:
+	DBG("slots =%08x  extra_write_index =%08x.\n",
+		slots, dev->extra_write_index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4493: FILE: drivers/char/heci/interrupt.c:238:
+		DBG("slots =%08x  extra_write_index =%08x.\n", slots,
+				dev->extra_write_index);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'heci_bh_handler', this function's name, in a string
#4510: FILE: drivers/char/heci/interrupt.c:255:
+		DBG("schedule work the heci_bh_handler.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4513: FILE: drivers/char/heci/interrupt.c:258:
+			printk(KERN_ERR "heci: schedule the heci_bh_handler"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'heci_bh_handler', this function's name, in a string
#4513: FILE: drivers/char/heci/interrupt.c:258:
+			printk(KERN_ERR "heci: schedule the heci_bh_handler"

WARNING:SPLIT_STRING: quoted string split across lines
#4514: FILE: drivers/char/heci/interrupt.c:259:
+			printk(KERN_ERR "heci: schedule the heci_bh_handler"
+			       " failed error=%x\n", rets);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#4520: FILE: drivers/char/heci/interrupt.c:265:
+	if (dev->recvd_msg && waitqueue_active(&dev->wait_recvd_msg)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'complete_list.status != 0'
#4530: FILE: drivers/char/heci/interrupt.c:275:
+	if ((complete_list.status != 0)
+	    || list_empty(&complete_list.heci_cb.cb_list))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4531: FILE: drivers/char/heci/interrupt.c:276:
+	if ((complete_list.status != 0)
+	    || list_empty(&complete_list.heci_cb.cb_list))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4534: FILE: drivers/char/heci/interrupt.c:279:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4536: FILE: drivers/char/heci/interrupt.c:281:
+	list_for_each_entry_safe(cb_pos, cb_next,
+			&complete_list.heci_cb.cb_list, cb_list) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file_ext"
#4539: FILE: drivers/char/heci/interrupt.c:284:
+		if (file_ext != NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4551: FILE: drivers/char/heci/interrupt.c:296:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4563: FILE: drivers/char/heci/interrupt.c:308:
+static int heci_bh_read_handler(struct io_heci_list *cmpl_list,
+		struct iamt_heci_device *dev,

CHECK:SPACING: No space is necessary after a cast
#4577: FILE: drivers/char/heci/interrupt.c:322:
+	heci_hdr = (struct heci_msg_hdr *) &dev->rd_msg_hdr;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'heci_hdr->reserved'
#4580: FILE: drivers/char/heci/interrupt.c:325:
+	if ((heci_hdr->reserved) || !(dev->rd_msg_hdr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'heci_hdr->host_addr'
#4586: FILE: drivers/char/heci/interrupt.c:331:
+	if ((heci_hdr->host_addr) || (heci_hdr->me_addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'heci_hdr->me_addr'
#4586: FILE: drivers/char/heci/interrupt.c:331:
+	if ((heci_hdr->host_addr) || (heci_hdr->me_addr)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4588: FILE: drivers/char/heci/interrupt.c:333:
+		list_for_each_entry_safe(file_pos, file_next,
+				&dev->file_list, link) {

WARNING:SPLIT_STRING: quoted string split across lines
#4590: FILE: drivers/char/heci/interrupt.c:335:
+			DBG("list_for_each_entry_safe read host"
+					" client = %d, ME client = %d\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_pos->host_client_id == heci_hdr->host_addr'
#4593: FILE: drivers/char/heci/interrupt.c:338:
+			if ((file_pos->host_client_id == heci_hdr->host_addr)
+			    && (file_pos->me_client_id == heci_hdr->me_addr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_pos->me_client_id == heci_hdr->me_addr'
#4593: FILE: drivers/char/heci/interrupt.c:338:
+			if ((file_pos->host_client_id == heci_hdr->host_addr)
+			    && (file_pos->me_client_id == heci_hdr->me_addr))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4594: FILE: drivers/char/heci/interrupt.c:339:
+			if ((file_pos->host_client_id == heci_hdr->host_addr)
+			    && (file_pos->me_client_id == heci_hdr->me_addr))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4617: FILE: drivers/char/heci/interrupt.c:362:
+	} else if ((heci_hdr->host_addr == dev->iamthif_file_ext.host_client_id)
+		   && (HECI_FILE_CONNECTED == dev->iamthif_file_ext.state)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#4617: FILE: drivers/char/heci/interrupt.c:362:
+		   && (HECI_FILE_CONNECTED == dev->iamthif_file_ext.state)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4618: FILE: drivers/char/heci/interrupt.c:363:
+		   && (HECI_FILE_CONNECTED == dev->iamthif_file_ext.state)
+		   && (dev->iamthif_state == HECI_IAMTHIF_READING)) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4631: FILE: drivers/char/heci/interrupt.c:376:
+
+	}

WARNING:TYPO_SPELLING: 'reseting' may be misspelled - perhaps 'resetting'?
#4639: FILE: drivers/char/heci/interrupt.c:384:
+		DBG("reseting due to slots overflow.\n");
 		     ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4648: FILE: drivers/char/heci/interrupt.c:393:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4657: FILE: drivers/char/heci/interrupt.c:402:
+static void heci_bh_read_bus_message(struct iamt_heci_device *dev,
+		struct heci_msg_hdr *heci_hdr)

CHECK:SPACING: No space is necessary after a cast
#4672: FILE: drivers/char/heci/interrupt.c:417:
+	buffer = (unsigned char *) dev->rd_msg_buf;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4673: FILE: drivers/char/heci/interrupt.c:418:
+	BUG_ON(heci_hdr->length >= sizeof(dev->rd_msg_buf));

CHECK:SPACING: No space is necessary after a cast
#4675: FILE: drivers/char/heci/interrupt.c:420:
+	heci_msg = (struct heci_bus_message *) buffer;

CHECK:SPACING: No space is necessary after a cast
#4677: FILE: drivers/char/heci/interrupt.c:422:
+	switch (*(__u8 *) heci_msg) {

CHECK:SPACING: No space is necessary after a cast
#4679: FILE: drivers/char/heci/interrupt.c:424:
+		version_res = (struct hbm_host_version_response *) heci_msg;

CHECK:SPACING: No space is necessary after a cast
#4692: FILE: drivers/char/heci/interrupt.c:437:
+			(struct hbm_client_connect_response *) heci_msg;

CHECK:SPACING: No space is necessary after a cast
#4700: FILE: drivers/char/heci/interrupt.c:445:
+			(struct hbm_client_connect_response *) heci_msg;

CHECK:SPACING: No space is necessary after a cast
#4707: FILE: drivers/char/heci/interrupt.c:452:
+		flow_control = (struct hbm_flow_control *) heci_msg;

CHECK:SPACING: No space is necessary after a cast
#4713: FILE: drivers/char/heci/interrupt.c:458:
+		props_res = (struct hbm_props_response *) heci_msg;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4715: FILE: drivers/char/heci/interrupt.c:460:
+			BUG();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4726: FILE: drivers/char/heci/interrupt.c:471:
+
+		}

CHECK:SPACING: No space is necessary after a cast
#4731: FILE: drivers/char/heci/interrupt.c:476:
+		enum_res = (struct hbm_host_enum_response *) heci_msg;

WARNING:TYPO_SPELLING: 'reseting' may be misspelled - perhaps 'resetting'?
#4738: FILE: drivers/char/heci/interrupt.c:483:
+		DBG("reseting because of FW stop response.\n");
 		     ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#4745: FILE: drivers/char/heci/interrupt.c:490:
+			(struct hbm_client_disconnect_request *) heci_msg;

CHECK:SPACING: No space is necessary after a cast
#4751: FILE: drivers/char/heci/interrupt.c:496:
+		heci_hdr = (struct heci_msg_hdr *) &dev->ext_msg_buf[0];

CHECK:SPACING: No space is necessary after a cast
#4758: FILE: drivers/char/heci/interrupt.c:503:
+			(struct hbm_host_stop_request *) &dev->ext_msg_buf[1];

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4768: FILE: drivers/char/heci/interrupt.c:513:
+		BUG();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4771: FILE: drivers/char/heci/interrupt.c:516:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4785: FILE: drivers/char/heci/interrupt.c:530:
+static int heci_bh_read_pthi_message(struct io_heci_list *complete_list,
+		struct iamt_heci_device *dev,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4792: FILE: drivers/char/heci/interrupt.c:537:
+	BUG_ON(heci_hdr->me_addr != dev->iamthif_file_ext.me_client_id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4793: FILE: drivers/char/heci/interrupt.c:538:
+	BUG_ON(dev->iamthif_state != HECI_IAMTHIF_READING);

CHECK:SPACING: No space is necessary after a cast
#4795: FILE: drivers/char/heci/interrupt.c:540:
+	buffer = (unsigned char *) (dev->iamthif_msg_buf +

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4797: FILE: drivers/char/heci/interrupt.c:542:
+	BUG_ON(sizeof(dev->iamthif_msg_buf) <

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->iamthif_ioctl'
#4822: FILE: drivers/char/heci/interrupt.c:567:
+	if ((dev->iamthif_ioctl) && (file_ext == &dev->iamthif_file_ext)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext == &dev->iamthif_file_ext'
#4822: FILE: drivers/char/heci/interrupt.c:567:
+	if ((dev->iamthif_ioctl) && (file_ext == &dev->iamthif_file_ext)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4843: FILE: drivers/char/heci/interrupt.c:588:
+static int _heci_bh_state_ok(struct heci_file_private *file_ext,
+					struct heci_msg_hdr *heci_hdr)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4846: FILE: drivers/char/heci/interrupt.c:591:
+	return ((file_ext->host_client_id == heci_hdr->host_addr)
+		&& (file_ext->me_client_id == heci_hdr->me_addr)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4847: FILE: drivers/char/heci/interrupt.c:592:
+		&& (file_ext->me_client_id == heci_hdr->me_addr)
+		&& (file_ext->state == HECI_FILE_CONNECTED)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4848: FILE: drivers/char/heci/interrupt.c:593:
+		&& (file_ext->state == HECI_FILE_CONNECTED)
+		&& (HECI_READ_COMPLETE != file_ext->reading_state));

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#4848: FILE: drivers/char/heci/interrupt.c:593:
+		&& (HECI_READ_COMPLETE != file_ext->reading_state));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4862: FILE: drivers/char/heci/interrupt.c:607:
+static int heci_bh_read_client_message(struct io_heci_list *complete_list,
+		struct iamt_heci_device *dev,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->read_list.status == 0'
#4870: FILE: drivers/char/heci/interrupt.c:615:
+	if (!((dev->read_list.status == 0) &&
+	      !list_empty(&dev->read_list.heci_cb.cb_list)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4875: FILE: drivers/char/heci/interrupt.c:620:
+	list_for_each_entry_safe(priv_cb_pos, priv_cb_next,
+			&dev->read_list.heci_cb.cb_list, cb_list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext != NULL'
#4878: FILE: drivers/char/heci/interrupt.c:623:
+		if ((file_ext != NULL) &&
+		    (_heci_bh_state_ok(file_ext, heci_hdr))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file_ext"
#4878: FILE: drivers/char/heci/interrupt.c:623:
+		if ((file_ext != NULL) &&

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4885: FILE: drivers/char/heci/interrupt.c:630:
+			BUG_ON(priv_cb_pos->response_buffer.size <

WARNING:SPLIT_STRING: quoted string split across lines
#4907: FILE: drivers/char/heci/interrupt.c:652:
+				DBG("completed read host client = %d,"
+					"ME client = %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#4908: FILE: drivers/char/heci/interrupt.c:653:
+					"ME client = %d, "
+					"data length = %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4916: FILE: drivers/char/heci/interrupt.c:661:
+				DBG("priv_cb_pos->res_buffer - %s\n",
+					priv_cb_pos->response_buffer.data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4918: FILE: drivers/char/heci/interrupt.c:663:
+				list_add_tail(&priv_cb_pos->cb_list,
+					&complete_list->heci_cb.cb_list);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4926: FILE: drivers/char/heci/interrupt.c:671:
+
+	}

CHECK:SPACING: No space is necessary after a cast
#4931: FILE: drivers/char/heci/interrupt.c:676:
+		heci_read_slots(dev, (unsigned char *) dev->rd_msg_buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4932: FILE: drivers/char/heci/interrupt.c:677:
+		heci_read_slots(dev, (unsigned char *) dev->rd_msg_buf,
+						heci_hdr->length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4934: FILE: drivers/char/heci/interrupt.c:679:
+		DBG("discarding message, header=%08x.\n",
+				*(__u32 *) dev->rd_msg_buf);

CHECK:SPACING: No space is necessary after a cast
#4934: FILE: drivers/char/heci/interrupt.c:679:
+				*(__u32 *) dev->rd_msg_buf);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4950: FILE: drivers/char/heci/interrupt.c:695:
+{
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4984: FILE: drivers/char/heci/interrupt.c:729:
+static int _heci_bh_close(struct iamt_heci_device *dev,	__s32 *slots,
+			struct heci_cb_private *priv_cb_pos,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4997: FILE: drivers/char/heci/interrupt.c:742:
+			list_move_tail(&priv_cb_pos->cb_list,
+					&cmpl_list->heci_cb.cb_list);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#4999: FILE: drivers/char/heci/interrupt.c:744:
+			return -ECOMPLETE_MESSAGE;
+		} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5004: FILE: drivers/char/heci/interrupt.c:749:
+			list_move_tail(&priv_cb_pos->cb_list,
+					&dev->ctrl_rd_list.heci_cb.cb_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5027: FILE: drivers/char/heci/interrupt.c:772:
+static int _heci_bh_read(struct iamt_heci_device *dev,	__s32 *slots,
+			struct heci_cb_private *priv_cb_pos,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5039: FILE: drivers/char/heci/interrupt.c:784:
+			list_move_tail(&priv_cb_pos->cb_list,
+					&cmpl_list->heci_cb.cb_list);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#5041: FILE: drivers/char/heci/interrupt.c:786:
+			return -ENODEV;
+		} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5043: FILE: drivers/char/heci/interrupt.c:788:
+			list_move_tail(&priv_cb_pos->cb_list,
+					&dev->read_list.heci_cb.cb_list);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5054: FILE: drivers/char/heci/interrupt.c:799:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5067: FILE: drivers/char/heci/interrupt.c:812:
+static int _heci_bh_ioctl(struct iamt_heci_device *dev,	__s32 *slots,
+			struct heci_cb_private *priv_cb_pos,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#5081: FILE: drivers/char/heci/interrupt.c:826:
+			return -ENODEV;
+		} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5083: FILE: drivers/char/heci/interrupt.c:828:
+			list_move_tail(&priv_cb_pos->cb_list,
+				&dev->ctrl_rd_list.heci_cb.cb_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5107: FILE: drivers/char/heci/interrupt.c:852:
+static int _heci_bh_cmpl(struct iamt_heci_device *dev,	__s32 *slots,
+			struct heci_cb_private *priv_cb_pos,

CHECK:SPACING: No space is necessary after a cast
#5116: FILE: drivers/char/heci/interrupt.c:861:
+		heci_hdr = (struct heci_msg_hdr *) &dev->wr_msg_buf[0];

WARNING:SPLIT_STRING: quoted string split across lines
#5124: FILE: drivers/char/heci/interrupt.c:869:
+		DBG("priv_cb_pos->request_buffer.size =%d"
+			"heci_hdr->msg_complete= %d\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#5124: FILE: drivers/char/heci/interrupt.c:869:
+		DBG("priv_cb_pos->request_buffer.size =%d"
+			"heci_hdr->msg_complete= %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5128: FILE: drivers/char/heci/interrupt.c:873:
+		DBG("priv_cb_pos->information  =%lu\n",
+				priv_cb_pos->information);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5130: FILE: drivers/char/heci/interrupt.c:875:
+		DBG("heci_hdr->length  =%d\n",
+				heci_hdr->length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5134: FILE: drivers/char/heci/interrupt.c:879:
+		if (!heci_write_message(dev, heci_hdr,
+				(unsigned char *)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5140: FILE: drivers/char/heci/interrupt.c:885:
+			list_move_tail(&priv_cb_pos->cb_list,
+				&cmpl_list->heci_cb.cb_list);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#5142: FILE: drivers/char/heci/interrupt.c:887:
+			return -ENODEV;
+		} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5147: FILE: drivers/char/heci/interrupt.c:892:
+			list_move_tail(&priv_cb_pos->cb_list,
+				&dev->write_waiting_list.heci_cb.cb_list);

CHECK:SPACING: No space is necessary after a cast
#5151: FILE: drivers/char/heci/interrupt.c:896:
+		heci_hdr = (struct heci_msg_hdr *) &dev->wr_msg_buf[0];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5168: FILE: drivers/char/heci/interrupt.c:913:
+			list_move_tail(&priv_cb_pos->cb_list,
+				&cmpl_list->heci_cb.cb_list);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#5170: FILE: drivers/char/heci/interrupt.c:915:
+			return -ENODEV;
+		} else {

WARNING:SPLIT_STRING: quoted string split across lines
#5173: FILE: drivers/char/heci/interrupt.c:918:
+			DBG("priv_cb_pos->request_buffer.size =%d"
+					" heci_hdr->msg_complete= %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5177: FILE: drivers/char/heci/interrupt.c:922:
+			DBG("priv_cb_pos->information  =%lu\n",
+					priv_cb_pos->information);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5200: FILE: drivers/char/heci/interrupt.c:945:
+static int _heci_bh_cmpl_iamthif(struct iamt_heci_device *dev, __s32 *slots,
+			struct heci_cb_private *priv_cb_pos,

CHECK:SPACING: No space is necessary after a cast
#5209: FILE: drivers/char/heci/interrupt.c:954:
+		heci_hdr = (struct heci_msg_hdr *) &dev->wr_msg_buf[0];

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#5228: FILE: drivers/char/heci/interrupt.c:973:
+			return -ENODEV;
+		} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5238: FILE: drivers/char/heci/interrupt.c:983:
+			list_move_tail(&priv_cb_pos->cb_list,
+				&dev->write_waiting_list.heci_cb.cb_list);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5240: FILE: drivers/char/heci/interrupt.c:985:
+
+		}

CHECK:SPACING: No space is necessary after a cast
#5243: FILE: drivers/char/heci/interrupt.c:988:
+		heci_hdr = (struct heci_msg_hdr *) &dev->wr_msg_buf[0];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5282: FILE: drivers/char/heci/interrupt.c:1027:
+static int heci_bh_write_handler(struct io_heci_list *cmpl_list,
+		struct iamt_heci_device *dev,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5285: FILE: drivers/char/heci/interrupt.c:1030:
+{
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'list->status == 0'
#5301: FILE: drivers/char/heci/interrupt.c:1046:
+	if ((list->status == 0)
+	    && !list_empty(&list->heci_cb.cb_list)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5302: FILE: drivers/char/heci/interrupt.c:1047:
+	if ((list->status == 0)
+	    && !list_empty(&list->heci_cb.cb_list)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5304: FILE: drivers/char/heci/interrupt.c:1049:
+		list_for_each_entry_safe(priv_cb_pos, priv_cb_next,
+				&list->heci_cb.cb_list, cb_list) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file_ext"
#5307: FILE: drivers/char/heci/interrupt.c:1052:
+			if (file_ext != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'HECI_WRITING == file_ext->writing_state'
#5310: FILE: drivers/char/heci/interrupt.c:1055:
+				if ((HECI_WRITING == file_ext->writing_state) &&
+					(priv_cb_pos->major_file_operations ==
+						HECI_WRITING) &&
+					(file_ext != &dev->iamthif_file_ext)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priv_cb_pos->major_file_operations ==
 						HECI_WRITING'
#5310: FILE: drivers/char/heci/interrupt.c:1055:
+				if ((HECI_WRITING == file_ext->writing_state) &&
+					(priv_cb_pos->major_file_operations ==
+						HECI_WRITING) &&
+					(file_ext != &dev->iamthif_file_ext)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext != &dev->iamthif_file_ext'
#5310: FILE: drivers/char/heci/interrupt.c:1055:
+				if ((HECI_WRITING == file_ext->writing_state) &&
+					(priv_cb_pos->major_file_operations ==
+						HECI_WRITING) &&
+					(file_ext != &dev->iamthif_file_ext)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#5310: FILE: drivers/char/heci/interrupt.c:1055:
+				if ((HECI_WRITING == file_ext->writing_state) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5311: FILE: drivers/char/heci/interrupt.c:1056:
+				if ((HECI_WRITING == file_ext->writing_state) &&
+					(priv_cb_pos->major_file_operations ==

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5318: FILE: drivers/char/heci/interrupt.c:1063:
+					list_add_tail(&priv_cb_pos->cb_list,
+						&cmpl_list->heci_cb.cb_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5324: FILE: drivers/char/heci/interrupt.c:1069:
+						ret = _heci_bh_iamthif_read(dev,
+									slots);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#5325: FILE: drivers/char/heci/interrupt.c:1070:
+						if (ret != 0)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5331: FILE: drivers/char/heci/interrupt.c:1076:
+
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->stop'
#5334: FILE: drivers/char/heci/interrupt.c:1079:
+	if ((dev->stop) && (!dev->wd_pending)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev->wd_pending'
#5334: FILE: drivers/char/heci/interrupt.c:1079:
+	if ((dev->stop) && (!dev->wd_pending)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5343: FILE: drivers/char/heci/interrupt.c:1088:
+		heci_write_message(dev,
+				(struct heci_msg_hdr *) &dev->ext_msg_buf[0],

CHECK:SPACING: No space is necessary after a cast
#5343: FILE: drivers/char/heci/interrupt.c:1088:
+				(struct heci_msg_hdr *) &dev->ext_msg_buf[0],

CHECK:SPACING: No space is necessary after a cast
#5344: FILE: drivers/char/heci/interrupt.c:1089:
+				(unsigned char *) &dev->ext_msg_buf[1],

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->wd_pending'
#5350: FILE: drivers/char/heci/interrupt.c:1095:
+		if ((dev->wd_pending)
+		    && flow_ctrl_creds(dev, &dev->wd_file_ext)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5351: FILE: drivers/char/heci/interrupt.c:1096:
+		if ((dev->wd_pending)
+		    && flow_ctrl_creds(dev, &dev->wd_file_ext)) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5369: FILE: drivers/char/heci/interrupt.c:1114:
+
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5379: FILE: drivers/char/heci/interrupt.c:1124:
+		list_for_each_entry_safe(priv_cb_pos, priv_cb_next,
+				&dev->ctrl_wr_list.heci_cb.cb_list, cb_list) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file_ext"
#5382: FILE: drivers/char/heci/interrupt.c:1127:
+			if (file_ext == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5418: FILE: drivers/char/heci/interrupt.c:1163:
+				BUG();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5421: FILE: drivers/char/heci/interrupt.c:1166:
+
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->write_list.status == 0'
#5424: FILE: drivers/char/heci/interrupt.c:1169:
+	if ((dev->write_list.status == 0)
+	    && !list_empty(&dev->write_list.heci_cb.cb_list)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5425: FILE: drivers/char/heci/interrupt.c:1170:
+	if ((dev->write_list.status == 0)
+	    && !list_empty(&dev->write_list.heci_cb.cb_list)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5428: FILE: drivers/char/heci/interrupt.c:1173:
+		list_for_each_entry_safe(priv_cb_pos, priv_cb_next,
+				&dev->write_list.heci_cb.cb_list, cb_list) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file_ext"
#5432: FILE: drivers/char/heci/interrupt.c:1177:
+			if (file_ext != NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#5436: FILE: drivers/char/heci/interrupt.c:1181:
+						DBG("No flow control"
+						    " credentials for client"

WARNING:SPLIT_STRING: quoted string split across lines
#5437: FILE: drivers/char/heci/interrupt.c:1182:
+						    " credentials for client"
+						    " %d, not sending.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#5453: FILE: drivers/char/heci/interrupt.c:1198:
+						DBG("No flow control"
+						    " credentials for pthi"

WARNING:SPLIT_STRING: quoted string split across lines
#5454: FILE: drivers/char/heci/interrupt.c:1199:
+						    " credentials for pthi"
+						    " client %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5459: FILE: drivers/char/heci/interrupt.c:1204:
+					ret = _heci_bh_cmpl_iamthif(dev, slots,
+								   priv_cb_pos,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5465: FILE: drivers/char/heci/interrupt.c:1210:
+
+				}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5468: FILE: drivers/char/heci/interrupt.c:1213:
+
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5473: FILE: drivers/char/heci/interrupt.c:1218:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5485: FILE: drivers/char/heci/interrupt.c:1230:
+static int is_treat_specially_client(struct heci_file_private *file_ext,
+		struct hbm_client_connect_response *rs)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext->host_client_id == rs->host_addr'
#5489: FILE: drivers/char/heci/interrupt.c:1234:
+	if ((file_ext->host_client_id == rs->host_addr) &&
+	    (file_ext->me_client_id == rs->me_addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext->me_client_id == rs->me_addr'
#5489: FILE: drivers/char/heci/interrupt.c:1234:
+	if ((file_ext->host_client_id == rs->host_addr) &&
+	    (file_ext->me_client_id == rs->me_addr)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5513: FILE: drivers/char/heci/interrupt.c:1258:
+static void heci_client_connect_response(struct iamt_heci_device *dev,
+		struct hbm_client_connect_response *rs)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5515: FILE: drivers/char/heci/interrupt.c:1260:
+{
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->wd_file_ext
#5521: FILE: drivers/char/heci/interrupt.c:1266:
+	if ((is_treat_specially_client(&(dev->wd_file_ext), rs)) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->iamthif_file_ext
#5522: FILE: drivers/char/heci/interrupt.c:1267:
+	    (is_treat_specially_client(&(dev->iamthif_file_ext), rs)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5526: FILE: drivers/char/heci/interrupt.c:1271:
+	if (dev->ctrl_rd_list.status == 0
+	    && !list_empty(&dev->ctrl_rd_list.heci_cb.cb_list)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5528: FILE: drivers/char/heci/interrupt.c:1273:
+		list_for_each_entry_safe(priv_cb_pos, priv_cb_next,
+			&dev->ctrl_rd_list.heci_cb.cb_list, cb_list) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file_ext"
#5531: FILE: drivers/char/heci/interrupt.c:1276:
+			if (file_ext == NULL) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#5535: FILE: drivers/char/heci/interrupt.c:1280:
+			if (HECI_IOCTL == priv_cb_pos->major_file_operations) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5554: FILE: drivers/char/heci/interrupt.c:1299:
+static void heci_client_disconnect_response(struct iamt_heci_device *dev,
+					struct hbm_client_connect_response *rs)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5560: FILE: drivers/char/heci/interrupt.c:1305:
+	if (dev->ctrl_rd_list.status == 0
+	    && !list_empty(&dev->ctrl_rd_list.heci_cb.cb_list)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5562: FILE: drivers/char/heci/interrupt.c:1307:
+		list_for_each_entry_safe(priv_cb_pos, priv_cb_next,
+				&dev->ctrl_rd_list.heci_cb.cb_list, cb_list) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file_ext"
#5566: FILE: drivers/char/heci/interrupt.c:1311:
+			if (file_ext == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext->host_client_id == rs->host_addr'
#5572: FILE: drivers/char/heci/interrupt.c:1317:
+			if ((file_ext->host_client_id == rs->host_addr) &&
+				(file_ext->me_client_id == rs->me_addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext->me_client_id == rs->me_addr'
#5572: FILE: drivers/char/heci/interrupt.c:1317:
+			if ((file_ext->host_client_id == rs->host_addr) &&
+				(file_ext->me_client_id == rs->me_addr)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5573: FILE: drivers/char/heci/interrupt.c:1318:
+			if ((file_ext->host_client_id == rs->host_addr) &&
+				(file_ext->me_client_id == rs->me_addr)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5574: FILE: drivers/char/heci/interrupt.c:1319:
+				(file_ext->me_client_id == rs->me_addr)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5598: FILE: drivers/char/heci/interrupt.c:1343:
+static int same_flow_addr(struct heci_file_private *file,
+					struct hbm_flow_control *flow)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5601: FILE: drivers/char/heci/interrupt.c:1346:
+	return ((file->host_client_id == flow->host_addr)
+		&& (file->me_client_id == flow->me_addr));

WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#5607: FILE: drivers/char/heci/interrupt.c:1352:
+ * @file: private data ot the file object.
                        ^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'client != NULL'
#5618: FILE: drivers/char/heci/interrupt.c:1363:
+		if ((client != NULL) &&
+		    (flow->me_addr == client->client_id)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flow->me_addr == client->client_id'
#5618: FILE: drivers/char/heci/interrupt.c:1363:
+		if ((client != NULL) &&
+		    (flow->me_addr == client->client_id)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "client"
#5618: FILE: drivers/char/heci/interrupt.c:1363:
+		if ((client != NULL) &&

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5627: FILE: drivers/char/heci/interrupt.c:1372:
+				BUG();	/* error in flow control */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5640: FILE: drivers/char/heci/interrupt.c:1385:
+static void heci_client_flow_control_response(struct iamt_heci_device *dev,
+		struct hbm_flow_control *flow_control)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5651: FILE: drivers/char/heci/interrupt.c:1396:
+		list_for_each_entry_safe(file_pos, file_next,
+				&dev->file_list, link) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5685: FILE: drivers/char/heci/interrupt.c:1430:
+	return ((file->host_client_id == disconn->host_addr)
+		&& (file->me_client_id == disconn->me_addr));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5695: FILE: drivers/char/heci/interrupt.c:1440:
+static void heci_client_disconnect_request(struct iamt_heci_device *dev,
+		struct hbm_client_disconnect_request *disconnect_req)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5705: FILE: drivers/char/heci/interrupt.c:1450:
+			DBG("disconnect request host client %d ME client %d.\n",
+					disconnect_req->host_addr,

CHECK:BRACES: braces {} should be used on all arms of this statement
#5709: FILE: drivers/char/heci/interrupt.c:1454:
+			if (file_pos == &dev->wd_file_ext) {
[...]
+			} else if (file_pos == &dev->iamthif_file_ext)
[...]

CHECK:SPACING: No space is necessary after a cast
#5717: FILE: drivers/char/heci/interrupt.c:1462:
+				(struct heci_msg_hdr *) &dev->ext_msg_buf[0];

CHECK:SPACING: No space is necessary after a cast
#5730: FILE: drivers/char/heci/interrupt.c:1475:
+			*(__u8 *) (&disconnect_res->cmd) =

CHECK:SPACING: No space is necessary after a cast
#5748: FILE: drivers/char/heci/interrupt.c:1493:
+	struct iamt_heci_device *dev = (struct iamt_heci_device *) data;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->wd_due_counter != 0'
#5763: FILE: drivers/char/heci/interrupt.c:1508:
+	if ((dev->wd_due_counter != 0) && (dev->wd_bypass == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->wd_bypass == 0'
#5763: FILE: drivers/char/heci/interrupt.c:1508:
+	if ((dev->wd_due_counter != 0) && (dev->wd_bypass == 0)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#5765: FILE: drivers/char/heci/interrupt.c:1510:
+			if (dev->host_buffer_is_empty &&
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5780: FILE: drivers/char/heci/interrupt.c:1525:
+			} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5783: FILE: drivers/char/heci/interrupt.c:1528:
+
+		}

WARNING:TYPO_SPELLING: 'reseting' may be misspelled - perhaps 'resetting'?
#5787: FILE: drivers/char/heci/interrupt.c:1532:
+			DBG("reseting because of hang to PTHI.\n");
 			     ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5815: FILE: drivers/char/heci/io_heci.c:1:
+/*

WARNING:TYPO_SPELLING: 'MERCHANTIBILITY' may be misspelled - perhaps 'MERCHANTABILITY'?
#5843: FILE: drivers/char/heci/io_heci.c:29:
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
                                          ^^^^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5880: FILE: drivers/char/heci/io_heci.c:66:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'if_num != HECI_MINOR_NUMBER'
#5901: FILE: drivers/char/heci/io_heci.c:87:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev)
+	    || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#5901: FILE: drivers/char/heci/io_heci.c:87:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev)
+	    || (!file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!file_ext'
#5901: FILE: drivers/char/heci/io_heci.c:87:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev)
+	    || (!file_ext))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5902: FILE: drivers/char/heci/io_heci.c:88:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev)
+	    || (!file_ext))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res_msg.data)...) over kmalloc(sizeof(struct heci_driver_version)...)
#5910: FILE: drivers/char/heci/io_heci.c:96:
+	res_msg.data = kmalloc(sizeof(struct heci_driver_version), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#5913: FILE: drivers/char/heci/io_heci.c:99:
+		    (int) sizeof(struct heci_driver_version));

CHECK:SPACING: No space is necessary after a cast
#5917: FILE: drivers/char/heci/io_heci.c:103:
+	version = (struct heci_driver_version *) res_msg.data;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'if_num != HECI_MINOR_NUMBER'
#5968: FILE: drivers/char/heci/io_heci.c:154:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#5968: FILE: drivers/char/heci/io_heci.c:154:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!file'
#5968: FILE: drivers/char/heci/io_heci.c:154:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file))

WARNING:SPLIT_STRING: quoted string split across lines
#5977: FILE: drivers/char/heci/io_heci.c:163:
+		DBG("user buffer size is not equal to size of struct "
+				"guid(16).\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*req_msg.data)...) over kmalloc(sizeof(struct guid)...)
#5984: FILE: drivers/char/heci/io_heci.c:170:
+	req_msg.data = kmalloc(sizeof(struct guid), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res_msg.data)...) over kmalloc(sizeof(struct heci_client)...)
#5985: FILE: drivers/char/heci/io_heci.c:171:
+	res_msg.data = kmalloc(sizeof(struct heci_client), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#5989: FILE: drivers/char/heci/io_heci.c:175:
+		    (int) sizeof(struct heci_client));

CHECK:SPACING: No space is necessary after a cast
#5995: FILE: drivers/char/heci/io_heci.c:181:
+		    (int) sizeof(struct guid));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*priv_cb)...) over kzalloc(sizeof(struct heci_cb_private)...)
#6010: FILE: drivers/char/heci/io_heci.c:196:
+	priv_cb = kzalloc(sizeof(struct heci_cb_private), GFP_KERNEL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext->state != HECI_FILE_INITIALIZING'
#6027: FILE: drivers/char/heci/io_heci.c:213:
+	if ((file_ext->state != HECI_FILE_INITIALIZING) &&
+	    (file_ext->state != HECI_FILE_DISCONNECTED)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext->state != HECI_FILE_DISCONNECTED'
#6027: FILE: drivers/char/heci/io_heci.c:213:
+	if ((file_ext->state != HECI_FILE_INITIALIZING) &&
+	    (file_ext->state != HECI_FILE_DISCONNECTED)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6037: FILE: drivers/char/heci/io_heci.c:223:
+		if (memcmp((struct guid *)req_msg.data,
+			    &dev->me_clients[i].props.protocol_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6051: FILE: drivers/char/heci/io_heci.c:237:
+	if (memcmp((struct guid *)req_msg.data, &heci_pthi_guid,
+				sizeof(struct guid)) == 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6060: FILE: drivers/char/heci/io_heci.c:246:
+		list_for_each_entry_safe(file_pos,
+		    file_next, &dev->file_list, link) {

WARNING:SPLIT_STRING: quoted string split across lines
#6063: FILE: drivers/char/heci/io_heci.c:249:
+				DBG("remove file private data node host"
+				    " client = %d, ME client = %d.\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#6069: FILE: drivers/char/heci/io_heci.c:255:
+
+		}

CHECK:SPACING: No space is necessary after a cast
#6074: FILE: drivers/char/heci/io_heci.c:260:
+		client = (struct heci_client *) res_msg.data;

CHECK:SPACING: No space is necessary after a cast
#6102: FILE: drivers/char/heci/io_heci.c:288:
+	client = (struct heci_client *) res_msg.data;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#6106: FILE: drivers/char/heci/io_heci.c:292:
+	if (dev->host_buffer_is_empty
+	    && !other_client_is_connecting(dev, file_ext)) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dev->ctrl_rd_list.heci_cb.cb_list'
#6117: FILE: drivers/char/heci/io_heci.c:303:
+				      &dev->ctrl_rd_list.heci_cb.
+				      cb_list);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6120: FILE: drivers/char/heci/io_heci.c:306:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6129: FILE: drivers/char/heci/io_heci.c:315:
+	err = wait_event_timeout(dev->wait_recvd_msg,
+			(HECI_FILE_CONNECTED == file_ext->state

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#6129: FILE: drivers/char/heci/io_heci.c:315:
+			(HECI_FILE_CONNECTED == file_ext->state

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#6130: FILE: drivers/char/heci/io_heci.c:316:
+			(HECI_FILE_CONNECTED == file_ext->state
+			 || HECI_FILE_DISCONNECTED == file_ext->state),

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#6133: FILE: drivers/char/heci/io_heci.c:319:
+	if (HECI_FILE_CONNECTED == file_ext->state) {

WARNING:SPLIT_STRING: quoted string split across lines
#6151: FILE: drivers/char/heci/io_heci.c:337:
+			DBG("wait_event_interruptible_timeout failed on client"
+			    " connect message fw response message.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6253: FILE: drivers/char/heci/io_heci.c:439:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6265: FILE: drivers/char/heci/io_heci.c:451:
+int heci_ioctl_bypass_wd(struct iamt_heci_device *dev, int if_num,
+		  struct heci_message_data k_msg,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6302: FILE: drivers/char/heci/io_heci.c:488:
+struct heci_cb_private *find_pthi_read_list_entry(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->pthi_read_complete_list.status == 0'
#6310: FILE: drivers/char/heci/io_heci.c:496:
+	if ((dev->pthi_read_complete_list.status == 0) &&
+	    !list_empty(&dev->pthi_read_complete_list.heci_cb.cb_list)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6313: FILE: drivers/char/heci/io_heci.c:499:
+		list_for_each_entry_safe(priv_cb_pos, priv_cb_next,
+		    &dev->pthi_read_complete_list.heci_cb.cb_list, cb_list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext_temp != NULL'
#6316: FILE: drivers/char/heci/io_heci.c:502:
+			if ((file_ext_temp != NULL) &&
+			    (file_ext_temp == &dev->iamthif_file_ext) &&
+			    (priv_cb_pos->file_object == file))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext_temp == &dev->iamthif_file_ext'
#6316: FILE: drivers/char/heci/io_heci.c:502:
+			if ((file_ext_temp != NULL) &&
+			    (file_ext_temp == &dev->iamthif_file_ext) &&
+			    (priv_cb_pos->file_object == file))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priv_cb_pos->file_object == file'
#6316: FILE: drivers/char/heci/io_heci.c:502:
+			if ((file_ext_temp != NULL) &&
+			    (file_ext_temp == &dev->iamthif_file_ext) &&
+			    (priv_cb_pos->file_object == file))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file_ext_temp"
#6316: FILE: drivers/char/heci/io_heci.c:502:
+			if ((file_ext_temp != NULL) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'if_num != HECI_MINOR_NUMBER'
#6349: FILE: drivers/char/heci/io_heci.c:535:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#6349: FILE: drivers/char/heci/io_heci.c:535:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext == NULL'
#6352: FILE: drivers/char/heci/io_heci.c:538:
+	if ((file_ext == NULL) || (file_ext != &dev->iamthif_file_ext))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext != &dev->iamthif_file_ext'
#6352: FILE: drivers/char/heci/io_heci.c:538:
+	if ((file_ext == NULL) || (file_ext != &dev->iamthif_file_ext))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file_ext"
#6352: FILE: drivers/char/heci/io_heci.c:538:
+	if ((file_ext == NULL) || (file_ext != &dev->iamthif_file_ext))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6361: FILE: drivers/char/heci/io_heci.c:547:
+	BUG_ON(dev->me_clients[i].client_id != file_ext->me_client_id);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == dev->num_heci_me_clients'
#6362: FILE: drivers/char/heci/io_heci.c:548:
+	if ((i == dev->num_heci_me_clients)
+	    || (dev->me_clients[i].client_id !=
+		dev->iamthif_file_ext.me_client_id)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->me_clients[i].client_id !=
 		dev->iamthif_file_ext.me_client_id'
#6362: FILE: drivers/char/heci/io_heci.c:548:
+	if ((i == dev->num_heci_me_clients)
+	    || (dev->me_clients[i].client_id !=
+		dev->iamthif_file_ext.me_client_id)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#6363: FILE: drivers/char/heci/io_heci.c:549:
+	if ((i == dev->num_heci_me_clients)
+	    || (dev->me_clients[i].client_id !=

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#6373: FILE: drivers/char/heci/io_heci.c:559:
+		return 0; /* No more data to read */
+	} else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priv_cb->information >= *offset'
#6383: FILE: drivers/char/heci/io_heci.c:569:
+		if ((priv_cb->information >= *offset)  &&
+		    (length >= (priv_cb->information - *offset)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6387: FILE: drivers/char/heci/io_heci.c:573:
+		else if ((priv_cb->information > 0) &&
+		    (priv_cb->information <= *offset)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6405: FILE: drivers/char/heci/io_heci.c:591:
+	 * the information may be longer */

CHECK:BRACES: Unbalanced braces around else statement
#6413: FILE: drivers/char/heci/io_heci.c:599:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'if_num != HECI_MINOR_NUMBER'
#6444: FILE: drivers/char/heci/io_heci.c:630:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#6444: FILE: drivers/char/heci/io_heci.c:630:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!file_ext'
#6444: FILE: drivers/char/heci/io_heci.c:630:
+	if ((if_num != HECI_MINOR_NUMBER) || (!dev) || (!file_ext)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext->read_pending'
#6458: FILE: drivers/char/heci/io_heci.c:644:
+	if ((file_ext->read_pending) || (file_ext->read_cb != NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext->read_cb != NULL'
#6458: FILE: drivers/char/heci/io_heci.c:644:
+	if ((file_ext->read_pending) || (file_ext->read_cb != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file_ext->read_cb"
#6458: FILE: drivers/char/heci/io_heci.c:644:
+	if ((file_ext->read_pending) || (file_ext->read_cb != NULL)) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*priv_cb)...) over kzalloc(sizeof(struct heci_cb_private)...)
#6462: FILE: drivers/char/heci/io_heci.c:648:
+	priv_cb = kzalloc(sizeof(struct heci_cb_private), GFP_KERNEL);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#6474: FILE: drivers/char/heci/io_heci.c:660:
+
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6476: FILE: drivers/char/heci/io_heci.c:662:
+	BUG_ON(dev->me_clients[i].client_id != file_ext->me_client_id);

CHECK:SPACING: No space is necessary after a cast
#6494: FILE: drivers/char/heci/io_heci.c:680:
+	priv_cb->file_private = (void *) file_ext;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dev'
#6533: FILE: drivers/char/heci/io_heci.c:719:
+	if ((!dev) || (!priv_cb))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!priv_cb'
#6533: FILE: drivers/char/heci/io_heci.c:719:
+	if ((!dev) || (!priv_cb))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6545: FILE: drivers/char/heci/io_heci.c:731:
+	memcpy(dev->iamthif_msg_buf, priv_cb->request_buffer.data,
+	    priv_cb->request_buffer.size);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->iamthif_msg_buf'
#6566: FILE: drivers/char/heci/io_heci.c:752:
+		if (!heci_write_message(dev, &heci_hdr,
+					(unsigned char *)(dev->iamthif_msg_buf),
+					heci_hdr.length))

WARNING:SPLIT_STRING: quoted string split across lines
#6582: FILE: drivers/char/heci/io_heci.c:768:
+			DBG("message does not complete, "
+					"so add pthi cb to write list.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#6591: FILE: drivers/char/heci/io_heci.c:777:
+		DBG("No flow control credentials, "
+				"so add iamthif cb to write list.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6628: FILE: drivers/char/heci/io_heci.c:814:
+		list_for_each_entry_safe(priv_cb_pos, priv_cb_next,
+		    &dev->pthi_cmd_list.heci_cb.cb_list, cb_list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext_tmp != NULL'
#6633: FILE: drivers/char/heci/io_heci.c:819:
+			if ((file_ext_tmp != NULL) &&
+			    (file_ext_tmp == &dev->iamthif_file_ext)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file_ext_tmp == &dev->iamthif_file_ext'
#6633: FILE: drivers/char/heci/io_heci.c:819:
+			if ((file_ext_tmp != NULL) &&
+			    (file_ext_tmp == &dev->iamthif_file_ext)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file_ext_tmp"
#6633: FILE: drivers/char/heci/io_heci.c:819:
+			if ((file_ext_tmp != NULL) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6638: FILE: drivers/char/heci/io_heci.c:824:
+					DBG("pthi write failed status = %d\n",
+							status);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv_cb"
#6654: FILE: drivers/char/heci/io_heci.c:840:
+	if (priv_cb == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000241658.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 189 warnings, 479 checks, 6509 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000241658.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
