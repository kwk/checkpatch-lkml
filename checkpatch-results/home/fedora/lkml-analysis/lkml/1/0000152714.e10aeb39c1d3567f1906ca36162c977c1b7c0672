CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!child"
#70: FILE: drivers/gpu/drm/drm_mm.c:89:
+	if (unlikely(child == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#72: FILE: drivers/gpu/drm/drm_mm.c:91:
+		if (list_empty(&mm->unused_nodes))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#74: FILE: drivers/gpu/drm/drm_mm.c:93:
+		else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node"
#96: FILE: drivers/gpu/drm/drm_mm.c:115:
+		if (unlikely(node == NULL)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#98: FILE: drivers/gpu/drm/drm_mm.c:117:
+			int ret = (mm->num_unused < 2) ? -ENOMEM : 0;
+			spin_unlock(&mm->unused_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!child"
#121: FILE: drivers/gpu/drm/drm_mm.c:135:
+	if (unlikely(child == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!child"
#158: FILE: drivers/gpu/drm/drm_mm.c:171:
+	if (unlikely(child == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!align_splitoff"
#170: FILE: drivers/gpu/drm/drm_mm.c:205:
+		if (unlikely(align_splitoff == NULL))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#192: FILE: drivers/gpu/drm/drm_mm.c:227:
+					    unsigned alignment)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#194: FILE: drivers/gpu/drm/drm_mm.c:229:
+{
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#197: FILE: drivers/gpu/drm/drm_mm.c:232:
+	unsigned tmp = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!align_splitoff"
#205: FILE: drivers/gpu/drm/drm_mm.c:240:
+		if (unlikely(align_splitoff == NULL))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#213: FILE: drivers/gpu/drm/drm_mm.c:248:
+		return parent;
+	} else {

CHECK:BRACES: Unbalanced braces around else statement
#261: FILE: drivers/gpu/drm/drm_mm.c:295:
+				} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#271: FILE: drivers/gpu/drm/drm_mm.c:309:
+		if (mm->num_unused < MM_UNUSED_TARGET) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#274: FILE: drivers/gpu/drm/drm_mm.c:312:
+		} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#286: FILE: drivers/gpu/drm/drm_mm.c:321:
+				       unsigned alignment, int best_match)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#349: FILE: drivers/gpu/drm/drm_mm.c:406:
+	BUG_ON(mm->num_unused != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#355: FILE: include/drm/drm_mm.h:1:
+/**************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#410: FILE: include/drm/drm_mm.h:56:
+	spinlock_t unused_lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#417: FILE: include/drm/drm_mm.h:63:
+extern struct drm_mm_node *drm_mm_get_block(struct drm_mm_node *parent,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#419: FILE: include/drm/drm_mm.h:65:
+					    unsigned alignment);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#420: FILE: include/drm/drm_mm.h:66:
+extern struct drm_mm_node *drm_mm_get_block_atomic(struct drm_mm_node *parent,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#422: FILE: include/drm/drm_mm.h:68:
+						   unsigned alignment);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#423: FILE: include/drm/drm_mm.h:69:
+extern void drm_mm_put_block(struct drm_mm_node *cur);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#424: FILE: include/drm/drm_mm.h:70:
+extern struct drm_mm_node *drm_mm_search_free(const struct drm_mm *mm,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#426: FILE: include/drm/drm_mm.h:72:
+					      unsigned alignment,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#428: FILE: include/drm/drm_mm.h:74:
+extern int drm_mm_init(struct drm_mm *mm, unsigned long start,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#430: FILE: include/drm/drm_mm.h:76:
+extern void drm_mm_takedown(struct drm_mm *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#431: FILE: include/drm/drm_mm.h:77:
+extern int drm_mm_clean(struct drm_mm *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#432: FILE: include/drm/drm_mm.h:78:
+extern unsigned long drm_mm_tail_space(struct drm_mm *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#433: FILE: include/drm/drm_mm.h:79:
+extern int drm_mm_remove_space_from_tail(struct drm_mm *mm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#435: FILE: include/drm/drm_mm.h:81:
+extern int drm_mm_add_space_to_tail(struct drm_mm *mm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#437: FILE: include/drm/drm_mm.h:83:
+extern int drm_mm_pre_get(struct drm_mm *mm);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152714.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 24 checks, 438 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152714.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
