CHECK:SPACING: No space is necessary after a cast
#161: FILE: drivers/dma/ioat/dma.c:150:
+				  (unsigned long) ioat);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#274: FILE: drivers/dma/ioat/dma.c:228:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'chan->last_completion == chan->watchdog_completion'
#322: FILE: drivers/dma/ioat/dma.c:306:
+		if (/* have we started processing anything yet */
+		    chan->last_completion
+		    /* have we completed any since last watchdog cycle? */
 		    && (chan->last_completion == chan->watchdog_completion)
+		    /* has TCP stuck on one cookie since last watchdog? */
 		    && (chan->watchdog_tcp_cookie == chan->watchdog_last_tcp_cookie)
 		    && (chan->watchdog_tcp_cookie != chan->completed_cookie)
+		    /* is there something in the chain to be processed? */
+		    /* CB1 chain always has at least the last one processed */
 		    && (ioat->used_desc.prev != ioat->used_desc.next)
 		    && ioat->pending == 0) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'chan->watchdog_tcp_cookie == chan->watchdog_last_tcp_cookie'
#322: FILE: drivers/dma/ioat/dma.c:306:
+		if (/* have we started processing anything yet */
+		    chan->last_completion
+		    /* have we completed any since last watchdog cycle? */
 		    && (chan->last_completion == chan->watchdog_completion)
+		    /* has TCP stuck on one cookie since last watchdog? */
 		    && (chan->watchdog_tcp_cookie == chan->watchdog_last_tcp_cookie)
 		    && (chan->watchdog_tcp_cookie != chan->completed_cookie)
+		    /* is there something in the chain to be processed? */
+		    /* CB1 chain always has at least the last one processed */
 		    && (ioat->used_desc.prev != ioat->used_desc.next)
 		    && ioat->pending == 0) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'chan->watchdog_tcp_cookie != chan->completed_cookie'
#322: FILE: drivers/dma/ioat/dma.c:306:
+		if (/* have we started processing anything yet */
+		    chan->last_completion
+		    /* have we completed any since last watchdog cycle? */
 		    && (chan->last_completion == chan->watchdog_completion)
+		    /* has TCP stuck on one cookie since last watchdog? */
 		    && (chan->watchdog_tcp_cookie == chan->watchdog_last_tcp_cookie)
 		    && (chan->watchdog_tcp_cookie != chan->completed_cookie)
+		    /* is there something in the chain to be processed? */
+		    /* CB1 chain always has at least the last one processed */
 		    && (ioat->used_desc.prev != ioat->used_desc.next)
 		    && ioat->pending == 0) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ioat->used_desc.prev != ioat->used_desc.next'
#322: FILE: drivers/dma/ioat/dma.c:306:
+		if (/* have we started processing anything yet */
+		    chan->last_completion
+		    /* have we completed any since last watchdog cycle? */
 		    && (chan->last_completion == chan->watchdog_completion)
+		    /* has TCP stuck on one cookie since last watchdog? */
 		    && (chan->watchdog_tcp_cookie == chan->watchdog_last_tcp_cookie)
 		    && (chan->watchdog_tcp_cookie != chan->completed_cookie)
+		    /* is there something in the chain to be processed? */
+		    /* CB1 chain always has at least the last one processed */
 		    && (ioat->used_desc.prev != ioat->used_desc.next)
 		    && ioat->pending == 0) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#838: FILE: drivers/dma/ioat/dma.c:679:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#908: FILE: drivers/dma/ioat/dma.c:749:
+			       chan->last_completion_time + HZ*WATCHDOG_DELAY)) {
 			                                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around chan->device->work.work
#909: FILE: drivers/dma/ioat/dma.c:750:
+			ioat1_chan_watchdog(&(chan->device->work.work));

CHECK:SPACING: No space is necessary after a cast
#1128: FILE: drivers/dma/ioat/dma.c:854:
+	writel(((u64) desc->txd.phys) & 0x00000000FFFFFFFF,

CHECK:SPACING: No space is necessary after a cast
#1130: FILE: drivers/dma/ioat/dma.c:856:
+	writel(((u64) desc->txd.phys) >> 32,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1318: FILE: drivers/dma/ioat/dma.h:111:
 
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1392: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1397: FILE: drivers/dma/ioat/dma_v2.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1411: FILE: drivers/dma/ioat/dma_v2.c:15:
+ * this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1412: FILE: drivers/dma/ioat/dma_v2.c:16:
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1454: FILE: drivers/dma/ioat/dma_v2.c:58:
+
+}

CHECK:SPACING: No space is necessary after a cast
#1514: FILE: drivers/dma/ioat/dma_v2.c:118:
+	writel(((u64) desc->txd.phys) & 0x00000000FFFFFFFF,

CHECK:SPACING: No space is necessary after a cast
#1516: FILE: drivers/dma/ioat/dma_v2.c:120:
+	writel(((u64) desc->txd.phys) >> 32,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1554: FILE: drivers/dma/ioat/dma_v2.c:158:
+	if (ioat2_ring_pending(ioat)) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#1558: FILE: drivers/dma/ioat/dma_v2.c:162:
+		writel(((u64) desc->txd.phys) & 0x00000000FFFFFFFF,

CHECK:SPACING: No space is necessary after a cast
#1560: FILE: drivers/dma/ioat/dma_v2.c:164:
+		writel(((u64) desc->txd.phys) >> 32,

CHECK:BRACES: Unbalanced braces around else statement
#1563: FILE: drivers/dma/ioat/dma_v2.c:167:
+	} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1640: FILE: drivers/dma/ioat/dma_v2.c:244:
+		    chan->last_completion == chan->watchdog_completion) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1641: FILE: drivers/dma/ioat/dma_v2.c:245:
+			if (ioat->pending == 1)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1643: FILE: drivers/dma/ioat/dma_v2.c:247:
+			else {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1683: FILE: drivers/dma/ioat/dma_v2.c:287:
+			tmo = chan->last_completion_time + HZ*WATCHDOG_DELAY;
 			                                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around chan->device->work.work
#1685: FILE: drivers/dma/ioat/dma_v2.c:289:
+				ioat2_chan_watchdog(&(chan->device->work.work));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1714: FILE: drivers/dma/ioat/dma_v2.c:318:
+	BUG_ON(!seen_current); /* no active descs have written a completion? */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#1724: FILE: drivers/dma/ioat/dma_v2.c:328:
+	struct ioat2_dma_chan *ioat = (void *) data;

CHECK:SPACING: No space is necessary after a cast
#1762: FILE: drivers/dma/ioat/dma_v2.c:366:
+				  (unsigned long) ioat);

CHECK:SPACING: No space is necessary after a cast
#1860: FILE: drivers/dma/ioat/dma_v2.c:464:
+	writel(((u64) chan->completion_addr) & 0x00000000FFFFFFFF,

CHECK:SPACING: No space is necessary after a cast
#1862: FILE: drivers/dma/ioat/dma_v2.c:466:
+	writel(((u64) chan->completion_addr) >> 32,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1883: FILE: drivers/dma/ioat/dma_v2.c:487:
+	for (i = 0; i < descs-1; i++) {
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1884: FILE: drivers/dma/ioat/dma_v2.c:488:
+		struct ioat_ring_ent *next = ring[i+1];
 		                                   ^

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#1917: FILE: drivers/dma/ioat/dma_v2.c:521:
+		if (printk_ratelimit())

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 26)
#1952: FILE: drivers/dma/ioat/dma_v2.c:556:
+	if (likely(num_descs) &&
[...]
+		/* pass */;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2048: FILE: drivers/dma/ioat/dma_v2.c:652:
+ioat2_is_complete(struct dma_chan *c, dma_cookie_t cookie,
+		     dma_cookie_t *done, dma_cookie_t *used)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2154: FILE: drivers/dma/ioat/dma_v2.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2168: FILE: drivers/dma/ioat/dma_v2.h:15:
+ * this program; if not, write to the Free Software Foundation, Inc., 59$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2181: FILE: drivers/dma/ioat/dma_v2.h:28:
+
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2216: FILE: drivers/dma/ioat/dma_v2.h:63:
+	spinlock_t ring_lock;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2248: FILE: drivers/dma/ioat/dma_v2.h:95:
+	BUG_ON(active > num_descs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076576.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 7 warnings, 33 checks, 2168 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076576.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
