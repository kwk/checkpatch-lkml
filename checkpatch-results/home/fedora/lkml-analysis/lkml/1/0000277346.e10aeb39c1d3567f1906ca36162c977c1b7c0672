WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#124: FILE: security/integrity/ima/Kconfig:63:
+config IMA_BASE_HOOKS
+	bool "IMA base hooks"
+	depends on IMA_MEASURE
+	default n
+	help
+	  Enable this option to allow the LSM module to enforce integrity.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#146: FILE: security/integrity/ima/ima.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#173: FILE: security/integrity/ima/ima.h:28:
+	printk(level "ima (%s): " format, __func__, ## arg)

CHECK:BIT_MACRO: Prefer using the BIT macro
#186: FILE: security/integrity/ima/ima.h:41:
+#define IMA_MEASURE_HTABLE_SIZE (1 << IMA_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'digest' may be better as '(digest)' to avoid precedence issues
#187: FILE: security/integrity/ima/ima.h:42:
+#define IMA_HASH_KEY(digest) (hash_long(\
+	(unsigned long)(*digest), IMA_HASH_BITS));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#187: FILE: security/integrity/ima/ima.h:42:
+#define IMA_HASH_KEY(digest) (hash_long(\
+	(unsigned long)(*digest), IMA_HASH_BITS));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#206: FILE: security/integrity/ima/ima.h:61:
+};
+extern struct list_head ima_measurements;	/* list of all measurements */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#220: FILE: security/integrity/ima/ima.h:75:
+int ima_calc_hash(struct dentry *dentry, struct file *file,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: security/integrity/ima/ima.h:76:
+int ima_calc_hash(struct dentry *dentry, struct file *file,
+			struct nameidata *, char *digest);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: security/integrity/ima/ima.h:79:
+void ima_add_violation(struct inode *inode, const unsigned char *fname,
+			char *op, char *cause);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: security/integrity/ima/ima.h:87:
+void ima_template_show(struct seq_file *m, void *e,
+			     enum integrity_show_type show);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#246: FILE: security/integrity/ima/ima.h:101:
+};
+extern struct ima_h_table ima_htable;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#250: FILE: security/integrity/ima/ima.h:105:
+#define IMA_TPM ((((u32)TPM_ANY_TYPE)<<16) | (u32)TPM_ANY_NUM)
                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#277: FILE: security/integrity/ima/ima.h:132:
+^Iint ^I^Imeasured;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#278: FILE: security/integrity/ima/ima.h:133:
+^Iu8 ^I^Ihmac[IMA_DIGEST_SIZE];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#279: FILE: security/integrity/ima/ima.h:134:
+^Iu8 ^I^Idigest[IMA_DIGEST_SIZE];$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#280: FILE: security/integrity/ima/ima.h:135:
+	struct mutex mutex;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#288: FILE: security/integrity/ima/ima_crypto.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: security/integrity/ima/ima_crypto.c:4:
+ * ^I   Kylene Hall <kjhall@us.ibm.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#298: FILE: security/integrity/ima/ima_crypto.c:11:
+ * ^ICalculate a file's or a template's hash.$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#315: FILE: security/integrity/ima/ima_crypto.c:28:
+			    struct nameidata *nd, struct hash_desc *desc)
 			                      ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#329: FILE: security/integrity/ima/ima_crypto.c:42:
+		struct vfsmount *mnt = mntget(nd->path.mnt);
+		if (!de || !mnt) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#340: FILE: security/integrity/ima/ima_crypto.c:53:
+			printk(KERN_INFO "%s: dentry_open failed\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#350: FILE: security/integrity/ima/ima_crypto.c:63:
+		printk(KERN_INFO "%s: missing file\n", __func__);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#388: FILE: security/integrity/ima/ima_crypto.c:101:
+		  struct nameidata *nd, char *digest)
 		                    ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#399: FILE: security/integrity/ima/ima_crypto.c:112:
+		printk(KERN_INFO "%s: failed to load %s transform: %ld\n",

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#401: FILE: security/integrity/ima/ima_crypto.c:114:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#411: FILE: security/integrity/ima/ima_crypto.c:124:
+	result = update_file_hash(dentry, file, nd, &desc);
 	                                        ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#434: FILE: security/integrity/ima/ima_crypto.c:147:
+		printk(KERN_INFO "%s: failed to load %s transform: %ld\n",

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#436: FILE: security/integrity/ima/ima_crypto.c:149:
+		return -ENOSYS;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#463: FILE: security/integrity/ima/ima_fs.c:1:
+/*

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#495: FILE: security/integrity/ima/ima_fs.c:33:
+static ssize_t ima_show_htable_violations(struct file *filp,
                                                        ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#502: FILE: security/integrity/ima/ima_fs.c:40:
+static struct file_operations ima_htable_violations_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#506: FILE: security/integrity/ima/ima_fs.c:44:
+static ssize_t ima_show_measurements_count(struct file *filp,
                                                         ^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#512: FILE: security/integrity/ima/ima_fs.c:50:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#514: FILE: security/integrity/ima/ima_fs.c:52:
+static struct file_operations ima_measurements_count_ops = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#538: FILE: security/integrity/ima/ima_fs.c:76:
+	 * against concurrent list-extension */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e"
#577: FILE: security/integrity/ima/ima_fs.c:115:
+	if (e == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#611: FILE: security/integrity/ima/ima_fs.c:149:
+		seq_printf(m, " \n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#611: FILE: security/integrity/ima/ima_fs.c:149:
+		seq_printf(m, " \n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#615: FILE: security/integrity/ima/ima_fs.c:153:
+static struct seq_operations ima_measurments_seqops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#627: FILE: security/integrity/ima/ima_fs.c:165:
+static struct file_operations ima_measurements_ops = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e"
#690: FILE: security/integrity/ima/ima_fs.c:228:
+	if (e == NULL)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#708: FILE: security/integrity/ima/ima_fs.c:246:
+		seq_printf(m, " \n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#708: FILE: security/integrity/ima/ima_fs.c:246:
+		seq_printf(m, " \n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#713: FILE: security/integrity/ima/ima_fs.c:251:
+static struct seq_operations ima_ascii_measurements_seqops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#725: FILE: security/integrity/ima/ima_fs.c:263:
+static struct file_operations ima_ascii_measurements_ops = {

CHECK:CAMELCASE: Avoid CamelCase: <bufStart>
#732: FILE: security/integrity/ima/ima_fs.c:270:
+static char *get_tag(char *bufStart, char *bufEnd, char delimiter, int *taglen)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <bufEnd>
#732: FILE: security/integrity/ima/ima_fs.c:270:
+static char *get_tag(char *bufStart, char *bufEnd, char delimiter, int *taglen)

CHECK:BRACES: braces {} should be used on all arms of this statement
#739: FILE: security/integrity/ima/ima_fs.c:277:
+		if (*bufp == ' ')	/* skip blanks */
[...]
+		else if (*bufp == '#') {	/* skip comment */
[...]
+		} else if (*bufp == '\n')	/* skip newline */
[...]
+		else if (*bufp == '\t')	/* skip tabs */
[...]
+		else
[...]

WARNING:SPACING: space prohibited before semicolon
#740: FILE: security/integrity/ima/ima_fs.c:278:
+			while ((*bufp == ' ') && (bufp++ < bufEnd)) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#740: FILE: security/integrity/ima/ima_fs.c:278:
+			while ((*bufp == ' ') && (bufp++ < bufEnd)) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited before semicolon
#742: FILE: security/integrity/ima/ima_fs.c:280:
+			while ((*bufp != '\n') && (bufp++ < bufEnd)) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#742: FILE: security/integrity/ima/ima_fs.c:280:
+			while ((*bufp != '\n') && (bufp++ < bufEnd)) ;

CHECK:BRACES: braces {} should be used on all arms of this statement
#800: FILE: security/integrity/ima/ima_fs.c:338:
+		if (strncmp(tag, "obj=", 4) == 0)
[...]
+		else if (strncmp(tag, "subj=", 5) == 0)
[...]
+		else if (strncmp(tag, "func=", 5) == 0)
[...]
+		else if (strncmp(tag, "mask=", 5) == 0)
[...]
+		else {		/* bad format */
[...]

CHECK:BRACES: Unbalanced braces around else statement
#808: FILE: security/integrity/ima/ima_fs.c:346:
+		else {		/* bad format */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#815: FILE: security/integrity/ima/ima_fs.c:353:
+		printk(KERN_INFO "%s: %s %s %s %s\n", __func__,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#830: FILE: security/integrity/ima/ima_fs.c:368:
+static struct file_operations ima_measure_policy_ops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#850: FILE: security/integrity/ima/ima_fs.c:388:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#857: FILE: security/integrity/ima/ima_fs.c:395:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#864: FILE: security/integrity/ima/ima_fs.c:402:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#870: FILE: security/integrity/ima/ima_fs.c:408:
+	    securityfs_create_file("violations", S_IRUSR | S_IRGRP,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP | S_IWUSR' are not preferred. Consider using octal permissions '0640'.
#876: FILE: security/integrity/ima/ima_fs.c:414:
+					    S_IRUSR | S_IRGRP | S_IWUSR,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#905: FILE: security/integrity/ima/ima_init.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#938: FILE: security/integrity/ima/ima_init.c:34:
+	if (entry == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#948: FILE: security/integrity/ima/ima_init.c:44:
+	if (ima_used_chip) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#968: FILE: security/integrity/ima/ima_init.c:64:
+			sg_init_one(&sg, (u8 *) pcr_i, 20);

CHECK:BRACES: Unbalanced braces around else statement
#973: FILE: security/integrity/ima/ima_init.c:69:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1013: FILE: security/integrity/ima/ima_main.c:1:
+/*

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1060: FILE: security/integrity/ima/ima_main.c:48:
+__setup("ima_hash=", hash_setup);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1074: FILE: security/integrity/ima/ima_main.c:62:
+			struct file *file, struct nameidata *nd, int mask,
 			                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1080: FILE: security/integrity/ima/ima_main.c:68:
+	data->nd = nd;
 	      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1080: FILE: security/integrity/ima/ima_main.c:68:
+	data->nd = nd;
 	           ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1086: FILE: security/integrity/ima/ima_main.c:74:
+			data->dentry = dentry = file->f_dentry;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1088: FILE: security/integrity/ima/ima_main.c:76:
+	if (nd && nd->path.dentry) {
 	    ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1090: FILE: security/integrity/ima/ima_main.c:78:
+			data->dentry = dentry = nd->path.dentry;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1094: FILE: security/integrity/ima/ima_main.c:82:
+			data->inode = inode = dentry->d_inode;

WARNING:RETURN_VOID: void function return statements are not generally useful
#1098: FILE: security/integrity/ima/ima_main.c:86:
+	return;
+}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1140: FILE: security/integrity/ima/ima_main.c:128:
+		if ((!timespec_equal(&iint->mtime, &inode->i_mtime))
+		    || timespec_recent(&iint->mtime))

WARNING:RETURN_VOID: void function return statements are not generally useful
#1163: FILE: security/integrity/ima/ima_main.c:151:
+	return;
+}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1216: FILE: security/integrity/ima/ima_main.c:204:
+ * @nd: pointer to a nameidata
     ^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1223: FILE: security/integrity/ima/ima_main.c:211:
+ * ^I- Opening a file for write when already open for read,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1226: FILE: security/integrity/ima/ima_main.c:214:
+ * ^I  could result in a file measurement error.$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1229: FILE: security/integrity/ima/ima_main.c:217:
+				struct nameidata *nd)
 				                  ^^

WARNING:SIZEOF_PARENTHESIS: sizeof idata should be sizeof(idata)
#1234: FILE: security/integrity/ima/ima_main.c:222:
+	memset(&idata, 0, sizeof idata);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1235: FILE: security/integrity/ima/ima_main.c:223:
+	ima_fixup_argsdata(data, inode, NULL, NULL, nd, mask, INODE_PERMISSION);
 	                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1238: FILE: security/integrity/ima/ima_main.c:226:
+	if (nd)
 	    ^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_WRITE'
#1244: FILE: security/integrity/ima/ima_main.c:232:
+	if ((mask == MAY_WRITE) || (mask == MAY_APPEND)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_APPEND'
#1244: FILE: security/integrity/ima/ima_main.c:232:
+	if ((mask == MAY_WRITE) || (mask == MAY_APPEND)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around data->dentry->d_count
#1251: FILE: security/integrity/ima/ima_main.c:239:
+			if (atomic_read(&(data->dentry->d_count)) - 1 >

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_writecount
#1252: FILE: security/integrity/ima/ima_main.c:240:
+			    atomic_read(&(inode->i_writecount)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_writecount
#1269: FILE: security/integrity/ima/ima_main.c:257:
+			if (atomic_read(&(inode->i_writecount)) > 0)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1288: FILE: security/integrity/ima/ima_main.c:276:
+ * @nd: pointer to a nameidata
     ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1404: FILE: security/integrity/ima/ima_main.c:392:
+	int error;
+	tfm_hash = crypto_alloc_hash(ima_hash, 0, CRYPTO_ALG_ASYNC);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1436: FILE: security/integrity/ima/ima_queue.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qe"
#1511: FILE: security/integrity/ima/ima_queue.c:76:
+	if (qe == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*qe)...) over kmalloc(sizeof(struct ima_queue_entry)...)
#1534: FILE: security/integrity/ima/ima_queue.c:99:
+	qe = kmalloc(sizeof(struct ima_queue_entry), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qe"
#1535: FILE: security/integrity/ima/ima_queue.c:100:
+	if (qe == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1550: FILE: security/integrity/ima/ima_queue.c:115:
+	if (violation) {	/* Replace 0x00 with 0xFF */
[...]
+	} else
[...]

WARNING:SIZEOF_PARENTHESIS: sizeof digest should be sizeof(digest)
#1553: FILE: security/integrity/ima/ima_queue.c:118:
+		memset(digest, 0xff, sizeof digest);

CHECK:BRACES: Unbalanced braces around else statement
#1555: FILE: security/integrity/ima/ima_queue.c:120:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1626: FILE: include/linux/ima.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1645: FILE: include/linux/ima.h:20:
+^Istruct inode ^I*inode;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1646: FILE: include/linux/ima.h:21:
+^Istruct dentry ^I*dentry;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1647: FILE: include/linux/ima.h:22:
+	struct nameidata 	*nd;
 	                 	 ^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1647: FILE: include/linux/ima.h:22:
+^Istruct nameidata ^I*nd;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1648: FILE: include/linux/ima.h:23:
+^Istruct file ^I*file;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1651: FILE: include/linux/ima.h:26:
+^Iint ^I^Imask;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1655: FILE: include/linux/ima.h:30:
+^Ichar ^I^I*name;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1656: FILE: include/linux/ima.h:31:
+^Iint ^I^Ilen;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1657: FILE: include/linux/ima.h:32:
+^Ichar ^I^I*data;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1658: FILE: include/linux/ima.h:33:
+^Iint  ^I^Iviolation;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1662: FILE: include/linux/ima.h:37:
+^Ienum ima_type ^Itype;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1664: FILE: include/linux/ima.h:39:
+^I^Istruct ima_args_data ^Iargs;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1671: FILE: include/linux/ima.h:46:
+			struct file *file, struct nameidata *nd, int mask,
 			                                     ^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1679: FILE: security/integrity/ima/ima_api.c:1:
+/*

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1716: FILE: security/integrity/ima/ima_api.c:38:
+{
+

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1717: FILE: security/integrity/ima/ima_api.c:39:
+	ima_enabled = simple_strtol(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1721: FILE: security/integrity/ima/ima_api.c:43:
+__setup("ima=", ima_enabled_setup);

WARNING:TYPO_SPELLING: 'compatability' may be misspelled - perhaps 'compatibility'?
#1727: FILE: security/integrity/ima/ima_api.c:49:
+ * mode_setup - for compatability with non-template IMA versions
                     ^^^^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1737: FILE: security/integrity/ima/ima_api.c:59:
+	printk(KERN_INFO "%s: template_mode %s \n", __func__,

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1737: FILE: security/integrity/ima/ima_api.c:59:
+	printk(KERN_INFO "%s: template_mode %s \n", __func__,

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1742: FILE: security/integrity/ima/ima_api.c:64:
+__setup("ima_mode=", mode_setup);

WARNING:SIZEOF_PARENTHESIS: sizeof inode_template->digest should be sizeof(inode_template->digest)
#1761: FILE: security/integrity/ima/ima_api.c:83:
+		       sizeof inode_template->digest);

WARNING:SIZEOF_PARENTHESIS: sizeof *entry should be sizeof(*entry)
#1869: FILE: security/integrity/ima/ima_api.c:191:
+	memset(entry, 0, sizeof *entry);

WARNING:SIZEOF_PARENTHESIS: sizeof *entry should be sizeof(*entry)
#1879: FILE: security/integrity/ima/ima_api.c:201:
+	result = ima_store_template_measure("ima", sizeof *entry, (char *)entry,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == PROC_SUPER_MAGIC'
#1922: FILE: security/integrity/ima/ima_api.c:244:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || (inode->i_sb->s_magic == SYSFS_MAGIC)
+	    || (inode->i_sb->s_magic == DEBUGFS_MAGIC)
+	    || (inode->i_sb->s_magic == TMPFS_MAGIC)
+	    || (inode->i_sb->s_magic == SECURITYFS_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == SYSFS_MAGIC'
#1922: FILE: security/integrity/ima/ima_api.c:244:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || (inode->i_sb->s_magic == SYSFS_MAGIC)
+	    || (inode->i_sb->s_magic == DEBUGFS_MAGIC)
+	    || (inode->i_sb->s_magic == TMPFS_MAGIC)
+	    || (inode->i_sb->s_magic == SECURITYFS_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == DEBUGFS_MAGIC'
#1922: FILE: security/integrity/ima/ima_api.c:244:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || (inode->i_sb->s_magic == SYSFS_MAGIC)
+	    || (inode->i_sb->s_magic == DEBUGFS_MAGIC)
+	    || (inode->i_sb->s_magic == TMPFS_MAGIC)
+	    || (inode->i_sb->s_magic == SECURITYFS_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == TMPFS_MAGIC'
#1922: FILE: security/integrity/ima/ima_api.c:244:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || (inode->i_sb->s_magic == SYSFS_MAGIC)
+	    || (inode->i_sb->s_magic == DEBUGFS_MAGIC)
+	    || (inode->i_sb->s_magic == TMPFS_MAGIC)
+	    || (inode->i_sb->s_magic == SECURITYFS_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == SECURITYFS_MAGIC'
#1922: FILE: security/integrity/ima/ima_api.c:244:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || (inode->i_sb->s_magic == SYSFS_MAGIC)
+	    || (inode->i_sb->s_magic == DEBUGFS_MAGIC)
+	    || (inode->i_sb->s_magic == TMPFS_MAGIC)
+	    || (inode->i_sb->s_magic == SECURITYFS_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1923: FILE: security/integrity/ima/ima_api.c:245:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || (inode->i_sb->s_magic == SYSFS_MAGIC)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1924: FILE: security/integrity/ima/ima_api.c:246:
+	    || (inode->i_sb->s_magic == SYSFS_MAGIC)
+	    || (inode->i_sb->s_magic == DEBUGFS_MAGIC)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1925: FILE: security/integrity/ima/ima_api.c:247:
+	    || (inode->i_sb->s_magic == DEBUGFS_MAGIC)
+	    || (inode->i_sb->s_magic == TMPFS_MAGIC)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1926: FILE: security/integrity/ima/ima_api.c:248:
+	    || (inode->i_sb->s_magic == TMPFS_MAGIC)
+	    || (inode->i_sb->s_magic == SECURITYFS_MAGIC)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1927: FILE: security/integrity/ima/ima_api.c:249:
+	    || (inode->i_sb->s_magic == SECURITYFS_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

WARNING:TYPO_SPELLING: 'keypairs' may be misspelled - perhaps 'key pairs'?
#1942: FILE: security/integrity/ima/ima_api.c:264:
+ * The policy is defined in terms of keypairs: subj=, obj=, func=, mask=
                                      ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1944: FILE: security/integrity/ima/ima_api.c:266:
+ * ^Ifunc: INODE_PERMISSION | BPRM_CHECK | FILE_MMAP$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1945: FILE: security/integrity/ima/ima_api.c:267:
+ * ^Imask: contains the permission mask$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1948: FILE: security/integrity/ima/ima_api.c:270:
+ * Return 0 to measure, error code otherwise
+*/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1979: FILE: security/integrity/ima/ima_api.c:301:
+	struct nameidata *nd = data->nd;
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1979: FILE: security/integrity/ima/ima_api.c:301:
+	struct nameidata *nd = data->nd;
 	                             ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1991: FILE: security/integrity/ima/ima_api.c:313:
+	if (!iint->measured) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1993: FILE: security/integrity/ima/ima_api.c:315:
+		result = ima_calc_hash(dentry, file, nd, iint->digest);
 		                                     ^^

CHECK:BRACES: Unbalanced braces around else statement
#1994: FILE: security/integrity/ima/ima_api.c:316:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277346.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 92 warnings, 51 checks, 1917 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277346.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
