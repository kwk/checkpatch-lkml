WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#110: FILE: include/linux/memcontrol.h:47:
+^I^I^I^I/* counted ^I^I^I^I   */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/memcontrol.h:51:
+extern int memcontrol_mm_init(struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/memcontrol.h:52:
+extern void memcontrol_mm_free(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/memcontrol.h:53:
+extern void memcontrol_mm_assign_container(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: include/linux/memcontrol.h:54:
+extern void memcontrol_mm_assign_container(struct mm_struct *mm,
+						struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/memcontrol.h:55:
+extern int memcontrol_update_rss(struct mm_struct *mm, int count, bool check);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: include/linux/memcontrol.h:69:
+static inline void memcontrol_mm_assign_container(struct mm_struct *mm,
+							struct task_struct *p)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: include/linux/sched.h:385:
+^Irwlock_t ^I^Icontainer_lock;$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mm->counter)...) over kmalloc(sizeof(struct res_counter)...)
#259: FILE: mm/memcontrol.c:72:
+	mm->counter = kmalloc(sizeof(struct res_counter), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm->counter"
#260: FILE: mm/memcontrol.c:73:
+	if (mm->counter == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: mm/memcontrol.c:87:
+static inline void memcontrol_mm_assign_container_direct(struct mm_struct *mm,
+							struct container *cont)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#285: FILE: mm/memcontrol.c:98:
+	BUG_ON(!cont);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cont"
#303: FILE: mm/memcontrol.c:116:
+	if (cont == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'usage > limit'
#310: FILE: mm/memcontrol.c:123:
+	if (check && limit && (usage > limit))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Unbalanced braces around else statement
#312: FILE: mm/memcontrol.c:125:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#327: FILE: mm/memcontrol.c:139:
+	if (mem == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: mm/memcontrol.c:252:
+int memcontrol_can_attach(struct container_subsys *ss, struct container *cont,
+			struct task_struct *p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: mm/memcontrol.c:269:
+static void memcontrol_attach(struct container_subsys *ss,
+				struct container *cont,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: mm/memory.c:537:
+	memcontrol_update_rss(dst_mm, rss[0] + rss[1],
+				MEMCONTROL_DONT_CHECK_LIMIT);

CHECK:BRACES: Unbalanced braces around else statement
#441: FILE: mm/memory.c:1626:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463257.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 17 checks, 444 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463257.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
