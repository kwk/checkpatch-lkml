WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
* introduce struct dma_async_tx_descriptor as a common field for all dmaengine

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#59: FILE: drivers/dma/dmaengine.c:214:
+		while (client->chans_desired < 0 ||
+			client->chans_desired > client->chan_count) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#69: FILE: drivers/dma/dmaengine.c:224:
+		while (client->chans_desired >= 0 &&
+			client->chans_desired < client->chan_count) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#94: FILE: drivers/dma/dmaengine.c:324:
+	BUG_ON(test_bit(DMA_MEMCPY, &device->capabilities) &&

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: drivers/dma/dmaengine.c:325:
+	BUG_ON(test_bit(DMA_MEMCPY, &device->capabilities) &&
+		!device->device_prep_dma_memcpy);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#96: FILE: drivers/dma/dmaengine.c:326:
+	BUG_ON(test_bit(DMA_XOR, &device->capabilities) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#97: FILE: drivers/dma/dmaengine.c:327:
+	BUG_ON(test_bit(DMA_XOR, &device->capabilities) &&
+		!device->device_prep_dma_xor);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#98: FILE: drivers/dma/dmaengine.c:328:
+	BUG_ON(test_bit(DMA_ZERO_SUM, &device->capabilities) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: drivers/dma/dmaengine.c:329:
+	BUG_ON(test_bit(DMA_ZERO_SUM, &device->capabilities) &&
+		!device->device_prep_dma_zero_sum);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#100: FILE: drivers/dma/dmaengine.c:330:
+	BUG_ON(test_bit(DMA_MEMSET, &device->capabilities) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: drivers/dma/dmaengine.c:331:
+	BUG_ON(test_bit(DMA_MEMSET, &device->capabilities) &&
+		!device->device_prep_dma_memset);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#102: FILE: drivers/dma/dmaengine.c:332:
+	BUG_ON(test_bit(DMA_ZERO_SUM, &device->capabilities) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: drivers/dma/dmaengine.c:333:
+	BUG_ON(test_bit(DMA_ZERO_SUM, &device->capabilities) &&
+		!device->device_prep_dma_interrupt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#105: FILE: drivers/dma/dmaengine.c:335:
+	BUG_ON(!device->device_alloc_chan_resources);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#106: FILE: drivers/dma/dmaengine.c:336:
+	BUG_ON(!device->device_free_chan_resources);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#107: FILE: drivers/dma/dmaengine.c:337:
+	BUG_ON(!device->device_tx_submit);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#108: FILE: drivers/dma/dmaengine.c:338:
+	BUG_ON(!device->device_set_dest);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#109: FILE: drivers/dma/dmaengine.c:339:
+	BUG_ON(!device->device_set_src);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#110: FILE: drivers/dma/dmaengine.c:340:
+	BUG_ON(!device->device_dependency_added);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#111: FILE: drivers/dma/dmaengine.c:341:
+	BUG_ON(!device->device_is_tx_complete);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#112: FILE: drivers/dma/dmaengine.c:342:
+	BUG_ON(!device->map_page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#113: FILE: drivers/dma/dmaengine.c:343:
+	BUG_ON(!device->map_single);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#114: FILE: drivers/dma/dmaengine.c:344:
+	BUG_ON(!device->unmap_page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#115: FILE: drivers/dma/dmaengine.c:345:
+	BUG_ON(!device->unmap_single);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#116: FILE: drivers/dma/dmaengine.c:346:
+	BUG_ON(!device->device_issue_pending);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#131: FILE: drivers/dma/dmaengine.c:433:
+EXPORT_SYMBOL(dma_async_issue_pending);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#154: FILE: drivers/dma/ioatdma.c:46:
 static int __devinit ioat_probe(struct pci_dev *pdev, const struct pci_device_id *ent);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#271: FILE: drivers/dma/ioatdma.c:301:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#309: FILE: drivers/dma/ioatdma.c:333:
+	ioat_chan->common.cookie = desc->async_tx.cookie = cookie;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: drivers/dma/ioatdma.c:354:
+static dma_addr_t ioat_map_page(struct dma_chan *chan, struct page *page,
+					unsigned long offset, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: drivers/dma/ioatdma.c:363:
+static dma_addr_t ioat_map_single(struct dma_chan *chan, void *cpu_addr,
+					size_t size, int direction)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: drivers/dma/ioatdma.c:371:
+static void ioat_unmap_page(struct dma_chan *chan, dma_addr_t handle,
+				size_t size, int direction)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: drivers/dma/ioatdma.c:378:
+static void ioat_unmap_single(struct dma_chan *chan, dma_addr_t handle,
+				size_t size, int direction)

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: drivers/dma/ioatdma.c:381:
+	struct ioat_dma_chan *ioat_chan = to_ioat_chan(chan);
+	pci_unmap_single(ioat_chan->device->pdev, handle, size, direction);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#456: FILE: drivers/dma/ioatdma.c:468:
+			} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#473: FILE: drivers/dma/ioatdma.c:492:
+	struct ioat_dma_chan *ioat_chan = to_ioat_chan(chan);
+	spin_lock_bh(&ioat_chan->desc_lock);

CHECK:BRACES: braces {} should be used on all arms of this statement
#474: FILE: drivers/dma/ioatdma.c:493:
+	if (ioat_chan->pending == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#477: FILE: drivers/dma/ioatdma.c:496:
+	} else

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#612: FILE: include/linux/dmaengine.h:84:
+#define dma_async_for_each_tx_type(index) for (\
+	 index = (unsigned long) DMA_TX_TYPE_START;\
+	 index <= (unsigned long) DMA_TX_TYPE_END;\
+	 index++)

CHECK:SPACING: No space is necessary after a cast
#613: FILE: include/linux/dmaengine.h:85:
+	 index = (unsigned long) DMA_TX_TYPE_START;\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#614: FILE: include/linux/dmaengine.h:86:
+	 index <= (unsigned long) DMA_TX_TYPE_END;\

WARNING:REPEATED_WORD: Possible repeated word: 'has'
#657: FILE: include/linux/dmaengine.h:204:
+ *	receipt, i.e. has has a chance to establish any dependency chains

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#679: FILE: include/linux/dmaengine.h:226:
+	spinlock_t lock;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#740: FILE: include/linux/dmaengine.h:274:
+	struct dma_async_tx_descriptor *(*device_prep_dma_memcpy)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#742: FILE: include/linux/dmaengine.h:276:
+	struct dma_async_tx_descriptor *(*device_prep_dma_xor)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#745: FILE: include/linux/dmaengine.h:279:
+	struct dma_async_tx_descriptor *(*device_prep_dma_zero_sum)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#748: FILE: include/linux/dmaengine.h:282:
+	struct dma_async_tx_descriptor *(*device_prep_dma_memset)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#750: FILE: include/linux/dmaengine.h:284:
+	struct dma_async_tx_descriptor *(*device_prep_dma_interrupt)(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#755: FILE: include/linux/dmaengine.h:289:
+	void (*device_set_dest)(dma_addr_t addr,
+		struct dma_async_tx_descriptor *tx, int index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#757: FILE: include/linux/dmaengine.h:291:
+	void (*device_set_src)(dma_addr_t addr,
+		struct dma_async_tx_descriptor *tx, int index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: include/linux/dmaengine.h:294:
+	enum dma_status (*device_is_tx_complete)(struct dma_chan *chan,
 			dma_cookie_t cookie, dma_cookie_t *last,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#764: FILE: include/linux/dmaengine.h:297:
+	dma_addr_t (*map_page)(struct dma_chan *chan, struct page *page,
+				unsigned long offset, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: include/linux/dmaengine.h:300:
+	dma_addr_t (*map_single)(struct dma_chan *chan, void *cpu_addr,
+				size_t size, int direction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: include/linux/dmaengine.h:302:
+	void (*unmap_page)(struct dma_chan *chan, dma_addr_t handle,
+				size_t size, int direction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: include/linux/dmaengine.h:304:
+	void (*unmap_single)(struct dma_chan *chan, dma_addr_t handle,
+				size_t size, int direction);

ERROR:CODE_INDENT: code indent should use tabs where possible
#790: FILE: include/linux/dmaengine.h:327:
+        void *dest, void *src, size_t len)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: include/linux/dmaengine.h:327:
+        void *dest, void *src, size_t len)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#825: FILE: include/linux/dmaengine.h:368:
+        struct page *page, unsigned int offset, void *kdata, size_t len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#825: FILE: include/linux/dmaengine.h:368:
+        struct page *page, unsigned int offset, void *kdata, size_t len)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#862: FILE: include/linux/dmaengine.h:410:
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#862: FILE: include/linux/dmaengine.h:410:
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#863: FILE: include/linux/dmaengine.h:411:
+        unsigned int src_off, size_t len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: include/linux/dmaengine.h:411:
+        unsigned int src_off, size_t len)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#895: FILE: include/linux/dmaengine.h:440:
+dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *tx,
+	struct dma_chan *chan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#932: FILE: include/linux/dmaengine.h:474:
+static inline enum dma_status dma_async_is_tx_complete(struct dma_chan *chan,
 	dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#949: FILE: include/linux/dmaengine.h:505:
+static inline enum dma_status dma_sync_wait(struct dma_chan *chan,
+						dma_cookie_t cookie)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#958: FILE: include/linux/dmaengine.h:514:
+			printk(KERN_ERR "dma_sync_wait_timeout!\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475511.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 28 warnings, 35 checks, 877 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475511.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
