WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
this simply reduces to page + n. For virtual compound pages we need to consult

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#78: FILE: mm/page_alloc.c:64:
+static struct page *vcompound_alloc(gfp_t, int,
+					struct zonelist *, unsigned long);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#113: FILE: mm/page_alloc.c:285:
+	if (unlikely(!PageHead(page)))
+			bad_page(page);

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageHead>
#115: FILE: mm/page_alloc.c:287:
+	__ClearPageHead(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: mm/page_alloc.c:1250:
+static noinline struct page *vcompound_alloc(gfp_t gfp_mask, int order,
+		struct zonelist *zonelist, unsigned long alloc_flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: mm/page_alloc.c:1264:
+		page = get_page_from_freelist(gfp_mask & ~__GFP_VFALLBACK,
+					0, zonelist, alloc_flags);

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageVcompound>
#151: FILE: mm/page_alloc.c:1269:
+		__SetPageVcompound(page);

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageVcompound>
#166: FILE: mm/page_alloc.c:1284:
+		__ClearPageVcompound(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: mm/page_alloc.c:1450:
+			page = vcompound_alloc(gfp_mask, order,
+					zonelist, alloc_flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: mm/page_alloc.c:1487:
+		page = vcompound_alloc(gfp_mask, order,
+					zonelist, alloc_flags);

CHECK:SPACING: No space is necessary after a cast
#249: FILE: mm/page_alloc.c:1514:
+	return (unsigned long) page_to_addr(page);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#258: FILE: mm/page_alloc.c:1531:
+		return (unsigned long) page_to_addr(page);

CHECK:BRACES: Unbalanced braces around else statement
#268: FILE: mm/page_alloc.c:1550:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#283: FILE: mm/page_alloc.c:1564:
+		if (unlikely(is_vmalloc_addr((void *)addr)))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#285: FILE: mm/page_alloc.c:1566:
+		else {

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#328: FILE: include/linux/page-flags.h:256:
+#define PageVcompound(page)	((page->flags & PG_vcompound_mask) \
+					== PG_vcompound_mask)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#362: FILE: include/linux/mm.h:312:
+{
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000376519.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 2 warnings, 15 checks, 345 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000376519.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
