WARNING:TYPO_SPELLING: 'pathes' may be misspelled - perhaps 'paths'?
#75: 
> directories, otherwise the same pathes, like for all other
                                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: Unnecessary space before function pointer arguments
#99: FILE: linux-core/drmP.h:622:
+	int (*suspend) (struct drm_device *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drm_device *' should also have an identifier name
#99: FILE: linux-core/drmP.h:622:
+	int (*suspend) (struct drm_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#100: FILE: linux-core/drmP.h:623:
+	int (*resume) (struct drm_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drm_device *' should also have an identifier name
#100: FILE: linux-core/drmP.h:623:
+	int (*resume) (struct drm_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: linux-core/drmP.h:1169:
+extern void drm_sysfs_destroy(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: linux-core/drmP.h:1170:
+extern int drm_sysfs_device_add(struct drm_device *dev, struct drm_head * head);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: linux-core/drmP.h:1170:
+extern int drm_sysfs_device_add(struct drm_device *dev, struct drm_head * head);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: linux-core/drmP.h:1171:
+extern void drm_sysfs_device_remove(struct drm_device *dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#197: FILE: linux-core/drm_sysfs.c:36:
+	printk(KERN_ERR "%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#197: FILE: linux-core/drm_sysfs.c:36:
+	printk(KERN_ERR "%s\n", __FUNCTION__);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drm_class == NULL'
#260: FILE: linux-core/drm_sysfs.c:114:
+	if ((drm_class == NULL) || (IS_ERR(drm_class)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!drm_class"
#260: FILE: linux-core/drm_sysfs.c:114:
+	if ((drm_class == NULL) || (IS_ERR(drm_class)))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:RETURN_VOID: void function return statements are not generally useful
#296: FILE: linux-core/drm_sysfs.c:144:
+	return;
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364693.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 8 warnings, 5 checks, 270 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364693.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
