WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#137: FILE: arch/x86/kernel/paravirt_32.c:240:
+extern void native_irq_enable_syscall_ret(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#192: FILE: include/asm-x86/irqflags.h:1:
+#ifndef _X86_IRQFLAGS_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#206: FILE: include/asm-x86/irqflags.h:15:
+	__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#219: FILE: include/asm-x86/irqflags.h:28:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#222: FILE: include/asm-x86/irqflags.h:31:
+		:"g" (flags)
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#223: FILE: include/asm-x86/irqflags.h:32:
+		:"memory", "cc"
 		^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#229: FILE: include/asm-x86/irqflags.h:38:
+	asm volatile("cli": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#229: FILE: include/asm-x86/irqflags.h:38:
+	asm volatile("cli": : :"memory");
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#234: FILE: include/asm-x86/irqflags.h:43:
+	asm volatile("sti": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#234: FILE: include/asm-x86/irqflags.h:43:
+	asm volatile("sti": : :"memory");
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#239: FILE: include/asm-x86/irqflags.h:48:
+	asm volatile("sti; hlt": : :"memory");
 	                       ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#239: FILE: include/asm-x86/irqflags.h:48:
+	asm volatile("sti; hlt": : :"memory");
 	                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#244: FILE: include/asm-x86/irqflags.h:53:
+	asm volatile("hlt": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#244: FILE: include/asm-x86/irqflags.h:53:
+	asm volatile("hlt": : :"memory");
 	                      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#310: FILE: include/asm-x86/irqflags.h:119:
+#define ENABLE_INTERRUPTS_SYSCALL_RET			\
+			movq	%gs:pda_oldrsp, %rsp;	\
+			swapgs;				\
+			sysretq;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#310: FILE: include/asm-x86/irqflags.h:119:
+#define ENABLE_INTERRUPTS_SYSCALL_RET			\
+			movq	%gs:pda_oldrsp, %rsp;	\
+			swapgs;				\
+			sysretq;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#311: FILE: include/asm-x86/irqflags.h:120:
+			movq	%gs:pda_oldrsp, %rsp;	\
 			    	^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#311: FILE: include/asm-x86/irqflags.h:120:
+			movq	%gs:pda_oldrsp, %rsp;	\
 			    	   ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#311: FILE: include/asm-x86/irqflags.h:120:
+			movq	%gs:pda_oldrsp, %rsp;	\
 			    	                ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#316: FILE: include/asm-x86/irqflags.h:125:
+#define ENABLE_INTERRUPTS_SYSCALL_RET	sti; sysexit

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#317: FILE: include/asm-x86/irqflags.h:126:
+#define GET_CR0_INTO_EAX		movl %cr0, %eax
                         		     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#317: FILE: include/asm-x86/irqflags.h:126:
+#define GET_CR0_INTO_EAX		movl %cr0, %eax
                         		           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#317: FILE: include/asm-x86/irqflags.h:126:
+#define GET_CR0_INTO_EAX		movl %cr0, %eax

CHECK:LINE_SPACING: Please don't use multiple blank lines
#320: FILE: include/asm-x86/irqflags.h:129:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#325: FILE: include/asm-x86/irqflags.h:134:
+#define raw_local_save_flags(flags) \
+		do { (flags) = __raw_local_save_flags(); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#328: FILE: include/asm-x86/irqflags.h:137:
+#define raw_local_irq_save(flags) \
+		do { (flags) = __raw_local_irq_save(); } while (0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#378: FILE: include/asm-x86/irqflags.h:186:
+#define ARCH_TRACE_IRQS_ON		call trace_hardirqs_on_thunk

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#379: FILE: include/asm-x86/irqflags.h:187:
+#define ARCH_TRACE_IRQS_OFF		call trace_hardirqs_off_thunk

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#380: FILE: include/asm-x86/irqflags.h:188:
+#define ARCH_LOCKDEP_SYS_EXIT		call lockdep_sys_exit_thunk

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#381: FILE: include/asm-x86/irqflags.h:189:
+#define ARCH_LOCKDEP_SYS_EXIT_IRQ	\
+	TRACE_IRQS_ON; \
+	sti; \
+	SAVE_REST; \
+	LOCKDEP_SYS_EXIT; \
+	RESTORE_REST; \
+	cli; \
+	TRACE_IRQS_OFF;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#381: FILE: include/asm-x86/irqflags.h:189:
+#define ARCH_LOCKDEP_SYS_EXIT_IRQ	\
+	TRACE_IRQS_ON; \
+	sti; \
+	SAVE_REST; \
+	LOCKDEP_SYS_EXIT; \
+	RESTORE_REST; \
+	cli; \
+	TRACE_IRQS_OFF;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#391: FILE: include/asm-x86/irqflags.h:199:
+#define ARCH_TRACE_IRQS_ON			\
+	pushl %eax;				\
+	pushl %ecx;				\
+	pushl %edx;				\
+	call trace_hardirqs_on;			\
+	popl %edx;				\
+	popl %ecx;				\
+	popl %eax;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#391: FILE: include/asm-x86/irqflags.h:199:
+#define ARCH_TRACE_IRQS_ON			\
+	pushl %eax;				\
+	pushl %ecx;				\
+	pushl %edx;				\
+	call trace_hardirqs_on;			\
+	popl %edx;				\
+	popl %ecx;				\
+	popl %eax;

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#392: FILE: include/asm-x86/irqflags.h:200:
+	pushl %eax;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#393: FILE: include/asm-x86/irqflags.h:201:
+	pushl %ecx;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#394: FILE: include/asm-x86/irqflags.h:202:
+	pushl %edx;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#396: FILE: include/asm-x86/irqflags.h:204:
+	popl %edx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#397: FILE: include/asm-x86/irqflags.h:205:
+	popl %ecx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#398: FILE: include/asm-x86/irqflags.h:206:
+	popl %eax;
 	     ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#400: FILE: include/asm-x86/irqflags.h:208:
+#define ARCH_TRACE_IRQS_OFF			\
+	pushl %eax;				\
+	pushl %ecx;				\
+	pushl %edx;				\
+	call trace_hardirqs_off;		\
+	popl %edx;				\
+	popl %ecx;				\
+	popl %eax;

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#401: FILE: include/asm-x86/irqflags.h:209:
+	pushl %eax;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#402: FILE: include/asm-x86/irqflags.h:210:
+	pushl %ecx;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#403: FILE: include/asm-x86/irqflags.h:211:
+	pushl %edx;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#405: FILE: include/asm-x86/irqflags.h:213:
+	popl %edx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#406: FILE: include/asm-x86/irqflags.h:214:
+	popl %ecx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#407: FILE: include/asm-x86/irqflags.h:215:
+	popl %eax;
 	     ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#409: FILE: include/asm-x86/irqflags.h:217:
+#define ARCH_LOCKDEP_SYS_EXIT			\
+	pushl %eax;				\
+	pushl %ecx;				\
+	pushl %edx;				\
+	call lockdep_sys_exit;			\
+	popl %edx;				\
+	popl %ecx;				\
+	popl %eax;

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#410: FILE: include/asm-x86/irqflags.h:218:
+	pushl %eax;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#411: FILE: include/asm-x86/irqflags.h:219:
+	pushl %ecx;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#412: FILE: include/asm-x86/irqflags.h:220:
+	pushl %edx;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#414: FILE: include/asm-x86/irqflags.h:222:
+	popl %edx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#415: FILE: include/asm-x86/irqflags.h:223:
+	popl %ecx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#416: FILE: include/asm-x86/irqflags.h:224:
+	popl %eax;
 	     ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#439: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#801: FILE: include/asm-x86/paravirt.h:1144:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_irq_enable_syscall_ret)
 		      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#801: FILE: include/asm-x86/paravirt.h:1144:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_irq_enable_syscall_ret)
 		       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#801: FILE: include/asm-x86/paravirt.h:1144:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_irq_enable_syscall_ret)
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#801: FILE: include/asm-x86/paravirt.h:1144:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_irq_enable_syscall_ret)
 		                     ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000359503.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 10 warnings, 30 checks, 369 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000359503.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
