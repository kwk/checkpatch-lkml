WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#51: FILE: drivers/input/lirc/Kconfig:71:
+config LIRC_STREAMZAP
+	tristate "Streamzap PC Receiver"
+	default n
+	depends on LIRC_DEV
+	help
+	  Driver for the Streamzap PC Receiver
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#69: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: drivers/input/lirc/lirc_streamzap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#100: FILE: drivers/input/lirc/lirc_streamzap.c:27:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#101: FILE: drivers/input/lirc/lirc_streamzap.c:28:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#136: FILE: drivers/input/lirc/lirc_streamzap.c:63:
+			printk(KERN_DEBUG DRIVER_NAME "[%d]: "	\

CHECK:CAMELCASE: Avoid CamelCase: <StreamzapDecoderState>
#159: FILE: drivers/input/lirc/lirc_streamzap.c:86:
+enum StreamzapDecoderState {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <PulseSpace>
#160: FILE: drivers/input/lirc/lirc_streamzap.c:87:
+	PulseSpace,

CHECK:CAMELCASE: Avoid CamelCase: <FullPulse>
#161: FILE: drivers/input/lirc/lirc_streamzap.c:88:
+	FullPulse,

CHECK:CAMELCASE: Avoid CamelCase: <FullSpace>
#162: FILE: drivers/input/lirc/lirc_streamzap.c:89:
+	FullSpace,

CHECK:CAMELCASE: Avoid CamelCase: <IgnorePulse>
#163: FILE: drivers/input/lirc/lirc_streamzap.c:90:
+	IgnorePulse

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#168: FILE: drivers/input/lirc/lirc_streamzap.c:95:
+/* some remarks regarding locking:
+   theoretically this struct can be accessed from three threads:

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'throuh' may be misspelled - perhaps 'through'?
#172: FILE: drivers/input/lirc/lirc_streamzap.c:99:
+   - from the USB layer throuh probe/disconnect/irq
                         ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#186: FILE: drivers/input/lirc/lirc_streamzap.c:113:
+struct usb_streamzap {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#211: FILE: drivers/input/lirc/lirc_streamzap.c:138:
+	spinlock_t		timer_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#226: FILE: drivers/input/lirc/lirc_streamzap.c:153:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#264: FILE: drivers/input/lirc/lirc_streamzap.c:191:
+	struct usb_streamzap *sz = (struct usb_streamzap *) arg;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#269: FILE: drivers/input/lirc/lirc_streamzap.c:196:
+}
+static void delay_timeout(unsigned long arg)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#274: FILE: drivers/input/lirc/lirc_streamzap.c:201:
+		(10000/(1000000/HZ)) == 0 ? 1 : (10000/(1000000/HZ));
 		      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#274: FILE: drivers/input/lirc/lirc_streamzap.c:201:
+		(10000/(1000000/HZ)) == 0 ? 1 : (10000/(1000000/HZ));
 		               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#274: FILE: drivers/input/lirc/lirc_streamzap.c:201:
+		(10000/(1000000/HZ)) == 0 ? 1 : (10000/(1000000/HZ));
 		                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#274: FILE: drivers/input/lirc/lirc_streamzap.c:201:
+		(10000/(1000000/HZ)) == 0 ? 1 : (10000/(1000000/HZ));
 		                                               ^

CHECK:SPACING: No space is necessary after a cast
#275: FILE: drivers/input/lirc/lirc_streamzap.c:202:
+	struct usb_streamzap *sz = (struct usb_streamzap *) arg;

CHECK:SPACING: No space is necessary after a cast
#282: FILE: drivers/input/lirc/lirc_streamzap.c:209:
+		lirc_buffer_read_1(&sz->delay_buf, (unsigned char *) &data);

CHECK:SPACING: No space is necessary after a cast
#283: FILE: drivers/input/lirc/lirc_streamzap.c:210:
+		lirc_buffer_write_1(&sz->lirc_buf, (unsigned char *) &data);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#287: FILE: drivers/input/lirc/lirc_streamzap.c:214:
+		      STREAMZAP_BUFFER_SIZE/2 &&
 		                           ^

CHECK:SPACING: No space is necessary after a cast
#290: FILE: drivers/input/lirc/lirc_streamzap.c:217:
+					   (unsigned char *) &data);

CHECK:SPACING: No space is necessary after a cast
#292: FILE: drivers/input/lirc/lirc_streamzap.c:219:
+					    (unsigned char *) &data);

CHECK:SPACING: No space is necessary after a cast
#315: FILE: drivers/input/lirc/lirc_streamzap.c:242:
+		lirc_buffer_read_1(&sz->delay_buf, (unsigned char *) &data);

CHECK:SPACING: No space is necessary after a cast
#318: FILE: drivers/input/lirc/lirc_streamzap.c:245:
+					    (unsigned char *) &data);

CHECK:SPACING: No space is necessary after a cast
#335: FILE: drivers/input/lirc/lirc_streamzap.c:262:
+		lirc_buffer_read_1(&sz->delay_buf, (unsigned char *) &data);

CHECK:SPACING: No space is necessary after a cast
#338: FILE: drivers/input/lirc/lirc_streamzap.c:265:
+					    (unsigned char *) &data);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#347: FILE: drivers/input/lirc/lirc_streamzap.c:274:
+		sz->delay_timer.expires = jiffies + HZ/10;
 		                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#367: FILE: drivers/input/lirc/lirc_streamzap.c:294:
+		deltv = sz->signal_start.tv_sec-sz->signal_last.tv_sec;
 		                               ^

CHECK:SPACING: No space is necessary after a cast
#371: FILE: drivers/input/lirc/lirc_streamzap.c:298:
+			tmp = (int) (deltv*1000000+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#371: FILE: drivers/input/lirc/lirc_streamzap.c:298:
+			tmp = (int) (deltv*1000000+
 			                  ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#371: FILE: drivers/input/lirc/lirc_streamzap.c:298:
+			tmp = (int) (deltv*1000000+
 			                          ^

CHECK:SPACING: No space is necessary after a cast
#383: FILE: drivers/input/lirc/lirc_streamzap.c:310:
+	pulse = ((int) value)*STREAMZAP_RESOLUTION;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#383: FILE: drivers/input/lirc/lirc_streamzap.c:310:
+	pulse = ((int) value)*STREAMZAP_RESOLUTION;
 	                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#384: FILE: drivers/input/lirc/lirc_streamzap.c:311:
+	pulse += STREAMZAP_RESOLUTION/2;
 	                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#388: FILE: drivers/input/lirc/lirc_streamzap.c:315:
+	dprintk("p %u", sz->plugin.minor, pulse&PULSE_MASK);
 	                                       ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#395: FILE: drivers/input/lirc/lirc_streamzap.c:322:
+	push_full_pulse(sz, (value & STREAMZAP_PULSE_MASK)>>4);
 	                                                  ^

CHECK:SPACING: No space is necessary after a cast
#403: FILE: drivers/input/lirc/lirc_streamzap.c:330:
+	space = ((int) value)*STREAMZAP_RESOLUTION;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#403: FILE: drivers/input/lirc/lirc_streamzap.c:330:
+	space = ((int) value)*STREAMZAP_RESOLUTION;
 	                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#404: FILE: drivers/input/lirc/lirc_streamzap.c:331:
+	space += STREAMZAP_RESOLUTION/2;
 	                             ^

CHECK:SPACING: No space is necessary after a cast
#450: FILE: drivers/input/lirc/lirc_streamzap.c:377:
+				i, (unsigned char) sz->buf_in[i]);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#453: FILE: drivers/input/lirc/lirc_streamzap.c:380:
+				if ((sz->buf_in[i]&STREAMZAP_PULSE_MASK) ==
 				                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#457: FILE: drivers/input/lirc/lirc_streamzap.c:384:
+				} else if ((sz->buf_in[i]&STREAMZAP_SPACE_MASK)
 				                         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#472: FILE: drivers/input/lirc/lirc_streamzap.c:399:
+				if (sz->buf_in[i] == 0xff) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#476: FILE: drivers/input/lirc/lirc_streamzap.c:403:
+				} else

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#481: FILE: drivers/input/lirc/lirc_streamzap.c:408:
+				if ((sz->buf_in[i]&STREAMZAP_SPACE_MASK) ==
 				                  ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#497: FILE: drivers/input/lirc/lirc_streamzap.c:424:
+	return;
+}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sz)...) over kmalloc(sizeof(struct usb_streamzap)...)
#518: FILE: drivers/input/lirc/lirc_streamzap.c:445:
+	sz = kmalloc(sizeof(struct usb_streamzap), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sz"
#519: FILE: drivers/input/lirc/lirc_streamzap.c:446:
+	if (sz == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#531: FILE: drivers/input/lirc/lirc_streamzap.c:458:
+	if (iface_host->desc.bNumEndpoints != 1) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around iface_host->endpoint[0].desc
#538: FILE: drivers/input/lirc/lirc_streamzap.c:465:
+	sz->endpoint = &(iface_host->endpoint[0].desc);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#539: FILE: drivers/input/lirc/lirc_streamzap.c:466:
+	if ((sz->endpoint->bEndpointAddress & USB_ENDPOINT_DIR_MASK)

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#547: FILE: drivers/input/lirc/lirc_streamzap.c:474:
+	if ((sz->endpoint->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK)

CHECK:CAMELCASE: Avoid CamelCase: <wMaxPacketSize>
#555: FILE: drivers/input/lirc/lirc_streamzap.c:482:
+	if (sz->endpoint->wMaxPacketSize == 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sz->buf_in"
#568: FILE: drivers/input/lirc/lirc_streamzap.c:495:
+	if (sz->buf_in == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sz->urb_in"
#572: FILE: drivers/input/lirc/lirc_streamzap.c:499:
+	if (sz->urb_in == NULL)

CHECK:SPACING: No space is necessary after a cast
#612: FILE: drivers/input/lirc/lirc_streamzap.c:539:
+	sz->delay_timer.data = (unsigned long) sz;

CHECK:SPACING: No space is necessary after a cast
#618: FILE: drivers/input/lirc/lirc_streamzap.c:545:
+	sz->flush_timer.data = (unsigned long) sz;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: drivers/input/lirc/lirc_streamzap.c:551:
+	usb_fill_int_urb(sz->urb_in, udev,
+		usb_rcvintpipe(udev, sz->endpoint->bEndpointAddress),

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#626: FILE: drivers/input/lirc/lirc_streamzap.c:553:
+		sz->endpoint->bInterval);

CHECK:CAMELCASE: Avoid CamelCase: <iManufacturer>
#628: FILE: drivers/input/lirc/lirc_streamzap.c:555:
+	if (udev->descriptor.iManufacturer

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#629: FILE: drivers/input/lirc/lirc_streamzap.c:556:
+	if (udev->descriptor.iManufacturer
+	    && usb_string(udev, udev->descriptor.iManufacturer, buf, 63) > 0)

CHECK:CAMELCASE: Avoid CamelCase: <iProduct>
#632: FILE: drivers/input/lirc/lirc_streamzap.c:559:
+	if (udev->descriptor.iProduct

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#633: FILE: drivers/input/lirc/lirc_streamzap.c:560:
+	if (udev->descriptor.iProduct
+	    && usb_string(udev,  udev->descriptor.iProduct, buf, 63) > 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#636: FILE: drivers/input/lirc/lirc_streamzap.c:563:
+	printk(KERN_INFO DRIVER_NAME "[%d]: %s on usb%d:%d attached\n",

CHECK:SPACING: No space is necessary after a cast
#729: FILE: drivers/input/lirc/lirc_streamzap.c:656:
+		result = put_user(STREAMZAP_RESOLUTION, (unsigned long *) arg);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#780: FILE: drivers/input/lirc/lirc_streamzap.c:707:
+	printk(KERN_INFO DRIVER_NAME "[%d]: disconnected\n", minor);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#787: FILE: drivers/input/lirc/lirc_streamzap.c:714:
+	printk(DRIVER_NAME "[%d]: suspend\n", sz->plugin.minor);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#844: FILE: drivers/input/lirc/lirc_streamzap.c:771:
+	printk(KERN_INFO DRIVER_NAME " " DRIVER_VERSION " registered\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#857: FILE: drivers/input/lirc/lirc_streamzap.c:784:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230087.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 12 warnings, 62 checks, 810 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230087.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
