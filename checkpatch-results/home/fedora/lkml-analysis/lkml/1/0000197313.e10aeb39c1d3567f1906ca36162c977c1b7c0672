WARNING:TYPO_SPELLING: 'defaut' may be misspelled - perhaps 'default'?
#48: 
  This patch uses a defaut agaw, and skip top levels of page
                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#95: FILE: drivers/pci/dmar.c:517:
+		printk(KERN_ERR "IOMMU: unsupported sagaw %lx\n", sagaw);

CHECK:BRACES: braces {} should be used on all arms of this statement
#256: FILE: drivers/pci/intel-iommu.c:1023:
+		if (domain->flags & DOMAIN_FLAG_VIRTUAL_MACHINE) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#259: FILE: drivers/pci/intel-iommu.c:1026:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: drivers/pci/intel-iommu.c:1181:
+		pr_debug("IOMMU: hardware doesn't support agaw %d\n",
+		  agaw);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#349: FILE: drivers/pci/intel-iommu.c:1269:
+^I^Ireturn ^I-ENODEV;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: drivers/pci/intel-iommu.c:1272:
+	ret = domain_context_mapping_one(domain, iommu,
+		pdev->bus->number, pdev->devfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: drivers/pci/intel-iommu.c:1284:
+		ret = domain_context_mapping_one(domain, iommu,
+			parent->bus->number, parent->devfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: drivers/pci/intel-iommu.c:1308:
+	ret = device_context_mapped(iommu,
 		pdev->bus->number, pdev->devfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: drivers/pci/intel-iommu.c:1319:
+		ret = device_context_mapped(iommu, parent->bus->number,
 			parent->devfn);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#472: FILE: drivers/pci/intel-iommu.c:1462:
+^I^Ireturn ^INULL;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: drivers/pci/intel-iommu.c:1956:
+	ret = iommu_flush_iotlb_psi(iommu, domain->id,
 			start_paddr, size >> VTD_PAGE_SHIFT, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: drivers/pci/intel-iommu.c:2070:
+		if (iommu_flush_iotlb_psi(iommu,
 			domain->id, start_addr, size >> VTD_PAGE_SHIFT, 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: drivers/pci/intel-iommu.c:2159:
+	if (iommu_flush_iotlb_psi(iommu, domain->id, start_addr,
 			size >> VTD_PAGE_SHIFT, 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: drivers/pci/intel-iommu.c:2258:
+	if (iommu_flush_iotlb_psi(iommu, domain->id,
 			start_addr, offset >> VTD_PAGE_SHIFT, 1))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: drivers/pci/intel-iommu.c:2493:
+		info = list_entry(domain->devices.next,
+			struct device_domain_info, link);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#755: FILE: drivers/pci/intel-iommu.c:2510:
+				break;
+			else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: drivers/pci/intel-iommu.c:2540:
+		info = list_entry(domain->devices.next,
+			struct device_domain_info, link);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: drivers/pci/intel-iommu.c:2565:
+static int vm_domain_context_mapping_one(struct dmar_domain *domain,
+		struct intel_iommu *iommu, u8 bus, u8 devfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: drivers/pci/intel-iommu.c:2577:
+	pr_debug("Set context mapping for %02x:%02x.%d\n",
+		bus, PCI_SLOT(devfn), PCI_FUNC(devfn));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#823: FILE: drivers/pci/intel-iommu.c:2578:
+	BUG_ON(!domain->pgd);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: drivers/pci/intel-iommu.c:2600:
+		num = find_next_bit(iommu->domain_ids,
+		  cap_ndoms(iommu->cap), num+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#845: FILE: drivers/pci/intel-iommu.c:2600:
+		  cap_ndoms(iommu->cap), num+1);
 		                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#852: FILE: drivers/pci/intel-iommu.c:2607:
+			printk(KERN_ERR "IOMMU: no free domain ids\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: drivers/pci/intel-iommu.c:2639:
+	if (iommu->flush.flush_context(iommu, id,
+		(((u16)bus) << 8) | devfn, DMA_CCMD_MASK_NOBIT,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#905: FILE: drivers/pci/intel-iommu.c:2660:
+^I^Ireturn ^I-ENODEV;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#908: FILE: drivers/pci/intel-iommu.c:2663:
+	ret = vm_domain_context_mapping_one(domain, iommu,
+		pdev->bus->number, pdev->devfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#920: FILE: drivers/pci/intel-iommu.c:2675:
+		ret = vm_domain_context_mapping_one(domain, iommu,
+			parent->bus->number, parent->devfn);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#933: FILE: drivers/pci/intel-iommu.c:2688:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#981: FILE: drivers/pci/intel-iommu.c:2736:
+			i = find_next_bit(iommu->domain_ids, ndomains, i+1);
 			                                                ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1102: FILE: drivers/pci/intel-iommu.c:2832:
+^I^Ireturn ^I-ENODEV;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1109: FILE: drivers/pci/intel-iommu.c:2839:
+		printk(KERN_ERR "%s: iommu agaw (%d) is not "

WARNING:SPLIT_STRING: quoted string split across lines
#1110: FILE: drivers/pci/intel-iommu.c:2840:
+		printk(KERN_ERR "%s: iommu agaw (%d) is not "
+		       "sufficient for the mapped address (%llx)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1128: FILE: drivers/pci/intel-iommu.c:2854:
 
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1160: FILE: drivers/pci/intel-iommu.c:2880:
+			printk(KERN_ERR "%s: iommu agaw (%d) is not "

WARNING:SPLIT_STRING: quoted string split across lines
#1161: FILE: drivers/pci/intel-iommu.c:2881:
+			printk(KERN_ERR "%s: iommu agaw (%d) is not "
+			       "sufficient for the mapped address (%llx)\n",

CHECK:BIT_MACRO: Prefer using the BIT macro
#1203: FILE: include/linux/dma_remapping.h:117:
+#define DOMAIN_FLAG_P2P_MULTIPLE_DEVICES	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1208: FILE: include/linux/dma_remapping.h:122:
+#define DOMAIN_FLAG_VIRTUAL_MACHINE		(1 << 1)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1245: FILE: include/linux/dmar.h:56:
+extern int width_to_agaw(int width);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197313.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 26 checks, 1163 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197313.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
