WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#94: FILE: startproc.c:35:
+		   const int nicelvl, const int env, const char* root, unsigned short flags, const char *smack);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#94: FILE: startproc.c:35:
+		   const int nicelvl, const int env, const char* root, unsigned short flags, const char *smack);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: startproc.c:58:
+    char *smack = NULL;$

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#111: FILE: startproc.c:86:
+    while ((c = getopt(argc, argv, "+c:edp:l:hqvsu:S:g:t:n:fLi:")) != -1) { /* `+' is POSIX correct */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: startproc.c:86:
+    while ((c = getopt(argc, argv, "+c:edp:l:hqvsu:S:g:t:n:fLi:")) != -1) { /* `+' is POSIX correct */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: startproc.c:216:
+            case 'S':$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: startproc.c:216:
+            case 'S':$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#120: FILE: startproc.c:217:
+		if (optarg && optarg[0] != '/' && optarg[0] != '-') {
+                    smack = optarg;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#120: FILE: startproc.c:217:
+		if (optarg && optarg[0] != '/' && optarg[0] != '-') {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: startproc.c:218:
+                    smack = optarg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: startproc.c:218:
+                    smack = optarg;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#122: FILE: startproc.c:219:
+		} else
+                    error(LSB_WRGSYN,"Option -S requires a smack label string\n");

CHECK:BRACES: Unbalanced braces around else statement
#122: FILE: startproc.c:219:
+		} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: startproc.c:220:
+                    error(LSB_WRGSYN,"Option -S requires a smack label string\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: startproc.c:220:
+                    error(LSB_WRGSYN,"Option -S requires a smack label string\n");$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: startproc.c:220:
+                    error(LSB_WRGSYN,"Option -S requires a smack label string\n");
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: startproc.c:321:
+    (void)do_fork(fullname, argv, log_file, nicelvl, env, root, flags, smack);$

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#142: FILE: startproc.c:351:
+		   const int nicelvl, const int env, const char* root, unsigned short flags, const char *smack)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#142: FILE: startproc.c:351:
+		   const int nicelvl, const int env, const char* root, unsigned short flags, const char *smack)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#150: FILE: startproc.c:485:
+	if (smack) {
+	    FILE *smack_current;

WARNING:TABSTOP: Statements should start on a tabstop
#152: FILE: startproc.c:487:
+	    if ((smack_current = fopen("/proc/self/attr/current", "w")) == 0 ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: startproc.c:487:
+	    FILE *smack_current;
+	    if ((smack_current = fopen("/proc/self/attr/current", "w")) == 0 ) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#152: FILE: startproc.c:487:
+	    if ((smack_current = fopen("/proc/self/attr/current", "w")) == 0 ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#152: FILE: startproc.c:487:
+	    if ((smack_current = fopen("/proc/self/attr/current", "w")) == 0 ) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#153: FILE: startproc.c:488:
+	        error(LSB_PROOF," can not set smack label (missing capability?). %s\n", strerror(errno));

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: startproc.c:488:
+^I        error(LSB_PROOF," can not set smack label (missing capability?). %s\n", strerror(errno));$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#153: FILE: startproc.c:488:
+	        error(LSB_PROOF," can not set smack label (missing capability?). %s\n", strerror(errno));
 	                       ^

WARNING:TABSTOP: Statements should start on a tabstop
#154: FILE: startproc.c:489:
+	    } else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: startproc.c:490:
+^I        fprintf(smack_current, "%s", smack);$

WARNING:TABSTOP: Statements should start on a tabstop
#157: FILE: startproc.c:492:
+	    }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: startproc.c:493:
+^I    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#159: FILE: startproc.c:494:
+	    
+	}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224242.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 18 warnings, 2 checks, 80 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224242.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
