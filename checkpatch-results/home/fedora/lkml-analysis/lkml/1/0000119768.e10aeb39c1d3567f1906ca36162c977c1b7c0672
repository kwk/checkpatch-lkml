WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:NEW_TYPEDEFS: do not add new typedefs
#114: FILE: arch/microblaze/include/asm/page.h:70:
+typedef unsigned long pte_basic_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: arch/microblaze/include/asm/page.h:81:
+extern void copy_page(void *to, void *from);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#141: FILE: arch/microblaze/include/asm/page.h:98:
+typedef struct { unsigned long pmd; } pmd_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#142: FILE: arch/microblaze/include/asm/page.h:99:
+typedef struct { unsigned long pgd; } pgd_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: arch/microblaze/include/asm/page.h:145:
+extern int page_is_ram(unsigned long pfn);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: arch/microblaze/include/asm/page.h:154:
+#  define virt_to_page(kaddr) ^I(mem_map +  MAP_NR(kaddr))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pfn' - possible side-effects?
#218: FILE: arch/microblaze/include/asm/page.h:164:
+#  define pfn_valid(pfn)	((pfn) >= min_low_pfn && (pfn) <= max_mapnr)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: arch/microblaze/include/asm/page.h:169:
+#  define VALID_PAGE(page) ^I((page - mem_map) < max_mapnr)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#223: FILE: arch/microblaze/include/asm/page.h:169:
+#  define VALID_PAGE(page) 	((page - mem_map) < max_mapnr)

CHECK:SPACING: No space is necessary after a cast
#239: FILE: arch/microblaze/include/asm/page.h:178:
+#  define __pa(vaddr)	((unsigned long) (vaddr))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#240: FILE: arch/microblaze/include/asm/page.h:179:
+#  define __va(paddr)	((void *) (paddr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#254: FILE: arch/microblaze/include/asm/page.h:191:
+#define tophys(rd, rs)	addik rd, rs, 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#255: FILE: arch/microblaze/include/asm/page.h:192:
+#define tovirt(rd, rs)	addik rd, rs, 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#261: FILE: arch/microblaze/include/asm/page.h:198:
+#define tophys(rd, rs) \
+	addik rd, rs, (CONFIG_KERNEL_BASE_ADDR - CONFIG_KERNEL_START)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#263: FILE: arch/microblaze/include/asm/page.h:200:
+#define tovirt(rd, rs) \
+	addik rd, rs, (CONFIG_KERNEL_START - CONFIG_KERNEL_BASE_ADDR)

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#301: FILE: arch/microblaze/include/asm/pgalloc.h:19:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cache.h> instead of <asm/cache.h>
#303: FILE: arch/microblaze/include/asm/pgalloc.h:21:
+#include <asm/cache.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#331: FILE: arch/microblaze/include/asm/pgalloc.h:49:
+#define zero_cache_sz^I ^I(zero_sz)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: arch/microblaze/include/asm/pgalloc.h:58:
+extern unsigned long get_zero_page_fast(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: arch/microblaze/include/asm/pgalloc.h:60:
+extern void __bad_pte(pmd_t *pmd);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ret"
#349: FILE: arch/microblaze/include/asm/pgalloc.h:67:
+	if (ret != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#359: FILE: arch/microblaze/include/asm/pgalloc.h:77:
+	if (ret != NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ret"
#359: FILE: arch/microblaze/include/asm/pgalloc.h:77:
+	if (ret != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#363: FILE: arch/microblaze/include/asm/pgalloc.h:81:
+	} else

CHECK:SPACING: No space is necessary after a cast
#371: FILE: arch/microblaze/include/asm/pgalloc.h:89:
+	pgd_quicklist = (unsigned long *) pgd;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#389: FILE: arch/microblaze/include/asm/pgalloc.h:107:
+#define pmd_alloc_one_fast(mm, address)	({ BUG(); ((pmd_t *)1); })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#390: FILE: arch/microblaze/include/asm/pgalloc.h:108:
+#define pmd_alloc_one(mm, address)	({ BUG(); ((pmd_t *)2); })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#393: FILE: arch/microblaze/include/asm/pgalloc.h:111:
+#define pgd_populate(mm, pmd, pte)	BUG()

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: arch/microblaze/include/asm/pgalloc.h:114:
+static inline pte_t *pte_alloc_one_kernel(struct mm_struct *mm,
+		unsigned long address)

WARNING:LINE_SPACING: Missing a blank line after declarations
#400: FILE: arch/microblaze/include/asm/pgalloc.h:118:
+	extern int mem_init_done;
+	extern void *early_get_page(void);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#400: FILE: arch/microblaze/include/asm/pgalloc.h:118:
+	extern void *early_get_page(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: arch/microblaze/include/asm/pgalloc.h:131:
+static inline struct page *pte_alloc_one(struct mm_struct *mm,
+		unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: arch/microblaze/include/asm/pgalloc.h:148:
+static inline pte_t *pte_alloc_one_fast(struct mm_struct *mm,
+		unsigned long address)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ret"
#435: FILE: arch/microblaze/include/asm/pgalloc.h:153:
+	if (ret != NULL) {

CHECK:SPACING: No space is necessary after a cast
#446: FILE: arch/microblaze/include/asm/pgalloc.h:164:
+	pte_quicklist = (unsigned long *) pte;

CHECK:SPACING: No space is necessary after a cast
#470: FILE: arch/microblaze/include/asm/pgalloc.h:188:
+		(pmd_val(*(pmd)) = (unsigned long) (pte))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#476: FILE: arch/microblaze/include/asm/pgalloc.h:194:
+#define pmd_alloc_one(mm, address)	({ BUG(); ((pmd_t *)2); })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: arch/microblaze/include/asm/pgalloc.h:197:
+#define pgd_populate(mm, pmd, pte)	BUG()

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#481: FILE: arch/microblaze/include/asm/pgalloc.h:199:
+extern int do_check_pgt_cache(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#481: FILE: arch/microblaze/include/asm/pgalloc.h:199:
+extern int do_check_pgt_cache(int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#481: FILE: arch/microblaze/include/asm/pgalloc.h:199:
+extern int do_check_pgt_cache(int, int);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119768.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 15 warnings, 23 checks, 430 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119768.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
