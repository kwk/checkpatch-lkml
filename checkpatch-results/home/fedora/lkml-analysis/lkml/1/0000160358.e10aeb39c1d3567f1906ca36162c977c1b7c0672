WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
        field special:char next_comm[TASK_COMM_LEN];    offset:20;      size:16;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#89: FILE: kernel/trace/trace_events.c:451:
+event_format_read(struct file *filp, char __user *ubuf, size_t cnt,
                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: kernel/trace/trace_events.c:475:
+		r = simple_read_from_buffer(ubuf, cnt, ppos,
+					      buf, strlen(buf));

WARNING:SPLIT_STRING: quoted string split across lines
#144: FILE: kernel/trace/trace_events.c:649:
 		pr_warning("Could not create debugfs "
+			   "'%s/available_types' entry\n", call->name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#154: FILE: kernel/trace/trace_events.c:659:
+		pr_warning("Could not create debugfs "
+			   "'%s/format' entry\n", call->name);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#173: FILE: kernel/trace/trace_events_stage_2.h:84:
+ * ^Istruct ftrace_raw_##call field;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#174: FILE: kernel/trace/trace_events_stage_2.h:85:
+ * ^Iint ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: kernel/trace/trace_events_stage_2.h:87:
+ * ^Iret = trace_seq_printf(s, #type " " #item ";"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: kernel/trace/trace_events_stage_2.h:88:
+ * ^I^I^I       " size:%d; offset:%d;\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: kernel/trace/trace_events_stage_2.h:89:
+ * ^I^I^I       sizeof(field.type),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: kernel/trace/trace_events_stage_2.h:90:
+ * ^I^I^I       offsetof(struct ftrace_raw_##call,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: kernel/trace/trace_events_stage_2.h:91:
+ * ^I^I^I^I^Iitem));$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#186: FILE: kernel/trace/trace_events_stage_2.h:97:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%lu;\tsize:%lu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
+	if (!ret)							\
+		return 0;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#186: FILE: kernel/trace/trace_events_stage_2.h:97:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%lu;\tsize:%lu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
+	if (!ret)							\
+		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#186: FILE: kernel/trace/trace_events_stage_2.h:97:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%lu;\tsize:%lu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
+	if (!ret)							\
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#186: FILE: kernel/trace/trace_events_stage_2.h:97:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%lu;\tsize:%lu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
+	if (!ret)							\
+		return 0;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#194: FILE: kernel/trace/trace_events_stage_2.h:105:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#196: FILE: kernel/trace/trace_events_stage_2.h:107:
+#define TRACE_FIELD_SPECIAL(type_item, item, cmd)			\
+	ret = trace_seq_printf(s, "\tfield special:" #type_item ";\t"	\
+			       "offset:%lu;\tsize:%lu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
+	if (!ret)							\
+		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#196: FILE: kernel/trace/trace_events_stage_2.h:107:
+#define TRACE_FIELD_SPECIAL(type_item, item, cmd)			\
+	ret = trace_seq_printf(s, "\tfield special:" #type_item ";\t"	\
+			       "offset:%lu;\tsize:%lu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
+	if (!ret)							\
+		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#196: FILE: kernel/trace/trace_events_stage_2.h:107:
+#define TRACE_FIELD_SPECIAL(type_item, item, cmd)			\
+	ret = trace_seq_printf(s, "\tfield special:" #type_item ";\t"	\
+			       "offset:%lu;\tsize:%lu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
+	if (!ret)							\
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#196: FILE: kernel/trace/trace_events_stage_2.h:107:
+#define TRACE_FIELD_SPECIAL(type_item, item, cmd)			\
+	ret = trace_seq_printf(s, "\tfield special:" #type_item ";\t"	\
+			       "offset:%lu;\tsize:%lu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
+	if (!ret)							\
+		return 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000160358.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 15 warnings, 4 checks, 154 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000160358.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
