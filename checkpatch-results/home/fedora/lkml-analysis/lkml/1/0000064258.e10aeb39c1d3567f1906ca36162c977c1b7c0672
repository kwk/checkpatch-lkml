WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Both writers and GC process take tomoyo_policy_lock mutex when updating list

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: security/tomoyo/gc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#75: FILE: security/tomoyo/gc.c:2:
+ * security/tomoyo/gc.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#106: FILE: security/tomoyo/gc.c:33:
+};
+static LIST_HEAD(tomoyo_gc_queue);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#113: FILE: security/tomoyo/gc.c:40:
+	struct tomoyo_gc_entry *entry = kzalloc(sizeof(*entry), GFP_ATOMIC);
+	if (!entry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: security/tomoyo/gc.c:121:
+	struct task_struct *t;
+	read_lock(&tasklist_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#212: FILE: security/tomoyo/gc.c:139:
+	size_t size;
+	tomoyo_put_condition(acl->cond);

WARNING:LINE_SPACING: Missing a blank line after declarations
#217: FILE: security/tomoyo/gc.c:144:
+			struct tomoyo_path_acl *entry;
+			size = sizeof(*entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#225: FILE: security/tomoyo/gc.c:152:
+			struct tomoyo_path_number3_acl *entry;
+			size = sizeof(*entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#236: FILE: security/tomoyo/gc.c:163:
+			struct tomoyo_path2_acl *entry;
+			size = sizeof(*entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#245: FILE: security/tomoyo/gc.c:172:
+			struct tomoyo_ip_network_acl *entry;
+			size = sizeof(*entry);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'entry->address.ipv6.min'
#253: FILE: security/tomoyo/gc.c:180:
+				tomoyo_put_ipv6_address(entry->
+							address.ipv6.min);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'entry->address.ipv6.max'
#255: FILE: security/tomoyo/gc.c:182:
+				tomoyo_put_ipv6_address(entry->
+							address.ipv6.max);

WARNING:LINE_SPACING: Missing a blank line after declarations
#264: FILE: security/tomoyo/gc.c:191:
+			struct tomoyo_path_number_acl *entry;
+			size = sizeof(*entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#273: FILE: security/tomoyo/gc.c:200:
+			struct tomoyo_env_acl *entry;
+			size = sizeof(*entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#281: FILE: security/tomoyo/gc.c:208:
+			struct tomoyo_capability_acl *entry;
+			size = sizeof(*entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: security/tomoyo/gc.c:216:
+			struct tomoyo_execute_handler_record *entry;
+			size = sizeof(*entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#297: FILE: security/tomoyo/gc.c:224:
+			struct tomoyo_mount_acl *entry;
+			size = sizeof(*entry);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#307: FILE: security/tomoyo/gc.c:234:
+		printk(KERN_WARNING "Unknown type\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#317: FILE: security/tomoyo/gc.c:244:
+	struct tomoyo_acl_info *tmp;
+	if (tomoyo_used_by_task(domain))

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: security/tomoyo/gc.c:248:
+		size_t size = tomoyo_del_acl(acl);
+		tomoyo_memory_free(acl, size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: security/tomoyo/gc.c:334:
+		struct tomoyo_globally_readable_file_entry *ptr;
+		list_for_each_entry_rcu(ptr, &tomoyo_globally_readable_list,

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: security/tomoyo/gc.c:346:
+		struct tomoyo_globally_usable_env_entry *ptr;
+		list_for_each_entry_rcu(ptr, &tomoyo_globally_usable_env_list,

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: security/tomoyo/gc.c:358:
+		struct tomoyo_pattern_entry *ptr;
+		list_for_each_entry_rcu(ptr, &tomoyo_pattern_list, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#442: FILE: security/tomoyo/gc.c:369:
+		struct tomoyo_no_rewrite_entry *ptr;
+		list_for_each_entry_rcu(ptr, &tomoyo_no_rewrite_list, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#453: FILE: security/tomoyo/gc.c:380:
+		struct tomoyo_domain_initializer_entry *ptr;
+		list_for_each_entry_rcu(ptr, &tomoyo_domain_initializer_list,

WARNING:LINE_SPACING: Missing a blank line after declarations
#466: FILE: security/tomoyo/gc.c:393:
+		struct tomoyo_domain_keeper_entry *ptr;
+		list_for_each_entry_rcu(ptr, &tomoyo_domain_keeper_list,

WARNING:LINE_SPACING: Missing a blank line after declarations
#478: FILE: security/tomoyo/gc.c:405:
+		struct tomoyo_policy_manager_entry *ptr;
+		list_for_each_entry_rcu(ptr, &tomoyo_policy_manager_list,

WARNING:LINE_SPACING: Missing a blank line after declarations
#490: FILE: security/tomoyo/gc.c:417:
+		struct tomoyo_aggregator_entry *ptr;
+		list_for_each_entry_rcu(ptr, &tomoyo_aggregator_list, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#501: FILE: security/tomoyo/gc.c:428:
+		struct tomoyo_domain_info *domain;
+		list_for_each_entry_rcu(domain, &tomoyo_domain_list, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#503: FILE: security/tomoyo/gc.c:430:
+			struct tomoyo_acl_info *acl;
+			list_for_each_entry_rcu(acl, &domain->acl_info_list,

WARNING:LINE_SPACING: Missing a blank line after declarations
#523: FILE: security/tomoyo/gc.c:450:
+		struct tomoyo_path_group *group;
+		list_for_each_entry_rcu(group, &tomoyo_path_group_list, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#525: FILE: security/tomoyo/gc.c:452:
+			struct tomoyo_path_group_member *member;
+			list_for_each_entry_rcu(member, &group->member_list,

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: security/tomoyo/gc.c:473:
+		struct tomoyo_address_group *group;
+		list_for_each_entry_rcu(group, &tomoyo_address_group_list,

WARNING:LINE_SPACING: Missing a blank line after declarations
#549: FILE: security/tomoyo/gc.c:476:
+			struct tomoyo_address_group_member *member;
+			list_for_each_entry_rcu(member, &group->member_list,

WARNING:LINE_SPACING: Missing a blank line after declarations
#570: FILE: security/tomoyo/gc.c:497:
+		struct tomoyo_number_group *group;
+		list_for_each_entry_rcu(group, &tomoyo_number_group_list,

WARNING:LINE_SPACING: Missing a blank line after declarations
#573: FILE: security/tomoyo/gc.c:500:
+			struct tomoyo_number_group_member *member;
+			list_for_each_entry_rcu(member, &group->member_list,

WARNING:LINE_SPACING: Missing a blank line after declarations
#600: FILE: security/tomoyo/gc.c:527:
+		size_t size = 0;
+		list_for_each_entry_safe(p, tmp, &tomoyo_gc_queue, list) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'p->element'
#604: FILE: security/tomoyo/gc.c:531:
+				size = tomoyo_del_domain_initializer(p->
+								     element);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'p->element'
#629: FILE: security/tomoyo/gc.c:556:
+				size = tomoyo_del_path_group_member(p->
+								    element);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'p->element'
#636: FILE: security/tomoyo/gc.c:563:
+				size = tomoyo_del_address_group_member(p->
+								       element

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'p->element'
#644: FILE: security/tomoyo/gc.c:571:
+				size = tomoyo_del_number_group_member(p->
+								      element);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#659: FILE: security/tomoyo/gc.c:586:
+				printk(KERN_WARNING "Unknown type\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064258.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 42 warnings, 1 checks, 606 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064258.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
