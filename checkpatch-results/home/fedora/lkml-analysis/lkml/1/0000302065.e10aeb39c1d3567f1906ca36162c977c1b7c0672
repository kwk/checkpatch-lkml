CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#78: FILE: fs/nfs/fscache.c:192:
+		nfsi->fscache = fscache_acquire_cookie(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#156: FILE: fs/nfs/fscache.c:270:
+		printk(KERN_WARNING "NFS:"

WARNING:SPLIT_STRING: quoted string split across lines
#157: FILE: fs/nfs/fscache.c:271:
+		printk(KERN_WARNING "NFS:"
+		       " Inode already locked for cache management\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#181: FILE: fs/nfs/fscache.c:295:
+void nfs_fscache_set_inode_cookie(struct inode *inode, struct file *filp)
                                                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#208: FILE: fs/nfs/fscache.c:322:
+		nfsi->fscache = fscache_acquire_cookie(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: fs/nfs/fscache.h:80:
+extern void nfs_fscache_init_inode_cookie(struct inode *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#237: FILE: fs/nfs/fscache.h:80:
+extern void nfs_fscache_init_inode_cookie(struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: fs/nfs/fscache.h:81:
+extern void nfs_fscache_release_inode_cookie(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#238: FILE: fs/nfs/fscache.h:81:
+extern void nfs_fscache_release_inode_cookie(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: fs/nfs/fscache.h:82:
+extern void nfs_fscache_zap_inode_cookie(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#239: FILE: fs/nfs/fscache.h:82:
+extern void nfs_fscache_zap_inode_cookie(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: fs/nfs/fscache.h:83:
+extern void nfs_fscache_set_inode_cookie(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#240: FILE: fs/nfs/fscache.h:83:
+extern void nfs_fscache_set_inode_cookie(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#240: FILE: fs/nfs/fscache.h:83:
+extern void nfs_fscache_set_inode_cookie(struct inode *, struct file *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: fs/nfs/fscache.h:84:
+extern void nfs_fscache_renew_inode_cookie(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#241: FILE: fs/nfs/fscache.h:84:
+extern void nfs_fscache_renew_inode_cookie(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#242: FILE: fs/nfs/fscache.h:85:
+extern void nfs_fscache_attr_changed(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#242: FILE: fs/nfs/fscache.h:85:
+extern void nfs_fscache_attr_changed(struct inode *);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#256: FILE: fs/nfs/fscache.h:106:
+					     struct file *filp) {}
 					                  ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: fs/nfs/fscache.h:106:
+static inline void nfs_fscache_set_inode_cookie(struct inode *inode,
+					     struct file *filp) {}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#286: FILE: fs/nfs/inode.c:626:
+	nfs_fscache_set_inode_cookie(inode, filp);
 	                                    ^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#353: FILE: fs/nfs/inode.c:1054:
+			invalid |= NFS_INO_INVALID_ATTR|NFS_INO_INVALID_DATA |
 			                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#363: FILE: fs/nfs/inode.c:1065:
+		invalid |= NFS_INO_INVALID_ATTR|NFS_INO_INVALID_DATA |
 		                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#364: FILE: fs/nfs/inode.c:1066:
+			NFS_INO_INVALID_ACCESS|NFS_INO_INVALID_ACL |
 			                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#374: FILE: fs/nfs/inode.c:1080:
+			invalid |= NFS_INO_INVALID_ATTR|NFS_INO_INVALID_DATA |
 			                               ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302065.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 13 checks, 348 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302065.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
