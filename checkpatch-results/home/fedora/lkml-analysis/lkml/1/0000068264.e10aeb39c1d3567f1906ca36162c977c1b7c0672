WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#102: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: checkpoint/objhash.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:RETURN_VOID: void function return statements are not generally useful
#159: FILE: checkpoint/objhash.c:53:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#176: FILE: checkpoint/objhash.c:70:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#178: FILE: checkpoint/objhash.c:72:
+#define CKPT_OBJ_HASH_TOTAL  (1UL << CKPT_OBJ_HASH_NBITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#215: FILE: checkpoint/objhash.c:109:
+	head = kzalloc(CKPT_OBJ_HASH_TOTAL * sizeof(*head), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: No space is necessary after a cast
#234: FILE: checkpoint/objhash.c:128:
+	h = &ctx->obj_hash->head[hash_long((unsigned long) ptr,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#248: FILE: checkpoint/objhash.c:142:
+	h = &ctx->obj_hash->head[hash_long((unsigned long) objref,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#280: FILE: checkpoint/objhash.c:174:
+	BUG_ON(!ptr);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#282: FILE: checkpoint/objhash.c:176:
+	BUG_ON(ops->obj_type != type);

CHECK:SPACING: No space is necessary after a cast
#294: FILE: checkpoint/objhash.c:188:
+		i = hash_long((unsigned long) ptr, CKPT_OBJ_HASH_NBITS);

CHECK:SPACING: No space is necessary after a cast
#298: FILE: checkpoint/objhash.c:192:
+		i = hash_long((unsigned long) objref, CKPT_OBJ_HASH_NBITS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#338: FILE: checkpoint/objhash.c:232:
+		BUG_ON(obj->ops->obj_type != type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#358: FILE: checkpoint/objhash.c:252:
+	BUG_ON(obj && obj->ops->obj_type != type);

WARNING:TYPO_SPELLING: 'encoutner' may be misspelled - perhaps 'encounter'?
#369: FILE: checkpoint/objhash.c:263:
+ * @first: [output] first encoutner (added to table)
                           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#474: FILE: checkpoint/objhash.c:368:
+	BUG_ON(ops->obj_type != h->objtype);

CHECK:SPACING: No space is necessary after a cast
#574: FILE: checkpoint/restart.c:70:
+	ret = restore_obj(ctx, (struct ckpt_hdr_objref *) h);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#580: FILE: checkpoint/restart.c:76:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#653: FILE: include/linux/checkpoint.h:93:
+extern void ckpt_obj_hash_free(struct ckpt_ctx *ctx);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#654: FILE: include/linux/checkpoint.h:94:
+extern int ckpt_obj_hash_alloc(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#656: FILE: include/linux/checkpoint.h:96:
+extern int restore_obj(struct ckpt_ctx *ctx, struct ckpt_hdr_objref *h);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#657: FILE: include/linux/checkpoint.h:97:
+extern int checkpoint_obj(struct ckpt_ctx *ctx, void *ptr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: include/linux/checkpoint.h:99:
+extern int ckpt_obj_lookup(struct ckpt_ctx *ctx, void *ptr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#661: FILE: include/linux/checkpoint.h:101:
+extern int ckpt_obj_lookup_add(struct ckpt_ctx *ctx, void *ptr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#663: FILE: include/linux/checkpoint.h:103:
+extern void *ckpt_obj_fetch(struct ckpt_ctx *ctx, int objref,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#665: FILE: include/linux/checkpoint.h:105:
+extern int ckpt_obj_insert(struct ckpt_ctx *ctx, void *ptr, int objref,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#667: FILE: include/linux/checkpoint.h:107:
+extern int ckpt_obj_reserve(struct ckpt_ctx *ctx);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#701: FILE: include/linux/checkpoint_hdr.h:78:
+} __attribute__((aligned(8)));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068264.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 17 checks, 594 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068264.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
