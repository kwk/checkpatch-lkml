WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
    the head of the file) says. It will not always choose the first function

WARNING:TYPO_SPELLING: 'accidently' may be misspelled - perhaps 'accidentally'?
#69: 
    Luckily, this 'wrongly' implementation accidently makes the result same to
                                           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Argment' may be misspelled - perhaps 'Argument'?
#86: 
  * Argment number check is wrong. Should be 10.
    ^^^^^^^

WARNING:TYPO_SPELLING: 'documenation' may be misspelled - perhaps 'documentation'?
#95: 
  * Some documenation and in-line comment is wrong.
         ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'attchment' may be misspelled - perhaps 'attachment'?
#111: 
the attchment.
    ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: scripts/recordmcount.pl:11:
+# What we want to end up with this is a data area in .init.data in vmlinux $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: scripts/recordmcount.pl:12:
+# that contains a list of pointers to all the call sites in the kernel that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: scripts/recordmcount.pl:13:
+# call mcount. Later on boot up, the kernel will read this list, save the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: scripts/recordmcount.pl:14:
+# locations and turn them into nops. When tracing or profiling is later $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: scripts/recordmcount.pl:15:
+# enabled, these locations will then be converted back to pointers to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: scripts/recordmcount.pl:21:
+# When parse this object file using 'objdump', the references to the call $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: scripts/recordmcount.pl:22:
+# sites are offsets from the section that the call site is in. Hence, all $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: scripts/recordmcount.pl:23:
+# functions in a section that  has a call site to mcount, will have the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: scripts/recordmcount.pl:24:
+# offset from the beginning of the section and not the beginning of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: scripts/recordmcount.pl:27:
+# But where this section will reside finally in vmlinx is undetermined at $

WARNING:TYPO_SPELLING: 'refering' may be misspelled - perhaps 'referring'?
#166: FILE: scripts/recordmcount.pl:31:
+# The trick is to change the call offset refering the start of a section to
                                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'refering' may be misspelled - perhaps 'referring'?
#167: FILE: scripts/recordmcount.pl:32:
+# refering a function symbol in this section. During the link step, 'ld' will
   ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: scripts/recordmcount.pl:34:
+# $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: scripts/recordmcount.pl:65:
+# In our algorithm, we will choose the first global function we meet in this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: scripts/recordmcount.pl:66:
+# section as the reference. But this gets hard if there is no global functions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: scripts/recordmcount.pl:113:
+my $P = $0; $P =~ s@.*/@@g;  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: scripts/recordmcount.pl:124:
+# The following three variables are only valid in one section and will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: scripts/recordmcount.pl:140:
+my $mcount_section;^I# Mcount section name $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: scripts/recordmcount.pl:168:
+            $can_use_local = 1 if ($1 > 2 || ($1 == 2 && $2 >= 17)); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: scripts/recordmcount.pl:175:
+^I"\tLocal function references is disabled.\n" if !$can_use_local; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: scripts/recordmcount.pl:188:
+        $convert{$ref_func} = 1 if $locals{$ref_func};    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: scripts/recordmcount.pl:189:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: scripts/recordmcount.pl:224:
+exit(0) if ($inputfile =~ "kernel/trace/ftrace.o"); $

WARNING:TYPO_SPELLING: 'fuctions' may be misspelled - perhaps 'functions'?
#533: FILE: scripts/recordmcount.pl:342:
+# Step 1: Find all global and local fuctions. "T" is global and "t" is local
                                     ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#555: FILE: scripts/recordmcount.pl:354:
+# Exit early if no work to do $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: scripts/recordmcount.pl:355:
+exit(0) unless (%globals or (%locals and $can_use_local)); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: scripts/recordmcount.pl:364:
+    # Somehow the make process can execute this script on an object twice. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#666: FILE: scripts/recordmcount.pl:365:
+    # If it does, we would duplicate the mcount section and it will cause the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#667: FILE: scripts/recordmcount.pl:366:
+    # function tracer self test to fail. Check if the mcount section exists, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: scripts/recordmcount.pl:376:
+    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#678: FILE: scripts/recordmcount.pl:377:
+    # the start of a new section $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#685: FILE: scripts/recordmcount.pl:382:
+^I# reset for a new section $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#691: FILE: scripts/recordmcount.pl:388:
+        $valid_section = 1 if $text_sections{$1}; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#692: FILE: scripts/recordmcount.pl:389:
+    } $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: scripts/recordmcount.pl:395:
+^Iif ($2 !~ /^\.L/ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#704: FILE: scripts/recordmcount.pl:401:
+    } $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000056152.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 33 errors, 8 warnings, 0 checks, 612 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000056152.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
