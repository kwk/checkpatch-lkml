WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#65: FILE: Makefile:4:
+EXTRAVERSION = .1
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#91: FILE: drivers/scsi/hosts.c:195:
+int scsi_add_host_with_dma(struct Scsi_Host *shost, struct device *dev,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#144: FILE: drivers/scsi/megaraid/megaraid_sas.c:3112:
+		(unsigned long *) ((unsigned long)cmd->frame + ioc->sense_off);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#154: FILE: drivers/scsi/megaraid/megaraid_sas.c:3143:
+		sense_ptr = (unsigned long *) ((unsigned long)ioc->frame.raw +

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: fs/ext4/balloc.c:767:
+	if (EXT4_HAS_INCOMPAT_FEATURE(sb,EXT4_FEATURE_INCOMPAT_META_BG))
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#287: FILE: fs/ext4/ext4_jbd2.h:103:
+#define EXT4_MAXQUOTAS_TRANS_BLOCKS(sb) (MAXQUOTAS*EXT4_QUOTA_TRANS_BLOCKS(sb))
                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#288: FILE: fs/ext4/ext4_jbd2.h:104:
+#define EXT4_MAXQUOTAS_INIT_BLOCKS(sb) (MAXQUOTAS*EXT4_QUOTA_INIT_BLOCKS(sb))
                                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#289: FILE: fs/ext4/ext4_jbd2.h:105:
+#define EXT4_MAXQUOTAS_DEL_BLOCKS(sb) (MAXQUOTAS*EXT4_QUOTA_DEL_BLOCKS(sb))
                                                 ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#373: FILE: fs/ext4/extents.c:3342:
+	if ((flags & EXT4_GET_BLOCKS_UNINIT_EXT) == 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#377: FILE: fs/ext4/extents.c:3346:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'max_blocks > EXT4_MAX_TRANS_DATA'
#561: FILE: fs/ext4/inode.c:2803:
+	if (!(EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL) &&
 	    (max_blocks > EXT4_MAX_TRANS_DATA))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#719: FILE: fs/ext4/inode.c:5263:
+		handle = ext4_journal_start(inode, (EXT4_MAXQUOTAS_INIT_BLOCKS(inode->i_sb)+
 		                                                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#720: FILE: fs/ext4/inode.c:5264:
+					EXT4_MAXQUOTAS_DEL_BLOCKS(inode->i_sb))+3);
 					                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: fs/ext4/mballoc.c:2570:
+			trace_ext4_discard_blocks(sb,
+					(unsigned long long)discard_block,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#836: FILE: fs/ext4/mballoc.c:3029:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1075: FILE: fs/ext4/move_extent.c:708:
+		*err = mext_leaf_block(handle, orig_inode,
 					   orig_path, &tmp_dext, &orig_off);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1083: FILE: fs/ext4/move_extent.c:714:
+		*err = mext_leaf_block(handle, donor_inode,
 					   donor_path, &tmp_oext, &donor_off);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1125: FILE: fs/ext4/move_extent.c:746:
+		*err = mext_calc_swap_extents(&tmp_dext, &tmp_oext, orig_off,
 					   donor_off, count - replaced_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1204: FILE: fs/ext4/move_extent.c:832:
+		replaced_count = mext_replace_branches(handle, orig_inode,
+						donor_inode, orig_blk_offset,

CHECK:BRACES: Unbalanced braces around else statement
#1234: FILE: fs/ext4/move_extent.c:853:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1260: FILE: fs/ext4/move_extent.c:882:
+	replaced_count = mext_replace_branches(handle, orig_inode, donor_inode,
+					orig_blk_offset, block_len_in_page,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1263: FILE: fs/ext4/move_extent.c:885:
+		if (replaced_count) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1267: FILE: fs/ext4/move_extent.c:889:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1279: FILE: fs/ext4/move_extent.c:902:
+		*err = ext4_get_block(orig_inode,
 				(sector_t)(orig_blk_offset + i), bh, 0);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1328: FILE: fs/ext4/move_extent.c:960:
+	if (donor_inode->i_mode & (S_ISUID|S_ISGID)) {
 	                                  ^

WARNING:SPLIT_STRING: quoted string split across lines
#1330: FILE: fs/ext4/move_extent.c:962:
+		ext4_debug("ext4 move extent: suid or sgid is set"
+			   " to donor file [ino:orig %lu, donor %lu]\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1398: FILE: fs/ext4/move_extent.c:1342:
+			block_len_in_page = move_extent_per_page(

CHECK:CAMELCASE: Avoid CamelCase: <Opt_inode_readahead_blks>
#1664: FILE: fs/ext4/super.c:1092:
+	Opt_inode_readahead_blks, Opt_journal_ioprio,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_journal_ioprio>
#1664: FILE: fs/ext4/super.c:1092:
+	Opt_inode_readahead_blks, Opt_journal_ioprio,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_discard>
#1665: FILE: fs/ext4/super.c:1093:
+	Opt_discard, Opt_nodiscard,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nodiscard>
#1665: FILE: fs/ext4/super.c:1093:
+	Opt_discard, Opt_nodiscard,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noload>
#1673: FILE: fs/ext4/super.c:1118:
+	{Opt_noload, "norecovery"},

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1855: FILE: include/scsi/scsi_host.h:729:
+extern int __must_check scsi_add_host_with_dma(struct Scsi_Host *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1855: FILE: include/scsi/scsi_host.h:729:
+extern int __must_check scsi_add_host_with_dma(struct Scsi_Host *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1855: FILE: include/scsi/scsi_host.h:729:
+extern int __must_check scsi_add_host_with_dma(struct Scsi_Host *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1855: FILE: include/scsi/scsi_host.h:729:
+extern int __must_check scsi_add_host_with_dma(struct Scsi_Host *,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034772.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 6 warnings, 30 checks, 1618 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034772.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
