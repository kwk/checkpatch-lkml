WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
master.kernel.org:/pub/scm/linux/kernel/git/cooloney/blackfin-2.6.git for-linus

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#221: FILE: arch/blackfin/Kconfig:331:
BFIN548_BLUETECHNIX_CM)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#301: FILE: arch/blackfin/Kconfig:936:
+config PM_BFIN_WAKE_RTC
+	bool "Allow Wake-Up from RESET and on-chip RTC"
+	depends on PM
+	default n
+	help
+	  Enable RTC Wake-Up (Voltage Regulator Power-Up)
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#308: FILE: arch/blackfin/Kconfig:943:
+config PM_BFIN_WAKE_PH6
+	bool "Allow Wake-Up from on-chip PHY or PH6 GP"
+	depends on PM && (BF52x || BF534 || BF536 || BF537)
+	default n
+	help
+	  Enable PHY and PH6 GP Wake-Up (Voltage Regulator Power-Up)
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#315: FILE: arch/blackfin/Kconfig:950:
+config PM_BFIN_WAKE_CAN
+	bool "Allow Wake-Up from on-chip CAN0/1"
+	depends on PM && (BF54x || BF534 || BF536 || BF537)
+	default n
+	help
+	  Enable CAN0/1 Wake-Up (Voltage Regulator Power-Up)
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#322: FILE: arch/blackfin/Kconfig:957:
+config PM_BFIN_WAKE_GP
+	bool "Allow Wake-Up from GPIOs"
+	depends on PM && BF54x
+	default n
+	help
+	  Enable General-Purpose Wake-Up (Voltage Regulator Power-Up)
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#329: FILE: arch/blackfin/Kconfig:964:
+config PM_BFIN_WAKE_USB
+	bool "Allow Wake-Up from on-chip USB"
+	depends on PM && (BF54x || BF52x)
+	default n
+	help
+	  Enable USB Wake-Up (Voltage Regulator Power-Up)
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#336: FILE: arch/blackfin/Kconfig:971:
+config PM_BFIN_WAKE_KEYPAD
+	bool "Allow Wake-Up from on-chip Keypad"
+	depends on PM && BF54x
+	default n
+	help
+	  Enable Keypad Wake-Up (Voltage Regulator Power-Up)
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#343: FILE: arch/blackfin/Kconfig:978:
+config PM_BFIN_WAKE_ROTARY
+	bool "Allow Wake-Up from on-chip Rotary"
+	depends on PM && BF54x
+	default n
+	help
+	  Enable Rotary Wake-Up (Voltage Regulator Power-Up)
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#3717: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'Asynchonous' may be misspelled - perhaps 'Asynchronous'?
#4034: FILE: arch/blackfin/configs/CM-BF527_defconfig:313:
+# Asynchonous Memory Configuration
   ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5293: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:486:
+			printk(KERN_ERR "DMA Channel %d failed to suspend\n", i);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#5419: FILE: arch/blackfin/kernel/bfin_gpio.c:781:
+	for (i = 0; i < MAX_BLACKFIN_GPIOS; i += GPIO_BANKSIZE) {
+			bank = gpio_bank(i);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5429: FILE: arch/blackfin/kernel/bfin_gpio.c:791:
+^I^I^I*port_fer[bank]   ^I= gpio_bank_saved[bank].fer;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5445: FILE: arch/blackfin/kernel/bfin_gpio.c:807:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5457: FILE: arch/blackfin/kernel/bfin_gpio.c:819:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5458: FILE: arch/blackfin/kernel/bfin_gpio.c:820:
+
+}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#5480: FILE: arch/blackfin/kernel/bfin_gpio.c:842:
+	for (i = 0; i < MAX_BLACKFIN_GPIOS; i += GPIO_BANKSIZE) {
+			bank = gpio_bank(i);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's->sh_size > 0'
#5681: FILE: arch/blackfin/kernel/module.c:245:
+		if ((strcmp(".l2.text", secstrings + s->sh_name) == 0) ||
+		    ((strcmp(".text", secstrings + s->sh_name) == 0) &&
+		     (hdr->e_flags & EF_BFIN_CODE_IN_L2) && (s->sh_size > 0))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dest"
#5686: FILE: arch/blackfin/kernel/module.c:250:
+			if (dest == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5687: FILE: arch/blackfin/kernel/module.c:251:
+				printk(KERN_ERR

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's->sh_size > 0'
#5696: FILE: arch/blackfin/kernel/module.c:260:
+		if ((strcmp(".l2.data", secstrings + s->sh_name) == 0) ||
+		    ((strcmp(".data", secstrings + s->sh_name) == 0) &&
+		     (hdr->e_flags & EF_BFIN_DATA_IN_L2) && (s->sh_size > 0))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dest"
#5701: FILE: arch/blackfin/kernel/module.c:265:
+			if (dest == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5702: FILE: arch/blackfin/kernel/module.c:266:
+				printk(KERN_ERR

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's->sh_size > 0'
#5711: FILE: arch/blackfin/kernel/module.c:275:
+		if (strcmp(".l2.bss", secstrings + s->sh_name) == 0 ||
+		    ((strcmp(".bss", secstrings + s->sh_name) == 0) &&
+		     (hdr->e_flags & EF_BFIN_DATA_IN_L2) && (s->sh_size > 0))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dest"
#5716: FILE: arch/blackfin/kernel/module.c:280:
+			if (dest == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5717: FILE: arch/blackfin/kernel/module.c:281:
+				printk(KERN_ERR

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5738: FILE: arch/blackfin/kernel/module.c:462:
+			(hdr->e_flags & (EF_BFIN_CODE_IN_L1|EF_BFIN_CODE_IN_L2))))) {
 			                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#5772: FILE: arch/blackfin/kernel/ptrace.c:221:
 			} else
[...]
+			if (addr + add >= L1_DATA_A_START

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5776: FILE: arch/blackfin/kernel/ptrace.c:225:
+			if (addr + add >= L1_DATA_A_START
+			    && addr + add + sizeof(tmp) <= L1_DATA_A_START + L1_DATA_A_LENGTH) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#5779: FILE: arch/blackfin/kernel/ptrace.c:228:
+			} else
[...]
+			if (addr + add >= L1_DATA_B_START

CHECK:BRACES: Unbalanced braces around else statement
#5779: FILE: arch/blackfin/kernel/ptrace.c:228:
+			} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5783: FILE: arch/blackfin/kernel/ptrace.c:232:
+			if (addr + add >= L1_DATA_B_START
+			    && addr + add + sizeof(tmp) <= L1_DATA_B_START + L1_DATA_B_LENGTH) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#5786: FILE: arch/blackfin/kernel/ptrace.c:235:
+			} else
[...]
 			if (addr + add >= FIXED_CODE_START

CHECK:BRACES: Unbalanced braces around else statement
#5786: FILE: arch/blackfin/kernel/ptrace.c:235:
+			} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#5794: FILE: arch/blackfin/kernel/ptrace.c:305:
 			} else
[...]
+			if (addr + add >= L1_DATA_A_START

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5798: FILE: arch/blackfin/kernel/ptrace.c:309:
+			if (addr + add >= L1_DATA_A_START
+			    && addr + add + sizeof(data) <= L1_DATA_A_START + L1_DATA_A_LENGTH) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#5801: FILE: arch/blackfin/kernel/ptrace.c:312:
+			} else
[...]
+			if (addr + add >= L1_DATA_B_START

CHECK:BRACES: Unbalanced braces around else statement
#5801: FILE: arch/blackfin/kernel/ptrace.c:312:
+			} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5805: FILE: arch/blackfin/kernel/ptrace.c:316:
+			if (addr + add >= L1_DATA_B_START
+			    && addr + add + sizeof(data) <= L1_DATA_B_START + L1_DATA_B_LENGTH) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#5808: FILE: arch/blackfin/kernel/ptrace.c:319:
+			} else
[...]
 			if (addr + add >= FIXED_CODE_START

CHECK:BRACES: Unbalanced braces around else statement
#5808: FILE: arch/blackfin/kernel/ptrace.c:319:
+			} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#5903: FILE: arch/blackfin/kernel/setup.c:863:
+	u_long pll_ctl = bfin_read_PLL_CTL();
+	if (pll_ctl == cached_vco_pll_ctl)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#5905: FILE: arch/blackfin/kernel/setup.c:865:
+		return cached_vco;
+	else

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#5934: FILE: arch/blackfin/kernel/setup.c:890:
+		return cached_cclk;
+	else

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#5962: FILE: arch/blackfin/kernel/setup.c:915:
+		return cached_sclk;
+	else

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#6015: FILE: arch/blackfin/kernel/setup.c:1045:
+		seq_printf(m, "icache setup\t: off\n");

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#6038: FILE: arch/blackfin/kernel/traps.c:165:
+					sprintf(buf, "<0x%p> [ %s ] dynamic memory", (void *)address, name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#6069: FILE: arch/blackfin/kernel/traps.c:515:
+			printk(KERN_NOTICE "\n" KERN_NOTICE "Kernel Stack\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#6081: FILE: arch/blackfin/kernel/traps.c:527:
+			printk(KERN_NOTICE "Userspace Stack\n");

WARNING:TYPO_SPELLING: 'sucess' may be misspelled - perhaps 'success'?
#6092: FILE: arch/blackfin/kernel/traps.c:547:
+ * Return true on sucess, false on bad address
                   ^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#6096: FILE: arch/blackfin/kernel/traps.c:551:
+{
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6115: FILE: arch/blackfin/kernel/traps.c:570:
+	if ((addr >= FIXED_CODE_START && (addr + 2) <= physical_mem_end) ||
+#ifdef L2_START

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6153: FILE: arch/blackfin/kernel/traps.c:600:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#6174: FILE: arch/blackfin/kernel/traps.c:624:
+			printk(KERN_NOTICE "     Source : %s ", buf);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6177: FILE: arch/blackfin/kernel/traps.c:627:
+					printk("RTS");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6179: FILE: arch/blackfin/kernel/traps.c:629:
+					printk("RTI");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6181: FILE: arch/blackfin/kernel/traps.c:631:
+					printk("RTX");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6183: FILE: arch/blackfin/kernel/traps.c:633:
+					printk("JUMP (P%i)", val & 7);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6185: FILE: arch/blackfin/kernel/traps.c:635:
+					printk("CALL (P%i)", val & 7);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6187: FILE: arch/blackfin/kernel/traps.c:637:
+					printk("CALL (PC+P%i)", val & 7);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6189: FILE: arch/blackfin/kernel/traps.c:639:
+					printk("JUMP (PC+P%i)", val & 7);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6191: FILE: arch/blackfin/kernel/traps.c:641:
+				else if ((val >= 0x1000 && val <= 0x13FF) ||
+				    (val >= 0x1800 && val <= 0x1BFF))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6192: FILE: arch/blackfin/kernel/traps.c:642:
+					printk("IF !CC JUMP");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6194: FILE: arch/blackfin/kernel/traps.c:644:
+				else if ((val >= 0x1400 && val <= 0x17ff) ||
+				    (val >= 0x1c00 && val <= 0x1fff))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6195: FILE: arch/blackfin/kernel/traps.c:645:
+					printk("IF CC JUMP");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6197: FILE: arch/blackfin/kernel/traps.c:647:
+					printk("JUMP.S");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6199: FILE: arch/blackfin/kernel/traps.c:649:
+					printk("LSETUP");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6201: FILE: arch/blackfin/kernel/traps.c:651:
+					printk("JUMP.L");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6203: FILE: arch/blackfin/kernel/traps.c:653:
+					printk("CALL pcrel");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6205: FILE: arch/blackfin/kernel/traps.c:655:
+					printk("0x%04x", val);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6207: FILE: arch/blackfin/kernel/traps.c:657:
+			printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#6224: FILE: arch/blackfin/kernel/traps.c:696:
+	unsigned short opcode = 0, *ins_addr;
+	ins_addr = (unsigned short *)addr;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#6259: FILE: arch/blackfin/kernel/traps.c:714:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#6279: FILE: arch/blackfin/kernel/traps.c:728:
+	if (stack == NULL) {
[...]
+			endstack = (unsigned int *)PAGE_ALIGN((unsigned int)stack);
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stack"
#6279: FILE: arch/blackfin/kernel/traps.c:728:
+	if (stack == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#6291: FILE: arch/blackfin/kernel/traps.c:738:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#6295: FILE: arch/blackfin/kernel/traps.c:742:
+	printk(KERN_NOTICE "Stack info:\n" KERN_NOTICE " SP: [0x%p] %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6297: FILE: arch/blackfin/kernel/traps.c:743:
+	printk(KERN_NOTICE "Stack info:\n" KERN_NOTICE " SP: [0x%p] %s\n",
+	addr = (unsigned int *)((unsigned int)stack & ~0x3F);

CHECK:BRACES: braces {} should be used on all arms of this statement
#6320: FILE: arch/blackfin/kernel/traps.c:766:
+	if (fp) {
[...]
+	} else
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6322: FILE: arch/blackfin/kernel/traps.c:768:
+		printk(" FP: (0x%p)\n", fp);

CHECK:BRACES: Unbalanced braces around else statement
#6323: FILE: arch/blackfin/kernel/traps.c:769:
+	} else

WARNING:TYPO_SPELLING: 'incase' may be misspelled - perhaps 'in case'?
#6331: FILE: arch/blackfin/kernel/traps.c:775:
+	 * incase there is no frame pointer, we still look for
 	   ^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#6345: FILE: arch/blackfin/kernel/traps.c:782:
+			printk(KERN_NOTICE "Return addresses in stack:\n");

WARNING:MISORDERED_TYPE: type 'long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#6347: FILE: arch/blackfin/kernel/traps.c:784:
+			printk(KERN_NOTICE " Memory from 0x%08lx to %p", ((long unsigned

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#6347: FILE: arch/blackfin/kernel/traps.c:784:
+			printk(KERN_NOTICE " Memory from 0x%08lx to %p", ((long unsigned

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#6355: FILE: arch/blackfin/kernel/traps.c:791:
+		     addr <= endstack; addr++, i++) {
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6358: FILE: arch/blackfin/kernel/traps.c:794:
+				printk("\n" KERN_NOTICE "%p:",addr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6358: FILE: arch/blackfin/kernel/traps.c:794:
+				printk("\n" KERN_NOTICE "%p:",addr);
 				                             ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#6370: FILE: arch/blackfin/kernel/traps.c:806:
+			if (!j && stack == (unsigned long *)addr)
[...]
+			else if (ret_addr)
[...]
+				} else
[...]
+			else if (fp == addr) {
[...]
+			} else if (!j)
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6371: FILE: arch/blackfin/kernel/traps.c:807:
+				printk("[%08x]", *addr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#6373: FILE: arch/blackfin/kernel/traps.c:809:
+				if (j) {
[...]
+				} else
[...]
+			else if (fp == addr) {
[...]
+			} else if (!j)
[...]

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#6376: FILE: arch/blackfin/kernel/traps.c:812:
+						printk(KERN_NOTICE "   frame %2i : %s\n", frame_no, buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#6376: FILE: arch/blackfin/kernel/traps.c:812:
+						printk(KERN_NOTICE "   frame %2i : %s\n", frame_no, buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#6379: FILE: arch/blackfin/kernel/traps.c:815:
+					printk(KERN_NOTICE "    address : %s\n", buf);

CHECK:BRACES: Unbalanced braces around else statement
#6380: FILE: arch/blackfin/kernel/traps.c:816:
+				} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6381: FILE: arch/blackfin/kernel/traps.c:817:
+					printk("<%08x>", *addr);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6384: FILE: arch/blackfin/kernel/traps.c:820:
+					frame = addr+1;
 					            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6386: FILE: arch/blackfin/kernel/traps.c:822:
+					printk("(%08x)", *addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6392: FILE: arch/blackfin/kernel/traps.c:828:
+				printk(" %08x ", *addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6395: FILE: arch/blackfin/kernel/traps.c:831:
+			printk("\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#6417: FILE: arch/blackfin/kernel/traps.c:914:
+		if (get_instruction(&val, addr)) {
 				val = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#6417: FILE: arch/blackfin/kernel/traps.c:914:
+		if (get_instruction(&val, addr)) {
[...]
-			}
[...]

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#6507: FILE: arch/blackfin/mach-bf527/boards/Kconfig:12:
+config BFIN527_BLUETECHNIX_CM
+	bool "Bluetechnix CM-BF527"
+	help
+	  CM-BF527 support for EVAL- and DEV-Board.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6530: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#6557: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:28:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#6576: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:47:
+#if defined(CONFIG_USB_MUSB_HDRC) || defined(CONFIG_USB_MUSB_HDRC_MODULE)

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#6591: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:62:
+const char bfin_board_name[] = "Bluetechnix CM-BF527";

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#6630: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:101:
+	printk(KERN_INFO "%s(): registering device resources\n", __func__);

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#6644: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:115:
+#if defined(CONFIG_USB_MUSB_HDRC) || defined(CONFIG_USB_MUSB_HDRC_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#6689: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:160:
+#if defined(CONFIG_MTD_PHYSMAP) || defined(CONFIG_MTD_PHYSMAP_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#6776: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:247:
+#if defined(CONFIG_BFIN_CFPCMCIA) || defined(CONFIG_BFIN_CFPCMCIA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#6805: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:276:
+#if defined(CONFIG_RTC_DRV_BFIN) || defined(CONFIG_RTC_DRV_BFIN_MODULE)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#6820: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:291:
+	}, {
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6826: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:297:
+};
+static struct platform_device smc91x_device = {

CHECK:CAMELCASE: Avoid CamelCase: <sel15Kres>
#6918: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:389:
+	.sel15Kres = 1,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#6939: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:410:
+#if defined(CONFIG_BFIN_MAC) || defined(CONFIG_BFIN_MAC_MODULE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#6967: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:438:
+#if defined(CONFIG_MTD_M25P80) \
+	|| defined(CONFIG_MTD_M25P80_MODULE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#6996: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:467:
+#if defined(CONFIG_SPI_ADC_BF533) \
+	|| defined(CONFIG_SPI_ADC_BF533_MODULE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#7005: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:476:
+#if defined(CONFIG_SND_BLACKFIN_AD1836) \
+	|| defined(CONFIG_SND_BLACKFIN_AD1836_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7019: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:490:
+#if defined(CONFIG_SPI_MMC) || defined(CONFIG_SPI_MMC_MODULE)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7049: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:519:
+^I.stopacq_polarity ^I= 1,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7051: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:521:
+^I.acquisition_time ^I= 1,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7052: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:522:
+^I.averaging ^I^I= 1,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7053: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:523:
+^I.pen_down_acc_interval ^I= 1,$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#7058: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:528:
+#if defined(CONFIG_SND_SOC_WM8731) || defined(CONFIG_SND_SOC_WM8731_MODULE) \
+	 && defined(CONFIG_SND_SOC_WM8731_SPI)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7065: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:535:
+#if defined(CONFIG_SPI_SPIDEV) || defined(CONFIG_SPI_SPIDEV_MODULE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#7074: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:544:
+#if defined(CONFIG_MTD_M25P80) \
+	|| defined(CONFIG_MTD_M25P80_MODULE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#7088: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:558:
+#if defined(CONFIG_SPI_ADC_BF533) \
+	|| defined(CONFIG_SPI_ADC_BF533_MODULE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#7100: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:570:
+#if defined(CONFIG_SND_BLACKFIN_AD1836) \
+	|| defined(CONFIG_SND_BLACKFIN_AD1836_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7118: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:588:
+#if defined(CONFIG_SPI_MMC) || defined(CONFIG_SPI_MMC_MODULE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#7169: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:638:
+#if defined(CONFIG_SND_SOC_WM8731) || defined(CONFIG_SND_SOC_WM8731_MODULE) \
+	 && defined(CONFIG_SND_SOC_WM8731_SPI)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7179: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:648:
+#if defined(CONFIG_SPI_SPIDEV) || defined(CONFIG_SPI_SPIDEV_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7190: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:659:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7229: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:698:
+#if defined(CONFIG_SERIAL_BFIN) || defined(CONFIG_SERIAL_BFIN_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7255: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:724:
+#if defined(CONFIG_BFIN_SIR) || defined(CONFIG_BFIN_SIR_MODULE)

WARNING:MISPLACED_INIT: __initdata should be placed after bfin_i2c_board_info[]
#7304: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:773:
+static struct i2c_board_info __initdata bfin_i2c_board_info[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7305: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:774:
+#if defined(CONFIG_TWI_LCD) || defined(CONFIG_TWI_LCD_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7311: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:780:
+#if defined(CONFIG_TWI_KEYPAD) || defined(CONFIG_TWI_KEYPAD_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7334: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:802:
+#if defined(CONFIG_PATA_PLATFORM) || defined(CONFIG_PATA_PLATFORM_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7371: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:839:
+#if defined(CONFIG_KEYBOARD_GPIO) || defined(CONFIG_KEYBOARD_GPIO_MODULE)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#7406: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:874:
+static const unsigned int cclk_vlev_datasheet[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#7428: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:896:
+static struct platform_device *stamp_devices[] __initdata = {
+

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7435: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:903:
+#if defined(CONFIG_BFIN_CFPCMCIA) || defined(CONFIG_BFIN_CFPCMCIA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7439: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:907:
+#if defined(CONFIG_RTC_DRV_BFIN) || defined(CONFIG_RTC_DRV_BFIN_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7451: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:919:
+#if defined(CONFIG_USB_MUSB_HDRC) || defined(CONFIG_USB_MUSB_HDRC_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7463: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:931:
+#if defined(CONFIG_BFIN_MAC) || defined(CONFIG_BFIN_MAC_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7471: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:939:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7479: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:947:
+#if defined(CONFIG_SERIAL_BFIN) || defined(CONFIG_SERIAL_BFIN_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7483: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:951:
+#if defined(CONFIG_BFIN_SIR) || defined(CONFIG_BFIN_SIR_MODULE)

CHECK:SPACING: spaces preferred around that '&' (ctx:ExV)
#7493: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:960:
+	&bfin_sport0_uart_device,
 	^

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7497: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:964:
+#if defined(CONFIG_PATA_PLATFORM) || defined(CONFIG_PATA_PLATFORM_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7501: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:968:
+#if defined(CONFIG_KEYBOARD_GPIO) || defined(CONFIG_KEYBOARD_GPIO_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7505: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:972:
+#if defined(CONFIG_MTD_PHYSMAP) || defined(CONFIG_MTD_PHYSMAP_MODULE)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#7514: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:981:
+	printk(KERN_INFO "%s(): registering device resources\n", __func__);

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7524: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:991:
+#if defined(CONFIG_PATA_PLATFORM) || defined(CONFIG_PATA_PLATFORM_MODULE)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#7542: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:1009:
+	printk(KERN_WARNING "%s:%s: Setting Ethernet MAC to a random one\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7544: FILE: arch/blackfin/mach-bf527/boards/cm_bf527.c:1010:
+	printk(KERN_WARNING "%s:%s: Setting Ethernet MAC to a random one\n",
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7678: FILE: arch/blackfin/mach-bf537/boards/stamp.c:381:
+static void bfin_plat_nand_cmd_ctrl(struct mtd_info *mtd, int cmd,
+{

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#7711: FILE: arch/blackfin/mach-bf537/boards/stamp.c:414:
+#define MAX(x, y) (x > y ? x : y)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#7711: FILE: arch/blackfin/mach-bf537/boards/stamp.c:414:
+#define MAX(x, y) (x > y ? x : y)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#7711: FILE: arch/blackfin/mach-bf537/boards/stamp.c:414:
+#define MAX(x, y) (x > y ? x : y)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#7711: FILE: arch/blackfin/mach-bf537/boards/stamp.c:414:
+#define MAX(x, y) (x > y ? x : y)

CHECK:SPACING: spaces preferred around that '&' (ctx:ExV)
#7755: FILE: arch/blackfin/mach-bf537/boards/stamp.c:1007:
+	&bfin_async_nand_device,
 	^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#7852: FILE: arch/blackfin/mach-bf548/boards/ezkit.c:94:
+	printk(KERN_INFO "%s(): registering device resources\n", __func__);

CHECK:SPACING: No space is necessary after a cast
#8789: FILE: arch/blackfin/mach-common/pm.c:100:
+	dma_memcpy(memptr, (const void *) L1_CODE_START, L1_CODE_LENGTH);

CHECK:SPACING: No space is necessary after a cast
#8790: FILE: arch/blackfin/mach-common/pm.c:101:
+	dma_memcpy(memptr + L1_CODE_LENGTH, (const void *) L1_DATA_A_START,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8791: FILE: arch/blackfin/mach-common/pm.c:102:
+	dma_memcpy(memptr + L1_CODE_LENGTH, (const void *) L1_DATA_A_START,
+			L1_DATA_A_LENGTH);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8793: FILE: arch/blackfin/mach-common/pm.c:104:
+	dma_memcpy(memptr + L1_CODE_LENGTH + L1_DATA_A_LENGTH,
+			(const void *) L1_DATA_B_START, L1_DATA_B_LENGTH);

CHECK:SPACING: No space is necessary after a cast
#8793: FILE: arch/blackfin/mach-common/pm.c:104:
+			(const void *) L1_DATA_B_START, L1_DATA_B_LENGTH);

CHECK:SPACING: No space is necessary after a cast
#8795: FILE: arch/blackfin/mach-common/pm.c:106:
+			L1_DATA_B_LENGTH, (const void *) L1_SCRATCH_START,

CHECK:SPACING: No space is necessary after a cast
#8803: FILE: arch/blackfin/mach-common/pm.c:114:
+	dma_memcpy((void *) L1_CODE_START, memptr, L1_CODE_LENGTH);

CHECK:SPACING: No space is necessary after a cast
#8804: FILE: arch/blackfin/mach-common/pm.c:115:
+	dma_memcpy((void *) L1_DATA_A_START, memptr + L1_CODE_LENGTH,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8805: FILE: arch/blackfin/mach-common/pm.c:116:
+	dma_memcpy((void *) L1_DATA_A_START, memptr + L1_CODE_LENGTH,
+			L1_DATA_A_LENGTH);

CHECK:SPACING: No space is necessary after a cast
#8806: FILE: arch/blackfin/mach-common/pm.c:117:
+	dma_memcpy((void *) L1_DATA_B_START, memptr + L1_CODE_LENGTH +

CHECK:SPACING: No space is necessary after a cast
#8808: FILE: arch/blackfin/mach-common/pm.c:119:
+	memcpy((void *) L1_SCRATCH_START, memptr + L1_CODE_LENGTH +

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#8828: FILE: arch/blackfin/mach-common/pm.c:139:
+				for (set = 0; set < 64; ++set) {
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#8829: FILE: arch/blackfin/mach-common/pm.c:140:
+					bfin_write_DTEST_COMMAND(

WARNING:LINE_SPACING: Missing a blank line after declarations
#8872: FILE: arch/blackfin/mach-common/pm.c:183:
+	unsigned long ctrl;
+	SSYNC();

WARNING:LINE_SPACING: Missing a blank line after declarations
#8884: FILE: arch/blackfin/mach-common/pm.c:195:
+	unsigned long ctrl;
+	SSYNC();

WARNING:LINE_SPACING: Missing a blank line after declarations
#8896: FILE: arch/blackfin/mach-common/pm.c:207:
+	unsigned long ctrl;
+	SSYNC();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!memptr"
#8913: FILE: arch/blackfin/mach-common/pm.c:224:
+	if (memptr == NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#8999: FILE: arch/blackfin/mach-common/pm.c:310:
+	 */
+	|| state == PM_SUSPEND_MEM

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#9087: FILE: arch/blackfin/mm/blackfin_sram.c:81:
+		printk(KERN_INFO"Fail to initialize Scratchpad data SRAM.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#9087: FILE: arch/blackfin/mm/blackfin_sram.c:81:
+		printk(KERN_INFO"Fail to initialize Scratchpad data SRAM.\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#9105: FILE: arch/blackfin/mm/blackfin_sram.c:95:
+	printk(KERN_INFO "Blackfin Scratchpad data SRAM: %d KB\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#9124: FILE: arch/blackfin/mm/blackfin_sram.c:105:
+		printk(KERN_INFO"Fail to initialize L1 Data A SRAM.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#9124: FILE: arch/blackfin/mm/blackfin_sram.c:105:
+		printk(KERN_INFO"Fail to initialize L1 Data A SRAM.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#9137: FILE: arch/blackfin/mm/blackfin_sram.c:118:
+	printk(KERN_INFO "Blackfin L1 Data A SRAM: %d KB (%d KB free)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9138: FILE: arch/blackfin/mm/blackfin_sram.c:119:
+	printk(KERN_INFO "Blackfin L1 Data A SRAM: %d KB (%d KB free)\n",
+		L1_DATA_A_LENGTH >> 10,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#9153: FILE: arch/blackfin/mm/blackfin_sram.c:126:
+		printk(KERN_INFO"Fail to initialize L1 Data B SRAM.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#9153: FILE: arch/blackfin/mm/blackfin_sram.c:126:
+		printk(KERN_INFO"Fail to initialize L1 Data B SRAM.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#9166: FILE: arch/blackfin/mm/blackfin_sram.c:139:
+	printk(KERN_INFO "Blackfin L1 Data B SRAM: %d KB (%d KB free)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9167: FILE: arch/blackfin/mm/blackfin_sram.c:140:
+	printk(KERN_INFO "Blackfin L1 Data B SRAM: %d KB (%d KB free)\n",
+		L1_DATA_B_LENGTH >> 10,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#9186: FILE: arch/blackfin/mm/blackfin_sram.c:154:
+		printk(KERN_INFO"Fail to initialize L1 Instruction SRAM.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#9186: FILE: arch/blackfin/mm/blackfin_sram.c:154:
+		printk(KERN_INFO"Fail to initialize L1 Instruction SRAM.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#9201: FILE: arch/blackfin/mm/blackfin_sram.c:167:
+	printk(KERN_INFO "Blackfin L1 Instruction SRAM: %d KB (%d KB free)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9202: FILE: arch/blackfin/mm/blackfin_sram.c:168:
+	printk(KERN_INFO "Blackfin L1 Instruction SRAM: %d KB (%d KB free)\n",
+		L1_CODE_LENGTH >> 10,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#9221: FILE: arch/blackfin/mm/blackfin_sram.c:182:
+		printk(KERN_INFO"Fail to initialize L2 SRAM.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#9221: FILE: arch/blackfin/mm/blackfin_sram.c:182:
+		printk(KERN_INFO"Fail to initialize L2 SRAM.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#9235: FILE: arch/blackfin/mm/blackfin_sram.c:195:
+	printk(KERN_INFO "Blackfin L2 SRAM: %d KB (%d KB free)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9236: FILE: arch/blackfin/mm/blackfin_sram.c:196:
+	printk(KERN_INFO "Blackfin L2 SRAM: %d KB (%d KB free)\n",
+		L2_LENGTH >> 10,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#9243: FILE: arch/blackfin/mm/blackfin_sram.c:203:
+}
+void __init bfin_sram_init(void)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9246: FILE: arch/blackfin/mm/blackfin_sram.c:206:
+	sram_piece_cache = kmem_cache_create("sram_piece_cache",
+				sizeof(struct sram_piece),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9257: FILE: arch/blackfin/mm/blackfin_sram.c:217:
+static void *_sram_alloc(size_t size, struct sram_piece *pfree_head,
+		struct sram_piece *pused_head)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pslot"
#9282: FILE: arch/blackfin/mm/blackfin_sram.c:231:
+	while (pslot != NULL && size > pslot->size) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pslot"
#9325: FILE: arch/blackfin/mm/blackfin_sram.c:260:
+	while (pslot != NULL && pavail->paddr < pslot->paddr) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9339: FILE: arch/blackfin/mm/blackfin_sram.c:273:
+static void *_sram_alloc_max(struct sram_piece *pfree_head,
+				struct sram_piece *pused_head,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#9357: FILE: arch/blackfin/mm/blackfin_sram.c:281:
+	pmax = pslot = pfree_head->next;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pslot"
#9360: FILE: arch/blackfin/mm/blackfin_sram.c:284:
+	while (pslot != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9385: FILE: arch/blackfin/mm/blackfin_sram.c:300:
+static int _sram_free(const void *addr,
+			struct sram_piece *pfree_head,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pslot"
#9408: FILE: arch/blackfin/mm/blackfin_sram.c:313:
+	while (pslot != NULL && pslot->paddr != addr) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pslot"
#9438: FILE: arch/blackfin/mm/blackfin_sram.c:329:
+	while (pslot != NULL && addr > pslot->paddr) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#9473: FILE: arch/blackfin/mm/blackfin_sram.c:372:
+	else if (addr >= (void *)L2_START
+		 && addr < (void *)(L2_START + L2_LENGTH))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9485: FILE: arch/blackfin/mm/blackfin_sram.c:390:
+	addr = _sram_alloc(size, &free_l1_data_A_sram_head,
+			&used_l1_data_A_sram_head);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9496: FILE: arch/blackfin/mm/blackfin_sram.c:413:
+	ret = _sram_free(addr, &free_l1_data_A_sram_head,
+			&used_l1_data_A_sram_head);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9506: FILE: arch/blackfin/mm/blackfin_sram.c:435:
+	addr = _sram_alloc(size, &free_l1_data_B_sram_head,
+			&used_l1_data_B_sram_head);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9516: FILE: arch/blackfin/mm/blackfin_sram.c:460:
+	ret = _sram_free(addr, &free_l1_data_B_sram_head,
+			&used_l1_data_B_sram_head);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9526: FILE: arch/blackfin/mm/blackfin_sram.c:514:
+	addr = _sram_alloc(size, &free_l1_inst_sram_head,
+			&used_l1_inst_sram_head);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9536: FILE: arch/blackfin/mm/blackfin_sram.c:539:
+	ret = _sram_free(addr, &free_l1_inst_sram_head,
+			&used_l1_inst_sram_head);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9546: FILE: arch/blackfin/mm/blackfin_sram.c:561:
+	addr = _sram_alloc(size, &free_l1_ssram_head,
+			&used_l1_ssram_head);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9556: FILE: arch/blackfin/mm/blackfin_sram.c:579:
+	addr = _sram_alloc_max(&free_l1_ssram_head,
+			&used_l1_ssram_head, psize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9566: FILE: arch/blackfin/mm/blackfin_sram.c:597:
+	ret = _sram_free(addr, &free_l1_ssram_head,
+			&used_l1_ssram_head);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#9577: FILE: arch/blackfin/mm/blackfin_sram.c:608:
+	unsigned flags;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9584: FILE: arch/blackfin/mm/blackfin_sram.c:615:
+	addr = _sram_alloc(size, &free_l2_sram_head,
+			&used_l2_sram_head);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'l2_sram_alloc', this function's name, in a string
#9589: FILE: arch/blackfin/mm/blackfin_sram.c:620:
+	pr_debug("Allocated address in l2_sram_alloc is 0x%lx+0x%lx\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:MISORDERED_TYPE: type 'long unsigned int' should be specified in [[un]signed] [short|int|long|long long] order
#9590: FILE: arch/blackfin/mm/blackfin_sram.c:621:
+		 (long unsigned int)addr, size);

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'long unsigned int' as the int is unnecessary
#9590: FILE: arch/blackfin/mm/blackfin_sram.c:621:
+		 (long unsigned int)addr, size);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#9613: FILE: arch/blackfin/mm/blackfin_sram.c:644:
+	unsigned flags;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9620: FILE: arch/blackfin/mm/blackfin_sram.c:651:
+	ret = _sram_free(addr, &free_l2_sram_head,
+			&used_l2_sram_head);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#9639: FILE: arch/blackfin/mm/blackfin_sram.c:701:
+	if (addr == NULL && (flags & L2_SRAM))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9655: FILE: arch/blackfin/mm/blackfin_sram.c:724:
+static int _sram_proc_read(char *buf, int *len, int count, const char *desc,
+		struct sram_piece *pfree_head,

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#9677: FILE: arch/blackfin/mm/blackfin_sram.c:732:
+	*len += sprintf(&buf[*len], "--- SRAM %-14s Size   PID State     \n", desc);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pslot"
#9682: FILE: arch/blackfin/mm/blackfin_sram.c:737:
+	while (pslot != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pslot"
#9692: FILE: arch/blackfin/mm/blackfin_sram.c:747:
+	while (pslot != NULL) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#9703: FILE: arch/blackfin/mm/blackfin_sram.c:757:
 }
+static int sram_proc_read(char *buf, char **start, off_t offset, int count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9704: FILE: arch/blackfin/mm/blackfin_sram.c:758:
+static int sram_proc_read(char *buf, char **start, off_t offset, int count,
 		int *eof, void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9711: FILE: arch/blackfin/mm/blackfin_sram.c:763:
+	if (_sram_proc_read(buf, &len, count, "Scratchpad",
+			&free_l1_ssram_head, &used_l1_ssram_head))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9717: FILE: arch/blackfin/mm/blackfin_sram.c:767:
+	if (_sram_proc_read(buf, &len, count, "L1 Data A",
+			&free_l1_data_A_sram_head,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9725: FILE: arch/blackfin/mm/blackfin_sram.c:773:
+	if (_sram_proc_read(buf, &len, count, "L1 Data B",
+			&free_l1_data_B_sram_head,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9733: FILE: arch/blackfin/mm/blackfin_sram.c:779:
+	if (_sram_proc_read(buf, &len, count, "L1 Instruction",
+			&free_l1_inst_sram_head, &used_l1_inst_sram_head))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9738: FILE: arch/blackfin/mm/blackfin_sram.c:784:
+	if (_sram_proc_read(buf, &len, count, "L2",
+			&free_l2_sram_head, &used_l2_sram_head))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9774: FILE: arch/blackfin/mm/blackfin_sram.h:33:
+extern void bfin_sram_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9822: FILE: include/asm-blackfin/bfin-global.h:95:
+extern void *l2_sram_alloc(size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#9822: FILE: include/asm-blackfin/bfin-global.h:95:
+extern void *l2_sram_alloc(size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9823: FILE: include/asm-blackfin/bfin-global.h:96:
+extern void *l2_sram_zalloc(size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#9823: FILE: include/asm-blackfin/bfin-global.h:96:
+extern void *l2_sram_zalloc(size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9828: FILE: include/asm-blackfin/bfin-global.h:101:
+extern int l2_sram_free(const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#9828: FILE: include/asm-blackfin/bfin-global.h:101:
+extern int l2_sram_free(const void *);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#9951: FILE: include/asm-blackfin/dpmc.h:31:
+#define PM_PUSH(x) \
+	R0 = [P0 + (x - SRAM_BASE_ADDRESS)];\
+	[--SP] =  R0;\
+

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#9951: FILE: include/asm-blackfin/dpmc.h:31:
+#define PM_PUSH(x) \
+	R0 = [P0 + (x - SRAM_BASE_ADDRESS)];\
+	[--SP] =  R0;\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#9951: FILE: include/asm-blackfin/dpmc.h:31:
+#define PM_PUSH(x) \
+	R0 = [P0 + (x - SRAM_BASE_ADDRESS)];\
+	[--SP] =  R0;\
+

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#9952: FILE: include/asm-blackfin/dpmc.h:32:
+	R0 = [P0 + (x - SRAM_BASE_ADDRESS)];\

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#9955: FILE: include/asm-blackfin/dpmc.h:35:
+#define PM_POP(x) \
+	R0 = [SP++];\
+	[P0 + (x - SRAM_BASE_ADDRESS)] = R0;\
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#9955: FILE: include/asm-blackfin/dpmc.h:35:
+#define PM_POP(x) \
+	R0 = [SP++];\
+	[P0 + (x - SRAM_BASE_ADDRESS)] = R0;\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#9955: FILE: include/asm-blackfin/dpmc.h:35:
+#define PM_POP(x) \
+	R0 = [SP++];\
+	[P0 + (x - SRAM_BASE_ADDRESS)] = R0;\
+

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#9956: FILE: include/asm-blackfin/dpmc.h:36:
+	R0 = [SP++];\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#9959: FILE: include/asm-blackfin/dpmc.h:39:
+#define PM_SYS_PUSH(x) \
+	R0 = [P0 + (x - PLL_CTL)];\
+	[--SP] =  R0;\
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#9959: FILE: include/asm-blackfin/dpmc.h:39:
+#define PM_SYS_PUSH(x) \
+	R0 = [P0 + (x - PLL_CTL)];\
+	[--SP] =  R0;\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#9959: FILE: include/asm-blackfin/dpmc.h:39:
+#define PM_SYS_PUSH(x) \
+	R0 = [P0 + (x - PLL_CTL)];\
+	[--SP] =  R0;\
+

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#9960: FILE: include/asm-blackfin/dpmc.h:40:
+	R0 = [P0 + (x - PLL_CTL)];\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#9963: FILE: include/asm-blackfin/dpmc.h:43:
+#define PM_SYS_POP(x) \
+	R0 = [SP++];\
+	[P0 + (x - PLL_CTL)] = R0;\
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#9963: FILE: include/asm-blackfin/dpmc.h:43:
+#define PM_SYS_POP(x) \
+	R0 = [SP++];\
+	[P0 + (x - PLL_CTL)] = R0;\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#9963: FILE: include/asm-blackfin/dpmc.h:43:
+#define PM_SYS_POP(x) \
+	R0 = [SP++];\
+	[P0 + (x - PLL_CTL)] = R0;\
+

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#9964: FILE: include/asm-blackfin/dpmc.h:44:
+	R0 = [SP++];\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#9967: FILE: include/asm-blackfin/dpmc.h:47:
+#define PM_SYS_PUSH16(x) \
+	R0 = w[P0 + (x - PLL_CTL)];\
+	[--SP] =  R0;\
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#9967: FILE: include/asm-blackfin/dpmc.h:47:
+#define PM_SYS_PUSH16(x) \
+	R0 = w[P0 + (x - PLL_CTL)];\
+	[--SP] =  R0;\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#9967: FILE: include/asm-blackfin/dpmc.h:47:
+#define PM_SYS_PUSH16(x) \
+	R0 = w[P0 + (x - PLL_CTL)];\
+	[--SP] =  R0;\
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#9971: FILE: include/asm-blackfin/dpmc.h:51:
+#define PM_SYS_POP16(x) \
+	R0 = [SP++];\
+	w[P0 + (x - PLL_CTL)] = R0;\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#9971: FILE: include/asm-blackfin/dpmc.h:51:
+#define PM_SYS_POP16(x) \
+	R0 = [SP++];\
+	w[P0 + (x - PLL_CTL)] = R0;\

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#9972: FILE: include/asm-blackfin/dpmc.h:52:
+	R0 = [SP++];\

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#10478: FILE: include/asm-blackfin/module.h:16:
+	Elf_Shdr	*text_l2;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#10492: FILE: include/asm-blackfin/processor.h:115:
+	uint32_t revid = bfin_read_CHIPID() >> 28;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249284.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 132 warnings, 126 checks, 9597 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249284.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
