ERROR:SPACING: space required before the open parenthesis '('
#58: FILE: arch/um/kernel/trap.c:173:
+	else if(current->mm == NULL) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#58: FILE: arch/um/kernel/trap.c:173:
 	}
+	else if(current->mm == NULL) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->mm"
#58: FILE: arch/um/kernel/trap.c:173:
+	else if(current->mm == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#60: FILE: arch/um/kernel/trap.c:175:
+  ^I^Ipanic("Segfault with no mm");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#60: FILE: arch/um/kernel/trap.c:175:
+  ^I^Ipanic("Segfault with no mm");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: arch/um/kernel/trap.c:175:
+  ^I^Ipanic("Segfault with no mm");$

ERROR:SPACING: space required before the open parenthesis '('
#70: FILE: arch/um/kernel/trap.c:199:
+	if(!is_user) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: arch/um/include/kern_util.h:119:
+extern void copy_sc(union uml_pt_regs *regs, void *from);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#97: FILE: arch/um/include/common-offsets.h:27:
+DEFINE(UM_NR_CPUS, NR_CPUS);

ERROR:SPACING: space required before the open parenthesis '('
#119: FILE: arch/um/os-Linux/skas/trap.c:32:
+	if(sig == SIGSEGV) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#119: FILE: arch/um/os-Linux/skas/trap.c:32:
+	if(sig == SIGSEGV) {
[...]
+	else r = TASK_REGS(get_current());
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#130: FILE: arch/um/os-Linux/skas/trap.c:43:
+	else r = TASK_REGS(get_current());

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#130: FILE: arch/um/os-Linux/skas/trap.c:43:
+	}
+	else r = TASK_REGS(get_current());

ERROR:SPACING: space required before the open parenthesis '('
#193: FILE: arch/um/sys-i386/signal.c:58:
+	if(err < 0) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#209: FILE: arch/um/sys-x86_64/signal.c:27:
+#define GETREG(regs, regno, sc, regname) \
+       (regs)->skas.regs[(regno) / sizeof(unsigned long)] = (sc)->regname

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regname' may be better as '(regname)' to avoid precedence issues
#209: FILE: arch/um/sys-x86_64/signal.c:27:
+#define GETREG(regs, regno, sc, regname) \
+       (regs)->skas.regs[(regno) / sizeof(unsigned long)] = (sc)->regname

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: arch/um/sys-x86_64/signal.c:28:
+       (regs)->skas.regs[(regno) / sizeof(unsigned long)] = (sc)->regname$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: arch/um/sys-x86_64/signal.c:30:
+       GETREG(regs, R8, sc, r8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: arch/um/sys-x86_64/signal.c:31:
+       GETREG(regs, R9, sc, r9);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: arch/um/sys-x86_64/signal.c:32:
+       GETREG(regs, R10, sc, r10);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: arch/um/sys-x86_64/signal.c:33:
+       GETREG(regs, R11, sc, r11);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: arch/um/sys-x86_64/signal.c:34:
+       GETREG(regs, R12, sc, r12);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: arch/um/sys-x86_64/signal.c:35:
+       GETREG(regs, R13, sc, r13);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: arch/um/sys-x86_64/signal.c:36:
+       GETREG(regs, R14, sc, r14);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: arch/um/sys-x86_64/signal.c:37:
+       GETREG(regs, R15, sc, r15);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: arch/um/sys-x86_64/signal.c:38:
+       GETREG(regs, RDI, sc, rdi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: arch/um/sys-x86_64/signal.c:39:
+       GETREG(regs, RSI, sc, rsi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: arch/um/sys-x86_64/signal.c:40:
+       GETREG(regs, RBP, sc, rbp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: arch/um/sys-x86_64/signal.c:41:
+       GETREG(regs, RBX, sc, rbx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: arch/um/sys-x86_64/signal.c:42:
+       GETREG(regs, RDX, sc, rdx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: arch/um/sys-x86_64/signal.c:43:
+       GETREG(regs, RAX, sc, rax);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: arch/um/sys-x86_64/signal.c:44:
+       GETREG(regs, RCX, sc, rcx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: arch/um/sys-x86_64/signal.c:45:
+       GETREG(regs, RSP, sc, rsp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: arch/um/sys-x86_64/signal.c:46:
+       GETREG(regs, RIP, sc, rip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: arch/um/sys-x86_64/signal.c:47:
+       GETREG(regs, EFLAGS, sc, eflags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: arch/um/sys-x86_64/signal.c:48:
+       GETREG(regs, CS, sc, cs);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448544.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 23 warnings, 5 checks, 157 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448544.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
