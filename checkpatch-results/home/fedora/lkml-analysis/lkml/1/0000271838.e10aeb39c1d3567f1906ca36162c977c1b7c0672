WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: arch/x86/kernel/tlb_uv.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#117: FILE: arch/x86/kernel/tlb_uv.c:14:
+#include <asm/mmu_context.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: arch/x86/kernel/tlb_uv.c:46:
+static void uv_reply_to_message(int resource,
+		    struct bau_payload_queue_entry *msg,

WARNING:RETURN_VOID: void function return statements are not generally useful
#161: FILE: arch/x86/kernel/tlb_uv.c:58:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: arch/x86/kernel/tlb_uv.c:65:
+static void uv_bau_process_message(struct bau_payload_queue_entry *msg,
+		       int msg_slot, int sw_ack_slot)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)1' could be '1UL'
#178: FILE: arch/x86/kernel/tlb_uv.c:75:
+	this_cpu_mask = (unsigned long)1 << cpu;

WARNING:RETURN_VOID: void function return statements are not generally useful
#200: FILE: arch/x86/kernel/tlb_uv.c:97:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->sending_cpu == sender'
#227: FILE: arch/x86/kernel/tlb_uv.c:124:
+			if ((msg->sending_cpu == sender) &&
+			    (!msg->replied_to)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!msg->replied_to'
#227: FILE: arch/x86/kernel/tlb_uv.c:124:
+			if ((msg->sending_cpu == sender) &&
+			    (!msg->replied_to)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#230: FILE: arch/x86/kernel/tlb_uv.c:127:
+				printk(KERN_DEBUG

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long)1' could be '1L'
#237: FILE: arch/x86/kernel/tlb_uv.c:134:
+					if (!((long)1 << k & msp->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'msp->seen_by.bits'
#238: FILE: arch/x86/kernel/tlb_uv.c:135:
+					if (!((long)1 << k & msp->
+					      seen_by.bits)) {

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#240: FILE: arch/x86/kernel/tlb_uv.c:137:
+						printk("%d ", k);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#243: FILE: arch/x86/kernel/tlb_uv.c:140:
+				printk("\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&bau_desc->distribution'
#283: FILE: arch/x86/kernel/tlb_uv.c:180:
+				if (uv_examine_destinations
+				    (&bau_desc->distribution) == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#290: FILE: arch/x86/kernel/tlb_uv.c:187:
+					printk(KERN_DEBUG

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#292: FILE: arch/x86/kernel/tlb_uv.c:189:
+					printk("giving up on cpu %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: arch/x86/kernel/tlb_uv.c:216:
+int uv_flush_send_and_wait(int cpu, int this_blade,
+	struct bau_activation_descriptor *bau_desc, cpumask_t *cpumaskp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: arch/x86/kernel/tlb_uv.c:243:
+		completion_status = uv_wait_completion(bau_desc, mmr_offset,
+					right_shift);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: arch/x86/kernel/tlb_uv.c:297:
+int uv_flush_tlb_others(cpumask_t *cpumaskp, struct mm_struct *mm,
+	unsigned long va)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#421: FILE: arch/x86/kernel/tlb_uv.c:318:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:RETURN_VOID: void function return statements are not generally useful
#507: FILE: arch/x86/kernel/tlb_uv.c:404:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#529: FILE: arch/x86/kernel/tlb_uv.c:426:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: arch/x86/kernel/tlb_uv.c:460:
+		seq_printf(file,
+		"# cpu requestor requestee one all sretry dretry ptc_i ");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: arch/x86/kernel/tlb_uv.c:462:
+		seq_printf(file,
+		"sw_ack sflush dflush sok dnomsg dmult starget\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: arch/x86/kernel/tlb_uv.c:487:
+static ssize_t uv_ptc_proc_write(struct file *file, const char __user *user,
+		  size_t count, loff_t *data)

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#598: FILE: arch/x86/kernel/tlb_uv.c:495:
+	if (strict_strtoul(optstr, 10, &newmode) < 0) {

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#599: FILE: arch/x86/kernel/tlb_uv.c:496:
+		printk(KERN_DEBUG "%s is invalid\n", optstr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#604: FILE: arch/x86/kernel/tlb_uv.c:501:
+		printk(KERN_DEBUG "# cpu:      cpu number\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#605: FILE: arch/x86/kernel/tlb_uv.c:502:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#607: FILE: arch/x86/kernel/tlb_uv.c:504:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#609: FILE: arch/x86/kernel/tlb_uv.c:506:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#611: FILE: arch/x86/kernel/tlb_uv.c:508:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#613: FILE: arch/x86/kernel/tlb_uv.c:510:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#615: FILE: arch/x86/kernel/tlb_uv.c:512:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#617: FILE: arch/x86/kernel/tlb_uv.c:514:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#619: FILE: arch/x86/kernel/tlb_uv.c:516:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#621: FILE: arch/x86/kernel/tlb_uv.c:518:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#623: FILE: arch/x86/kernel/tlb_uv.c:520:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#625: FILE: arch/x86/kernel/tlb_uv.c:522:
+		printk(KERN_DEBUG "sok:        successes on retry\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#626: FILE: arch/x86/kernel/tlb_uv.c:523:
+		printk(KERN_DEBUG "dnomsg:     interrupts with no message\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#627: FILE: arch/x86/kernel/tlb_uv.c:524:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#629: FILE: arch/x86/kernel/tlb_uv.c:526:
+		printk(KERN_DEBUG "starget:    nodes targeted\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#632: FILE: arch/x86/kernel/tlb_uv.c:529:
+		printk(KERN_DEBUG "timeout retry limit:%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#671: FILE: arch/x86/kernel/tlb_uv.c:568:
+		printk(KERN_ERR "unable to create %s proc entry\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#692: FILE: arch/x86/kernel/tlb_uv.c:589:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#697: FILE: arch/x86/kernel/tlb_uv.c:594:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#707: FILE: arch/x86/kernel/tlb_uv.c:604:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: arch/x86/kernel/tlb_uv.c:617:
+static void __init uv_table_bases_finish(int blade, int node, int cur_cpu,
+				  struct bau_control *bau_tablesp,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#755: FILE: arch/x86/kernel/tlb_uv.c:652:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: arch/x86/kernel/tlb_uv.c:680:
+static struct bau_payload_queue_entry * __init uv_payload_queue_init(int node,
+				int pnode, struct bau_control *bau_tablesp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#793: FILE: arch/x86/kernel/tlb_uv.c:690:
+		BUG();

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)1' could be '1UL'
#860: FILE: arch/x86/kernel/tlb_uv.c:757:
+	uv_mmask = ((unsigned long)1 << uv_hub_info->n_val) - 1;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#873: FILE: arch/x86/kernel/tlb_uv.c:770:
+		BUG();

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#887: FILE: arch/x86/kernel/tlb_uv.c:784:
+__initcall(uv_bau_init);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#888: FILE: arch/x86/kernel/tlb_uv.c:785:
+__initcall(uv_ptc_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#894: FILE: include/asm-x86/uv/uv_bau.h:1:
+/*

WARNING:TYPO_SPELLING: 'threshholds' may be misspelled - perhaps 'thresholds'?
#956: FILE: include/asm-x86/uv/uv_bau.h:63:
+ * source side threshholds at which message retries print a warning
                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1019: FILE: include/asm-x86/uv/uv_bau.h:126:
+	unsigned long address;		/* signifies a page or all TLB's
+						of the cpu */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1019: FILE: include/asm-x86/uv/uv_bau.h:126:
+						of the cpu */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1028: FILE: include/asm-x86/uv/uv_bau.h:135:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1052: FILE: include/asm-x86/uv/uv_bau.h:159:
+				/* Address field (96:57) is never used as an
+				   address (these are address bits 42:3) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1052: FILE: include/asm-x86/uv/uv_bau.h:159:
+				   address (these are address bits 42:3) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1074: FILE: include/asm-x86/uv/uv_bau.h:181:
+				/* INTD trasactions at destination are to
+				   wait for software acknowledge */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1074: FILE: include/asm-x86/uv/uv_bau.h:181:
+				   wait for software acknowledge */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1104: FILE: include/asm-x86/uv/uv_bau.h:211:
+};
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1128: FILE: include/asm-x86/uv/uv_bau.h:235:
+	unsigned long address;		/* signifies a page or all TLB's
+						of the cpu */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1128: FILE: include/asm-x86/uv/uv_bau.h:235:
+						of the cpu */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1208: FILE: include/asm-x86/uv/uv_bau.h:315:
+}
+static inline void bau_node_set(int node, struct bau_target_nodemask *dstp)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1212: FILE: include/asm-x86/uv/uv_bau.h:319:
+}
+static inline void bau_nodes_clear(struct bau_target_nodemask *dstp, int nbits)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1225: FILE: include/asm-x86/uv/uv_bau.h:332:
+extern int uv_flush_tlb_others(cpumask_t *, struct mm_struct *, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cpumask_t *' should also have an identifier name
#1225: FILE: include/asm-x86/uv/uv_bau.h:332:
+extern int uv_flush_tlb_others(cpumask_t *, struct mm_struct *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#1225: FILE: include/asm-x86/uv/uv_bau.h:332:
+extern int uv_flush_tlb_others(cpumask_t *, struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1225: FILE: include/asm-x86/uv/uv_bau.h:332:
+extern int uv_flush_tlb_others(cpumask_t *, struct mm_struct *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1226: FILE: include/asm-x86/uv/uv_bau.h:333:
+extern void uv_bau_message_intr1(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1227: FILE: include/asm-x86/uv/uv_bau.h:334:
+extern void uv_bau_timeout_intr1(void);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1277: FILE: include/asm-x86/atomic_64.h:454:
+		: "+m" (*v1) : "g" (v2): "rax");
 		                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000271838.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 55 warnings, 21 checks, 1192 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000271838.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
