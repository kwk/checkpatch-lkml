WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Should we move the lockdep Kconfig menu entry to Instrumentation support?  It is

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: instrumentation/lockdep.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#306: FILE: instrumentation/lockdep.c:245:
+#define CLASSHASH_SIZE		(1UL << CLASSHASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#316: FILE: instrumentation/lockdep.c:255:
+#define CHAINHASH_BITS		(MAX_LOCKDEP_CHAINS_BITS-1)
                       		                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#317: FILE: instrumentation/lockdep.c:256:
+#define CHAINHASH_SIZE		(1UL << CHAINHASH_BITS)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key1' - possible side-effects?
#329: FILE: instrumentation/lockdep.c:268:
+#define iterate_chain_key(key1, key2) \
+	(((key1) << MAX_LOCKDEP_KEYS_BITS) ^ \
+	((key1) >> (64-MAX_LOCKDEP_KEYS_BITS)) ^ \
+	(key2))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#331: FILE: instrumentation/lockdep.c:270:
+	((key1) >> (64-MAX_LOCKDEP_KEYS_BITS)) ^ \
 	              ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#339: FILE: instrumentation/lockdep.c:278:
+EXPORT_SYMBOL(lockdep_off);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#346: FILE: instrumentation/lockdep.c:285:
+EXPORT_SYMBOL(lockdep_on);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#369: FILE: instrumentation/lockdep.c:308:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: instrumentation/lockdep.c:311:
+	if (class->name_version == 1 &&
+			!strcmp(class->name, "lockname"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: instrumentation/lockdep.c:314:
+	if (class->name_version == 1 &&
+			!strcmp(class->name, "&struct->lockfield"))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#416: FILE: instrumentation/lockdep.c:355:
+		printk("BUG: MAX_STACK_TRACE_ENTRIES too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#417: FILE: instrumentation/lockdep.c:356:
+		printk("turning off the locking correctness validator.\n");

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#478: FILE: instrumentation/lockdep.c:417:
+static const char *usage_str[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#479: FILE: instrumentation/lockdep.c:418:
+static const char *usage_str[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#491: FILE: instrumentation/lockdep.c:430:
+const char * __get_key_name(struct lockdep_subclass_key *key, char *str)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#540: FILE: instrumentation/lockdep.c:479:
+		printk(" (%s", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#542: FILE: instrumentation/lockdep.c:481:
+		printk(" (%s", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#544: FILE: instrumentation/lockdep.c:483:
+			printk("#%d", class->name_version);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#546: FILE: instrumentation/lockdep.c:485:
+			printk("/%d", class->subclass);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#548: FILE: instrumentation/lockdep.c:487:
+	printk("){%c%c%c%c}", c1, c2, c3, c4);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#560: FILE: instrumentation/lockdep.c:499:
+	printk("%s", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#566: FILE: instrumentation/lockdep.c:505:
+	printk(", at: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#575: FILE: instrumentation/lockdep.c:514:
+		printk("no locks held by %s/%d.\n", curr->comm, task_pid_nr(curr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#578: FILE: instrumentation/lockdep.c:517:
+	printk("%d lock%s held by %s/%d:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: instrumentation/lockdep.c:518:
+	printk("%d lock%s held by %s/%d:\n",
+		depth, depth > 1 ? "s" : "", curr->comm, task_pid_nr(curr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#582: FILE: instrumentation/lockdep.c:521:
+		printk(" #%d: ", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#591: FILE: instrumentation/lockdep.c:530:
+	printk("%*s->", depth, "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#593: FILE: instrumentation/lockdep.c:532:
+	printk(" ops: %lu", class->ops);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#594: FILE: instrumentation/lockdep.c:533:
+	printk(" {\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#600: FILE: instrumentation/lockdep.c:539:
+			len += printk("%*s   %s", depth, "", usage_str[bit]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#601: FILE: instrumentation/lockdep.c:540:
+			len += printk(" at:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#605: FILE: instrumentation/lockdep.c:544:
+	printk("%*s }\n", depth, "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#607: FILE: instrumentation/lockdep.c:546:
+	printk("%*s ... key      at: ",depth,"");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#607: FILE: instrumentation/lockdep.c:546:
+	printk("%*s ... key      at: ",depth,"");
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#607: FILE: instrumentation/lockdep.c:546:
+	printk("%*s ... key      at: ",depth,"");
 	                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#629: FILE: instrumentation/lockdep.c:568:
+		printk("%*s ... acquired at:\n",depth,"");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#629: FILE: instrumentation/lockdep.c:568:
+		printk("%*s ... acquired at:\n",depth,"");
 		                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#629: FILE: instrumentation/lockdep.c:568:
+		printk("%*s ... acquired at:\n",depth,"");
 		                                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#631: FILE: instrumentation/lockdep.c:570:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#637: FILE: instrumentation/lockdep.c:576:
+	printk("%s %.*s\n", init_utsname()->release,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: instrumentation/lockdep.c:577:
+	printk("%s %.*s\n", init_utsname()->release,
+		(int)strcspn(init_utsname()->version, " "),

CHECK:SPACING: No space is necessary after a cast
#655: FILE: instrumentation/lockdep.c:594:
+	unsigned long start = (unsigned long) &_stext,

CHECK:SPACING: No space is necessary after a cast
#656: FILE: instrumentation/lockdep.c:595:
+		      end   = (unsigned long) &_end,

CHECK:SPACING: No space is necessary after a cast
#657: FILE: instrumentation/lockdep.c:596:
+		      addr  = (unsigned long) obj;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= start'
#665: FILE: instrumentation/lockdep.c:604:
+	if ((addr >= start) && (addr < end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < end'
#665: FILE: instrumentation/lockdep.c:604:
+	if ((addr >= start) && (addr < end))

CHECK:SPACING: No space is necessary after a cast
#673: FILE: instrumentation/lockdep.c:612:
+		start = (unsigned long) &__per_cpu_start + per_cpu_offset(i);

CHECK:SPACING: No space is necessary after a cast
#674: FILE: instrumentation/lockdep.c:613:
+		end   = (unsigned long) &__per_cpu_start + PERCPU_ENOUGH_ROOM

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= start'
#677: FILE: instrumentation/lockdep.c:616:
+		if ((addr >= start) && (addr < end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < end'
#677: FILE: instrumentation/lockdep.c:616:
+		if ((addr >= start) && (addr < end))

ERROR:CODE_INDENT: code indent should use tabs where possible
#788: FILE: instrumentation/lockdep.c:727:
+ ^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#788: FILE: instrumentation/lockdep.c:727:
+ ^I */$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#791: FILE: instrumentation/lockdep.c:730:
+		printk("INFO: trying to register non-static key.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#792: FILE: instrumentation/lockdep.c:731:
+		printk("the code is fine but needs lockdep annotation.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#793: FILE: instrumentation/lockdep.c:732:
+		printk("turning off the locking correctness validator.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#825: FILE: instrumentation/lockdep.c:764:
+		printk("BUG: MAX_LOCKDEP_KEYS too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#826: FILE: instrumentation/lockdep.c:765:
+		printk("turning off the locking correctness validator.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#848: FILE: instrumentation/lockdep.c:787:
+		printk("\nnew class %p: %s", class->key, class->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#850: FILE: instrumentation/lockdep.c:789:
+			printk("#%d", class->name_version);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#851: FILE: instrumentation/lockdep.c:790:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#884: FILE: instrumentation/lockdep.c:823:
+		printk("BUG: MAX_LOCKDEP_ENTRIES too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#885: FILE: instrumentation/lockdep.c:824:
+		printk("turning off the locking correctness validator.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#943: FILE: instrumentation/lockdep.c:882:
+	printk("\n-> #%u", depth);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#945: FILE: instrumentation/lockdep.c:884:
+	printk(":\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#963: FILE: instrumentation/lockdep.c:902:
+	printk("\n=======================================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#964: FILE: instrumentation/lockdep.c:903:
+	printk(  "[ INFO: possible circular locking dependency detected ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#964: FILE: instrumentation/lockdep.c:903:
+	printk(  "[ INFO: possible circular locking dependency detected ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#966: FILE: instrumentation/lockdep.c:905:
+	printk(  "-------------------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#966: FILE: instrumentation/lockdep.c:905:
+	printk(  "-------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#967: FILE: instrumentation/lockdep.c:906:
+	printk("%s/%d is trying to acquire lock:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#968: FILE: instrumentation/lockdep.c:907:
+	printk("%s/%d is trying to acquire lock:\n",
+		curr->comm, task_pid_nr(curr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#970: FILE: instrumentation/lockdep.c:909:
+	printk("\nbut task is already holding lock:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#972: FILE: instrumentation/lockdep.c:911:
+	printk("\nwhich lock already depends on the new lock.\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#973: FILE: instrumentation/lockdep.c:912:
+	printk("\nthe existing dependency chain (in reverse order) is:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#994: FILE: instrumentation/lockdep.c:933:
+	printk("\nother info that might help us debug this:\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#997: FILE: instrumentation/lockdep.c:936:
+	printk("\nstack backtrace:\n");

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1005: FILE: instrumentation/lockdep.c:944:
+static int noinline print_infinite_recursion_bug(void)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1034: FILE: instrumentation/lockdep.c:973:
+			return print_circular_bug_header(entry, depth+1);
 			                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1036: FILE: instrumentation/lockdep.c:975:
+		if (!check_noncircular(entry->class, depth+1))
 		                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1037: FILE: instrumentation/lockdep.c:976:
+			return print_circular_bug_entry(entry, depth+1);
 			                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1083: FILE: instrumentation/lockdep.c:1022:
+		ret = find_usage_forwards(entry->class, depth+1);
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1125: FILE: instrumentation/lockdep.c:1064:
+		ret = find_usage_backwards(entry->class, depth+1);
 		                                              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1143: FILE: instrumentation/lockdep.c:1082:
+	printk("\n======================================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1144: FILE: instrumentation/lockdep.c:1083:
+	printk(  "[ INFO: %s-safe -> %s-unsafe lock order detected ]\n",

ERROR:SPACING: space prohibited after that open parenthesis '('
#1144: FILE: instrumentation/lockdep.c:1083:
+	printk(  "[ INFO: %s-safe -> %s-unsafe lock order detected ]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1145: FILE: instrumentation/lockdep.c:1084:
+	printk(  "[ INFO: %s-safe -> %s-unsafe lock order detected ]\n",
+		irqclass, irqclass);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1147: FILE: instrumentation/lockdep.c:1086:
+	printk(  "------------------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1147: FILE: instrumentation/lockdep.c:1086:
+	printk(  "------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1148: FILE: instrumentation/lockdep.c:1087:
+	printk("%s/%d [HC%u[%lu]:SC%u[%lu]:HE%u:SE%u] is trying to acquire:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1149: FILE: instrumentation/lockdep.c:1088:
+	printk("%s/%d [HC%u[%lu]:SC%u[%lu]:HE%u:SE%u] is trying to acquire:\n",
+		curr->comm, task_pid_nr(curr),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1156: FILE: instrumentation/lockdep.c:1095:
+	printk("\nand this task is already holding:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1158: FILE: instrumentation/lockdep.c:1097:
+	printk("which would create a new lock dependency:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1160: FILE: instrumentation/lockdep.c:1099:
+	printk(" ->");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1162: FILE: instrumentation/lockdep.c:1101:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1164: FILE: instrumentation/lockdep.c:1103:
+	printk("\nbut this new dependency connects a %s-irq-safe lock:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1165: FILE: instrumentation/lockdep.c:1104:
+	printk("\nbut this new dependency connects a %s-irq-safe lock:\n",
+		irqclass);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1167: FILE: instrumentation/lockdep.c:1106:
+	printk("\n... which became %s-irq-safe at:\n", irqclass);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1171: FILE: instrumentation/lockdep.c:1110:
+	printk("\nto a %s-irq-unsafe lock:\n", irqclass);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1173: FILE: instrumentation/lockdep.c:1112:
+	printk("\n... which became %s-irq-unsafe at:\n", irqclass);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1174: FILE: instrumentation/lockdep.c:1113:
+	printk("...");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1178: FILE: instrumentation/lockdep.c:1117:
+	printk("\nother info that might help us debug this:\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1181: FILE: instrumentation/lockdep.c:1120:
+	printk("\nthe %s-irq-safe lock's dependencies:\n", irqclass);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1184: FILE: instrumentation/lockdep.c:1123:
+	printk("\nthe %s-irq-unsafe lock's dependencies:\n", irqclass);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1187: FILE: instrumentation/lockdep.c:1126:
+	printk("\nstack backtrace:\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1217: FILE: instrumentation/lockdep.c:1156:
+check_prev_add_irq(struct task_struct *curr, struct held_lock *prev,
+		struct held_lock *next)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1226: FILE: instrumentation/lockdep.c:1165:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_HARDIRQ,
+					LOCK_ENABLED_HARDIRQS, "hard"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1236: FILE: instrumentation/lockdep.c:1175:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_HARDIRQ_READ,
+					LOCK_ENABLED_HARDIRQS, "hard-read"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1246: FILE: instrumentation/lockdep.c:1185:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_SOFTIRQ,
+					LOCK_ENABLED_SOFTIRQS, "soft"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1255: FILE: instrumentation/lockdep.c:1194:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_SOFTIRQ_READ,
+					LOCK_ENABLED_SOFTIRQS, "soft"))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1263: FILE: instrumentation/lockdep.c:1202:
+	if (current->hardirq_context)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1265: FILE: instrumentation/lockdep.c:1204:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1277: FILE: instrumentation/lockdep.c:1216:
+check_prev_add_irq(struct task_struct *curr, struct held_lock *prev,
+		struct held_lock *next)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1296: FILE: instrumentation/lockdep.c:1235:
+	printk("\n=============================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1297: FILE: instrumentation/lockdep.c:1236:
+	printk(  "[ INFO: possible recursive locking detected ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1297: FILE: instrumentation/lockdep.c:1236:
+	printk(  "[ INFO: possible recursive locking detected ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1299: FILE: instrumentation/lockdep.c:1238:
+	printk(  "---------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1299: FILE: instrumentation/lockdep.c:1238:
+	printk(  "---------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1300: FILE: instrumentation/lockdep.c:1239:
+	printk("%s/%d is trying to acquire lock:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1301: FILE: instrumentation/lockdep.c:1240:
+	printk("%s/%d is trying to acquire lock:\n",
+		curr->comm, task_pid_nr(curr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1303: FILE: instrumentation/lockdep.c:1242:
+	printk("\nbut task is already holding lock:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1306: FILE: instrumentation/lockdep.c:1245:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1309: FILE: instrumentation/lockdep.c:1248:
+	printk("\nstack backtrace:\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'read == 2'
#1338: FILE: instrumentation/lockdep.c:1277:
+		if ((read == 2) && prev->read)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1437: FILE: instrumentation/lockdep.c:1376:
+		printk("\n new dependency: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1439: FILE: instrumentation/lockdep.c:1378:
+		printk(" => ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1441: FILE: instrumentation/lockdep.c:1380:
+		printk("\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1472: FILE: instrumentation/lockdep.c:1411:
+			curr->held_locks[depth-1].irq_context)
 			                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1477: FILE: instrumentation/lockdep.c:1416:
+		int distance = curr->lockdep_depth - depth + 1;
+		hlock = curr->held_locks + depth-1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1477: FILE: instrumentation/lockdep.c:1416:
+		hlock = curr->held_locks + depth-1;
 		                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1504: FILE: instrumentation/lockdep.c:1443:
+				curr->held_locks[depth-1].irq_context)
 				                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1542: FILE: instrumentation/lockdep.c:1481:
+				printk("\nhash chain already cached, key: "

WARNING:SPLIT_STRING: quoted string split across lines
#1543: FILE: instrumentation/lockdep.c:1482:
+				printk("\nhash chain already cached, key: "
+					"%016Lx tail class: [%p] %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1543: FILE: instrumentation/lockdep.c:1482:
+					"%016Lx tail class: [%p] %s\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1550: FILE: instrumentation/lockdep.c:1489:
+		printk("\nnew hash chain, key: %016Lx tail class: [%p] %s\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1550: FILE: instrumentation/lockdep.c:1489:
+		printk("\nnew hash chain, key: %016Lx tail class: [%p] %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1551: FILE: instrumentation/lockdep.c:1490:
+		printk("\nnew hash chain, key: %016Lx tail class: [%p] %s\n",
+			(unsigned long long)chain_key, class->key, class->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1571: FILE: instrumentation/lockdep.c:1510:
+		printk("BUG: MAX_LOCKDEP_CHAINS too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1572: FILE: instrumentation/lockdep.c:1511:
+		printk("turning off the locking correctness validator.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1585: FILE: instrumentation/lockdep.c:1524:
+static int validate_chain(struct task_struct *curr, struct lockdep_map *lock,
+		struct held_lock *hlock, int chain_head, u64 chain_key)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hlock->check == 2'
#1597: FILE: instrumentation/lockdep.c:1536:
+	if (!hlock->trylock && (hlock->check == 2) &&
+			lookup_chain_cache(chain_key, hlock->class)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1598: FILE: instrumentation/lockdep.c:1537:
+	if (!hlock->trylock && (hlock->check == 2) &&
+			lookup_chain_cache(chain_key, hlock->class)) {

CHECK:BRACES: Unbalanced braces around else statement
#1630: FILE: instrumentation/lockdep.c:1569:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#1639: FILE: instrumentation/lockdep.c:1578:
+^I       ^Istruct lockdep_map *lock, struct held_lock *hlock,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1639: FILE: instrumentation/lockdep.c:1578:
+^I       ^Istruct lockdep_map *lock, struct held_lock *hlock,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1639: FILE: instrumentation/lockdep.c:1578:
+static inline int validate_chain(struct task_struct *curr,
+	       	struct lockdep_map *lock, struct held_lock *hlock,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1661: FILE: instrumentation/lockdep.c:1600:
+			printk("hm#1, depth: %u [%u], %016Lx != %016Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1661: FILE: instrumentation/lockdep.c:1600:
+			printk("hm#1, depth: %u [%u], %016Lx != %016Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1662: FILE: instrumentation/lockdep.c:1601:
+			printk("hm#1, depth: %u [%u], %016Lx != %016Lx\n",
+				curr->lockdep_depth, i,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prev_hlock->irq_context !=
 							hlock->irq_context'
#1672: FILE: instrumentation/lockdep.c:1611:
+		if (prev_hlock && (prev_hlock->irq_context !=
+							hlock->irq_context))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1680: FILE: instrumentation/lockdep.c:1619:
+		printk("hm#2, depth: %u [%u], %016Lx != %016Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1680: FILE: instrumentation/lockdep.c:1619:
+		printk("hm#2, depth: %u [%u], %016Lx != %016Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1681: FILE: instrumentation/lockdep.c:1620:
+		printk("hm#2, depth: %u [%u], %016Lx != %016Lx\n",
+			curr->lockdep_depth, i,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1696: FILE: instrumentation/lockdep.c:1635:
+	printk("\n=================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1697: FILE: instrumentation/lockdep.c:1636:
+	printk(  "[ INFO: inconsistent lock state ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1697: FILE: instrumentation/lockdep.c:1636:
+	printk(  "[ INFO: inconsistent lock state ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1699: FILE: instrumentation/lockdep.c:1638:
+	printk(  "---------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1699: FILE: instrumentation/lockdep.c:1638:
+	printk(  "---------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1701: FILE: instrumentation/lockdep.c:1640:
+	printk("inconsistent {%s} -> {%s} usage.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1702: FILE: instrumentation/lockdep.c:1641:
+	printk("inconsistent {%s} -> {%s} usage.\n",
+		usage_str[prev_bit], usage_str[new_bit]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1704: FILE: instrumentation/lockdep.c:1643:
+	printk("%s/%d [HC%u[%lu]:SC%u[%lu]:HE%u:SE%u] takes:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1705: FILE: instrumentation/lockdep.c:1644:
+	printk("%s/%d [HC%u[%lu]:SC%u[%lu]:HE%u:SE%u] takes:\n",
+		curr->comm, task_pid_nr(curr),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1712: FILE: instrumentation/lockdep.c:1651:
+	printk("{%s} state was registered at:\n", usage_str[prev_bit]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1716: FILE: instrumentation/lockdep.c:1655:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1719: FILE: instrumentation/lockdep.c:1658:
+	printk("\nstack backtrace:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1753: FILE: instrumentation/lockdep.c:1692:
+	printk("\n=========================================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1754: FILE: instrumentation/lockdep.c:1693:
+	printk(  "[ INFO: possible irq lock inversion dependency detected ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1754: FILE: instrumentation/lockdep.c:1693:
+	printk(  "[ INFO: possible irq lock inversion dependency detected ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1756: FILE: instrumentation/lockdep.c:1695:
+	printk(  "---------------------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1756: FILE: instrumentation/lockdep.c:1695:
+	printk(  "---------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1757: FILE: instrumentation/lockdep.c:1696:
+	printk("%s/%d just changed the state of lock:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1758: FILE: instrumentation/lockdep.c:1697:
+	printk("%s/%d just changed the state of lock:\n",
+		curr->comm, task_pid_nr(curr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1761: FILE: instrumentation/lockdep.c:1700:
+		printk("but this lock took another, %s-irq-unsafe lock in the past:\n", irqclass);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1763: FILE: instrumentation/lockdep.c:1702:
+		printk("but this lock was taken by another, %s-irq-safe lock in the past:\n", irqclass);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1763: FILE: instrumentation/lockdep.c:1702:
+		printk("but this lock was taken by another, %s-irq-safe lock in the past:\n", irqclass);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1765: FILE: instrumentation/lockdep.c:1704:
+	printk("\n\nand interrupts could create inverse lock ordering between them.\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1767: FILE: instrumentation/lockdep.c:1706:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1770: FILE: instrumentation/lockdep.c:1709:
+	printk("\nthe first lock's dependencies:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1773: FILE: instrumentation/lockdep.c:1712:
+	printk("\nthe second lock's dependencies:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1776: FILE: instrumentation/lockdep.c:1715:
+	printk("\nstack backtrace:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1822: FILE: instrumentation/lockdep.c:1761:
+	printk("irq event stamp: %u\n", curr->irq_events);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1823: FILE: instrumentation/lockdep.c:1762:
+	printk("hardirqs last  enabled at (%u): ", curr->hardirq_enable_event);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1825: FILE: instrumentation/lockdep.c:1764:
+	printk("hardirqs last disabled at (%u): ", curr->hardirq_disable_event);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1827: FILE: instrumentation/lockdep.c:1766:
+	printk("softirqs last  enabled at (%u): ", curr->softirq_enable_event);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1829: FILE: instrumentation/lockdep.c:1768:
+	printk("softirqs last disabled at (%u): ", curr->softirq_disable_event);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1852: FILE: instrumentation/lockdep.c:1791:
+static int mark_lock_irq(struct task_struct *curr, struct held_lock *this,
+		enum lock_usage_bit new_bit)

ERROR:SPACING: space required before the open parenthesis '('
#1856: FILE: instrumentation/lockdep.c:1795:
+	switch(new_bit) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1876: FILE: instrumentation/lockdep.c:1815:
+		if (!check_usage_forwards(curr, this,
+				LOCK_ENABLED_HARDIRQS_READ, "hard-read"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1901: FILE: instrumentation/lockdep.c:1840:
+		if (!check_usage_forwards(curr, this,
+				LOCK_ENABLED_SOFTIRQS_READ, "soft-read"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1953: FILE: instrumentation/lockdep.c:1892:
+		if (!check_usage_backwards(curr, this,
+				   LOCK_USED_IN_HARDIRQ_READ, "hard-read"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1979: FILE: instrumentation/lockdep.c:1918:
+		if (!check_usage_backwards(curr, this,
+				   LOCK_USED_IN_SOFTIRQ_READ, "soft-read"))

CHECK:SPACING: No space is necessary after a cast
#2090: FILE: instrumentation/lockdep.c:2029:
+	ip = (unsigned long) __builtin_return_address(0);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2116: FILE: instrumentation/lockdep.c:2055:
+EXPORT_SYMBOL(trace_hardirqs_on);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2131: FILE: instrumentation/lockdep.c:2070:
+	if (curr->hardirqs_enabled) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2139: FILE: instrumentation/lockdep.c:2078:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2143: FILE: instrumentation/lockdep.c:2082:
+EXPORT_SYMBOL(trace_hardirqs_off);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2192: FILE: instrumentation/lockdep.c:2131:
+	if (curr->softirqs_enabled) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2201: FILE: instrumentation/lockdep.c:2140:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2215: FILE: instrumentation/lockdep.c:2154:
+				if (!mark_lock(curr, hlock,
+						LOCK_USED_IN_HARDIRQ_READ))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2219: FILE: instrumentation/lockdep.c:2158:
+				if (!mark_lock(curr, hlock,
+						LOCK_USED_IN_SOFTIRQ_READ))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2233: FILE: instrumentation/lockdep.c:2172:
+			if (!mark_lock(curr, hlock,
+					LOCK_ENABLED_HARDIRQS_READ))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2237: FILE: instrumentation/lockdep.c:2176:
+				if (!mark_lock(curr, hlock,
+						LOCK_ENABLED_SOFTIRQS_READ))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2241: FILE: instrumentation/lockdep.c:2180:
+			if (!mark_lock(curr, hlock,
+					LOCK_ENABLED_HARDIRQS))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2245: FILE: instrumentation/lockdep.c:2184:
+				if (!mark_lock(curr, hlock,
+						LOCK_ENABLED_SOFTIRQS))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2254: FILE: instrumentation/lockdep.c:2193:
+static int separate_irq_context(struct task_struct *curr,
+		struct held_lock *hlock)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2261: FILE: instrumentation/lockdep.c:2200:
+	hlock->irq_context = 2*(curr->hardirq_context ? 1 : 0) +
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2266: FILE: instrumentation/lockdep.c:2205:
+		prev_hlock = curr->held_locks + depth-1;
 		                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2282: FILE: instrumentation/lockdep.c:2221:
+int mark_lock_irq(struct task_struct *curr, struct held_lock *this,
+		enum lock_usage_bit new_bit)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2289: FILE: instrumentation/lockdep.c:2228:
+static inline int mark_irqflags(struct task_struct *curr,
+		struct held_lock *hlock)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2295: FILE: instrumentation/lockdep.c:2234:
+static inline int separate_irq_context(struct task_struct *curr,
+		struct held_lock *hlock)

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#2320: FILE: instrumentation/lockdep.c:2259:
+	 * Make sure we didnt race:
 	                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2365: FILE: instrumentation/lockdep.c:2304:
+		printk("\nmarked lock as {%s}:\n", usage_str[new_bit]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2391: FILE: instrumentation/lockdep.c:2330:
+		printk("BUG: key %p not in .data!\n", key);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2405: FILE: instrumentation/lockdep.c:2344:
+EXPORT_SYMBOL_GPL(lockdep_init_map);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2433: FILE: instrumentation/lockdep.c:2372:
+		printk("BUG: MAX_LOCKDEP_SUBCLASSES too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2434: FILE: instrumentation/lockdep.c:2373:
+		printk("turning off the locking correctness validator.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2450: FILE: instrumentation/lockdep.c:2389:
+		printk("\nacquire class [%p] %s", class->key, class->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2452: FILE: instrumentation/lockdep.c:2391:
+			printk("#%d", class->name_version);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2453: FILE: instrumentation/lockdep.c:2392:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2527: FILE: instrumentation/lockdep.c:2466:
+		printk("BUG: MAX_LOCK_DEPTH too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2528: FILE: instrumentation/lockdep.c:2467:
+		printk("turning off the locking correctness validator.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2547: FILE: instrumentation/lockdep.c:2486:
+	printk("\n=====================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2548: FILE: instrumentation/lockdep.c:2487:
+	printk(  "[ BUG: bad unlock balance detected! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#2548: FILE: instrumentation/lockdep.c:2487:
+	printk(  "[ BUG: bad unlock balance detected! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2549: FILE: instrumentation/lockdep.c:2488:
+	printk(  "-------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#2549: FILE: instrumentation/lockdep.c:2488:
+	printk(  "-------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2550: FILE: instrumentation/lockdep.c:2489:
+	printk("%s/%d is trying to release lock (",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2551: FILE: instrumentation/lockdep.c:2490:
+	printk("%s/%d is trying to release lock (",
+		curr->comm, task_pid_nr(curr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2553: FILE: instrumentation/lockdep.c:2492:
+	printk(") at:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2555: FILE: instrumentation/lockdep.c:2494:
+	printk("but there are no more locks to release!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2556: FILE: instrumentation/lockdep.c:2495:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2559: FILE: instrumentation/lockdep.c:2498:
+	printk("\nstack backtrace:\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2605: FILE: instrumentation/lockdep.c:2544:
+	for (i = depth-1; i >= 0; i--) {
 	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2632: FILE: instrumentation/lockdep.c:2571:
+		if (!__lock_acquire(hlock->instance,
+			hlock->class->subclass, hlock->trylock,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hlock->prev_chain_key != 0'
#2668: FILE: instrumentation/lockdep.c:2607:
+	if (DEBUG_LOCKS_WARN_ON(!depth && (hlock->prev_chain_key != 0)))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2765: FILE: instrumentation/lockdep.c:2704:
+EXPORT_SYMBOL_GPL(lock_acquire);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2785: FILE: instrumentation/lockdep.c:2724:
+EXPORT_SYMBOL_GPL(lock_release);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2790: FILE: instrumentation/lockdep.c:2729:
+print_lock_contention_bug(struct task_struct *curr, struct lockdep_map *lock,
+			   unsigned long ip)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2797: FILE: instrumentation/lockdep.c:2736:
+	printk("\n=================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2798: FILE: instrumentation/lockdep.c:2737:
+	printk(  "[ BUG: bad contention detected! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#2798: FILE: instrumentation/lockdep.c:2737:
+	printk(  "[ BUG: bad contention detected! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2799: FILE: instrumentation/lockdep.c:2738:
+	printk(  "---------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#2799: FILE: instrumentation/lockdep.c:2738:
+	printk(  "---------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2800: FILE: instrumentation/lockdep.c:2739:
+	printk("%s/%d is trying to contend lock (",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2801: FILE: instrumentation/lockdep.c:2740:
+	printk("%s/%d is trying to contend lock (",
+		curr->comm, task_pid_nr(curr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2803: FILE: instrumentation/lockdep.c:2742:
+	printk(") at:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2805: FILE: instrumentation/lockdep.c:2744:
+	printk("but there are no locks held!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2806: FILE: instrumentation/lockdep.c:2745:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2809: FILE: instrumentation/lockdep.c:2748:
+	printk("\nstack backtrace:\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2829: FILE: instrumentation/lockdep.c:2768:
+	for (i = depth-1; i >= 0; i--) {
 	              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2872: FILE: instrumentation/lockdep.c:2811:
+	for (i = depth-1; i >= 0; i--) {
 	              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2961: FILE: instrumentation/lockdep.c:2900:
+	memset(current->held_locks, 0, MAX_LOCK_DEPTH*sizeof(struct held_lock));
 	                                             ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2989: FILE: instrumentation/lockdep.c:2928:
+
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3089: FILE: instrumentation/lockdep.c:3028:
+	printk("Lock dependency validator: Copyright (c) 2006 Red Hat, Inc., Ingo Molnar\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3091: FILE: instrumentation/lockdep.c:3030:
+	printk("... MAX_LOCKDEP_SUBCLASSES:    %lu\n", MAX_LOCKDEP_SUBCLASSES);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3092: FILE: instrumentation/lockdep.c:3031:
+	printk("... MAX_LOCK_DEPTH:          %lu\n", MAX_LOCK_DEPTH);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3093: FILE: instrumentation/lockdep.c:3032:
+	printk("... MAX_LOCKDEP_KEYS:        %lu\n", MAX_LOCKDEP_KEYS);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3094: FILE: instrumentation/lockdep.c:3033:
+	printk("... CLASSHASH_SIZE:           %lu\n", CLASSHASH_SIZE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3095: FILE: instrumentation/lockdep.c:3034:
+	printk("... MAX_LOCKDEP_ENTRIES:     %lu\n", MAX_LOCKDEP_ENTRIES);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3096: FILE: instrumentation/lockdep.c:3035:
+	printk("... MAX_LOCKDEP_CHAINS:      %lu\n", MAX_LOCKDEP_CHAINS);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3097: FILE: instrumentation/lockdep.c:3036:
+	printk("... CHAINHASH_SIZE:          %lu\n", CHAINHASH_SIZE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3099: FILE: instrumentation/lockdep.c:3038:
+	printk(" memory used by lock dependency info: %lu kB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3100: FILE: instrumentation/lockdep.c:3039:
+	printk(" memory used by lock dependency info: %lu kB\n",
+		(sizeof(struct lock_class) * MAX_LOCKDEP_KEYS +

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3106: FILE: instrumentation/lockdep.c:3045:
+	printk(" per task-struct memory footprint: %lu bytes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3107: FILE: instrumentation/lockdep.c:3046:
+	printk(" per task-struct memory footprint: %lu bytes\n",
+		sizeof(struct held_lock) * MAX_LOCK_DEPTH);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3111: FILE: instrumentation/lockdep.c:3050:
+		printk("WARNING: lockdep init error! Arch code didn't call lockdep_init() early enough?\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3112: FILE: instrumentation/lockdep.c:3051:
+		printk("Call stack leading to lockdep invocation was:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3132: FILE: instrumentation/lockdep.c:3071:
+	printk("\n=========================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3133: FILE: instrumentation/lockdep.c:3072:
+	printk(  "[ BUG: held lock freed! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#3133: FILE: instrumentation/lockdep.c:3072:
+	printk(  "[ BUG: held lock freed! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3134: FILE: instrumentation/lockdep.c:3073:
+	printk(  "-------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#3134: FILE: instrumentation/lockdep.c:3073:
+	printk(  "-------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3135: FILE: instrumentation/lockdep.c:3074:
+	printk("%s/%d is freeing memory %p-%p, with a lock still held there!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3136: FILE: instrumentation/lockdep.c:3075:
+	printk("%s/%d is freeing memory %p-%p, with a lock still held there!\n",
+		curr->comm, task_pid_nr(curr), mem_from, mem_to-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3136: FILE: instrumentation/lockdep.c:3075:
+		curr->comm, task_pid_nr(curr), mem_from, mem_to-1);
 		                                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3140: FILE: instrumentation/lockdep.c:3079:
+	printk("\nstack backtrace:\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3168: FILE: instrumentation/lockdep.c:3107:
+		if (!in_range(mem_from, lock_from, mem_to) &&
+					!in_range(mem_from, lock_to, mem_to))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3185: FILE: instrumentation/lockdep.c:3124:
+	printk("\n=====================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3186: FILE: instrumentation/lockdep.c:3125:
+	printk(  "[ BUG: lock held at task exit time! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#3186: FILE: instrumentation/lockdep.c:3125:
+	printk(  "[ BUG: lock held at task exit time! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3187: FILE: instrumentation/lockdep.c:3126:
+	printk(  "-------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#3187: FILE: instrumentation/lockdep.c:3126:
+	printk(  "-------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3188: FILE: instrumentation/lockdep.c:3127:
+	printk("%s/%d is exiting with locks still held!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3189: FILE: instrumentation/lockdep.c:3128:
+	printk("%s/%d is exiting with locks still held!\n",
+		curr->comm, task_pid_nr(curr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3192: FILE: instrumentation/lockdep.c:3131:
+	printk("\nstack backtrace:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3209: FILE: instrumentation/lockdep.c:3148:
+		printk("INFO: lockdep is turned off.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3212: FILE: instrumentation/lockdep.c:3151:
+	printk("\nShowing all locks held in the system:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3223: FILE: instrumentation/lockdep.c:3162:
+			printk("hm, tasklist_lock locked, retrying... ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3226: FILE: instrumentation/lockdep.c:3165:
+			printk(" #%d", 10-count);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3226: FILE: instrumentation/lockdep.c:3165:
+			printk(" #%d", 10-count);
 			                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3230: FILE: instrumentation/lockdep.c:3169:
+		printk(" ignoring it.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3234: FILE: instrumentation/lockdep.c:3173:
+		printk(" locked it.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3244: FILE: instrumentation/lockdep.c:3183:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3245: FILE: instrumentation/lockdep.c:3184:
+	printk("=============================================\n\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#3251: FILE: instrumentation/lockdep.c:3190:
+EXPORT_SYMBOL_GPL(debug_show_all_locks);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3256: FILE: instrumentation/lockdep.c:3195:
+		printk("INFO: lockdep is turned off.\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#3262: FILE: instrumentation/lockdep.c:3201:
+EXPORT_SYMBOL_GPL(debug_show_held_locks);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3271: FILE: instrumentation/lockdep.c:3210:
+		printk("\n================================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3272: FILE: instrumentation/lockdep.c:3211:
+		printk(  "[ BUG: lock held when returning to user space! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#3272: FILE: instrumentation/lockdep.c:3211:
+		printk(  "[ BUG: lock held when returning to user space! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3273: FILE: instrumentation/lockdep.c:3212:
+		printk(  "------------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#3273: FILE: instrumentation/lockdep.c:3212:
+		printk(  "------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3274: FILE: instrumentation/lockdep.c:3213:
+		printk("%s/%d is leaving the kernel with locks still held!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3275: FILE: instrumentation/lockdep.c:3214:
+		printk("%s/%d is leaving the kernel with locks still held!\n",
+				curr->comm, curr->pid);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6521: FILE: instrumentation/lockdep_internals.h:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#6541: FILE: instrumentation/lockdep_internals.h:21:
+#define MAX_LOCKDEP_KEYS	(1UL << MAX_LOCKDEP_KEYS_BITS)

CHECK:BIT_MACRO: Prefer using the BIT macro
#6544: FILE: instrumentation/lockdep_internals.h:24:
+#define MAX_LOCKDEP_CHAINS	(1UL << MAX_LOCKDEP_CHAINS_BITS)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#6557: FILE: instrumentation/lockdep_internals.h:37:
+extern const char * __get_key_name(struct lockdep_subclass_key *key, char *str);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6557: FILE: instrumentation/lockdep_internals.h:37:
+extern const char * __get_key_name(struct lockdep_subclass_key *key, char *str);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6604: FILE: instrumentation/lockdep_proc.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#6624: FILE: instrumentation/lockdep_proc.c:21:
+#include <asm/uaccess.h>

CHECK:BRACES: braces {} should be used on all arms of this statement
#6635: FILE: instrumentation/lockdep_proc.c:32:
+	if (v == SEQ_START_TOKEN)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6637: FILE: instrumentation/lockdep_proc.c:34:
+	else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#6659: FILE: instrumentation/lockdep_proc.c:56:
+		if (++i == *pos)
+		return class;

ERROR:SPACING: space required before the open brace '{'
#6705: FILE: instrumentation/lockdep_proc.c:102:
+	} else{

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#6722: FILE: instrumentation/lockdep_proc.c:119:
+		seq_printf(m, "all lock classes:\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#6739: FILE: instrumentation/lockdep_proc.c:136:
+	seq_printf(m, ": ");

WARNING:LINE_SPACING: Missing a blank line after declarations
#6765: FILE: instrumentation/lockdep_proc.c:162:
+	int res = seq_open(file, &lockdep_ops);
+	if (!res) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6770: FILE: instrumentation/lockdep_proc.c:167:
+			m->private = list_entry(all_lock_classes.next,
+					struct lock_class, lock_entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6797: FILE: instrumentation/lockdep_proc.c:194:
+	seq_printf(m, " chain lookup misses:           %11u\n",
+		debug_atomic_read(&chain_lookup_misses));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6799: FILE: instrumentation/lockdep_proc.c:196:
+	seq_printf(m, " chain lookup hits:             %11u\n",
+		debug_atomic_read(&chain_lookup_hits));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6801: FILE: instrumentation/lockdep_proc.c:198:
+	seq_printf(m, " cyclic checks:                 %11u\n",
+		debug_atomic_read(&nr_cyclic_checks));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6803: FILE: instrumentation/lockdep_proc.c:200:
+	seq_printf(m, " cyclic-check recursions:       %11u\n",
+		debug_atomic_read(&nr_cyclic_check_recursions));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6805: FILE: instrumentation/lockdep_proc.c:202:
+	seq_printf(m, " find-mask forwards checks:     %11u\n",
+		debug_atomic_read(&nr_find_usage_forwards_checks));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6807: FILE: instrumentation/lockdep_proc.c:204:
+	seq_printf(m, " find-mask forwards recursions: %11u\n",
+		debug_atomic_read(&nr_find_usage_forwards_recursions));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6809: FILE: instrumentation/lockdep_proc.c:206:
+	seq_printf(m, " find-mask backwards checks:    %11u\n",
+		debug_atomic_read(&nr_find_usage_backwards_checks));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6811: FILE: instrumentation/lockdep_proc.c:208:
+	seq_printf(m, " find-mask backwards recursions:%11u\n",
+		debug_atomic_read(&nr_find_usage_backwards_recursions));

WARNING:TYPO_SPELLING: 'ons' may be misspelled - perhaps 'owns'?
#6815: FILE: instrumentation/lockdep_proc.c:212:
+	seq_printf(m, " redundant hardirq ons:         %11u\n", hr1);
 	                                  ^^^

WARNING:TYPO_SPELLING: 'ons' may be misspelled - perhaps 'owns'?
#6819: FILE: instrumentation/lockdep_proc.c:216:
+	seq_printf(m, " redundant softirq ons:         %11u\n", sr1);
 	                                  ^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#6837: FILE: instrumentation/lockdep_proc.c:234:
+	list_for_each_entry(class, &all_lock_classes, lock_entry) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6873: FILE: instrumentation/lockdep_proc.c:270:
+	seq_printf(m, " lock-classes:                  %11lu [max: %lu]\n",
+			nr_lock_classes, MAX_LOCKDEP_KEYS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6875: FILE: instrumentation/lockdep_proc.c:272:
+	seq_printf(m, " direct dependencies:           %11lu [max: %lu]\n",
+			nr_list_entries, MAX_LOCKDEP_ENTRIES);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6877: FILE: instrumentation/lockdep_proc.c:274:
+	seq_printf(m, " indirect dependencies:         %11lu\n",
+			sum_forward_deps);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6886: FILE: instrumentation/lockdep_proc.c:283:
+	seq_printf(m, " all direct dependencies:       %11lu\n",
+			nr_irq_unsafe * nr_irq_safe +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6899: FILE: instrumentation/lockdep_proc.c:296:
+	seq_printf(m, " dependency chains:             %11lu [max: %lu]\n",
+			nr_lock_chains, MAX_LOCKDEP_CHAINS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6904: FILE: instrumentation/lockdep_proc.c:301:
+	seq_printf(m, " in-hardirq chains:             %11u\n",
+			nr_hardirq_chains);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6906: FILE: instrumentation/lockdep_proc.c:303:
+	seq_printf(m, " in-softirq chains:             %11u\n",
+			nr_softirq_chains);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6909: FILE: instrumentation/lockdep_proc.c:306:
+	seq_printf(m, " in-process chains:             %11u\n",
+			nr_process_chains);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6911: FILE: instrumentation/lockdep_proc.c:308:
+	seq_printf(m, " stack-trace entries:           %11lu [max: %lu]\n",
+			nr_stack_trace_entries, MAX_STACK_TRACE_ENTRIES);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6913: FILE: instrumentation/lockdep_proc.c:310:
+	seq_printf(m, " combined max dependencies:     %11u\n",
+			(nr_hardirq_chains + 1) *

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6918: FILE: instrumentation/lockdep_proc.c:315:
+	seq_printf(m, " hardirq-safe locks:            %11lu\n",
+			nr_hardirq_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6920: FILE: instrumentation/lockdep_proc.c:317:
+	seq_printf(m, " hardirq-unsafe locks:          %11lu\n",
+			nr_hardirq_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6922: FILE: instrumentation/lockdep_proc.c:319:
+	seq_printf(m, " softirq-safe locks:            %11lu\n",
+			nr_softirq_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6924: FILE: instrumentation/lockdep_proc.c:321:
+	seq_printf(m, " softirq-unsafe locks:          %11lu\n",
+			nr_softirq_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6926: FILE: instrumentation/lockdep_proc.c:323:
+	seq_printf(m, " irq-safe locks:                %11lu\n",
+			nr_irq_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6928: FILE: instrumentation/lockdep_proc.c:325:
+	seq_printf(m, " irq-unsafe locks:              %11lu\n",
+			nr_irq_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6931: FILE: instrumentation/lockdep_proc.c:328:
+	seq_printf(m, " hardirq-read-safe locks:       %11lu\n",
+			nr_hardirq_read_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6933: FILE: instrumentation/lockdep_proc.c:330:
+	seq_printf(m, " hardirq-read-unsafe locks:     %11lu\n",
+			nr_hardirq_read_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6935: FILE: instrumentation/lockdep_proc.c:332:
+	seq_printf(m, " softirq-read-safe locks:       %11lu\n",
+			nr_softirq_read_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6937: FILE: instrumentation/lockdep_proc.c:334:
+	seq_printf(m, " softirq-read-unsafe locks:     %11lu\n",
+			nr_softirq_read_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6939: FILE: instrumentation/lockdep_proc.c:336:
+	seq_printf(m, " irq-read-safe locks:           %11lu\n",
+			nr_irq_read_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6941: FILE: instrumentation/lockdep_proc.c:338:
+	seq_printf(m, " irq-read-unsafe locks:         %11lu\n",
+			nr_irq_read_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6944: FILE: instrumentation/lockdep_proc.c:341:
+	seq_printf(m, " uncategorized locks:           %11lu\n",
+			nr_uncategorized);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6946: FILE: instrumentation/lockdep_proc.c:343:
+	seq_printf(m, " unused locks:                  %11lu\n",
+			nr_unused);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6948: FILE: instrumentation/lockdep_proc.c:345:
+	seq_printf(m, " max locking depth:             %11u\n",
+			max_lockdep_depth);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6950: FILE: instrumentation/lockdep_proc.c:347:
+	seq_printf(m, " max recursion depth:           %11u\n",
+			max_recursion_depth);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6953: FILE: instrumentation/lockdep_proc.c:350:
+	seq_printf(m, " debug_locks:                   %11u\n",
+			debug_locks);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7013: FILE: instrumentation/lockdep_proc.c:410:
+	snprintf(buf, bufsiz, "%lld.%02d", (long long)nr, ((int)rem+5)/10);
 	                                                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#7013: FILE: instrumentation/lockdep_proc.c:410:
+	snprintf(buf, bufsiz, "%lld.%02d", (long long)nr, ((int)rem+5)/10);
 	                                                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7059: FILE: instrumentation/lockdep_proc.c:456:
+		snprintf(name+namelen, 3, "#%d", class->name_version);
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7063: FILE: instrumentation/lockdep_proc.c:460:
+		snprintf(name+namelen, 3, "/%d", class->subclass);
 		             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7103: FILE: instrumentation/lockdep_proc.c:500:
+			seq_line(m, '-', 40-namelen, namelen);
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7107: FILE: instrumentation/lockdep_proc.c:504:
+		snprintf(ip, sizeof(ip), "[<%p>]",
+				(void *)class->contention_point[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7109: FILE: instrumentation/lockdep_proc.c:506:
+		seq_printf(m, "%40s %14lu %29s %s\n", name,
+				stats->contention_point[i],

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#7121: FILE: instrumentation/lockdep_proc.c:518:
+	seq_printf(m, "lock_stat version 0.2\n");

WARNING:SPLIT_STRING: quoted string split across lines
#7124: FILE: instrumentation/lockdep_proc.c:521:
+	seq_printf(m, "%40s %14s %14s %14s %14s %14s %14s %14s %14s "
+			"%14s %14s\n",

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#7137: FILE: instrumentation/lockdep_proc.c:534:
+	seq_printf(m, "\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#7160: FILE: instrumentation/lockdep_proc.c:557:
+	if (v == SEQ_START_TOKEN)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#7162: FILE: instrumentation/lockdep_proc.c:559:
+	else {

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#7187: FILE: instrumentation/lockdep_proc.c:584:
+static struct seq_operations lockstat_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*data)...) over vmalloc(sizeof(struct lock_stat_seq)...)
#7198: FILE: instrumentation/lockdep_proc.c:595:
+	struct lock_stat_seq *data = vmalloc(sizeof(struct lock_stat_seq));

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#7204: FILE: instrumentation/lockdep_proc.c:601:
+	if (!res) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7217: FILE: instrumentation/lockdep_proc.c:614:
+		sort(data->stats, data->iter_end - data->iter,
+				sizeof(struct lock_stat_data),

CHECK:BRACES: Unbalanced braces around else statement
#7221: FILE: instrumentation/lockdep_proc.c:618:
+	} else

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#7268: FILE: instrumentation/lockdep_proc.c:665:
+	entry = create_proc_entry("lockdep", S_IRUSR, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#7272: FILE: instrumentation/lockdep_proc.c:669:
+	entry = create_proc_entry("lockdep_stats", S_IRUSR, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#7277: FILE: instrumentation/lockdep_proc.c:674:
+	entry = create_proc_entry("lock_stat", S_IRUSR, NULL);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#7285: FILE: instrumentation/lockdep_proc.c:682:
+__initcall(lockdep_proc_init);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363818.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 32 errors, 200 warnings, 147 checks, 3995 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363818.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
