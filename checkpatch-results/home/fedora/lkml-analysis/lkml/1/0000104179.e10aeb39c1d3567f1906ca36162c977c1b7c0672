WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
We use an LRU policy if it is necessary to "cool down" a region currently in

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#51: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: include/linux/lru_cache.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#57: FILE: include/linux/lru_cache.h:2:
+/*
+   lru_cache.c

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#77: FILE: include/linux/lru_cache.h:22:
+   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#91: FILE: include/linux/lru_cache.h:36:
+/*
+This header file (and its .c file; kernel-doc of functions see there)

WARNING:TYPO_SPELLING: 'uppon' may be misspelled - perhaps 'upon'?
#102: FILE: include/linux/lru_cache.h:47:
+  backend storage uppon next resync, if we don't get it right).
                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#110: FILE: include/linux/lru_cache.h:55:
+  (in use, or "hot", regions), as we don't know wether or not those WRITEs have
                                                 ^^^^^^

WARNING:TYPO_SPELLING: 'unneccessary' may be misspelled - perhaps 'unnecessary'?
#122: FILE: include/linux/lru_cache.h:67:
+  (possibly unneccessary) resync traffic.
             ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#189: FILE: include/linux/lru_cache.h:134:
+ * .colision is for hash table lookup.
     ^^^^^^^^

WARNING:TYPO_SPELLING: 'architechture' may be misspelled - perhaps 'architecture'?
#206: FILE: include/linux/lru_cache.h:151:
+ * lru_cache, totalling ~215 kB for 64bit architechture, ~53 pages.
                                           ^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#215: FILE: include/linux/lru_cache.h:160:
+	struct hlist_node colision;
 	                  ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#217: FILE: include/linux/lru_cache.h:162:
+	unsigned refcnt;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#219: FILE: include/linux/lru_cache.h:164:
+	 * for paranoia, and for "ts_element_to_index" */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#220: FILE: include/linux/lru_cache.h:165:
+	unsigned lc_index;

WARNING:TYPO_SPELLING: 'independend' may be misspelled - perhaps 'independent'?
#222: FILE: include/linux/lru_cache.h:167:
+	 * it needs to become arch independend u64 */
 	                           ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#222: FILE: include/linux/lru_cache.h:167:
+	 * it needs to become arch independend u64 */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#223: FILE: include/linux/lru_cache.h:168:
+	unsigned lc_number;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#249: FILE: include/linux/lru_cache.h:194:
+	 * 8 high bits of .ts_index to be overloaded with flags in the future. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#250: FILE: include/linux/lru_cache.h:195:
+#define LC_MAX_ACTIVE	(1<<24)
                      	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#250: FILE: include/linux/lru_cache.h:195:
+#define LC_MAX_ACTIVE	(1<<24)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#253: FILE: include/linux/lru_cache.h:198:
+	unsigned used; /* number of lelements currently on in_use list */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: include/linux/lru_cache.h:218:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#277: FILE: include/linux/lru_cache.h:222:
+	 * user needs to guarantee exclusive access by proper locking! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#281: FILE: include/linux/lru_cache.h:226:
+	 * changing requests */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#289: FILE: include/linux/lru_cache.h:234:
+	 * nr_elements is too small. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#292: FILE: include/linux/lru_cache.h:237:
+};
+#define LC_PARANOIA (1<<__LC_PARANOIA)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#292: FILE: include/linux/lru_cache.h:237:
+#define LC_PARANOIA (1<<__LC_PARANOIA)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#292: FILE: include/linux/lru_cache.h:237:
+#define LC_PARANOIA (1<<__LC_PARANOIA)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#293: FILE: include/linux/lru_cache.h:238:
+#define LC_DIRTY    (1<<__LC_DIRTY)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#293: FILE: include/linux/lru_cache.h:238:
+#define LC_DIRTY    (1<<__LC_DIRTY)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#294: FILE: include/linux/lru_cache.h:239:
+#define LC_STARVING (1<<__LC_STARVING)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#294: FILE: include/linux/lru_cache.h:239:
+#define LC_STARVING (1<<__LC_STARVING)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#296: FILE: include/linux/lru_cache.h:241:
+extern struct lru_cache *lc_create(const char *name, struct kmem_cache *cache,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: include/linux/lru_cache.h:242:
+extern struct lru_cache *lc_create(const char *name, struct kmem_cache *cache,
+		unsigned e_count, size_t e_size, size_t e_off);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#297: FILE: include/linux/lru_cache.h:242:
+		unsigned e_count, size_t e_size, size_t e_off);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: include/linux/lru_cache.h:243:
+extern void lc_reset(struct lru_cache *lc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: include/linux/lru_cache.h:244:
+extern void lc_destroy(struct lru_cache *lc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#300: FILE: include/linux/lru_cache.h:245:
+extern void lc_set(struct lru_cache *lc, unsigned int enr, int index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: include/linux/lru_cache.h:246:
+extern void lc_del(struct lru_cache *lc, struct lc_element *element);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#303: FILE: include/linux/lru_cache.h:248:
+extern struct lc_element *lc_try_get(struct lru_cache *lc, unsigned int enr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: include/linux/lru_cache.h:249:
+extern struct lc_element *lc_find(struct lru_cache *lc, unsigned int enr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: include/linux/lru_cache.h:250:
+extern struct lc_element *lc_get(struct lru_cache *lc, unsigned int enr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: include/linux/lru_cache.h:251:
+extern unsigned int lc_put(struct lru_cache *lc, struct lc_element *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#307: FILE: include/linux/lru_cache.h:252:
+extern void lc_changed(struct lru_cache *lc, struct lc_element *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#310: FILE: include/linux/lru_cache.h:255:
+extern size_t lc_seq_printf_stats(struct seq_file *seq, struct lru_cache *lc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: include/linux/lru_cache.h:257:
+extern void lc_seq_dump_details(struct seq_file *seq, struct lru_cache *lc, char *utext,

WARNING:SPACING: Unnecessary space before function pointer arguments
#313: FILE: include/linux/lru_cache.h:258:
+				void (*detail) (struct seq_file *, struct lc_element *));

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#320: FILE: include/linux/lru_cache.h:265:
+ * still change.  Returns true if we aquired the lock.
                                      ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#340: FILE: include/linux/lru_cache.h:285:
+	struct lc_element *e = lc_find(lc, enr);
+	return e && e->refcnt;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#346: FILE: include/linux/lru_cache.h:291:
+extern struct lc_element *lc_element_by_index(struct lru_cache *lc, unsigned i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: include/linux/lru_cache.h:291:
+extern struct lc_element *lc_element_by_index(struct lru_cache *lc, unsigned i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#347: FILE: include/linux/lru_cache.h:292:
+extern unsigned int lc_index_of(struct lru_cache *lc, struct lc_element *e);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#356: FILE: lib/lru_cache.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#357: FILE: lib/lru_cache.c:2:
+/*
+   lru_cache.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#377: FILE: lib/lru_cache.c:22:
+   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:SPLIT_STRING: quoted string split across lines
#389: FILE: lib/lru_cache.c:34:
+MODULE_AUTHOR("Philipp Reisner <phil@linbit.com>, "
+	      "Lars Ellenberg <lars@linbit.com>");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#394: FILE: lib/lru_cache.c:39:
+ * it catches concurrent access (lack of locking on the users part) */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#396: FILE: lib/lru_cache.c:41:
+	BUG_ON(!lc);			\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#397: FILE: lib/lru_cache.c:42:
+	BUG_ON(!lc->nr_elements);	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#398: FILE: lib/lru_cache.c:43:
+	BUG_ON(test_and_set_bit(__LC_PARANOIA, &lc->flags)); \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#401: FILE: lib/lru_cache.c:46:
+#define RETURN(x...)     do { \
+	clear_bit(__LC_PARANOIA, &lc->flags); \
+	smp_mb__after_clear_bit(); return x ; } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#403: FILE: lib/lru_cache.c:48:
+	smp_mb__after_clear_bit(); return x ; } while (0)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#409: FILE: lib/lru_cache.c:54:
+	unsigned i = e_->lc_index;	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#410: FILE: lib/lru_cache.c:55:
+	BUG_ON(i >= lc_->nr_elements);	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#411: FILE: lib/lru_cache.c:56:
+	BUG_ON(lc_->lc_element[i] != e_); } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#411: FILE: lib/lru_cache.c:56:
+	BUG_ON(lc_->lc_element[i] != e_); } while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: lib/lru_cache.c:69:
+struct lru_cache *lc_create(const char *name, struct kmem_cache *cache,
+		unsigned e_count, size_t e_size, size_t e_off)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#424: FILE: lib/lru_cache.c:69:
+		unsigned e_count, size_t e_size, size_t e_off)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#430: FILE: lib/lru_cache.c:75:
+	unsigned cache_obj_size = kmem_cache_size(cache);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#431: FILE: lib/lru_cache.c:76:
+	unsigned i;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#438: FILE: lib/lru_cache.c:83:
+	 * for typical use cases, e_count should be few thousand at most. */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#442: FILE: lib/lru_cache.c:87:
+	slot = kzalloc(e_count * sizeof(struct hlist_head*), GFP_KERNEL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#442: FILE: lib/lru_cache.c:87:
+	slot = kzalloc(e_count * sizeof(struct hlist_head*), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#445: FILE: lib/lru_cache.c:90:
+	element = kzalloc(e_count * sizeof(struct lc_element *), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#469: FILE: lib/lru_cache.c:114:
+		void *p = kmem_cache_alloc(cache, GFP_KERNEL);
+		if (!p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#484: FILE: lib/lru_cache.c:129:
+		void *p = element[i];
+		kmem_cache_free(cache, p - e_off);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#493: FILE: lib/lru_cache.c:138:
+void lc_free_by_index(struct lru_cache *lc, unsigned i)

WARNING:LINE_SPACING: Missing a blank line after declarations
#496: FILE: lib/lru_cache.c:141:
+	void *p = lc->lc_element[i];
+	WARN_ON(!p);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#509: FILE: lib/lru_cache.c:154:
+	unsigned i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#510: FILE: lib/lru_cache.c:155:
+	unsigned i;
+	if (!lc)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#528: FILE: lib/lru_cache.c:173:
+	unsigned i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#547: FILE: lib/lru_cache.c:192:
+		void *p = e;
+		p -= lc->element_off;

WARNING:SPLIT_STRING: quoted string split across lines
#571: FILE: lib/lru_cache.c:216:
+	return seq_printf(seq, "\t%s: used:%u/%u "
+		"hits:%lu misses:%lu starving:%lu dirty:%lu changed:%lu\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#581: FILE: lib/lru_cache.c:226:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#596: FILE: lib/lru_cache.c:241:
+	BUG_ON(!lc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#597: FILE: lib/lru_cache.c:242:
+	BUG_ON(!lc->nr_elements);

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#598: FILE: lib/lru_cache.c:243:
+	hlist_for_each_entry(e, n, lc_hash_slot(lc, enr), colision) {
 	                                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#620: FILE: lib/lru_cache.c:265:
+	hlist_del(&e->colision);
 	              ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#636: FILE: lib/lru_cache.c:281:
+	BUG_ON(e->refcnt);

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#639: FILE: lib/lru_cache.c:284:
+	hlist_del_init(&e->colision);
 	                   ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#666: FILE: lib/lru_cache.c:311:
+
+

WARNING:TYPO_SPELLING: 'houskeeping' may be misspelled - perhaps 'housekeeping'?
#696: FILE: lib/lru_cache.c:341:
+ *          hash collision chains.  The user now should do whatever houskeeping
                                                                     ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#736: FILE: lib/lru_cache.c:381:
+	 * we serialize on flags & TF_DIRTY */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#743: FILE: lib/lru_cache.c:388:
+	BUG_ON(!e);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#746: FILE: lib/lru_cache.c:391:
+	BUG_ON(++e->refcnt != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#788: FILE: lib/lru_cache.c:433:
+	BUG_ON(e != lc->changing_element);

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#793: FILE: lib/lru_cache.c:438:
+	hlist_add_head(&e->colision, lc_hash_slot(lc, lc->new_number));
 	                   ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#801: FILE: lib/lru_cache.c:446:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#815: FILE: lib/lru_cache.c:460:
+	BUG_ON(e->refcnt == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#816: FILE: lib/lru_cache.c:461:
+	BUG_ON(e == lc->changing_element);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#832: FILE: lib/lru_cache.c:477:
+struct lc_element *lc_element_by_index(struct lru_cache *lc, unsigned i)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#834: FILE: lib/lru_cache.c:479:
+	BUG_ON(i >= lc->nr_elements);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#835: FILE: lib/lru_cache.c:480:
+	BUG_ON(lc->lc_element[i] == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lc->lc_element[i]"
#835: FILE: lib/lru_cache.c:480:
+	BUG_ON(lc->lc_element[i] == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#836: FILE: lib/lru_cache.c:481:
+	BUG_ON(lc->lc_element[i]->lc_index != i);

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#869: FILE: lib/lru_cache.c:514:
+	hlist_del_init(&e->colision);
 	                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#870: FILE: lib/lru_cache.c:515:
+	hlist_add_head(&e->colision, lc_hash_slot(lc, enr));
 	                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'embeded' may be misspelled - perhaps 'embedded'?
#880: FILE: lib/lru_cache.c:525:
+ * of the object the lc_element is embeded in.
                                    ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#883: FILE: lib/lru_cache.c:528:
+void lc_seq_dump_details(struct seq_file *seq, struct lru_cache *lc, char *utext,
+	     void (*detail) (struct seq_file *, struct lc_element *))

WARNING:SPACING: Unnecessary space before function pointer arguments
#883: FILE: lib/lru_cache.c:528:
+	     void (*detail) (struct seq_file *, struct lc_element *))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#902: FILE: lib/lru_cache.c:547:
+EXPORT_SYMBOL(lc_create);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#903: FILE: lib/lru_cache.c:548:
+EXPORT_SYMBOL(lc_reset);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#904: FILE: lib/lru_cache.c:549:
+EXPORT_SYMBOL(lc_destroy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#905: FILE: lib/lru_cache.c:550:
+EXPORT_SYMBOL(lc_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#906: FILE: lib/lru_cache.c:551:
+EXPORT_SYMBOL(lc_del);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#907: FILE: lib/lru_cache.c:552:
+EXPORT_SYMBOL(lc_try_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#908: FILE: lib/lru_cache.c:553:
+EXPORT_SYMBOL(lc_find);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#909: FILE: lib/lru_cache.c:554:
+EXPORT_SYMBOL(lc_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#910: FILE: lib/lru_cache.c:555:
+EXPORT_SYMBOL(lc_put);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#911: FILE: lib/lru_cache.c:556:
+EXPORT_SYMBOL(lc_changed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#912: FILE: lib/lru_cache.c:557:
+EXPORT_SYMBOL(lc_element_by_index);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#913: FILE: lib/lru_cache.c:558:
+EXPORT_SYMBOL(lc_index_of);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#914: FILE: lib/lru_cache.c:559:
+EXPORT_SYMBOL(lc_seq_printf_stats);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#915: FILE: lib/lru_cache.c:560:
+EXPORT_SYMBOL(lc_seq_dump_details);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104179.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 89 warnings, 31 checks, 869 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104179.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
