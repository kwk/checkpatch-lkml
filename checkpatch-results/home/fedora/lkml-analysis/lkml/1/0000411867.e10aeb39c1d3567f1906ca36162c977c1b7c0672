WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#41: FILE: drivers/net/forcedeth.c:1386:
+		struct sk_buff *skb = dev_alloc_skb_node(np->rx_buf_sz + NV_RX_ALLOC_PAD, dev_to_node(&dev->dev));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#50: FILE: drivers/net/forcedeth.c:1418:
+		struct sk_buff *skb = dev_alloc_skb_node(np->rx_buf_sz + NV_RX_ALLOC_PAD, dev_to_node(&dev->dev));

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#60: FILE: drivers/net/forcedeth.c:3979:
+	rx_skbuff = kmalloc_node(sizeof(struct nv_skb_map) * ring->rx_pending, GFP_KERNEL, dev_to_node(&dev->dev));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*rx_skbuff)...) over kmalloc_node(sizeof(struct nv_skb_map)...)
#60: FILE: drivers/net/forcedeth.c:3979:
+	rx_skbuff = kmalloc_node(sizeof(struct nv_skb_map) * ring->rx_pending, GFP_KERNEL, dev_to_node(&dev->dev));

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#61: FILE: drivers/net/forcedeth.c:3980:
+	tx_skbuff = kmalloc_node(sizeof(struct nv_skb_map) * ring->tx_pending, GFP_KERNEL, dev_to_node(&dev->dev));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*tx_skbuff)...) over kmalloc_node(sizeof(struct nv_skb_map)...)
#61: FILE: drivers/net/forcedeth.c:3980:
+	tx_skbuff = kmalloc_node(sizeof(struct nv_skb_map) * ring->tx_pending, GFP_KERNEL, dev_to_node(&dev->dev));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#78: FILE: drivers/net/forcedeth.c:4979:
+	printk(KERN_INFO "nv_probe: numa_node : %02d\n", dev_to_node(&pci_dev->dev));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nv_probe', this function's name, in a string
#78: FILE: drivers/net/forcedeth.c:4979:
+	printk(KERN_INFO "nv_probe: numa_node : %02d\n", dev_to_node(&pci_dev->dev));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#88: FILE: drivers/net/forcedeth.c:4999:
+	np->rx_skb = kmalloc_node(sizeof(struct nv_skb_map) * np->rx_ring_size, GFP_KERNEL, dev_to_node(&pci_dev->dev));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*np->rx_skb)...) over kmalloc_node(sizeof(struct nv_skb_map)...)
#88: FILE: drivers/net/forcedeth.c:4999:
+	np->rx_skb = kmalloc_node(sizeof(struct nv_skb_map) * np->rx_ring_size, GFP_KERNEL, dev_to_node(&pci_dev->dev));

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#89: FILE: drivers/net/forcedeth.c:5000:
+	np->tx_skb = kmalloc_node(sizeof(struct nv_skb_map) * np->tx_ring_size, GFP_KERNEL, dev_to_node(&pci_dev->dev));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*np->tx_skb)...) over kmalloc_node(sizeof(struct nv_skb_map)...)
#89: FILE: drivers/net/forcedeth.c:5000:
+	np->tx_skb = kmalloc_node(sizeof(struct nv_skb_map) * np->tx_ring_size, GFP_KERNEL, dev_to_node(&pci_dev->dev));

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#100: FILE: drivers/net/forcedeth.c:5211:
+	/*
+	 * store numa_node in dev->dev, so we don't need to use

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: include/linux/skbuff.h:337:
+static inline struct sk_buff *alloc_skb_node(unsigned int size,
+					gfp_t priority, int node)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#127: FILE: include/linux/skbuff.h:347:
 }
+static inline struct sk_buff *alloc_skb_fclone_node(unsigned int size,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: include/linux/skbuff.h:348:
+static inline struct sk_buff *alloc_skb_fclone_node(unsigned int size,
+					       gfp_t priority, int node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: include/linux/skbuff.h:1297:
+static inline struct sk_buff *__dev_alloc_skb_node(unsigned int length,
+					      gfp_t gfp_mask, int node)

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: include/linux/skbuff.h:1300:
+	struct sk_buff *skb = alloc_skb_node(length + NET_SKB_PAD, gfp_mask, node);
+	if (likely(skb))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#148: FILE: include/linux/skbuff.h:1305:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411867.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 9 checks, 114 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411867.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
