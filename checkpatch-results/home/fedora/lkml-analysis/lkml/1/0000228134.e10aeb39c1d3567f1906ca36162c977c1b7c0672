WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#56: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: fs/nilfs2/dir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#77: FILE: fs/nilfs2/dir.c:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#78: FILE: fs/nilfs2/dir.c:18:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#114: FILE: fs/nilfs2/dir.c:54:
+static inline unsigned nilfs_chunk_size(struct inode *inode)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#127: FILE: fs/nilfs2/dir.c:67:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#127: FILE: fs/nilfs2/dir.c:67:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#127: FILE: fs/nilfs2/dir.c:67:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                                        ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#134: FILE: fs/nilfs2/dir.c:74:
+static unsigned nilfs_last_byte(struct inode *inode, unsigned long page_nr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#136: FILE: fs/nilfs2/dir.c:76:
+	unsigned last_byte = inode->i_size;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#146: FILE: fs/nilfs2/dir.c:86:
+					       unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#146: FILE: fs/nilfs2/dir.c:86:
+					       unsigned from, unsigned to)

WARNING:LINE_SPACING: Missing a blank line after declarations
#149: FILE: fs/nilfs2/dir.c:89:
+	loff_t pos = page_offset(page) + from;
+	return block_write_begin(NULL, mapping, pos, to - from,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#156: FILE: fs/nilfs2/dir.c:96:
+			       unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#156: FILE: fs/nilfs2/dir.c:96:
+			       unsigned from, unsigned to)

WARNING:LINE_SPACING: Missing a blank line after declarations
#159: FILE: fs/nilfs2/dir.c:99:
+	loff_t pos = page_offset(page) + from;
+	return block_write_begin(NULL, mapping, pos, to - from, 0, &page,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#165: FILE: fs/nilfs2/dir.c:105:
+			      unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#165: FILE: fs/nilfs2/dir.c:105:
+			      unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#170: FILE: fs/nilfs2/dir.c:110:
+	unsigned len = to - from;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#171: FILE: fs/nilfs2/dir.c:111:
+	unsigned nr_dirty, copied;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#191: FILE: fs/nilfs2/dir.c:131:
+	unsigned chunk_size = nilfs_chunk_size(dir);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#193: FILE: fs/nilfs2/dir.c:133:
+	unsigned offs, rec_len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#194: FILE: fs/nilfs2/dir.c:134:
+	unsigned limit = PAGE_CACHE_SIZE;

CHECK:CAMELCASE: Avoid CamelCase: <Ebadsize>
#201: FILE: fs/nilfs2/dir.c:141:
+			goto Ebadsize;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Eshort>
#210: FILE: fs/nilfs2/dir.c:150:
+			goto Eshort;

CHECK:CAMELCASE: Avoid CamelCase: <Ealign>
#212: FILE: fs/nilfs2/dir.c:152:
+			goto Ealign;

CHECK:CAMELCASE: Avoid CamelCase: <Enamelen>
#214: FILE: fs/nilfs2/dir.c:154:
+			goto Enamelen;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#215: FILE: fs/nilfs2/dir.c:155:
+		if (((offs + rec_len - 1) ^ offs) & ~(chunk_size-1))
 		                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <Espan>
#216: FILE: fs/nilfs2/dir.c:156:
+			goto Espan;

CHECK:CAMELCASE: Avoid CamelCase: <Eend>
#219: FILE: fs/nilfs2/dir.c:159:
+		goto Eend;

WARNING:SPLIT_STRING: quoted string split across lines
#245: FILE: fs/nilfs2/dir.c:185:
+	nilfs_error(sb, "nilfs_check_page", "bad entry in directory #%lu: %s - "
+		    "offset=%lu, inode=%lu, rec_len=%d, name_len=%d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#246: FILE: fs/nilfs2/dir.c:186:
+		    dir->i_ino, error, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#246: FILE: fs/nilfs2/dir.c:186:
+		    dir->i_ino, error, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                                                      ^

CHECK:SPACING: No space is necessary after a cast
#247: FILE: fs/nilfs2/dir.c:187:
+		    (unsigned long) le64_to_cpu(p->inode),

WARNING:SPLIT_STRING: quoted string split across lines
#254: FILE: fs/nilfs2/dir.c:194:
+		    "entry in directory #%lu spans the page boundary"
+		    "offset=%lu, inode=%lu",

WARNING:MISSING_SPACE: break quoted strings at a space character
#254: FILE: fs/nilfs2/dir.c:194:
+		    "entry in directory #%lu spans the page boundary"
+		    "offset=%lu, inode=%lu",

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#255: FILE: fs/nilfs2/dir.c:195:
+		    dir->i_ino, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#255: FILE: fs/nilfs2/dir.c:195:
+		    dir->i_ino, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                                               ^

CHECK:SPACING: No space is necessary after a cast
#256: FILE: fs/nilfs2/dir.c:196:
+		    (unsigned long) le64_to_cpu(p->inode));

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#335: FILE: fs/nilfs2/dir.c:275:
+	de->file_type = nilfs_type_by_mode[(mode & S_IFMT)>>S_SHIFT];
 	                                                  ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#338: FILE: fs/nilfs2/dir.c:278:
+static int nilfs_readdir(struct file *filp, void *dirent, filldir_t filldir)
                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: fs/nilfs2/dir.c:328:
+				over = filldir(dirent, de->name, de->name_len,
+						(n<<PAGE_CACHE_SHIFT) | offset,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#388: FILE: fs/nilfs2/dir.c:328:
+						(n<<PAGE_CACHE_SHIFT) | offset,
 						  ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#420: FILE: fs/nilfs2/dir.c:360:
+	unsigned reclen = NILFS_DIR_REC_LEN(namelen);

WARNING:LINE_SPACING: Missing a blank line after declarations
#439: FILE: fs/nilfs2/dir.c:379:
+		char *kaddr;
+		page = nilfs_get_page(dir, n);

CHECK:SPACING: No space is necessary after a cast
#444: FILE: fs/nilfs2/dir.c:384:
+			while ((char *) de <= kaddr) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: fs/nilfs2/dir.c:387:
+					nilfs_error(dir->i_sb, __func__,
+						"zero-length directory entry");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: fs/nilfs2/dir.c:402:
+			nilfs_error(dir->i_sb, __func__,
+			       "dir %lu size %lld exceeds block cout %llu",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#483: FILE: fs/nilfs2/dir.c:423:
+		de = nilfs_next_entry(

CHECK:SPACING: No space is necessary after a cast
#509: FILE: fs/nilfs2/dir.c:449:
+	unsigned from = (char *) de - (char *) page_address(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#509: FILE: fs/nilfs2/dir.c:449:
+	unsigned from = (char *) de - (char *) page_address(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#510: FILE: fs/nilfs2/dir.c:450:
+	unsigned to = from + le16_to_cpu(de->rec_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#516: FILE: fs/nilfs2/dir.c:456:
+	BUG_ON(err);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#521: FILE: fs/nilfs2/dir.c:461:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#534: FILE: fs/nilfs2/dir.c:474:
+	unsigned chunk_size = nilfs_chunk_size(dir);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#535: FILE: fs/nilfs2/dir.c:475:
+	unsigned reclen = NILFS_DIR_REC_LEN(namelen);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#542: FILE: fs/nilfs2/dir.c:482:
+	unsigned from, to;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#591: FILE: fs/nilfs2/dir.c:531:
+	BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#613: FILE: fs/nilfs2/dir.c:553:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#635: FILE: fs/nilfs2/dir.c:575:
+	unsigned from = ((char *)dir - kaddr) & ~(nilfs_chunk_size(inode) - 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#636: FILE: fs/nilfs2/dir.c:576:
+	unsigned to = ((char *)dir - kaddr) + le16_to_cpu(dir->rec_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#655: FILE: fs/nilfs2/dir.c:595:
+	BUG_ON(err);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#660: FILE: fs/nilfs2/dir.c:600:
+	inode->i_ctime = inode->i_mtime = CURRENT_TIME;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#675: FILE: fs/nilfs2/dir.c:615:
+	unsigned chunk_size = nilfs_chunk_size(inode);

WARNING:SPLIT_STRING: quoted string split across lines
#734: FILE: fs/nilfs2/dir.c:674:
+					    "zero-length directory entry "
+					    "(kaddr=%p, de=%p)\n", kaddr, de);

CHECK:BRACES: braces {} should be used on all arms of this statement
#743: FILE: fs/nilfs2/dir.c:683:
+				if (de->name_len < 2) {
[...]
+				} else if (de->name[1] != '.')
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#761: FILE: fs/nilfs2/dir.c:701:
+struct file_operations nilfs_dir_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228134.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 37 warnings, 28 checks, 711 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228134.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
