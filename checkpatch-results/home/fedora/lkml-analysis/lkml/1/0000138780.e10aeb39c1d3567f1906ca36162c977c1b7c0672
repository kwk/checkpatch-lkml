WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
undefined size and use such ability to allocate the minimal size on the ring

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#107: FILE: include/trace/ftrace.h:31:
+#define __ending_string(item)			char	item[];

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#117: FILE: include/trace/ftrace.h:153:
+#define __ending_string(item)						      \
+	ret = trace_seq_printf(s, "\tfield: char " #item "[];\t"	      \
+			       "offset:%u;\n",				      \
+			       (unsigned int)offsetof(typeof(field), item));   \
+	if (!ret)							      \
+		return 0;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#117: FILE: include/trace/ftrace.h:153:
+#define __ending_string(item)						      \
+	ret = trace_seq_printf(s, "\tfield: char " #item "[];\t"	      \
+			       "offset:%u;\n",				      \
+			       (unsigned int)offsetof(typeof(field), item));   \
+	if (!ret)							      \
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#117: FILE: include/trace/ftrace.h:153:
+#define __ending_string(item)						      \
+	ret = trace_seq_printf(s, "\tfield: char " #item "[];\t"	      \
+			       "offset:%u;\n",				      \
+			       (unsigned int)offsetof(typeof(field), item));   \
+	if (!ret)							      \
+		return 0;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dst' may be better as '(dst)' to avoid precedence issues
#131: FILE: include/trace/ftrace.h:167:
+#define open_string_assign(call, dst, src)	strcpy(__entry->dst, src)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#145: FILE: include/trace/ftrace.h:211:
+#define __ending_string(item)						\
+	ret = trace_define_field(event_call, "char []", #item,		\
+				 offsetof(typeof(field), item),		\
+				 MAX_FILTER_STR_VAL);			\
+	if (ret)							\
+		return ret;						\
+	event_call->has_ending_string = true;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#145: FILE: include/trace/ftrace.h:211:
+#define __ending_string(item)						\
+	ret = trace_define_field(event_call, "char []", #item,		\
+				 offsetof(typeof(field), item),		\
+				 MAX_FILTER_STR_VAL);			\
+	if (ret)							\
+		return ret;						\
+	event_call->has_ending_string = true;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#145: FILE: include/trace/ftrace.h:211:
+#define __ending_string(item)						\
+	ret = trace_define_field(event_call, "char []", #item,		\
+				 offsetof(typeof(field), item),		\
+				 MAX_FILTER_STR_VAL);			\
+	if (ret)							\
+		return ret;						\
+	event_call->has_ending_string = true;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#166: FILE: include/trace/ftrace.h:445:
+#define open_string_assign(call, dst, src)				       \
+	event = trace_current_buffer_lock_reserve(			       \
+			event_##call.id,				       \
+			sizeof(struct ftrace_raw_##call) + strlen(src) + 1,    \
+			irq_flags, pc);					       \
+	if (!event)							       \
+		return;							       \
+	entry	= ring_buffer_event_data(event);			       \
+	strcpy(entry->dst, src);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dst' may be better as '(dst)' to avoid precedence issues
#166: FILE: include/trace/ftrace.h:445:
+#define open_string_assign(call, dst, src)				       \
+	event = trace_current_buffer_lock_reserve(			       \
+			event_##call.id,				       \
+			sizeof(struct ftrace_raw_##call) + strlen(src) + 1,    \
+			irq_flags, pc);					       \
+	if (!event)							       \
+		return;							       \
+	entry	= ring_buffer_event_data(event);			       \
+	strcpy(entry->dst, src);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src' - possible side-effects?
#166: FILE: include/trace/ftrace.h:445:
+#define open_string_assign(call, dst, src)				       \
+	event = trace_current_buffer_lock_reserve(			       \
+			event_##call.id,				       \
+			sizeof(struct ftrace_raw_##call) + strlen(src) + 1,    \
+			irq_flags, pc);					       \
+	if (!event)							       \
+		return;							       \
+	entry	= ring_buffer_event_data(event);			       \
+	strcpy(entry->dst, src);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#166: FILE: include/trace/ftrace.h:445:
+#define open_string_assign(call, dst, src)				       \
+	event = trace_current_buffer_lock_reserve(			       \
+			event_##call.id,				       \
+			sizeof(struct ftrace_raw_##call) + strlen(src) + 1,    \
+			irq_flags, pc);					       \
+	if (!event)							       \
+		return;							       \
+	entry	= ring_buffer_event_data(event);			       \
+	strcpy(entry->dst, src);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000138780.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 7 warnings, 3 checks, 111 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000138780.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
