WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#59: FILE: fs/namei.c:744:
+				    struct nameidata *nd);
 				                      ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#65: FILE: fs/namei.c:750:
+ * @nd - nameidata for the parent of @topmost
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#83: FILE: fs/namei.c:768:
+static int __lookup_union(struct nameidata *nd, struct qstr *name,
                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#110: FILE: fs/namei.c:795:
+		lower.dentry = __lookup_hash(name, nd->path.dentry, nd);
 		                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#191: FILE: fs/namei.c:876:
+static int lookup_union(struct nameidata *nd, struct qstr *name,
                                           ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#197: FILE: fs/namei.c:882:
+	BUG_ON(!IS_MNT_UNION(nd->path.mnt) && !IS_MNT_UNION(topmost->mnt));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#198: FILE: fs/namei.c:883:
+	BUG_ON(!mutex_is_locked(&nd->path.dentry->d_inode->i_mutex));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#203: FILE: fs/namei.c:888:
+	err = __lookup_union(nd, name, topmost);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#217: FILE: fs/namei.c:902:
+static int do_union_lookup(struct nameidata *nd, struct qstr *name,
                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#225: FILE: fs/namei.c:910:
+	err = lookup_union(nd, name, topmost);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#241: FILE: fs/namei.c:949:
+		int err = do_union_lookup(nd, name, path);
 		                          ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#242: FILE: fs/namei.c:950:
+		int err = do_union_lookup(nd, name, path);
+		if (err < 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#256: FILE: fs/namei.c:1419:
+		err = lookup_union(nd, name, path);
 		                   ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#339: FILE: fs/union.c:390:
+struct dentry * union_create_topmost_dir(struct path *parent, struct qstr *name,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'path' - possible side-effects?
#371: FILE: include/linux/union.h:41:
+#define IS_UNIONED_DIR(path)	(IS_MNT_UNION((path)->mnt) && \
+				 ((path)->dentry->d_unionized || \
+				  !list_empty(&(path)->dentry->d_unions)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#375: FILE: include/linux/union.h:45:
+extern int needs_union_lookup(struct vfsmount *, struct path *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#381: FILE: include/linux/union.h:51:
+extern struct dentry * union_create_topmost_dir(struct path *, struct qstr *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#381: FILE: include/linux/union.h:51:
+extern struct dentry * union_create_topmost_dir(struct path *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct path *' should also have an identifier name
#381: FILE: include/linux/union.h:51:
+extern struct dentry * union_create_topmost_dir(struct path *, struct qstr *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#381: FILE: include/linux/union.h:51:
+extern struct dentry * union_create_topmost_dir(struct path *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct path *' should also have an identifier name
#381: FILE: include/linux/union.h:51:
+extern struct dentry * union_create_topmost_dir(struct path *, struct qstr *,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#393: FILE: include/linux/union.h:63:
+#define union_create_topmost_dir(x, y, z)	({ BUG(); (NULL); })

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005285.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 17 warnings, 3 checks, 334 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005285.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
