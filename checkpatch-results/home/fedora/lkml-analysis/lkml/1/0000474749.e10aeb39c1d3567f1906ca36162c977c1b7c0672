ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#40: FILE: fs/ncpfs/sock.c:54:
*buff, int len)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#44: FILE: fs/ncpfs/sock.c:58:
+       atomic_t refs;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#52: FILE: fs/ncpfs/sock.c:71:
+static inline struct ncp_request_reply* ncp_alloc_req(void)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#54: FILE: fs/ncpfs/sock.c:73:
+       struct ncp_request_reply *req;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: fs/ncpfs/sock.c:75:
+       req = kmalloc(sizeof(struct ncp_request_reply), GFP_KERNEL);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*req)...) over kmalloc(sizeof(struct ncp_request_reply)...)
#56: FILE: fs/ncpfs/sock.c:75:
+       req = kmalloc(sizeof(struct ncp_request_reply), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: fs/ncpfs/sock.c:76:
+       if (!req)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#57: FILE: fs/ncpfs/sock.c:76:
+       if (!req)
+               return NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#58: FILE: fs/ncpfs/sock.c:77:
+               return NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: fs/ncpfs/sock.c:77:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: fs/ncpfs/sock.c:79:
+       init_waitqueue_head(&req->wq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: fs/ncpfs/sock.c:80:
+       atomic_set(&req->refs, (1));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: fs/ncpfs/sock.c:81:
+       req->status = RQ_IDLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: fs/ncpfs/sock.c:83:
+       return req;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: fs/ncpfs/sock.c:88:
+       atomic_inc(&req->refs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: fs/ncpfs/sock.c:93:
+       if (atomic_dec_and_test(&req->refs))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#74: FILE: fs/ncpfs/sock.c:93:
+       if (atomic_dec_and_test(&req->refs))
+               kfree(req);

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: fs/ncpfs/sock.c:94:
+               kfree(req);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: fs/ncpfs/sock.c:94:
+               kfree(req);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: fs/ncpfs/sock.c:136:
+       ncp_req_put(req);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: fs/ncpfs/sock.c:339:
+       ncp_req_get(req);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: fs/ncpfs/sock.c:704:
+       struct ncp_request_reply *req;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: fs/ncpfs/sock.c:706:
+       req = ncp_alloc_req();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: fs/ncpfs/sock.c:707:
+       if (!req)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#133: FILE: fs/ncpfs/sock.c:707:
+       if (!req)
+               return -ENOMEM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: fs/ncpfs/sock.c:708:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: fs/ncpfs/sock.c:708:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: fs/ncpfs/sock.c:710:
+       req->reply_buf = reply_buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: fs/ncpfs/sock.c:711:
+       req->datalen = max_reply_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: fs/ncpfs/sock.c:712:
+       req->tx_iov[1].iov_base = server->packet;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: fs/ncpfs/sock.c:713:
+       req->tx_iov[1].iov_len = size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: fs/ncpfs/sock.c:714:
+       req->tx_iovlen = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: fs/ncpfs/sock.c:715:
+       req->tx_totallen = size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: fs/ncpfs/sock.c:716:
+       req->tx_type = *(u_int16_t*)server->packet;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#142: FILE: fs/ncpfs/sock.c:716:
+       req->tx_type = *(u_int16_t*)server->packet;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: fs/ncpfs/sock.c:718:
+       result = ncp_add_request(server, req);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: fs/ncpfs/sock.c:722:
+       if (wait_event_interruptible(req->wq, req->status == RQ_DONE))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#152: FILE: fs/ncpfs/sock.c:722:
+       if (wait_event_interruptible(req->wq, req->status == RQ_DONE))
+               result = -EINTR;

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: fs/ncpfs/sock.c:723:
+               result = -EINTR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: fs/ncpfs/sock.c:723:
+               result = -EINTR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: fs/ncpfs/sock.c:724:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#154: FILE: fs/ncpfs/sock.c:724:
+       else
+               result = req->result;

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: fs/ncpfs/sock.c:725:
+               result = req->result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: fs/ncpfs/sock.c:725:
+               result = req->result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: fs/ncpfs/sock.c:727:
+       ncp_req_put(req);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: fs/ncpfs/sock.c:729:
+       return result;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474749.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 37 warnings, 1 checks, 129 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474749.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
