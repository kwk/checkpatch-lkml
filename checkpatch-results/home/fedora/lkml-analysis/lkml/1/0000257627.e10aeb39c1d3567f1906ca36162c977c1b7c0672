CHECK:LINE_SPACING: Please don't use multiple blank lines
#71: FILE: drivers/of/device.c:104:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#92: FILE: drivers/of/device.c:125:
+		strlcpy(dev->dev.bus_id, bus_id, BUS_ID_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: drivers/of/device.c:134:
+ssize_t of_device_get_modalias(struct of_device *ofdev,
+				char *str, ssize_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#109: FILE: drivers/of/device.c:142:
+	csize = snprintf(str, len, "of:N%sT%s",
+				ofdev->node->name, ofdev->node->type);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#117: FILE: drivers/of/device.c:150:
+	for (i = (cplen-1); i >= 0 && !compat[i]; i--)
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#138: FILE: drivers/of/device.c:171:
+	memcpy(&str[csize+1], compat, cplen);
 	                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: drivers/of/device.c:174:
+		char c = str[i];
+		if (c == '\0')

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#170: FILE: drivers/of/device.c:203:
+	 * up using a number of environment variables instead. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#189: FILE: drivers/of/device.c:222:
+	sl = of_device_get_modalias(ofdev, &env->buf[env->buflen-1],
 	                                                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: drivers/of/platform.c:21:
+       .uevent^I= of_device_uevent,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#225: FILE: drivers/of/platform.c:140:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#226: FILE: drivers/of/platform.c:141:
+struct of_device* of_platform_device_create(struct device_node *np,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#253: FILE: drivers/of/platform.c:168:
+
+

WARNING:TYPO_SPELLING: 'instanciate' may be misspelled - perhaps 'instantiate'?
#257: FILE: drivers/of/platform.c:172:
+ * children. Optionally recursively instanciate matching busses.
                                     ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'instanciate' may be misspelled - perhaps 'instantiate'?
#258: FILE: drivers/of/platform.c:173:
+ * @bus: device node of the bus to instanciate
                                    ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#273: FILE: drivers/of/platform.c:188:
+		if (dev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line (or did you mean 'else if'?)
#280: FILE: drivers/of/platform.c:195:
+		} if (rc) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TYPO_SPELLING: 'instanciated' may be misspelled - perhaps 'instantiated'?
#294: FILE: drivers/of/platform.c:209:
+ * Note that children of the provided root are not instanciated as devices
                                                    ^^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!matches"
#306: FILE: drivers/of/platform.c:221:
+	if (matches == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!root"
#310: FILE: drivers/of/platform.c:225:
+	if (root == NULL)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'of_platform_bus_probe', this function's name, in a string
#315: FILE: drivers/of/platform.c:230:
+	pr_debug("of_platform_bus_probe()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#324: FILE: drivers/of/platform.c:239:
+		if (dev == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#338: FILE: drivers/of/platform.c:253:
+		if (dev == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#373: FILE: drivers/of/platform.c:288:
+	phandle *ph = data;
+	return to_of_device(dev)->node->linux_phandle == *ph;

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#389: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#394: FILE: drivers/of/prom_parse.c:1:
+#undef DEBUG

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <PRu64>
#405: FILE: drivers/of/prom_parse.c:12:
+#define PRu64	"%llx"

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'na' - possible side-effects?
#409: FILE: drivers/of/prom_parse.c:16:
+#define OF_CHECK_COUNTS(na, ns)	((na) > 0 && (na) <= OF_MAX_ADDR_CELLS && \
+			(ns) > 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: drivers/of/prom_parse.c:21:
+static int __of_address_to_resource(struct device_node *dev,
+		const u32 *addrp, u64 size, unsigned int flags,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#421: FILE: drivers/of/prom_parse.c:28:
+	printk("%s", s);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#423: FILE: drivers/of/prom_parse.c:30:
+		printk(KERN_INFO " %08x", *(addr++));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#424: FILE: drivers/of/prom_parse.c:31:
+	printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: drivers/of/prom_parse.c:43:
+	void		(*count_cells)(struct device_node *child,
+					int *addrc, int *sizec);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: drivers/of/prom_parse.c:45:
+	u64		(*map)(u32 *addr, const u32 *range,
+				int na, int ns, int pna);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: drivers/of/prom_parse.c:55:
+static void of_bus_default_count_cells(struct device_node *dev,
+					int *addrc, int *sizec)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: drivers/of/prom_parse.c:64:
+static u64 of_bus_default_map(u32 *addr, const u32 *range,
+		int na, int ns, int pna)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#465: FILE: drivers/of/prom_parse.c:72:
+	pr_debug("OF: default map, cp="PRu64", s="PRu64", da="PRu64"\n",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: drivers/of/prom_parse.c:73:
+	pr_debug("OF: default map, cp="PRu64", s="PRu64", da="PRu64"\n",
+		cp, s, da);

WARNING:LINE_SPACING: Missing a blank line after declarations
#476: FILE: drivers/of/prom_parse.c:83:
+	u64 a = of_read_number(addr, na);
+	memset(addr, 0, na * 4);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: drivers/of/prom_parse.c:109:
+static void of_bus_pci_count_cells(struct device_node *np,
+				int *addrc, int *sizec)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#523: FILE: drivers/of/prom_parse.c:130:
+	pr_debug("OF: PCI map, cp="PRu64", s="PRu64", da="PRu64"\n", cp, s, da);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: drivers/of/prom_parse.c:162:
+const u32 *of_get_pci_address(struct device_node *dev, int bar_no, u64 *size,
+			unsigned int *flags)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#565: FILE: drivers/of/prom_parse.c:172:
+	if (parent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prop"
#579: FILE: drivers/of/prom_parse.c:186:
+	if (prop == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: drivers/of/prom_parse.c:204:
+int of_pci_address_to_resource(struct device_node *dev, int bar,
+				struct resource *r)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addrp"
#604: FILE: drivers/of/prom_parse.c:211:
+	if (addrp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ppdev"
#649: FILE: drivers/of/prom_parse.c:256:
+		if (ppdev == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#651: FILE: drivers/of/prom_parse.c:258:
+			struct pci_controller *host;
+			host = pci_bus_to_host(pdev->bus);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ppnode"
#654: FILE: drivers/of/prom_parse.c:261:
+			if (ppnode == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#656: FILE: drivers/of/prom_parse.c:263:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#683: FILE: drivers/of/prom_parse.c:290:
+	laddr[1]  = laddr[2] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: drivers/of/prom_parse.c:306:
+static void of_bus_isa_count_cells(struct device_node *child,
+				int *addrc, int *sizec)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#720: FILE: drivers/of/prom_parse.c:327:
+	pr_debug("OF: ISA map, cp="PRu64", s="PRu64", da="PRu64"\n", cp, s, da);

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#787: FILE: drivers/of/prom_parse.c:394:
+	for (i = 0; i < ARRAY_SIZE(of_busses); i ++)
 	                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#790: FILE: drivers/of/prom_parse.c:397:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#795: FILE: drivers/of/prom_parse.c:402:
+static int of_translate_one(struct device_node *parent, struct of_bus *bus,
+			struct of_bus *pbus, u32 *addr,

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#809: FILE: drivers/of/prom_parse.c:416:
+	 * useable mapped devices below them. Thus we treat the absence of
 	   ^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#815: FILE: drivers/of/prom_parse.c:422:
+	ranges = of_get_property(parent, "ranges", (int *) &rlen);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ranges"
#816: FILE: drivers/of/prom_parse.c:423:
+	if (ranges == NULL || rlen == 0) {

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#841: FILE: drivers/of/prom_parse.c:448:
+	pr_debug("OF: with offset: "PRu64"\n", offset);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#872: FILE: drivers/of/prom_parse.c:479:
+	if (parent == NULL)

WARNING:TYPO_SPELLING: 'Cound' may be misspelled - perhaps 'Could'?
#876: FILE: drivers/of/prom_parse.c:483:
+	/* Cound address cells & copy address locally */
 	   ^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#879: FILE: drivers/of/prom_parse.c:486:
+		printk(KERN_ERR "prom_parse: Bad cell count for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#880: FILE: drivers/of/prom_parse.c:487:
+		printk(KERN_ERR "prom_parse: Bad cell count for %s\n",
+			dev->full_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#886: FILE: drivers/of/prom_parse.c:493:
+	pr_debug("OF: bus is %s (na=%d, ns=%d) on %s\n",
+		bus->name, na, ns, parent->full_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#897: FILE: drivers/of/prom_parse.c:504:
+		if (parent == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#907: FILE: drivers/of/prom_parse.c:514:
+			printk(KERN_ERR "prom_parse: Bad cell count for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#908: FILE: drivers/of/prom_parse.c:515:
+			printk(KERN_ERR "prom_parse: Bad cell count for %s\n",
+				dev->full_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#913: FILE: drivers/of/prom_parse.c:520:
+		pr_debug("OF: parent bus is %s (na=%d, ns=%d) on %s\n",
+			pbus->name, pna, pns, parent->full_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#935: FILE: drivers/of/prom_parse.c:542:
+const u32 *of_get_address(struct device_node *dev, int index, u64 *size,
+			unsigned int *flags)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#945: FILE: drivers/of/prom_parse.c:552:
+	if (parent == NULL)

CHECK:SPACING: No space is necessary after a cast
#954: FILE: drivers/of/prom_parse.c:561:
+	prop = of_get_property(dev, bus->addresses, (int *) &psize);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prop"
#955: FILE: drivers/of/prom_parse.c:562:
+	if (prop == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#973: FILE: drivers/of/prom_parse.c:580:
+static int __of_address_to_resource(struct device_node *dev, const u32 *addrp,
+				u64 size, unsigned int flags,

WARNING:LINE_SPACING: Missing a blank line after declarations
#986: FILE: drivers/of/prom_parse.c:593:
+		unsigned long port;
+		port = -1; /* pci_address_to_pio(taddr); */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1001: FILE: drivers/of/prom_parse.c:608:
+int of_address_to_resource(struct device_node *dev, int index,
+			struct resource *r)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addrp"
#1008: FILE: drivers/of/prom_parse.c:615:
+	if (addrp == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: drivers/of/prom_parse.c:622:
+void of_parse_dma_window(struct device_node *dn, const void *dma_window_prop,
+		unsigned long *busno, unsigned long *phys, unsigned long *size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1057: FILE: drivers/of/prom_parse.c:664:
+		if (parp == NULL)
[...]
+		else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parp"
#1057: FILE: drivers/of/prom_parse.c:664:
+		if (parp == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#1059: FILE: drivers/of/prom_parse.c:666:
+		else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!of_get_property"
#1067: FILE: drivers/of/prom_parse.c:674:
+	} while (p && of_get_property(p, "#interrupt-cells", NULL) == NULL);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1111: FILE: drivers/of/prom_parse.c:718:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1114: FILE: drivers/of/prom_parse.c:721:
+int of_irq_map_raw(struct device_node *parent, const u32 *intspec, u32 ointsize,
+		const u32 *addr, struct of_irq *out_irq)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'of_irq_map_raw', this function's name, in a string
#1121: FILE: drivers/of/prom_parse.c:728:
+	pr_debug("of_irq_map_raw: par=%s,intspec=[0x%08x 0x%08x...],"

WARNING:SPLIT_STRING: quoted string split across lines
#1122: FILE: drivers/of/prom_parse.c:729:
+	pr_debug("of_irq_map_raw: par=%s,intspec=[0x%08x 0x%08x...],"
+		"ointsize=%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp"
#1133: FILE: drivers/of/prom_parse.c:740:
+		if (tmp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ipar"
#1141: FILE: drivers/of/prom_parse.c:748:
+	if (ipar == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'of_irq_map_raw', this function's name, in a string
#1146: FILE: drivers/of/prom_parse.c:753:
+	pr_debug("of_irq_map_raw: ipar=%s, size=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1147: FILE: drivers/of/prom_parse.c:754:
+	pr_debug("of_irq_map_raw: ipar=%s, size=%d\n",
+			ipar->full_name, intsize);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#1161: FILE: drivers/of/prom_parse.c:768:
+	} while (old && tmp == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#1164: FILE: drivers/of/prom_parse.c:771:
+	addrsize = (tmp == NULL) ? 2 : *tmp;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ipar"
#1169: FILE: drivers/of/prom_parse.c:776:
+	while (ipar != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1177: FILE: drivers/of/prom_parse.c:784:
+			memcpy(out_irq->specifier, intspec,
+				intsize * sizeof(u32));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!imap"
#1187: FILE: drivers/of/prom_parse.c:794:
+		if (imap == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#1201: FILE: drivers/of/prom_parse.c:808:
+		if (addr == NULL && addrsize != 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1213: FILE: drivers/of/prom_parse.c:820:
+				u32 mask = imask ? imask[i] : 0xffffffffu;
+				match = ((addr[i] ^ imap[i]) & mask) == 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1217: FILE: drivers/of/prom_parse.c:824:
+				u32 mask = imask ? imask[i] : 0xffffffffu;
+				match =

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1218: FILE: drivers/of/prom_parse.c:825:
+					((intspec[i-addrsize] ^ imap[i])
 					           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newpar"
#1236: FILE: drivers/of/prom_parse.c:843:
+			if (newpar == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#1245: FILE: drivers/of/prom_parse.c:852:
+			if (tmp == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#1247: FILE: drivers/of/prom_parse.c:854:
+				pr_debug(" -> parent lacks "
+						"#interrupt-cells!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#1252: FILE: drivers/of/prom_parse.c:859:
+			newaddrsize = (tmp == NULL) ? 0 : *tmp;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1255: FILE: drivers/of/prom_parse.c:862:
+			pr_debug(" -> newintsize=%d, newaddrsize=%d\n",
+				newintsize, newaddrsize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1279: FILE: drivers/of/prom_parse.c:886:
+		pr_debug(" -> new parent: %s\n",
+				newpar ? newpar->full_name : "<>");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1294: FILE: drivers/of/prom_parse.c:901:
+int of_irq_map_one(struct device_node *device,
+			int index, struct of_irq *out_irq)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'of_irq_map_one', this function's name, in a string
#1301: FILE: drivers/of/prom_parse.c:908:
+	pr_debug("of_irq_map_one: dev=%s, index=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1302: FILE: drivers/of/prom_parse.c:909:
+	pr_debug("of_irq_map_one: dev=%s, index=%d\n",
+			device->full_name, index);

CHECK:SPACING: No space is necessary after a cast
#1305: FILE: drivers/of/prom_parse.c:912:
+	intspec = of_get_property(device, "interrupts", (int *) &intlen);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!intspec"
#1306: FILE: drivers/of/prom_parse.c:913:
+	if (intspec == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1317: FILE: drivers/of/prom_parse.c:924:
+	if (p == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#1322: FILE: drivers/of/prom_parse.c:929:
+	if (tmp == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1336: FILE: drivers/of/prom_parse.c:943:
+	res = of_irq_map_raw(p, intspec + index * intsize, intsize,
+				addr, out_irq);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1359: FILE: drivers/of/prom_parse.c:966:
+ * but is all zeros.
+*/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pp->length == 6'
#1365: FILE: drivers/of/prom_parse.c:972:
+	if (pp && (pp->length == 6) && is_valid_ether_addr(pp->value))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pp->length == 6'
#1369: FILE: drivers/of/prom_parse.c:976:
+	if (pp && (pp->length == 6) && is_valid_ether_addr(pp->value))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pp->length == 6'
#1373: FILE: drivers/of/prom_parse.c:980:
+	if (pp && (pp->length == 6) && is_valid_ether_addr(pp->value))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1399: FILE: drivers/of/prom_parse.c:1006:
+	 * resource and the irq are valid. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1401: FILE: drivers/of/prom_parse.c:1008:
+		r->start = r->end = irq;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1427: FILE: include/linux/of_device.h:27:
+extern struct of_device *of_device_alloc(struct device_node *np,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1431: FILE: include/linux/of_device.h:31:
+extern ssize_t of_device_get_modalias(struct of_device *ofdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1432: FILE: include/linux/of_device.h:32:
+extern ssize_t of_device_get_modalias(struct of_device *ofdev,
+					char *str, ssize_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1433: FILE: include/linux/of_device.h:33:
+extern int of_device_uevent(struct device *dev,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1450: FILE: include/linux/of_platform.h:66:
+}
+static inline void of_unregister_platform_driver(struct of_platform_driver *drv)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1456: FILE: include/linux/of_platform.h:72:
+extern struct of_device *of_platform_device_create(struct device_node *np,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1457: FILE: include/linux/of_platform.h:73:
+extern struct of_device *of_platform_device_create(struct device_node *np,
+						const char *bus_id,

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#1460: FILE: include/linux/of_platform.h:76:
+#define OF_NO_DEEP_PROBE ((struct of_device_id *)-1)

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1462: FILE: include/linux/of_platform.h:78:
+extern int of_platform_bus_probe(struct device_node *root,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1463: FILE: include/linux/of_platform.h:79:
+extern int of_platform_bus_probe(struct device_node *root,
+				const struct of_device_id *matches,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1466: FILE: include/linux/of_platform.h:82:
+extern struct of_device *of_find_device_by_phandle(phandle ph);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1468: FILE: include/linux/of_platform.h:84:
+extern void of_instantiate_rtc(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257627.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 32 warnings, 96 checks, 1387 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257627.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
