WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#171: FILE: kernel/time/timer_list.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#172: FILE: kernel/time/timer_list.c:2:
+ * kernel/time/timer_list.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#191: FILE: kernel/time/timer_list.c:21:
+#include <asm/uaccess.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#201: FILE: kernel/time/timer_list.c:31:
+#define SEQ_printf(m, x...)			\
+ do {						\
+	if (m)					\
+		seq_printf(m, x);		\
+	else					\
+		printk(x);			\
+ } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: kernel/time/timer_list.c:32:
+ do {^I^I^I^I^I^I\$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#206: FILE: kernel/time/timer_list.c:36:
+		printk(x);			\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: kernel/time/timer_list.c:37:
+ } while (0)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#212: FILE: kernel/time/timer_list.c:42:
+	char namebuf[KSYM_NAME_LEN+1];
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#243: FILE: kernel/time/timer_list.c:73:
+	SEQ_printf(m, " # expires at %Ld nsecs [in %Ld nsecs]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: kernel/time/timer_list.c:74:
+	SEQ_printf(m, " # expires at %Ld nsecs [in %Ld nsecs]\n",
+		(unsigned long long)ktime_to_ns(timer->expires),

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#272: FILE: kernel/time/timer_list.c:102:
+	if (curr) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: kernel/time/timer_list.c:118:
+	SEQ_printf(m, "  .index:      %d\n",
+			base->index);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#289: FILE: kernel/time/timer_list.c:119:
+	SEQ_printf(m, "  .resolution: %Ld nsecs\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: kernel/time/timer_list.c:120:
+	SEQ_printf(m, "  .resolution: %Ld nsecs\n",
+			(unsigned long long)ktime_to_ns(base->resolution));

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#295: FILE: kernel/time/timer_list.c:125:
+	SEQ_printf(m, "  .offset:     %Ld nsecs\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: kernel/time/timer_list.c:126:
+	SEQ_printf(m, "  .offset:     %Ld nsecs\n",
+			ktime_to_ns(base->offset));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#312: FILE: kernel/time/timer_list.c:142:
+#define P(x) \
+	SEQ_printf(m, "  .%-15s: %Ld\n", #x, (u64)(cpu_base->x))

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#313: FILE: kernel/time/timer_list.c:143:
+	SEQ_printf(m, "  .%-15s: %Ld\n", #x, (u64)(cpu_base->x))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#314: FILE: kernel/time/timer_list.c:144:
+#define P_ns(x) \
+	SEQ_printf(m, "  .%-15s: %Ld nsecs\n", #x, \
+		(u64)(ktime_to_ns(cpu_base->x)))

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#315: FILE: kernel/time/timer_list.c:145:
+	SEQ_printf(m, "  .%-15s: %Ld nsecs\n", #x, \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#327: FILE: kernel/time/timer_list.c:157:
+# define P(x) \
+	SEQ_printf(m, "  .%-15s: %Ld\n", #x, (u64)(ts->x))

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#328: FILE: kernel/time/timer_list.c:158:
+	SEQ_printf(m, "  .%-15s: %Ld\n", #x, (u64)(ts->x))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#329: FILE: kernel/time/timer_list.c:159:
+# define P_ns(x) \
+	SEQ_printf(m, "  .%-15s: %Ld nsecs\n", #x, \
+		(u64)(ktime_to_ns(ts->x)))

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#330: FILE: kernel/time/timer_list.c:160:
+	SEQ_printf(m, "  .%-15s: %Ld nsecs\n", #x, \

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: kernel/time/timer_list.c:164:
+		struct tick_sched *ts = tick_get_tick_sched(cpu);
+		P(nohz_mode);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#345: FILE: kernel/time/timer_list.c:175:
+		SEQ_printf(m, "jiffies: %Ld\n", (u64)jiffies);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#372: FILE: kernel/time/timer_list.c:202:
+	SEQ_printf(m, " next_event:     %Ld nsecs\n",

CHECK:SPACING: No space is necessary after a cast
#373: FILE: kernel/time/timer_list.c:203:
+		   (unsigned long long) ktime_to_ns(dev->next_event));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 19)
#402: FILE: kernel/time/timer_list.c:232:
+	for_each_online_cpu(cpu)
+		   print_tickdevice(m, tick_get_device(cpu));

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#417: FILE: kernel/time/timer_list.c:247:
+	SEQ_printf(m, "now at %Ld nsecs\n", (unsigned long long)now);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#433: FILE: kernel/time/timer_list.c:263:
+static int timer_list_open(struct inode *inode, struct file *filp)
                                                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#435: FILE: kernel/time/timer_list.c:265:
+	return single_open(filp, timer_list_show, NULL);
 	                   ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#438: FILE: kernel/time/timer_list.c:268:
+static struct file_operations timer_list_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#457: FILE: kernel/time/timer_list.c:287:
+__initcall(init_timer_list_procfs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#466: FILE: include/linux/tick.h:62:
+extern struct tick_device *tick_get_device(int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#475: FILE: include/linux/tick.h:74:
+extern struct tick_device *tick_get_broadcast_device(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#476: FILE: include/linux/tick.h:75:
+extern cpumask_t *tick_get_broadcast_mask(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#479: FILE: include/linux/tick.h:78:
+extern cpumask_t *tick_get_broadcast_oneshot_mask(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475251.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 22 warnings, 16 checks, 368 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475251.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
