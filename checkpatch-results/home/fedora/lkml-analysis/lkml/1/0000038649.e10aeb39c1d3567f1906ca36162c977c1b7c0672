WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#57: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: drivers/gpu/drm/ttm/ttm_lock.c:1:
+/**************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#94: FILE: drivers/gpu/drm/ttm/ttm_lock.c:33:
+#include <asm/atomic.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#100: FILE: drivers/gpu/drm/ttm/ttm_lock.c:39:
+#define TTM_WRITE_LOCK_PENDING    (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#101: FILE: drivers/gpu/drm/ttm/ttm_lock.c:40:
+#define TTM_VT_LOCK_PENDING       (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#102: FILE: drivers/gpu/drm/ttm/ttm_lock.c:41:
+#define TTM_SUSPEND_LOCK_PENDING  (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#103: FILE: drivers/gpu/drm/ttm/ttm_lock.c:42:
+#define TTM_VT_LOCK               (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#104: FILE: drivers/gpu/drm/ttm/ttm_lock.c:43:
+#define TTM_SUSPEND_LOCK          (1 << 4)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#193: FILE: drivers/gpu/drm/ttm/ttm_lock.c:132:
+		BUG_ON(locked);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#234: FILE: drivers/gpu/drm/ttm/ttm_lock.c:173:
+	if (interruptible) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#243: FILE: drivers/gpu/drm/ttm/ttm_lock.c:182:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#268: FILE: drivers/gpu/drm/ttm/ttm_lock.c:207:
+	printk(KERN_INFO TTM_PFX "vt unlock.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#281: FILE: drivers/gpu/drm/ttm/ttm_lock.c:220:
+	BUG_ON(ret != 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#306: FILE: drivers/gpu/drm/ttm/ttm_lock.c:245:
+	if (interruptible) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#316: FILE: drivers/gpu/drm/ttm/ttm_lock.c:255:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#327: FILE: drivers/gpu/drm/ttm/ttm_lock.c:266:
+	if (ret)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#329: FILE: drivers/gpu/drm/ttm/ttm_lock.c:268:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#331: FILE: drivers/gpu/drm/ttm/ttm_lock.c:270:
+		printk(KERN_INFO TTM_PFX "vt lock.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#379: FILE: include/drm/ttm/ttm_lock.h:1:
+/**************************************************************************

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#432: FILE: include/drm/ttm/ttm_lock.h:54:
+#include <asm/atomic.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#450: FILE: include/drm/ttm/ttm_lock.h:72:
+	spinlock_t lock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#451: FILE: include/drm/ttm/ttm_lock.h:73:
+	int32_t rw;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#452: FILE: include/drm/ttm/ttm_lock.h:74:
+	uint32_t flags;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#458: FILE: include/drm/ttm/ttm_lock.h:80:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#465: FILE: include/drm/ttm/ttm_lock.h:87:
+extern void ttm_lock_init(struct ttm_lock *lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#474: FILE: include/drm/ttm/ttm_lock.h:96:
+extern void ttm_read_unlock(struct ttm_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#486: FILE: include/drm/ttm/ttm_lock.h:108:
+extern int ttm_read_lock(struct ttm_lock *lock, bool interruptible);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#503: FILE: include/drm/ttm/ttm_lock.h:125:
+extern int ttm_read_trylock(struct ttm_lock *lock, bool interruptible);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#512: FILE: include/drm/ttm/ttm_lock.h:134:
+extern void ttm_write_unlock(struct ttm_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#524: FILE: include/drm/ttm/ttm_lock.h:146:
+extern int ttm_write_lock(struct ttm_lock *lock, bool interruptible);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#533: FILE: include/drm/ttm/ttm_lock.h:155:
+extern void ttm_lock_downgrade(struct ttm_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#542: FILE: include/drm/ttm/ttm_lock.h:164:
+extern void ttm_suspend_lock(struct ttm_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#551: FILE: include/drm/ttm/ttm_lock.h:173:
+extern void ttm_suspend_unlock(struct ttm_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#565: FILE: include/drm/ttm/ttm_lock.h:187:
+extern int ttm_vt_lock(struct ttm_lock *lock, bool interruptible,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#577: FILE: include/drm/ttm/ttm_lock.h:199:
+extern int ttm_vt_unlock(struct ttm_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#586: FILE: include/drm/ttm/ttm_lock.h:208:
+extern void ttm_write_unlock(struct ttm_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#598: FILE: include/drm/ttm/ttm_lock.h:220:
+extern int ttm_write_lock(struct ttm_lock *lock, bool interruptible);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000038649.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 28 checks, 565 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000038649.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
