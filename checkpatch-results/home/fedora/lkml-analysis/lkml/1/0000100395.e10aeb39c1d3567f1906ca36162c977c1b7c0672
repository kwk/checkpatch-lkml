WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#62: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#67: FILE: arch/arm/mach-bcmring/include/csp/intcHw.h:1:
+/*****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#68: FILE: arch/arm/mach-bcmring/include/csp/intcHw.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#81: FILE: arch/arm/mach-bcmring/include/csp/intcHw.h:15:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#84: FILE: arch/arm/mach-bcmring/include/csp/intcHw.h:18:
+/**
+*  @file    intcHw.h

CHECK:CAMELCASE: Avoid CamelCase: <intcHw_irq_disable>
#102: FILE: arch/arm/mach-bcmring/include/csp/intcHw.h:36:
+static inline void intcHw_irq_disable(void *basep, uint32_t mask);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <intcHw_irq_enable>
#103: FILE: arch/arm/mach-bcmring/include/csp/intcHw.h:37:
+static inline void intcHw_irq_enable(void *basep, uint32_t mask);

CHECK:CAMELCASE: Avoid CamelCase: <intcHw_irq_type>
#104: FILE: arch/arm/mach-bcmring/include/csp/intcHw.h:38:
+static inline void intcHw_irq_type(void *basep, uint32_t mask);

CHECK:CAMELCASE: Avoid CamelCase: <intcHw_rawstatus>
#105: FILE: arch/arm/mach-bcmring/include/csp/intcHw.h:39:
+static inline uint32_t intcHw_rawstatus(void *basep);

CHECK:CAMELCASE: Avoid CamelCase: <intcHw_irq_status>
#106: FILE: arch/arm/mach-bcmring/include/csp/intcHw.h:40:
+static inline uint32_t intcHw_irq_status(void *basep);

CHECK:CAMELCASE: Avoid CamelCase: <intcHw_fiq_status>
#107: FILE: arch/arm/mach-bcmring/include/csp/intcHw.h:41:
+static inline uint32_t intcHw_fiq_status(void *basep);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#109: FILE: arch/arm/mach-bcmring/include/csp/intcHw.h:43:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#118: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#119: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#134: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:17:
+/**
+*  @file    intcHw_reg.h

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#195: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:78:
+#define INTCHW_INTC0_PIF                  (1<<INTCHW_INTC0_PIF_BITNUM)
                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#195: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:78:
+#define INTCHW_INTC0_PIF                  (1<<INTCHW_INTC0_PIF_BITNUM)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#196: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:79:
+#define INTCHW_INTC0_CLCD                 (1<<INTCHW_INTC0_CLCD_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#196: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:79:
+#define INTCHW_INTC0_CLCD                 (1<<INTCHW_INTC0_CLCD_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#197: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:80:
+#define INTCHW_INTC0_GE                   (1<<INTCHW_INTC0_GE_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#197: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:80:
+#define INTCHW_INTC0_GE                   (1<<INTCHW_INTC0_GE_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#198: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:81:
+#define INTCHW_INTC0_APM                  (1<<INTCHW_INTC0_APM_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#198: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:81:
+#define INTCHW_INTC0_APM                  (1<<INTCHW_INTC0_APM_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#199: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:82:
+#define INTCHW_INTC0_ESW                  (1<<INTCHW_INTC0_ESW_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#199: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:82:
+#define INTCHW_INTC0_ESW                  (1<<INTCHW_INTC0_ESW_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#200: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:83:
+#define INTCHW_INTC0_SPIH                 (1<<INTCHW_INTC0_SPIH_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#200: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:83:
+#define INTCHW_INTC0_SPIH                 (1<<INTCHW_INTC0_SPIH_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#201: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:84:
+#define INTCHW_INTC0_TIMER3               (1<<INTCHW_INTC0_TIMER3_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#201: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:84:
+#define INTCHW_INTC0_TIMER3               (1<<INTCHW_INTC0_TIMER3_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#202: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:85:
+#define INTCHW_INTC0_TIMER2               (1<<INTCHW_INTC0_TIMER2_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#202: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:85:
+#define INTCHW_INTC0_TIMER2               (1<<INTCHW_INTC0_TIMER2_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#203: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:86:
+#define INTCHW_INTC0_TIMER1               (1<<INTCHW_INTC0_TIMER1_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#203: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:86:
+#define INTCHW_INTC0_TIMER1               (1<<INTCHW_INTC0_TIMER1_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#204: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:87:
+#define INTCHW_INTC0_TIMER0               (1<<INTCHW_INTC0_TIMER0_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#204: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:87:
+#define INTCHW_INTC0_TIMER0               (1<<INTCHW_INTC0_TIMER0_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#205: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:88:
+#define INTCHW_INTC0_SDIOH1               (1<<INTCHW_INTC0_SDIOH1_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#205: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:88:
+#define INTCHW_INTC0_SDIOH1               (1<<INTCHW_INTC0_SDIOH1_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#206: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:89:
+#define INTCHW_INTC0_SDIOH0               (1<<INTCHW_INTC0_SDIOH0_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#206: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:89:
+#define INTCHW_INTC0_SDIOH0               (1<<INTCHW_INTC0_SDIOH0_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#207: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:90:
+#define INTCHW_INTC0_USBD                 (1<<INTCHW_INTC0_USBD_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#207: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:90:
+#define INTCHW_INTC0_USBD                 (1<<INTCHW_INTC0_USBD_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#208: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:91:
+#define INTCHW_INTC0_USBH1                (1<<INTCHW_INTC0_USBH1_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#208: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:91:
+#define INTCHW_INTC0_USBH1                (1<<INTCHW_INTC0_USBH1_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#209: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:92:
+#define INTCHW_INTC0_USBHD2               (1<<INTCHW_INTC0_USBHD2_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#209: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:92:
+#define INTCHW_INTC0_USBHD2               (1<<INTCHW_INTC0_USBHD2_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#210: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:93:
+#define INTCHW_INTC0_VPM                  (1<<INTCHW_INTC0_VPM_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#210: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:93:
+#define INTCHW_INTC0_VPM                  (1<<INTCHW_INTC0_VPM_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#211: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:94:
+#define INTCHW_INTC0_DMA1C7               (1<<INTCHW_INTC0_DMA1C7_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#211: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:94:
+#define INTCHW_INTC0_DMA1C7               (1<<INTCHW_INTC0_DMA1C7_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#212: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:95:
+#define INTCHW_INTC0_DMA1C6               (1<<INTCHW_INTC0_DMA1C6_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#212: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:95:
+#define INTCHW_INTC0_DMA1C6               (1<<INTCHW_INTC0_DMA1C6_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#213: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:96:
+#define INTCHW_INTC0_DMA1C5               (1<<INTCHW_INTC0_DMA1C5_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#213: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:96:
+#define INTCHW_INTC0_DMA1C5               (1<<INTCHW_INTC0_DMA1C5_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#214: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:97:
+#define INTCHW_INTC0_DMA1C4               (1<<INTCHW_INTC0_DMA1C4_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#214: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:97:
+#define INTCHW_INTC0_DMA1C4               (1<<INTCHW_INTC0_DMA1C4_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#215: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:98:
+#define INTCHW_INTC0_DMA1C3               (1<<INTCHW_INTC0_DMA1C3_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#215: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:98:
+#define INTCHW_INTC0_DMA1C3               (1<<INTCHW_INTC0_DMA1C3_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#216: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:99:
+#define INTCHW_INTC0_DMA1C2               (1<<INTCHW_INTC0_DMA1C2_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#216: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:99:
+#define INTCHW_INTC0_DMA1C2               (1<<INTCHW_INTC0_DMA1C2_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#217: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:100:
+#define INTCHW_INTC0_DMA1C1               (1<<INTCHW_INTC0_DMA1C1_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#217: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:100:
+#define INTCHW_INTC0_DMA1C1               (1<<INTCHW_INTC0_DMA1C1_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#218: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:101:
+#define INTCHW_INTC0_DMA1C0               (1<<INTCHW_INTC0_DMA1C0_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#218: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:101:
+#define INTCHW_INTC0_DMA1C0               (1<<INTCHW_INTC0_DMA1C0_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#219: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:102:
+#define INTCHW_INTC0_DMA0C7               (1<<INTCHW_INTC0_DMA0C7_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#219: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:102:
+#define INTCHW_INTC0_DMA0C7               (1<<INTCHW_INTC0_DMA0C7_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#220: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:103:
+#define INTCHW_INTC0_DMA0C6               (1<<INTCHW_INTC0_DMA0C6_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#220: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:103:
+#define INTCHW_INTC0_DMA0C6               (1<<INTCHW_INTC0_DMA0C6_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#221: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:104:
+#define INTCHW_INTC0_DMA0C5               (1<<INTCHW_INTC0_DMA0C5_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#221: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:104:
+#define INTCHW_INTC0_DMA0C5               (1<<INTCHW_INTC0_DMA0C5_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#222: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:105:
+#define INTCHW_INTC0_DMA0C4               (1<<INTCHW_INTC0_DMA0C4_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#222: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:105:
+#define INTCHW_INTC0_DMA0C4               (1<<INTCHW_INTC0_DMA0C4_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#223: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:106:
+#define INTCHW_INTC0_DMA0C3               (1<<INTCHW_INTC0_DMA0C3_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#223: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:106:
+#define INTCHW_INTC0_DMA0C3               (1<<INTCHW_INTC0_DMA0C3_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#224: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:107:
+#define INTCHW_INTC0_DMA0C2               (1<<INTCHW_INTC0_DMA0C2_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#224: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:107:
+#define INTCHW_INTC0_DMA0C2               (1<<INTCHW_INTC0_DMA0C2_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#225: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:108:
+#define INTCHW_INTC0_DMA0C1               (1<<INTCHW_INTC0_DMA0C1_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#225: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:108:
+#define INTCHW_INTC0_DMA0C1               (1<<INTCHW_INTC0_DMA0C1_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#226: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:109:
+#define INTCHW_INTC0_DMA0C0               (1<<INTCHW_INTC0_DMA0C0_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#226: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:109:
+#define INTCHW_INTC0_DMA0C0               (1<<INTCHW_INTC0_DMA0C0_BITNUM)

WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#229: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:112:
+#define INTCHW_INTC1_DDRVPMP_BITNUM       27   /* DDR and VPM PLL clock phase relationship interupt (Not for A0) */
                                                                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#229: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:112:
+#define INTCHW_INTC1_DDRVPMP_BITNUM       27   /* DDR and VPM PLL clock phase relationship interupt (Not for A0) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#230: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:113:
+#define INTCHW_INTC1_DDRVPMT_BITNUM       26   /* DDR and VPM HW phase align timeout interrupt (Not for A0) */

WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#231: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:114:
+#define INTCHW_INTC1_DDRP_BITNUM          26   /* DDR and PLL clock phase relationship interupt (For A0 only)) */
                                                                                        ^^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#231: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:114:
+#define INTCHW_INTC1_DDRP_BITNUM          26   /* DDR and PLL clock phase relationship interupt (For A0 only)) */

WARNING:TYPO_SPELLING: 'parition' may be misspelled - perhaps 'partition'?
#239: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:122:
+#define INTCHW_INTC1_FMPU_BITNUM          19   /* Flash memory parition unit interrupt */
                                                                ^^^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#261: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:144:
+#define INTCHW_INTC1_DDRVPMT              (1<<INTCHW_INTC1_DDRVPMT_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#261: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:144:
+#define INTCHW_INTC1_DDRVPMT              (1<<INTCHW_INTC1_DDRVPMT_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#262: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:145:
+#define INTCHW_INTC1_DDRVPMP              (1<<INTCHW_INTC1_DDRVPMP_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#262: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:145:
+#define INTCHW_INTC1_DDRVPMP              (1<<INTCHW_INTC1_DDRVPMP_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#263: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:146:
+#define INTCHW_INTC1_DDRP                 (1<<INTCHW_INTC1_DDRP_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#263: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:146:
+#define INTCHW_INTC1_DDRP                 (1<<INTCHW_INTC1_DDRP_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#264: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:147:
+#define INTCHW_INTC1_VDEC                 (1<<INTCHW_INTC1_VDEC_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#264: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:147:
+#define INTCHW_INTC1_VDEC                 (1<<INTCHW_INTC1_VDEC_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#265: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:148:
+#define INTCHW_INTC1_SPUM                 (1<<INTCHW_INTC1_SPUM_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#265: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:148:
+#define INTCHW_INTC1_SPUM                 (1<<INTCHW_INTC1_SPUM_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#266: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:149:
+#define INTCHW_INTC1_RTC2                 (1<<INTCHW_INTC1_RTC2_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#266: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:149:
+#define INTCHW_INTC1_RTC2                 (1<<INTCHW_INTC1_RTC2_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#267: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:150:
+#define INTCHW_INTC1_RTC1                 (1<<INTCHW_INTC1_RTC1_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#267: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:150:
+#define INTCHW_INTC1_RTC1                 (1<<INTCHW_INTC1_RTC1_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#268: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:151:
+#define INTCHW_INTC1_RTC0                 (1<<INTCHW_INTC1_RTC0_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#268: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:151:
+#define INTCHW_INTC1_RTC0                 (1<<INTCHW_INTC1_RTC0_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#269: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:152:
+#define INTCHW_INTC1_RNG                  (1<<INTCHW_INTC1_RNG_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#269: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:152:
+#define INTCHW_INTC1_RNG                  (1<<INTCHW_INTC1_RNG_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#270: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:153:
+#define INTCHW_INTC1_FMPU                 (1<<INTCHW_INTC1_FMPU_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#270: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:153:
+#define INTCHW_INTC1_FMPU                 (1<<INTCHW_INTC1_FMPU_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#271: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:154:
+#define INTCHW_INTC1_IMPU                 (1<<INTCHW_INTC1_IMPU_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#271: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:154:
+#define INTCHW_INTC1_IMPU                 (1<<INTCHW_INTC1_IMPU_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#272: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:155:
+#define INTCHW_INTC1_DMPU                 (1<<INTCHW_INTC1_DMPU_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#272: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:155:
+#define INTCHW_INTC1_DMPU                 (1<<INTCHW_INTC1_DMPU_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#273: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:156:
+#define INTCHW_INTC1_KEYC                 (1<<INTCHW_INTC1_KEYC_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#273: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:156:
+#define INTCHW_INTC1_KEYC                 (1<<INTCHW_INTC1_KEYC_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#274: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:157:
+#define INTCHW_INTC1_TSC                  (1<<INTCHW_INTC1_TSC_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#274: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:157:
+#define INTCHW_INTC1_TSC                  (1<<INTCHW_INTC1_TSC_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#275: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:158:
+#define INTCHW_INTC1_UART0                (1<<INTCHW_INTC1_UART0_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#275: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:158:
+#define INTCHW_INTC1_UART0                (1<<INTCHW_INTC1_UART0_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#276: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:159:
+#define INTCHW_INTC1_WDOG                 (1<<INTCHW_INTC1_WDOG_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#276: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:159:
+#define INTCHW_INTC1_WDOG                 (1<<INTCHW_INTC1_WDOG_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#277: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:160:
+#define INTCHW_INTC1_UART1                (1<<INTCHW_INTC1_UART1_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#277: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:160:
+#define INTCHW_INTC1_UART1                (1<<INTCHW_INTC1_UART1_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#278: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:161:
+#define INTCHW_INTC1_PMUIRQ               (1<<INTCHW_INTC1_PMUIRQ_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#278: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:161:
+#define INTCHW_INTC1_PMUIRQ               (1<<INTCHW_INTC1_PMUIRQ_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#279: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:162:
+#define INTCHW_INTC1_COMMRX               (1<<INTCHW_INTC1_COMMRX_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#279: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:162:
+#define INTCHW_INTC1_COMMRX               (1<<INTCHW_INTC1_COMMRX_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#280: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:163:
+#define INTCHW_INTC1_COMMTX               (1<<INTCHW_INTC1_COMMTX_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#280: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:163:
+#define INTCHW_INTC1_COMMTX               (1<<INTCHW_INTC1_COMMTX_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#281: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:164:
+#define INTCHW_INTC1_FLASHC               (1<<INTCHW_INTC1_FLASHC_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#281: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:164:
+#define INTCHW_INTC1_FLASHC               (1<<INTCHW_INTC1_FLASHC_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#282: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:165:
+#define INTCHW_INTC1_GPHY                 (1<<INTCHW_INTC1_GPHY_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#282: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:165:
+#define INTCHW_INTC1_GPHY                 (1<<INTCHW_INTC1_GPHY_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#283: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:166:
+#define INTCHW_INTC1_SPIS                 (1<<INTCHW_INTC1_SPIS_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#283: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:166:
+#define INTCHW_INTC1_SPIS                 (1<<INTCHW_INTC1_SPIS_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#284: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:167:
+#define INTCHW_INTC1_I2CS                 (1<<INTCHW_INTC1_I2CS_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#284: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:167:
+#define INTCHW_INTC1_I2CS                 (1<<INTCHW_INTC1_I2CS_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#285: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:168:
+#define INTCHW_INTC1_I2CH                 (1<<INTCHW_INTC1_I2CH_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#285: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:168:
+#define INTCHW_INTC1_I2CH                 (1<<INTCHW_INTC1_I2CH_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#286: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:169:
+#define INTCHW_INTC1_I2S1                 (1<<INTCHW_INTC1_I2S1_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#286: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:169:
+#define INTCHW_INTC1_I2S1                 (1<<INTCHW_INTC1_I2S1_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#287: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:170:
+#define INTCHW_INTC1_I2S0                 (1<<INTCHW_INTC1_I2S0_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#287: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:170:
+#define INTCHW_INTC1_I2S0                 (1<<INTCHW_INTC1_I2S0_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#288: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:171:
+#define INTCHW_INTC1_GPIO1                (1<<INTCHW_INTC1_GPIO1_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#288: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:171:
+#define INTCHW_INTC1_GPIO1                (1<<INTCHW_INTC1_GPIO1_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#289: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:172:
+#define INTCHW_INTC1_GPIO0                (1<<INTCHW_INTC1_GPIO0_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#289: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:172:
+#define INTCHW_INTC1_GPIO0                (1<<INTCHW_INTC1_GPIO0_BITNUM)

WARNING:TYPO_SPELLING: 'parition' may be misspelled - perhaps 'partition'?
#301: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:184:
+#define INTCHW_SINTC_FMPU_BITNUM           6   /* Flash memory parition unit interrupt */
                                                                ^^^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#309: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:192:
+#define INTCHW_SINTC_TIMER3               (1<<INTCHW_SINTC_TIMER3_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#309: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:192:
+#define INTCHW_SINTC_TIMER3               (1<<INTCHW_SINTC_TIMER3_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#310: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:193:
+#define INTCHW_SINTC_TIMER2               (1<<INTCHW_SINTC_TIMER2_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#310: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:193:
+#define INTCHW_SINTC_TIMER2               (1<<INTCHW_SINTC_TIMER2_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#311: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:194:
+#define INTCHW_SINTC_TIMER1               (1<<INTCHW_SINTC_TIMER1_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#311: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:194:
+#define INTCHW_SINTC_TIMER1               (1<<INTCHW_SINTC_TIMER1_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#312: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:195:
+#define INTCHW_SINTC_TIMER0               (1<<INTCHW_SINTC_TIMER0_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#312: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:195:
+#define INTCHW_SINTC_TIMER0               (1<<INTCHW_SINTC_TIMER0_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#313: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:196:
+#define INTCHW_SINTC_SPUM                 (1<<INTCHW_SINTC_SPUM_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#313: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:196:
+#define INTCHW_SINTC_SPUM                 (1<<INTCHW_SINTC_SPUM_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#314: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:197:
+#define INTCHW_SINTC_RTC2                 (1<<INTCHW_SINTC_RTC2_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#314: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:197:
+#define INTCHW_SINTC_RTC2                 (1<<INTCHW_SINTC_RTC2_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#315: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:198:
+#define INTCHW_SINTC_RTC1                 (1<<INTCHW_SINTC_RTC1_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#315: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:198:
+#define INTCHW_SINTC_RTC1                 (1<<INTCHW_SINTC_RTC1_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#316: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:199:
+#define INTCHW_SINTC_RTC0                 (1<<INTCHW_SINTC_RTC0_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#316: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:199:
+#define INTCHW_SINTC_RTC0                 (1<<INTCHW_SINTC_RTC0_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#317: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:200:
+#define INTCHW_SINTC_RNG                  (1<<INTCHW_SINTC_RNG_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#317: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:200:
+#define INTCHW_SINTC_RNG                  (1<<INTCHW_SINTC_RNG_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#318: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:201:
+#define INTCHW_SINTC_FMPU                 (1<<INTCHW_SINTC_FMPU_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#318: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:201:
+#define INTCHW_SINTC_FMPU                 (1<<INTCHW_SINTC_FMPU_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#319: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:202:
+#define INTCHW_SINTC_IMPU                 (1<<INTCHW_SINTC_IMPU_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#319: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:202:
+#define INTCHW_SINTC_IMPU                 (1<<INTCHW_SINTC_IMPU_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#320: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:203:
+#define INTCHW_SINTC_DMPU                 (1<<INTCHW_SINTC_DMPU_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#320: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:203:
+#define INTCHW_SINTC_DMPU                 (1<<INTCHW_SINTC_DMPU_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#321: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:204:
+#define INTCHW_SINTC_KEYC                 (1<<INTCHW_SINTC_KEYC_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#321: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:204:
+#define INTCHW_SINTC_KEYC                 (1<<INTCHW_SINTC_KEYC_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#322: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:205:
+#define INTCHW_SINTC_TSC                  (1<<INTCHW_SINTC_TSC_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#322: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:205:
+#define INTCHW_SINTC_TSC                  (1<<INTCHW_SINTC_TSC_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#323: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:206:
+#define INTCHW_SINTC_UART0                (1<<INTCHW_SINTC_UART0_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#323: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:206:
+#define INTCHW_SINTC_UART0                (1<<INTCHW_SINTC_UART0_BITNUM)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#324: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:207:
+#define INTCHW_SINTC_WDOG                 (1<<INTCHW_SINTC_WDOG_BITNUM)
                                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#324: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:207:
+#define INTCHW_SINTC_WDOG                 (1<<INTCHW_SINTC_WDOG_BITNUM)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:237:
+       __REG32(basep + INTCHW_INTENCLEAR) = mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:243:
+       __REG32(basep + INTCHW_INTENABLE) = mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:249:
+       __REG32(basep + INTCHW_INTSELECT) = mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:255:
+       return __REG32(basep + INTCHW_RAWINTR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:261:
+       return __REG32(basep + INTCHW_IRQSTATUS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: arch/arm/mach-bcmring/include/mach/csp/intcHw_reg.h:267:
+       return __REG32(basep + INTCHW_FIQSTATUS);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#394: FILE: arch/arm/mach-bcmring/irq.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#409: FILE: arch/arm/mach-bcmring/irq.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#410: FILE: arch/arm/mach-bcmring/irq.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#419: FILE: arch/arm/mach-bcmring/irq.c:26:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: arch/arm/mach-bcmring/irq.c:35:
+       writel(1 << (irq - IRQ_INTC0_START),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: arch/arm/mach-bcmring/irq.c:36:
+              MM_IO_BASE_INTC0 + INTCHW_INTENCLEAR);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: arch/arm/mach-bcmring/irq.c:36:
+              MM_IO_BASE_INTC0 + INTCHW_INTENCLEAR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: arch/arm/mach-bcmring/irq.c:41:
+       writel(1 << (irq - IRQ_INTC0_START),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: arch/arm/mach-bcmring/irq.c:42:
+              MM_IO_BASE_INTC0 + INTCHW_INTENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: arch/arm/mach-bcmring/irq.c:42:
+              MM_IO_BASE_INTC0 + INTCHW_INTENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: arch/arm/mach-bcmring/irq.c:47:
+       writel(1 << (irq - IRQ_INTC1_START),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: arch/arm/mach-bcmring/irq.c:48:
+              MM_IO_BASE_INTC1 + INTCHW_INTENCLEAR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: arch/arm/mach-bcmring/irq.c:48:
+              MM_IO_BASE_INTC1 + INTCHW_INTENCLEAR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: arch/arm/mach-bcmring/irq.c:53:
+       writel(1 << (irq - IRQ_INTC1_START),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: arch/arm/mach-bcmring/irq.c:54:
+              MM_IO_BASE_INTC1 + INTCHW_INTENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: arch/arm/mach-bcmring/irq.c:54:
+              MM_IO_BASE_INTC1 + INTCHW_INTENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: arch/arm/mach-bcmring/irq.c:59:
+       writel(1 << (irq - IRQ_SINTC_START),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: arch/arm/mach-bcmring/irq.c:60:
+              MM_IO_BASE_SINTC + INTCHW_INTENCLEAR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: arch/arm/mach-bcmring/irq.c:60:
+              MM_IO_BASE_SINTC + INTCHW_INTENCLEAR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: arch/arm/mach-bcmring/irq.c:65:
+       writel(1 << (irq - IRQ_SINTC_START),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#459: FILE: arch/arm/mach-bcmring/irq.c:66:
+              MM_IO_BASE_SINTC + INTCHW_INTENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: arch/arm/mach-bcmring/irq.c:66:
+              MM_IO_BASE_SINTC + INTCHW_INTENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: arch/arm/mach-bcmring/irq.c:70:
+       .typename = "ARM-INTC0",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: arch/arm/mach-bcmring/irq.c:71:
+       .ack = bcmring_mask_irq0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: arch/arm/mach-bcmring/irq.c:72:
+       .mask = bcmring_mask_irq0,      /* mask a specific interrupt, blocking its delivery. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: arch/arm/mach-bcmring/irq.c:73:
+       .unmask = bcmring_unmask_irq0,  /* unmaks an interrupt */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: arch/arm/mach-bcmring/irq.c:77:
+       .typename = "ARM-INTC1",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: arch/arm/mach-bcmring/irq.c:78:
+       .ack = bcmring_mask_irq1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: arch/arm/mach-bcmring/irq.c:79:
+       .mask = bcmring_mask_irq1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: arch/arm/mach-bcmring/irq.c:80:
+       .unmask = bcmring_unmask_irq1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: arch/arm/mach-bcmring/irq.c:84:
+       .typename = "ARM-SINTC",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: arch/arm/mach-bcmring/irq.c:85:
+       .ack = bcmring_mask_irq2,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: arch/arm/mach-bcmring/irq.c:86:
+       .mask = bcmring_mask_irq2,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: arch/arm/mach-bcmring/irq.c:87:
+       .unmask = bcmring_unmask_irq2,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: arch/arm/mach-bcmring/irq.c:91:
+                    unsigned int irq_start, unsigned int vic_sources)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: arch/arm/mach-bcmring/irq.c:91:
+static void vic_init(void __iomem *base, struct irq_chip *chip,
+                    unsigned int irq_start, unsigned int vic_sources)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: arch/arm/mach-bcmring/irq.c:91:
+                    unsigned int irq_start, unsigned int vic_sources)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: arch/arm/mach-bcmring/irq.c:93:
+       unsigned int i;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: arch/arm/mach-bcmring/irq.c:94:
+       unsigned int i;
+       for (i = 0; i < 32; i++) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: arch/arm/mach-bcmring/irq.c:94:
+       for (i = 0; i < 32; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#487: FILE: arch/arm/mach-bcmring/irq.c:94:
+       for (i = 0; i < 32; i++) {
+               unsigned int irq = irq_start + i;

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: arch/arm/mach-bcmring/irq.c:95:
+               unsigned int irq = irq_start + i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: arch/arm/mach-bcmring/irq.c:95:
+               unsigned int irq = irq_start + i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#489: FILE: arch/arm/mach-bcmring/irq.c:96:
+               set_irq_chip(irq, chip);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#489: FILE: arch/arm/mach-bcmring/irq.c:96:
+               unsigned int irq = irq_start + i;
+               set_irq_chip(irq, chip);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: arch/arm/mach-bcmring/irq.c:96:
+               set_irq_chip(irq, chip);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: arch/arm/mach-bcmring/irq.c:97:
+               set_irq_chip_data(irq, base);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: arch/arm/mach-bcmring/irq.c:97:
+               set_irq_chip_data(irq, base);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: arch/arm/mach-bcmring/irq.c:99:
+               if (vic_sources & (1 << i)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: arch/arm/mach-bcmring/irq.c:99:
+               if (vic_sources & (1 << i)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#492: FILE: arch/arm/mach-bcmring/irq.c:99:
+               if (vic_sources & (1 << i)) {
+                       set_irq_handler(irq, handle_level_irq);

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: arch/arm/mach-bcmring/irq.c:100:
+                       set_irq_handler(irq, handle_level_irq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: arch/arm/mach-bcmring/irq.c:100:
+                       set_irq_handler(irq, handle_level_irq);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#494: FILE: arch/arm/mach-bcmring/irq.c:101:
+                       set_irq_flags(irq, IRQF_VALID | IRQF_PROBE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: arch/arm/mach-bcmring/irq.c:101:
+                       set_irq_flags(irq, IRQF_VALID | IRQF_PROBE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#495: FILE: arch/arm/mach-bcmring/irq.c:102:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: arch/arm/mach-bcmring/irq.c:102:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: arch/arm/mach-bcmring/irq.c:103:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: arch/arm/mach-bcmring/irq.c:104:
+       writel(0, base + INTCHW_INTSELECT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: arch/arm/mach-bcmring/irq.c:105:
+       writel(0, base + INTCHW_INTENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: arch/arm/mach-bcmring/irq.c:106:
+       writel(~0, base + INTCHW_INTENCLEAR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: arch/arm/mach-bcmring/irq.c:107:
+       writel(0, base + INTCHW_IRQSTATUS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: arch/arm/mach-bcmring/irq.c:108:
+       writel(~0, base + INTCHW_SOFTINTCLEAR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: arch/arm/mach-bcmring/irq.c:113:
+       vic_init((void __iomem *)MM_IO_BASE_INTC0, &bcmring_irq0_chip,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#507: FILE: arch/arm/mach-bcmring/irq.c:114:
+                IRQ_INTC0_START, IRQ_INTC0_VALID_MASK);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: arch/arm/mach-bcmring/irq.c:114:
+                IRQ_INTC0_START, IRQ_INTC0_VALID_MASK);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: arch/arm/mach-bcmring/irq.c:115:
+       vic_init((void __iomem *)MM_IO_BASE_INTC1, &bcmring_irq1_chip,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#509: FILE: arch/arm/mach-bcmring/irq.c:116:
+                IRQ_INTC1_START, IRQ_INTC1_VALID_MASK);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: arch/arm/mach-bcmring/irq.c:116:
+                IRQ_INTC1_START, IRQ_INTC1_VALID_MASK);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: arch/arm/mach-bcmring/irq.c:117:
+       vic_init((void __iomem *)MM_IO_BASE_SINTC, &bcmring_irq2_chip,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#511: FILE: arch/arm/mach-bcmring/irq.c:118:
+                IRQ_SINTC_START, IRQ_SINTC_VALID_MASK);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: arch/arm/mach-bcmring/irq.c:118:
+                IRQ_SINTC_START, IRQ_SINTC_VALID_MASK);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: arch/arm/mach-bcmring/irq.c:121:
+       if (INTCHW_INTC1_GPIO0 & IRQ_INTC1_VALID_MASK) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#514: FILE: arch/arm/mach-bcmring/irq.c:121:
+       if (INTCHW_INTC1_GPIO0 & IRQ_INTC1_VALID_MASK) {
+               set_irq_handler(IRQ_GPIO0, handle_simple_irq);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#514: FILE: arch/arm/mach-bcmring/irq.c:121:
+       if (INTCHW_INTC1_GPIO0 & IRQ_INTC1_VALID_MASK) {
+               set_irq_handler(IRQ_GPIO0, handle_simple_irq);
+       }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#515: FILE: arch/arm/mach-bcmring/irq.c:122:
+               set_irq_handler(IRQ_GPIO0, handle_simple_irq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: arch/arm/mach-bcmring/irq.c:122:
+               set_irq_handler(IRQ_GPIO0, handle_simple_irq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: arch/arm/mach-bcmring/irq.c:123:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: arch/arm/mach-bcmring/irq.c:124:
+       if (INTCHW_INTC1_GPIO1 & IRQ_INTC1_VALID_MASK) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#517: FILE: arch/arm/mach-bcmring/irq.c:124:
+       if (INTCHW_INTC1_GPIO1 & IRQ_INTC1_VALID_MASK) {
+               set_irq_handler(IRQ_GPIO1, handle_simple_irq);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#517: FILE: arch/arm/mach-bcmring/irq.c:124:
+       if (INTCHW_INTC1_GPIO1 & IRQ_INTC1_VALID_MASK) {
+               set_irq_handler(IRQ_GPIO1, handle_simple_irq);
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: arch/arm/mach-bcmring/irq.c:125:
+               set_irq_handler(IRQ_GPIO1, handle_simple_irq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: arch/arm/mach-bcmring/irq.c:125:
+               set_irq_handler(IRQ_GPIO1, handle_simple_irq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: arch/arm/mach-bcmring/irq.c:126:
+       }$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100395.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 81 warnings, 164 checks, 442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100395.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
