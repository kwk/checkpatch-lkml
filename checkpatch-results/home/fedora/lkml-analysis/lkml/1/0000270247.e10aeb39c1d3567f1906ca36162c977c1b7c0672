WARNING:REPEATED_WORD: Possible repeated word: 'in'
#85: FILE: Documentation/scsi/data-integrity.txt:31:
+contained in in result of READ CAPACITY(16).  Consequently we have to

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#223: FILE: drivers/scsi/sd.c:263:
+	__ATTR(protection_type, S_IRUGO, sd_show_protection_type, NULL),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#224: FILE: drivers/scsi/sd.c:264:
+	__ATTR(app_tag_own, S_IRUGO, sd_show_app_tag_own, NULL),

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#262: FILE: drivers/scsi/sd.c:503:
+	sd_dif_op(SCpnt);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#317: FILE: drivers/scsi/sd.c:1226:
+			memset((void *) buffer, 0, 13);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#382: FILE: drivers/scsi/sd.h:68:
+extern unsigned char sd_dif_op(struct scsi_cmnd *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#383: FILE: drivers/scsi/sd.h:69:
+extern void sd_dif_app_tag_own(struct scsi_disk *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_disk *' should also have an identifier name
#383: FILE: drivers/scsi/sd.h:69:
+extern void sd_dif_app_tag_own(struct scsi_disk *, unsigned char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#383: FILE: drivers/scsi/sd.h:69:
+extern void sd_dif_app_tag_own(struct scsi_disk *, unsigned char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#384: FILE: drivers/scsi/sd.h:70:
+extern void sd_dif_config_disk(struct scsi_disk *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_disk *' should also have an identifier name
#384: FILE: drivers/scsi/sd.h:70:
+extern void sd_dif_config_disk(struct scsi_disk *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#384: FILE: drivers/scsi/sd.h:70:
+extern void sd_dif_config_disk(struct scsi_disk *, unsigned char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#385: FILE: drivers/scsi/sd.h:71:
+extern void sd_dif_config_host(struct scsi_disk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_disk *' should also have an identifier name
#385: FILE: drivers/scsi/sd.h:71:
+extern void sd_dif_config_host(struct scsi_disk *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#386: FILE: drivers/scsi/sd.h:72:
+extern int sd_dif_prepare(struct request *rq, sector_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#386: FILE: drivers/scsi/sd.h:72:
+extern int sd_dif_prepare(struct request *rq, sector_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#386: FILE: drivers/scsi/sd.h:72:
+extern int sd_dif_prepare(struct request *rq, sector_t, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#387: FILE: drivers/scsi/sd.h:73:
+extern void sd_dif_complete(struct scsi_cmnd *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#387: FILE: drivers/scsi/sd.h:73:
+extern void sd_dif_complete(struct scsi_cmnd *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#387: FILE: drivers/scsi/sd.h:73:
+extern void sd_dif_complete(struct scsi_cmnd *, unsigned int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#405: FILE: drivers/scsi/sd_dif.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#422: FILE: drivers/scsi/sd_dif.c:18:
+ * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#502: FILE: drivers/scsi/sd_dif.c:98:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#509: FILE: drivers/scsi/sd_dif.c:105:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#519: FILE: drivers/scsi/sd_dif.c:115:
+			printk(KERN_ERR "%s: guard tag error on sector %lu " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#519: FILE: drivers/scsi/sd_dif.c:115:
+			printk(KERN_ERR "%s: guard tag error on sector %lu " \

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#553: FILE: drivers/scsi/sd_dif.c:149:
+		sdt->app_tag = tag[j] << 8 | tag[j+1];
 		                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#554: FILE: drivers/scsi/sd_dif.c:150:
+		BUG_ON(sdt->app_tag == 0xffff);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#566: FILE: drivers/scsi/sd_dif.c:162:
+		tag[j+1] = sdt->app_tag & 0xff;
 		     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#590: FILE: drivers/scsi/sd_dif.c:186:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#635: FILE: drivers/scsi/sd_dif.c:231:
+			printk(KERN_ERR "%s: guard tag error on sector %lu " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#635: FILE: drivers/scsi/sd_dif.c:231:
+			printk(KERN_ERR "%s: guard tag error on sector %lu " \

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#666: FILE: drivers/scsi/sd_dif.c:262:
+		sdt->app_tag = tag[j] << 8 | tag[j+1];
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#667: FILE: drivers/scsi/sd_dif.c:263:
+		sdt->ref_tag = tag[j+2] << 24 | tag[j+3] << 16 |
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#667: FILE: drivers/scsi/sd_dif.c:263:
+		sdt->ref_tag = tag[j+2] << 24 | tag[j+3] << 16 |
 		                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#668: FILE: drivers/scsi/sd_dif.c:264:
+			tag[j+4] << 8 | tag[j+5];
 			     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#668: FILE: drivers/scsi/sd_dif.c:264:
+			tag[j+4] << 8 | tag[j+5];
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#680: FILE: drivers/scsi/sd_dif.c:276:
+		tag[j+1] = sdt->app_tag & 0xff;
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#681: FILE: drivers/scsi/sd_dif.c:277:
+		tag[j+2] = (sdt->ref_tag & 0xff000000) >> 24;
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#682: FILE: drivers/scsi/sd_dif.c:278:
+		tag[j+3] = (sdt->ref_tag & 0xff0000) >> 16;
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#683: FILE: drivers/scsi/sd_dif.c:279:
+		tag[j+4] = (sdt->ref_tag & 0xff00) >> 8;
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#684: FILE: drivers/scsi/sd_dif.c:280:
+		tag[j+5] = sdt->ref_tag & 0xff;
 		     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#685: FILE: drivers/scsi/sd_dif.c:281:
+		BUG_ON(sdt->app_tag == 0xffff || sdt->ref_tag == 0xffffffff);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#709: FILE: drivers/scsi/sd_dif.c:305:
+
+

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#775: FILE: drivers/scsi/sd_dif.c:371:
+		sd_printk(KERN_NOTICE, sdkp, "formatted without data " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#782: FILE: drivers/scsi/sd_dif.c:378:
+		sd_printk(KERN_NOTICE, sdkp, "formatted with DIF Type %d " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#788: FILE: drivers/scsi/sd_dif.c:384:
+		sd_printk(KERN_ERR, sdkp, "formatted with DIF Type 2 "	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#794: FILE: drivers/scsi/sd_dif.c:390:
+		sd_printk(KERN_ERR, sdkp, "formatted with unknown "	\

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#817: FILE: drivers/scsi/sd_dif.c:413:
+	if (scsi_host_dif_dma(sdp->host) == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#819: FILE: drivers/scsi/sd_dif.c:415:
+			sd_printk(KERN_NOTICE, sdkp, "Type %d protection " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#830: FILE: drivers/scsi/sd_dif.c:426:
+		sd_printk(KERN_NOTICE, sdkp, "Type %d protection "	\

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#973: FILE: drivers/scsi/sd_dif.c:569:
+			for (j = 0 ; j < iv->bv_len ; j += tuple_sz, sdt++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1029: FILE: drivers/scsi/sd_dif.c:625:
+			for (j = 0 ; j < iv->bv_len ; j += tuple_sz, sdt++) {
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1066: FILE: include/scsi/scsi_dif.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1083: FILE: include/scsi/scsi_dif.h:18:
+ * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139,$

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#1107: FILE: include/scsi/scsi_dif.h:42:
+static inline void scsi_host_set_dif_caps(struct Scsi_Host *shost, unsigned char mask)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1177: FILE: include/scsi/scsi_dif.h:112:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1200: FILE: include/scsi/scsi_dif.h:135:
+       __u16 guard_tag;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1201: FILE: include/scsi/scsi_dif.h:136:
+       __u16 app_tag;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1202: FILE: include/scsi/scsi_dif.h:137:
+       __u32 ref_tag;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 31 warnings, 27 checks, 1103 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
