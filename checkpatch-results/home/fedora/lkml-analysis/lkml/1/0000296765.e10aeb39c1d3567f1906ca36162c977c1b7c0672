WARNING:TYPO_SPELLING: 'occurance' may be misspelled - perhaps 'occurrence'?
#37: 
changes in sched-cfs-v2.6.22.13-v24.patch by replacing each occurance of
                                                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'occurances' may be misspelled - perhaps 'occurrences'?
#66: 
something (In addition to replacing all the occurances of RB by avl in the
                                            ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'occurances' may be misspelled - perhaps 'occurrences'?
#71: 
occurances of RB tree have been replaced by corrosponding functions of avl
^^^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
#include <linux/avltree.h>

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
#include <linux/module.h>

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#95: 
static void left_avl_rotate(struct avl_node*nd,struct avl_root *root)
                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#97: 
  struct avl_node*node=nd;
                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#114: 
static void right_avl_rotate(struct avl_node*nd,struct avl_root *root)
                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#116: 
  struct avl_node * node = nd;
                           ^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#162: 
        Adjust balance factors so that the new balance factors for the nodes

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#539: 
#ifndef	_LINUX_AVLTREE_H

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#540: 
#define	_LINUX_AVLTREE_H

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#542: 
#include <linux/kernel.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#543: 
#include <linux/stddef.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#559: 
#define AVL_ROOT (struct avl_root) {NULL, }

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#560: 
#define	avl_entry(ptr, type, member) container_of(ptr, type, member)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#561: 
#define AVL_EMPTY_ROOT(root)	((root)->avl_node == NULL)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#562: 
#define AVL_EMPTY_NODE(node)	(((node)->avl_parent) == node)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#585: 
#endif /* _LINUX_AVLTREE_H */

WARNING:TYPO_SPELLING: 'agressively' may be misspelled - perhaps 'aggressively'?
#815: FILE: Documentation/sched-design-CFS.txt:103:
+   agressively than under the vanilla scheduler.
    ^^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'be'
#843: FILE: Documentation/sched-design-CFS.txt:131:
+SCHED_NORMAL/BATCH tasks be be grouped and divides CPU time fairly among such

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#908: FILE: Makefile:4:
+EXTRAVERSION = .13-cfs-v24
 ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'achive' may be misspelled - perhaps 'achieve'?
#1014: FILE: arch/i386/kernel/tsc.c:116:
+	 *   can achive it. )
 	         ^^^^^^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1146: FILE: arch/sparc64/kernel/smp.c:1185:
 void __devinit smp_prepare_boot_cpu(void)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1176: FILE: drivers/acpi/processor_idle.c:66:
+#define PM_TIMER_TICK_NS		(1000000000ULL/PM_TIMER_FREQUENCY)
                         		              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1207: FILE: drivers/acpi/processor_idle.c:509:
+		sched_clock_idle_wakeup_event(sleep_ticks*PM_TIMER_TICK_NS);
 		                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1242: FILE: drivers/acpi/processor_idle.c:557:
+		sched_clock_idle_wakeup_event(sleep_ticks*PM_TIMER_TICK_NS);
 		                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1434: FILE: fs/proc/array.c:293:
+static inline char *task_context_switch_counts(struct task_struct *p,
+						char *buffer)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1547: FILE: fs/proc/array.c:416:
+	cgtime = gtime = cputime_zero;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#1609: FILE: fs/proc/array.c:487:
+	res = sprintf(buffer, "%d (%s) %c %d %d %d %d %d %u %lu \

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1726: FILE: fs/proc/base.c:972:
+static int sched_open(struct inode *inode, struct file *filp)
                                                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1730: FILE: fs/proc/base.c:976:
+	ret = single_open(filp, sched_show, NULL);
 	                  ^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1757: FILE: fs/proc/base.c:2030:
+	REG("sched",      S_IRUGO|S_IWUSR, pid_sched),
 	                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1757: FILE: fs/proc/base.c:2030:
+	REG("sched",      S_IRUGO|S_IWUSR, pid_sched),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1767: FILE: fs/proc/base.c:2317:
+	REG("sched",     S_IRUGO|S_IWUSR, pid_sched),
 	                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1767: FILE: fs/proc/base.c:2317:
+	REG("sched",     S_IRUGO|S_IWUSR, pid_sched),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1800: FILE: fs/proc/proc_misc.c:472:
+	seq_printf(p, "cpu  %llu %llu %llu %llu %llu %llu %llu %llu %llu\n",
 		(unsigned long long)cputime64_to_clock_t(user),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1820: FILE: fs/proc/proc_misc.c:494:
+		seq_printf(p,
+			"cpu%d %llu %llu %llu %llu %llu %llu %llu %llu %llu\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1880: FILE: include/linux/cgroup.h:1:
+#ifndef _LINUX_CGROUP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1887: FILE: include/linux/cgroup.h:8:
+#define task_pid_nr(task)		(task)->pid

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1888: FILE: include/linux/cgroup.h:9:
+#define task_pid_vnr(task)		(task)->pid

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1999: FILE: include/linux/kernel_stat.h:56:
+extern void account_user_time_scaled(struct task_struct *, cputime_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1999: FILE: include/linux/kernel_stat.h:56:
+extern void account_user_time_scaled(struct task_struct *, cputime_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#1999: FILE: include/linux/kernel_stat.h:56:
+extern void account_user_time_scaled(struct task_struct *, cputime_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2001: FILE: include/linux/kernel_stat.h:58:
+extern void account_system_time_scaled(struct task_struct *, cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#2001: FILE: include/linux/kernel_stat.h:58:
+extern void account_system_time_scaled(struct task_struct *, cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#2001: FILE: include/linux/kernel_stat.h:58:
+extern void account_system_time_scaled(struct task_struct *, cputime_t);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#2095: FILE: include/linux/nodemask.h:411:
+#define for_each_node_state(node, __state) \
+	for ( (node) = 0; (node) == 0; (node) = 1)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2096: FILE: include/linux/nodemask.h:412:
+	for ( (node) = 0; (node) == 0; (node) = 1)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2104: FILE: include/linux/nodemask.h:420:
+#define node_online_map ^Inode_states[N_ONLINE]$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2105: FILE: include/linux/nodemask.h:421:
+#define node_possible_map ^Inode_states[N_POSSIBLE]$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2157: FILE: include/linux/sched.h:7:
+#define DEFINE_PER_CPU_SHARED_ALIGNED(x,y) \
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2158: FILE: include/linux/sched.h:8:
+	DEFINE_PER_CPU(x,y) ____cacheline_aligned_in_smp
 	                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2197: FILE: include/linux/sched.h:126:
+#define LOAD_FREQ	(5*HZ+1)	/* 5 sec intervals */
                  	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2197: FILE: include/linux/sched.h:126:
+#define LOAD_FREQ	(5*HZ+1)	/* 5 sec intervals */
                  	     ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2209: FILE: include/linux/sched.h:150:
+extern void proc_sched_show_task(struct task_struct *p, struct seq_file *m);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2210: FILE: include/linux/sched.h:151:
+extern void proc_sched_set_task(struct task_struct *p);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2218: FILE: include/linux/sched.h:159:
+}
+static inline void proc_sched_set_task(struct task_struct *p)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2221: FILE: include/linux/sched.h:162:
+}
+static inline void

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2243: FILE: include/linux/sched.h:229:
+extern void init_idle_bootup_task(struct task_struct *idle);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2324: FILE: include/linux/sched.h:597:
+extern int uids_kobject_init(void);

CHECK:BIT_MACRO: Prefer using the BIT macro
#2381: FILE: include/linux/sched.h:688:
+#define SCHED_LOAD_SCALE	(1L << SCHED_LOAD_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2458: FILE: include/linux/sched.h:789:
+extern void partition_sched_domains(int ndoms_new, cpumask_t *doms_new);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2496: FILE: include/linux/sched.h:863:
+	void (*enqueue_task) (struct rq *rq, struct task_struct *p, int wakeup);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2497: FILE: include/linux/sched.h:864:
+	void (*dequeue_task) (struct rq *rq, struct task_struct *p, int sleep);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2498: FILE: include/linux/sched.h:865:
+	void (*yield_task) (struct rq *rq);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2500: FILE: include/linux/sched.h:867:
+	void (*check_preempt_curr) (struct rq *rq, struct task_struct *p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2502: FILE: include/linux/sched.h:869:
+	struct task_struct * (*pick_next_task) (struct rq *rq);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2503: FILE: include/linux/sched.h:870:
+	void (*put_prev_task) (struct rq *rq, struct task_struct *p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2506: FILE: include/linux/sched.h:873:
+	unsigned long (*load_balance) (struct rq *this_rq, int this_cpu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2507: FILE: include/linux/sched.h:874:
+	unsigned long (*load_balance) (struct rq *this_rq, int this_cpu,
+			struct rq *busiest, unsigned long max_load_move,

WARNING:SPACING: Unnecessary space before function pointer arguments
#2511: FILE: include/linux/sched.h:878:
+	int (*move_one_task) (struct rq *this_rq, int this_cpu,

WARNING:SPACING: Unnecessary space before function pointer arguments
#2516: FILE: include/linux/sched.h:883:
+	void (*set_curr_task) (struct rq *rq);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2517: FILE: include/linux/sched.h:884:
+	void (*task_tick) (struct rq *rq, struct task_struct *p);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2518: FILE: include/linux/sched.h:885:
+	void (*task_new) (struct rq *rq, struct task_struct *p);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2632: FILE: include/linux/sched.h:1044:
+^Istruct timespec start_time; ^I^I/* monotonic time */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2692: FILE: include/linux/sched.h:1399:
+extern unsigned long long cpu_clock(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2704: FILE: include/linux/sched.h:1411:
+extern void sched_clock_idle_sleep_event(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2705: FILE: include/linux/sched.h:1412:
+extern void sched_clock_idle_wakeup_event(u64 delta_ns);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2729: FILE: include/linux/sched.h:1437:
+int sched_nr_latency_handler(struct ctl_table *table, int write,
+		struct file *file, void __user *buffer, size_t *length,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2743: FILE: include/linux/sched.h:1498:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2743: FILE: include/linux/sched.h:1498:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct user_namespace *' should also have an identifier name
#2743: FILE: include/linux/sched.h:1498:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#2743: FILE: include/linux/sched.h:1498:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2751: FILE: include/linux/sched.h:1506:
+extern void release_uids(struct user_namespace *ns);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2761: FILE: include/linux/sched.h:1521:
+extern void sched_fork(struct task_struct *p, int clone_flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2762: FILE: include/linux/sched.h:1522:
+extern void sched_dead(struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2783: FILE: include/linux/sched.h:1842:
+extern void set_task_cpu(struct task_struct *p, unsigned int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2795: FILE: include/linux/sched.h:1879:
+extern struct task_group *sched_create_group(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2796: FILE: include/linux/sched.h:1880:
+extern void sched_destroy_group(struct task_group *tg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2797: FILE: include/linux/sched.h:1881:
+extern void sched_move_task(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2798: FILE: include/linux/sched.h:1882:
+extern int sched_group_set_shares(struct task_group *tg, unsigned long shares);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2799: FILE: include/linux/sched.h:1883:
+extern unsigned long sched_group_shares(struct task_group *tg);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2905: FILE: include/linux/user_namespace.h:1:
+#ifndef _LINUX_USER_NAMESPACE_H

CHECK:BIT_MACRO: Prefer using the BIT macro
#2914: FILE: include/linux/user_namespace.h:10:
+#define UIDHASH_SZ	(1 << UIDHASH_BITS)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2933: FILE: include/linux/user_namespace.h:29:
+extern struct user_namespace *copy_user_ns(int flags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2935: FILE: include/linux/user_namespace.h:31:
+extern void free_user_ns(struct kref *kref);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2986: FILE: init/Kconfig:300:
+config FAIR_GROUP_SCHED
+	bool "Fair group CPU scheduler"
+	default y
+	depends on EXPERIMENTAL
+	help
+	  This feature lets CPU scheduler recognize task groups and control CPU
+	  bandwidth allocation to such task groups.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2994: FILE: init/Kconfig:308:
+choice
+	depends on FAIR_GROUP_SCHED
+	prompt "Basis for grouping tasks"
+	default FAIR_USER_SCHED
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2999: FILE: init/Kconfig:313:
+config FAIR_USER_SCHED
+	bool "user id"
+	help
+	  This option will choose userid as the basis for grouping
+	  tasks, thus providing equal CPU bandwidth to each user.
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3069: FILE: kernel/delayacct.c:103:
+	unsigned long long t2,t3;
 	                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3149: FILE: kernel/exit.c:1221:
+			cputime_add(psig->cgtime,
+			cputime_add(p->gtime,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3150: FILE: kernel/exit.c:1222:
+			cputime_add(p->gtime,
+			cputime_add(sig->gtime,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3201: FILE: kernel/fork.c:1611:
+				CLONE_NEWUTS|CLONE_NEWIPC|CLONE_NEWUSER))
 				            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3201: FILE: kernel/fork.c:1611:
+				CLONE_NEWUTS|CLONE_NEWIPC|CLONE_NEWUSER))
 				                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3266: FILE: kernel/nsproxy.c:63:
+static struct nsproxy *create_new_namespaces(unsigned long flags,
+			struct task_struct *tsk, struct fs_struct *new_fs)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#3431: FILE: kernel/posix-cpu-timers.c:454:
+		if (timer->expires.sched < sum_exec_runtime) {
[...]
 		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3734: FILE: kernel/sched.c:152:
+	DECLARE_BITMAP(bitmap, MAX_RT_PRIO+1); /* include 1 bit for delimiter */
 	                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#3757: FILE: kernel/sched.c:175:
+ ^I *$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3757: FILE: kernel/sched.c:175:
+ ^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3765: FILE: kernel/sched.c:183:
+^I * ^IBw(C) = 3000/(1000+2000+3000) * 100 = 50%$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3774: FILE: kernel/sched.c:192:
+ ^I * Note: It's not necessary that each of a task's group schedulable$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3774: FILE: kernel/sched.c:192:
+ ^I * Note: It's not necessary that each of a task's group schedulable$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3775: FILE: kernel/sched.c:193:
+ ^I * ^I entity have the same weight on all CPUs. If the group$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3775: FILE: kernel/sched.c:193:
+ ^I * ^I entity have the same weight on all CPUs. If the group$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3776: FILE: kernel/sched.c:194:
+ ^I * ^I has 2 of its tasks on CPU0 and 1 task on CPU1, then a$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3776: FILE: kernel/sched.c:194:
+ ^I * ^I has 2 of its tasks on CPU0 and 1 task on CPU1, then a$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3777: FILE: kernel/sched.c:195:
+ ^I * ^I better distribution of weight could be:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3777: FILE: kernel/sched.c:195:
+ ^I * ^I better distribution of weight could be:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3778: FILE: kernel/sched.c:196:
+ ^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3778: FILE: kernel/sched.c:196:
+ ^I *$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3779: FILE: kernel/sched.c:197:
+ ^I *^Itg_A->se[0]->load.weight = 2/3 * 2000 = 1333$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3779: FILE: kernel/sched.c:197:
+ ^I *^Itg_A->se[0]->load.weight = 2/3 * 2000 = 1333$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3780: FILE: kernel/sched.c:198:
+ ^I *^Itg_A->se[1]->load.weight = 1/2 * 2000 =  667$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3780: FILE: kernel/sched.c:198:
+ ^I *^Itg_A->se[1]->load.weight = 1/2 * 2000 =  667$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3781: FILE: kernel/sched.c:199:
+ ^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3781: FILE: kernel/sched.c:199:
+ ^I *$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3782: FILE: kernel/sched.c:200:
+ ^I * rebalance_shares() is responsible for distributing the shares of a$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3782: FILE: kernel/sched.c:200:
+ ^I * rebalance_shares() is responsible for distributing the shares of a$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3783: FILE: kernel/sched.c:201:
+ ^I * task groups like this among the group's schedulable entities across$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3783: FILE: kernel/sched.c:201:
+ ^I * task groups like this among the group's schedulable entities across$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3784: FILE: kernel/sched.c:202:
+ ^I * cpus.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3784: FILE: kernel/sched.c:202:
+ ^I * cpus.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3785: FILE: kernel/sched.c:203:
+ ^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3785: FILE: kernel/sched.c:203:
+ ^I *$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3789: FILE: kernel/sched.c:207:
+ ^I/* lock to serialize modification to shares */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3789: FILE: kernel/sched.c:207:
+ ^I/* lock to serialize modification to shares */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3789: FILE: kernel/sched.c:207:
+ ^I/* lock to serialize modification to shares */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3790: FILE: kernel/sched.c:208:
+ ^Istruct mutex lock;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3790: FILE: kernel/sched.c:208:
+ ^Istruct mutex lock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3790: FILE: kernel/sched.c:208:
+ ^Istruct mutex lock;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3792: FILE: kernel/sched.c:210:
+ ^Iunsigned long last_total_load;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3792: FILE: kernel/sched.c:210:
+ ^Iunsigned long last_total_load;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3792: FILE: kernel/sched.c:210:
+ ^Iunsigned long last_total_load;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3824: FILE: kernel/sched.c:242:
+# define INIT_TASK_GROUP_LOAD	2*NICE_0_LOAD	/* root user's cpu share */
                              	 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#3824: FILE: kernel/sched.c:242:
+# define INIT_TASK_GROUP_LOAD	2*NICE_0_LOAD	/* root user's cpu share */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3842: FILE: kernel/sched.c:260:
+	tg = container_of(task_subsys_state(p, cpu_cgroup_subsys_id),
+				struct task_group, css);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4099: FILE: kernel/sched.c:512:
+# define const_debug static const

WARNING:LINE_SPACING: Missing a blank line after declarations
#4163: FILE: kernel/sched.c:647:
+		struct rq *rq = task_rq(p);
+		spin_lock(&rq->lock);

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#4397: FILE: kernel/sched.c:726:
+	 * sched_clock() deltas that occured while we idled,
 	                             ^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#4487: FILE: kernel/sched.c:792:
+# define WMULT_CONST	(1UL << 32)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#4500: FILE: kernel/sched.c:800:
+#define SRR(x, y) (((x) + (1UL << ((y) - 1))) >> (y))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4510: FILE: kernel/sched.c:809:
+		lw->inv_weight = (WMULT_CONST - lw->weight/2) / lw->weight + 1;
 		                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4522: FILE: kernel/sched.c:816:
+		tmp = SRR(SRR(tmp, WMULT_SHIFT/2) * lw->inv_weight,
 		                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4523: FILE: kernel/sched.c:817:
+		tmp = SRR(SRR(tmp, WMULT_SHIFT/2) * lw->inv_weight,
+			WMULT_SHIFT/2);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4523: FILE: kernel/sched.c:817:
+			WMULT_SHIFT/2);
 			           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#4594: FILE: kernel/sched.c:850:
+#define WMULT_IDLEPRIO		(1 << 31)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#4657: FILE: kernel/sched.c:902:
+	struct task_struct *(*start)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#4658: FILE: kernel/sched.c:903:
+	struct task_struct *(*next)(void *);

WARNING:TYPO_SPELLING: 'successfuly' may be misspelled - perhaps 'successfully'?
#4972: FILE: kernel/sched.c:1074:
+	 * successfuly executed on another CPU. We must ensure that updates of
 	   ^^^^^^^^^^^

WARNING:MEMORY_BARRIER: memory barrier without comment
#4996: FILE: kernel/sched.c:1077:
+	smp_wmb();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5278: FILE: kernel/sched.c:1291:
+	return min(rq->cpu_load[type-1], total);
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5296: FILE: kernel/sched.c:1306:
+	return max(rq->cpu_load[type-1], total);
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5353: FILE: kernel/sched.c:1503:
+						schedstat_inc(p,
+							se.nr_wakeups_idle);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5423: FILE: kernel/sched.c:1619:
+			       100*(tl + p->se.load.weight) <= imbalance*load) {
 			          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5423: FILE: kernel/sched.c:1619:
+			       100*(tl + p->se.load.weight) <= imbalance*load) {
 			                                                ^

WARNING:REPEATED_WORD: Possible repeated word: 'being'
#5704: FILE: kernel/sched.c:1808:
+ * preempt_notifier_register - tell me when current is being being preempted & rescheduled

CHECK:BRACES: braces {} should be used on all arms of this statement
#5857: FILE: kernel/sched.c:1973:
+	if (unlikely(!mm)) {
[...]
 	} else
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5921: FILE: kernel/sched.c:2101:
+			new_load += scale-1;
 			                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5922: FILE: kernel/sched.c:2102:
+		this_rq->cpu_load[i] = (old_load*(scale-1) + new_load) >> i;
 		                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5922: FILE: kernel/sched.c:2102:
+		this_rq->cpu_load[i] = (old_load*(scale-1) + new_load) >> i;
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6003: FILE: kernel/sched.c:2271:
+	if (!task_hot(p, rq->clock, sd) ||
+			sd->nr_balance_failed > sd->cache_nice_tries) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6372: FILE: kernel/sched.c:2549:
+		if (idle == CPU_NOT_IDLE ||
+				!(sd->flags & SD_POWERSAVINGS_BALANCE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sum_nr_running < min_nr_running'
#6404: FILE: kernel/sched.c:2573:
+		if ((sum_nr_running < min_nr_running) ||
+		    (sum_nr_running == min_nr_running &&
 		     first_cpu(group->cpumask) <
 		     first_cpu(group_min->cpumask))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6657: FILE: kernel/sched.c:2952:
+	busiest = find_busiest_queue(group, CPU_NEWLY_IDLE, imbalance,
 				&cpus);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6680: FILE: kernel/sched.c:2969:
+		ld_moved = move_tasks(this_rq, this_cpu, busiest,
+					imbalance, sd, CPU_NEWLY_IDLE,

CHECK:BRACES: braces {} should be used on all arms of this statement
#6694: FILE: kernel/sched.c:2980:
+	if (!ld_moved) {
[...]
 	} else
[...]

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6822: FILE: kernel/sched.c:3191:
+		if (interval > HZ*NR_CPUS/10)
 		                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6822: FILE: kernel/sched.c:3191:
+		if (interval > HZ*NR_CPUS/10)
 		                         ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#6822: FILE: kernel/sched.c:3191:
+		if (interval > HZ*NR_CPUS/10)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6823: FILE: kernel/sched.c:3192:
+			interval = HZ*NR_CPUS/10;
 			             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6823: FILE: kernel/sched.c:3192:
+			interval = HZ*NR_CPUS/10;
 			                     ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#6823: FILE: kernel/sched.c:3192:
+			interval = HZ*NR_CPUS/10;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7215: FILE: kernel/sched.c:3575:
+	printk(KERN_ERR "BUG: scheduling while atomic: %s/%d/0x%08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7216: FILE: kernel/sched.c:3576:
+	printk(KERN_ERR "BUG: scheduling while atomic: %s/%d/0x%08x\n",
+		prev->comm, prev->pid, preempt_count());

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#7486: FILE: kernel/sched.c:3738:
+		 * clear ->lock_depth so that schedule() doesnt
 		                                         ^^^^^^

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#7533: FILE: kernel/sched.c:3781:
+		 * clear ->lock_depth so that schedule() doesnt
 		                                         ^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#7748: FILE: kernel/sched.c:3973:
+	long t = wait_for_common(x, MAX_SCHEDULE_TIMEOUT, TASK_INTERRUPTIBLE);
+	if (t == -ERESTARTSYS)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7986: FILE: kernel/sched.c:4251:
+	BUG_ON(p->se.on_rq);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'param->sched_priority != 0'
#8043: FILE: kernel/sched.c:4307:
+	if (rt_policy(policy) != (param->sched_priority != 0))

CHECK:BRACES: braces {} should be used on all arms of this statement
#8273: FILE: kernel/sched.c:4889:
+	if (p->policy == SCHED_FIFO)
[...]
+	else if (p->policy == SCHED_RR)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#8277: FILE: kernel/sched.c:4893:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#8300: FILE: kernel/sched.c:4920:
+	printk(KERN_INFO "%-13.13s %c", p->comm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8301: FILE: kernel/sched.c:4921:
+	printk(KERN_INFO "%-13.13s %c", p->comm,
 		state < sizeof(stat_nam) - 1 ? stat_nam[state] : '?');

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#8306: FILE: kernel/sched.c:4924:
+		printk(KERN_CONT " running  ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#8306: FILE: kernel/sched.c:4924:
+		printk(KERN_CONT " running  ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#8309: FILE: kernel/sched.c:4926:
+		printk(KERN_CONT " %08lx ", thread_saved_pc(p));

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#8309: FILE: kernel/sched.c:4926:
+		printk(KERN_CONT " %08lx ", thread_saved_pc(p));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#8313: FILE: kernel/sched.c:4929:
+		printk(KERN_CONT "  running task    ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#8313: FILE: kernel/sched.c:4929:
+		printk(KERN_CONT "  running task    ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#8316: FILE: kernel/sched.c:4931:
+		printk(KERN_CONT " %016lx ", thread_saved_pc(p));

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#8316: FILE: kernel/sched.c:4931:
+		printk(KERN_CONT " %016lx ", thread_saved_pc(p));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#8329: FILE: kernel/sched.c:4941:
+	printk(KERN_CONT "%5lu %5d %6d\n", free,

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#8329: FILE: kernel/sched.c:4941:
+	printk(KERN_CONT "%5lu %5d %6d\n", free,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8330: FILE: kernel/sched.c:4942:
+	printk(KERN_CONT "%5lu %5d %6d\n", free,
+		task_pid_nr(p), task_pid_nr(p->parent));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#8343: FILE: kernel/sched.c:4953:
+	printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#8349: FILE: kernel/sched.c:4956:
+	printk(KERN_INFO

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#8523: FILE: kernel/sched.c:5259:
+		if (dest_cpu == NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#8527: FILE: kernel/sched.c:5263:
+		if (dest_cpu == NR_CPUS) {

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#8558: FILE: kernel/sched.c:5282:
+			if (p->mm && printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#8559: FILE: kernel/sched.c:5283:
+				printk(KERN_INFO "process %d (%s) no "

WARNING:SPLIT_STRING: quoted string split across lines
#8560: FILE: kernel/sched.c:5284:
+				printk(KERN_INFO "process %d (%s) no "
+				       "longer affine to cpu%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#8599: FILE: kernel/sched.c:5349:
+	__setscheduler(rq, p, SCHED_FIFO, MAX_RT_PRIO-1);
 	                                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8613: FILE: kernel/sched.c:5378:
+	BUG_ON(!p->exit_state);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry->proc_handler"
#8700: FILE: kernel/sched.c:5457:
+		if (entry->proc_handler == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!table"
#8725: FILE: kernel/sched.c:5482:
+	if (table == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8729: FILE: kernel/sched.c:5486:
+	set_table_entry(&table[0], "min_interval", &sd->min_interval,
+		sizeof(long), 0644, proc_doulongvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8731: FILE: kernel/sched.c:5488:
+	set_table_entry(&table[1], "max_interval", &sd->max_interval,
+		sizeof(long), 0644, proc_doulongvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8733: FILE: kernel/sched.c:5490:
+	set_table_entry(&table[2], "busy_idx", &sd->busy_idx,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8735: FILE: kernel/sched.c:5492:
+	set_table_entry(&table[3], "idle_idx", &sd->idle_idx,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8737: FILE: kernel/sched.c:5494:
+	set_table_entry(&table[4], "newidle_idx", &sd->newidle_idx,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8739: FILE: kernel/sched.c:5496:
+	set_table_entry(&table[5], "wake_idx", &sd->wake_idx,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8741: FILE: kernel/sched.c:5498:
+	set_table_entry(&table[6], "forkexec_idx", &sd->forkexec_idx,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8743: FILE: kernel/sched.c:5500:
+	set_table_entry(&table[7], "busy_factor", &sd->busy_factor,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8745: FILE: kernel/sched.c:5502:
+	set_table_entry(&table[8], "imbalance_pct", &sd->imbalance_pct,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8747: FILE: kernel/sched.c:5504:
+	set_table_entry(&table[9], "cache_nice_tries",
+		&sd->cache_nice_tries,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8750: FILE: kernel/sched.c:5507:
+	set_table_entry(&table[10], "flags", &sd->flags,
+		sizeof(int), 0644, proc_dointvec_minmax);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#8756: FILE: kernel/sched.c:5513:
+static ctl_table * sd_alloc_ctl_cpu_table(int cpu)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#8765: FILE: kernel/sched.c:5522:
+	entry = table = sd_alloc_ctl_entry(domain_num + 1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!table"
#8766: FILE: kernel/sched.c:5523:
+	if (table == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#8791: FILE: kernel/sched.c:5548:
+	if (entry == NULL)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#8819: FILE: kernel/sched.c:5576:
+}
+static void unregister_sched_domain_sysctl(void)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#8840: FILE: kernel/sched.c:5607:
+		__setscheduler(rq, p, SCHED_FIFO, MAX_RT_PRIO-1);
 		                                             ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#8915: FILE: kernel/sched.c:5707:
+	cpumask_scnprintf(str, NR_CPUS, sd->span);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#8918: FILE: kernel/sched.c:5710:
+	printk(KERN_DEBUG "%*s domain %d: ", level, "", level);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#8921: FILE: kernel/sched.c:5713:
+		printk("does not load-balance\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#8923: FILE: kernel/sched.c:5715:
+			printk(KERN_ERR "ERROR: !SD_LOAD_BALANCE domain"

WARNING:SPLIT_STRING: quoted string split across lines
#8924: FILE: kernel/sched.c:5716:
+			printk(KERN_ERR "ERROR: !SD_LOAD_BALANCE domain"
+					" has parent");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#8929: FILE: kernel/sched.c:5720:
+	printk(KERN_CONT "span %s\n", str);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#8929: FILE: kernel/sched.c:5720:
+	printk(KERN_CONT "span %s\n", str);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#8932: FILE: kernel/sched.c:5723:
+		printk(KERN_ERR "ERROR: domain->span does not contain "

WARNING:SPLIT_STRING: quoted string split across lines
#8933: FILE: kernel/sched.c:5724:
+		printk(KERN_ERR "ERROR: domain->span does not contain "
+				"CPU%d\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#8936: FILE: kernel/sched.c:5727:
+		printk(KERN_ERR "ERROR: domain->groups does not contain"

WARNING:SPLIT_STRING: quoted string split across lines
#8937: FILE: kernel/sched.c:5728:
+		printk(KERN_ERR "ERROR: domain->groups does not contain"
+				" CPU%d\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#8940: FILE: kernel/sched.c:5731:
+	printk(KERN_DEBUG "%*s groups:", level + 1, "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#8961: FILE: kernel/sched.c:5734:
+			printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#8962: FILE: kernel/sched.c:5735:
+			printk(KERN_ERR "ERROR: group is NULL\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#8968: FILE: kernel/sched.c:5740:
+			printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#8968: FILE: kernel/sched.c:5740:
+			printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#8969: FILE: kernel/sched.c:5741:
+			printk(KERN_ERR "ERROR: domain->cpu_power not "

WARNING:SPLIT_STRING: quoted string split across lines
#8970: FILE: kernel/sched.c:5742:
+			printk(KERN_ERR "ERROR: domain->cpu_power not "
+					"set\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#8992: FILE: kernel/sched.c:5747:
+			printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#8992: FILE: kernel/sched.c:5747:
+			printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#8993: FILE: kernel/sched.c:5748:
+			printk(KERN_ERR "ERROR: empty group\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#9003: FILE: kernel/sched.c:5753:
+			printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#9003: FILE: kernel/sched.c:5753:
+			printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#9004: FILE: kernel/sched.c:5754:
+			printk(KERN_ERR "ERROR: repeated CPUs\n");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#9018: FILE: kernel/sched.c:5760:
+		cpumask_scnprintf(str, NR_CPUS, group->cpumask);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#9019: FILE: kernel/sched.c:5761:
+		printk(KERN_CONT " %s", str);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#9019: FILE: kernel/sched.c:5761:
+		printk(KERN_CONT " %s", str);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#9023: FILE: kernel/sched.c:5765:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#9023: FILE: kernel/sched.c:5765:
+	printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#9026: FILE: kernel/sched.c:5768:
+		printk(KERN_ERR "ERROR: groups don't span domain->span\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#9029: FILE: kernel/sched.c:5771:
+		printk(KERN_ERR "ERROR: parent span is not a superset "

WARNING:SPLIT_STRING: quoted string split across lines
#9030: FILE: kernel/sched.c:5772:
+		printk(KERN_ERR "ERROR: parent span is not a superset "
+			"of domain->span\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#9042: FILE: kernel/sched.c:5781:
+		printk(KERN_DEBUG "CPU%d attaching NULL sched-domain.\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#9053: FILE: kernel/sched.c:5785:
+	printk(KERN_DEBUG "CPU%d attaching sched-domain:\n", cpu);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#9078: FILE: kernel/sched.c:5903:
+__setup("isolcpus=", isolated_cpu_setup);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9638: FILE: kernel/sched.c:6260:
+	sched_group_nodes = kcalloc(MAX_NUMNODES, sizeof(struct sched_group *),
 					   GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#9648: FILE: kernel/sched.c:6279:
+				SD_NODES_PER_DOMAIN*cpus_weight(nodemask)) {
 				                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!doms_new"
#9850: FILE: kernel/sched.c:6577:
+	if (doms_new == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#9975: FILE: kernel/sched.c:6758:
+		printk("Could not create load balance monitor thread"

WARNING:SPLIT_STRING: quoted string split across lines
#9976: FILE: kernel/sched.c:6759:
+		printk("Could not create load balance monitor thread"
+			"(error = %ld) \n", PTR_ERR(lb_monitor_task));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#9976: FILE: kernel/sched.c:6759:
+			"(error = %ld) \n", PTR_ERR(lb_monitor_task));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10031: FILE: kernel/sched.c:6815:
+			list_add(&cfs_rq->leaf_cfs_rq_list,
+							 &rq->leaf_cfs_rq_list);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#10038: FILE: kernel/sched.c:6822:
+				 div64_64(1ULL<<32, init_task_group_load);
 				              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#10105: FILE: kernel/sched.c:6915:
+	int on_rq;
+	update_rq_clock(rq);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#10266: FILE: kernel/sched.c:7111:
+		for (i=0; i < ndoms_cur; i++) {
 		      ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#10319: FILE: kernel/sched.c:7164:
+	tg->cfs_rq = kzalloc(sizeof(cfs_rq) * NR_CPUS, GFP_KERNEL);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#10322: FILE: kernel/sched.c:7167:
+	tg->se = kzalloc(sizeof(se) * NR_CPUS, GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*cfs_rq)...) over kmalloc_node(sizeof(struct cfs_rq)...)
#10329: FILE: kernel/sched.c:7174:
+		cfs_rq = kmalloc_node(sizeof(struct cfs_rq), GFP_KERNEL,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10330: FILE: kernel/sched.c:7175:
+		cfs_rq = kmalloc_node(sizeof(struct cfs_rq), GFP_KERNEL,
+							 cpu_to_node(i));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*se)...) over kmalloc_node(sizeof(struct sched_entity)...)
#10334: FILE: kernel/sched.c:7179:
+		se = kmalloc_node(sizeof(struct sched_entity), GFP_KERNEL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10335: FILE: kernel/sched.c:7180:
+		se = kmalloc_node(sizeof(struct sched_entity), GFP_KERNEL,
+							cpu_to_node(i));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#10350: FILE: kernel/sched.c:7195:
+		se->load.inv_weight = div64_64(1ULL<<32, NICE_0_LOAD);
 		                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#10412: FILE: kernel/sched.c:7257:
+	BUG_ON(!cfs_rq);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#10476: FILE: kernel/sched.c:7321:
+	se->load.inv_weight = div64_64((1ULL<<32), shares);
 	                                    ^

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#10508: FILE: kernel/sched.c:7353:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10584: FILE: kernel/sched.c:7429:
+static int cpu_cgroup_can_attach(struct cgroup_subsys *ss,
+			     struct cgroup *cgrp, struct task_struct *tsk)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10595: FILE: kernel/sched.c:7440:
+cpu_cgroup_attach(struct cgroup_subsys *ss, struct cgroup *cgrp,
+			struct cgroup *old_cont, struct task_struct *tsk)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10601: FILE: kernel/sched.c:7446:
+static int cpu_shares_write_uint(struct cgroup *cgrp, struct cftype *cftype,
+				u64 shareval)

CHECK:SPACING: No space is necessary after a cast
#10610: FILE: kernel/sched.c:7455:
+	return (u64) tg->shares;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10669: FILE: kernel/sched_debug.c:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#10691: FILE: kernel/sched_debug.c:23:
+#define SEQ_printf(m, x...)			\
+ do {						\
+	if (m)					\
+		seq_printf(m, x);		\
+	else					\
+		printk(x);			\
+ } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#10692: FILE: kernel/sched_debug.c:24:
+ do {^I^I^I^I^I^I\$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#10696: FILE: kernel/sched_debug.c:28:
+		printk(x);			\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#10697: FILE: kernel/sched_debug.c:29:
+ } while (0)$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#10722: FILE: kernel/sched_debug.c:54:
+#define SPLIT_NS(x) nsec_high(x), nsec_low(x)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#10722: FILE: kernel/sched_debug.c:54:
+#define SPLIT_NS(x) nsec_high(x), nsec_low(x)

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10732: FILE: kernel/sched_debug.c:64:
+	SEQ_printf(m, "%15s %5d %9Ld.%06ld %9Ld %5d ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10733: FILE: kernel/sched_debug.c:65:
+	SEQ_printf(m, "%15s %5d %9Ld.%06ld %9Ld %5d ",
+		p->comm, p->pid,

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10738: FILE: kernel/sched_debug.c:70:
+	SEQ_printf(m, "%9Ld.%06ld %9Ld.%06ld %9Ld.%06ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10739: FILE: kernel/sched_debug.c:71:
+	SEQ_printf(m, "%9Ld.%06ld %9Ld.%06ld %9Ld.%06ld\n",
+		SPLIT_NS(p->se.vruntime),

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10743: FILE: kernel/sched_debug.c:75:
+	SEQ_printf(m, "%15Ld %15Ld %15Ld.%06ld %15Ld.%06ld %15Ld.%06ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10744: FILE: kernel/sched_debug.c:76:
+	SEQ_printf(m, "%15Ld %15Ld %15Ld.%06ld %15Ld.%06ld %15Ld.%06ld\n",
+		0LL, 0LL, 0LL, 0L, 0LL, 0L, 0LL, 0L);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10754: FILE: kernel/sched_debug.c:86:
+	SEQ_printf(m,
+	"\nrunnable tasks:\n"

WARNING:SPLIT_STRING: quoted string split across lines
#10756: FILE: kernel/sched_debug.c:88:
+	"            task   PID         tree-key  switches  prio"
+	"     exec-runtime         sum-exec        sum-sleep\n"

WARNING:SPLIT_STRING: quoted string split across lines
#10758: FILE: kernel/sched_debug.c:90:
+	"------------------------------------------------------"
+	"----------------------------------------------------\n");

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10782: FILE: kernel/sched_debug.c:114:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "exec_clock",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10783: FILE: kernel/sched_debug.c:115:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "exec_clock",
+			SPLIT_NS(cfs_rq->exec_clock));

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10794: FILE: kernel/sched_debug.c:126:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "MIN_vruntime",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10795: FILE: kernel/sched_debug.c:127:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "MIN_vruntime",
+			SPLIT_NS(MIN_vruntime));

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10796: FILE: kernel/sched_debug.c:128:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "min_vruntime",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10797: FILE: kernel/sched_debug.c:129:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "min_vruntime",
+			SPLIT_NS(min_vruntime));

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10798: FILE: kernel/sched_debug.c:130:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "max_vruntime",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10799: FILE: kernel/sched_debug.c:131:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "max_vruntime",
+			SPLIT_NS(max_vruntime));

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10801: FILE: kernel/sched_debug.c:133:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "spread",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10802: FILE: kernel/sched_debug.c:134:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "spread",
+			SPLIT_NS(spread));

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10804: FILE: kernel/sched_debug.c:136:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "spread0",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10805: FILE: kernel/sched_debug.c:137:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "spread0",
+			SPLIT_NS(spread0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10810: FILE: kernel/sched_debug.c:142:
+	SEQ_printf(m, "  .%-30s: %d\n", "bkl_count",
+			rq->bkl_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10813: FILE: kernel/sched_debug.c:145:
+	SEQ_printf(m, "  .%-30s: %ld\n", "nr_spread_over",
+			cfs_rq->nr_spread_over);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#10831: FILE: kernel/sched_debug.c:163:
+#define P(x) \
+	SEQ_printf(m, "  .%-30s: %Ld\n", #x, (long long)(rq->x))

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10832: FILE: kernel/sched_debug.c:164:
+	SEQ_printf(m, "  .%-30s: %Ld\n", #x, (long long)(rq->x))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#10833: FILE: kernel/sched_debug.c:165:
+#define PN(x) \
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", #x, SPLIT_NS(rq->x))

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10834: FILE: kernel/sched_debug.c:166:
+	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", #x, SPLIT_NS(rq->x))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10871: FILE: kernel/sched_debug.c:203:
+	SEQ_printf(m, "Sched Debug Version: v0.07, %s %.*s\n",
+		init_utsname()->release,

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#10875: FILE: kernel/sched_debug.c:207:
+	SEQ_printf(m, "now at %Lu.%06ld msecs\n", SPLIT_NS(now));

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10878: FILE: kernel/sched_debug.c:210:
+	SEQ_printf(m, "  .%-40s: %Ld\n", #x, (long long)(x))

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10880: FILE: kernel/sched_debug.c:212:
+	SEQ_printf(m, "  .%-40s: %Ld.%06ld\n", #x, SPLIT_NS(x))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#10903: FILE: kernel/sched_debug.c:235:
+static int sched_debug_open(struct inode *inode, struct file *filp)
                                                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#10905: FILE: kernel/sched_debug.c:237:
+	return single_open(filp, sched_debug_show, NULL);
 	                   ^^^^

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#10928: FILE: kernel/sched_debug.c:260:
+__initcall(init_sched_debug_procfs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10945: FILE: kernel/sched_debug.c:277:
+	SEQ_printf(m,
+		"---------------------------------------------------------\n");

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10947: FILE: kernel/sched_debug.c:279:
+	SEQ_printf(m, "%-35s:%21Ld\n", #F, (long long)F)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'F' may be better as '(F)' to avoid precedence issues
#10948: FILE: kernel/sched_debug.c:280:
+#define P(F) \
+	SEQ_printf(m, "%-35s:%21Ld\n", #F, (long long)p->F)

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10949: FILE: kernel/sched_debug.c:281:
+	SEQ_printf(m, "%-35s:%21Ld\n", #F, (long long)p->F)

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10951: FILE: kernel/sched_debug.c:283:
+	SEQ_printf(m, "%-35s:%14Ld.%06ld\n", #F, SPLIT_NS((long long)F))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'F' may be better as '(F)' to avoid precedence issues
#10952: FILE: kernel/sched_debug.c:284:
+#define PN(F) \
+	SEQ_printf(m, "%-35s:%14Ld.%06ld\n", #F, SPLIT_NS((long long)p->F))

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#10953: FILE: kernel/sched_debug.c:285:
+	SEQ_printf(m, "%-35s:%14Ld.%06ld\n", #F, SPLIT_NS((long long)p->F))

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#11008: FILE: kernel/sched_debug.c:340:
+	SEQ_printf(m, "%-35s:%21Ld\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#11010: FILE: kernel/sched_debug.c:342:
+	SEQ_printf(m, "%-35s:%21Ld\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#11026: FILE: kernel/sched_debug.c:358:
+		SEQ_printf(m, "%-35s:%21Ld\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#11027: FILE: kernel/sched_debug.c:359:
+			   "clock-delta", (long long)(t1-t0));
 			                                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#11068: FILE: kernel/sched_fair.c:1:
+/*

WARNING:TYPO_SPELLING: 'agressive' may be misspelled - perhaps 'aggressive'?
#11124: FILE: kernel/sched_fair.c:57:
+ * This option switches the agressive yield implementation of the
                             ^^^^^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'se' may be better as '(se)' to avoid precedence issues
#11164: FILE: kernel/sched_fair.c:97:
+#define entity_is_task(se)	(!se->my_q)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#11182: FILE: kernel/sched_fair.c:115:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#11190: FILE: kernel/sched_fair.c:123:
+	s64 delta = (s64)(vruntime - min_vruntime);
+	if (delta > 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#11199: FILE: kernel/sched_fair.c:132:
+	s64 delta = (s64)(vruntime - min_vruntime);
+	if (delta < 0)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#11289: FILE: kernel/sched_fair.c:222:
+		struct file *filp, void __user *buffer, size_t *lenp,
 		             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11289: FILE: kernel/sched_fair.c:222:
+int sched_nr_latency_handler(struct ctl_table *table, int write,
+		struct file *filp, void __user *buffer, size_t *lenp,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#11292: FILE: kernel/sched_fair.c:225:
+	int ret = proc_dointvec_minmax(table, write, filp, buffer, lenp, ppos);
 	                                             ^^^^

WARNING:MINMAX: max() should probably be max_t(u64, delta_exec, curr->exec_max)
#11378: FILE: kernel/sched_fair.c:311:
+	schedstat_set(curr->exec_max, max((u64)delta_exec, curr->exec_max));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11385: FILE: kernel/sched_fair.c:318:
+		delta_exec_weighted = calc_delta_fair(delta_exec_weighted,
+							&curr->load);

CHECK:BRACES: braces {} should be used on all arms of this statement
#11393: FILE: kernel/sched_fair.c:326:
+	if (first_fair(cfs_rq)) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11395: FILE: kernel/sched_fair.c:328:
+		vruntime = min_vruntime(curr->vruntime,
+				__pick_next_entity(cfs_rq)->vruntime);

CHECK:BRACES: Unbalanced braces around else statement
#11396: FILE: kernel/sched_fair.c:329:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11446: FILE: kernel/sched_fair.c:379:
+	schedstat_set(se->wait_max, max(se->wait_max,
+			rq_of(cfs_rq)->clock - se->wait_start));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#11543: FILE: kernel/sched_fair.c:476:
+	if (d > 3*sysctl_sched_latency)
 	         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#11555: FILE: kernel/sched_fair.c:488:
+	if (sched_feat(TREE_AVG)) {
[...]
+	} else if (sched_feat(APPROX_AVG) && cfs_rq->nr_running)
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#11557: FILE: kernel/sched_fair.c:490:
+		struct sched_entity *last = __pick_last_entity(cfs_rq);
+		if (last) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#11562: FILE: kernel/sched_fair.c:495:
+		vruntime += sched_vslice(cfs_rq)/2;
 		                                ^

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#11574: FILE: kernel/sched_fair.c:507:
+		/* sleeps upto a single latency don't count. */
 		          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11576: FILE: kernel/sched_fair.c:509:
+		if (sched_feat(NEW_FAIR_SLEEPERS) && entity_is_task(se) &&
+				task_of(se)->policy != SCHED_BATCH)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#11669: FILE: kernel/sched_fair.c:602:
+	if (rq_of(cfs_rq)->load.weight >= 2*se->load.weight) {
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11671: FILE: kernel/sched_fair.c:604:
+		se->slice_max = max(se->slice_max,
+			se->sum_exec_runtime - se->prev_sum_exec_runtime);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'se' - possible side-effects?
#11725: FILE: kernel/sched_fair.c:658:
+#define for_each_sched_entity(se) \
+		for (; se; se = se->parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#11754: FILE: kernel/sched_fair.c:687:
+#define for_each_leaf_cfs_rq(rq, cfs_rq) \
+	list_for_each_entry_rcu(cfs_rq, &rq->leaf_cfs_rq_list, leaf_cfs_rq_list)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'se' - possible side-effects?
#11776: FILE: kernel/sched_fair.c:709:
+#define for_each_sched_entity(se) \
+		for (; se; se = NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#11803: FILE: kernel/sched_fair.c:736:
+#define for_each_leaf_cfs_rq(rq, cfs_rq) \
+		for (cfs_rq = &rq->cfs; cfs_rq; cfs_rq = NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cfs_rq' - possible side-effects?
#11803: FILE: kernel/sched_fair.c:736:
+#define for_each_leaf_cfs_rq(rq, cfs_rq) \
+		for (cfs_rq = &rq->cfs; cfs_rq; cfs_rq = NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#12045: FILE: kernel/sched_fair.c:978:
+ ^I^I * 'group_weight' is contributed by tasks of total weight$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#12045: FILE: kernel/sched_fair.c:978:
+ ^I^I * 'group_weight' is contributed by tasks of total weight$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#12049: FILE: kernel/sched_fair.c:982:
+^I^I * ^Imaxload = (remload / group_weight) * task_load;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#12056: FILE: kernel/sched_fair.c:989:
+		per_task_load = task_load/busy_cfs_rq->nr_running;
 		                         ^

WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#12058: FILE: kernel/sched_fair.c:991:
+		/* balance_tasks will try to forcibly move atleast one task if
 		                                           ^^^^^^^

WARNING:TABSTOP: Statements should start on a tabstop
#12062: FILE: kernel/sched_fair.c:995:
+		 if (100 * maxload < GROUP_IMBALANCE_PCT * per_task_load)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12076: FILE: kernel/sched_fair.c:1009:
+		load_moved = balance_tasks(this_rq, this_cpu, busiest,
+					       maxload, sd, idle, all_pinned,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#12083: FILE: kernel/sched_fair.c:1016:
+^I^I * ^Iload_moved_eff = load_moved/task_load * group_weight;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#12123: FILE: kernel/sched_fair.c:1056:
+		if (iter_move_one_task(this_rq, this_cpu, busiest, sd, idle,
[...]
+		    return 1;

WARNING:TABSTOP: Statements should start on a tabstop
#12125: FILE: kernel/sched_fair.c:1058:
+		    return 1;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#12146: FILE: kernel/sched_fair.c:1079:
+#define swap(a, b) do { typeof(a) tmp = (a); (a) = (b); (b) = tmp; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#12146: FILE: kernel/sched_fair.c:1079:
+#define swap(a, b) do { typeof(a) tmp = (a); (a) = (b); (b) = tmp; } while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12168: FILE: kernel/sched_fair.c:1101:
+	if (sysctl_sched_child_runs_first && this_cpu == task_cpu(p) &&
+			curr && curr->vruntime < se->vruntime) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#12237: FILE: kernel/sched_idletask.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#12267: FILE: kernel/sched_idletask.c:31:
+	printk(KERN_ERR "bad: scheduling from the idle thread!\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#12331: FILE: kernel/sched_rt.c:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#12484: FILE: kernel/sched_rt.c:154:
+		int next_idx = find_next_bit(array->bitmap, MAX_RT_PRIO, idx+1);
 		                                                            ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#12595: FILE: kernel/sched_stats.h:1:
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12618: FILE: kernel/sched_stats.h:24:
+		seq_printf(seq,
+		    "cpu%d %u %u %u %u %u %u %u %u %u %llu %llu %lu",

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#12626: FILE: kernel/sched_stats.h:32:
+		seq_printf(seq, "\n");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#12635: FILE: kernel/sched_stats.h:41:
+			cpumask_scnprintf(mask_str, NR_CPUS, sd->span);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12640: FILE: kernel/sched_stats.h:46:
+				seq_printf(seq, " %u %u %u %u %u %u %u %u",
+				    sd->lb_count[itype],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12650: FILE: kernel/sched_stats.h:56:
+			seq_printf(seq, " %u %u %u %u %u %u %u %u %u %u %u %u\n",
+			    sd->alb_count, sd->alb_failed, sd->alb_pushed,

CHECK:BRACES: braces {} should be used on all arms of this statement
#12672: FILE: kernel/sched_stats.h:78:
+	if (!res) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#12676: FILE: kernel/sched_stats.h:82:
+	} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#12709: FILE: kernel/sched_stats.h:115:
+}
+# define schedstat_inc(rq, field)	do { (rq)->field++; } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#12709: FILE: kernel/sched_stats.h:115:
+# define schedstat_inc(rq, field)	do { (rq)->field++; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#12709: FILE: kernel/sched_stats.h:115:
+# define schedstat_inc(rq, field)	do { (rq)->field++; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#12710: FILE: kernel/sched_stats.h:116:
+# define schedstat_add(rq, field, amt)	do { (rq)->field += (amt); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#12710: FILE: kernel/sched_stats.h:116:
+# define schedstat_add(rq, field, amt)	do { (rq)->field += (amt); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#12711: FILE: kernel/sched_stats.h:117:
+# define schedstat_set(var, val)	do { var = (val); } while (0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#12820: FILE: kernel/sched_stats.h:226:
+}
+static inline void

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#13096: FILE: kernel/user.c:62:
+static inline void uid_hash_insert(struct user_struct *up,
+						struct hlist_head *hashent)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#13182: FILE: kernel/user.c:139:
+	sscanf(buffer, "%lu", &shares);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#13182: FILE: kernel/user.c:139:
+	sscanf(buffer, "%lu", &shares);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#13186: FILE: kernel/user.c:143:
+	return (rc ? rc : size);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#13227: FILE: kernel/user.c:184:
+ * ^I"/sys/kernel/uids" directory$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#13228: FILE: kernel/user.c:185:
+ * ^I"/sys/kernel/uids/0" directory (for root user)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#13229: FILE: kernel/user.c:186:
+ * ^I"/sys/kernel/uids/0/cpu_share" file (for root user)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#13362: FILE: kernel/user.c:317:
+struct user_struct * alloc_uid(struct user_namespace *ns, uid_t uid)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#13438: FILE: kernel/user.c:434:
+	struct hlist_node *nd;
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#13449: FILE: kernel/user.c:445:
+			nd = head->first;
 			^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#13450: FILE: kernel/user.c:446:
+			hlist_del_init(nd);
 			               ^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#13479: FILE: kernel/user_namespace.c:1:
+/*

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#13498: FILE: kernel/user_namespace.c:20:
+EXPORT_SYMBOL_GPL(init_user_ns);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ns)...) over kmalloc(sizeof(struct user_namespace)...)
#13513: FILE: kernel/user_namespace.c:35:
+	ns = kmalloc(sizeof(struct user_namespace), GFP_KERNEL);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#13541: FILE: kernel/user_namespace.c:63:
+struct user_namespace * copy_user_ns(int flags, struct user_namespace *old_ns)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#13545: FILE: kernel/user_namespace.c:67:
+	BUG_ON(!old_ns);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#13575: FILE: lib/Kconfig.debug:108:
+config SCHED_DEBUG
+	bool "Collect scheduler debugging info"
+	depends on DEBUG_KERNEL && PROC_FS
+	default y
+	help
+	  If you say Y here, the /proc/sched_debug file will be provided
+	  that can help debug the scheduler. The runtime overhead of this
+	  option is minimal.
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#13656: FILE: mm/page_alloc.c:1838:
+		struct zone *zone = &pgdat->node_zones[zone_type];
+		if (zone->present_pages)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000296765.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 32 errors, 218 warnings, 172 checks, 12500 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000296765.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
