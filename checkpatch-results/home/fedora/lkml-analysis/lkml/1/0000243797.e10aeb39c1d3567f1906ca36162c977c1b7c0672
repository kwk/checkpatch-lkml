WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
Change some task->e?[ug]id to task_e?[ug]id().  In some places it makes more

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#163: FILE: arch/ia64/kernel/perfmon.c:2420:
+	return (uid != task->euid)
+	    || (uid != task->suid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#164: FILE: arch/ia64/kernel/perfmon.c:2421:
+	    || (uid != task->suid)
+	    || (uid != task->uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#165: FILE: arch/ia64/kernel/perfmon.c:2422:
+	    || (uid != task->uid)
+	    || (gid != task->egid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#166: FILE: arch/ia64/kernel/perfmon.c:2423:
+	    || (gid != task->egid)
+	    || (gid != task->sgid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#167: FILE: arch/ia64/kernel/perfmon.c:2424:
+	    || (gid != task->sgid)
+	    || (gid != task->gid)) && !capable(CAP_SYS_PTRACE);

ERROR:SPACING: space prohibited after that '&&' (ctx:WxW)
#167: FILE: arch/ia64/kernel/perfmon.c:2424:
+	    || (gid != task->gid)) && !capable(CAP_SYS_PTRACE);
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#267: FILE: arch/x86/mm/fault.c:397:
 				"NX-protected page - exploit attempt? "
+				"(uid: %d)\n", current_uid());

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#309: FILE: drivers/char/tty_audit.c:92:
 		audit_log_format(ab, "tty pid=%u uid=%u auid=%u ses=%u "
+				 "major=%d minor=%d comm=",

CHECK:SPACING: No space is necessary after a cast
#503: FILE: fs/binfmt_elf_fdpic.c:589:
+	NEW_AUX_ENT(AT_UID,	(elf_addr_t) current_uid());

CHECK:SPACING: No space is necessary after a cast
#504: FILE: fs/binfmt_elf_fdpic.c:590:
+	NEW_AUX_ENT(AT_EUID,	(elf_addr_t) current_euid());

CHECK:SPACING: No space is necessary after a cast
#505: FILE: fs/binfmt_elf_fdpic.c:591:
+	NEW_AUX_ENT(AT_GID,	(elf_addr_t) current_gid());

CHECK:SPACING: No space is necessary after a cast
#506: FILE: fs/binfmt_elf_fdpic.c:592:
+	NEW_AUX_ENT(AT_EGID,	(elf_addr_t) current_egid());

WARNING:SPLIT_STRING: quoted string split across lines
#628: FILE: fs/ecryptfs/messaging.c:494:
 		printk(KERN_ERR "%s: User [%d] does not have a daemon "
+		       "registered\n", __func__, euid);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#703: FILE: fs/ecryptfs/miscdev.c:297:
+	BUG_ON(euid != daemon->euid);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#809: FILE: fs/fcntl.c:214:
+	f_modown(filp, pid, type, current_uid(), current_euid(), force);
 	         ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#910: FILE: fs/ncpfs/ioctl.c:44:
+	if (file_permission(file, MAY_WRITE) != 0
+	    && current_uid() != server->m.mounted_uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#924: FILE: fs/ncpfs/ioctl.c:74:
+	if (file_permission(file, MAY_WRITE) != 0
+	    && current_uid() != server->m.mounted_uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#938: FILE: fs/ncpfs/ioctl.c:145:
+	if (file_permission(file, MAY_WRITE) != 0
+	    && current_uid() != server->m.mounted_uid)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#958: FILE: fs/ncpfs/ioctl.c:280:
+		if (file_permission(filp, MAY_WRITE) != 0
 		                    ^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#959: FILE: fs/ncpfs/ioctl.c:281:
+		if (file_permission(filp, MAY_WRITE) != 0
+		    && uid != server->m.mounted_uid)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#972: FILE: fs/ncpfs/ioctl.c:360:
+		if (file_permission(filp, MAY_READ) != 0
 		                    ^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#973: FILE: fs/ncpfs/ioctl.c:361:
+		if (file_permission(filp, MAY_READ) != 0
+			&& uid != server->m.mounted_uid)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#987: FILE: fs/ncpfs/ioctl.c:384:
+			if (file_permission(filp, MAY_READ) != 0
 			                    ^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#988: FILE: fs/ncpfs/ioctl.c:385:
+			if (file_permission(filp, MAY_READ) != 0
+			    && uid != server->m.mounted_uid)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1010: FILE: fs/ncpfs/ioctl.c:459:
+		if (file_permission(filp, MAY_WRITE) != 0
 		                    ^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1011: FILE: fs/ncpfs/ioctl.c:460:
+		if (file_permission(filp, MAY_WRITE) != 0
+		    && uid != server->m.mounted_uid)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1025: FILE: fs/ncpfs/ioctl.c:481:
+		if (file_permission(filp, MAY_READ) != 0
 		                    ^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1026: FILE: fs/ncpfs/ioctl.c:482:
+		if (file_permission(filp, MAY_READ) != 0
+		    && uid != server->m.mounted_uid)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1041: FILE: fs/ncpfs/ioctl.c:493:
+			if (file_permission(filp, MAY_WRITE) != 0
 			                    ^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1042: FILE: fs/ncpfs/ioctl.c:494:
+			if (file_permission(filp, MAY_WRITE) != 0
+			    && uid != server->m.mounted_uid)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1056: FILE: fs/ncpfs/ioctl.c:513:
+		if (file_permission(filp, MAY_WRITE) != 0
 		                    ^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1057: FILE: fs/ncpfs/ioctl.c:514:
+		if (file_permission(filp, MAY_WRITE) != 0
+		    && uid != server->m.mounted_uid)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1142: FILE: fs/ncpfs/ioctl.c:793:
+		if (file_permission(filp, MAY_WRITE) != 0 &&
 		                    ^^^^

ERROR:SPACING: space required before the open parenthesis '('
#1269: FILE: include/linux/cred.h:36:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1275: FILE: include/linux/cred.h:42:
+} while(0)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1345: FILE: ipc/util.c:278:
+	new->cuid = new->uid = euid;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1346: FILE: ipc/util.c:279:
+	new->gid = new->cgid = egid;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1513: FILE: kernel/futex_compat.c:155:
+		if (euid != p->euid && euid != p->uid &&
 				!capable(CAP_SYS_PTRACE))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1676: FILE: kernel/sys.c:181:
+				if (who != current_uid() && !(user = find_user(who)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1696: FILE: kernel/sys.c:243:
+				if (who != current_uid() && !(user = find_user(who)))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2061: FILE: security/commoncap.c:476:
+	if (old_euid == 0 && euid != 0) {
 		cap_clear (current->cap_effective);
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2065: FILE: security/commoncap.c:479:
+	if (old_euid != 0 && euid == 0) {
 		current->cap_effective = current->cap_permitted;
 	}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243797.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 16 warnings, 22 checks, 1528 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243797.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
