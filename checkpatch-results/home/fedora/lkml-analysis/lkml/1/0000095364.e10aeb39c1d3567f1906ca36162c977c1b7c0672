CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#233: FILE: mm/ksm.c:144:
+};
+static struct ksm_scan ksm_scan = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__struct' - possible side-effects?
#264: FILE: mm/ksm.c:175:
+#define KSM_KMEM_CACHE(__struct, __flags) kmem_cache_create("ksm_"#__struct,\
+		sizeof(struct __struct), __alignof__(struct __struct),\
+		(__flags), NULL)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#318: FILE: mm/ksm.c:229:
+	mm_slots_hash = kzalloc(MM_SLOTS_HASH_HEADS * sizeof(struct hlist_head),
+				GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: mm/ksm.c:296:
+			ret = handle_mm_fault(vma->vm_mm, vma, addr,
+							FAULT_FLAG_WRITE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: mm/ksm.c:391:
+			BUG_ON(prev_item->next != rmap_item);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#483: FILE: mm/ksm.c:394:
+				BUG_ON(next_item->prev != rmap_item);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#506: FILE: mm/ksm.c:417:
+		BUG_ON(age > 2);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#597: FILE: mm/ksm.c:508:
+		ksm_scan.mm_slot = list_entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#600: FILE: mm/ksm.c:511:
+		ksm_scan.rmap_item = list_entry(

WARNING:LINE_SPACING: Missing a blank line after declarations
#619: FILE: mm/ksm.c:530:
+	void *addr = kmap_atomic(page, KM_USER0);
+	checksum = jhash2(addr, PAGE_SIZE / 4, 17);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#648: FILE: mm/ksm.c:559:
+	spinlock_t *ptl;

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#666: FILE: mm/ksm.c:577:
+		 * Ok this is tricky, when get_user_pages_fast() run it doesnt
 		                                                        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#712: FILE: mm/ksm.c:623:
+	spinlock_t *ptl;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#938: FILE: mm/ksm.c:849:
+			BUG_ON(!in_stable_tree(tree_rmap_item));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#993: FILE: mm/ksm.c:904:
+			BUG_ON(!in_stable_tree(tree_rmap_item));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1055: FILE: mm/ksm.c:966:
+static struct rmap_item *unstable_tree_search_insert(struct page *page,
+						struct page **page2,

CHECK:BRACES: Unbalanced braces around else statement
#1144: FILE: mm/ksm.c:1055:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1199: FILE: mm/ksm.c:1110:
+			if (stable_tree_insert(page2[0], tree_rmap_item))
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1201: FILE: mm/ksm.c:1112:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1203: FILE: mm/ksm.c:1114:
+				break_cow(tree_rmap_item->mm,
+						tree_rmap_item->address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1284: FILE: mm/ksm.c:1195:
+				rmap_item = get_next_rmap_item(slot,
+					ksm_scan.rmap_item->link.next,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1286: FILE: mm/ksm.c:1197:
+				if (rmap_item) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1289: FILE: mm/ksm.c:1200:
+				} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1368: FILE: mm/ksm.c:1279:
+			schedule_timeout_interruptible(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1372: FILE: mm/ksm.c:1283:
+			wait_event_interruptible(ksm_thread_wait,
+					(ksm_run & KSM_RUN_MERGE) ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#1398: FILE: mm/ksm.c:1330:
+	struct mm_slot *mm_slot = alloc_mm_slot();
+	if (!mm_slot)

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1448: FILE: mm/ksm.c:1378:
+	err = strict_strtoul(buf, 10, &msecs);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1471: FILE: mm/ksm.c:1401:
+	err = strict_strtoul(buf, 10, &nr_pages);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1493: FILE: mm/ksm.c:1423:
+	err = strict_strtoul(buf, 10, &flags);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1544: FILE: mm/ksm.c:1474:
+	err = strict_strtoul(buf, 10, &nr_pages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1590: FILE: mm/ksm.c:1520:
+		printk(KERN_ERR "ksm: creating kthread failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1597: FILE: mm/ksm.c:1527:
+		printk(KERN_ERR "ksm: register sysfs failed\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000095364.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 17 checks, 1522 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000095364.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
