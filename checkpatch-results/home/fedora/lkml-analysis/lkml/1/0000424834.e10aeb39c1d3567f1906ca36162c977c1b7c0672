WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#108: FILE: include/linux/rmap.h:74:
+void page_add_anon_rmap(struct page *, struct vm_area_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#108: FILE: include/linux/rmap.h:74:
+void page_add_anon_rmap(struct page *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#108: FILE: include/linux/rmap.h:74:
+void page_add_anon_rmap(struct page *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page_container *' should also have an identifier name
#108: FILE: include/linux/rmap.h:74:
+void page_add_anon_rmap(struct page *, struct vm_area_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#109: FILE: include/linux/rmap.h:75:
+void page_add_anon_rmap(struct page *, struct vm_area_struct *,
+		unsigned long, struct page_container *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#110: FILE: include/linux/rmap.h:76:
+void page_add_new_anon_rmap(struct page *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#110: FILE: include/linux/rmap.h:76:
+void page_add_new_anon_rmap(struct page *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#110: FILE: include/linux/rmap.h:76:
+void page_add_new_anon_rmap(struct page *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page_container *' should also have an identifier name
#110: FILE: include/linux/rmap.h:76:
+void page_add_new_anon_rmap(struct page *, struct vm_area_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: include/linux/rmap.h:77:
+void page_add_new_anon_rmap(struct page *, struct vm_area_struct *,
+		unsigned long, struct page_container *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#112: FILE: include/linux/rmap.h:78:
+void page_add_file_rmap(struct page *, struct page_container *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page_container *' should also have an identifier name
#112: FILE: include/linux/rmap.h:78:
+void page_add_file_rmap(struct page *, struct page_container *);

CHECK:BRACES: Unbalanced braces around else statement
#175: FILE: mm/memory.c:1793:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#473: FILE: mm/rmap.c:617:
+	if (atomic_inc_and_test(&page->_mapcount)) {
[...]
+	} else if (pcont)
[...]

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000424834.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 4 checks, 452 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000424834.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
