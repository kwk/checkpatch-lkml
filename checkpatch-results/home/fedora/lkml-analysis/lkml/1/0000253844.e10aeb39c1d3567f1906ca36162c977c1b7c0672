WARNING:TYPO_SPELLING: 'desactivate' may be misspelled - perhaps 'deactivate'?
#23: 
Subject: [PATCH -mm v2 3/3] sysv ipc: use auto_msgmnb to desactivate and
                                                         ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: include/linux/ipc_namespace.h:61:
+extern int register_ipcns_notifier_msgmnb(struct ipc_namespace *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_namespace *' should also have an identifier name
#69: FILE: include/linux/ipc_namespace.h:61:
+extern int register_ipcns_notifier_msgmnb(struct ipc_namespace *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/ipc_namespace.h:62:
+extern int cond_register_ipcns_notifier_msgmnb(struct ipc_namespace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_namespace *' should also have an identifier name
#70: FILE: include/linux/ipc_namespace.h:62:
+extern int cond_register_ipcns_notifier_msgmnb(struct ipc_namespace *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/ipc_namespace.h:63:
+extern void unregister_ipcns_notifier_msgmnb(struct ipc_namespace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_namespace *' should also have an identifier name
#71: FILE: include/linux/ipc_namespace.h:63:
+extern void unregister_ipcns_notifier_msgmnb(struct ipc_namespace *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: ipc/ipc_sysctl.c:56:
+	struct ipc_namespace *ns = current->nsproxy->ipc_ns;
+	if (!val)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#86: FILE: ipc/ipc_sysctl.c:56:
+	if (!val)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#88: FILE: ipc/ipc_sysctl.c:58:
+	else {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#135: FILE: ipc/ipc_sysctl.c:153:
+	struct file *filp, void __user *buffer, size_t *lenp, loff_t *ppos)
 	             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: ipc/ipc_sysctl.c:153:
+static int proc_ipcauto_dointvec_minmax_msgmnb(ctl_table *table, int write,
+	struct file *filp, void __user *buffer, size_t *lenp, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#146: FILE: ipc/ipc_sysctl.c:164:
+	rc = proc_dointvec_minmax(&ipc_table, write, filp, buffer, lenp, ppos);
 	                                             ^^^^

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#206: FILE: ipc/ipc_sysctl.c:342:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'one', consider using the shared one in include/linux/sysctl.h
#207: FILE: ipc/ipc_sysctl.c:343:
+		.extra2		= &one,

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#222: FILE: ipc/ipcns_notifier.c:33:
+			ipc_recompute_msgmnb(ns); /* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: ipc/ipcns_notifier.c:95:
+static int ipcns_callback_msgmnb(struct notifier_block *self,
+				unsigned long action, void *arg)

WARNING:LINE_SPACING: Missing a blank line after declarations
#245: FILE: ipc/ipcns_notifier.c:98:
+	struct ipc_namespace *ns;
+	ns = container_of(self, struct ipc_namespace, ipcns_nb_msgmnb);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#249: FILE: ipc/ipcns_notifier.c:102:
+			ipc_recompute_msgmnb(ns); /* Fall through */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: ipc/ipcns_notifier.c:138:
+	rc = blocking_notifier_chain_cond_register(&ipcns_chain,
+							&ns->ipcns_nb_msgmnb);

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#359: FILE: Documentation/sysctl/kernel.txt:205:
+. When disabled, the automatic recomputation can be reenabled via
                                                     ^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000253844.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 8 checks, 290 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000253844.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
