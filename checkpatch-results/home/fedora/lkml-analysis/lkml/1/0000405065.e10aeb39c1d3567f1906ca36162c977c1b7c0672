WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#62: FILE: drivers/s390/char/Kconfig:167:
+config S390_VMUR
+	tristate "z/VM unit record device driver"
+	default "m"
+	help
+	  Character device driver for z/VM reader, puncher and printer.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#85: FILE: drivers/s390/char/vmur.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#97: FILE: drivers/s390/char/vmur.c:13:
+#include <asm/uaccess.h>

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#119: FILE: drivers/s390/char/vmur.c:35:
+static char ur_banner[] = "z/VM virtual unit record device driver";

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*urd)...) over kzalloc(sizeof(struct urdev)...)
#162: FILE: drivers/s390/char/vmur.c:78:
+	urd = kzalloc(sizeof(struct urdev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#224: FILE: drivers/s390/char/vmur.c:140:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_chan_prog', this function's name, in a string
#243: FILE: drivers/s390/char/vmur.c:159:
+	TRACE("alloc_chan_prog(%p, %zu, %zu)\n", buf, count, reclen);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#251: FILE: drivers/s390/char/vmur.c:167:
+	cpa = kmalloc(num_ccws * sizeof(struct ccw1), GFP_KERNEL | GFP_DMA);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_ur_io', this function's name, in a string
#278: FILE: drivers/s390/char/vmur.c:194:
+	TRACE("do_ur_io: cpa=%p\n", cpa);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_ur_io', this function's name, in a string
#290: FILE: drivers/s390/char/vmur.c:206:
+	TRACE("do_ur_io: ccw_device_start returned %d\n", rc);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_ur_io', this function's name, in a string
#295: FILE: drivers/s390/char/vmur.c:211:
+	TRACE("do_ur_io: I/O complete\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_int_handler', this function's name, in a string
#311: FILE: drivers/s390/char/vmur.c:227:
+	TRACE("ur_int_handler: intparm=0x%lx cstat=%02x dstat=%02x res=%u\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_int_handler', this function's name, in a string
#315: FILE: drivers/s390/char/vmur.c:231:
+		TRACE("ur_int_handler: unsolicited interrupt\n");

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ur_attr_reclen_show' to 'reclen_show'
#339: FILE: drivers/s390/char/vmur.c:255:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#371: FILE: drivers/s390/char/vmur.c:287:
+		return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*urf)...) over kzalloc(sizeof(struct urfile)...)
#388: FILE: drivers/s390/char/vmur.c:304:
+	urf = kzalloc(sizeof(struct urfile), GFP_KERNEL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'urfile_alloc', this function's name, in a string
#393: FILE: drivers/s390/char/vmur.c:309:
+	TRACE("urfile_alloc: urd=%p urf=%p rl=%zu\n", urd, urf,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'urfile_free', this function's name, in a string
#401: FILE: drivers/s390/char/vmur.c:317:
+	TRACE("urfile_free: urf=%p urd=%p\n", urf, urf->urd);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_write', this function's name, in a string
#453: FILE: drivers/s390/char/vmur.c:369:
+	TRACE("ur_write: count=%zu\n", count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#474: FILE: drivers/s390/char/vmur.c:390:
+	asm volatile(

CHECK:SPACING: No space is necessary after a cast
#528: FILE: drivers/s390/char/vmur.c:444:
+	cc = do_diag_14((unsigned long) buf, devno, 0x00);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#550: FILE: drivers/s390/char/vmur.c:466:
+	urd = ((struct urfile *) file->private_data)->urd;

CHECK:SPACING: No space is necessary after a cast
#551: FILE: drivers/s390/char/vmur.c:467:
+	reclen = ((struct urfile *) file->private_data)->file_reclen;

CHECK:SPACING: No space is necessary after a cast
#559: FILE: drivers/s390/char/vmur.c:475:
+	len = min((size_t) PAGE_SIZE, count);

WARNING:MINMAX: min() should probably be min_t(size_t, PAGE_SIZE, count)
#559: FILE: drivers/s390/char/vmur.c:475:
+	len = min((size_t) PAGE_SIZE, count);

CHECK:SPACING: No space is necessary after a cast
#565: FILE: drivers/s390/char/vmur.c:481:
+	res = (size_t) (*offs % PAGE_SIZE);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#568: FILE: drivers/s390/char/vmur.c:484:
+		if (rc == -ENODATA) {
+			break;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#574: FILE: drivers/s390/char/vmur.c:490:
+			*((u16 *) &buf[FILE_RECLEN_OFFSET]) = reclen;

CHECK:SPACING: No space is necessary after a cast
#597: FILE: drivers/s390/char/vmur.c:513:
+	TRACE("ur_read: count=%zu ppos=%li\n", count, (unsigned long) *offs);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_read', this function's name, in a string
#597: FILE: drivers/s390/char/vmur.c:513:
+	TRACE("ur_read: count=%zu ppos=%li\n", count, (unsigned long) *offs);

CHECK:SPACING: No space is necessary after a cast
#602: FILE: drivers/s390/char/vmur.c:518:
+	urd = ((struct urfile *) file->private_data)->urd;

CHECK:SPACING: No space is necessary after a cast
#621: FILE: drivers/s390/char/vmur.c:537:
+	cc = do_diag_14((unsigned long) buf, spid, 0xfff);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc != 0'
#652: FILE: drivers/s390/char/vmur.c:568:
+		if ((rc != 0) && (rc != -ENODATA)) /* EOF does not hurt */

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#656: FILE: drivers/s390/char/vmur.c:572:
+		return -ENOTSUPP;

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#674: FILE: drivers/s390/char/vmur.c:590:
+		return -ENOTSUPP;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_open', this function's name, in a string
#717: FILE: drivers/s390/char/vmur.c:633:
+	TRACE("ur_open\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'accmode == O_RDONLY'
#719: FILE: drivers/s390/char/vmur.c:635:
+	if (((accmode == O_RDONLY) && (urd->class != DEV_CLASS_UR_I)) ||
+	    ((accmode == O_WRONLY) && (urd->class != DEV_CLASS_UR_O))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'urd->class != DEV_CLASS_UR_I'
#719: FILE: drivers/s390/char/vmur.c:635:
+	if (((accmode == O_RDONLY) && (urd->class != DEV_CLASS_UR_I)) ||
+	    ((accmode == O_WRONLY) && (urd->class != DEV_CLASS_UR_O))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'accmode == O_WRONLY'
#719: FILE: drivers/s390/char/vmur.c:635:
+	if (((accmode == O_RDONLY) && (urd->class != DEV_CLASS_UR_I)) ||
+	    ((accmode == O_WRONLY) && (urd->class != DEV_CLASS_UR_O))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'urd->class != DEV_CLASS_UR_O'
#719: FILE: drivers/s390/char/vmur.c:635:
+	if (((accmode == O_RDONLY) && (urd->class != DEV_CLASS_UR_I)) ||
+	    ((accmode == O_WRONLY) && (urd->class != DEV_CLASS_UR_O))) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_open', this function's name, in a string
#721: FILE: drivers/s390/char/vmur.c:637:
+		TRACE("ur_open: unsupported dev class (%d)\n", urd->class);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_release', this function's name, in a string
#757: FILE: drivers/s390/char/vmur.c:673:
+	TRACE("ur_release\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#786: FILE: drivers/s390/char/vmur.c:702:
+static struct file_operations ur_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: No space is necessary after a cast
#808: FILE: drivers/s390/char/vmur.c:724:
+	TRACE("ur_probe: cdev=%p state=%d\n", cdev, *(int *) cdev->private);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_probe', this function's name, in a string
#808: FILE: drivers/s390/char/vmur.c:724:
+	TRACE("ur_probe: cdev=%p state=%d\n", cdev, *(int *) cdev->private);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'urd->class != DEV_CLASS_UR_I'
#832: FILE: drivers/s390/char/vmur.c:748:
+	if ((urd->class != DEV_CLASS_UR_I) && (urd->class != DEV_CLASS_UR_O)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'urd->class != DEV_CLASS_UR_O'
#832: FILE: drivers/s390/char/vmur.c:748:
+	if ((urd->class != DEV_CLASS_UR_I) && (urd->class != DEV_CLASS_UR_O)) {

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#833: FILE: drivers/s390/char/vmur.c:749:
+		rc = -ENOTSUPP;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_remove', this function's name, in a string
#849: FILE: drivers/s390/char/vmur.c:765:
+	TRACE("ur_remove\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_set_online', this function's name, in a string
#863: FILE: drivers/s390/char/vmur.c:779:
+	TRACE("ur_set_online: cdev=%p state=%d\n", cdev,

CHECK:SPACING: No space is necessary after a cast
#864: FILE: drivers/s390/char/vmur.c:780:
+	      *(int *) cdev->private);

CHECK:SPACING: No space is necessary after a cast
#869: FILE: drivers/s390/char/vmur.c:785:
+	urd = (struct urdev *) cdev->dev.driver_data;

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#894: FILE: drivers/s390/char/vmur.c:810:
+		rc = -ENOTSUPP;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: drivers/s390/char/vmur.c:815:
+	urd->device = device_create(vmur_class, NULL, urd->char_device->dev,
+					"%s", node_id);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_set_online', this function's name, in a string
#902: FILE: drivers/s390/char/vmur.c:818:
+		TRACE("ur_set_online: device_create rc=%d\n", rc);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ur_set_offline', this function's name, in a string
#920: FILE: drivers/s390/char/vmur.c:836:
+	TRACE("ur_set_offline: cdev=%p cdev->private=%p state=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#921: FILE: drivers/s390/char/vmur.c:837:
+	TRACE("ur_set_offline: cdev=%p cdev->private=%p state=%d\n",
+		cdev, cdev->private, *(int *) cdev->private);

CHECK:SPACING: No space is necessary after a cast
#921: FILE: drivers/s390/char/vmur.c:837:
+		cdev, cdev->private, *(int *) cdev->private);

CHECK:SPACING: No space is necessary after a cast
#922: FILE: drivers/s390/char/vmur.c:838:
+	urd = (struct urdev *) cdev->dev.driver_data;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#996: FILE: drivers/s390/char/vmur.h:1:
+/*

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1046: FILE: drivers/s390/char/vmur.h:51:
+} __attribute__ ((packed));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000405065.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 34 warnings, 27 checks, 1033 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000405065.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
