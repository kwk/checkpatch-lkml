WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#29: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#34: FILE: lib/btree.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#35: FILE: lib/btree.c:2:
+ * lib/btree.c	- Simple In-memory B+Tree

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'excercise' may be misspelled - perhaps 'exercise'?
#47: FILE: lib/btree.c:14:
+ * excercise to understand how B+Trees work.  Turned out to be useful as well.
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#81: FILE: lib/btree.c:48:
+#define MAX(a, b) ((a) > (b) ? (a) : (b))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#81: FILE: lib/btree.c:48:
+#define MAX(a, b) ((a) > (b) ? (a) : (b))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#103: FILE: lib/btree.c:70:
+EXPORT_SYMBOL_GPL(btree_geo64);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: lib/btree.c:116:
+static unsigned long *longcpy(unsigned long *dest, const unsigned long *src,
+		size_t n)

CHECK:SPACING: No space is necessary after a cast
#199: FILE: lib/btree.c:166:
+	node[geo->no_longs + n] = (unsigned long) val;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: lib/btree.c:240:
+void *btree_lookup(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key)

CHECK:BRACES: braces {} should be used on all arms of this statement
#377: FILE: lib/btree.c:344:
+			if (bval(geo, node, i)) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#380: FILE: lib/btree.c:347:
+				return bval(geo, node, i);
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#380: FILE: lib/btree.c:347:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: lib/btree.c:361:
+static int getpos(struct btree_geo *geo, unsigned long *node,
+		unsigned long *key)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: lib/btree.c:386:
+static unsigned long *find_level(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, int level)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == geo->no_pairs'
#429: FILE: lib/btree.c:396:
+		if ((i == geo->no_pairs) || !bval(geo, node, i)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#432: FILE: lib/btree.c:399:
+			 * always zero, this wouldn't be necessary. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#436: FILE: lib/btree.c:403:
+		BUG_ON(i < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#439: FILE: lib/btree.c:406:
+	BUG_ON(!node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#472: FILE: lib/btree.c:439:
+	BUG_ON(fill > 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#485: FILE: lib/btree.c:452:
+	BUG_ON(!val);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#497: FILE: lib/btree.c:464:
+	BUG_ON(pos < fill && keycmp(geo, node, pos, key) == 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: lib/btree.c:474:
+		err = btree_insert_level(head, geo,
+				bkey(geo, node, fill / 2 - 1),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#527: FILE: lib/btree.c:494:
+	BUG_ON(fill >= geo->no_pairs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: lib/btree.c:508:
+int btree_insert(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, void *val, gfp_t gfp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: lib/btree.c:515:
+static void *btree_remove_level(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, int level);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: lib/btree.c:517:
+static void merge(struct btree_head *head, struct btree_geo *geo, int level,
+		unsigned long *left, int lfill,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: lib/btree.c:537:
+static void rebalance(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, int level, unsigned long *child, int fill)

WARNING:TYPO_SPELLING: 'neigbour' may be misspelled - perhaps 'neighbour'?
#576: FILE: lib/btree.c:543:
+		/* Because we don't steal entries from a neigbour, this case
 		                                         ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#587: FILE: lib/btree.c:554:
+	BUG_ON(bval(geo, parent, i) != child);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: lib/btree.c:561:
+			merge(head, geo, level,
+					left, no_left,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: lib/btree.c:572:
+			merge(head, geo, level,
+					child, fill,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#621: FILE: lib/btree.c:588:
+static void *btree_remove_level(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, int level)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level == 1'
#637: FILE: lib/btree.c:604:
+	if ((level == 1) && (keycmp(geo, node, pos, key) != 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: lib/btree.c:626:
+void *btree_remove(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#676: FILE: lib/btree.c:643:
+	BUG_ON(target == victim);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#697: FILE: lib/btree.c:664:
+		 * mangled inside btree_remove. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: lib/btree.c:688:
+			count = __btree_for_each(head, geo, child, opaque,
+					func, func2, reap, height - 1, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: lib/btree.c:691:
+			func(child, opaque, bkey(geo, node, i), count++,
+					func2);

ERROR:CODE_INDENT: code indent should use tabs where possible
#778: FILE: lib/btree.c:745:
+^I^I     ^I^I  unsigned long *key,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#778: FILE: lib/btree.c:745:
+^I^I     ^I^I  unsigned long *key,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: lib/btree.c:745:
+		     void (*func)(void *elem, unsigned long opaque,
+		     		  unsigned long *key,

ERROR:CODE_INDENT: code indent should use tabs where possible
#779: FILE: lib/btree.c:746:
+^I^I     ^I^I  size_t index, void *func2),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#779: FILE: lib/btree.c:746:
+^I^I     ^I^I  size_t index, void *func2),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#788: FILE: lib/btree.c:755:
+		count = __btree_for_each(head, geo, head->node, opaque, func,
+				func2, 0, head->height, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#806: FILE: lib/btree.c:773:
+		count = __btree_for_each(head, geo, head->node, opaque, func,
+				func2, 1, head->height, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: lib/btree.c:782:
+	btree_cachep = kmem_cache_create("btree_node", NODESIZE, 0,
+			SLAB_HWCACHE_ALIGN, NULL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045260.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 20 warnings, 26 checks, 797 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045260.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
