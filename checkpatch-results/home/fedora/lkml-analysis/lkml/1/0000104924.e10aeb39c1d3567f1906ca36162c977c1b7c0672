WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#55: FILE: drivers/mtd/devices/Kconfig:107:
+config MTD_SST25L
+	tristate "Support SST25L (non JEDEC) SPI Flash chips"
+	depends on SPI_MASTER
+	help
+	  This enables access to the non JEDEC SST25L SPI flash chips, used
+	  for program and data storage.
+
+	  Set up your spi devices with the right board-specific platform data,

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: drivers/mtd/devices/sst25l.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#126: FILE: drivers/mtd/devices/sst25l.c:44:
+#define SST25L_STATUS_BUSY	(1 << 0)	/* Chip is busy */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#127: FILE: drivers/mtd/devices/sst25l.c:45:
+#define SST25L_STATUS_WREN	(1 << 1)	/* Write enabled */

CHECK:BIT_MACRO: Prefer using the BIT macro
#128: FILE: drivers/mtd/devices/sst25l.c:46:
+#define SST25L_STATUS_BP0	(1 << 2)	/* Block protection 0 */

CHECK:BIT_MACRO: Prefer using the BIT macro
#129: FILE: drivers/mtd/devices/sst25l.c:47:
+#define SST25L_STATUS_BP1	(1 << 3)	/* Block protection 1 */

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#133: FILE: drivers/mtd/devices/sst25l.c:51:
+	struct mutex		lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#136: FILE: drivers/mtd/devices/sst25l.c:54:
+^Iint ^I^I^Ipartitioned;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#142: FILE: drivers/mtd/devices/sst25l.c:60:
+	unsigned		page_size;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#143: FILE: drivers/mtd/devices/sst25l.c:61:
+	unsigned		nr_pages;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#144: FILE: drivers/mtd/devices/sst25l.c:62:
+	unsigned		erase_size;

WARNING:MISPLACED_INIT: __initdata should be placed after sst25l_flash_info[]
#149: FILE: drivers/mtd/devices/sst25l.c:67:
+static struct flash_info __initdata sst25l_flash_info[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*flash)...) over kzalloc(sizeof(struct sst25l_flash)...)
#458: FILE: drivers/mtd/devices/sst25l.c:376:
+	flash = kzalloc(sizeof(struct sst25l_flash), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#479: FILE: drivers/mtd/devices/sst25l.c:397:
+^Iflash->mtd.write ^I= sst25l_write;$

WARNING:SPLIT_STRING: quoted string split across lines
#486: FILE: drivers/mtd/devices/sst25l.c:404:
+	      "mtd .name = %s, .size = 0x%llx (%lldMiB) "
+	      ".erasesize = 0x%.8x (%uKiB) .numeraseregions = %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#496: FILE: drivers/mtd/devices/sst25l.c:414:
+			      "mtd.eraseregions[%d] = { .offset = 0x%llx, "
+			      ".erasesize = 0x%.8x (%uKiB), "

WARNING:SPLIT_STRING: quoted string split across lines
#497: FILE: drivers/mtd/devices/sst25l.c:415:
+			      ".erasesize = 0x%.8x (%uKiB), "
+			      ".numblocks = %d }\n",

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#508: FILE: drivers/mtd/devices/sst25l.c:426:
+			static const char *part_probes[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#509: FILE: drivers/mtd/devices/sst25l.c:427:
+			static const char *part_probes[] =
+				{"cmdlinepart", NULL};

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#524: FILE: drivers/mtd/devices/sst25l.c:442:
+				DEBUG(MTD_DEBUG_LEVEL2, "partitions[%d] = "
+				      "{.name = %s, .offset = 0x%llx, "

WARNING:SPLIT_STRING: quoted string split across lines
#525: FILE: drivers/mtd/devices/sst25l.c:443:
+				      "{.name = %s, .offset = 0x%llx, "
+				      ".size = 0x%llx (%lldKiB) }\n",

WARNING:SPLIT_STRING: quoted string split across lines
#584: FILE: drivers/mtd/devices/sst25l.c:502:
+MODULE_AUTHOR("Andre Renaud <andre@bluewatersys.com>, "
+	      "Ryan Mallon <ryan@bluewatersys.com>");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104924.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 16 warnings, 6 checks, 523 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104924.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
