WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#75: FILE: include/linux/checkpoint_hdr.h:421:
+} __attribute__((aligned(8)));

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#124: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: ipc/checkpoint_sem.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: ipc/checkpoint_sem.c:33:
+static int fill_ipc_sem_hdr(struct ckpt_ctx *ctx,
+			       struct ckpt_hdr_ipc_sem *h,

WARNING:TYPO_SPELLING: 'semphore' may be misspelled - perhaps 'semaphore'?
#186: FILE: ipc/checkpoint_sem.c:58:
+ * @sem: semphore array
          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'sempahore' may be misspelled - perhaps 'semaphore'?
#188: FILE: ipc/checkpoint_sem.c:60:
+ * The state of a sempahore is an array of 'struct sem'. This structure
                   ^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#208: FILE: ipc/checkpoint_sem.c:80:
+	struct ckpt_ctx *ctx = (struct ckpt_ctx *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#209: FILE: ipc/checkpoint_sem.c:81:
+	struct kern_ipc_perm *perm = (struct kern_ipc_perm *) p;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: ipc/checkpoint_sem.c:111:
+static int load_ipc_sem_hdr(struct ckpt_ctx *ctx,
+			       struct ckpt_hdr_ipc_sem *h,

WARNING:TYPO_SPELLING: 'semphore' may be misspelled - perhaps 'semaphore'?
#260: FILE: ipc/checkpoint_sem.c:132:
+ * @sem: semphore array
          ^^^^^^^^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#272: FILE: ipc/checkpoint_sem.c:144:
+	sma = kmalloc(nsems * sizeof(*sma), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:TYPO_SPELLING: 'sempahore' may be misspelled - perhaps 'semaphore'?
#313: FILE: ipc/checkpoint_sem.c:185:
+	/* read sempahore array state */
 	        ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: ipc/checkpoint_sem.c:195:
+	ckpt_debug("sem: do_semget key %d flag %#x id %d\n",
+		 h->perms.key, semflag, h->perms.id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#333: FILE: ipc/checkpoint_sem.c:205:
+	BUG_ON(IS_ERR(perms));  /* ipc_ns is private to us */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#339: FILE: ipc/checkpoint_sem.c:211:
+	if (ret < 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#342: FILE: ipc/checkpoint_sem.c:214:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#409: FILE: ipc/util.h:200:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#418: FILE: ipc/util.h:214:
+extern int checkpoint_ipc_sem(int id, void *p, void *data);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#419: FILE: ipc/util.h:215:
+extern int restore_ipc_sem(struct ckpt_ctx *ctx, struct ipc_namespace *ns);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068240.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 10 checks, 325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068240.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
