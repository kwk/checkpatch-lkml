WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#47: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/linux/inet_lro.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#53: FILE: include/linux/inet_lro.h:2:
+ *  linux/include/linux/inet_lro.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#75: FILE: include/linux/inet_lro.h:24:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#76: FILE: include/linux/inet_lro.h:25:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#105: FILE: include/linux/inet_lro.h:54:
+^Iu16 tcp_saw_tstamp; ^I^I/* timestamps enabled */$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#212: FILE: net/ipv4/inet_lro.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#213: FILE: net/ipv4/inet_lro.c:2:
+ *  linux/net/ipv4/inet_lro.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#235: FILE: net/ipv4/inet_lro.c:24:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#236: FILE: net/ipv4/inet_lro.c:25:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#239: FILE: net/ipv4/inet_lro.c:28:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tcph' may be better as '(tcph)' to avoid precedence issues
#249: FILE: net/ipv4/inet_lro.c:38:
+#define TCP_HDR_LEN(tcph) (tcph->doff << 2)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'iph' may be better as '(iph)' to avoid precedence issues
#250: FILE: net/ipv4/inet_lro.c:39:
+#define IP_HDR_LEN(iph) (iph->ihl << 2)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'iph' - possible side-effects?
#251: FILE: net/ipv4/inet_lro.c:40:
+#define TCP_PAYLOAD_LENGTH(iph, tcph) \
+(ntohs(iph->tot_len) - IP_HDR_LEN(iph) - TCP_HDR_LEN(tcph))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'iph' may be better as '(iph)' to avoid precedence issues
#251: FILE: net/ipv4/inet_lro.c:40:
+#define TCP_PAYLOAD_LENGTH(iph, tcph) \
+(ntohs(iph->tot_len) - IP_HDR_LEN(iph) - TCP_HDR_LEN(tcph))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#259: FILE: net/ipv4/inet_lro.c:48:
+/*
+ * Basic tcp checks whether packet is suitable for LRO

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: net/ipv4/inet_lro.c:54:
+        /* check ip header: packet length */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: net/ipv4/inet_lro.c:55:
+        if (ntohs(iph->tot_len) > len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: net/ipv4/inet_lro.c:55:
+        if (ntohs(iph->tot_len) > len)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#276: FILE: net/ipv4/inet_lro.c:65:
+	if (tcph->cwr || tcph->ece || tcph->urg || !tcph->ack
+	    || tcph->rst || tcph->syn || tcph->fin)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#283: FILE: net/ipv4/inet_lro.c:72:
+	if (tcph->doff != TCPH_LEN_WO_OPTIONS
+	    && tcph->doff != TCPH_LEN_W_TIMESTAMP)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#322: FILE: net/ipv4/inet_lro.c:111:
+		*(p+2) = lro_desc->tcp_rcv_tsecr;
 		   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#338: FILE: net/ipv4/inet_lro.c:127:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#356: FILE: net/ipv4/inet_lro.c:145:
+
+}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: net/ipv4/inet_lro.c:168:
+		ptr = (u32 *)(tcph+1);
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#381: FILE: net/ipv4/inet_lro.c:170:
+		lro_desc->tcp_rcv_tsval = *(ptr+1);
 		                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#382: FILE: net/ipv4/inet_lro.c:171:
+		lro_desc->tcp_rcv_tsecr = *(ptr+2);
 		                               ^

CHECK:SPACING: No space is necessary after a cast
#412: FILE: net/ipv4/inet_lro.c:201:
+		topt = (u32 *) (tcph + 1);

WARNING:RETURN_VOID: void function return statements are not generally useful
#423: FILE: net/ipv4/inet_lro.c:212:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#443: FILE: net/ipv4/inet_lro.c:232:
+	return;
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: net/ipv4/inet_lro.c:246:
+        skb_frags[0].page_offset += hlen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: net/ipv4/inet_lro.c:246:
+        skb_frags[0].page_offset += hlen;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: net/ipv4/inet_lro.c:247:
+        skb_frags[0].size -= hlen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: net/ipv4/inet_lro.c:247:
+        skb_frags[0].size -= hlen;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lro_desc->next_frag
#461: FILE: net/ipv4/inet_lro.c:250:
+		*(lro_desc->next_frag) = *skb_frags;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:RETURN_VOID: void function return statements are not generally useful
#469: FILE: net/ipv4/inet_lro.c:258:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lro_desc->iph->saddr != iph->saddr'
#475: FILE: net/ipv4/inet_lro.c:264:
+	if ((lro_desc->iph->saddr != iph->saddr)
+	    || (lro_desc->iph->daddr != iph->daddr)
+	    || (lro_desc->tcph->source != tcph->source)
+	    || (lro_desc->tcph->dest != tcph->dest))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lro_desc->iph->daddr != iph->daddr'
#475: FILE: net/ipv4/inet_lro.c:264:
+	if ((lro_desc->iph->saddr != iph->saddr)
+	    || (lro_desc->iph->daddr != iph->daddr)
+	    || (lro_desc->tcph->source != tcph->source)
+	    || (lro_desc->tcph->dest != tcph->dest))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lro_desc->tcph->source != tcph->source'
#475: FILE: net/ipv4/inet_lro.c:264:
+	if ((lro_desc->iph->saddr != iph->saddr)
+	    || (lro_desc->iph->daddr != iph->daddr)
+	    || (lro_desc->tcph->source != tcph->source)
+	    || (lro_desc->tcph->dest != tcph->dest))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lro_desc->tcph->dest != tcph->dest'
#475: FILE: net/ipv4/inet_lro.c:264:
+	if ((lro_desc->iph->saddr != iph->saddr)
+	    || (lro_desc->iph->daddr != iph->daddr)
+	    || (lro_desc->tcph->source != tcph->source)
+	    || (lro_desc->tcph->dest != tcph->dest))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#476: FILE: net/ipv4/inet_lro.c:265:
+	if ((lro_desc->iph->saddr != iph->saddr)
+	    || (lro_desc->iph->daddr != iph->daddr)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#477: FILE: net/ipv4/inet_lro.c:266:
+	    || (lro_desc->iph->daddr != iph->daddr)
+	    || (lro_desc->tcph->source != tcph->source)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#478: FILE: net/ipv4/inet_lro.c:267:
+	    || (lro_desc->tcph->source != tcph->source)
+	    || (lro_desc->tcph->dest != tcph->dest))

ERROR:SPACING: space required before the open parenthesis '('
#503: FILE: net/ipv4/inet_lro.c:292:
+		if(!lro_arr[i].active) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: net/ipv4/inet_lro.c:332:
+        struct iphdr *iph;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: net/ipv4/inet_lro.c:332:
+        struct iphdr *iph;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: net/ipv4/inet_lro.c:333:
+        struct tcphdr *tcph;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: net/ipv4/inet_lro.c:333:
+        struct tcphdr *tcph;$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#548: FILE: net/ipv4/inet_lro.c:337:
+	if (!lro_mgr->get_skb_header
+	    || lro_mgr->get_skb_header(skb, (void *)&iph, (void *)&tcph,

ERROR:CODE_INDENT: code indent should use tabs where possible
#616: FILE: net/ipv4/inet_lro.c:405:
+        struct skb_frag_struct *skb_frags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: net/ipv4/inet_lro.c:405:
+        struct skb_frag_struct *skb_frags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: net/ipv4/inet_lro.c:412:
+        skb->len = len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: net/ipv4/inet_lro.c:412:
+        skb->len = len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: net/ipv4/inet_lro.c:414:
+        skb->truesize += true_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: net/ipv4/inet_lro.c:414:
+        skb->truesize += true_size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#626: FILE: net/ipv4/inet_lro.c:415:
+        skb->tail += hlen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: net/ipv4/inet_lro.c:415:
+        skb->tail += hlen;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#628: FILE: net/ipv4/inet_lro.c:417:
+        memcpy(skb->data, mac_hdr, hlen);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: net/ipv4/inet_lro.c:417:
+        memcpy(skb->data, mac_hdr, hlen);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#630: FILE: net/ipv4/inet_lro.c:419:
+        skb_frags = skb_shinfo(skb)->frags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: net/ipv4/inet_lro.c:419:
+        skb_frags = skb_shinfo(skb)->frags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#631: FILE: net/ipv4/inet_lro.c:420:
+        while (data_len > 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: net/ipv4/inet_lro.c:420:
+        while (data_len > 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#632: FILE: net/ipv4/inet_lro.c:421:
+                *skb_frags = *frags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: net/ipv4/inet_lro.c:421:
+                *skb_frags = *frags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#633: FILE: net/ipv4/inet_lro.c:422:
+                data_len -= frags->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: net/ipv4/inet_lro.c:422:
+                data_len -= frags->size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: net/ipv4/inet_lro.c:423:
+                skb_frags++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: net/ipv4/inet_lro.c:423:
+                skb_frags++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: net/ipv4/inet_lro.c:424:
+                frags++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: net/ipv4/inet_lro.c:424:
+                frags++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: net/ipv4/inet_lro.c:425:
+                skb_shinfo(skb)->nr_frags++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: net/ipv4/inet_lro.c:425:
+                skb_shinfo(skb)->nr_frags++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#637: FILE: net/ipv4/inet_lro.c:426:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: net/ipv4/inet_lro.c:426:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#639: FILE: net/ipv4/inet_lro.c:428:
+        skb_shinfo(skb)->frags[0].page_offset += hlen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: net/ipv4/inet_lro.c:428:
+        skb_shinfo(skb)->frags[0].page_offset += hlen;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#640: FILE: net/ipv4/inet_lro.c:429:
+        skb_shinfo(skb)->frags[0].size -= hlen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: net/ipv4/inet_lro.c:429:
+        skb_shinfo(skb)->frags[0].size -= hlen;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#654: FILE: net/ipv4/inet_lro.c:443:
+        struct iphdr *iph;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: net/ipv4/inet_lro.c:443:
+        struct iphdr *iph;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#655: FILE: net/ipv4/inet_lro.c:444:
+        struct tcphdr *tcph;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: net/ipv4/inet_lro.c:444:
+        struct tcphdr *tcph;$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#662: FILE: net/ipv4/inet_lro.c:451:
+	if (!lro_mgr->get_frag_header
+	    || lro_mgr->get_frag_header(frags, (void *)&mac_hdr, (void *)&iph,

ERROR:SPACING: space required before the open parenthesis '('
#726: FILE: net/ipv4/inet_lro.c:515:
+	if(skb)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#730: FILE: net/ipv4/inet_lro.c:519:
+EXPORT_SYMBOL(lro_receive_frags);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: space required before the open parenthesis '('
#744: FILE: net/ipv4/inet_lro.c:533:
+	if(skb)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#748: FILE: net/ipv4/inet_lro.c:537:
+EXPORT_SYMBOL(lro_vlan_hwaccel_receive_frags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#751: FILE: net/ipv4/inet_lro.c:540:
+void lro_flush_pkt(struct net_lro_mgr *lro_mgr,
+		  struct iphdr *iph, struct tcphdr *tcph)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#760: FILE: net/ipv4/inet_lro.c:549:
+EXPORT_SYMBOL(lro_flush_pkt);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000403009.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 30 errors, 35 warnings, 25 checks, 703 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000403009.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
