CHECK:CAMELCASE: Avoid CamelCase: <Active>
#119: FILE: include/linux/page-flags.h:173:
+	TESTCLEARFLAG(Active, active)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Noreclaim>
#128: FILE: include/linux/page-flags.h:211:
+PAGEFLAG(Noreclaim, noreclaim) __CLEARPAGEFLAG(Noreclaim, noreclaim)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#170: FILE: include/linux/mmzone.h:142:
+#define for_each_reclaimable_lru(l) for (l = 0; l <= LRU_ACTIVE_FILE; l++)

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageNoreclaim>
#237: FILE: include/linux/mm_inline.h:93:
+		__ClearPageNoreclaim(page);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#239: FILE: include/linux/mm_inline.h:95:
+	} else {
+		 if (PageActive(page)) {

WARNING:TABSTOP: Statements should start on a tabstop
#240: FILE: include/linux/mm_inline.h:96:
+		 if (PageActive(page)) {

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageActive>
#241: FILE: include/linux/mm_inline.h:97:
+			__ClearPageActive(page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/linux/swap.h:183:
+extern void add_page_to_noreclaim_list(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#268: FILE: include/linux/swap.h:234:
+extern int page_reclaimable(struct page *page, struct vm_area_struct *vma);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: include/linux/swap.h:237:
+static inline int page_reclaimable(struct page *page,
+						struct vm_area_struct *vma)

CHECK:BRACES: braces {} should be used on all arms of this statement
#303: FILE: mm/swap.c:109:
+	if (PageNoreclaim(page))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#305: FILE: mm/swap.c:111:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: mm/swap.c:141:
+		if (PageLRU(page) && !PageActive(page) &&
+					!PageNoreclaim(page)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: mm/swap.c:216:
+	if (!PageActive(page) && !PageNoreclaim(page) &&
+			PageReferenced(page) && PageLRU(page)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#452: FILE: mm/migrate.c:340:
+	if (TestClearPageActive(page)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#455: FILE: mm/migrate.c:343:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#547: FILE: mm/migrate.c:702:
+		if (!page->mapping) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#552: FILE: mm/migrate.c:707:
+		} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#831: FILE: mm/vmscan.c:2308:
+{
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#864: FILE: mm/internal.h:41:
+extern int putback_lru_page(struct page *page);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#894: FILE: mm/internal.h:77:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000276098.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 2 warnings, 19 checks, 717 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000276098.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
