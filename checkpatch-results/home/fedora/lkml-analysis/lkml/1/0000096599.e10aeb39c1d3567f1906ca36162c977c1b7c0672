WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
This patch reimplements scsi_execute_async(). In the new version it's a lot less

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hdr"
#120: FILE: block/blk-map.c:300:
+	if (hdr == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: block/blk-map.c:310:
+			sg_copy_elem(saved_sg, tail_sg, tail_sg->length,
+				KM_BIO_DST_IRQ, KM_BIO_SRC_IRQ);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#167: FILE: block/blk-map.c:347:
+	saved_sg = kmalloc(sizeof(*saved_sg) * saved_sg_nents, gfp);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!saved_sg"
#168: FILE: block/blk-map.c:348:
+	if (saved_sg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pg"
#184: FILE: block/blk-map.c:364:
+	if (pg == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: block/blk-map.c:372:
+		sg_copy_elem(tail_sg, saved_sg, saved_sg->length,
+				KM_USER1, KM_USER0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: block/blk-map.c:405:
+		res = blk_rq_handle_align_tail_only(rq, sgl_to_copy,
+				gfp, page_gfp);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pg"
#254: FILE: block/blk-map.c:434:
+		if (pg == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#284: FILE: block/blk-map.c:464:
+		struct page *pg = sg_page(sg);
+		if (pg == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pg"
#284: FILE: block/blk-map.c:464:
+		if (pg == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: block/blk-map.c:480:
+static int __blk_rq_map_kern_sg(struct request *rq, struct scatterlist *sgl,
+	int nents, gfp_t gfp, struct scatterlist **sgl_to_copy,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgl == 0'
#314: FILE: block/blk-map.c:494:
+	if (unlikely((sgl == 0) || (nents <= 0))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nents <= 0'
#314: FILE: block/blk-map.c:494:
+	if (unlikely((sgl == 0) || (nents <= 0))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: block/blk-map.c:505:
+	max_nr_vecs =  min_t(size_t,
+		((PAGE_SIZE - sizeof(struct bio)) / sizeof(struct bio_vec)),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#361: FILE: block/blk-map.c:541:
+				if (bio == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hbio"
#371: FILE: block/blk-map.c:551:
+				if (hbio == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#372: FILE: block/blk-map.c:552:
+					hbio = tbio = bio;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#374: FILE: block/blk-map.c:554:
+					tbio = tbio->bi_next = bio;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc < 0'
#381: FILE: block/blk-map.c:561:
+				if (unlikely(need_new_bio || (rc < 0))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hbio"
#402: FILE: block/blk-map.c:582:
+	if (hbio == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#411: FILE: block/blk-map.c:591:
+		if (sgl->offset == 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#415: FILE: block/blk-map.c:595:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hbio"
#419: FILE: block/blk-map.c:599:
+	while (hbio != NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#434: FILE: block/blk-map.c:614:
+	rq->buffer = rq->data = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hbio"
#444: FILE: block/blk-map.c:624:
+	while (hbio != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgl == 0'
#470: FILE: block/blk-map.c:650:
+	if (unlikely((sgl == 0) || (sgl->length == 0) ||
+		     (nents <= 0) || (rq->end_io_data != NULL))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgl->length == 0'
#470: FILE: block/blk-map.c:650:
+	if (unlikely((sgl == 0) || (sgl->length == 0) ||
+		     (nents <= 0) || (rq->end_io_data != NULL))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nents <= 0'
#470: FILE: block/blk-map.c:650:
+	if (unlikely((sgl == 0) || (sgl->length == 0) ||
+		     (nents <= 0) || (rq->end_io_data != NULL))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->end_io_data != NULL'
#470: FILE: block/blk-map.c:650:
+	if (unlikely((sgl == 0) || (sgl->length == 0) ||
+		     (nents <= 0) || (rq->end_io_data != NULL))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rq->end_io_data"
#471: FILE: block/blk-map.c:651:
+		     (nents <= 0) || (rq->end_io_data != NULL))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: block/blk-map.c:658:
+	res = __blk_rq_map_kern_sg(rq, sgl, nents, gfp, &sg_to_copy,
+				&nents_to_copy);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sg_to_copy"
#480: FILE: block/blk-map.c:660:
+		if (sg_to_copy == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: block/blk-map.c:664:
+		res = blk_rq_handle_align(rq, &sgl, &nents, sg_to_copy,
+				nents_to_copy, gfp, rq->q->bounce_gfp | gfp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: block/blk-map.c:669:
+		res = __blk_rq_map_kern_sg(rq, sgl, nents, gfp, &sg_to_copy,
+						&nents_to_copy);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#496: FILE: block/blk-map.c:676:
+	rq->buffer = rq->data = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sioc"
#563: FILE: drivers/scsi/scsi_lib.c:330:
+	if (sioc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#567: FILE: drivers/scsi/scsi_lib.c:334:
+	if (req == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sgl"
#575: FILE: drivers/scsi/scsi_lib.c:342:
+	if (sgl != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: drivers/scsi/scsi_lib.c:362:
+	blk_execute_rq_nowait(req->q, NULL, req,
+		flags & SCSI_ASYNC_EXEC_FLAG_AT_HEAD, scsi_end_async);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: drivers/scsi/scsi_lib.c:1841:
+	scsi_io_context_cache = kmem_cache_create("scsi_io_context",
+					sizeof(struct scsi_io_context),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#618: FILE: drivers/scsi/scsi_lib.c:1844:
+		printk(KERN_ERR "SCSI: can't init scsi io context cache\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#657: FILE: include/linux/blkdev.h:810:
+extern int blk_rq_map_kern_sg(struct request *rq,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: include/linux/blkdev.h:812:
+extern void blk_rq_unmap_kern_sg(struct request *req, int do_copy);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#691: FILE: include/scsi/scsi_device.h:379:
+extern int scsi_execute_async(struct scsi_device *sdev, const unsigned char *cmd,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#695: FILE: include/scsi/scsi_device.h:383:
+			      void (*done)(void *, char *, int, int),

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#695: FILE: include/scsi/scsi_device.h:383:
+			      void (*done)(void *, char *, int, int),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#695: FILE: include/scsi/scsi_device.h:383:
+			      void (*done)(void *, char *, int, int),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#695: FILE: include/scsi/scsi_device.h:383:
+			      void (*done)(void *, char *, int, int),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'src_len >= PAGE_SIZE'
#747: FILE: lib/scatterlist.c:527:
+		if (((src_offs & ~PAGE_MASK) == 0) &&
+		    ((dst_offs & ~PAGE_MASK) == 0) &&
+		    (src_len >= PAGE_SIZE) && (dst_len >= PAGE_SIZE) &&
+		    (copy_len >= PAGE_SIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dst_len >= PAGE_SIZE'
#747: FILE: lib/scatterlist.c:527:
+		if (((src_offs & ~PAGE_MASK) == 0) &&
+		    ((dst_offs & ~PAGE_MASK) == 0) &&
+		    (src_len >= PAGE_SIZE) && (dst_len >= PAGE_SIZE) &&
+		    (copy_len >= PAGE_SIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'copy_len >= PAGE_SIZE'
#747: FILE: lib/scatterlist.c:527:
+		if (((src_offs & ~PAGE_MASK) == 0) &&
+		    ((dst_offs & ~PAGE_MASK) == 0) &&
+		    (src_len >= PAGE_SIZE) && (dst_len >= PAGE_SIZE) &&
+		    (copy_len >= PAGE_SIZE)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#755: FILE: lib/scatterlist.c:535:
+			n = min_t(size_t, PAGE_SIZE - (dst_offs & ~PAGE_MASK),
+					  PAGE_SIZE - (src_offs & ~PAGE_MASK));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dst_sg"
#776: FILE: lib/scatterlist.c:556:
+			if (dst_sg == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'copy_len == 0'
#845: FILE: lib/scatterlist.c:625:
+		if ((copy_len == 0) || (dst_sg == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dst_sg == NULL'
#845: FILE: lib/scatterlist.c:625:
+		if ((copy_len == 0) || (dst_sg == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dst_sg"
#845: FILE: lib/scatterlist.c:625:
+		if ((copy_len == 0) || (dst_sg == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "src_sg"
#849: FILE: lib/scatterlist.c:629:
+	} while (src_sg != NULL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000096599.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 50 checks, 746 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000096599.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
