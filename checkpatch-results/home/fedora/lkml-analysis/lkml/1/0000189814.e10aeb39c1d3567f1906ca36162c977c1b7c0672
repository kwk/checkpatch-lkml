WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#40: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/pohmelfs/config.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: fs/pohmelfs/config.c:41:
+	if (sc->idx == ctl->idx && sc->type == ctl->type &&
+			sc->proto == ctl->proto &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: fs/pohmelfs/config.c:66:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*g)...) over kzalloc(sizeof(struct pohmelfs_config_group)...)
#115: FILE: fs/pohmelfs/config.c:71:
+	g = kzalloc(sizeof(struct pohmelfs_config_group), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dst)...) over kzalloc(sizeof(struct pohmelfs_config)...)
#158: FILE: fs/pohmelfs/config.c:114:
+		dst = kzalloc(sizeof(struct pohmelfs_config), GFP_KERNEL);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#239: FILE: fs/pohmelfs/config.c:195:
+static int pohmelfs_send_reply(int err, int msg_num, int action, struct cn_msg *msg, struct pohmelfs_ctl *ctl)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ack)...) over kmalloc(sizeof(struct pohmelfs_cn_ack)...)
#243: FILE: fs/pohmelfs/config.c:199:
+	ack = kmalloc(sizeof(struct pohmelfs_cn_ack), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: fs/pohmelfs/config.c:239:
+		struct pohmelfs_ctl *sc = &c->state.ctl;
+		if (pohmelfs_send_reply(err, g->num_entry - i, POHMELFS_CTLINFO_ACK, msg, sc)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: fs/pohmelfs/config.c:247:
+        mutex_unlock(&pohmelfs_config_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: fs/pohmelfs/config.c:247:
+        mutex_unlock(&pohmelfs_config_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: fs/pohmelfs/config.c:248:
+        return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: fs/pohmelfs/config.c:248:
+        return err;$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*c)...) over kzalloc(sizeof(struct pohmelfs_config)...)
#336: FILE: fs/pohmelfs/config.c:292:
+	c = kzalloc(sizeof(struct pohmelfs_config), GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#403: FILE: fs/pohmelfs/config.c:359:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: fs/pohmelfs/config.c:367:
+	dprintk("%s: idx: %u, strlen: %u, type: %u, keysize: %u, algo: %s.\n",
+			__func__, crypto->idx, crypto->strlen, crypto->type,

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#421: FILE: fs/pohmelfs/config.c:377:
+	switch (crypto->type) {
+		case POHMELFS_CRYPTO_HASH:
[...]
+		case POHMELFS_CRYPTO_CIPHER:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#429: FILE: fs/pohmelfs/config.c:385:
+			err = -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: fs/pohmelfs/config.c:401:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#446: FILE: fs/pohmelfs/config.c:402:
+	switch (msg->flags) {
+		case POHMELFS_FLAGS_ADD:
[...]
+		case POHMELFS_FLAGS_DEL:
[...]
+		case POHMELFS_FLAGS_SHOW:
[...]
+		case POHMELFS_FLAGS_CRYPTO:
[...]
+		default:

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#460: FILE: fs/pohmelfs/config.c:416:
+			err = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#514: FILE: fs/pohmelfs/config.c:470:
+		if (g->hash_string)
+			kfree(g->hash_string);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#517: FILE: fs/pohmelfs/config.c:473:
+		if (g->cipher_string)
+			kfree(g->cipher_string);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 10 warnings, 7 checks, 478 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
