WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
Subject: [PATCH 2/2] [Target_Core_Mod/ALUA]: Add t10_alua_tg_pt_gp_member_t usage for Target Port Groups

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: drivers/lio-core/target_core_alua.c:108:
+		list_for_each_entry(tg_pt_gp_mem, &tg_pt_gp->tg_pt_gp_mem_list,
+				tg_pt_gp_mem_list) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#126: FILE: drivers/lio-core/target_core_alua.c:373:
+extern t10_alua_tg_pt_gp_member_t *core_alua_allocate_tg_pt_gp_mem (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#126: FILE: drivers/lio-core/target_core_alua.c:373:
+extern t10_alua_tg_pt_gp_member_t *core_alua_allocate_tg_pt_gp_mem (

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#126: FILE: drivers/lio-core/target_core_alua.c:373:
+extern t10_alua_tg_pt_gp_member_t *core_alua_allocate_tg_pt_gp_mem (

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#131: FILE: drivers/lio-core/target_core_alua.c:378:
+	if (!(tg_pt_gp_mem = kmem_cache_zalloc(t10_alua_tg_pt_gp_mem_cache, GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#132: FILE: drivers/lio-core/target_core_alua.c:379:
+		printk(KERN_ERR "Unable to allocate t10_alua_tg_pt_gp_member_t\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#133: FILE: drivers/lio-core/target_core_alua.c:380:
+		return(ERR_PTR(-ENOMEM));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#141: FILE: drivers/lio-core/target_core_alua.c:388:
+	return(tg_pt_gp_mem);

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: drivers/lio-core/target_core_alua.c:412:
+	while(atomic_read(&tg_pt_gp->tg_pt_gp_ref_cnt))

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#162: FILE: drivers/lio-core/target_core_alua.c:413:
+		msleep(10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: drivers/lio-core/target_core_alua.c:420:
+	list_for_each_entry_safe(tg_pt_gp_mem, tg_pt_gp_mem_tmp,
+			&tg_pt_gp->tg_pt_gp_mem_list, tg_pt_gp_mem_list) {

WARNING:TYPO_SPELLING: 'assoicated' may be misspelled - perhaps 'associated'?
#177: FILE: drivers/lio-core/target_core_alua.c:428:
+		 * tg_pt_gp_mem is assoicated with a single
 		                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: drivers/lio-core/target_core_alua.c:430:
+^I^I * core_alua_free_tg_pt_gp_mem().^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: drivers/lio-core/target_core_alua.c:437:
+^I^Iif (tg_pt_gp != se_global->default_tg_pt_gp) {^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#186: FILE: drivers/lio-core/target_core_alua.c:437:
+		if (tg_pt_gp != se_global->default_tg_pt_gp) {	
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: drivers/lio-core/target_core_alua.c:438:
+^I^I^I__core_alua_attach_tg_pt_gp_mem(tg_pt_gp_mem, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: drivers/lio-core/target_core_alua.c:439:
+			__core_alua_attach_tg_pt_gp_mem(tg_pt_gp_mem, 
+					se_global->default_tg_pt_gp);

CHECK:BRACES: Unbalanced braces around else statement
#189: FILE: drivers/lio-core/target_core_alua.c:440:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: drivers/lio-core/target_core_alua.c:443:
+^I^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#199: FILE: drivers/lio-core/target_core_alua.c:450:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#206: FILE: drivers/lio-core/target_core_alua.c:452:
+extern void core_alua_free_tg_pt_gp_mem (se_port_t *port)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: drivers/lio-core/target_core_alua.c:457:
+^It10_alua_tg_pt_gp_member_t *tg_pt_gp_mem;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: drivers/lio-core/target_core_alua.c:462:
+^Iif (!(tg_pt_gp_mem = port->sep_alua_tg_pt_gp_mem))^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#219: FILE: drivers/lio-core/target_core_alua.c:462:
+	if (!(tg_pt_gp_mem = port->sep_alua_tg_pt_gp_mem))	

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#224: FILE: drivers/lio-core/target_core_alua.c:466:
+	if ((tg_pt_gp = tg_pt_gp_mem->tg_pt_gp)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: drivers/lio-core/target_core_alua.c:468:
+^I^Iif (tg_pt_gp_mem->tg_pt_gp_assoc) {^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: drivers/lio-core/target_core_alua.c:472:
+^I^I}^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: drivers/lio-core/target_core_alua.c:482:
+extern t10_alua_tg_pt_gp_t *core_alua_get_tg_pt_gp_by_name (const char *name)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#243: FILE: drivers/lio-core/target_core_alua.c:482:
+extern t10_alua_tg_pt_gp_t *core_alua_get_tg_pt_gp_by_name (const char *name)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#252: FILE: drivers/lio-core/target_core_alua.c:501:
+extern void core_alua_put_tg_pt_gp_from_name (t10_alua_tg_pt_gp_t *tg_pt_gp)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#273: FILE: drivers/lio-core/target_core_alua.c:513:
+extern void __core_alua_attach_tg_pt_gp_mem (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#273: FILE: drivers/lio-core/target_core_alua.c:513:
+extern void __core_alua_attach_tg_pt_gp_mem (

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: drivers/lio-core/target_core_alua.c:518:
+^Itg_pt_gp_mem->tg_pt_gp = tg_pt_gp;^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#307: FILE: drivers/lio-core/target_core_alua.c:530:
+extern void __core_alua_drop_tg_pt_gp_mem (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#307: FILE: drivers/lio-core/target_core_alua.c:530:
+extern void __core_alua_drop_tg_pt_gp_mem (

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: drivers/lio-core/target_core_alua.c:536:
+^Itg_pt_gp_mem->tg_pt_gp = NULL;^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#354: FILE: drivers/lio-core/target_core_alua.c:556:
+	if (!(tg_pt_gp_mem = port->sep_alua_tg_pt_gp_mem))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#358: FILE: drivers/lio-core/target_core_alua.c:560:
+	if ((tg_pt_gp = tg_pt_gp_mem->tg_pt_gp)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#385: FILE: drivers/lio-core/target_core_alua.c:586:
+		printk(KERN_WARNING "SPC3_ALUA_EMULATED not enabled for"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#385: FILE: drivers/lio-core/target_core_alua.c:586:
+		printk(KERN_WARNING "SPC3_ALUA_EMULATED not enabled for"
+			" %s/tpgt_%hu/%s\n", TPG_TFO(tpg)->tpg_get_wwn(tpg),
+			TPG_TFO(tpg)->tpg_get_tag(tpg),
+			config_item_name(&lun->lun_group.cg_item));

WARNING:SPLIT_STRING: quoted string split across lines
#386: FILE: drivers/lio-core/target_core_alua.c:587:
+		printk(KERN_WARNING "SPC3_ALUA_EMULATED not enabled for"
+			" %s/tpgt_%hu/%s\n", TPG_TFO(tpg)->tpg_get_wwn(tpg),

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#408: FILE: drivers/lio-core/target_core_alua.c:608:
+		if (!(tg_pt_gp_new = core_alua_get_tg_pt_gp_by_name(strstrip(buf))))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: drivers/lio-core/target_core_alua.c:609:
+^I^I^Ireturn(-ENODEV);^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#411: FILE: drivers/lio-core/target_core_alua.c:611:
+	if (!(tg_pt_gp_mem = port->sep_alua_tg_pt_gp_mem)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#414: FILE: drivers/lio-core/target_core_alua.c:614:
+		printk(KERN_ERR "NULL se_port_t->sep_alua_tg_pt_gp_mem pointer\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#425: FILE: drivers/lio-core/target_core_alua.c:619:
+	if ((tg_pt_gp = tg_pt_gp_mem->tg_pt_gp)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#493: FILE: drivers/lio-core/target_core_alua.h:46:
+extern struct t10_alua_tg_pt_gp_member_s *core_alua_allocate_tg_pt_gp_mem (struct se_port_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#493: FILE: drivers/lio-core/target_core_alua.h:46:
+extern struct t10_alua_tg_pt_gp_member_s *core_alua_allocate_tg_pt_gp_mem (struct se_port_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_port_s *' should also have an identifier name
#493: FILE: drivers/lio-core/target_core_alua.h:46:
+extern struct t10_alua_tg_pt_gp_member_s *core_alua_allocate_tg_pt_gp_mem (struct se_port_s *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#499: FILE: drivers/lio-core/target_core_alua.h:48:
+extern void core_alua_free_tg_pt_gp_mem (struct se_port_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#499: FILE: drivers/lio-core/target_core_alua.h:48:
+extern void core_alua_free_tg_pt_gp_mem (struct se_port_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_port_s *' should also have an identifier name
#499: FILE: drivers/lio-core/target_core_alua.h:48:
+extern void core_alua_free_tg_pt_gp_mem (struct se_port_s *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#500: FILE: drivers/lio-core/target_core_alua.h:49:
+extern struct t10_alua_tg_pt_gp_s *core_alua_get_tg_pt_gp_by_name (const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#500: FILE: drivers/lio-core/target_core_alua.h:49:
+extern struct t10_alua_tg_pt_gp_s *core_alua_get_tg_pt_gp_by_name (const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#500: FILE: drivers/lio-core/target_core_alua.h:49:
+extern struct t10_alua_tg_pt_gp_s *core_alua_get_tg_pt_gp_by_name (const char *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#501: FILE: drivers/lio-core/target_core_alua.h:50:
+extern void core_alua_put_tg_pt_gp_from_name (struct t10_alua_tg_pt_gp_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#501: FILE: drivers/lio-core/target_core_alua.h:50:
+extern void core_alua_put_tg_pt_gp_from_name (struct t10_alua_tg_pt_gp_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#501: FILE: drivers/lio-core/target_core_alua.h:50:
+extern void core_alua_put_tg_pt_gp_from_name (struct t10_alua_tg_pt_gp_s *);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#502: FILE: drivers/lio-core/target_core_alua.h:51:
+extern void __core_alua_attach_tg_pt_gp_mem (struct t10_alua_tg_pt_gp_member_s *, struct t10_alua_tg_pt_gp_s *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#502: FILE: drivers/lio-core/target_core_alua.h:51:
+extern void __core_alua_attach_tg_pt_gp_mem (struct t10_alua_tg_pt_gp_member_s *, struct t10_alua_tg_pt_gp_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#502: FILE: drivers/lio-core/target_core_alua.h:51:
+extern void __core_alua_attach_tg_pt_gp_mem (struct t10_alua_tg_pt_gp_member_s *, struct t10_alua_tg_pt_gp_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_member_s *' should also have an identifier name
#502: FILE: drivers/lio-core/target_core_alua.h:51:
+extern void __core_alua_attach_tg_pt_gp_mem (struct t10_alua_tg_pt_gp_member_s *, struct t10_alua_tg_pt_gp_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#502: FILE: drivers/lio-core/target_core_alua.h:51:
+extern void __core_alua_attach_tg_pt_gp_mem (struct t10_alua_tg_pt_gp_member_s *, struct t10_alua_tg_pt_gp_s *);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#503: FILE: drivers/lio-core/target_core_alua.h:52:
+extern void __core_alua_drop_tg_pt_gp_mem (struct t10_alua_tg_pt_gp_member_s *, struct t10_alua_tg_pt_gp_s *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#503: FILE: drivers/lio-core/target_core_alua.h:52:
+extern void __core_alua_drop_tg_pt_gp_mem (struct t10_alua_tg_pt_gp_member_s *, struct t10_alua_tg_pt_gp_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#503: FILE: drivers/lio-core/target_core_alua.h:52:
+extern void __core_alua_drop_tg_pt_gp_mem (struct t10_alua_tg_pt_gp_member_s *, struct t10_alua_tg_pt_gp_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_member_s *' should also have an identifier name
#503: FILE: drivers/lio-core/target_core_alua.h:52:
+extern void __core_alua_drop_tg_pt_gp_mem (struct t10_alua_tg_pt_gp_member_s *, struct t10_alua_tg_pt_gp_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#503: FILE: drivers/lio-core/target_core_alua.h:52:
+extern void __core_alua_drop_tg_pt_gp_mem (struct t10_alua_tg_pt_gp_member_s *, struct t10_alua_tg_pt_gp_s *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#524: FILE: drivers/lio-core/target_core_base.h:218:
+	spinlock_t tg_pt_gp_lock;

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#538: FILE: drivers/lio-core/target_core_base.h:716:
+	struct t10_alua_tg_pt_gp_member_s *sep_alua_tg_pt_gp_mem; /* Used for ALUA Target Port Groups membership */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: drivers/lio-core/target_core_configfs.c:1483:
+		cur_len = snprintf(buf, LU_GROUP_NAME_BUF, "%s/%s\n",
 			config_item_name(&su_dev->se_dev_group.cg_item),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: drivers/lio-core/target_core_configfs.c:1629:
+	list_for_each_entry(tg_pt_gp_mem, &tg_pt_gp->tg_pt_gp_mem_list,
+			tg_pt_gp_mem_list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: drivers/lio-core/target_core_configfs.c:1635:
+		cur_len = snprintf(buf, TG_PT_GROUP_NAME_BUF, "%s/tpgt_%hu/%s\n",
 			TPG_TFO(tpg)->tpg_get_wwn(tpg),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#634: FILE: drivers/lio-core/target_core_device.c:562:
+			printk(KERN_ERR "Unable to allocate t10_alua_tg_pt_gp_member_t\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: drivers/lio-core/target_core_device.c:567:
+		__core_alua_attach_tg_pt_gp_mem(tg_pt_gp_mem,
+			se_global->default_tg_pt_gp);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#679: FILE: drivers/lio-core/target_core_transport.c:4261:
+			if (!(tg_pt_gp = port->sep_alua_tg_pt_gp_mem->tg_pt_gp)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000168202.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 23 errors, 35 warnings, 19 checks, 570 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000168202.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
