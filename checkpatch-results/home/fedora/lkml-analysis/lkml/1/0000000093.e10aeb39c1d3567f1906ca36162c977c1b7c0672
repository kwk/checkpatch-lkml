CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/swap.h:257:
+extern bool should_balance_unmapped_pages(struct zone *zone);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#217: FILE: mm/vmscan.c:151:
+__setup("unmapped_page_control", unmapped_page_control_parm);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: mm/vmscan.c:1964:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#239: FILE: mm/vmscan.c:1966:
+#define RECLAIM_ZONE (1<<0)	/* Run shrink_inactive_list on the zone */
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#239: FILE: mm/vmscan.c:1966:
+#define RECLAIM_ZONE (1<<0)	/* Run shrink_inactive_list on the zone */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#240: FILE: mm/vmscan.c:1967:
+#define RECLAIM_WRITE (1<<1)	/* Writeout pages during reclaim */
                         ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#240: FILE: mm/vmscan.c:1967:
+#define RECLAIM_WRITE (1<<1)	/* Writeout pages during reclaim */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#241: FILE: mm/vmscan.c:1968:
+#define RECLAIM_SWAP (1<<2)	/* Swap pages out during reclaim */
                        ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#241: FILE: mm/vmscan.c:1968:
+#define RECLAIM_SWAP (1<<2)	/* Swap pages out during reclaim */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: mm/vmscan.c:1991:
+zone_reclaim_unmapped_pages(struct zone *zone, struct scan_control *sc,
+				unsigned long nr_pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: mm/vmscan.c:2014:
+static unsigned long balance_unmapped_pages(int priority, struct zone *zone,
+						struct scan_control *sc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: mm/vmscan.c:2017:
+	if (unmapped_page_control &&
+		(zone_unmapped_file_pages(zone) > zone->min_unmapped_pages)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: mm/vmscan.c:2043:
+	if (unmapped_page_control &&
+		(zone_unmapped_file_pages(zone) >

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: mm/vmscan.c:2415:
+	if (zone_watermark_ok(zone, order, low_wmark_pages(zone), 0, 0) &&
+		!should_balance_unmapped_pages(zone))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000093.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 14 checks, 279 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000093.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
