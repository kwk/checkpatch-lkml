WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
> > On Jan 22, 2008 5:14 AM, Ilpo Järvinen <ilpo.jarvinen@helsinki.fi> wrote:

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#46: 
> > On Jan 22, 2008 5:14 AM, Ilpo Järvinen <ilpo.jarvinen@helsinki.fi> wrote:
                                   ^

WARNING:TYPO_SPELLING: 'trigged' may be misspelled - perhaps 'triggered'?
#50: 
> > > > Please see the kernel messages following,(trigged while using some qemu session)
                                                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'reproducability' may be misspelled - perhaps 'reproducibility'?
#112: 
> > > reproducability if it takes this far to see it...
      ^^^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'trigged' may be misspelled - perhaps 'triggered'?
#115: 
> It's trigged again in my pc, just while using firefox.
       ^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/net/tcp.h:275:
+extern void			tcp_verify_wq(struct sock *sk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tp' - possible side-effects?
#149: FILE: include/net/tcp.h:773:
+#define tcp_verify_left_out(tp)	\
+	do { \
+		WARN_ON(tcp_left_out(tp) > tp->packets_out); \
+		tcp_verify_wq((struct sock *)tp); \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#153: FILE: include/net/tcp.h:777:
+	} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tcp_write_queue_head"
#166: FILE: net/ipv4/tcp_input.c:2649:
+	WARN_ON(tcp_write_queue_head(sk) == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#193: FILE: net/ipv4/tcp_ipv4.c:115:
+	char s[50+1];
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#194: FILE: net/ipv4/tcp_ipv4.c:116:
+	char h[50+1];
 	         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#228: FILE: net/ipv4/tcp_ipv4.c:150:
+				printk(KERN_ERR "TCP wq(s) %s\n", s);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#229: FILE: net/ipv4/tcp_ipv4.c:151:
+				printk(KERN_ERR "TCP wq(h) %s\n", h);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#236: FILE: net/ipv4/tcp_ipv4.c:158:
+		s[idx+1] = 0;
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#238: FILE: net/ipv4/tcp_ipv4.c:160:
+		h[idx+1] = 0;
 		     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#239: FILE: net/ipv4/tcp_ipv4.c:161:
+		printk(KERN_ERR "TCP wq(s) %s\n", s);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#240: FILE: net/ipv4/tcp_ipv4.c:162:
+		printk(KERN_ERR "TCP wq(h) %s\n", h);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#242: FILE: net/ipv4/tcp_ipv4.c:164:
+	printk(KERN_ERR "l%u s%u f%u p%u seq: su%u hs%u sn%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: net/ipv4/tcp_ipv4.c:165:
+	printk(KERN_ERR "l%u s%u f%u p%u seq: su%u hs%u sn%u\n",
+		tp->lost_out, tp->sacked_out, tp->fackets_out, tp->packets_out,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#261: FILE: net/ipv4/tcp_ipv4.c:183:
+			if (TCP_SKB_CB(skb)->sacked & TCPCB_LOST)
+			printk(KERN_ERR "Sacked bitmap S+L: %u %u-%u/%u\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#262: FILE: net/ipv4/tcp_ipv4.c:184:
+			printk(KERN_ERR "Sacked bitmap S+L: %u %u-%u/%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: net/ipv4/tcp_ipv4.c:185:
+			printk(KERN_ERR "Sacked bitmap S+L: %u %u-%u/%u\n",
+				TCP_SKB_CB(skb)->sacked,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lost != tp->lost_out'
#277: FILE: net/ipv4/tcp_ipv4.c:199:
+	if ((lost != tp->lost_out) ||
+	    (sacked != tp->sacked_out) ||
+	    (packets != tp->packets_out)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sacked != tp->sacked_out'
#277: FILE: net/ipv4/tcp_ipv4.c:199:
+	if ((lost != tp->lost_out) ||
+	    (sacked != tp->sacked_out) ||
+	    (packets != tp->packets_out)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'packets != tp->packets_out'
#277: FILE: net/ipv4/tcp_ipv4.c:199:
+	if ((lost != tp->lost_out) ||
+	    (sacked != tp->sacked_out) ||
+	    (packets != tp->packets_out)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#280: FILE: net/ipv4/tcp_ipv4.c:202:
+		printk(KERN_ERR "P: %u L: %u vs %u S: %u vs %u w: %u-%u (%u)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: net/ipv4/tcp_ipv4.c:203:
+		printk(KERN_ERR "P: %u L: %u vs %u S: %u vs %u w: %u-%u (%u)\n",
+			tp->packets_out,

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: net/ipv4/tcp_ipv4.c:207:
+^I^I       ^Itp->rx_opt.sack_ok);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#285: FILE: net/ipv4/tcp_ipv4.c:207:
+^I^I       ^Itp->rx_opt.sack_ok);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333466.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 13 warnings, 14 checks, 221 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333466.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
