WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#53: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: security/apparmor/apparmorfs-24.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#129: FILE: security/apparmor/apparmorfs-24.c:72:
+		struct aa_profile *profile = NULL;
+		ns = list_first_entry(&ns_list, typeof(*ns), base.list);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#131: FILE: security/apparmor/apparmorfs-24.c:74:
+		if (!list_empty(&ns->base.profiles)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#137: FILE: security/apparmor/apparmorfs-24.c:80:
+			return profile;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#137: FILE: security/apparmor/apparmorfs-24.c:80:
+		} else

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#166: FILE: security/apparmor/apparmorfs-24.c:109:
+		seq_printf(f, "//");

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#213: FILE: security/apparmor/apparmorfs-24.c:156:
+	const char matching[] = "pattern=aadfa audit perms=crwxamlk/ "

WARNING:SPLIT_STRING: quoted string split across lines
#214: FILE: security/apparmor/apparmorfs-24.c:157:
+	const char matching[] = "pattern=aadfa audit perms=crwxamlk/ "
+	    "user::other";

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#228: FILE: security/apparmor/apparmorfs-24.c:171:
+	const char features[] = "file=3.1 capability=2.0 network=1.0 "

WARNING:SPLIT_STRING: quoted string split across lines
#229: FILE: security/apparmor/apparmorfs-24.c:172:
+	const char features[] = "file=3.1 capability=2.0 network=1.0 "
+	    "change_hat=1.5 change_profile=1.1 " "aanamespaces=1.1 rlimit=1.1";

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#229: FILE: security/apparmor/apparmorfs-24.c:172:
+	    "change_hat=1.5 change_profile=1.1 " "aanamespaces=1.1 rlimit=1.1";

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#244: FILE: security/apparmor/apparmorfs.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#304: FILE: security/apparmor/apparmorfs.c:61:
+	if (data == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#492: FILE: security/apparmor/include/apparmorfs.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#512: FILE: security/apparmor/include/apparmorfs.h:21:
+extern void aa_destroy_aafs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#527: FILE: security/apparmor/include/procattr.h:1:
+/*

WARNING:TYPO_SPELLING: 'defintions' may be misspelled - perhaps 'definitions'?
#530: FILE: security/apparmor/include/procattr.h:4:
+ * This file contains AppArmor /proc/<pid>/attr/ interface function defintions.
                                                                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#559: FILE: security/apparmor/procattr.c:1:
+/*

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#593: FILE: security/apparmor/procattr.c:35:
+		s = str = kmalloc(len + 1, GFP_ATOMIC);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#605: FILE: security/apparmor/procattr.c:47:
+		const char unconfined_str[] = "unconfined\n";

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#625: FILE: security/apparmor/procattr.c:67:
+static char *split_token_from_name(const char *op, char *args, u64 * token)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#629: FILE: security/apparmor/procattr.c:71:
+	*token = simple_strtoull(args, &name, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'name == args'
#630: FILE: security/apparmor/procattr.c:72:
+	if ((name == args) || *name != '^') {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#672: FILE: security/apparmor/procattr.c:114:
+	return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052589.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 18 warnings, 6 checks, 592 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052589.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
