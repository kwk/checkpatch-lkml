ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: drivers/char/ip2/ip2main.c:1619:
+^Iif ( tty->driver->ops->flush_buffer ) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#108: FILE: drivers/char/ip2/ip2main.c:1619:
+	if ( tty->driver->ops->flush_buffer ) 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#108: FILE: drivers/char/ip2/ip2main.c:1619:
+	if ( tty->driver->ops->flush_buffer ) 

CHECK:CAMELCASE: Avoid CamelCase: <pCh>
#128: FILE: drivers/char/ip2/ip2main.c:1748:
+	write_lock_irqsave(&pCh->Pbuf_spinlock, flags);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Pbuf_spinlock>
#128: FILE: drivers/char/ip2/ip2main.c:1748:
+	write_lock_irqsave(&pCh->Pbuf_spinlock, flags);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#200: FILE: drivers/char/n_r3964.c:380:
+	if (tty->ops->put_char) {
+		tty->ops->put_char(tty, ch);
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty"
#210: FILE: drivers/char/n_r3964.c:390:
+	if (tty == NULL || tty->ops->flush_chars == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->ops->flush_chars"
#210: FILE: drivers/char/n_r3964.c:390:
+	if (tty == NULL || tty->ops->flush_chars == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <pBlock>
#225: FILE: drivers/char/n_r3964.c:450:
+	if (tty == NULL || pBlock == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#225: FILE: drivers/char/n_r3964.c:450:
+	if (tty == NULL || pBlock == NULL) {
 		return;
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty"
#225: FILE: drivers/char/n_r3964.c:450:
+	if (tty == NULL || pBlock == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pBlock"
#225: FILE: drivers/char/n_r3964.c:450:
+	if (tty == NULL || pBlock == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: drivers/char/n_tty.c:1569:
+	if (tty->ops->write && !tty_is_writelocked(tty) &&
+			tty_chars_in_buffer(tty) < WAKEUP_CHARS &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (tty->ops->hangup)
#569: FILE: drivers/char/tty_io.c:1522:
+		(tty->ops->hangup)(tty);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (tty->ops->stop)
#580: FILE: drivers/char/tty_io.c:1755:
+		(tty->ops->stop)(tty);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (tty->ops->start)
#591: FILE: drivers/char/tty_io.c:1789:
+		(tty->ops->start)(tty);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#600: FILE: drivers/char/tty_io.c:1974:
+	if (!tty || !tty->ops->write ||
[...]
 			return -EIO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: drivers/char/tty_io.c:1975:
+	if (!tty || !tty->ops->write ||
 		(test_bit(TTY_IO_ERROR, &tty->flags)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->ops->write_room"
#605: FILE: drivers/char/tty_io.c:1978:
+	if (tty->ops->write_room == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#606: FILE: drivers/char/tty_io.c:1979:
+		printk(KERN_ERR "tty driver %s lacks a write_room method.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: drivers/char/tty_io.c:1980:
+		printk(KERN_ERR "tty driver %s lacks a write_room method.\n",
+			tty->driver->name);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#634: FILE: drivers/char/tty_io.c:2592:
+		tty->ops->close(tty, filp);
 		                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#645: FILE: drivers/char/tty_io.c:2876:
+			retval = tty->ops->open(tty, filp);
 			                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#654: FILE: drivers/char/tty_io.c:2975:
+	retval = ptm_driver->ops->open(tty, filp);
 	                                    ^^^^

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#746: FILE: drivers/char/tty_io.c:3588:
+				printk(KERN_WARNING "tty: driver %s needs updating to use break_ctl\n", tty->driver->name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#746: FILE: drivers/char/tty_io.c:3588:
+				printk(KERN_WARNING "tty: driver %s needs updating to use break_ctl\n", tty->driver->name);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#761: FILE: drivers/char/tty_io.c:3599:
+				printk(KERN_WARNING "tty: driver %s needs updating to use break_ctl\n", tty->driver->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#761: FILE: drivers/char/tty_io.c:3599:
+				printk(KERN_WARNING "tty: driver %s needs updating to use break_ctl\n", tty->driver->name);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (tty->ops->ioctl)
#810: FILE: drivers/char/tty_io.c:3704:
+		retval = (tty->ops->ioctl)(tty, file, cmd, arg);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (tty->ops->compat_ioctl)
#821: FILE: drivers/char/tty_io.c:3732:
+		retval = (tty->ops->compat_ioctl)(tty, file, cmd, arg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#862: FILE: drivers/char/tty_io.c:4012:
+EXPORT_SYMBOL_GPL(tty_put_char);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#932: FILE: drivers/char/tty_ioctl.c:51:
+EXPORT_SYMBOL(tty_chars_in_buffer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#941: FILE: drivers/char/tty_ioctl.c:60:
+EXPORT_SYMBOL(tty_write_room);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#949: FILE: drivers/char/tty_ioctl.c:68:
+EXPORT_SYMBOL(tty_driver_flush_buffer);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#951: FILE: drivers/char/tty_ioctl.c:70:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#981: FILE: drivers/char/tty_ioctl.c:423:
+^Istruct ktermios old_termios; $

CHECK:SPACING: No space is necessary after a cast
#1051: FILE: drivers/char/tty_ioctl.c:1011:
+		return put_user(tty_chars_in_buffer(tty), (int __user *) arg);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1172: FILE: drivers/net/hamradio/6pack.c:495:
 	if (test_and_clear_bit(TTY_THROTTLED, &tty->flags)
+	    && tty->ops->unthrottle)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->ops->write"
#1201: FILE: drivers/net/hamradio/6pack.c:604:
+	if (tty->ops->write == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->ops->write"
#1267: FILE: drivers/net/hamradio/mkiss.c:739:
+	if (tty->ops->write == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1288: FILE: drivers/net/hamradio/mkiss.c:940:
 	if (test_and_clear_bit(TTY_THROTTLED, &tty->flags)
+	    && tty->ops->unthrottle)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1333: FILE: drivers/net/irda/irtty-sir.c:125:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "priv->tty->ops->tiocmset"
#1389: FILE: drivers/net/irda/irtty-sir.c:169:
+	IRDA_ASSERT(priv->tty->ops->tiocmset != NULL, return -1;);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->ops->write"
#1493: FILE: drivers/net/ppp_async.c:161:
+	if (tty->ops->write == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1505: FILE: drivers/net/ppp_async.c:365:
 	if (test_and_clear_bit(TTY_THROTTLED, &tty->flags)
+	    && tty->ops->unthrottle)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->ops->write"
#1526: FILE: drivers/net/ppp_synctty.c:210:
+	if (tty->ops->write == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1538: FILE: drivers/net/ppp_synctty.c:405:
 	if (test_and_clear_bit(TTY_THROTTLED, &tty->flags)
+	    && tty->ops->unthrottle)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->ops->write"
#1594: FILE: drivers/net/slip.c:833:
+	if (tty->ops->write == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1646: FILE: drivers/serial/serial_core.c:637:
+^I   occur as we go */^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1646: FILE: drivers/serial/serial_core.c:637:
+	/* Ensure the state we copy is consistent and no hardware changes
+	   occur as we go */	

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1646: FILE: drivers/serial/serial_core.c:637:
+	   occur as we go */	

ERROR:CODE_INDENT: code indent should use tabs where possible
#1777: FILE: drivers/usb/serial/usb-serial.c:305:
+           drop to zero until after the last close completes */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1777: FILE: drivers/usb/serial/usb-serial.c:305:
+	/* open_count is managed under the mutex lock for the tty so cannot
+           drop to zero until after the last close completes */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1777: FILE: drivers/usb/serial/usb-serial.c:305:
+           drop to zero until after the last close completes */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1887: FILE: drivers/usb/serial/usb-serial.c:366:
+	if (port->serial->type->ioctl) {
[...]
 	else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2110: FILE: include/linux/tty_driver.h:86:
+ * ^Idevice's termios settings have changed. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2110: FILE: include/linux/tty_driver.h:86:
+ * ^Idevice's termios settings have changed. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2113: FILE: include/linux/tty_driver.h:89:
+ *^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2129: FILE: include/linux/tty_driver.h:115:
+ *^IOptional: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2158: FILE: include/linux/tty_driver.h:144:
+ * ^ITIOCCBRK. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2158: FILE: include/linux/tty_driver.h:144:
+ * ^ITIOCCBRK. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2265: FILE: include/linux/tty.h:197:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2265: FILE: include/linux/tty.h:197:
+ $

WARNING:CONST_STRUCT: struct tty_operations should normally be const
#2266: FILE: include/linux/tty.h:198:
+struct tty_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2279: FILE: include/linux/tty.h:320:
+extern int tty_put_char(struct tty_struct *tty, unsigned char c);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2280: FILE: include/linux/tty.h:321:
+extern int tty_chars_in_buffer(struct tty_struct *tty);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2281: FILE: include/linux/tty.h:322:
+extern int tty_write_room(struct tty_struct *tty);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2282: FILE: include/linux/tty.h:323:
+extern void tty_driver_flush_buffer(struct tty_struct *tty);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000296369.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 23 warnings, 33 checks, 2044 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000296369.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
