WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 32)
#62: FILE: drivers/power/power_supply_core.c:70:
+				if (epsy->num_properties) {
 				if (epsy->get_property(epsy,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 32)
#66: FILE: drivers/power/power_supply_core.c:74:
+				} else {
[...]
+				struct device_attribute *attr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#69: FILE: drivers/power/power_supply_core.c:77:
+				struct device_attribute *attr;
+				attr = power_supply_find_attr(epsy, "online");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: drivers/power/power_supply_core.c:79:
+				if (!attr || power_supply_attr_run(epsy, attr,
+						str_to_int, &ret.intval))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#87: FILE: drivers/power/power_supply_leds.c:22:
+	if (psy->num_properties) {
 	if (psy->get_property(psy, POWER_SUPPLY_PROP_STATUS, &status))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#90: FILE: drivers/power/power_supply_leds.c:25:
+	} else {
[...]
+	attr = power_supply_find_attr(psy, "status");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: drivers/power/power_supply_leds.c:29:
+	if (!attr || power_supply_attr_run(psy, attr, str_to_int,
+			&status.intval))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#106: FILE: drivers/power/power_supply_leds.c:116:
+	if (psy->num_properties) {
 	if (psy->get_property(psy, POWER_SUPPLY_PROP_ONLINE, &online))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#109: FILE: drivers/power/power_supply_leds.c:119:
+	} else {
[...]
+	attr = power_supply_find_attr(psy, "online");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: drivers/power/power_supply_leds.c:123:
+	if (!attr || power_supply_attr_run(psy, attr, str_to_int,
+			&online.intval))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#127: FILE: drivers/power/power_supply_sysfs.c:141:
+	if (psy->num_properties) {
 	for (j = 0; j < psy->num_properties; j++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#134: FILE: drivers/power/power_supply_sysfs.c:148:
+	} else {
[...]
+	for (j = 0; psy->props[j]; j++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#146: FILE: drivers/power/power_supply_sysfs.c:160:
+	if (psy->num_properties) {
 	while (j--)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#150: FILE: drivers/power/power_supply_sysfs.c:164:
+	} else {
[...]
+	while (j--)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#162: FILE: drivers/power/power_supply_sysfs.c:183:
+	if (psy->num_properties) {
 	for (i = 0; i < psy->num_properties; i++)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#166: FILE: drivers/power/power_supply_sysfs.c:187:
+	} else {
[...]
+	for (i = 0; psy->props[i]; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: drivers/power/power_supply_sysfs.c:195:
+struct device_attribute *power_supply_find_attr(struct power_supply *psy,
+		const char *name)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: drivers/power/power_supply_sysfs.c:214:
+int power_supply_attr_run(struct power_supply *psy,
+		struct device_attribute *attr,

CHECK:SPACING: No space is necessary after a cast
#199: FILE: drivers/power/power_supply_sysfs.c:220:
+	buf = (char *) get_zeroed_page(GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#210: FILE: drivers/power/power_supply_sysfs.c:231:
+		free_page((unsigned long) buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: drivers/power/power_supply_sysfs.c:274:
+	uarg->ret = add_uevent_var(uarg->env, "POWER_SUPPLY_%s=%s",
+			uarg->attrname, buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: drivers/power/power_supply_sysfs.c:278:
+static int add_uevent_arg_wrapper(struct power_supply *psy,
+		struct device_attribute *attr, struct kobj_uevent_env *env)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#272: FILE: drivers/power/power_supply_sysfs.c:350:
+	if (psy->num_properties) {
 	dev_dbg(dev, "%zd dynamic props\n", psy->num_properties);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#280: FILE: drivers/power/power_supply_sysfs.c:387:
+	} else {
[...]
+	for (j = 0; psy->props[j]; j++) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#288: FILE: drivers/power/power_supply_sysfs.c:395:
+		 * send the uevent with at least the PRESENT=0 property. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#307: FILE: include/linux/power_supply.h:43:
+	static char *status_text[] = {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#311: FILE: include/linux/power_supply.h:47:
+	BUG_ON(status < POWER_SUPPLY_STATUS_UNKNOWN ||

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: include/linux/power_supply.h:48:
+	BUG_ON(status < POWER_SUPPLY_STATUS_UNKNOWN ||
+			status > POWER_SUPPLY_STATUS_FULL);

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#325: FILE: include/linux/power_supply.h:63:
+	static char *health_text[] = {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#330: FILE: include/linux/power_supply.h:68:
+	BUG_ON(health < POWER_SUPPLY_HEALTH_UNKNOWN ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: include/linux/power_supply.h:69:
+	BUG_ON(health < POWER_SUPPLY_HEALTH_UNKNOWN ||
+			health > POWER_SUPPLY_HEALTH_UNSPEC_FAILURE);

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#344: FILE: include/linux/power_supply.h:84:
+	static char *technology_text[] = {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: include/linux/power_supply.h:88:
+	BUG_ON(tech < POWER_SUPPLY_TECHNOLOGY_UNKNOWN ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: include/linux/power_supply.h:89:
+	BUG_ON(tech < POWER_SUPPLY_TECHNOLOGY_UNKNOWN ||
+			tech > POWER_SUPPLY_TECHNOLOGY_NiCd);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#354: FILE: include/linux/power_supply.h:94:
+#define POWER_SUPPLY_STATUS(cb)     __ATTR(status, S_IRUGO, cb, NULL)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#355: FILE: include/linux/power_supply.h:95:
+#define POWER_SUPPLY_HEALTH(cb)     __ATTR(health, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#356: FILE: include/linux/power_supply.h:96:
+#define POWER_SUPPLY_PRESENT(cb)    __ATTR(present, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#357: FILE: include/linux/power_supply.h:97:
+#define POWER_SUPPLY_ONLINE(cb)     __ATTR(online, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#358: FILE: include/linux/power_supply.h:98:
+#define POWER_SUPPLY_TECHNOLOGY(cb) __ATTR(technology, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#359: FILE: include/linux/power_supply.h:99:
+#define POWER_SUPPLY_VOLT_MAX(cb)   __ATTR(voltage_max_design, S_IRUGO, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#361: FILE: include/linux/power_supply.h:101:
+#define POWER_SUPPLY_VOLT_MIN(cb)   __ATTR(voltage_min_design, S_IRUGO, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#363: FILE: include/linux/power_supply.h:103:
+#define POWER_SUPPLY_VOLT_NOW(cb)   __ATTR(voltage_now, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#364: FILE: include/linux/power_supply.h:104:
+#define POWER_SUPPLY_VOLT_AVG(cb)   __ATTR(voltage_avg, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#365: FILE: include/linux/power_supply.h:105:
+#define POWER_SUPPLY_CURR_NOW(cb)   __ATTR(current_now, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#366: FILE: include/linux/power_supply.h:106:
+#define POWER_SUPPLY_CURR_AVG(cb)   __ATTR(current_avg, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#368: FILE: include/linux/power_supply.h:108:
+						S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#369: FILE: include/linux/power_supply.h:109:
+#define POWER_SUPPLY_CHG_EMPTY_DESIGN(cb) __ATTR(charge_empty_, S_IRUGO, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#371: FILE: include/linux/power_supply.h:111:
+#define POWER_SUPPLY_CHG_FULL(cb)   __ATTR(charge_full, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#372: FILE: include/linux/power_supply.h:112:
+#define POWER_SUPPLY_CHG_EMPTY(cb)  __ATTR(charge_empty, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#373: FILE: include/linux/power_supply.h:113:
+#define POWER_SUPPLY_CHG_NOW(cb)    __ATTR(charge_now, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#374: FILE: include/linux/power_supply.h:114:
+#define POWER_SUPPLY_CHG_AVG(cb)    __ATTR(charge_empty, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#376: FILE: include/linux/power_supply.h:116:
+						S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#378: FILE: include/linux/power_supply.h:118:
+						S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#379: FILE: include/linux/power_supply.h:119:
+#define POWER_SUPPLY_ENERGY_FULL(cb) __ATTR(energy_full, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#380: FILE: include/linux/power_supply.h:120:
+#define POWER_SUPPLY_ENERGY_EMPTY(cb) __ATTR(energy_empty, S_IRUGO, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#382: FILE: include/linux/power_supply.h:122:
+#define POWER_SUPPLY_ENERGY_NOW(cb) __ATTR(energy_now, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#383: FILE: include/linux/power_supply.h:123:
+#define POWER_SUPPLY_ENERGY_AVG(cb) __ATTR(energy_avg, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#385: FILE: include/linux/power_supply.h:125:
+#define POWER_SUPPLY_CAPACITY(cb)   __ATTR(capacity, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#386: FILE: include/linux/power_supply.h:126:
+#define POWER_SUPPLY_TEMP(cb)       __ATTR(temp, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#387: FILE: include/linux/power_supply.h:127:
+#define POWER_SUPPLY_TEMP_AMB(cb)   __ATTR(temp_ambient, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#388: FILE: include/linux/power_supply.h:128:
+#define POWER_SUPPLY_TTE_NOW(cb)    __ATTR(time_to_empty_now, S_IRUGO, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#390: FILE: include/linux/power_supply.h:130:
+#define POWER_SUPPLY_TTE_AVG(cb)    __ATTR(time_to_empty_avg, S_IRUGO, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#392: FILE: include/linux/power_supply.h:132:
+#define POWER_SUPPLY_TTF_NOW(cb)    __ATTR(time_to_full_now, S_IRUGO, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#394: FILE: include/linux/power_supply.h:134:
+#define POWER_SUPPLY_TTF_AVG(cb)    __ATTR(time_to_full_avg, S_IRUGO, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#396: FILE: include/linux/power_supply.h:136:
+#define POWER_SUPPLY_MODEL(cb)      __ATTR(model_name, S_IRUGO, cb, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#397: FILE: include/linux/power_supply.h:137:
+#define POWER_SUPPLY_MFR(cb)        __ATTR(manufacturer, S_IRUGO, cb, NULL)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#417: FILE: include/linux/power_supply.h:251:
+extern struct device_attribute *power_supply_find_attr(struct power_supply *psy,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: include/linux/power_supply.h:252:
+extern struct device_attribute *power_supply_find_attr(struct power_supply *psy,
+		const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#419: FILE: include/linux/power_supply.h:253:
+extern int power_supply_attr_run(struct power_supply *psy,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: include/linux/power_supply.h:254:
+extern int power_supply_attr_run(struct power_supply *psy,
+		struct device_attribute *attr,

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#426: FILE: include/linux/power_supply.h:260:
+	*(int *)arg = simple_strtol(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346406.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 55 warnings, 16 checks, 349 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346406.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
