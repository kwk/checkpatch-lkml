CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#72: FILE: include/linux/notifier.h:76:
+	spinlock_t lock;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val1' - possible side-effects?
#85: FILE: include/linux/notifier.h:100:
+#define TUNABLE_ATOMIC_INIT_NOTIFIER(val1, val2) do {	\
+		spin_lock_init(&(val1)->lock);		\
+		(val1)->head = NULL;			\
+		(val1)->name = val2;			\
+		(val1)->dir = NULL;			\
+	} while (0)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#99: FILE: include/linux/notifier.h:122:
+		.lock =__SPIN_LOCK_UNLOCKED(val1.lock),		\
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#110: FILE: include/linux/notifier.h:136:
+#define TUNABLE_ATOMIC_NOTIFIER_HEAD(name, val)			\
+	struct tunable_atomic_notifier_head name =			\
+		TUNABLE_ATOMIC_NOTIFIER_INIT(name, val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#120: FILE: include/linux/notifier.h:149:
+extern int tunable_atomic_notifier_chain_register(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/linux/notifier.h:149:
+extern int tunable_atomic_notifier_chain_register(

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#131: FILE: include/linux/notifier.h:162:
+extern int tunable_atomic_notifier_chain_unregister(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/notifier.h:162:
+extern int tunable_atomic_notifier_chain_unregister(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#141: FILE: include/linux/notifier.h:178:
+extern int tunable_atomic_notifier_call_chain(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/notifier.h:178:
+extern int tunable_atomic_notifier_call_chain(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#144: FILE: include/linux/notifier.h:181:
+extern int __tunable_atomic_notifier_call_chain(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/notifier.h:181:
+extern int __tunable_atomic_notifier_call_chain(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: kernel/sys.c:403:
+static ssize_t priority_read(struct file *file,
+			char __user *user_buf, size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: kernel/sys.c:418:
+static ssize_t priority_write(struct file *file,
+		const char __user *user_buf, size_t count, loff_t *ppos)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#206: FILE: kernel/sys.c:437:
+	tmp = simple_strtoul(buf, &end, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end == buf'
#207: FILE: kernel/sys.c:438:
+	if ((end == buf) || (tmp > INT_MAX))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp > INT_MAX'
#207: FILE: kernel/sys.c:438:
+	if ((end == buf) || (tmp > INT_MAX))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#228: FILE: kernel/sys.c:459:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: kernel/sys.c:467:
+static ssize_t description_read(struct file *file,
+			char __user *user_buf, size_t count, loff_t *ppos)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#261: FILE: kernel/sys.c:492:
+int tunable_atomic_notifier_chain_register(

CHECK:BRACES: braces {} should be used on all arms of this statement
#273: FILE: kernel/sys.c:504:
+	if (!nh->dir) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#278: FILE: kernel/sys.c:509:
+	} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: kernel/sys.c:517:
+	pri_dentry = debugfs_create_file("priority",0600, nb_dir, n, &pri_fops);
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: kernel/sys.c:524:
+		desc_dentry = debugfs_create_file("description", 0400, nb_dir,
+							desc, &desc_fops);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: kernel/sys.c:536:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#320: FILE: kernel/sys.c:551:
+EXPORT_SYMBOL_GPL(tunable_atomic_notifier_chain_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#333: FILE: kernel/sys.c:564:
+int tunable_atomic_notifier_chain_unregister(

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#355: FILE: kernel/sys.c:586:
+EXPORT_SYMBOL_GPL(tunable_atomic_notifier_chain_unregister);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#378: FILE: kernel/sys.c:609:
+int __kprobes __tunable_atomic_notifier_call_chain(

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#391: FILE: kernel/sys.c:622:
+EXPORT_SYMBOL_GPL(__tunable_atomic_notifier_call_chain);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#393: FILE: kernel/sys.c:624:
+int __kprobes tunable_atomic_notifier_call_chain(

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#400: FILE: kernel/sys.c:631:
+EXPORT_SYMBOL_GPL(tunable_atomic_notifier_call_chain);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000368555.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 5 warnings, 24 checks, 348 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000368555.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
