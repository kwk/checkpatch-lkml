WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git irq-core-for-linus

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: arch/x86/include/asm/io_apic.h:191:
+extern void probe_nr_irqs_gsi(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#265: FILE: arch/x86/kernel/io_apic.c:132:
+	printk(KERN_DEBUG "  alloc irq_2_pin on cpu %d node %d\n", cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#365: FILE: arch/x86/kernel/io_apic.c:210:
+	printk(KERN_DEBUG "  alloc irq_cfg on cpu %d node %d\n", cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#390: FILE: arch/x86/kernel/io_apic.c:223:
+			printk(KERN_ERR "can not alloc irq_cfg\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#391: FILE: arch/x86/kernel/io_apic.c:224:
+			BUG_ON(1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: arch/x86/kernel/io_apic.c:291:
+void arch_init_copy_chip_data(struct irq_desc *old_desc,
+				 struct irq_desc *desc, int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#648: FILE: arch/x86/kernel/io_apic.c:576:
+			printk(KERN_ERR "can not alloc irq_2_pin to add %d - %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: arch/x86/kernel/io_apic.c:577:
+			printk(KERN_ERR "can not alloc irq_2_pin to add %d - %d\n",
+					apic, pin);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: arch/x86/kernel/io_apic.c:604:
+static void __init replace_pin_at_irq_cpu(struct irq_cfg *cfg, int cpu,
 				      int oldapic, int oldpin,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: arch/x86/kernel/io_apic.c:627:
+static inline void io_apic_modify_irq(struct irq_cfg *cfg,
 				int mask_and, int mask_or,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: arch/x86/kernel/io_apic.c:675:
+	io_apic_modify_irq(cfg, ~IO_APIC_REDIR_LEVEL_TRIGGER,
 			IO_APIC_REDIR_MASKED, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: arch/x86/kernel/io_apic.c:681:
+	io_apic_modify_irq(cfg, ~IO_APIC_REDIR_MASKED,
 			IO_APIC_REDIR_LEVEL_TRIGGER, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#751: FILE: arch/x86/kernel/io_apic.c:690:
+	BUG_ON(!cfg);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#777: FILE: arch/x86/kernel/io_apic.c:713:
+}
+static void unmask_IO_APIC_irq(unsigned int irq)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfg->move_in_progress'
#812: FILE: arch/x86/kernel/io_apic.c:1238:
+	if ((cfg->move_in_progress) || cfg->move_cleanup_count)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#935: FILE: arch/x86/kernel/io_apic.c:1575:
+				printk(KERN_INFO "can not get irq_desc for %d\n", irq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: arch/x86/kernel/io_apic.c:1582:
+			setup_IO_APIC_irq(apic, pin, irq, desc,
 					irq_trigger(idx), irq_polarity(idx));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1100: FILE: arch/x86/kernel/io_apic.c:2415:
+}
+static void set_ir_ioapic_affinity_irq(unsigned int irq, cpumask_t mask)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1374: FILE: arch/x86/kernel/io_apic.c:3158:
+			printk(KERN_INFO "can not get irq_desc for %d\n", new);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1799: FILE: arch/x86/kernel/io_apic.c:3984:
+		printk(KERN_INFO "can not get irq_desc %d\n", irq);

WARNING:INCLUDE_LINUX: Use #include <linux/smp.h> instead of <asm/smp.h>
#1991: FILE: drivers/pci/intr_remapping.c:8:
+#include <asm/smp.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2009: FILE: drivers/pci/intr_remapping.c:32:
+	printk(KERN_DEBUG "alloc irq_2_iommu on cpu %d node %d\n", cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2037: FILE: drivers/pci/intr_remapping.c:59:
+		printk(KERN_INFO "can not get irq_desc for %d\n", irq);

CHECK:CAMELCASE: Avoid CamelCase: <irq_2_iommuX>
#2056: FILE: drivers/pci/intr_remapping.c:78:
+static struct irq_2_iommu irq_2_iommuX[NR_IRQS];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2065: FILE: drivers/pci/intr_remapping.c:87:
+}
+static struct irq_2_iommu *irq_2_iommu_alloc(unsigned int irq)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2091: FILE: drivers/pci/intr_remapping.c:196:
+		printk(KERN_ERR "can't allocate irq_2_iommu\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2104: FILE: drivers/pci/intr_remapping.c:249:
+		printk(KERN_ERR "can't allocate irq_2_iommu\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#2219: FILE: drivers/pci/msi.c:325:
+		struct irq_desc *desc = irq_to_desc(dev->irq);
+		msi_set_mask_bits(desc, entry->msi_attrib.maskbits_mask,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2242: FILE: drivers/pci/msi.c:620:
+		struct irq_desc *desc = irq_to_desc(dev->irq);
+		msi_set_mask_bits(desc, mask, ~mask);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#2280: FILE: drivers/xen/events.c:247:
+	if (WARN_ON(desc == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2421: FILE: include/linux/irq.h:196:
+extern void early_irq_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2422: FILE: include/linux/irq.h:197:
+extern void arch_early_irq_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2423: FILE: include/linux/irq.h:198:
+extern void arch_init_chip_data(struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2424: FILE: include/linux/irq.h:199:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2425: FILE: include/linux/irq.h:200:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,
+					struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2426: FILE: include/linux/irq.h:201:
+extern void arch_free_chip_data(struct irq_desc *old_desc, struct irq_desc *desc);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2436: FILE: include/linux/irq.h:210:
+}
+static inline struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2443: FILE: include/linux/irq.h:217:
+extern struct irq_desc *irq_to_desc(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2444: FILE: include/linux/irq.h:218:
+extern struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2445: FILE: include/linux/irq.h:219:
+extern struct irq_desc *move_irq_desc(struct irq_desc *old_desc, int cpu);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#2447: FILE: include/linux/irq.h:221:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_to_desc(irq); irq < nr_irqs; irq++, desc = irq_to_desc(irq))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2447: FILE: include/linux/irq.h:221:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_to_desc(irq); irq < nr_irqs; irq++, desc = irq_to_desc(irq))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#2449: FILE: include/linux/irq.h:223:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_to_desc(irq); irq >= 0; irq--, desc = irq_to_desc(irq))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2449: FILE: include/linux/irq.h:223:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_to_desc(irq); irq >= 0; irq--, desc = irq_to_desc(irq))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#2502: FILE: include/linux/irqnr.h:16:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1; irq >= 0; irq--)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#2517: FILE: include/linux/irqnr.h:27:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2517: FILE: include/linux/irqnr.h:27:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#2525: FILE: include/linux/irqnr.h:33:
+#define for_each_irq_nr(irq)                   \
+       for (irq = 0; irq < nr_irqs; irq++)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2526: FILE: include/linux/irqnr.h:34:
+       for (irq = 0; irq < nr_irqs; irq++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2541: FILE: include/linux/kernel_stat.h:32:
+       unsigned int irqs[NR_IRQS];$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2570: FILE: include/linux/kernel_stat.h:64:
+extern unsigned int kstat_irqs_cpu(unsigned int irq, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2599: FILE: include/linux/msi.h:16:
+extern void read_msi_msg_desc(struct irq_desc *desc, struct msi_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2600: FILE: include/linux/msi.h:17:
+extern void write_msi_msg_desc(struct irq_desc *desc, struct msi_msg *msg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2669: FILE: include/linux/random.h:97:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#2869: FILE: kernel/irq/handle.c:59:
+void __init __attribute__((weak)) arch_early_irq_init(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2897: FILE: kernel/irq/handle.c:87:
+	printk(KERN_DEBUG "  alloc kstat_irqs on cpu %d node %d\n", cpu, node);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#2903: FILE: kernel/irq/handle.c:93:
+void __attribute__((weak)) arch_init_chip_data(struct irq_desc *desc, int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2917: FILE: kernel/irq/handle.c:107:
+		printk(KERN_ERR "can not alloc kstat_irqs\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2918: FILE: kernel/irq/handle.c:108:
+		BUG_ON(1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2931: FILE: kernel/irq/handle.c:121:
+	[0 ... NR_IRQS_LEGACY-1] = {
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2981: FILE: kernel/irq/handle.c:171:
+		printk(KERN_WARNING "irq >= NR_IRQS in irq_to_desc_alloc: %d %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2982: FILE: kernel/irq/handle.c:172:
+		printk(KERN_WARNING "irq >= NR_IRQS in irq_to_desc_alloc: %d %d\n",
+				irq, NR_IRQS);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3000: FILE: kernel/irq/handle.c:190:
+	printk(KERN_DEBUG "  alloc irq_desc for %d on cpu %d node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3001: FILE: kernel/irq/handle.c:191:
+	printk(KERN_DEBUG "  alloc irq_desc for %d on cpu %d node %d\n",
+		 irq, cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3003: FILE: kernel/irq/handle.c:193:
+		printk(KERN_ERR "can not alloc irq_desc\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3004: FILE: kernel/irq/handle.c:194:
+		BUG_ON(1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3084: FILE: kernel/irq/handle.c:442:
+	struct irq_desc *desc = irq_to_desc(irq);
+	return desc->kstat_irqs[cpu];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3098: FILE: kernel/irq/internals.h:17:
+extern void init_kstat_irqs(struct irq_desc *desc, int cpu, int nr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3139: FILE: kernel/irq/manage.c:465:
+			ret = __irq_set_trigger(desc, irq,
+					new->flags & IRQF_TRIGGER_MASK);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#3144: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3149: FILE: kernel/irq/numa_migrate.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3190: FILE: kernel/irq/numa_migrate.c:42:
+static void init_copy_one_irq_desc(int irq, struct irq_desc *old_desc,
+		 struct irq_desc *desc, int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3206: FILE: kernel/irq/numa_migrate.c:58:
+static struct irq_desc *__real_move_irq_desc(struct irq_desc *old_desc,
+						int cpu)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#3220: FILE: kernel/irq/numa_migrate.c:72:
+	if (desc && old_desc != desc)
+			goto out_unlock;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3225: FILE: kernel/irq/numa_migrate.c:77:
+	printk(KERN_DEBUG "  move irq_desc for %d to cpu %d node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3226: FILE: kernel/irq/numa_migrate.c:78:
+	printk(KERN_DEBUG "  move irq_desc for %d to cpu %d node %d\n",
+		 irq, cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3228: FILE: kernel/irq/numa_migrate.c:80:
+		printk(KERN_ERR "can not get new irq_desc for moving\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3257: FILE: kernel/irq/numa_migrate.c:109:
+	printk(KERN_DEBUG

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190058.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 35 warnings, 44 checks, 2879 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190058.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
