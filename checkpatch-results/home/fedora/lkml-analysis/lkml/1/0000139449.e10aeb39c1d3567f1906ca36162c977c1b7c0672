WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#175: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#180: FILE: include/linux/biotrack.h:1:
+#include <linux/cgroup.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: include/linux/biotrack.h:16:
+extern int register_biocgroup_notifier(struct notifier_block *nb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/linux/biotrack.h:17:
+extern int unregister_biocgroup_notifier(struct notifier_block *nb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#213: FILE: include/linux/biotrack.h:34:
+extern struct cgroup *get_cgroup_from_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: include/linux/biotrack.h:35:
+extern void put_cgroup_from_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#215: FILE: include/linux/biotrack.h:36:
+extern struct cgroup *bio_id_to_cgroup(int id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/linux/biotrack.h:43:
+extern void bio_cgroup_set_owner(struct page *page, struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#223: FILE: include/linux/biotrack.h:44:
+extern void bio_cgroup_reset_owner(struct page *page, struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/linux/biotrack.h:45:
+extern void bio_cgroup_reset_owner_pagedirty(struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: include/linux/biotrack.h:46:
+extern void bio_cgroup_reset_owner_pagedirty(struct page *page,
+						 struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#226: FILE: include/linux/biotrack.h:47:
+extern void bio_cgroup_copy_owner(struct page *page, struct page *opage);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: include/linux/biotrack.h:49:
+extern struct io_context *get_bio_cgroup_iocontext(struct bio *bio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: include/linux/biotrack.h:50:
+extern int get_bio_cgroup_id(struct bio *bio);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: include/linux/biotrack.h:70:
+static inline void bio_cgroup_reset_owner(struct page *page,
+						struct mm_struct *mm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: include/linux/biotrack.h:75:
+static inline void bio_cgroup_reset_owner_pagedirty(struct page *page,
+						struct mm_struct *mm)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: include/linux/memcontrol.h:40:
+extern void __init_mem_page_cgroup(struct page_cgroup *pc);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#436: FILE: mm/biotrack.c:1:
+/* biotrack.c - Block I/O Tracking

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#476: FILE: mm/biotrack.c:41:
+ * controller framework. It helps to find the the owner of an I/O request

WARNING:TYPO_SPELLING: 'referrence' may be misspelled - perhaps 'reference'?
#603: FILE: mm/biotrack.c:168:
+		/* Increment the referrence count not to be released ever. */
 		                 ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#654: FILE: mm/biotrack.c:219:
+	struct bio_cgroup *biog;
+	spin_lock_irq(&bio_cgroup_idr_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#745: FILE: mm/biotrack.c:310:
+	return (u64) biog->id;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#745: FILE: mm/biotrack.c:310:
+	struct bio_cgroup *biog = cgroup_bio(cgrp);
+	return (u64) biog->id;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#748: FILE: mm/biotrack.c:313:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#941: FILE: mm/page_cgroup.c:89:
+	printk(KERN_INFO "please try cgroup_disable=memory,bio option if you"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#947: FILE: mm/page_cgroup.c:94:
+	printk(KERN_CRIT "please try cgroup_disable=memory,bio boot options\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#966: FILE: mm/page_cgroup.c:269:
+	printk(KERN_INFO

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000139449.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 17 checks, 788 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000139449.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
