WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#52: FILE: drivers/mtd/nand/Kconfig:77:
+config MTD_NAND_OMAP2
+	tristate "NAND Flash device on OMAP2 and OMAP3"
+	depends on ARM && MTD_NAND && (ARCH_OMAP2 || ARCH_OMAP3)
+	help
+          Support for NAND flash on Texas Instruments OMAP2 and OMAP3 platforms.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: drivers/mtd/nand/omap2.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#119: FILE: drivers/mtd/nand/omap2.c:42:
+#define NAND_Ecc_P1e		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#120: FILE: drivers/mtd/nand/omap2.c:43:
+#define NAND_Ecc_P2e		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#121: FILE: drivers/mtd/nand/omap2.c:44:
+#define NAND_Ecc_P4e		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#122: FILE: drivers/mtd/nand/omap2.c:45:
+#define NAND_Ecc_P8e		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#123: FILE: drivers/mtd/nand/omap2.c:46:
+#define NAND_Ecc_P16e		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#124: FILE: drivers/mtd/nand/omap2.c:47:
+#define NAND_Ecc_P32e		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#125: FILE: drivers/mtd/nand/omap2.c:48:
+#define NAND_Ecc_P64e		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#126: FILE: drivers/mtd/nand/omap2.c:49:
+#define NAND_Ecc_P128e		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#127: FILE: drivers/mtd/nand/omap2.c:50:
+#define NAND_Ecc_P256e		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#128: FILE: drivers/mtd/nand/omap2.c:51:
+#define NAND_Ecc_P512e		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#129: FILE: drivers/mtd/nand/omap2.c:52:
+#define NAND_Ecc_P1024e		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#130: FILE: drivers/mtd/nand/omap2.c:53:
+#define NAND_Ecc_P2048e		(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#132: FILE: drivers/mtd/nand/omap2.c:55:
+#define NAND_Ecc_P1o		(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#133: FILE: drivers/mtd/nand/omap2.c:56:
+#define NAND_Ecc_P2o		(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#134: FILE: drivers/mtd/nand/omap2.c:57:
+#define NAND_Ecc_P4o		(1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#135: FILE: drivers/mtd/nand/omap2.c:58:
+#define NAND_Ecc_P8o		(1 << 19)

CHECK:BIT_MACRO: Prefer using the BIT macro
#136: FILE: drivers/mtd/nand/omap2.c:59:
+#define NAND_Ecc_P16o		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#137: FILE: drivers/mtd/nand/omap2.c:60:
+#define NAND_Ecc_P32o		(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#138: FILE: drivers/mtd/nand/omap2.c:61:
+#define NAND_Ecc_P64o		(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#139: FILE: drivers/mtd/nand/omap2.c:62:
+#define NAND_Ecc_P128o		(1 << 23)

CHECK:BIT_MACRO: Prefer using the BIT macro
#140: FILE: drivers/mtd/nand/omap2.c:63:
+#define NAND_Ecc_P256o		(1 << 24)

CHECK:BIT_MACRO: Prefer using the BIT macro
#141: FILE: drivers/mtd/nand/omap2.c:64:
+#define NAND_Ecc_P512o		(1 << 25)

CHECK:BIT_MACRO: Prefer using the BIT macro
#142: FILE: drivers/mtd/nand/omap2.c:65:
+#define NAND_Ecc_P1024o		(1 << 26)

CHECK:BIT_MACRO: Prefer using the BIT macro
#143: FILE: drivers/mtd/nand/omap2.c:66:
+#define NAND_Ecc_P2048o		(1 << 27)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#147: FILE: drivers/mtd/nand/omap2.c:70:
+#define P2048e(a)	(TF(a & NAND_Ecc_P2048e)	<< 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#148: FILE: drivers/mtd/nand/omap2.c:71:
+#define P2048o(a)	(TF(a & NAND_Ecc_P2048o)	<< 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#149: FILE: drivers/mtd/nand/omap2.c:72:
+#define P1e(a)		(TF(a & NAND_Ecc_P1e)		<< 2)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#150: FILE: drivers/mtd/nand/omap2.c:73:
+#define P1o(a)		(TF(a & NAND_Ecc_P1o)		<< 3)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#151: FILE: drivers/mtd/nand/omap2.c:74:
+#define P2e(a)		(TF(a & NAND_Ecc_P2e)		<< 4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#152: FILE: drivers/mtd/nand/omap2.c:75:
+#define P2o(a)		(TF(a & NAND_Ecc_P2o)		<< 5)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#153: FILE: drivers/mtd/nand/omap2.c:76:
+#define P4e(a)		(TF(a & NAND_Ecc_P4e)		<< 6)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#154: FILE: drivers/mtd/nand/omap2.c:77:
+#define P4o(a)		(TF(a & NAND_Ecc_P4o)		<< 7)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#156: FILE: drivers/mtd/nand/omap2.c:79:
+#define P8e(a)		(TF(a & NAND_Ecc_P8e)		<< 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#157: FILE: drivers/mtd/nand/omap2.c:80:
+#define P8o(a)		(TF(a & NAND_Ecc_P8o)		<< 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#158: FILE: drivers/mtd/nand/omap2.c:81:
+#define P16e(a)		(TF(a & NAND_Ecc_P16e)		<< 2)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#159: FILE: drivers/mtd/nand/omap2.c:82:
+#define P16o(a)		(TF(a & NAND_Ecc_P16o)		<< 3)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#160: FILE: drivers/mtd/nand/omap2.c:83:
+#define P32e(a)		(TF(a & NAND_Ecc_P32e)		<< 4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#161: FILE: drivers/mtd/nand/omap2.c:84:
+#define P32o(a)		(TF(a & NAND_Ecc_P32o)		<< 5)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#162: FILE: drivers/mtd/nand/omap2.c:85:
+#define P64e(a)		(TF(a & NAND_Ecc_P64e)		<< 6)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#163: FILE: drivers/mtd/nand/omap2.c:86:
+#define P64o(a)		(TF(a & NAND_Ecc_P64o)		<< 7)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#165: FILE: drivers/mtd/nand/omap2.c:88:
+#define P128e(a)	(TF(a & NAND_Ecc_P128e)		<< 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#166: FILE: drivers/mtd/nand/omap2.c:89:
+#define P128o(a)	(TF(a & NAND_Ecc_P128o)		<< 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#167: FILE: drivers/mtd/nand/omap2.c:90:
+#define P256e(a)	(TF(a & NAND_Ecc_P256e)		<< 2)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#168: FILE: drivers/mtd/nand/omap2.c:91:
+#define P256o(a)	(TF(a & NAND_Ecc_P256o)		<< 3)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#169: FILE: drivers/mtd/nand/omap2.c:92:
+#define P512e(a)	(TF(a & NAND_Ecc_P512e)		<< 4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#170: FILE: drivers/mtd/nand/omap2.c:93:
+#define P512o(a)	(TF(a & NAND_Ecc_P512o)		<< 5)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#171: FILE: drivers/mtd/nand/omap2.c:94:
+#define P1024e(a)	(TF(a & NAND_Ecc_P1024e)	<< 6)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#172: FILE: drivers/mtd/nand/omap2.c:95:
+#define P1024o(a)	(TF(a & NAND_Ecc_P1024o)	<< 7)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#174: FILE: drivers/mtd/nand/omap2.c:97:
+#define P8e_s(a)	(TF(a & NAND_Ecc_P8e)		<< 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#175: FILE: drivers/mtd/nand/omap2.c:98:
+#define P8o_s(a)	(TF(a & NAND_Ecc_P8o)		<< 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#176: FILE: drivers/mtd/nand/omap2.c:99:
+#define P16e_s(a)	(TF(a & NAND_Ecc_P16e)		<< 2)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#177: FILE: drivers/mtd/nand/omap2.c:100:
+#define P16o_s(a)	(TF(a & NAND_Ecc_P16o)		<< 3)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#178: FILE: drivers/mtd/nand/omap2.c:101:
+#define P1e_s(a)	(TF(a & NAND_Ecc_P1e)		<< 4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#179: FILE: drivers/mtd/nand/omap2.c:102:
+#define P1o_s(a)	(TF(a & NAND_Ecc_P1o)		<< 5)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#180: FILE: drivers/mtd/nand/omap2.c:103:
+#define P2e_s(a)	(TF(a & NAND_Ecc_P2e)		<< 6)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#181: FILE: drivers/mtd/nand/omap2.c:104:
+#define P2o_s(a)	(TF(a & NAND_Ecc_P2o)		<< 7)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#183: FILE: drivers/mtd/nand/omap2.c:106:
+#define P4e_s(a)	(TF(a & NAND_Ecc_P4e)		<< 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#184: FILE: drivers/mtd/nand/omap2.c:107:
+#define P4o_s(a)	(TF(a & NAND_Ecc_P4o)		<< 1)

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#187: FILE: drivers/mtd/nand/omap2.c:110:
+static const char *part_probes[] = { "cmdlinepart", NULL };

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#285: FILE: drivers/mtd/nand/omap2.c:208:
+static void omap_write_buf16(struct mtd_info *mtd, const u_char * buf, int len)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#289: FILE: drivers/mtd/nand/omap2.c:212:
+	u16 *p = (u16 *) buf;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#302: FILE: drivers/mtd/nand/omap2.c:225:
+}
+/**

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#308: FILE: drivers/mtd/nand/omap2.c:231:
+static int omap_verify_buf(struct mtd_info *mtd, const u_char * buf, int len)

CHECK:SPACING: No space is necessary after a cast
#312: FILE: drivers/mtd/nand/omap2.c:235:
+	u16 *p = (u16 *) buf;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#338: FILE: drivers/mtd/nand/omap2.c:261:
+	val = ((0x00000001<<8) | 0x00000001);
 	                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#379: FILE: drivers/mtd/nand/omap2.c:302:
+			    u8 *ecc_data2,	/* read from register */
+			    u8 *page_data)

CHECK:CAMELCASE: Avoid CamelCase: <isEccFF>
#388: FILE: drivers/mtd/nand/omap2.c:311:
+	int	isEccFF;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPLIT_STRING: quoted string split across lines
#477: FILE: drivers/mtd/nand/omap2.c:400:
+		DEBUG(MTD_DEBUG_LEVEL0, "Correcting single bit ECC error at "
+				"offset: %d, bit: %d\n", find_byte, find_bit);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'mismached' may be misspelled - perhaps 'mismatched'?
#502: FILE: drivers/mtd/nand/omap2.c:425:
+ * and if ECC's mismached, it will call 'omap_compare_ecc' for error detection
                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: drivers/mtd/nand/omap2.c:429:
+static int omap_correct_data(struct mtd_info *mtd, u_char *dat,
+				u_char *read_ecc, u_char *calc_ecc)

CHECK:CAMELCASE: Avoid CamelCase: <blockCnt>
#510: FILE: drivers/mtd/nand/omap2.c:433:
+	int blockCnt = 0, i = 0, ret = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->nand.ecc.mode == NAND_ECC_HW'
#513: FILE: drivers/mtd/nand/omap2.c:436:
+	if ((info->nand.ecc.mode == NAND_ECC_HW) &&
+			(info->nand.ecc.size  == 2048))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->nand.ecc.size  == 2048'
#513: FILE: drivers/mtd/nand/omap2.c:436:
+	if ((info->nand.ecc.mode == NAND_ECC_HW) &&
+			(info->nand.ecc.size  == 2048))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: drivers/mtd/nand/omap2.c:437:
+	if ((info->nand.ecc.mode == NAND_ECC_HW) &&
+			(info->nand.ecc.size  == 2048))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: drivers/mtd/nand/omap2.c:468:
+static int omap_calculate_ecc(struct mtd_info *mtd, const u_char *dat,
+				u_char *ecc_code)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: drivers/mtd/nand/omap2.c:518:
+		DEBUG(MTD_DEBUG_LEVEL0, "Error: Unrecognized Mode[%d]!\n",
+					mode);

CHECK:SPACING: No space is necessary after a cast
#628: FILE: drivers/mtd/nand/omap2.c:551:
+	this->IO_ADDR_W = (void *) info->gpmc_cs_baseaddr +

CHECK:SPACING: No space is necessary after a cast
#630: FILE: drivers/mtd/nand/omap2.c:553:
+	this->IO_ADDR_R = (void *) info->gpmc_cs_baseaddr + GPMC_CS_NAND_DATA;

WARNING:LINE_SPACING: Missing a blank line after declarations
#659: FILE: drivers/mtd/nand/omap2.c:582:
+		unsigned int cnt = 0;
+		while (cnt++ < 0x1FF) {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#670: FILE: drivers/mtd/nand/omap2.c:593:
+static int __devinit omap_nand_probe(struct platform_device *pdev)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#675: FILE: drivers/mtd/nand/omap2.c:598:
+^Iunsigned long ^I^I^Ival;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#677: FILE: drivers/mtd/nand/omap2.c:600:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdata"
#679: FILE: drivers/mtd/nand/omap2.c:602:
+	if (pdata == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*info)...) over kzalloc(sizeof(struct omap_nand_info)...)
#684: FILE: drivers/mtd/nand/omap2.c:607:
+	info = kzalloc(sizeof(struct omap_nand_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#839: FILE: drivers/mtd/nand/omap2.c:762:
+	printk(KERN_INFO "%s driver initializing\n", DRIVER_NAME);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131946.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 10 warnings, 75 checks, 795 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131946.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
