WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
Gitweb:     http://git.kernel.org/tip/35a50c8a20eea22c141e05c5667ac21c48b8b65d

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#107: FILE: Documentation/perf_counter/builtin-report.c:111:
+	uint64_t       start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#108: FILE: Documentation/perf_counter/builtin-report.c:112:
+	uint64_t       end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#155: FILE: Documentation/perf_counter/builtin-report.c:191:
+	const uint64_t ip = sym->start;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#158: FILE: Documentation/perf_counter/builtin-report.c:194:
+	while (*p != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#202: FILE: Documentation/perf_counter/builtin-report.c:350:
+	struct rb_node *nd;
 	                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#203: FILE: Documentation/perf_counter/builtin-report.c:351:
+	for (nd = rb_first(&self->syms); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#203: FILE: Documentation/perf_counter/builtin-report.c:351:
+	for (nd = rb_first(&self->syms); nd; nd = rb_next(nd)) {
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#203: FILE: Documentation/perf_counter/builtin-report.c:351:
+	for (nd = rb_first(&self->syms); nd; nd = rb_next(nd)) {
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#203: FILE: Documentation/perf_counter/builtin-report.c:351:
+	for (nd = rb_first(&self->syms); nd; nd = rb_next(nd)) {
 	                                                  ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: Documentation/perf_counter/builtin-report.c:351:
+	struct rb_node *nd;
+	for (nd = rb_first(&self->syms); nd; nd = rb_next(nd)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#204: FILE: Documentation/perf_counter/builtin-report.c:352:
+		struct symbol *pos = rb_entry(nd, struct symbol, rb_node);
 		                              ^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#211: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#216: FILE: Documentation/perf_counter/util/rbtree.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#217: FILE: Documentation/perf_counter/util/rbtree.c:2:
+/*
+  Red Black Trees

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: Documentation/perf_counter/util/rbtree.c:5:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#232: FILE: Documentation/perf_counter/util/rbtree.c:17:
+  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#233: FILE: Documentation/perf_counter/util/rbtree.c:18:
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#245: FILE: Documentation/perf_counter/util/rbtree.c:30:
+	if ((node->rb_right = right->rb_left))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#251: FILE: Documentation/perf_counter/util/rbtree.c:36:
+	if (parent)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#258: FILE: Documentation/perf_counter/util/rbtree.c:43:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#268: FILE: Documentation/perf_counter/util/rbtree.c:53:
+	if ((node->rb_left = left->rb_right))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#274: FILE: Documentation/perf_counter/util/rbtree.c:59:
+	if (parent)
+	{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#281: FILE: Documentation/perf_counter/util/rbtree.c:66:
+	}
+	else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#290: FILE: Documentation/perf_counter/util/rbtree.c:75:
+	while ((parent = rb_parent(node)) && rb_is_red(parent))
+	{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#294: FILE: Documentation/perf_counter/util/rbtree.c:79:
+		if (parent == gparent->rb_left)
+		{

WARNING:LINE_SPACING: Missing a blank line after declarations
#298: FILE: Documentation/perf_counter/util/rbtree.c:83:
+				register struct rb_node *uncle = gparent->rb_right;
+				if (uncle && rb_is_red(uncle))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#298: FILE: Documentation/perf_counter/util/rbtree.c:83:
+				if (uncle && rb_is_red(uncle))
+				{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#308: FILE: Documentation/perf_counter/util/rbtree.c:93:
+			if (parent->rb_right == node)
+			{

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: Documentation/perf_counter/util/rbtree.c:96:
+				register struct rb_node *tmp;
+				__rb_rotate_left(parent, root);

WARNING:LINE_SPACING: Missing a blank line after declarations
#323: FILE: Documentation/perf_counter/util/rbtree.c:108:
+				register struct rb_node *uncle = gparent->rb_left;
+				if (uncle && rb_is_red(uncle))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#323: FILE: Documentation/perf_counter/util/rbtree.c:108:
+				if (uncle && rb_is_red(uncle))
+				{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#333: FILE: Documentation/perf_counter/util/rbtree.c:118:
+			if (parent->rb_left == node)
+			{

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: Documentation/perf_counter/util/rbtree.c:121:
+				register struct rb_node *tmp;
+				__rb_rotate_right(parent, root);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#356: FILE: Documentation/perf_counter/util/rbtree.c:141:
+	while ((!node || rb_is_black(node)) && node != root->rb_node)
+	{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#358: FILE: Documentation/perf_counter/util/rbtree.c:143:
+		if (parent->rb_left == node)
+		{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#361: FILE: Documentation/perf_counter/util/rbtree.c:146:
+			if (rb_is_red(other))
+			{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#368: FILE: Documentation/perf_counter/util/rbtree.c:153:
+			if ((!other->rb_left || rb_is_black(other->rb_left)) &&
+			    (!other->rb_right || rb_is_black(other->rb_right)))
+			{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#375: FILE: Documentation/perf_counter/util/rbtree.c:160:
+			else
+			{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#375: FILE: Documentation/perf_counter/util/rbtree.c:160:
+			}
+			else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#377: FILE: Documentation/perf_counter/util/rbtree.c:162:
+				if (!other->rb_right || rb_is_black(other->rb_right))
+				{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#392: FILE: Documentation/perf_counter/util/rbtree.c:177:
+		else
+		{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#392: FILE: Documentation/perf_counter/util/rbtree.c:177:
+		}
+		else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#395: FILE: Documentation/perf_counter/util/rbtree.c:180:
+			if (rb_is_red(other))
+			{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#402: FILE: Documentation/perf_counter/util/rbtree.c:187:
+			if ((!other->rb_left || rb_is_black(other->rb_left)) &&
+			    (!other->rb_right || rb_is_black(other->rb_right)))
+			{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#409: FILE: Documentation/perf_counter/util/rbtree.c:194:
+			else
+			{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#409: FILE: Documentation/perf_counter/util/rbtree.c:194:
+			}
+			else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#411: FILE: Documentation/perf_counter/util/rbtree.c:196:
+				if (!other->rb_left || rb_is_black(other->rb_left))
+				{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#440: FILE: Documentation/perf_counter/util/rbtree.c:225:
+	else
+	{

CHECK:BRACES: braces {} should be used on all arms of this statement
#453: FILE: Documentation/perf_counter/util/rbtree.c:238:
+		if (parent == old) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#456: FILE: Documentation/perf_counter/util/rbtree.c:241:
+		} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#463: FILE: Documentation/perf_counter/util/rbtree.c:248:
+		if (rb_parent(old))
+		{

CHECK:BRACES: Unbalanced braces around else statement
#469: FILE: Documentation/perf_counter/util/rbtree.c:254:
+		} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#483: FILE: Documentation/perf_counter/util/rbtree.c:268:
+	if (parent)
+	{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#490: FILE: Documentation/perf_counter/util/rbtree.c:275:
+	}
+	else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#533: FILE: Documentation/perf_counter/util/rbtree.c:318:
+	/* If we have a right-hand child, go down and then left as far
+	   as we can. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#533: FILE: Documentation/perf_counter/util/rbtree.c:318:
+	   as we can. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#535: FILE: Documentation/perf_counter/util/rbtree.c:320:
+^I^Inode = node->rb_right; $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#537: FILE: Documentation/perf_counter/util/rbtree.c:322:
+			node=node->rb_left;
 			    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#542: FILE: Documentation/perf_counter/util/rbtree.c:327:
+	/* No right-hand children.  Everything down and left is
+	   smaller than us, so any 'next' node must be in the general

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#546: FILE: Documentation/perf_counter/util/rbtree.c:331:
+	   parent is our 'next' node. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#561: FILE: Documentation/perf_counter/util/rbtree.c:346:
+	/* If we have a left-hand child, go down and then right as far
+	   as we can. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#561: FILE: Documentation/perf_counter/util/rbtree.c:346:
+	   as we can. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: Documentation/perf_counter/util/rbtree.c:348:
+^I^Inode = node->rb_left; $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#565: FILE: Documentation/perf_counter/util/rbtree.c:350:
+			node=node->rb_right;
 			    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#570: FILE: Documentation/perf_counter/util/rbtree.c:355:
+	/* No left-hand children. Go up till we find an ancestor which
+	   is a right-hand child of its parent */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#570: FILE: Documentation/perf_counter/util/rbtree.c:355:
+	   is a right-hand child of its parent */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#605: FILE: Documentation/perf_counter/util/rbtree.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#606: FILE: Documentation/perf_counter/util/rbtree.h:2:
+/*
+  Red Black Trees

ERROR:TRAILING_WHITESPACE: trailing whitespace
#608: FILE: Documentation/perf_counter/util/rbtree.h:4:
+  $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#620: FILE: Documentation/perf_counter/util/rbtree.h:16:
+  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#621: FILE: Documentation/perf_counter/util/rbtree.h:17:
+  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#710: FILE: Documentation/perf_counter/util/rbtree.h:106:
+#define container_of(ptr, type, member) ({			\
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
+	(type *)( (char *)__mptr - offsetof(type,member) );})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#710: FILE: Documentation/perf_counter/util/rbtree.h:106:
+#define container_of(ptr, type, member) ({			\
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
+	(type *)( (char *)__mptr - offsetof(type,member) );})

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#711: FILE: Documentation/perf_counter/util/rbtree.h:107:
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
 	                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#711: FILE: Documentation/perf_counter/util/rbtree.h:107:
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#711: FILE: Documentation/perf_counter/util/rbtree.h:107:
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: Documentation/perf_counter/util/rbtree.h:108:
+	(type *)( (char *)__mptr - offsetof(type,member) );})
 	                                        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#712: FILE: Documentation/perf_counter/util/rbtree.h:108:
+	(type *)( (char *)__mptr - offsetof(type,member) );})
 	                                                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#712: FILE: Documentation/perf_counter/util/rbtree.h:108:
+	(type *)( (char *)__mptr - offsetof(type,member) );})

ERROR:SPACING: space prohibited before that close parenthesis ')'
#712: FILE: Documentation/perf_counter/util/rbtree.h:108:
+	(type *)( (char *)__mptr - offsetof(type,member) );})

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#715: FILE: Documentation/perf_counter/util/rbtree.h:111:
+struct rb_node
+{

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(sizeof(long)) over __attribute__((aligned(sizeof(long))))
#721: FILE: Documentation/perf_counter/util/rbtree.h:117:
+} __attribute__((aligned(sizeof(long))));

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#725: FILE: Documentation/perf_counter/util/rbtree.h:121:
+struct rb_root
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#729: FILE: Documentation/perf_counter/util/rbtree.h:125:
+
+

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#734: FILE: Documentation/perf_counter/util/rbtree.h:130:
+#define rb_set_red(r)  do { (r)->rb_parent_color &= ~1; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#735: FILE: Documentation/perf_counter/util/rbtree.h:131:
+#define rb_set_black(r)  do { (r)->rb_parent_color |= 1; } while (0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#741: FILE: Documentation/perf_counter/util/rbtree.h:137:
+}
+static inline void rb_set_color(struct rb_node *rb, int color)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#746: FILE: Documentation/perf_counter/util/rbtree.h:142:
+#define RB_ROOT	(struct rb_root) { NULL, }

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rb_node"
#749: FILE: Documentation/perf_counter/util/rbtree.h:145:
+#define RB_EMPTY_ROOT(root)	((root)->rb_node == NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#750: FILE: Documentation/perf_counter/util/rbtree.h:146:
+#define RB_EMPTY_NODE(node)	(rb_parent(node) == node)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#751: FILE: Documentation/perf_counter/util/rbtree.h:147:
+#define RB_CLEAR_NODE(node)	(rb_set_parent(node, node))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#753: FILE: Documentation/perf_counter/util/rbtree.h:149:
+extern void rb_insert_color(struct rb_node *, struct rb_root *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_node *' should also have an identifier name
#753: FILE: Documentation/perf_counter/util/rbtree.h:149:
+extern void rb_insert_color(struct rb_node *, struct rb_root *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#753: FILE: Documentation/perf_counter/util/rbtree.h:149:
+extern void rb_insert_color(struct rb_node *, struct rb_root *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#754: FILE: Documentation/perf_counter/util/rbtree.h:150:
+extern void rb_erase(struct rb_node *, struct rb_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_node *' should also have an identifier name
#754: FILE: Documentation/perf_counter/util/rbtree.h:150:
+extern void rb_erase(struct rb_node *, struct rb_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#754: FILE: Documentation/perf_counter/util/rbtree.h:150:
+extern void rb_erase(struct rb_node *, struct rb_root *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#757: FILE: Documentation/perf_counter/util/rbtree.h:153:
+extern struct rb_node *rb_next(const struct rb_node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct rb_node *' should also have an identifier name
#757: FILE: Documentation/perf_counter/util/rbtree.h:153:
+extern struct rb_node *rb_next(const struct rb_node *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#758: FILE: Documentation/perf_counter/util/rbtree.h:154:
+extern struct rb_node *rb_prev(const struct rb_node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct rb_node *' should also have an identifier name
#758: FILE: Documentation/perf_counter/util/rbtree.h:154:
+extern struct rb_node *rb_prev(const struct rb_node *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#759: FILE: Documentation/perf_counter/util/rbtree.h:155:
+extern struct rb_node *rb_first(const struct rb_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct rb_root *' should also have an identifier name
#759: FILE: Documentation/perf_counter/util/rbtree.h:155:
+extern struct rb_node *rb_first(const struct rb_root *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#760: FILE: Documentation/perf_counter/util/rbtree.h:156:
+extern struct rb_node *rb_last(const struct rb_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct rb_root *' should also have an identifier name
#760: FILE: Documentation/perf_counter/util/rbtree.h:156:
+extern struct rb_node *rb_last(const struct rb_root *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: Documentation/perf_counter/util/rbtree.h:159:
+extern void rb_replace_node(struct rb_node *victim, struct rb_node *new, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#763: FILE: Documentation/perf_counter/util/rbtree.h:159:
+extern void rb_replace_node(struct rb_node *victim, struct rb_node *new, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#766: FILE: Documentation/perf_counter/util/rbtree.h:162:
+static inline void rb_link_node(struct rb_node * node, struct rb_node * parent,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#766: FILE: Documentation/perf_counter/util/rbtree.h:162:
+static inline void rb_link_node(struct rb_node * node, struct rb_node * parent,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#767: FILE: Documentation/perf_counter/util/rbtree.h:163:
+				struct rb_node ** rb_link)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#769: FILE: Documentation/perf_counter/util/rbtree.h:165:
+	node->rb_parent_color = (unsigned long )parent;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#770: FILE: Documentation/perf_counter/util/rbtree.h:166:
+	node->rb_left = node->rb_right = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120464.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 54 errors, 36 warnings, 23 checks, 683 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120464.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
