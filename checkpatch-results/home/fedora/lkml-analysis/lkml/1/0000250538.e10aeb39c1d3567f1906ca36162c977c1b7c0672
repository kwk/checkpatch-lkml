WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
Add support for ST LIS3L02DQ accelerometer as found on the xbow imote2 sensor

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#88: FILE: drivers/industrialio/accelerometer/Kconfig:13:
+config LIS3L02DQ_SPI
+	depends on LIS3L02DQ && SPI
+	tristate "SPI support"
+	help
+	  Say yes here to build support for the ST LIS3L02DQ accelerometer via
+	  an SPI bus.
+
+++ b/drivers/industrialio/accelerometer/Makefile	2008-07-14 17:26:34.000000000 +0100
+++ b/drivers/industrialio/accelerometer/Makefile	2008-07-14 17:26:34.000000000 +0100

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#165: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:60:
+/* Interupt Enable - applies data ready to the RDY pad */
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#175: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:70:
+ * - option for 16 bit left justified */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#178: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:73:
+/* Interupt related stuff */
    ^^^^^^^^

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#181: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:76:
+/* Switch from or combination fo conditions to and */
                               ^^

WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#184: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:79:
+/* Latch interupt request,
          ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#185: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:80:
+ * if on ack must be given by reading the ack register */

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#188: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:83:
+/* Z Interupt on High (above threshold)*/
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#190: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:85:
+/* Z Interupt on Low */
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#192: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:87:
+/* Y Interupt on High */
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#194: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:89:
+/* Y Interupt on Low */
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#196: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:91:
+/* X Interupt on High */
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#198: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:93:
+/* X Interupt on Low */
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#201: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:96:
+/* Register that gives description of what caused interupt
                                                   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#202: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:97:
+ * - latched if set in CFG_ADDRES */

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#205: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:100:
+/* Interupt Active */
    ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupts' may be misspelled - perhaps 'Interrupts'?
#207: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:102:
+/* Interupts that have been triggered */
    ^^^^^^^^^

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#231: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:126:
+Form of high byte dependant on justification set in ctrl reg */
                   ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#231: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:126:
+/* The accelerometer readings - low and high bytes.
+Form of high byte dependant on justification set in ctrl reg */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#231: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:126:
+Form of high byte dependant on justification set in ctrl reg */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#240: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:135:
+ * - i.e. there is only one value */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#258: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:153:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#267: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:162:
+	/* Interrupt caught event - used as part of the datardy to ring bh
+	   in ensuring interrupt line does not become locked high */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#267: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:162:
+	   in ensuring interrupt line does not become locked high */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#277: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1:
+/*

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#292: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:16:
+ * Latch on interrupt generation enabled as it simplifies when to reenable
                                                                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#321: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:45:
+/* Somewhat wasteful under arm type alignments - endianess issues
                                                  ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#322: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:46:
+/* Somewhat wasteful under arm type alignments - endianess issues
+ as well?*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#322: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:46:
+ as well?*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#325: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:49:
+	int16_t val;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#335: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:59:
+static const char read_all_tx_array[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#362: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:86:
+			.tx_buf = read_all_tx_array+2,
 			                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#370: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:94:
+			.tx_buf = read_all_tx_array+4,
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#378: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:102:
+			.tx_buf = read_all_tx_array+6,
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#386: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:110:
+			.tx_buf = read_all_tx_array+8,
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#394: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:118:
+			.tx_buf = read_all_tx_array+10,
 			                           ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#424: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:148:
+					 uint8_t reg_address,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!xfer.tx_buf"
#439: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:163:
+	if (xfer.tx_buf == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!xfer.rx_buf"
#445: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:169:
+	if (xfer.rx_buf == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#473: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:197:
+	uint8_t val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#474: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:198:
+	int8_t ret;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#510: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:234:
+					  uint8_t reg_address,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!local_tx_buf"
#526: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:250:
+	if (local_tx_buf == NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#542: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:266:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'adress' may be misspelled - perhaps 'address'?
#549: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:273:
+/* Relies on the MSB being one higher adress than the LSB */
                                       ^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#551: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:275:
+					   uint8_t lower_reg_address,

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#560: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:284:
+	struct spi_transfer xfers [] = { {

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!local_tx_buf"
#575: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:299:
+	if (local_tx_buf == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#583: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:307:
+	local_tx_buf[3] = LIS3L02DQ_WRITE_REG(lower_reg_address+1);
 	                                                       ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#602: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:326:
+					  uint8_t lower_reg_address,

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#613: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:337:
+	struct spi_transfer xfers [] = { {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!local_tx_buf"
#626: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:350:
+	if (local_tx_buf == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!local_rx_buf"
#631: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:355:
+	if (local_rx_buf == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#642: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:366:
+	local_tx_buf[3] = LIS3L02DQ_READ_REG(lower_reg_address+1);
 	                                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#666: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:390:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#673: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:397:
+	int8_t val;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#705: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:429:
+}
+/* Used for offsets etc so no need for lock. */

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#715: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:439:
+	ret = strict_strtol(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#727: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:451:
+}
+/* Used for gains etc so no need for lock. */

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#737: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:461:
+	ret = strict_strtoul(buf, 10, &val);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#756: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:480:
+	int16_t val;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#770: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:494:
+ * must remain part of the driver and not the ring buffer subsystem */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#785: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:509:
+}
+/* Prevents mode switching when running */

CHECK:BRACES: braces {} should be used on all arms of this statement
#796: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:520:
+	if (indio_dev->currentmode == INDIO_RING_DATA_RDY) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#813: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:537:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#821: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:545:
+ * generation */

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#832: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:556:
+	ret = strict_strtol(buf, 10, &val);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#856: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:580:
+	int8_t t;

WARNING:LINE_SPACING: Missing a blank line after declarations
#857: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:581:
+	int8_t t;
+	ret = lis3l02dq_spi_read_reg_int8_t(dev,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#871: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:595:
+	len += sprintf(buf+len, "\n");
 	                  ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#887: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:611:
+	int8_t t;

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#889: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:613:
+	ret = strict_strtol(buf, 10, &val);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#932: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:656:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#967: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:691:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#971: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:695:
+static IIO_DEV_ATTR_ACCEL_X_OFFSET(S_IWUSR | S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#976: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:700:
+static IIO_DEV_ATTR_ACCEL_Y_OFFSET(S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#981: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:705:
+static IIO_DEV_ATTR_ACCEL_Z_OFFSET(S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#986: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:710:
+static IIO_DEV_ATTR_ACCEL_X_GAIN(S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#991: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:715:
+static IIO_DEV_ATTR_ACCEL_Y_GAIN(S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#996: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:720:
+static IIO_DEV_ATTR_ACCEL_Z_GAIN(S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#1001: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:725:
+static IIO_DEV_ATTR_ACCEL_THRESH(S_IWUSR | S_IRUGO,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1007: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:731:
+/* Obviously the reading method for these will change depending on whether
+   ring buffer capture is in use. Allow specification here of alternate

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1009: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:733:
+   rather than part of industrialio */

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#1019: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:743:
+static IIO_DEV_ATTR_SAMP_FREQ(S_IWUSR | S_IRUGO,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#1031: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:755:
+	int8_t val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#1053: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:777:
+	int8_t valold, controlold;

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#1073: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:797:
+	if (val == false && currentlyset) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:BOOL_COMPARISON: Using comparison to true is error prone
#1079: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:803:
+	} else if (val == true && !currentlyset) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1097: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:821:
+		 * wants the interrupt */

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1099: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:823:
+			(controlold | LIS3L02DQ_REG_CTRL_2_ENABLE_INTERRUPT):
 			                                                    ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#1120: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:844:
+	int8_t val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#1140: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:864:
+	int8_t valold, addr;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1152: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:876:
+	currentlyset
+		= valold & LIS3L02DQ_REG_CTRL_2_ENABLE_DATA_READY_GENERATION

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#1198: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:922:
+	ret = strict_strtol(buf, 10, &val);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1221: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:945:
+	struct lis3l02dq_state *st
+		= container_of(work_s, struct lis3l02dq_state,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rx_array"
#1228: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:952:
+	if (rx_array == NULL) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1229: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:953:
+	if (rx_array == NULL) {
+		dev_err(&st->us->dev, "memory alloc failed in ring bh");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1237: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:961:
+				ring_data.el[i].data[j] = rx_array[i*4+j*2];
 				                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1237: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:961:
+				ring_data.el[i].data[j] = rx_array[i*4+j*2];
 				                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1237: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:961:
+				ring_data.el[i].data[j] = rx_array[i*4+j*2];
 				                                        ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1250: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:974:
+					ring_data.el[i].data[j]
+						= rx_array[i*4+j*2];

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1250: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:974:
+						= rx_array[i*4+j*2];
 						            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1250: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:974:
+						= rx_array[i*4+j*2];
 						              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1250: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:974:
+						= rx_array[i*4+j*2];
 						                ^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1253: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:977:
+			 * we don't actually know when this occured! */
 			                                    ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1253: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:977:
+			 * we don't actually know when this occured! */

WARNING:RETURN_VOID: void function return statements are not generally useful
#1268: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:992:
+	return;
+}

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1273: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:997:
+	struct lis3l02dq_state *st
+		= container_of(work_s, struct lis3l02dq_state,

WARNING:RETURN_VOID: void function return statements are not generally useful
#1282: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1006:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1285: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1009:
+static int lis3l02dq_data_rdy_event_th(struct iio_dev *dev_info,
+				 int index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1298: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1022:
+static int lis3l02dq_data_rdy_ring_th(struct iio_dev *dev_info,
+				 int index,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1325: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1049:
+
+

WARNING:TYPO_SPELLING: 'Unforunately' may be misspelled - perhaps 'Unfortunately'?
#1326: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1050:
+/* Unforunately it appears the interrupt won't clear unless you read from the
    ^^^^^^^^^^^^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1332: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1056:
+	struct iio_work_cont *wc
+		= container_of(work_s, struct iio_work_cont, ws_nocheck);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#1335: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1059:
+	int8_t t;

WARNING:RETURN_VOID: void function return statements are not generally useful
#1378: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1102:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1392: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1116:
+	struct lis3l02dq_state *st = indio_dev->dev_data;
+	__lis3l02dq_write_data_ready_config(&st->us->dev,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1401: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1125:
+	struct lis3l02dq_state *st = indio_dev->dev_data;
+	__lis3l02dq_write_data_ready_config(&st->us->dev,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1410: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1134:
+	struct lis3l02dq_state *st = indio_dev->dev_data;
+	__lis3l02dq_write_data_ready_config(&st->us->dev,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1484: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1208:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1485: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1209:
+static int __devinit lis3l02dq_probe(struct spi_device *spi)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*st)...) over kzalloc(sizeof(struct lis3l02dq_state)...)
#1491: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1215:
+	st = kzalloc(sizeof(struct lis3l02dq_state), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!st"
#1492: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1216:
+	if (st == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1497: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1221:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*st->indio_dev)...) over kzalloc(sizeof(struct iio_dev)...)
#1500: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1224:
+	st->indio_dev = kzalloc(sizeof(struct iio_dev), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!st->indio_dev"
#1501: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1225:
+	if (st->indio_dev == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1524: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1248:
+	if (spi->irq && gpio_is_valid(irq_to_gpio(spi->irq)) > 0) {
[...]
+	} else
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1531: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1255:
+		/* This is a little unusual, in that the device seems
+		   to need a full read of the interrupt source reg before

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1533: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1257:
+		   Hence the two handlers are the same */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around st->work_cont_thresh
#1535: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1259:
+		INIT_IIO_WORK_CONT(&(st->work_cont_thresh),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Unbalanced braces around else statement
#1549: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1273:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1576: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1300:
+	struct lis3l02dq_state *st = indio_dev->dev_data;
+	mutex_lock(&indio_dev->mlock);

WARNING:TYPO_SPELLING: 'halfs' may be misspelled - perhaps 'halves'?
#1607: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1331:
+	/* Make sure all bottom halfs of interrupts are done */
 	                        ^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000250538.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 65 warnings, 66 checks, 1574 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000250538.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
