WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
> Very cool!!!  I see one of his patches at http://lkml.org/lkml/2008/4/17/342,

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#57: 
> This would also simplify preemptable RCU's dyntick interface, removing
                           ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#160: 
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#161: 
    CC: akpm@osdl.org

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#162: 
    CC: mingo@elte.hu

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#163: 
    CC: "H. Peter Anvin" <hpa@zytor.com>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#164: 
    CC: Jeremy Fitzhardinge <jeremy@goop.org>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#165: 
    CC: Steven Rostedt <rostedt@goodmis.org>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#166: 
    CC: "Frank Ch. Eigler" <fche@redhat.com>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#167: 
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#168: 
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#342: FILE: arch/x86/kernel/paravirt.c:194:
+extern void native_nmi_return(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#360: FILE: arch/x86/kernel/paravirt_patch_32.c:1:
+#include <linux/stringify.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: arch/x86/kernel/paravirt_patch_32.c:10:
+DEF_NATIVE(pv_cpu_ops, nmi_return,
+	__stringify(NATIVE_INTERRUPT_RETURN_NMI_SAFE));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#386: FILE: arch/x86/kernel/paravirt_patch_64.c:1:
+#include <linux/irqflags.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: arch/x86/kernel/paravirt_patch_64.c:12:
+DEF_NATIVE(pv_cpu_ops, nmi_return,
+	__stringify(NATIVE_INTERRUPT_RETURN_NMI_SAFE));

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#507: FILE: include/asm-x86/irqflags.h:77:
+#define NATIVE_INTERRUPT_RETURN_NMI_SAFE	pushq %rax;		\
                                         	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#507: FILE: include/asm-x86/irqflags.h:77:
+#define NATIVE_INTERRUPT_RETURN_NMI_SAFE	pushq %rax;		\
+						movq %rsp, %rax;	\
+						movq 24+8(%rax), %rsp;	\
+						pushq 0+8(%rax);	\
+						pushq 16+8(%rax);	\
+						movq (%rax), %rax;	\
+						popfq;			\
+						ret

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#508: FILE: include/asm-x86/irqflags.h:78:
+						movq %rsp, %rax;	\
 						     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#508: FILE: include/asm-x86/irqflags.h:78:
+						movq %rsp, %rax;	\
 						           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#509: FILE: include/asm-x86/irqflags.h:79:
+						movq 24+8(%rax), %rsp;	\
 						       ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#509: FILE: include/asm-x86/irqflags.h:79:
+						movq 24+8(%rax), %rsp;	\
 						          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#509: FILE: include/asm-x86/irqflags.h:79:
+						movq 24+8(%rax), %rsp;	\
 						                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#510: FILE: include/asm-x86/irqflags.h:80:
+						pushq 0+8(%rax);	\
 						       ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#510: FILE: include/asm-x86/irqflags.h:80:
+						pushq 0+8(%rax);	\
 						          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#511: FILE: include/asm-x86/irqflags.h:81:
+						pushq 16+8(%rax);	\
 						        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#511: FILE: include/asm-x86/irqflags.h:81:
+						pushq 16+8(%rax);	\
 						           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#512: FILE: include/asm-x86/irqflags.h:82:
+						movq (%rax), %rax;	\

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#512: FILE: include/asm-x86/irqflags.h:82:
+						movq (%rax), %rax;	\
 						      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#512: FILE: include/asm-x86/irqflags.h:82:
+						movq (%rax), %rax;	\
 						             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#534: FILE: include/asm-x86/irqflags.h:104:
+#define NATIVE_INTERRUPT_RETURN_NMI_SAFE	pushl 8(%esp);	\
                                         	        ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#534: FILE: include/asm-x86/irqflags.h:104:
+#define NATIVE_INTERRUPT_RETURN_NMI_SAFE	pushl 8(%esp);	\
+						popfl;		\
+						lret $4

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#572: FILE: include/asm-x86/paravirt.h:1391:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_nmi_return)
 		      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#572: FILE: include/asm-x86/paravirt.h:1391:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_nmi_return)
 		       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#572: FILE: include/asm-x86/paravirt.h:1391:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_nmi_return)
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#572: FILE: include/asm-x86/paravirt.h:1391:
+		  jmp *%cs:pv_cpu_ops+PV_CPU_nmi_return)
 		                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#611: FILE: include/linux/hardirq.h:63:
+#define HARDNMI_OFFSET	(1UL << HARDNMI_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#643: FILE: include/linux/hardirq.h:176:
+		BUG_ON(hardnmi_count());		\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000233471.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 16 warnings, 20 checks, 395 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000233471.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
