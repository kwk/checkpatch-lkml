WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
> The following changes since commit 1d10914bf2c8a1164aef6c341e6c3518a91b8374:

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '1d10914bf2c8a1164aef6c341e6c3518a91b8374', maybe rebased or not pulled?
#29: 
> The following changes since commit 1d10914bf2c8a1164aef6c341e6c3518a91b8374:

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '1d10914bf2c8a1164aef6c341e6c3518a91b8374', maybe rebased or not pulled?
#39: 
The following changes since commit 1d10914bf2c8a1164aef6c341e6c3518a91b8374:

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#59: FILE: arch/x86/include/asm/msr_debug.h

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#59: 
new file mode 100755

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: arch/x86/include/asm/msr_debug.h:1:
+#ifndef _ASM_X86_MSR_DEBUG_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#79: FILE: arch/x86/include/asm/msr_debug.h:16:
+#define	MSR_INTEL_PENTIUM	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#84: FILE: arch/x86/include/asm/msr_debug.h:21:
+#define	MSR_INTEL_P6		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#87: FILE: arch/x86/include/asm/msr_debug.h:24:
+#define	MSR_INTEL_PENTIUM_M	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#90: FILE: arch/x86/include/asm/msr_debug.h:27:
+#define	MSR_INTEL_CORE		(1 << 5)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#93: FILE: arch/x86/include/asm/msr_debug.h:30:
+/* 06_0F			Xeon 3000, 3200, 5100, 5300, 7300 series,
+				Core 2 Quad, Core 2 Extreme, Core 2 Duo,

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#94: FILE: arch/x86/include/asm/msr_debug.h:31:
+				Pentium dual-core			*/

CHECK:BIT_MACRO: Prefer using the BIT macro
#96: FILE: arch/x86/include/asm/msr_debug.h:33:
+#define	MSR_INTEL_CORE_2	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#99: FILE: arch/x86/include/asm/msr_debug.h:36:
+#define	MSR_INTEL_ATOM		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#103: FILE: arch/x86/include/asm/msr_debug.h:40:
+#define	MSR_INTEL_XEON		(1 << 17)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#106: FILE: arch/x86/include/asm/msr_debug.h:43:
+/* 0F_06			Xeon 7100, 5000 Series, Xeon MP,
+				Pentium 4, Pentium D			*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#106: FILE: arch/x86/include/asm/msr_debug.h:43:
+				Pentium 4, Pentium D			*/

CHECK:BIT_MACRO: Prefer using the BIT macro
#107: FILE: arch/x86/include/asm/msr_debug.h:44:
+#define	MSR_INTEL_XEON_MP	(1 << 18)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#112: FILE: arch/x86/include/asm/msr_debug.h:49:
+	unsigned min;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#113: FILE: arch/x86/include/asm/msr_debug.h:50:
+	unsigned max;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#114: FILE: arch/x86/include/asm/msr_debug.h:51:
+	unsigned model;

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#132: FILE: arch/x86/kernel/cpu/msr_debug.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#137: FILE: arch/x86/kernel/cpu/msr_debug.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#193: FILE: arch/x86/kernel/cpu/msr_debug.c:57:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#194: FILE: arch/x86/kernel/cpu/msr_debug.c:58:
+static int get_msr_intel_bit(unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#242: FILE: arch/x86/kernel/cpu/msr_debug.c:106:
+static int get_msr_cpu_bit(unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#244: FILE: arch/x86/kernel/cpu/msr_debug.c:108:
+	unsigned vendor;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#253: FILE: arch/x86/kernel/cpu/msr_debug.c:117:
+static unsigned get_msr_range(unsigned *min, unsigned *max, int index,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#253: FILE: arch/x86/kernel/cpu/msr_debug.c:117:
+static unsigned get_msr_range(unsigned *min, unsigned *max, int index,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#253: FILE: arch/x86/kernel/cpu/msr_debug.c:117:
+static unsigned get_msr_range(unsigned *min, unsigned *max, int index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: arch/x86/kernel/cpu/msr_debug.c:118:
+static unsigned get_msr_range(unsigned *min, unsigned *max, int index,
+			 unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#254: FILE: arch/x86/kernel/cpu/msr_debug.c:118:
+			 unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#254: FILE: arch/x86/kernel/cpu/msr_debug.c:118:
+			 unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#256: FILE: arch/x86/kernel/cpu/msr_debug.c:120:
+	unsigned vendor, cpu_bit;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#289: FILE: arch/x86/kernel/cpu/msr_debug.c:153:
+static int get_msr_range_count(unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#289: FILE: arch/x86/kernel/cpu/msr_debug.c:153:
+static int get_msr_range_count(unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#313: FILE: arch/x86/kernel/cpu/msr_debug.c:177:
+			    unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#313: FILE: arch/x86/kernel/cpu/msr_debug.c:177:
+			    unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#317: FILE: arch/x86/kernel/cpu/msr_debug.c:181:
+	unsigned msr, msr_min, msr_max;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#332: FILE: arch/x86/kernel/cpu/msr_debug.c:196:
+				printk(KERN_INFO " MSR_%08x: %08x_%08x\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#338: FILE: arch/x86/kernel/cpu/msr_debug.c:202:
+static void print_amd_msr(struct seq_file *seq, unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#338: FILE: arch/x86/kernel/cpu/msr_debug.c:202:
+static void print_amd_msr(struct seq_file *seq, unsigned flag, unsigned model)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#342: FILE: arch/x86/kernel/cpu/msr_debug.c:206:
+	unsigned msr, msr_min, msr_max;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#357: FILE: arch/x86/kernel/cpu/msr_debug.c:221:
+				printk(KERN_INFO " MSR_%08x: %016llx\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#363: FILE: arch/x86/kernel/cpu/msr_debug.c:227:
+static int msr_basic_show(struct seq_file *seq, void *v, unsigned flag)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#365: FILE: arch/x86/kernel/cpu/msr_debug.c:229:
+	unsigned model;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'boot_cpu_data.x86_vendor == X86_VENDOR_INTEL'
#374: FILE: arch/x86/kernel/cpu/msr_debug.c:238:
+	if ((c->x86_max_cores * smp_num_siblings > 1) &&
+	    (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LINE_SPACING: Please don't use multiple blank lines
#380: FILE: arch/x86/kernel/cpu/msr_debug.c:244:
+
+

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#381: FILE: arch/x86/kernel/cpu/msr_debug.c:245:
+	seq_printf(seq, "\n");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#471: FILE: arch/x86/kernel/cpu/msr_debug.c:335:
+	msr_file = debugfs_create_file("msr", S_IRUGO, msr_dir,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: arch/x86/kernel/cpu/msr_debug.c:336:
+	msr_file = debugfs_create_file("msr", S_IRUGO, msr_dir,
+					NULL, &msr_fops);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#473: FILE: arch/x86/kernel/cpu/msr_debug.c:337:
+	pmc_file = debugfs_create_file("pmc", S_IRUGO, msr_dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: arch/x86/kernel/cpu/msr_debug.c:338:
+	pmc_file = debugfs_create_file("pmc", S_IRUGO, msr_dir,
+					NULL, &pmc_fops);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#482: FILE: arch/x86/kernel/cpu/msr_debug.c:346:
+	if (msr_file)
+		debugfs_remove(msr_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#484: FILE: arch/x86/kernel/cpu/msr_debug.c:348:
+	if (pmc_file)
+		debugfs_remove(pmc_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#486: FILE: arch/x86/kernel/cpu/msr_debug.c:350:
+	if (msr_dir)
+		debugfs_remove(msr_dir);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000160429.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 40 warnings, 14 checks, 420 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000160429.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
