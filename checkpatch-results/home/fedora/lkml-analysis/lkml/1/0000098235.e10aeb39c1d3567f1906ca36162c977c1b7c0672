WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
This patch reimplements scsi_execute_async(). In the new version it's a lot less

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'src_offs == 0'
#130: FILE: block/blk-map.c:317:
+			if ((src_offs == 0) && (dst_offs == 0) &&
+			    (src_len >= PAGE_SIZE) && (dst_len >= PAGE_SIZE) &&
+			    (copy_len >= PAGE_SIZE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dst_offs == 0'
#130: FILE: block/blk-map.c:317:
+			if ((src_offs == 0) && (dst_offs == 0) &&
+			    (src_len >= PAGE_SIZE) && (dst_len >= PAGE_SIZE) &&
+			    (copy_len >= PAGE_SIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'src_len >= PAGE_SIZE'
#130: FILE: block/blk-map.c:317:
+			if ((src_offs == 0) && (dst_offs == 0) &&
+			    (src_len >= PAGE_SIZE) && (dst_len >= PAGE_SIZE) &&
+			    (copy_len >= PAGE_SIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dst_len >= PAGE_SIZE'
#130: FILE: block/blk-map.c:317:
+			if ((src_offs == 0) && (dst_offs == 0) &&
+			    (src_len >= PAGE_SIZE) && (dst_len >= PAGE_SIZE) &&
+			    (copy_len >= PAGE_SIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'copy_len >= PAGE_SIZE'
#130: FILE: block/blk-map.c:317:
+			if ((src_offs == 0) && (dst_offs == 0) &&
+			    (src_len >= PAGE_SIZE) && (dst_len >= PAGE_SIZE) &&
+			    (copy_len >= PAGE_SIZE)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: block/blk-map.c:324:
+				n = min_t(size_t, PAGE_SIZE - dst_offs,
+						  PAGE_SIZE - src_offs);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dst_sg"
#167: FILE: block/blk-map.c:354:
+				if (dst_sg == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "src_sg"
#176: FILE: block/blk-map.c:363:
+	} while (src_sg != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hdr"
#195: FILE: block/blk-map.c:382:
+	if (hdr == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: block/blk-map.c:413:
+			blk_copy_sg(orig_sgl, new_sgl, 0, KM_BIO_DST_IRQ,
+				KM_BIO_SRC_IRQ);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sg"
#232: FILE: block/blk-map.c:419:
+		while (sg != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sg == NULL'
#237: FILE: block/blk-map.c:424:
+			if ((sg == NULL) || (n == (SG_MAX_SINGLE_ALLOC - 1))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sg"
#237: FILE: block/blk-map.c:424:
+			if ((sg == NULL) || (n == (SG_MAX_SINGLE_ALLOC - 1))) {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#263: FILE: block/blk-map.c:450:
+	new_sg = kmalloc(sizeof(*new_sg) * new_sg_nents, gfp);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_sg"
#264: FILE: block/blk-map.c:451:
+	if (new_sg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pg"
#277: FILE: block/blk-map.c:464:
+	if (pg == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: block/blk-map.c:469:
+		void *saddr, *daddr;
+		saddr = kmap_atomic(sg_page(tail_sg), KM_USER0) +

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: block/blk-map.c:510:
+		res = blk_rq_handle_align_tail_only(rq, sgl_to_copy,
+				gfp, page_gfp);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#342: FILE: block/blk-map.c:529:
+	new_sgl = kmalloc(sizeof(*new_sgl) * n, gfp);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_sgl"
#343: FILE: block/blk-map.c:530:
+	if (new_sgl ==  NULL)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#354: FILE: block/blk-map.c:541:
+		sg = kmalloc(sizeof(*sg) * n, gfp);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sg"
#355: FILE: block/blk-map.c:542:
+		if (sg ==  NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pg"
#375: FILE: block/blk-map.c:562:
+		if (pg == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#405: FILE: block/blk-map.c:592:
+		struct page *pg = sg_page(sg);
+		if (pg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pg"
#405: FILE: block/blk-map.c:592:
+		if (pg == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: block/blk-map.c:608:
+static int __blk_rq_map_kern_sg(struct request *rq, struct scatterlist *sgl,
+	int nents, gfp_t gfp, struct scatterlist **sgl_to_copy,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgl == 0'
#435: FILE: block/blk-map.c:622:
+	if (unlikely((sgl == 0) || (nents <= 0))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nents <= 0'
#435: FILE: block/blk-map.c:622:
+	if (unlikely((sgl == 0) || (nents <= 0))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: block/blk-map.c:633:
+	max_nr_vecs =  min_t(size_t,
+		((PAGE_SIZE - sizeof(struct bio)) / sizeof(struct bio_vec)),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#482: FILE: block/blk-map.c:669:
+				if (bio == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hbio"
#492: FILE: block/blk-map.c:679:
+				if (hbio == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#493: FILE: block/blk-map.c:680:
+					hbio = tbio = bio;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#495: FILE: block/blk-map.c:682:
+					tbio = tbio->bi_next = bio;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc < 0'
#502: FILE: block/blk-map.c:689:
+				if (unlikely(need_new_bio || (rc < 0))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hbio"
#523: FILE: block/blk-map.c:710:
+	if (hbio == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#532: FILE: block/blk-map.c:719:
+		if (sgl->offset == 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#536: FILE: block/blk-map.c:723:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hbio"
#540: FILE: block/blk-map.c:727:
+	while (hbio != NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#555: FILE: block/blk-map.c:742:
+	rq->buffer = rq->data = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hbio"
#565: FILE: block/blk-map.c:752:
+	while (hbio != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgl == 0'
#591: FILE: block/blk-map.c:778:
+	if (unlikely((sgl == 0) || (sgl->length == 0) ||
+		     (nents <= 0) || (rq->end_io_data != NULL))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgl->length == 0'
#591: FILE: block/blk-map.c:778:
+	if (unlikely((sgl == 0) || (sgl->length == 0) ||
+		     (nents <= 0) || (rq->end_io_data != NULL))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nents <= 0'
#591: FILE: block/blk-map.c:778:
+	if (unlikely((sgl == 0) || (sgl->length == 0) ||
+		     (nents <= 0) || (rq->end_io_data != NULL))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->end_io_data != NULL'
#591: FILE: block/blk-map.c:778:
+	if (unlikely((sgl == 0) || (sgl->length == 0) ||
+		     (nents <= 0) || (rq->end_io_data != NULL))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rq->end_io_data"
#592: FILE: block/blk-map.c:779:
+		     (nents <= 0) || (rq->end_io_data != NULL))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: block/blk-map.c:786:
+	res = __blk_rq_map_kern_sg(rq, sgl, nents, gfp, &sg_to_copy,
+				&nents_to_copy);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sg_to_copy"
#601: FILE: block/blk-map.c:788:
+		if (sg_to_copy == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: block/blk-map.c:792:
+		res = blk_rq_handle_align(rq, &sgl, &nents, sg_to_copy,
+				nents_to_copy, gfp, rq->q->bounce_gfp | gfp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: block/blk-map.c:797:
+		res = __blk_rq_map_kern_sg(rq, sgl, nents, gfp, &sg_to_copy,
+						&nents_to_copy);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#617: FILE: block/blk-map.c:804:
+	rq->buffer = rq->data = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sioc"
#685: FILE: drivers/scsi/scsi_lib.c:330:
+	if (sioc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#689: FILE: drivers/scsi/scsi_lib.c:334:
+	if (req == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sgl"
#697: FILE: drivers/scsi/scsi_lib.c:342:
+	if (sgl != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#717: FILE: drivers/scsi/scsi_lib.c:362:
+	blk_execute_rq_nowait(req->q, NULL, req,
+		flags & SCSI_ASYNC_EXEC_FLAG_AT_HEAD, scsi_end_async);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: drivers/scsi/scsi_lib.c:1841:
+	scsi_io_context_cache = kmem_cache_create("scsi_io_context",
+					sizeof(struct scsi_io_context),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#740: FILE: drivers/scsi/scsi_lib.c:1844:
+		printk(KERN_ERR "SCSI: can't init scsi io context cache\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#779: FILE: include/linux/blkdev.h:810:
+extern int blk_rq_map_kern_sg(struct request *rq,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#781: FILE: include/linux/blkdev.h:812:
+extern void blk_rq_unmap_kern_sg(struct request *req, int do_copy);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#789: FILE: include/linux/blkdev.h:915:
+extern int blk_copy_sg(struct scatterlist *, struct scatterlist *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scatterlist *' should also have an identifier name
#789: FILE: include/linux/blkdev.h:915:
+extern int blk_copy_sg(struct scatterlist *, struct scatterlist *, size_t,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scatterlist *' should also have an identifier name
#789: FILE: include/linux/blkdev.h:915:
+extern int blk_copy_sg(struct scatterlist *, struct scatterlist *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#789: FILE: include/linux/blkdev.h:915:
+extern int blk_copy_sg(struct scatterlist *, struct scatterlist *, size_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#790: FILE: include/linux/blkdev.h:916:
+extern int blk_copy_sg(struct scatterlist *, struct scatterlist *, size_t,
+	enum km_type, enum km_type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#806: FILE: include/scsi/scsi_device.h:379:
+extern int scsi_execute_async(struct scsi_device *sdev, const unsigned char *cmd,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#810: FILE: include/scsi/scsi_device.h:383:
+			      void (*done)(void *, char *, int, int),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#810: FILE: include/scsi/scsi_device.h:383:
+			      void (*done)(void *, char *, int, int),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#810: FILE: include/scsi/scsi_device.h:383:
+			      void (*done)(void *, char *, int, int),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#810: FILE: include/scsi/scsi_device.h:383:
+			      void (*done)(void *, char *, int, int),

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098235.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 55 checks, 720 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098235.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
