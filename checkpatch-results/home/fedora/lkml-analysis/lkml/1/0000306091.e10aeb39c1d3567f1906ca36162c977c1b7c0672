CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#60: FILE: arch/x86/kernel/smpboot.c:16:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#63: FILE: arch/x86/kernel/smpboot.c:19:
+#include <asm/nmi.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#71: FILE: arch/x86/kernel/smpboot.c:27:
+/* Store all idle threads, this can be reused instead of creating
+* a new thread. Also avoids complicated thread destroy functionality

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited before semicolon
#83: FILE: arch/x86/kernel/smpboot.c:39:
+struct task_struct *idle_thread_array[NR_CPUS] __cpuinitdata ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: arch/x86/kernel/smpboot.c:167:
+		panic("%s: phys CPU#%d, CPU#%d already present??\n", __func__,
+					phys_id, cpuid);

CHECK:CAMELCASE: Avoid CamelCase: <Dprintk>
#129: FILE: arch/x86/kernel/smpboot.c:169:
+	Dprintk("CPU#%d (phys ID: %d) waiting for CALLOUT\n", cpuid, phys_id);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#142: FILE: arch/x86/kernel/smpboot.c:182:
+	timeout = jiffies + 2*HZ;
 	                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#192: FILE: arch/x86/kernel/smpboot.c:232:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#202: FILE: arch/x86/kernel/smpboot.c:452:
+	unsigned i, regs[] = { APIC_ID >> 4, APIC_LVR >> 4, APIC_SPIV >> 4 };

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#203: FILE: arch/x86/kernel/smpboot.c:453:
+	char *names[] = { "ID", "VERSION", "SPIV" };

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#207: FILE: arch/x86/kernel/smpboot.c:457:
+	printk(KERN_INFO "Inquiring remote APIC #%d...\n", apicid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#210: FILE: arch/x86/kernel/smpboot.c:460:
+		printk(KERN_INFO "... APIC #%d %s: ", apicid, names[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#217: FILE: arch/x86/kernel/smpboot.c:467:
+			printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#217: FILE: arch/x86/kernel/smpboot.c:467:
+			printk(KERN_CONT

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#225: FILE: arch/x86/kernel/smpboot.c:475:
+			udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#232: FILE: arch/x86/kernel/smpboot.c:482:
+			printk(KERN_CONT "%08x\n", status);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#232: FILE: arch/x86/kernel/smpboot.c:482:
+			printk(KERN_CONT "%08x\n", status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#235: FILE: arch/x86/kernel/smpboot.c:485:
+			printk(KERN_CONT "failed\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#235: FILE: arch/x86/kernel/smpboot.c:485:
+			printk(KERN_CONT "failed\n");

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#246: FILE: arch/x86/kernel/smpboot.c:496:
+static int __devinit

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#265: FILE: arch/x86/kernel/smpboot.c:515:
+	udelay(200);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#278: FILE: arch/x86/kernel/smpboot.c:528:
+		printk(KERN_ERR "APIC never delivered???\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#280: FILE: arch/x86/kernel/smpboot.c:530:
+		printk(KERN_ERR "APIC delivery error (%lx).\n", accept_status);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#288: FILE: arch/x86/kernel/smpboot.c:538:
+static int __devinit

WARNING:MEMORY_BARRIER: memory barrier without comment
#332: FILE: arch/x86/kernel/smpboot.c:582:
+	mb();

CHECK:SPACING: No space is necessary after a cast
#350: FILE: arch/x86/kernel/smpboot.c:600:
+	startup_ipi_hook(phys_apicid, (unsigned long) start_secondary,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: arch/x86/kernel/smpboot.c:601:
+	startup_ipi_hook(phys_apicid, (unsigned long) start_secondary,
+#ifdef CONFIG_X86_64

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#386: FILE: arch/x86/kernel/smpboot.c:636:
+		udelay(300);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#396: FILE: arch/x86/kernel/smpboot.c:646:
+		udelay(200);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#411: FILE: arch/x86/kernel/smpboot.c:661:
+		printk(KERN_ERR "APIC never delivered???\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#413: FILE: arch/x86/kernel/smpboot.c:663:
+		printk(KERN_ERR "APIC delivery error (%lx).\n", accept_status);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#453: FILE: arch/x86/kernel/smpboot.c:703:
+	if (!cpu_gdt_descr[cpu].address &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: arch/x86/kernel/smpboot.c:704:
+	if (!cpu_gdt_descr[cpu].address &&
+		!(cpu_gdt_descr[cpu].address = get_zeroed_page(GFP_KERNEL))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#455: FILE: arch/x86/kernel/smpboot.c:705:
+		printk(KERN_ERR "Failed to allocate GDT for CPU %d\n", cpu);

WARNING:LINE_SPACING: Missing a blank line after declarations
#463: FILE: arch/x86/kernel/smpboot.c:713:
+		int node = cpu_to_node(cpu);
+		pda = cpu_pda(cpu);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*newpda)...) over kmalloc_node(sizeof(struct x8664_pda)...)
#464: FILE: arch/x86/kernel/smpboot.c:714:
+		newpda = kmalloc_node(sizeof(struct x8664_pda), GFP_ATOMIC,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: Unbalanced braces around else statement
#469: FILE: arch/x86/kernel/smpboot.c:719:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#470: FILE: arch/x86/kernel/smpboot.c:720:
+			printk(KERN_ERR

CHECK:SPACING: No space is necessary after a cast
#485: FILE: arch/x86/kernel/smpboot.c:735:
+		c_idle.idle->thread.sp = (unsigned long) (((struct pt_regs *)

CHECK:BRACES: braces {} should be used on all arms of this statement
#491: FILE: arch/x86/kernel/smpboot.c:741:
+	if (!keventd_up() || current_is_keventd())
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#493: FILE: arch/x86/kernel/smpboot.c:743:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#499: FILE: arch/x86/kernel/smpboot.c:749:
+		printk("failed fork for CPU %d\n", cpu);

CHECK:SPACING: No space is necessary after a cast
#509: FILE: arch/x86/kernel/smpboot.c:759:
+	c_idle.idle->thread.ip = (unsigned long) start_secondary;

CHECK:SPACING: No space is necessary after a cast
#511: FILE: arch/x86/kernel/smpboot.c:761:
+	stack_start.sp = (void *) c_idle.idle->thread.sp;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#525: FILE: arch/x86/kernel/smpboot.c:775:
+	printk(KERN_INFO "Booting processor %d/%d ip %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: arch/x86/kernel/smpboot.c:776:
+	printk(KERN_INFO "Booting processor %d/%d ip %lx\n",
+			  cpu, apicid, start_ip);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#546: FILE: arch/x86/kernel/smpboot.c:796:
+
+

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#566: FILE: arch/x86/kernel/smpboot.c:816:
+			udelay(100);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#572: FILE: arch/x86/kernel/smpboot.c:822:
+			printk(KERN_INFO "CPU%d: ", cpu);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#577: FILE: arch/x86/kernel/smpboot.c:827:
+			if (*((volatile unsigned char *)trampoline_base)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#580: FILE: arch/x86/kernel/smpboot.c:830:
+				printk(KERN_ERR "Stuck ??\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#583: FILE: arch/x86/kernel/smpboot.c:833:
+				printk(KERN_ERR "Not responding.\n");

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#602: FILE: arch/x86/kernel/smpboot.c:852:
+	*((volatile unsigned long *)trampoline_base) = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#619: FILE: arch/x86/kernel/smpboot.c:869:
+		printk(KERN_ERR "%s: bad cpu %d\n", __func__, cpu);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#628: FILE: arch/x86/kernel/smpboot.c:878:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#782: FILE: arch/x86/kernel/smpboot_32.c:83:
+extern void smp_callin(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1353: FILE: arch/x86/kernel/smpboot_64.c:74:
+extern void smp_callin(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306091.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 33 warnings, 23 checks, 1722 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306091.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
