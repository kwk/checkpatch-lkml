WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/aufs/i_op.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: fs/aufs/i_op.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#59: FILE: fs/aufs/i_op.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#76: FILE: fs/aufs/i_op.c:33:
+	LKTRTrace("ino %lu, mask 0x%x, brperm 0x%x\n",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#81: FILE: fs/aufs/i_op.c:38:
+	if (unlikely((write_mask && IS_IMMUTABLE(h_inode))
+		     || ((mask & MAY_EXEC) && S_ISREG(h_inode->i_mode)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#82: FILE: fs/aufs/i_op.c:39:
+		     || ((mask & MAY_EXEC) && S_ISREG(h_inode->i_mode)
+			 && fake_nd && fake_nd->path.mnt

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#83: FILE: fs/aufs/i_op.c:40:
+			 && fake_nd && fake_nd->path.mnt
+			 && (fake_nd->path.mnt->mnt_flags & MNT_NOEXEC))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#90: FILE: fs/aufs/i_op.c:47:
+	if (unlikely((write_mask && !au_br_writable(brperm))
+		     || !h_inode->i_op

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#91: FILE: fs/aufs/i_op.c:48:
+		     || !h_inode->i_op
+		     || !h_inode->i_op->permission)) {

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#97: FILE: fs/aufs/i_op.c:54:
+		AuTraceErr(err);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#100: FILE: fs/aufs/i_op.c:57:
+#if 1 /* todo: export? */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#111: FILE: fs/aufs/i_op.c:68:
+static int silly_lock(struct inode *inode, struct nameidata *nd)
                                                              ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#116: FILE: fs/aufs/i_op.c:73:
+	LKTRTrace("i%lu, nd %p\n", inode->i_ino, nd);
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#116: FILE: fs/aufs/i_op.c:73:
+	LKTRTrace("i%lu, nd %p\n", inode->i_ino, nd);
 	                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#118: FILE: fs/aufs/i_op.c:75:
+	if (!nd || !nd->path.dentry) {
 	     ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_FLUSH>
#119: FILE: fs/aufs/i_op.c:76:
+		si_read_lock(sb, AuLock_FLUSH);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#129: FILE: fs/aufs/i_op.c:86:
+		aufs_read_lock(nd->path.dentry, AuLock_FLUSH | AuLock_IR);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#134: FILE: fs/aufs/i_op.c:91:
+static void silly_unlock(int locked, struct inode *inode, struct nameidata *nd)
                                                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#138: FILE: fs/aufs/i_op.c:95:
+	LKTRTrace("locked %d, i%lu, nd %p\n", locked, inode->i_ino, nd);
 	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#138: FILE: fs/aufs/i_op.c:95:
+	LKTRTrace("locked %d, i%lu, nd %p\n", locked, inode->i_ino, nd);
 	                                                            ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#154: FILE: fs/aufs/i_op.c:111:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#158: FILE: fs/aufs/i_op.c:115:
+static int aufs_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#170: FILE: fs/aufs/i_op.c:127:
+		  "nd %d{%d, %d}\n",
 		   ^^

WARNING:SPLIT_STRING: quoted string split across lines
#170: FILE: fs/aufs/i_op.c:127:
+	LKTRTrace("ino %lu, mask 0x%x, nondir %d, write_mask %d, "
+		  "nd %d{%d, %d}\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#172: FILE: fs/aufs/i_op.c:129:
+		  !!nd, nd ? !!nd->path.dentry : 0, nd ? !!nd->path.mnt : 0);
 		    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#172: FILE: fs/aufs/i_op.c:129:
+		  !!nd, nd ? !!nd->path.dentry : 0, nd ? !!nd->path.mnt : 0);
 		        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#172: FILE: fs/aufs/i_op.c:129:
+		  !!nd, nd ? !!nd->path.dentry : 0, nd ? !!nd->path.mnt : 0);
 		                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#175: FILE: fs/aufs/i_op.c:132:
+	locked = silly_lock(inode, nd);
 	                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#179: FILE: fs/aufs/i_op.c:136:
+	if (nd)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#180: FILE: fs/aufs/i_op.c:137:
+		fake_nd = *nd;
 		           ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#182: FILE: fs/aufs/i_op.c:139:
+	if (/* unlikely */(nondir || write_mask
+			   || au_opt_test_dirperm1(mnt_flags))) {

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#184: FILE: fs/aufs/i_op.c:141:
+		AuDebugOn(!h_inode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#185: FILE: fs/aufs/i_op.c:142:
+		AuDebugOn(!h_inode
+			  || ((h_inode->i_mode & S_IFMT)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#189: FILE: fs/aufs/i_op.c:146:
+		p = au_fake_dm(&fake_nd, nd, sb, bindex);
 		                         ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#191: FILE: fs/aufs/i_op.c:148:
+		if (IS_ERR(p))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#193: FILE: fs/aufs/i_op.c:150:
+		else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#220: FILE: fs/aufs/i_op.c:177:
+		p = au_fake_dm(&fake_nd, nd, sb, bindex);
 		                         ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#222: FILE: fs/aufs/i_op.c:179:
+		if (IS_ERR(p))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#224: FILE: fs/aufs/i_op.c:181:
+		else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#233: FILE: fs/aufs/i_op.c:190:
+	silly_unlock(locked, inode, nd);
 	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#241: FILE: fs/aufs/i_op.c:198:
+				  struct nameidata *nd)
 				                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#248: FILE: fs/aufs/i_op.c:205:
+	LKTRTrace("dir %lu, %.*s, nd{0x%x}\n",
 	                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#249: FILE: fs/aufs/i_op.c:206:
+		  dir->i_ino, AuDLNPair(dentry), nd ? nd->flags : 0);
 		                                 ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#249: FILE: fs/aufs/i_op.c:206:
+		  dir->i_ino, AuDLNPair(dentry), nd ? nd->flags : 0);

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#251: FILE: fs/aufs/i_op.c:208:
+	IMustLock(dir);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#253: FILE: fs/aufs/i_op.c:210:
+	/* nd can be NULL */
 	   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#261: FILE: fs/aufs/i_op.c:218:
+	ndp = au_dup_nd(au_sbi(dir->i_sb), &tmp_nd, nd);
 	                                            ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#274: FILE: fs/aufs/i_op.c:231:
+		if (h_inode->i_nlink == 1 || S_ISDIR(h_inode->i_mode))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#276: FILE: fs/aufs/i_op.c:233:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: fs/aufs/i_op.c:235:
+			static DEFINE_MUTEX(mtx);
+			mutex_lock(&mtx);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#286: FILE: fs/aufs/i_op.c:243:
+		if (unlikely(IS_ERR(ret) && inode))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#288: FILE: fs/aufs/i_op.c:245:
+		AuDebugOn(nd
 		          ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#289: FILE: fs/aufs/i_op.c:246:
+		AuDebugOn(nd
+			  && (nd->flags & LOOKUP_OPEN)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#290: FILE: fs/aufs/i_op.c:247:
+			  && (nd->flags & LOOKUP_OPEN)
+			  && nd->intent.open.file

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#291: FILE: fs/aufs/i_op.c:248:
+			  && nd->intent.open.file
+			  && nd->intent.open.file->f_dentry);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#292: FILE: fs/aufs/i_op.c:249:
+		au_store_fmode_exec(nd, inode);
 		                    ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#299: FILE: fs/aufs/i_op.c:256:
+	AuTraceErrPtr(ret);

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate>
#336: FILE: fs/aufs/i_op.c:293:
+			err = AuWbrCreate(sbinfo, dentry,

CHECK:BRACES: braces {} should be used on all arms of this statement
#342: FILE: fs/aufs/i_op.c:299:
+			if (add_entry)
[...]
+			else {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup>
#343: FILE: fs/aufs/i_op.c:300:
+				err = AuWbrCopyup(sbinfo, dentry);

CHECK:BRACES: Unbalanced braces around else statement
#344: FILE: fs/aufs/i_op.c:301:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#372: FILE: fs/aufs/i_op.c:329:
+	if (add_entry) {
[...]
+	} else
[...]

CHECK:CAMELCASE: Avoid CamelCase: <DiMustWriteLock>
#375: FILE: fs/aufs/i_op.c:332:
+		DiMustWriteLock(parent);

CHECK:CAMELCASE: Avoid CamelCase: <IiMustWriteLock>
#376: FILE: fs/aufs/i_op.c:333:
+		IiMustWriteLock(parent->d_inode);

CHECK:BRACES: Unbalanced braces around else statement
#377: FILE: fs/aufs/i_op.c:334:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT>
#395: FILE: fs/aufs/i_op.c:352:
+		mutex_lock_nested(&h_dir->i_mutex, AuLsc_I_PARENT);

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#424: FILE: fs/aufs/i_op.c:381:
+		mutex_lock_nested(&h_inode->i_mutex, AuLsc_I_CHILD);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#493: FILE: fs/aufs/i_op.c:450:
+	if (unlikely(rargs->hinotify
+		     && rargs->parent

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#494: FILE: fs/aufs/i_op.c:451:
+		     && rargs->parent
+		     && !IS_ROOT(rargs->parent))) {

CHECK:CAMELCASE: Avoid CamelCase: <AuCpup_DTIME>
#506: FILE: fs/aufs/i_op.c:463:
+		err = au_sio_cpup_simple(dentry, rargs->btgt, sz, AuCpup_DTIME);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#579: FILE: fs/aufs/i_op.c:536:
+	if ((ia->ia_valid & ATTR_SIZE)
+	    && ia->ia_size < i_size_read(inode))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#587: FILE: fs/aufs/i_op.c:544:
+	if ((ia->ia_valid & ATTR_SIZE)
+	    && ia->ia_size < i_size_read(inode)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#642: FILE: fs/aufs/i_op.c:599:
+	if (unlikely(!h_dentry->d_inode->i_op
+		     || !h_dentry->d_inode->i_op->readlink))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#667: FILE: fs/aufs/i_op.c:624:
+static void *aufs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#673: FILE: fs/aufs/i_op.c:630:
+	LKTRTrace("%.*s, nd %.*s\n",
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#692: FILE: fs/aufs/i_op.c:649:
+		nd_set_link(nd, buf);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#703: FILE: fs/aufs/i_op.c:660:
+static void aufs_put_link(struct dentry *dentry, struct nameidata *nd,
                                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#707: FILE: fs/aufs/i_op.c:664:
+	__putname(nd_get_link(nd));
 	                      ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuUnsupport>
#714: FILE: fs/aufs/i_op.c:671:
+	AuUnsupport();

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#719: FILE: fs/aufs/i_op.c:676:
+struct inode_operations aufs_symlink_iop = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#731: FILE: fs/aufs/i_op.c:688:
+struct inode_operations aufs_dir_iop = {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#748: FILE: fs/aufs/i_op.c:705:
+#if 0 /* reserved for future use */

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#756: FILE: fs/aufs/i_op.c:713:
+struct inode_operations aufs_iop = {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#763: FILE: fs/aufs/i_op.c:720:
+#if 0 /* reserved for future use */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277625.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 42 warnings, 41 checks, 728 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277625.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
