CHECK:SPACING: No space is necessary after a cast
#409: FILE: arch/s390/kernel/ptrace.c:216:
+	return put_user(tmp, (addr_t __user *) data);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#442: FILE: arch/s390/kernel/ptrace.c:309:
+	if (addr >= (addr_t) &dummy->regs.acrs &&

CHECK:SPACING: No space is necessary after a cast
#443: FILE: arch/s390/kernel/ptrace.c:310:
+	    addr < (addr_t) &dummy->regs.orig_gpr2)

CHECK:SPACING: No space is necessary after a cast
#505: FILE: arch/s390/kernel/ptrace.c:481:
+	__u32 tmp = (__u32) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: arch/s390/kernel/ptrace.c:664:
+		unsigned long *k = kbuf;
+		while (count > 0) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#590: FILE: arch/s390/kernel/ptrace.c:671:
+		unsigned long __user *u = ubuf;
+		while (count > 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#612: FILE: arch/s390/kernel/ptrace.c:693:
+		const unsigned long *k = kbuf;
+		while (count > 0 && !rc) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#619: FILE: arch/s390/kernel/ptrace.c:700:
+		const unsigned long  __user *u = ubuf;
+		while (count > 0 && !rc) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#621: FILE: arch/s390/kernel/ptrace.c:702:
+			unsigned long word;
+			rc = __get_user(word, u++);

WARNING:LINE_SPACING: Missing a blank line after declarations
#660: FILE: arch/s390/kernel/ptrace.c:741:
+		u32 fpc[2] = { target->thread.fp_regs.fpc, 0 };
+		rc = user_regset_copyin(&pos, &count, &kbuf, &ubuf, &fpc,

WARNING:LINE_SPACING: Missing a blank line after declarations
#717: FILE: arch/s390/kernel/ptrace.c:798:
+		compat_ulong_t *k = kbuf;
+		while (count > 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#724: FILE: arch/s390/kernel/ptrace.c:805:
+		compat_ulong_t __user *u = ubuf;
+		while (count > 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#746: FILE: arch/s390/kernel/ptrace.c:827:
+		const compat_ulong_t *k = kbuf;
+		while (count > 0 && !rc) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#753: FILE: arch/s390/kernel/ptrace.c:834:
+		const compat_ulong_t  __user *u = ubuf;
+		while (count > 0 && !rc) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#755: FILE: arch/s390/kernel/ptrace.c:836:
+			compat_ulong_t word;
+			rc = __get_user(word, u++);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#813: FILE: include/asm-s390/elf.h:116:
+typedef s390_fp_regs compat_elf_fpregset_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#814: FILE: include/asm-s390/elf.h:117:
+typedef s390_compat_regs compat_elf_gregset_t;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#823: FILE: include/asm-s390/elf.h:129:
+#define compat_elf_check_arch(x) \
+	(((x)->e_machine == EM_S390 || (x)->e_machine == EM_S390_OLD) \
+	 && (x)->e_ident[EI_CLASS] == ELF_CLASS)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#825: FILE: include/asm-s390/elf.h:131:
+	(((x)->e_machine == EM_S390 || (x)->e_machine == EM_S390_OLD) \
+	 && (x)->e_ident[EI_CLASS] == ELF_CLASS)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#904: FILE: include/asm-s390/processor.h:146:
+#define start_thread(regs, new_psw, new_stackp) do {		\
 	set_fs(USER_DS);					\
 	regs->psw.mask	= psw_user_bits;			\
+	regs->psw.addr	= new_psw | PSW_ADDR_AMODE;		\
+	regs->gprs[15]	= new_stackp;				\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regs' may be better as '(regs)' to avoid precedence issues
#904: FILE: include/asm-s390/processor.h:146:
+#define start_thread(regs, new_psw, new_stackp) do {		\
 	set_fs(USER_DS);					\
 	regs->psw.mask	= psw_user_bits;			\
+	regs->psw.addr	= new_psw | PSW_ADDR_AMODE;		\
+	regs->gprs[15]	= new_stackp;				\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'new_psw' may be better as '(new_psw)' to avoid precedence issues
#904: FILE: include/asm-s390/processor.h:146:
+#define start_thread(regs, new_psw, new_stackp) do {		\
 	set_fs(USER_DS);					\
 	regs->psw.mask	= psw_user_bits;			\
+	regs->psw.addr	= new_psw | PSW_ADDR_AMODE;		\
+	regs->gprs[15]	= new_stackp;				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#913: FILE: include/asm-s390/processor.h:153:
+#define start_thread31(regs, new_psw, new_stackp) do {		\
+	set_fs(USER_DS);					\
+	regs->psw.mask	= psw_user32_bits;			\
+	regs->psw.addr	= new_psw | PSW_ADDR_AMODE;		\
+	regs->gprs[15]	= new_stackp;				\
+	crst_table_downgrade(current->mm, 1UL << 31);		\
 } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regs' may be better as '(regs)' to avoid precedence issues
#913: FILE: include/asm-s390/processor.h:153:
+#define start_thread31(regs, new_psw, new_stackp) do {		\
+	set_fs(USER_DS);					\
+	regs->psw.mask	= psw_user32_bits;			\
+	regs->psw.addr	= new_psw | PSW_ADDR_AMODE;		\
+	regs->gprs[15]	= new_stackp;				\
+	crst_table_downgrade(current->mm, 1UL << 31);		\
 } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'new_psw' may be better as '(new_psw)' to avoid precedence issues
#913: FILE: include/asm-s390/processor.h:153:
+#define start_thread31(regs, new_psw, new_stackp) do {		\
+	set_fs(USER_DS);					\
+	regs->psw.mask	= psw_user32_bits;			\
+	regs->psw.addr	= new_psw | PSW_ADDR_AMODE;		\
+	regs->gprs[15]	= new_stackp;				\
+	crst_table_downgrade(current->mm, 1UL << 31);		\
 } while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#930: FILE: include/asm-s390/ptrace.h:218:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#931: FILE: include/asm-s390/ptrace.h:219:
+typedef struct
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#934: FILE: include/asm-s390/ptrace.h:222:
+} __attribute__ ((aligned(8))) psw_compat_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#943: FILE: include/asm-s390/ptrace.h:301:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#944: FILE: include/asm-s390/ptrace.h:302:
+typedef struct
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#951: FILE: include/asm-s390/ptrace.h:309:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000272027.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 16 warnings, 13 checks, 638 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000272027.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
