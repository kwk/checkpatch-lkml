ERROR:INITIALISED_STATIC: do not initialise statics to 0
#74: FILE: kernel/res_group/memctlr.c:45:
+static unsigned long rg_bitmap_shift_index = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "shared_pg_cnt"
#132: FILE: kernel/res_group/memctlr.c:153:
+		while (shared_pg_cnt != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#141: FILE: kernel/res_group/memctlr.c:162:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*shared_pg_cnt)...) over kzalloc(sizeof(struct rg_shared_pg_cnt)...)
#146: FILE: kernel/res_group/memctlr.c:166:
+	shared_pg_cnt = kzalloc(sizeof(struct rg_shared_pg_cnt), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "shared_pg_cnt"
#181: FILE: kernel/res_group/memctlr.c:196:
+	while (shared_pg_cnt != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "previous"
#188: FILE: kernel/res_group/memctlr.c:203:
+				if (previous != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: kernel/res_group/memctlr.c:222:
+	BUG();

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#228: FILE: kernel/res_group/memctlr.c:439:
	if (p->pid != p->tgid)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#231: FILE: kernel/res_group/memctlr.c:441:
+	printk("memctlr_move_task not yet available \n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'memctlr_move_task', this function's name, in a string
#231: FILE: kernel/res_group/memctlr.c:441:
+	printk("memctlr_move_task not yet available \n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#231: FILE: kernel/res_group/memctlr.c:441:
+	printk("memctlr_move_task not yet available \n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471158.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 5 warnings, 4 checks, 190 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471158.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
