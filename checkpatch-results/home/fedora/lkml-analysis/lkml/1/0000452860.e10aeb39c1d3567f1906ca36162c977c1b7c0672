WARNING:TYPO_SPELLING: 'asynchrnous' may be misspelled - perhaps 'asynchronous'?
#38: 
asynchrnous operation and the api will fit the chain of operations to the
^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
tiobench --size 2048 --block 4096 --block 131072 --dir /mnt/raid --numruns 5

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#119: FILE: drivers/dma/dmaengine.c:179:
+			printk(KERN_ERR "dma_sync_wait_timeout!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: drivers/dma/dmaengine.c:235:
+		while (client->chans_desired < 0 ||
+			client->chans_desired > client->chan_count) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: drivers/dma/dmaengine.c:245:
+		while (client->chans_desired >= 0 &&
+			client->chans_desired < client->chan_count) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#172: FILE: drivers/dma/dmaengine.c:348:
+	BUG_ON(test_bit(DMA_MEMCPY, &device->capabilities) &&

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: drivers/dma/dmaengine.c:349:
+	BUG_ON(test_bit(DMA_MEMCPY, &device->capabilities) &&
+		!device->device_prep_dma_memcpy);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#174: FILE: drivers/dma/dmaengine.c:350:
+	BUG_ON(test_bit(DMA_XOR, &device->capabilities) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: drivers/dma/dmaengine.c:351:
+	BUG_ON(test_bit(DMA_XOR, &device->capabilities) &&
+		!device->device_prep_dma_xor);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#176: FILE: drivers/dma/dmaengine.c:352:
+	BUG_ON(test_bit(DMA_ZERO_SUM, &device->capabilities) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: drivers/dma/dmaengine.c:353:
+	BUG_ON(test_bit(DMA_ZERO_SUM, &device->capabilities) &&
+		!device->device_prep_dma_zero_sum);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#178: FILE: drivers/dma/dmaengine.c:354:
+	BUG_ON(test_bit(DMA_MEMSET, &device->capabilities) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: drivers/dma/dmaengine.c:355:
+	BUG_ON(test_bit(DMA_MEMSET, &device->capabilities) &&
+		!device->device_prep_dma_memset);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#180: FILE: drivers/dma/dmaengine.c:356:
+	BUG_ON(test_bit(DMA_ZERO_SUM, &device->capabilities) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: drivers/dma/dmaengine.c:357:
+	BUG_ON(test_bit(DMA_ZERO_SUM, &device->capabilities) &&
+		!device->device_prep_dma_interrupt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: drivers/dma/dmaengine.c:359:
+	BUG_ON(!device->device_alloc_chan_resources);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#184: FILE: drivers/dma/dmaengine.c:360:
+	BUG_ON(!device->device_free_chan_resources);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#185: FILE: drivers/dma/dmaengine.c:361:
+	BUG_ON(!device->device_tx_submit);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#186: FILE: drivers/dma/dmaengine.c:362:
+	BUG_ON(!device->device_set_dest);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#187: FILE: drivers/dma/dmaengine.c:363:
+	BUG_ON(!device->device_set_src);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#188: FILE: drivers/dma/dmaengine.c:364:
+	BUG_ON(!device->device_dependency_added);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#189: FILE: drivers/dma/dmaengine.c:365:
+	BUG_ON(!device->device_is_tx_complete);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#190: FILE: drivers/dma/dmaengine.c:366:
+	BUG_ON(!device->device_issue_pending);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#191: FILE: drivers/dma/dmaengine.c:367:
+	BUG_ON(!device->dev);

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: drivers/dma/dmaengine.c:457:
+        void *dest, void *src, size_t len)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: drivers/dma/dmaengine.c:457:
+dma_cookie_t dma_async_memcpy_buf_to_buf(struct dma_chan *chan,
+        void *dest, void *src, size_t len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: drivers/dma/dmaengine.c:457:
+        void *dest, void *src, size_t len)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: drivers/dma/dmaengine.c:500:
+        struct page *page, unsigned int offset, void *kdata, size_t len)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: drivers/dma/dmaengine.c:500:
+dma_cookie_t dma_async_memcpy_buf_to_pg(struct dma_chan *chan,
+        struct page *page, unsigned int offset, void *kdata, size_t len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: drivers/dma/dmaengine.c:500:
+        struct page *page, unsigned int offset, void *kdata, size_t len)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: drivers/dma/dmaengine.c:544:
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: drivers/dma/dmaengine.c:544:
+dma_cookie_t dma_async_memcpy_pg_to_pg(struct dma_chan *chan,
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: drivers/dma/dmaengine.c:544:
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: drivers/dma/dmaengine.c:545:
+        unsigned int src_off, size_t len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: drivers/dma/dmaengine.c:545:
+        unsigned int src_off, size_t len)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: drivers/dma/dmaengine.c:575:
+void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *tx,
+	struct dma_chan *chan)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#362: FILE: drivers/dma/ioatdma.c:46:
 static int __devinit ioat_probe(struct pci_dev *pdev, const struct pci_device_id *ent);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#533: FILE: drivers/dma/ioatdma.c:301:
 
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#598: FILE: drivers/dma/ioatdma.c:333:
+	ioat_chan->common.cookie = desc->async_tx.cookie = cookie;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#618: FILE: drivers/dma/ioatdma.c:348:
+^I^I                    IOAT_CHANCMD_OFFSET,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: drivers/dma/ioatdma.c:349:
+^I^I                    IOAT_CHANCMD_APPEND);$

CHECK:BRACES: Unbalanced braces around else statement
#648: FILE: drivers/dma/ioatdma.c:437:
+			} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#665: FILE: drivers/dma/ioatdma.c:461:
+	struct ioat_dma_chan *ioat_chan = to_ioat_chan(chan);
+	spin_lock_bh(&ioat_chan->desc_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#666: FILE: drivers/dma/ioatdma.c:462:
+	if (ioat_chan->pending == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#669: FILE: drivers/dma/ioatdma.c:465:
+	} else

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#801: FILE: include/linux/dmaengine.h:84:
+#define dma_async_for_each_tx_type(index) for (\
+	 index = (unsigned long) DMA_TX_TYPE_START;\
+	 index <= (unsigned long) DMA_TX_TYPE_END;\
+	 index++)

CHECK:SPACING: No space is necessary after a cast
#802: FILE: include/linux/dmaengine.h:85:
+	 index = (unsigned long) DMA_TX_TYPE_START;\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#803: FILE: include/linux/dmaengine.h:86:
+	 index <= (unsigned long) DMA_TX_TYPE_END;\

WARNING:REPEATED_WORD: Possible repeated word: 'has'
#848: FILE: include/linux/dmaengine.h:206:
+ *	receipt, i.e. has has a chance to establish any dependency chains

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#869: FILE: include/linux/dmaengine.h:227:
+	spinlock_t lock;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#928: FILE: include/linux/dmaengine.h:272:
+	struct dma_async_tx_descriptor *(*device_prep_dma_memcpy)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#930: FILE: include/linux/dmaengine.h:274:
+	struct dma_async_tx_descriptor *(*device_prep_dma_xor)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#933: FILE: include/linux/dmaengine.h:277:
+	struct dma_async_tx_descriptor *(*device_prep_dma_zero_sum)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#936: FILE: include/linux/dmaengine.h:280:
+	struct dma_async_tx_descriptor *(*device_prep_dma_memset)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#938: FILE: include/linux/dmaengine.h:282:
+	struct dma_async_tx_descriptor *(*device_prep_dma_interrupt)(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: include/linux/dmaengine.h:287:
+	void (*device_set_dest)(dma_addr_t addr,
+		struct dma_async_tx_descriptor *tx, int index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#945: FILE: include/linux/dmaengine.h:289:
+	void (*device_set_src)(dma_addr_t addr,
+		struct dma_async_tx_descriptor *tx, int index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#948: FILE: include/linux/dmaengine.h:292:
+	enum dma_status (*device_is_tx_complete)(struct dma_chan *chan,
 			dma_cookie_t cookie, dma_cookie_t *last,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1037: FILE: include/linux/dmaengine.h:303:
+        void *dest, void *src, size_t len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1037: FILE: include/linux/dmaengine.h:303:
+dma_cookie_t dma_async_memcpy_buf_to_buf(struct dma_chan *chan,
+        void *dest, void *src, size_t len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1037: FILE: include/linux/dmaengine.h:303:
+        void *dest, void *src, size_t len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1039: FILE: include/linux/dmaengine.h:305:
+        struct page *page, unsigned int offset, void *kdata, size_t len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: include/linux/dmaengine.h:305:
+dma_cookie_t dma_async_memcpy_buf_to_pg(struct dma_chan *chan,
+        struct page *page, unsigned int offset, void *kdata, size_t len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1039: FILE: include/linux/dmaengine.h:305:
+        struct page *page, unsigned int offset, void *kdata, size_t len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1041: FILE: include/linux/dmaengine.h:307:
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1041: FILE: include/linux/dmaengine.h:307:
+dma_cookie_t dma_async_memcpy_pg_to_pg(struct dma_chan *chan,
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1041: FILE: include/linux/dmaengine.h:307:
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1042: FILE: include/linux/dmaengine.h:308:
+        unsigned int src_off, size_t len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1042: FILE: include/linux/dmaengine.h:308:
+        unsigned int src_off, size_t len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1044: FILE: include/linux/dmaengine.h:310:
+void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *tx,
+	struct dma_chan *chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1075: FILE: include/linux/dmaengine.h:338:
+static inline enum dma_status dma_async_is_tx_complete(struct dma_chan *chan,
 	dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000452860.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 28 warnings, 33 checks, 969 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000452860.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
