WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#66: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:REPEATED_WORD: Possible repeated word: 'debugfs'
#102: FILE: Documentation/fault-injection/provoke-crashes.txt:32:
+  mount -t debugfs debugfs /mnt

CHECK:LINE_SPACING: Please don't use multiple blank lines
#231: FILE: drivers/misc/lkdtm.c:222:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#295: FILE: drivers/misc/lkdtm.c:273:
+	case BUG:

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#296: FILE: drivers/misc/lkdtm.c:274:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#299: FILE: drivers/misc/lkdtm.c:277:
+		*((int *) 0) = 0;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#302: FILE: drivers/misc/lkdtm.c:280:
+		for (;;);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: No space is necessary after a cast
#305: FILE: drivers/misc/lkdtm.c:283:
+		(void) recursive_loop(0);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#309: FILE: drivers/misc/lkdtm.c:287:
+		volatile u32 data[8];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#310: FILE: drivers/misc/lkdtm.c:288:
+		volatile u32 *p = data;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: drivers/misc/lkdtm.c:294:
+		static u8 data[5] __attribute__((aligned(4))) = {1,2,3,4,5};
 		                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: drivers/misc/lkdtm.c:294:
+		static u8 data[5] __attribute__((aligned(4))) = {1,2,3,4,5};
 		                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: drivers/misc/lkdtm.c:294:
+		static u8 data[5] __attribute__((aligned(4))) = {1,2,3,4,5};
 		                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: drivers/misc/lkdtm.c:294:
+		static u8 data[5] __attribute__((aligned(4))) = {1,2,3,4,5};
 		                                                        ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((aligned(4)))
#316: FILE: drivers/misc/lkdtm.c:294:
+		static u8 data[5] __attribute__((aligned(4))) = {1,2,3,4,5};

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#320: FILE: drivers/misc/lkdtm.c:298:
+		p = (u32*)(data + 1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#347: FILE: drivers/misc/lkdtm.c:325:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#351: FILE: drivers/misc/lkdtm.c:329:
+	printk(KERN_INFO "lkdtm : Crash point %s of type %s hit, trigger in %d rounds\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: drivers/misc/lkdtm.c:330:
+	printk(KERN_INFO "lkdtm : Crash point %s of type %s hit, trigger in %d rounds\n",
+			cp_name_to_str(cpoint), cp_type_to_str(cptype), count);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lkdtm.entry"
#397: FILE: drivers/misc/lkdtm.c:344:
+	if (lkdtm.entry != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: drivers/misc/lkdtm.c:396:
+                cpoint = INVALID;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: drivers/misc/lkdtm.c:396:
+                cpoint = INVALID;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: drivers/misc/lkdtm.c:403:
+static ssize_t do_register_entry(enum cname which, struct file *f,
+		const char __user *user_buf, size_t count, loff_t *off)

CHECK:SPACING: No space is necessary after a cast
#444: FILE: drivers/misc/lkdtm.c:415:
+		free_page((unsigned long) buf);

CHECK:SPACING: No space is necessary after a cast
#453: FILE: drivers/misc/lkdtm.c:424:
+	free_page((unsigned long) buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: drivers/misc/lkdtm.c:440:
+static ssize_t lkdtm_debugfs_read(struct file *f, char __user *user_buf,
+		size_t count, loff_t *off)

CHECK:SPACING: No space is necessary after a cast
#483: FILE: drivers/misc/lkdtm.c:454:
+	free_page((unsigned long) buf);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#493: FILE: drivers/misc/lkdtm.c:464:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: drivers/misc/lkdtm.c:466:
+static ssize_t int_hardware_entry(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: drivers/misc/lkdtm.c:472:
+static ssize_t int_hw_irq_en(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: drivers/misc/lkdtm.c:478:
+static ssize_t int_tasklet_entry(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: drivers/misc/lkdtm.c:484:
+static ssize_t fs_devrw_entry(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: drivers/misc/lkdtm.c:490:
+static ssize_t mem_swapout_entry(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#525: FILE: drivers/misc/lkdtm.c:496:
+static ssize_t timeradd_entry(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: drivers/misc/lkdtm.c:502:
+static ssize_t scsi_dispatch_cmd_entry(struct file *f,
+		const char __user *buf, size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: drivers/misc/lkdtm.c:508:
+static ssize_t ide_core_cp_entry(struct file *f, const char __user *buf,
+		size_t count, loff_t *off)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: drivers/misc/lkdtm.c:515:
+static ssize_t direct_entry(struct file *f, const char __user *user_buf,
+		size_t count, loff_t *off)

CHECK:SPACING: No space is necessary after a cast
#558: FILE: drivers/misc/lkdtm.c:529:
+		free_page((unsigned long) buf);

CHECK:SPACING: No space is necessary after a cast
#567: FILE: drivers/misc/lkdtm.c:538:
+	free_page((unsigned long) buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#571: FILE: drivers/misc/lkdtm.c:542:
+	printk(KERN_INFO "lkdtm : Performing direct entry %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: drivers/misc/lkdtm.c:543:
+	printk(KERN_INFO "lkdtm : Performing direct entry %s\n",
+			cp_type_to_str(type));

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#580: FILE: drivers/misc/lkdtm.c:551:
+struct crash_entry
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#582: FILE: drivers/misc/lkdtm.c:553:
+	struct file_operations fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#617: FILE: drivers/misc/lkdtm.c:588:
+		printk(KERN_ERR "lkdtm: creating root dir failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: drivers/misc/lkdtm.c:601:
+		de = debugfs_create_file(cur->name, 0644, lkdtm_debugfs_root,
+				NULL, &cur->fops);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de"
#631: FILE: drivers/misc/lkdtm.c:602:
+		if (de == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#632: FILE: drivers/misc/lkdtm.c:603:
+			printk(KERN_ERR "lkdtm: could not create %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: drivers/misc/lkdtm.c:604:
+			printk(KERN_ERR "lkdtm: could not create %s\n",
+					cur->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#639: FILE: drivers/misc/lkdtm.c:610:
+		printk(KERN_INFO "lkdtm : Invalid command\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#645: FILE: drivers/misc/lkdtm.c:614:
+	if (cpoint != INVALID && cptype != NONE)
+	{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#648: FILE: drivers/misc/lkdtm.c:617:
+		if (ret < 0)
+		{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#650: FILE: drivers/misc/lkdtm.c:619:
+			printk(KERN_INFO "lkdtm : Invalid crash point %d\n", cpoint);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#653: FILE: drivers/misc/lkdtm.c:622:
+		printk(KERN_INFO "lkdtm : Crash point %s of type %s registered\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: drivers/misc/lkdtm.c:623:
+		printk(KERN_INFO "lkdtm : Crash point %s of type %s registered\n",
+				cpoint_name, cpoint_type);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#656: FILE: drivers/misc/lkdtm.c:625:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#657: FILE: drivers/misc/lkdtm.c:626:
+		printk(KERN_INFO "lkdtm : No crash points registered, enable through debugfs\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#673: FILE: drivers/misc/lkdtm.c:640:
+	printk(KERN_INFO "lkdtm : Crash point unregistered\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000016119.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 18 warnings, 28 checks, 610 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000016119.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
