WARNING:TYPO_SPELLING: 'Inthe' may be misspelled - perhaps 'In the'?
#43: 
  Inthe future AppArmor specific dependencies will be separated out,
  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#62: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#67: FILE: security/apparmor/include/match.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'insted' may be misspelled - perhaps 'instead'?
#94: FILE: security/apparmor/include/match.h:28:
+ * used in the header is 0x1B5E783D insted of 0xF13C57B1 though, because
                                     ^^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'LEN' may be better as '(LEN)' to avoid precedence issues
#145: FILE: security/apparmor/include/match.h:79:
+#define UNPACK_ARRAY(TABLE, BLOB, LEN, TYPE, NTOHX) \
+	do { \
+		typeof(LEN) __i; \
+		TYPE *__t = (TYPE *) TABLE; \
+		TYPE *__b = (TYPE *) BLOB; \
+		for (__i = 0; __i < LEN; __i++) { \
+			__t[__i] = NTOHX(__b[__i]); \
+		} \
+	} while (0)

CHECK:SPACING: No space is necessary after a cast
#149: FILE: security/apparmor/include/match.h:83:
+		TYPE *__b = (TYPE *) BLOB; \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#177: FILE: security/apparmor/match.c:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#218: FILE: security/apparmor/match.c:42:
+	th.td_id = be16_to_cpu(*(u16 *) (blob));

CHECK:SPACING: No space is necessary after a cast
#219: FILE: security/apparmor/match.c:43:
+	th.td_flags = be16_to_cpu(*(u16 *) (blob + 2));

CHECK:SPACING: No space is necessary after a cast
#220: FILE: security/apparmor/match.c:44:
+	th.td_lolen = be32_to_cpu(*(u32 *) (blob + 8));

CHECK:SPACING: No space is necessary after a cast
#260: FILE: security/apparmor/match.c:84:
+	if (ntohl(*(u32 *) blob) != YYTH_MAGIC)

CHECK:SPACING: No space is necessary after a cast
#263: FILE: security/apparmor/match.c:87:
+	hsize = ntohl(*(u32 *) (blob + 4));

WARNING:LINE_SPACING: Missing a blank line after declarations
#273: FILE: security/apparmor/match.c:97:
+		struct table_header *table;
+		table = unpack_table(blob, size);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#376: FILE: security/apparmor/match.c:200:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: security/apparmor/match.c:252:
+		u8 *equiv = EQUIV_TABLE(dfa);
+		for (; len; len--) {

CHECK:SPACING: No space is necessary after a cast
#429: FILE: security/apparmor/match.c:253:
+			pos = base[state] + equiv[(u8) *str++];

CHECK:SPACING: No space is necessary after a cast
#437: FILE: security/apparmor/match.c:261:
+			pos = base[state] + (u8) *str++;

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#470: FILE: security/apparmor/match.c:294:
+ * used to seperate pairs.
            ^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052591.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 10 checks, 403 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052591.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
