WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#60: 
diff -urpN linux-2.6.23-rc6/drivers/net/bnx2.c linux-2.6.23-rc6.bnx2/drivers/net/bnx2.c

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#81: FILE: drivers/net/bnx2.c:2774:
+bnx2_gunzip(void *gunzip_buf, unsigned sz, u8 *zbuf, int len, void **outbuf)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#91: FILE: drivers/net/bnx2.c:2780:
+	 * is stripped */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm"
#97: FILE: drivers/net/bnx2.c:2784:
+	if (strm == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm->workspace"
#100: FILE: drivers/net/bnx2.c:2787:
+	if (strm->workspace == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <zlib_inflateInit2>
#109: FILE: drivers/net/bnx2.c:2795:
+	rc = zlib_inflateInit2(strm, -MAX_WBITS);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: braces {} should be used on all arms of this statement
#110: FILE: drivers/net/bnx2.c:2796:
+	if (rc == Z_OK) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <zlib_inflateEnd>
#116: FILE: drivers/net/bnx2.c:2802:
+		zlib_inflateEnd(strm);

CHECK:BRACES: Unbalanced braces around else statement
#117: FILE: drivers/net/bnx2.c:2803:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#318: FILE: drivers/net/bnx2_fw.h:1090:
+/*	0x1f, 0x8b, 0x08, 0x08, 0xcb, 0xa3, 0x46, 0x45, 0x00, 0x03, 0x74, 0x65,
+	0x73, 0x74, 0x31, 0x2e, 0x62, 0x69, 0x6e, 0x00, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#318: FILE: drivers/net/bnx2_fw.h:1090:
+	0x73, 0x74, 0x31, 0x2e, 0x62, 0x69, 0x6e, 0x00, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#330: FILE: drivers/net/bnx2_fw.h:1804:
+/*	0x1f, 0x8b, 0x08, 0x08, 0x5e, 0xd0, 0x41, 0x44, 0x00, 0x03, 0x74, 0x65,
+	0x73, 0x74, 0x31, 0x2e, 0x62, 0x69, 0x6e, 0x00, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#330: FILE: drivers/net/bnx2_fw.h:1804:
+	0x73, 0x74, 0x31, 0x2e, 0x62, 0x69, 0x6e, 0x00, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#342: FILE: drivers/net/bnx2_fw.h:1884:
+/*	0x1f, 0x8b, 0x08, 0x08, 0x7e, 0xd1, 0x41, 0x44, 0x00, 0x03, 0x74, 0x65,
+	0x73, 0x74, 0x31, 0x2e, 0x62, 0x69, 0x6e, 0x00, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#342: FILE: drivers/net/bnx2_fw.h:1884:
+	0x73, 0x74, 0x31, 0x2e, 0x62, 0x69, 0x6e, 0x00, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#354: FILE: drivers/net/bnx2_fw.h:2065:
+/*	0x1f, 0x8b, 0x08, 0x08, 0x47, 0xd2, 0x41, 0x44, 0x00, 0x03, 0x74, 0x65,
+	0x73, 0x74, 0x31, 0x2e, 0x62, 0x69, 0x6e, 0x00, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#354: FILE: drivers/net/bnx2_fw.h:2065:
+	0x73, 0x74, 0x31, 0x2e, 0x62, 0x69, 0x6e, 0x00, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#366: FILE: drivers/net/bnx2_fw.h:2299:
+/*	0x1f, 0x8b, 0x08, 0x08, 0x21, 0xd3, 0x41, 0x44, 0x00, 0x03, 0x74, 0x65,
+	0x73, 0x74, 0x31, 0x2e, 0x62, 0x69, 0x6e, 0x00, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#366: FILE: drivers/net/bnx2_fw.h:2299:
+	0x73, 0x74, 0x31, 0x2e, 0x62, 0x69, 0x6e, 0x00, */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: include/linux/zlib.h:85:
+    const Byte *next_in;   /* next input byte */$

CHECK:CAMELCASE: Avoid CamelCase: <Byte>
#518: FILE: include/linux/zlib.h:85:
+    const Byte *next_in;   /* next input byte */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#527: FILE: include/linux/zlib.h:703:
+ * return len or negative error code. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#528: FILE: include/linux/zlib.h:704:
+extern int zlib_inflate_blob(void *dst, unsigned dst_sz, const void *src, unsigned src_sz);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#528: FILE: include/linux/zlib.h:704:
+extern int zlib_inflate_blob(void *dst, unsigned dst_sz, const void *src, unsigned src_sz);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#528: FILE: include/linux/zlib.h:704:
+extern int zlib_inflate_blob(void *dst, unsigned dst_sz, const void *src, unsigned src_sz);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: lib/zlib_inflate/inffast.c:72:
+    const unsigned char *in;    /* local strm->next_in */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: lib/zlib_inflate/inffast.c:73:
+    const unsigned char *last;  /* while in < last, enough input available */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: lib/zlib_inflate/inffast.c:74:
+    unsigned char *out;         /* local strm->next_out */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: lib/zlib_inflate/inffast.c:75:
+    unsigned char *beg;         /* inflate()'s initial strm->next_out */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: lib/zlib_inflate/inffast.c:76:
+    unsigned char *end;         /* while out < end, enough space available */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: lib/zlib_inflate/inffast.c:83:
+    unsigned char *window;      /* allocated sliding window, if wsize != 0 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: lib/zlib_inflate/inffast.c:86:
+    code const *lcode;          /* local strm->lencode */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: lib/zlib_inflate/inffast.c:87:
+    code const *dcode;          /* local strm->distcode */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: lib/zlib_inflate/inffast.c:95:
+    unsigned char *from;        /* where to copy match from */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: lib/zlib_inflate/inflate.c:335:
+    const unsigned char *next;  /* next input */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: lib/zlib_inflate/inflate.c:336:
+    unsigned char *put;         /* next output */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: lib/zlib_inflate/inflate.c:342:
+    unsigned char *from;        /* where to copy match bytes from */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: lib/zlib_inflate/inflate.c:900:
+    z->next_out = (unsigned char*)z->next_in + z->avail_in;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#600: FILE: lib/zlib_inflate/inflate.c:900:
+    z->next_out = (unsigned char*)z->next_in + z->avail_in;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#614: FILE: lib/zlib_inflate/inflate.c:925:
+ * return len or negative error code. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#615: FILE: lib/zlib_inflate/inflate.c:926:
+int zlib_inflate_blob(void *gunzip_buf, unsigned sz, const void *buf, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#615: FILE: lib/zlib_inflate/inflate.c:926:
+int zlib_inflate_blob(void *gunzip_buf, unsigned sz, const void *buf, unsigned len)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#622: FILE: lib/zlib_inflate/inflate.c:933:
+	 * is stripped */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm"
#626: FILE: lib/zlib_inflate/inflate.c:937:
+	if (strm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm->workspace"
#629: FILE: lib/zlib_inflate/inflate.c:940:
+	if (strm->workspace == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#638: FILE: lib/zlib_inflate/inflate.c:949:
+	if (rc == Z_OK) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#645: FILE: lib/zlib_inflate/inflate.c:956:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000378601.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 34 warnings, 12 checks, 538 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000378601.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
