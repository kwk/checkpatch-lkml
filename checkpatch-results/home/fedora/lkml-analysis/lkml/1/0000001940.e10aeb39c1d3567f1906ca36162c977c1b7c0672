ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#74: FILE: include/linux/audit.h:600:
audit_buffer *ab,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/audit.h:604:
+extern void		    audit_log_key(struct audit_buffer *ab, int type,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: include/linux/audit.h:605:
+^I^I^I^I^I ^Ichar *key);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#81: FILE: include/linux/audit.h:605:
+^I^I^I^I^I ^Ichar *key);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#81: FILE: include/linux/audit.h:605:
+extern void		    audit_log_key(struct audit_buffer *ab, int type,
+					 	char *key);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#90: FILE: include/linux/audit.h:628:
+#define audit_log_key(b, t, k) do { ; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#138: FILE: kernel/audit_tree.c:471:
+				audit_log_key(ab, rule->keyfields[i].type, rule->keyfields[i].lsm_str);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#189: FILE: kernel/auditfilter.c:89:
+			struct audit_field *f = &erule->keyfields[i];
+			kfree(f->lsm_str);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: kernel/auditfilter.c:106:
+static inline struct audit_entry *audit_init_entry(u32 field_count,
 {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#217: FILE: kernel/auditfilter.c:122:
+	keyfields = kzalloc(sizeof(*keyfields) * keyfield_count, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:CAMELCASE: Avoid CamelCase: <Audit_equal>
#236: FILE: kernel/auditfilter.c:177:
+	    f->op != Audit_equal)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#302: FILE: kernel/auditfilter.c:467:
+		struct audit_field *f = NULL;
+		if (data->fields[i] == AUDIT_FILTERKEY)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: kernel/auditfilter.c:620:
+static inline void audit_op_translate(struct audit_krule *krule,
+{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#343: FILE: kernel/auditfilter.c:622:
+		if (krule->fields[j].op == Audit_not_equal)
+				rule->fields[j] |= AUDIT_NEGATE;

CHECK:CAMELCASE: Avoid CamelCase: <Audit_not_equal>
#343: FILE: kernel/auditfilter.c:622:
+		if (krule->fields[j].op == Audit_not_equal)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#350: FILE: kernel/auditfilter.c:629:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: kernel/auditfilter.c:879:
+		err = audit_dupe_lsm_field(&new->keyfields[i],
+					       &old->keyfields[i]);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#601: FILE: kernel/auditsc.c:655:
+				if (ctx->keys[i].key)
+					kfree(ctx->keys[i].key);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: kernel/auditsc.c:674:
+static enum audit_state audit_filter_task(struct task_struct *tsk,
 {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#629: FILE: kernel/auditsc.c:687:
+					k[i].key = kstrdup(e->rule.keyfields[i].lsm_str, GFP_ATOMIC);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#765: FILE: auditctl.c:76:
+extern int audit_keyadded;

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#818: FILE: errormsg.h:57:
+    { -22,    2,    "-F missing field name before operator for" },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: errormsg.h:58:
+    { -23,    2,    "too many keys" }$

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#829: FILE: libaudit.c:83:
+int audit_keyadded hidden = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:CODE_INDENT: code indent should use tabs where possible
#844: FILE: libaudit.c:950:
+^I                                return -19;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000001940.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 15 warnings, 9 checks, 714 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000001940.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
