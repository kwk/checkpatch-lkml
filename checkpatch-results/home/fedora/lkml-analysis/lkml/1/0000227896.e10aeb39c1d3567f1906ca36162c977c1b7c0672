WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
access control decision. This is accomplished by taking the credential from the

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: fs/nfsd/auth.c:41:
+		ret = security_setprocattr(current, "current",
+				(void *)cred.cr_label, cred.cr_label_len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#102: FILE: fs/nfsd/auth.c:43:
+			printk(KERN_ERR "%s(): "

WARNING:SPLIT_STRING: quoted string split across lines
#103: FILE: fs/nfsd/auth.c:44:
+			printk(KERN_ERR "%s(): "
+					"flavor %d "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#104: FILE: fs/nfsd/auth.c:45:
+					"flavor %d "
+					"security_setprocattr(\"%*s\", %d) = %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: fs/nfsd/auth.c:55:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#189: FILE: net/sunrpc/auth.c:364:
+	acred.label_len = security_getprocattr(current, "current",&acred.label);
 	                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#189: FILE: net/sunrpc/auth.c:364:
+	acred.label_len = security_getprocattr(current, "current",&acred.label);
 	                                                          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "acred.label"
#195: FILE: net/sunrpc/auth.c:370:
+	if (acred.label != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required after that ',' (ctx:VxO)
#209: FILE: net/sunrpc/auth.c:416:
+	acred.label_len = security_getprocattr(current, "current",&acred.label);
 	                                                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#209: FILE: net/sunrpc/auth.c:416:
+	acred.label_len = security_getprocattr(current, "current",&acred.label);
 	                                                          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "acred.label"
#217: FILE: net/sunrpc/auth.c:424:
+	if (acred.label != NULL)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#224: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#229: FILE: net/sunrpc/auth_seclabel.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#230: FILE: net/sunrpc/auth_seclabel.c:2:
+ * linux/net/sunrpc/auth_seclabel.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#258: FILE: net/sunrpc/auth_seclabel.c:30:
+};
+#define slc_uid			slc_base.cr_uid

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: net/sunrpc/auth_seclabel.c:46:
+	dprintk("RPC:       creating SECLABEL authenticator for client %p\n",
+			clnt);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#287: FILE: net/sunrpc/auth_seclabel.c:59:
+/*
+ * Lookup AUTH_SECLABEL creds for current process

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: net/sunrpc/auth_seclabel.c:75:
+	dprintk("RPC:       allocating SECLABEL cred for uid %d gid %d\n",
+			acred->uid, acred->gid);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#305: FILE: net/sunrpc/auth_seclabel.c:77:
+	if (!(cred = kmalloc(sizeof(*cred), GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cred->slc_label"
#309: FILE: net/sunrpc/auth_seclabel.c:81:
+	if (cred->slc_label == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "acred->group_info"
#317: FILE: net/sunrpc/auth_seclabel.c:89:
+	if (acred->group_info != NULL)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'seclabel_free_cred', this function's name, in a string
#337: FILE: net/sunrpc/auth_seclabel.c:109:
+	dprintk("RPC:       seclabel_free_cred %p\n", seclabel_cred);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#346: FILE: net/sunrpc/auth_seclabel.c:118:
+	struct seclabel_cred *seclabel_cred = container_of(head, struct seclabel_cred, slc_base.cr_rcu);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#347: FILE: net/sunrpc/auth_seclabel.c:119:
+	struct seclabel_cred *seclabel_cred = container_of(head, struct seclabel_cred, slc_base.cr_rcu);
+	seclabel_free_cred(seclabel_cred);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#357: FILE: net/sunrpc/auth_seclabel.c:129:
+/*
+ * Match credentials against current process creds.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#368: FILE: net/sunrpc/auth_seclabel.c:140:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "acred->group_info"
#376: FILE: net/sunrpc/auth_seclabel.c:148:
+	if (acred->group_info != NULL)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#387: FILE: net/sunrpc/auth_seclabel.c:159:
+/*
+ * Marshal credentials.

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#394: FILE: net/sunrpc/auth_seclabel.c:166:
+	struct seclabel_cred	*cred = container_of(task->tk_msg.rpc_cred, struct seclabel_cred, slc_base);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#400: FILE: net/sunrpc/auth_seclabel.c:172:
+	*p++ = htonl(jiffies/HZ);
 	                    ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#403: FILE: net/sunrpc/auth_seclabel.c:175:
+	/*
+	 * Copy the UTS nodename captured when the client was created.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#408: FILE: net/sunrpc/auth_seclabel.c:180:
+	/*
+	 * Label

CHECK:SPACING: No space is necessary after a cast
#412: FILE: net/sunrpc/auth_seclabel.c:184:
+	*p++ = htonl((u32) cred->slc_uid);

CHECK:SPACING: No space is necessary after a cast
#413: FILE: net/sunrpc/auth_seclabel.c:185:
+	*p++ = htonl((u32) cred->slc_gid);

CHECK:SPACING: No space is necessary after a cast
#415: FILE: net/sunrpc/auth_seclabel.c:187:
+	for (i = 0; i < 16 && cred->slc_gids[i] != (gid_t) NOGROUP; i++)

CHECK:SPACING: No space is necessary after a cast
#416: FILE: net/sunrpc/auth_seclabel.c:188:
+		*p++ = htonl((u32) cred->slc_gids[i]);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#427: FILE: net/sunrpc/auth_seclabel.c:199:
+/*
+ * Refresh credentials. This is a no-op for AUTH_SECLABEL

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#446: FILE: net/sunrpc/auth_seclabel.c:218:
+		printk("RPC: bad verf flavor: %u\n", flavor);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#452: FILE: net/sunrpc/auth_seclabel.c:224:
+		printk("RPC: giant verf size: %u\n", size);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#494: FILE: net/sunrpc/auth_seclabel.c:266:
+/*
+ * Initialize RPCSEC_GSS module

ERROR:CODE_INDENT: code indent should use tabs where possible
#514: FILE: net/sunrpc/auth_seclabel.c:286:
+        rpcauth_unregister(&authseclabel_ops);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: net/sunrpc/auth_seclabel.c:286:
+        rpcauth_unregister(&authseclabel_ops);$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#575: FILE: net/sunrpc/svcauth_unix.c:51:
+#ifdef CONFIG_SECURITY
+			    && rv->flavour != &svcauth_seclabel

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#588: FILE: net/sunrpc/svcauth_unix.c:370:
+#ifdef CONFIG_SECURITY
+	    && dom->flavour != &svcauth_seclabel

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#598: FILE: net/sunrpc/svcauth_unix.c:388:
+	if (dom->flavour != &svcauth_unix
[...]
 	if (dom->flavour != &svcauth_unix)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#600: FILE: net/sunrpc/svcauth_unix.c:390:
+#ifdef CONFIG_SECURITY
+	    && dom->flavour != &svcauth_seclabel

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#623: FILE: net/sunrpc/svcauth_unix.c:905:
+	if ((len -= 3*4) < 0)
 	             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#623: FILE: net/sunrpc/svcauth_unix.c:905:
+	if ((len -= 3*4) < 0)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#629: FILE: net/sunrpc/svcauth_unix.c:911:
+	if (slen > 64 || (len -= (slen + 3)*4) < 0)
 	                                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#629: FILE: net/sunrpc/svcauth_unix.c:911:
+	if (slen > 64 || (len -= (slen + 3)*4) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#631: FILE: net/sunrpc/svcauth_unix.c:913:
+	argv->iov_base = (void*)((__be32*)argv->iov_base + slen);	/* skip machname */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#631: FILE: net/sunrpc/svcauth_unix.c:913:
+	argv->iov_base = (void*)((__be32*)argv->iov_base + slen);	/* skip machname */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#632: FILE: net/sunrpc/svcauth_unix.c:914:
+	argv->iov_len -= slen*4;
 	                     ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#638: FILE: net/sunrpc/svcauth_unix.c:920:
+	argv->iov_base = (void*)((__be32*)argv->iov_base + XDR_QUADLEN(slen));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#638: FILE: net/sunrpc/svcauth_unix.c:920:
+	argv->iov_base = (void*)((__be32*)argv->iov_base + XDR_QUADLEN(slen));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#644: FILE: net/sunrpc/svcauth_unix.c:926:
+	if (slen > 16 || (len -= (slen + 2)*4) < 0)
 	                                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#644: FILE: net/sunrpc/svcauth_unix.c:926:
+	if (slen > 16 || (len -= (slen + 2)*4) < 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cred->cr_group_info"
#649: FILE: net/sunrpc/svcauth_unix.c:931:
+	if (cred->cr_group_info == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cred->cr_group_info"
#651: FILE: net/sunrpc/svcauth_unix.c:933:
+		if (cred->cr_group_info == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#680: FILE: net/sunrpc/svcauth_unix.c:962:
+^I.accept ^I= svcauth_seclabel_accept,$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000227896.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 23 warnings, 24 checks, 589 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000227896.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
