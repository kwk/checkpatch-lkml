CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#56: FILE: fs/ext4/extents.c:1152:
+int ext4_ext_try_to_merge(struct inode *inode,
+				struct ext4_ext_path *path,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#61: FILE: fs/ext4/extents.c:1157:
+	int merge_done=0, uninitialized = 0;
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#64: FILE: fs/ext4/extents.c:1160:
+	BUG_ON(path[depth].p_hdr == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path[depth].p_hdr"
#64: FILE: fs/ext4/extents.c:1160:
+	BUG_ON(path[depth].p_hdr == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#83: FILE: fs/ext4/extents.c:1179:
+		eh->eh_entries = cpu_to_le16(le16_to_cpu(eh->eh_entries)-1);
 		                                                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#85: FILE: fs/ext4/extents.c:1181:
+		BUG_ON(eh->eh_entries == 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#91: FILE: fs/ext4/extents.c:1187:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#131: FILE: fs/ext4/extents.c:2033:
+ * extent into multiple extents (upto three). Atleast one initialized extent
                                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Atleast' may be misspelled - perhaps 'At least'?
#131: FILE: fs/ext4/extents.c:2033:
+ * extent into multiple extents (upto three). Atleast one initialized extent
                                               ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: fs/ext4/extents.c:2041:
+int ext4_ext_convert_to_initialized(handle_t *handle, struct inode *inode,
+					struct ext4_ext_path *path,

WARNING:LINE_SPACING: Missing a blank line after declarations
#174: FILE: fs/ext4/extents.c:2076:
+		unsigned int newdepth;
+		ex3 = &newex;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#186: FILE: fs/ext4/extents.c:2088:
+		if (newdepth != depth)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#188: FILE: fs/ext4/extents.c:2090:
+			depth=newdepth;
 			     ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#219: FILE: fs/ext4/extents.c:2121:
+	if ((err = ext4_ext_get_access(handle, inode, path + depth)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: fs/ext4/extents.c:2253:
+			ret = ext4_ext_convert_to_initialized(handle, inode,
+								path, iblock,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: include/linux/ext4_fs_extents.h:206:
+extern int ext4_ext_try_to_merge(struct inode *, struct ext4_ext_path *, struct ext4_extent *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#343: FILE: include/linux/ext4_fs_extents.h:206:
+extern int ext4_ext_try_to_merge(struct inode *, struct ext4_ext_path *, struct ext4_extent *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_ext_path *' should also have an identifier name
#343: FILE: include/linux/ext4_fs_extents.h:206:
+extern int ext4_ext_try_to_merge(struct inode *, struct ext4_ext_path *, struct ext4_extent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_extent *' should also have an identifier name
#343: FILE: include/linux/ext4_fs_extents.h:206:
+extern int ext4_ext_try_to_merge(struct inode *, struct ext4_ext_path *, struct ext4_extent *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440462.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 8 warnings, 7 checks, 291 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440462.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
