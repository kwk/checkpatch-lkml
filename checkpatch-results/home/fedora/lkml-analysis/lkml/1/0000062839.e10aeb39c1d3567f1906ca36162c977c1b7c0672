ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: fs/dcache.c:1645:
+struct dentry * d_lookup(struct dentry * parent, struct qstr * name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: fs/dcache.c:1645:
+struct dentry * d_lookup(struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: fs/dcache.c:1645:
+struct dentry * d_lookup(struct dentry * parent, struct qstr * name)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#130: FILE: fs/dcache.c:1648:
+	unsigned seq;

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: fs/dcache.c:1650:
+        do {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: fs/dcache.c:1650:
+        do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: fs/dcache.c:1651:
+                seq = read_seqbegin(&rename_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: fs/dcache.c:1651:
+                seq = read_seqbegin(&rename_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: fs/dcache.c:1652:
+                dentry = __d_lookup(parent, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: fs/dcache.c:1652:
+                dentry = __d_lookup(parent, name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: fs/dcache.c:1653:
+                if (dentry)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: fs/dcache.c:1653:
+                if (dentry)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: fs/dcache.c:1659:
+struct dentry * __d_lookup_rcu(struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: fs/dcache.c:1659:
+struct dentry * __d_lookup_rcu(struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: fs/dcache.c:1659:
+struct dentry * __d_lookup_rcu(struct dentry * parent, struct qstr * name)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#152: FILE: fs/dcache.c:1670:
+		unsigned seq;

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: fs/dcache.c:1695:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: fs/dcache.c:1695:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: fs/dcache.c:1695:
+ ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: fs/dcache.c:1696:
+ ^Ireturn NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: fs/dcache.c:1696:
+ ^Ireturn NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: fs/dcache.c:1696:
+ ^Ireturn NULL;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: fs/dcache.c:1699:
+struct dentry *d_lookup_rcu(struct dentry *parent, struct qstr * name)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#184: FILE: fs/dcache.c:1702:
+	unsigned seq;

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: fs/dcache.c:1707:
+        do {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: fs/dcache.c:1707:
+        do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: fs/dcache.c:1708:
+                seq = read_seqbegin(&rename_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: fs/dcache.c:1708:
+                seq = read_seqbegin(&rename_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: fs/dcache.c:1709:
+                dentry = __d_lookup_rcu(parent, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: fs/dcache.c:1709:
+                dentry = __d_lookup_rcu(parent, name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: fs/dcache.c:1710:
+                if (dentry)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: fs/dcache.c:1710:
+                if (dentry)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: fs/namei.c:204:
+static int acl_permission_check_rcu(struct inode *inode, int mask,
+		int (*check_acl)(struct inode *inode, int mask))

CHECK:BRACES: braces {} should be used on all arms of this statement
#235: FILE: fs/namei.c:210:
+	if (current_fsuid() == inode->i_uid)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#237: FILE: fs/namei.c:212:
+	else {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXG' are not preferred. Consider using octal permissions '0070'.
#238: FILE: fs/namei.c:213:
+		if (IS_POSIXACL(inode) && (mode & S_IRWXG) && check_acl)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#284: FILE: fs/namei.c:614:
+static __always_inline void set_root_rcu(struct nameidata *nd)
                                                            ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: fs/namei.c:618:
+		struct fs_struct *fs = current->fs;
+		read_lock(&fs->lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#302: FILE: fs/namei.c:667:
+static inline void path_to_nameidata_rcu(struct path *path, struct nameidata *nd)
                                                                               ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: fs/namei.c:772:
+	int res = 0;
+	while (d_mountpoint(path->dentry)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#322: FILE: fs/namei.c:774:
+		struct vfsmount *mounted = lookup_mnt(path);
+		if (!mounted)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#340: FILE: fs/namei.c:871:
+static int do_lookup_rcu(struct nameidata *nd, struct qstr *name,
                                            ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: fs/namei.c:872:
+static int do_lookup_rcu(struct nameidata *nd, struct qstr *name,
+		     struct path *path)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#365: FILE: fs/namei.c:923:
+static noinline int link_path_walk_rcu(const char *name, struct nameidata *nd, struct path *next)
                                                                            ^^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#370: FILE: fs/namei.c:928:
+	while (*name=='/')
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#380: FILE: fs/namei.c:938:
+	for(;;) {

CHECK:SPACING: No space is necessary after a cast
#398: FILE: fs/namei.c:956:
+		this.len = name - (const char *) this.name;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#404: FILE: fs/namei.c:962:
+		while (*++name == '/');

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#408: FILE: fs/namei.c:966:
+		if (this.name[0] == '.') switch (this.len) {
+			default:
[...]
+			case 2:
[...]
+			case 1:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#408: FILE: fs/namei.c:966:
+		if (this.name[0] == '.') switch (this.len) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#421: FILE: fs/namei.c:979:
+		if (do_lookup_rcu(nd, &this, next))
 		                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#429: FILE: fs/namei.c:987:
+		path_to_nameidata_rcu(next, nd);
 		                            ^^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#442: FILE: fs/namei.c:1000:
+		if (this.name[0] == '.') switch (this.len) {
+			default:
[...]
+			case 2:
[...]
+			case 1:

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#442: FILE: fs/namei.c:1000:
+		if (this.name[0] == '.') switch (this.len) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#454: FILE: fs/namei.c:1012:
+		if (do_lookup_rcu(nd, &this, next))
 		                  ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#458: FILE: fs/namei.c:1016:
+		if ((lookup_flags & LOOKUP_FOLLOW)
+		    && inode && inode->i_op->follow_link)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#461: FILE: fs/namei.c:1019:
+		path_to_nameidata_rcu(next, nd);
 		                            ^^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#497: FILE: fs/namei.c:1110:
 		if (this.name[0] == '.') switch (this.len) {
[...]
+			case 2:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#506: FILE: fs/namei.c:1165:
 		if (this.name[0] == '.') switch (this.len) {
[...]
+			case 2:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#518: FILE: fs/namei.c:1239:
+static int path_walk_rcu(const char *name, struct nameidata *nd)
                                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#525: FILE: fs/namei.c:1246:
+	err = link_path_walk_rcu(name, nd, &path);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#542: FILE: fs/namei.c:1263:
+static noinline int path_init_rcu(int dfd, const char *name, unsigned int flags, struct nameidata *nd)
                                                                                                    ^^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#542: FILE: fs/namei.c:1263:
+static noinline int path_init_rcu(int dfd, const char *name, unsigned int flags, struct nameidata *nd)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#553: FILE: fs/namei.c:1274:
+	if (*name=='/') {
 	         ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#554: FILE: fs/namei.c:1275:
+		set_root_rcu(nd);
 		             ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#559: FILE: fs/namei.c:1280:
+		struct fs_struct *fs = current->fs;
+		read_lock(&fs->lock);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#610: FILE: fs/namei.c:1374:
+	retval = path_init_rcu(dfd, name, flags, nd);
 	                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#615: FILE: fs/namei.c:1379:
+	retval = path_walk_rcu(name, nd);
 	                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#631: FILE: fs/namei.c:1394:
+		retval = path_init(dfd, name, flags, nd);
 		                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#634: FILE: fs/namei.c:1397:
+		retval = path_walk(name, nd);
 		                         ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#689: FILE: include/linux/dcache.h:288:
+extern struct dentry *d_lookup(struct dentry *, struct qstr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#689: FILE: include/linux/dcache.h:288:
+extern struct dentry *d_lookup(struct dentry *, struct qstr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#689: FILE: include/linux/dcache.h:288:
+extern struct dentry *d_lookup(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#690: FILE: include/linux/dcache.h:289:
+extern struct dentry *__d_lookup(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#690: FILE: include/linux/dcache.h:289:
+extern struct dentry *__d_lookup(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#690: FILE: include/linux/dcache.h:289:
+extern struct dentry *__d_lookup(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#691: FILE: include/linux/dcache.h:290:
+extern struct dentry *d_lookup_rcu(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#691: FILE: include/linux/dcache.h:290:
+extern struct dentry *d_lookup_rcu(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#691: FILE: include/linux/dcache.h:290:
+extern struct dentry *d_lookup_rcu(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#692: FILE: include/linux/dcache.h:291:
+extern struct dentry *__d_lookup_rcu(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#692: FILE: include/linux/dcache.h:291:
+extern struct dentry *__d_lookup_rcu(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#692: FILE: include/linux/dcache.h:291:
+extern struct dentry *__d_lookup_rcu(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#693: FILE: include/linux/dcache.h:292:
+extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#693: FILE: include/linux/dcache.h:292:
+extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#693: FILE: include/linux/dcache.h:292:
+extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062839.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 27 errors, 47 warnings, 11 checks, 577 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062839.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
