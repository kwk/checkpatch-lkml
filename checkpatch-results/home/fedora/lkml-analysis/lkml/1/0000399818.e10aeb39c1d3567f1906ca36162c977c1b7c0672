CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cpm_vecs[cpm_vec].handler"
#68: FILE: arch/ppc/8xx_io/commproc.c:296:
+	if (cpm_vecs[cpm_vec].handler != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hose"
#81: FILE: arch/ppc/kernel/pci.c:883:
+	if (hose == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hose"
#90: FILE: arch/ppc/kernel/pci.c:1264:
+	if (hose == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hose"
#93: FILE: arch/ppc/kernel/pci.c:1266:
+		if (hose == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <Hash>
#115: FILE: arch/ppc/mm/init.c:578:
+	if (Hash != NULL && pte_young(pte)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "Hash"
#115: FILE: arch/ppc/mm/init.c:578:
+	if (Hash != NULL && pte_young(pte)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'Hash != NULL'
#128: FILE: arch/ppc/mm/mmu_decl.h:79:
+	if ((Hash != NULL) &&
 	    cpu_has_feature(CPU_FTR_HPTE_TABLE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "Hash"
#128: FILE: arch/ppc/mm/mmu_decl.h:79:
+	if ((Hash != NULL) &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!area"
#141: FILE: arch/ppc/mm/pgtable.c:222:
+		if (area == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pg"
#150: FILE: arch/ppc/mm/pgtable.c:286:
+	if (pg != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "Hash"
#163: FILE: arch/ppc/mm/tlb.c:43:
+	if (Hash != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "Hash"
#172: FILE: arch/ppc/mm/tlb.c:55:
+	if (Hash != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!Hash"
#181: FILE: arch/ppc/mm/tlb.c:66:
+	if (Hash == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!Hash"
#190: FILE: arch/ppc/mm/tlb.c:107:
+	if (Hash == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!Hash"
#199: FILE: arch/ppc/mm/tlb.c:147:
+	if (Hash == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!Hash"
#208: FILE: arch/ppc/mm/tlb.c:162:
+	if (Hash == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vbase"
#221: FILE: arch/ppc/syslib/btext.c:205:
+	if (vbase == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base"
#230: FILE: arch/ppc/syslib/btext.c:218:
+	if (base == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#243: FILE: arch/ppc/syslib/open_pic.c:145:
     if (irq < open_pic_irq_offset || irq >= NumSources+open_pic_irq_offset \
+	|| ISR[irq - open_pic_irq_offset] == NULL) { \

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ISR[irq - open_pic_irq_offset]"
#243: FILE: arch/ppc/syslib/open_pic.c:145:
+	|| ISR[irq - open_pic_irq_offset] == NULL) { \

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!src"
#252: FILE: arch/ppc/syslib/open_pic.c:293:
+	if (src == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ISR[i]"
#261: FILE: arch/ppc/syslib/open_pic.c:388:
+		if (ISR[i] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ISR[irq]"
#270: FILE: arch/ppc/syslib/open_pic.c:794:
+	if (ISR[irq] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ISR[irq]"
#279: FILE: arch/ppc/syslib/open_pic.c:812:
+	if (ISR[irq] != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ISR[i]"
#288: FILE: arch/ppc/syslib/open_pic.c:977:
+		if (ISR[i] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ISR[i]"
#297: FILE: arch/ppc/syslib/open_pic.c:1019:
+		if (ISR[i] == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#310: FILE: arch/ppc/syslib/open_pic2.c:118:
     if (irq < open_pic2_irq_offset || irq >= NumSources+open_pic2_irq_offset \
+	|| ISR[irq - open_pic2_irq_offset] == NULL) { \

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ISR[irq - open_pic2_irq_offset]"
#310: FILE: arch/ppc/syslib/open_pic2.c:118:
+	|| ISR[irq - open_pic2_irq_offset] == NULL) { \

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!src"
#319: FILE: arch/ppc/syslib/open_pic2.c:195:
+	if (src == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ISR[i]"
#328: FILE: arch/ppc/syslib/open_pic2.c:271:
+		if (ISR[i] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ISR[irq]"
#337: FILE: arch/ppc/syslib/open_pic2.c:494:
+	if (ISR[irq] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ISR[irq]"
#346: FILE: arch/ppc/syslib/open_pic2.c:509:
+	if (ISR[irq] != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ISR[i]"
#355: FILE: arch/ppc/syslib/open_pic2.c:599:
+		if (ISR[i] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ISR[i]"
#364: FILE: arch/ppc/syslib/open_pic2.c:643:
+		if (ISR[i] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bp"
#377: FILE: arch/ppc/xmon/xmon.c:740:
+			if (bp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bp"
#386: FILE: arch/ppc/xmon/xmon.c:773:
+		if (bp == NULL) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000399818.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 36 checks, 259 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000399818.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
