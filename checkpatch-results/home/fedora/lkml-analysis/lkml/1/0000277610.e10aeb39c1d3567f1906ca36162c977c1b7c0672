WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/aufs/dentry.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: fs/aufs/dentry.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#59: FILE: fs/aufs/dentry.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#83: FILE: fs/aufs/dentry.c:40:
+	LKTRTrace("%.*s/%.*s, ndx{%d, 0x%x}\n",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#84: FILE: fs/aufs/dentry.c:41:
+		  AuDLNPair(parent), len, name, !!ndx->nfsmnt, ndx->flags);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#92: FILE: fs/aufs/dentry.c:49:
+	AuTraceErrPtr(dentry);

CHECK:CAMELCASE: Avoid CamelCase: <AuLkup_ALLOW_NEG>
#111: FILE: fs/aufs/dentry.c:68:
+#define AuLkup_ALLOW_NEG	1

CHECK:CAMELCASE: Avoid CamelCase: <AuLkup_DLGT>
#112: FILE: fs/aufs/dentry.c:69:
+#define AuLkup_DLGT		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#112: FILE: fs/aufs/dentry.c:69:
+#define AuLkup_DLGT		(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <AuLkup_DIRPERM1>
#113: FILE: fs/aufs/dentry.c:70:
+#define AuLkup_DIRPERM1		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#113: FILE: fs/aufs/dentry.c:70:
+#define AuLkup_DIRPERM1		(1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <AuLkup_##name>
#114: FILE: fs/aufs/dentry.c:71:
+#define au_ftest_lkup(flags, name)	((flags) & AuLkup_##name)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#127: FILE: fs/aufs/dentry.c:84:
+	struct nameidata	*nd;
 	                	 ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#147: FILE: fs/aufs/dentry.c:104:
+		.nd	= args->nd
 		 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#147: FILE: fs/aufs/dentry.c:104:
+		.nd	= args->nd
 		   	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#151: FILE: fs/aufs/dentry.c:108:
+	LKTRTrace("%.*s/%.*s, b%d, {flags 0x%x, type 0%o, nd %d}\n",
 	                                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#153: FILE: fs/aufs/dentry.c:110:
+		  args->flags, args->type, !!args->nd);
 		                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#154: FILE: fs/aufs/dentry.c:111:
+	if (args->nd)
 	          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#155: FILE: fs/aufs/dentry.c:112:
+		LKTRTrace("nd{0x%x}\n", args->nd->flags);
 		           ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#156: FILE: fs/aufs/dentry.c:113:
+	AuDebugOn(IS_ROOT(dentry));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#185: FILE: fs/aufs/dentry.c:142:
+	if (unlikely(ndx.nd
 	                 ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#186: FILE: fs/aufs/dentry.c:143:
+	if (unlikely(ndx.nd
+		     && au_test_nfs(h_parent->d_sb)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#187: FILE: fs/aufs/dentry.c:144:
+		     && au_test_nfs(h_parent->d_sb)
+		     && (ndx.nd->flags & LOOKUP_CREATE))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#203: FILE: fs/aufs/dentry.c:160:
+	} else if (wh_found
+		   || (args->type && args->type != (h_inode->i_mode & S_IFMT)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#212: FILE: fs/aufs/dentry.c:169:
+	err = au_br_nfs_h_intent(ndx.nd_file, dentry, bindex, args->nd);
 	                                                            ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#220: FILE: fs/aufs/dentry.c:177:
+	if (!h_inode || !S_ISDIR(h_inode->i_mode) || !wh_able
+	    || (inode && !S_ISDIR(inode->i_mode)))

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#223: FILE: fs/aufs/dentry.c:180:
+	mutex_lock_nested(&h_inode->i_mutex, AuLsc_I_CHILD);

CHECK:BRACES: braces {} should be used on all arms of this statement
#226: FILE: fs/aufs/dentry.c:183:
+	if (opq > 0)
[...]
+	else if (unlikely(opq < 0)) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#250: FILE: fs/aufs/dentry.c:207:
+		   struct nameidata *nd)
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#262: FILE: fs/aufs/dentry.c:219:
+		.nd	= nd
 		 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#262: FILE: fs/aufs/dentry.c:219:
+		.nd	= nd
 		   	  ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuLNPair>
#265: FILE: fs/aufs/dentry.c:222:
+	LKTRTrace("%.*s, b%d, type 0%o\n", AuLNPair(name), bstart, type);

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT>
#311: FILE: fs/aufs/dentry.c:268:
+		mutex_lock_nested(&h_dir->i_mutex, AuLsc_I_PARENT);

CHECK:BRACES: braces {} should be used on all arms of this statement
#330: FILE: fs/aufs/dentry.c:287:
+		if (args.type != S_IFDIR)
[...]
+		else if (isdir) {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <LKTRLabel>
#341: FILE: fs/aufs/dentry.c:298:
+		LKTRLabel(positive);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#350: FILE: fs/aufs/dentry.c:307:
+	AuTraceErr(err);

CHECK:BRACES: Unbalanced braces around else statement
#365: FILE: fs/aufs/dentry.c:322:
+	else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#398: FILE: fs/aufs/dentry.c:355:
+		.nd	= NULL,
 		 ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#408: FILE: fs/aufs/dentry.c:365:
+	AuDebugOn(!parent || !parent->d_inode
+		  || !S_ISDIR(parent->d_inode->i_mode));

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#428: FILE: fs/aufs/dentry.c:385:
+		AuIOErr("b%d %.*s should be negative.\n",

CHECK:CAMELCASE: Avoid CamelCase: <DiMustWriteLock>
#462: FILE: fs/aufs/dentry.c:419:
+	DiMustWriteLock(dentry);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#468: FILE: fs/aufs/dentry.c:425:
+	AuDebugOn(au_digen(parent) != sgen
+		  || au_iigen(parent->d_inode) != sgen);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#527: FILE: fs/aufs/dentry.c:484:
+	if (unlikely(bdiropq >= 0 && bdiropq <= au_sbend(sb)
+		     && au_sbr_whable(sb, bdiropq)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#548: FILE: fs/aufs/dentry.c:505:
+	npositive = au_lkup_dentry(dentry, parent_bstart, type, /*nd*/NULL);
 	                                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#562: FILE: fs/aufs/dentry.c:519:
+static int au_lock_nd(struct dentry *dentry, struct nameidata *nd)
                                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#565: FILE: fs/aufs/dentry.c:522:
+	if (nd && dentry != nd->path.dentry) {
 	    ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#565: FILE: fs/aufs/dentry.c:522:
+	int locked = 0;
+	if (nd && dentry != nd->path.dentry) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#572: FILE: fs/aufs/dentry.c:529:
+static void au_unlock_nd(int locked, struct nameidata *nd)
                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#581: FILE: fs/aufs/dentry.c:538:
+		struct nameidata *nd, struct dentry *h_dentry)
 		                  ^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#584: FILE: fs/aufs/dentry.c:541:
+	int (*reval)(struct dentry *, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#584: FILE: fs/aufs/dentry.c:541:
+	int (*reval)(struct dentry *, struct nameidata *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#588: FILE: fs/aufs/dentry.c:545:
+	LKTRTrace("%.*s, b%d, nd %d\n", AuDLNPair(dentry), bindex, !!nd);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#588: FILE: fs/aufs/dentry.c:545:
+	LKTRTrace("%.*s, b%d, nd %d\n", AuDLNPair(dentry), bindex, !!nd);
 	                                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#598: FILE: fs/aufs/dentry.c:555:
+	if (nd) {
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#599: FILE: fs/aufs/dentry.c:556:
+		memcpy(&fake_nd, nd, sizeof(*nd));
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#599: FILE: fs/aufs/dentry.c:556:
+		memcpy(&fake_nd, nd, sizeof(*nd));
 		                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#606: FILE: fs/aufs/dentry.c:563:
+	p = au_fake_dm(&fake_nd, nd, sb, bindex);
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#608: FILE: fs/aufs/dentry.c:565:
+	AuDebugOn(nd && p != &fake_nd);
 	          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#621: FILE: fs/aufs/dentry.c:578:
+		AuDebugOn(!nd);
 		           ^^

CHECK:CAMELCASE: Avoid CamelCase: <TestingFuse>
#623: FILE: fs/aufs/dentry.c:580:
+#ifndef TestingFuse

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#642: FILE: fs/aufs/dentry.c:599:
+	       struct nameidata *nd, int do_udba)
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#652: FILE: fs/aufs/dentry.c:609:
+	LKTRTrace("%.*s, nd %d\n", AuDLNPair(dentry), !!nd);
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#652: FILE: fs/aufs/dentry.c:609:
+	LKTRTrace("%.*s, nd %d\n", AuDLNPair(dentry), !!nd);
 	                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#685: FILE: fs/aufs/dentry.c:642:
+	locked = au_lock_nd(dentry, nd);
 	                            ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#699: FILE: fs/aufs/dentry.c:656:
+		if (unlikely(do_udba
+			     && !is_root

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#700: FILE: fs/aufs/dentry.c:657:
+			     && !is_root
+			     && (unhashed != d_unhashed(h_dentry)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#701: FILE: fs/aufs/dentry.c:658:
+			     && (unhashed != d_unhashed(h_dentry)
+				 || name->len != h_dentry->d_name.len

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#702: FILE: fs/aufs/dentry.c:659:
+				 || name->len != h_dentry->d_name.len
+				 || memcmp(name->name, h_dentry->d_name.name,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#711: FILE: fs/aufs/dentry.c:668:
+		err = au_do_h_d_reval(dentry, bindex, nd, h_dentry);
 		                                      ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#738: FILE: fs/aufs/dentry.c:695:
+		if (unlikely(plus != h_plus
+			     || mode != h_mode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#739: FILE: fs/aufs/dentry.c:696:
+			     || mode != h_mode
+			     || h_cached_inode != h_inode))

WARNING:INDENTED_LABEL: labels should not be indented
#743: FILE: fs/aufs/dentry.c:700:
+	err:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#747: FILE: fs/aufs/dentry.c:704:
+	au_unlock_nd(locked, nd);
 	                     ^^

CHECK:CAMELCASE: Avoid CamelCase: <SiMustAnyLock>
#770: FILE: fs/aufs/dentry.c:727:
+	SiMustAnyLock(dentry->d_sb);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#779: FILE: fs/aufs/dentry.c:736:
+	di_read_lock_parent(parent, AuLock_IR);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#781: FILE: fs/aufs/dentry.c:738:
+	AuDebugOn(au_digen(parent) != sgen
+		  || au_iigen(parent->d_inode) != sgen);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#837: FILE: fs/aufs/dentry.c:794:
+			if (au_digen(parent) == sgen
+			    && au_iigen(parent->d_inode) == sgen)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#871: FILE: fs/aufs/dentry.c:828:
+static int aufs_d_revalidate(struct dentry *dentry, struct nameidata *nd)
                                                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#880: FILE: fs/aufs/dentry.c:837:
+	if (nd && nd->path.dentry)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#881: FILE: fs/aufs/dentry.c:838:
+		LKTRTrace("nd{%.*s, 0x%x}\n",
 		           ^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#886: FILE: fs/aufs/dentry.c:843:
+^I * ^I^I^I^I && d_unhashed(dentry));$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#887: FILE: fs/aufs/dentry.c:844:
+	 * 				 && d_unhashed(dentry));
+	*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_FLUSH>
#893: FILE: fs/aufs/dentry.c:850:
+	si_read_lock(sb, AuLock_FLUSH);

CHECK:BRACES: braces {} should be used on all arms of this statement
#896: FILE: fs/aufs/dentry.c:853:
+	if (au_digen(dentry) == sgen)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#898: FILE: fs/aufs/dentry.c:855:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <ForceInotify>
#900: FILE: fs/aufs/dentry.c:857:
+#ifdef ForceInotify

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#901: FILE: fs/aufs/dentry.c:858:
+		AuDbg("UDBA or digen, %.*s\n", AuDLNPair(dentry));

CHECK:BRACES: braces {} should be used on all arms of this statement
#915: FILE: fs/aufs/dentry.c:872:
+		if (au_iigen(inode) == sgen)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#917: FILE: fs/aufs/dentry.c:874:
+		else {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#931: FILE: fs/aufs/dentry.c:888:
+#if 0 /* todo: support it? */

WARNING:LINE_SPACING: Missing a blank line after declarations
#948: FILE: fs/aufs/dentry.c:905:
+		aufs_bindex_t bstart = au_ibstart(inode);
+		if (bstart >= 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#949: FILE: fs/aufs/dentry.c:906:
+		if (bstart >= 0
+		    && au_test_higen(inode, au_h_iptr(inode, bstart)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#952: FILE: fs/aufs/dentry.c:909:
+	ndp = au_dup_nd(au_sbi(sb), &tmp_nd, nd);
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#956: FILE: fs/aufs/dentry.c:913:
+	au_store_fmode_exec(nd, inode);
 	                    ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#985: FILE: fs/aufs/dentry.c:942:
+		struct au_hdentry *p;
+		bend = dinfo->di_bend;

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#998: FILE: fs/aufs/dentry.c:955:
+struct dentry_operations aufs_dop = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 49 warnings, 46 checks, 959 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
