WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
The following changes since commit cb553adb4e83bc5314b5a0c397e546a215b19307:

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id 'cb553adb4e83bc5314b5a0c397e546a215b19307', maybe rebased or not pulled?
#26: 
The following changes since commit cb553adb4e83bc5314b5a0c397e546a215b19307:

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#46: FILE: arch/x86/include/asm/cpu_debug.h

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#46: 
new file mode 100755

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: arch/x86/include/asm/cpu_debug.h:1:
+#ifndef _ASM_X86_CPU_DEBUG_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#98: FILE: arch/x86/include/asm/cpu_debug.h:48:
+#define	CPU_MC			(1 << CPU_MC_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#99: FILE: arch/x86/include/asm/cpu_debug.h:49:
+#define	CPU_MONITOR		(1 << CPU_MONITOR_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#100: FILE: arch/x86/include/asm/cpu_debug.h:50:
+#define	CPU_TIME		(1 << CPU_TIME_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#101: FILE: arch/x86/include/asm/cpu_debug.h:51:
+#define	CPU_PMC			(1 << CPU_PMC_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#102: FILE: arch/x86/include/asm/cpu_debug.h:52:
+#define	CPU_PLATFORM		(1 << CPU_PLATFORM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#103: FILE: arch/x86/include/asm/cpu_debug.h:53:
+#define	CPU_APIC		(1 << CPU_APIC_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#104: FILE: arch/x86/include/asm/cpu_debug.h:54:
+#define	CPU_POWERON		(1 << CPU_POWERON_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#105: FILE: arch/x86/include/asm/cpu_debug.h:55:
+#define	CPU_CONTROL		(1 << CPU_CONTROL_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#106: FILE: arch/x86/include/asm/cpu_debug.h:56:
+#define	CPU_FEATURES		(1 << CPU_FEATURES_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#107: FILE: arch/x86/include/asm/cpu_debug.h:57:
+#define	CPU_LBRANCH		(1 << CPU_LBRANCH_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#108: FILE: arch/x86/include/asm/cpu_debug.h:58:
+#define	CPU_BIOS		(1 << CPU_BIOS_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#109: FILE: arch/x86/include/asm/cpu_debug.h:59:
+#define	CPU_FREQ		(1 << CPU_FREQ_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#110: FILE: arch/x86/include/asm/cpu_debug.h:60:
+#define	CPU_MTRR		(1 << CPU_MTTR_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#111: FILE: arch/x86/include/asm/cpu_debug.h:61:
+#define	CPU_PERF		(1 << CPU_PERF_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#112: FILE: arch/x86/include/asm/cpu_debug.h:62:
+#define	CPU_CACHE		(1 << CPU_CACHE_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#113: FILE: arch/x86/include/asm/cpu_debug.h:63:
+#define	CPU_SYSENTER		(1 << CPU_SYSENTER_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#114: FILE: arch/x86/include/asm/cpu_debug.h:64:
+#define	CPU_THERM		(1 << CPU_THERM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#115: FILE: arch/x86/include/asm/cpu_debug.h:65:
+#define	CPU_MISC		(1 << CPU_MISC_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#116: FILE: arch/x86/include/asm/cpu_debug.h:66:
+#define	CPU_DEBUG		(1 << CPU_DEBUG_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#117: FILE: arch/x86/include/asm/cpu_debug.h:67:
+#define	CPU_PAT			(1 << CPU_PAT_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#118: FILE: arch/x86/include/asm/cpu_debug.h:68:
+#define	CPU_VMX			(1 << CPU_VMX_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#119: FILE: arch/x86/include/asm/cpu_debug.h:69:
+#define	CPU_CALL		(1 << CPU_CALL_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#120: FILE: arch/x86/include/asm/cpu_debug.h:70:
+#define	CPU_BASE		(1 << CPU_BASE_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#121: FILE: arch/x86/include/asm/cpu_debug.h:71:
+#define	CPU_SMM			(1 << CPU_SMM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#122: FILE: arch/x86/include/asm/cpu_debug.h:72:
+#define	CPU_SVM			(1 << CPU_SVM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#123: FILE: arch/x86/include/asm/cpu_debug.h:73:
+#define	CPU_OSVM		(1 << CPU_OSVM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#124: FILE: arch/x86/include/asm/cpu_debug.h:74:
+#define	CPU_TSS			(1 << CPU_TSS_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#125: FILE: arch/x86/include/asm/cpu_debug.h:75:
+#define	CPU_CR			(1 << CPU_CR_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#133: FILE: arch/x86/include/asm/cpu_debug.h:83:
+#define	CPU_FILE_VALUE			(1 << CPU_VALUE_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#178: FILE: arch/x86/include/asm/cpu_debug.h:128:
+#define	CPU_INTEL_PENTIUM	(1 << CPU_INTEL_PENTIUM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#179: FILE: arch/x86/include/asm/cpu_debug.h:129:
+#define	CPU_INTEL_P6		(1 << CPU_INTEL_P6_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#180: FILE: arch/x86/include/asm/cpu_debug.h:130:
+#define	CPU_INTEL_PENTIUM_M	(1 << CPU_INTEL_PENTIUM_M_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#181: FILE: arch/x86/include/asm/cpu_debug.h:131:
+#define	CPU_INTEL_CORE		(1 << CPU_INTEL_CORE_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#182: FILE: arch/x86/include/asm/cpu_debug.h:132:
+#define	CPU_INTEL_CORE2		(1 << CPU_INTEL_CORE2_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#183: FILE: arch/x86/include/asm/cpu_debug.h:133:
+#define	CPU_INTEL_ATOM		(1 << CPU_INTEL_ATOM_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#184: FILE: arch/x86/include/asm/cpu_debug.h:134:
+#define	CPU_INTEL_XEON_P4	(1 << CPU_INTEL_XEON_P4_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#185: FILE: arch/x86/include/asm/cpu_debug.h:135:
+#define	CPU_INTEL_XEON_MP	(1 << CPU_INTEL_XEON_MP_BIT)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#213: FILE: arch/x86/include/asm/cpu_debug.h:163:
+	unsigned		cpu;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#214: FILE: arch/x86/include/asm/cpu_debug.h:164:
+	unsigned		type;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#215: FILE: arch/x86/include/asm/cpu_debug.h:165:
+	unsigned		reg;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#216: FILE: arch/x86/include/asm/cpu_debug.h:166:
+	unsigned		file;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#221: FILE: arch/x86/include/asm/cpu_debug.h:171:
+	unsigned		flag;		/* Register flag	*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#231: FILE: arch/x86/include/asm/cpu_debug.h:181:
+	unsigned		flag;		/* Register file flag	*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#235: FILE: arch/x86/include/asm/cpu_debug.h:185:
+	unsigned		min;		/* Register range min	*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#236: FILE: arch/x86/include/asm/cpu_debug.h:186:
+	unsigned		max;		/* Register range max	*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#237: FILE: arch/x86/include/asm/cpu_debug.h:187:
+	unsigned		flag;		/* Supported flags	*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#238: FILE: arch/x86/include/asm/cpu_debug.h:188:
+	unsigned		model;		/* Supported models	*/

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#256: FILE: arch/x86/kernel/cpu/cpu_debug.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#261: FILE: arch/x86/kernel/cpu/cpu_debug.c:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#280: FILE: arch/x86/kernel/cpu/cpu_debug.c:20:
+static DEFINE_PER_CPU(unsigned, cpu_model);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#281: FILE: arch/x86/kernel/cpu/cpu_debug.c:21:
+static DEFINE_PER_CPU(unsigned, cpu_modelflag);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#464: FILE: arch/x86/kernel/cpu/cpu_debug.c:204:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#465: FILE: arch/x86/kernel/cpu/cpu_debug.c:205:
+static int get_cpu_modelflag(unsigned cpu)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#517: FILE: arch/x86/kernel/cpu/cpu_debug.c:257:
+static int get_cpu_range_count(unsigned cpu)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#536: FILE: arch/x86/kernel/cpu/cpu_debug.c:276:
+static int is_typeflag_valid(unsigned cpu, unsigned flag)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#536: FILE: arch/x86/kernel/cpu/cpu_debug.c:276:
+static int is_typeflag_valid(unsigned cpu, unsigned flag)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#539: FILE: arch/x86/kernel/cpu/cpu_debug.c:279:
+	unsigned vendor, modelflag;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#566: FILE: arch/x86/kernel/cpu/cpu_debug.c:306:
+static unsigned get_cpu_range(unsigned cpu, unsigned *min, unsigned *max,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#566: FILE: arch/x86/kernel/cpu/cpu_debug.c:306:
+static unsigned get_cpu_range(unsigned cpu, unsigned *min, unsigned *max,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#566: FILE: arch/x86/kernel/cpu/cpu_debug.c:306:
+static unsigned get_cpu_range(unsigned cpu, unsigned *min, unsigned *max,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#566: FILE: arch/x86/kernel/cpu/cpu_debug.c:306:
+static unsigned get_cpu_range(unsigned cpu, unsigned *min, unsigned *max,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#567: FILE: arch/x86/kernel/cpu/cpu_debug.c:307:
+			      int index, unsigned flag)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#569: FILE: arch/x86/kernel/cpu/cpu_debug.c:309:
+	unsigned modelflag;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#593: FILE: arch/x86/kernel/cpu/cpu_debug.c:333:
+static void print_cpu_data(struct seq_file *seq, unsigned type,

CHECK:BRACES: braces {} should be used on all arms of this statement
#599: FILE: arch/x86/kernel/cpu/cpu_debug.c:339:
+	if (seq) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#604: FILE: arch/x86/kernel/cpu/cpu_debug.c:344:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#607: FILE: arch/x86/kernel/cpu/cpu_debug.c:347:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#608: FILE: arch/x86/kernel/cpu/cpu_debug.c:348:
+		printk(KERN_INFO " %08x: %08x_%08x\n", type, high, low);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#612: FILE: arch/x86/kernel/cpu/cpu_debug.c:352:
+static void print_msr(struct seq_file *seq, unsigned cpu, unsigned flag)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#612: FILE: arch/x86/kernel/cpu/cpu_debug.c:352:
+static void print_msr(struct seq_file *seq, unsigned cpu, unsigned flag)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#616: FILE: arch/x86/kernel/cpu/cpu_debug.c:356:
+	unsigned msr, msr_min, msr_max;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv"
#692: FILE: arch/x86/kernel/cpu/cpu_debug.c:432:
+	if (priv == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#706: FILE: arch/x86/kernel/cpu/cpu_debug.c:446:
+	seq_printf(seq, "\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#761: FILE: arch/x86/kernel/cpu/cpu_debug.c:501:
+static int cpu_create_file(unsigned cpu, unsigned type, unsigned reg,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#761: FILE: arch/x86/kernel/cpu/cpu_debug.c:501:
+static int cpu_create_file(unsigned cpu, unsigned type, unsigned reg,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#761: FILE: arch/x86/kernel/cpu/cpu_debug.c:501:
+static int cpu_create_file(unsigned cpu, unsigned type, unsigned reg,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#762: FILE: arch/x86/kernel/cpu/cpu_debug.c:502:
+			   unsigned file, struct dentry *dentry)

WARNING:TYPO_SPELLING: 'intialized' may be misspelled - perhaps 'initialized'?
#766: FILE: arch/x86/kernel/cpu/cpu_debug.c:506:
+	/* Already intialized */
 	           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv"
#772: FILE: arch/x86/kernel/cpu/cpu_debug.c:512:
+	if (priv == NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#785: FILE: arch/x86/kernel/cpu/cpu_debug.c:525:
+		debugfs_create_file(cpu_file[file].name, S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: Unbalanced braces around else statement
#787: FILE: arch/x86/kernel/cpu/cpu_debug.c:527:
+	else {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#788: FILE: arch/x86/kernel/cpu/cpu_debug.c:528:
+		debugfs_create_file(cpu_base[type].name, S_IRUGO,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#799: FILE: arch/x86/kernel/cpu/cpu_debug.c:539:
+static int cpu_init_regfiles(unsigned cpu, unsigned int type, unsigned reg,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#799: FILE: arch/x86/kernel/cpu/cpu_debug.c:539:
+static int cpu_init_regfiles(unsigned cpu, unsigned int type, unsigned reg,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#803: FILE: arch/x86/kernel/cpu/cpu_debug.c:543:
+	unsigned file;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#814: FILE: arch/x86/kernel/cpu/cpu_debug.c:554:
+static int cpu_init_msr(unsigned cpu, unsigned type, struct dentry *dentry)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#814: FILE: arch/x86/kernel/cpu/cpu_debug.c:554:
+static int cpu_init_msr(unsigned cpu, unsigned type, struct dentry *dentry)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#819: FILE: arch/x86/kernel/cpu/cpu_debug.c:559:
+	unsigned reg, reg_min, reg_max;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#844: FILE: arch/x86/kernel/cpu/cpu_debug.c:584:
+static int cpu_init_allreg(unsigned cpu, struct dentry *dentry)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#847: FILE: arch/x86/kernel/cpu/cpu_debug.c:587:
+	unsigned type;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#872: FILE: arch/x86/kernel/cpu/cpu_debug.c:612:
+	unsigned cpu;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: arch/x86/kernel/cpu/cpu_debug.c:633:
+			pr_err("Register files count %d exceeds limit %d\n",
+				per_cpu(cpu_priv_count, cpu), MAX_CPU_FILES);

WARNING:NEEDLESS_IF: debugfs_remove_recursive(NULL) is safe and this check is probably not required
#916: FILE: arch/x86/kernel/cpu/cpu_debug.c:656:
+	if (cpu_debugfs_dir)
+		debugfs_remove_recursive(cpu_debugfs_dir);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157895.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 51 warnings, 45 checks, 867 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157895.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
