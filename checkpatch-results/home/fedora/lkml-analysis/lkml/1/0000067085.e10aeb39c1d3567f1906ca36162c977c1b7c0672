WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
This patch added verification for userspace memory integrity after s3 resume.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/percpu.h> instead of <asm/percpu.h>
#85: FILE: arch/x86/kernel/tboot.c:44:
+#include <asm/percpu.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#96: FILE: arch/x86/kernel/tboot.c:180:
+static int tboot_gen_mem_integrity(const uint8_t key[], vmac_t *mac)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#103: FILE: arch/x86/kernel/tboot.c:187:
+	uint64_t paddr, rstart, rend;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#105: FILE: arch/x86/kernel/tboot.c:189:
+	uint8_t zeroed_key[VMAC_KEY_LEN];

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#131: FILE: arch/x86/kernel/tboot.c:215:
+			i++, pfn = pgdat->node_start_pfn + i) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rend <= paddr'
#142: FILE: arch/x86/kernel/tboot.c:226:
+				if (((paddr + PAGE_SIZE) <= rstart)
+					|| (rend <= paddr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#143: FILE: arch/x86/kernel/tboot.c:227:
+				if (((paddr + PAGE_SIZE) <= rstart)
+					|| (rend <= paddr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: arch/x86/kernel/tboot.c:309:
+static void tboot_do_stack_switch(struct thread_info *new_ti,
+				struct thread_info *old_ti)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#199: FILE: arch/x86/kernel/tboot.c:313:
+	asm volatile (

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#204: FILE: arch/x86/kernel/tboot.c:318:
+	asm volatile (

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!low_ti"
#227: FILE: arch/x86/kernel/tboot.c:341:
+	if (low_ti == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current_ti"
#239: FILE: arch/x86/kernel/tboot.c:353:
+	if (current_ti == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: arch/x86/kernel/tboot.c:354:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!low_ti"
#248: FILE: arch/x86/kernel/tboot.c:362:
+	if (low_ti == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#249: FILE: arch/x86/kernel/tboot.c:363:
+		BUG();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#311: FILE: include/linux/tboot.h:150:
+extern void tboot_sx_resume(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: include/linux/tboot.h:151:
+extern void tboot_switch_stack(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/linux/tboot.h:152:
+extern void tboot_restore_stack(void);

WARNING:BAD_SIGN_OFF: Duplicate signature
#350: 
Signed-off-by: Shane Wang <shane.wang@intel.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Duplicate signature
#351: 
Signed-off-by: Joseph Cihula <joseph.cihula@intel.com>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/percpu.h> instead of <asm/percpu.h>
#378: FILE: arch/x86/kernel/tboot.c:44:
+#include <asm/percpu.h>

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#389: FILE: arch/x86/kernel/tboot.c:180:
+static int tboot_gen_mem_integrity(const uint8_t key[], vmac_t *mac)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#396: FILE: arch/x86/kernel/tboot.c:187:
+	uint64_t paddr, rstart, rend;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#398: FILE: arch/x86/kernel/tboot.c:189:
+	uint8_t zeroed_key[VMAC_KEY_LEN];

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#424: FILE: arch/x86/kernel/tboot.c:215:
+			i++, pfn = pgdat->node_start_pfn + i) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rend <= paddr'
#435: FILE: arch/x86/kernel/tboot.c:226:
+				if (((paddr + PAGE_SIZE) <= rstart)
+					|| (rend <= paddr))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#436: FILE: arch/x86/kernel/tboot.c:227:
+				if (((paddr + PAGE_SIZE) <= rstart)
+					|| (rend <= paddr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: arch/x86/kernel/tboot.c:309:
+static void tboot_do_stack_switch(struct thread_info *new_ti,
+				struct thread_info *old_ti)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#492: FILE: arch/x86/kernel/tboot.c:313:
+	asm volatile (

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#497: FILE: arch/x86/kernel/tboot.c:318:
+	asm volatile (

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!low_ti"
#520: FILE: arch/x86/kernel/tboot.c:341:
+	if (low_ti == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current_ti"
#532: FILE: arch/x86/kernel/tboot.c:353:
+	if (current_ti == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#533: FILE: arch/x86/kernel/tboot.c:354:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!low_ti"
#541: FILE: arch/x86/kernel/tboot.c:362:
+	if (low_ti == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#542: FILE: arch/x86/kernel/tboot.c:363:
+		BUG();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#604: FILE: include/linux/tboot.h:150:
+extern void tboot_sx_resume(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#605: FILE: include/linux/tboot.h:151:
+extern void tboot_switch_stack(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#606: FILE: include/linux/tboot.h:152:
+extern void tboot_restore_stack(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000067085.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 32 checks, 512 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000067085.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
