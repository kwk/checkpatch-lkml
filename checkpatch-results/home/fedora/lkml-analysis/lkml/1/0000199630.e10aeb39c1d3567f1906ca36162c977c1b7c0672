CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#215: FILE: include/linux/ftrace.h:119:
+extern void ftrace_graph_caller(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: include/linux/ftrace.h:333:
+extern int register_ftrace_graph(trace_function_graph_t func);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/linux/ftrace.h:336:
+extern void unregister_ftrace_graph(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: include/linux/ftrace.h:338:
+extern void ftrace_graph_init_task(struct task_struct *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: include/linux/ftrace.h:339:
+extern void ftrace_graph_exit_task(struct task_struct *t);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#354: FILE: kernel/trace/Kconfig:66:
+config FUNCTION_GRAPH_TRACER
+	bool "Kernel Function Graph Tracer"
+	depends on HAVE_FUNCTION_GRAPH_TRACER
 	depends on FUNCTION_TRACER
 	help
+	  Enable the kernel to trace a function at both its return
+	  Enable the kernel to trace a function at both its return
+	  Enable the kernel to trace a function at both its return
+	  Enable the kernel to trace a function at both its return
+	  Enable the kernel to trace a function at both its return
+	  and its entry.
+	  It's first purpose is to trace the duration of functions and
+	  draw a call graph for each thread with some informations like
+	  the return value.
+	  This is done by setting the current return address on the current
+	  task structure into a stack of calls.
 
 config IRQSOFF_TRACER
 	bool "Interrupts-off Latency Tracer"

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#366: FILE: kernel/trace/Kconfig:74:
+	  draw a call graph for each thread with some informations like
 	                                              ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: kernel/trace/trace.c:883:
+static void __trace_function_graph(struct trace_array *tr,
 				struct trace_array_cpu *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#585: FILE: kernel/trace/trace.h:493:
+extern enum print_line_t print_graph_function(struct trace_iterator *iter);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#594: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#599: FILE: kernel/trace/trace_functions_graph.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#614: FILE: kernel/trace/trace_functions_graph.c:16:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#627: FILE: kernel/trace/trace_functions_graph.c:29:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#631: FILE: kernel/trace/trace_functions_graph.c:33:
+	int cpu;
+	for_each_online_cpu(cpu)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#642: FILE: kernel/trace/trace_functions_graph.c:44:
+
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#653: FILE: kernel/trace/trace_functions_graph.c:55:
+		ret = trace_seq_printf(s, "%pF -> ", (void *)field->parent_ip);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: kernel/trace/trace_functions_graph.c:60:
+		ret = seq_print_ip_sym(s, field->ip,
+					trace_flags & TRACE_ITER_SYM_MASK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: kernel/trace/trace_functions_graph.c:65:
+		ret = trace_seq_printf(s, " (%llu ns)",
+					field->rettime - field->calltime);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: kernel/trace/trace_functions_graph.c:71:
+			ret = trace_seq_printf(s, " (Overruns: %lu)",
+						field->overrun);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 13 checks, 524 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
