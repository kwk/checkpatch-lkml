WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
2) Systems may be native dcr capable and still use memory mapped dcr interface.

CHECK:BRACES: braces {} should be used on all arms of this statement
#85: FILE: arch/powerpc/sysdev/dcr.c:46:
+	if (!strcmp(prop, "native")) {
[...]
+	} else if (!strcmp(prop, "mmio")) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#91: FILE: arch/powerpc/sysdev/dcr.c:52:
+	} else

CHECK:SPACING: No space is necessary after a cast
#160: FILE: arch/powerpc/sysdev/dcr.c:178:
+		 (unsigned long long) addr, ret.stride);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#195: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#200: FILE: include/asm-powerpc/dcr-generic.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#215: FILE: include/asm-powerpc/dcr-generic.h:16:
+ *   along with this program;  if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#216: FILE: include/asm-powerpc/dcr-generic.h:17:
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#226: FILE: include/asm-powerpc/dcr-generic.h:27:
+typedef struct {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#234: FILE: include/asm-powerpc/dcr-generic.h:35:
+extern bool dcr_map_ok_generic(dcr_host_t host);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: include/asm-powerpc/dcr-generic.h:37:
+extern dcr_host_t dcr_map_generic(struct device_node *dev, unsigned int dcr_n,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: include/asm-powerpc/dcr-generic.h:38:
+extern dcr_host_t dcr_map_generic(struct device_node *dev, unsigned int dcr_n,
+			  unsigned int dcr_c);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/asm-powerpc/dcr-generic.h:39:
+extern void dcr_unmap_generic(dcr_host_t host, unsigned int dcr_c);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: include/asm-powerpc/dcr-generic.h:41:
+extern u32 dcr_read_generic(dcr_host_t host, unsigned int dcr_n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#242: FILE: include/asm-powerpc/dcr-generic.h:43:
+extern void dcr_write_generic(dcr_host_t host, unsigned int dcr_n, u32 value);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#248: FILE: include/asm-powerpc/dcr-generic.h:49:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host.token"
#263: FILE: include/asm-powerpc/dcr-mmio.h:34:
+	return host.token != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: include/asm-powerpc/dcr-mmio.h:37:
+extern dcr_host_mmio_t dcr_map_mmio(struct device_node *dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#272: FILE: include/asm-powerpc/dcr-mmio.h:40:
+extern void dcr_unmap_mmio(dcr_host_mmio_t host, unsigned int dcr_c);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host' may be better as '(host)' to avoid precedence issues
#311: FILE: include/asm-powerpc/dcr-native.h:39:
+#define dcr_read_native(host, dcr_n)		mfdcr(dcr_n + host.base)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dcr_n' may be better as '(dcr_n)' to avoid precedence issues
#311: FILE: include/asm-powerpc/dcr-native.h:39:
+#define dcr_read_native(host, dcr_n)		mfdcr(dcr_n + host.base)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host' may be better as '(host)' to avoid precedence issues
#312: FILE: include/asm-powerpc/dcr-native.h:40:
+#define dcr_write_native(host, dcr_n, value)	mtdcr(dcr_n + host.base, value)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dcr_n' may be better as '(dcr_n)' to avoid precedence issues
#312: FILE: include/asm-powerpc/dcr-native.h:40:
+#define dcr_write_native(host, dcr_n, value)	mtdcr(dcr_n + host.base, value)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#349: FILE: include/asm-powerpc/dcr.h:47:
+typedef dcr_host_native_t dcr_host_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#356: FILE: include/asm-powerpc/dcr.h:54:
+typedef dcr_host_mmio_t dcr_host_t;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302029.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 6 warnings, 17 checks, 288 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302029.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
