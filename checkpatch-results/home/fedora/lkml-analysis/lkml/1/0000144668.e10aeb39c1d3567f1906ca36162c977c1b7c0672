WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
The following changes since commit 8fe74cf053de7ad2124a894996f84fa890a81093:

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '8fe74cf053de7ad2124a894996f84fa890a81093', maybe rebased or not pulled?
#34: 
The following changes since commit 8fe74cf053de7ad2124a894996f84fa890a81093:

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#69: FILE: arch/x86/include/asm/pci.h:96:
+#define DECLARE_PCI_UNMAP_ADDR(ADDR_NAME)       \
+	        dma_addr_t ADDR_NAME;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: arch/x86/include/asm/pci.h:97:
+^I        dma_addr_t ADDR_NAME;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#71: FILE: arch/x86/include/asm/pci.h:98:
+#define DECLARE_PCI_UNMAP_LEN(LEN_NAME)         \
+	        __u32 LEN_NAME;

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: arch/x86/include/asm/pci.h:99:
+^I        __u32 LEN_NAME;$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ADDR_NAME' may be better as '(ADDR_NAME)' to avoid precedence issues
#73: FILE: arch/x86/include/asm/pci.h:100:
+#define pci_unmap_addr(PTR, ADDR_NAME)                  \
+	        ((PTR)->ADDR_NAME)

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: arch/x86/include/asm/pci.h:101:
+^I        ((PTR)->ADDR_NAME)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ADDR_NAME' may be better as '(ADDR_NAME)' to avoid precedence issues
#75: FILE: arch/x86/include/asm/pci.h:102:
+#define pci_unmap_addr_set(PTR, ADDR_NAME, VAL)         \
+	        (((PTR)->ADDR_NAME) = (VAL))

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: arch/x86/include/asm/pci.h:103:
+^I        (((PTR)->ADDR_NAME) = (VAL))$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'LEN_NAME' may be better as '(LEN_NAME)' to avoid precedence issues
#77: FILE: arch/x86/include/asm/pci.h:104:
+#define pci_unmap_len(PTR, LEN_NAME)                    \
+	        ((PTR)->LEN_NAME)

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: arch/x86/include/asm/pci.h:105:
+^I        ((PTR)->LEN_NAME)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'LEN_NAME' may be better as '(LEN_NAME)' to avoid precedence issues
#79: FILE: arch/x86/include/asm/pci.h:106:
+#define pci_unmap_len_set(PTR, LEN_NAME, VAL)           \
+	        (((PTR)->LEN_NAME) = (VAL))

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: arch/x86/include/asm/pci.h:107:
+^I        (((PTR)->LEN_NAME) = (VAL))$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#87: FILE: arch/x86/include/asm/pci.h:111:
+#define DECLARE_PCI_UNMAP_ADDR(ADDR_NAME)       dma_addr_t ADDR_NAME[0];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#88: FILE: arch/x86/include/asm/pci.h:112:
+#define DECLARE_PCI_UNMAP_LEN(LEN_NAME) unsigned LEN_NAME[0];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#88: FILE: arch/x86/include/asm/pci.h:112:
+#define DECLARE_PCI_UNMAP_LEN(LEN_NAME) unsigned LEN_NAME[0];

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ADDR_NAME' may be better as '(ADDR_NAME)' to avoid precedence issues
#89: FILE: arch/x86/include/asm/pci.h:113:
+#define pci_unmap_addr(PTR, ADDR_NAME)  sizeof((PTR)->ADDR_NAME)

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: arch/x86/include/asm/pci.h:115:
+^I        do { break; } while (pci_unmap_addr(PTR, ADDR_NAME))$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'LEN_NAME' may be better as '(LEN_NAME)' to avoid precedence issues
#92: FILE: arch/x86/include/asm/pci.h:116:
+#define pci_unmap_len(PTR, LEN_NAME)            sizeof((PTR)->LEN_NAME)

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: arch/x86/include/asm/pci.h:118:
+^I        do { break; } while (pci_unmap_len(PTR, LEN_NAME))$

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#106: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144668.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 8 warnings, 6 checks, 72 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144668.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
