WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#74: FILE: kernel/sysctl.c:2058:
+static bool isanyof(char c, const char *v, unsigned len)

WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#92: FILE: kernel/sysctl.c:2076:
+ * proc_get_ulong - reads an ASCII formated integer from a user buffer
                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#109: FILE: kernel/sysctl.c:2093:
+			  const char *perm_tr, unsigned perm_tr_len, char *tr)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#118: FILE: kernel/sysctl.c:2102:
+	if (len > TMPBUFLEN-1)
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#119: FILE: kernel/sysctl.c:2103:
+		len = TMPBUFLEN-1;
 		               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#126: FILE: kernel/sysctl.c:2110:
+	if (*p == '-' && *size > 1) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#129: FILE: kernel/sysctl.c:2113:
+	} else

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#134: FILE: kernel/sysctl.c:2118:
+	*val = simple_strtoul(p, &p, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#140: FILE: kernel/sysctl.c:2124:
+	 * (e.g. 123...1). So lets not allow such large numbers. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < *size'
#147: FILE: kernel/sysctl.c:2131:
+	if (tr && (len < *size))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#157: FILE: kernel/sysctl.c:2141:
+ * proc_put_ulong - coverts an integer to a decimal ASCII formated string
                                                           ^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#187: FILE: kernel/sysctl.c:2171:
+}
+#undef TMPBUFLEN

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#237: FILE: kernel/sysctl.c:2213:
+	char __user *buffer = (char __user *) _buffer;

CHECK:SPACING: No space is necessary after a cast
#395: FILE: kernel/sysctl.c:2398:
+	char __user *buffer = (char __user *) _buffer;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000006707.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 8 checks, 489 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000006707.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
