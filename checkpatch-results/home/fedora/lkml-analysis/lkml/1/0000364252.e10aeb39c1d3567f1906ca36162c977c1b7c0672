CHECK:BIT_MACRO: Prefer using the BIT macro
#55: FILE: mm/slub.c:104:
+#define LOCKED (1 << PG_locked)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: mm/slub.c:793:
+static void add_full(struct kmem_cache *s, struct page *page,
+		unsigned long state)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: mm/slub.c:1023:
+static inline void add_full(struct kmem_cache *s, struct page *page,
+					unsigned long state) {}

WARNING:MEMORY_BARRIER: memory barrier without comment
#191: FILE: mm/slub.c:1181:
+	smp_wmb();

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#204: FILE: mm/slub.c:1194:
+	if (cmpxchg(&page->flags, state, state | LOCKED) != state) {
+		 preempt_enable();

WARNING:TABSTOP: Statements should start on a tabstop
#206: FILE: mm/slub.c:1196:
+		 return 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: mm/slub.c:1275:
+static inline unsigned long lock_and_freeze_slab(struct kmem_cache_node *n,
+		struct kmem_cache_cpu *c, struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: mm/slub.c:1293:
+static unsigned long get_partial_node(struct kmem_cache_node *n,
+		struct kmem_cache_cpu *c)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: mm/slub.c:1323:
+static unsigned long get_any_partial(struct kmem_cache *s,
+		struct kmem_cache_cpu *c, gfp_t flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: mm/slub.c:1373:
+static noinline unsigned long get_partial(struct kmem_cache *s,
+	struct kmem_cache_cpu *c, gfp_t flags, int node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: mm/slub.c:1394:
+static void unfreeze_slab(struct kmem_cache *s, struct page *page,
+				int tail, unsigned long state)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: mm/slub.c:1429:
+static void deactivate_slab(struct kmem_cache *s, struct kmem_cache_cpu *c,
+				unsigned long state)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: mm/slub.c:1515:
+static noinline unsigned long get_new_slab(struct kmem_cache *s,
+	struct kmem_cache_cpu **pc, gfp_t gfpflags, int node)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#656: FILE: mm/slub.c:2814:
+			if (!page->inuse && (state = slab_trylock(page))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364252.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 3 warnings, 10 checks, 613 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364252.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
