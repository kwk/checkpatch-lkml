CHECK:CAMELCASE: Avoid CamelCase: <CommandList_struct>
#57: FILE: drivers/block/cciss.c:2385:
+static int sendcmd_core(ctlr_info_t *h, CommandList_struct *c)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPLIT_STRING: quoted string split across lines
#104: FILE: drivers/block/cciss.c:2407:
 		printk(KERN_WARNING "cciss cciss%d: SendCmd FIFO full,"
+		       " waiting!\n", h->ctlr);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#123: FILE: drivers/block/cciss.c:2420:
 			       "cciss cciss%d: SendCmd Timeout out, "
+			       "No command list address returned!\n", h->ctlr);

CHECK:CAMELCASE: Avoid CamelCase: <Request>
#193: FILE: drivers/block/cciss.c:2427:
+			if (add_sendcmd_reject(c->Request.CDB[0],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: drivers/block/cciss.c:2428:
+			if (add_sendcmd_reject(c->Request.CDB[0],
+				h->ctlr, complete) != 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#195: FILE: drivers/block/cciss.c:2429:
+				BUG(); /* we are hosed if we get here. */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'underun' may be misspelled - perhaps 'underrun'?
#207: FILE: drivers/block/cciss.c:2441:
+		/* if data overrun or underun on Report command ignore it */
 		                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->Request.CDB[0] == CISS_REPORT_LOG'
#208: FILE: drivers/block/cciss.c:2442:
+		if (((c->Request.CDB[0] == CISS_REPORT_LOG) ||
+		     (c->Request.CDB[0] == CISS_REPORT_PHYS) ||
+		     (c->Request.CDB[0] == CISS_INQUIRY)) &&
+			((c->err_info->CommandStatus == CMD_DATA_OVERRUN) ||
+			 (c->err_info->CommandStatus == CMD_DATA_UNDERRUN))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->Request.CDB[0] == CISS_REPORT_PHYS'
#208: FILE: drivers/block/cciss.c:2442:
+		if (((c->Request.CDB[0] == CISS_REPORT_LOG) ||
+		     (c->Request.CDB[0] == CISS_REPORT_PHYS) ||
+		     (c->Request.CDB[0] == CISS_INQUIRY)) &&
+			((c->err_info->CommandStatus == CMD_DATA_OVERRUN) ||
+			 (c->err_info->CommandStatus == CMD_DATA_UNDERRUN))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->Request.CDB[0] == CISS_INQUIRY'
#208: FILE: drivers/block/cciss.c:2442:
+		if (((c->Request.CDB[0] == CISS_REPORT_LOG) ||
+		     (c->Request.CDB[0] == CISS_REPORT_PHYS) ||
+		     (c->Request.CDB[0] == CISS_INQUIRY)) &&
+			((c->err_info->CommandStatus == CMD_DATA_OVERRUN) ||
+			 (c->err_info->CommandStatus == CMD_DATA_UNDERRUN))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->err_info->CommandStatus == CMD_DATA_OVERRUN'
#208: FILE: drivers/block/cciss.c:2442:
+		if (((c->Request.CDB[0] == CISS_REPORT_LOG) ||
+		     (c->Request.CDB[0] == CISS_REPORT_PHYS) ||
+		     (c->Request.CDB[0] == CISS_INQUIRY)) &&
+			((c->err_info->CommandStatus == CMD_DATA_OVERRUN) ||
+			 (c->err_info->CommandStatus == CMD_DATA_UNDERRUN))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->err_info->CommandStatus == CMD_DATA_UNDERRUN'
#208: FILE: drivers/block/cciss.c:2442:
+		if (((c->Request.CDB[0] == CISS_REPORT_LOG) ||
+		     (c->Request.CDB[0] == CISS_REPORT_PHYS) ||
+		     (c->Request.CDB[0] == CISS_INQUIRY)) &&
+			((c->err_info->CommandStatus == CMD_DATA_OVERRUN) ||
+			 (c->err_info->CommandStatus == CMD_DATA_UNDERRUN))) {

CHECK:CAMELCASE: Avoid CamelCase: <CommandStatus>
#211: FILE: drivers/block/cciss.c:2445:
+			((c->err_info->CommandStatus == CMD_DATA_OVERRUN) ||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#223: FILE: drivers/block/cciss.c:2453:
+			printk(KERN_WARNING "cciss%d: unsolicited abort %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: drivers/block/cciss.c:2454:
+			printk(KERN_WARNING "cciss%d: unsolicited abort %p\n",
+				h->ctlr, c);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#226: FILE: drivers/block/cciss.c:2456:
+				printk(KERN_WARNING "cciss%d: retrying %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: drivers/block/cciss.c:2457:
+				printk(KERN_WARNING "cciss%d: retrying %p\n",
+				   h->ctlr, c);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#237: FILE: drivers/block/cciss.c:2463:
+			printk(KERN_WARNING "cciss%d: retried %p too many "

WARNING:SPLIT_STRING: quoted string split across lines
#238: FILE: drivers/block/cciss.c:2464:
+			printk(KERN_WARNING "cciss%d: retried %p too many "
+				"times\n", h->ctlr, c);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#244: FILE: drivers/block/cciss.c:2470:
+			printk(KERN_WARNING "cciss%d: command could not be "

WARNING:SPLIT_STRING: quoted string split across lines
#245: FILE: drivers/block/cciss.c:2471:
+			printk(KERN_WARNING "cciss%d: command could not be "
+				"aborted.\n", h->ctlr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#251: FILE: drivers/block/cciss.c:2476:
+		printk(KERN_WARNING "cciss%d: sendcmd error\n", h->ctlr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sendcmd', this function's name, in a string
#251: FILE: drivers/block/cciss.c:2476:
+		printk(KERN_WARNING "cciss%d: sendcmd error\n", h->ctlr);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#252: FILE: drivers/block/cciss.c:2477:
+		printk(KERN_WARNING "cmd = 0x%02x, CommandStatus = 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: drivers/block/cciss.c:2478:
+		printk(KERN_WARNING "cmd = 0x%02x, CommandStatus = 0x%02x\n",
+			c->Request.CDB[0], c->err_info->CommandStatus);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#255: FILE: drivers/block/cciss.c:2480:
+			printk(KERN_WARNING "Target status = 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: drivers/block/cciss.c:2481:
+			printk(KERN_WARNING "Target status = 0x%02x\n",
+			c->err_info->ScsiStatus);

CHECK:CAMELCASE: Avoid CamelCase: <ScsiStatus>
#256: FILE: drivers/block/cciss.c:2481:
+			c->err_info->ScsiStatus);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#258: FILE: drivers/block/cciss.c:2483:
+				printk(KERN_WARNING "Sense key = 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: drivers/block/cciss.c:2484:
+				printk(KERN_WARNING "Sense key = 0x%02x\n",
+					0xf & c->err_info->SenseInfo[2]);

CHECK:CAMELCASE: Avoid CamelCase: <SenseInfo>
#259: FILE: drivers/block/cciss.c:2484:
+					0xf & c->err_info->SenseInfo[2]);

CHECK:SPACING: No space is necessary after a cast
#272: FILE: drivers/block/cciss.c:2496:
+	pci_unmap_single(h->pdev, (dma_addr_t) buff_dma_handle.val,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: drivers/block/cciss.c:2511:
+static int sendcmd(__u8 cmd, int ctlr, void *buff, size_t size,
+	unsigned int use_unit_num,/* 0: address the controller,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#291: FILE: drivers/block/cciss.c:2512:
+	unsigned int use_unit_num,/* 0: address the controller,
+				     1: address logical volume log_unit,

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#292: FILE: drivers/block/cciss.c:2513:
+				     2: periph device address is scsi3addr */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#301: FILE: drivers/block/cciss.c:2522:
+		printk(KERN_WARNING "cciss: unable to get memory");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119307.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 18 checks, 268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119307.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
