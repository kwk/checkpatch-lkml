WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#76: 
 latency: 0 us, #419428/4361791, CPU#1 | (M:desktop VP:0, KP:0, SP:0 HP:0 #P:4)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#186: FILE: lib/tracing/tracer.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'postions' may be misspelled - perhaps 'positions'?
#301: FILE: lib/tracing/tracer.c:116:
+/* These must match the bit postions above */
                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#302: FILE: lib/tracing/tracer.c:117:
+static const char *trace_options[] = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#308: FILE: lib/tracing/tracer.c:123:
+static unsigned trace_flags;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#420: FILE: lib/tracing/tracer.c:235:
+		for (i = 0; i < NR_CPUS; i++)

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#466: FILE: lib/tracing/tracer.c:281:
+		seq_printf(m, "0");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#477: FILE: lib/tracing/tracer.c:292:
+	seq_puts(m, "                 _------=> CPU#            \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#478: FILE: lib/tracing/tracer.c:293:
+	seq_puts(m, "                / _-----=> irqs-off        \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#479: FILE: lib/tracing/tracer.c:294:
+	seq_puts(m, "               | / _----=> need-resched    \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#480: FILE: lib/tracing/tracer.c:295:
+	seq_puts(m, "               || / _---=> hardirq/softirq \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#481: FILE: lib/tracing/tracer.c:296:
+	seq_puts(m, "               ||| / _--=> preempt-depth   \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#482: FILE: lib/tracing/tracer.c:297:
+	seq_puts(m, "               |||| /                      \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#483: FILE: lib/tracing/tracer.c:298:
+	seq_puts(m, "               |||||     delay             \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#484: FILE: lib/tracing/tracer.c:299:
+	seq_puts(m, "   cmd     pid ||||| time  |   caller      \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#485: FILE: lib/tracing/tracer.c:300:
+	seq_puts(m, "      \\   /    |||||   \\   |   /           \n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#502: FILE: lib/tracing/tracer.c:317:
+			if (underrun) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#505: FILE: lib/tracing/tracer.c:320:
+			} else

WARNING:SPLIT_STRING: quoted string split across lines
#513: FILE: lib/tracing/tracer.c:328:
+	seq_puts(m, "-----------------------------------"
+		 "---------------------------------\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#515: FILE: lib/tracing/tracer.c:330:
+	seq_printf(m, " latency: %lu us, #%lu/%lu, CPU#%d |"
+		   " (M:%s VP:%d, KP:%d, SP:%d HP:%d",

WARNING:SPLIT_STRING: quoted string split across lines
#538: FILE: lib/tracing/tracer.c:353:
+	seq_printf(m, "    | task: %.16s-%d "
+		   "(uid:%d nice:%ld policy:%ld rt_prio:%ld)\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: lib/tracing/tracer.c:369:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#568: FILE: lib/tracing/tracer.c:383:
+	if (hardirq && softirq)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#570: FILE: lib/tracing/tracer.c:385:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#571: FILE: lib/tracing/tracer.c:386:
+		if (hardirq)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#573: FILE: lib/tracing/tracer.c:388:
+		else {

WARNING:SPLIT_STRING: quoted string split across lines
#620: FILE: lib/tracing/tracer.c:435:
+		seq_printf(m, "%16s %5d %d %d %08x %08x [%08lx]"
+			   " %ld.%03ldms (+%ld.%03ldms): ",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#625: FILE: lib/tracing/tracer.c:440:
+			   abs_usecs/1000,
 			            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#626: FILE: lib/tracing/tracer.c:441:
+			   abs_usecs % 1000, rel_usecs/1000, rel_usecs % 1000);
 			                              ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#661: FILE: lib/tracing/tracer.c:476:
+			seq_printf(m, " <-- ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#667: FILE: lib/tracing/tracer.c:482:
+	seq_printf(m, "\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iter->ent"
#690: FILE: lib/tracing/tracer.c:505:
+	if (iter->ent == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#691: FILE: lib/tracing/tracer.c:506:
+		if (iter->iter_flags & TRACE_FILE_LAT_FMT) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#698: FILE: lib/tracing/tracer.c:513:
+		} else

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#699: FILE: lib/tracing/tracer.c:514:
+			seq_printf(m, "tracer:\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#710: FILE: lib/tracing/tracer.c:525:
+static struct seq_operations tracer_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#735: FILE: lib/tracing/tracer.c:550:
+		struct seq_file *m = file->private_data;
+		m->private = iter;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#752: FILE: lib/tracing/tracer.c:567:
+int tracing_open_generic(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#793: FILE: lib/tracing/tracer.c:608:
+struct file_operations tracing_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#800: FILE: lib/tracing/tracer.c:615:
+struct file_operations tracing_lt_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#807: FILE: lib/tracing/tracer.c:622:
+static ssize_t tracing_iter_ctrl_read(struct file *filp, char __user *ubuf,
                                                    ^^^^

WARNING:TYPO_SPELLING: 'calulate' may be misspelled - perhaps 'calculate'?
#815: FILE: lib/tracing/tracer.c:630:
+	/* calulate max size */
 	   ^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#844: FILE: lib/tracing/tracer.c:659:
+static ssize_t tracing_iter_ctrl_write(struct file *filp,
                                                     ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#883: FILE: lib/tracing/tracer.c:698:
+static struct file_operations tracing_iter_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#889: FILE: lib/tracing/tracer.c:704:
+static ssize_t tracing_ctrl_read(struct file *filp, char __user *ubuf,
                                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#901: FILE: lib/tracing/tracer.c:716:
+static ssize_t tracing_ctrl_write(struct file *filp,
                                                ^^^^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#917: FILE: lib/tracing/tracer.c:732:
+	val = simple_strtoul(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONST_STRUCT: struct file_operations should normally be const
#926: FILE: lib/tracing/tracer.c:741:
+struct file_operations tracing_ctrl_fops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#977: FILE: lib/tracing/tracer.h:1:
+#ifndef _LINUX_MCOUNT_TRACER_H

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#980: FILE: lib/tracing/tracer.h:4:
+#include <asm/atomic.h>

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1047: FILE: lib/tracing/tracer.h:71:
+int tracing_open_generic(struct inode *inode, struct file *filp);
                                                            ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1055: FILE: lib/tracing/tracer.h:79:
+extern struct file_operations tracing_fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1056: FILE: lib/tracing/tracer.h:80:
+extern struct file_operations tracing_lt_fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1057: FILE: lib/tracing/tracer.h:81:
+extern struct file_operations tracing_ctrl_fops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1067: FILE: lib/tracing/tracer.h:91:
+	const unsigned long nr_pages = DIV_ROUND_UP(size, PAGE_SIZE);
+	return ilog2(roundup_pow_of_two(nr_pages));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1088: FILE: lib/tracing/trace_function.c:1:
+/*

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1114: FILE: lib/tracing/trace_function.c:27:
+	trace_nr_entries = simple_strtoul(str, &str, 0);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1117: FILE: lib/tracing/trace_function.c:30:
+__setup("trace_fn_entries=", set_nr_entries);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1153: FILE: lib/tracing/trace_function.c:66:
+static struct mcount_ops trace_ops __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1203: FILE: lib/tracing/trace_function.c:116:
+
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#1239: FILE: lib/tracing/trace_function.c:152:
+		if (array == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1240: FILE: lib/tracing/trace_function.c:153:
+			printk(KERN_ERR "function tracer: failed to allocate"

WARNING:SPLIT_STRING: quoted string split across lines
#1241: FILE: lib/tracing/trace_function.c:154:
+			printk(KERN_ERR "function tracer: failed to allocate"
+			       " %ld bytes for trace buffer!\n", size);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333827.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 47 warnings, 15 checks, 1102 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333827.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
