WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#15: 
Subject: [PATCH 5/6] early_res: seperate common memmap func from e820.c to
                                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1257: FILE: kernel/fw_memmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:MISPLACED_INIT: __initdata should be placed after e820
#1290: FILE: kernel/fw_memmap.c:34:
+static struct e820map __initdata e820;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after e820_saved
#1291: FILE: kernel/fw_memmap.c:35:
+static struct e820map __initdata e820_saved;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1299: FILE: kernel/fw_memmap.c:43:
+int __init_refok e820_any_mapped(u64 start, u64 end, unsigned type)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1321: FILE: kernel/fw_memmap.c:65:
+int __init e820_all_mapped(u64 start, u64 end, unsigned type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1353: FILE: kernel/fw_memmap.c:97:
+static void __init __e820_add_region(struct e820map *e820x, u64 start, u64 size,
+					 int type)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1358: FILE: kernel/fw_memmap.c:102:
+		printk(KERN_ERR "Ooops! Too many entries in the memory map!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1378: FILE: kernel/fw_memmap.c:122:
+		printk(KERN_CONT "(usable)");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1378: FILE: kernel/fw_memmap.c:122:
+		printk(KERN_CONT "(usable)");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1381: FILE: kernel/fw_memmap.c:125:
+		printk(KERN_CONT "(reserved)");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1381: FILE: kernel/fw_memmap.c:125:
+		printk(KERN_CONT "(reserved)");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1384: FILE: kernel/fw_memmap.c:128:
+		printk(KERN_CONT "(ACPI data)");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1384: FILE: kernel/fw_memmap.c:128:
+		printk(KERN_CONT "(ACPI data)");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1387: FILE: kernel/fw_memmap.c:131:
+		printk(KERN_CONT "(ACPI NVS)");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1387: FILE: kernel/fw_memmap.c:131:
+		printk(KERN_CONT "(ACPI NVS)");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1390: FILE: kernel/fw_memmap.c:134:
+		printk(KERN_CONT "(unusable)");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1390: FILE: kernel/fw_memmap.c:134:
+		printk(KERN_CONT "(unusable)");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1393: FILE: kernel/fw_memmap.c:137:
+		printk(KERN_CONT "type %u", type);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1393: FILE: kernel/fw_memmap.c:137:
+		printk(KERN_CONT "type %u", type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1403: FILE: kernel/fw_memmap.c:147:
+		printk(KERN_INFO " %s: %016Lx - %016Lx ", who,

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1403: FILE: kernel/fw_memmap.c:147:
+		printk(KERN_INFO " %s: %016Lx - %016Lx ", who,

CHECK:SPACING: No space is necessary after a cast
#1404: FILE: kernel/fw_memmap.c:148:
+		       (unsigned long long) e820.map[i].addr,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1408: FILE: kernel/fw_memmap.c:152:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1408: FILE: kernel/fw_memmap.c:152:
+		printk(KERN_CONT "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1475: FILE: kernel/fw_memmap.c:219:
+int __init __sanitize_e820_map(struct e820entry *biosmap, int max_nr_map,
+			     u32 *pnr_map)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1481: FILE: kernel/fw_memmap.c:225:
+	static struct change_member change_point_list[2*E820_X_MAX] __initdata;
 	                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1482: FILE: kernel/fw_memmap.c:226:
+	static struct change_member *change_point[2*E820_X_MAX] __initdata;
 	                                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1499: FILE: kernel/fw_memmap.c:243:
+	BUG_ON(old_nr > max_nr_map);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1511: FILE: kernel/fw_memmap.c:255:
+	/* record all known change-points (starting and ending addresses),
+	   omitting those that are for empty memory regions */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1511: FILE: kernel/fw_memmap.c:255:
+	   omitting those that are for empty memory regions */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1548: FILE: kernel/fw_memmap.c:292:
+				change_point[i] = change_point[i-1];
 				                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1549: FILE: kernel/fw_memmap.c:293:
+				change_point[i-1] = change_tmp;
 				              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1581: FILE: kernel/fw_memmap.c:325:
+						overlap_list[overlap_entries-1];
 						                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1666: FILE: kernel/fw_memmap.c:410:
+static u64 __init __e820_update_range(struct e820map *e820x, u64 start,
+					u64 size, unsigned old_type,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1666: FILE: kernel/fw_memmap.c:410:
+					u64 size, unsigned old_type,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1667: FILE: kernel/fw_memmap.c:411:
+					unsigned new_type)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1673: FILE: kernel/fw_memmap.c:417:
+	BUG_ON(old_type == new_type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1679: FILE: kernel/fw_memmap.c:423:
+	printk(KERN_DEBUG "e820 update range: %016Lx - %016Lx ",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1679: FILE: kernel/fw_memmap.c:423:
+	printk(KERN_DEBUG "e820 update range: %016Lx - %016Lx ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1680: FILE: kernel/fw_memmap.c:424:
+	printk(KERN_DEBUG "e820 update range: %016Lx - %016Lx ",
+		       (unsigned long long) start,

CHECK:SPACING: No space is necessary after a cast
#1680: FILE: kernel/fw_memmap.c:424:
+		       (unsigned long long) start,

CHECK:SPACING: No space is necessary after a cast
#1681: FILE: kernel/fw_memmap.c:425:
+		       (unsigned long long) end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1683: FILE: kernel/fw_memmap.c:427:
+	printk(KERN_CONT " ==> ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1683: FILE: kernel/fw_memmap.c:427:
+	printk(KERN_CONT " ==> ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1685: FILE: kernel/fw_memmap.c:429:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1685: FILE: kernel/fw_memmap.c:429:
+	printk(KERN_CONT "\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1735: FILE: kernel/fw_memmap.c:479:
+u64 __init e820_update_range(u64 start, u64 size, unsigned old_type,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1736: FILE: kernel/fw_memmap.c:480:
+			     unsigned new_type)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1742: FILE: kernel/fw_memmap.c:486:
+					  unsigned old_type, unsigned new_type)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1742: FILE: kernel/fw_memmap.c:486:
+					  unsigned old_type, unsigned new_type)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1749: FILE: kernel/fw_memmap.c:493:
+u64 __init e820_remove_range(u64 start, u64 size, unsigned old_type,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1760: FILE: kernel/fw_memmap.c:504:
+	printk(KERN_DEBUG "e820 remove range: %016Lx - %016Lx ",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1760: FILE: kernel/fw_memmap.c:504:
+	printk(KERN_DEBUG "e820 remove range: %016Lx - %016Lx ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1761: FILE: kernel/fw_memmap.c:505:
+	printk(KERN_DEBUG "e820 remove range: %016Lx - %016Lx ",
+		       (unsigned long long) start,

CHECK:SPACING: No space is necessary after a cast
#1761: FILE: kernel/fw_memmap.c:505:
+		       (unsigned long long) start,

CHECK:SPACING: No space is necessary after a cast
#1762: FILE: kernel/fw_memmap.c:506:
+		       (unsigned long long) end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1764: FILE: kernel/fw_memmap.c:508:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1764: FILE: kernel/fw_memmap.c:508:
+	printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1802: FILE: kernel/fw_memmap.c:546:
+	printk(KERN_INFO "modified physical RAM map:\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1821: FILE: kernel/fw_memmap.c:565:
+__init int e820_search_gap(unsigned long *gapstart, unsigned long *gapsize,
+		unsigned long start_addr, unsigned long long end_addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1926: FILE: kernel/fw_memmap.c:670:
+		addr = find_early_area(ei_start, ei_last, start, end,
+					 size, align);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1957: FILE: kernel/fw_memmap.c:701:
+		addr = find_early_area_size(ei_start, ei_last, start,
+					 sizep, align);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1995: FILE: kernel/fw_memmap.c:739:
+	printk(KERN_INFO "update e820 for early_reserve_e820\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'early_reserve_e820', this function's name, in a string
#1995: FILE: kernel/fw_memmap.c:739:
+	printk(KERN_INFO "update e820 for early_reserve_e820\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2004: FILE: kernel/fw_memmap.c:748:
+#  define MAX_ARCH_PFN	(1ULL<<(36-PAGE_SHIFT))
                       	     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2004: FILE: kernel/fw_memmap.c:748:
+#  define MAX_ARCH_PFN	(1ULL<<(36-PAGE_SHIFT))
                       	          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2006: FILE: kernel/fw_memmap.c:750:
+#  define MAX_ARCH_PFN	(1ULL<<(32-PAGE_SHIFT))
                       	     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2006: FILE: kernel/fw_memmap.c:750:
+#  define MAX_ARCH_PFN	(1ULL<<(32-PAGE_SHIFT))
                       	          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2009: FILE: kernel/fw_memmap.c:753:
+# define MAX_ARCH_PFN	(MAXMEM>>PAGE_SHIFT)
                      	       ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2015: FILE: kernel/fw_memmap.c:759:
+static unsigned long __init e820_end_pfn(unsigned long limit_pfn, unsigned type)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2045: FILE: kernel/fw_memmap.c:789:
+	printk(KERN_INFO "last_pfn = %#lx max_arch_pfn = %#lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2046: FILE: kernel/fw_memmap.c:790:
+	printk(KERN_INFO "last_pfn = %#lx max_arch_pfn = %#lx\n",
+			 last_pfn, max_arch_pfn);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2049: FILE: kernel/fw_memmap.c:793:
+}
+unsigned long __init e820_end_of_ram_pfn(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2056: FILE: kernel/fw_memmap.c:800:
+	return e820_end_pfn(1UL<<(32 - PAGE_SHIFT), E820_RAM);
 	                       ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2058: FILE: kernel/fw_memmap.c:802:
+}
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2063: FILE: kernel/fw_memmap.c:807:
+int __init e820_find_active_region(const struct e820entry *ei,
+				  unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2079: FILE: kernel/fw_memmap.c:823:
+	if (ei->type != E820_RAM || *ei_endpfn <= start_pfn ||
+				    *ei_startpfn >= last_pfn)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2156: FILE: kernel/fw_memmap.c:900:
+}
+early_param("mem", parse_memopt);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2186: FILE: kernel/fw_memmap.c:930:
+	if (*p == '@') {
[...]
+	} else if (*p == '#') {
[...]
+	} else if (*p == '$') {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2187: FILE: kernel/fw_memmap.c:931:
+		start_at = memparse(p+1, &p);
 		                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2190: FILE: kernel/fw_memmap.c:934:
+		start_at = memparse(p+1, &p);
 		                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2193: FILE: kernel/fw_memmap.c:937:
+		start_at = memparse(p+1, &p);
 		                     ^

CHECK:BRACES: Unbalanced braces around else statement
#2195: FILE: kernel/fw_memmap.c:939:
+	} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2200: FILE: kernel/fw_memmap.c:944:
+}
+early_param("memmap", parse_memmap_opt);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2212: FILE: kernel/fw_memmap.c:956:
+		printk(KERN_INFO "user-defined physical RAM map:\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2259: FILE: kernel/fw_memmap.c:1003:
+		    res->start < (1ULL<<20)) {
 		                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2268: FILE: kernel/fw_memmap.c:1012:
+		struct e820entry *entry = &e820_saved.map[i];
+		firmware_map_add_early(entry->addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2269: FILE: kernel/fw_memmap.c:1013:
+		firmware_map_add_early(entry->addr,
+			entry->addr + entry->size - 1,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2281: FILE: kernel/fw_memmap.c:1025:
+		return 64*1024;
 		         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2285: FILE: kernel/fw_memmap.c:1029:
+		return 1024*1024;
 		           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2288: FILE: kernel/fw_memmap.c:1032:
+	return 64*1024*1024;
 	         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2288: FILE: kernel/fw_memmap.c:1032:
+	return 64*1024*1024;
 	              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2321: FILE: kernel/fw_memmap.c:1065:
+		printk(KERN_DEBUG "reserve RAM buffer: %016llx - %016llx ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2322: FILE: kernel/fw_memmap.c:1066:
+		printk(KERN_DEBUG "reserve RAM buffer: %016llx - %016llx ",
+			       start, end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2470: FILE: arch/x86/include/asm/e820.h:17:
+extern void early_memtest(unsigned long start, unsigned long end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2536: FILE: arch/x86/include/asm/e820.h:29:
+extern void setup_memory_map(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2564: FILE: include/linux/fw_memmap.h:1:
+#ifndef _LINUX_FW_MEMMAP_H

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2617: FILE: include/linux/fw_memmap.h:54:
+} __attribute__((packed));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2628: FILE: include/linux/fw_memmap.h:65:
+extern int e820_any_mapped(u64 start, u64 end, unsigned type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2628: FILE: include/linux/fw_memmap.h:65:
+extern int e820_any_mapped(u64 start, u64 end, unsigned type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2629: FILE: include/linux/fw_memmap.h:66:
+extern int e820_all_mapped(u64 start, u64 end, unsigned type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2629: FILE: include/linux/fw_memmap.h:66:
+extern int e820_all_mapped(u64 start, u64 end, unsigned type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2630: FILE: include/linux/fw_memmap.h:67:
+extern void e820_add_region(u64 start, u64 size, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2631: FILE: include/linux/fw_memmap.h:68:
+extern void e820_print_map(char *who);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2635: FILE: include/linux/fw_memmap.h:72:
+extern u64 e820_update_range(u64 start, u64 size, unsigned old_type,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2635: FILE: include/linux/fw_memmap.h:72:
+extern u64 e820_update_range(u64 start, u64 size, unsigned old_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2636: FILE: include/linux/fw_memmap.h:73:
+extern u64 e820_update_range(u64 start, u64 size, unsigned old_type,
+			       unsigned new_type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2636: FILE: include/linux/fw_memmap.h:73:
+			       unsigned new_type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2637: FILE: include/linux/fw_memmap.h:74:
+extern u64 e820_remove_range(u64 start, u64 size, unsigned old_type,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2637: FILE: include/linux/fw_memmap.h:74:
+extern u64 e820_remove_range(u64 start, u64 size, unsigned old_type,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2639: FILE: include/linux/fw_memmap.h:76:
+extern void update_e820(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2641: FILE: include/linux/fw_memmap.h:78:
+extern int e820_search_gap(unsigned long *gapstart, unsigned long *gapsize,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2642: FILE: include/linux/fw_memmap.h:79:
+extern int e820_search_gap(unsigned long *gapstart, unsigned long *gapsize,
+			unsigned long start_addr, unsigned long long end_addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2646: FILE: include/linux/fw_memmap.h:83:
+extern void e820_mark_nosave_regions(unsigned long limit_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2655: FILE: include/linux/fw_memmap.h:92:
+extern u64 find_e820_area(u64 start, u64 end, u64 size, u64 align);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2656: FILE: include/linux/fw_memmap.h:93:
+extern u64 find_e820_area_size(u64 start, u64 *sizep, u64 align);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2657: FILE: include/linux/fw_memmap.h:94:
+extern u64 early_reserve_e820(u64 startt, u64 sizet, u64 align);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2660: FILE: include/linux/fw_memmap.h:97:
+extern unsigned long e820_end_of_ram_pfn(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2661: FILE: include/linux/fw_memmap.h:98:
+extern unsigned long e820_end_of_low_ram_pfn(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2662: FILE: include/linux/fw_memmap.h:99:
+extern int e820_find_active_region(const struct e820entry *ei,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2663: FILE: include/linux/fw_memmap.h:100:
+extern int e820_find_active_region(const struct e820entry *ei,
+				  unsigned long start_pfn,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2667: FILE: include/linux/fw_memmap.h:104:
+extern void e820_register_active_regions(int nid, unsigned long start_pfn,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2669: FILE: include/linux/fw_memmap.h:106:
+extern u64 e820_hole_size(u64 start, u64 end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2670: FILE: include/linux/fw_memmap.h:107:
+extern void finish_e820_parsing(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2671: FILE: include/linux/fw_memmap.h:108:
+extern void e820_reserve_resources(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2672: FILE: include/linux/fw_memmap.h:109:
+extern void e820_reserve_resources_late(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000001847.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 59 warnings, 68 checks, 2621 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000001847.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
