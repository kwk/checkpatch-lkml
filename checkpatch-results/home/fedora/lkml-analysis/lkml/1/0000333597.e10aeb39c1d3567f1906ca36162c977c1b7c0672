WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#122: FILE: fs/ext4/balloc.c:790:
+ * @metadata: ^I^IAre these metadata blocks$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#133: FILE: fs/ext4/balloc.c:800:
+	 * inode.c/extents.c knows better, but for safety ... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: fs/ext4/balloc.c:802:
+	if (S_ISDIR(inode->i_mode) || S_ISLNK(inode->i_mode) ||
+			ext4_should_journal_data(inode))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: fs/ext4/balloc.c:809:
+		ext4_free_blocks_sb(handle, sb, block, count,
+						&dquot_freed_blocks);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: fs/ext4/balloc.c:812:
+		ext4_mb_free_blocks(handle, inode, block, count,
+						metadata, &dquot_freed_blocks);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: fs/ext4/balloc.c:1605:
+ext4_fsblk_t ext4_new_blocks_old(handle_t *handle, struct inode *inode,
 			ext4_fsblk_t goal, unsigned long *count, int *errp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#184: FILE: fs/ext4/balloc.c:1871:
+		unsigned long count = 1;
+		ret = ext4_new_blocks_old(handle, inode, goal, &count, errp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: fs/ext4/balloc.c:1884:
+ext4_fsblk_t ext4_new_blocks(handle_t *handle, struct inode *inode,
+		ext4_fsblk_t goal, unsigned long *count, int *errp)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#218: FILE: fs/ext4/balloc.c:1903:
 
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#323: FILE: fs/ext4/extents.c:2460:
+		 * but otherwise we'd need to call it every free() */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: fs/ext4/inode.c:753:
+		ext4_free_blocks(handle, inode,
+					le32_to_cpu(where[i-1].key), 1, 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#379: FILE: fs/ext4/inode.c:753:
+					le32_to_cpu(where[i-1].key), 1, 0);
 					                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#405: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#410: FILE: fs/ext4/mballoc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#424: FILE: fs/ext4/mballoc.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#425: FILE: fs/ext4/mballoc.c:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#428: FILE: fs/ext4/mballoc.c:19:
+
+

WARNING:TYPO_SPELLING: 'lenght' may be misspelled - perhaps 'length'?
#491: FILE: fs/ext4/mballoc.c:82:
+ * pa_len    -> lenght for this prealloc space
                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'that'
#497: FILE: fs/ext4/mballoc.c:88:
+ * space we will consume the particular prealloc space. This make sure that
+ * that the we have contiguous physical blocks representing the file blocks

WARNING:TYPO_SPELLING: 'withing' may be misspelled - perhaps 'within'?
#513: FILE: fs/ext4/mballoc.c:104:
+ * enough free space (pa_free) withing the prealloc space.
                                ^^^^^^^

WARNING:TYPO_SPELLING: 'contigous' may be misspelled - perhaps 'contiguous'?
#564: FILE: fs/ext4/mballoc.c:155:
+ * stripe size (sbi->s_stripe), we try to search for contigous block in
                                                      ^^^^^^^^^

WARNING:TYPO_SPELLING: 'controll' may be misspelled - perhaps 'control'?
#567: FILE: fs/ext4/mballoc.c:158:
+ * tunable min_to_scan and max_to_scan controll the behaviour here.
                                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'assiged' may be misspelled - perhaps 'assigned'?
#590: FILE: fs/ext4/mballoc.c:181:
+ *    assiged to specific inode and can be used for this inode only.
       ^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#647: FILE: fs/ext4/mballoc.c:238:
+ *      we need to make sure that either on-disk bitmap or PA has uptodate data
                                                                   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#688: FILE: fs/ext4/mballoc.c:279:
+ /*
+ * Logic in few words:

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#773: FILE: fs/ext4/mballoc.c:364:
+#define mb_debug(fmt, a...)	printk(fmt, ##a)

WARNING:TYPO_SPELLING: 'parition' may be misspelled - perhaps 'partition'?
#817: FILE: fs/ext4/mballoc.c:408:
+ * We can tune the same via /proc/fs/ext4/<parition>/stream_req
                                            ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#847: FILE: fs/ext4/mballoc.c:438:
+^Iunsigned long ^Ibb_tid;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#865: FILE: fs/ext4/mballoc.c:456:
+
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#873: FILE: fs/ext4/mballoc.c:464:
+	spinlock_t		pa_lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#875: FILE: fs/ext4/mballoc.c:466:
+	unsigned		pa_deleted;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#881: FILE: fs/ext4/mballoc.c:472:
+						 * strictly, for grp prealloc */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#886: FILE: fs/ext4/mballoc.c:477:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#933: FILE: fs/ext4/mballoc.c:524:
+				 * N > 0, the field stores N, otherwise 0 */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#949: FILE: fs/ext4/mballoc.c:540:
+	unsigned pid;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#950: FILE: fs/ext4/mballoc.c:541:
+	unsigned ino;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#971: FILE: fs/ext4/mballoc.c:562:
+};
+#define EXT4_MB_BITMAP(e4b)	((e4b)->bd_bitmap)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#980: FILE: fs/ext4/mballoc.c:571:
+#define in_range(b, first, len)	((b) >= (first) && (b) <= (first) + (len) - 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#980: FILE: fs/ext4/mballoc.c:571:
+#define in_range(b, first, len)	((b) >= (first) && (b) <= (first) + (len) - 1)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#983: FILE: fs/ext4/mballoc.c:574:
+struct buffer_head *read_block_bitmap(struct super_block *, ext4_group_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_group_t' should also have an identifier name
#983: FILE: fs/ext4/mballoc.c:574:
+struct buffer_head *read_block_bitmap(struct super_block *, ext4_group_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#984: FILE: fs/ext4/mballoc.c:575:
+ext4_fsblk_t ext4_new_blocks_old(handle_t *handle, struct inode *inode,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#985: FILE: fs/ext4/mballoc.c:576:
+ext4_fsblk_t ext4_new_blocks_old(handle_t *handle, struct inode *inode,
+			ext4_fsblk_t goal, unsigned long *count, int *errp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#988: FILE: fs/ext4/mballoc.c:579:
+static void ext4_mb_generate_from_pa(struct super_block *sb, void *bitmap,
+					ext4_group_t group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#992: FILE: fs/ext4/mballoc.c:583:
+static void ext4_mb_return_to_preallocation(struct inode *inode,
+					struct ext4_buddy *e4b, sector_t block,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: fs/ext4/mballoc.c:586:
+static void ext4_mb_put_pa(struct ext4_allocation_context *,
+			struct super_block *, struct ext4_prealloc_space *pa);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#999: FILE: fs/ext4/mballoc.c:590:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around grinfo->bb_state
#1004: FILE: fs/ext4/mballoc.c:595:
+	bit_spin_lock(EXT4_GROUP_INFO_LOCKED_BIT, &(grinfo->bb_state));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1008: FILE: fs/ext4/mballoc.c:599:
+static inline void ext4_unlock_group(struct super_block *sb,
+					ext4_group_t group)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around grinfo->bb_state
#1012: FILE: fs/ext4/mballoc.c:603:
+	bit_spin_unlock(EXT4_GROUP_INFO_LOCKED_BIT, &(grinfo->bb_state));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1016: FILE: fs/ext4/mballoc.c:607:
+static inline int ext4_is_group_locked(struct super_block *sb,
+					ext4_group_t group)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around grinfo->bb_state
#1021: FILE: fs/ext4/mballoc.c:612:
+						&(grinfo->bb_state));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1025: FILE: fs/ext4/mballoc.c:616:
+static ext4_fsblk_t ext4_grp_offs_to_block(struct super_block *sb,
+					struct ext4_free_extent *fex)

CHECK:SPACING: No space is necessary after a cast
#1029: FILE: fs/ext4/mballoc.c:620:
+	block = (ext4_fsblk_t) fex->fe_group * EXT4_BLOCKS_PER_GROUP(sb)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bit' may be better as '(bit)' to avoid precedence issues
#1036: FILE: fs/ext4/mballoc.c:627:
+#define mb_correct_addr_and_bit(bit, addr)		\
+{							\
+	bit += ((unsigned long) addr & 7UL) << 3;	\
+	addr = (void *) ((unsigned long) addr & ~7UL);	\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#1036: FILE: fs/ext4/mballoc.c:627:
+#define mb_correct_addr_and_bit(bit, addr)		\
+{							\
+	bit += ((unsigned long) addr & 7UL) << 3;	\
+	addr = (void *) ((unsigned long) addr & ~7UL);	\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#1036: FILE: fs/ext4/mballoc.c:627:
+#define mb_correct_addr_and_bit(bit, addr)		\
+{							\
+	bit += ((unsigned long) addr & 7UL) << 3;	\
+	addr = (void *) ((unsigned long) addr & ~7UL);	\
+}

CHECK:SPACING: No space is necessary after a cast
#1038: FILE: fs/ext4/mballoc.c:629:
+	bit += ((unsigned long) addr & 7UL) << 3;	\

CHECK:SPACING: No space is necessary after a cast
#1039: FILE: fs/ext4/mballoc.c:630:
+	addr = (void *) ((unsigned long) addr & ~7UL);	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bit' may be better as '(bit)' to avoid precedence issues
#1042: FILE: fs/ext4/mballoc.c:633:
+#define mb_correct_addr_and_bit(bit, addr)		\
+{							\
+	bit += ((unsigned long) addr & 3UL) << 3;	\
+	addr = (void *) ((unsigned long) addr & ~3UL);	\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#1042: FILE: fs/ext4/mballoc.c:633:
+#define mb_correct_addr_and_bit(bit, addr)		\
+{							\
+	bit += ((unsigned long) addr & 3UL) << 3;	\
+	addr = (void *) ((unsigned long) addr & ~3UL);	\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#1042: FILE: fs/ext4/mballoc.c:633:
+#define mb_correct_addr_and_bit(bit, addr)		\
+{							\
+	bit += ((unsigned long) addr & 3UL) << 3;	\
+	addr = (void *) ((unsigned long) addr & ~3UL);	\
+}

CHECK:SPACING: No space is necessary after a cast
#1044: FILE: fs/ext4/mballoc.c:635:
+	bit += ((unsigned long) addr & 3UL) << 3;	\

CHECK:SPACING: No space is necessary after a cast
#1045: FILE: fs/ext4/mballoc.c:636:
+	addr = (void *) ((unsigned long) addr & ~3UL);	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1086: FILE: fs/ext4/mballoc.c:677:
+	BUG_ON(EXT4_MB_BITMAP(e4b) == EXT4_MB_BUDDY(e4b));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1087: FILE: fs/ext4/mballoc.c:678:
+	BUG_ON(max == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!max"
#1087: FILE: fs/ext4/mballoc.c:678:
+	BUG_ON(max == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1107: FILE: fs/ext4/mballoc.c:698:
+static void mb_free_blocks_double(struct inode *inode, struct ext4_buddy *e4b,
+			   int first, int count)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e4b->bd_info->bb_bitmap"
#1112: FILE: fs/ext4/mballoc.c:703:
+	if (unlikely(e4b->bd_info->bb_bitmap == NULL))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1114: FILE: fs/ext4/mballoc.c:705:
+	BUG_ON(!ext4_is_group_locked(sb, e4b->bd_group));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1118: FILE: fs/ext4/mballoc.c:709:
+			ext4_fsblk_t blocknr;
+			blocknr = e4b->bd_group * EXT4_BLOCKS_PER_GROUP(sb);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1123: FILE: fs/ext4/mballoc.c:714:
+			ext4_error(sb, __FUNCTION__, "double-free of inode"

WARNING:SPLIT_STRING: quoted string split across lines
#1124: FILE: fs/ext4/mballoc.c:715:
+			ext4_error(sb, __FUNCTION__, "double-free of inode"
+				   " %lu's block %llu(bit %u in group %lu)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e4b->bd_info->bb_bitmap"
#1136: FILE: fs/ext4/mballoc.c:727:
+	if (unlikely(e4b->bd_info->bb_bitmap == NULL))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1138: FILE: fs/ext4/mballoc.c:729:
+	BUG_ON(!ext4_is_group_locked(e4b->bd_sb, e4b->bd_group));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1140: FILE: fs/ext4/mballoc.c:731:
+		BUG_ON(mb_test_bit(first + i, e4b->bd_info->bb_bitmap));

CHECK:SPACING: No space is necessary after a cast
#1150: FILE: fs/ext4/mballoc.c:741:
+		b1 = (unsigned char *) e4b->bd_info->bb_bitmap;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1150: FILE: fs/ext4/mballoc.c:741:
+		int i;
+		b1 = (unsigned char *) e4b->bd_info->bb_bitmap;

CHECK:SPACING: No space is necessary after a cast
#1151: FILE: fs/ext4/mballoc.c:742:
+		b2 = (unsigned char *) bitmap;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1154: FILE: fs/ext4/mballoc.c:745:
+				printk("corruption in group %lu at byte %u(%u):"

WARNING:SPLIT_STRING: quoted string split across lines
#1155: FILE: fs/ext4/mballoc.c:746:
+				printk("corruption in group %lu at byte %u(%u):"
+				       " %x in copy != %x on disk/prealloc\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1157: FILE: fs/ext4/mballoc.c:748:
+				BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1174: FILE: fs/ext4/mballoc.c:765:
+		printk(KERN_EMERG					\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1177: FILE: fs/ext4/mballoc.c:768:
+		BUG();							\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1182: FILE: fs/ext4/mballoc.c:773:
+static int __mb_check_buddy(struct ext4_buddy *e4b, char *file,
+				const char *function, int line)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1204: FILE: fs/ext4/mballoc.c:795:
+		static int mb_check_counter;
+		if (mb_check_counter++ % 100 != 0)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1218: FILE: fs/ext4/mballoc.c:809:
+		for (i = 0; i < max; i++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1222: FILE: fs/ext4/mballoc.c:813:
+					MB_CHECK_ASSERT(

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1223: FILE: fs/ext4/mballoc.c:814:
+						mb_test_bit((i<<1)+1, buddy2));
 						              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1223: FILE: fs/ext4/mballoc.c:814:
+						mb_test_bit((i<<1)+1, buddy2));
 						                  ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1225: FILE: fs/ext4/mballoc.c:816:
+					MB_CHECK_ASSERT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1237: FILE: fs/ext4/mballoc.c:828:
+				MB_CHECK_ASSERT(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1274: FILE: fs/ext4/mballoc.c:865:
+		struct ext4_prealloc_space *pa;
+		pa = list_entry(cur, struct ext4_prealloc_space, group_list);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1282: FILE: fs/ext4/mballoc.c:873:
+}
+#undef MB_CHECK_ASSERT

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1284: FILE: fs/ext4/mballoc.c:875:
+					__FILE__, __FUNCTION__, __LINE__)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1311: FILE: fs/ext4/mballoc.c:902:
+static void ext4_mb_mark_free_simple(struct super_block *sb,
+				void *buddy, unsigned first, int len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1311: FILE: fs/ext4/mballoc.c:902:
+				void *buddy, unsigned first, int len,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1320: FILE: fs/ext4/mballoc.c:911:
+	BUG_ON(len >= EXT4_BLOCKS_PER_GROUP(sb));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1347: FILE: fs/ext4/mballoc.c:938:
+static void ext4_mb_generate_buddy(struct super_block *sb,
+				void *buddy, void *bitmap, ext4_group_t group)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1354: FILE: fs/ext4/mballoc.c:945:
+	unsigned free = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1355: FILE: fs/ext4/mballoc.c:946:
+	unsigned fragments = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1359: FILE: fs/ext4/mballoc.c:950:
+	 * of on-disk bitmap and preallocations */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1378: FILE: fs/ext4/mballoc.c:969:
+		printk(KERN_DEBUG

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around grp->bb_state
#1384: FILE: fs/ext4/mballoc.c:975:
+	clear_bit(EXT4_GROUP_INFO_NEED_INIT_BIT, &(grp->bb_state));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1438: FILE: fs/ext4/mballoc.c:1029:
+	if (groups_per_page > 1) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bh"
#1442: FILE: fs/ext4/mballoc.c:1033:
+		if (bh == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#1445: FILE: fs/ext4/mballoc.c:1036:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#1459: FILE: fs/ext4/mballoc.c:1050:
+		if (desc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bh[i]"
#1464: FILE: fs/ext4/mballoc.c:1055:
+		if (bh[i] == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1478: FILE: fs/ext4/mballoc.c:1069:
+			ext4_init_block_bitmap(sb, bh[i],
+						first_group + i, desc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1522: FILE: fs/ext4/mballoc.c:1113:
+			BUG_ON(incore == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!incore"
#1522: FILE: fs/ext4/mballoc.c:1113:
+			BUG_ON(incore == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1524: FILE: fs/ext4/mballoc.c:1115:
+			mb_debug("put buddy for group %u in page %lu/%x\n",
+				group, page->index, i * blocksize);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1529: FILE: fs/ext4/mballoc.c:1120:
+			       sizeof(unsigned short)*(sb->s_blocksize_bits+2));
 			                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1529: FILE: fs/ext4/mballoc.c:1120:
+			       sizeof(unsigned short)*(sb->s_blocksize_bits+2));
 			                                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1537: FILE: fs/ext4/mballoc.c:1128:
+			BUG_ON(incore != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "incore"
#1537: FILE: fs/ext4/mballoc.c:1128:
+			BUG_ON(incore != NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1539: FILE: fs/ext4/mballoc.c:1130:
+			mb_debug("put bitmap for group %u in page %lu/%x\n",
+				group, page->index, i * blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1568: FILE: fs/ext4/mballoc.c:1159:
+static int ext4_mb_load_buddy(struct super_block *sb, ext4_group_t group,
+		struct ext4_buddy *e4b)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1599: FILE: fs/ext4/mballoc.c:1190:
+	 * what we'd like to avoid in fast path ... */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#1601: FILE: fs/ext4/mballoc.c:1192:
+	if (page == NULL || !PageUptodate(page)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1606: FILE: fs/ext4/mballoc.c:1197:
+			BUG_ON(page->mapping != inode->i_mapping);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#1615: FILE: fs/ext4/mballoc.c:1206:
+	if (page == NULL || !PageUptodate(page))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#1626: FILE: fs/ext4/mballoc.c:1217:
+	if (page == NULL || !PageUptodate(page)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1631: FILE: fs/ext4/mballoc.c:1222:
+			BUG_ON(page->mapping != inode->i_mapping);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#1638: FILE: fs/ext4/mballoc.c:1229:
+	if (page == NULL || !PageUptodate(page))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1644: FILE: fs/ext4/mballoc.c:1235:
+	BUG_ON(e4b->bd_bitmap_page == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e4b->bd_bitmap_page"
#1644: FILE: fs/ext4/mballoc.c:1235:
+	BUG_ON(e4b->bd_bitmap_page == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1645: FILE: fs/ext4/mballoc.c:1236:
+	BUG_ON(e4b->bd_buddy_page == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e4b->bd_buddy_page"
#1645: FILE: fs/ext4/mballoc.c:1236:
+	BUG_ON(e4b->bd_buddy_page == NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1667: FILE: fs/ext4/mballoc.c:1258:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1673: FILE: fs/ext4/mballoc.c:1264:
+	BUG_ON(EXT4_MB_BITMAP(e4b) == EXT4_MB_BUDDY(e4b));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1674: FILE: fs/ext4/mballoc.c:1265:
+	BUG_ON(block >= (1 << (e4b->bd_blkbits + 3)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1735: FILE: fs/ext4/mballoc.c:1326:
+	BUG_ON(first + count > (sb->s_blocksize << 3));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1736: FILE: fs/ext4/mballoc.c:1327:
+	BUG_ON(!ext4_is_group_locked(sb, e4b->bd_group));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1761: FILE: fs/ext4/mballoc.c:1352:
+			ext4_fsblk_t blocknr;
+			blocknr = e4b->bd_group * EXT4_BLOCKS_PER_GROUP(sb);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1766: FILE: fs/ext4/mballoc.c:1357:
+			ext4_error(sb, __FUNCTION__, "double-free of inode"

WARNING:SPLIT_STRING: quoted string split across lines
#1767: FILE: fs/ext4/mballoc.c:1358:
+			ext4_error(sb, __FUNCTION__, "double-free of inode"
+				   " %lu's block %llu(bit %u in group %lu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1780: FILE: fs/ext4/mballoc.c:1371:
+			if (mb_test_bit(block, buddy) ||
+					mb_test_bit(block + 1, buddy))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1791: FILE: fs/ext4/mballoc.c:1382:
+				 * free bits in bitmap */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1812: FILE: fs/ext4/mballoc.c:1403:
+static int mb_find_extent(struct ext4_buddy *e4b, int order, int block,
+				int needed, struct ext4_free_extent *ex)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1819: FILE: fs/ext4/mballoc.c:1410:
+	BUG_ON(!ext4_is_group_locked(e4b->bd_sb, e4b->bd_group));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1820: FILE: fs/ext4/mballoc.c:1411:
+	BUG_ON(ex == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ex"
#1820: FILE: fs/ext4/mballoc.c:1411:
+	BUG_ON(ex == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1823: FILE: fs/ext4/mballoc.c:1414:
+	BUG_ON(buddy == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buddy"
#1823: FILE: fs/ext4/mballoc.c:1414:
+	BUG_ON(buddy == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1824: FILE: fs/ext4/mballoc.c:1415:
+	BUG_ON(block >= max);

WARNING:TYPO_SPELLING: 'dorp' may be misspelled - perhaps 'drop'?
#1832: FILE: fs/ext4/mballoc.c:1423:
+	/* FIXME dorp order completely ? */
 	         ^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1850: FILE: fs/ext4/mballoc.c:1441:
+	       (buddy = mb_find_buddy(e4b, order, &max))) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1865: FILE: fs/ext4/mballoc.c:1456:
+	BUG_ON(ex->fe_start + ex->fe_len > (1 << (e4b->bd_blkbits + 3)));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1877: FILE: fs/ext4/mballoc.c:1468:
+	unsigned ret = 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1881: FILE: fs/ext4/mballoc.c:1472:
+	BUG_ON(start + len > (e4b->bd_sb->s_blocksize << 3));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1882: FILE: fs/ext4/mballoc.c:1473:
+	BUG_ON(e4b->bd_group != ex->fe_group);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1883: FILE: fs/ext4/mballoc.c:1474:
+	BUG_ON(!ext4_is_group_locked(e4b->bd_sb, e4b->bd_group));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1909: FILE: fs/ext4/mballoc.c:1500:
+			BUG_ON((start >> ord) >= max);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1914: FILE: fs/ext4/mballoc.c:1505:
+			BUG_ON(len < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1923: FILE: fs/ext4/mballoc.c:1514:
+		BUG_ON(ord <= 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1938: FILE: fs/ext4/mballoc.c:1529:
+	mb_set_bits(sb_bgl_lock(EXT4_SB(e4b->bd_sb), ex->fe_group),
+			EXT4_MB_BITMAP(e4b), ex->fe_start, len0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1948: FILE: fs/ext4/mballoc.c:1539:
+static void ext4_mb_use_best_found(struct ext4_allocation_context *ac,
+					struct ext4_buddy *e4b)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1953: FILE: fs/ext4/mballoc.c:1544:
+	BUG_ON(ac->ac_b_ex.fe_group != e4b->bd_group);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1954: FILE: fs/ext4/mballoc.c:1545:
+	BUG_ON(ac->ac_status == AC_STATUS_FOUND);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1961: FILE: fs/ext4/mballoc.c:1552:
+	 * allocated blocks for history */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1989: FILE: fs/ext4/mballoc.c:1580:
+static void ext4_mb_check_limits(struct ext4_allocation_context *ac,
+					struct ext4_buddy *e4b,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2002: FILE: fs/ext4/mballoc.c:1593:
+	if (ac->ac_found > sbi->s_mb_max_to_scan &&
+			!(ac->ac_flags & EXT4_MB_HINT_FIRST)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2014: FILE: fs/ext4/mballoc.c:1605:
+	if ((finish_group || ac->ac_found > sbi->s_mb_min_to_scan)
+			&& bex->fe_group == e4b->bd_group) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2017: FILE: fs/ext4/mballoc.c:1608:
+		 * period or not) */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2037: FILE: fs/ext4/mballoc.c:1628:
+static void ext4_mb_measure_extent(struct ext4_allocation_context *ac,
+					struct ext4_free_extent *ex,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2043: FILE: fs/ext4/mballoc.c:1634:
+	BUG_ON(ex->fe_len <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2044: FILE: fs/ext4/mballoc.c:1635:
+	BUG_ON(ex->fe_len >= EXT4_BLOCKS_PER_GROUP(ac->ac_sb));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2045: FILE: fs/ext4/mballoc.c:1636:
+	BUG_ON(ex->fe_start >= EXT4_BLOCKS_PER_GROUP(ac->ac_sb));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2046: FILE: fs/ext4/mballoc.c:1637:
+	BUG_ON(ac->ac_status != AC_STATUS_CONTINUE);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2081: FILE: fs/ext4/mballoc.c:1672:
+		 * larger than previous best one is better */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2087: FILE: fs/ext4/mballoc.c:1678:
+		 * smaller than previous one */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2096: FILE: fs/ext4/mballoc.c:1687:
+static int ext4_mb_try_best_found(struct ext4_allocation_context *ac,
+					struct ext4_buddy *e4b)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2103: FILE: fs/ext4/mballoc.c:1694:
+	BUG_ON(ex.fe_len <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2155: FILE: fs/ext4/mballoc.c:1746:
+		BUG_ON(ex.fe_len <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2156: FILE: fs/ext4/mballoc.c:1747:
+		BUG_ON(ex.fe_group != ac->ac_g_ex.fe_group);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2157: FILE: fs/ext4/mballoc.c:1748:
+		BUG_ON(ex.fe_start != ac->ac_g_ex.fe_start);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2163: FILE: fs/ext4/mballoc.c:1754:
+		 * number of blocks to an existing extent */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2164: FILE: fs/ext4/mballoc.c:1755:
+		BUG_ON(ex.fe_len <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2165: FILE: fs/ext4/mballoc.c:1756:
+		BUG_ON(ex.fe_group != ac->ac_g_ex.fe_group);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2166: FILE: fs/ext4/mballoc.c:1757:
+		BUG_ON(ex.fe_start != ac->ac_g_ex.fe_start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2182: FILE: fs/ext4/mballoc.c:1773:
+static void ext4_mb_simple_scan_group(struct ext4_allocation_context *ac,
+					struct ext4_buddy *e4b)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2191: FILE: fs/ext4/mballoc.c:1782:
+	BUG_ON(ac->ac_2order <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2197: FILE: fs/ext4/mballoc.c:1788:
+		BUG_ON(buddy == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buddy"
#2197: FILE: fs/ext4/mballoc.c:1788:
+		BUG_ON(buddy == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2200: FILE: fs/ext4/mballoc.c:1791:
+		BUG_ON(k >= max);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2210: FILE: fs/ext4/mballoc.c:1801:
+		BUG_ON(ac->ac_b_ex.fe_len != ac->ac_g_ex.fe_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2225: FILE: fs/ext4/mballoc.c:1816:
+static void ext4_mb_complex_scan_group(struct ext4_allocation_context *ac,
+					struct ext4_buddy *e4b)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2234: FILE: fs/ext4/mballoc.c:1825:
+	BUG_ON(free <= 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2240: FILE: fs/ext4/mballoc.c:1831:
+		i = ext4_find_next_zero_bit(bitmap,
+						EXT4_BLOCKS_PER_GROUP(sb), i);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2242: FILE: fs/ext4/mballoc.c:1833:
+			BUG_ON(free != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2247: FILE: fs/ext4/mballoc.c:1838:
+		BUG_ON(ex.fe_len <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2248: FILE: fs/ext4/mballoc.c:1839:
+		BUG_ON(free < ex.fe_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2276: FILE: fs/ext4/mballoc.c:1867:
+	BUG_ON(sbi->s_stripe == 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2300: FILE: fs/ext4/mballoc.c:1891:
+static int ext4_mb_good_group(struct ext4_allocation_context *ac,
+				ext4_group_t group, int cr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2302: FILE: fs/ext4/mballoc.c:1893:
+	unsigned free, fragments;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2303: FILE: fs/ext4/mballoc.c:1894:
+	unsigned i, bits;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2307: FILE: fs/ext4/mballoc.c:1898:
+	BUG_ON(cr < 0 || cr >= 4);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2308: FILE: fs/ext4/mballoc.c:1899:
+	BUG_ON(EXT4_MB_GRP_NEED_INIT(grp));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2319: FILE: fs/ext4/mballoc.c:1910:
+		BUG_ON(ac->ac_2order == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2341: FILE: fs/ext4/mballoc.c:1932:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2361: FILE: fs/ext4/mballoc.c:1952:
+	BUG_ON(ac->ac_status == AC_STATUS_FOUND);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2399: FILE: fs/ext4/mballoc.c:1990:
+	if (size < sbi->s_mb_stream_request &&
+			(ac->ac_flags & EXT4_MB_HINT_DATA)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2472: FILE: fs/ext4/mballoc.c:2063:
+			else if (cr == 1 &&
+					ac->ac_g_ex.fe_len == sbi->s_stripe)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2551: FILE: fs/ext4/mballoc.c:2142:
+	while (--l && (hs = ext4_mb_history_skip_empty(s, ++hs, 0)) != NULL);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPLIT_STRING: quoted string split across lines
#2575: FILE: fs/ext4/mballoc.c:2166:
+		seq_printf(seq, "%-5s %-8s %-23s %-23s %-23s %-5s "
+				"%-5s %-2s %-5s %-5s %-5s %-6s\n",

WARNING:SPLIT_STRING: quoted string split across lines
#2583: FILE: fs/ext4/mballoc.c:2174:
+		fmt = "%-5u %-8u %-23s %-23s %-23s %-5u %-5u %-2u "
+			"%-5u %-5s %-5u %-6u\n";

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2594: FILE: fs/ext4/mballoc.c:2185:
+		seq_printf(seq, fmt, hs->pid, hs->ino, buf, buf3, buf2,
+				hs->found, hs->groups, hs->cr, hs->flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2610: FILE: fs/ext4/mballoc.c:2201:
+		seq_printf(seq, "%-5u %-8u %-23s discard\n",
+				hs->pid, hs->ino, buf2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2615: FILE: fs/ext4/mballoc.c:2206:
+		seq_printf(seq, "%-5u %-8u %-23s free\n",
+				hs->pid, hs->ino, buf2);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#2624: FILE: fs/ext4/mballoc.c:2215:
+static struct seq_operations ext4_mb_seq_history_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s"
#2640: FILE: fs/ext4/mballoc.c:2231:
+	if (s == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s->history"
#2645: FILE: fs/ext4/mballoc.c:2236:
+	if (s->history == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2659: FILE: fs/ext4/mballoc.c:2250:
+		struct seq_file *m = (struct seq_file *)file->private_data;
+		m->private = s;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2666: FILE: fs/ext4/mballoc.c:2257:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#2672: FILE: fs/ext4/mballoc.c:2263:
+	struct ext4_mb_proc_session *s = seq->private;
+	kfree(s->history);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2678: FILE: fs/ext4/mballoc.c:2269:
+static ssize_t ext4_mb_seq_history_write(struct file *file,
+				const char __user *buffer,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2688: FILE: fs/ext4/mballoc.c:2279:
+		printk(KERN_ERR "EXT4-fs: %s string too long, max %u bytes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2689: FILE: fs/ext4/mballoc.c:2280:
+		printk(KERN_ERR "EXT4-fs: %s string too long, max %u bytes\n",
+				"mb_history", (int)sizeof(str));

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#2696: FILE: fs/ext4/mballoc.c:2287:
+	value = simple_strtol(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2704: FILE: fs/ext4/mballoc.c:2295:
+static struct file_operations ext4_mb_seq_history_fops = {

CHECK:SPACING: No space is necessary after a cast
#2723: FILE: fs/ext4/mballoc.c:2314:
+	return (void *) group;

CHECK:SPACING: No space is necessary after a cast
#2736: FILE: fs/ext4/mballoc.c:2327:
+	return (void *) group;;

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#2736: FILE: fs/ext4/mballoc.c:2327:
+	return (void *) group;;

CHECK:SPACING: No space is necessary after a cast
#2742: FILE: fs/ext4/mballoc.c:2333:
+	long group = (long) v;

WARNING:SPLIT_STRING: quoted string split across lines
#2754: FILE: fs/ext4/mballoc.c:2345:
+		seq_printf(seq, "#%-5s: %-5s %-5s %-5s "
+				"[ %-5s %-5s %-5s %-5s %-5s %-5s %-5s "

WARNING:SPLIT_STRING: quoted string split across lines
#2755: FILE: fs/ext4/mballoc.c:2346:
+				"[ %-5s %-5s %-5s %-5s %-5s %-5s %-5s "
+				  "%-5s %-5s %-5s %-5s %-5s %-5s %-5s ]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2773: FILE: fs/ext4/mballoc.c:2364:
+	seq_printf(seq, "#%-5lu: %-5u %-5u %-5u [", group, sg.info.bb_free,
+			sg.info.bb_fragments, sg.info.bb_first_free);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#2777: FILE: fs/ext4/mballoc.c:2368:
+	seq_printf(seq, " ]\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#2786: FILE: fs/ext4/mballoc.c:2377:
+static struct seq_operations ext4_mb_seq_groups_ops = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2801: FILE: fs/ext4/mballoc.c:2392:
+		struct seq_file *m = (struct seq_file *)file->private_data;
+		m->private = sb;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2805: FILE: fs/ext4/mballoc.c:2396:
+
+}

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2807: FILE: fs/ext4/mballoc.c:2398:
+static struct file_operations ext4_mb_seq_groups_fops = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sbi->s_mb_proc"
#2830: FILE: fs/ext4/mballoc.c:2421:
+	if (sbi->s_mb_proc != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2832: FILE: fs/ext4/mballoc.c:2423:
+		struct proc_dir_entry *p;
+		p = create_proc_entry("mb_history", S_IRUGO, sbi->s_mb_proc);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2832: FILE: fs/ext4/mballoc.c:2423:
+		p = create_proc_entry("mb_history", S_IRUGO, sbi->s_mb_proc);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2837: FILE: fs/ext4/mballoc.c:2428:
+		p = create_proc_entry("mb_groups", S_IRUGO, sbi->s_mb_proc);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sbi->s_mb_history"
#2849: FILE: fs/ext4/mballoc.c:2440:
+	if (likely(sbi->s_mb_history != NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sbi->s_mb_history"
#2859: FILE: fs/ext4/mballoc.c:2450:
+	if (unlikely(sbi->s_mb_history == NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2879: FILE: fs/ext4/mballoc.c:2470:
+		if (ac->ac_g_ex.fe_start == ac->ac_b_ex.fe_start &&
+				ac->ac_g_ex.fe_group == ac->ac_b_ex.fe_group)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2909: FILE: fs/ext4/mballoc.c:2500:
+	 * So a two level scheme suffices for now. */

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#2910: FILE: fs/ext4/mballoc.c:2501:
+	sbi->s_group_info = kmalloc(sizeof(*sbi->s_group_info) *
+				    num_meta_group_infos, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sbi->s_group_info"
#2912: FILE: fs/ext4/mballoc.c:2503:
+	if (sbi->s_group_info == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2913: FILE: fs/ext4/mballoc.c:2504:
+		printk(KERN_ERR "EXT4-fs: can't allocate buddy meta group\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2913: FILE: fs/ext4/mballoc.c:2504:
+	if (sbi->s_group_info == NULL) {
+		printk(KERN_ERR "EXT4-fs: can't allocate buddy meta group\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sbi->s_buddy_cache"
#2917: FILE: fs/ext4/mballoc.c:2508:
+	if (sbi->s_buddy_cache == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2918: FILE: fs/ext4/mballoc.c:2509:
+		printk(KERN_ERR "EXT4-fs: can't get new inode\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!meta_group_info"
#2930: FILE: fs/ext4/mballoc.c:2521:
+		if (meta_group_info == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2931: FILE: fs/ext4/mballoc.c:2522:
+			printk(KERN_ERR "EXT4-fs: can't allocate mem for a "

WARNING:SPLIT_STRING: quoted string split across lines
#2932: FILE: fs/ext4/mballoc.c:2523:
+			printk(KERN_ERR "EXT4-fs: can't allocate mem for a "
+			       "buddy group\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!meta_group_info[j]"
#2952: FILE: fs/ext4/mballoc.c:2543:
+		if (meta_group_info[j] == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2953: FILE: fs/ext4/mballoc.c:2544:
+			printk(KERN_ERR "EXT4-fs: can't allocate buddy mem\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2953: FILE: fs/ext4/mballoc.c:2544:
+		if (meta_group_info[j] == NULL) {
+			printk(KERN_ERR "EXT4-fs: can't allocate buddy mem\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#2958: FILE: fs/ext4/mballoc.c:2549:
+		if (desc == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2959: FILE: fs/ext4/mballoc.c:2550:
+			printk(KERN_ERR

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around meta_group_info[j]->bb_state
#2965: FILE: fs/ext4/mballoc.c:2556:
+			&(meta_group_info[j]->bb_state));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2984: FILE: fs/ext4/mballoc.c:2575:
+			struct buffer_head *bh;
+			meta_group_info[j]->bb_bitmap =

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2986: FILE: fs/ext4/mballoc.c:2577:
+			BUG_ON(meta_group_info[j]->bb_bitmap == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!meta_group_info[j]->bb_bitmap"
#2986: FILE: fs/ext4/mballoc.c:2577:
+			BUG_ON(meta_group_info[j]->bb_bitmap == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2988: FILE: fs/ext4/mballoc.c:2579:
+			BUG_ON(bh == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bh"
#2988: FILE: fs/ext4/mballoc.c:2579:
+			BUG_ON(bh == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2990: FILE: fs/ext4/mballoc.c:2581:
+			memcpy(meta_group_info[j]->bb_bitmap, bh->b_data,
+					sb->s_blocksize);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2995: FILE: fs/ext4/mballoc.c:2586:
+
+	}

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3008: FILE: fs/ext4/mballoc.c:2599:
+	iput(sbi->s_buddy_cache);
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3017: FILE: fs/ext4/mballoc.c:2608:
+	unsigned i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3018: FILE: fs/ext4/mballoc.c:2609:
+	unsigned offset;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3019: FILE: fs/ext4/mballoc.c:2610:
+	unsigned max;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sbi->s_mb_offsets"
#3027: FILE: fs/ext4/mballoc.c:2618:
+	if (sbi->s_mb_offsets == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sbi->s_mb_maxs"
#3032: FILE: fs/ext4/mballoc.c:2623:
+	if (sbi->s_mb_maxs == NULL) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3076: FILE: fs/ext4/mballoc.c:2667:
+	i = sizeof(struct ext4_locality_group) * NR_CPUS;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sbi->s_locality_groups"
#3078: FILE: fs/ext4/mballoc.c:2669:
+	if (sbi->s_locality_groups == NULL) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3084: FILE: fs/ext4/mballoc.c:2675:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3086: FILE: fs/ext4/mballoc.c:2677:
+		struct ext4_locality_group *lg;
+		lg = &sbi->s_locality_groups[i];

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3095: FILE: fs/ext4/mballoc.c:2686:
+	printk("EXT4-fs: mballoc enabled\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3114: FILE: fs/ext4/mballoc.c:2705:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3129: FILE: fs/ext4/mballoc.c:2720:
+	list_splice_init(&sbi->s_closed_transaction,
+			&sbi->s_committed_transaction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3131: FILE: fs/ext4/mballoc.c:2722:
+	list_splice_init(&sbi->s_active_transaction,
+			&sbi->s_committed_transaction);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3154: FILE: fs/ext4/mballoc.c:2745:
+		iput(sbi->s_buddy_cache);
 		^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3156: FILE: fs/ext4/mballoc.c:2747:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3161: FILE: fs/ext4/mballoc.c:2752:
+		printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#3163: FILE: fs/ext4/mballoc.c:2754:
+		      "EXT4-fs: mballoc: %u extents scanned, %u goal hits, "
+				"%u 2^N hits, %u breaks, %u lost\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3169: FILE: fs/ext4/mballoc.c:2760:
+		printk(KERN_INFO

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#3170: FILE: fs/ext4/mballoc.c:2761:
+		       "EXT4-fs: mballoc: %lu generated and it took %Lu\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3173: FILE: fs/ext4/mballoc.c:2764:
+		printk(KERN_INFO

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!md"
#3212: FILE: fs/ext4/mballoc.c:2803:
+		if (md == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3216: FILE: fs/ext4/mballoc.c:2807:
+		mb_debug("gonna free %u blocks in group %lu (0x%p):",
+				md->num, md->group, md);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3220: FILE: fs/ext4/mballoc.c:2811:
+		BUG_ON(err != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3229: FILE: fs/ext4/mballoc.c:2820:
+			BUG_ON(err != 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3254: FILE: fs/ext4/mballoc.c:2845:
+
+

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#3281: FILE: fs/ext4/mballoc.c:2872:
+	value = simple_strtol(str, NULL, 0);			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#3301: FILE: fs/ext4/mballoc.c:2892:
+#define	MB_PROC_HANDLER(name, var)					\
+do {									\
+	proc = create_proc_entry(name, mode, sbi->s_mb_proc);		\
+	if (proc == NULL) {						\
+		printk(KERN_ERR "EXT4-fs: can't to create %s\n", name);	\
+		goto err_out;						\
+	}								\
+	proc->data = sbi;						\
+	proc->read_proc  = ext4_mb_read_##var ;				\
+	proc->write_proc = ext4_mb_write_##var;				\
+} while (0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc"
#3304: FILE: fs/ext4/mballoc.c:2895:
+	if (proc == NULL) {						\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3305: FILE: fs/ext4/mballoc.c:2896:
+		printk(KERN_ERR "EXT4-fs: can't to create %s\n", name);	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#3315: FILE: fs/ext4/mballoc.c:2906:
+	mode_t mode = S_IFREG | S_IRUGO | S_IWUSR;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3321: FILE: fs/ext4/mballoc.c:2912:
+	snprintf(devname, sizeof(devname) - 1, "%s",
+		bdevname(sb->s_bdev, devname));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3334: FILE: fs/ext4/mballoc.c:2925:
+	printk(KERN_ERR "EXT4-fs: Unable to create %s\n", devname);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sbi->s_mb_proc"
#3352: FILE: fs/ext4/mballoc.c:2943:
+	if (sbi->s_mb_proc == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3356: FILE: fs/ext4/mballoc.c:2947:
+	snprintf(devname, sizeof(devname) - 1, "%s",
+		bdevname(sb->s_bdev, devname));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3372: FILE: fs/ext4/mballoc.c:2963:
+		kmem_cache_create("ext4_prealloc_space",
+				     sizeof(struct ext4_prealloc_space),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ext4_pspace_cachep"
#3374: FILE: fs/ext4/mballoc.c:2965:
+	if (ext4_pspace_cachep == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc_root_ext4"
#3379: FILE: fs/ext4/mballoc.c:2970:
+	if (proc_root_ext4 == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3380: FILE: fs/ext4/mballoc.c:2971:
+		printk(KERN_ERR "EXT4-fs: Unable to create %s\n", EXT4_ROOT);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3395: FILE: fs/ext4/mballoc.c:2986:
+
+

WARNING:TYPO_SPELLING: 'choosed' may be misspelled - perhaps 'chose'?
#3397: FILE: fs/ext4/mballoc.c:2988:
+ * Check quota and mark choosed space (ac->ac_b_ex) non-free in bitmaps
                         ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3401: FILE: fs/ext4/mballoc.c:2992:
+static int ext4_mb_mark_diskspace_used(struct ext4_allocation_context *ac,
+				handle_t *handle)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3412: FILE: fs/ext4/mballoc.c:3003:
+	BUG_ON(ac->ac_status != AC_STATUS_FOUND);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3413: FILE: fs/ext4/mballoc.c:3004:
+	BUG_ON(ac->ac_b_ex.fe_len <= 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3420: FILE: fs/ext4/mballoc.c:3011:
+	ext4_debug("using block group %lu(%d)\n", ac->ac_b_ex.fe_group,
+			gdp->bg_free_blocks_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3445: FILE: fs/ext4/mballoc.c:3036:
+	if (block == ext4_block_bitmap(sb, gdp) ||
+			block == ext4_inode_bitmap(sb, gdp) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3447: FILE: fs/ext4/mballoc.c:3038:
+			in_range(block, ext4_inode_table(sb, gdp),
+				EXT4_SB(sb)->s_itb_per_group)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3448: FILE: fs/ext4/mballoc.c:3039:
+				EXT4_SB(sb)->s_itb_per_group)) {
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3449: FILE: fs/ext4/mballoc.c:3040:
+		ext4_error(sb, __FUNCTION__,

WARNING:LINE_SPACING: Missing a blank line after declarations
#3456: FILE: fs/ext4/mballoc.c:3047:
+		int i;
+		for (i = 0; i < ac->ac_b_ex.fe_len; i++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3457: FILE: fs/ext4/mballoc.c:3048:
+			BUG_ON(mb_test_bit(ac->ac_b_ex.fe_start + i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3458: FILE: fs/ext4/mballoc.c:3049:
+			BUG_ON(mb_test_bit(ac->ac_b_ex.fe_start + i,
+						bitmap_bh->b_data));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3463: FILE: fs/ext4/mballoc.c:3054:
+	mb_set_bits(sb_bgl_lock(sbi, ac->ac_b_ex.fe_group), bitmap_bh->b_data,
+				ac->ac_b_ex.fe_start, ac->ac_b_ex.fe_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3470: FILE: fs/ext4/mballoc.c:3061:
+			cpu_to_le16(ext4_free_blocks_after_init(sb,
+						ac->ac_b_ex.fe_group,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3504: FILE: fs/ext4/mballoc.c:3095:
+	BUG_ON(lg == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lg"
#3504: FILE: fs/ext4/mballoc.c:3095:
+	BUG_ON(lg == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3510: FILE: fs/ext4/mballoc.c:3101:
+	mb_debug("#%u: goal %lu blocks for locality group\n",
+		current->pid, ac->ac_g_ex.fe_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3518: FILE: fs/ext4/mballoc.c:3109:
+static void ext4_mb_normalize_request(struct ext4_allocation_context *ac,
+				struct ext4_allocation_request *ar)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3528: FILE: fs/ext4/mballoc.c:3119:
+	/* do normalize only data requests, metadata requests
+	   do not need preallocation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3528: FILE: fs/ext4/mballoc.c:3119:
+	   do not need preallocation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3537: FILE: fs/ext4/mballoc.c:3128:
+	 * required (it's a tail, for example) */

WARNING:SPACING: space prohibited before semicolon
#3543: FILE: fs/ext4/mballoc.c:3134:
+		return ;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3549: FILE: fs/ext4/mballoc.c:3140:
+	 * given current request is allocated */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3559: FILE: fs/ext4/mballoc.c:3150:
+#define NRL_CHECK_SIZE(req, size, max,bits)	\
                                      ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'req' may be better as '(req)' to avoid precedence issues
#3559: FILE: fs/ext4/mballoc.c:3150:
+#define NRL_CHECK_SIZE(req, size, max,bits)	\
+		(req <= (size) || max <= ((size) >> bits))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#3559: FILE: fs/ext4/mballoc.c:3150:
+#define NRL_CHECK_SIZE(req, size, max,bits)	\
+		(req <= (size) || max <= ((size) >> bits))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'max' may be better as '(max)' to avoid precedence issues
#3559: FILE: fs/ext4/mballoc.c:3150:
+#define NRL_CHECK_SIZE(req, size, max,bits)	\
+		(req <= (size) || max <= ((size) >> bits))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bits' may be better as '(bits)' to avoid precedence issues
#3559: FILE: fs/ext4/mballoc.c:3150:
+#define NRL_CHECK_SIZE(req, size, max,bits)	\
+		(req <= (size) || max <= ((size) >> bits))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3588: FILE: fs/ext4/mballoc.c:3179:
+					(8<<20)>>bsbits, max, bsbits)) {
 					  ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3588: FILE: fs/ext4/mballoc.c:3179:
+					(8<<20)>>bsbits, max, bsbits)) {
 					       ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3596: FILE: fs/ext4/mballoc.c:3187:
+	orig_size = size = size >> bsbits;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3597: FILE: fs/ext4/mballoc.c:3188:
+	orig_start = start = start_off >> bsbits;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3628: FILE: fs/ext4/mballoc.c:3219:
+		BUG_ON(!(ac->ac_o_ex.fe_logical >= pa_end ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3629: FILE: fs/ext4/mballoc.c:3220:
+		BUG_ON(!(ac->ac_o_ex.fe_logical >= pa_end ||
+			ac->ac_o_ex.fe_logical < pa->pa_lstart));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3640: FILE: fs/ext4/mballoc.c:3231:
+		BUG_ON(pa->pa_lstart <= start && pa_end >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3643: FILE: fs/ext4/mballoc.c:3234:
+			BUG_ON(pa_end < start);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3648: FILE: fs/ext4/mballoc.c:3239:
+			BUG_ON(pa->pa_lstart > end);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3661: FILE: fs/ext4/mballoc.c:3252:
+		unsigned long pa_end;
+		pa = list_entry(cur, struct ext4_prealloc_space, pa_inode_list);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3665: FILE: fs/ext4/mballoc.c:3256:
+			BUG_ON(!(start >= pa_end || end <= pa->pa_lstart));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3672: FILE: fs/ext4/mballoc.c:3263:
+	if (start + size <= ac->ac_o_ex.fe_logical &&
+			start > ac->ac_o_ex.fe_logical) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3673: FILE: fs/ext4/mballoc.c:3264:
+		printk(KERN_ERR "start %lu, size %lu, fe_logical %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3674: FILE: fs/ext4/mballoc.c:3265:
+		printk(KERN_ERR "start %lu, size %lu, fe_logical %lu\n",
+			(unsigned long) start, (unsigned long) size,

CHECK:SPACING: No space is necessary after a cast
#3674: FILE: fs/ext4/mballoc.c:3265:
+			(unsigned long) start, (unsigned long) size,

CHECK:SPACING: No space is necessary after a cast
#3675: FILE: fs/ext4/mballoc.c:3266:
+			(unsigned long) ac->ac_o_ex.fe_logical);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3677: FILE: fs/ext4/mballoc.c:3268:
+	BUG_ON(start + size <= ac->ac_o_ex.fe_logical &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3678: FILE: fs/ext4/mballoc.c:3269:
+	BUG_ON(start + size <= ac->ac_o_ex.fe_logical &&
+			start > ac->ac_o_ex.fe_logical);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3679: FILE: fs/ext4/mballoc.c:3270:
+	BUG_ON(size <= 0 || size >= EXT4_BLOCKS_PER_GROUP(ac->ac_sb));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3684: FILE: fs/ext4/mballoc.c:3275:
+	 * placement or satisfy big request as is */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3692: FILE: fs/ext4/mballoc.c:3283:
+		ext4_get_group_no_and_offset(ac->ac_sb, ar->pright - size,
+						&ac->ac_f_ex.fe_group,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3699: FILE: fs/ext4/mballoc.c:3290:
+		ext4_get_group_no_and_offset(ac->ac_sb, ar->pleft + 1,
+						&ac->ac_f_ex.fe_group,

CHECK:SPACING: No space is necessary after a cast
#3704: FILE: fs/ext4/mballoc.c:3295:
+	mb_debug("goal: %u(was %u) blocks at %u\n", (unsigned) size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3704: FILE: fs/ext4/mballoc.c:3295:
+	mb_debug("goal: %u(was %u) blocks at %u\n", (unsigned) size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3705: FILE: fs/ext4/mballoc.c:3296:
+	mb_debug("goal: %u(was %u) blocks at %u\n", (unsigned) size,
+		(unsigned) orig_size, (unsigned) start);

CHECK:SPACING: No space is necessary after a cast
#3705: FILE: fs/ext4/mballoc.c:3296:
+		(unsigned) orig_size, (unsigned) start);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3705: FILE: fs/ext4/mballoc.c:3296:
+		(unsigned) orig_size, (unsigned) start);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3705: FILE: fs/ext4/mballoc.c:3296:
+		(unsigned) orig_size, (unsigned) start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3719: FILE: fs/ext4/mballoc.c:3310:
+		if (ac->ac_g_ex.fe_start == ac->ac_b_ex.fe_start &&
+				ac->ac_g_ex.fe_group == ac->ac_b_ex.fe_group)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3732: FILE: fs/ext4/mballoc.c:3323:
+static void ext4_mb_use_inode_pa(struct ext4_allocation_context *ac,
+				struct ext4_prealloc_space *pa)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3743: FILE: fs/ext4/mballoc.c:3334:
+	ext4_get_group_no_and_offset(ac->ac_sb, start, &ac->ac_b_ex.fe_group,
+					&ac->ac_b_ex.fe_start);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3748: FILE: fs/ext4/mballoc.c:3339:
+	BUG_ON(start < pa->pa_pstart);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3749: FILE: fs/ext4/mballoc.c:3340:
+	BUG_ON(start + len > pa->pa_pstart + pa->pa_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3750: FILE: fs/ext4/mballoc.c:3341:
+	BUG_ON(pa->pa_free < len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3760: FILE: fs/ext4/mballoc.c:3351:
+static void ext4_mb_use_group_pa(struct ext4_allocation_context *ac,
+				struct ext4_prealloc_space *pa)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3762: FILE: fs/ext4/mballoc.c:3353:
+	unsigned len = ac->ac_o_ex.fe_len;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3765: FILE: fs/ext4/mballoc.c:3356:
+	ext4_get_group_no_and_offset(ac->ac_sb, pa->pa_pstart,
+					&ac->ac_b_ex.fe_group,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3774: FILE: fs/ext4/mballoc.c:3365:
+	 * in on-disk bitmap -- see ext4_mb_release_context() */

WARNING:TYPO_SPELLING: 'enought' may be misspelled - perhaps 'enough'?
#3777: FILE: fs/ext4/mballoc.c:3368:
+	 * pa and think that it have enought free blocks if we
 	                             ^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3780: FILE: fs/ext4/mballoc.c:3371:
+	mb_debug("use %u/%u from group pa %p\n", pa->pa_lstart-len, len, pa);
 	                                                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3803: FILE: fs/ext4/mballoc.c:3394:
+		 * so we can skip locking for them */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3805: FILE: fs/ext4/mballoc.c:3396:
+		if (ac->ac_o_ex.fe_logical < pa->pa_lstart ||
+			ac->ac_o_ex.fe_logical >= pa->pa_lstart + pa->pa_len)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lg"
#3828: FILE: fs/ext4/mballoc.c:3419:
+	if (lg == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3855: FILE: fs/ext4/mballoc.c:3446:
+static void ext4_mb_generate_from_pa(struct super_block *sb, void *bitmap,
+					ext4_group_t group)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3883: FILE: fs/ext4/mballoc.c:3474:
+		BUG_ON(groupnr != group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3885: FILE: fs/ext4/mballoc.c:3476:
+		mb_set_bits(sb_bgl_lock(EXT4_SB(sb), group),
+						bitmap, start, len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3895: FILE: fs/ext4/mballoc.c:3486:
+	struct ext4_prealloc_space *pa;
+	pa = container_of(head, struct ext4_prealloc_space, u.pa_rcu);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3898: FILE: fs/ext4/mballoc.c:3489:
+}
+#define mb_call_rcu(__pa)	call_rcu(&(__pa)->u.pa_rcu, ext4_mb_pa_callback)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3905: FILE: fs/ext4/mballoc.c:3496:
+static void ext4_mb_put_pa(struct ext4_allocation_context *ac,
+			struct super_block *sb, struct ext4_prealloc_space *pa)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3931: FILE: fs/ext4/mballoc.c:3522:
+^I *  ^I^I^I^I^Imark B in on-disk bitmap$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3961: FILE: fs/ext4/mballoc.c:3552:
+	BUG_ON(ac->ac_o_ex.fe_len >= ac->ac_b_ex.fe_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3962: FILE: fs/ext4/mballoc.c:3553:
+	BUG_ON(ac->ac_status != AC_STATUS_FOUND);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3963: FILE: fs/ext4/mballoc.c:3554:
+	BUG_ON(!S_ISREG(ac->ac_inode->i_mode));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pa"
#3966: FILE: fs/ext4/mballoc.c:3557:
+	if (pa == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3977: FILE: fs/ext4/mballoc.c:3568:
+		 * to cover original request */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3978: FILE: fs/ext4/mballoc.c:3569:
+		BUG_ON(ac->ac_g_ex.fe_logical > ac->ac_o_ex.fe_logical);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3979: FILE: fs/ext4/mballoc.c:3570:
+		BUG_ON(ac->ac_g_ex.fe_len < ac->ac_o_ex.fe_len);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3983: FILE: fs/ext4/mballoc.c:3574:
+		 * winl is window we can move our chunk within */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3997: FILE: fs/ext4/mballoc.c:3588:
+		BUG_ON(ac->ac_o_ex.fe_logical < ac->ac_b_ex.fe_logical);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3998: FILE: fs/ext4/mballoc.c:3589:
+		BUG_ON(ac->ac_o_ex.fe_len > ac->ac_b_ex.fe_len);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4002: FILE: fs/ext4/mballoc.c:3593:
+	 * allocated blocks for history */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4015: FILE: fs/ext4/mballoc.c:3606:
+	mb_debug("new inode pa %p: %llu/%u for %u\n", pa,
+			pa->pa_pstart, pa->pa_len, pa->pa_lstart);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4048: FILE: fs/ext4/mballoc.c:3639:
+	BUG_ON(ac->ac_o_ex.fe_len >= ac->ac_b_ex.fe_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4049: FILE: fs/ext4/mballoc.c:3640:
+	BUG_ON(ac->ac_status != AC_STATUS_FOUND);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4050: FILE: fs/ext4/mballoc.c:3641:
+	BUG_ON(!S_ISREG(ac->ac_inode->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4052: FILE: fs/ext4/mballoc.c:3643:
+	BUG_ON(ext4_pspace_cachep == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ext4_pspace_cachep"
#4052: FILE: fs/ext4/mballoc.c:3643:
+	BUG_ON(ext4_pspace_cachep == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pa"
#4054: FILE: fs/ext4/mballoc.c:3645:
+	if (pa == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4058: FILE: fs/ext4/mballoc.c:3649:
+	 * allocated blocks for history */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4071: FILE: fs/ext4/mballoc.c:3662:
+	mb_debug("new group pa %p: %llu/%u for %u\n", pa,
+			pa->pa_pstart, pa->pa_len, pa->pa_lstart);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4078: FILE: fs/ext4/mballoc.c:3669:
+	BUG_ON(lg == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lg"
#4078: FILE: fs/ext4/mballoc.c:3669:
+	BUG_ON(lg == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4114: FILE: fs/ext4/mballoc.c:3705:
+static int ext4_mb_release_inode_pa(struct ext4_buddy *e4b,
+				struct buffer_head *bitmap_bh,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4128: FILE: fs/ext4/mballoc.c:3719:
+	BUG_ON(pa->pa_deleted == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4130: FILE: fs/ext4/mballoc.c:3721:
+	BUG_ON(group != e4b->bd_group && pa->pa_len != 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4147: FILE: fs/ext4/mballoc.c:3738:
+		mb_debug("    free preallocated %u/%u in group %u\n",
+				(unsigned) start, (unsigned) next - bit,

CHECK:SPACING: No space is necessary after a cast
#4147: FILE: fs/ext4/mballoc.c:3738:
+				(unsigned) start, (unsigned) next - bit,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4147: FILE: fs/ext4/mballoc.c:3738:
+				(unsigned) start, (unsigned) next - bit,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4147: FILE: fs/ext4/mballoc.c:3738:
+				(unsigned) start, (unsigned) next - bit,

CHECK:SPACING: No space is necessary after a cast
#4148: FILE: fs/ext4/mballoc.c:3739:
+				(unsigned) group);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4148: FILE: fs/ext4/mballoc.c:3739:
+				(unsigned) group);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4161: FILE: fs/ext4/mballoc.c:3752:
+		printk(KERN_ERR "pa %p: logic %lu, phys. %lu, len %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4162: FILE: fs/ext4/mballoc.c:3753:
+		printk(KERN_ERR "pa %p: logic %lu, phys. %lu, len %lu\n",
+			pa, (unsigned long) pa->pa_lstart,

CHECK:SPACING: No space is necessary after a cast
#4162: FILE: fs/ext4/mballoc.c:3753:
+			pa, (unsigned long) pa->pa_lstart,

CHECK:SPACING: No space is necessary after a cast
#4163: FILE: fs/ext4/mballoc.c:3754:
+			(unsigned long) pa->pa_pstart,

CHECK:SPACING: No space is necessary after a cast
#4164: FILE: fs/ext4/mballoc.c:3755:
+			(unsigned long) pa->pa_len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4165: FILE: fs/ext4/mballoc.c:3756:
+		printk(KERN_ERR "free %u, pa_free %u\n", free, pa->pa_free);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4167: FILE: fs/ext4/mballoc.c:3758:
+	BUG_ON(free != pa->pa_free);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4174: FILE: fs/ext4/mballoc.c:3765:
+static int ext4_mb_release_group_pa(struct ext4_buddy *e4b,
+				struct ext4_prealloc_space *pa)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4183: FILE: fs/ext4/mballoc.c:3774:
+	BUG_ON(pa->pa_deleted == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4185: FILE: fs/ext4/mballoc.c:3776:
+	BUG_ON(group != e4b->bd_group && pa->pa_len != 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4210: FILE: fs/ext4/mballoc.c:3801:
+static int ext4_mb_discard_group_preallocations(struct super_block *sb,
+					ext4_group_t group, int needed)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bitmap_bh"
#4227: FILE: fs/ext4/mballoc.c:3818:
+	if (bitmap_bh == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4230: FILE: fs/ext4/mballoc.c:3821:
+		BUG_ON(bitmap_bh == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bitmap_bh"
#4230: FILE: fs/ext4/mballoc.c:3821:
+		BUG_ON(bitmap_bh == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4234: FILE: fs/ext4/mballoc.c:3825:
+	BUG_ON(err != 0); /* error handling here */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4245: FILE: fs/ext4/mballoc.c:3836:
+	list_for_each_entry_safe(pa, tmp,
+				&grp->bb_prealloc_list, pa_group_list) {

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#4277: FILE: fs/ext4/mballoc.c:3868:
+		yield();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4283: FILE: fs/ext4/mballoc.c:3874:
+		BUG_ON(free != 0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4289: FILE: fs/ext4/mballoc.c:3880:
+	list_for_each_entry_safe(pa, tmp, &list, u.pa_tmp_list) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4346: FILE: fs/ext4/mballoc.c:3937:
+		BUG_ON(pa->pa_obj_lock != &ei->i_prealloc_lock);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4350: FILE: fs/ext4/mballoc.c:3941:
+			 * use preallocation while we're discarding it */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4353: FILE: fs/ext4/mballoc.c:3944:
+			printk(KERN_ERR "uh-oh! used pa while discarding\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4359: FILE: fs/ext4/mballoc.c:3950:
+
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4378: FILE: fs/ext4/mballoc.c:3969:
+		 * freed memory, bad-bad-bad */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4383: FILE: fs/ext4/mballoc.c:3974:
+		 * regular truncate */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4391: FILE: fs/ext4/mballoc.c:3982:
+		BUG_ON(pa->pa_linear != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4395: FILE: fs/ext4/mballoc.c:3986:
+		BUG_ON(err != 0); /* error handling here */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bitmap_bh"
#4398: FILE: fs/ext4/mballoc.c:3989:
+		if (bitmap_bh == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4401: FILE: fs/ext4/mballoc.c:3992:
+			BUG_ON(bitmap_bh == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bitmap_bh"
#4401: FILE: fs/ext4/mballoc.c:3992:
+			BUG_ON(bitmap_bh == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4425: FILE: fs/ext4/mballoc.c:4016:
+static void ext4_mb_return_to_preallocation(struct inode *inode,
+					struct ext4_buddy *e4b,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4428: FILE: fs/ext4/mballoc.c:4019:
+	BUG_ON(!list_empty(&EXT4_I(inode)->i_prealloc_list));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4430: FILE: fs/ext4/mballoc.c:4021:
+}
+#ifdef MB_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4436: FILE: fs/ext4/mballoc.c:4027:
+	printk(KERN_ERR "EXT4-fs: Can't allocate:"

WARNING:SPLIT_STRING: quoted string split across lines
#4437: FILE: fs/ext4/mballoc.c:4028:
+	printk(KERN_ERR "EXT4-fs: Can't allocate:"
+			" Allocation context details:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4438: FILE: fs/ext4/mballoc.c:4029:
+	printk(KERN_ERR "EXT4-fs: status %d flags %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4439: FILE: fs/ext4/mballoc.c:4030:
+	printk(KERN_ERR "EXT4-fs: status %d flags %d\n",
+			ac->ac_status, ac->ac_flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4440: FILE: fs/ext4/mballoc.c:4031:
+	printk(KERN_ERR "EXT4-fs: orig %lu/%lu/%lu@%lu, goal %lu/%lu/%lu@%lu, "

WARNING:SPLIT_STRING: quoted string split across lines
#4441: FILE: fs/ext4/mballoc.c:4032:
+	printk(KERN_ERR "EXT4-fs: orig %lu/%lu/%lu@%lu, goal %lu/%lu/%lu@%lu, "
+			"best %lu/%lu/%lu@%lu cr %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4455: FILE: fs/ext4/mballoc.c:4046:
+	printk(KERN_ERR "EXT4-fs: %lu scanned, %d found\n", ac->ac_ex_scanned,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4456: FILE: fs/ext4/mballoc.c:4047:
+	printk(KERN_ERR "EXT4-fs: %lu scanned, %d found\n", ac->ac_ex_scanned,
+		ac->ac_found);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4457: FILE: fs/ext4/mballoc.c:4048:
+	printk(KERN_ERR "EXT4-fs: groups: \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#4457: FILE: fs/ext4/mballoc.c:4048:
+	printk(KERN_ERR "EXT4-fs: groups: \n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#4463: FILE: fs/ext4/mballoc.c:4054:
+		struct list_head *cur;
+		list_for_each_rcu(cur, &grp->bb_prealloc_list) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4470: FILE: fs/ext4/mballoc.c:4061:
+			printk(KERN_ERR "PA:%lu:%d:%u \n", i,

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#4470: FILE: fs/ext4/mballoc.c:4061:
+			printk(KERN_ERR "PA:%lu:%d:%u \n", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4471: FILE: fs/ext4/mballoc.c:4062:
+			printk(KERN_ERR "PA:%lu:%d:%u \n", i,
+							start, pa->pa_len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4476: FILE: fs/ext4/mballoc.c:4067:
+		printk(KERN_ERR "%lu: %d/%d \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#4476: FILE: fs/ext4/mballoc.c:4067:
+		printk(KERN_ERR "%lu: %d/%d \n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4479: FILE: fs/ext4/mballoc.c:4070:
+	printk(KERN_ERR "\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4513: FILE: fs/ext4/mballoc.c:4104:
+	BUG_ON(ac->ac_lg != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ac->ac_lg"
#4513: FILE: fs/ext4/mballoc.c:4104:
+	BUG_ON(ac->ac_lg != NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4525: FILE: fs/ext4/mballoc.c:4116:
+static int ext4_mb_initialize_context(struct ext4_allocation_context *ac,
+				struct ext4_allocation_request *ar)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4545: FILE: fs/ext4/mballoc.c:4136:
+	if (goal < le32_to_cpu(es->s_first_data_block) ||
+			goal >= ext4_blocks_count(es))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4578: FILE: fs/ext4/mballoc.c:4169:
+	 * locality group. this is a policy, actually */

WARNING:SPLIT_STRING: quoted string split across lines
#4582: FILE: fs/ext4/mballoc.c:4173:
+	mb_debug("init ac: %u blocks @ %u, goal %u, flags %x, 2^%d, "
+			"left: %u/%u, right %u/%u to %swritable\n",

CHECK:SPACING: No space is necessary after a cast
#4583: FILE: fs/ext4/mballoc.c:4174:
+			(unsigned) ar->len, (unsigned) ar->logical,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4583: FILE: fs/ext4/mballoc.c:4174:
+			(unsigned) ar->len, (unsigned) ar->logical,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4583: FILE: fs/ext4/mballoc.c:4174:
+			(unsigned) ar->len, (unsigned) ar->logical,

CHECK:SPACING: No space is necessary after a cast
#4584: FILE: fs/ext4/mballoc.c:4175:
+			(unsigned) ar->goal, ac->ac_flags, ac->ac_2order,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4584: FILE: fs/ext4/mballoc.c:4175:
+			(unsigned) ar->goal, ac->ac_flags, ac->ac_2order,

CHECK:SPACING: No space is necessary after a cast
#4585: FILE: fs/ext4/mballoc.c:4176:
+			(unsigned) ar->lleft, (unsigned) ar->pleft,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4585: FILE: fs/ext4/mballoc.c:4176:
+			(unsigned) ar->lleft, (unsigned) ar->pleft,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4585: FILE: fs/ext4/mballoc.c:4176:
+			(unsigned) ar->lleft, (unsigned) ar->pleft,

CHECK:SPACING: No space is necessary after a cast
#4586: FILE: fs/ext4/mballoc.c:4177:
+			(unsigned) ar->lright, (unsigned) ar->pright,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4586: FILE: fs/ext4/mballoc.c:4177:
+			(unsigned) ar->lright, (unsigned) ar->pright,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4586: FILE: fs/ext4/mballoc.c:4177:
+			(unsigned) ar->lright, (unsigned) ar->pright,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4590: FILE: fs/ext4/mballoc.c:4181:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4640: FILE: fs/ext4/mballoc.c:4231:
+ext4_fsblk_t ext4_mb_new_blocks(handle_t *handle,
+				 struct ext4_allocation_request *ar, int *errp)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ar->len
#4654: FILE: fs/ext4/mballoc.c:4245:
+					    &(ar->len), errp);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4678: FILE: fs/ext4/mballoc.c:4269:
+	if (!ext4_mb_use_preallocated(&ac)) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4688: FILE: fs/ext4/mballoc.c:4279:
+		 * space in a special descriptor */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4690: FILE: fs/ext4/mballoc.c:4281:
+		if (ac.ac_status == AC_STATUS_FOUND &&
+				ac.ac_o_ex.fe_len < ac.ac_b_ex.fe_len)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4717: FILE: fs/ext4/mballoc.c:4308:
+}
+static void ext4_mb_poll_new_transaction(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4718: FILE: fs/ext4/mballoc.c:4309:
+static void ext4_mb_poll_new_transaction(struct super_block *sb,
+						handle_t *handle)

WARNING:TYPO_SPELLING: 'previos' may be misspelled - perhaps 'previous'?
#4727: FILE: fs/ext4/mballoc.c:4318:
+	 * active, so previos transaction can be being logged and we
 	              ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4730: FILE: fs/ext4/mballoc.c:4321:
+	 * transactions before previous one. hope I'm clear enough ... */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4735: FILE: fs/ext4/mballoc.c:4326:
+		mb_debug("new transaction %lu, old %lu\n",
+				(unsigned long) handle->h_transaction->t_tid,

CHECK:SPACING: No space is necessary after a cast
#4735: FILE: fs/ext4/mballoc.c:4326:
+				(unsigned long) handle->h_transaction->t_tid,

CHECK:SPACING: No space is necessary after a cast
#4736: FILE: fs/ext4/mballoc.c:4327:
+				(unsigned long) sbi->s_last_transaction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4738: FILE: fs/ext4/mballoc.c:4329:
+		list_splice_init(&sbi->s_closed_transaction,
+				&sbi->s_committed_transaction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4740: FILE: fs/ext4/mballoc.c:4331:
+		list_splice_init(&sbi->s_active_transaction,
+				&sbi->s_closed_transaction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4749: FILE: fs/ext4/mballoc.c:4340:
+static int ext4_mb_free_metadata(handle_t *handle, struct ext4_buddy *e4b,
+			  ext4_group_t group, ext4_grpblk_t block, int count)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4757: FILE: fs/ext4/mballoc.c:4348:
+	BUG_ON(e4b->bd_bitmap_page == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e4b->bd_bitmap_page"
#4757: FILE: fs/ext4/mballoc.c:4348:
+	BUG_ON(e4b->bd_bitmap_page == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4758: FILE: fs/ext4/mballoc.c:4349:
+	BUG_ON(e4b->bd_buddy_page == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e4b->bd_buddy_page"
#4758: FILE: fs/ext4/mballoc.c:4349:
+	BUG_ON(e4b->bd_buddy_page == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!md"
#4768: FILE: fs/ext4/mballoc.c:4359:
+		if (md == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!md"
#4771: FILE: fs/ext4/mballoc.c:4362:
+			if (md == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!db->bb_md_cur"
#4777: FILE: fs/ext4/mballoc.c:4368:
+			if (db->bb_md_cur == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4784: FILE: fs/ext4/mballoc.c:4375:
+				 * blocks */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4790: FILE: fs/ext4/mballoc.c:4381:
+				mb_debug("new md 0x%p for group %lu\n",
+						md, md->group);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4797: FILE: fs/ext4/mballoc.c:4388:
+		BUG_ON(md->num >= EXT4_BB_MAX_BLOCKS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4813: FILE: fs/ext4/mballoc.c:4404:
+void ext4_mb_free_blocks(handle_t *handle, struct inode *inode,
+			unsigned long block, unsigned long count,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#4839: FILE: fs/ext4/mballoc.c:4430:
+		ext4_error(sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4840: FILE: fs/ext4/mballoc.c:4431:
+		ext4_error(sb, __FUNCTION__,
+			    "Freeing blocks not in datazone - "

WARNING:SPLIT_STRING: quoted string split across lines
#4841: FILE: fs/ext4/mballoc.c:4432:
+			    "Freeing blocks not in datazone - "
+			    "block = %lu, count = %lu", block, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4874: FILE: fs/ext4/mballoc.c:4465:
+	    in_range(block, ext4_inode_table(sb, gdp),
+		      EXT4_SB(sb)->s_itb_per_group) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4876: FILE: fs/ext4/mballoc.c:4467:
+	    in_range(block + count - 1, ext4_inode_table(sb, gdp),
+		      EXT4_SB(sb)->s_itb_per_group)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4877: FILE: fs/ext4/mballoc.c:4468:
+		      EXT4_SB(sb)->s_itb_per_group)) {
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#4878: FILE: fs/ext4/mballoc.c:4469:
+		ext4_error(sb, __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#4880: FILE: fs/ext4/mballoc.c:4471:
+			   "Freeing blocks in system zone - "
+			   "Block = %lu, count = %lu", block, count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4905: FILE: fs/ext4/mballoc.c:4496:
+		int i;
+		for (i = 0; i < count; i++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4906: FILE: fs/ext4/mballoc.c:4497:
+			BUG_ON(!mb_test_bit(bit + i, bitmap_bh->b_data));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4910: FILE: fs/ext4/mballoc.c:4501:
+	mb_clear_bits(sb_bgl_lock(sbi, block_group), bitmap_bh->b_data,
+			bit, count);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4923: FILE: fs/ext4/mballoc.c:4514:
+		 * be used until this transaction is committed */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4930: FILE: fs/ext4/mballoc.c:4521:
+		BUG_ON(err != 0);

WARNING:RETURN_VOID: void function return statements are not generally useful
#4960: FILE: fs/ext4/mballoc.c:4551:
+	return;
+}

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mballoc>
#5031: FILE: fs/ext4/super.c:887:
+	Opt_mballoc, Opt_nomballoc, Opt_stripe,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nomballoc>
#5031: FILE: fs/ext4/super.c:887:
+	Opt_mballoc, Opt_nomballoc, Opt_stripe,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_stripe>
#5031: FILE: fs/ext4/super.c:887:
+	Opt_mballoc, Opt_nomballoc, Opt_stripe,

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#5086: FILE: fs/ext4/super.c:1782:
+	if (sbi->s_stripe && sbi->s_stripe <= sbi->s_blocks_per_group) {
[...]
+	} else if (stripe_width <= sbi->s_blocks_per_group) {
[...]
+	} else if (stride <= sbi->s_blocks_per_group) {
[...]

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5260: FILE: include/linux/ext4_fs.h:1003:
+extern int ext4_mb_init(struct super_block *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#5260: FILE: include/linux/ext4_fs.h:1003:
+extern int ext4_mb_init(struct super_block *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#5260: FILE: include/linux/ext4_fs.h:1003:
+extern int ext4_mb_init(struct super_block *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5261: FILE: include/linux/ext4_fs.h:1004:
+extern int ext4_mb_release(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#5261: FILE: include/linux/ext4_fs.h:1004:
+extern int ext4_mb_release(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5262: FILE: include/linux/ext4_fs.h:1005:
+extern ext4_fsblk_t ext4_mb_new_blocks(handle_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#5262: FILE: include/linux/ext4_fs.h:1005:
+extern ext4_fsblk_t ext4_mb_new_blocks(handle_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_allocation_request *' should also have an identifier name
#5262: FILE: include/linux/ext4_fs.h:1005:
+extern ext4_fsblk_t ext4_mb_new_blocks(handle_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#5262: FILE: include/linux/ext4_fs.h:1005:
+extern ext4_fsblk_t ext4_mb_new_blocks(handle_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5263: FILE: include/linux/ext4_fs.h:1006:
+extern ext4_fsblk_t ext4_mb_new_blocks(handle_t *,
+				struct ext4_allocation_request *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5264: FILE: include/linux/ext4_fs.h:1007:
+extern int ext4_mb_reserve_blocks(struct super_block *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#5264: FILE: include/linux/ext4_fs.h:1007:
+extern int ext4_mb_reserve_blocks(struct super_block *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#5264: FILE: include/linux/ext4_fs.h:1007:
+extern int ext4_mb_reserve_blocks(struct super_block *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5265: FILE: include/linux/ext4_fs.h:1008:
+extern void ext4_mb_discard_inode_preallocations(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#5265: FILE: include/linux/ext4_fs.h:1008:
+extern void ext4_mb_discard_inode_preallocations(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5266: FILE: include/linux/ext4_fs.h:1009:
+extern int __init init_ext4_mballoc(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5267: FILE: include/linux/ext4_fs.h:1010:
+extern void exit_ext4_mballoc(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5268: FILE: include/linux/ext4_fs.h:1011:
+extern void ext4_mb_free_blocks(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#5268: FILE: include/linux/ext4_fs.h:1011:
+extern void ext4_mb_free_blocks(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#5268: FILE: include/linux/ext4_fs.h:1011:
+extern void ext4_mb_free_blocks(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#5268: FILE: include/linux/ext4_fs.h:1011:
+extern void ext4_mb_free_blocks(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#5268: FILE: include/linux/ext4_fs.h:1011:
+extern void ext4_mb_free_blocks(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#5268: FILE: include/linux/ext4_fs.h:1011:
+extern void ext4_mb_free_blocks(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#5268: FILE: include/linux/ext4_fs.h:1011:
+extern void ext4_mb_free_blocks(handle_t *, struct inode *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5269: FILE: include/linux/ext4_fs.h:1012:
+extern void ext4_mb_free_blocks(handle_t *, struct inode *,
+		unsigned long, unsigned long, int, unsigned long *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5280: FILE: include/linux/ext4_fs.h:1146:
+struct ext4_group_info *ext4_get_group_info(struct super_block *sb,
+							ext4_group_t group)

WARNING:TABSTOP: Statements should start on a tabstop
#5282: FILE: include/linux/ext4_fs.h:1148:
+	 struct ext4_group_info ***grp_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#5284: FILE: include/linux/ext4_fs.h:1150:
+	 long indexv, indexh;
+	 grp_info = EXT4_SB(sb)->s_group_info;

WARNING:TABSTOP: Statements should start on a tabstop
#5287: FILE: include/linux/ext4_fs.h:1153:
+	 return grp_info[indexv][indexh];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5290: FILE: include/linux/ext4_fs.h:1156:
+
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#5305: FILE: include/linux/ext4_fs_i.h:164:
+	spinlock_t i_prealloc_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#5322: FILE: include/linux/ext4_fs_sb.h:99:
+	spinlock_t s_reserve_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#5326: FILE: include/linux/ext4_fs_sb.h:103:
+	spinlock_t s_md_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#5348: FILE: include/linux/ext4_fs_sb.h:125:
+	spinlock_t s_mb_history_lock;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333597.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 296 warnings, 259 checks, 5188 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333597.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
