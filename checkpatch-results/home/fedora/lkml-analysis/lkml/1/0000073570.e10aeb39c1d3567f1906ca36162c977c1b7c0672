WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git core-rcu-for-linus

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#58: 
      rcu: Make preemptable RCU scan all CPUs when summing RCU counters
                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#249: FILE: Documentation/RCU/UP.txt:91:
+to return immediately on UP systems, except when running preemptable
                                                          ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#253: FILE: Documentation/RCU/UP.txt:95:
+	UP systems running preemptable RCU?
 	                   ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#264: FILE: Documentation/RCU/UP.txt:129:
+	running preemptable RCU?
 	        ^^^^^^^^^^^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#525: FILE: include/linux/cpu.h:58:
+#define cpu_notifier(fn, pri)	do { (void)(fn); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#534: FILE: include/linux/cpu.h:86:
+#define cpu_notifier(fn, pri)	do { (void)(fn); } while (0)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#626: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#819: FILE: include/linux/rcupdate.h:55:
+extern void synchronize_rcu(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#820: FILE: include/linux/rcupdate.h:56:
+extern void synchronize_rcu_bh(void);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_rcu_bh', prefer 'synchronize_rcu' instead
#820: FILE: include/linux/rcupdate.h:56:
+extern void synchronize_rcu_bh(void);

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#821: FILE: include/linux/rcupdate.h:57:
+extern void rcu_barrier(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#822: FILE: include/linux/rcupdate.h:58:
+extern void rcu_barrier_bh(void);

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_bh', prefer 'rcu_barrier' instead
#822: FILE: include/linux/rcupdate.h:58:
+extern void rcu_barrier_bh(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#823: FILE: include/linux/rcupdate.h:59:
+extern void rcu_barrier_sched(void);

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_sched', prefer 'rcu_barrier' instead
#823: FILE: include/linux/rcupdate.h:59:
+extern void rcu_barrier_sched(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#824: FILE: include/linux/rcupdate.h:60:
+extern void synchronize_sched_expedited(void);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched_expedited', prefer 'synchronize_rcu_expedited' instead
#824: FILE: include/linux/rcupdate.h:60:
+extern void synchronize_sched_expedited(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#825: FILE: include/linux/rcupdate.h:61:
+extern int sched_expedited_torture_stats(char *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#828: FILE: include/linux/rcupdate.h:64:
+extern void rcu_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#829: FILE: include/linux/rcupdate.h:65:
+extern void rcu_scheduler_starting(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#830: FILE: include/linux/rcupdate.h:66:
+extern int rcu_needs_cpu(int cpu);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#931: FILE: include/linux/rcupdate.h:194:
+}
+static inline notrace void rcu_read_lock_sched_notrace(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#951: FILE: include/linux/rcupdate.h:211:
+}
+static inline notrace void rcu_read_unlock_sched_notrace(void)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1224: FILE: include/linux/rcutree.h:33:
+extern void rcu_sched_qs(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1225: FILE: include/linux/rcutree.h:34:
+extern void rcu_bh_qs(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1431: FILE: include/linux/rcutree.h:36:
+extern int rcu_needs_cpu(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1439: FILE: include/linux/rcutree.h:40:
+extern void __rcu_read_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1440: FILE: include/linux/rcutree.h:41:
+extern void __rcu_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1441: FILE: include/linux/rcutree.h:42:
+extern void exit_rcu(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1490: FILE: include/linux/rcutree.h:73:
+extern void call_rcu_sched(struct rcu_head *head,

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#1490: FILE: include/linux/rcutree.h:73:
+extern void call_rcu_sched(struct rcu_head *head,

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched_expedited', prefer 'synchronize_rcu_expedited' instead
#1496: FILE: include/linux/rcutree.h:78:
+	synchronize_sched_expedited();

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_rcu_bh_expedited', prefer 'synchronize_rcu_expedited' instead
#1499: FILE: include/linux/rcutree.h:81:
+static inline void synchronize_rcu_bh_expedited(void)

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched_expedited', prefer 'synchronize_rcu_expedited' instead
#1501: FILE: include/linux/rcutree.h:83:
+	synchronize_sched_expedited();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1509: FILE: include/linux/rcutree.h:92:
+extern long rcu_batches_completed_sched(void);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1552: FILE: include/linux/sched.h:1733:
+#define RCU_READ_UNLOCK_BLOCKED (1 << 0) /* blocked while in RCU read-side. */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1553: FILE: include/linux/sched.h:1734:
+#define RCU_READ_UNLOCK_NEED_QS (1 << 1) /* RCU core needs CPU response. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1554: FILE: include/linux/sched.h:1735:
+#define RCU_READ_UNLOCK_GOT_QS  (1 << 2) /* CPU has responded to RCU core. */

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1603: FILE: init/Kconfig:327:
+config TREE_PREEMPT_RCU
+	bool "Preemptable tree-based hierarchical RCU"
 	depends on PREEMPT
 	help
+	  This option selects the RCU implementation that is
+	  This option selects the RCU implementation that is
+	  This option selects the RCU implementation that is
+	  This option selects the RCU implementation that is
+	  This option selects the RCU implementation that is
+	  This option selects the RCU implementation that is
+	  This option selects the RCU implementation that is
+	  designed for very large SMP systems with hundreds or
+	  thousands of CPUs, but for which real-time response
+	  is also required.
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'Preemptable' may be misspelled - perhaps 'Preemptible'?
#1604: FILE: init/Kconfig:328:
+	bool "Preemptable tree-based hierarchical RCU"
 	      ^^^^^^^^^^^

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_rcu_bh', prefer 'synchronize_rcu' instead
#2563: FILE: kernel/rcupdate.c:110:
+void synchronize_rcu_bh(void)

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#2572: FILE: kernel/rcupdate.c:119:
+	call_rcu_bh(&rcu.head, wakeme_after_rcu);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4575: FILE: kernel/rcutorture.c:342:
+^I.irq_capable ^I= 1,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4576: FILE: kernel/rcutorture.c:343:
+^I.name ^I^I= "rcu"$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#4753: FILE: kernel/rcutorture.c:605:
+extern int rcu_expedited_torture_stats(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#4854: FILE: kernel/rcutree.c:83:
+extern long rcu_batches_completed_sched(void);

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#4869: FILE: kernel/rcutree.c:98:
+					   int preemptable);
 					       ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#4936: FILE: kernel/rcutree.c:216:
+	/* If preemptable RCU, no point in sending reschedule IPI. */
 	      ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#4937: FILE: kernel/rcutree.c:217:
+	if (rdp->preemptable)
 	         ^^^^^^^^^^^

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#5176: FILE: kernel/rcutree.c:1285:
+void call_rcu_sched(struct rcu_head *head, void (*func)(struct rcu_head *rcu))

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#5256: FILE: kernel/rcutree.c:1414:
+rcu_init_percpu_data(int cpu, struct rcu_state *rsp, int preemptable)
                                                          ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#5266: FILE: kernel/rcutree.c:1430:
+	rdp->preemptable = preemptable;
 	     ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#5266: FILE: kernel/rcutree.c:1430:
+	rdp->preemptable = preemptable;
 	                   ^^^^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rsp' - possible side-effects?
#5330: FILE: kernel/rcutree.c:1583:
+#define RCU_INIT_FLAVOR(rsp, rcu_data) \
 do { \
+	rcu_init_one(rsp); \
 	rnp = (rsp)->level[NUM_RCU_LVLS - 1]; \
 	j = 0; \
 	for_each_possible_cpu(i) { \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5399: FILE: kernel/rcutree.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5414: FILE: kernel/rcutree.h:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5415: FILE: kernel/rcutree.h:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#5446: FILE: kernel/rcutree.h:48:
+#elif NR_CPUS <= RCU_FANOUT_SQ

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#5452: FILE: kernel/rcutree.h:54:
+#elif NR_CPUS <= RCU_FANOUT_CUBE

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#5480: FILE: kernel/rcutree.h:82:
+	spinlock_t lock;

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#5517: FILE: kernel/rcutree.h:119:
+	bool		preemptable;	/* Preemptable RCU? */
 	    		^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'Preemptable' may be misspelled - perhaps 'Preemptible'?
#5517: FILE: kernel/rcutree.h:119:
+	bool		preemptable;	/* Preemptable RCU? */
 	    		            	   ^^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5543: FILE: kernel/rcutree.h:145:
+^Ilong^I^Iqlen; ^I ^I/* # of queued callbacks */$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5666: FILE: kernel/rcutree_plugin.h:1:
+/*

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#5669: FILE: kernel/rcutree_plugin.h:4:
+ * or preemptable semantics.
       ^^^^^^^^^^^

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5682: FILE: kernel/rcutree_plugin.h:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5683: FILE: kernel/rcutree_plugin.h:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5692: FILE: kernel/rcutree_plugin.h:27:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5703: FILE: kernel/rcutree_plugin.h:38:
+	printk(KERN_INFO

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#5704: FILE: kernel/rcutree_plugin.h:39:
+	       "Experimental preemptable hierarchical RCU implementation.\n");
 	                     ^^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#5735: FILE: kernel/rcutree_plugin.h:70:
+	struct rcu_data *rdp = &per_cpu(rcu_preempt_data, cpu);
+	rdp->passed_quiesc = 1;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5754: FILE: kernel/rcutree_plugin.h:89:
+	    (t->rcu_read_unlock_special & RCU_READ_UNLOCK_BLOCKED) == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rnp->parent"
#5865: FILE: kernel/rcutree_plugin.h:200:
+			if (rnp->parent == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5919: FILE: kernel/rcutree_plugin.h:254:
+			printk(" P%d", t->pid);

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#5982: FILE: kernel/rcutree_plugin.h:317:
+ * Do CPU-offline processing for preemptable RCU.
                                  ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6020: FILE: kernel/rcutree_plugin.h:355:
+ * Process callbacks for preemptable RCU.
                          ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6048: FILE: kernel/rcutree_plugin.h:383:
+ * Does preemptable RCU need the CPU to stay out of dynticks mode?
         ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6056: FILE: kernel/rcutree_plugin.h:391:
+ * Initialize preemptable RCU's per-CPU data.
               ^^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#6086: FILE: kernel/rcutree_plugin.h:421:
+	printk(KERN_INFO "Hierarchical RCU implementation.\n");

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6099: FILE: kernel/rcutree_plugin.h:434:
+ * Because preemptable RCU does not exist, we never have to check for
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6109: FILE: kernel/rcutree_plugin.h:444:
+ * Because preemptable RCU does not exist, we never have to check for
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6119: FILE: kernel/rcutree_plugin.h:454:
+ * Because preemptable RCU does not exist, there are never any preempted
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6130: FILE: kernel/rcutree_plugin.h:465:
+ * Because preemptable RCU does not exist, it never needs to migrate
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6139: FILE: kernel/rcutree_plugin.h:474:
+ * Because preemptable RCU does not exist, it never needs CPU-offline
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6149: FILE: kernel/rcutree_plugin.h:484:
+ * Because preemptable RCU does not exist, it never has any callbacks
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6157: FILE: kernel/rcutree_plugin.h:492:
+ * Because preemptable RCU does not exist, it never has any callbacks
            ^^^^^^^^^^^

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#6169: FILE: kernel/rcutree_plugin.h:504:
+	call_rcu_sched(head, func);

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6174: FILE: kernel/rcutree_plugin.h:509:
+ * Because preemptable RCU does not exist, it never has any work to do.
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6182: FILE: kernel/rcutree_plugin.h:517:
+ * Because preemptable RCU does not exist, it never needs any CPU.
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#6190: FILE: kernel/rcutree_plugin.h:525:
+ * Because preemptable RCU does not exist, there is no per-CPU
            ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6315: FILE: kernel/rcutree_trace.c:298:
+	retval = debugfs_create_file("rcudata", 0444, rcudir,
 						NULL, &rcudata_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6322: FILE: kernel/rcutree_trace.c:303:
+	retval = debugfs_create_file("rcudata.csv", 0444, rcudir,
 						NULL, &rcudata_csv_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6335: FILE: kernel/rcutree_trace.c:312:
+	retval = debugfs_create_file("rcuhier", 0444, rcudir,
 						NULL, &rcuhier_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6342: FILE: kernel/rcutree_trace.c:317:
+	retval = debugfs_create_file("rcu_pending", 0444, rcudir,
 						NULL, &rcu_pending_fops);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "req->task"
#6411: FILE: kernel/sched.c:7101:
+		if (req->task != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6414: FILE: kernel/sched.c:7104:
+		} else if (likely(cpu == (badcpu = smp_processor_id()))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'migration_thread', this function's name, in a string
#6420: FILE: kernel/sched.c:7110:
+			WARN_ONCE(1, "migration_thread() on CPU %d, expected %d\n", badcpu, cpu);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched_expedited', prefer 'synchronize_rcu_expedited' instead
#6438: FILE: kernel/sched.c:10608:
+void synchronize_sched_expedited(void)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#6459: FILE: kernel/sched.c:10629:
+	for_each_online_cpu(cpu) {
+		 cnt += sprintf(&page[cnt], " %d:%d",

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched_expedited', prefer 'synchronize_rcu_expedited' instead
#6480: FILE: kernel/sched.c:10650:
+void synchronize_sched_expedited(void)

CHECK:BRACES: braces {} should be used on all arms of this statement
#6495: FILE: kernel/sched.c:10665:
+		if (trycount++ < 10)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6497: FILE: kernel/sched.c:10667:
+		else {

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#6498: FILE: kernel/sched.c:10668:
+			synchronize_sched();

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#6534: FILE: kernel/sched.c:10704:
+		synchronize_sched();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073570.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 65 warnings, 35 checks, 3101 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073570.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
