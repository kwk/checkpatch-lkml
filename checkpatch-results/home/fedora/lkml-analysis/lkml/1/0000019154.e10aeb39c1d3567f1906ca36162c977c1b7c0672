WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
The implementation is simple, just create an in-kernel perf event and register

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: arch/x86/kernel/apic/hw_nmi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#74: FILE: arch/x86/kernel/apic/hw_nmi.c:25:
+static DECLARE_BITMAP(backtrace_mask, NR_CPUS) __read_mostly;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#76: FILE: arch/x86/kernel/apic/hw_nmi.c:27:
+static DEFINE_PER_CPU(unsigned, last_irq_sum);

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: arch/x86/kernel/apic/hw_nmi.c:35:
+        return per_cpu(irq_stat, cpu).apic_timer_irqs +$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: arch/x86/kernel/apic/hw_nmi.c:35:
+        return per_cpu(irq_stat, cpu).apic_timer_irqs +$

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: arch/x86/kernel/apic/hw_nmi.c:36:
+                per_cpu(irq_stat, cpu).irq0_irqs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: arch/x86/kernel/apic/hw_nmi.c:36:
+                per_cpu(irq_stat, cpu).irq0_irqs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: arch/x86/kernel/apic/hw_nmi.c:42:
+        return atomic_read(&mce_entry) > 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: arch/x86/kernel/apic/hw_nmi.c:42:
+        return atomic_read(&mce_entry) > 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: arch/x86/kernel/apic/hw_nmi.c:44:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: arch/x86/kernel/apic/hw_nmi.c:44:
+        return 0;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#108: FILE: arch/x86/kernel/apic/hw_nmi.c:59:
+		printk(KERN_WARNING "NMI backtrace for cpu %d\n", cpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: arch/x86/kernel/apic/hw_nmi.c:67:
+        /* Could check oops_in_progress here too, but it's safer not to */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: arch/x86/kernel/apic/hw_nmi.c:68:
+        if (mce_in_progress())$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: arch/x86/kernel/apic/hw_nmi.c:68:
+        if (mce_in_progress())$

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: arch/x86/kernel/apic/hw_nmi.c:69:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: arch/x86/kernel/apic/hw_nmi.c:69:
+                return 0;$

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#128: FILE: arch/x86/kernel/apic/hw_nmi.c:79:
+		return 1;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#140: FILE: arch/x86/kernel/apic/hw_nmi.c:91:
+	printk(KERN_INFO "sending NMI to all CPUs:\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#170: FILE: kernel/nmi_watchdog.c:1:
+/*

WARNING:TYPO_SPELLING: 'arbituary' may be misspelled - perhaps 'arbitrary'?
#202: FILE: kernel/nmi_watchdog.c:33:
+/* arbituary number that updates every ~5 seconds */
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!per_cpu"
#230: FILE: kernel/nmi_watchdog.c:61:
+	if (per_cpu(nmi_watchdog_ev, smp_processor_id()) == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required after that ',' (ctx:VxV)
#276: FILE: kernel/nmi_watchdog.c:107:
+		per_cpu(alert_counter,cpu) += 1;
 		                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#277: FILE: kernel/nmi_watchdog.c:108:
+		printk(KERN_EMERG "DONNMI: %d - ac %ld\n", cpu, per_cpu(alert_counter,cpu));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#277: FILE: kernel/nmi_watchdog.c:108:
+		printk(KERN_EMERG "DONNMI: %d - ac %ld\n", cpu, per_cpu(alert_counter,cpu));
 		                                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: kernel/nmi_watchdog.c:109:
+		if (per_cpu(alert_counter,cpu) == (HZ)) {
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: kernel/nmi_watchdog.c:117:
+		per_cpu(alert_counter,cpu) = 0;
 		                     ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#290: FILE: kernel/nmi_watchdog.c:121:
+	return;
+}

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#308: FILE: kernel/nmi_watchdog.c:139:
+		/* below line should be moved up but compiler doesn't like that, probably the union */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#310: FILE: kernel/nmi_watchdog.c:141:
+		/* originally wanted the below chunk to be in CPU_UP_PREPARE, but caps is unpriv for non-CPU0 */

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#313: FILE: kernel/nmi_watchdog.c:144:
+			printk(KERN_ERR "nmi watchdog failed to create perf event on %i: %p\n", hotcpu, event);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#313: FILE: kernel/nmi_watchdog.c:144:
+			printk(KERN_ERR "nmi watchdog failed to create perf event on %i: %p\n", hotcpu, event);

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after cpu_nfb
#334: FILE: kernel/nmi_watchdog.c:165:
+static struct notifier_block __cpuinitdata cpu_nfb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after nonmi_watchdog
#338: FILE: kernel/nmi_watchdog.c:169:
+static int __initdata nonmi_watchdog;

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#345: FILE: kernel/nmi_watchdog.c:176:
+__setup("nonmi_watchdog", nonmi_watchdog_setup);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#357: FILE: kernel/nmi_watchdog.c:188:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000019154.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 25 warnings, 2 checks, 310 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000019154.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
