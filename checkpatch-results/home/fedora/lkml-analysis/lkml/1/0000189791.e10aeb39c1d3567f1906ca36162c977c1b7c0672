WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#54: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: arch/arm/plat-mxc/include/mach/mx3fb.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: arch/arm/plat-mxc/include/mach/mx3fb.h:38:
+extern int mx3_register_fb(const char *, const struct fb_videomode *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#96: FILE: arch/arm/plat-mxc/include/mach/mx3fb.h:38:
+extern int mx3_register_fb(const char *, const struct fb_videomode *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct fb_videomode *' should also have an identifier name
#96: FILE: arch/arm/plat-mxc/include/mach/mx3fb.h:38:
+extern int mx3_register_fb(const char *, const struct fb_videomode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#96: FILE: arch/arm/plat-mxc/include/mach/mx3fb.h:38:
+extern int mx3_register_fb(const char *, const struct fb_videomode *, int);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#107: FILE: drivers/video/Kconfig:2120:
+config FB_MX3
+	tristate "MX3 Framebuffer support"
+	depends on FB && MX3_IPU
+	select FB_CFB_FILLRECT
+	select FB_CFB_COPYAREA
+	select FB_CFB_IMAGEBLIT
+	default y
+	help
+	  This is a framebuffer device for the i.MX31 LCD Controller. So
+	  far only synchronous displays are supported. If you plan to use
+	  an LCD display with your i.MX31 system, say Y here.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#140: FILE: drivers/video/mx3fb.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#173: FILE: drivers/video/mx3fb.c:34:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#174: FILE: drivers/video/mx3fb.c:35:
+#include <asm/uaccess.h>

CHECK:CAMELCASE: Avoid CamelCase: <Hsync_pol>
#269: FILE: drivers/video/mx3fb.c:130:
+	unsigned Hsync_pol:1;	/* true = active high */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Vsync_pol>
#270: FILE: drivers/video/mx3fb.c:131:
+	unsigned Vsync_pol:1;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#381: FILE: drivers/video/mx3fb.c:242:
+	spinlock_t		lock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#384: FILE: drivers/video/mx3fb.c:245:
+	uint32_t		h_start_width;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#385: FILE: drivers/video/mx3fb.c:246:
+	uint32_t		v_start_width;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#397: FILE: drivers/video/mx3fb.c:258:
+	uint32_t			cur_ipu_buf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#428: FILE: drivers/video/mx3fb.c:289:
+static const uint32_t di_mappings[] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#438: FILE: drivers/video/mx3fb.c:299:
+	uint32_t reg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#449: FILE: drivers/video/mx3fb.c:310:
+	uint32_t reg;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: drivers/video/mx3fb.c:345:
+		dev_dbg(mx3fb->dev, "%d: Submit %p #%d [%c]\n", __LINE__,
+		       mx3_fbi->txd, cookie, list_empty(&ichan->queue) ? '-' : '+');

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: drivers/video/mx3fb.c:357:
+		dev_dbg(mx3fb->dev, "%d: Re-submit %p #%d [%c]\n", __LINE__,
+		       mx3_fbi->txd, cookie, list_empty(&ichan->queue) ? '-' : '+');

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#511: FILE: drivers/video/mx3fb.c:372:
+	msleep(2);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#517: FILE: drivers/video/mx3fb.c:378:
+	uint32_t enabled;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#540: FILE: drivers/video/mx3fb.c:401:
+			      int16_t x_pos, int16_t y_pos)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#574: FILE: drivers/video/mx3fb.c:435:
+			  uint32_t pixel_clk,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#575: FILE: drivers/video/mx3fb.c:436:
+			  uint16_t width, uint16_t height,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#577: FILE: drivers/video/mx3fb.c:438:
+			  uint16_t h_start_width, uint16_t h_sync_width,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#578: FILE: drivers/video/mx3fb.c:439:
+			  uint16_t h_end_width, uint16_t v_start_width,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#579: FILE: drivers/video/mx3fb.c:440:
+			  uint16_t v_sync_width, uint16_t v_end_width,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#583: FILE: drivers/video/mx3fb.c:444:
+	uint32_t reg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#584: FILE: drivers/video/mx3fb.c:445:
+	uint32_t old_conf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#585: FILE: drivers/video/mx3fb.c:446:
+	uint32_t div;

CHECK:SPACING: No space is necessary after a cast
#594: FILE: drivers/video/mx3fb.c:455:
+	reg = ((uint32_t) (h_sync_width - 1) << 26) |

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#595: FILE: drivers/video/mx3fb.c:456:
+		((uint32_t) (width + h_start_width + h_end_width - 1) << 16);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#599: FILE: drivers/video/mx3fb.c:460:
+	printk(KERN_CONT " hor_conf %x,", reg);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#599: FILE: drivers/video/mx3fb.c:460:
+	printk(KERN_CONT " hor_conf %x,", reg);

CHECK:SPACING: No space is necessary after a cast
#602: FILE: drivers/video/mx3fb.c:463:
+	reg = ((uint32_t) (v_sync_width - 1) << 26) | SDC_V_SYNC_WIDTH_L |

CHECK:SPACING: No space is necessary after a cast
#603: FILE: drivers/video/mx3fb.c:464:
+	    ((uint32_t) (height + v_start_width + v_end_width - 1) << 16);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#607: FILE: drivers/video/mx3fb.c:468:
+	printk(KERN_CONT " ver_conf %x\n", reg);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#607: FILE: drivers/video/mx3fb.c:468:
+	printk(KERN_CONT " ver_conf %x\n", reg);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#723: FILE: drivers/video/mx3fb.c:584:
+	uint32_t reg, sdc_conf;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: drivers/video/mx3fb.c:598:
+		mx3fb_write_reg(mx3fb, reg | (color_key & 0x00FFFFFFL),
+			     SDC_GW_CTRL);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#760: FILE: drivers/video/mx3fb.c:621:
+	uint32_t reg;

CHECK:SPACING: No space is necessary after a cast
#767: FILE: drivers/video/mx3fb.c:628:
+		mx3fb_write_reg(mx3fb, reg | ((uint32_t) alpha << 24), SDC_GW_CTRL);

WARNING:RETURN_VOID: void function return statements are not generally useful
#786: FILE: drivers/video/mx3fb.c:647:
+	return;
+}

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#790: FILE: drivers/video/mx3fb.c:651:
+	uint32_t pixfmt = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#791: FILE: drivers/video/mx3fb.c:652:
+	uint32_t pixfmt = 0;
+	switch (bpp) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#917: FILE: drivers/video/mx3fb.c:778:
+			(u32) (PICOS2KHZ(fbi->var.pixclock) * 1000UL));

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#967: FILE: drivers/video/mx3fb.c:828:
+	dev_dbg(fbi->device, "%s\n", __func__);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'var->bits_per_pixel != 32'
#974: FILE: drivers/video/mx3fb.c:835:
+	if ((var->bits_per_pixel != 32) && (var->bits_per_pixel != 24) &&
+	    (var->bits_per_pixel != 16))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'var->bits_per_pixel != 24'
#974: FILE: drivers/video/mx3fb.c:835:
+	if ((var->bits_per_pixel != 32) && (var->bits_per_pixel != 24) &&
+	    (var->bits_per_pixel != 16))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'var->bits_per_pixel != 16'
#974: FILE: drivers/video/mx3fb.c:835:
+	if ((var->bits_per_pixel != 32) && (var->bits_per_pixel != 24) &&
+	    (var->bits_per_pixel != 16))

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1069: FILE: drivers/video/mx3fb.c:930:
+	dev_dbg(fbi->device, "%s\n", __func__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1077: FILE: drivers/video/mx3fb.c:938:
+		red = green = blue = (19595 * red + 38470 * green +

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1115: FILE: drivers/video/mx3fb.c:976:
+	dev_dbg(fbi->device, "%s\n", __func__);

WARNING:CONST_STRUCT: struct fb_ops should normally be const
#1265: FILE: drivers/video/mx3fb.c:1126:
+static struct fb_ops mx3fb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1299: FILE: drivers/video/mx3fb.c:1160:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#1360: FILE: drivers/video/mx3fb.c:1221:
+		(uint32_t) fbi->fix.smem_start, fbi->screen_base, fbi->fix.smem_len);

WARNING:CONST_STRUCT: struct fb_ops should normally be const
#1396: FILE: drivers/video/mx3fb.c:1257:
+static struct fb_info *mx3fb_init_fbinfo(struct device *dev, struct fb_ops *ops)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1646: FILE: drivers/video/mx3fb.c:1507:
+ * ^Ivideo=mx3fb:bpp=16$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1651: FILE: drivers/video/mx3fb.c:1512:
+	char *opt;
+	if (!options || !*options)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1657: FILE: drivers/video/mx3fb.c:1518:
+			default_bpp = simple_strtoul(opt + 4, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189791.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 24 warnings, 38 checks, 1615 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189791.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
