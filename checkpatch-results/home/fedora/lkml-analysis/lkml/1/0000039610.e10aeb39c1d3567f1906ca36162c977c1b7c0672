WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#68: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: fs/ceph/crush/crush.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#79: FILE: fs/ceph/crush/crush.c:7:
+# define kfree(x) do { if (x) free(x); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#80: FILE: fs/ceph/crush/crush.c:8:
+# define BUG_ON(x) assert(!(x))

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!map->buckets[b]"
#130: FILE: fs/ceph/crush/crush.c:58:
+		if (map->buckets[b] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#134: FILE: fs/ceph/crush/crush.c:62:
+			BUG_ON(c >= map->max_devices ||

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#139: FILE: fs/ceph/crush/crush.c:67:
+				map->bucket_parents[-1-c] = map->buckets[b]->id;
 				                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!map->buckets[b]"
#204: FILE: fs/ceph/crush/crush.c:132:
+			if (map->buckets[b] == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#223: FILE: fs/ceph/crush/crush.c:151:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#230: FILE: fs/ceph/crush/crush.h:1:
+#ifndef _CRUSH_CRUSH_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#248: FILE: fs/ceph/crush/crush.h:19:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#251: FILE: fs/ceph/crush/crush.h:22:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#255: FILE: fs/ceph/crush/crush.h:26:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#305: FILE: fs/ceph/crush/crush.h:76:
+			      (len)*sizeof(struct crush_rule_step))
 			           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#307: FILE: fs/ceph/crush/crush.h:78:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#329: FILE: fs/ceph/crush/crush.h:100:
+};
+extern const char *crush_bucket_alg_name(int alg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: fs/ceph/crush/crush.h:100:
+extern const char *crush_bucket_alg_name(int alg);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#358: FILE: fs/ceph/crush/crush.h:129:
+	__u32 *sum_weights;   /* 16-bit fixed point.  element i is sum
+				 of weights 0..i, inclusive */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#358: FILE: fs/ceph/crush/crush.h:129:
+				 of weights 0..i, inclusive */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#363: FILE: fs/ceph/crush/crush.h:134:
+	struct crush_bucket h;  /* note: h.size is _tree_ size, not number of
+				   actual items */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#363: FILE: fs/ceph/crush/crush.h:134:
+				   actual items */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#374: FILE: fs/ceph/crush/crush.h:145:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#398: FILE: fs/ceph/crush/crush.h:169:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#400: FILE: fs/ceph/crush/crush.h:171:
+extern int crush_get_bucket_item_weight(struct crush_bucket *b, int pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#401: FILE: fs/ceph/crush/crush.h:172:
+extern void crush_calc_parents(struct crush_map *map);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#402: FILE: fs/ceph/crush/crush.h:173:
+extern void crush_destroy_bucket_uniform(struct crush_bucket_uniform *b);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#403: FILE: fs/ceph/crush/crush.h:174:
+extern void crush_destroy_bucket_list(struct crush_bucket_list *b);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#404: FILE: fs/ceph/crush/crush.h:175:
+extern void crush_destroy_bucket_tree(struct crush_bucket_tree *b);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#405: FILE: fs/ceph/crush/crush.h:176:
+extern void crush_destroy_bucket_straw(struct crush_bucket_straw *b);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#406: FILE: fs/ceph/crush/crush.h:177:
+extern void crush_destroy_bucket(struct crush_bucket *b);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#407: FILE: fs/ceph/crush/crush.h:178:
+extern void crush_destroy(struct crush_map *map);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#416: FILE: fs/ceph/crush/hash.c:1:
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#425: FILE: fs/ceph/crush/hash.c:10:
+#define crush_hashmix(a, b, c) do {			\
+		a = a-b;  a = a-c;  a = a^(c>>13);	\
+		b = b-c;  b = b-a;  b = b^(a<<8);	\
+		c = c-a;  c = c-b;  c = c^(b>>13);	\
+		a = a-b;  a = a-c;  a = a^(c>>12);	\
+		b = b-c;  b = b-a;  b = b^(a<<16);	\
+		c = c-a;  c = c-b;  c = c^(b>>5);	\
+		a = a-b;  a = a-c;  a = a^(c>>3);	\
+		b = b-c;  b = b-a;  b = b^(a<<10);	\
+		c = c-a;  c = c-b;  c = c^(b>>15);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#425: FILE: fs/ceph/crush/hash.c:10:
+#define crush_hashmix(a, b, c) do {			\
+		a = a-b;  a = a-c;  a = a^(c>>13);	\
+		b = b-c;  b = b-a;  b = b^(a<<8);	\
+		c = c-a;  c = c-b;  c = c^(b>>13);	\
+		a = a-b;  a = a-c;  a = a^(c>>12);	\
+		b = b-c;  b = b-a;  b = b^(a<<16);	\
+		c = c-a;  c = c-b;  c = c^(b>>5);	\
+		a = a-b;  a = a-c;  a = a^(c>>3);	\
+		b = b-c;  b = b-a;  b = b^(a<<10);	\
+		c = c-a;  c = c-b;  c = c^(b>>15);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#425: FILE: fs/ceph/crush/hash.c:10:
+#define crush_hashmix(a, b, c) do {			\
+		a = a-b;  a = a-c;  a = a^(c>>13);	\
+		b = b-c;  b = b-a;  b = b^(a<<8);	\
+		c = c-a;  c = c-b;  c = c^(b>>13);	\
+		a = a-b;  a = a-c;  a = a^(c>>12);	\
+		b = b-c;  b = b-a;  b = b^(a<<16);	\
+		c = c-a;  c = c-b;  c = c^(b>>5);	\
+		a = a-b;  a = a-c;  a = a^(c>>3);	\
+		b = b-c;  b = b-a;  b = b^(a<<10);	\
+		c = c-a;  c = c-b;  c = c^(b>>15);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#425: FILE: fs/ceph/crush/hash.c:10:
+#define crush_hashmix(a, b, c) do {			\
+		a = a-b;  a = a-c;  a = a^(c>>13);	\
+		b = b-c;  b = b-a;  b = b^(a<<8);	\
+		c = c-a;  c = c-b;  c = c^(b>>13);	\
+		a = a-b;  a = a-c;  a = a^(c>>12);	\
+		b = b-c;  b = b-a;  b = b^(a<<16);	\
+		c = c-a;  c = c-b;  c = c^(b>>5);	\
+		a = a-b;  a = a-c;  a = a^(c>>3);	\
+		b = b-c;  b = b-a;  b = b^(a<<10);	\
+		c = c-a;  c = c-b;  c = c^(b>>15);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#425: FILE: fs/ceph/crush/hash.c:10:
+#define crush_hashmix(a, b, c) do {			\
+		a = a-b;  a = a-c;  a = a^(c>>13);	\
+		b = b-c;  b = b-a;  b = b^(a<<8);	\
+		c = c-a;  c = c-b;  c = c^(b>>13);	\
+		a = a-b;  a = a-c;  a = a^(c>>12);	\
+		b = b-c;  b = b-a;  b = b^(a<<16);	\
+		c = c-a;  c = c-b;  c = c^(b>>5);	\
+		a = a-b;  a = a-c;  a = a^(c>>3);	\
+		b = b-c;  b = b-a;  b = b^(a<<10);	\
+		c = c-a;  c = c-b;  c = c^(b>>15);	\
+	} while (0)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#426: FILE: fs/ceph/crush/hash.c:11:
+		a = a-b;  a = a-c;  a = a^(c>>13);	\
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#426: FILE: fs/ceph/crush/hash.c:11:
+		a = a-b;  a = a-c;  a = a^(c>>13);	\
 		               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#426: FILE: fs/ceph/crush/hash.c:11:
+		a = a-b;  a = a-c;  a = a^(c>>13);	\
 		                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#426: FILE: fs/ceph/crush/hash.c:11:
+		a = a-b;  a = a-c;  a = a^(c>>13);	\
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#427: FILE: fs/ceph/crush/hash.c:12:
+		b = b-c;  b = b-a;  b = b^(a<<8);	\
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#427: FILE: fs/ceph/crush/hash.c:12:
+		b = b-c;  b = b-a;  b = b^(a<<8);	\
 		               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#427: FILE: fs/ceph/crush/hash.c:12:
+		b = b-c;  b = b-a;  b = b^(a<<8);	\
 		                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#427: FILE: fs/ceph/crush/hash.c:12:
+		b = b-c;  b = b-a;  b = b^(a<<8);	\
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#428: FILE: fs/ceph/crush/hash.c:13:
+		c = c-a;  c = c-b;  c = c^(b>>13);	\
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#428: FILE: fs/ceph/crush/hash.c:13:
+		c = c-a;  c = c-b;  c = c^(b>>13);	\
 		               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#428: FILE: fs/ceph/crush/hash.c:13:
+		c = c-a;  c = c-b;  c = c^(b>>13);	\
 		                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#428: FILE: fs/ceph/crush/hash.c:13:
+		c = c-a;  c = c-b;  c = c^(b>>13);	\
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#429: FILE: fs/ceph/crush/hash.c:14:
+		a = a-b;  a = a-c;  a = a^(c>>12);	\
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#429: FILE: fs/ceph/crush/hash.c:14:
+		a = a-b;  a = a-c;  a = a^(c>>12);	\
 		               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#429: FILE: fs/ceph/crush/hash.c:14:
+		a = a-b;  a = a-c;  a = a^(c>>12);	\
 		                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#429: FILE: fs/ceph/crush/hash.c:14:
+		a = a-b;  a = a-c;  a = a^(c>>12);	\
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#430: FILE: fs/ceph/crush/hash.c:15:
+		b = b-c;  b = b-a;  b = b^(a<<16);	\
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#430: FILE: fs/ceph/crush/hash.c:15:
+		b = b-c;  b = b-a;  b = b^(a<<16);	\
 		               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#430: FILE: fs/ceph/crush/hash.c:15:
+		b = b-c;  b = b-a;  b = b^(a<<16);	\
 		                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#430: FILE: fs/ceph/crush/hash.c:15:
+		b = b-c;  b = b-a;  b = b^(a<<16);	\
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#431: FILE: fs/ceph/crush/hash.c:16:
+		c = c-a;  c = c-b;  c = c^(b>>5);	\
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#431: FILE: fs/ceph/crush/hash.c:16:
+		c = c-a;  c = c-b;  c = c^(b>>5);	\
 		               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#431: FILE: fs/ceph/crush/hash.c:16:
+		c = c-a;  c = c-b;  c = c^(b>>5);	\
 		                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#431: FILE: fs/ceph/crush/hash.c:16:
+		c = c-a;  c = c-b;  c = c^(b>>5);	\
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#432: FILE: fs/ceph/crush/hash.c:17:
+		a = a-b;  a = a-c;  a = a^(c>>3);	\
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#432: FILE: fs/ceph/crush/hash.c:17:
+		a = a-b;  a = a-c;  a = a^(c>>3);	\
 		               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#432: FILE: fs/ceph/crush/hash.c:17:
+		a = a-b;  a = a-c;  a = a^(c>>3);	\
 		                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#432: FILE: fs/ceph/crush/hash.c:17:
+		a = a-b;  a = a-c;  a = a^(c>>3);	\
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#433: FILE: fs/ceph/crush/hash.c:18:
+		b = b-c;  b = b-a;  b = b^(a<<10);	\
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#433: FILE: fs/ceph/crush/hash.c:18:
+		b = b-c;  b = b-a;  b = b^(a<<10);	\
 		               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#433: FILE: fs/ceph/crush/hash.c:18:
+		b = b-c;  b = b-a;  b = b^(a<<10);	\
 		                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#433: FILE: fs/ceph/crush/hash.c:18:
+		b = b-c;  b = b-a;  b = b^(a<<10);	\
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#434: FILE: fs/ceph/crush/hash.c:19:
+		c = c-a;  c = c-b;  c = c^(b>>15);	\
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#434: FILE: fs/ceph/crush/hash.c:19:
+		c = c-a;  c = c-b;  c = c^(b>>15);	\
 		               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#434: FILE: fs/ceph/crush/hash.c:19:
+		c = c-a;  c = c-b;  c = c^(b>>15);	\
 		                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#434: FILE: fs/ceph/crush/hash.c:19:
+		c = c-a;  c = c-b;  c = c^(b>>15);	\
 		                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#445: FILE: fs/ceph/crush/hash.c:30:
+	__u32 y = 1232;
+	crush_hashmix(b, x, hash);

WARNING:LINE_SPACING: Missing a blank line after declarations
#455: FILE: fs/ceph/crush/hash.c:40:
+	__u32 y = 1232;
+	crush_hashmix(a, b, hash);

WARNING:LINE_SPACING: Missing a blank line after declarations
#466: FILE: fs/ceph/crush/hash.c:51:
+	__u32 y = 1232;
+	crush_hashmix(a, b, hash);

WARNING:LINE_SPACING: Missing a blank line after declarations
#479: FILE: fs/ceph/crush/hash.c:64:
+	__u32 y = 1232;
+	crush_hashmix(a, b, hash);

WARNING:LINE_SPACING: Missing a blank line after declarations
#494: FILE: fs/ceph/crush/hash.c:79:
+	__u32 y = 1232;
+	crush_hashmix(a, b, hash);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#505: FILE: fs/ceph/crush/hash.c:90:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#571: FILE: fs/ceph/crush/hash.h:1:
+#ifndef _CRUSH_HASH_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#578: FILE: fs/ceph/crush/hash.h:8:
+extern const char *crush_hash_name(int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#580: FILE: fs/ceph/crush/hash.h:10:
+extern __u32 crush_hash32(int type, __u32 a);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#581: FILE: fs/ceph/crush/hash.h:11:
+extern __u32 crush_hash32_2(int type, __u32 a, __u32 b);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#582: FILE: fs/ceph/crush/hash.h:12:
+extern __u32 crush_hash32_3(int type, __u32 a, __u32 b, __u32 c);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#583: FILE: fs/ceph/crush/hash.h:13:
+extern __u32 crush_hash32_4(int type, __u32 a, __u32 b, __u32 c, __u32 d);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#584: FILE: fs/ceph/crush/hash.h:14:
+extern __u32 crush_hash32_5(int type, __u32 a, __u32 b, __u32 c, __u32 d,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#594: FILE: fs/ceph/crush/mapper.c:1:
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#608: FILE: fs/ceph/crush/mapper.c:15:
+# define BUG_ON(x) assert(!(x))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#643: FILE: fs/ceph/crush/mapper.c:50:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#664: FILE: fs/ceph/crush/mapper.c:71:
+	unsigned pr = r % bucket->size;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#665: FILE: fs/ceph/crush/mapper.c:72:
+	unsigned i, s;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#696: FILE: fs/ceph/crush/mapper.c:103:
+		unsigned p = bucket->perm_n;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#702: FILE: fs/ceph/crush/mapper.c:109:
+				unsigned t = bucket->perm[p + i];

WARNING:LINE_SPACING: Missing a blank line after declarations
#703: FILE: fs/ceph/crush/mapper.c:110:
+				unsigned t = bucket->perm[p + i];
+				bucket->perm[p + i] = bucket->perm[p];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#706: FILE: fs/ceph/crush/mapper.c:113:
+			dprintk(" perm_choose swap %d with %d\n", p, p+i);
 			                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#733: FILE: fs/ceph/crush/mapper.c:140:
+	for (i = bucket->h.size-1; i >= 0; i--) {
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#734: FILE: fs/ceph/crush/mapper.c:141:
+		__u64 w = crush_hash32_4(bucket->h.hash,x, bucket->h.items[i],
 		                                       ^

WARNING:SPLIT_STRING: quoted string split across lines
#738: FILE: fs/ceph/crush/mapper.c:145:
+		dprintk("list_choose i=%d x=%d r=%d item %d weight %x "
+			"sw %x rand %llx",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#748: FILE: fs/ceph/crush/mapper.c:155:
+	BUG_ON(1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#752: FILE: fs/ceph/crush/mapper.c:159:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#757: FILE: fs/ceph/crush/mapper.c:164:
+	int h = 0;
+	while ((n & 1) == 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#767: FILE: fs/ceph/crush/mapper.c:174:
+	int h = height(x);
+	return x - (1 << (h-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#767: FILE: fs/ceph/crush/mapper.c:174:
+	return x - (1 << (h-1));
 	                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#773: FILE: fs/ceph/crush/mapper.c:180:
+	int h = height(x);
+	return x + (1 << (h-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#773: FILE: fs/ceph/crush/mapper.c:180:
+	return x + (1 << (h-1));
 	                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#809: FILE: fs/ceph/crush/mapper.c:216:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#849: FILE: fs/ceph/crush/mapper.c:256:
+		BUG_ON(1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#901: FILE: fs/ceph/crush/mapper.c:308:
+	const int orig_tries = 5; /* attempts before we fall back to search */
+	dprintk("choose bucket %d x %d outpos %d\n", bucket->id, x, outpos);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#924: FILE: fs/ceph/crush/mapper.c:331:
+						r += (numrep+1) *
 						            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#925: FILE: fs/ceph/crush/mapper.c:332:
+							(flocal+ftotal);
 							       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#928: FILE: fs/ceph/crush/mapper.c:335:
+						r += numrep * (flocal+ftotal);
 						                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#935: FILE: fs/ceph/crush/mapper.c:342:
+						r += numrep * (flocal+ftotal);
 						                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#943: FILE: fs/ceph/crush/mapper.c:350:
+				if (flocal >= (in->size>>1) &&
 				                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#948: FILE: fs/ceph/crush/mapper.c:355:
+				BUG_ON(item >= map->max_devices);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#952: FILE: fs/ceph/crush/mapper.c:359:
+					itemtype = map->buckets[-1-item]->type;
 					                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#959: FILE: fs/ceph/crush/mapper.c:366:
+					BUG_ON(item >= 0 ||

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#960: FILE: fs/ceph/crush/mapper.c:367:
+					       (-1-item) >= map->max_buckets);
 					          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#961: FILE: fs/ceph/crush/mapper.c:368:
+					in = map->buckets[-1-item];
 					                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#975: FILE: fs/ceph/crush/mapper.c:382:
+				    crush_choose(map, map->buckets[-1-item],
 				                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#977: FILE: fs/ceph/crush/mapper.c:384:
+						 x, outpos+1, 0,
 						          ^

WARNING:SPLIT_STRING: quoted string split across lines
#1008: FILE: fs/ceph/crush/mapper.c:415:
+					dprintk("  reject %d  collide %d  "
+						"ftotal %d  flocal %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1029: FILE: fs/ceph/crush/mapper.c:436:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1062: FILE: fs/ceph/crush/mapper.c:469:
+	BUG_ON(ruleno >= map->max_rules);

WARNING:TYPO_SPELLING: 'dne' may be misspelled - perhaps 'done'?
#1077: FILE: fs/ceph/crush/mapper.c:484:
+			/*dprintk("CRUSH: forcefed device dne\n");*/
 			                                  ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dne' may be misspelled - perhaps 'done'?
#1078: FILE: fs/ceph/crush/mapper.c:485:
+			rc = -1;  /* force fed device dne */
 			                              ^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1087: FILE: fs/ceph/crush/mapper.c:494:
+					force = map->bucket_parents[-1-force];
 					                              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1100: FILE: fs/ceph/crush/mapper.c:507:
+				BUG_ON(force_context[force_pos] != w[0]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1111: FILE: fs/ceph/crush/mapper.c:518:
+			BUG_ON(wsize == 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1150: FILE: fs/ceph/crush/mapper.c:557:
+						      map->buckets[-1-w[i]],
 						                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1154: FILE: fs/ceph/crush/mapper.c:561:
+						      o+osize, j,
 						       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1156: FILE: fs/ceph/crush/mapper.c:563:
+						      recurse_to_leaf, c+osize);
 						                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1161: FILE: fs/ceph/crush/mapper.c:568:
+				memcpy(o, c, osize*sizeof(*o));
 				                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1170: FILE: fs/ceph/crush/mapper.c:577:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1180: FILE: fs/ceph/crush/mapper.c:587:
+			BUG_ON(1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1189: FILE: fs/ceph/crush/mapper.c:596:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1196: FILE: fs/ceph/crush/mapper.h:1:
+#ifndef _CRUSH_MAPPER_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1208: FILE: fs/ceph/crush/mapper.h:13:
+extern int crush_find_rule(struct crush_map *map, int pool, int type, int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1209: FILE: fs/ceph/crush/mapper.h:14:
+extern int crush_do_rule(struct crush_map *map,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1213: FILE: fs/ceph/crush/mapper.h:18:
+			 int forcefeed,    /* -1 for none */
+			 __u32 *weights);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 41 warnings, 97 checks, 1113 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
