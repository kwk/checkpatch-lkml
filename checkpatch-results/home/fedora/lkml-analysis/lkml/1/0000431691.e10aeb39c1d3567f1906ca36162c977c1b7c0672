WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
search for the pathname in the entire union mounted stack. Also they have been

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#58: FILE: fs/dcache.c:1289:
+struct dentry * __d_lookup_single(struct dentry *parent, struct qstr *name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#66: FILE: fs/dcache.c:1374:
+struct dentry * d_lookup_single(struct dentry *parent, struct qstr *name)

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: fs/dcache.c:1379:
+        do {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: fs/dcache.c:1379:
+        do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: fs/dcache.c:1380:
+                seq = read_seqbegin(&rename_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: fs/dcache.c:1380:
+                seq = read_seqbegin(&rename_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: fs/dcache.c:1381:
+                dentry = __d_lookup_single(parent, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: fs/dcache.c:1381:
+                dentry = __d_lookup_single(parent, name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: fs/dcache.c:1382:
+                if (dentry)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: fs/dcache.c:1382:
+                if (dentry)$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#89: FILE: fs/namei.c:377:
+do_revalidate_single(struct dentry *dentry, struct nameidata *nd)
                                                               ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#91: FILE: fs/namei.c:379:
+	int status = dentry->d_op->d_revalidate(dentry, nd);
 	                                                ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: fs/namei.c:380:
+	int status = dentry->d_op->d_revalidate(dentry, nd);
+	if (unlikely(status <= 0)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#135: FILE: fs/namei.c:442:
+		dentry = do_revalidate_single(dentry, nd);
 		                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#144: FILE: fs/namei.c:495:
+struct dentry * real_lookup_single(struct dentry *parent, struct qstr *name, struct nameidata *nd)
                                                                                                ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: fs/namei.c:495:
+struct dentry * real_lookup_single(struct dentry *parent, struct qstr *name, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#162: FILE: fs/namei.c:536:
+		result = do_revalidate_single(result, nd);
 		                                      ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#248: FILE: fs/namei.c:1326:
+struct dentry * __lookup_hash_kern_single(struct qstr *name,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#249: FILE: fs/namei.c:1327:
+		struct dentry *base, struct nameidata *nd)
 		                                       ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: fs/namei.c:1327:
+struct dentry * __lookup_hash_kern_single(struct qstr *name,
+		struct dentry *base, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: fs/namespace.c:143:
+struct vfsmount * find_mnt(struct dentry *dentry)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#297: FILE: fs/namespace.c:165:
+	BUG_ON(!mnt);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#313: FILE: fs/union.c:374:
+static noinline int revalidate_union(struct dentry * dentry)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: fs/union.c:382:
+		UM_DEBUG_DCACHE("dentry unused, count=%d\n",
+			     atomic_read(&dentry->d_count));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#339: FILE: fs/union.c:400:
+	BUG_ON(!lock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#340: FILE: fs/union.c:401:
+	BUG_ON(dentry->d_union == lock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#350: FILE: fs/union.c:411:
+	BUG_ON(atomic_read(&old_lock->u_count) != 1);

WARNING:RETURN_VOID: void function return statements are not generally useful
#353: FILE: fs/union.c:414:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#363: FILE: fs/union.c:424:
+		struct dentry *tmp = next;
+		next = next->d_overlaid;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#394: FILE: fs/union.c:455:
+struct dentry * __d_lookup_union(struct dentry *base, struct qstr *name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#469: FILE: fs/union.c:530:
+		struct vfsmount *mnt = find_mnt(topmost);
+		UM_DEBUG_DCACHE("name=\"%s\", inode=%p, device=%s\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#486: FILE: fs/union.c:547:
+	if (topmost->d_union) {
+		union_lock_spinlock(topmost, &topmost->d_lock);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'Shoudn't' may be misspelled - perhaps 'Shouldn't'?
#504: FILE: fs/union.c:565:
+			 * CHECK: Why return like this ? Shoudn't we look
 			                                 ^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->d_overlaid != dentry'
#520: FILE: fs/union.c:581:
+		if (last->d_overlaid
+		    && (last->d_overlaid != dentry)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#521: FILE: fs/union.c:582:
+		if (last->d_overlaid
+		    && (last->d_overlaid != dentry)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#522: FILE: fs/union.c:583:
+			printk(KERN_ERR "%s: strange stack layout " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#522: FILE: fs/union.c:583:
+			printk(KERN_ERR "%s: strange stack layout " \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#524: FILE: fs/union.c:585:
+			       __FUNCTION__, last->d_name.name,

CHECK:BRACES: braces {} should be used on all arms of this statement
#553: FILE: fs/union.c:614:
+	if (topmost->d_union && atomic_read(&topmost->d_union->u_count) == 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#556: FILE: fs/union.c:617:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#573: FILE: fs/union.c:634:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#573: FILE: fs/union.c:634:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#573: FILE: fs/union.c:634:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#573: FILE: fs/union.c:634:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#573: FILE: fs/union.c:634:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: fs/union.c:635:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,
+					    struct nameidata *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#575: FILE: fs/union.c:636:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#575: FILE: fs/union.c:636:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#575: FILE: fs/union.c:636:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#575: FILE: fs/union.c:636:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#575: FILE: fs/union.c:636:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#615: FILE: fs/union.c:676:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#618: FILE: fs/union.c:679:
+	/* we may also be called via lookup_hash with a NULLed nd argument */
 	                                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#619: FILE: fs/union.c:680:
+	copy_nd(__nd, &nd);
 	               ^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#622: FILE: fs/union.c:683:
+	if (topmost->d_union) {
+		union_lock_spinlock(topmost, &topmost->d_lock);
+	}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#636: FILE: fs/union.c:697:
+		nd.dentry = __dget(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#637: FILE: fs/union.c:698:
+		nd.mnt = find_mnt(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#641: FILE: fs/union.c:702:
+					      __nd ? &nd : NULL);
 					              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#660: FILE: fs/union.c:721:
+		follow_mount(&nd.mnt, &dentry);
 		              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#664: FILE: fs/union.c:725:
+			struct vfsmount *mnt = find_mnt(dentry);
+			UM_DEBUG_UID("name=\"%s\", inode=%p, device=%s\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->d_overlaid != dentry'
#670: FILE: fs/union.c:731:
+		if (last->d_overlaid && (last->d_overlaid != dentry)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#671: FILE: fs/union.c:732:
+			printk(KERN_ERR "%s: strange stack layout " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#671: FILE: fs/union.c:732:
+			printk(KERN_ERR "%s: strange stack layout " \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#673: FILE: fs/union.c:734:
+			       __FUNCTION__, last->d_name.name,

WARNING:INDENTED_LABEL: labels should not be indented
#704: FILE: fs/union.c:765:
+	loop:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#705: FILE: fs/union.c:766:
+		__dput(nd.dentry);
 		       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#706: FILE: fs/union.c:767:
+		mntput(nd.mnt);
 		       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#714: FILE: fs/union.c:775:
+	__dput(nd.dentry);
 	       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#715: FILE: fs/union.c:776:
+	mntput(nd.mnt);
 	       ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#728: FILE: fs/union.c:789:
+struct dentry * real_lookup_union(struct dentry *base, struct qstr *name,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#734: FILE: fs/union.c:795:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#752: FILE: fs/union.c:813:
+	copy_nd(__nd, &nd);
 	               ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#760: FILE: fs/union.c:821:
+		struct dentry * dentry;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#763: FILE: fs/union.c:824:
+		nd.dentry = __dget(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#764: FILE: fs/union.c:825:
+		nd.mnt = find_mnt(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#766: FILE: fs/union.c:827:
+		dentry = real_lookup_single(nd.dentry, name, &nd);
 		                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#766: FILE: fs/union.c:827:
+		dentry = real_lookup_single(nd.dentry, name, &nd);
 		                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#767: FILE: fs/union.c:828:
+		__dput(nd.dentry);
 		       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#768: FILE: fs/union.c:829:
+		mntput(nd.mnt);
 		       ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#799: FILE: fs/union.c:860:
+		struct vfsmount *mnt = find_mnt(topmost);
+		UM_DEBUG_UID("name=\"%s\", inode=%p, device=%s\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#806: FILE: fs/union.c:867:
+	err = __lookup_union(topmost, name, &nd);
 	                                     ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#819: FILE: fs/union.c:880:
+struct dentry * __lookup_hash_kern_union(struct qstr *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: fs/union.c:881:
+struct dentry * __lookup_hash_kern_union(struct qstr *name,
+			struct dentry *base, struct nameidata *__nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#825: FILE: fs/union.c:886:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#838: FILE: fs/union.c:899:
+	copy_nd(__nd, &nd);
 	               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#845: FILE: fs/union.c:906:
+		nd.dentry = __dget(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#846: FILE: fs/union.c:907:
+		nd.mnt = find_mnt(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#849: FILE: fs/union.c:910:
+		dentry = __lookup_hash_kern_single(name, nd.dentry, &nd);
 		                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#849: FILE: fs/union.c:910:
+		dentry = __lookup_hash_kern_single(name, nd.dentry, &nd);
 		                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#851: FILE: fs/union.c:912:
+		__dput(nd.dentry);
 		       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#852: FILE: fs/union.c:913:
+		mntput(nd.mnt);
 		       ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#875: FILE: fs/union.c:936:
+		struct vfsmount *mnt = find_mnt(topmost);
+		UM_DEBUG_UID("name=\"%s\", inode=%p, device=%s\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#882: FILE: fs/union.c:943:
+	err = __lookup_union(topmost, name, &nd);
 	                                     ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#917: FILE: include/linux/dcache.h:297:
+extern struct dentry * d_lookup_single(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#917: FILE: include/linux/dcache.h:297:
+extern struct dentry * d_lookup_single(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#917: FILE: include/linux/dcache.h:297:
+extern struct dentry * d_lookup_single(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#917: FILE: include/linux/dcache.h:297:
+extern struct dentry * d_lookup_single(struct dentry *, struct qstr *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#918: FILE: include/linux/dcache.h:298:
+extern struct dentry * __d_lookup_single(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#918: FILE: include/linux/dcache.h:298:
+extern struct dentry * __d_lookup_single(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#918: FILE: include/linux/dcache.h:298:
+extern struct dentry * __d_lookup_single(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#918: FILE: include/linux/dcache.h:298:
+extern struct dentry * __d_lookup_single(struct dentry *, struct qstr *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#922: FILE: include/linux/dcache.h:302:
+extern struct dentry * __d_lookup_union(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#922: FILE: include/linux/dcache.h:302:
+extern struct dentry * __d_lookup_union(struct dentry *, struct qstr *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#925: FILE: include/linux/dcache.h:305:
+static inline struct dentry * __d_lookup(struct dentry *parent, struct qstr *name)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#928: FILE: include/linux/dcache.h:308:
+       return __d_lookup_union(parent, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#930: FILE: include/linux/dcache.h:310:
+       return __d_lookup_single(parent, name);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#941: FILE: include/linux/dcache.h:484:
+extern struct vfsmount *find_mnt(struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#941: FILE: include/linux/dcache.h:484:
+extern struct vfsmount *find_mnt(struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#978: FILE: include/linux/union.h:27:
+extern int follow_union_mount(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount **' should also have an identifier name
#978: FILE: include/linux/union.h:27:
+extern int follow_union_mount(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#978: FILE: include/linux/union.h:27:
+extern int follow_union_mount(struct vfsmount **, struct dentry **);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#979: FILE: include/linux/union.h:28:
+extern struct dentry * real_lookup_union(struct dentry *, struct qstr *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#979: FILE: include/linux/union.h:28:
+extern struct dentry * real_lookup_union(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#979: FILE: include/linux/union.h:28:
+extern struct dentry * real_lookup_union(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#979: FILE: include/linux/union.h:28:
+extern struct dentry * real_lookup_union(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#979: FILE: include/linux/union.h:28:
+extern struct dentry * real_lookup_union(struct dentry *, struct qstr *,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#981: FILE: include/linux/union.h:30:
+extern struct dentry * __lookup_hash_kern_union(struct qstr *, struct dentry *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#981: FILE: include/linux/union.h:30:
+extern struct dentry * __lookup_hash_kern_union(struct qstr *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#981: FILE: include/linux/union.h:30:
+extern struct dentry * __lookup_hash_kern_union(struct qstr *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#981: FILE: include/linux/union.h:30:
+extern struct dentry * __lookup_hash_kern_union(struct qstr *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#981: FILE: include/linux/union.h:30:
+extern struct dentry * __lookup_hash_kern_union(struct qstr *, struct dentry *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#982: FILE: include/linux/union.h:31:
+extern struct dentry * __lookup_hash_kern_union(struct qstr *, struct dentry *,
+					   struct nameidata *);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#988: FILE: include/linux/union.h:37:
+#define follow_union_mount(x,y) do { /* empty */ } while (0)
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#992: FILE: include/linux/union.h:41:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#992: FILE: include/linux/union.h:41:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#993: FILE: include/linux/union.h:42:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,
+	struct nameidata *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#994: FILE: include/linux/union.h:43:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#994: FILE: include/linux/union.h:43:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#994: FILE: include/linux/union.h:43:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#994: FILE: include/linux/union.h:43:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#994: FILE: include/linux/union.h:43:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: include/linux/union.h:44:
+extern struct dentry * __lookup_hash_kern_single(struct qstr *, struct dentry *,
+	 struct nameidata *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#997: FILE: include/linux/union.h:46:
+static inline struct dentry * real_lookup(struct dentry *parent, struct qstr *name, struct nameidata *nd)
                                                                                                       ^^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#997: FILE: include/linux/union.h:46:
+static inline struct dentry * real_lookup(struct dentry *parent, struct qstr *name, struct nameidata *nd)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#997: FILE: include/linux/union.h:46:
+static inline struct dentry * real_lookup(struct dentry *parent, struct qstr *name, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1000: FILE: include/linux/union.h:49:
+	return real_lookup_union(parent, name, nd);
 	                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1002: FILE: include/linux/union.h:51:
+	return real_lookup_single(parent, name, nd);
 	                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1006: FILE: include/linux/union.h:55:
+static inline struct dentry * __lookup_hash_kern(struct qstr *name, struct dentry *base, struct nameidata *nd)
                                                                                                            ^^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1006: FILE: include/linux/union.h:55:
+static inline struct dentry * __lookup_hash_kern(struct qstr *name, struct dentry *base, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1006: FILE: include/linux/union.h:55:
+static inline struct dentry * __lookup_hash_kern(struct qstr *name, struct dentry *base, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1009: FILE: include/linux/union.h:58:
+	return __lookup_hash_kern_union(name, base, nd);
 	                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1011: FILE: include/linux/union.h:60:
+	return __lookup_hash_kern_single(name, base, nd);
 	                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1015: FILE: include/linux/union.h:64:
+static inline struct dentry * __lookup_hash_single(struct qstr *name, struct dentry *base, struct nameidata *nd)
                                                                                                              ^^

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1015: FILE: include/linux/union.h:64:
+static inline struct dentry * __lookup_hash_single(struct qstr *name, struct dentry *base, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1015: FILE: include/linux/union.h:64:
+static inline struct dentry * __lookup_hash_single(struct qstr *name, struct dentry *base, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1023: FILE: include/linux/union.h:72:
+	err = permission(inode, MAY_EXEC, nd);
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1028: FILE: include/linux/union.h:77:
+	dentry = __lookup_hash_kern_single(name, base, nd);
 	                                               ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431691.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 28 errors, 99 warnings, 21 checks, 947 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431691.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
