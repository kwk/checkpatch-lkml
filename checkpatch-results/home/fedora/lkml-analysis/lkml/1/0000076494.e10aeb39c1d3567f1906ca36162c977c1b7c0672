ERROR:CONST_READ_MOSTLY: Invalid use of __read_mostly with const type
#54: FILE: drivers/dma/ioat/dma_v3.c:76:
+static const u8 pq_idx_to_desc __read_mostly = 0xf8;

When a variable is tagged with the __read_mostly annotation, it is a
signal to the compiler that accesses to the variable will be mostly
reads and rarely(but NOT never) a write.

const __read_mostly does not make any sense as const data is already
read-only.  The __read_mostly annotation thus should be removed.

ERROR:CONST_READ_MOSTLY: Invalid use of __read_mostly with const type
#55: FILE: drivers/dma/ioat/dma_v3.c:77:
+static const u8 pq_idx_to_field[] __read_mostly = { 1, 4, 5, 0, 1, 2, 4, 5 };

CHECK:SPACING: No space is necessary after a cast
#73: FILE: drivers/dma/ioat/dma_v3.c:104:
+	struct ioat_pq_descriptor *pq = (struct ioat_pq_descriptor *) descs[0];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#108: FILE: drivers/dma/ioat/dma_v3.c:191:
+			descs[0] = (struct ioat_raw_descriptor *) pq;

CHECK:SPACING: No space is necessary after a cast
#109: FILE: drivers/dma/ioat/dma_v3.c:192:
+			descs[1] = (struct ioat_raw_descriptor *) pq_ex;

CHECK:SPACING: No space is necessary after a cast
#165: FILE: drivers/dma/ioat/dma_v3.c:599:
+	struct ioat_raw_descriptor *descs[] = { (void *) pq, (void *) pq_ex };

WARNING:SPLIT_STRING: quoted string split across lines
#170: FILE: drivers/dma/ioat/dma_v3.c:604:
+	dev_dbg(dev, "desc[%d]: (%#llx->%#llx) flags: %#x"
+		" sz: %#x ctl: %#x (op: %d int: %d compl: %d pq: '%s%s' src_cnt: %d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#171: FILE: drivers/dma/ioat/dma_v3.c:605:
+		desc_id(desc), (unsigned long long) desc->txd.phys,

CHECK:SPACING: No space is necessary after a cast
#172: FILE: drivers/dma/ioat/dma_v3.c:606:
+		(unsigned long long) (pq_ex ? pq_ex->next : pq->next),

CHECK:SPACING: No space is necessary after a cast
#179: FILE: drivers/dma/ioat/dma_v3.c:613:
+			(unsigned long long) pq_get_src(descs, i), pq->coef[i]);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#206: FILE: drivers/dma/ioat/dma_v3.c:640:
+	dev_dbg(to_dev(chan), "%s\n", __func__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: drivers/dma/ioat/dma_v3.c:644:
+	BUG_ON(src_cnt + dmaf_continue(flags) < 2);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#216: FILE: drivers/dma/ioat/dma_v3.c:650:
+	if (src_cnt > 3 || flags & DMA_PREP_CONTINUE) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#219: FILE: drivers/dma/ioat/dma_v3.c:653:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 26)
#227: FILE: drivers/dma/ioat/dma_v3.c:661:
+	if (likely(num_descs) &&
[...]
+		/* pass */;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: drivers/dma/ioat/dma_v3.c:662:
+	    ioat2_alloc_and_lock(&idx, ioat, num_descs+1) == 0)
 	                                              ^

CHECK:SPACING: No space is necessary after a cast
#246: FILE: drivers/dma/ioat/dma_v3.c:680:
+		descs[0] = (struct ioat_raw_descriptor *) pq;

CHECK:SPACING: No space is necessary after a cast
#247: FILE: drivers/dma/ioat/dma_v3.c:681:
+		descs[1] = (struct ioat_raw_descriptor *) pq_ex;

CHECK:BRACES: braces {} should be used on all arms of this statement
#253: FILE: drivers/dma/ioat/dma_v3.c:687:
+		if (dmaf_p_disabled_continue(flags))
[...]
+		else if (dmaf_continue(flags)) {
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#308: FILE: drivers/dma/ioat/dma_v3.c:742:
+		BUG_ON(flags & DMA_PREP_PQ_DISABLE_Q);

CHECK:BRACES: Unbalanced braces around else statement
#316: FILE: drivers/dma/ioat/dma_v3.c:750:
+	} else

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#335: FILE: drivers/dma/ioat/dma_v3.c:769:
 static void __devinit ioat3_dma_test_callback(void *dma_async_param)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076494.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 6 warnings, 14 checks, 304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076494.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
