WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
> > > likelihood you simply don't need usbtmc_mutex, and using it will cause 

WARNING:TYPO_SPELLING: 'originaly' may be misspelled - perhaps 'originally'?
#64: 
This driver was originaly written by Stefan Kopp, but massively
                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#151: FILE: Documentation/ABI/stable/sysfs-driver-usb-usbtmc:58:
+		This file determines if the the transaction of the USB TMC

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#205: FILE: drivers/usb/class/usbtmc.c:1:
+/**

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Measurment' may be misspelled - perhaps 'Measurement'?
#206: FILE: drivers/usb/class/usbtmc.c:2:
+ * drivers/usb/class/usbtmc.c - USB Test & Measurment class driver
                                            ^^^^^^^^^^

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#206: FILE: drivers/usb/class/usbtmc.c:2:
+ * drivers/usb/class/usbtmc.c - USB Test & Measurment class driver

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#235: FILE: drivers/usb/class/usbtmc.c:31:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <bTag>
#281: FILE: drivers/usb/class/usbtmc.c:77:
+	u8 bTag;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <bTag_last_write>
#282: FILE: drivers/usb/class/usbtmc.c:78:
+	u8 bTag_last_write;	/* needed for abort */

CHECK:CAMELCASE: Avoid CamelCase: <bTag_last_read>
#283: FILE: drivers/usb/class/usbtmc.c:79:
+	u8 bTag_last_read;	/* needed for abort */

CHECK:CAMELCASE: Avoid CamelCase: <TermChar>
#286: FILE: drivers/usb/class/usbtmc.c:82:
+	u8 TermChar;

CHECK:CAMELCASE: Avoid CamelCase: <TermCharEnabled>
#287: FILE: drivers/usb/class/usbtmc.c:83:
+	bool TermCharEnabled;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#294: FILE: drivers/usb/class/usbtmc.c:90:
+};
+#define to_usbtmc_data(d) container_of(d, struct usbtmc_device_data, kref)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#307: FILE: drivers/usb/class/usbtmc.c:103:
+static int usbtmc_open(struct inode *inode, struct file *filp)
                                                          ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#315: FILE: drivers/usb/class/usbtmc.c:111:
+		printk(KERN_ERR KBUILD_MODNAME

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#381: FILE: drivers/usb/class/usbtmc.c:177:
+	for (n = 0; n < current_setting->desc.bNumEndpoints; n++)

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#382: FILE: drivers/usb/class/usbtmc.c:178:
+		if (current_setting->endpoint[n].desc.bEndpointAddress ==

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'current_setting->endpoint[n].desc.wMaxPacketSize'
#385: FILE: drivers/usb/class/usbtmc.c:181:
+			max_size = le16_to_cpu(current_setting->endpoint[n].
+						desc.wMaxPacketSize);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:CAMELCASE: Avoid CamelCase: <wMaxPacketSize>
#385: FILE: drivers/usb/class/usbtmc.c:181:
+						desc.wMaxPacketSize);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#482: FILE: drivers/usb/class/usbtmc.c:278:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buffer[0] == USBTMC_STATUS_PENDING'
#538: FILE: drivers/usb/class/usbtmc.c:334:
+	if ((buffer[0] == USBTMC_STATUS_PENDING) &&
+	    (n < USBTMC_MAX_READS_TO_CLEAR_BULK_IN))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n < USBTMC_MAX_READS_TO_CLEAR_BULK_IN'
#538: FILE: drivers/usb/class/usbtmc.c:334:
+	if ((buffer[0] == USBTMC_STATUS_PENDING) &&
+	    (n < USBTMC_MAX_READS_TO_CLEAR_BULK_IN))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#565: FILE: drivers/usb/class/usbtmc.c:361:
+static ssize_t usbtmc_read(struct file *filp, char __user *buf,
                                         ^^^^

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#570: FILE: drivers/usb/class/usbtmc.c:366:
+	unsigned long int n_characters;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#680: FILE: drivers/usb/class/usbtmc.c:476:
+static ssize_t usbtmc_write(struct file *filp, const char __user *buf,
                                          ^^^^

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#687: FILE: drivers/usb/class/usbtmc.c:483:
+	unsigned long int n_bytes;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#992: FILE: drivers/usb/class/usbtmc.c:788:
+#define capability_attribute(name)					\
+static ssize_t show_##name(struct device *dev,				\
+			   struct device_attribute *attr, char *buf)	\
+{									\
+	struct usb_interface *intf = to_usb_interface(dev);		\
+	struct usbtmc_device_data *data = usb_get_intfdata(intf);	\
+									\
+	return sprintf(buf, "%d\n", data->capabilities.name);		\
+}									\
+static DEVICE_ATTR(name, S_IRUGO, show_##name, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1001: FILE: drivers/usb/class/usbtmc.c:797:
+static DEVICE_ATTR(name, S_IRUGO, show_##name, NULL)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:CAMELCASE: Avoid CamelCase: <show_TermChar>
#1020: FILE: drivers/usb/class/usbtmc.c:816:
+static ssize_t show_TermChar(struct device *dev,

CHECK:CAMELCASE: Avoid CamelCase: <store_TermChar>
#1029: FILE: drivers/usb/class/usbtmc.c:825:
+static ssize_t store_TermChar(struct device *dev,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_TermChar' to 'TermChar_show' 'store_TermChar' to 'TermChar_store'
#1040: FILE: drivers/usb/class/usbtmc.c:836:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1041: FILE: drivers/usb/class/usbtmc.c:837:
+static DEVICE_ATTR(TermChar, S_IRUGO, show_TermChar, store_TermChar);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1043: FILE: drivers/usb/class/usbtmc.c:839:
+#define data_attribute(name)						\
+static ssize_t show_##name(struct device *dev,				\
+			   struct device_attribute *attr, char *buf)	\
+{									\
+	struct usb_interface *intf = to_usb_interface(dev);		\
+	struct usbtmc_device_data *data = usb_get_intfdata(intf);	\
+									\
+	return sprintf(buf, "%d\n", data->name);			\
+}									\
+static ssize_t store_##name(struct device *dev,				\
+			    struct device_attribute *attr,		\
+			    const char *buf, size_t count)		\
+{									\
+	struct usb_interface *intf = to_usb_interface(dev);		\
+	struct usbtmc_device_data *data = usb_get_intfdata(intf);	\
+	ssize_t result;							\
+	unsigned val;							\
+									\
+	result = sscanf(buf, "%u\n", &val);				\
+	if (result != 1)						\
+		result = -EINVAL;					\
+	data->name = val;						\
+	if (result < 0)							\
+		return result;						\
+	else								\
+		return count;						\
+}									\
+static DEVICE_ATTR(name, S_IRUGO, show_##name, store_##name)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#1043: FILE: drivers/usb/class/usbtmc.c:839:
+#define data_attribute(name)						\
+static ssize_t show_##name(struct device *dev,				\
+			   struct device_attribute *attr, char *buf)	\
+{									\
+	struct usb_interface *intf = to_usb_interface(dev);		\
+	struct usbtmc_device_data *data = usb_get_intfdata(intf);	\
+									\
+	return sprintf(buf, "%d\n", data->name);			\
+}									\
+static ssize_t store_##name(struct device *dev,				\
+			    struct device_attribute *attr,		\
+			    const char *buf, size_t count)		\
+{									\
+	struct usb_interface *intf = to_usb_interface(dev);		\
+	struct usbtmc_device_data *data = usb_get_intfdata(intf);	\
+	ssize_t result;							\
+	unsigned val;							\
+									\
+	result = sscanf(buf, "%u\n", &val);				\
+	if (result != 1)						\
+		result = -EINVAL;					\
+	data->name = val;						\
+	if (result < 0)							\
+		return result;						\
+	else								\
+		return count;						\
+}									\
+static DEVICE_ATTR(name, S_IRUGO, show_##name, store_##name)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1059: FILE: drivers/usb/class/usbtmc.c:855:
+	unsigned val;							\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1070: FILE: drivers/usb/class/usbtmc.c:866:
+static DEVICE_ATTR(name, S_IRUGO, show_##name, store_##name)

CHECK:CAMELCASE: Avoid CamelCase: <dev_attr_TermChar>
#1076: FILE: drivers/usb/class/usbtmc.c:872:
+	&dev_attr_TermChar.attr,

CHECK:CAMELCASE: Avoid CamelCase: <dev_attr_TermCharEnabled>
#1077: FILE: drivers/usb/class/usbtmc.c:873:
+	&dev_attr_TermCharEnabled.attr,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1155: FILE: drivers/usb/class/usbtmc.c:951:
+static struct file_operations fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1170: FILE: drivers/usb/class/usbtmc.c:966:
+
+

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1180: FILE: drivers/usb/class/usbtmc.c:976:
+	dev_dbg(&intf->dev, "%s called\n", __func__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct usbtmc_device_data)...)
#1182: FILE: drivers/usb/class/usbtmc.c:978:
+	data = kmalloc(sizeof(struct usbtmc_device_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1184: FILE: drivers/usb/class/usbtmc.c:980:
+	if (!data) {
+		dev_err(&intf->dev, "Unable to allocate kernel memory\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1239: FILE: drivers/usb/class/usbtmc.c:1035:
+		dev_err(&intf->dev, "Not able to get a minor"
+			" (base %u, slice default): %d\n", USBTMC_MINOR_BASE,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usbtmc_disconnect', this function's name, in a string
#1258: FILE: drivers/usb/class/usbtmc.c:1054:
+	dev_dbg(&intf->dev, "usbtmc_disconnect called\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1280: FILE: drivers/usb/class/usbtmc.c:1076:
+		printk(KERN_ERR KBUILD_MODNAME": Unable to register driver\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1280: FILE: drivers/usb/class/usbtmc.c:1076:
+		printk(KERN_ERR KBUILD_MODNAME": Unable to register driver\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1303: FILE: include/linux/usb/tmc.h:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000234500.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 25 warnings, 23 checks, 1231 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000234500.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
