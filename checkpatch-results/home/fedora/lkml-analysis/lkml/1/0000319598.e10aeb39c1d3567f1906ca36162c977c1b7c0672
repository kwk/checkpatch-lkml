WARNING:TYPO_SPELLING: 'alignement' may be misspelled - perhaps 'alignment'?
#116: FILE: include/asm-x86/ds.h:35:
+ * Due to alignement constraints, the actual buffer may be slightly
           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/asm-x86/ds.h:49:
+extern int ds_request_bts(struct task_struct *task, void *base, size_t size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/asm-x86/ds.h:51:
+extern int ds_request_pebs(struct task_struct *task, void *base, size_t size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/asm-x86/ds.h:64:
+extern int ds_release_bts(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/asm-x86/ds.h:65:
+extern int ds_release_pebs(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/asm-x86/ds.h:77:
+extern int ds_get_bts_index(struct task_struct *task, size_t *pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/asm-x86/ds.h:78:
+extern int ds_get_pebs_index(struct task_struct *task, size_t *pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: include/asm-x86/ds.h:90:
+extern int ds_get_bts_end(struct task_struct *task, size_t *pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: include/asm-x86/ds.h:91:
+extern int ds_get_pebs_end(struct task_struct *task, size_t *pos);

WARNING:REPEATED_WORD: Possible repeated word: 'record'
#204: FILE: include/asm-x86/ds.h:105:
+ * index: the index of the requested record
+ * record (out): pointer to the requested record

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#206: FILE: include/asm-x86/ds.h:107:
+extern int ds_access_bts(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/asm-x86/ds.h:109:
+extern int ds_access_pebs(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#233: FILE: include/asm-x86/ds.h:134:
+extern int ds_write_bts(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: include/asm-x86/ds.h:136:
+extern int ds_write_pebs(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: include/asm-x86/ds.h:146:
+extern int ds_unchecked_write_bts(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: include/asm-x86/ds.h:148:
+extern int ds_unchecked_write_pebs(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/asm-x86/ds.h:159:
+extern int ds_reset_bts(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/asm-x86/ds.h:160:
+extern int ds_reset_pebs(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: include/asm-x86/ds.h:171:
+extern int ds_clear_bts(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: include/asm-x86/ds.h:172:
+extern int ds_clear_pebs(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: include/asm-x86/ds.h:183:
+extern int ds_get_pebs_reset(struct task_struct *task, u64 *value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/asm-x86/ds.h:194:
+extern int ds_set_pebs_reset(struct task_struct *task, u64 value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: include/asm-x86/ds.h:200:
+extern void __cpuinit ds_init_intel(struct cpuinfo_x86 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuinfo_x86 *' should also have an identifier name
#299: FILE: include/asm-x86/ds.h:200:
+extern void __cpuinit ds_init_intel(struct cpuinfo_x86 *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#301: FILE: include/asm-x86/ds.h:202:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#320: FILE: include/asm-x86/ds.h:221:
+	 * or the per_cpu context array */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#323: FILE: include/asm-x86/ds.h:224:
+	 * context is owned by a cpu */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: include/asm-x86/ds.h:229:
+extern void ds_free(struct ds_context *context);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#355: FILE: include/asm-x86/ptrace.h:128:
 
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#377: FILE: include/asm-x86/ptrace.h:150:
+		/* BTS_TASK_ARRIVES or
+		   BTS_TASK_DEPARTS */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#377: FILE: include/asm-x86/ptrace.h:150:
+		   BTS_TASK_DEPARTS */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#391: FILE: include/asm-x86/ptrace.h:162:
+extern void __cpuinit ptrace_bts_init_intel(struct cpuinfo_x86 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuinfo_x86 *' should also have an identifier name
#391: FILE: include/asm-x86/ptrace.h:162:
+extern void __cpuinit ptrace_bts_init_intel(struct cpuinfo_x86 *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#404: FILE: arch/x86/kernel/ptrace.c:547:
 
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#416: FILE: arch/x86/kernel/ptrace.c:559:
+};
+static struct bts_configuration bts_cfg;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#420: FILE: arch/x86/kernel/ptrace.c:563:
+
+

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#464: FILE: arch/x86/kernel/ptrace.c:604:
+	base += (bts_cfg.sizeof_field * field);;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#549: FILE: arch/x86/kernel/ptrace.c:668:
+	BUG_ON(BTS_MAX_RECORD_SIZE < bts_cfg.sizeof_bts);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#549: FILE: arch/x86/kernel/ptrace.c:668:
+	BUG_ON(BTS_MAX_RECORD_SIZE < bts_cfg.sizeof_bts);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#584: FILE: arch/x86/kernel/ptrace.c:693:
+	 * buffer. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#873: FILE: arch/x86/kernel/ptrace.c:867:
+	.debugctl_mask = (1<<2)|(1<<3)|(1<<5)
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#873: FILE: arch/x86/kernel/ptrace.c:867:
+	.debugctl_mask = (1<<2)|(1<<3)|(1<<5)
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#873: FILE: arch/x86/kernel/ptrace.c:867:
+	.debugctl_mask = (1<<2)|(1<<3)|(1<<5)
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#873: FILE: arch/x86/kernel/ptrace.c:867:
+	.debugctl_mask = (1<<2)|(1<<3)|(1<<5)
 	                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#873: FILE: arch/x86/kernel/ptrace.c:867:
+	.debugctl_mask = (1<<2)|(1<<3)|(1<<5)
 	                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#879: FILE: arch/x86/kernel/ptrace.c:873:
+	.debugctl_mask = (1<<6)|(1<<7)
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#879: FILE: arch/x86/kernel/ptrace.c:873:
+	.debugctl_mask = (1<<6)|(1<<7)
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#879: FILE: arch/x86/kernel/ptrace.c:873:
+	.debugctl_mask = (1<<6)|(1<<7)
 	                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#885: FILE: arch/x86/kernel/ptrace.c:879:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#885: FILE: arch/x86/kernel/ptrace.c:879:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#885: FILE: arch/x86/kernel/ptrace.c:879:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#885: FILE: arch/x86/kernel/ptrace.c:879:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#885: FILE: arch/x86/kernel/ptrace.c:879:
+	.debugctl_mask = (1<<6)|(1<<7)|(1<<9)
 	                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1012: FILE: arch/x86/kernel/ds.c:30:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1020: FILE: arch/x86/kernel/ds.c:38:
+	/* the size of one pointer-typed field in the DS structure in bytes;
+	   this covers the first 8 fields related to buffer management. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1020: FILE: arch/x86/kernel/ds.c:38:
+	   this covers the first 8 fields related to buffer management. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1025: FILE: arch/x86/kernel/ds.c:43:
+};
+static struct ds_configuration ds_cfg;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1103: FILE: arch/x86/kernel/ds.c:108:
+
+

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1194: FILE: arch/x86/kernel/ds.c:171:
+	return (task ? (tracers >= 0) : (tracers <= 0));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1198: FILE: arch/x86/kernel/ds.c:174:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task == current'
#1281: FILE: arch/x86/kernel/ds.c:254:
+		if (!task || (task == current))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around context->this
#1308: FILE: arch/x86/kernel/ds.c:279:
+	*(context->this) = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'context->task == current'
#1313: FILE: arch/x86/kernel/ds.c:284:
+	if (!context->task || (context->task == current))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1319: FILE: arch/x86/kernel/ds.c:290:
+	 * deallocate them properly. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1329: FILE: arch/x86/kernel/ds.c:299:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1352: FILE: arch/x86/kernel/ds.c:320:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1415: FILE: arch/x86/kernel/ds.c:380:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1436: FILE: arch/x86/kernel/ds.c:401:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1470: FILE: arch/x86/kernel/ds.c:435:
+	if (ovfl) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1472: FILE: arch/x86/kernel/ds.c:437:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1760: FILE: arch/x86/kernel/ds.c:654:
+		 * we fill the entire buffer */

CHECK:SPACING: No space is necessary after a cast
#1767: FILE: arch/x86/kernel/ds.c:661:
+		write_size = min((unsigned long) size, write_end - index);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2033: FILE: arch/x86/kernel/ds.c:803:
 };
+static const struct ds_configuration ds_cfg_64 = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2087: FILE: arch/x86/kernel/ds.c:856:
+	 * to disturb us, anymore. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2089: FILE: arch/x86/kernel/ds.c:858:
+	unsigned long leftovers = context->count;
+	while (leftovers--)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000319598.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 18 warnings, 56 checks, 2135 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000319598.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
