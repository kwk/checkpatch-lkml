WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: arch/cris/arch-v32/kernel/irq.c:54:
+  { [0 ... NR_REAL_IRQS - 1] = {0, CPU_MASK_ALL} };$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#75: FILE: arch/cris/arch-v32/kernel/irq.c:54:
+struct cris_irq_allocation irq_allocations[NR_REAL_IRQS] =
+  { [0 ... NR_REAL_IRQS - 1] = {0, CPU_MASK_ALL} };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#97: FILE: arch/cris/arch-v32/kernel/irq.c:95:
+extern void breakh_BUG(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: arch/cris/arch-v32/kernel/irq.c:204:
+		intr_mask = REG_RD_INT_VECT(intr_vect, irq_regs[cpu],
+			rw_mask, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: arch/cris/arch-v32/kernel/irq.c:207:
+		intr_mask = REG_RD_INT_VECT(intr_vect, irq_regs[cpu],
+			rw_mask, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: arch/cris/arch-v32/kernel/irq.c:217:
+		REG_WR_INT_VECT(intr_vect, irq_regs[cpu], rw_mask,
+			0, intr_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: arch/cris/arch-v32/kernel/irq.c:220:
+		REG_WR_INT_VECT(intr_vect, irq_regs[cpu], rw_mask,
+			1, intr_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: arch/cris/arch-v32/kernel/irq.c:233:
+		intr_mask = REG_RD_INT_VECT(intr_vect, irq_regs[cpu],
+			rw_mask, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: arch/cris/arch-v32/kernel/irq.c:236:
+		intr_mask = REG_RD_INT_VECT(intr_vect, irq_regs[cpu],
+			rw_mask, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: arch/cris/arch-v32/kernel/irq.c:246:
+		REG_WR_INT_VECT(intr_vect, irq_regs[cpu], rw_mask,
+			0, intr_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: arch/cris/arch-v32/kernel/irq.c:249:
+		REG_WR_INT_VECT(intr_vect, irq_regs[cpu], rw_mask,
+			1, intr_mask);

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#315: FILE: arch/cris/arch-v32/kernel/irq.c:401:
+		/* Get which IRQs that happend. */
 		                       ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: arch/cris/arch-v32/kernel/irq.c:403:
+		masked[i] = REG_RD_INT_VECT(intr_vect, irq_regs[cpu],
+			r_masked_vect, i);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 1'
#333: FILE: arch/cris/arch-v32/kernel/irq.c:411:
+		if ((i == 1) && (masked[0] & TIMER_MASK))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 0'
#336: FILE: arch/cris/arch-v32/kernel/irq.c:414:
+		if ((i == 0) && (masked[0] & TIMER_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 1'
#347: FILE: arch/cris/arch-v32/kernel/irq.c:422:
+		if ((i == 1) && (masked[i] & TIMER_MASK)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#352: FILE: arch/cris/arch-v32/kernel/irq.c:427:
+		if ((i == 0) && (masked[i] & TIMER_MASK)) {
+			 masked[i] &= ~TIMER_MASK;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 0'
#352: FILE: arch/cris/arch-v32/kernel/irq.c:427:
+		if ((i == 0) && (masked[i] & TIMER_MASK)) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#373: FILE: arch/cris/arch-v32/kernel/irq.c:443:
+				do_IRQ(bit + FIRST_IRQ + i*32, regs);
 				                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000342155.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 4 warnings, 14 checks, 375 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000342155.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
