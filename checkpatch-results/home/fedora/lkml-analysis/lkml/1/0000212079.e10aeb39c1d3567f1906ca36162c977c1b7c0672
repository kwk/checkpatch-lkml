WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#77: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: include/linux/btree.h:1:
+#ifndef BTREE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#106: FILE: include/linux/btree.h:25:
+};
+extern struct btree_geo btree_geo32;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: include/linux/btree.h:43:
+void *btree_lookup(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: include/linux/btree.h:45:
+int btree_insert(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, void *val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: include/linux/btree.h:47:
+void *btree_remove(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: include/linux/btree.h:52:
+size_t btree_visitor(struct btree_head *head, struct btree_geo *geo,
+		long opaque,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: include/linux/btree.h:54:
+		void (*func)(void *elem, long opaque, unsigned long *key,
+			size_t index, void *func2), void *func2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: include/linux/btree.h:56:
+size_t btree_grim_visitor(struct btree_head *head, struct btree_geo *geo,
+		long opaque,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: include/linux/btree.h:58:
+		void (*func)(void *elem, long opaque, unsigned long *key,
+			size_t index, void *func2), void *func2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: include/linux/btree.h:62:
+static inline void btree_initl(struct btree_headl *head, mempool_t *mempool,
+		gfp_t gfp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: include/linux/btree.h:73:
+static inline int btree_insertl(struct btree_headl *head, unsigned long key,
+		void *val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: include/linux/btree.h:84:
+static inline int btree_mergel(struct btree_headl *target,
+		struct btree_headl *victim)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: include/linux/btree.h:92:
+void visitorl(void *elem, long opaque, unsigned long *key, size_t index,
+		void *__func);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: include/linux/btree.h:98:
+static inline size_t btree_visitorl(struct btree_headl *head, long opaque,
+		visitorl_t func2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: include/linux/btree.h:104:
+static inline size_t btree_grim_visitorl(struct btree_headl *head, long opaque,
+		visitorl_t func2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: include/linux/btree.h:111:
+static inline void btree_init32(struct btree_head32 *head, mempool_t *mempool,
+		gfp_t gfp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: include/linux/btree.h:122:
+static inline int btree_insert32(struct btree_head32 *head, u32 key,
+		void *val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: include/linux/btree.h:133:
+static inline int btree_merge32(struct btree_head32 *target,
+		struct btree_head32 *victim)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: include/linux/btree.h:141:
+void visitor32(void *elem, long opaque, unsigned long *__key, size_t index,
+		void *__func);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: include/linux/btree.h:146:
+static inline size_t btree_visitor32(struct btree_head32 *head, long opaque,
+		visitor32_t func2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: include/linux/btree.h:152:
+static inline size_t btree_grim_visitor32(struct btree_head32 *head, long opaque,
+		visitor32_t func2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: include/linux/btree.h:159:
+static inline void btree_init64(struct btree_head64 *head, mempool_t *mempool,
+		gfp_t gfp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: include/linux/btree.h:170:
+static inline int btree_insert64(struct btree_head64 *head, u64 key,
+		void *val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: include/linux/btree.h:181:
+static inline int btree_merge64(struct btree_head64 *target,
+		struct btree_head64 *victim)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: include/linux/btree.h:190:
+void visitor64(void *elem, long opaque, unsigned long *__key, size_t index,
+		void *__func);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: include/linux/btree.h:195:
+static inline size_t btree_visitor64(struct btree_head64 *head, long opaque,
+		visitor64_t func2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: include/linux/btree.h:201:
+static inline size_t btree_grim_visitor64(struct btree_head64 *head, long opaque,
+		visitor64_t func2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: include/linux/btree.h:208:
+static inline void btree_init128(struct btree_head128 *head, mempool_t *mempool,
+		gfp_t gfp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#297: FILE: include/linux/btree.h:216:
+	u64 key[2] = {k1, k2};
+	return btree_lookup(&head->h, &btree_geo128, (unsigned long *)&key);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: include/linux/btree.h:220:
+static inline int btree_insert128(struct btree_head128 *head, u64 k1, u64 k2,
+		void *val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#304: FILE: include/linux/btree.h:223:
+	u64 key[2] = {k1, k2};
+	return btree_insert(&head->h, &btree_geo128, (unsigned long *)&key, val);

WARNING:LINE_SPACING: Missing a blank line after declarations
#310: FILE: include/linux/btree.h:229:
+	u64 key[2] = {k1, k2};
+	return btree_remove(&head->h, &btree_geo128, (unsigned long *)&key);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: include/linux/btree.h:246:
+static inline int btree_merge128(struct btree_head128 *target,
+		struct btree_head128 *victim)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: include/linux/btree.h:261:
+static inline size_t btree_visitor128(struct btree_head128 *head, long opaque,
+		visitor128_t func2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: include/linux/btree.h:267:
+static inline size_t btree_grim_visitor128(struct btree_head128 *head, long opaque,
+		visitor128_t func2)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#388: FILE: lib/btree.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#389: FILE: lib/btree.c:2:
+ * lib/btree.c	- Simple In-memory B+Tree

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'excercise' may be misspelled - perhaps 'exercise'?
#401: FILE: lib/btree.c:14:
+ * excercise to understand how B+Trees work.  Turned out to be useful as well.
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#438: FILE: lib/btree.c:51:
+#define MAX(a, b) ((a) > (b) ? (a) : (b))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#438: FILE: lib/btree.c:51:
+#define MAX(a, b) ((a) > (b) ? (a) : (b))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: lib/btree.c:105:
+static unsigned long *longcpy(unsigned long *dest, const unsigned long *src,
+		size_t n)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: lib/btree.c:141:
+static void setkey(struct btree_geo *geo, unsigned long *node,
+		unsigned long *key, int n)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: lib/btree.c:147:
+static void setval(struct btree_geo *geo, unsigned long *node,
+		unsigned long val, int n)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#545: FILE: lib/btree.c:158:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#550: FILE: lib/btree.c:163:
+	printk("(%lx", key[0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#552: FILE: lib/btree.c:165:
+		printk(",%lx", key[k]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#553: FILE: lib/btree.c:166:
+	printk(")");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#561: FILE: lib/btree.c:174:
+	printk("%p: ", node);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#565: FILE: lib/btree.c:178:
+		printk(" %lx  ", bval(geo, node, i));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#567: FILE: lib/btree.c:180:
+	printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: lib/btree.c:184:
+static void __dumptree(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *node, int height)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#579: FILE: lib/btree.c:192:
+	printk("%2x ", height);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: lib/btree.c:236:
+static int keycmp(struct btree_geo *geo, unsigned long *node, int pos,
+		unsigned long *key)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: lib/btree.c:242:
+void *btree_lookup(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: lib/btree.c:271:
+static int getpos(struct btree_geo *geo, unsigned long *node,
+		unsigned long *key)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: lib/btree.c:296:
+static unsigned long *find_level(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, int level)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == geo->no_pairs'
#693: FILE: lib/btree.c:306:
+		if ((i == geo->no_pairs) || !bval(geo, node, i)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#698: FILE: lib/btree.c:311:
+		BUG_ON(i < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#701: FILE: lib/btree.c:314:
+	BUG_ON(!node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: lib/btree.c:337:
+static int btree_insert_level(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, unsigned long val, int level)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#729: FILE: lib/btree.c:342:
+	BUG_ON(!val);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#741: FILE: lib/btree.c:354:
+	BUG_ON(pos < fill && keycmp(geo, node, pos, key) == 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#751: FILE: lib/btree.c:364:
+		err = btree_insert_level(head, geo,
+				bkey(geo, node, fill / 2 - 1),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#771: FILE: lib/btree.c:384:
+	BUG_ON(fill >= geo->no_pairs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: lib/btree.c:398:
+int btree_insert(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, void *val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: lib/btree.c:404:
+static void *btree_remove_level(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key, int level)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level == 1'
#807: FILE: lib/btree.c:420:
+	if ((level == 1) && (keycmp(geo, node, pos, key) != 0))

WARNING:TYPO_SPELLING: 'excercise' may be misspelled - perhaps 'exercise'?
#825: FILE: lib/btree.c:438:
+		 * As you can see, that code is left as an excercise to the
 		                                           ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: lib/btree.c:458:
+void *btree_remove(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *key)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#860: FILE: lib/btree.c:473:
+	BUG_ON(target == victim);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#879: FILE: lib/btree.c:492:
+		 * mangled inside btree_remove. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#887: FILE: lib/btree.c:500:
+static size_t __btree_for_each(struct btree_head *head, struct btree_geo *geo,
+		unsigned long *node, long opaque,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#889: FILE: lib/btree.c:502:
+		void (*func)(void *elem, long opaque,
+			unsigned long *key, size_t index, void *func2),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: lib/btree.c:514:
+			count = __btree_for_each(head, geo, child, opaque,
+					func, func2, reap, height - 1, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: lib/btree.c:517:
+			func(child, opaque, bkey(geo, node, i), count++,
+					func2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: lib/btree.c:525:
+static void empty(void *elem, long opaque, unsigned long *key, size_t index,
+		void *func2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#917: FILE: lib/btree.c:530:
+void visitorl(void *elem, long opaque, unsigned long *key, size_t index,
+		void *__func)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#925: FILE: lib/btree.c:538:
+void visitor32(void *elem, long opaque, unsigned long *__key, size_t index,
+		void *__func)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: lib/btree.c:547:
+void visitor64(void *elem, long opaque, unsigned long *__key, size_t index,
+		void *__func)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#952: FILE: lib/btree.c:565:
+size_t btree_visitor(struct btree_head *head, struct btree_geo *geo,
+		long opaque,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: lib/btree.c:567:
+		void (*func)(void *elem, long opaque, unsigned long *key,
+			size_t index, void *func2), void *func2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: lib/btree.c:575:
+		count = __btree_for_each(head, geo, head->node, opaque, func,
+				func2, 0, head->height, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#967: FILE: lib/btree.c:580:
+size_t btree_grim_visitor(struct btree_head *head, struct btree_geo *geo,
+		long opaque,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: lib/btree.c:582:
+		void (*func)(void *elem, long opaque, unsigned long *key,
+			size_t index, void *func2), void *func2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#977: FILE: lib/btree.c:590:
+		count = __btree_for_each(head, geo, head->node, opaque, func,
+				func2, 1, head->height, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#985: FILE: lib/btree.c:598:
+	btree_cachep = kmem_cache_create("btree_node", NODESIZE, 0,
+			SLAB_HWCACHE_ALIGN, NULL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000212079.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 24 warnings, 63 checks, 891 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000212079.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
