WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '15b8dd53f5ffaf8e2d9095c423f713423f576c0f', maybe rebased or not pulled?
#41: 
> commit 15b8dd53f5ffaf8e2d9095c423f713423f576c0f

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#100: 
This is a huge commit which doesnt revert cleanly. I took a stab at it, 
                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#101: 
see that revert below - it didnt help.
                           ^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#116: 
Subject: [PATCH] Revert "ACPICA: Major update for acpi_get_object_info external interface"

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '15b8dd53f5ffaf8e2d9095c423f713423f576c0f', maybe rebased or not pulled?
#118: 
This reverts commit 15b8dd53f5ffaf8e2d9095c423f713423f576c0f.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#253: FILE: drivers/acpi/acpi_memhotplug.c:475:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#341: FILE: drivers/acpi/acpica/acutils.h:327:
+				acpi_integer * address);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#362: FILE: drivers/acpi/acpica/acutils.h:339:
+		    u32 * status_flags);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#372: FILE: drivers/acpi/acpica/acutils.h:346:
+acpi_ut_execute_sxds(struct acpi_namespace_node *device_node, u8 * highest);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#414: FILE: drivers/acpi/acpica/evrgnini.c:347:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#425: FILE: drivers/acpi/acpica/evrgnini.c:358:
+		return (TRUE);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#457: FILE: drivers/acpi/acpica/evrgnini.c:391:
+	if (acpi_ev_match_pci_root_bridge(hid.value)) {
 		return (TRUE);
 	}

CHECK:SPACING: No space is necessary after a cast
#526: FILE: drivers/acpi/acpica/exutils.c:383:
+	out_string[3] = acpi_ut_hex_to_ascii_char((acpi_integer) eisa_id, 12);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#527: FILE: drivers/acpi/acpica/exutils.c:384:
+	out_string[4] = acpi_ut_hex_to_ascii_char((acpi_integer) eisa_id, 8);

CHECK:SPACING: No space is necessary after a cast
#528: FILE: drivers/acpi/acpica/exutils.c:385:
+	out_string[5] = acpi_ut_hex_to_ascii_char((acpi_integer) eisa_id, 4);

CHECK:SPACING: No space is necessary after a cast
#529: FILE: drivers/acpi/acpica/exutils.c:386:
+	out_string[6] = acpi_ut_hex_to_ascii_char((acpi_integer) eisa_id, 0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#618: FILE: drivers/acpi/acpica/nsxfeval.c:589:
+		if (ACPI_STRNCMP(hid.value, info->hid, sizeof(hid.value)) != 0) {
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#721: FILE: drivers/acpi/acpica/nsxfname.c:226:
+acpi_get_object_info(acpi_handle handle, struct acpi_buffer * buffer)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#744: FILE: drivers/acpi/acpica/nsxfname.c:237:
+	if (!handle || !buffer) {
 		return (AE_BAD_PARAMETER);
 	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#749: FILE: drivers/acpi/acpica/nsxfname.c:242:
+	if (ACPI_FAILURE(status)) {
+		return (status);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#750: FILE: drivers/acpi/acpica/nsxfname.c:243:
+		return (status);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#754: FILE: drivers/acpi/acpica/nsxfname.c:247:
+	if (!info) {
+		return (AE_NO_MEMORY);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#755: FILE: drivers/acpi/acpica/nsxfname.c:248:
+		return (AE_NO_MEMORY);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#922: FILE: drivers/acpi/acpica/nsxfname.c:340:
+	if (ACPI_FAILURE(status)) {
+		goto cleanup;
 	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1053: FILE: drivers/acpi/acpica/uteval.c:360:
+				acpi_integer * address)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1089: FILE: drivers/acpi/acpica/uteval.c:402:
+{
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1096: FILE: drivers/acpi/acpica/uteval.c:409:
+	if (*source == '*') {
+		source++;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1133: FILE: drivers/acpi/acpica/uteval.c:446:
+	if (ACPI_FAILURE(status)) {
+		return_ACPI_STATUS(status);
+	}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1138: FILE: drivers/acpi/acpica/uteval.c:451:
+	if (obj_desc->common.type == ACPI_TYPE_INTEGER) {
+

CHECK:SPACING: No space is necessary after a cast
#1141: FILE: drivers/acpi/acpica/uteval.c:454:
+		acpi_ex_eisa_id_to_string((u32) obj_desc->integer.value,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1177: FILE: drivers/acpi/acpica/uteval.c:490:
+{
+

CHECK:SPACING: No space is necessary after a cast
#1183: FILE: drivers/acpi/acpica/uteval.c:496:
+		acpi_ex_eisa_id_to_string((u32) obj_desc->integer.value,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1185: FILE: drivers/acpi/acpica/uteval.c:498:
+		return (AE_OK);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1189: FILE: drivers/acpi/acpica/uteval.c:502:
+		if (obj_desc->string.length > ACPI_MAX_CID_LENGTH) {
+			return (AE_AML_STRING_LIMIT);
+		}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1190: FILE: drivers/acpi/acpica/uteval.c:503:
+			return (AE_AML_STRING_LIMIT);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1197: FILE: drivers/acpi/acpica/uteval.c:510:
+		return (AE_OK);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1222: FILE: drivers/acpi/acpica/uteval.c:535:
+acpi_ut_execute_CID(struct acpi_namespace_node * device_node,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1223: FILE: drivers/acpi/acpica/uteval.c:536:
+		    struct acpi_compatible_id_list ** return_cid_list)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1239: FILE: drivers/acpi/acpica/uteval.c:552:
+	if (ACPI_FAILURE(status)) {
+		return_ACPI_STATUS(status);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1246: FILE: drivers/acpi/acpica/uteval.c:559:
+	if (obj_desc->common.type == ACPI_TYPE_PACKAGE) {
+		count = obj_desc->package.count;
+	}

CHECK:SPACING: No space is necessary after a cast
#1255: FILE: drivers/acpi/acpica/uteval.c:568:
+	cid_list = ACPI_ALLOCATE_ZEROED((acpi_size) size);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1256: FILE: drivers/acpi/acpica/uteval.c:569:
+	if (!cid_list) {
+		return_ACPI_STATUS(AE_NO_MEMORY);
+	}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1275: FILE: drivers/acpi/acpica/uteval.c:588:
+	if (obj_desc->common.type == ACPI_TYPE_PACKAGE) {
+

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'obj_desc->package.elements[i]'
#1281: FILE: drivers/acpi/acpica/uteval.c:594:
+			    acpi_ut_translate_one_cid(obj_desc->package.
+						      elements[i],

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1283: FILE: drivers/acpi/acpica/uteval.c:596:
+			if (ACPI_FAILURE(status)) {
+				break;
+			}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1295: FILE: drivers/acpi/acpica/uteval.c:608:
+	if (ACPI_FAILURE(status)) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1335: FILE: drivers/acpi/acpica/uteval.c:648:
+	if (ACPI_FAILURE(status)) {
+		return_ACPI_STATUS(status);
+	}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1340: FILE: drivers/acpi/acpica/uteval.c:653:
+	if (obj_desc->common.type == ACPI_TYPE_INTEGER) {
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1384: FILE: drivers/acpi/acpica/uteval.c:737:
+acpi_ut_execute_sxds(struct acpi_namespace_node *device_node, u8 * highest)

CHECK:SPACING: No space is necessary after a cast
#1426: FILE: drivers/acpi/acpica/uteval.c:769:
+			highest[i] = (u8) obj_desc->integer.value;

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1472: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1913: FILE: drivers/acpi/container.c:210:
 
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1915: FILE: drivers/acpi/container.c:212:
+	if (ACPI_FAILURE(status) || !buffer.pointer) {
 		return AE_OK;
 	}

CHECK:SPACING: No space is necessary after a cast
#2165: FILE: drivers/acpi/scan.c:1096:
+			cid_list = ACPI_ALLOCATE_ZEROED((acpi_size) size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2167: FILE: drivers/acpi/scan.c:1098:
+				printk(KERN_ERR "Memory allocation error\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2170: FILE: drivers/acpi/scan.c:1101:
+				return;
+			} else {

CHECK:BRACES: Unbalanced braces around else statement
#2196: FILE: drivers/acpi/scan.c:1124:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2197: FILE: drivers/acpi/scan.c:1125:
+			printk(KERN_ERR PREFIX "Memory allocation error\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2229: FILE: drivers/char/agp/hp-agp.c:496:
+			info->hardware_id.value[sizeof(info->hardware_id)-1] = '\0';
 			                                                 ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2345: FILE: include/acpi/acpi_bus.h:172:
+typedef char acpi_hardware_id[15];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2346: FILE: include/acpi/acpi_bus.h:173:
+typedef char acpi_unique_id[9];

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2474: FILE: include/acpi/actypes.h:1015:
+#define ACPI_COMMON_OBJ_INFO \
+	acpi_object_type                type;           /* ACPI object type */ \
+	acpi_name                       name	/* ACPI object Name */

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068340.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 27 warnings, 20 checks, 1740 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068340.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
