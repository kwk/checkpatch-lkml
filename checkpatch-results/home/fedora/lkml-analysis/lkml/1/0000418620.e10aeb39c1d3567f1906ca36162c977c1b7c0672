WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This file contains wrapper functions for TOMOYO's file access control functions.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: security/tomoyo/tomoyo.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#53: FILE: security/tomoyo/tomoyo.c:2:
+ * security/tomoyo/tomoyo.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#77: FILE: security/tomoyo/tomoyo.c:26:
+extern struct rw_semaphore namespace_sem;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#79: FILE: security/tomoyo/tomoyo.c:28:
+static struct kmem_cache *tomoyo_cachep = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#84: FILE: security/tomoyo/tomoyo.c:33:
+	struct tomoyo_security *ptr = kmem_cache_alloc(tomoyo_cachep, GFP_KERNEL);
+	if (!ptr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#98: FILE: security/tomoyo/tomoyo.c:47:
+	bprm->security = ((struct tomoyo_security *) current->security)->domain_info;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: security/tomoyo/tomoyo.c:51:
+static int tomoyo_bprm_check_security(struct linux_binprm * bprm)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: security/tomoyo/tomoyo.c:54:
+ ^Iint retval = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#105: FILE: security/tomoyo/tomoyo.c:54:
+ ^Iint retval = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: security/tomoyo/tomoyo.c:54:
+ ^Iint retval = 0;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#106: FILE: security/tomoyo/tomoyo.c:55:
+	extern void tomoyo_load_policy(const char *filename);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#107: FILE: security/tomoyo/tomoyo.c:56:
+	extern int tomoyo_find_next_domain(struct linux_binprm *, struct domain_info **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct linux_binprm *' should also have an identifier name
#107: FILE: security/tomoyo/tomoyo.c:56:
+	extern int tomoyo_find_next_domain(struct linux_binprm *, struct domain_info **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct domain_info **' should also have an identifier name
#107: FILE: security/tomoyo/tomoyo.c:56:
+	extern int tomoyo_find_next_domain(struct linux_binprm *, struct domain_info **);

CHECK:SPACING: No space is necessary after a cast
#109: FILE: security/tomoyo/tomoyo.c:58:
+	if (!(((struct tomoyo_security *) current->security)->flags

CHECK:SPACING: No space is necessary after a cast
#113: FILE: security/tomoyo/tomoyo.c:62:
+			((struct tomoyo_security *) current->security)->domain_info = next_domain;

CHECK:SPACING: No space is necessary after a cast
#114: FILE: security/tomoyo/tomoyo.c:63:
+			((struct tomoyo_security *) current->security)->flags |=

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: security/tomoyo/tomoyo.c:67:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: security/tomoyo/tomoyo.c:71:
+static void tomoyo_bprm_post_apply_creds(struct linux_binprm * bprm)

CHECK:SPACING: No space is necessary after a cast
#124: FILE: security/tomoyo/tomoyo.c:73:
+	bprm->security = ((struct tomoyo_security *) current->security)->domain_info;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: security/tomoyo/tomoyo.c:76:
+static void tomoyo_bprm_free_security(struct linux_binprm * bprm)

CHECK:SPACING: No space is necessary after a cast
#129: FILE: security/tomoyo/tomoyo.c:78:
+	((struct tomoyo_security *) current->security)->domain_info =

CHECK:SPACING: No space is necessary after a cast
#130: FILE: security/tomoyo/tomoyo.c:79:
+		(struct domain_info *) bprm->security;

CHECK:SPACING: No space is necessary after a cast
#131: FILE: security/tomoyo/tomoyo.c:80:
+	((struct tomoyo_security *) current->security)->flags &=

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#135: FILE: security/tomoyo/tomoyo.c:84:
+static int tomoyo_inode_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                                     ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#138: FILE: security/tomoyo/tomoyo.c:87:
+	int flag = 0;
+	if (S_ISDIR(inode->i_mode)) /* ignore because inode is directory */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#140: FILE: security/tomoyo/tomoyo.c:89:
+	if (!nd || !nd->dentry || !nd->mnt)
 	     ^^

CHECK:SPACING: No space is necessary after a cast
#142: FILE: security/tomoyo/tomoyo.c:91:
+	if ((mask == MAY_EXEC) && (((struct tomoyo_security *) current->security)->flags &

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_EXEC'
#142: FILE: security/tomoyo/tomoyo.c:91:
+	if ((mask == MAY_EXEC) && (((struct tomoyo_security *) current->security)->flags &
+	                           TOMOYO_CHECK_READ_FOR_OPEN_EXEC))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: security/tomoyo/tomoyo.c:92:
+^I                           TOMOYO_CHECK_READ_FOR_OPEN_EXEC))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_EXEC'
#145: FILE: security/tomoyo/tomoyo.c:94:
+	if ((mask == MAY_EXEC) || (mask == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == 0'
#145: FILE: security/tomoyo/tomoyo.c:94:
+	if ((mask == MAY_EXEC) || (mask == 0))

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: security/tomoyo/tomoyo.c:116:
+	int index = 0, index2 = 0;
+	if (!dentry || !namespace)

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: security/tomoyo/tomoyo.c:124:
+		struct vfsmount *mnt = list_entry(p, struct vfsmount, mnt_list);
+		if (mnt->mnt_root->d_sb != dentry->d_sb) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#175: FILE: security/tomoyo/tomoyo.c:124:
+		if (mnt->mnt_root->d_sb != dentry->d_sb) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#176: FILE: security/tomoyo/tomoyo.c:125:
+		if (index2++ < index) continue;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#179: FILE: security/tomoyo/tomoyo.c:128:
+		if ((error = tomoyo_check_single_write_permission(operation, dentry, mnt)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: security/tomoyo/tomoyo.c:184:
+                                                   struct dentry *old_dentry,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: security/tomoyo/tomoyo.c:184:
+                                                   struct dentry *old_dentry,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: security/tomoyo/tomoyo.c:185:
+                                                   struct dentry *new_dentry)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: security/tomoyo/tomoyo.c:185:
+                                                   struct dentry *new_dentry)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#242: FILE: security/tomoyo/tomoyo.c:191:
+	int index = 0, index2 = 0;
+	if (!old_dentry || !new_dentry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#250: FILE: security/tomoyo/tomoyo.c:199:
+		struct vfsmount *mnt = list_entry(p, struct vfsmount, mnt_list);
+		if (mnt->mnt_root->d_sb != old_dentry->d_sb) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#250: FILE: security/tomoyo/tomoyo.c:199:
+		if (mnt->mnt_root->d_sb != old_dentry->d_sb) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#251: FILE: security/tomoyo/tomoyo.c:200:
+		if (index2++ < index) continue;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#254: FILE: security/tomoyo/tomoyo.c:203:
+		if ((error = tomoyo_check_double_write_permission(operation,

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: security/tomoyo/tomoyo.c:204:
+^I^I                                                  old_dentry,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: security/tomoyo/tomoyo.c:205:
+^I^I                                                  mnt,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: security/tomoyo/tomoyo.c:206:
+^I^I                                                  new_dentry,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: security/tomoyo/tomoyo.c:207:
+^I^I                                                  mnt)) != 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: security/tomoyo/tomoyo.c:218:
+                             struct inode *inode,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: security/tomoyo/tomoyo.c:218:
+                             struct inode *inode,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: security/tomoyo/tomoyo.c:219:
+                             struct dentry *new_dentry)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: security/tomoyo/tomoyo.c:219:
+                             struct dentry *new_dentry)$

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#272: FILE: security/tomoyo/tomoyo.c:221:
+	return tomoyo_do_check_double_write_permission(TOMOYO_TYPE_LINK_ACL, old_dentry, new_dentry);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: security/tomoyo/tomoyo.c:225:
+                               struct dentry *old_dentry,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: security/tomoyo/tomoyo.c:225:
+                               struct dentry *old_dentry,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: security/tomoyo/tomoyo.c:226:
+                               struct inode *new_inode,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: security/tomoyo/tomoyo.c:226:
+                               struct inode *new_inode,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: security/tomoyo/tomoyo.c:227:
+                               struct dentry *new_dentry)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: security/tomoyo/tomoyo.c:227:
+                               struct dentry *new_dentry)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: security/tomoyo/tomoyo.c:230:
+^I                                               old_dentry,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: security/tomoyo/tomoyo.c:231:
+^I                                               new_dentry);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#316: FILE: security/tomoyo/tomoyo.c:265:
+		printk(KERN_INFO "Failure registering TOMOYO Linux with the kernel\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#319: FILE: security/tomoyo/tomoyo.c:268:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#320: FILE: security/tomoyo/tomoyo.c:269:
+	printk ("TOMOYO Linux initialized\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#320: FILE: security/tomoyo/tomoyo.c:269:
+	printk ("TOMOYO Linux initialized\n");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#322: FILE: security/tomoyo/tomoyo.c:271:
+		extern void tomoyo_proc_init(void);

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: security/tomoyo/tomoyo.c:275:
+^I                                  sizeof(struct tomoyo_security),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: security/tomoyo/tomoyo.c:276:
+^I                                  0, SLAB_PANIC, NULL, NULL);$

CHECK:SPACING: No space is necessary after a cast
#329: FILE: security/tomoyo/tomoyo.c:278:
+	((struct tomoyo_security *) init_task.security)->domain_info = &KERNEL_DOMAIN;

CHECK:SPACING: No space is necessary after a cast
#330: FILE: security/tomoyo/tomoyo.c:279:
+	((struct tomoyo_security *) init_task.security)->flags = 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000418620.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 29 errors, 30 warnings, 14 checks, 283 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000418620.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
