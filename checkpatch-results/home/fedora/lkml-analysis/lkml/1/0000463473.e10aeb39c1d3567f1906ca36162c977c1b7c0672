WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: include/linux/interrupt.h:279:
+   * If this tasklet is already running on another CPU, it is rescheduled$

CHECK:CAMELCASE: Avoid CamelCase: <If>
#78: FILE: include/linux/interrupt.h:279:
+   * If this tasklet is already running on another CPU, it is rescheduled

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: include/linux/interrupt.h:280:
+     for later.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: include/linux/interrupt.h:281:
+   * Schedule must not be called from the tasklet itself (a lockup occurs)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#80: FILE: include/linux/interrupt.h:281:
+   * Schedule must not be called from the tasklet itself (a lockup occurs)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Schedule>
#80: FILE: include/linux/interrupt.h:281:
+   * Schedule must not be called from the tasklet itself (a lockup occurs)

CHECK:BIT_MACRO: Prefer using the BIT macro
#94: FILE: include/linux/interrupt.h:310:
+#define TASKLET_STATEF_SCHED	(1 << TASKLET_STATE_SCHED)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#95: FILE: include/linux/interrupt.h:311:
+#define TASKLET_STATEF_RUN	(1 << TASKLET_STATE_RUN)

CHECK:BIT_MACRO: Prefer using the BIT macro
#96: FILE: include/linux/interrupt.h:312:
+#define TASKLET_STATEF_PENDING	(1 << TASKLET_STATE_PENDING)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/interrupt.h:372:
+extern fastcall void tasklet_enable(struct tasklet_struct *t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/interrupt.h:373:
+extern fastcall void tasklet_hi_enable(struct tasklet_struct *t);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#154: FILE: kernel/softirq.c:467:
+static void inline

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "t->next"
#158: FILE: kernel/softirq.c:471:
+		WARN_ON(t->next != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#205: FILE: kernel/softirq.c:509:
+EXPORT_SYMBOL(tasklet_enable);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#215: FILE: kernel/softirq.c:519:
+EXPORT_SYMBOL(tasklet_hi_enable);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#287: FILE: kernel/softirq.c:586:
+				printk("hm, tasklet state: %08lx\n", t->state);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463473.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 7 warnings, 8 checks, 272 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463473.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
