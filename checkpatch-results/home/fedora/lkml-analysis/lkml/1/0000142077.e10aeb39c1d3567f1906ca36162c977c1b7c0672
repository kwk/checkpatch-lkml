WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
Gitweb:     http://git.kernel.org/tip/513162537b73d972206a3974594522c86b8a9238

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#38: 
Author:     Peter Zijlstra <a.p.zijlstra@chello.nl>
                                         ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# perf-record make -j4 kernel/

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#101: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: Documentation/perf_counter/perf-record.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: Documentation/perf_counter/perf-record.c:2:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#140: FILE: Documentation/perf_counter/perf-record.c:35:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: Documentation/perf_counter/perf-record.c:47:
+        struct timespec ts;                             \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: Documentation/perf_counter/perf-record.c:47:
+        struct timespec ts;                             \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: Documentation/perf_counter/perf-record.c:48:
+                                                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: Documentation/perf_counter/perf-record.c:48:
+                                                        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: Documentation/perf_counter/perf-record.c:49:
+        clock_gettime(CLOCK_MONOTONIC, &ts);            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: Documentation/perf_counter/perf-record.c:49:
+        clock_gettime(CLOCK_MONOTONIC, &ts);            \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: Documentation/perf_counter/perf-record.c:50:
+        ts.tv_sec * 1000000000ULL + ts.tv_nsec;         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: Documentation/perf_counter/perf-record.c:50:
+        ts.tv_sec * 1000000000ULL + ts.tv_nsec;         \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#166: FILE: Documentation/perf_counter/perf-record.c:61:
+#define rmb()		asm volatile("lfence" ::: "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#166: FILE: Documentation/perf_counter/perf-record.c:61:
+#define rmb()		asm volatile("lfence" ::: "memory")

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#167: FILE: Documentation/perf_counter/perf-record.c:62:
+#define cpu_relax()	asm volatile("rep; nop" ::: "memory");

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#167: FILE: Documentation/perf_counter/perf-record.c:62:
+#define cpu_relax()	asm volatile("rep; nop" ::: "memory");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#170: FILE: Documentation/perf_counter/perf-record.c:65:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#172: FILE: Documentation/perf_counter/perf-record.c:67:
+#define rmb()		asm volatile("lfence" ::: "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#172: FILE: Documentation/perf_counter/perf-record.c:67:
+#define rmb()		asm volatile("lfence" ::: "memory")

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#173: FILE: Documentation/perf_counter/perf-record.c:68:
+#define cpu_relax()	asm volatile("rep; nop" ::: "memory");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#173: FILE: Documentation/perf_counter/perf-record.c:68:
+#define cpu_relax()	asm volatile("rep; nop" ::: "memory");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: Documentation/perf_counter/perf-record.c:73:
+#define rmb() ^I^Iasm volatile ("sync" ::: "memory")$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#178: FILE: Documentation/perf_counter/perf-record.c:73:
+#define rmb() 		asm volatile ("sync" ::: "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#178: FILE: Documentation/perf_counter/perf-record.c:73:
+#define rmb() 		asm volatile ("sync" ::: "memory")

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#179: FILE: Documentation/perf_counter/perf-record.c:74:
+#define cpu_relax()	asm volatile ("" ::: "memory");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#179: FILE: Documentation/perf_counter/perf-record.c:74:
+#define cpu_relax()	asm volatile ("" ::: "memory");

CHECK:SPACING: No space is necessary after a cast
#186: FILE: Documentation/perf_counter/perf-record.c:81:
+	(void) (&_min1 == &_min2);		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#189: FILE: Documentation/perf_counter/perf-record.c:84:
+asmlinkage int sys_perf_counter_open(

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: Documentation/perf_counter/perf-record.c:85:
+        struct perf_counter_hw_event    *hw_event_uptr          __user,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: Documentation/perf_counter/perf-record.c:85:
+        struct perf_counter_hw_event    *hw_event_uptr          __user,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: Documentation/perf_counter/perf-record.c:86:
+        pid_t                           pid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: Documentation/perf_counter/perf-record.c:86:
+        pid_t                           pid,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: Documentation/perf_counter/perf-record.c:87:
+        int                             cpu,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: Documentation/perf_counter/perf-record.c:87:
+        int                             cpu,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: Documentation/perf_counter/perf-record.c:88:
+        int                             group_fd,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: Documentation/perf_counter/perf-record.c:88:
+        int                             group_fd,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: Documentation/perf_counter/perf-record.c:89:
+        unsigned long                   flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: Documentation/perf_counter/perf-record.c:89:
+        unsigned long                   flags)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: Documentation/perf_counter/perf-record.c:91:
+        return syscall($

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: Documentation/perf_counter/perf-record.c:91:
+        return syscall($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#196: FILE: Documentation/perf_counter/perf-record.c:91:
+        return syscall(

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: Documentation/perf_counter/perf-record.c:92:
+                __NR_perf_counter_open, hw_event_uptr, pid, cpu, group_fd, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: Documentation/perf_counter/perf-record.c:92:
+                __NR_perf_counter_open, hw_event_uptr, pid, cpu, group_fd, flags);$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#205: FILE: Documentation/perf_counter/perf-record.c:100:
+static int			nr_counters			=  0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#210: FILE: Documentation/perf_counter/perf-record.c:105:
+static int			nr_cpus				=  0;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: Documentation/perf_counter/perf-record.c:109:
+static char ^I^I^I*output_name^I^I^I= "output.perf";$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#215: FILE: Documentation/perf_counter/perf-record.c:110:
+static int			group				= 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#216: FILE: Documentation/perf_counter/perf-record.c:111:
+static unsigned int		realtime_prio			=  0;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'config' may be better as '(config)' to avoid precedence issues
#324: FILE: Documentation/perf_counter/perf-record.c:219:
+#define __PERF_COUNTER_FIELD(config, name) \
+	((config & PERF_COUNTER_##name##_MASK) >> PERF_COUNTER_##name##_SHIFT)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#337: FILE: Documentation/perf_counter/perf-record.c:232:
+	printf(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: Documentation/perf_counter/perf-record.c:243:
+		printf("\n                             %d:%d: %-20s",
+				type, id, event_symbols[i].symbol);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#357: FILE: Documentation/perf_counter/perf-record.c:252:
+	printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#364: FILE: Documentation/perf_counter/perf-record.c:259:
+	printf(

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#395: FILE: Documentation/perf_counter/perf-record.c:290:
+		case 'c': default_interval		=   atoi(optarg); break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#396: FILE: Documentation/perf_counter/perf-record.c:291:
+		case 'e': error				= parse_events(optarg); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#397: FILE: Documentation/perf_counter/perf-record.c:292:
+		case 'm': mmap_pages			=   atoi(optarg); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#398: FILE: Documentation/perf_counter/perf-record.c:293:
+		case 'o': output_name			= strdup(optarg); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#399: FILE: Documentation/perf_counter/perf-record.c:294:
+		case 'r': realtime_prio			=   atoi(optarg); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#400: FILE: Documentation/perf_counter/perf-record.c:295:
+		default: error = 1; break;

WARNING:MEMORY_BARRIER: memory barrier without comment
#432: FILE: Documentation/perf_counter/perf-record.c:327:
+	rmb();

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#465: FILE: Documentation/perf_counter/perf-record.c:360:
+		msecs = iv.tv_sec*1000 + iv.tv_usec/1000;
 		                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#465: FILE: Documentation/perf_counter/perf-record.c:360:
+		msecs = iv.tv_sec*1000 + iv.tv_usec/1000;
 		                                   ^

WARNING:SPLIT_STRING: quoted string split across lines
#468: FILE: Documentation/perf_counter/perf-record.c:363:
+		fprintf(stderr, "WARNING: failed to keep up with mmap data."
+				"  Last read %lu msecs ago.\n", msecs);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#489: FILE: Documentation/perf_counter/perf-record.c:384:
+			int ret = write(output, buf, size);
+			if (ret < 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#503: FILE: Documentation/perf_counter/perf-record.c:398:
+		int ret = write(output, buf, size);
+		if (ret < 0) {

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#514: FILE: Documentation/perf_counter/perf-record.c:409:
+static volatile int done = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#514: FILE: Documentation/perf_counter/perf-record.c:409:
+static volatile int done = 0;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#539: FILE: Documentation/perf_counter/perf-record.c:434:
+	output = open(output_name, O_CREAT|O_RDWR, S_IRWXU);
 	                                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU' are not preferred. Consider using octal permissions '0700'.
#539: FILE: Documentation/perf_counter/perf-record.c:434:
+	output = open(output_name, O_CREAT|O_RDWR, S_IRWXU);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#551: FILE: Documentation/perf_counter/perf-record.c:446:
+		for (counter = 0; counter < nr_counters; counter++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#563: FILE: Documentation/perf_counter/perf-record.c:458:
+				int err = errno;
+				printf("kerneltop error: syscall returned with %d (%s)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: Documentation/perf_counter/perf-record.c:459:
+				printf("kerneltop error: syscall returned with %d (%s)\n",
+					fd[i][counter], strerror(err));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#584: FILE: Documentation/perf_counter/perf-record.c:479:
+			mmap_array[i][counter].mask = mmap_pages*page_size - 1;
 			                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#585: FILE: Documentation/perf_counter/perf-record.c:480:
+			mmap_array[i][counter].base = mmap(NULL, (mmap_pages+1)*page_size,
 			                                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#585: FILE: Documentation/perf_counter/perf-record.c:480:
+			mmap_array[i][counter].base = mmap(NULL, (mmap_pages+1)*page_size,
 			                                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: Documentation/perf_counter/perf-record.c:481:
+			mmap_array[i][counter].base = mmap(NULL, (mmap_pages+1)*page_size,
+					PROT_READ, MAP_SHARED, fd[i][counter], 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: Documentation/perf_counter/perf-record.c:484:
+				printf("kerneltop error: failed to mmap with %d (%s)\n",
+						errno, strerror(errno));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000142077.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 28 errors, 31 warnings, 21 checks, 1019 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000142077.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
