WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
  git://git.kernel.org/pub/scm/linux/kernel/git/penberg/slab-2.6.git for-linus

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: Documentation/vm/slabinfo.c:544:
+	snprintf(dist_str, 40, "%lu/%lu/%d", s->slabs - s->cpu_slabs,
+						s->partial, s->cpu_slabs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: mm/slob.c:537:
+	c = slob_alloc(sizeof(struct kmem_cache),
+		flags, ARCH_KMALLOC_MINALIGN, -1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: mm/slub.c:284:
+	if (object < base || object >= base + page->objects * s->size ||
 		(object - base) % s->size) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__p' - possible side-effects?
#298: FILE: mm/slub.c:309:
+#define for_each_object(__p, __s, __addr, __objects) \
+	for (__p = (__addr); __p < (__addr) + (__objects) * (__s)->size;\
 			__p += (__s)->size)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__s' - possible side-effects?
#298: FILE: mm/slub.c:309:
+#define for_each_object(__p, __s, __addr, __objects) \
+	for (__p = (__addr); __p < (__addr) + (__objects) * (__s)->size;\
 			__p += (__s)->size)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__addr' - possible side-effects?
#298: FILE: mm/slub.c:309:
+#define for_each_object(__p, __s, __addr, __objects) \
+	for (__p = (__addr); __p < (__addr) + (__objects) * (__s)->size;\
 			__p += (__s)->size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: mm/slub.c:324:
+static inline struct kmem_cache_order_objects oo_make(int order,
+						unsigned long size)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#336: FILE: mm/slub.c:453:
+	printk(KERN_ERR "INFO: Slab 0x%p objects=%u used=%u fp=0x%p flags=0x%04lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: mm/slub.c:454:
+	printk(KERN_ERR "INFO: Slab 0x%p objects=%u used=%u fp=0x%p flags=0x%04lx\n",
+		page, page->objects, page->inuse, page->freelist, page->flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: mm/slub.c:754:
+		slab_err(s, page, "objects %u > max %u",
+			s->name, page->objects, maxobj);

WARNING:SPLIT_STRING: quoted string split across lines
#433: FILE: mm/slub.c:807:
+		slab_err(s, page, "Wrong number of objects. Found %d but "
+			"should be %d", page->objects, max_objects);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#441: FILE: mm/slub.c:813:
 		slab_err(s, page, "Wrong object count. Counter is %d but "
+			"counted were %d", page->inuse, page->objects - nr);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#466: FILE: mm/slub.c:883:
 }
+static inline void dec_slabs_node(struct kmem_cache *s, int node, int objects)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: mm/slub.c:1087:
+static inline void inc_slabs_node(struct kmem_cache *s, int node,
+							int objects) {}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: mm/slub.c:1089:
+static inline void dec_slabs_node(struct kmem_cache *s, int node,
+							int objects) {}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: mm/slub.c:1096:
+static inline struct page *alloc_slab_page(gfp_t flags, int node,
+					struct kmem_cache_order_objects oo)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: mm/slub.c:1114:
+	page = alloc_slab_page(flags | __GFP_NOWARN | __GFP_NORETRY, node,
+									oo);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: mm/slub.c:1195:
+		for_each_object(p, s, page_address(page),
+						page->objects)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: mm/slub.c:2399:
+static void list_slab_objects(struct kmem_cache *s, struct page *page,
+							const char *text)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#793: FILE: mm/slub.c:2413:
+	for_each_object(p, s, addr, page->objects) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#795: FILE: mm/slub.c:2415:
+			printk(KERN_ERR "INFO: Object 0x%p @offset=%tu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#796: FILE: mm/slub.c:2416:
+			printk(KERN_ERR "INFO: Object 0x%p @offset=%tu\n",
+							p, p - addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#828: FILE: mm/slub.c:2440:
+			list_slab_objects(s, page,
+				"Objects remaining on kmem_cache_close()");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#854: FILE: mm/slub.c:2480:
+			printk(KERN_ERR "SLUB %s: %s called for cache that "

WARNING:SPLIT_STRING: quoted string split across lines
#855: FILE: mm/slub.c:2481:
+			printk(KERN_ERR "SLUB %s: %s called for cache that "
+				"still has objects.\n", s->name, __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: mm/slub.c:3251:
+static unsigned long count_partial(struct kmem_cache_node *n,
+					int (*get_count)(struct page *))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1007: FILE: mm/slub.c:3673:
+#define SO_ALL		(1 << SL_ALL)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1011: FILE: mm/slub.c:3677:
+#define SO_TOTAL	(1 << SL_TOTAL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#1047: FILE: mm/slub.c:3702:
+			if (c->page) {
+					if (flags & SO_TOTAL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1145: FILE: mm/slub.c:3815:
+static ssize_t order_store(struct kmem_cache *s,
+				const char *buf, size_t length)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1147: FILE: mm/slub.c:3817:
+	int order = simple_strtoul(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1180: FILE: mm/slub.c:3869:
+	return show_slab_objects(s, buf, SO_ALL|SO_OBJECTS);
 	                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1186: FILE: mm/slub.c:3875:
+	return show_slab_objects(s, buf, SO_PARTIAL|SO_OBJECTS);
 	                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1192: FILE: mm/slub.c:3881:
+	return show_slab_objects(s, buf, SO_ALL|SO_TOTAL);
 	                                       ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289276.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 26 checks, 1116 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289276.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
