WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#59: FILE: include/linux/slqb_def.h:41:
+^Ivoid ^I^I**head;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#70: FILE: include/linux/slqb_def.h:50:
+	spinlock_t	lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#178: FILE: include/linux/slqb_def.h:138:
+	void		(*ctor)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#212: FILE: include/linux/slqb_def.h:253:
+#define KMALLOC_HEADER (ARCH_KMALLOC_MINALIGN < sizeof(void *) ?	\

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#246: FILE: mm/slqb.c:65:
+static const int numa_platform = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: mm/slqb.c:124:
+static inline void slqb_stat_inc(struct kmem_cache_list *list,
+				enum stat_item si)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: mm/slqb.c:132:
+static inline void slqb_stat_add(struct kmem_cache_list *list,
+				enum stat_item si, unsigned long nr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: mm/slqb.c:508:
+static void slab_err(struct kmem_cache *s, struct slqb_page *page,
+			char *fmt, ...)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: mm/slqb.c:683:
+			if (!check_bytes_and_report(s, page, p, "Poison", p,
+					POISON_FREE, s->objsize - 1))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: mm/slqb.c:687:
+			if (!check_bytes_and_report(s, page, p, "Poison",
+					p + s->objsize - 1, POISON_END, 1))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: mm/slqb.c:721:
+static void trace(struct kmem_cache *s, struct slqb_page *page,
+			void *object, int alloc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: mm/slqb.c:751:
+static int alloc_debug_processing(struct kmem_cache *s,
+					void *object, void *addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: mm/slqb.c:779:
+static int free_debug_processing(struct kmem_cache *s,
+					void *object, void *addr)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#523: FILE: mm/slqb.c:921:
+static const int slqb_debug = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: mm/slqb.c:928:
+static struct slqb_page *allocate_slab(struct kmem_cache *s,
+					gfp_t flags, int node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: mm/slqb.c:951:
+static void setup_object(struct kmem_cache *s,
+				struct slqb_page *page, void *object)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: mm/slqb.c:962:
+static struct slqb_page *new_slab_page(struct kmem_cache *s,
+				gfp_t flags, int node, unsigned int colour)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: mm/slqb.c:1046:
+static int free_object_to_page(struct kmem_cache *s,
+			struct kmem_cache_list *l, struct slqb_page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: mm/slqb.c:1150:
+static void claim_remote_free_list(struct kmem_cache *s,
+					struct kmem_cache_list *l)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: mm/slqb.c:1196:
+static __always_inline void *__cache_list_get_object(struct kmem_cache *s,
+						struct kmem_cache_list *l)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: mm/slqb.c:1247:
+static noinline void *__cache_list_get_page(struct kmem_cache *s,
+				struct kmem_cache_list *l)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: mm/slqb.c:1286:
+static noinline void *__slab_alloc_page(struct kmem_cache *s,
+				gfp_t gfpflags, int node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#698: FILE: mm/slqb.c:1351:
+static noinline int alternate_nid(struct kmem_cache *s,
+				gfp_t gfpflags, int node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: mm/slqb.c:1455:
+static __always_inline void *__kmem_cache_alloc(struct kmem_cache *s,
+				gfp_t gfpflags, void *caller)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#755: FILE: mm/slqb.c:1491:
+static void flush_remote_free_cache(struct kmem_cache *s,
+				struct kmem_cache_cpu *c)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: mm/slqb.c:1545:
+static noinline void slab_free_to_remote(struct kmem_cache *s,
+				struct slqb_page *page, void *object,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: mm/slqb.c:1738:
+static void init_kmem_cache_list(struct kmem_cache *s,
+				struct kmem_cache_list *l)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#931: FILE: mm/slqb.c:1777:
+static void init_kmem_cache_node(struct kmem_cache *s,
+				struct kmem_cache_node *n)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: mm/slqb.c:1808:
+static struct kmem_cache_cpu *alloc_kmem_cache_cpu(struct kmem_cache *s,
+				int cpu)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#976: FILE: mm/slqb.c:2023:
+	s->freebatch = max(4UL*PAGE_SIZE / size,
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#977: FILE: mm/slqb.c:2024:
+	s->freebatch = max(4UL*PAGE_SIZE / size,
+				min(256UL, 64*PAGE_SIZE / size));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#977: FILE: mm/slqb.c:2024:
+				min(256UL, 64*PAGE_SIZE / size));
 				             ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kmem_cache_create', this function's name, in a string
#1131: FILE: mm/slqb.c:2795:
+		panic("kmem_cache_create(): failed to create slab `%s'\n", name);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1206: FILE: mm/slqb.c:3038:
+	seq_printf(m, " : tunables %4u %4u %4u", slab_hiwater(s),
+			slab_freebatch(s), 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1208: FILE: mm/slqb.c:3040:
+	seq_printf(m, " : slabdata %6lu %6lu %6lu", stats.nr_slabs,
+			stats.nr_slabs, 0UL);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1217: FILE: mm/slqb.c:3066:
+	proc_create("slabinfo", S_IWUSR|S_IRUGO, NULL,
 	                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#1217: FILE: mm/slqb.c:3066:
+	proc_create("slabinfo", S_IWUSR|S_IRUGO, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1218: FILE: mm/slqb.c:3067:
+	proc_create("slabinfo", S_IWUSR|S_IRUGO, NULL,
+			&proc_slabinfo_operations);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1258: FILE: mm/slqb.c:3209:
+static ssize_t hiwater_store(struct kmem_cache *s,
+				const char *buf, size_t length)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1268: FILE: mm/slqb.c:3233:
+static ssize_t freebatch_store(struct kmem_cache *s,
+				const char *buf, size_t length)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1287: FILE: mm/slqb.c:3275:
+			len += sprintf(buf+len, " C%d=%lu", cpu, l->stats[si]);
 			                  ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177516.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 5 warnings, 34 checks, 1193 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177516.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
