WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#53: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: drivers/block/dst/thread_pool.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#91: FILE: drivers/block/dst/thread_pool.c:34:
+struct thread_pool_worker
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: Unnecessary space before function pointer name
#108: FILE: drivers/block/dst/thread_pool.c:51:
+	int			(* action)(void *private, void *schedule_data);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#108: FILE: drivers/block/dst/thread_pool.c:51:
+	int			(* action)(void *private, void *schedule_data);
 	   			 ^

WARNING:SPACING: Unnecessary space before function pointer name
#109: FILE: drivers/block/dst/thread_pool.c:52:
+	void			(* cleanup)(void *private);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#109: FILE: drivers/block/dst/thread_pool.c:52:
+	void			(* cleanup)(void *private);
 	    			 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: drivers/block/dst/thread_pool.c:96:
+		wait_event_interruptible(w->wait,
+			kthread_should_stop() || w->has_data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: drivers/block/dst/thread_pool.c:122:
+		dprintk("%s: locking list_empty: %d, thread_num: %d.\n",
+				__func__, list_empty(&p->ready_list), p->thread_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: drivers/block/dst/thread_pool.c:127:
+			w = list_first_entry(&p->ready_list,
+					struct thread_pool_worker,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: drivers/block/dst/thread_pool.c:131:
+			dprintk("%s: deleting w: %p, thread_num: %d, list: %p [%p.%p].\n",
+					__func__, w, p->thread_num, &p->ready_list,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: drivers/block/dst/thread_pool.c:143:
+	dprintk("%s: deleted w: %p, thread_num: %d.\n",
+			__func__, w, p->thread_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: drivers/block/dst/thread_pool.c:183:
+int thread_pool_add_worker(struct thread_pool *p,
+		char *name,

WARNING:SPACING: Unnecessary space before function pointer name
#242: FILE: drivers/block/dst/thread_pool.c:185:
+		void *(* init)(void *private),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#242: FILE: drivers/block/dst/thread_pool.c:185:
+		void *(* init)(void *private),
 		       ^

WARNING:SPACING: Unnecessary space before function pointer name
#243: FILE: drivers/block/dst/thread_pool.c:186:
+		void (* cleanup)(void *private),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#243: FILE: drivers/block/dst/thread_pool.c:186:
+		void (* cleanup)(void *private),
 		      ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*w)...) over kzalloc(sizeof(struct thread_pool_worker)...)
#249: FILE: drivers/block/dst/thread_pool.c:192:
+	w = kzalloc(sizeof(struct thread_pool_worker), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: drivers/block/dst/thread_pool.c:246:
+struct thread_pool *thread_pool_create(int num, char *name,
+		void *(* init)(void *private),

WARNING:SPACING: Unnecessary space before function pointer name
#303: FILE: drivers/block/dst/thread_pool.c:246:
+		void *(* init)(void *private),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#303: FILE: drivers/block/dst/thread_pool.c:246:
+		void *(* init)(void *private),
 		       ^

WARNING:SPACING: Unnecessary space before function pointer name
#304: FILE: drivers/block/dst/thread_pool.c:247:
+		void (* cleanup)(void *private),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#304: FILE: drivers/block/dst/thread_pool.c:247:
+		void (* cleanup)(void *private),
 		      ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*p)...) over kzalloc(sizeof(struct thread_pool)...)
#312: FILE: drivers/block/dst/thread_pool.c:255:
+	p = kzalloc(sizeof(struct thread_pool), GFP_KERNEL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#322: FILE: drivers/block/dst/thread_pool.c:265:
+	for (i=0; i<num; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#322: FILE: drivers/block/dst/thread_pool.c:265:
+	for (i=0; i<num; ++i) {
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: drivers/block/dst/thread_pool.c:267:
+		err = thread_pool_add_worker(p, name, i, init,
+				cleanup, private);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: drivers/block/dst/thread_pool.c:290:
+int thread_pool_schedule_private(struct thread_pool *p,
+		int (* setup)(void *private, void *data),

WARNING:SPACING: Unnecessary space before function pointer name
#347: FILE: drivers/block/dst/thread_pool.c:290:
+		int (* setup)(void *private, void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#347: FILE: drivers/block/dst/thread_pool.c:290:
+		int (* setup)(void *private, void *data),
 		     ^

WARNING:SPACING: Unnecessary space before function pointer name
#348: FILE: drivers/block/dst/thread_pool.c:291:
+		int (* action)(void *private, void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#348: FILE: drivers/block/dst/thread_pool.c:291:
+		int (* action)(void *private, void *data),
 		     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: drivers/block/dst/thread_pool.c:299:
+		timeout = wait_event_interruptible_timeout(p->wait,
+				!list_empty(&p->ready_list),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: drivers/block/dst/thread_pool.c:339:
+int thread_pool_schedule(struct thread_pool *p,
+		int (* setup)(void *private, void *data),

WARNING:SPACING: Unnecessary space before function pointer name
#396: FILE: drivers/block/dst/thread_pool.c:339:
+		int (* setup)(void *private, void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#396: FILE: drivers/block/dst/thread_pool.c:339:
+		int (* setup)(void *private, void *data),
 		     ^

WARNING:SPACING: Unnecessary space before function pointer name
#397: FILE: drivers/block/dst/thread_pool.c:340:
+		int (* action)(void *private, void *data),

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#397: FILE: drivers/block/dst/thread_pool.c:340:
+		int (* action)(void *private, void *data),
 		     ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189847.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 12 warnings, 13 checks, 345 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189847.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
