WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#53: FILE: include/linux/kgdb.h:267:
+extern struct kgdb_io *dbg_io_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#133: FILE: kernel/debug/debug_core.c:73:
+struct kgdb_io		*dbg_io_ops;

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#1222: FILE: kernel/debug/debug_core.c:753:
+int kgdb_register_io_module(struct kgdb_io *new_dbg_io_ops)

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#1268: FILE: kernel/debug/debug_core.c:798:
+void kgdb_unregister_io_module(struct kgdb_io *old_dbg_io_ops)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1291: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1296: FILE: kernel/debug/debug_core.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1334: FILE: kernel/debug/debug_core.h:39:
+extern int dbg_remove_all_break(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1335: FILE: kernel/debug/debug_core.h:40:
+extern int dbg_set_sw_break(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1336: FILE: kernel/debug/debug_core.h:41:
+extern int dbg_remove_sw_break(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1337: FILE: kernel/debug/debug_core.h:42:
+extern int dbg_activate_sw_breakpoints(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1340: FILE: kernel/debug/debug_core.h:45:
+extern int gdb_serial_stub(struct kgdb_state *ks);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1341: FILE: kernel/debug/debug_core.h:46:
+extern void gdbstub_msg_write(const char *s, int len);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1350: FILE: kernel/debug/gdbstub.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1384: FILE: kernel/debug/gdbstub.c:35:
+#include <asm/cacheflush.h>

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 37)
#1427: FILE: kernel/debug/gdbstub.c:78:
+		while ((ch = (dbg_io_ops->read_char())) != '$')
+			/* nothing */;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1738: FILE: kernel/debug/gdbstub.c:389:
+	if (tid < -1 && tid > -NR_CPUS - 2) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1745: FILE: kernel/debug/gdbstub.c:396:
+		printk(KERN_ERR "KGDB: Internal thread select error\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1758: FILE: kernel/debug/gdbstub.c:409:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1859: FILE: kernel/debug/gdbstub.c:510:
+	if (kgdb_hex2long(&ptr, &addr) > 0 && *ptr++ == ',' &&
+					kgdb_hex2long(&ptr, &length) > 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1920: FILE: kernel/debug/gdbstub.c:571:
+		printk(KERN_CRIT "Executing emergency reboot\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2007: FILE: kernel/debug/gdbstub.c:658:
+			kgdb_mem2hex(getthread(ks->linux_regs,
+					ks->threadid)->comm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2013: FILE: kernel/debug/gdbstub.c:664:
+			sprintf(tmpstr, "shadowCPU%d",
+					(int)(-ks->threadid - 2));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2111: FILE: kernel/debug/gdbstub.c:762:
+	if (*(ptr++) != ',' ||
+		!kgdb_hex2long(&ptr, &length)) {

CHECK:SPACING: No space is necessary after a cast
#2125: FILE: kernel/debug/gdbstub.c:776:
+			(int) length, *bpt_type - '0');

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2140: FILE: kernel/debug/gdbstub.c:791:
+	if (remcom_in_buffer[1] == '0' && remcom_in_buffer[2] == '9') {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2145: FILE: kernel/debug/gdbstub.c:796:
+	} else if (remcom_in_buffer[1] == '1' && remcom_in_buffer[2] == '5') {
+

WARNING:SPLIT_STRING: quoted string split across lines
#2154: FILE: kernel/debug/gdbstub.c:805:
+		gdbstub_msg_write("KGDB only knows signal 9 (pass)"
+			" and 15 (pass and disconnect)\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2159: FILE: kernel/debug/gdbstub.c:810:
+	/* Indicate fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#2164: FILE: kernel/debug/gdbstub.c:815:
+ * This function performs all gdbserial command procesing
                                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2250: FILE: kernel/debug/gdbstub.c:901:
+			/* Fall through on tmp < 0 */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2259: FILE: kernel/debug/gdbstub.c:910:
+			/* Fall through to default processing */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2263: FILE: kernel/debug/gdbstub.c:914:
+			error = kgdb_arch_handle_exception(ks->ex_vector,
+						ks->signo,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2278: FILE: kernel/debug/gdbstub.c:929:
+
+		}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000007310.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 16 checks, 2190 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000007310.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
