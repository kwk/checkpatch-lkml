WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
> So first off, you should call this "trylock", since it doesn't necessarily 

WARNING:REPEATED_WORD: Possible repeated word: 'threaded'
#158: 
kernels can get away with that using threaded threaded interrupts, but

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#268: FILE: include/linux/fair-rwlock.h:1:
+#ifndef _LINUX_FAIR_RWLOCK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#281: FILE: include/linux/fair-rwlock.h:14:
+#include <asm/atomic.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#347: FILE: lib/fair-rwlock.c:1:
+/*

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#445: FILE: lib/fair-rwlock.c:99:
+	((NR_CPUS - 1) * SUBSCRIBERS_WOFFSET)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#459: FILE: lib/fair-rwlock.c:113:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: lib/fair-rwlock.c:118:
+static long fair_read_trylock_uncontended(struct fair_rwlock *rwlock,
+	long expect_readers, long roffset)

WARNING:TYPO_SPELLING: 'concurency' may be misspelled - perhaps 'concurrency'?
#479: FILE: lib/fair-rwlock.c:133:
+ * spin if there is concurency to win the cmpxchg. It could happen if, for
                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: lib/fair-rwlock.c:143:
+static int _fair_read_lock_ctx(struct fair_rwlock *rwlock,
+		long roffset, long wmask, int trylock)

CHECK:BRACES: braces {} should be used on all arms of this statement
#502: FILE: lib/fair-rwlock.c:156:
+			if (!trylock) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#507: FILE: lib/fair-rwlock.c:161:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: lib/fair-rwlock.c:166:
+		newvalue = atomic_long_cmpxchg(&rwlock->value,
+				value, value + roffset);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#515: FILE: lib/fair-rwlock.c:169:
+			break;
+		else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: lib/fair-rwlock.c:174:
+	printk_dbg("lib reader got in with value %lX, wmask %lX\n",
+		value, wmask);

CHECK:BRACES: braces {} should be used on all arms of this statement
#530: FILE: lib/fair-rwlock.c:184:
+	if (in_irq())
[...]
+	else if (in_softirq())
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#534: FILE: lib/fair-rwlock.c:188:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: lib/fair-rwlock.c:191:
+		_fair_read_lock_ctx(rwlock, THREAD_ROFFSET, SUBSCRIBERS_WMASK,
+					0);

CHECK:BRACES: Unbalanced braces around else statement
#552: FILE: lib/fair-rwlock.c:206:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: lib/fair-rwlock.c:209:
+		ret = _fair_read_lock_ctx(rwlock,
+					THREAD_ROFFSET, SUBSCRIBERS_WMASK, 1);

CHECK:BRACES: braces {} should be used on all arms of this statement
#566: FILE: lib/fair-rwlock.c:220:
+	if (in_irq())
[...]
+	else if (in_softirq())
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#570: FILE: lib/fair-rwlock.c:224:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: lib/fair-rwlock.c:238:
+static void _fair_write_lock_ctx_wait(struct fair_rwlock *rwlock,
+		long value, long rmask, long wmask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: lib/fair-rwlock.c:250:
+		newvalue = atomic_long_cmpxchg(&rwlock->value,
+				value, value | wmask);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#599: FILE: lib/fair-rwlock.c:253:
+			break;
+		else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: lib/fair-rwlock.c:257:
+	printk_dbg("lib writer got in with value %lX, new %lX, rmask %lX\n",
+		value, value | wmask, rmask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#612: FILE: lib/fair-rwlock.c:266:
+static void _fair_write_lock_ctx_force(struct fair_rwlock *rwlock,
+		long rmask, long woffset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: lib/fair-rwlock.c:277:
+	printk_dbg("lib writer got in with value %lX, woffset %lX, rmask %lX\n",
+		value, woffset, rmask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: lib/fair-rwlock.c:294:
+fair_write_trylock_irq_uncontended(struct fair_rwlock *rwlock,
+	long expect_sub, long sub_woffset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#648: FILE: lib/fair-rwlock.c:302:
+	value = atomic_long_cmpxchg(&rwlock->value, expect_sub,
+			expect_sub + (sub_woffset | SOFTIRQ_WOFFSET

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#667: FILE: lib/fair-rwlock.c:321:
+	value = fair_write_trylock_irq_uncontended(rwlock,
+			0, SUBSCRIBERS_WOFFSET);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: lib/fair-rwlock.c:330:
+	_fair_write_lock_ctx_wait(rwlock, value + SUBSCRIBERS_WOFFSET,
+		THREAD_RMASK, WRITER_MUTEX);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: lib/fair-rwlock.c:357:
+	value = fair_write_trylock_irq_uncontended(rwlock,
+			SUBSCRIBERS_WOFFSET, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: lib/fair-rwlock.c:366:
+		if (likely(atomic_long_cmpxchg(&rwlock->value, value,
+				value + (SOFTIRQ_WOFFSET

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#721: FILE: lib/fair-rwlock.c:375:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: lib/fair-rwlock.c:397:
+static long fair_write_trylock_bh_uncontended(struct fair_rwlock *rwlock,
+	long expect_sub, long sub_woffset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: lib/fair-rwlock.c:404:
+	value = atomic_long_cmpxchg(&rwlock->value, expect_sub,
+		expect_sub + (sub_woffset | SOFTIRQ_WOFFSET | WRITER_MUTEX));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#766: FILE: lib/fair-rwlock.c:420:
+	value = fair_write_trylock_bh_uncontended(rwlock,
+			0, SUBSCRIBERS_WOFFSET);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#775: FILE: lib/fair-rwlock.c:429:
+	_fair_write_lock_ctx_wait(rwlock, value + SUBSCRIBERS_WOFFSET,
+		THREAD_RMASK, WRITER_MUTEX);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#796: FILE: lib/fair-rwlock.c:450:
+	value = fair_write_trylock_bh_uncontended(rwlock,
+			SUBSCRIBERS_WOFFSET, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: lib/fair-rwlock.c:459:
+		if (likely(atomic_long_cmpxchg(&rwlock->value, value,
+				value + (SOFTIRQ_WOFFSET | WRITER_MUTEX))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#813: FILE: lib/fair-rwlock.c:467:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: lib/fair-rwlock.c:487:
+static long fair_write_trylock_uncontended(struct fair_rwlock *rwlock,
+	long expect_sub, long sub_woffset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#859: FILE: lib/fair-rwlock.c:513:
+	_fair_write_lock_ctx_wait(rwlock, value + SUBSCRIBERS_WOFFSET,
+		THREAD_RMASK, WRITER_MUTEX);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: lib/fair-rwlock.c:538:
+		if (likely(atomic_long_cmpxchg(&rwlock->value, value,
+				value | WRITER_MUTEX) == value))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#891: FILE: lib/fair-rwlock.c:545:
+
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000239125.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 37 checks, 626 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000239125.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
