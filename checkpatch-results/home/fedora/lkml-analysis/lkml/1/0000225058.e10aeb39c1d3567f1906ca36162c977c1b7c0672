WARNING:TYPO_SPELLING: 'fixe' may be misspelled - perhaps 'fixed'?
#42: 
Note, selftest is busted with this patch. I didn't have time to fixe it.
                                                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#157: FILE: kernel/trace/trace.c:162:
+	ret = strict_strtoul(str, 0, &buf_size);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#167: FILE: kernel/trace/trace.c:169:
+__setup("trace_buf_size=", set_buf_size);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#466: FILE: kernel/trace/trace.c:286:
+#define CHECK_COND(cond)			\
+	if (unlikely(cond)) {			\
+		tracing_disabled = 1;		\
+		WARN_ON(1);			\
+		return -1;			\
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#466: FILE: kernel/trace/trace.c:286:
+#define CHECK_COND(cond)			\
+	if (unlikely(cond)) {			\
+		tracing_disabled = 1;		\
+		WARN_ON(1);			\
+		return -1;			\
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1102: FILE: kernel/trace/trace.c:991:
+	ring_buffer_seq_printf(s, "%c%c",
 			(entry->flags & TRACE_FLAG_IRQS_OFF) ? 'd' : '.',

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1180: FILE: kernel/trace/trace.c:1061:
+		ret = ring_buffer_seq_printf(s, "%lx %lx\n",
 					entry->ip, entry->parent_ip);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1232: FILE: kernel/trace/trace.c:1133:
+		ret = ring_buffer_seq_printf(s, "%d %d %c %d %d %c\n",
 				       entry->prev_pid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1241: FILE: kernel/trace/trace.c:1143:
+		ret = ring_buffer_seq_printf(s, " %5d:%3d:%c %s %5d:%3d:%c %s\n",
 				       entry->prev_pid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1250: FILE: kernel/trace/trace.c:1156:
+trace_print_special(struct ring_buffer_seq *s, struct special_entry *entry,
 			    int print_type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1259: FILE: kernel/trace/trace.c:1174:
+		ret = ring_buffer_seq_printf(s, "# %ld %ld %ld\n",
 				       entry->arg1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1415: FILE: kernel/trace/trace.c:1309:
+ ^I^Iret = trace_print_ctx(s, (struct ctx_switch_entry *)entry, type, 0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1415: FILE: kernel/trace/trace.c:1309:
+ ^I^Iret = trace_print_ctx(s, (struct ctx_switch_entry *)entry, type, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1415: FILE: kernel/trace/trace.c:1309:
+ ^I^Iret = trace_print_ctx(s, (struct ctx_switch_entry *)entry, type, 0);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1451: FILE: kernel/trace/trace.c:1341:
+	ret = ring_buffer_seq_printf(s, "%d %d %llu ",
+		entry->pid, iter->cpu, t);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iter->event"
#1581: FILE: kernel/trace/trace.c:1462:
+	if (iter->event == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1598: FILE: kernel/trace/trace.c:1497:
+	unsigned buf_flags = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1606: FILE: kernel/trace/trace.c:1510:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2128: FILE: kernel/trace/trace.c:2599:
+		printk(KERN_ERR "tracer: failed to allocate buffer\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2500: FILE: kernel/trace/trace_irqsoff.c:429:
 };
+# define register_irqsoff(trace, tr) register_preemptirq_tracer(trace, tr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2509: FILE: kernel/trace/trace_irqsoff.c:455:
 };
+# define register_preemptoff(trace, tr) register_preemptirq_tracer(trace, tr)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2530: FILE: kernel/trace/trace_irqsoff.c:492:
+#if 0

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2601: FILE: kernel/trace/trace_mmiotrace.c:94:
+		ret += ring_buffer_seq_printf(s, " \n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2676: FILE: kernel/trace/trace_mmiotrace.c:181:
+		ret = ring_buffer_seq_printf(s,
 			"R %d %lu.%06lu %d 0x%llx 0x%lx 0x%lx %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2684: FILE: kernel/trace/trace_mmiotrace.c:188:
+		ret = ring_buffer_seq_printf(s,
 			"W %d %lu.%06lu %d 0x%llx 0x%lx 0x%lx %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2692: FILE: kernel/trace/trace_mmiotrace.c:195:
+		ret = ring_buffer_seq_printf(s,
 			"UNKNOWN %lu.%06lu %d 0x%llx %02x,%02x,%02x 0x%lx %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2724: FILE: kernel/trace/trace_mmiotrace.c:222:
+		ret = ring_buffer_seq_printf(s,
 			"MAP %lu.%06lu %d 0x%llx 0x%lx 0x%lx 0x%lx %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2732: FILE: kernel/trace/trace_mmiotrace.c:229:
+		ret = ring_buffer_seq_printf(s,
 			"UNMAP %lu.%06lu %d 0x%lx %d\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000225058.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 9 warnings, 17 checks, 2590 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000225058.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
