WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "fsl,mpc866-i2c" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#59: FILE: arch/powerpc/boot/dts/mpc866ads.dts:146:
+				compatible = "fsl,mpc866-i2c",

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "fsl,mpc885-i2c" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#80: FILE: arch/powerpc/boot/dts/mpc885ads.dts:218:
+				compatible = "fsl,mpc885-i2c",

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#141: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#146: FILE: drivers/i2c/busses/i2c-cpm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#172: FILE: drivers/i2c/busses/i2c-cpm.c:27:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#173: FILE: drivers/i2c/busses/i2c-cpm.c:28:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#215: FILE: drivers/i2c/busses/i2c-cpm.c:70:
+typedef struct cpm_buf_desc {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: drivers/i2c/busses/i2c-cpm.c:71:
+       ushort  cbd_sc;         /* Status and Control */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: drivers/i2c/busses/i2c-cpm.c:72:
+       ushort  cbd_datlen;     /* Data length in buffer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: drivers/i2c/busses/i2c-cpm.c:73:
+       uint    cbd_bufaddr;    /* Buffer address in host memory */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#238: FILE: drivers/i2c/busses/i2c-cpm.c:93:
+typedef struct i2c_ram {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#259: FILE: drivers/i2c/busses/i2c-cpm.c:114:
+typedef struct i2c_reg {

CHECK:SPACING: No space is necessary after a cast
#300: FILE: drivers/i2c/busses/i2c-cpm.c:155:
+	adap = (struct i2c_adapter *) dev_id;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpm_i2c_init', this function's name, in a string
#352: FILE: drivers/i2c/busses/i2c-cpm.c:207:
+	pr_debug("i2c-cpm: cpm_i2c_init()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#362: FILE: drivers/i2c/busses/i2c-cpm.c:217:
+	pr_debug("i2c-cpm: i2c_ram %x, dp_addr 0x%x\n", (uint) cpm->i2c_ram,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: drivers/i2c/busses/i2c-cpm.c:218:
+	pr_debug("i2c-cpm: i2c_ram %x, dp_addr 0x%x\n", (uint) cpm->i2c_ram,
+		cpm->dp_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: drivers/i2c/busses/i2c-cpm.c:220:
+	pr_debug("i2c-cpm: tbase %d, rbase %d\n",
+		in_be16(&i2c_ram->tbase), in_be16(&i2c_ram->rbase));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#387: FILE: drivers/i2c/busses/i2c-cpm.c:242:
+		cpm->rxbuf[i] = dma_alloc_coherent(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#393: FILE: drivers/i2c/busses/i2c-cpm.c:248:
+		cpm->txbuf[i] = (unsigned char *)dma_alloc_coherent(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#393: FILE: drivers/i2c/busses/i2c-cpm.c:248:
+		cpm->txbuf[i] = (unsigned char *)dma_alloc_coherent(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: drivers/i2c/busses/i2c-cpm.c:268:
+			dma_free_coherent(NULL, CPM_MAX_READ + 1,
+				cpm->rxbuf[i], cpm->rxdma[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: drivers/i2c/busses/i2c-cpm.c:271:
+			dma_free_coherent(NULL, CPM_MAX_READ + 1,
+				cpm->txbuf[i], cpm->txdma[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: drivers/i2c/busses/i2c-cpm.c:291:
+			dma_free_coherent(NULL, CPM_MAX_READ + 1,
+				cpm->rxbuf[i], cpm->rxdma[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: drivers/i2c/busses/i2c-cpm.c:294:
+			dma_free_coherent(NULL, CPM_MAX_READ + 1,
+				cpm->txbuf[i], cpm->txdma[i]);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpm_i2c_force_close', this function's name, in a string
#452: FILE: drivers/i2c/busses/i2c-cpm.c:307:
+	dev_dbg(&adap->dev, "cpm_i2c_force_close()\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: drivers/i2c/busses/i2c-cpm.c:316:
+static void cpm_i2c_parse_message(struct i2c_adapter *adap,
+	struct i2c_msg *pmsg, int num, int tx, int rx)

CHECK:SPACING: No space is necessary after a cast
#471: FILE: drivers/i2c/busses/i2c-cpm.c:326:
+	tbdf = (cbd_t *) cpm_muram_addr(in_be16(&i2c_ram->tbase));

CHECK:SPACING: No space is necessary after a cast
#472: FILE: drivers/i2c/busses/i2c-cpm.c:327:
+	rbdf = (cbd_t *) cpm_muram_addr(in_be16(&i2c_ram->rbase));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#475: FILE: drivers/i2c/busses/i2c-cpm.c:330:
+	/* This chip can't do zero length writes. However, the i2c core uses
+	   them to scan for devices. The best we can do is to convert them

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#476: FILE: drivers/i2c/busses/i2c-cpm.c:331:
+	   into 1 byte reads */

CHECK:SPACING: No space is necessary after a cast
#488: FILE: drivers/i2c/busses/i2c-cpm.c:343:
+	rb = (u_char *) (((ulong) rb + 1) & ~1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#524: FILE: drivers/i2c/busses/i2c-cpm.c:379:
+			tb[i+1] = pmsg->buf[i];
 			    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: drivers/i2c/busses/i2c-cpm.c:402:
+static int cpm_i2c_check_message(struct i2c_adapter *adap,
+	struct i2c_msg *pmsg, int tx, int rx)

CHECK:SPACING: No space is necessary after a cast
#556: FILE: drivers/i2c/busses/i2c-cpm.c:411:
+	tbdf = (cbd_t *) cpm_muram_addr(in_be16(&i2c_ram->tbase));

CHECK:SPACING: No space is necessary after a cast
#557: FILE: drivers/i2c/busses/i2c-cpm.c:412:
+	rbdf = (cbd_t *) cpm_muram_addr(in_be16(&i2c_ram->rbase));

CHECK:SPACING: No space is necessary after a cast
#563: FILE: drivers/i2c/busses/i2c-cpm.c:418:
+	rb = (u_char *) (((uint) rb + 1) & ~1);

CHECK:SPACING: No space is necessary after a cast
#638: FILE: drivers/i2c/busses/i2c-cpm.c:493:
+	tbdf = (cbd_t *) cpm_muram_addr(in_be16(&i2c_ram->tbase));

CHECK:SPACING: No space is necessary after a cast
#639: FILE: drivers/i2c/busses/i2c-cpm.c:494:
+	rbdf = (cbd_t *) cpm_muram_addr(in_be16(&i2c_ram->rbase));

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#646: FILE: drivers/i2c/busses/i2c-cpm.c:501:
+		dev_dbg(&adap->dev, "i2c-algo-cpm.o: " "R: %d T: %d\n",

WARNING:TYPO_SPELLING: 'interupts' may be misspelled - perhaps 'interrupts'?
#656: FILE: drivers/i2c/busses/i2c-cpm.c:511:
+	out_8(&i2c_reg->i2cmr, 0x13);	/* Enable some interupts */
 	                             	               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: drivers/i2c/busses/i2c-cpm.c:538:
+			ret = wait_event_interruptible_timeout(cpm->i2c_wait,
+				!(tbdf[tptr].cbd_sc & BD_I2C_READY), 1 * HZ);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#694: FILE: drivers/i2c/busses/i2c-cpm.c:549:
+	/* Chip errata, clear enable. This is not needed on rev D4 CPUs.
+	   Disabling I2C too early may cause too short stop condition */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#694: FILE: drivers/i2c/busses/i2c-cpm.c:549:
+	   Disabling I2C too early may cause too short stop condition */

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#699: FILE: drivers/i2c/busses/i2c-cpm.c:554:
+	return (num);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:BRACES: braces {} should be used on all arms of this statement
#762: FILE: drivers/i2c/busses/i2c-cpm.c:617:
+	if (of_device_is_compatible(ofdev->node, "fsl,cpm1-i2c")) {
[...]
+	} else if (of_device_is_compatible(ofdev->node, "fsl,cpm2-i2c")) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#763: FILE: drivers/i2c/busses/i2c-cpm.c:618:
+	if (of_device_is_compatible(ofdev->node, "fsl,cpm1-i2c")) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i2c->i2c_ram"
#766: FILE: drivers/i2c/busses/i2c-cpm.c:621:
+		if (i2c->i2c_ram == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: drivers/i2c/busses/i2c-cpm.c:623:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#774: FILE: drivers/i2c/busses/i2c-cpm.c:629:
+		 * this in micropatch.c */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i2c_base"
#782: FILE: drivers/i2c/busses/i2c-cpm.c:637:
+		if (i2c_base == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#789: FILE: drivers/i2c/busses/i2c-cpm.c:644:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i2c->i2c_reg"
#794: FILE: drivers/i2c/busses/i2c-cpm.c:649:
+	if (i2c->i2c_reg == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i2c->version == 1'
#822: FILE: drivers/i2c/busses/i2c-cpm.c:677:
+	if ((i2c->version == 1) && (!i2c->reloc))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!i2c->reloc'
#822: FILE: drivers/i2c/busses/i2c-cpm.c:677:
+	if ((i2c->version == 1) && (!i2c->reloc))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i2c->version == 1'
#834: FILE: drivers/i2c/busses/i2c-cpm.c:689:
+	if ((i2c->version == 1) && (!i2c->reloc))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!i2c->reloc'
#834: FILE: drivers/i2c/busses/i2c-cpm.c:689:
+	if ((i2c->version == 1) && (!i2c->reloc))

WARNING:RETURN_VOID: void function return statements are not generally useful
#840: FILE: drivers/i2c/busses/i2c-cpm.c:695:
+	return;
+}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*i2c)...) over kzalloc(sizeof(struct cpm_i2c)...)
#848: FILE: drivers/i2c/busses/i2c-cpm.c:703:
+	i2c = kzalloc(sizeof(struct cpm_i2c), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#856: FILE: drivers/i2c/busses/i2c-cpm.c:711:
+		printk(KERN_ERR "i2c-cpm: Unable to register resources\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#868: FILE: drivers/i2c/busses/i2c-cpm.c:723:
+		printk(KERN_ERR "i2c-cpm: Unable to register with I2C\n");

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#890: FILE: drivers/i2c/busses/i2c-cpm.c:745:
+static struct of_device_id i2c_cpm_match[] = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "fsl,cpm-i2c" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#892: FILE: drivers/i2c/busses/i2c-cpm.c:747:
+		.compatible = "fsl,cpm-i2c",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344095.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 25 warnings, 33 checks, 842 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344095.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
