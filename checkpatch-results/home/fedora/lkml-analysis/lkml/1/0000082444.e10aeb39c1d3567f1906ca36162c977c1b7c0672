CHECK:SPACING: No space is necessary after a cast
#153: FILE: arch/powerpc/include/asm/processor.h:207:
+	(ALIGN_UP(sizeof(init_thread_info), 16) + (unsigned long) &init_stack)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#167: FILE: arch/powerpc/kernel/head_booke.h:419:
*/

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hbase != ALIGN_UP(hbase, 1 << IO_SEGMENT_SHIFT)'
#522: FILE: arch/powerpc/platforms/cell/iommu.c:1089:
+		if ((hbase != ALIGN_UP(hbase, 1 << IO_SEGMENT_SHIFT)) ||
+		    (hend != ALIGN_UP(hend, 1 << IO_SEGMENT_SHIFT))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hend != ALIGN_UP(hend, 1 << IO_SEGMENT_SHIFT)'
#522: FILE: arch/powerpc/platforms/cell/iommu.c:1089:
+		if ((hbase != ALIGN_UP(hbase, 1 << IO_SEGMENT_SHIFT)) ||
+		    (hend != ALIGN_UP(hend, 1 << IO_SEGMENT_SHIFT))) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#538: FILE: arch/powerpc/platforms/powermac/bootx_init.c:113:
+		*(mem) = ALIGN_UP(*(mem),4); \
 		                        ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#568: FILE: arch/powerpc/platforms/powermac/bootx_init.c:361:
+	mem_start = mem_end = ALIGN_UP(((unsigned long)bi) + start, 4);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#620: FILE: arch/powerpc/platforms/ps3/mm.c:409:
+	unsigned long aligned_len = ALIGN_UP(len+bus_addr-aligned_bus,
 	                                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#620: FILE: arch/powerpc/platforms/ps3/mm.c:409:
+	unsigned long aligned_len = ALIGN_UP(len+bus_addr-aligned_bus,
 	                                                 ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#745: FILE: drivers/ps3/ps3-lpm.c:1111:
+		if (tb_cache != (void *)ALIGN_UP((unsigned long)tb_cache, 128)
+			|| tb_cache_size != ALIGN_UP(tb_cache_size, 128)) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#755: FILE: drivers/ps3/ps3-lpm.c:1130:
+		lpm_priv->tb_cache = (void *)ALIGN_UP(

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#778: FILE: drivers/video/ps3fb.c:1025:
+	max_ps3fb_size = ALIGN_UP(GPU_IOIF, 256*1024*1024) - GPU_IOIF;
 	                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#778: FILE: drivers/video/ps3fb.c:1025:
+	max_ps3fb_size = ALIGN_UP(GPU_IOIF, 256*1024*1024) - GPU_IOIF;
 	                                            ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#783: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#788: FILE: include/linux/align.h:1:
+#ifndef _LINUX_ALIGN_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#794: FILE: include/linux/align.h:7:
+#define ALIGN_UP(x,a)		__ALIGN_MASK(x,(typeof(x))(a)-1)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#794: FILE: include/linux/align.h:7:
+#define ALIGN_UP(x,a)		__ALIGN_MASK(x,(typeof(x))(a)-1)
                      		              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#794: FILE: include/linux/align.h:7:
+#define ALIGN_UP(x,a)		__ALIGN_MASK(x,(typeof(x))(a)-1)
                      		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#795: FILE: include/linux/align.h:8:
+#define ALIGN_DOWN(x,a)		__ALIGN_MASK(x-(a-1),(typeof(x))(a)-1)
                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#795: FILE: include/linux/align.h:8:
+#define ALIGN_DOWN(x,a)		__ALIGN_MASK(x-(a-1),(typeof(x))(a)-1)
                        		              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#795: FILE: include/linux/align.h:8:
+#define ALIGN_DOWN(x,a)		__ALIGN_MASK(x-(a-1),(typeof(x))(a)-1)
                        		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#795: FILE: include/linux/align.h:8:
+#define ALIGN_DOWN(x,a)		__ALIGN_MASK(x-(a-1),(typeof(x))(a)-1)
                        		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#795: FILE: include/linux/align.h:8:
+#define ALIGN_DOWN(x,a)		__ALIGN_MASK(x-(a-1),(typeof(x))(a)-1)
                        		                                   ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#795: FILE: include/linux/align.h:8:
+#define ALIGN_DOWN(x,a)		__ALIGN_MASK(x-(a-1),(typeof(x))(a)-1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#795: FILE: include/linux/align.h:8:
+#define ALIGN_DOWN(x,a)		__ALIGN_MASK(x-(a-1),(typeof(x))(a)-1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#795: FILE: include/linux/align.h:8:
+#define ALIGN_DOWN(x,a)		__ALIGN_MASK(x-(a-1),(typeof(x))(a)-1)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#796: FILE: include/linux/align.h:9:
+#define __ALIGN_MASK(x,mask)	(((x)+(mask))&~(mask))
                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#796: FILE: include/linux/align.h:9:
+#define __ALIGN_MASK(x,mask)	(((x)+(mask))&~(mask))
                             	     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#796: FILE: include/linux/align.h:9:
+#define __ALIGN_MASK(x,mask)	(((x)+(mask))&~(mask))
                             	             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#796: FILE: include/linux/align.h:9:
+#define __ALIGN_MASK(x,mask)	(((x)+(mask))&~(mask))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#801: FILE: include/linux/align.h:14:
+#define ALIGN(x,a)		ALIGN_UP(x,a)
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#801: FILE: include/linux/align.h:14:
+#define ALIGN(x,a)		ALIGN_UP(x,a)
                   		          ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082444.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 2 warnings, 20 checks, 622 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000082444.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
