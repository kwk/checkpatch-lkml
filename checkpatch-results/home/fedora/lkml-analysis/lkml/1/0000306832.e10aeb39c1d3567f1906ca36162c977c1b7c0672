WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#79: FILE: mm/hugetlb.c:37:
+static void clear_huge_page(struct page *page, unsigned long addr, unsigned sz)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#85: FILE: mm/hugetlb.c:42:
+	for (i = 0; i < sz/PAGE_SIZE; i++) {
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#494: FILE: mm/hugetlb.c:499:
+	max_huge_pages = h->free_huge_pages = h->nr_huge_pages = i;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#495: FILE: mm/hugetlb.c:500:
+	printk("Total HugeTLB memory allocated, %ld\n", h->free_huge_pages);

WARNING:LINE_SPACING: Missing a blank line after declarations
#510: FILE: mm/hugetlb.c:534:
+		struct list_head *freel = &h->hugepage_freelists[i];
+		list_for_each_entry_safe(page, next, freel, lru) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#529: FILE: mm/hugetlb.c:552:
+#define persistent_huge_pages(h) (h->nr_huge_pages - h->surplus_huge_pages)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'h' may be better as '(h)' to avoid precedence issues
#529: FILE: mm/hugetlb.c:552:
+#define persistent_huge_pages(h) (h->nr_huge_pages - h->surplus_huge_pages)

WARNING:LINE_SPACING: Missing a blank line after declarations
#643: FILE: mm/hugetlb.c:689:
+	struct hstate *h = &global_hstate;
+	return h->nr_huge_pages * (1 << huge_page_order(h));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#652: FILE: mm/hugetlb.c:745:
+	unsigned sz = huge_page_size(h);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#671: FILE: mm/hugetlb.c:790:
+	unsigned sz = huge_page_size(h);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#682: FILE: mm/hugetlb.c:800:
+	BUG_ON(start & ~huge_page_mask(h));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#683: FILE: mm/hugetlb.c:801:
+	BUG_ON(end & ~huge_page_mask(h));

CHECK:SPACING: No space is necessary after a cast
#847: FILE: mm/hugetlb.c:1266:
+		return_unused_surplus_pages(h, (unsigned long) -delta);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#877: FILE: mm/hugetlb.c:1299:
+	inode->i_blocks -= ((huge_page_size(h))/512) * freed;
 	                                       ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#932: FILE: arch/ia64/mm/hugetlbpage.c:27:
+huge_pte_alloc (struct mm_struct *mm, unsigned long addr, int sz)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1017: FILE: include/linux/hugetlb.h:233:
+static inline unsigned huge_page_size(struct hstate *h)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1032: FILE: include/linux/hugetlb.h:248:
+static inline unsigned huge_page_shift(struct hstate *h)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1123: FILE: fs/hugetlbfs/inode.c:230:
+	struct hstate *h = hstate_file(filp);
 	                               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1192: FILE: fs/hugetlbfs/inode.c:458:
+	BUG_ON(offset & ~huge_page_mask(h));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1262: FILE: mm/mempolicy.c:1299:
+		nid = interleave_nid(pol, vma, addr,
+					huge_page_shift(hstate_vma(vma)));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1271: FILE: mm/mempolicy.c:1944:
+	unsigned sz = huge_page_size(h);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306832.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 7 checks, 1121 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306832.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
