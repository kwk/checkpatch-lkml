WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
Subject: [PATCH 1/4] [Target_Core_Mod]: Move core se_port_t logic to target_core_device.c

WARNING:TYPO_SPELLING: 'IDENTIFER' may be misspelled - perhaps 'IDENTIFIER'?
#47: 
Also, in core_alloc_port() the RELATIVE TARGET PORT IDENTIFER gets set to
                                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'IDENTIFER' may be misspelled - perhaps 'IDENTIFIER'?
#53: 
the RELATIVE TARGET PORT IDENTIFER is displayed under the port_index column:
                         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'IDENTIFER' may be misspelled - perhaps 'IDENTIFIER'?
#82: FILE: drivers/lio-core/target_core_base.h:539:
+	u16			dev_rpti_counter; /* RELATIVE TARGET PORT IDENTIFER Counter */
 	   			                                          ^^^^^^^^^

WARNING:TYPO_SPELLING: 'IDENTIFER' may be misspelled - perhaps 'IDENTIFIER'?
#100: FILE: drivers/lio-core/target_core_base.h:657:
+	u16		sep_rtpi; /* RELATIVE TARGET PORT IDENTIFER */
 	   		                                  ^^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#112: FILE: drivers/lio-core/target_core_device.c:494:
+extern se_port_t *core_alloc_port (se_device_t *dev)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#112: FILE: drivers/lio-core/target_core_device.c:494:
+extern se_port_t *core_alloc_port (se_device_t *dev)

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: drivers/lio-core/target_core_device.c:497:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#116: FILE: drivers/lio-core/target_core_device.c:498:
+	if (!(port = kzalloc(sizeof(se_port_t), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#117: FILE: drivers/lio-core/target_core_device.c:499:
+		printk(KERN_ERR "Unable to allocate se_port_t\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#118: FILE: drivers/lio-core/target_core_device.c:500:
+		return(NULL);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#124: FILE: drivers/lio-core/target_core_device.c:506:
+		printk(KERN_WARNING "Reached dev->dev_port_count == 0x0000ffff\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#126: FILE: drivers/lio-core/target_core_device.c:508:
+		return(NULL);

WARNING:TYPO_SPELLING: 'IDENTIFER' may be misspelled - perhaps 'IDENTIFIER'?
#132: FILE: drivers/lio-core/target_core_device.c:514:
+		 * Make sure RELATIVE TARGET PORT IDENTIFER is unique
 		                                  ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: drivers/lio-core/target_core_device.c:517:
+^I^Iif (port->sep_rtpi == port_tmp->sep_rtpi) $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#140: FILE: drivers/lio-core/target_core_device.c:522:
+	return(port);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#143: FILE: drivers/lio-core/target_core_device.c:525:
+extern void core_export_port (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#143: FILE: drivers/lio-core/target_core_device.c:525:
+extern void core_export_port (

WARNING:TYPO_SPELLING: 'IDENTIFER' may be misspelled - perhaps 'IDENTIFIER'?
#161: FILE: drivers/lio-core/target_core_device.c:543:
+	port->sep_index = port->sep_rtpi; /* RELATIVE TARGET PORT IDENTIFER */
 	                                                          ^^^^^^^^^

WARNING:RETURN_VOID: void function return statements are not generally useful
#164: FILE: drivers/lio-core/target_core_device.c:546:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#169: FILE: drivers/lio-core/target_core_device.c:551:
+extern void core_release_port (se_device_t *dev, se_port_t *port)

WARNING:RETURN_VOID: void function return statements are not generally useful
#176: FILE: drivers/lio-core/target_core_device.c:558:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#189: FILE: drivers/lio-core/target_core_device.h:43:
+extern struct se_port_s *core_alloc_port (struct se_device_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: drivers/lio-core/target_core_device.h:43:
+extern struct se_port_s *core_alloc_port (struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#189: FILE: drivers/lio-core/target_core_device.h:43:
+extern struct se_port_s *core_alloc_port (struct se_device_s *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#190: FILE: drivers/lio-core/target_core_device.h:44:
+extern void core_export_port (struct se_device_s *, struct se_portal_group_s *, struct se_port_s *, struct se_lun_s *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#190: FILE: drivers/lio-core/target_core_device.h:44:
+extern void core_export_port (struct se_device_s *, struct se_portal_group_s *, struct se_port_s *, struct se_lun_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: drivers/lio-core/target_core_device.h:44:
+extern void core_export_port (struct se_device_s *, struct se_portal_group_s *, struct se_port_s *, struct se_lun_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#190: FILE: drivers/lio-core/target_core_device.h:44:
+extern void core_export_port (struct se_device_s *, struct se_portal_group_s *, struct se_port_s *, struct se_lun_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_portal_group_s *' should also have an identifier name
#190: FILE: drivers/lio-core/target_core_device.h:44:
+extern void core_export_port (struct se_device_s *, struct se_portal_group_s *, struct se_port_s *, struct se_lun_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_port_s *' should also have an identifier name
#190: FILE: drivers/lio-core/target_core_device.h:44:
+extern void core_export_port (struct se_device_s *, struct se_portal_group_s *, struct se_port_s *, struct se_lun_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_lun_s *' should also have an identifier name
#190: FILE: drivers/lio-core/target_core_device.h:44:
+extern void core_export_port (struct se_device_s *, struct se_portal_group_s *, struct se_port_s *, struct se_lun_s *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#191: FILE: drivers/lio-core/target_core_device.h:45:
+extern void core_release_port (struct se_device_s *, struct se_port_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: drivers/lio-core/target_core_device.h:45:
+extern void core_release_port (struct se_device_s *, struct se_port_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#191: FILE: drivers/lio-core/target_core_device.h:45:
+extern void core_release_port (struct se_device_s *, struct se_port_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_port_s *' should also have an identifier name
#191: FILE: drivers/lio-core/target_core_device.h:45:
+extern void core_release_port (struct se_device_s *, struct se_port_s *);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#220: FILE: drivers/lio-core/target_core_seobj.c:190:
+	if (!(port = core_alloc_port(dev)))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000173162.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 26 warnings, 4 checks, 174 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000173162.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
