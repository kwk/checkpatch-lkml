WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
currently, <debugfs>/dynamic_printk/modules. When, CONFIG_DYNAMIC_PRINTK_DEBUG,

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#154: FILE: include/linux/device.h:554:
+#define dev_dbg(dev, format, ...) do { \
+	dynamic_dev_dbg(dev, format, ##__VA_ARGS__); \
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#162: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#167: FILE: include/linux/dynamic_printk.h:1:
+#ifndef _DYNAMIC_PRINTK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#171: FILE: include/linux/dynamic_printk.h:5:
+#define DEBUG_HASH_TABLE_SIZE (1 << DYNAMIC_DEBUG_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#195: FILE: include/linux/dynamic_printk.h:29:
+} __attribute__((aligned(8)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: include/linux/dynamic_printk.h:32:
+int register_dynamic_debug_module(char *mod_name, int type, char *share_name,
+					char *flags, int hash, int hash2);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#201: FILE: include/linux/dynamic_printk.h:35:
+extern int unregister_dynamic_debug_module(char *mod_name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#202: FILE: include/linux/dynamic_printk.h:36:
+extern int __dynamic_dbg_enabled_helper(char *modname, int type,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#207: FILE: include/linux/dynamic_printk.h:41:
+	if (unlikely((dynamic_printk_enabled & (1LL << DEBUG_HASH)) &&	     \
[...]
+			__ret = __dynamic_dbg_enabled_helper(module, type,   \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose_strings") over __attribute__((section("__verbose_strings")))
#215: FILE: include/linux/dynamic_printk.h:49:
+	__attribute__((section("__verbose_strings")))			    \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#216: FILE: include/linux/dynamic_printk.h:50:
+	__attribute__((section("__verbose_strings")))			    \
+	 = KBUILD_MODNAME;						    \

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose") over __attribute__((section("__verbose")))
#219: FILE: include/linux/dynamic_printk.h:53:
+	__attribute__((section("__verbose"), aligned(8))) =		    \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#219: FILE: include/linux/dynamic_printk.h:53:
+	__attribute__((section("__verbose"), aligned(8))) =		    \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#223: FILE: include/linux/dynamic_printk.h:57:
+		printk(KERN_DEBUG KBUILD_MODNAME ":" fmt,		    \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose_strings") over __attribute__((section("__verbose_strings")))
#229: FILE: include/linux/dynamic_printk.h:63:
+	__attribute__((section("__verbose_strings")))			    \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#230: FILE: include/linux/dynamic_printk.h:64:
+	__attribute__((section("__verbose_strings")))			    \
+	 = KBUILD_MODNAME;						    \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose") over __attribute__((section("__verbose")))
#233: FILE: include/linux/dynamic_printk.h:67:
+	__attribute__((section("__verbose"), aligned(8))) =		    \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#233: FILE: include/linux/dynamic_printk.h:67:
+	__attribute__((section("__verbose"), aligned(8))) =		    \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#235: FILE: include/linux/dynamic_printk.h:69:
+	if (__dynamic_dbg_enabled(KBUILD_MODNAME, TYPE_BOOLEAN,		    \
[...]
+			dev_printk(KERN_DEBUG, dev,			    \

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#237: FILE: include/linux/dynamic_printk.h:71:
+			dev_printk(KERN_DEBUG, dev,			    \

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#248: FILE: include/linux/dynamic_printk.h:82:
+}
+static inline int __dynamic_dbg_enabled_helper(char *modname, int type,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: include/linux/dynamic_printk.h:83:
+static inline int __dynamic_dbg_enabled_helper(char *modname, int type,
+						int value, int hash)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#279: FILE: include/linux/kernel.h:309:
+#define pr_debug(fmt, ...) do { \
+	dynamic_pr_debug(fmt, ##__VA_ARGS__); \
+	} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#315: FILE: kernel/module.c:1788:
+static void dynamic_printk_setup(Elf_Shdr *sechdrs, unsigned int verboseindex)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: kernel/module.c:1802:
+		register_dynamic_debug_module(debug_info->modname,
+			debug_info->type, debug_info->logical_modname,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#453: FILE: lib/dynamic_printk.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#454: FILE: lib/dynamic_printk.c:2:
+ * lib/dynamic_printk.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:REPEATED_WORD: Possible repeated word: 'their'
#457: FILE: lib/dynamic_printk.c:5:
+ * make pr_debug()/dev_dbg() calls runtime configurable based upon their
+ * their source module.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#470: FILE: lib/dynamic_printk.c:18:
+extern struct mod_debug __stop___verbose[];

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#486: FILE: lib/dynamic_printk.c:34:
+static struct hlist_head module_table[DEBUG_HASH_TABLE_SIZE] =
+	{ [0 ... DEBUG_HASH_TABLE_SIZE-1] = HLIST_HEAD_INIT };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#486: FILE: lib/dynamic_printk.c:34:
+	{ [0 ... DEBUG_HASH_TABLE_SIZE-1] = HLIST_HEAD_INIT };
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#488: FILE: lib/dynamic_printk.c:36:
+static struct hlist_head module_table2[DEBUG_HASH_TABLE_SIZE] =
+	{ [0 ... DEBUG_HASH_TABLE_SIZE-1] = HLIST_HEAD_INIT };

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#488: FILE: lib/dynamic_printk.c:36:
+	{ [0 ... DEBUG_HASH_TABLE_SIZE-1] = HLIST_HEAD_INIT };
 	                              ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*new)...) over kzalloc(sizeof(struct debug_name)...)
#551: FILE: lib/dynamic_printk.c:99:
+	new = kzalloc(sizeof(struct debug_name), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: lib/dynamic_printk.c:143:
+int register_dynamic_debug_module(char *mod_name, int type, char *share_name,
+					char *flags, int hash, int hash2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: lib/dynamic_printk.c:155:
+		if (dynamic_enabled == DYNAMIC_ENABLED_ALL &&
+				!strcmp(mod_name, share_name)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "module_table[i].first"
#643: FILE: lib/dynamic_printk.c:191:
+		if (module_table[i].first != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: lib/dynamic_printk.c:225:
+static ssize_t pr_debug_write(struct file *file, const char __user *buf,
+				size_t length, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#698: FILE: lib/dynamic_printk.c:246:
+	else if (buffer[PAGE_SIZE-1])
 	                         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s"
#708: FILE: lib/dynamic_printk.c:256:
+	if (s == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s"
#712: FILE: lib/dynamic_printk.c:260:
+	if (s == NULL)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#720: FILE: lib/dynamic_printk.c:268:
+		value = !!simple_strtol(value_str, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elem->enable == 0'
#734: FILE: lib/dynamic_printk.c:282:
+				if (value && (elem->enable == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#743: FILE: lib/dynamic_printk.c:291:
+					printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#762: FILE: lib/dynamic_printk.c:310:
+					printk(KERN_DEBUG

WARNING:SPLIT_STRING: quoted string split across lines
#764: FILE: lib/dynamic_printk.c:312:
+					       "debugging disabled for module "
+					       "%s", elem->name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#801: FILE: lib/dynamic_printk.c:349:
+	unsigned int i = *(loff_t *) v;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#807: FILE: lib/dynamic_printk.c:355:
+		seq_printf(s, "\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#813: FILE: lib/dynamic_printk.c:361:
+static struct seq_operations pr_debug_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#820: FILE: lib/dynamic_printk.c:368:
+static int pr_debug_open(struct inode *inode, struct file *filp)
                                                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#822: FILE: lib/dynamic_printk.c:370:
+	return seq_open(filp, &pr_debug_seq_ops);
 	                ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#843: FILE: lib/dynamic_printk.c:391:
+	file = debugfs_create_file("modules", 0644, dir, NULL,
+					&pr_debug_operations);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#848: FILE: lib/dynamic_printk.c:396:
+	for (value = (unsigned long)__start___verbose;
[...]
+			iter = (struct mod_debug *)value;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: lib/dynamic_printk.c:401:
+			register_dynamic_debug_module(iter->modname,
+				iter->type,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#869: FILE: lib/dynamic_printk.c:417:
+}
+/* Use early_param(), so we can get debug output as early as possible */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#932: FILE: scripts/basic/hash.c:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 30 warnings, 25 checks, 810 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
