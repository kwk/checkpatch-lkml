WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#37: FILE: Makefile:4:
+EXTRAVERSION = .11
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#155: FILE: arch/sparc64/kernel/sbus.c:45:
+	volatile unsigned long	strbuf_flushflag;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#294: FILE: arch/sparc64/kernel/sbus.c:165:
+static void sbus_arena_free(struct sbus_iommu_arena *arena, unsigned long base, unsigned long npages)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iopte"
#440: FILE: arch/sparc64/kernel/sbus.c:243:
+	if (unlikely(iopte == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#546: FILE: arch/sparc64/kernel/sbus.c:309:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#577: FILE: arch/sparc64/kernel/sbus.c:333:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#664: FILE: arch/sparc64/kernel/sbus.c:448:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base"
#676: FILE: arch/sparc64/kernel/sbus.c:456:
+	if (unlikely(base == NULL))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#677: FILE: arch/sparc64/kernel/sbus.c:457:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#737: FILE: arch/sparc64/kernel/sbus.c:494:
+		BUG();

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#770: FILE: arch/sparc64/kernel/sbus.c:518:
+void sbus_dma_sync_single_for_cpu(struct sbus_dev *sdev, dma_addr_t bus_addr, size_t sz, int direction)

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#795: FILE: arch/sparc64/kernel/sbus.c:538:
+void sbus_dma_sync_sg_for_cpu(struct sbus_dev *sdev, struct scatterlist *sglist, int nelems, int direction)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#979: FILE: block/cfq-iosched.c:470:
+	BUG_ON(!cfqq->next_rq);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1004: FILE: drivers/char/agp/intel-agp.c:408:
+		pgetbl_ctl = readl(intel_i830_private.registers+I810_PGETBL_CTL);
 		                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1086: FILE: drivers/hwmon/w83627ehf.c:456:
+^I^I^I ^Idev_dbg(&client->dev, "Increasing fan%d "$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1086: FILE: drivers/hwmon/w83627ehf.c:456:
+^I^I^I ^Idev_dbg(&client->dev, "Increasing fan%d "$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1114: FILE: drivers/kvm/mmu.c:134:
+#define PT64_BASE_ADDR_MASK (((1ULL << 52) - 1) & ~(u64)(PAGE_SIZE-1))
                                                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1124: FILE: drivers/kvm/mmu.c:409:
+		BUG_ON((*spte & PT64_BASE_ADDR_MASK) >> PAGE_SHIFT

CHECK:BRACES: braces {} should be used on all arms of this statement
#1142: FILE: drivers/kvm/mmu.c:1105:
+		if (page->role.level == PT_PAGE_TABLE_LEVEL)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1144: FILE: drivers/kvm/mmu.c:1107:
+		else {

CHECK:CAMELCASE: Avoid CamelCase: <Cmnd>
#1308: FILE: drivers/scsi/qlogicpti.c:1284:
+		} else if (Cmnd->request_bufflen) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "up->port.info"
#1322: FILE: drivers/serial/8250.c:1293:
+	    up->port.info != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1355: FILE: fs/exec.c:1350:
+	 * the filename. Do not do this for piped commands. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#1379: FILE: fs/exec.c:1514:
+ ^Iif (ispipe) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1379: FILE: fs/exec.c:1514:
+ ^Iif (ispipe) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1379: FILE: fs/exec.c:1514:
+ ^Iif (ispipe) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1492: FILE: fs/reiserfs/xattr.c:82:
+		int err = -ENODATA;
+		if (flags == 0 || flags & XATTR_CREATE)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1494: FILE: fs/reiserfs/xattr.c:84:
+^I^I^I                                     xaroot, 0700);$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1580: FILE: include/linux/taskstats.h:69:
+	__u64	cpu_count __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1589: FILE: include/linux/taskstats.h:104:
+	__u8	ac_sched __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1593: FILE: include/linux/taskstats.h:107:
+	__u32	ac_uid __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1600: FILE: include/linux/taskstats.h:113:
+	__u64	ac_etime __attribute__((aligned(8)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1716: FILE: mm/shmem.c:410:
+static int shmem_free_swp(swp_entry_t *dir, swp_entry_t *edir,
+						spinlock_t *punch_lock)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1744: FILE: mm/shmem.c:436:
+static int shmem_map_and_free_swp(struct page *subdir, int offset,
+		int limit, struct page ***dir, spinlock_t *punch_lock)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1753: FILE: mm/shmem.c:446:
+		freed += shmem_free_swp(ptr+offset, ptr+offset+size,
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1753: FILE: mm/shmem.c:446:
+		freed += shmem_free_swp(ptr+offset, ptr+offset+size,
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1753: FILE: mm/shmem.c:446:
+		freed += shmem_free_swp(ptr+offset, ptr+offset+size,
 		                                              ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1764: FILE: mm/shmem.c:498:
+	spinlock_t *needs_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1765: FILE: mm/shmem.c:499:
+	spinlock_t *punch_lock;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1799: FILE: mm/shmem.c:541:
+		nr_swaps_freed = shmem_free_swp(ptr+idx, ptr+size, needs_lock);
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1799: FILE: mm/shmem.c:541:
+		nr_swaps_freed = shmem_free_swp(ptr+idx, ptr+size, needs_lock);
 		                                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1835: FILE: mm/shmem.c:585:
+				if (needs_lock) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1840: FILE: mm/shmem.c:590:
+				} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1855: FILE: mm/shmem.c:620:
+				if (needs_lock) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1860: FILE: mm/shmem.c:625:
+				} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1873: FILE: mm/shmem.c:637:
+		if (subdir && !offset && upper_limit-idx >= ENTRIES_PER_PAGE) {
 		                                    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1874: FILE: mm/shmem.c:638:
+			if (needs_lock) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1879: FILE: mm/shmem.c:643:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1895: FILE: mm/shmem.c:657:
+			if (offset || punch_lock) {
[...]
+					page_private(subdir) - freed);
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1900: FILE: mm/shmem.c:660:
+				set_page_private(subdir,
+					page_private(subdir) - freed);

CHECK:BRACES: Unbalanced braces around else statement
#1911: FILE: mm/shmem.c:662:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1912: FILE: mm/shmem.c:663:
+				BUG_ON(page_private(subdir) != freed);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1931: FILE: mm/shmem.c:686:
+			unmap_mapping_range(inode->i_mapping, start,
+							end - start, 1);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1944: FILE: net/core/netpoll.c:475:
+	/*
+	 * Our transport medium may have padded the buffer out.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1968: FILE: net/ipv4/tcp.c:2464:
+	limit = min(nr_all_pages, 1UL<<(28-PAGE_SHIFT)) >> (20-PAGE_SHIFT);
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1968: FILE: net/ipv4/tcp.c:2464:
+	limit = min(nr_all_pages, 1UL<<(28-PAGE_SHIFT)) >> (20-PAGE_SHIFT);
 	                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1968: FILE: net/ipv4/tcp.c:2464:
+	limit = min(nr_all_pages, 1UL<<(28-PAGE_SHIFT)) >> (20-PAGE_SHIFT);
 	                                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1969: FILE: net/ipv4/tcp.c:2465:
+	limit = (limit * (nr_all_pages >> (20-PAGE_SHIFT))) >> (PAGE_SHIFT-11);
 	                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1969: FILE: net/ipv4/tcp.c:2465:
+	limit = (limit * (nr_all_pages >> (20-PAGE_SHIFT))) >> (PAGE_SHIFT-11);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2011: FILE: net/sunrpc/svcauth_unix.c:388:
+	struct svc_sock *svsk = rqstp->rq_sock;
+	spin_lock_bh(&svsk->sk_defer_lock);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!svsk->sk_info_authunix"
#2041: FILE: net/sunrpc/svcauth_unix.c:415:
+	    svsk->sk_info_authunix == NULL) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437337.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 25 warnings, 34 checks, 1828 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437337.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
