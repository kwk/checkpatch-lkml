WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: malloc/arena.c:63:
+  size_t mprotect_size;^I/* Size in bytes that has been mprotected$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#89: FILE: malloc/arena.c:64:
+  size_t mprotect_size;	/* Size in bytes that has been mprotected
+			   PROT_READ|PROT_WRITE.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#89: FILE: malloc/arena.c:64:
+			   PROT_READ|PROT_WRITE.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#94: FILE: malloc/arena.c:67:
+     MALLOC_ALIGNMENT. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: malloc/arena.c:68:
+  char pad[-6 * SIZE_SZ & MALLOC_ALIGN_MASK];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: malloc/arena.c:698:
+  h->mprotect_size = size;$

CHECK:SPACING: No space is necessary after a cast
#121: FILE: malloc/arena.c:725:
+    if((unsigned long) new_size > h->mprotect_size) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: malloc/arena.c:725:
+    if((unsigned long) new_size > h->mprotect_size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#121: FILE: malloc/arena.c:725:
+    if((unsigned long) new_size > h->mprotect_size) {
+      if (mprotect((char *)h + h->mprotect_size,

ERROR:SPACING: space required before the open parenthesis '('
#121: FILE: malloc/arena.c:725:
+    if((unsigned long) new_size > h->mprotect_size) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: malloc/arena.c:726:
+      if (mprotect((char *)h + h->mprotect_size,$

CHECK:SPACING: No space is necessary after a cast
#123: FILE: malloc/arena.c:727:
+		   (unsigned long) new_size - h->mprotect_size,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#124: FILE: malloc/arena.c:728:
+		   PROT_READ|PROT_WRITE) != 0)
 		            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: malloc/arena.c:730:
+      h->mprotect_size = new_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: malloc/arena.c:731:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: malloc/arena.c:739:
+    if (__builtin_expect (__libc_enable_secure, 0))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#138: FILE: malloc/arena.c:739:
+    if (__builtin_expect (__libc_enable_secure, 0))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: malloc/arena.c:741:
+    if (1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#140: FILE: malloc/arena.c:741:
+    if (1)
[...]
+      {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: malloc/arena.c:743:
+      {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#143: FILE: malloc/arena.c:744:
+	if((char *)MMAP((char *)h + new_size, -diff, PROT_NONE,
[...]
+	  return -2;

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: malloc/arena.c:744:
+	if((char *)MMAP((char *)h + new_size, -diff, PROT_NONE,

CHECK:SPACING: No space is necessary after a cast
#144: FILE: malloc/arena.c:745:
+			MAP_PRIVATE|MAP_FIXED) == (char *) MAP_FAILED)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#144: FILE: malloc/arena.c:745:
+			MAP_PRIVATE|MAP_FIXED) == (char *) MAP_FAILED)
 			           ^

WARNING:TABSTOP: Statements should start on a tabstop
#145: FILE: malloc/arena.c:746:
+	  return -2;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: malloc/arena.c:748:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: malloc/arena.c:750:
+    else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#149: FILE: malloc/arena.c:750:
+    else
+      {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: malloc/arena.c:751:
+      {$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#152: FILE: malloc/arena.c:753:
+	if (!__builtin_expect (no_madv_free, 0))
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#152: FILE: malloc/arena.c:753:
+	if (!__builtin_expect (no_madv_free, 0))
+	  {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#152: FILE: malloc/arena.c:753:
+	if (!__builtin_expect (no_madv_free, 0))

WARNING:TABSTOP: Statements should start on a tabstop
#153: FILE: malloc/arena.c:754:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#154: FILE: malloc/arena.c:755:
+	    if (__builtin_expect (madvise ((char *)h + new_size,

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#154: FILE: malloc/arena.c:755:
+	    if (__builtin_expect (madvise ((char *)h + new_size,
+					   -diff, MADV_FREE), 0) == -1
+		&& errno == EINVAL)
+	      {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#154: FILE: malloc/arena.c:755:
+	    if (__builtin_expect (madvise ((char *)h + new_size,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#154: FILE: malloc/arena.c:755:
+	    if (__builtin_expect (madvise ((char *)h + new_size,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#156: FILE: malloc/arena.c:757:
+					   -diff, MADV_FREE), 0) == -1
+		&& errno == EINVAL)

WARNING:TABSTOP: Statements should start on a tabstop
#157: FILE: malloc/arena.c:758:
+	      {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#159: FILE: malloc/arena.c:760:
+		madvise ((char *)h + new_size, -diff, MADV_DONTNEED);

WARNING:TABSTOP: Statements should start on a tabstop
#160: FILE: malloc/arena.c:761:
+	      }

WARNING:TABSTOP: Statements should start on a tabstop
#161: FILE: malloc/arena.c:762:
+	  }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#162: FILE: malloc/arena.c:763:
+	else
[...]
+	  madvise ((char *)h + new_size, -diff, MADV_DONTNEED);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#164: FILE: malloc/arena.c:765:
+	  madvise ((char *)h + new_size, -diff, MADV_DONTNEED);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: malloc/arena.c:766:
+      }$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000442860.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 34 warnings, 6 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000442860.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
