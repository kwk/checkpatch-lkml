CHECK:SPACING: No space is necessary after a cast
#69: FILE: arch/s390/mm/init.c:113:
+	pgd_val(*((pgd_t *) init_mm.pgd)) = _REGION3_ENTRY_EMPTY;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#75: FILE: arch/s390/mm/init.c:116:
+	pmd_val(*((pmd_t *) init_mm.pgd)) = _SEGMENT_ENTRY_EMPTY;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#77: FILE: arch/s390/mm/init.c:118:
+	memcpy(init_mm.pgd + 1, init_mm.pgd, (PTRS_PER_PGD - 1)*sizeof(pgd_t));
 	                                                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#110: FILE: arch/s390/mm/pgtable.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#111: FILE: arch/s390/mm/pgtable.c:2:
+ *  arch/s390/mm/pgtable.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#131: FILE: arch/s390/mm/pgtable.c:22:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: arch/s390/mm/pgtable.c:42:
+		struct page *shadow = alloc_pages(GFP_KERNEL, ALLOC_ORDER);
+		if (!shadow) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#157: FILE: arch/s390/mm/pgtable.c:48:
+	return (unsigned long *) page_to_phys(page);

CHECK:SPACING: No space is necessary after a cast
#165: FILE: arch/s390/mm/pgtable.c:56:
+		free_pages((unsigned long) shadow, ALLOC_ORDER);

CHECK:SPACING: No space is necessary after a cast
#166: FILE: arch/s390/mm/pgtable.c:57:
+	free_pages((unsigned long) table, ALLOC_ORDER);

WARNING:LINE_SPACING: Missing a blank line after declarations
#182: FILE: arch/s390/mm/pgtable.c:73:
+		struct page *shadow = alloc_page(GFP_KERNEL);
+		if (!shadow) {

CHECK:SPACING: No space is necessary after a cast
#186: FILE: arch/s390/mm/pgtable.c:77:
+		table = (unsigned long *) page_to_phys(shadow);

CHECK:SPACING: No space is necessary after a cast
#189: FILE: arch/s390/mm/pgtable.c:80:
+		page->index = (addr_t) table;

CHECK:SPACING: No space is necessary after a cast
#191: FILE: arch/s390/mm/pgtable.c:82:
+	table = (unsigned long *) page_to_phys(page);

CHECK:SPACING: No space is necessary after a cast
#202: FILE: arch/s390/mm/pgtable.c:93:
+		free_page((unsigned long) shadow);

CHECK:SPACING: No space is necessary after a cast
#203: FILE: arch/s390/mm/pgtable.c:94:
+	free_page((unsigned long) table);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#205: FILE: arch/s390/mm/pgtable.c:96:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#226: FILE: arch/s390/mm/vmem.c:84:
+	memcpy(pmd + 1, pmd, (PTRS_PER_PMD - 1)*sizeof(pmd_t));
 	                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#245: FILE: arch/s390/mm/vmem.c:95:
+	memcpy(pte + 1, pte, (PTRS_PER_PTE - 1)*sizeof(pte_t));
 	                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: include/asm-s390/mmu_context.h:42:
+		pgd_t *shadow_pgd = get_shadow_table(pgd) ? : pgd;
+		S390_lowcore.user_exec_asce = asce_bits | __pa(shadow_pgd);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#280: FILE: include/asm-s390/mmu_context.h:43:
+		asm volatile(LCTL_OPCODE" 1,1,%0\n"

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space prohibited before that close parenthesis ')'
#281: FILE: include/asm-s390/mmu_context.h:44:
+			     : : "m" (S390_lowcore.user_exec_asce) );

CHECK:BRACES: Unbalanced braces around else statement
#282: FILE: include/asm-s390/mmu_context.h:45:
+	} else

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#284: FILE: include/asm-s390/mmu_context.h:47:
+		asm volatile(LCTL_OPCODE" 13,13,%0"

ERROR:SPACING: space prohibited before that close parenthesis ')'
#285: FILE: include/asm-s390/mmu_context.h:48:
+			     : : "m" (S390_lowcore.user_asce) );

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: include/asm-s390/mmu_context.h:60:
+#define enter_lazy_tlb(mm,tsk)	do { } while (0)
                          ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#343: FILE: include/asm-s390/pgalloc.h:22:
+unsigned long *crst_table_alloc(struct mm_struct *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#343: FILE: include/asm-s390/pgalloc.h:22:
+unsigned long *crst_table_alloc(struct mm_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#344: FILE: include/asm-s390/pgalloc.h:23:
+void crst_table_free(unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#351: FILE: include/asm-s390/pgalloc.h:25:
+unsigned long *page_table_alloc(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#352: FILE: include/asm-s390/pgalloc.h:26:
+void page_table_free(unsigned long *);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#373: FILE: include/asm-s390/pgalloc.h:31:
+	memcpy(crst + 1, crst, sizeof(unsigned long)*2047);
 	                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#377: FILE: include/asm-s390/pgalloc.h:35:
+		memcpy(crst + 1, crst, sizeof(unsigned long)*2047);
 		                                            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#410: FILE: include/asm-s390/pgalloc.h:46:
+#define pmd_alloc_one(mm,address)		({ BUG(); ((pmd_t *)2); })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#410: FILE: include/asm-s390/pgalloc.h:46:
+#define pmd_alloc_one(mm,address)		({ BUG(); ((pmd_t *)2); })
                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#413: FILE: include/asm-s390/pgalloc.h:49:
+#define pgd_populate(mm, pmd, pte)		BUG()

WARNING:LINE_SPACING: Missing a blank line after declarations
#452: FILE: include/asm-s390/pgalloc.h:62:
+	unsigned long *crst = crst_table_alloc(mm, s390_noexec);
+	if (crst)

CHECK:SPACING: No space is necessary after a cast
#454: FILE: include/asm-s390/pgalloc.h:64:
+	return (pmd_t *) crst;

CHECK:SPACING: No space is necessary after a cast
#456: FILE: include/asm-s390/pgalloc.h:66:
+#define pmd_free(pmd) crst_table_free((unsigned long *) pmd)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#456: FILE: include/asm-s390/pgalloc.h:66:
 }
+#define pmd_free(pmd) crst_table_free((unsigned long *) pmd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#483: FILE: include/asm-s390/pgalloc.h:89:
+	unsigned long *crst = crst_table_alloc(mm, s390_noexec);
+	if (crst)

CHECK:SPACING: No space is necessary after a cast
#485: FILE: include/asm-s390/pgalloc.h:91:
+	return (pgd_t *) crst;

CHECK:SPACING: No space is necessary after a cast
#487: FILE: include/asm-s390/pgalloc.h:93:
+#define pgd_free(pgd) crst_table_free((unsigned long *) pgd)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#487: FILE: include/asm-s390/pgalloc.h:93:
+}
+#define pgd_free(pgd) crst_table_free((unsigned long *) pgd)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#498: FILE: include/asm-s390/pgalloc.h:100:
+	pmd_val(pmd[1]) = _SEGMENT_ENTRY + __pa(pte+256);
 	                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#499: FILE: include/asm-s390/pgalloc.h:101:
+	pmd_val(pmd[2]) = _SEGMENT_ENTRY + __pa(pte+512);
 	                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#500: FILE: include/asm-s390/pgalloc.h:102:
+	pmd_val(pmd[3]) = _SEGMENT_ENTRY + __pa(pte+768);
 	                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#505: FILE: include/asm-s390/pgalloc.h:105:
+	pmd_val1(*pmd) = _SEGMENT_ENTRY + __pa(pte+256);
 	                                          ^

CHECK:SPACING: No space is necessary after a cast
#575: FILE: include/asm-s390/pgalloc.h:125:
+	((pte_t *) page_table_alloc(s390_noexec))

CHECK:SPACING: No space is necessary after a cast
#580: FILE: include/asm-s390/pgalloc.h:130:
+	page_table_free((unsigned long *) pte)

CHECK:SPACING: No space is necessary after a cast
#582: FILE: include/asm-s390/pgalloc.h:132:
+	page_table_free((unsigned long *) page_to_phys((struct page *) pte))

CHECK:SPACING: No space is necessary after a cast
#757: FILE: include/asm-s390/pgtable.h:383:
+		return virt_to_page((void *)(addr_t) page->index);

CHECK:SPACING: No space is necessary after a cast
#778: FILE: include/asm-s390/pgtable.h:392:
+	addr = (unsigned long) table;

CHECK:SPACING: No space is necessary after a cast
#801: FILE: include/asm-s390/pgtable.h:403:
+	addr = (unsigned long) table;

WARNING:LINE_SPACING: Missing a blank line after declarations
#837: FILE: include/asm-s390/pgtable.h:453:
+	unsigned long mask = ~_REGION_ENTRY_ORIGIN & ~_REGION_ENTRY_INV;
+	return (pgd_val(pgd) & mask) != _REGION3_ENTRY;

WARNING:LINE_SPACING: Missing a blank line after declarations
#858: FILE: include/asm-s390/pgtable.h:471:
+	unsigned long mask = ~_SEGMENT_ENTRY_ORIGIN & ~_SEGMENT_ENTRY_INV;
+	return (pmd_val(pmd) & mask) != _SEGMENT_ENTRY;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000367936.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 16 warnings, 36 checks, 861 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000367936.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
