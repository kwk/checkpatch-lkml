WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
with the help of Roland McGrath, the owner and original writer of this code.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: include/linux/kernel_stat.h:55:
+extern unsigned long long task_delta_exec(struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#366: FILE: include/linux/sched.h:444:
+};
+/* Alternate field names when used to cache expirations. */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#451: FILE: include/linux/sched.h:1621:
+extern unsigned long long thread_group_sched_runtime(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#462: FILE: include/linux/sched.h:2122:
+extern int thread_group_cputime_alloc(struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#463: FILE: include/linux/sched.h:2123:
+extern void thread_group_cputime(struct task_struct *, struct task_cputime *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#463: FILE: include/linux/sched.h:2123:
+extern void thread_group_cputime(struct task_struct *, struct task_cputime *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_cputime *' should also have an identifier name
#463: FILE: include/linux/sched.h:2123:
+extern void thread_group_cputime(struct task_struct *, struct task_cputime *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#477: FILE: include/linux/sched.h:2137:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#496: FILE: include/linux/time.h:129:
+extern void do_sys_times(struct tms *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tms *' should also have an identifier name
#496: FILE: include/linux/time.h:129:
+extern void do_sys_times(struct tms *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#643: FILE: kernel/fork.c:762:
 
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#700: FILE: kernel/fork.c:830:
+	sig->cutime = sig->cstime = cputime_zero;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cputime"
#921: FILE: kernel/posix-cpu-timers.c:31:
+	if (cputime == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#947: FILE: kernel/posix-cpu-timers.c:57:
+void thread_group_cputime(

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#962: FILE: kernel/posix-cpu-timers.c:72:
+	times->stime = times->utime = cputime_zero;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1428: FILE: kernel/posix-cpu-timers.c:1284:
+static inline int task_cputime_expired(const struct task_cputime *sample,
+					const struct task_cputime *expires)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1720: FILE: kernel/sched_stats.h:291:
+static inline void thread_group_cputime_account_user(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1743: FILE: kernel/sched_stats.h:314:
+static inline void thread_group_cputime_account_system(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1767: FILE: kernel/sched_stats.h:338:
+static inline void thread_group_cputime_account_exec_runtime(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1782: FILE: kernel/sched_stats.h:353:
+static inline void thread_group_cputime_account_user(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1789: FILE: kernel/sched_stats.h:360:
+static inline void thread_group_cputime_account_system(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1796: FILE: kernel/sched_stats.h:367:
+static inline void thread_group_cputime_account_exec_runtime(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1810: FILE: kernel/sched_stats.h:381:
+static inline void account_group_user_time(struct task_struct *tsk,
+					    cputime_t cputime)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1820: FILE: kernel/sched_stats.h:391:
+static inline void account_group_system_time(struct task_struct *tsk,
+					      cputime_t cputime)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1830: FILE: kernel/sched_stats.h:401:
+static inline void account_group_exec_runtime(struct task_struct *tsk,
+					       unsigned long long ns)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000225693.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 22 checks, 1628 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000225693.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
