WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
2) Spurious repaints were removed. The menu layout is retained upon navigating

CHECK:LINE_SPACING: Please don't use multiple blank lines
#215: FILE: scripts/kconfig/menu.c:531:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#220: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#225: FILE: scripts/kconfig/nconf.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#236: FILE: scripts/kconfig/nconf.c:12:
+static const char nconf_readme[] = N_(

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#263: FILE: scripts/kconfig/nconf.c:39:
+"   you wish to change use <Enter> or <Space>. Goto submenu by \n"

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#360: FILE: scripts/kconfig/nconf.c:136:
+menu_no_f_instructions[] = N_(

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#367: FILE: scripts/kconfig/nconf.c:143:
+" Press <Esc> or <left-arrow> to go back one menu, \n"

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#372: FILE: scripts/kconfig/nconf.c:148:
+menu_instructions[] = N_(

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#377: FILE: scripts/kconfig/nconf.c:153:
+" Press <Esc>, <F3> or <left-arrow> to go back one menu, \n"

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#382: FILE: scripts/kconfig/nconf.c:158:
+radiolist_instructions[] = N_(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#387: FILE: scripts/kconfig/nconf.c:163:
+inputbox_instructions_int[] = N_(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#391: FILE: scripts/kconfig/nconf.c:167:
+inputbox_instructions_hex[] = N_(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#394: FILE: scripts/kconfig/nconf.c:170:
+inputbox_instructions_string[] = N_(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#397: FILE: scripts/kconfig/nconf.c:173:
+setmod_text[] = N_(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#401: FILE: scripts/kconfig/nconf.c:177:
+nohelp_text[] = N_(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#403: FILE: scripts/kconfig/nconf.c:179:
+load_config_text[] = N_(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#407: FILE: scripts/kconfig/nconf.c:183:
+load_config_help[] = N_(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#418: FILE: scripts/kconfig/nconf.c:194:
+save_config_text[] = N_(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#421: FILE: scripts/kconfig/nconf.c:197:
+save_config_help[] = N_(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#432: FILE: scripts/kconfig/nconf.c:208:
+search_help[] = N_(

WARNING:TYPO_SPELLING: 'resetted' may be misspelled - perhaps 'reset'?
#500: FILE: scripts/kconfig/nconf.c:276:
+ * resetted in clean_items. It would be better to use a hash, but lets keep it
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#501: FILE: scripts/kconfig/nconf.c:277:
+ * simple... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#506: FILE: scripts/kconfig/nconf.c:282:
+} hotkeys[1<<(sizeof(char)*8)];
            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#506: FILE: scripts/kconfig/nconf.c:282:
+} hotkeys[1<<(sizeof(char)*8)];
                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#587: FILE: scripts/kconfig/nconf.c:363:
+		mvwprintw(main_window, LINES-3, offset,
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: scripts/kconfig/nconf.c:364:
+		mvwprintw(main_window, LINES-3, offset,
+				"%s",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#592: FILE: scripts/kconfig/nconf.c:368:
+		mvwprintw(main_window, LINES-3,
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: scripts/kconfig/nconf.c:369:
+		mvwprintw(main_window, LINES-3,
+				offset, "%s",

WARNING:LINE_SPACING: Missing a blank line after declarations
#604: FILE: scripts/kconfig/nconf.c:380:
+	struct symbol *sym;
+	if (current_item)

WARNING:RETURN_VOID: void function return statements are not generally useful
#614: FILE: scripts/kconfig/nconf.c:390:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#630: FILE: scripts/kconfig/nconf.c:406:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#637: FILE: scripts/kconfig/nconf.c:413:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#646: FILE: scripts/kconfig/nconf.c:422:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#653: FILE: scripts/kconfig/nconf.c:429:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#660: FILE: scripts/kconfig/nconf.c:436:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#667: FILE: scripts/kconfig/nconf.c:443:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#693: FILE: scripts/kconfig/nconf.c:469:
+	int i;
+	for (i = 0; curses_menu_items[i]; i++)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#711: FILE: scripts/kconfig/nconf.c:487:
+		hot_index = (hot_index+1)%hotkeys[c].count;
 		                      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#711: FILE: scripts/kconfig/nconf.c:487:
+		hot_index = (hot_index+1)%hotkeys[c].count;
 		                         ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#713: FILE: scripts/kconfig/nconf.c:489:
+		return hotkeys[c].ptrs[hot_index];
+	} else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#736: FILE: scripts/kconfig/nconf.c:512:
+ * return 0 on success*/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!org"
#745: FILE: scripts/kconfig/nconf.c:521:
+	if (org == NULL || is_hot(index))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#768: FILE: scripts/kconfig/nconf.c:544:
+		if (canbhot(org[i]) && org[i-1] != '<' && org[i-1] != '(') {
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#768: FILE: scripts/kconfig/nconf.c:544:
+		if (canbhot(org[i]) && org[i-1] != '<' && org[i-1] != '(') {
 		                                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#782: FILE: scripts/kconfig/nconf.c:558:
+	/*
+	   snprintf(dest, len, "%.*s(%c)%s", position, org, org[position],

WARNING:TYPO_SPELLING: 'menue' may be misspelled - perhaps 'menu'?
#795: FILE: scripts/kconfig/nconf.c:571:
+ * As ncurses does not allow any attributes inside menue item, we mark the
                                                    ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#796: FILE: scripts/kconfig/nconf.c:572:
+ * hot key as the first capitalized letter in the string */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#802: FILE: scripts/kconfig/nconf.c:578:
+	if (items_num > MAX_MENU_ITEMS-1)
 	                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "menu"
#808: FILE: scripts/kconfig/nconf.c:584:
+	if (menu != NULL)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#817: FILE: scripts/kconfig/nconf.c:593:
+	if (make_hot(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#824: FILE: scripts/kconfig/nconf.c:600:
+	curses_menu_items[items_num] = new_item(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#828: FILE: scripts/kconfig/nconf.c:604:
+	set_item_userptr(curses_menu_items[items_num],
+			&k_menu_items[items_num]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#840: FILE: scripts/kconfig/nconf.c:616:
+	int index = items_num-1;
 	                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: scripts/kconfig/nconf.c:627:
+	snprintf(tmp_str, sizeof(tmp_str), "%s%s",
+			k_menu_items[index].str, new_str);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: scripts/kconfig/nconf.c:629:
+	if (make_hot(k_menu_items[index].str,
+			sizeof(k_menu_items[index].str), tmp_str, index) != 0)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#859: FILE: scripts/kconfig/nconf.c:635:
+	curses_menu_items[index] = new_item(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#863: FILE: scripts/kconfig/nconf.c:639:
+	set_item_userptr(curses_menu_items[index],
+			&k_menu_items[index]);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cur"
#873: FILE: scripts/kconfig/nconf.c:649:
+	if (cur == NULL)

CHECK:SPACING: No space is necessary after a cast
#875: FILE: scripts/kconfig/nconf.c:651:
+	mcur = (struct mitem *) item_userptr(cur);

CHECK:SPACING: No space is necessary after a cast
#890: FILE: scripts/kconfig/nconf.c:666:
+	mcur = (struct mitem *) item_userptr(cur);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#893: FILE: scripts/kconfig/nconf.c:669:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#900: FILE: scripts/kconfig/nconf.c:676:
+static char filename[PATH_MAX+1];
                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#901: FILE: scripts/kconfig/nconf.c:677:
+static char menu_backtitle[PATH_MAX+128];
                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#913: FILE: scripts/kconfig/nconf.c:689:
+		menu_backtitle[sizeof(menu_backtitle)-1] = '\0';
 		                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#917: FILE: scripts/kconfig/nconf.c:693:
+		filename[sizeof(filename)-1] = '\0';
 		                         ^

WARNING:TYPO_SPELLING: 'supress' may be misspelled - perhaps 'suppress'?
#921: FILE: scripts/kconfig/nconf.c:697:
+/* command = 0 is supress, 1 is restore */
                   ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#946: FILE: scripts/kconfig/nconf.c:722:
+	int res;
+	if (!conf_get_changed()) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#951: FILE: scripts/kconfig/nconf.c:727:
+	res = btn_dialog(main_window,
+			_("Do you wish to save your "

WARNING:SPLIT_STRING: quoted string split across lines
#952: FILE: scripts/kconfig/nconf.c:728:
+			_("Do you wish to save your "
+				"new kernel configuration?\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#969: FILE: scripts/kconfig/nconf.c:745:
+			btn_dialog(

WARNING:SPLIT_STRING: quoted string split across lines
#972: FILE: scripts/kconfig/nconf.c:748:
+				_("Error during writing of the kernel "
+				  "configuration.\n"

WARNING:SPLIT_STRING: quoted string split across lines
#974: FILE: scripts/kconfig/nconf.c:750:
+				  "Your kernel configuration "
+				  "changes were NOT saved."),

CHECK:BRACES: Unbalanced braces around else statement
#977: FILE: scripts/kconfig/nconf.c:753:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#979: FILE: scripts/kconfig/nconf.c:755:
+			char buf[1024];
+			snprintf(buf, 1024,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#980: FILE: scripts/kconfig/nconf.c:756:
+			snprintf(buf, 1024,
+				_("Configuration written to %s\n"

WARNING:SPLIT_STRING: quoted string split across lines
#983: FILE: scripts/kconfig/nconf.c:759:
+				  "Execute 'make' to build the kernel or try"
+				  " 'make help'."), filename);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#984: FILE: scripts/kconfig/nconf.c:760:
+			btn_dialog(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#992: FILE: scripts/kconfig/nconf.c:768:
+		btn_dialog(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1003: FILE: scripts/kconfig/nconf.c:779:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1013: FILE: scripts/kconfig/nconf.c:789:
+	dres = dialog_inputbox(main_window,
+			_("Search Configuration Parameter"),

WARNING:SPLIT_STRING: quoted string split across lines
#1015: FILE: scripts/kconfig/nconf.c:791:
+			_("Enter CONFIG_ (sub)string to search for "
+				"(with or without \"CONFIG\")"),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1041: FILE: scripts/kconfig/nconf.c:817:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1057: FILE: scripts/kconfig/nconf.c:833:
+		if (prop && menu != current_menu) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1060: FILE: scripts/kconfig/nconf.c:836:
+			enum prop_type ptype;
+			ptype = menu->prompt ? menu->prompt->type : P_UNKNOWN;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1067: FILE: scripts/kconfig/nconf.c:843:
+					item_make(menu, 'm',
+						"%s%*c%s",

CHECK:BRACES: Unbalanced braces around else statement
#1070: FILE: scripts/kconfig/nconf.c:846:
+				} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1072: FILE: scripts/kconfig/nconf.c:848:
+					item_make(menu, 'm',
+						"   %*c%s  --->",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1083: FILE: scripts/kconfig/nconf.c:859:
+					item_make(menu, ':',
+						"   %*c*** %s ***",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1092: FILE: scripts/kconfig/nconf.c:868:
+					item_make(menu, ':', "---%*c%s",
+						indent + 1, ' ',

CHECK:BRACES: Unbalanced braces around else statement
#1096: FILE: scripts/kconfig/nconf.c:872:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1117: FILE: scripts/kconfig/nconf.c:893:
+				item_make(menu, 't', "[%c]",
+						val == no ? ' ' : '*');

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1139: FILE: scripts/kconfig/nconf.c:915:
+		item_add_str("%*c%s", indent + 1,
+				' ', _(menu_get_prompt(menu)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1143: FILE: scripts/kconfig/nconf.c:919:
+				item_add_str(" (%s)",
+					_(menu_get_prompt(def_menu)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1156: FILE: scripts/kconfig/nconf.c:932:
+			item_make(menu, ':',
+				"---%*c%s", indent + 1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: scripts/kconfig/nconf.c:945:
+					item_make(menu, 't', "[%c]",
+						val == no ? ' ' : '*');

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: scripts/kconfig/nconf.c:948:
+					item_make(menu, 't', "-%c-",
+						val == no ? ' ' : '*');

CHECK:BRACES: braces {} should be used on all arms of this statement
#1186: FILE: scripts/kconfig/nconf.c:962:
+				if (sym_is_changable(sym)) {
[...]
+				} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1189: FILE: scripts/kconfig/nconf.c:965:
+						item_make(menu,
+							't', "{%c}", ch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1192: FILE: scripts/kconfig/nconf.c:968:
+						item_make(menu,
+							't', "<%c>", ch);

CHECK:BRACES: Unbalanced braces around else statement
#1193: FILE: scripts/kconfig/nconf.c:969:
+				} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1199: FILE: scripts/kconfig/nconf.c:975:
+				item_make(menu, 's', "(%s)",
+						sym_get_string_value(sym));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1204: FILE: scripts/kconfig/nconf.c:980:
+				item_add_str("%*c%s%s", tmp, ' ',
+						_(menu_get_prompt(menu)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1212: FILE: scripts/kconfig/nconf.c:988:
+		item_add_str("%*c%s%s", indent + 1, ' ',
+				_(menu_get_prompt(menu)),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1235: FILE: scripts/kconfig/nconf.c:1011:
+ * prefer not to scroll the menu if possible*/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1244: FILE: scripts/kconfig/nconf.c:1020:
+	if (selected_index >= toprow && selected_index < toprow+maxy) {
 	                                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1247: FILE: scripts/kconfig/nconf.c:1023:
+		set_current_item(curses_menu,
+				curses_menu_items[selected_index]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1249: FILE: scripts/kconfig/nconf.c:1025:
+		toprow = max(selected_index-maxy/2, 0);
 		                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1249: FILE: scripts/kconfig/nconf.c:1025:
+		toprow = max(selected_index-maxy/2, 0);
 		                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1250: FILE: scripts/kconfig/nconf.c:1026:
+		if (toprow >= item_count(curses_menu)-maxy)
 		                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1251: FILE: scripts/kconfig/nconf.c:1027:
+			toprow = item_count(curses_menu)-mwin_max_lines;
 			                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1254: FILE: scripts/kconfig/nconf.c:1030:
+		set_current_item(curses_menu,
+				curses_menu_items[selected_index]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1263: FILE: scripts/kconfig/nconf.c:1039:
+static void show_menu(const char *prompt, const char *instructions,
+		int selected_index, int *last_top_row)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1287: FILE: scripts/kconfig/nconf.c:1063:
+	maxy = mwin_max_lines-1;
 	                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1289: FILE: scripts/kconfig/nconf.c:1065:
+	menu_window = derwin(main_window,
+			maxy,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1292: FILE: scripts/kconfig/nconf.c:1068:
+			(mwin_max_cols-maxx)/2);
 			              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1292: FILE: scripts/kconfig/nconf.c:1068:
+			(mwin_max_cols-maxx)/2);
 			                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1311: FILE: scripts/kconfig/nconf.c:1087:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1333: FILE: scripts/kconfig/nconf.c:1109:
+		show_menu(prompt ? _(prompt) : _("Main Menu"),
+				_(menu_instructions),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: scripts/kconfig/nconf.c:1114:
+			if (process_special_keys(&res,
+						(struct menu *) item_data()))

CHECK:SPACING: No space is necessary after a cast
#1338: FILE: scripts/kconfig/nconf.c:1114:
+						(struct menu *) item_data()))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1361: FILE: scripts/kconfig/nconf.c:1137:
+			if (res == 10 || res == 27 ||  res == 'h' ||
+				res == 32 || res == 'n' || res == 'y' ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#1368: FILE: scripts/kconfig/nconf.c:1144:
+				int tmp = get_next_hot(res);
+				if (tmp != -1)

CHECK:SPACING: No space is necessary after a cast
#1386: FILE: scripts/kconfig/nconf.c:1162:
+		submenu = (struct menu *) item_data();

CHECK:SPACING: No space is necessary after a cast
#1408: FILE: scripts/kconfig/nconf.c:1184:
+						(void *) (long) !submenu->data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1497: FILE: scripts/kconfig/nconf.c:1273:
+				item_make(child, ':', "<X> %s",
+						_(menu_get_prompt(child)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1500: FILE: scripts/kconfig/nconf.c:1276:
+				item_make(child, ':', "    %s",
+						_(menu_get_prompt(child)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1508: FILE: scripts/kconfig/nconf.c:1284:
+		show_menu(prompt ? _(prompt) : _("Choice Menu"),
+				_(radiolist_instructions),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1512: FILE: scripts/kconfig/nconf.c:1288:
+			if (process_special_keys(

CHECK:SPACING: No space is necessary after a cast
#1514: FILE: scripts/kconfig/nconf.c:1290:
+						(struct menu *) item_data()))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1537: FILE: scripts/kconfig/nconf.c:1313:
+			if (res == 10 || res == 27 || res == 'h'
+			    || res == ' ' || res == '?' || res == KEY_LEFT)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1542: FILE: scripts/kconfig/nconf.c:1318:
+				int tmp = get_next_hot(res);
+				if (tmp != -1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1594: FILE: scripts/kconfig/nconf.c:1370:
+		res = dialog_inputbox(main_window,
+				prompt ? _(prompt) : _("Main Menu"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1602: FILE: scripts/kconfig/nconf.c:1378:
+			if (sym_set_string_value(menu->sym,
+						dialog_input_result))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1605: FILE: scripts/kconfig/nconf.c:1381:
+			btn_dialog(main_window,
+				_("You have made an invalid entry."), 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1619: FILE: scripts/kconfig/nconf.c:1395:
+	char dialog_input_result[256];
+	while (1) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1621: FILE: scripts/kconfig/nconf.c:1397:
+		int res;
+		res = dialog_inputbox(main_window,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1622: FILE: scripts/kconfig/nconf.c:1398:
+		res = dialog_inputbox(main_window,
+				NULL, load_config_text,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1651: FILE: scripts/kconfig/nconf.c:1427:
+	char dialog_input_result[256];
+	while (1) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1653: FILE: scripts/kconfig/nconf.c:1429:
+		int res;
+		res = dialog_inputbox(main_window,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1654: FILE: scripts/kconfig/nconf.c:1430:
+		res = dialog_inputbox(main_window,
+				NULL, save_config_text,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1667: FILE: scripts/kconfig/nconf.c:1443:
+				char buf[1024];
+				sprintf(buf, "%s %s",

WARNING:SPLIT_STRING: quoted string split across lines
#1676: FILE: scripts/kconfig/nconf.c:1452:
+			btn_dialog(main_window, _("Can't create file! "
+				"Probably a nonexistent directory."),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1681: FILE: scripts/kconfig/nconf.c:1457:
+			show_scroll_win(main_window,
+				_("Save Alternate Configuration"),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "main_window"
#1692: FILE: scripts/kconfig/nconf.c:1468:
+	if (main_window != NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1696: FILE: scripts/kconfig/nconf.c:1472:
+	main_window = newwin(LINES-2, COLS-2, 2, 1);
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1696: FILE: scripts/kconfig/nconf.c:1472:
+	main_window = newwin(LINES-2, COLS-2, 2, 1);
 	                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1698: FILE: scripts/kconfig/nconf.c:1474:
+	mwin_max_lines = LINES-6;
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1699: FILE: scripts/kconfig/nconf.c:1475:
+	mwin_max_cols = COLS-6;
 	                    ^

WARNING:SPLIT_STRING: quoted string split across lines
#1735: FILE: scripts/kconfig/nconf.c:1511:
+		printf("Your terminal should have at "
+			"least 20 lines and 75 columns\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1762: FILE: scripts/kconfig/nconf.c:1538:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1786: FILE: scripts/kconfig/nconf.gui.c:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1796: FILE: scripts/kconfig/nconf.gui.c:11:
+attributes_t attributes[ATTR_MAX+1] = {0};
                                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1799: FILE: scripts/kconfig/nconf.gui.c:14:
+/* available colors:
+   COLOR_BLACK   0

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1840: FILE: scripts/kconfig/nconf.gui.c:55:
+/* available attributes:
+   A_NORMAL        Normal display (no highlight)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1856: FILE: scripts/kconfig/nconf.gui.c:71:
+#define mkattr(name, attr) do { \
+attributes[name] = attr | COLOR_PAIR(name); } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#1856: FILE: scripts/kconfig/nconf.gui.c:71:
+#define mkattr(name, attr) do { \
+attributes[name] = attr | COLOR_PAIR(name); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1856: FILE: scripts/kconfig/nconf.gui.c:71:
+#define mkattr(name, attr) do { \
+attributes[name] = attr | COLOR_PAIR(name); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1857: FILE: scripts/kconfig/nconf.gui.c:72:
+attributes[name] = attr | COLOR_PAIR(name); } while (0)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void set_colors() should probably be void set_colors(void)
#1915: FILE: scripts/kconfig/nconf.gui.c:130:
+void set_colors()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:TYPO_SPELLING: 'deafults' may be misspelled - perhaps 'defaults'?
#1923: FILE: scripts/kconfig/nconf.gui.c:138:
+		/* give deafults */
 		        ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1928: FILE: scripts/kconfig/nconf.gui.c:143:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1931: FILE: scripts/kconfig/nconf.gui.c:146:
+void print_in_middle(WINDOW *win,
+		int starty,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1939: FILE: scripts/kconfig/nconf.gui.c:154:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!win"
#1940: FILE: scripts/kconfig/nconf.gui.c:155:
+	if (win == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1983: FILE: scripts/kconfig/nconf.gui.c:198:
+	return text+i;
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1989: FILE: scripts/kconfig/nconf.gui.c:204:
+	int res = 0;
+	while (*line != '\0' && *line != '\n') {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2007: FILE: scripts/kconfig/nconf.gui.c:222:
+		char tmp[x+10];
 		          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2010: FILE: scripts/kconfig/nconf.gui.c:225:
+		int len = get_line_length(line);
+		strncpy(tmp, line, min(len, x));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2037: FILE: scripts/kconfig/nconf.gui.c:252:
+	ITEM *btns[btn_num+1];
 	                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2041: FILE: scripts/kconfig/nconf.gui.c:256:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2046: FILE: scripts/kconfig/nconf.gui.c:261:
+		btns_width += strlen(btn)+1;
 		                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2056: FILE: scripts/kconfig/nconf.gui.c:271:
+		int len = get_line_length(line);
+		if (msg_width < len)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2062: FILE: scripts/kconfig/nconf.gui.c:277:
+	y = (LINES-(msg_lines+4))/2;
 	          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2062: FILE: scripts/kconfig/nconf.gui.c:277:
+	y = (LINES-(msg_lines+4))/2;
 	                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2062: FILE: scripts/kconfig/nconf.gui.c:277:
+	y = (LINES-(msg_lines+4))/2;
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2063: FILE: scripts/kconfig/nconf.gui.c:278:
+	x = (COLS-(total_width+4))/2;
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2063: FILE: scripts/kconfig/nconf.gui.c:278:
+	x = (COLS-(total_width+4))/2;
 	                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2063: FILE: scripts/kconfig/nconf.gui.c:278:
+	x = (COLS-(total_width+4))/2;
 	                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2065: FILE: scripts/kconfig/nconf.gui.c:280:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2068: FILE: scripts/kconfig/nconf.gui.c:283:
+		win_rows = msg_lines+4;
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2070: FILE: scripts/kconfig/nconf.gui.c:285:
+		win_rows = msg_lines+2;
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2072: FILE: scripts/kconfig/nconf.gui.c:287:
+	win = newwin(win_rows, total_width+4, y, x);
 	                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2074: FILE: scripts/kconfig/nconf.gui.c:289:
+	menu_win = derwin(win, 1, btns_width, win_rows-2,
 	                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2075: FILE: scripts/kconfig/nconf.gui.c:290:
+	menu_win = derwin(win, 1, btns_width, win_rows-2,
+			1+(total_width+2-btns_width)/2);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2075: FILE: scripts/kconfig/nconf.gui.c:290:
+			1+(total_width+2-btns_width)/2);
 			 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2075: FILE: scripts/kconfig/nconf.gui.c:290:
+			1+(total_width+2-btns_width)/2);
 			              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2075: FILE: scripts/kconfig/nconf.gui.c:290:
+			1+(total_width+2-btns_width)/2);
 			                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2075: FILE: scripts/kconfig/nconf.gui.c:290:
+			1+(total_width+2-btns_width)/2);
 			                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2077: FILE: scripts/kconfig/nconf.gui.c:292:
+	msg_win = derwin(win, win_rows-2, msg_width, 1,
 	                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2078: FILE: scripts/kconfig/nconf.gui.c:293:
+	msg_win = derwin(win, win_rows-2, msg_width, 1,
+			1+(total_width+2-msg_width)/2);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2078: FILE: scripts/kconfig/nconf.gui.c:293:
+			1+(total_width+2-msg_width)/2);
 			 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2078: FILE: scripts/kconfig/nconf.gui.c:293:
+			1+(total_width+2-msg_width)/2);
 			              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2078: FILE: scripts/kconfig/nconf.gui.c:293:
+			1+(total_width+2-msg_width)/2);
 			                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2078: FILE: scripts/kconfig/nconf.gui.c:293:
+			1+(total_width+2-msg_width)/2);
 			                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2100: FILE: scripts/kconfig/nconf.gui.c:315:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2140: FILE: scripts/kconfig/nconf.gui.c:355:
+int dialog_inputbox(WINDOW *main_window,
+		const char *title, const char *prompt,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2153: FILE: scripts/kconfig/nconf.gui.c:368:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2159: FILE: scripts/kconfig/nconf.gui.c:374:
+		int len = get_line_length(line);
+		prompt_width = max(prompt_width, len);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2166: FILE: scripts/kconfig/nconf.gui.c:381:
+	y = (LINES-(prompt_lines+4))/2;
 	          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2166: FILE: scripts/kconfig/nconf.gui.c:381:
+	y = (LINES-(prompt_lines+4))/2;
 	                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2166: FILE: scripts/kconfig/nconf.gui.c:381:
+	y = (LINES-(prompt_lines+4))/2;
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2167: FILE: scripts/kconfig/nconf.gui.c:382:
+	x = (COLS-(prompt_width+4))/2;
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2167: FILE: scripts/kconfig/nconf.gui.c:382:
+	x = (COLS-(prompt_width+4))/2;
 	                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2167: FILE: scripts/kconfig/nconf.gui.c:382:
+	x = (COLS-(prompt_width+4))/2;
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2172: FILE: scripts/kconfig/nconf.gui.c:387:
+	win = newwin(prompt_lines+6, prompt_width+7, y, x);
 	                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2172: FILE: scripts/kconfig/nconf.gui.c:387:
+	win = newwin(prompt_lines+6, prompt_width+7, y, x);
 	                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2173: FILE: scripts/kconfig/nconf.gui.c:388:
+	prompt_win = derwin(win, prompt_lines+1, prompt_width, 2, 2);
 	                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2174: FILE: scripts/kconfig/nconf.gui.c:389:
+	form_win = derwin(win, 1, prompt_width, prompt_lines+3, 2);
 	                                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2202: FILE: scripts/kconfig/nconf.gui.c:417:
+		int len = strlen(result);
+		switch (res) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2212: FILE: scripts/kconfig/nconf.gui.c:427:
+				memmove(&result[cursor_position-1],
 				                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2213: FILE: scripts/kconfig/nconf.gui.c:428:
+				memmove(&result[cursor_position-1],
+						&result[cursor_position],

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2214: FILE: scripts/kconfig/nconf.gui.c:429:
+						len-cursor_position+1);
 						   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2214: FILE: scripts/kconfig/nconf.gui.c:429:
+						len-cursor_position+1);
 						                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2221: FILE: scripts/kconfig/nconf.gui.c:436:
+				memmove(&result[cursor_position],
+						&result[cursor_position+1],

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2221: FILE: scripts/kconfig/nconf.gui.c:436:
+						&result[cursor_position+1],
 						                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2222: FILE: scripts/kconfig/nconf.gui.c:437:
+						len-cursor_position+1);
 						   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2222: FILE: scripts/kconfig/nconf.gui.c:437:
+						len-cursor_position+1);
 						                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2238: FILE: scripts/kconfig/nconf.gui.c:453:
+			if ((isgraph(res) || isspace(res)) &&
+					len-2 < result_len) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2238: FILE: scripts/kconfig/nconf.gui.c:453:
+					len-2 < result_len) {
 					   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2240: FILE: scripts/kconfig/nconf.gui.c:455:
+				memmove(&result[cursor_position+1],
 				                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2241: FILE: scripts/kconfig/nconf.gui.c:456:
+				memmove(&result[cursor_position+1],
+						&result[cursor_position],

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2242: FILE: scripts/kconfig/nconf.gui.c:457:
+						len+1);
 						   ^

WARNING:TYPO_SPELLING: 'unknow' may be misspelled - perhaps 'unknown'?
#2246: FILE: scripts/kconfig/nconf.gui.c:461:
+				mvprintw(0, 0, "unknow key: %d\n", res);
 				                ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2289: FILE: scripts/kconfig/nconf.gui.c:504:
+void show_scroll_win(WINDOW *main_window,
+		const char *title,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2310: FILE: scripts/kconfig/nconf.gui.c:525:
+		int len = get_line_length(line);
+		total_cols = max(total_cols, len+2);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2310: FILE: scripts/kconfig/nconf.gui.c:525:
+		total_cols = max(total_cols, len+2);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2314: FILE: scripts/kconfig/nconf.gui.c:529:
+	pad = newpad(total_lines+10, total_cols+10);
 	                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2314: FILE: scripts/kconfig/nconf.gui.c:529:
+	pad = newpad(total_lines+10, total_cols+10);
 	                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2318: FILE: scripts/kconfig/nconf.gui.c:533:
+	win_lines = min(total_lines+4, LINES-2);
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2318: FILE: scripts/kconfig/nconf.gui.c:533:
+	win_lines = min(total_lines+4, LINES-2);
 	                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2319: FILE: scripts/kconfig/nconf.gui.c:534:
+	win_cols = min(total_cols+2, COLS-2);
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2319: FILE: scripts/kconfig/nconf.gui.c:534:
+	win_cols = min(total_cols+2, COLS-2);
 	                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2320: FILE: scripts/kconfig/nconf.gui.c:535:
+	text_lines = max(win_lines-4, 0);
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2321: FILE: scripts/kconfig/nconf.gui.c:536:
+	text_cols = max(win_cols-2, 0);
 	                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2324: FILE: scripts/kconfig/nconf.gui.c:539:
+	y = (LINES-win_lines)/2;
 	          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2324: FILE: scripts/kconfig/nconf.gui.c:539:
+	y = (LINES-win_lines)/2;
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2325: FILE: scripts/kconfig/nconf.gui.c:540:
+	x = (COLS-win_cols)/2;
 	         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2325: FILE: scripts/kconfig/nconf.gui.c:540:
+	x = (COLS-win_cols)/2;
 	                   ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2338: FILE: scripts/kconfig/nconf.gui.c:553:
+	do {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2340: FILE: scripts/kconfig/nconf.gui.c:555:
+		copywin(pad, win, start_y, start_x, 2, 2, text_lines,
+				text_cols, 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2342: FILE: scripts/kconfig/nconf.gui.c:557:
+				text_lines+2,
 				          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2353: FILE: scripts/kconfig/nconf.gui.c:568:
+			start_y += text_lines-2;
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2356: FILE: scripts/kconfig/nconf.gui.c:571:
+			start_y -= text_lines+2;
 			                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2362: FILE: scripts/kconfig/nconf.gui.c:577:
+			start_y = total_lines-text_lines;
 			                     ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2382: FILE: scripts/kconfig/nconf.gui.c:597:
+		if (res == 10 || res == 27 || res == 'q'
+		    || res == KEY_F(3) || res == KEY_F(7)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2387: FILE: scripts/kconfig/nconf.gui.c:602:
+		if (start_y >= total_lines-text_lines)
 		                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2388: FILE: scripts/kconfig/nconf.gui.c:603:
+			start_y = total_lines-text_lines;
 			                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2391: FILE: scripts/kconfig/nconf.gui.c:606:
+		if (start_x >= total_cols-text_cols)
 		                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2392: FILE: scripts/kconfig/nconf.gui.c:607:
+			start_x = total_cols-text_cols;
 			                    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2405: FILE: scripts/kconfig/nconf.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2443: FILE: scripts/kconfig/nconf.h:39:
+typedef enum {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2467: FILE: scripts/kconfig/nconf.h:63:
+typedef enum {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2481: FILE: scripts/kconfig/nconf.h:77:
+void print_in_middle(WINDOW *win,
+		int starty,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2492: FILE: scripts/kconfig/nconf.h:88:
+int dialog_inputbox(WINDOW *main_window,
+		const char *title, const char *prompt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2496: FILE: scripts/kconfig/nconf.h:92:
+void show_scroll_win(WINDOW *main_window,
+		const char *title,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000050909.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 56 warnings, 198 checks, 2397 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000050909.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
