CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#70: FILE: arch/x86/kernel/acpi/boot.c:133:
+	if (phys+size <= (max_low_pfn_mapped << PAGE_SHIFT))
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#85: FILE: arch/x86/kernel/cpu/amd_64.c:202:
+		if (!rdmsrl_safe(MSR_K8_TSEG_ADDR, &tseg)) {
+		    if ((tseg>>PMD_SHIFT) <

WARNING:TABSTOP: Statements should start on a tabstop
#86: FILE: arch/x86/kernel/cpu/amd_64.c:203:
+		    if ((tseg>>PMD_SHIFT) <

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#86: FILE: arch/x86/kernel/cpu/amd_64.c:203:
+		    if ((tseg>>PMD_SHIFT) <
 		             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#87: FILE: arch/x86/kernel/cpu/amd_64.c:204:
+				(max_low_pfn_mapped>>(PMD_SHIFT-PAGE_SHIFT)) ||
 				                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#87: FILE: arch/x86/kernel/cpu/amd_64.c:204:
+				(max_low_pfn_mapped>>(PMD_SHIFT-PAGE_SHIFT)) ||
 				                               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#88: FILE: arch/x86/kernel/cpu/amd_64.c:205:
+			((tseg>>PMD_SHIFT) <
 			      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#89: FILE: arch/x86/kernel/cpu/amd_64.c:206:
+				(max_pfn_mapped>>(PMD_SHIFT-PAGE_SHIFT)) &&
 				               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#89: FILE: arch/x86/kernel/cpu/amd_64.c:206:
+				(max_pfn_mapped>>(PMD_SHIFT-PAGE_SHIFT)) &&
 				                           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#90: FILE: arch/x86/kernel/cpu/amd_64.c:207:
+			 (tseg>>PMD_SHIFT) >= (1ULL<<(32 - PMD_SHIFT))))
 			      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#90: FILE: arch/x86/kernel/cpu/amd_64.c:207:
+			 (tseg>>PMD_SHIFT) >= (1ULL<<(32 - PMD_SHIFT))))
 			                           ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#105: FILE: arch/x86/kernel/e820.c:1059:
+static unsigned long __init e820_end_pfn(unsigned long limit_pfn, unsigned type)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#136: FILE: arch/x86/kernel/e820.c:1095:
 }
+unsigned long __init e820_end_of_ram_pfn(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#143: FILE: arch/x86/kernel/e820.c:1102:
+	return e820_end_pfn(1UL<<(32 - PAGE_SHIFT), E820_RAM);
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#196: FILE: arch/x86/kernel/setup.c:741:
+	if (max_pfn > (1UL<<(32 - PAGE_SHIFT)))
 	                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#206: FILE: arch/x86/kernel/setup.c:750:
+	max_low_pfn_mapped = init_memory_mapping(0, max_low_pfn<<PAGE_SHIFT);
 	                                                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#211: FILE: arch/x86/kernel/setup.c:755:
+		max_pfn_mapped = init_memory_mapping(1UL<<32,
 		                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#212: FILE: arch/x86/kernel/setup.c:756:
+						     max_pfn<<PAGE_SHIFT);
 						            ^

WARNING:TYPO_SPELLING: 'preseve' may be misspelled - perhaps 'preserve'?
#213: FILE: arch/x86/kernel/setup.c:757:
+		/* can we preseve max_low_pfn ?*/
 		          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#256: FILE: arch/x86/mm/pageattr.c:544:
+	if (address >= (unsigned long)__va(1UL<<32) &&
 	                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: arch/x86/mm/pageattr.c:545:
+	if (address >= (unsigned long)__va(1UL<<32) &&
 		address < (unsigned long)__va(max_pfn_mapped << PAGE_SHIFT))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#268: FILE: arch/x86/mm/pageattr.c:665:
+	if (cpa->pfn > max_low_pfn_mapped && cpa->pfn < (1UL<<(32-PAGE_SHIFT)))
 	                                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#268: FILE: arch/x86/mm/pageattr.c:665:
+	if (cpa->pfn > max_low_pfn_mapped && cpa->pfn < (1UL<<(32-PAGE_SHIFT)))
 	                                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: arch/x86/mm/pageattr.c:673:
+	if (!(within(cpa->vaddr, PAGE_OFFSET,
+		    PAGE_OFFSET + (max_low_pfn_mapped << PAGE_SHIFT))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#280: FILE: arch/x86/mm/pageattr.c:675:
+#ifdef CONFIG_X86_64
+		|| within(cpa->vaddr, PAGE_OFFSET + (1UL<<32),

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#280: FILE: arch/x86/mm/pageattr.c:675:
+		|| within(cpa->vaddr, PAGE_OFFSET + (1UL<<32),
 		                                        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn <= max_low_pfn_mapped'
#296: FILE: arch/x86/mm/pat.c:452:
+	if (((pfn <= max_low_pfn_mapped) ||
+	     (pfn >= (1UL<<(32 - PAGE_SHIFT)) && pfn <= max_pfn_mapped)) &&
 	    ioremap_change_attr((unsigned long)__va(offset), size, flags) < 0) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#297: FILE: arch/x86/mm/pat.c:453:
+	     (pfn >= (1UL<<(32 - PAGE_SHIFT)) && pfn <= max_pfn_mapped)) &&
 	                 ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_pgoff <= max_low_pfn_mapped'
#310: FILE: arch/x86/pci/i386.c:337:
+	if (((vma->vm_pgoff <= max_low_pfn_mapped) ||
+	     (vma->vm_pgoff >= (1UL<<(32 - PAGE_SHIFT)) &&
+	      vma->vm_pgoff <= max_pfn_mapped)) &&
 	    ioremap_change_attr((unsigned long)__va(addr), len, flags)) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#311: FILE: arch/x86/pci/i386.c:338:
+	     (vma->vm_pgoff >= (1UL<<(32 - PAGE_SHIFT)) &&
 	                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#325: FILE: include/asm-x86/e820.h:102:
+extern unsigned long e820_end_of_ram_pfn(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#326: FILE: include/asm-x86/e820.h:103:
+extern unsigned long e820_end_of_low_ram_pfn(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000256165.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 28 checks, 216 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000256165.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
