CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: mm/page_alloc.c:460:
+static inline struct page *__merge_one_page(struct page *page,
+		struct zone *zone, unsigned int order, unsigned int maxorder)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#118: FILE: mm/page_alloc.c:504:
+		if (order == MAX_ORDER-1)
 		                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[order]
#121: FILE: mm/page_alloc.c:507:
+		area = &(zone->free_area[order]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#133: FILE: mm/page_alloc.c:519:
+		list_for_each_entry(page, list, lru) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: mm/page_alloc.c:530:
+			page = __merge_one_page(page, zone,
+							order, MAX_ORDER-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#144: FILE: mm/page_alloc.c:530:
+							order, MAX_ORDER-1);
 							                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: mm/page_alloc.c:532:
+			list_add(&page->lru,
+				&zone->free_area[page_order(page)].free_list[migratetype]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: mm/page_alloc.c:540:
+static inline void __free_one_page(struct page *page,
+		struct zone *zone, unsigned int order,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154131.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 8 checks, 139 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154131.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
