WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
This will be useful to minimize the amount of preemption disabling for the -rt

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#126: FILE: include/asm-i386/thread_info.h:155:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#126: FILE: include/asm-i386/thread_info.h:155:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: include/linux/preempt.h:18:
+  extern void fastcall add_migrate_count(int val);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/preempt.h:18:
+  extern void fastcall add_migrate_count(int val);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: include/linux/preempt.h:19:
+  extern void fastcall sub_migrate_count(int val);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/preempt.h:19:
+  extern void fastcall sub_migrate_count(int val);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#147: FILE: include/linux/preempt.h:27:
+# define add_migrate_count(val) do { migrate_count() += (val); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#148: FILE: include/linux/preempt.h:28:
+# define sub_migrate_count(val) do { migrate_count() -= (val); } while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/preempt.h:105:
+extern void do_check_migrate(void);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#223: FILE: kernel/sched.c:1179:
+	if (!p->se.on_rq && !task_running(rq, p)
+			&& !task_thread_info(p)->migrate_count) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#382: FILE: kernel/sched.c:5637:
+		if (!migrated) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#394: FILE: kernel/sched.c:5649:
+		} else

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#423: FILE: include/asm-alpha/thread_info.h:89:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#423: FILE: include/asm-alpha/thread_info.h:89:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#467: FILE: include/asm-arm/thread_info.h:162:
+#define _TIF_NEED_MIGRATE	(1 << TIF_NEED_MIGRATE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#510: FILE: include/asm-arm26/thread_info.h:134:
+#define _TIF_NEED_MIGRATE	(1 << TIF_NEED_MIGRATE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#546: FILE: include/asm-avr32/thread_info.h:102:
+#define _TIF_NEED_MIGRATE	(1 << TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#582: FILE: include/asm-blackfin/thread_info.h:141:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#582: FILE: include/asm-blackfin/thread_info.h:141:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#618: FILE: include/asm-cris/thread_info.h:96:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#618: FILE: include/asm-cris/thread_info.h:96:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#654: FILE: include/asm-frv/thread_info.h:133:
+#define _TIF_NEED_MIGRATE	(1 << TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#690: FILE: include/asm-h8300/thread_info.h:105:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#690: FILE: include/asm-h8300/thread_info.h:105:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#726: FILE: include/asm-ia64/thread_info.h:105:
+#define _TIF_NEED_MIGRATE	(1 << TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#762: FILE: include/asm-m32r/thread_info.h:168:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#762: FILE: include/asm-m32r/thread_info.h:168:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#809: FILE: include/asm-m68knommu/thread_info.h:101:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#809: FILE: include/asm-m68knommu/thread_info.h:101:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#845: FILE: include/asm-mips/thread_info.h:135:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#845: FILE: include/asm-mips/thread_info.h:135:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#881: FILE: include/asm-parisc/thread_info.h:77:
+#define _TIF_NEED_MIGRATE	(1 << TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#917: FILE: include/asm-powerpc/thread_info.h:149:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#917: FILE: include/asm-powerpc/thread_info.h:149:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#953: FILE: include/asm-s390/thread_info.h:116:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#953: FILE: include/asm-s390/thread_info.h:116:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#989: FILE: include/asm-sh/thread_info.h:131:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#989: FILE: include/asm-sh/thread_info.h:131:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1024: FILE: include/asm-sh64/thread_info.h:91:
+#define _TIF_NEED_MIGRATE	(1 << TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1060: FILE: include/asm-sparc/thread_info.h:149:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1060: FILE: include/asm-sparc/thread_info.h:149:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1097: FILE: include/asm-sparc64/thread_info.h:249:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1097: FILE: include/asm-sparc64/thread_info.h:249:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1133: FILE: include/asm-um/thread_info.h:85:
+#define _TIF_NEED_MIGRATE	(1 << TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1168: FILE: include/asm-v850/thread_info.h:96:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1168: FILE: include/asm-v850/thread_info.h:96:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1204: FILE: include/asm-x86_64/thread_info.h:141:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1204: FILE: include/asm-x86_64/thread_info.h:141:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1240: FILE: include/asm-xtensa/thread_info.h:131:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1240: FILE: include/asm-xtensa/thread_info.h:131:
+#define _TIF_NEED_MIGRATE	(1<<TIF_NEED_MIGRATE)

WARNING:LONG_LINE: line length of 175 exceeds 100 columns
#1270: FILE: lib/smp_processor_id.c:49:
+	printk(KERN_ERR "BUG: using smp_processor_id() in preemptible [%08x] migration [%08x] code: %s/%d\n", preempt_count()-1, migrate_count(), current->comm, current->pid);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1270: FILE: lib/smp_processor_id.c:49:
+	printk(KERN_ERR "BUG: using smp_processor_id() in preemptible [%08x] migration [%08x] code: %s/%d\n", preempt_count()-1, migrate_count(), current->comm, current->pid);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1270: FILE: lib/smp_processor_id.c:49:
+	printk(KERN_ERR "BUG: using smp_processor_id() in preemptible [%08x] migration [%08x] code: %s/%d\n", preempt_count()-1, migrate_count(), current->comm, current->pid);
 	                                                                                                                     ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000406278.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 47 checks, 955 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000406278.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
