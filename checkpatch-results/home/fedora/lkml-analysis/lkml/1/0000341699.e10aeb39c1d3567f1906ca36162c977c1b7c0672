WARNING:LINE_SPACING: Missing a blank line after declarations
#88: FILE: arch/x86/mm/fault_32.c:162:
+	unsigned long limit;
+	if (unlikely(boot_cpu_data.x86_vendor == X86_VENDOR_AMD &&

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#167: FILE: arch/x86/mm/fault_32.c:310:
+/* Workaround for K8 erratum #93 & buggy BIOS.
+   BIOS SMM functions are required to use a specific workaround

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#172: FILE: arch/x86/mm/fault_32.c:315:
+   Note we only handle faults in kernel here. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: arch/x86/mm/fault_32.c:320:
+	static int warned;
+	if (address != regs->ip)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#185: FILE: arch/x86/mm/fault_32.c:328:
+			printk(errata93_warning);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#230: FILE: arch/x86/mm/fault_64.c:86:
+	unsigned seg = regs->cs & 0xffff;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#248: FILE: arch/x86/mm/fault_64.c:104:
+	/* Check the segment exists, is within the current LDT/GDT size,
+	   that kernel/user (ring 0..3) has the appropriate privilege,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#249: FILE: arch/x86/mm/fault_64.c:105:
+	   that it's a code segment, and get the limit. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#258: FILE: arch/x86/mm/fault_64.c:114:
+	/* Get the GDT/LDT descriptor base.
+	   When you look for races in this code remember that

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#259: FILE: arch/x86/mm/fault_64.c:115:
+	   LDT and other horrors are only used in user space. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#260: FILE: arch/x86/mm/fault_64.c:116:
+	if (seg & (1<<2)) {
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#274: FILE: arch/x86/mm/fault_64.c:130:
+	if (seg & (1<<2))
 	            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#280: FILE: arch/x86/mm/fault_64.c:136:
+	/* Adjust EIP and segment limit, and clamp at the kernel limit.
+	   It's legitimate for segments to wrap at 0xffffffff. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#280: FILE: arch/x86/mm/fault_64.c:136:
+	   It's legitimate for segments to wrap at 0xffffffff. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: arch/x86/mm/fault_64.c:165:
+	unsigned long limit;
+	if (unlikely(boot_cpu_data.x86_vendor == X86_VENDOR_AMD &&

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341699.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 2 checks, 317 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341699.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
