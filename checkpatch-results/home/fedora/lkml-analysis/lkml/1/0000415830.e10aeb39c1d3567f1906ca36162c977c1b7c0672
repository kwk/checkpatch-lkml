WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
This driver sets X86_64 'dma_ops', so hook into standard DMA APIs. In this way,

WARNING:TYPO_SPELLING: 'gaurd' may be misspelled - perhaps 'guard'?
#110: FILE: Documentation/Intel-IOMMU.txt:51:
+We also allocate gaurd pages with each mapping, so we can attempt to catch
                  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#225: FILE: drivers/pci/intel-iommu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#238: FILE: drivers/pci/intel-iommu.c:14:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#260: FILE: drivers/pci/intel-iommu.c:36:
+#include <asm/cacheflush.h>

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pdev' may be better as '(pdev)' to avoid precedence issues
#263: FILE: drivers/pci/intel-iommu.c:39:
+#define IS_GFX_DEVICE(pdev) ((pdev->class >> 16) == PCI_BASE_CLASS_DISPLAY)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pdev' may be better as '(pdev)' to avoid precedence issues
#264: FILE: drivers/pci/intel-iommu.c:40:
+#define IS_ISA_DEVICE(pdev) ((pdev->class >> 8) == PCI_CLASS_BRIDGE_ISA)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#272: FILE: drivers/pci/intel-iommu.c:48:
+#define DMAR_OPERATION_TIMEOUT (HZ*60) /* 1m */
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gaw' may be better as '(gaw)' to avoid precedence issues
#274: FILE: drivers/pci/intel-iommu.c:50:
+#define DOMAIN_MAX_ADDR(gaw) ((((u64)1) << gaw) - 1)

WARNING:MISPLACED_INIT: __initdata should be placed after dmar_map_gfx
#279: FILE: drivers/pci/intel-iommu.c:55:
+static int __initdata dmar_map_gfx = 1;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#292: FILE: drivers/pci/intel-iommu.c:68:
+			printk(KERN_INFO"Intel-IOMMU: disabled\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#292: FILE: drivers/pci/intel-iommu.c:68:
+			printk(KERN_INFO"Intel-IOMMU: disabled\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#295: FILE: drivers/pci/intel-iommu.c:71:
+			printk(KERN_INFO

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#305: FILE: drivers/pci/intel-iommu.c:81:
+__setup("intel_iommu=", intel_iommu_setup);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#331: FILE: drivers/pci/intel-iommu.c:107:
+static inline void * alloc_devinfo_mem(void)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#351: FILE: drivers/pci/intel-iommu.c:127:
+static inline void __iommu_flush_cache(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#359: FILE: drivers/pci/intel-iommu.c:135:
+static struct context_entry * device_to_context_entry(struct intel_iommu *iommu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: drivers/pci/intel-iommu.c:136:
+static struct context_entry * device_to_context_entry(struct intel_iommu *iommu,
+		u8 bus, u8 devfn)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#417: FILE: drivers/pci/intel-iommu.c:193:
+		__iommu_flush_cache(iommu, &context[devfn], \

WARNING:BRACES: braces {} are not necessary for single statement blocks
#431: FILE: drivers/pci/intel-iommu.c:207:
+	if (!iommu->root_entry) {
+		goto out;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#459: FILE: drivers/pci/intel-iommu.c:235:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#491: FILE: drivers/pci/intel-iommu.c:267:
+static struct dma_pte * addr_to_dma_pte(struct dmar_domain *domain, u64 addr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#499: FILE: drivers/pci/intel-iommu.c:275:
+	BUG_ON(!domain->pgd);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: drivers/pci/intel-iommu.c:294:
+				spin_unlock_irqrestore(&domain->mapping_lock,
+					flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: drivers/pci/intel-iommu.c:298:
+			__iommu_flush_cache(domain->iommu, tmp_page,
+					PAGE_SIZE_4K);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: drivers/pci/intel-iommu.c:318:
+static struct dma_pte *dma_addr_level_pte(struct dmar_domain *domain, u64 addr,
+		int level)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: drivers/pci/intel-iommu.c:373:
+static void dma_pte_free_pagetable(struct dmar_domain *domain,
+	u64 start, u64 end)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#618: FILE: drivers/pci/intel-iommu.c:394:
+				free_pgtable_page(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: drivers/pci/intel-iommu.c:398:
+				__iommu_flush_cache(domain->iommu,
+						pte, sizeof(*pte));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'iommu' may be better as '(iommu)' to avoid precedence issues
#654: FILE: drivers/pci/intel-iommu.c:430:
+#define IOMMU_WAIT_OP(iommu, offset, op, cond, sts) \
+{\
+	unsigned long start_time = jiffies;\
+	while (1) {\
+		sts = op (iommu->reg + offset);\
+		if (cond)\
+			break;\
+		if (time_after(jiffies, start_time + DMAR_OPERATION_TIMEOUT))\
+			panic("DMAR hardware is malfunctioning\n");\
+		cpu_relax();\
+	}\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#654: FILE: drivers/pci/intel-iommu.c:430:
+#define IOMMU_WAIT_OP(iommu, offset, op, cond, sts) \
+{\
+	unsigned long start_time = jiffies;\
+	while (1) {\
+		sts = op (iommu->reg + offset);\
+		if (cond)\
+			break;\
+		if (time_after(jiffies, start_time + DMAR_OPERATION_TIMEOUT))\
+			panic("DMAR hardware is malfunctioning\n");\
+		cpu_relax();\
+	}\
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#658: FILE: drivers/pci/intel-iommu.c:434:
+		sts = op (iommu->reg + offset);\

ERROR:SPACING: space required after that close brace '}'
#664: FILE: drivers/pci/intel-iommu.c:440:
+	}\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: drivers/pci/intel-iommu.c:459:
+	IOMMU_WAIT_OP(iommu, DMAR_GSTS_REG,
+		readl, (sts & DMA_GSTS_RTPS), sts);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: drivers/pci/intel-iommu.c:478:
+	IOMMU_WAIT_OP(iommu, DMAR_GSTS_REG,
+			readl, (!(val & DMA_GSTS_WBFS)), val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: drivers/pci/intel-iommu.c:485:
+static int __iommu_flush_context(struct intel_iommu *iommu,
+	u16 did, u16 source_id, u8 function_mask, u64 type,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#724: FILE: drivers/pci/intel-iommu.c:500:
+			return 1;
+		else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#733: FILE: drivers/pci/intel-iommu.c:509:
+		val = DMA_CCMD_DOMAIN_INVL|DMA_CCMD_DID(did);
 		                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#736: FILE: drivers/pci/intel-iommu.c:512:
+		val = DMA_CCMD_DEVICE_INVL|DMA_CCMD_DID(did)
 		                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#740: FILE: drivers/pci/intel-iommu.c:516:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: drivers/pci/intel-iommu.c:525:
+	IOMMU_WAIT_OP(iommu, DMAR_CCMD_REG,
+		dmar_readq, (!(val & DMA_CCMD_ICC)), val);

WARNING:TYPO_SPELLING: 'implictly' may be misspelled - perhaps 'implicitly'?
#753: FILE: drivers/pci/intel-iommu.c:529:
+	/* flush context entry will implictly flush write buffer */
 	                            ^^^^^^^^^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#757: FILE: drivers/pci/intel-iommu.c:533:
+static int inline iommu_flush_context_global(struct intel_iommu *iommu,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: drivers/pci/intel-iommu.c:534:
+static int inline iommu_flush_context_global(struct intel_iommu *iommu,
+	int non_present_entry_flush)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#764: FILE: drivers/pci/intel-iommu.c:540:
+static int inline iommu_flush_context_domain(struct intel_iommu *iommu, u16 did,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: drivers/pci/intel-iommu.c:541:
+static int inline iommu_flush_context_domain(struct intel_iommu *iommu, u16 did,
+	int non_present_entry_flush)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#771: FILE: drivers/pci/intel-iommu.c:547:
+static int inline iommu_flush_context_device(struct intel_iommu *iommu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#772: FILE: drivers/pci/intel-iommu.c:548:
+static int inline iommu_flush_context_device(struct intel_iommu *iommu,
+	u16 did, u16 source_id, u8 function_mask, int non_present_entry_flush)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: drivers/pci/intel-iommu.c:556:
+static int __iommu_flush_iotlb(struct intel_iommu *iommu, u16 did,
+	u64 addr, unsigned int size_order, u64 type,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#796: FILE: drivers/pci/intel-iommu.c:572:
+			return 1;
+		else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#803: FILE: drivers/pci/intel-iommu.c:579:
+		val = DMA_TLB_GLOBAL_FLUSH|DMA_TLB_IVT;
 		                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#806: FILE: drivers/pci/intel-iommu.c:582:
+		val = DMA_TLB_DSI_FLUSH|DMA_TLB_IVT|DMA_TLB_DID(did);
 		                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#806: FILE: drivers/pci/intel-iommu.c:582:
+		val = DMA_TLB_DSI_FLUSH|DMA_TLB_IVT|DMA_TLB_DID(did);
 		                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#809: FILE: drivers/pci/intel-iommu.c:585:
+		val = DMA_TLB_PSI_FLUSH|DMA_TLB_IVT|DMA_TLB_DID(did);
 		                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#809: FILE: drivers/pci/intel-iommu.c:585:
+		val = DMA_TLB_PSI_FLUSH|DMA_TLB_IVT|DMA_TLB_DID(did);
 		                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#814: FILE: drivers/pci/intel-iommu.c:590:
+		BUG();

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#817: FILE: drivers/pci/intel-iommu.c:593:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: drivers/pci/intel-iommu.c:612:
+	IOMMU_WAIT_OP(iommu, tlb_offset + 8,
+		dmar_readq, (!(val & DMA_TLB_IVT)), val);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#842: FILE: drivers/pci/intel-iommu.c:618:
+		printk(KERN_ERR"IOMMU: flush IOTLB failed\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#842: FILE: drivers/pci/intel-iommu.c:618:
+		printk(KERN_ERR"IOMMU: flush IOTLB failed\n");

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#844: FILE: drivers/pci/intel-iommu.c:620:
+		pr_debug("IOMMU: tlb flush request %Lx, actual %Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: drivers/pci/intel-iommu.c:621:
+		pr_debug("IOMMU: tlb flush request %Lx, actual %Lx\n",
+			DMA_TLB_IIRG(type), DMA_TLB_IAIG(val));

WARNING:TYPO_SPELLING: 'implictly' may be misspelled - perhaps 'implicitly'?
#846: FILE: drivers/pci/intel-iommu.c:622:
+	/* flush context entry will implictly flush write buffer */
 	                            ^^^^^^^^^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#850: FILE: drivers/pci/intel-iommu.c:626:
+static int inline iommu_flush_iotlb_global(struct intel_iommu *iommu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: drivers/pci/intel-iommu.c:627:
+static int inline iommu_flush_iotlb_global(struct intel_iommu *iommu,
+	int non_present_entry_flush)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#857: FILE: drivers/pci/intel-iommu.c:633:
+static int inline iommu_flush_iotlb_dsi(struct intel_iommu *iommu, u16 did,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#858: FILE: drivers/pci/intel-iommu.c:634:
+static int inline iommu_flush_iotlb_dsi(struct intel_iommu *iommu, u16 did,
+	int non_present_entry_flush)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: drivers/pci/intel-iommu.c:655:
+static int iommu_flush_iotlb_psi(struct intel_iommu *iommu, u16 did,
+	u64 addr, unsigned int pages, int non_present_entry_flush)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#883: FILE: drivers/pci/intel-iommu.c:659:
+	BUG_ON(addr & (~PAGE_MASK_4K));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#884: FILE: drivers/pci/intel-iommu.c:660:
+	BUG_ON(pages == 0);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#914: FILE: drivers/pci/intel-iommu.c:690:
+	writel(iommu->gcmd|DMA_GCMD_TE, iommu->reg + DMAR_GCMD_REG);
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: drivers/pci/intel-iommu.c:694:
+	IOMMU_WAIT_OP(iommu, DMAR_GSTS_REG,
+		readl, (sts & DMA_GSTS_TES), sts);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#936: FILE: drivers/pci/intel-iommu.c:712:
+	IOMMU_WAIT_OP(iommu, DMAR_GSTS_REG,
+		readl, (!(sts & DMA_GSTS_TES)), sts);

WARNING:TYPO_SPELLING: 'supportd' may be misspelled - perhaps 'supported'?
#948: FILE: drivers/pci/intel-iommu.c:724:
+	pr_debug("Number of Domains supportd <%ld>\n", ndomains);
 	                            ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#956: FILE: drivers/pci/intel-iommu.c:732:
+		printk(KERN_ERR "Allocating domain id array failed\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#956: FILE: drivers/pci/intel-iommu.c:732:
+	if (!iommu->domain_ids) {
+		printk(KERN_ERR "Allocating domain id array failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#960: FILE: drivers/pci/intel-iommu.c:736:
+	iommu->domains = kcalloc(ndomains, sizeof(struct dmar_domain *),
+			GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#962: FILE: drivers/pci/intel-iommu.c:738:
+		printk(KERN_ERR "Allocating domain array failed\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#962: FILE: drivers/pci/intel-iommu.c:738:
+	if (!iommu->domains) {
+		printk(KERN_ERR "Allocating domain array failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#988: FILE: drivers/pci/intel-iommu.c:764:
+		printk(KERN_ERR "IOMMU: can't map the region\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#996: FILE: drivers/pci/intel-iommu.c:772:
+	map_size = max_t(int, ecap_max_iotlb_offset(iommu->ecap),
+		cap_max_fault_reg_offset(iommu->cap));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1002: FILE: drivers/pci/intel-iommu.c:778:
+			printk(KERN_ERR "IOMMU: can't map the region\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: drivers/pci/intel-iommu.c:785:
+	pr_debug("IOMMU %llx: ver %d:%d cap %llx ecap %llx\n",
+		drhd->reg_base_addr, DMAR_VER_MAJOR(ver), DMAR_VER_MINOR(ver),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1042: FILE: drivers/pci/intel-iommu.c:818:
+		i = find_next_bit(iommu->domain_ids,
+			cap_ndoms(iommu->cap), i+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1042: FILE: drivers/pci/intel-iommu.c:818:
+			cap_ndoms(iommu->cap), i+1);
 			                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1066: FILE: drivers/pci/intel-iommu.c:842:
+static struct dmar_domain * iommu_alloc_domain(struct intel_iommu *iommu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1084: FILE: drivers/pci/intel-iommu.c:860:
+		printk(KERN_ERR "IOMMU: no free domain ids\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1119: FILE: drivers/pci/intel-iommu.c:895:
+	iova = reserve_iova(&reserved_iova_list, IOVA_PFN(IOAPIC_RANGE_START),
+		IOVA_PFN(IOAPIC_RANGE_END));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1121: FILE: drivers/pci/intel-iommu.c:897:
+		printk(KERN_ERR "Reserve IOAPIC range failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1136: FILE: drivers/pci/intel-iommu.c:912:
+			iova = reserve_iova(&reserved_iova_list, IOVA_PFN(addr),
+				IOVA_PFN(size + addr) - 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1138: FILE: drivers/pci/intel-iommu.c:914:
+				printk(KERN_ERR "Reserve iova failed\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1142: FILE: drivers/pci/intel-iommu.c:918:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1225: FILE: drivers/pci/intel-iommu.c:1001:
+static int domain_context_mapping_one(struct dmar_domain *domain,
+		u8 bus, u8 devfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1232: FILE: drivers/pci/intel-iommu.c:1008:
+	pr_debug("Set context mapping for %02x:%02x.%d\n",
+		bus, PCI_SLOT(devfn), PCI_FUNC(devfn));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1233: FILE: drivers/pci/intel-iommu.c:1009:
+	BUG_ON(!domain->pgd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1253: FILE: drivers/pci/intel-iommu.c:1029:
+	if (iommu_flush_context_device(iommu, domain->id,
+			(((u16)bus) << 8) | devfn, DMA_CCMD_MASK_NOBIT, 1))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1268: FILE: drivers/pci/intel-iommu.c:1044:
+	ret = domain_context_mapping_one(domain, pdev->bus->number,
+		pdev->devfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1280: FILE: drivers/pci/intel-iommu.c:1056:
+		ret = domain_context_mapping_one(domain, parent->bus->number,
+			parent->devfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1294: FILE: drivers/pci/intel-iommu.c:1070:
+static int domain_context_mapped(struct dmar_domain *domain,
+	struct pci_dev *pdev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1300: FILE: drivers/pci/intel-iommu.c:1076:
+	ret = device_context_mapped(domain->iommu,
+		pdev->bus->number, pdev->devfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1311: FILE: drivers/pci/intel-iommu.c:1087:
+		ret = device_context_mapped(domain->iommu, parent->bus->number,
+			parent->devfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1326: FILE: drivers/pci/intel-iommu.c:1102:
+domain_page_mapping(struct dmar_domain *domain, dma_addr_t iova,
+			u64 hpa, size_t size, int prot)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1332: FILE: drivers/pci/intel-iommu.c:1108:
+	if ((prot & (DMA_PTE_READ|DMA_PTE_WRITE)) == 0)
 	                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1345: FILE: drivers/pci/intel-iommu.c:1121:
+		BUG_ON(dma_pte_addr(*pte));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1370: FILE: drivers/pci/intel-iommu.c:1146:
+		info = list_entry(domain->devices.next,
+			struct device_domain_info, link);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1402: FILE: drivers/pci/intel-iommu.c:1178:
+static int dmar_pci_device_match(struct pci_dev *devices[], int cnt,
+     struct pci_dev *dev)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1402: FILE: drivers/pci/intel-iommu.c:1178:
+     struct pci_dev *dev)$

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#1407: FILE: drivers/pci/intel-iommu.c:1183:
+		for (index = 0; index < cnt; index ++)
 		                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1425: FILE: drivers/pci/intel-iommu.c:1201:
+		if (drhd->include_all || dmar_pci_device_match(drhd->devices,
+						drhd->devices_cnt, dev))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1474: FILE: drivers/pci/intel-iommu.c:1250:
+		printk(KERN_ERR "IOMMU: can't find DMAR for device %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1475: FILE: drivers/pci/intel-iommu.c:1251:
+		printk(KERN_ERR "IOMMU: can't find DMAR for device %s\n",
+			pci_name(pdev));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "found"
#1534: FILE: drivers/pci/intel-iommu.c:1310:
+	if (found != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1560: FILE: drivers/pci/intel-iommu.c:1336:
+	printk(KERN_INFO

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1561: FILE: drivers/pci/intel-iommu.c:1337:
+		"IOMMU: Setting identity map for device %s [0x%Lx - 0x%Lx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1573: FILE: drivers/pci/intel-iommu.c:1349:
+	if (!reserve_iova(&domain->iovad, IOVA_PFN(base),
+			IOVA_PFN(base + size) - 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1574: FILE: drivers/pci/intel-iommu.c:1350:
+		printk(KERN_ERR "IOMMU: reserve iova failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1580: FILE: drivers/pci/intel-iommu.c:1356:
+	pr_debug("Mapping reserved region %lx@%llx for %s\n",
+		size, base, pci_name(pdev));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1588: FILE: drivers/pci/intel-iommu.c:1364:
+	ret = domain_page_mapping(domain, base, base, size,
+		DMA_PTE_READ|DMA_PTE_WRITE);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1588: FILE: drivers/pci/intel-iommu.c:1364:
+		DMA_PTE_READ|DMA_PTE_WRITE);
 		            ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1600: FILE: drivers/pci/intel-iommu.c:1376:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1603: FILE: drivers/pci/intel-iommu.c:1379:
+static inline int iommu_prepare_rmrr_dev(struct dmar_rmrr_unit *rmrr,
+	struct pci_dev *pdev)

WARNING:TYPO_SPELLING: 'amoung' may be misspelled - perhaps 'among'?
#1637: FILE: drivers/pci/intel-iommu.c:1413:
+		 * amoung all IOMMU's. Need to Split it later.
 		   ^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1641: FILE: drivers/pci/intel-iommu.c:1417:
+			printk(KERN_ERR "IOMMU: allocate root entry failed\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1662: FILE: drivers/pci/intel-iommu.c:1438:
+		int i;
+		for (i = 0; i < rmrr->devices_cnt; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1669: FILE: drivers/pci/intel-iommu.c:1445:
+				printk(KERN_ERR

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1685: FILE: drivers/pci/intel-iommu.c:1461:
+		sprintf (iommu->name, "dmar%d", unit++);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1713: FILE: drivers/pci/intel-iommu.c:1489:
+	u64 addr;
+	addr = (host_addr & (~PAGE_MASK_4K)) + size;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1719: FILE: drivers/pci/intel-iommu.c:1495:
+iommu_alloc_iova(struct dmar_domain *domain, void *host_addr, size_t size,
+		u64 start, u64 end)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start > DOMAIN_MAX_ADDR(domain->gaw)'
#1725: FILE: drivers/pci/intel-iommu.c:1501:
+	if ((start > DOMAIN_MAX_ADDR(domain->gaw)) || end < start)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1735: FILE: drivers/pci/intel-iommu.c:1511:
+	piova = alloc_iova(&domain->iovad,
+			size >> PAGE_SHIFT_4K, IOVA_PFN(end));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1741: FILE: drivers/pci/intel-iommu.c:1517:
+static dma_addr_t __intel_map_single(struct device *dev, void *addr,
+	size_t size, int dir, u64 *flush_addr, unsigned int *flush_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1753: FILE: drivers/pci/intel-iommu.c:1529:
+	domain = get_domain_for_dev(pdev,
+			DEFAULT_DOMAIN_ADDRESS_WIDTH);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1755: FILE: drivers/pci/intel-iommu.c:1531:
+		printk(KERN_ERR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1764: FILE: drivers/pci/intel-iommu.c:1540:
+		iova = iommu_alloc_iova(domain, addr, size, start_addr,
+			pdev->dma_mask);

WARNING:TYPO_SPELLING: 'higer' may be misspelled - perhaps 'higher'?
#1769: FILE: drivers/pci/intel-iommu.c:1545:
+		 * from higer range
 		        ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1772: FILE: drivers/pci/intel-iommu.c:1548:
+		iova = iommu_alloc_iova(domain, addr, size, start_addr,
+			DMA_32BIT_MASK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1775: FILE: drivers/pci/intel-iommu.c:1551:
+			iova = iommu_alloc_iova(domain, addr, size, start_addr,
+			pdev->dma_mask);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1779: FILE: drivers/pci/intel-iommu.c:1555:
+		printk(KERN_ERR"Allocating iova for %s failed", pci_name(pdev));

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1779: FILE: drivers/pci/intel-iommu.c:1555:
+		printk(KERN_ERR"Allocating iova for %s failed", pci_name(pdev));

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1794: FILE: drivers/pci/intel-iommu.c:1570:
+	if (dir == DMA_TO_DEVICE || dir == DMA_BIDIRECTIONAL || \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1806: FILE: drivers/pci/intel-iommu.c:1582:
+	ret = domain_page_mapping(domain, iova->pfn_lo << PAGE_SHIFT_4K,
+		((u64)addr) & PAGE_MASK_4K,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1812: FILE: drivers/pci/intel-iommu.c:1588:
+	pr_debug("Device %s request: %lx@%llx mapping: %lx@%llx, dir %d\n",
+		pci_name(pdev), size, (u64)addr,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1821: FILE: drivers/pci/intel-iommu.c:1597:
+	printk(KERN_ERR"Device %s request: %lx@%llx dir %d --- failed\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1821: FILE: drivers/pci/intel-iommu.c:1597:
+	printk(KERN_ERR"Device %s request: %lx@%llx dir %d --- failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1822: FILE: drivers/pci/intel-iommu.c:1598:
+	printk(KERN_ERR"Device %s request: %lx@%llx dir %d --- failed\n",
+		pci_name(pdev), size, (u64)addr, dir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1827: FILE: drivers/pci/intel-iommu.c:1603:
+static dma_addr_t intel_map_single(struct device *hwdev, void *addr,
+	size_t size, int dir)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1835: FILE: drivers/pci/intel-iommu.c:1611:
+	BUG_ON(dir == DMA_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1840: FILE: drivers/pci/intel-iommu.c:1616:
+	ret = __intel_map_single(hwdev, addr, size,
+			dir, &flush_addr, &flush_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1845: FILE: drivers/pci/intel-iommu.c:1621:
+		if (iommu_flush_iotlb_psi(domain->iommu, domain->id,
+				flush_addr, flush_size >> PAGE_SHIFT_4K, 1))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1852: FILE: drivers/pci/intel-iommu.c:1628:
+static void __intel_unmap_single(struct device *dev, dma_addr_t dev_addr,
+	size_t size, int dir, u64 *flush_addr, unsigned int *flush_size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1859: FILE: drivers/pci/intel-iommu.c:1635:
+	BUG_ON(!domain);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1867: FILE: drivers/pci/intel-iommu.c:1643:
+	pr_debug("Device %s unmapping: %lx@%llx\n",
+		pci_name(pdev),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1882: FILE: drivers/pci/intel-iommu.c:1658:
+static void intel_unmap_single(struct device *dev, dma_addr_t dev_addr,
+	size_t size, int dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1894: FILE: drivers/pci/intel-iommu.c:1670:
+	__intel_unmap_single(dev, dev_addr, size,
+		dir, &flush_addr, &flush_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1898: FILE: drivers/pci/intel-iommu.c:1674:
+	if (iommu_flush_iotlb_psi(domain->iommu, domain->id, flush_addr,
+			flush_size >> PAGE_SHIFT_4K, 0))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1902: FILE: drivers/pci/intel-iommu.c:1678:
+static void * intel_alloc_coherent(struct device *hwdev, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1903: FILE: drivers/pci/intel-iommu.c:1679:
+static void * intel_alloc_coherent(struct device *hwdev, size_t size,
+		       dma_addr_t *dma_handle, gfp_t flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1925: FILE: drivers/pci/intel-iommu.c:1701:
+static void intel_free_coherent(struct device *hwdev, size_t size,
+	void *vaddr, dma_addr_t dma_handle)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1937: FILE: drivers/pci/intel-iommu.c:1713:
+static void intel_unmap_sg(struct device *hwdev, struct scatterlist *sg,
+	int nelems, int dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1951: FILE: drivers/pci/intel-iommu.c:1727:
+		__intel_unmap_single(hwdev, sg->dma_address,
+			sg->dma_length, dir, &flush_addr, &flush_size);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sg' - possible side-effects?
#1957: FILE: drivers/pci/intel-iommu.c:1733:
+#define SG_ENT_VIRT_ADDRESS(sg)	(page_address((sg)->page) + (sg)->offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1959: FILE: drivers/pci/intel-iommu.c:1735:
+static int intel_nontranslate_map_sg(struct device *hddev,
+	struct scatterlist *sg, int nelems, int dir)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1965: FILE: drivers/pci/intel-iommu.c:1741:
+		struct scatterlist *s = &sg[i];
+		BUG_ON(!s->page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1965: FILE: drivers/pci/intel-iommu.c:1741:
+		BUG_ON(!s->page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1973: FILE: drivers/pci/intel-iommu.c:1749:
+static int intel_map_sg(struct device *hwdev, struct scatterlist *sg,
+	int nelems, int dir)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1983: FILE: drivers/pci/intel-iommu.c:1759:
+	BUG_ON(dir == DMA_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1990: FILE: drivers/pci/intel-iommu.c:1766:
+		dma_handle = __intel_map_single(hwdev, addr,
+				sg->length, dir, &flush_addr, &flush_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2022: FILE: drivers/pci/intel-iommu.c:1798:
+	iommu_domain_cache = kmem_cache_create("iommu_domain",
+					 sizeof(struct dmar_domain),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2028: FILE: drivers/pci/intel-iommu.c:1804:
+		printk(KERN_ERR "Couldn't create iommu_domain cache\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2040: FILE: drivers/pci/intel-iommu.c:1816:
+	iommu_devinfo_cache = kmem_cache_create("iommu_devinfo",
+					 sizeof(struct device_domain_info),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2046: FILE: drivers/pci/intel-iommu.c:1822:
+		printk(KERN_ERR "Couldn't create devinfo cache\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2058: FILE: drivers/pci/intel-iommu.c:1834:
+	iommu_iova_cache = kmem_cache_create("iommu_iova",
+					 sizeof(struct iova),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2064: FILE: drivers/pci/intel-iommu.c:1840:
+		printk(KERN_ERR "Couldn't create iova cache\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#2074: FILE: drivers/pci/intel-iommu.c:1850:
+	int ret;
+	ret = iommu_iova_cache_init();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2099: FILE: drivers/pci/intel-iommu.c:1875:
+
+}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2105: FILE: drivers/pci/intel-iommu.c:1881:
+	if (early_dmar_detect()) {
+		iommu_detected = 1;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#2117: FILE: drivers/pci/intel-iommu.c:1893:
+			int i;
+			for (i = 0; i < drhd->devices_cnt; i++)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "drhd->devices[i]"
#2118: FILE: drivers/pci/intel-iommu.c:1894:
+				if (drhd->devices[i] != NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2131: FILE: drivers/pci/intel-iommu.c:1907:
+		int i;
+		if (drhd->ignored || drhd->include_all)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2136: FILE: drivers/pci/intel-iommu.c:1912:
+			if (drhd->devices[i] &&
+				!IS_GFX_DEVICE(drhd->devices[i]))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2160: FILE: drivers/pci/intel-iommu.c:1936:
+^I^Ireturn ^I-ENODEV;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2169: FILE: drivers/pci/intel-iommu.c:1945:
+		printk(KERN_ERR "IOMMU: dmar init failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2174: FILE: drivers/pci/intel-iommu.c:1950:
+	printk(KERN_INFO

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2186: FILE: drivers/pci/intel-iommu.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2199: FILE: drivers/pci/intel-iommu.h:14:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2239: FILE: drivers/pci/intel-iommu.h:54:
+/*
+#define dmar_readl(dmar, reg) readl(dmar + reg)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#2249: FILE: drivers/pci/intel-iommu.h:64:
+	u32 lo, hi;
+	lo = readl(addr);

CHECK:SPACING: No space is necessary after a cast
#2251: FILE: drivers/pci/intel-iommu.h:66:
+	return (((u64) hi) << 32) + lo;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#2277: FILE: drivers/pci/intel-iommu.h:92:
+#define cap_max_fault_reg_offset(c) \
+	(cap_fault_reg_offset(c) + cap_num_fault_regs(c) * 16)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)1' could be '1UL'
#2289: FILE: drivers/pci/intel-iommu.h:104:
+#define cap_ndoms(c)		(((unsigned long)1) << (4 + 2 * ((c) & 0x7)))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2295: FILE: drivers/pci/intel-iommu.h:110:
+#define ecap_iotlb_offset(e) ^I((((e) >> 8) & 0x3ff) * 16)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#2296: FILE: drivers/pci/intel-iommu.h:111:
+#define ecap_max_iotlb_offset(e) \
+	(ecap_iotlb_offset(e) + ecap_niotlb_iunits(e) * 16)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2300: FILE: drivers/pci/intel-iommu.h:115:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#2351: FILE: drivers/pci/intel-iommu.h:166:
+#define dma_frcd_type(d) ((d >> 30) & 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#2352: FILE: drivers/pci/intel-iommu.h:167:
+#define dma_frcd_fault_reason(c) (c & 0xff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#2353: FILE: drivers/pci/intel-iommu.h:168:
+#define dma_frcd_source_id(c) (c & 0xffff)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#2354: FILE: drivers/pci/intel-iommu.h:169:
+#define dma_frcd_page_addr(d) (d & (((u64)-1) << 12)) /* low 64 bit */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2366: FILE: drivers/pci/intel-iommu.h:181:
+};
+#define ROOT_ENTRY_NR (PAGE_SIZE_4K/sizeof(struct root_entry))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2366: FILE: drivers/pci/intel-iommu.h:181:
+#define ROOT_ENTRY_NR (PAGE_SIZE_4K/sizeof(struct root_entry))
                                    ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2371: FILE: drivers/pci/intel-iommu.h:186:
+}
+static inline void set_root_present(struct root_entry *root)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2375: FILE: drivers/pci/intel-iommu.h:190:
+}
+static inline void set_root_value(struct root_entry *root, unsigned long value)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2385: FILE: drivers/pci/intel-iommu.h:200:
+		(root_present(root)?phys_to_virt(

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2385: FILE: drivers/pci/intel-iommu.h:200:
+		(root_present(root)?phys_to_virt(
 		                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#2386: FILE: drivers/pci/intel-iommu.h:201:
+		root->val & PAGE_MASK_4K):
 		                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2405: FILE: drivers/pci/intel-iommu.h:220:
+};
+#define context_present(c) ((c).lo & 1)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2412: FILE: drivers/pci/intel-iommu.h:227:
+#define context_set_present(c) do {(c).lo |= 1;} while (0)
                                               ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2412: FILE: drivers/pci/intel-iommu.h:227:
+#define context_set_present(c) do {(c).lo |= 1;} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2413: FILE: drivers/pci/intel-iommu.h:228:
+#define context_set_fault_enable(c) \
+	do {(c).lo &= (((u64)-1) << 2) | 1;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2414: FILE: drivers/pci/intel-iommu.h:229:
+	do {(c).lo &= (((u64)-1) << 2) | 1;} while (0)
 	                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#2415: FILE: drivers/pci/intel-iommu.h:230:
+#define context_set_translation_type(c, val) \
+	do { \
+		(c).lo &= (((u64)-1) << 4) | 3; \
+		(c).lo |= ((val) & 3) << 2; \
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2421: FILE: drivers/pci/intel-iommu.h:236:
+#define context_set_address_root(c, val) \
+	do {(c).lo |= (val) & PAGE_MASK_4K;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2422: FILE: drivers/pci/intel-iommu.h:237:
+	do {(c).lo |= (val) & PAGE_MASK_4K;} while (0)
 	                                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2423: FILE: drivers/pci/intel-iommu.h:238:
+#define context_set_address_width(c, val) do {(c).hi |= (val) & 7;} while (0)
                                                                  ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2423: FILE: drivers/pci/intel-iommu.h:238:
+#define context_set_address_width(c, val) do {(c).hi |= (val) & 7;} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2424: FILE: drivers/pci/intel-iommu.h:239:
+#define context_set_domain_id(c, val) \
+	do {(c).hi |= ((val) & ((1 << 16) - 1)) << 8;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2425: FILE: drivers/pci/intel-iommu.h:240:
+	do {(c).hi |= ((val) & ((1 << 16) - 1)) << 8;} while (0)
 	                                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2426: FILE: drivers/pci/intel-iommu.h:241:
+#define context_clear_entry(c) do {(c).lo = 0; (c).hi = 0;} while (0)
                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#2426: FILE: drivers/pci/intel-iommu.h:241:
+#define context_clear_entry(c) do {(c).lo = 0; (c).hi = 0;} while (0)

WARNING:TYPO_SPELLING: 'physcial' may be misspelled - perhaps 'physical'?
#2434: FILE: drivers/pci/intel-iommu.h:249:
+ * 12-63: Host physcial address
                ^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2439: FILE: drivers/pci/intel-iommu.h:254:
+};
+#define dma_clear_pte(p)	do {(p).val = 0;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2439: FILE: drivers/pci/intel-iommu.h:254:
+#define dma_clear_pte(p)	do {(p).val = 0;} while (0)
                         	               ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2439: FILE: drivers/pci/intel-iommu.h:254:
+#define dma_clear_pte(p)	do {(p).val = 0;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2444: FILE: drivers/pci/intel-iommu.h:259:
+#define dma_set_pte_readable(p) do {(p).val |= DMA_PTE_READ;} while (0)
                                                            ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2444: FILE: drivers/pci/intel-iommu.h:259:
+#define dma_set_pte_readable(p) do {(p).val |= DMA_PTE_READ;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2445: FILE: drivers/pci/intel-iommu.h:260:
+#define dma_set_pte_writable(p) do {(p).val |= DMA_PTE_WRITE;} while (0)
                                                             ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2445: FILE: drivers/pci/intel-iommu.h:260:
+#define dma_set_pte_writable(p) do {(p).val |= DMA_PTE_WRITE;} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#2446: FILE: drivers/pci/intel-iommu.h:261:
+#define dma_set_pte_prot(p, prot) \
+		do {(p).val = ((p).val & ~3) | ((prot) & 3); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2446: FILE: drivers/pci/intel-iommu.h:261:
+#define dma_set_pte_prot(p, prot) \
+		do {(p).val = ((p).val & ~3) | ((prot) & 3); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2449: FILE: drivers/pci/intel-iommu.h:264:
+#define dma_set_pte_addr(p, addr) do {\
+		(p).val |= ((addr) & PAGE_MASK_4K); } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2450: FILE: drivers/pci/intel-iommu.h:265:
+		(p).val |= ((addr) & PAGE_MASK_4K); } while (0)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2459: FILE: drivers/pci/intel-iommu.h:274:
+^Istruct list_head devices; ^I/* all devices' list */$

WARNING:TYPO_SPELLING: 'numer' may be misspelled - perhaps 'number'?
#2477: FILE: drivers/pci/intel-iommu.h:292:
+	u8 bus;			/* PCI bus numer */
 	       			           ^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2483: FILE: drivers/pci/intel-iommu.h:298:
+extern int init_dmars(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2489: FILE: drivers/pci/intel-iommu.h:304:
+^Iunsigned long ^I*domain_ids; /* bitmap of domains */$

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#2492: FILE: drivers/pci/intel-iommu.h:307:
+	u32		gcmd; /* Holds TE, EAFL. Don't need SRTP, SFL, WBF */
 	   		               ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2518: FILE: include/linux/dmar.h:32:
+extern void detect_intel_iommu(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2519: FILE: include/linux/dmar.h:33:
+extern int intel_iommu_init(void);

WARNING:RETURN_VOID: void function return statements are not generally useful
#2535: FILE: include/linux/dmar.h:67:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2536: FILE: include/linux/dmar.h:68:
+}
+static inline int intel_iommu_init(void)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000415830.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 25 errors, 86 warnings, 128 checks, 2450 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000415830.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
