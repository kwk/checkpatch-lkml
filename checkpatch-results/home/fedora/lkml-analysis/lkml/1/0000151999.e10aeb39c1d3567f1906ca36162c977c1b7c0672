WARNING:TYPO_SPELLING: 'documen' may be misspelled - perhaps 'document'?
#50: 
>>>>> a bit of meaning goes a long way. I'll ack them if they are documen=
                                                                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#101: 
psb / mrst architecture is dependant on it. There's no IO region we can=20
                           ^^^^^^^^^

WARNING:TYPO_SPELLING: 'continous' may be misspelled - perhaps 'continuous'?
#110: 
It will probably see some continous evolvement; Dave has suggested it=20
                          ^^^^^^^^^

WARNING:BAD_SIGN_OFF: Duplicate signature
#197: 
Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#250: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#255: FILE: drivers/gpu/drm/ttm/ttm_agp_backend.c:1:
+/**************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#311: FILE: drivers/gpu/drm/ttm/ttm_agp_backend.c:57:
+	if (unlikely(mem == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#317: FILE: drivers/gpu/drm/ttm/ttm_agp_backend.c:63:
+		struct page *page = *cur_page;
+		if (!page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#340: FILE: drivers/gpu/drm/ttm/ttm_agp_backend.c:86:
+		printk(KERN_ERR "AGP Bind memory failed.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#410: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1:
+/**************************************************************************

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#458: FILE: drivers/gpu/drm/ttm/ttm_bo.c:49:
+static inline uint32_t ttm_bo_type_flags(unsigned type)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#469: FILE: drivers/gpu/drm/ttm/ttm_bo.c:60:
+	BUG_ON(atomic_read(&bo->list_kref.refcount));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#470: FILE: drivers/gpu/drm/ttm/ttm_bo.c:61:
+	BUG_ON(atomic_read(&bo->kref.refcount));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#471: FILE: drivers/gpu/drm/ttm/ttm_bo.c:62:
+	BUG_ON(atomic_read(&bo->cpu_writers));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#472: FILE: drivers/gpu/drm/ttm/ttm_bo.c:63:
+	BUG_ON(bo->sync_obj != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo->sync_obj"
#472: FILE: drivers/gpu/drm/ttm/ttm_bo.c:63:
+	BUG_ON(bo->sync_obj != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#473: FILE: drivers/gpu/drm/ttm/ttm_bo.c:64:
+	BUG_ON(bo->mem.mm_node != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo->mem.mm_node"
#473: FILE: drivers/gpu/drm/ttm/ttm_bo.c:64:
+	BUG_ON(bo->mem.mm_node != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#474: FILE: drivers/gpu/drm/ttm/ttm_bo.c:65:
+	BUG_ON(!list_empty(&bo->lru));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#475: FILE: drivers/gpu/drm/ttm/ttm_bo.c:66:
+	BUG_ON(!list_empty(&bo->ddestroy));

CHECK:BRACES: braces {} should be used on all arms of this statement
#479: FILE: drivers/gpu/drm/ttm/ttm_bo.c:70:
+	if (bo->destroy)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#481: FILE: drivers/gpu/drm/ttm/ttm_bo.c:72:
+	else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#489: FILE: drivers/gpu/drm/ttm/ttm_bo.c:80:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#508: FILE: drivers/gpu/drm/ttm/ttm_bo.c:99:
+	BUG_ON(!atomic_read(&bo->reserved));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#511: FILE: drivers/gpu/drm/ttm/ttm_bo.c:102:
+	if (!(bo->mem.flags & TTM_PL_FLAG_NO_EVICT)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#512: FILE: drivers/gpu/drm/ttm/ttm_bo.c:103:
+		BUG_ON(!list_empty(&bo->lru));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo->ttm"
#518: FILE: drivers/gpu/drm/ttm/ttm_bo.c:109:
+		if (bo->ttm != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: drivers/gpu/drm/ttm/ttm_bo.c:150:
+		if (use_sequence && bo->seq_valid &&
+			(sequence - bo->val_seq < (1 << 31))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#586: FILE: drivers/gpu/drm/ttm/ttm_bo.c:177:
+	BUG();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#629: FILE: drivers/gpu/drm/ttm/ttm_bo.c:220:
+	uint32_t page_flags = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->ttm"
#639: FILE: drivers/gpu/drm/ttm/ttm_bo.c:230:
+		if (unlikely(bo->ttm == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->ttm"
#646: FILE: drivers/gpu/drm/ttm/ttm_bo.c:237:
+		if (unlikely(bo->ttm == NULL))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#656: FILE: drivers/gpu/drm/ttm/ttm_bo.c:247:
+		printk(KERN_ERR "Illegal buffer object type\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bo->ttm == NULL'
#683: FILE: drivers/gpu/drm/ttm/ttm_bo.c:274:
+	if (!(new_man->flags & TTM_MEMTYPE_FLAG_FIXED) && (bo->ttm == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->ttm"
#683: FILE: drivers/gpu/drm/ttm/ttm_bo.c:274:
+	if (!(new_man->flags & TTM_MEMTYPE_FLAG_FIXED) && (bo->ttm == NULL)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#699: FILE: drivers/gpu/drm/ttm/ttm_bo.c:290:
+		if (bo->mem.mem_type == TTM_PL_SYSTEM) {
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#701: FILE: drivers/gpu/drm/ttm/ttm_bo.c:292:
+			uint32_t save_flags = old_mem->flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#702: FILE: drivers/gpu/drm/ttm/ttm_bo.c:293:
+			uint32_t save_proposed_flags = old_mem->proposed_flags;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#712: FILE: drivers/gpu/drm/ttm/ttm_bo.c:303:
+
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#730: FILE: drivers/gpu/drm/ttm/ttm_bo.c:321:
+			printk(KERN_ERR "Can not flush read caches\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#764: FILE: drivers/gpu/drm/ttm/ttm_bo.c:355:
+			int ret;
+			do {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#773: FILE: drivers/gpu/drm/ttm/ttm_bo.c:364:
+				printk(KERN_ERR "Detected probable GPU lockup. "

WARNING:SPLIT_STRING: quoted string split across lines
#774: FILE: drivers/gpu/drm/ttm/ttm_bo.c:365:
+				printk(KERN_ERR "Detected probable GPU lockup. "
+				       "Evicting buffer.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#832: FILE: drivers/gpu/drm/ttm/ttm_bo.c:423:
+	if (list_empty(&bo->ddestroy)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#843: FILE: drivers/gpu/drm/ttm/ttm_bo.c:434:
+	} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#848: FILE: drivers/gpu/drm/ttm/ttm_bo.c:439:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#885: FILE: drivers/gpu/drm/ttm/ttm_bo.c:476:
+			bool next_onlist = !list_empty(next);
+			kref_put(&nentry->list_kref, ttm_bo_release_list);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo->vm_node"
#920: FILE: drivers/gpu/drm/ttm/ttm_bo.c:511:
+	if (likely(bo->vm_node != NULL)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#941: FILE: drivers/gpu/drm/ttm/ttm_bo.c:532:
+static int ttm_bo_evict(struct ttm_buffer_object *bo, unsigned mem_type,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#953: FILE: drivers/gpu/drm/ttm/ttm_bo.c:544:
+		printk(KERN_ERR "Failed to expire sync object before "

WARNING:SPLIT_STRING: quoted string split across lines
#954: FILE: drivers/gpu/drm/ttm/ttm_bo.c:545:
+		printk(KERN_ERR "Failed to expire sync object before "
+		       "buffer eviction.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#958: FILE: drivers/gpu/drm/ttm/ttm_bo.c:549:
+	BUG_ON(!atomic_read(&bo->reserved));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#964: FILE: drivers/gpu/drm/ttm/ttm_bo.c:555:
+	BUG_ON(ttm_bo_type_flags(mem_type) & evict_mem.proposed_flags);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#969: FILE: drivers/gpu/drm/ttm/ttm_bo.c:560:
+		BUG_ON(ttm_bo_type_flags(mem_type) & evict_mem.proposed_flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#975: FILE: drivers/gpu/drm/ttm/ttm_bo.c:566:
+			printk(KERN_ERR "Failed to find memory space for "

WARNING:SPLIT_STRING: quoted string split across lines
#976: FILE: drivers/gpu/drm/ttm/ttm_bo.c:567:
+			printk(KERN_ERR "Failed to find memory space for "
+			       "buffer 0x%p eviction.\n", bo);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#984: FILE: drivers/gpu/drm/ttm/ttm_bo.c:575:
+			printk(KERN_ERR "Buffer eviction failed\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1008: FILE: drivers/gpu/drm/ttm/ttm_bo.c:599:
+				  uint32_t mem_type,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1084: FILE: drivers/gpu/drm/ttm/ttm_bo.c:675:
+				 uint32_t mem_type,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1085: FILE: drivers/gpu/drm/ttm/ttm_bo.c:676:
+				 uint32_t mask, uint32_t *res_mask)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1087: FILE: drivers/gpu/drm/ttm/ttm_bo.c:678:
+	uint32_t cur_flags = ttm_bo_type_flags(mem_type);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1124: FILE: drivers/gpu/drm/ttm/ttm_bo.c:715:
+	uint32_t num_prios = bdev->driver->num_mem_type_prio;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1125: FILE: drivers/gpu/drm/ttm/ttm_bo.c:716:
+	const uint32_t *prios = bdev->driver->mem_type_prio;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1126: FILE: drivers/gpu/drm/ttm/ttm_bo.c:717:
+	uint32_t i;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1127: FILE: drivers/gpu/drm/ttm/ttm_bo.c:718:
+	uint32_t mem_type = TTM_PL_SYSTEM;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1128: FILE: drivers/gpu/drm/ttm/ttm_bo.c:719:
+	uint32_t cur_flags = 0;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'mem->page_alignment'
#1170: FILE: drivers/gpu/drm/ttm/ttm_bo.c:761:
+							       mem->
+							       page_alignment);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mem_type == TTM_PL_SYSTEM'
#1178: FILE: drivers/gpu/drm/ttm/ttm_bo.c:769:
+	if ((type_ok && (mem_type == TTM_PL_SYSTEM)) || node) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1275: FILE: drivers/gpu/drm/ttm/ttm_bo.c:866:
+	BUG_ON(!atomic_read(&bo->reserved));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1327: FILE: drivers/gpu/drm/ttm/ttm_bo.c:918:
+	BUG_ON(!atomic_read(&bo->reserved));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1343: FILE: drivers/gpu/drm/ttm/ttm_bo.c:934:
+				printk(KERN_ERR "Failed moving buffer. "

WARNING:SPLIT_STRING: quoted string split across lines
#1344: FILE: drivers/gpu/drm/ttm/ttm_bo.c:935:
+				printk(KERN_ERR "Failed moving buffer. "
+				       "Proposed placement 0x%08x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1347: FILE: drivers/gpu/drm/ttm/ttm_bo.c:938:
+				printk(KERN_ERR "Out of aperture space or "

WARNING:SPLIT_STRING: quoted string split across lines
#1348: FILE: drivers/gpu/drm/ttm/ttm_bo.c:939:
+				printk(KERN_ERR "Out of aperture space or "
+				       "DRM memory quota.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->ttm"
#1357: FILE: drivers/gpu/drm/ttm/ttm_bo.c:948:
+	if (bo->mem.mem_type == TTM_PL_SYSTEM && bo->ttm == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1376: FILE: drivers/gpu/drm/ttm/ttm_bo.c:967:
+		       uint32_t set_flags, uint32_t clr_flags)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1378: FILE: drivers/gpu/drm/ttm/ttm_bo.c:969:
+	uint32_t new_mask = set_flags | clr_flags;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bo->type == ttm_bo_type_user'
#1380: FILE: drivers/gpu/drm/ttm/ttm_bo.c:971:
+	if ((bo->type == ttm_bo_type_user) &&
+	    (clr_flags & TTM_PL_FLAG_CACHED)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1382: FILE: drivers/gpu/drm/ttm/ttm_bo.c:973:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1389: FILE: drivers/gpu/drm/ttm/ttm_bo.c:980:
+			printk(KERN_ERR "Need to be root to modify"

WARNING:SPLIT_STRING: quoted string split across lines
#1390: FILE: drivers/gpu/drm/ttm/ttm_bo.c:981:
+			printk(KERN_ERR "Need to be root to modify"
+			       " NO_EVICT status.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1396: FILE: drivers/gpu/drm/ttm/ttm_bo.c:987:
+			printk(KERN_ERR "Incompatible memory specification"

WARNING:SPLIT_STRING: quoted string split across lines
#1397: FILE: drivers/gpu/drm/ttm/ttm_bo.c:988:
+			printk(KERN_ERR "Incompatible memory specification"
+			       " for NO_EVICT buffer.\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1408: FILE: drivers/gpu/drm/ttm/ttm_bo.c:999:
+			   uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1409: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1000:
+			   uint32_t page_alignment,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1414: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1005:
+			   void (*destroy) (struct ttm_buffer_object *))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1422: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1013:
+		printk(KERN_ERR "Illegal buffer object size.\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1504: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1095:
+			     uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1505: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1096:
+			     uint32_t page_alignment,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo"
#1523: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1114:
+	if (unlikely(bo == NULL)) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1539: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1130:
+			     uint32_t mem_type, bool allow_errors)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1557: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1148:
+			printk(KERN_ERR "Cleanup eviction failed\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1568: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1159:
+				   unsigned mem_type, bool allow_errors)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1588: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1179:
+		BUG_ON(ret);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1600: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1191:
+int ttm_bo_clean_mm(struct ttm_bo_device *bdev, unsigned mem_type)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1606: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1197:
+		printk(KERN_ERR "Illegal memory type %d\n", mem_type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1611: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1202:
+		printk(KERN_ERR "Trying to take down uninitialized "

WARNING:SPLIT_STRING: quoted string split across lines
#1612: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1203:
+		printk(KERN_ERR "Trying to take down uninitialized "
+		       "memory manager type %u\n", mem_type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1635: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1226:
+int ttm_bo_evict_mm(struct ttm_bo_device *bdev, unsigned mem_type)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1640: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1231:
+		printk(KERN_ERR "Illegal memory manager memory type %u.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1646: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1237:
+		printk(KERN_ERR "Memory type %u has not been initialized.\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1654: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1245:
+int ttm_bo_init_mm(struct ttm_bo_device *bdev, unsigned type,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1661: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1252:
+		printk(KERN_ERR "Illegal memory type %d\n", type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1667: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1258:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1680: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1271:
+			printk(KERN_ERR "Zero size memory manager type %d\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1700: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1291:
+	unsigned i = TTM_NUM_MEM_TYPES;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i != TTM_PL_SYSTEM'
#1707: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1298:
+			if ((i != TTM_PL_SYSTEM) && ttm_bo_clean_mm(bdev, i)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1709: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1300:
+				printk(KERN_ERR "DRM memory manager type %d "

WARNING:SPLIT_STRING: quoted string split across lines
#1710: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1301:
+				printk(KERN_ERR "DRM memory manager type %d "
+				       "is not clean.\n", i);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1731: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1322:
+	BUG_ON(!drm_mm_clean(&bdev->addr_space_mm));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bdev->dummy_read_page"
#1763: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1354:
+	if (unlikely(bdev->dummy_read_page == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1789: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1380:
+		printk(KERN_ERR "Could not register buffer object swapout.\n");

CHECK:SPACING: No space is necessary after a cast
#1845: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1436:
+	loff_t offset = (loff_t) bo->addr_space_offset;

CHECK:SPACING: No space is necessary after a cast
#1846: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1437:
+	loff_t holelen = ((loff_t) bo->mem.num_pages) << PAGE_SHIFT;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1872: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1463:
+			BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->vm_node"
#1904: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1495:
+	if (unlikely(bo->vm_node == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->vm_node"
#1912: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1503:
+	if (unlikely(bo->vm_node == NULL)) {

CHECK:SPACING: No space is necessary after a cast
#1919: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1510:
+	bo->addr_space_offset = ((uint64_t) bo->vm_node->start) << PAGE_SHIFT;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1979: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1570:
+		if (no_wait)
[...]
+		else if (interruptible) {
[...]
+		} else {
[...]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2035: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1626:
+	uint32_t swap_placement = (TTM_PL_FLAG_CACHED | TTM_PL_FLAG_SYSTEM);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2063: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1654:
+	BUG_ON(ret != 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2129: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:1:
+/**************************************************************************

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2184: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:56:
+	uint32_t save_flags = old_mem->flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2185: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:57:
+	uint32_t save_proposed_flags = old_mem->proposed_flags;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2229: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:101:
+	if (!(man->flags & TTM_MEMTYPE_FLAG_NEEDS_IOREMAP))
[...]
+	else {
[...]

CHECK:SPACING: No space is necessary after a cast
#2230: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:102:
+		addr = (void *)(((u8 *) man->io_addr) + bus_offset);

CHECK:BRACES: Unbalanced braces around else statement
#2231: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:103:
+	else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2256: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:128:
+	uint32_t *dstP =

CHECK:SPACING: No space is necessary after a cast
#2257: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:129:
+	    (uint32_t *) ((unsigned long)dst + (page << PAGE_SHIFT));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2258: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:130:
+	uint32_t *srcP =

CHECK:SPACING: No space is necessary after a cast
#2259: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:131:
+	    (uint32_t *) ((unsigned long)src + (page << PAGE_SHIFT));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2262: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:134:
+	int i;
+	for (i = 0; i < PAGE_SIZE / sizeof(uint32_t); ++i)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2316: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:188:
+	uint32_t save_flags = old_mem->flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2317: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:189:
+	uint32_t save_proposed_flags = old_mem->proposed_flags;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!old_iomap"
#2330: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:202:
+	if (old_iomap == NULL && new_iomap == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_iomap"
#2330: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:202:
+	if (old_iomap == NULL && new_iomap == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!old_iomap"
#2332: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:204:
+	if (old_iomap == NULL && ttm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ttm"
#2332: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:204:
+	if (old_iomap == NULL && ttm == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_mem->mem_type == new_mem->mem_type'
#2338: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:210:
+	if ((old_mem->mem_type == new_mem->mem_type) &&
+	    (new_mem->mm_node->start <
+	     old_mem->mm_node->start + old_mem->mm_node->size)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!old_iomap"
#2347: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:219:
+		if (old_iomap == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_iomap"
#2349: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:221:
+		else if (new_iomap == NULL)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2356: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:228:
+	mb();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ttm != NULL'
#2365: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:237:
+	if ((man->flags & TTM_MEMTYPE_FLAG_FIXED) && (ttm != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ttm"
#2365: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:237:
+	if ((man->flags & TTM_MEMTYPE_FLAG_FIXED) && (ttm != NULL)) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2431: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:303:
+pgprot_t ttm_io_prot(uint32_t caching_flags, pgprot_t tmp)

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#2433: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:305:
+#if defined(__i386__) || defined(__x86_64__)

Architecture specific defines should be avoided wherever
possible.

CHECK:SPACING: No space is necessary after a cast
#2471: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:343:
+		map->virtual = (void *)(((u8 *) man->io_addr) + bus_offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2493: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:365:
+	int i;
+	BUG_ON(!ttm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2493: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:365:
+	BUG_ON(!ttm);

WARNING:TYPO_SPELLING: 'contigous' may be misspelled - perhaps 'contiguous'?
#2514: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:386:
+		 * or to make the buffer object look contigous.
 		                                     ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2534: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:406:
+	unsigned long bus_size;
+	BUG_ON(!list_empty(&bo->swap));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2534: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:406:
+	BUG_ON(!list_empty(&bo->swap));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2547: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:419:
+		return ttm_bo_kmap_ttm(bo, start_page, num_pages, map);
+	} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2571: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:443:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2579: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:451:
+		    unsigned long *pfn, pgprot_t * prot)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#2587: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:459:
+	int ret;
+	ret = ttm_bo_pci_offset(bdev, mem, &bus_base, &bus_offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2588: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:460:
+	ret = ttm_bo_pci_offset(bdev, mem, &bus_base, &bus_offset,
+			&bus_size);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2596: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:468:
+			return -EINVAL;
+		else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2597: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:469:
+			*pfn = page_to_pfn(

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2616: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:488:
+	uint32_t save_flags = old_mem->flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2617: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:489:
+	uint32_t save_proposed_flags = old_mem->proposed_flags;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2619: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:491:
+	struct ttm_buffer_object *ghost_obj;
+	if (bo->sync_obj)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bo->ttm != NULL'
#2628: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:500:
+		if ((man->flags & TTM_MEMTYPE_FLAG_FIXED) &&
+		    (bo->ttm != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo->ttm"
#2629: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:501:
+		    (bo->ttm != NULL)) {

WARNING:TYPO_SPELLING: 'Otherwhise' may be misspelled - perhaps 'Otherwise'?
#2649: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:521:
+		 * needs to stay alive. Otherwhise hang it on the ghost
 		                        ^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2675: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:1:
+/**************************************************************************

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2707: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:33:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#2725: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:51:
+	while (likely(cur != NULL)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2728: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:54:
+		if (page_start >= cur_offset) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2733: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:59:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!best_bo"
#2737: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:63:
+	if (unlikely(best_bo == NULL))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2835: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:161:
+	for (i = 0; i < TTM_BO_VM_NUM_PREFAULT; ++i) {
+

CHECK:BRACES: Unbalanced braces around else statement
#2839: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:165:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2857: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:183:
+		if (unlikely((ret == -EBUSY) || (ret != 0 && i > 0)))
[...]
+		else if (unlikely(ret != 0)) {
[...]

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2864: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:190:
+
+		}

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#2894: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:220:
+static struct vm_operations_struct ttm_bo_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2900: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:226:
+int ttm_bo_mmap(struct file *filp, struct vm_area_struct *vma,
                              ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo"
#2910: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:236:
+	if (likely(bo != NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo"
#2914: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:240:
+	if (unlikely(bo == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2915: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:241:
+		printk(KERN_ERR "Could not find buffer object to map.\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2925: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:251:
+	ret = driver->verify_access(bo, filp);
 	                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2955: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:281:
+ssize_t ttm_bo_io(struct ttm_bo_device *bdev, struct file *filp,
                                                            ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo"
#2976: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:302:
+	if (likely(bo != NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo"
#2980: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:306:
+	if (unlikely(bo == NULL))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2986: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:312:
+	ret = driver->verify_access(bo, filp);
 	                                ^^^^

WARNING:LIKELY_MISUSE: Using unlikely should generally have parentheses around the comparison
#2991: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:317:
+	if (unlikely(kmap_offset) >= bo->num_pages) {

WARNING:LIKELY_MISUSE: Using unlikely should generally have parentheses around the comparison
#3063: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:389:
+	if (unlikely(kmap_offset) >= bo->num_pages)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3117: FILE: drivers/gpu/drm/ttm/ttm_execbuf_util.c:1:
+/**************************************************************************

WARNING:LINE_SPACING: Missing a blank line after declarations
#3158: FILE: drivers/gpu/drm/ttm/ttm_execbuf_util.c:42:
+		struct ttm_buffer_object *bo = entry->bo;
+		if (!entry->reserved)

CHECK:BRACES: braces {} should be used on all arms of this statement
#3191: FILE: drivers/gpu/drm/ttm/ttm_execbuf_util.c:75:
+			if (ret == -EAGAIN) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3196: FILE: drivers/gpu/drm/ttm/ttm_execbuf_util.c:80:
+			} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3238: FILE: drivers/gpu/drm/ttm/ttm_fence.c:1:
+/**************************************************************************

WARNING:TYPO_SPELLING: 'dectected' may be misspelled - perhaps 'detected'?
#3285: FILE: drivers/gpu/drm/ttm/ttm_fence.c:48:
+	printk(KERN_ERR "GPU lockup dectected on engine %u "
 	                            ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3285: FILE: drivers/gpu/drm/ttm/ttm_fence.c:48:
+	printk(KERN_ERR "GPU lockup dectected on engine %u "

WARNING:SPLIT_STRING: quoted string split across lines
#3286: FILE: drivers/gpu/drm/ttm/ttm_fence.c:49:
+	printk(KERN_ERR "GPU lockup dectected on engine %u "
+	       "fence type 0x%08x\n",

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3308: FILE: drivers/gpu/drm/ttm/ttm_fence.c:71:
+	uint32_t count = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3313: FILE: drivers/gpu/drm/ttm/ttm_fence.c:76:
+	DECLARE_WAITQUEUE(entry, current);
+	add_wait_queue(&fc->fence_queue, &entry);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3329: FILE: drivers/gpu/drm/ttm/ttm_fence.c:92:
+		if (lazy)
[...]
+		else if ((++count & 0x0F) == 0) {
[...]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3353: FILE: drivers/gpu/drm/ttm/ttm_fence.c:116:
+		       uint32_t sequence, uint32_t type, uint32_t error)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3356: FILE: drivers/gpu/drm/ttm/ttm_fence.c:119:
+	uint32_t diff;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3357: FILE: drivers/gpu/drm/ttm/ttm_fence.c:120:
+	uint32_t relevant_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3358: FILE: drivers/gpu/drm/ttm/ttm_fence.c:121:
+	uint32_t new_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3485: FILE: drivers/gpu/drm/ttm/ttm_fence.c:248:
+	uint32_t saved_pending_flush;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3486: FILE: drivers/gpu/drm/ttm/ttm_fence.c:249:
+	uint32_t diff;

WARNING:SPLIT_STRING: quoted string split across lines
#3491: FILE: drivers/gpu/drm/ttm/ttm_fence.c:254:
+		DRM_ERROR("Flush trying to extend fence type, "
+			  "0x%x, 0x%x\n", type, fence->fence_type);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3532: FILE: drivers/gpu/drm/ttm/ttm_fence.c:295:
+			 uint32_t fence_class, uint32_t sequence)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3540: FILE: drivers/gpu/drm/ttm/ttm_fence.c:303:
+	uint32_t diff;

WARNING:TYPO_SPELLING: 'Shold' may be misspelled - perhaps 'Should'?
#3566: FILE: drivers/gpu/drm/ttm/ttm_fence.c:329:
+	 * FIXME: Shold we implement a wait here for really old fences?
 	          ^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3569: FILE: drivers/gpu/drm/ttm/ttm_fence.c:332:
+
+}

WARNING:SPLIT_STRING: quoted string split across lines
#3583: FILE: drivers/gpu/drm/ttm/ttm_fence.c:346:
+		DRM_ERROR("Wait trying to extend fence type"
+			  " 0x%08x 0x%08x\n", mask, fence->fence_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3584: FILE: drivers/gpu/drm/ttm/ttm_fence.c:347:
+		BUG();

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3595: FILE: drivers/gpu/drm/ttm/ttm_fence.c:358:
+	    driver->has_irq(fence->fdev, fence->fence_class, mask)) {
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3629: FILE: drivers/gpu/drm/ttm/ttm_fence.c:392:
+			  uint32_t fence_class, uint32_t type)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3634: FILE: drivers/gpu/drm/ttm/ttm_fence.c:397:
+	uint32_t sequence;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3661: FILE: drivers/gpu/drm/ttm/ttm_fence.c:424:
+			  uint32_t fence_class,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3662: FILE: drivers/gpu/drm/ttm/ttm_fence.c:425:
+			  uint32_t type,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3663: FILE: drivers/gpu/drm/ttm/ttm_fence.c:426:
+			  uint32_t create_flags,

WARNING:SPACING: Unnecessary space before function pointer arguments
#3664: FILE: drivers/gpu/drm/ttm/ttm_fence.c:427:
+			  void (*destroy) (struct ttm_fence_object *),

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3690: FILE: drivers/gpu/drm/ttm/ttm_fence.c:453:
+			    uint32_t fence_class,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3691: FILE: drivers/gpu/drm/ttm/ttm_fence.c:454:
+			    uint32_t type,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3692: FILE: drivers/gpu/drm/ttm/ttm_fence.c:455:
+			    uint32_t create_flags,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3701: FILE: drivers/gpu/drm/ttm/ttm_fence.c:464:
+		printk(KERN_ERR "Out of memory creating fence object\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3707: FILE: drivers/gpu/drm/ttm/ttm_fence.c:470:
+		printk(KERN_ERR "Out of memory creating fence object\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#3707: FILE: drivers/gpu/drm/ttm/ttm_fence.c:470:
+	if (!fence) {
+		printk(KERN_ERR "Out of memory creating fence object\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#3735: FILE: drivers/gpu/drm/ttm/ttm_fence.c:498:
+	if (fence->destroy)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3737: FILE: drivers/gpu/drm/ttm/ttm_fence.c:500:
+	else {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#3762: FILE: drivers/gpu/drm/ttm/ttm_fence.c:525:
+	fdev->fence_class = kzalloc(num_classes *
+				    sizeof(*fdev->fence_class), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: No space is necessary after a cast
#3816: FILE: drivers/gpu/drm/ttm/ttm_fence.c:579:
+	uint32_t fence_types = (uint32_t) (unsigned long)sync_arg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3816: FILE: drivers/gpu/drm/ttm/ttm_fence.c:579:
+	uint32_t fence_types = (uint32_t) (unsigned long)sync_arg;

CHECK:SPACING: No space is necessary after a cast
#3825: FILE: drivers/gpu/drm/ttm/ttm_fence.c:588:
+	uint32_t fence_types = (uint32_t) (unsigned long)sync_arg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3825: FILE: drivers/gpu/drm/ttm/ttm_fence.c:588:
+	uint32_t fence_types = (uint32_t) (unsigned long)sync_arg;

CHECK:SPACING: No space is necessary after a cast
#3833: FILE: drivers/gpu/drm/ttm/ttm_fence.c:596:
+	uint32_t fence_types = (uint32_t) (unsigned long)sync_arg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3833: FILE: drivers/gpu/drm/ttm/ttm_fence.c:596:
+	uint32_t fence_types = (uint32_t) (unsigned long)sync_arg;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3854: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:1:
+/**************************************************************************

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base"
#3912: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:59:
+	if (unlikely(base == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3913: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:60:
+		printk(KERN_ERR "Invalid fence handle 0x%08lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3920: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:67:
+		printk(KERN_ERR "Invalid fence handle 0x%08lx\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base"
#3954: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:101:
+	if (unlikely(base == NULL))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3965: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:112:
+		      uint32_t fence_class,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3966: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:113:
+		      uint32_t fence_types,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3967: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:114:
+		      uint32_t create_flags,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3968: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:115:
+		      struct ttm_fence_object **fence, uint32_t * user_handle)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ufence"
#3980: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:127:
+	if (unlikely(ufence == NULL)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4031: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:178:
+	struct ttm_base_object *base;
+	ret = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ufence"
#4034: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:181:
+	if (unlikely(ufence == NULL))

WARNING:LINE_SPACING: Missing a blank line after declarations
#4062: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:209:
+	struct ttm_fence_object *fence;
+	ret = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ufence"
#4065: FILE: drivers/gpu/drm/ttm/ttm_fence_user.c:212:
+	if (unlikely(ufence == NULL))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4100: FILE: drivers/gpu/drm/ttm/ttm_lock.c:1:
+/**************************************************************************

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#4133: FILE: drivers/gpu/drm/ttm/ttm_lock.c:34:
+#include <asm/atomic.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#4171: FILE: drivers/gpu/drm/ttm/ttm_lock.c:72:
+		int ret;
+		if (!interruptible) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4207: FILE: drivers/gpu/drm/ttm/ttm_lock.c:108:
+	BUG_ON(ret != 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4268: FILE: drivers/gpu/drm/ttm/ttm_memory.c:1:
+/**************************************************************************

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#4317: FILE: drivers/gpu/drm/ttm/ttm_memory.c:50:
+	uint64_t target;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#4318: FILE: drivers/gpu/drm/ttm/ttm_memory.c:51:
+	uint64_t total_target;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!glob->shrink"
#4321: FILE: drivers/gpu/drm/ttm/ttm_memory.c:54:
+	if (glob->shrink == NULL)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#4362: FILE: drivers/gpu/drm/ttm/ttm_memory.c:95:
+	uint64_t mem;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4389: FILE: drivers/gpu/drm/ttm/ttm_memory.c:122:
+	printk(KERN_INFO "TTM available graphics memory: %llu MiB\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4391: FILE: drivers/gpu/drm/ttm/ttm_memory.c:124:
+	printk(KERN_INFO "TTM available object memory: %llu MiB\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4399: FILE: drivers/gpu/drm/ttm/ttm_memory.c:132:
+	printk(KERN_INFO "Used total memory is %llu bytes.\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4419: FILE: drivers/gpu/drm/ttm/ttm_memory.c:152:
+
+}

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#4422: FILE: drivers/gpu/drm/ttm/ttm_memory.c:155:
+			 uint64_t amount, bool himem)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#4433: FILE: drivers/gpu/drm/ttm/ttm_memory.c:166:
+				  uint64_t amount, bool himem, bool reserve)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#4435: FILE: drivers/gpu/drm/ttm/ttm_memory.c:168:
+	uint64_t limit;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#4436: FILE: drivers/gpu/drm/ttm/ttm_memory.c:169:
+	uint64_t lomem_limit;

CHECK:BRACES: braces {} should be used on all arms of this statement
#4486: FILE: drivers/gpu/drm/ttm/ttm_memory.c:219:
+	if ((size & (size - 1)) == 0)
[...]
+	else if (size > PAGE_SIZE)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#4490: FILE: drivers/gpu/drm/ttm/ttm_memory.c:223:
+		return PAGE_ALIGN(size);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#4490: FILE: drivers/gpu/drm/ttm/ttm_memory.c:223:
+	else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4506: FILE: drivers/gpu/drm/ttm/ttm_object.c:1:
+/**************************************************************************

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#4563: FILE: drivers/gpu/drm/ttm/ttm_object.c:58:
+#include <asm/atomic.h>

CHECK:SPACING: No space is necessary after a cast
#4634: FILE: drivers/gpu/drm/ttm/ttm_object.c:129:
+	printk(KERN_INFO "Freeing 0x%08lx\n", (unsigned long) tfile);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4634: FILE: drivers/gpu/drm/ttm/ttm_object.c:129:
+	printk(KERN_INFO "Freeing 0x%08lx\n", (unsigned long) tfile);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4638: FILE: drivers/gpu/drm/ttm/ttm_object.c:133:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4647: FILE: drivers/gpu/drm/ttm/ttm_object.c:142:
+
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#4652: FILE: drivers/gpu/drm/ttm/ttm_object.c:147:
+			 void (*refcount_release) (struct ttm_base_object **),

WARNING:SPACING: Unnecessary space before function pointer arguments
#4653: FILE: drivers/gpu/drm/ttm/ttm_object.c:148:
+			 void (*ref_obj_release) (struct ttm_base_object *,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4739: FILE: drivers/gpu/drm/ttm/ttm_object.c:234:
+		printk(KERN_ERR "Attempted access of non-shareable object.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "existed"
#4757: FILE: drivers/gpu/drm/ttm/ttm_object.c:252:
+	if (existed != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ref"
#4777: FILE: drivers/gpu/drm/ttm/ttm_object.c:272:
+		if (unlikely(ref == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "existed"
#4795: FILE: drivers/gpu/drm/ttm/ttm_object.c:290:
+			if (existed != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4801: FILE: drivers/gpu/drm/ttm/ttm_object.c:296:
+		BUG_ON(ret != -EINVAL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tfile"
#4889: FILE: drivers/gpu/drm/ttm/ttm_object.c:384:
+	if (unlikely(tfile == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tdev"
#4922: FILE: drivers/gpu/drm/ttm/ttm_object.c:417:
+	if (unlikely(tdev == NULL))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4955: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:1:
+/**************************************************************************

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base"
#5017: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:63:
+	if (unlikely(base == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5018: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:64:
+		printk(KERN_ERR "Invalid buffer object handle 0x%08lx.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5025: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:71:
+		printk(KERN_ERR "Invalid buffer object handle 0x%08lx.\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!user_bo"
#5040: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:86:
+	if (unlikely(user_bo == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base"
#5066: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:112:
+	if (unlikely(base == NULL))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5086: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:132:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#5101: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:147:
+	rep->sync_object_arg = (uint32_t) (unsigned long)bo->sync_obj_arg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5114: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:160:
+	uint32_t flags;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!user_bo"
#5125: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:171:
+	if (unlikely(user_bo == NULL)) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5183: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:229:
+	uint32_t flags;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!user_bo"
#5194: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:240:
+	if (unlikely(user_bo == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!user_bo"
#5250: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:296:
+	if (unlikely(user_bo == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5251: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:297:
+		printk(KERN_ERR "Could not reference buffer object.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5258: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:304:
+		printk(KERN_ERR

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!user_bo"
#5292: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:338:
+		if (unlikely(user_bo == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5293: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:339:
+			printk(KERN_ERR

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo"
#5335: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:381:
+	if (unlikely(bo == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5336: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:382:
+		printk(KERN_ERR

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo"
#5385: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:431:
+	if (unlikely(bo == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5386: FILE: drivers/gpu/drm/ttm/ttm_placement_user.c:432:
+		printk(KERN_ERR "Could not find buffer object for waitidle.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5430: FILE: drivers/gpu/drm/ttm/ttm_tt.c:1:
+/**************************************************************************

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5476: FILE: drivers/gpu/drm/ttm/ttm_tt.c:47:
+	uint8_t *page_virtual;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#5479: FILE: drivers/gpu/drm/ttm/ttm_tt.c:50:
+	if (unlikely(page == NULL))

WARNING:MEMORY_BARRIER: memory barrier without comment
#5495: FILE: drivers/gpu/drm/ttm/ttm_tt.c:66:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#5498: FILE: drivers/gpu/drm/ttm/ttm_tt.c:69:
+	mb();

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5509: FILE: drivers/gpu/drm/ttm/ttm_tt.c:80:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5517: FILE: drivers/gpu/drm/ttm/ttm_tt.c:88:
+		printk(KERN_ERR "Timed out waiting for drm cache flush.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#5529: FILE: drivers/gpu/drm/ttm/ttm_tt.c:100:
+	unsigned long size = ttm->num_pages * sizeof(*ttm->pages);
+	ttm->pages = NULL;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5565: FILE: drivers/gpu/drm/ttm/ttm_tt.c:136:
+	BUG_ON(!(ttm->page_flags & TTM_PAGE_FLAG_USER));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#5574: FILE: drivers/gpu/drm/ttm/ttm_tt.c:145:
+		if (page == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5578: FILE: drivers/gpu/drm/ttm/ttm_tt.c:149:
+			BUG_ON(write);

WARNING:TABSTOP: Statements should start on a tabstop
#5680: FILE: drivers/gpu/drm/ttm/ttm_tt.c:251:
+	    return set_memory_wc((unsigned long) page_address(p), 1);

CHECK:SPACING: No space is necessary after a cast
#5680: FILE: drivers/gpu/drm/ttm/ttm_tt.c:251:
+	    return set_memory_wc((unsigned long) page_address(p), 1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_page"
#5719: FILE: drivers/gpu/drm/ttm/ttm_tt.c:290:
+		if (likely(cur_page != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_page"
#5733: FILE: drivers/gpu/drm/ttm/ttm_tt.c:304:
+		if (likely(cur_page != NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5770: FILE: drivers/gpu/drm/ttm/ttm_tt.c:341:
+				printk(KERN_ERR "Erroneous page count. "

WARNING:SPLIT_STRING: quoted string split across lines
#5771: FILE: drivers/gpu/drm/ttm/ttm_tt.c:342:
+				printk(KERN_ERR "Erroneous page count. "
+				       "Leaking pages.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ttm"
#5786: FILE: drivers/gpu/drm/ttm/ttm_tt.c:357:
+	if (unlikely(ttm == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "be"
#5790: FILE: drivers/gpu/drm/ttm/ttm_tt.c:361:
+	if (likely(be != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ttm->pages"
#5795: FILE: drivers/gpu/drm/ttm/ttm_tt.c:366:
+	if (likely(ttm->pages != NULL)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5820: FILE: drivers/gpu/drm/ttm/ttm_tt.c:391:
+	BUG_ON(num_pages != ttm->num_pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5821: FILE: drivers/gpu/drm/ttm/ttm_tt.c:392:
+	BUG_ON((ttm->page_flags & TTM_PAGE_FLAG_USER) == 0);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5851: FILE: drivers/gpu/drm/ttm/ttm_tt.c:422:
+			     uint32_t page_flags, struct page *dummy_read_page)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5876: FILE: drivers/gpu/drm/ttm/ttm_tt.c:447:
+		printk(KERN_ERR "Failed allocating page table\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5882: FILE: drivers/gpu/drm/ttm/ttm_tt.c:453:
+		printk(KERN_ERR "Failed creating ttm backend entry\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5896: FILE: drivers/gpu/drm/ttm/ttm_tt.c:467:
+		BUG_ON(ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5920: FILE: drivers/gpu/drm/ttm/ttm_tt.c:491:
+		printk(KERN_ERR "Couldn't bind backend.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5953: FILE: drivers/gpu/drm/ttm/ttm_tt.c:524:
+	BUG_ON(swap_storage == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!swap_storage"
#5953: FILE: drivers/gpu/drm/ttm/ttm_tt.c:524:
+	BUG_ON(swap_storage == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!to_page"
#5962: FILE: drivers/gpu/drm/ttm/ttm_tt.c:533:
+		if (unlikely(to_page == NULL))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5996: FILE: drivers/gpu/drm/ttm/ttm_tt.c:567:
+	BUG_ON(ttm->state != tt_unbound && ttm->state != tt_unpopulated);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5997: FILE: drivers/gpu/drm/ttm/ttm_tt.c:568:
+	BUG_ON(ttm->caching_state != tt_cached);

CHECK:BRACES: braces {} should be used on all arms of this statement
#6011: FILE: drivers/gpu/drm/ttm/ttm_tt.c:582:
+	if (!persistant_swap_storage) {
[...]
+	} else
[...]

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#6015: FILE: drivers/gpu/drm/ttm/ttm_tt.c:586:
+		if (unlikely(IS_ERR(swap_storage))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6016: FILE: drivers/gpu/drm/ttm/ttm_tt.c:587:
+			printk(KERN_ERR "Failed allocating swap storage.\n");

CHECK:BRACES: Unbalanced braces around else statement
#6019: FILE: drivers/gpu/drm/ttm/ttm_tt.c:590:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!from_page"
#6026: FILE: drivers/gpu/drm/ttm/ttm_tt.c:597:
+		if (unlikely(from_page == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!to_page"
#6029: FILE: drivers/gpu/drm/ttm/ttm_tt.c:600:
+		if (unlikely(to_page == NULL))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6063: FILE: include/drm/ttm/ttm_bo_api.h:1:
+/**************************************************************************

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6128: FILE: include/drm/ttm/ttm_bo_api.h:66:
+	uint32_t page_alignment;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6129: FILE: include/drm/ttm/ttm_bo_api.h:67:
+	uint32_t mem_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6130: FILE: include/drm/ttm/ttm_bo_api.h:68:
+	uint32_t flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6131: FILE: include/drm/ttm/ttm_bo_api.h:69:
+	uint32_t proposed_flags;

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#6143: FILE: include/drm/ttm/ttm_bo_api.h:81:
+ * space. These buffers cannot be mmaped from the device address space.
                                   ^^^^^^

WARNING:TYPO_SPELLING: 'persistant' may be misspelled - perhaps 'persistent'?
#6188: FILE: include/drm/ttm/ttm_bo_api.h:126:
+ * holds a pointer to a persistant shmem object.
                         ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6228: FILE: include/drm/ttm/ttm_bo_api.h:166:
+	uint32_t proposed_flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6233: FILE: include/drm/ttm/ttm_bo_api.h:171:
+	uint32_t val_seq;

WARNING:SPACING: Unnecessary space before function pointer arguments
#6242: FILE: include/drm/ttm/ttm_bo_api.h:180:
+	void (*destroy) (struct ttm_buffer_object *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ttm_buffer_object *' should also have an identifier name
#6242: FILE: include/drm/ttm/ttm_bo_api.h:180:
+	void (*destroy) (struct ttm_buffer_object *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6247: FILE: include/drm/ttm/ttm_bo_api.h:185:
+	uint32_t priv_flags;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#6249: FILE: include/drm/ttm/ttm_bo_api.h:187:
+	struct mutex mutex;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#6255: FILE: include/drm/ttm/ttm_bo_api.h:193:
+	uint64_t addr_space_offset;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6316: FILE: include/drm/ttm/ttm_bo_api.h:254:
+extern int ttm_bo_wait(struct ttm_buffer_object *bo, bool lazy,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6333: FILE: include/drm/ttm/ttm_bo_api.h:271:
+extern int ttm_buffer_object_validate(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6342: FILE: include/drm/ttm/ttm_bo_api.h:280:
+extern void ttm_bo_unref(struct ttm_buffer_object **bo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6358: FILE: include/drm/ttm/ttm_bo_api.h:296:
+extern int ttm_bo_synccpu_write_grab(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6367: FILE: include/drm/ttm/ttm_bo_api.h:305:
+extern void ttm_bo_synccpu_write_release(struct ttm_buffer_object *bo);

WARNING:TYPO_SPELLING: 'persistant' may be misspelled - perhaps 'persistent'?
#6384: FILE: include/drm/ttm/ttm_bo_api.h:322:
+ * holds a pointer to a persistant shmem object. Typically, this would
                         ^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6401: FILE: include/drm/ttm/ttm_bo_api.h:339:
+extern int ttm_buffer_object_init(struct ttm_bo_device *bdev,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6405: FILE: include/drm/ttm/ttm_bo_api.h:343:
+				  uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6406: FILE: include/drm/ttm/ttm_bo_api.h:344:
+				  uint32_t page_alignment,

WARNING:SPACING: Unnecessary space before function pointer arguments
#6411: FILE: include/drm/ttm/ttm_bo_api.h:349:
+				  void (*destroy) (struct ttm_buffer_object *));

WARNING:TYPO_SPELLING: 'persistant' may be misspelled - perhaps 'persistent'?
#6427: FILE: include/drm/ttm/ttm_bo_api.h:365:
+ * holds a pointer to a persistant shmem object. Typically, this would
                         ^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6441: FILE: include/drm/ttm/ttm_bo_api.h:379:
+extern int ttm_buffer_object_create(struct ttm_bo_device *bdev,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6444: FILE: include/drm/ttm/ttm_bo_api.h:382:
+				    uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6445: FILE: include/drm/ttm/ttm_bo_api.h:383:
+				    uint32_t page_alignment,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6464: FILE: include/drm/ttm/ttm_bo_api.h:402:
+extern int ttm_bo_check_placement(struct ttm_buffer_object *bo,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6465: FILE: include/drm/ttm/ttm_bo_api.h:403:
+				  uint32_t set_flags, uint32_t clr_flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6484: FILE: include/drm/ttm/ttm_bo_api.h:422:
+extern int ttm_bo_init_mm(struct ttm_bo_device *bdev, unsigned type,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6484: FILE: include/drm/ttm/ttm_bo_api.h:422:
+extern int ttm_bo_init_mm(struct ttm_bo_device *bdev, unsigned type,

WARNING:TYPO_SPELLING: 'appications' may be misspelled - perhaps 'applications'?
#6504: FILE: include/drm/ttm/ttm_bo_api.h:442:
+ * there are no appications currently validating buffers before this
                 ^^^^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6513: FILE: include/drm/ttm/ttm_bo_api.h:451:
+extern int ttm_bo_clean_mm(struct ttm_bo_device *bdev, unsigned mem_type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6513: FILE: include/drm/ttm/ttm_bo_api.h:451:
+extern int ttm_bo_clean_mm(struct ttm_bo_device *bdev, unsigned mem_type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6534: FILE: include/drm/ttm/ttm_bo_api.h:472:
+extern int ttm_bo_evict_mm(struct ttm_bo_device *bdev, unsigned mem_type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6534: FILE: include/drm/ttm/ttm_bo_api.h:472:
+extern int ttm_bo_evict_mm(struct ttm_bo_device *bdev, unsigned mem_type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6573: FILE: include/drm/ttm/ttm_bo_api.h:511:
+extern int ttm_bo_kmap(struct ttm_buffer_object *bo, unsigned long start_page,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6584: FILE: include/drm/ttm/ttm_bo_api.h:522:
+extern void ttm_bo_kunmap(struct ttm_bo_kmap_obj *map);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#6586: FILE: include/drm/ttm/ttm_bo_api.h:524:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6600: FILE: include/drm/ttm/ttm_bo_api.h:538:
+extern int ttm_fbdev_mmap(struct vm_area_struct *vma,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6606: FILE: include/drm/ttm/ttm_bo_api.h:544:
+ * @filp:      filp as input from the mmap method.
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6606: FILE: include/drm/ttm/ttm_bo_api.h:544:
+ * @filp:      filp as input from the mmap method.
                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6614: FILE: include/drm/ttm/ttm_bo_api.h:552:
+extern int ttm_bo_mmap(struct file *filp, struct vm_area_struct *vma,
                                     ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6614: FILE: include/drm/ttm/ttm_bo_api.h:552:
+extern int ttm_bo_mmap(struct file *filp, struct vm_area_struct *vma,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6621: FILE: include/drm/ttm/ttm_bo_api.h:559:
+ * @filp:      Pointer to the struct file attempting to read / write.
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6637: FILE: include/drm/ttm/ttm_bo_api.h:575:
+extern ssize_t ttm_bo_io(struct ttm_bo_device *bdev, struct file *filp,
                                                                   ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6637: FILE: include/drm/ttm/ttm_bo_api.h:575:
+extern ssize_t ttm_bo_io(struct ttm_bo_device *bdev, struct file *filp,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6641: FILE: include/drm/ttm/ttm_bo_api.h:579:
+extern void ttm_bo_swapout_all(struct ttm_bo_device *bdev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6650: FILE: include/drm/ttm/ttm_bo_driver.h:1:
+/**************************************************************************

WARNING:SPACING: Unnecessary space before function pointer arguments
#6706: FILE: include/drm/ttm/ttm_bo_driver.h:57:
+	int (*populate) (struct ttm_backend *backend,

WARNING:SPACING: Unnecessary space before function pointer arguments
#6717: FILE: include/drm/ttm/ttm_bo_driver.h:68:
+	void (*clear) (struct ttm_backend *backend);

WARNING:SPACING: Unnecessary space before function pointer arguments
#6730: FILE: include/drm/ttm/ttm_bo_driver.h:81:
+	int (*bind) (struct ttm_backend *backend, struct ttm_mem_reg *bo_mem);

WARNING:SPACING: Unnecessary space before function pointer arguments
#6740: FILE: include/drm/ttm/ttm_bo_driver.h:91:
+	int (*unbind) (struct ttm_backend *backend);

WARNING:SPACING: Unnecessary space before function pointer arguments
#6749: FILE: include/drm/ttm/ttm_bo_driver.h:100:
+	void (*destroy) (struct ttm_backend *backend);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6764: FILE: include/drm/ttm/ttm_bo_driver.h:115:
+	uint32_t flags;

CHECK:BIT_MACRO: Prefer using the BIT macro
#6768: FILE: include/drm/ttm/ttm_bo_driver.h:119:
+#define TTM_PAGE_FLAG_VMALLOC         (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#6769: FILE: include/drm/ttm/ttm_bo_driver.h:120:
+#define TTM_PAGE_FLAG_USER            (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#6770: FILE: include/drm/ttm/ttm_bo_driver.h:121:
+#define TTM_PAGE_FLAG_USER_DIRTY      (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#6771: FILE: include/drm/ttm/ttm_bo_driver.h:122:
+#define TTM_PAGE_FLAG_WRITE           (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#6772: FILE: include/drm/ttm/ttm_bo_driver.h:123:
+#define TTM_PAGE_FLAG_SWAPPED         (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#6773: FILE: include/drm/ttm/ttm_bo_driver.h:124:
+#define TTM_PAGE_FLAG_PERSISTANT_SWAP (1 << 5)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6811: FILE: include/drm/ttm/ttm_bo_driver.h:162:
+	uint32_t page_flags;

CHECK:BIT_MACRO: Prefer using the BIT macro
#6826: FILE: include/drm/ttm/ttm_bo_driver.h:177:
+#define TTM_MEMTYPE_FLAG_FIXED         (1 << 0)	/* Fixed (on-card) PCI memory */

CHECK:BIT_MACRO: Prefer using the BIT macro
#6827: FILE: include/drm/ttm/ttm_bo_driver.h:178:
+#define TTM_MEMTYPE_FLAG_MAPPABLE      (1 << 1)	/* Memory mappable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#6828: FILE: include/drm/ttm/ttm_bo_driver.h:179:
+#define TTM_MEMTYPE_FLAG_NEEDS_IOREMAP (1 << 2)	/* Fixed memory needs ioremap

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6829: FILE: include/drm/ttm/ttm_bo_driver.h:180:
+#define TTM_MEMTYPE_FLAG_NEEDS_IOREMAP (1 << 2)	/* Fixed memory needs ioremap
+						   before kernel access. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6829: FILE: include/drm/ttm/ttm_bo_driver.h:180:
+						   before kernel access. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#6830: FILE: include/drm/ttm/ttm_bo_driver.h:181:
+#define TTM_MEMTYPE_FLAG_CMA           (1 << 3)	/* Can't map aperture */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#6864: FILE: include/drm/ttm/ttm_bo_driver.h:215:
+struct ttm_mem_type_manager {
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6871: FILE: include/drm/ttm/ttm_bo_driver.h:222:
+	uint32_t flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#6876: FILE: include/drm/ttm/ttm_bo_driver.h:227:
+	uint64_t size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6877: FILE: include/drm/ttm/ttm_bo_driver.h:228:
+	uint32_t available_caching;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6878: FILE: include/drm/ttm/ttm_bo_driver.h:229:
+	uint32_t default_caching;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6916: FILE: include/drm/ttm/ttm_bo_driver.h:267:
+	const uint32_t *mem_type_prio;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6917: FILE: include/drm/ttm/ttm_bo_driver.h:268:
+	const uint32_t *mem_busy_prio;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6918: FILE: include/drm/ttm/ttm_bo_driver.h:269:
+	uint32_t num_mem_type_prio;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#6919: FILE: include/drm/ttm/ttm_bo_driver.h:270:
+	uint32_t num_mem_busy_prio;

WARNING:TYPO_SPELLING: 'previosly' may be misspelled - perhaps 'previously'?
#6938: FILE: include/drm/ttm/ttm_bo_driver.h:289:
+	 * A previosly evicted buffer has been rebound in a
 	     ^^^^^^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#6944: FILE: include/drm/ttm/ttm_bo_driver.h:295:
+	int (*invalidate_caches) (struct ttm_bo_device *bdev, uint32_t flags);

WARNING:SPACING: Unnecessary space before function pointer arguments
#6945: FILE: include/drm/ttm/ttm_bo_driver.h:296:
+	int (*init_mem_type) (struct ttm_bo_device *bdev, uint32_t type,

WARNING:SPACING: missing space after return type
#6957: FILE: include/drm/ttm/ttm_bo_driver.h:308:
+	 uint32_t(*evict_flags) (struct ttm_buffer_object *bo);

WARNING:SPACING: Unnecessary space before function pointer arguments
#6957: FILE: include/drm/ttm/ttm_bo_driver.h:308:
+	 uint32_t(*evict_flags) (struct ttm_buffer_object *bo);

WARNING:SPACING: Unnecessary space before function pointer arguments
#6971: FILE: include/drm/ttm/ttm_bo_driver.h:322:
+	int (*move) (struct ttm_buffer_object *bo,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6979: FILE: include/drm/ttm/ttm_bo_driver.h:330:
+	 * @filp: Pointer to a struct file trying to access the object.
 	    ^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#6987: FILE: include/drm/ttm/ttm_bo_driver.h:338:
+	int (*verify_access) (struct ttm_buffer_object *bo,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6988: FILE: include/drm/ttm/ttm_bo_driver.h:339:
+			      struct file *filp);
 			                   ^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#7000: FILE: include/drm/ttm/ttm_bo_driver.h:351:
+	bool (*sync_obj_signaled) (void *sync_obj, void *sync_arg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#7001: FILE: include/drm/ttm/ttm_bo_driver.h:352:
+	int (*sync_obj_wait) (void *sync_obj, void *sync_arg,

WARNING:SPACING: Unnecessary space before function pointer arguments
#7003: FILE: include/drm/ttm/ttm_bo_driver.h:354:
+	int (*sync_obj_flush) (void *sync_obj, void *sync_arg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#7004: FILE: include/drm/ttm/ttm_bo_driver.h:355:
+	void (*sync_obj_unref) (void **sync_obj);

WARNING:SPACING: Unnecessary space before function pointer arguments
#7005: FILE: include/drm/ttm/ttm_bo_driver.h:356:
+	void *(*sync_obj_ref) (void *sync_obj);

CHECK:BIT_MACRO: Prefer using the BIT macro
#7010: FILE: include/drm/ttm/ttm_bo_driver.h:361:
+#define TTM_BO_PRIV_FLAG_EVICTED  (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#7012: FILE: include/drm/ttm/ttm_bo_driver.h:363:
+#define TTM_BO_PRIV_FLAG_MOVING   (1 << 1)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#7040: FILE: include/drm/ttm/ttm_bo_driver.h:391:
+struct ttm_bo_device {
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7096: FILE: include/drm/ttm/ttm_bo_driver.h:447:
+ttm_flag_masked(uint32_t *old, uint32_t new, uint32_t mask)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7115: FILE: include/drm/ttm/ttm_bo_driver.h:466:
+extern struct ttm_tt *ttm_tt_create(struct ttm_bo_device *bdev,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7117: FILE: include/drm/ttm/ttm_bo_driver.h:468:
+				    uint32_t page_flags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7134: FILE: include/drm/ttm/ttm_bo_driver.h:485:
+extern int ttm_tt_set_user(struct ttm_tt *ttm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7146: FILE: include/drm/ttm/ttm_bo_driver.h:497:
+extern int ttm_tt_bind(struct ttm_tt *ttm, struct ttm_mem_reg *bo_mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7155: FILE: include/drm/ttm/ttm_bo_driver.h:506:
+extern void ttm_tt_destroy(struct ttm_tt *ttm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7164: FILE: include/drm/ttm/ttm_bo_driver.h:515:
+extern void ttm_tt_unbind(struct ttm_tt *ttm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7179: FILE: include/drm/ttm/ttm_bo_driver.h:530:
+extern struct page *ttm_tt_get_page(struct ttm_tt *ttm, int index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7191: FILE: include/drm/ttm/ttm_bo_driver.h:542:
+extern void ttm_tt_cache_flush(struct page *pages[], unsigned long num_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7206: FILE: include/drm/ttm/ttm_bo_driver.h:557:
+extern int ttm_tt_set_placement_caching(struct ttm_tt *ttm, uint32_t placement);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7207: FILE: include/drm/ttm/ttm_bo_driver.h:558:
+extern int ttm_tt_swapout(struct ttm_tt *ttm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7223: FILE: include/drm/ttm/ttm_bo_driver.h:574:
+extern bool ttm_mem_reg_is_pci(struct ttm_bo_device *bdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7224: FILE: include/drm/ttm/ttm_bo_driver.h:575:
+extern bool ttm_mem_reg_is_pci(struct ttm_bo_device *bdev,
+				   struct ttm_mem_reg *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7245: FILE: include/drm/ttm/ttm_bo_driver.h:596:
+extern int ttm_bo_mem_space(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7260: FILE: include/drm/ttm/ttm_bo_driver.h:611:
+extern int ttm_bo_wait_cpu(struct ttm_buffer_object *bo, bool no_wait);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7276: FILE: include/drm/ttm/ttm_bo_driver.h:627:
+extern int ttm_bo_pci_offset(struct ttm_bo_device *bdev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7282: FILE: include/drm/ttm/ttm_bo_driver.h:633:
+extern int ttm_bo_device_release(struct ttm_bo_device *bdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7298: FILE: include/drm/ttm/ttm_bo_driver.h:649:
+extern int ttm_bo_device_init(struct ttm_bo_device *bdev,

WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#7320: FILE: include/drm/ttm/ttm_bo_driver.h:671:
+ * occuring:
    ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7354: FILE: include/drm/ttm/ttm_bo_driver.h:705:
+extern int ttm_bo_reserve(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7365: FILE: include/drm/ttm/ttm_bo_driver.h:716:
+extern void ttm_bo_unreserve(struct ttm_buffer_object *bo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7376: FILE: include/drm/ttm/ttm_bo_driver.h:727:
+extern int ttm_bo_wait_unreserved(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7396: FILE: include/drm/ttm/ttm_bo_driver.h:747:
+extern int ttm_bo_block_reservation(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7406: FILE: include/drm/ttm/ttm_bo_driver.h:757:
+extern void ttm_bo_unblock_reservation(struct ttm_buffer_object *bo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7430: FILE: include/drm/ttm/ttm_bo_driver.h:781:
+extern int ttm_bo_move_ttm(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7452: FILE: include/drm/ttm/ttm_bo_driver.h:803:
+extern int ttm_bo_move_memcpy(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7463: FILE: include/drm/ttm/ttm_bo_driver.h:814:
+extern void ttm_bo_free_old_node(struct ttm_buffer_object *bo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7484: FILE: include/drm/ttm/ttm_bo_driver.h:835:
+extern int ttm_bo_move_accel_cleanup(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7498: FILE: include/drm/ttm/ttm_bo_driver.h:849:
+extern pgprot_t ttm_io_prot(enum ttm_caching_state c_state, pgprot_t tmp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7514: FILE: include/drm/ttm/ttm_bo_driver.h:865:
+extern struct ttm_backend *ttm_agp_backend_init(struct ttm_bo_device *bdev,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7525: FILE: include/drm/ttm/ttm_execbuf_util.h:1:
+/**************************************************************************

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7590: FILE: include/drm/ttm/ttm_execbuf_util.h:66:
+extern void ttm_eu_backoff_reservation(struct list_head *list);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7618: FILE: include/drm/ttm/ttm_execbuf_util.h:94:
+extern int ttm_eu_reserve_buffers(struct list_head *list, uint32_t val_seq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7632: FILE: include/drm/ttm/ttm_execbuf_util.h:108:
+extern void ttm_eu_fence_buffer_objects(struct list_head *list, void *sync_obj);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7641: FILE: include/drm/ttm/ttm_fence_api.h:1:
+/**************************************************************************

CHECK:BIT_MACRO: Prefer using the BIT macro
#7678: FILE: include/drm/ttm/ttm_fence_api.h:38:
+#define TTM_FENCE_FLAG_EMIT (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#7679: FILE: include/drm/ttm/ttm_fence_api.h:39:
+#define TTM_FENCE_TYPE_EXE  (1 << 0)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7695: FILE: include/drm/ttm/ttm_fence_api.h:55:
+	uint32_t signaled_types;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7696: FILE: include/drm/ttm/ttm_fence_api.h:56:
+	uint32_t error;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7725: FILE: include/drm/ttm/ttm_fence_api.h:85:
+	uint32_t fence_class;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7726: FILE: include/drm/ttm/ttm_fence_api.h:86:
+	uint32_t fence_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7736: FILE: include/drm/ttm/ttm_fence_api.h:96:
+	uint32_t sequence;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7737: FILE: include/drm/ttm/ttm_fence_api.h:97:
+	uint32_t waiting_types;

WARNING:SPACING: Unnecessary space before function pointer arguments
#7738: FILE: include/drm/ttm/ttm_fence_api.h:98:
+	void (*destroy) (struct ttm_fence_object *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ttm_fence_object *' should also have an identifier name
#7738: FILE: include/drm/ttm/ttm_fence_api.h:98:
+	void (*destroy) (struct ttm_fence_object *);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7759: FILE: include/drm/ttm/ttm_fence_api.h:119:
+		      uint32_t fence_class,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7760: FILE: include/drm/ttm/ttm_fence_api.h:120:
+		      uint32_t type,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7761: FILE: include/drm/ttm/ttm_fence_api.h:121:
+		      uint32_t create_flags,

WARNING:SPACING: Unnecessary space before function pointer arguments
#7762: FILE: include/drm/ttm/ttm_fence_api.h:122:
+		      void (*destroy) (struct ttm_fence_object *fence),

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7783: FILE: include/drm/ttm/ttm_fence_api.h:143:
+			uint32_t fence_class,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7784: FILE: include/drm/ttm/ttm_fence_api.h:144:
+			uint32_t type,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7785: FILE: include/drm/ttm/ttm_fence_api.h:145:
+			uint32_t create_flags,

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#7842: FILE: include/drm/ttm/ttm_fence_api.h:202:
+							    *fence)
 							    ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7857: FILE: include/drm/ttm/ttm_fence_api.h:217:
+extern void ttm_fence_object_unref(struct ttm_fence_object **p_fence);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7912: FILE: include/drm/ttm/ttm_fence_api.h:272:
+extern bool ttm_fence_sync_obj_signaled(void *sync_obj, void *sync_arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7913: FILE: include/drm/ttm/ttm_fence_api.h:273:
+extern int ttm_fence_sync_obj_wait(void *sync_obj, void *sync_arg,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7915: FILE: include/drm/ttm/ttm_fence_api.h:275:
+extern int ttm_fence_sync_obj_flush(void *sync_obj, void *sync_arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7916: FILE: include/drm/ttm/ttm_fence_api.h:276:
+extern void ttm_fence_sync_obj_unref(void **sync_obj);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7917: FILE: include/drm/ttm/ttm_fence_api.h:277:
+extern void *ttm_fence_sync_obj_ref(void *sync_obj);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7926: FILE: include/drm/ttm/ttm_fence_driver.h:1:
+/**************************************************************************

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#7994: FILE: include/drm/ttm/ttm_fence_driver.h:69:
+struct ttm_fence_class_manager {
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7999: FILE: include/drm/ttm/ttm_fence_driver.h:74:
+	uint32_t wrap_diff;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8000: FILE: include/drm/ttm/ttm_fence_driver.h:75:
+	uint32_t flush_diff;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8001: FILE: include/drm/ttm/ttm_fence_driver.h:76:
+	uint32_t sequence_mask;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8012: FILE: include/drm/ttm/ttm_fence_driver.h:87:
+	uint32_t pending_flush;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8013: FILE: include/drm/ttm/ttm_fence_driver.h:88:
+	uint32_t waiting_types;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8015: FILE: include/drm/ttm/ttm_fence_driver.h:90:
+	uint32_t highest_waiting_sequence;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8016: FILE: include/drm/ttm/ttm_fence_driver.h:91:
+	uint32_t latest_queued_sequence;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8042: FILE: include/drm/ttm/ttm_fence_driver.h:117:
+	uint32_t num_classes;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8067: FILE: include/drm/ttm/ttm_fence_driver.h:142:
+	uint32_t wrap_diff;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8068: FILE: include/drm/ttm/ttm_fence_driver.h:143:
+	uint32_t flush_diff;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8069: FILE: include/drm/ttm/ttm_fence_driver.h:144:
+	uint32_t sequence_mask;

WARNING:SPACING: Unnecessary space before function pointer arguments
#8112: FILE: include/drm/ttm/ttm_fence_driver.h:187:
+	bool (*has_irq) (struct ttm_fence_device *fdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8113: FILE: include/drm/ttm/ttm_fence_driver.h:188:
+	bool (*has_irq) (struct ttm_fence_device *fdev,
+			uint32_t fence_class, uint32_t flags);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8113: FILE: include/drm/ttm/ttm_fence_driver.h:188:
+			uint32_t fence_class, uint32_t flags);

WARNING:SPACING: Unnecessary space before function pointer arguments
#8114: FILE: include/drm/ttm/ttm_fence_driver.h:189:
+	int (*emit) (struct ttm_fence_device *fdev,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8115: FILE: include/drm/ttm/ttm_fence_driver.h:190:
+		     uint32_t fence_class,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8116: FILE: include/drm/ttm/ttm_fence_driver.h:191:
+		     uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8117: FILE: include/drm/ttm/ttm_fence_driver.h:192:
+		     uint32_t *breadcrumb, unsigned long *timeout_jiffies);

WARNING:SPACING: Unnecessary space before function pointer arguments
#8118: FILE: include/drm/ttm/ttm_fence_driver.h:193:
+	void (*flush) (struct ttm_fence_device *fdev, uint32_t fence_class);

WARNING:SPACING: Unnecessary space before function pointer arguments
#8119: FILE: include/drm/ttm/ttm_fence_driver.h:194:
+	void (*poll) (struct ttm_fence_device *fdev,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8120: FILE: include/drm/ttm/ttm_fence_driver.h:195:
+		      uint32_t fence_class, uint32_t types);

WARNING:SPACING: missing space after return type
#8121: FILE: include/drm/ttm/ttm_fence_driver.h:196:
+	 uint32_t(*needed_flush) (struct ttm_fence_object *fence);

WARNING:SPACING: Unnecessary space before function pointer arguments
#8121: FILE: include/drm/ttm/ttm_fence_driver.h:196:
+	 uint32_t(*needed_flush) (struct ttm_fence_object *fence);

WARNING:SPACING: Unnecessary space before function pointer arguments
#8122: FILE: include/drm/ttm/ttm_fence_driver.h:197:
+	int (*wait) (struct ttm_fence_object *fence, bool lazy,

WARNING:SPACING: Unnecessary space before function pointer arguments
#8124: FILE: include/drm/ttm/ttm_fence_driver.h:199:
+	void (*signaled) (struct ttm_fence_object *fence);

WARNING:SPACING: Unnecessary space before function pointer arguments
#8125: FILE: include/drm/ttm/ttm_fence_driver.h:200:
+	void (*lockup) (struct ttm_fence_object *fence, uint32_t fence_types);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8159: FILE: include/drm/ttm/ttm_fence_driver.h:234:
+extern void ttm_fence_device_release(struct ttm_fence_device *fdev);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8185: FILE: include/drm/ttm/ttm_fence_driver.h:260:
+		  uint32_t fence_class,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8186: FILE: include/drm/ttm/ttm_fence_driver.h:261:
+		  uint32_t sequence, uint32_t type, uint32_t error);

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#8212: FILE: include/drm/ttm/ttm_fence_driver.h:287:
+							      *fence)
 							      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#8228: FILE: include/drm/ttm/ttm_fence_driver.h:303:
+							   *fence)
 							   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8240: FILE: include/drm/ttm/ttm_fence_user.h:1:
+/**************************************************************************

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8298: FILE: include/drm/ttm/ttm_fence_user.h:59:
+	uint32_t handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8299: FILE: include/drm/ttm/ttm_fence_user.h:60:
+	uint32_t fence_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#8300: FILE: include/drm/ttm/ttm_fence_user.h:61:
+	int32_t flush;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8301: FILE: include/drm/ttm/ttm_fence_user.h:62:
+	uint32_t pad64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8319: FILE: include/drm/ttm/ttm_fence_user.h:80:
+	uint32_t signaled_types;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8320: FILE: include/drm/ttm/ttm_fence_user.h:81:
+	uint32_t fence_error;

CHECK:BIT_MACRO: Prefer using the BIT macro
#8338: FILE: include/drm/ttm/ttm_fence_user.h:99:
+#define TTM_FENCE_FINISH_MODE_LAZY     (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#8339: FILE: include/drm/ttm/ttm_fence_user.h:100:
+#define TTM_FENCE_FINISH_MODE_NO_BLOCK (1 << 1)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8354: FILE: include/drm/ttm/ttm_fence_user.h:115:
+	uint32_t handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8355: FILE: include/drm/ttm/ttm_fence_user.h:116:
+	uint32_t fence_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8356: FILE: include/drm/ttm/ttm_fence_user.h:117:
+	uint32_t mode;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8357: FILE: include/drm/ttm/ttm_fence_user.h:118:
+	uint32_t pad64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8374: FILE: include/drm/ttm/ttm_fence_user.h:135:
+	uint32_t handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#8375: FILE: include/drm/ttm/ttm_fence_user.h:136:
+	uint32_t pad64;

WARNING:TYPO_SPELLING: 'frome' may be misspelled - perhaps 'from'?
#8379: FILE: include/drm/ttm/ttm_fence_user.h:140:
+ * Ioctl offsets frome extenstion start.
                  ^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8393: FILE: include/drm/ttm/ttm_lock.h:1:
+/**************************************************************************

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#8464: FILE: include/drm/ttm/ttm_lock.h:72:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8493: FILE: include/drm/ttm/ttm_lock.h:101:
+extern void ttm_lock_init(struct ttm_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8503: FILE: include/drm/ttm/ttm_lock.h:111:
+extern void ttm_read_unlock(struct ttm_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8516: FILE: include/drm/ttm/ttm_lock.h:124:
+extern int ttm_read_lock(struct ttm_lock *lock, bool interruptible);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8531: FILE: include/drm/ttm/ttm_lock.h:139:
+extern int ttm_write_lock(struct ttm_lock *lock, bool interruptible,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8545: FILE: include/drm/ttm/ttm_lock.h:153:
+extern int ttm_write_unlock(struct ttm_lock *lock,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8581: FILE: include/drm/ttm/ttm_memory.h:1:
+/**************************************************************************

WARNING:SPACING: Unnecessary space before function pointer arguments
#8628: FILE: include/drm/ttm/ttm_memory.h:48:
+	int (*do_shrink) (struct ttm_mem_shrink *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ttm_mem_shrink *' should also have an identifier name
#8628: FILE: include/drm/ttm/ttm_memory.h:48:
+	int (*do_shrink) (struct ttm_mem_shrink *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#8663: FILE: include/drm/ttm/ttm_memory.h:83:
+	spinlock_t lock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8664: FILE: include/drm/ttm/ttm_memory.h:84:
+	uint64_t emer_memory;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8665: FILE: include/drm/ttm/ttm_memory.h:85:
+	uint64_t max_memory;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8666: FILE: include/drm/ttm/ttm_memory.h:86:
+	uint64_t swap_limit;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8667: FILE: include/drm/ttm/ttm_memory.h:87:
+	uint64_t used_memory;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8668: FILE: include/drm/ttm/ttm_memory.h:88:
+	uint64_t used_total_memory;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8669: FILE: include/drm/ttm/ttm_memory.h:89:
+	uint64_t total_memory_swap_limit;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8670: FILE: include/drm/ttm/ttm_memory.h:90:
+	uint64_t max_total_memory;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8671: FILE: include/drm/ttm/ttm_memory.h:91:
+	uint64_t emer_total_memory;

WARNING:SPACING: Unnecessary space before function pointer arguments
#8682: FILE: include/drm/ttm/ttm_memory.h:102:
+				       int (*func) (struct ttm_mem_shrink *))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "glob->shrink"
#8701: FILE: include/drm/ttm/ttm_memory.h:121:
+	if (glob->shrink != NULL) {

WARNING:TYPO_SPELLING: 'registert' may be misspelled - perhaps 'registered'?
#8714: FILE: include/drm/ttm/ttm_memory.h:134:
+ * @shrink: A previously registert struct ttm_mem_shrink object.
                          ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8722: FILE: include/drm/ttm/ttm_memory.h:142:
+	BUG_ON(glob->shrink != shrink);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8727: FILE: include/drm/ttm/ttm_memory.h:147:
+extern int ttm_mem_global_init(struct ttm_mem_global *glob);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8728: FILE: include/drm/ttm/ttm_memory.h:148:
+extern void ttm_mem_global_release(struct ttm_mem_global *glob);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8729: FILE: include/drm/ttm/ttm_memory.h:149:
+extern int ttm_mem_global_alloc(struct ttm_mem_global *glob, uint64_t memory,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8731: FILE: include/drm/ttm/ttm_memory.h:151:
+extern void ttm_mem_global_free(struct ttm_mem_global *glob,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#8732: FILE: include/drm/ttm/ttm_memory.h:152:
+				uint64_t amount, bool himem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8733: FILE: include/drm/ttm/ttm_memory.h:153:
+extern size_t ttm_round_pot(size_t size);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8741: FILE: include/drm/ttm/ttm_object.h:1:
+/**************************************************************************

WARNING:TYPO_SPELLING: 'contol' may be misspelled - perhaps 'control'?
#8857: FILE: include/drm/ttm/ttm_object.h:117:
+ * access and refcounting, minimal access contol and hooks for unref actions.
                                           ^^^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#8866: FILE: include/drm/ttm/ttm_object.h:126:
+	void (*refcount_release) (struct ttm_base_object **base);

WARNING:SPACING: Unnecessary space before function pointer arguments
#8867: FILE: include/drm/ttm/ttm_object.h:127:
+	void (*ref_obj_release) (struct ttm_base_object *base,

WARNING:TYPO_SPELLING: 'applcations' may be misspelled - perhaps 'applications'?
#8876: FILE: include/drm/ttm/ttm_object.h:136:
+ * @shareable: This object is shareable with other applcations.
                                                    ^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8885: FILE: include/drm/ttm/ttm_object.h:145:
+extern int ttm_base_object_init(struct ttm_object_file *tfile,

WARNING:SPACING: Unnecessary space before function pointer arguments
#8889: FILE: include/drm/ttm/ttm_object.h:149:
+				void (*refcount_release) (struct ttm_base_object

WARNING:SPACING: Unnecessary space before function pointer arguments
#8891: FILE: include/drm/ttm/ttm_object.h:151:
+				void (*ref_obj_release) (struct ttm_base_object

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8907: FILE: include/drm/ttm/ttm_object.h:167:
+extern struct ttm_base_object *ttm_base_object_lookup(struct ttm_object_file

WARNING:TYPO_SPELLING: 'referncing' may be misspelled - perhaps 'referencing'?
#8913: FILE: include/drm/ttm/ttm_object.h:173:
+ * @p_base: Pointer to a pointer referncing a struct ttm_base_object.
                                  ^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8919: FILE: include/drm/ttm/ttm_object.h:179:
+extern void ttm_base_object_unref(struct ttm_base_object **p_base);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8940: FILE: include/drm/ttm/ttm_object.h:200:
+extern int ttm_ref_object_add(struct ttm_object_file *tfile,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8954: FILE: include/drm/ttm/ttm_object.h:214:
+extern int ttm_ref_object_base_unref(struct ttm_object_file *tfile,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8967: FILE: include/drm/ttm/ttm_object.h:227:
+extern struct ttm_object_file *ttm_object_file_init(struct ttm_object_device

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8982: FILE: include/drm/ttm/ttm_object.h:242:
+extern void ttm_object_file_release(struct ttm_object_file **p_tfile);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#8994: FILE: include/drm/ttm/ttm_object.h:254:
+    (struct ttm_mem_global *mem_glob, unsigned int hash_order);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9007: FILE: include/drm/ttm/ttm_object.h:267:
+extern void ttm_object_device_release(struct ttm_object_device **p_tdev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#9016: FILE: include/drm/ttm/ttm_placement_common.h:1:
+/**************************************************************************

CHECK:BIT_MACRO: Prefer using the BIT macro
#9065: FILE: include/drm/ttm/ttm_placement_common.h:50:
+#define TTM_PL_FLAG_SYSTEM      (1 << TTM_PL_SYSTEM)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9066: FILE: include/drm/ttm/ttm_placement_common.h:51:
+#define TTM_PL_FLAG_TT          (1 << TTM_PL_TT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9067: FILE: include/drm/ttm/ttm_placement_common.h:52:
+#define TTM_PL_FLAG_VRAM        (1 << TTM_PL_VRAM)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9068: FILE: include/drm/ttm/ttm_placement_common.h:53:
+#define TTM_PL_FLAG_PRIV0       (1 << TTM_PL_PRIV0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9069: FILE: include/drm/ttm/ttm_placement_common.h:54:
+#define TTM_PL_FLAG_PRIV1       (1 << TTM_PL_PRIV1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9070: FILE: include/drm/ttm/ttm_placement_common.h:55:
+#define TTM_PL_FLAG_PRIV2       (1 << TTM_PL_PRIV2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9071: FILE: include/drm/ttm/ttm_placement_common.h:56:
+#define TTM_PL_FLAG_PRIV3       (1 << TTM_PL_PRIV3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9072: FILE: include/drm/ttm/ttm_placement_common.h:57:
+#define TTM_PL_FLAG_PRIV4       (1 << TTM_PL_PRIV4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9073: FILE: include/drm/ttm/ttm_placement_common.h:58:
+#define TTM_PL_FLAG_PRIV5       (1 << TTM_PL_PRIV5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9074: FILE: include/drm/ttm/ttm_placement_common.h:59:
+#define TTM_PL_FLAG_SWAPPED     (1 << TTM_PL_SWAPPED)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9087: FILE: include/drm/ttm/ttm_placement_common.h:72:
+#define TTM_PL_FLAG_CACHED      (1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9088: FILE: include/drm/ttm/ttm_placement_common.h:73:
+#define TTM_PL_FLAG_UNCACHED    (1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9089: FILE: include/drm/ttm/ttm_placement_common.h:74:
+#define TTM_PL_FLAG_WC          (1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9090: FILE: include/drm/ttm/ttm_placement_common.h:75:
+#define TTM_PL_FLAG_SHARED      (1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9091: FILE: include/drm/ttm/ttm_placement_common.h:76:
+#define TTM_PL_FLAG_NO_EVICT    (1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9106: FILE: include/drm/ttm/ttm_placement_common.h:91:
+#define TTM_ACCESS_READ         (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9107: FILE: include/drm/ttm/ttm_placement_common.h:92:
+#define TTM_ACCESS_WRITE        (1 << 1)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#9116: FILE: include/drm/ttm/ttm_placement_user.h:1:
+/**************************************************************************

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#9177: FILE: include/drm/ttm/ttm_placement_user.h:62:
+	uint64_t size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9178: FILE: include/drm/ttm/ttm_placement_user.h:63:
+	uint32_t placement;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9179: FILE: include/drm/ttm/ttm_placement_user.h:64:
+	uint32_t page_alignment;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#9196: FILE: include/drm/ttm/ttm_placement_user.h:81:
+	uint64_t size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#9197: FILE: include/drm/ttm/ttm_placement_user.h:82:
+	uint64_t user_address;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9198: FILE: include/drm/ttm/ttm_placement_user.h:83:
+	uint32_t placement;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9199: FILE: include/drm/ttm/ttm_placement_user.h:84:
+	uint32_t page_alignment;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#9227: FILE: include/drm/ttm/ttm_placement_user.h:112:
+	uint64_t gpu_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#9228: FILE: include/drm/ttm/ttm_placement_user.h:113:
+	uint64_t bo_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#9229: FILE: include/drm/ttm/ttm_placement_user.h:114:
+	uint64_t map_handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9230: FILE: include/drm/ttm/ttm_placement_user.h:115:
+	uint32_t placement;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9231: FILE: include/drm/ttm/ttm_placement_user.h:116:
+	uint32_t handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9232: FILE: include/drm/ttm/ttm_placement_user.h:117:
+	uint32_t sync_object_arg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9233: FILE: include/drm/ttm/ttm_placement_user.h:118:
+	uint32_t pad64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9249: FILE: include/drm/ttm/ttm_placement_user.h:134:
+	uint32_t set_placement;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9250: FILE: include/drm/ttm/ttm_placement_user.h:135:
+	uint32_t clr_placement;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9251: FILE: include/drm/ttm/ttm_placement_user.h:136:
+	uint32_t handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9252: FILE: include/drm/ttm/ttm_placement_user.h:137:
+	uint32_t pad64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9264: FILE: include/drm/ttm/ttm_placement_user.h:149:
+	uint32_t handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9265: FILE: include/drm/ttm/ttm_placement_user.h:150:
+	uint32_t pad64;

CHECK:BIT_MACRO: Prefer using the BIT macro
#9286: FILE: include/drm/ttm/ttm_placement_user.h:171:
+#define TTM_PL_SYNCCPU_MODE_NO_BLOCK  (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9287: FILE: include/drm/ttm/ttm_placement_user.h:172:
+#define TTM_PL_SYNCCPU_MODE_TRYCACHED (1 << 3)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9304: FILE: include/drm/ttm/ttm_placement_user.h:189:
+	uint32_t handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9305: FILE: include/drm/ttm/ttm_placement_user.h:190:
+	uint32_t access_mode;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9310: FILE: include/drm/ttm/ttm_placement_user.h:195:
+	uint32_t pad64;

CHECK:BIT_MACRO: Prefer using the BIT macro
#9323: FILE: include/drm/ttm/ttm_placement_user.h:208:
+#define TTM_PL_WAITIDLE_MODE_LAZY     (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#9324: FILE: include/drm/ttm/ttm_placement_user.h:209:
+#define TTM_PL_WAITIDLE_MODE_NO_BLOCK (1 << 1)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9338: FILE: include/drm/ttm/ttm_placement_user.h:223:
+	uint32_t handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9339: FILE: include/drm/ttm/ttm_placement_user.h:224:
+	uint32_t mode;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#9381: FILE: include/drm/ttm/ttm_userobj_api.h:1:
+/**************************************************************************

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9428: FILE: include/drm/ttm/ttm_userobj_api.h:48:
+extern int ttm_pl_create_ioctl(struct ttm_object_file *tfile,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9431: FILE: include/drm/ttm/ttm_userobj_api.h:51:
+extern int ttm_pl_ub_create_ioctl(struct ttm_object_file *tfile,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9434: FILE: include/drm/ttm/ttm_userobj_api.h:54:
+extern int ttm_pl_reference_ioctl(struct ttm_object_file *tfile, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9435: FILE: include/drm/ttm/ttm_userobj_api.h:55:
+extern int ttm_pl_unref_ioctl(struct ttm_object_file *tfile, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9436: FILE: include/drm/ttm/ttm_userobj_api.h:56:
+extern int ttm_pl_synccpu_ioctl(struct ttm_object_file *tfile, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9437: FILE: include/drm/ttm/ttm_userobj_api.h:57:
+extern int ttm_pl_setstatus_ioctl(struct ttm_object_file *tfile,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9439: FILE: include/drm/ttm/ttm_userobj_api.h:59:
+extern int ttm_pl_waitidle_ioctl(struct ttm_object_file *tfile, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9440: FILE: include/drm/ttm/ttm_userobj_api.h:60:
+extern int ttm_fence_signaled_ioctl(struct ttm_object_file *tfile, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9441: FILE: include/drm/ttm/ttm_userobj_api.h:61:
+extern int ttm_fence_finish_ioctl(struct ttm_object_file *tfile, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9442: FILE: include/drm/ttm/ttm_userobj_api.h:62:
+extern int ttm_fence_unref_ioctl(struct ttm_object_file *tfile, void *data);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9447: FILE: include/drm/ttm/ttm_userobj_api.h:67:
+		      uint32_t fence_class,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9448: FILE: include/drm/ttm/ttm_userobj_api.h:68:
+		      uint32_t fence_types,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#9449: FILE: include/drm/ttm/ttm_userobj_api.h:69:
+		      uint32_t create_flags,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#9450: FILE: include/drm/ttm/ttm_userobj_api.h:70:
+		      struct ttm_fence_object **fence, uint32_t * user_handle);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9452: FILE: include/drm/ttm/ttm_userobj_api.h:72:
+extern struct ttm_buffer_object *ttm_buffer_object_lookup(struct ttm_object_file

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000151999.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 239 warnings, 412 checks, 9082 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000151999.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
