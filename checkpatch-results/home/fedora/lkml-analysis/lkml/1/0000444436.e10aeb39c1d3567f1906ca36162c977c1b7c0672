WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
diff -prauN linux-2.6.0-test11/fs/proc/array.c sched-2.6.0-test11-5/fs/proc/array.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: include/linux/binomial.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#111: FILE: include/linux/binomial.h:6:
+	unsigned priority, degree;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#115: FILE: include/linux/binomial.h:10:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct binomial **' should also have an identifier name
#116: FILE: include/linux/binomial.h:11:
+struct binomial *binomial_minimum(struct binomial **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct binomial **' should also have an identifier name
#117: FILE: include/linux/binomial.h:12:
+void binomial_union(struct binomial **, struct binomial **, struct binomial **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct binomial **' should also have an identifier name
#117: FILE: include/linux/binomial.h:12:
+void binomial_union(struct binomial **, struct binomial **, struct binomial **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct binomial **' should also have an identifier name
#117: FILE: include/linux/binomial.h:12:
+void binomial_union(struct binomial **, struct binomial **, struct binomial **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct binomial **' should also have an identifier name
#118: FILE: include/linux/binomial.h:13:
+void binomial_insert(struct binomial **, struct binomial *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct binomial *' should also have an identifier name
#118: FILE: include/linux/binomial.h:13:
+void binomial_insert(struct binomial **, struct binomial *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct binomial **' should also have an identifier name
#119: FILE: include/linux/binomial.h:14:
+struct binomial *binomial_extract_min(struct binomial **);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#120: FILE: include/linux/binomial.h:15:
+void binomial_decrease(struct binomial **, struct binomial *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct binomial **' should also have an identifier name
#120: FILE: include/linux/binomial.h:15:
+void binomial_decrease(struct binomial **, struct binomial *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct binomial *' should also have an identifier name
#120: FILE: include/linux/binomial.h:15:
+void binomial_decrease(struct binomial **, struct binomial *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#120: FILE: include/linux/binomial.h:15:
+void binomial_decrease(struct binomial **, struct binomial *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct binomial **' should also have an identifier name
#121: FILE: include/linux/binomial.h:16:
+void binomial_delete(struct binomial **, struct binomial *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct binomial *' should also have an identifier name
#121: FILE: include/linux/binomial.h:16:
+void binomial_delete(struct binomial **, struct binomial *);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#176: FILE: include/linux/sched.h:288:
+#define MAX_TS_PRIO		(40*NICE_QLEN)
                    		   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: include/linux/sched.h:341:
+^Iunsigned long quantum, ticks; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#350: FILE: kernel/fork.c:881:
+		BUG_ON(task_nice(p));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#424: FILE: kernel/sched/batch.c:1:
+#include <linux/sched.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: kernel/sched/batch.c:47:
+		list_move_tail(&task->sched_info.run_list,
+				&queue->queue[new_idx]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: kernel/sched/batch.c:52:
+		queue->base = find_first_circular_bit(queue->bitmap,
+							queue->base,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: kernel/sched/batch.c:72:
+	queue->base = find_first_circular_bit(queue->bitmap,
+						queue->base,

WARNING:LINE_SPACING: Missing a blank line after declarations
#503: FILE: kernel/sched/batch.c:80:
+	struct batch_queue *queue = (struct batch_queue *)__queue;
+	return queue->curr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#509: FILE: kernel/sched/batch.c:86:
+	struct batch_queue *queue = (struct batch_queue *)__queue;
+	queue->curr = task;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: kernel/sched/batch.c:95:
+	idx = find_first_circular_bit(queue->bitmap,
+					queue->base,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#520: FILE: kernel/sched/batch.c:97:
+	BUG_ON(idx >= MAX_BATCH_PRIO);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#521: FILE: kernel/sched/batch.c:98:
+	BUG_ON(list_empty(&queue->queue[idx]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#544: FILE: kernel/sched/batch.c:121:
+	struct batch_queue *queue = (struct batch_queue *)__queue;
+	list_del(&task->sched_info.run_list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#557: FILE: kernel/sched/batch.c:134:
+	struct batch_queue *queue = (struct batch_queue *)__queue;
+	if (!queue->curr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: kernel/sched/batch.c:144:
+	struct batch_queue *queue = (struct batch_queue *)__queue;
+	return queue->tasks;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#582: FILE: kernel/sched/batch.c:159:
+	BUG_ON(prio < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#583: FILE: kernel/sched/batch.c:160:
+	BUG_ON(prio >= MAX_BATCH_PRIO);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#618: FILE: kernel/sched/idle.c:1:
+#include <linux/sched.h>

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#625: FILE: kernel/sched/idle.c:8:
+static DEFINE_PER_CPU(task_t *, idle_tasks) = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#635: FILE: kernel/sched/idle.c:18:
+	task_t **idle = (task_t **)queue;
+	return !!(*idle);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#721: FILE: kernel/sched/queue.h:1:
+#define SCHED_POLICY_RT		0

ERROR:CODE_INDENT: code indent should use tabs where possible
#742: FILE: kernel/sched/queue.h:22:
+        spinlock_t lock;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#742: FILE: kernel/sched/queue.h:22:
+        spinlock_t lock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#742: FILE: kernel/sched/queue.h:22:
+        spinlock_t lock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#747: FILE: kernel/sched/queue.h:27:
+        unsigned long nr_running, nr_switches, nr_uninterruptible;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: kernel/sched/queue.h:27:
+        unsigned long nr_running, nr_switches, nr_uninterruptible;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#748: FILE: kernel/sched/queue.h:28:
+        struct mm_struct *prev_mm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: kernel/sched/queue.h:28:
+        struct mm_struct *prev_mm;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#749: FILE: kernel/sched/queue.h:29:
+        int prev_cpu_load[NR_CPUS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: kernel/sched/queue.h:29:
+        int prev_cpu_load[NR_CPUS];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: kernel/sched/queue.h:31:
+        atomic_t *node_nr_running;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: kernel/sched/queue.h:31:
+        atomic_t *node_nr_running;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#752: FILE: kernel/sched/queue.h:32:
+        int prev_node_load[MAX_NUMNODES];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#752: FILE: kernel/sched/queue.h:32:
+        int prev_node_load[MAX_NUMNODES];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#754: FILE: kernel/sched/queue.h:34:
+        task_t *migration_thread;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#754: FILE: kernel/sched/queue.h:34:
+        task_t *migration_thread;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#755: FILE: kernel/sched/queue.h:35:
+        struct list_head migration_queue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#755: FILE: kernel/sched/queue.h:35:
+        struct list_head migration_queue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#757: FILE: kernel/sched/queue.h:37:
+        atomic_t nr_iowait;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: kernel/sched/queue.h:37:
+        atomic_t nr_iowait;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#760: FILE: kernel/sched/queue.h:40:
+typedef struct runqueue runqueue_t;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct policy *' should also have an identifier name
#763: FILE: kernel/sched/queue.h:43:
+	int (*init)(struct policy *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#763: FILE: kernel/sched/queue.h:43:
+	int (*init)(struct policy *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct policy *' should also have an identifier name
#764: FILE: kernel/sched/queue.h:44:
+	void (*fini)(struct policy *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#764: FILE: kernel/sched/queue.h:44:
+	void (*fini)(struct policy *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#765: FILE: kernel/sched/queue.h:45:
+	task_t *(*curr)(struct queue *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#766: FILE: kernel/sched/queue.h:46:
+	void (*set_curr)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#766: FILE: kernel/sched/queue.h:46:
+	void (*set_curr)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#767: FILE: kernel/sched/queue.h:47:
+	task_t *(*best)(struct queue *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#768: FILE: kernel/sched/queue.h:48:
+	int (*tick)(struct queue *, task_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#768: FILE: kernel/sched/queue.h:48:
+	int (*tick)(struct queue *, task_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#768: FILE: kernel/sched/queue.h:48:
+	int (*tick)(struct queue *, task_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#768: FILE: kernel/sched/queue.h:48:
+	int (*tick)(struct queue *, task_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#769: FILE: kernel/sched/queue.h:49:
+	int (*tasks)(struct queue *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#770: FILE: kernel/sched/queue.h:50:
+	void (*enqueue)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#770: FILE: kernel/sched/queue.h:50:
+	void (*enqueue)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#771: FILE: kernel/sched/queue.h:51:
+	void (*dequeue)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#771: FILE: kernel/sched/queue.h:51:
+	void (*dequeue)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#772: FILE: kernel/sched/queue.h:52:
+	void (*start_wait)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#772: FILE: kernel/sched/queue.h:52:
+	void (*start_wait)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#773: FILE: kernel/sched/queue.h:53:
+	void (*stop_wait)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#773: FILE: kernel/sched/queue.h:53:
+	void (*stop_wait)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#774: FILE: kernel/sched/queue.h:54:
+	void (*sleep)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#774: FILE: kernel/sched/queue.h:54:
+	void (*sleep)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#775: FILE: kernel/sched/queue.h:55:
+	void (*wake)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#775: FILE: kernel/sched/queue.h:55:
+	void (*wake)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#776: FILE: kernel/sched/queue.h:56:
+	int (*preempt)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#776: FILE: kernel/sched/queue.h:56:
+	int (*preempt)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#777: FILE: kernel/sched/queue.h:57:
+	void (*yield)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#777: FILE: kernel/sched/queue.h:57:
+	void (*yield)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#778: FILE: kernel/sched/queue.h:58:
+	int (*prio)(task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#779: FILE: kernel/sched/queue.h:59:
+	void (*setprio)(task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#779: FILE: kernel/sched/queue.h:59:
+	void (*setprio)(task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#780: FILE: kernel/sched/queue.h:60:
+	int (*nice)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#780: FILE: kernel/sched/queue.h:60:
+	int (*nice)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#781: FILE: kernel/sched/queue.h:61:
+	void (*renice)(struct queue *, task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#781: FILE: kernel/sched/queue.h:61:
+	void (*renice)(struct queue *, task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#781: FILE: kernel/sched/queue.h:61:
+	void (*renice)(struct queue *, task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#782: FILE: kernel/sched/queue.h:62:
+	unsigned long (*timeslice)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#782: FILE: kernel/sched/queue.h:62:
+	unsigned long (*timeslice)(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#783: FILE: kernel/sched/queue.h:63:
+	void (*set_timeslice)(struct queue *, task_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#783: FILE: kernel/sched/queue.h:63:
+	void (*set_timeslice)(struct queue *, task_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#783: FILE: kernel/sched/queue.h:63:
+	void (*set_timeslice)(struct queue *, task_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#788: FILE: kernel/sched/queue.h:68:
+int find_first_circular_bit(unsigned long *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#788: FILE: kernel/sched/queue.h:68:
+int find_first_circular_bit(unsigned long *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#788: FILE: kernel/sched/queue.h:68:
+int find_first_circular_bit(unsigned long *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#789: FILE: kernel/sched/queue.h:69:
+void queue_nop(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#789: FILE: kernel/sched/queue.h:69:
+void queue_nop(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#790: FILE: kernel/sched/queue.h:70:
+void nop_renice(struct queue *, task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#790: FILE: kernel/sched/queue.h:70:
+void nop_renice(struct queue *, task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#790: FILE: kernel/sched/queue.h:70:
+void nop_renice(struct queue *, task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct policy *' should also have an identifier name
#791: FILE: kernel/sched/queue.h:71:
+void nop_fini(struct policy *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#791: FILE: kernel/sched/queue.h:71:
+void nop_fini(struct policy *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#792: FILE: kernel/sched/queue.h:72:
+unsigned long nop_timeslice(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#792: FILE: kernel/sched/queue.h:72:
+unsigned long nop_timeslice(struct queue *, task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct queue *' should also have an identifier name
#793: FILE: kernel/sched/queue.h:73:
+void nop_set_timeslice(struct queue *, task_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#793: FILE: kernel/sched/queue.h:73:
+void nop_set_timeslice(struct queue *, task_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#793: FILE: kernel/sched/queue.h:73:
+void nop_set_timeslice(struct queue *, task_t *, unsigned long);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#802: FILE: kernel/sched/queue.h:82:
+		printk("invalid policy 0x%lx\n", __idx__);		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#803: FILE: kernel/sched/queue.h:83:
+		BUG();							\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#807: FILE: kernel/sched/queue.h:87:
+#define check_task_policy(task)						\
+do {									\
+	__check_task_policy((task)->sched_info.policy);			\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'policy' - possible side-effects?
#812: FILE: kernel/sched/queue.h:92:
+#define check_policy(policy)						\
+do {									\
+	BUG_ON((policy) != &rt_policy &&				\
+		(policy) != &ts_policy &&				\
+		(policy) != &batch_policy &&				\
+		(policy) != &idle_policy);				\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#812: FILE: kernel/sched/queue.h:92:
+#define check_policy(policy)						\
+do {									\
+	BUG_ON((policy) != &rt_policy &&				\
+		(policy) != &ts_policy &&				\
+		(policy) != &batch_policy &&				\
+		(policy) != &idle_policy);				\
+} while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#814: FILE: kernel/sched/queue.h:94:
+	BUG_ON((policy) != &rt_policy &&				\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#829: FILE: kernel/sched/rt.c:1:
+#include <linux/sched.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'task' - possible side-effects?
#837: FILE: kernel/sched/rt.c:9:
+#define check_rt_policy(task)						\
+do {									\
+	BUG_ON((task)->sched_info.policy != SCHED_POLICY_RT);		\
+	BUG_ON((task)->sched_info.cl_data.rt.rt_policy != RT_POLICY_RR	\
+			&&						\
+	      (task)->sched_info.cl_data.rt.rt_policy!=RT_POLICY_FIFO);	\
+	BUG_ON((task)->sched_info.cl_data.rt.prio < 0);			\
+	BUG_ON((task)->sched_info.cl_data.rt.prio >= MAX_RT_PRIO);	\
+} while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#839: FILE: kernel/sched/rt.c:11:
+	BUG_ON((task)->sched_info.policy != SCHED_POLICY_RT);		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#840: FILE: kernel/sched/rt.c:12:
+	BUG_ON((task)->sched_info.cl_data.rt.rt_policy != RT_POLICY_RR	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#841: FILE: kernel/sched/rt.c:13:
+	BUG_ON((task)->sched_info.cl_data.rt.rt_policy != RT_POLICY_RR	\
+			&&						\

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#842: FILE: kernel/sched/rt.c:14:
+	      (task)->sched_info.cl_data.rt.rt_policy!=RT_POLICY_FIFO);	\
 	                                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#843: FILE: kernel/sched/rt.c:15:
+	BUG_ON((task)->sched_info.cl_data.rt.prio < 0);			\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#844: FILE: kernel/sched/rt.c:16:
+	BUG_ON((task)->sched_info.cl_data.rt.prio >= MAX_RT_PRIO);	\

WARNING:LINE_SPACING: Missing a blank line after declarations
#873: FILE: kernel/sched/rt.c:45:
+	struct rt_queue *queue = (struct rt_queue *)__queue;
+	check_rt_policy(task);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: kernel/sched/rt.c:50:
+	list_add_tail(&task->sched_info.run_list,
+			&queue->queue[task->sched_info.cl_data.rt.prio]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#885: FILE: kernel/sched/rt.c:57:
+	struct cpu_usage_stat *cpustat = &kstat_this_cpu.cpustat;
+	check_rt_policy(task);

WARNING:LINE_SPACING: Missing a blank line after declarations
#904: FILE: kernel/sched/rt.c:76:
+	task_t *task = queue->curr;
+	check_rt_policy(task);

WARNING:LINE_SPACING: Missing a blank line after declarations
#911: FILE: kernel/sched/rt.c:83:
+	struct rt_queue *queue = (struct rt_queue *)__queue;
+	queue->curr = task;

WARNING:LINE_SPACING: Missing a blank line after declarations
#920: FILE: kernel/sched/rt.c:92:
+	int idx;
+	idx = find_first_bit(queue->bitmap, MAX_RT_PRIO);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#921: FILE: kernel/sched/rt.c:93:
+	BUG_ON(idx >= MAX_RT_PRIO);

WARNING:LINE_SPACING: Missing a blank line after declarations
#930: FILE: kernel/sched/rt.c:102:
+	struct rt_queue *queue = (struct rt_queue *)__queue;
+	check_rt_policy(task);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: kernel/sched/rt.c:106:
+	list_add_tail(&task->sched_info.run_list,
+			&queue->queue[task->sched_info.cl_data.rt.prio]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#944: FILE: kernel/sched/rt.c:116:
+	struct rt_queue *queue = (struct rt_queue *)__queue;
+	check_rt_policy(task);

WARNING:LINE_SPACING: Missing a blank line after declarations
#959: FILE: kernel/sched/rt.c:131:
+	struct rt_queue *queue = (struct rt_queue *)__queue;
+	check_rt_policy(task);

WARNING:LINE_SPACING: Missing a blank line after declarations
#970: FILE: kernel/sched/rt.c:142:
+	struct rt_queue *queue = (struct rt_queue *)__queue;
+	return queue->tasks;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#999: FILE: kernel/sched/rt.c:171:
+	BUG_ON(prio < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1000: FILE: kernel/sched/rt.c:172:
+	BUG_ON(prio >= MAX_RT_PRIO);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1041: FILE: kernel/sched/ts.c:1:
+#include <linux/sched.h>

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1049: FILE: kernel/sched/ts.c:9:
+#define check_ts_policy(task)						\
+do {									\
+	BUG_ON((task)->sched_info.policy != SCHED_POLICY_TS);		\
+} while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1051: FILE: kernel/sched/ts.c:11:
+	BUG_ON((task)->sched_info.policy != SCHED_POLICY_TS);		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__queue__' - possible side-effects?
#1054: FILE: kernel/sched/ts.c:14:
+#define check_nice(__queue__)						\
+({									\
+	int __k__, __count__ = 0;					\
+	if ((__queue__)->tasks < 0) {					\
+		printk("negative nice task count %d\n", 		\
+			(__queue__)->tasks);				\
+		BUG();							\
+	}								\
+	for (__k__ = 0; __k__ < NICE_QLEN; ++__k__) {			\
+		task_t *__task__;					\
+		if (list_empty(&(__queue__)->queue[__k__])) {		\
+			if (test_bit(__k__, (__queue__)->bitmap)) {	\
+				printk("wrong nice bit set\n");		\
+				BUG();					\
+			}						\
+		} else {						\
+			if (!test_bit(__k__, (__queue__)->bitmap)) {	\
+				printk("wrong nice bit clear\n");	\
+				BUG();					\
+			}						\
+		}							\
+		list_for_each_entry(__task__,				\
+					&(__queue__)->queue[__k__],	\
+					sched_info.run_list) {		\
+			check_ts_policy(__task__);			\
+			if (__task__->sched_info.idx != __k__) {	\
+				printk("nice index mismatch\n");	\
+				BUG();					\
+			}						\
+			++__count__;					\
+		}							\
+	}								\
+	if ((__queue__)->tasks != __count__) {				\
+		printk("wrong nice task count\n");			\
+		printk("expected %d, got %d\n",				\
+			(__queue__)->tasks,				\
+			__count__);					\
+		BUG();							\
+	}								\
+	__count__;							\
+})

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1058: FILE: kernel/sched/ts.c:18:
+^I^Iprintk("negative nice task count %d\n", ^I^I\$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1058: FILE: kernel/sched/ts.c:18:
+		printk("negative nice task count %d\n", 		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1060: FILE: kernel/sched/ts.c:20:
+		BUG();							\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1066: FILE: kernel/sched/ts.c:26:
+				printk("wrong nice bit set\n");		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1067: FILE: kernel/sched/ts.c:27:
+				BUG();					\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1071: FILE: kernel/sched/ts.c:31:
+				printk("wrong nice bit clear\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1072: FILE: kernel/sched/ts.c:32:
+				BUG();					\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1080: FILE: kernel/sched/ts.c:40:
+				printk("nice index mismatch\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1081: FILE: kernel/sched/ts.c:41:
+				BUG();					\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1087: FILE: kernel/sched/ts.c:47:
+		printk("wrong nice task count\n");			\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1088: FILE: kernel/sched/ts.c:48:
+		printk("expected %d, got %d\n",				\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1091: FILE: kernel/sched/ts.c:51:
+		BUG();							\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__queue' - possible side-effects?
#1096: FILE: kernel/sched/ts.c:56:
+#define check_queue(__queue)						\
+do {									\
+	int __k, __count = 0;						\
+	if ((__queue)->tasks < 0) {					\
+		printk("negative queue task count %d\n", 		\
+			(__queue)->tasks);				\
+		BUG();							\
+	}								\
+	for (__k = 0; __k < 40; ++__k) {				\
+		struct nice_queue *__nice;				\
+		if (list_empty(&(__queue)->nices[__k])) {		\
+			if (test_bit(__k, (__queue)->bitmap)) {		\
+				printk("wrong queue bit set\n");	\
+				BUG();					\
+			}						\
+		} else {						\
+			if (!test_bit(__k, (__queue)->bitmap)) {	\
+				printk("wrong queue bit clear\n");	\
+				BUG();					\
+			}						\
+		}							\
+		list_for_each_entry(__nice,				\
+					&(__queue)->nices[__k],		\
+					list) {				\
+			__count += check_nice(__nice);			\
+			if (__nice->idx != __k) {			\
+				printk("queue index mismatch\n");	\
+				BUG();					\
+			}						\
+		}							\
+	}								\
+	if ((__queue)->tasks != __count) {				\
+		printk("wrong queue task count\n");			\
+		printk("expected %d, got %d\n",				\
+			(__queue)->tasks,				\
+			__count);					\
+		BUG();							\
+	}								\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1100: FILE: kernel/sched/ts.c:60:
+^I^Iprintk("negative queue task count %d\n", ^I^I\$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1100: FILE: kernel/sched/ts.c:60:
+		printk("negative queue task count %d\n", 		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1102: FILE: kernel/sched/ts.c:62:
+		BUG();							\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1108: FILE: kernel/sched/ts.c:68:
+				printk("wrong queue bit set\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1109: FILE: kernel/sched/ts.c:69:
+				BUG();					\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1113: FILE: kernel/sched/ts.c:73:
+				printk("wrong queue bit clear\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1114: FILE: kernel/sched/ts.c:74:
+				BUG();					\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1122: FILE: kernel/sched/ts.c:82:
+				printk("queue index mismatch\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1123: FILE: kernel/sched/ts.c:83:
+				BUG();					\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1128: FILE: kernel/sched/ts.c:88:
+		printk("wrong queue task count\n");			\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1129: FILE: kernel/sched/ts.c:89:
+		printk("expected %d, got %d\n",				\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1132: FILE: kernel/sched/ts.c:92:
+		BUG();							\

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1187: FILE: kernel/sched/ts.c:147:
+	for (k = 0; k < NICE_QLEN; ++k) {
+		INIT_LIST_HEAD(&queue->queue[k]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1211: FILE: kernel/sched/ts.c:171:
+	u64 frac_cpu = task->sched_info.cl_data.ts.frac_cpu;
+	frac_cpu *= (u64)NICE_QLEN;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1228: FILE: kernel/sched/ts.c:188:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1239: FILE: kernel/sched/ts.c:199:
+	BUG_ON(!deadline);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1240: FILE: kernel/sched/ts.c:200:
+	BUG_ON(queue->base <= new_idx && new_idx <= idx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1241: FILE: kernel/sched/ts.c:201:
+	BUG_ON(idx < queue->base && queue->base <= new_idx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1242: FILE: kernel/sched/ts.c:202:
+	BUG_ON(new_idx <= idx && idx < queue->base);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1244: FILE: kernel/sched/ts.c:204:
+		printk("FUCKUP: pid = %d, tdl = %d, dl = %d, idx = %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1245: FILE: kernel/sched/ts.c:205:
+		printk("FUCKUP: pid = %d, tdl = %d, dl = %d, idx = %d, "
+				"base = %d, diff = %d, fcpu = 0x%lx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1253: FILE: kernel/sched/ts.c:213:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1262: FILE: kernel/sched/ts.c:222:
+		BUG_ON(idxdiff != NICE_QLEN - 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1263: FILE: kernel/sched/ts.c:223:
+		BUG_ON(deadline);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1274: FILE: kernel/sched/ts.c:234:
+		BUG_ON(!list_empty(&queue->queue[new_idx]));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1278: FILE: kernel/sched/ts.c:238:
+	list_move_tail(&task->sched_info.run_list,
+			&queue->queue[new_idx]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1281: FILE: kernel/sched/ts.c:241:
+	if (!list_empty(&queue->queue[idx]))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1283: FILE: kernel/sched/ts.c:243:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1285: FILE: kernel/sched/ts.c:245:
+		int k, w, m = NICE_QLEN % BITS_PER_LONG;
+		BUG_ON(!test_bit(idx, queue->bitmap));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1285: FILE: kernel/sched/ts.c:245:
+		BUG_ON(!test_bit(idx, queue->bitmap));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1288: FILE: kernel/sched/ts.c:248:
+		for (w = 0, k = 0; k < NICE_QLEN/BITS_PER_LONG; ++k)
 		                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1303: FILE: kernel/sched/ts.c:263:
+	int idx = task->sched_info.idx;
+	BUG_ON(!task_queued(task));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1303: FILE: kernel/sched/ts.c:263:
+	BUG_ON(!task_queued(task));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1304: FILE: kernel/sched/ts.c:264:
+	BUG_ON(task != queue->curr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1305: FILE: kernel/sched/ts.c:265:
+	BUG_ON(!test_bit(idx, queue->bitmap));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1306: FILE: kernel/sched/ts.c:266:
+	BUG_ON(list_empty(&queue->queue[idx]));

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#1323: FILE: kernel/sched/ts.c:283:
+		task_t *curr, *sav;
 		               ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1330: FILE: kernel/sched/ts.c:290:
+#if 1

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#1331: FILE: kernel/sched/ts.c:291:
+		list_for_each_entry_safe(curr, sav, &queue->queue[new_idx], sched_info.run_list) {
 		                               ^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1336: FILE: kernel/sched/ts.c:296:
+				list_move(&victim->sched_info.run_list,
+						curr->sched_info.run_list.prev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1342: FILE: kernel/sched/ts.c:302:
+			list_move_tail(&victim->sched_info.run_list,
+					&queue->queue[new_idx]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1346: FILE: kernel/sched/ts.c:306:
+		BUG_ON(list_empty(&queue->queue[idx]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1356: FILE: kernel/sched/ts.c:316:
+		int idxdiff = (idx - queue->base + NICE_QLEN) % NICE_QLEN;
+		check_nice(queue);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1358: FILE: kernel/sched/ts.c:318:
+		BUG_ON(!test_bit(idx, queue->bitmap));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1359: FILE: kernel/sched/ts.c:319:
+		BUG_ON(list_empty(&queue->queue[idx]));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1360: FILE: kernel/sched/ts.c:320:
+		if (queue->expired)
[...]
+		else if (idxdiff == NICE_QLEN - 1)
[...]
+		else {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1364: FILE: kernel/sched/ts.c:324:
+			list_move_tail(&task->sched_info.run_list,
+					&queue->queue[idx]);

CHECK:BRACES: Unbalanced braces around else statement
#1365: FILE: kernel/sched/ts.c:325:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1367: FILE: kernel/sched/ts.c:327:
+			int new_idx = (idx + 1) % NICE_QLEN;
+			list_del(&task->sched_info.run_list);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1369: FILE: kernel/sched/ts.c:329:
+				BUG_ON(!test_bit(idx, queue->bitmap));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1373: FILE: kernel/sched/ts.c:333:
+				BUG_ON(!list_empty(&queue->queue[new_idx]));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1378: FILE: kernel/sched/ts.c:338:
+			list_add(&task->sched_info.run_list,
+					&queue->queue[new_idx]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1406: FILE: kernel/sched/ts.c:366:
+	BUG_ON(!deadline);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1407: FILE: kernel/sched/ts.c:367:
+	BUG_ON(queue->base <= new_idx && new_idx <= idx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1408: FILE: kernel/sched/ts.c:368:
+	BUG_ON(idx < queue->base && queue->base <= new_idx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1409: FILE: kernel/sched/ts.c:369:
+	BUG_ON(new_idx <= idx && idx < queue->base);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1411: FILE: kernel/sched/ts.c:371:
+		BUG_ON(!list_empty(&queue->nices[new_idx]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1418: FILE: kernel/sched/ts.c:378:
+		BUG_ON(!test_bit(idx, queue->bitmap));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1435: FILE: kernel/sched/ts.c:395:
+	BUG_ON(!nice);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1436: FILE: kernel/sched/ts.c:396:
+	BUG_ON(nice_idx != task->sched_info.cl_data.ts.nice);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1437: FILE: kernel/sched/ts.c:397:
+	BUG_ON(!test_bit(nice->idx, queue->bitmap));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1438: FILE: kernel/sched/ts.c:398:
+	BUG_ON(list_empty(&queue->nices[nice->idx]));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1442: FILE: kernel/sched/ts.c:402:
+	if (delta)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1444: FILE: kernel/sched/ts.c:404:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1451: FILE: kernel/sched/ts.c:411:
+		u64 frac_cpu;
+		frac_cpu = (u64)task->sched_info.cl_data.ts.sample_ticks << 32;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1453: FILE: kernel/sched/ts.c:413:
+		frac_cpu = 2*frac_cpu + task->sched_info.cl_data.ts.frac_cpu;
 		            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1464: FILE: kernel/sched/ts.c:424:
+	if (queue->quantum > nice_quantum) {
[...]
+	} else if (queue->quantum)
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1486: FILE: kernel/sched/ts.c:446:
+		BUG_ON(!list_empty(&queue->queue[new_idx]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1495: FILE: kernel/sched/ts.c:455:
+		BUG_ON(!test_bit(idx, queue->bitmap));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1499: FILE: kernel/sched/ts.c:459:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#1527: FILE: kernel/sched/ts.c:487:
+		int idx, new_idx = (queue->base + 40 - 1) % 40;
+		idx = nice->idx;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1529: FILE: kernel/sched/ts.c:489:
+			BUG_ON(!list_empty(&queue->nices[new_idx]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1534: FILE: kernel/sched/ts.c:494:
+			BUG_ON(!test_bit(idx, queue->bitmap));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1539: FILE: kernel/sched/ts.c:499:
+		queue->base = find_first_circular_bit(queue->bitmap,
+							queue->base,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1541: FILE: kernel/sched/ts.c:501:
+		BUG_ON(queue->base >= 40);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1542: FILE: kernel/sched/ts.c:502:
+		BUG_ON(!test_bit(queue->base, queue->bitmap));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1553: FILE: kernel/sched/ts.c:513:
+	task_t *task = queue->curr->curr;
+	check_queue(queue);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1563: FILE: kernel/sched/ts.c:523:
+	struct nice_queue *nice;
+	check_queue(queue);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1581: FILE: kernel/sched/ts.c:541:
+	BUG_ON(list_empty(&queue->queue[idx]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1582: FILE: kernel/sched/ts.c:542:
+	BUG_ON(!test_bit(idx, queue->bitmap));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1592: FILE: kernel/sched/ts.c:552:
+	int idx = find_first_circular_bit(queue->bitmap, queue->base, 40);
+	check_queue(queue);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1595: FILE: kernel/sched/ts.c:555:
+	BUG_ON(list_empty(&queue->nices[idx]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1596: FILE: kernel/sched/ts.c:556:
+	BUG_ON(!test_bit(idx, queue->bitmap));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1604: FILE: kernel/sched/ts.c:564:
+	struct nice_queue *nice = ts_best_nice(queue);
+	return nice ? nice_best(nice) : NULL;

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#1609: FILE: kernel/sched/ts.c:569:
+	task_t *curr, *sav;
 	               ^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1611: FILE: kernel/sched/ts.c:571:
+	int queued = 0, idx, deadline, base, idxdiff;
+	check_nice(queue);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1619: FILE: kernel/sched/ts.c:579:
+		BUG_ON(!list_empty(&queue->queue[idx]));

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1623: FILE: kernel/sched/ts.c:583:
+#if 1

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#1625: FILE: kernel/sched/ts.c:585:
+	list_for_each_entry_safe(curr, sav, &queue->queue[idx], sched_info.run_list) {
 	                               ^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1629: FILE: kernel/sched/ts.c:589:
+			list_add(&task->sched_info.run_list,
+					curr->sched_info.run_list.prev);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1643: FILE: kernel/sched/ts.c:603:
+	if (queue->tasks)
[...]
+	else {
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1644: FILE: kernel/sched/ts.c:604:
+		BUG_ON(!queue->curr);

CHECK:BRACES: Unbalanced braces around else statement
#1645: FILE: kernel/sched/ts.c:605:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1646: FILE: kernel/sched/ts.c:606:
+		BUG_ON(queue->curr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1664: FILE: kernel/sched/ts.c:624:
+		int idx = (queue->base + task->sched_info.cl_data.ts.nice) % 40;
+		if (!test_bit(idx, queue->bitmap)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1665: FILE: kernel/sched/ts.c:625:
+			BUG_ON(!list_empty(&queue->nices[idx]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1686: FILE: kernel/sched/ts.c:646:
+		BUG_ON(!test_bit(task->sched_info.idx, queue->bitmap));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1692: FILE: kernel/sched/ts.c:652:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1706: FILE: kernel/sched/ts.c:666:
+	BUG_ON(!queue->tasks);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1716: FILE: kernel/sched/ts.c:676:
+			BUG_ON(!test_bit(nice->idx, queue->bitmap));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1732: FILE: kernel/sched/ts.c:692:
+	struct ts_queue *queue = (struct ts_queue *)__queue;
+	check_queue(queue);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1739: FILE: kernel/sched/ts.c:699:
+	int nice = task->sched_info.cl_data.ts.nice - 20;
+	check_ts_policy(task);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1740: FILE: kernel/sched/ts.c:700:
+	BUG_ON(nice < -20);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1741: FILE: kernel/sched/ts.c:701:
+	BUG_ON(nice >= 20);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1749: FILE: kernel/sched/ts.c:709:
+	BUG_ON(nice < -20);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1750: FILE: kernel/sched/ts.c:710:
+	BUG_ON(nice >= 20);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1757: FILE: kernel/sched/ts.c:717:
+	if (!task_queued(task))
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1759: FILE: kernel/sched/ts.c:719:
+		return task_deadline(task);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1759: FILE: kernel/sched/ts.c:719:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1761: FILE: kernel/sched/ts.c:721:
+		int prio = task->sched_info.idx - nice->base;
+		return prio < 0 ? prio + NICE_QLEN : prio;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1767: FILE: kernel/sched/ts.c:727:
+	if (list_empty(&nice->list))
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1769: FILE: kernel/sched/ts.c:729:
+		return (int)(nice - ts->nice_levels);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1769: FILE: kernel/sched/ts.c:729:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1771: FILE: kernel/sched/ts.c:731:
+		int prio = nice->idx - ts->base;
+		return prio < 0 ? prio + 40 : prio;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1787: FILE: kernel/sched/ts.c:747:
+	return 40*ts_nice_prio(ts, nice) + nice_task_prio(nice, task);
 	         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1815: FILE: kernel/sched/ts.c:775:
+	if (!task_queued(task) || !queue->curr)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1817: FILE: kernel/sched/ts.c:777:
+		return 1;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1817: FILE: kernel/sched/ts.c:777:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1819: FILE: kernel/sched/ts.c:779:
+		int delta_t, delta_q;
+		delta_t = (task->sched_info.idx - queue->base + NICE_QLEN)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1886: FILE: kernel/sched/util.c:1:
+#include <linux/sched.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#1895: FILE: kernel/sched/util.c:10:
+	int bit = find_next_bit(addr, end, start);
+	if (bit < end)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2130: FILE: kernel/sched.c:71:
+#define rq_curr(rq)		(rq)->__curr

WARNING:LINE_SPACING: Missing a blank line after declarations
#2137: FILE: kernel/sched.c:78:
+	struct policy *policy;
+	idx = task->sched_info.policy;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2151: FILE: kernel/sched.c:92:
+	BUG_ON(!task);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2152: FILE: kernel/sched.c:93:
+	BUG_ON((unsigned long)task < PAGE_OFFSET);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2163: FILE: kernel/sched.c:104:
+	struct policy *policy = task_policy(task);
+	return policy->ops->nice(policy->queue, task);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2177: FILE: kernel/sched.c:118:
+	if (rq_curr(rq)->sched_info.policy != task->sched_info.policy)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2179: FILE: kernel/sched.c:120:
+		return task->sched_info.policy < rq_curr(rq)->sched_info.policy;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2179: FILE: kernel/sched.c:120:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2181: FILE: kernel/sched.c:122:
+		struct policy *policy = rq_policy(rq);
+		return policy->ops->preempt(policy->queue, task);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2213: FILE: kernel/sched.c:232:
+	struct policy *policy = task_policy(task);
+	BUG_ON(!task_queued(task));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2213: FILE: kernel/sched.c:232:
+	BUG_ON(!task_queued(task));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2216: FILE: kernel/sched.c:235:
+		BUG_ON(!test_bit(task->sched_info.policy, &rq->policy_bitmap));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2261: FILE: kernel/sched.c:244:
+	struct policy *policy = task_policy(task);
+	BUG_ON(task_queued(task));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2261: FILE: kernel/sched.c:244:
+	BUG_ON(task_queued(task));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2263: FILE: kernel/sched.c:246:
+		BUG_ON(test_bit(task->sched_info.policy, &rq->policy_bitmap));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2394: FILE: kernel/sched.c:271:
+	struct policy *policy = task_policy(task);
+	policy->ops->wake(policy->queue, task);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2764: FILE: kernel/sched.c:1092:
+	BUG_ON(!rq->policy_bitmap);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2862: FILE: kernel/sched.c:1158:
+	BUG_ON(!next);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2908: FILE: kernel/sched.c:1438:
+			printk("no change in nice, set_user_nice() nops!\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#2969: FILE: kernel/sched.c:1518:
+	struct policy *policy = task_policy(task);
+	return policy->ops->prio(task);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3005: FILE: kernel/sched.c:1551:
+
+

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#3017: FILE: kernel/sched.c:1563:
+	switch (task->sched_info.policy) {
+		case SCHED_POLICY_RT:
[...]
+		case SCHED_POLICY_TS:
[...]
+		case SCHED_POLICY_BATCH:
[...]
+		case SCHED_POLICY_IDLE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3031: FILE: kernel/sched.c:1577:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3040: FILE: kernel/sched.c:1586:
+	BUG_ON(task_queued(task));

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#3041: FILE: kernel/sched.c:1587:
+	switch (policy) {
+		case SCHED_FIFO:
[...]
+		case SCHED_RR:
[...]
+		case SCHED_NORMAL:
[...]
+		case SCHED_BATCH:
[...]
+		case SCHED_IDLE:
[...]
+		default:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3060: FILE: kernel/sched.c:1606:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3250: FILE: kernel/sched.c:2183:
+	BUG_ON(policy != task_policy(idle));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3251: FILE: kernel/sched.c:2184:
+	printk("deactivating, have %d tasks\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3252: FILE: kernel/sched.c:2185:
+	printk("deactivating, have %d tasks\n",
+			policy->ops->tasks(policy->queue));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3326: FILE: lib/binomial.c:1:
+#include <linux/kernel.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3349: FILE: lib/binomial.c:24:
+static void binomial_merge(struct binomial **both, struct binomial **left,
+						struct binomial **right)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3368: FILE: lib/binomial.c:43:
+void binomial_union(struct binomial **both, struct binomial **left,
+						struct binomial **right)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3373: FILE: lib/binomial.c:48:
+	if (!(tmp = *both))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3378: FILE: lib/binomial.c:53:
+		if ((next->sibling && next->sibling->degree == tmp->degree)
+					|| tmp->degree != next->degree) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3418: FILE: lib/binomial.c:93:
+	minimum = last = min_last = new_heap = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3437: FILE: lib/binomial.c:112:
+void binomial_decrease(struct binomial **heap, struct binomial *element,
+							unsigned increment)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3437: FILE: lib/binomial.c:112:
+							unsigned increment)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3445: FILE: lib/binomial.c:120:
+		unsigned tmp_prio = tmp->priority;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3446: FILE: lib/binomial.c:121:
+		unsigned tmp_prio = tmp->priority;
+		tmp->priority = last->priority;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3456: FILE: lib/binomial.c:131:
+	struct binomial *tmp, *last = element;
+	for (tmp = last->parent; tmp; last = tmp, tmp = tmp->parent) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3457: FILE: lib/binomial.c:132:
+		unsigned tmp_prio = tmp->priority;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3458: FILE: lib/binomial.c:133:
+		unsigned tmp_prio = tmp->priority;
+		tmp->priority = last->priority;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444436.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 259 warnings, 48 checks, 3295 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444436.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
