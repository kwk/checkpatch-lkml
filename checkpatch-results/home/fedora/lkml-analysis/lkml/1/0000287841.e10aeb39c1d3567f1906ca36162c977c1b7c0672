WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: arch/x86/kernel/bts.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#84: FILE: arch/x86/kernel/bts.c:30:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#100: FILE: arch/x86/kernel/bts.c:46:
+};
+static struct bts_configuration bts_cfg;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#104: FILE: arch/x86/kernel/bts.c:50:
+
+

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#145: FILE: arch/x86/kernel/bts.c:91:
+	base += (bts_cfg.sizeof_field * field);;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#184: FILE: arch/x86/kernel/bts.c:130:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#267: FILE: arch/x86/kernel/bts.c:213:
+	if (task) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#271: FILE: arch/x86/kernel/bts.c:217:
+	} else

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#308: FILE: arch/x86/kernel/bts.c:254:
+	 * overflow actually occured, the size is either the write
 	                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'error < 0'
#320: FILE: arch/x86/kernel/bts.c:266:
+	if ((error < 0) || bts_invalid(raw)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#433: FILE: arch/x86/kernel/bts.c:379:
+	BUG_ON(BTS_MAX_RECORD_SIZE < bts_cfg.sizeof_bts);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#433: FILE: arch/x86/kernel/bts.c:379:
+	BUG_ON(BTS_MAX_RECORD_SIZE < bts_cfg.sizeof_bts);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#458: FILE: arch/x86/kernel/bts.c:404:
+	 * buffer. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#484: FILE: arch/x86/kernel/bts.c:430:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#488: FILE: arch/x86/kernel/bts.c:434:
+	.debugctl_tr         = (1<<2)|(1<<3),
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#488: FILE: arch/x86/kernel/bts.c:434:
+	.debugctl_tr         = (1<<2)|(1<<3),
 	                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#488: FILE: arch/x86/kernel/bts.c:434:
+	.debugctl_tr         = (1<<2)|(1<<3),
 	                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#489: FILE: arch/x86/kernel/bts.c:435:
+	.debugctl_btint      = (1<<4),
 	                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#490: FILE: arch/x86/kernel/bts.c:436:
+	.debugctl_user_off   = (1<<6),
 	                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#491: FILE: arch/x86/kernel/bts.c:437:
+	.debugctl_kernel_off = (1<<5)
 	                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#497: FILE: arch/x86/kernel/bts.c:443:
+	.debugctl_tr         = (1<<6)|(1<<7),
 	                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#497: FILE: arch/x86/kernel/bts.c:443:
+	.debugctl_tr         = (1<<6)|(1<<7),
 	                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#497: FILE: arch/x86/kernel/bts.c:443:
+	.debugctl_tr         = (1<<6)|(1<<7),
 	                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#498: FILE: arch/x86/kernel/bts.c:444:
+	.debugctl_btint      = (1<<8),
 	                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#506: FILE: arch/x86/kernel/bts.c:452:
+	.debugctl_tr         = (1<<6)|(1<<7),
 	                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#506: FILE: arch/x86/kernel/bts.c:452:
+	.debugctl_tr         = (1<<6)|(1<<7),
 	                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#506: FILE: arch/x86/kernel/bts.c:452:
+	.debugctl_tr         = (1<<6)|(1<<7),
 	                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#507: FILE: arch/x86/kernel/bts.c:453:
+	.debugctl_btint      = (1<<8),
 	                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#508: FILE: arch/x86/kernel/bts.c:454:
+	.debugctl_user_off   = (1<<10),
 	                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#509: FILE: arch/x86/kernel/bts.c:455:
+	.debugctl_kernel_off = (1<<9)
 	                         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#565: FILE: include/asm-x86/bts.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#598: FILE: include/asm-x86/bts.h:34:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#621: FILE: include/asm-x86/bts.h:57:
+		/* BTS_TASK_ARRIVES or
+		   BTS_TASK_DEPARTS */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#621: FILE: include/asm-x86/bts.h:57:
+		   BTS_TASK_DEPARTS */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#635: FILE: include/asm-x86/bts.h:71:
+		/* BTS_TASK_ARRIVES or
+		   BTS_TASK_DEPARTS */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#635: FILE: include/asm-x86/bts.h:71:
+		   BTS_TASK_DEPARTS */

WARNING:TYPO_SPELLING: 'alignement' may be misspelled - perhaps 'alignment'?
#643: FILE: include/asm-x86/bts.h:79:
+ * Due to alignement constraints, the actual buffer may be slightly
           ^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#658: FILE: include/asm-x86/bts.h:94:
+extern int bts_request(struct task_struct *task, void *base, size_t size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#671: FILE: include/asm-x86/bts.h:107:
+extern int bts_release(struct task_struct *task);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#685: FILE: include/asm-x86/bts.h:121:
+#define BTS_O_TRACE		(1<<0)	/* record branch trace */
                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#685: FILE: include/asm-x86/bts.h:121:
+#define BTS_O_TRACE		(1<<0)	/* record branch trace */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#686: FILE: include/asm-x86/bts.h:122:
+#define BTS_O_TIMESTAMP		(1<<1)	/* record scheduling timestamps */
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#686: FILE: include/asm-x86/bts.h:122:
+#define BTS_O_TIMESTAMP		(1<<1)	/* record scheduling timestamps */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#687: FILE: include/asm-x86/bts.h:123:
+#define BTS_O_USER_OFF		(1<<2)	/* do not trace user mode */
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#687: FILE: include/asm-x86/bts.h:123:
+#define BTS_O_USER_OFF		(1<<2)	/* do not trace user mode */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#688: FILE: include/asm-x86/bts.h:124:
+#define BTS_O_KERNEL_OFF	(1<<3)	/* do not trace kernel mode */
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#688: FILE: include/asm-x86/bts.h:124:
+#define BTS_O_KERNEL_OFF	(1<<3)	/* do not trace kernel mode */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#690: FILE: include/asm-x86/bts.h:126:
+extern int bts_configure(struct task_struct *task, unsigned int flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#703: FILE: include/asm-x86/bts.h:139:
+extern int bts_status(struct task_struct *task, size_t *bsize);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#716: FILE: include/asm-x86/bts.h:152:
+extern int bts_size(struct task_struct *task, size_t *pos);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#741: FILE: include/asm-x86/bts.h:177:
+#define BTS_READ_O_REVERSE	(1<<0) /* reverse output */
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#741: FILE: include/asm-x86/bts.h:177:
+#define BTS_READ_O_REVERSE	(1<<0) /* reverse output */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#743: FILE: include/asm-x86/bts.h:179:
+extern int bts_read(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#757: FILE: include/asm-x86/bts.h:193:
+extern int bts_reset(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#768: FILE: include/asm-x86/bts.h:204:
+extern int bts_clear(struct task_struct *task);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#770: FILE: include/asm-x86/bts.h:206:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#775: FILE: include/asm-x86/bts.h:211:
+extern void __cpuinit bts_init_intel(struct cpuinfo_x86 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuinfo_x86 *' should also have an identifier name
#775: FILE: include/asm-x86/bts.h:211:
+extern void __cpuinit bts_init_intel(struct cpuinfo_x86 *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#780: FILE: include/asm-x86/bts.h:216:
+extern void bts_take_timestamp(struct task_struct *, enum bts_qualifier);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#780: FILE: include/asm-x86/bts.h:216:
+extern void bts_take_timestamp(struct task_struct *, enum bts_qualifier);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1244: FILE: arch/x86/kernel/ptrace.c:822:
+		ret = bts_read(child, data, /* count = */ 1, /* kbuf = */ NULL,
+			(struct bts_struct __user *) addr, /* flags = */ 0);

CHECK:SPACING: No space is necessary after a cast
#1244: FILE: arch/x86/kernel/ptrace.c:822:
+			(struct bts_struct __user *) addr, /* flags = */ 0);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1263: FILE: arch/x86/Kconfig.cpu:431:
+config X86_BTS
+	bool "Branch Trace Store support"
 	default y
 	depends on (X86_DS && X86_DEBUGCTLMSR)
 	help
+	  Add support for Branch Trace Store.
+	  Add support for Branch Trace Store.
+	  Add support for Branch Trace Store.
+	  Add support for Branch Trace Store.
+	  Add support for Branch Trace Store.
+	  This allows the kernel to collect branch trace information per
+	  task or per cpu.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1276: FILE: arch/x86/Kconfig.cpu:440:
+config X86_PTRACE_BTS
+	bool "A ptrace interface to Branch Trace Store support"
+	default y
+	depends on (X86_BTS)
+	help
+	  Add a ptrace interface to expose Branch Trace Store support to user space.
+	  This allows debuggers to show an execution trace of the debuggee.

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#1400: FILE: arch/x86/kernel/process_64.c:553:
+	prev = &prev_p->thread,
+	next = &next_p->thread;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1547: FILE: include/asm-x86/ptrace.h:15:
+/* configuration/status structure used in PTRACE_BTS_CONFIG and
+   PTRACE_BTS_STATUS commands.

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1748: FILE: arch/x86/kernel/ds.c:496:
+	if (context->buffer[qual]) {
+		kfree(context->buffer[qual]);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1908: FILE: arch/x86/kernel/ds.c:855:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1974: FILE: include/asm-x86/ds.h:78:
+extern int ds_validate_bts(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1975: FILE: include/asm-x86/ds.h:79:
+extern int ds_validate_pebs(struct task_struct *task);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000287841.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 51 checks, 1827 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000287841.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
