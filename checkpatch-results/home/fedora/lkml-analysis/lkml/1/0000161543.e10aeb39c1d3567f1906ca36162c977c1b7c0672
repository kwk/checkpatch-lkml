WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#73: FILE: kernel/trace/trace_binary/zed.c:992:
+		printk(KERN_ERR "Couldn't register block tracepoints.\n");

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#125: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#130: FILE: kernel/trace/trace_binary/zed_block.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#144: FILE: kernel/trace/trace_binary/zed_block.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#145: FILE: kernel/trace/trace_binary/zed_block.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rw' may be better as '(rw)' to avoid precedence issues
#188: FILE: kernel/trace/trace_binary/zed_block.c:59:
+#define MASK_TC_BIT(rw, __name) ((rw & (1 << BIO_RW_ ## __name)) << \
+	  (ilog2(BLK_TC_ ## __name) + BLK_TC_SHIFT - BIO_RW_ ## __name))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: kernel/trace/trace_binary/zed_block.c:80:
+ZED_TRACEPOINT_ENTER_VAR(block_rq_abort,
+	     TPPROTO(struct request_queue *q, struct request *rq))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#238: FILE: kernel/trace/trace_binary/zed_block.c:109:
+}
+ZED_TRACEPOINT_EXIT(block_rq_abort)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: kernel/trace/trace_binary/zed_block.c:112:
+ZED_TRACEPOINT_ENTER_VAR(block_rq_insert,
+	     TPPROTO(struct request_queue *q, struct request *rq))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#270: FILE: kernel/trace/trace_binary/zed_block.c:141:
+}
+ZED_TRACEPOINT_EXIT(block_rq_insert)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: kernel/trace/trace_binary/zed_block.c:144:
+ZED_TRACEPOINT_ENTER_VAR(block_rq_issue,
+	     TPPROTO(struct request_queue *q, struct request *rq))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#302: FILE: kernel/trace/trace_binary/zed_block.c:173:
+}
+ZED_TRACEPOINT_EXIT(block_rq_issue)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: kernel/trace/trace_binary/zed_block.c:176:
+ZED_TRACEPOINT_ENTER_VAR(block_rq_requeue,
+	     TPPROTO(struct request_queue *q, struct request *rq))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#334: FILE: kernel/trace/trace_binary/zed_block.c:205:
+}
+ZED_TRACEPOINT_EXIT(block_rq_requeue)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: kernel/trace/trace_binary/zed_block.c:208:
+ZED_TRACEPOINT_ENTER_VAR(block_rq_complete,
+	     TPPROTO(struct request_queue *q, struct request *rq))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#366: FILE: kernel/trace/trace_binary/zed_block.c:237:
+}
+ZED_TRACEPOINT_EXIT(block_rq_complete)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: kernel/trace/trace_binary/zed_block.c:240:
+ZED_TRACEPOINT_ENTER(block_bio_bounce,
+	     TPPROTO(struct request_queue *q, struct bio *bio))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#378: FILE: kernel/trace/trace_binary/zed_block.c:249:
+}
+ZED_TRACEPOINT_EXIT(block_bio_bounce)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: kernel/trace/trace_binary/zed_block.c:252:
+ZED_TRACEPOINT_ENTER(block_bio_complete,
+	     TPPROTO(struct request_queue *q, struct bio *bio))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#390: FILE: kernel/trace/trace_binary/zed_block.c:261:
+}
+ZED_TRACEPOINT_EXIT(block_bio_complete)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: kernel/trace/trace_binary/zed_block.c:264:
+ZED_TRACEPOINT_ENTER(block_bio_backmerge,
+	     TPPROTO(struct request_queue *q, struct bio *bio))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#402: FILE: kernel/trace/trace_binary/zed_block.c:273:
+}
+ZED_TRACEPOINT_EXIT(block_bio_backmerge)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: kernel/trace/trace_binary/zed_block.c:276:
+ZED_TRACEPOINT_ENTER(block_bio_frontmerge,
+	     TPPROTO(struct request_queue *q, struct bio *bio))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#414: FILE: kernel/trace/trace_binary/zed_block.c:285:
+}
+ZED_TRACEPOINT_EXIT(block_bio_frontmerge)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: kernel/trace/trace_binary/zed_block.c:288:
+ZED_TRACEPOINT_ENTER(block_bio_queue,
+	     TPPROTO(struct request_queue *q, struct bio *bio))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#426: FILE: kernel/trace/trace_binary/zed_block.c:297:
+}
+ZED_TRACEPOINT_EXIT(block_bio_queue)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: kernel/trace/trace_binary/zed_block.c:300:
+ZED_TRACEPOINT_ENTER(block_getrq,
+	     TPPROTO(struct request_queue *q, struct bio *bio, int rw))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#445: FILE: kernel/trace/trace_binary/zed_block.c:316:
+}
+ZED_TRACEPOINT_EXIT(block_getrq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: kernel/trace/trace_binary/zed_block.c:319:
+ZED_TRACEPOINT_ENTER(block_sleeprq,
+	     TPPROTO(struct request_queue *q, struct bio *bio, int rw))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#464: FILE: kernel/trace/trace_binary/zed_block.c:335:
+}
+ZED_TRACEPOINT_EXIT(block_sleeprq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: kernel/trace/trace_binary/zed_block.c:338:
+ZED_TRACEPOINT_ENTER(block_plug,
+	     TPPROTO(struct request_queue *q))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#472: FILE: kernel/trace/trace_binary/zed_block.c:343:
+}
+ZED_TRACEPOINT_EXIT(block_plug)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: kernel/trace/trace_binary/zed_block.c:346:
+ZED_TRACEPOINT_ENTER_VAR(block_unplug_io,
+	     TPPROTO(struct request_queue *q))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#487: FILE: kernel/trace/trace_binary/zed_block.c:358:
+}
+ZED_TRACEPOINT_EXIT(block_unplug_io)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: kernel/trace/trace_binary/zed_block.c:361:
+ZED_TRACEPOINT_ENTER_VAR(block_unplug_timer,
+	     TPPROTO(struct request_queue *q))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#502: FILE: kernel/trace/trace_binary/zed_block.c:373:
+}
+ZED_TRACEPOINT_EXIT(block_unplug_timer)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: kernel/trace/trace_binary/zed_block.c:376:
+ZED_TRACEPOINT_ENTER_VAR(block_split,
+	 TPPROTO(struct request_queue *q, struct bio *bio, unsigned int pdu))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#520: FILE: kernel/trace/trace_binary/zed_block.c:391:
+}
+ZED_TRACEPOINT_EXIT(block_split)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: kernel/trace/trace_binary/zed_block.c:394:
+ZED_TRACEPOINT_ENTER_VAR(block_remap,
+	 TPPROTO(struct request_queue *q, struct bio *bio, dev_t dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: kernel/trace/trace_binary/zed_block.c:395:
+	 TPPROTO(struct request_queue *q, struct bio *bio, dev_t dev,
+		sector_t from, sector_t to))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#543: FILE: kernel/trace/trace_binary/zed_block.c:414:
+}
+ZED_TRACEPOINT_EXIT(block_remap)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#548: FILE: kernel/trace/trace_binary/zed_block.c:419:
+		printk(KERN_ERR "Couldn't register block_rq_abort tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#552: FILE: kernel/trace/trace_binary/zed_block.c:423:
+		printk(KERN_ERR "Couldn't register block_rq_insert tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#556: FILE: kernel/trace/trace_binary/zed_block.c:427:
+		printk(KERN_ERR "Couldn't register block_rq_issue tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#560: FILE: kernel/trace/trace_binary/zed_block.c:431:
+		printk(KERN_ERR "Couldn't register block_rq_requeue tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#564: FILE: kernel/trace/trace_binary/zed_block.c:435:
+		printk(KERN_ERR "Couldn't register block_rq_complete tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#568: FILE: kernel/trace/trace_binary/zed_block.c:439:
+		printk(KERN_ERR "Couldn't register block_bio_bounce tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#572: FILE: kernel/trace/trace_binary/zed_block.c:443:
+		printk(KERN_ERR "Couldn't register block_bio_complete tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#576: FILE: kernel/trace/trace_binary/zed_block.c:447:
+		printk(KERN_ERR "Couldn't register block_bio_backmerge tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#580: FILE: kernel/trace/trace_binary/zed_block.c:451:
+		printk(KERN_ERR "Couldn't register block_bio_frontmerge tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#584: FILE: kernel/trace/trace_binary/zed_block.c:455:
+		printk(KERN_ERR "Couldn't register block_bio_queue tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#588: FILE: kernel/trace/trace_binary/zed_block.c:459:
+		printk(KERN_ERR "Couldn't register block_getrq tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#592: FILE: kernel/trace/trace_binary/zed_block.c:463:
+		printk(KERN_ERR "Couldn't register block_sleeprq tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#596: FILE: kernel/trace/trace_binary/zed_block.c:467:
+		printk(KERN_ERR "Couldn't register block_plug tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#600: FILE: kernel/trace/trace_binary/zed_block.c:471:
+		printk(KERN_ERR "Couldn't register block_unplug_io tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#604: FILE: kernel/trace/trace_binary/zed_block.c:475:
+		printk(KERN_ERR "Couldn't register block_unplug_timer tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#608: FILE: kernel/trace/trace_binary/zed_block.c:479:
+		printk(KERN_ERR "Couldn't register block_split tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#612: FILE: kernel/trace/trace_binary/zed_block.c:483:
+		printk(KERN_ERR "Couldn't register block_remap tracepoint.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#645: FILE: kernel/trace/trace_binary/zed_block.c:516:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#652: FILE: kernel/trace/trace_binary/zed_block.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#666: FILE: kernel/trace/trace_binary/zed_block.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#667: FILE: kernel/trace/trace_binary/zed_block.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#677: FILE: kernel/trace/trace_binary/zed_block.h:26:
+#define block_rq_abort_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#677: FILE: kernel/trace/trace_binary/zed_block.h:26:
+#define block_rq_abort_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#677: FILE: kernel/trace/trace_binary/zed_block.h:26:
+#define block_rq_abort_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#677: FILE: kernel/trace/trace_binary/zed_block.h:26:
+#define block_rq_abort_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#687: FILE: kernel/trace/trace_binary/zed_block.h:36:
+#define block_rq_insert_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#687: FILE: kernel/trace/trace_binary/zed_block.h:36:
+#define block_rq_insert_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#687: FILE: kernel/trace/trace_binary/zed_block.h:36:
+#define block_rq_insert_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#687: FILE: kernel/trace/trace_binary/zed_block.h:36:
+#define block_rq_insert_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#697: FILE: kernel/trace/trace_binary/zed_block.h:46:
+#define block_rq_issue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#697: FILE: kernel/trace/trace_binary/zed_block.h:46:
+#define block_rq_issue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#697: FILE: kernel/trace/trace_binary/zed_block.h:46:
+#define block_rq_issue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#697: FILE: kernel/trace/trace_binary/zed_block.h:46:
+#define block_rq_issue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#707: FILE: kernel/trace/trace_binary/zed_block.h:56:
+#define block_rq_requeue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#707: FILE: kernel/trace/trace_binary/zed_block.h:56:
+#define block_rq_requeue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#707: FILE: kernel/trace/trace_binary/zed_block.h:56:
+#define block_rq_requeue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#707: FILE: kernel/trace/trace_binary/zed_block.h:56:
+#define block_rq_requeue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#717: FILE: kernel/trace/trace_binary/zed_block.h:66:
+#define block_rq_complete_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#717: FILE: kernel/trace/trace_binary/zed_block.h:66:
+#define block_rq_complete_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#717: FILE: kernel/trace/trace_binary/zed_block.h:66:
+#define block_rq_complete_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#717: FILE: kernel/trace/trace_binary/zed_block.h:66:
+#define block_rq_complete_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#727: FILE: kernel/trace/trace_binary/zed_block.h:76:
+#define block_bio_bounce_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#727: FILE: kernel/trace/trace_binary/zed_block.h:76:
+#define block_bio_bounce_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#727: FILE: kernel/trace/trace_binary/zed_block.h:76:
+#define block_bio_bounce_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#727: FILE: kernel/trace/trace_binary/zed_block.h:76:
+#define block_bio_bounce_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#735: FILE: kernel/trace/trace_binary/zed_block.h:84:
+#define block_bio_complete_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#735: FILE: kernel/trace/trace_binary/zed_block.h:84:
+#define block_bio_complete_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#735: FILE: kernel/trace/trace_binary/zed_block.h:84:
+#define block_bio_complete_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#735: FILE: kernel/trace/trace_binary/zed_block.h:84:
+#define block_bio_complete_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#743: FILE: kernel/trace/trace_binary/zed_block.h:92:
+#define block_bio_backmerge_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#743: FILE: kernel/trace/trace_binary/zed_block.h:92:
+#define block_bio_backmerge_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#743: FILE: kernel/trace/trace_binary/zed_block.h:92:
+#define block_bio_backmerge_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#743: FILE: kernel/trace/trace_binary/zed_block.h:92:
+#define block_bio_backmerge_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#751: FILE: kernel/trace/trace_binary/zed_block.h:100:
+#define block_bio_frontmerge_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#751: FILE: kernel/trace/trace_binary/zed_block.h:100:
+#define block_bio_frontmerge_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#751: FILE: kernel/trace/trace_binary/zed_block.h:100:
+#define block_bio_frontmerge_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#751: FILE: kernel/trace/trace_binary/zed_block.h:100:
+#define block_bio_frontmerge_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#759: FILE: kernel/trace/trace_binary/zed_block.h:108:
+#define block_bio_queue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#759: FILE: kernel/trace/trace_binary/zed_block.h:108:
+#define block_bio_queue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#759: FILE: kernel/trace/trace_binary/zed_block.h:108:
+#define block_bio_queue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#759: FILE: kernel/trace/trace_binary/zed_block.h:108:
+#define block_bio_queue_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#767: FILE: kernel/trace/trace_binary/zed_block.h:116:
+#define block_getrq_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#767: FILE: kernel/trace/trace_binary/zed_block.h:116:
+#define block_getrq_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#767: FILE: kernel/trace/trace_binary/zed_block.h:116:
+#define block_getrq_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#767: FILE: kernel/trace/trace_binary/zed_block.h:116:
+#define block_getrq_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#775: FILE: kernel/trace/trace_binary/zed_block.h:124:
+#define block_sleeprq_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#775: FILE: kernel/trace/trace_binary/zed_block.h:124:
+#define block_sleeprq_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#775: FILE: kernel/trace/trace_binary/zed_block.h:124:
+#define block_sleeprq_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#775: FILE: kernel/trace/trace_binary/zed_block.h:124:
+#define block_sleeprq_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, rw, int)	\
+	FIELD(subsys, event_name, errors, int)	\
+	FIELD(subsys, event_name, sector, sector_t)	\
+	FIELD(subsys, event_name, bytes, int)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#783: FILE: kernel/trace/trace_binary/zed_block.h:132:
+#define block_plug_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#783: FILE: kernel/trace/trace_binary/zed_block.h:132:
+#define block_plug_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#783: FILE: kernel/trace/trace_binary/zed_block.h:132:
+#define block_plug_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#783: FILE: kernel/trace/trace_binary/zed_block.h:132:
+#define block_plug_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)			\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#787: FILE: kernel/trace/trace_binary/zed_block.h:136:
+#define block_unplug_io_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#787: FILE: kernel/trace/trace_binary/zed_block.h:136:
+#define block_unplug_io_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#787: FILE: kernel/trace/trace_binary/zed_block.h:136:
+#define block_unplug_io_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#787: FILE: kernel/trace/trace_binary/zed_block.h:136:
+#define block_unplug_io_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#793: FILE: kernel/trace/trace_binary/zed_block.h:142:
+#define block_unplug_timer_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#793: FILE: kernel/trace/trace_binary/zed_block.h:142:
+#define block_unplug_timer_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#793: FILE: kernel/trace/trace_binary/zed_block.h:142:
+#define block_unplug_timer_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#793: FILE: kernel/trace/trace_binary/zed_block.h:142:
+#define block_unplug_timer_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)	\
+	FIELD(subsys, event_name, what, u32)	\
+	FIELD(subsys, event_name, pdu_len, int)	\
+	FIELD(subsys, event_name, pdu[0], u8)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#799: FILE: kernel/trace/trace_binary/zed_block.h:148:
+#define block_split_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)			\
+	FIELD(subsys, event_name, rw, int)			\
+	FIELD(subsys, event_name, errors, int)			\
+	FIELD(subsys, event_name, sector, sector_t)		\
+	FIELD(subsys, event_name, bytes, int)			\
+	FIELD(subsys, event_name, pdu_len, int)			\
+	FIELD(subsys, event_name, pdu[0], u8)			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#799: FILE: kernel/trace/trace_binary/zed_block.h:148:
+#define block_split_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)			\
+	FIELD(subsys, event_name, rw, int)			\
+	FIELD(subsys, event_name, errors, int)			\
+	FIELD(subsys, event_name, sector, sector_t)		\
+	FIELD(subsys, event_name, bytes, int)			\
+	FIELD(subsys, event_name, pdu_len, int)			\
+	FIELD(subsys, event_name, pdu[0], u8)			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#799: FILE: kernel/trace/trace_binary/zed_block.h:148:
+#define block_split_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)			\
+	FIELD(subsys, event_name, rw, int)			\
+	FIELD(subsys, event_name, errors, int)			\
+	FIELD(subsys, event_name, sector, sector_t)		\
+	FIELD(subsys, event_name, bytes, int)			\
+	FIELD(subsys, event_name, pdu_len, int)			\
+	FIELD(subsys, event_name, pdu[0], u8)			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#799: FILE: kernel/trace/trace_binary/zed_block.h:148:
+#define block_split_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)			\
+	FIELD(subsys, event_name, rw, int)			\
+	FIELD(subsys, event_name, errors, int)			\
+	FIELD(subsys, event_name, sector, sector_t)		\
+	FIELD(subsys, event_name, bytes, int)			\
+	FIELD(subsys, event_name, pdu_len, int)			\
+	FIELD(subsys, event_name, pdu[0], u8)			\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#809: FILE: kernel/trace/trace_binary/zed_block.h:158:
+#define block_remap_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)			\
+	FIELD(subsys, event_name, rw, int)			\
+	FIELD(subsys, event_name, errors, int)			\
+	FIELD(subsys, event_name, sector, sector_t)		\
+	FIELD(subsys, event_name, bytes, int)			\
+	FIELD(subsys, event_name, pdu_len, int)			\
+	FIELD(subsys, event_name, pdu[0], u8)			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#809: FILE: kernel/trace/trace_binary/zed_block.h:158:
+#define block_remap_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)			\
+	FIELD(subsys, event_name, rw, int)			\
+	FIELD(subsys, event_name, errors, int)			\
+	FIELD(subsys, event_name, sector, sector_t)		\
+	FIELD(subsys, event_name, bytes, int)			\
+	FIELD(subsys, event_name, pdu_len, int)			\
+	FIELD(subsys, event_name, pdu[0], u8)			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#809: FILE: kernel/trace/trace_binary/zed_block.h:158:
+#define block_remap_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)			\
+	FIELD(subsys, event_name, rw, int)			\
+	FIELD(subsys, event_name, errors, int)			\
+	FIELD(subsys, event_name, sector, sector_t)		\
+	FIELD(subsys, event_name, bytes, int)			\
+	FIELD(subsys, event_name, pdu_len, int)			\
+	FIELD(subsys, event_name, pdu[0], u8)			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#809: FILE: kernel/trace/trace_binary/zed_block.h:158:
+#define block_remap_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, dev, dev_t)			\
+	FIELD(subsys, event_name, what, u32)			\
+	FIELD(subsys, event_name, rw, int)			\
+	FIELD(subsys, event_name, errors, int)			\
+	FIELD(subsys, event_name, sector, sector_t)		\
+	FIELD(subsys, event_name, bytes, int)			\
+	FIELD(subsys, event_name, pdu_len, int)			\
+	FIELD(subsys, event_name, pdu[0], u8)			\
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#819: FILE: kernel/trace/trace_binary/zed_block.h:168:
+extern void zed_block_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#820: FILE: kernel/trace/trace_binary/zed_block.h:169:
+extern int zed_enable_block_tracepoints(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#821: FILE: kernel/trace/trace_binary/zed_block.h:170:
+extern void zed_disable_block_tracepoints(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161543.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 21 warnings, 91 checks, 748 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161543.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
