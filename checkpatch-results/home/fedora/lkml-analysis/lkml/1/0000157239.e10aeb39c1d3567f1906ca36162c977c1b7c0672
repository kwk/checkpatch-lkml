CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: include/trace/sched_event_types.h:72:
+TRACE_EVENT(sched_switch,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#195: FILE: include/trace/sched_event_types.h:78:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#196: FILE: include/trace/sched_event_types.h:79:
+		__array(	char,	prev_comm,	TASK_COMM_LEN	)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#196: FILE: include/trace/sched_event_types.h:79:
+		__array(	char,	prev_comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#197: FILE: include/trace/sched_event_types.h:80:
+		__field(	pid_t,	prev_pid			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#197: FILE: include/trace/sched_event_types.h:80:
+		__field(	pid_t,	prev_pid			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#198: FILE: include/trace/sched_event_types.h:81:
+		__field(	int,	prev_prio			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#198: FILE: include/trace/sched_event_types.h:81:
+		__field(	int,	prev_prio			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#199: FILE: include/trace/sched_event_types.h:82:
+		__array(	char,	next_comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#199: FILE: include/trace/sched_event_types.h:82:
+		__array(	char,	next_comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#200: FILE: include/trace/sched_event_types.h:83:
+		__field(	pid_t,	next_pid			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#200: FILE: include/trace/sched_event_types.h:83:
+		__field(	pid_t,	next_pid			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#201: FILE: include/trace/sched_event_types.h:84:
+		__field(	int,	next_prio			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#201: FILE: include/trace/sched_event_types.h:84:
+		__field(	int,	next_prio			)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: include/trace/sched_event_types.h:88:
+	TP_printk("task %s:%d [%d] ==> %s:%d [%d]",
+		__entry->prev_comm, __entry->prev_pid, __entry->prev_prio,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#210: FILE: include/trace/sched_event_types.h:91:
+	TP_fast_assign(

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#503: FILE: kernel/trace/trace_events_stage_1.h:24:
+#define __array(type, item, len)	type	item[len];

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#503: FILE: kernel/trace/trace_events_stage_1.h:24:
+#define __array(type, item, len)	type	item[len];

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#508: FILE: kernel/trace/trace_events_stage_1.h:27:
+#define __field(type, item)		type	item;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#508: FILE: kernel/trace/trace_events_stage_1.h:27:
+#define __field(type, item)		type	item;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#572: FILE: kernel/trace/trace_events_stage_2.h:66:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#598: FILE: kernel/trace/trace_events_stage_2.h:91:
+#define __field(type, item)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#598: FILE: kernel/trace/trace_events_stage_2.h:91:
+#define __field(type, item)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#598: FILE: kernel/trace/trace_events_stage_2.h:91:
+#define __field(type, item)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#598: FILE: kernel/trace/trace_events_stage_2.h:91:
+#define __field(type, item)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#607: FILE: kernel/trace/trace_events_stage_2.h:100:
+#define __array(type, item, len)						\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#607: FILE: kernel/trace/trace_events_stage_2.h:100:
+#define __array(type, item, len)						\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#607: FILE: kernel/trace/trace_events_stage_2.h:100:
+#define __array(type, item, len)						\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#607: FILE: kernel/trace/trace_events_stage_2.h:100:
+#define __array(type, item, len)						\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#710: FILE: kernel/trace/trace_export.c:18:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#715: FILE: kernel/trace/trace_export.c:23:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#715: FILE: kernel/trace/trace_export.c:23:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#715: FILE: kernel/trace/trace_export.c:23:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#715: FILE: kernel/trace/trace_export.c:23:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#723: FILE: kernel/trace/trace_export.c:31:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#725: FILE: kernel/trace/trace_export.c:33:
+#define TRACE_FIELD_SPECIAL(type_item, item, cmd)			\
+	ret = trace_seq_printf(s, "\tfield special:" #type_item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#725: FILE: kernel/trace/trace_export.c:33:
+#define TRACE_FIELD_SPECIAL(type_item, item, cmd)			\
+	ret = trace_seq_printf(s, "\tfield special:" #type_item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#725: FILE: kernel/trace/trace_export.c:33:
+#define TRACE_FIELD_SPECIAL(type_item, item, cmd)			\
+	ret = trace_seq_printf(s, "\tfield special:" #type_item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#725: FILE: kernel/trace/trace_export.c:33:
+#define TRACE_FIELD_SPECIAL(type_item, item, cmd)			\
+	ret = trace_seq_printf(s, "\tfield special:" #type_item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157239.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 19 errors, 10 warnings, 10 checks, 531 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157239.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
