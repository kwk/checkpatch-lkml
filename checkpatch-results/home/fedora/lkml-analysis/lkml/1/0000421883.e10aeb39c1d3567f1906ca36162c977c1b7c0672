WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#75: FILE: include/linux/lzo.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#93: FILE: include/linux/lzo.h:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#94: FILE: include/linux/lzo.h:20:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#102: FILE: include/linux/lzo.h:28:
+#define lzo1x_worst_compress(x) (x + (x / 64) + 16 + 3)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#102: FILE: include/linux/lzo.h:28:
+#define lzo1x_worst_compress(x) (x + (x / 64) + 16 + 3)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: include/linux/lzo.h:31:
+int lzo1x_1_compress(const unsigned char *src, size_t src_len,
+			unsigned char *dst, size_t *dst_len, void *wrkmem);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#109: FILE: include/linux/lzo.h:35:
+int lzo1x_decompress_safe(const unsigned char *src, size_t src_len,
+			unsigned char *dst, size_t *dst_len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#125: FILE: include/linux/lzo.h:51:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#172: FILE: lib/lzo/lzodefs.h:1:
+/* lzodefs.h -- architecture, OS and compiler specific defines

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#173: FILE: lib/lzo/lzodefs.h:2:
+/* lzodefs.h -- architecture, OS and compiler specific defines
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#190: FILE: lib/lzo/lzodefs.h:19:
+   If not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#191: FILE: lib/lzo/lzodefs.h:20:
+   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#229: FILE: lib/lzo/lzodefs.h:58:
+#define _DINDEX(dv,p)	(((0x9f5f * (dv))) >> 5)
                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: lib/lzo/lzodefs.h:59:
+#define DINDEX(dv,p)	((size_t)((_DINDEX(dv,p)) & D_MASK))
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: lib/lzo/lzodefs.h:59:
+#define DINDEX(dv,p)	((size_t)((_DINDEX(dv,p)) & D_MASK))
                     	                     ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: lib/lzo/lzodefs.h:61:
+#define DX2(p,s1,s2) ^I(((((size_t)((p)[2]) << (s2)) ^ (p)[1]) << (s1)) ^ (p)[0])$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#232: FILE: lib/lzo/lzodefs.h:61:
+#define DX2(p,s1,s2) 	(((((size_t)((p)[2]) << (s2)) ^ (p)[1]) << (s1)) ^ (p)[0])
              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#232: FILE: lib/lzo/lzodefs.h:61:
+#define DX2(p,s1,s2) 	(((((size_t)((p)[2]) << (s2)) ^ (p)[1]) << (s1)) ^ (p)[0])
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#232: FILE: lib/lzo/lzodefs.h:61:
+#define DX2(p,s1,s2) 	(((((size_t)((p)[2]) << (s2)) ^ (p)[1]) << (s1)) ^ (p)[0])

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: lib/lzo/lzodefs.h:63:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: lib/lzo/lzodefs.h:63:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: lib/lzo/lzodefs.h:63:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#234: FILE: lib/lzo/lzodefs.h:63:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: lib/lzo/lzodefs.h:63:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: lib/lzo/lzodefs.h:63:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#234: FILE: lib/lzo/lzodefs.h:63:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])

CHECK:SPACING: No space is necessary after a cast
#235: FILE: lib/lzo/lzodefs.h:64:
+#define DMS(v,s)	((size_t) (((v) & (D_MASK >> (s))) << (s)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#235: FILE: lib/lzo/lzodefs.h:64:
+#define DMS(v,s)	((size_t) (((v) & (D_MASK >> (s))) << (s)))
              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#235: FILE: lib/lzo/lzodefs.h:64:
+#define DMS(v,s)	((size_t) (((v) & (D_MASK >> (s))) << (s)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#248: FILE: lib/lzo/lzo1x_compress.c:1:
+/*

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: lib/lzo/lzo1x_compress.c:20:
+#define PTR_LT(a,b)		(((unsigned long)(a)) < ((unsigned long)(b)))
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: lib/lzo/lzo1x_compress.c:21:
+#define PTR_DIFF(a,b)		(((unsigned long)(a)) - ((unsigned long)(b)))
                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#271: FILE: lib/lzo/lzo1x_compress.c:24:
+_lzo1x_1_do_compress(const unsigned char *in , size_t in_len,
                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: lib/lzo/lzo1x_compress.c:25:
+_lzo1x_1_do_compress(const unsigned char *in , size_t in_len,
+		unsigned char *out, size_t *out_len, void *wrkmem)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: lib/lzo/lzo1x_compress.c:38:
+		dindex = DMS((0x21 * DX3(ip,5,5,6)) >> 5, 0);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: lib/lzo/lzo1x_compress.c:38:
+		dindex = DMS((0x21 * DX3(ip,5,5,6)) >> 5, 0);
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: lib/lzo/lzo1x_compress.c:38:
+		dindex = DMS((0x21 * DX3(ip,5,5,6)) >> 5, 0);
 		                               ^

CHECK:SPACING: No space is necessary after a cast
#288: FILE: lib/lzo/lzo1x_compress.c:41:
+		if (m_pos = ip - (unsigned long) PTR_DIFF(ip,m_pos),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: lib/lzo/lzo1x_compress.c:41:
+		if (m_pos = ip - (unsigned long) PTR_DIFF(ip,m_pos),
 		                                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#288: FILE: lib/lzo/lzo1x_compress.c:41:
+		if (m_pos = ip - (unsigned long) PTR_DIFF(ip,m_pos),

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: lib/lzo/lzo1x_compress.c:42:
+		if (m_pos = ip - (unsigned long) PTR_DIFF(ip,m_pos),
+			(PTR_LT(m_pos,in) ||

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: lib/lzo/lzo1x_compress.c:42:
+			(PTR_LT(m_pos,in) ||
 			             ^

CHECK:SPACING: No space is necessary after a cast
#290: FILE: lib/lzo/lzo1x_compress.c:43:
+			(m_off = (unsigned long) PTR_DIFF(ip,m_pos)) == 0 ||

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: lib/lzo/lzo1x_compress.c:43:
+			(m_off = (unsigned long) PTR_DIFF(ip,m_pos)) == 0 ||
 			                                    ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#291: FILE: lib/lzo/lzo1x_compress.c:44:
+			m_off > M4_MAX_OFFSET ))

CHECK:SPACING: No space is necessary after a cast
#300: FILE: lib/lzo/lzo1x_compress.c:53:
+		if (m_pos = ip - (unsigned long) PTR_DIFF(ip,m_pos),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#300: FILE: lib/lzo/lzo1x_compress.c:53:
+		if (m_pos = ip - (unsigned long) PTR_DIFF(ip,m_pos),
 		                                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#300: FILE: lib/lzo/lzo1x_compress.c:53:
+		if (m_pos = ip - (unsigned long) PTR_DIFF(ip,m_pos),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: lib/lzo/lzo1x_compress.c:54:
+		if (m_pos = ip - (unsigned long) PTR_DIFF(ip,m_pos),
+			(PTR_LT(m_pos,in) ||

ERROR:SPACING: space required after that ',' (ctx:VxV)
#301: FILE: lib/lzo/lzo1x_compress.c:54:
+			(PTR_LT(m_pos,in) ||
 			             ^

CHECK:SPACING: No space is necessary after a cast
#302: FILE: lib/lzo/lzo1x_compress.c:55:
+			(m_off = (unsigned long) PTR_DIFF(ip,m_pos)) <= 0 ||

ERROR:SPACING: space required after that ',' (ctx:VxV)
#302: FILE: lib/lzo/lzo1x_compress.c:55:
+			(m_off = (unsigned long) PTR_DIFF(ip,m_pos)) <= 0 ||
 			                                    ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#303: FILE: lib/lzo/lzo1x_compress.c:56:
+			m_off > M4_MAX_OFFSET ))

CHECK:SPACING: No space is necessary after a cast
#313: FILE: lib/lzo/lzo1x_compress.c:66:
+		if (*(const unsigned short *) m_pos == *(const unsigned short *) ip)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#318: FILE: lib/lzo/lzo1x_compress.c:71:
+			if (likely(m_pos[2] == ip[2]))
+					goto match;

CHECK:SPACING: No space is necessary after a cast
#331: FILE: lib/lzo/lzo1x_compress.c:84:
+		if (((unsigned long) (ip - ii)) > 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: lib/lzo/lzo1x_compress.c:108:
+		if (m_pos[3] != *ip++ || m_pos[4] != *ip++ || m_pos[5] != *ip++ ||
+			m_pos[6] != *ip++ || m_pos[7] != *ip++ || m_pos[8] != *ip++) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#393: FILE: lib/lzo/lzo1x_compress.c:146:
+					*op++ = (M4_MARKER | ((m_off & 0x4000) >> 11) | (m_len - 2));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#420: FILE: lib/lzo/lzo1x_compress.c:173:
+int lzo1x_1_compress(const unsigned char *in , size_t in_len,
                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: lib/lzo/lzo1x_compress.c:174:
+int lzo1x_1_compress(const unsigned char *in , size_t in_len,
+			unsigned char *out, size_t *out_len,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#422: FILE: lib/lzo/lzo1x_compress.c:175:
+			void *wrkmem )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#431: FILE: lib/lzo/lzo1x_compress.c:184:
+		t = _lzo1x_1_do_compress(in,in_len,op,out_len,wrkmem);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#431: FILE: lib/lzo/lzo1x_compress.c:184:
+		t = _lzo1x_1_do_compress(in,in_len,op,out_len,wrkmem);
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#431: FILE: lib/lzo/lzo1x_compress.c:184:
+		t = _lzo1x_1_do_compress(in,in_len,op,out_len,wrkmem);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#431: FILE: lib/lzo/lzo1x_compress.c:184:
+		t = _lzo1x_1_do_compress(in,in_len,op,out_len,wrkmem);
 		                                             ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#468: FILE: lib/lzo/lzo1x_compress.c:221:
+EXPORT_SYMBOL_GPL(lzo1x_1_compress);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#478: FILE: lib/lzo/lzo1x_decompress.c:1:
+/*

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ip_end' may be better as '(ip_end)' to avoid precedence issues
#497: FILE: lib/lzo/lzo1x_decompress.c:20:
+#define HAVE_IP_OR(x, ip_end, ip) ((size_t)(ip_end - ip) < (size_t)(x))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ip' may be better as '(ip)' to avoid precedence issues
#497: FILE: lib/lzo/lzo1x_decompress.c:20:
+#define HAVE_IP_OR(x, ip_end, ip) ((size_t)(ip_end - ip) < (size_t)(x))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'op_end' may be better as '(op_end)' to avoid precedence issues
#498: FILE: lib/lzo/lzo1x_decompress.c:21:
+#define HAVE_OP_OR(x, op_end, op) ((size_t)(op_end - op) < (size_t)(x))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'op' may be better as '(op)' to avoid precedence issues
#498: FILE: lib/lzo/lzo1x_decompress.c:21:
+#define HAVE_OP_OR(x, op_end, op) ((size_t)(op_end - op) < (size_t)(x))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm_pos' - possible side-effects?
#499: FILE: lib/lzo/lzo1x_decompress.c:22:
+#define HAVE_LB_OR(m_pos, out, op) (m_pos < out || m_pos >= op)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm_pos' may be better as '(m_pos)' to avoid precedence issues
#499: FILE: lib/lzo/lzo1x_decompress.c:22:
+#define HAVE_LB_OR(m_pos, out, op) (m_pos < out || m_pos >= op)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'out' may be better as '(out)' to avoid precedence issues
#499: FILE: lib/lzo/lzo1x_decompress.c:22:
+#define HAVE_LB_OR(m_pos, out, op) (m_pos < out || m_pos >= op)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'op' may be better as '(op)' to avoid precedence issues
#499: FILE: lib/lzo/lzo1x_decompress.c:22:
+#define HAVE_LB_OR(m_pos, out, op) (m_pos < out || m_pos >= op)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#502: FILE: lib/lzo/lzo1x_decompress.c:25:
+#define COPY4(dst,src)	*(u32 *)(dst) = *(const u32 *)(src)
                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#502: FILE: lib/lzo/lzo1x_decompress.c:25:
+#define COPY4(dst,src)	*(u32 *)(dst) = *(const u32 *)(src)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#505: FILE: lib/lzo/lzo1x_decompress.c:28:
+int lzo1x_decompress_safe (const unsigned char *in , size_t in_len,

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#505: FILE: lib/lzo/lzo1x_decompress.c:28:
+int lzo1x_decompress_safe (const unsigned char *in , size_t in_len,
                                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: lib/lzo/lzo1x_decompress.c:29:
+int lzo1x_decompress_safe (const unsigned char *in , size_t in_len,
+			unsigned char *out, size_t *out_len)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#551: FILE: lib/lzo/lzo1x_decompress.c:74:
+		COPY4(op,ip);
 		        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#557: FILE: lib/lzo/lzo1x_decompress.c:80:
+					COPY4(op,ip);
 					        ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#621: FILE: lib/lzo/lzo1x_decompress.c:144:
+						if (HAVE_IP_OR(1, ip_end, ip))

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:SPACING: No space is necessary after a cast
#628: FILE: lib/lzo/lzo1x_decompress.c:151:
+				m_pos -= (*(const unsigned short *) ip) >> 2;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#645: FILE: lib/lzo/lzo1x_decompress.c:168:
+						if (HAVE_IP_OR(1, ip_end, ip))

CHECK:SPACING: No space is necessary after a cast
#651: FILE: lib/lzo/lzo1x_decompress.c:174:
+				m_pos -= (*(const unsigned short *) ip) >> 2;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#681: FILE: lib/lzo/lzo1x_decompress.c:204:
+				COPY4(op,m_pos);
 				        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#686: FILE: lib/lzo/lzo1x_decompress.c:209:
+					COPY4(op,m_pos);
 					        ^

CHECK:BRACES: Unbalanced braces around else statement
#695: FILE: lib/lzo/lzo1x_decompress.c:218:
+			} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#747: FILE: lib/lzo/lzo1x_decompress.c:270:
+EXPORT_SYMBOL_GPL(lzo1x_decompress_safe);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421883.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 44 errors, 13 warnings, 33 checks, 647 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421883.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
