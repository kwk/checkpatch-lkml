CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#96: FILE: fs/binfmt_aout.c:117:
+	if ((dump.u_dsize + dump.u_ssize+1) * PAGE_SIZE > cprm->limit)
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#124: FILE: fs/binfmt_elf.c:1280:
+#define DUMP_WRITE(addr, nr)				\
+	if ((size += (nr)) > cprm->limit ||		\
+	    !dump_write(cprm->file, (addr), (nr)))	\
 		goto end_coredump;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#124: FILE: fs/binfmt_elf.c:1280:
+#define DUMP_WRITE(addr, nr)				\
+	if ((size += (nr)) > cprm->limit ||		\
+	    !dump_write(cprm->file, (addr), (nr)))	\
 		goto end_coredump;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#124: FILE: fs/binfmt_elf.c:1280:
+#define DUMP_WRITE(addr, nr)				\
+	if ((size += (nr)) > cprm->limit ||		\
+	    !dump_write(cprm->file, (addr), (nr)))	\
 		goto end_coredump;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#124: FILE: fs/binfmt_elf.c:1280:
+#define DUMP_WRITE(addr, nr)				\
+	if ((size += (nr)) > cprm->limit ||		\
+	    !dump_write(cprm->file, (addr), (nr)))	\
 		goto end_coredump;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#125: FILE: fs/binfmt_elf.c:1281:
+	if ((size += (nr)) > cprm->limit ||		\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#202: FILE: fs/binfmt_elf_fdpic.c:1328:
+#define DUMP_WRITE(addr, nr)				\
+	if ((size += (nr)) > cprm->limit ||		\
+	    !dump_write(cprm->file, (addr), (nr)))	\
 		goto end_coredump;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#202: FILE: fs/binfmt_elf_fdpic.c:1328:
+#define DUMP_WRITE(addr, nr)				\
+	if ((size += (nr)) > cprm->limit ||		\
+	    !dump_write(cprm->file, (addr), (nr)))	\
 		goto end_coredump;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#202: FILE: fs/binfmt_elf_fdpic.c:1328:
+#define DUMP_WRITE(addr, nr)				\
+	if ((size += (nr)) > cprm->limit ||		\
+	    !dump_write(cprm->file, (addr), (nr)))	\
 		goto end_coredump;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#202: FILE: fs/binfmt_elf_fdpic.c:1328:
+#define DUMP_WRITE(addr, nr)				\
+	if ((size += (nr)) > cprm->limit ||		\
+	    !dump_write(cprm->file, (addr), (nr)))	\
 		goto end_coredump;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#203: FILE: fs/binfmt_elf_fdpic.c:1329:
+	if ((size += (nr)) > cprm->limit ||		\

CHECK:SPACING: No space is necessary after a cast
#304: FILE: fs/binfmt_flat.c:108:
+			current->comm, current->pid, (int) cprm->signr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ispipe'
#353: FILE: fs/exec.c:1828:
+	if ((!ispipe) && (cprm.limit < binfmt->min_coredump))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cprm.limit < binfmt->min_coredump'
#353: FILE: fs/exec.c:1828:
+	if ((!ispipe) && (cprm.limit < binfmt->min_coredump))

WARNING:TYPO_SPELLING: 'speacial' may be misspelled - perhaps 'special'?
#363: FILE: fs/exec.c:1836:
+			 * cprm.limit of 0 here as a speacial value. Any
 			                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: fs/exec.c:1880:
+		cprm.file = filp_open(corename,
 				 O_CREAT | 2 | O_NOFOLLOW | O_LARGEFILE | flag,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000040659.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 5 warnings, 7 checks, 342 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000040659.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
