WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#61: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#66: FILE: arch/x86/kernel/signal.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#89: FILE: arch/x86/kernel/signal.c:24:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#118: FILE: arch/x86/kernel/signal.c:53:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#118: FILE: arch/x86/kernel/signal.c:53:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#122: FILE: arch/x86/kernel/signal.c:57:
+#define COPY_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp;			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#122: FILE: arch/x86/kernel/signal.c:57:
+#define COPY_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp;			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#128: FILE: arch/x86/kernel/signal.c:63:
+#define COPY_SEG_CPL3(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#128: FILE: arch/x86/kernel/signal.c:63:
+#define COPY_SEG_CPL3(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#134: FILE: arch/x86/kernel/signal.c:69:
+#define GET_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		loadsegment(seg, tmp);			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#134: FILE: arch/x86/kernel/signal.c:69:
+#define GET_SEG(seg)		{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		loadsegment(seg, tmp);			\
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#178: FILE: arch/x86/kernel/signal.c:113:
+	 * App's signal handler can save/restore other segments if needed. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#262: FILE: arch/x86/kernel/signal.c:197:
+} __attribute__((packed)) retcode = {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#273: FILE: arch/x86/kernel/signal.c:208:
+} __attribute__((packed)) rt_retcode = {

CHECK:SPACING: No space is necessary after a cast
#297: FILE: arch/x86/kernel/signal.c:232:
+		return (void __user *) -1L;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: arch/x86/kernel/signal.c:241:
+		if ((regs->ss & 0xffff) != __USER_DS &&
+			!(ka->sa.sa_flags & SA_RESTORER) &&

CHECK:SPACING: No space is necessary after a cast
#308: FILE: arch/x86/kernel/signal.c:243:
+			sp = (unsigned long) ka->sa.sa_restorer;

CHECK:SPACING: No space is necessary after a cast
#313: FILE: arch/x86/kernel/signal.c:248:
+		*fpstate = (struct _fpstate *) sp;

CHECK:SPACING: No space is necessary after a cast
#325: FILE: arch/x86/kernel/signal.c:260:
+	return (void __user *) sp;

CHECK:BRACES: braces {} should be used on all arms of this statement
#486: FILE: arch/x86/kernel/signal.c:421:
+	if (used_math()) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#488: FILE: arch/x86/kernel/signal.c:423:
+		frame = (void __user *)round_down(

CHECK:BRACES: Unbalanced braces around else statement
#493: FILE: arch/x86/kernel/signal.c:428:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#518: FILE: arch/x86/kernel/signal.c:453:
+	/* Set up to return from userspace.  If provided, use a stub
+	   already in userspace.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#518: FILE: arch/x86/kernel/signal.c:453:
+	   already in userspace.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#536: FILE: arch/x86/kernel/signal.c:471:
+	/* This also works for non SA_SIGINFO handlers because they expect the
+	   next argument after the signal number on the stack. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#536: FILE: arch/x86/kernel/signal.c:471:
+	   next argument after the signal number on the stack. */

CHECK:SPACING: No space is necessary after a cast
#539: FILE: arch/x86/kernel/signal.c:474:
+	regs->ip = (unsigned long) ka->sa.sa_handler;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#544: FILE: arch/x86/kernel/signal.c:479:
+	/* Set up the CS register to run signal handlers in 64-bit mode,
+	   even if the handler happens to be interrupting 32-bit code. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#544: FILE: arch/x86/kernel/signal.c:479:
+	   even if the handler happens to be interrupting 32-bit code. */

CHECK:SPACING: No space is necessary after a cast
#641: FILE: arch/x86/kernel/signal.c:576:
+	regs = (struct pt_regs *) &__unused;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#647: FILE: arch/x86/kernel/signal.c:582:
+	if (__get_user(set.sig[0], &frame->sc.oldmask) || (_NSIG_WORDS > 1
+		&& __copy_from_user(&set.sig[1], &frame->extramask,

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#662: FILE: arch/x86/kernel/signal.c:597:
+	if (show_unhandled_signals && printk_ratelimit()) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#663: FILE: arch/x86/kernel/signal.c:598:
+		printk("%s%s[%d] bad frame in sigreturn frame:"

WARNING:SPLIT_STRING: quoted string split across lines
#664: FILE: arch/x86/kernel/signal.c:599:
+		printk("%s%s[%d] bad frame in sigreturn frame:"
+			"%p ip:%lx sp:%lx oeax:%lx",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#669: FILE: arch/x86/kernel/signal.c:604:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#669: FILE: arch/x86/kernel/signal.c:604:
+		printk(KERN_CONT "\n");

WARNING:TYPO_SPELLING: 'usig' may be misspelled - perhaps 'using'?
#757: FILE: arch/x86/kernel/signal.c:692:
+	int usig = signr_convert(sig);
 	    ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#761: FILE: arch/x86/kernel/signal.c:696:
+	if (is_ia32) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'usig' may be misspelled - perhaps 'using'?
#763: FILE: arch/x86/kernel/signal.c:698:
+			ret = ia32_setup_rt_frame(usig, ka, info, set, regs);
 			                          ^^^^

WARNING:TYPO_SPELLING: 'usig' may be misspelled - perhaps 'using'?
#765: FILE: arch/x86/kernel/signal.c:700:
+			ret = ia32_setup_frame(usig, ka, set, regs);
 			                       ^^^^

CHECK:BRACES: Unbalanced braces around else statement
#766: FILE: arch/x86/kernel/signal.c:701:
+	} else

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#797: FILE: arch/x86/kernel/signal.c:732:
+		/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#856: FILE: arch/x86/kernel/signal.c:791:
+#define NR_restart_syscall	\
+	test_thread_flag(TIF_IA32) ? __NR_ia32_restart_syscall : __NR_restart_syscall

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#970: FILE: arch/x86/kernel/signal.c:905:
+	if (show_unhandled_signals && printk_ratelimit()) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#971: FILE: arch/x86/kernel/signal.c:906:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#976: FILE: arch/x86/kernel/signal.c:911:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#976: FILE: arch/x86/kernel/signal.c:911:
+		printk(KERN_CONT "\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199923.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 24 warnings, 22 checks, 923 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199923.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
