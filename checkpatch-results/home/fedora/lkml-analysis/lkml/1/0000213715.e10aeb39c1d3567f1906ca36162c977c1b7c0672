WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#49: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:101:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#125: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:228:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#126: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:229:
+static int __devinit acpi_pcc_hotkey_add(struct acpi_device *device);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#127: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:230:
+static int __devexit acpi_pcc_hotkey_remove(struct acpi_device *device, int type);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#130: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:233:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#152: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:264:
+/* *************************************************************************
+   Hotkey driver core

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#153: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:265:
+   ************************************************************************* */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#157: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:268:
+   ------------------------------------------------------------------------- */

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#233: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:359:
+	if (ACPI_SUCCESS(acpi_pcc_retrieve_biosdata(hotkey, sinf))) {
[...]
 	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:370:
+   ------------------------------------------------------------------------- */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#292: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:424:
+	if (!hotkey || !hotkey->device) {
+		return_VALUE(-EINVAL);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#344: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:477:
+	if (!hotkey || (count > sizeof(write_string) - 1)) {
 		return_VALUE(-EINVAL);
 	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#354: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:481:
+	if (copy_from_user(write_string, buffer, count)) {
 		return_VALUE(-EFAULT);
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bright >= sinf[min_index]                '
#369: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:492:
+	if ((sscanf(write_string, "%4i", &bright) == 1) &&
+	    (bright >= sinf[min_index]                ) &&
+	    (bright <= sinf[max_index]                )) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bright <= sinf[max_index]                '
#369: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:492:
+	if ((sscanf(write_string, "%4i", &bright) == 1) &&
+	    (bright >= sinf[min_index]                ) &&
+	    (bright <= sinf[max_index]                )) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#370: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:493:
+	    (bright >= sinf[min_index]                ) &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#371: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:494:
+	    (bright <= sinf[max_index]                )) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#425: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:546:
+	if (!hotkey || (count > sizeof(write_string) - 1)) {
+		return_VALUE(-EINVAL);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#429: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:550:
+	if (copy_from_user(write_string, buffer, count)) {
+		return_VALUE(-EFAULT);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#449: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:575:
+	if (!hotkey || (count > (sizeof(write_string) - 1))) {
 		return_VALUE(-EINVAL);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#454: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:579:
+	if (copy_from_user(write_string, buffer, count)) {
 		return_VALUE(-EFAULT);
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#475: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:596:
+   ------------------------------------------------------------------------- */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#487: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:680:
+/* *************************************************************************
+   FS Interface (/proc)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#488: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:681:
+   ************************************************************************* */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#528: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:698:
+static fops_t acpi_pcc_numbatteries_fops      = SEQ_FILEOPS_R (acpi_pcc_numbatteries_open_fs);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#529: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:699:
+static fops_t acpi_pcc_lcdtype_fops           = SEQ_FILEOPS_R (acpi_pcc_lcdtype_open_fs);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#530: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:700:
+static fops_t acpi_pcc_mute_fops              = SEQ_FILEOPS_RW(acpi_pcc_mute_open_fs, acpi_pcc_write_mute);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#531: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:701:
+static fops_t acpi_pcc_ac_brightness_fops     = SEQ_FILEOPS_RW(acpi_pcc_ac_brightness_open_fs, acpi_pcc_write_ac_brightness);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#532: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:702:
+static fops_t acpi_pcc_ac_brightness_max_fops = SEQ_FILEOPS_R (acpi_pcc_ac_brightness_max_open_fs);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#533: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:703:
+static fops_t acpi_pcc_ac_brightness_min_fops = SEQ_FILEOPS_R (acpi_pcc_ac_brightness_min_open_fs);

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#534: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:704:
+static fops_t acpi_pcc_dc_brightness_fops     = SEQ_FILEOPS_RW(acpi_pcc_dc_brightness_open_fs, acpi_pcc_write_dc_brightness);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#535: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:705:
+static fops_t acpi_pcc_dc_brightness_max_fops = SEQ_FILEOPS_R (acpi_pcc_dc_brightness_max_open_fs);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#536: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:706:
+static fops_t acpi_pcc_dc_brightness_min_fops = SEQ_FILEOPS_R (acpi_pcc_dc_brightness_min_open_fs);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#537: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:707:
+static fops_t acpi_pcc_brightness_fops        = SEQ_FILEOPS_RW(acpi_pcc_brightness_open_fs, acpi_pcc_write_no_brightness);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#538: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:708:
+static fops_t acpi_pcc_sticky_key_fops        = SEQ_FILEOPS_RW(acpi_pcc_sticky_key_open_fs, acpi_pcc_write_sticky_key);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#539: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:709:
+static fops_t acpi_pcc_keyinput_fops          = SEQ_FILEOPS_RW(acpi_pcc_keyinput_open_fs, acpi_pcc_write_keyinput);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#540: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:710:
+static fops_t acpi_pcc_version_fops           = SEQ_FILEOPS_R (acpi_pcc_version_open_fs);

CHECK:CAMELCASE: Avoid CamelCase: <ProcItem>
#552: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:720:
+ProcItem acpi_pcc_proc_items_sifr[] = {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#553: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:721:
+	{ "num_batteries",	&acpi_pcc_numbatteries_fops,	 S_IRUGO },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#554: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:722:
+	{ "lcd_type",		&acpi_pcc_lcdtype_fops,		 S_IRUGO },

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#558: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:725:
+	{ "ac_brightness" ,	&acpi_pcc_ac_brightness_fops,	 S_IFREG | S_IRUGO | S_IWUSR },
 	                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#558: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:725:
+	{ "ac_brightness" ,	&acpi_pcc_ac_brightness_fops,	 S_IFREG | S_IRUGO | S_IWUSR },

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#564: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:728:
+	{ "dc_brightness" ,	&acpi_pcc_dc_brightness_fops,	 S_IFREG | S_IRUGO | S_IWUSR },
 	                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#564: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:728:
+	{ "dc_brightness" ,	&acpi_pcc_dc_brightness_fops,	 S_IFREG | S_IRUGO | S_IWUSR },

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#565: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:729:
+	{ "brightness" ,	&acpi_pcc_brightness_fops,    S_IFREG | S_IRUGO | S_IWUSR },
 	               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#565: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:729:
+	{ "brightness" ,	&acpi_pcc_brightness_fops,    S_IFREG | S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#566: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:730:
+	{ "mute",		&acpi_pcc_mute_fops,		 S_IFREG | S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#576: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:736:
+	{ "keyinput",		&acpi_pcc_keyinput_fops,	 S_IFREG | S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#577: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:737:
+	{ "version",		&acpi_pcc_version_fops,		 S_IRUGO },

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#584: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:741:
+static int __devinit acpi_pcc_add_device(struct acpi_device *device,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#588: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:745:
+	struct acpi_hotkey *hotkey = (struct acpi_hotkey*)acpi_driver_data(device);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#609: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:767:
+static int __devinit acpi_pcc_proc_init(struct acpi_device *device)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#614: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:770:
+	struct acpi_hotkey    *hotkey = (struct acpi_hotkey*)acpi_driver_data(device);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#625: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:786:
+	status |= acpi_pcc_add_device(device, acpi_pcc_proc_items,      ARRAY_SIZE(acpi_pcc_proc_items));

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#636: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:796:
+static void __devexit acpi_pcc_remove_device(struct acpi_device *device,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#651: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:812:
+/* *************************************************************************
+   Power Management

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#652: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:813:
+   ************************************************************************* */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#661: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:822:
+	if (device == NULL || hotkey == NULL) { return_VALUE(-EINVAL); }

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#661: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:822:
+	if (device == NULL || hotkey == NULL) { return_VALUE(-EINVAL); }

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!device"
#661: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:822:
+	if (device == NULL || hotkey == NULL) { return_VALUE(-EINVAL); }

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hotkey"
#661: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:822:
+	if (device == NULL || hotkey == NULL) { return_VALUE(-EINVAL); }

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#668: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:829:
+	if (status != AE_OK) { return_VALUE(-EINVAL); }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#668: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:829:
+	if (status != AE_OK) { return_VALUE(-EINVAL); }

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#679: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:836:
+/* *************************************************************************
+   Module init/remove

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#680: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:837:
+   ************************************************************************* */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#682: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:839:
+/* -------------------------------------------------------------------------
+   input

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#683: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:840:
+   ------------------------------------------------------------------------- */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#684: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:841:
+static int __devinit acpi_pcc_init_input(struct acpi_hotkey *hotkey)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#762: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:889:
+	if (error) {
+		goto err_pcc;
+	}

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#779: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:901:
+static void __devexit acpi_pcc_remove_input(struct acpi_hotkey *hotkey)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hotkey"
#790: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:908:
+	if (hotkey == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#808: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:922:
+/* -------------------------------------------------------------------------
+   ACPI

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#809: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:923:
+   ------------------------------------------------------------------------- */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#810: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:924:
+static int __devinit acpi_pcc_hotkey_add (struct acpi_device *device)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#810: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:924:
+static int __devinit acpi_pcc_hotkey_add (struct acpi_device *device)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#820: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:932:
+	if (device == NULL) {
 		return_VALUE(-EINVAL);
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!device"
#820: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:932:
+	if (device == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hotkey"
#843: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:951:
+	if (hotkey == NULL) {

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#907: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:984:
+static int __devexit acpi_pcc_hotkey_remove(struct acpi_device *device, int type)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#915: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:991:
+	if (!device || !hotkey) {
 		return_VALUE(-EINVAL);
+	}

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#923: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:997:
+		acpi_pcc_remove_device(device, acpi_pcc_proc_items,      ARRAY_SIZE(acpi_pcc_proc_items));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#931: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:1004:
+	if (ACPI_FAILURE(status)) {
 		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Error removing notify handler\n"));
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#939: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:1009:
+	if (hotkey != NULL) {
+		kfree(hotkey);
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hotkey"
#939: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:1009:
+	if (hotkey != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#946: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:1016:
+/* *********************************************************************
+   Module entry point

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#947: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:1017:
+   ********************************************************************* */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#954: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:1024:
+	printk(KERN_INFO LOGPREFIX "loading...\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#957: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:1027:
+		printk(KERN_INFO LOGPREFIX "ACPI disabled.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#974: FILE: drivers/staging/pcc-acpi/pcc-acpi.c:1044:
+	printk(KERN_INFO LOGPREFIX "unloading...\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000213715.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 69 warnings, 11 checks, 921 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000213715.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
