CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: drivers/dma/dmaengine.c:110:
+	if (unlikely(chan->slow_ref) &&
+		atomic_read(&chan->refcount.refcount) > 1)

CHECK:BRACES: Unbalanced braces around else statement
#109: FILE: drivers/dma/dmaengine.c:112:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: drivers/dma/dmaengine.c:114:
+		if (local_read(&(per_cpu_ptr(chan->local,
+			get_cpu())->refcount)) > 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: drivers/dma/dmaengine.c:153:
+	bitmap_and(has.bits, want->bits, chan->device->cap_mask.bits,
+		DMA_TX_TYPE_END);

CHECK:BRACES: braces {} should be used on all arms of this statement
#181: FILE: drivers/dma/dmaengine.c:185:
+				if (ack == DMA_ACK) {
[...]
+				} else if (ack == DMA_NAK)
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: drivers/dma/dmaengine.c:278:
+			kref_put(&chan->device->refcount,
+				dma_async_device_cleanup);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: drivers/dma/dmaengine.c:322:
+				kref_put(&chan->device->refcount,
+					dma_async_device_cleanup);

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#459: FILE: include/linux/dmaengine.h:32:
+ * enum dma_state - resource PNP/power managment state
                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#521: FILE: include/linux/dmaengine.h:145:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#602: FILE: net/core/dev.c:156:
+	spinlock_t lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: net/core/dev.c:163:
+netdev_dma_event(struct dma_client *client, struct dma_chan *chan,
+	enum dma_state state);

WARNING:LINE_SPACING: Missing a blank line after declarations
#631: FILE: net/core/dev.c:2033:
+		int chan_idx;
+		for_each_cpu_mask(chan_idx, net_dma.channel_mask) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#633: FILE: net/core/dev.c:2035:
+			struct dma_chan *chan = net_dma.channels[chan_idx];
+			if (chan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: net/core/dev.c:3619:
+netdev_dma_event(struct dma_client *client, struct dma_chan *chan,
+	enum dma_state state)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#705: FILE: net/core/dev.c:3629:
+		for (i = 0; i < NR_CPUS; i++)

CHECK:BRACES: braces {} should be used on all arms of this statement
#706: FILE: net/core/dev.c:3630:
+			if (net_dma->channels[i] == chan) {
[...]
+			} else if (net_dma->channels[i] == NULL && pos < 0)
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!net_dma->channels[i]"
#709: FILE: net/core/dev.c:3633:
+			} else if (net_dma->channels[i] == NULL && pos < 0)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#722: FILE: net/core/dev.c:3644:
+		for (i = 0; i < NR_CPUS; i++)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412945.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 13 checks, 652 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412945.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
