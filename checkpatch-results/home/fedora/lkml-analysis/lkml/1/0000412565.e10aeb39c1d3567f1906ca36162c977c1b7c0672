WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: net/unix/garbage.c:129:
+		struct unix_sock *u = unix_sk(s);
+		spin_lock(&unix_gc_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#138: FILE: net/unix/garbage.c:131:
+			BUG_ON(!list_empty(&u->link));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#141: FILE: net/unix/garbage.c:134:
+			BUG_ON(list_empty(&u->link));

WARNING:LINE_SPACING: Missing a blank line after declarations
#154: FILE: net/unix/garbage.c:146:
+		struct unix_sock *u = unix_sk(s);
+		spin_lock(&unix_gc_lock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#155: FILE: net/unix/garbage.c:147:
+		BUG_ON(list_empty(&u->link));

CHECK:SPACING: No space is necessary after a cast
#165: FILE: net/unix/garbage.c:157:
+	return (struct sk_buff *) &sk->sk_receive_queue;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sk' - possible side-effects?
#171: FILE: net/unix/garbage.c:160:
+#define receive_queue_for_each_skb(sk, next, skb) \
+	for (skb = sock_queue_head(sk)->next, next = skb->next; \
+	     skb != sock_queue_head(sk); skb = next, next = skb->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'next' - possible side-effects?
#171: FILE: net/unix/garbage.c:160:
+#define receive_queue_for_each_skb(sk, next, skb) \
+	for (skb = sock_queue_head(sk)->next, next = skb->next; \
+	     skb != sock_queue_head(sk); skb = next, next = skb->next)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'next' may be better as '(next)' to avoid precedence issues
#171: FILE: net/unix/garbage.c:160:
+#define receive_queue_for_each_skb(sk, next, skb) \
+	for (skb = sock_queue_head(sk)->next, next = skb->next; \
+	     skb != sock_queue_head(sk); skb = next, next = skb->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'skb' - possible side-effects?
#171: FILE: net/unix/garbage.c:160:
+#define receive_queue_for_each_skb(sk, next, skb) \
+	for (skb = sock_queue_head(sk)->next, next = skb->next; \
+	     skb != sock_queue_head(sk); skb = next, next = skb->next)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#188: FILE: net/unix/garbage.c:173:
+		/*
+		 *	Do we have file descriptors ?

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#193: FILE: net/unix/garbage.c:178:
+			/*
+			 *	Process the descriptors of this socket

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: net/unix/garbage.c:182:
+			struct file **fp = UNIXCB(skb).fp->fp;
+			while (nfd--) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#199: FILE: net/unix/garbage.c:184:
+				/*
+				 *	Get the socket the fd matches

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: net/unix/garbage.c:188:
+				struct sock *sk = unix_get_socket(*fp++);
+				if(sk) {

ERROR:SPACING: space required before the open parenthesis '('
#203: FILE: net/unix/garbage.c:188:
+				if(sk) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hitlist"
#208: FILE: net/unix/garbage.c:193:
+			if (hit && hitlist != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#222: FILE: net/unix/garbage.c:205:
+	if (x->sk_state != TCP_LISTEN)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#224: FILE: net/unix/garbage.c:207:
+	else {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#231: FILE: net/unix/garbage.c:214:
+		/*
+		 * For a listening socket collect the queued embryos

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#239: FILE: net/unix/garbage.c:222:
+			/*
+			 * An embryo cannot be in-flight, so it's safe

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#242: FILE: net/unix/garbage.c:225:
+			BUG_ON(!list_empty(&u->link));

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#278: FILE: net/unix/garbage.c:254:
+	/*
+	 * If this is still a candidate, move it to the end of the

ERROR:INITIALISED_STATIC: do not initialise statics to false
#295: FILE: net/unix/garbage.c:266:
+	static bool gc_in_progress = false;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: net/unix/garbage.c:299:
+		BUG_ON(inflight_refs < 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#349: FILE: net/unix/garbage.c:300:
+		BUG_ON(total_refs < inflight_refs);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#451: FILE: net/unix/garbage.c:338:
+	/*
+	 * Now gc_candidates contains only garbage.  Restore original

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#495: FILE: net/unix/garbage.c:354:
+	BUG_ON(!list_empty(&gc_candidates));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412565.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 18 warnings, 8 checks, 423 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412565.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
