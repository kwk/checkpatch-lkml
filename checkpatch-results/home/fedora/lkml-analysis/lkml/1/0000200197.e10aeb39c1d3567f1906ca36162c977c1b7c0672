ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: checkpoint/rstr_process.c:34:
+static int cr_kernel_thread(int (*fn)(void *), void * arg,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: checkpoint/rstr_process.c:35:
+static int cr_kernel_thread(int (*fn)(void *), void * arg,
+		unsigned long flags, pid_t pid)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->fs"
#128: FILE: checkpoint/rstr_process.c:37:
+	if (current->fs == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#161: FILE: checkpoint/rstr_process.c:70:
+}
+static int restart_thread(void *arg)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#211: FILE: checkpoint/rstr_process.c:120:
+	if (!ret && (ht->state & (EXIT_ZOMBIE|EXIT_DEAD))) {
 	                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#211: FILE: checkpoint/rstr_process.c:120:
+	if (!ret && (ht->state & (EXIT_ZOMBIE|EXIT_DEAD))) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#236: FILE: checkpoint/rstr_process.c:145:
+	if (parent < 0) {
[...]
+	} else if (parent != 0)
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: checkpoint/rstr_process.c:156:
+		pid = cr_kernel_thread(restart_thread, &thr_ctx,
+				CLONE_NEWNS | CLONE_NEWUTS | CLONE_NEWIPC |

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#251: FILE: checkpoint/rstr_process.c:160:
+		/* We should fork here a child with saved pid and
+		   correct flags */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#251: FILE: checkpoint/rstr_process.c:160:
+		   correct flags */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsk"
#263: FILE: checkpoint/rstr_process.c:172:
+	if (tsk == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#291: FILE: checkpoint/rstr_process.c:199:
+	if (parent < 0) {
[...]
+	} else if (parent != 0)
[...]

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/checkpoint.h:112:
+extern int cr_read_head(struct cr_ctx *ctx);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#325: FILE: include/linux/checkpoint.h:117:
+extern int cr_read_tail(struct cr_ctx *ctx);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000200197.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 3 warnings, 10 checks, 274 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000200197.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
