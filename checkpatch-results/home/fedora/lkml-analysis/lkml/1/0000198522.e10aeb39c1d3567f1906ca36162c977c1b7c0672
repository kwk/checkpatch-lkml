WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
>>>>> On Tue, Nov 25, 2008 at 02:41:47PM +0300, Vladislav Bolkhovitin wrote:

WARNING:TYPO_SPELLING: 'sybsystem' may be misspelled - perhaps 'subsystem'?
#110: 
>>>>>>>> I can test it with SCST SCSI target sybsystem  
                                             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#285: FILE: mm/readahead.c:210:
+			mapping, filp, offset, nr_to_read, ret);
 			         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: mm/readahead.c:210:
+	trace_mark(readahead_fadvise, "%p %p %lu %lu %d",
+			mapping, filp, offset, nr_to_read, ret);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#300: FILE: mm/readahead.c:230:
+	actual = __do_page_cache_readahead(mapping, filp, offset,
 	                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: mm/readahead.c:231:
+	actual = __do_page_cache_readahead(mapping, filp, offset,
+								nr_to_read, 0);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#304: FILE: mm/readahead.c:234:
+			mapping, filp, offset, nr_to_read, actual);
 			         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: mm/readahead.c:234:
+	trace_mark(readahead_mmap, "%p %p %lu %lu %d",
+			mapping, filp, offset, nr_to_read, actual);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#317: FILE: mm/readahead.c:265:
+			       struct file *filp,
 			                    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#329: FILE: mm/readahead.c:277:
+			mapping, filp, offset, req_size, ra, actual, async);
 			         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: mm/readahead.c:277:
+	trace_mark(readahead_generic, "%p %p %lu %lu %p %d %d",
+			mapping, filp, offset, req_size, ra, actual, async);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#340: FILE: mm/readahead.c:362:
+ * ^I- length of the sequential read sequence, or$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#341: FILE: mm/readahead.c:363:
+ * ^I- thrashing threshold in memory tight systems$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: mm/readahead.c:491:
+	if (mapping->backing_dev_info->context_readahead != 0 &&
+		try_context_readahead(mapping, ra, offset, req_size, max))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#513: FILE: mm/readahead.c:522:
+	return ra_submit(mapping, filp, offset, req_size, ra,
 	                          ^^^^

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#550: FILE: block/blk-sysfs.c:185:
+	.attr = {.name = "context_readahead", .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: include/linux/radix-tree.h:171:
+unsigned long radix_tree_prev_hole(struct radix_tree_root *root,
+				unsigned long index, unsigned long max_scan);

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#694: FILE: mm/readahead_trace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#712: FILE: mm/readahead_trace.c:19:
+#include <asm/atomic.h>

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#783: FILE: mm/readahead_trace.c:90:
+			       struct file *filp,
 			                    ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#804: FILE: mm/readahead_trace.c:111:
+	printk(KERN_DEBUG "readahead-%s(pid=%d(%s), dev=%02x:%02x(%s), "

WARNING:SPLIT_STRING: quoted string split across lines
#805: FILE: mm/readahead_trace.c:112:
+	printk(KERN_DEBUG "readahead-%s(pid=%d(%s), dev=%02x:%02x(%s), "
+		"ino=%lu(%s), req=%lu+%lu, ra=%lu+%d-%d, async=%d) = %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#819: FILE: mm/readahead_trace.c:126:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#824: FILE: mm/readahead_trace.c:131:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#832: FILE: mm/readahead_trace.c:139:
+	filp     = va_arg(*args, typeof(filp));
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#832: FILE: mm/readahead_trace.c:139:
+	filp     = va_arg(*args, typeof(filp));
 	                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#839: FILE: mm/readahead_trace.c:146:
+	do_readahead_trace(mapping, filp, offset, req_size, ra, actual, async);
 	                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#847: FILE: mm/readahead_trace.c:154:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#852: FILE: mm/readahead_trace.c:159:
+	filp     = va_arg(*args, typeof(filp));
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#852: FILE: mm/readahead_trace.c:159:
+	filp     = va_arg(*args, typeof(filp));
 	                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#859: FILE: mm/readahead_trace.c:166:
+	do_readahead_trace(mapping, filp, 0, 0, &ra, actual, 0);
 	                            ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#879: FILE: mm/readahead_trace.c:186:
+	printk(KERN_DEBUG "%s(pid=%d(%s), dev=%02x:%02x(%s), ino=%lu(%s), "

WARNING:SPLIT_STRING: quoted string split across lines
#880: FILE: mm/readahead_trace.c:187:
+	printk(KERN_DEBUG "%s(pid=%d(%s), dev=%02x:%02x(%s), ino=%lu(%s), "
+			"pos=%llu, count=%lu)\n",

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#891: FILE: mm/readahead_trace.c:198:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#891: FILE: mm/readahead_trace.c:198:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#891: FILE: mm/readahead_trace.c:198:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#891: FILE: mm/readahead_trace.c:198:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#904: FILE: mm/readahead_trace.c:211:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#904: FILE: mm/readahead_trace.c:211:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#904: FILE: mm/readahead_trace.c:211:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#904: FILE: mm/readahead_trace.c:211:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#905: FILE: mm/readahead_trace.c:212:
+static void jdo_do_generic_file_read(struct file *filp,
                                                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#910: FILE: mm/readahead_trace.c:217:
+	read_trace("do_generic_file_read", filp, *ppos, desc->count);
 	                                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#916: FILE: mm/readahead_trace.c:223:
+					struct file *filp,
 					             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#921: FILE: mm/readahead_trace.c:228:
+	read_trace("do_generic_mapping_read", filp, *ppos, desc->count);
 	                                      ^^^^

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#937: FILE: mm/readahead_trace.c:244:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#937: FILE: mm/readahead_trace.c:244:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#937: FILE: mm/readahead_trace.c:244:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#937: FILE: mm/readahead_trace.c:244:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#942: FILE: mm/readahead_trace.c:249:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#942: FILE: mm/readahead_trace.c:249:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#942: FILE: mm/readahead_trace.c:249:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#942: FILE: mm/readahead_trace.c:249:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#955: FILE: mm/readahead_trace.c:262:
+			printk(KERN_ERR "unable to register probe %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: mm/readahead_trace.c:263:
+			printk(KERN_ERR "unable to register probe %s\n",
+					jprobe_array[i].kp.symbol_name);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#973: FILE: mm/readahead_trace.c:280:
+static struct readahead_trace_probe probe_array[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1004: FILE: mm/readahead_trace.c:311:
+			printk(KERN_ERR "unable to register probe %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1005: FILE: mm/readahead_trace.c:312:
+			printk(KERN_ERR "unable to register probe %s\n",
+					probe_array[i].name);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#1018: FILE: mm/readahead_trace.c:325:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1031: FILE: mm/readahead_trace.c:338:
+	seq_printf(s, "%-10s %10s %10s %10s %10s %10s %10s\n",
+			"pattern",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1041: FILE: mm/readahead_trace.c:348:
+		seq_printf(s, "%-10s %10lu %10lu %10lu %10lu %10lu %10lu\n",
+				ra_pattern_names[i],

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1065: FILE: mm/readahead_trace.c:372:
+static struct file_operations readahead_stats_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1090: FILE: mm/readahead_trace.c:397:
+}
+static int read_jprobes_get(void *data, u64 *val)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1109: FILE: mm/readahead_trace.c:416:
+};
+static struct readahead_debug debug;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1152: FILE: mm/readahead_trace.c:459:
+	printk(KERN_ERR "readahead: failed to create debugfs directory\n");

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1218: FILE: mm/filemap.c:985:
+void do_generic_file_read(struct file *filp, loff_t *ppos,
                                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1219: FILE: mm/filemap.c:986:
+void do_generic_file_read(struct file *filp, loff_t *ppos,
 		read_descriptor_t *desc, read_actor_t actor)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000198522.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 54 warnings, 14 checks, 914 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000198522.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
