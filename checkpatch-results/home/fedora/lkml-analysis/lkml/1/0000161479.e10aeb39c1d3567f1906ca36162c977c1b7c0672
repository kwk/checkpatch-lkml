WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: arch/powerpc/include/asm/kvm_e500.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: missing space after struct definition
#74: FILE: arch/powerpc/include/asm/kvm_e500.h:25:
+struct tlbe{

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#125: FILE: arch/powerpc/kvm/Kconfig:46:
+config KVM_E500
+	bool "KVM support for PowerPC E500 processors"
+	depends on EXPERIMENTAL && E500
+	select KVM
+	---help---
+	  Support running unmodified E500 guest kernels in virtual machines on
+	  E500 host processors.
+
+	  This module provides access to the hardware capabilities through
+	  a character device node named /dev/kvm.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#164: FILE: arch/powerpc/kvm/e500.c:1:
+/*

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#214: FILE: arch/powerpc/kvm/e500.c:51:
+		r = -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: arch/powerpc/kvm/e500.c:70:
+                               struct kvm_translation *tr)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: arch/powerpc/kvm/e500.c:70:
+                               struct kvm_translation *tr)$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#321: FILE: arch/powerpc/kvm/e500_emulate.c:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: arch/powerpc/kvm/e500_emulate.c:28:
+                           unsigned int inst, int *advance)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: arch/powerpc/kvm/e500_emulate.c:28:
+                           unsigned int inst, int *advance)$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#359: FILE: arch/powerpc/kvm/e500_emulate.c:39:
+		switch (get_xop(inst)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#370: FILE: arch/powerpc/kvm/e500_emulate.c:50:
+			emulated = kvmppc_e500_emul_tlbsx(vcpu,rb);
 			                                      ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#402: FILE: arch/powerpc/kvm/e500_emulate.c:82:
+		vcpu_e500->pid[0] = vcpu->arch.shadow_pid =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#496: FILE: arch/powerpc/kvm/e500_tlb.c:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#530: FILE: arch/powerpc/kvm/e500_tlb.c:35:
+	printk("| %8s | %8s | %8s | %8s | %8s |\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: arch/powerpc/kvm/e500_tlb.c:36:
+	printk("| %8s | %8s | %8s | %8s | %8s |\n",
+			"nr", "mas1", "mas2", "mas3", "mas7");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#534: FILE: arch/powerpc/kvm/e500_tlb.c:39:
+		printk("Guest TLB%d:\n", tlbsel);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#538: FILE: arch/powerpc/kvm/e500_tlb.c:43:
+				printk(" G[%d][%3d] |  %08X | %08X | %08X | %08X |\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: arch/powerpc/kvm/e500_tlb.c:44:
+				printk(" G[%d][%3d] |  %08X | %08X | %08X | %08X |\n",
+					tlbsel, i, tlbe->mas1, tlbe->mas2,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#545: FILE: arch/powerpc/kvm/e500_tlb.c:50:
+		printk("Shadow TLB%d:\n", tlbsel);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#549: FILE: arch/powerpc/kvm/e500_tlb.c:54:
+				printk(" S[%d][%3d] |  %08X | %08X | %08X | %08X |\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: arch/powerpc/kvm/e500_tlb.c:55:
+				printk(" S[%d][%3d] |  %08X | %08X | %08X | %08X |\n",
+					tlbsel, i, tlbe->mas1, tlbe->mas2,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#556: FILE: arch/powerpc/kvm/e500_tlb.c:61:
+static inline unsigned int tlb0_get_next_victim(

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#575: FILE: arch/powerpc/kvm/e500_tlb.c:80:
+	return tlbe->mas3 & (MAS3_SW|MAS3_UW);
 	                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#586: FILE: arch/powerpc/kvm/e500_tlb.c:91:
+		 * supervisor permissions into user permissions. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#612: FILE: arch/powerpc/kvm/e500_tlb.c:117:
+static inline void write_host_tlbe(struct kvmppc_vcpu_e500 *vcpu_e500,
+		int tlbsel, int esel)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: arch/powerpc/kvm/e500_tlb.c:166:
+static int kvmppc_e500_tlb_index(struct kvmppc_vcpu_e500 *vcpu_e500,
+		gva_t eaddr, int tlbsel, unsigned int pid, int as)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid != pid'
#677: FILE: arch/powerpc/kvm/e500_tlb.c:182:
+		if (tid && (tid != pid))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: arch/powerpc/kvm/e500_tlb.c:198:
+static void kvmppc_e500_shadow_release(struct kvmppc_vcpu_e500 *vcpu_e500,
+		int tlbsel, int esel)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: arch/powerpc/kvm/e500_tlb.c:216:
+static void kvmppc_e500_stlbe_invalidate(struct kvmppc_vcpu_e500 *vcpu_e500,
+		int tlbsel, int esel)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#718: FILE: arch/powerpc/kvm/e500_tlb.c:223:
+	KVMTRACE_5D(STLB_INVAL, &vcpu_e500->vcpu, index_of(tlbsel, esel),
+			stlbe->mas1, stlbe->mas2, stlbe->mas3, stlbe->mas7,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: arch/powerpc/kvm/e500_tlb.c:228:
+static void kvmppc_e500_tlb1_invalidate(struct kvmppc_vcpu_e500 *vcpu_e500,
+		gva_t eaddr, gva_t eend, u32 tid)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid != pid'
#743: FILE: arch/powerpc/kvm/e500_tlb.c:248:
+		if (tid && (tid != pid))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: arch/powerpc/kvm/e500_tlb.c:257:
+static inline void kvmppc_e500_deliver_tlb_miss(struct kvm_vcpu *vcpu,
+		unsigned int eaddr, int as)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: arch/powerpc/kvm/e500_tlb.c:284:
+static inline void kvmppc_e500_shadow_map(struct kvmppc_vcpu_e500 *vcpu_e500,
+	u64 gvaddr, gfn_t gfn, struct tlbe *gtlbe, int tlbsel, int esel)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#790: FILE: arch/powerpc/kvm/e500_tlb.c:295:
+		printk(KERN_ERR "Couldn't get guest page for gfn %lx!\n", gfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#813: FILE: arch/powerpc/kvm/e500_tlb.c:318:
+	KVMTRACE_5D(STLB_WRITE, &vcpu_e500->vcpu, index_of(tlbsel, esel),
+			stlbe->mas1, stlbe->mas2, stlbe->mas3, stlbe->mas7,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: arch/powerpc/kvm/e500_tlb.c:324:
+static int kvmppc_e500_stlbe_map(struct kvmppc_vcpu_e500 *vcpu_e500,
+		int tlbsel, int esel)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#826: FILE: arch/powerpc/kvm/e500_tlb.c:331:
+	kvmppc_e500_shadow_map(vcpu_e500, get_tlb_eaddr(gtlbe),
+			get_tlb_raddr(gtlbe) >> PAGE_SHIFT,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#833: FILE: arch/powerpc/kvm/e500_tlb.c:338:
+ * the shadow TLB. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: arch/powerpc/kvm/e500_tlb.c:341:
+static int kvmppc_e500_tlb1_map(struct kvmppc_vcpu_e500 *vcpu_e500,
+		u64 gvaddr, gfn_t gfn, struct tlbe *gtlbe)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#852: FILE: arch/powerpc/kvm/e500_tlb.c:357:
+ * proper permission bits. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: arch/powerpc/kvm/e500_tlb.c:374:
+static int kvmppc_e500_gtlbe_invalidate(struct kvmppc_vcpu_e500 *vcpu_e500,
+		int tlbsel, int esel)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: arch/powerpc/kvm/e500_tlb.c:383:
+		kvmppc_e500_tlb1_invalidate(vcpu_e500, get_tlb_eaddr(gtlbe),
+				get_tlb_end(gtlbe),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#910: FILE: arch/powerpc/kvm/e500_tlb.c:415:
+		esel = kvmppc_e500_tlb_index(vcpu_e500, ea, tlbsel,
+				get_cur_pid(vcpu), -1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1005: FILE: arch/powerpc/kvm/e500_tlb.c:510:
+		kvmppc_e500_tlb1_invalidate(vcpu_e500, eaddr,
+				get_tlb_end(gtlbe), tid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1014: FILE: arch/powerpc/kvm/e500_tlb.c:519:
+	KVMTRACE_5D(GTLB_WRITE, vcpu, vcpu_e500->mas0,
+			gtlbe->mas1, gtlbe->mas2, gtlbe->mas3, gtlbe->mas7,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1038: FILE: arch/powerpc/kvm/e500_tlb.c:543:
+			 * are mapped on the fly. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1041: FILE: arch/powerpc/kvm/e500_tlb.c:546:
+			sesel = kvmppc_e500_tlb1_map(vcpu_e500, eaddr,
+					raddr >> PAGE_SHIFT, gtlbe);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1045: FILE: arch/powerpc/kvm/e500_tlb.c:550:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1082: FILE: arch/powerpc/kvm/e500_tlb.c:587:
+gpa_t kvmppc_mmu_xlate(struct kvm_vcpu *vcpu, unsigned int index,
+			gva_t eaddr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1106: FILE: arch/powerpc/kvm/e500_tlb.c:611:
+void kvmppc_mmu_map(struct kvm_vcpu *vcpu, u64 eaddr, gpa_t gpaddr,
+			unsigned int index)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1122: FILE: arch/powerpc/kvm/e500_tlb.c:627:
+		struct tlbe *gtlbe
+			= &vcpu_e500->guest_tlb[tlbsel][esel];

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1130: FILE: arch/powerpc/kvm/e500_tlb.c:635:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1137: FILE: arch/powerpc/kvm/e500_tlb.c:642:
+int kvmppc_e500_tlb_search(struct kvm_vcpu *vcpu,
+				gva_t eaddr, unsigned int pid, int as)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vcpu_e500->guest_tlb[0]"
#1177: FILE: arch/powerpc/kvm/e500_tlb.c:682:
+	if (vcpu_e500->guest_tlb[0] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vcpu_e500->shadow_tlb[0]"
#1183: FILE: arch/powerpc/kvm/e500_tlb.c:688:
+	if (vcpu_e500->shadow_tlb[0] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vcpu_e500->guest_tlb[1]"
#1189: FILE: arch/powerpc/kvm/e500_tlb.c:694:
+	if (vcpu_e500->guest_tlb[1] == NULL)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1193: FILE: arch/powerpc/kvm/e500_tlb.c:698:
+	vcpu_e500->shadow_tlb[1] =
+		kzalloc(sizeof(struct tlbe) * tlb1_entry_num, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vcpu_e500->shadow_tlb[1]"
#1195: FILE: arch/powerpc/kvm/e500_tlb.c:700:
+	if (vcpu_e500->shadow_tlb[1] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vcpu_e500->shadow_pages[0]"
#1200: FILE: arch/powerpc/kvm/e500_tlb.c:705:
+	if (vcpu_e500->shadow_pages[0] == NULL)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1203: FILE: arch/powerpc/kvm/e500_tlb.c:708:
+	vcpu_e500->shadow_pages[1] = (struct page **)
+		kzalloc(sizeof(struct page *) * tlb1_entry_num, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vcpu_e500->shadow_pages[1]"
#1205: FILE: arch/powerpc/kvm/e500_tlb.c:710:
+	if (vcpu_e500->shadow_pages[1] == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1239: FILE: arch/powerpc/kvm/e500_tlb.h:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#1262: FILE: arch/powerpc/kvm/e500_tlb.h:24:
+#define KVM_E500_TLB0_WAY_SIZE		(1UL << KVM_E500_TLB0_WAY_SIZE_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1266: FILE: arch/powerpc/kvm/e500_tlb.h:28:
+#define KVM_E500_TLB0_WAY_NUM		(1UL << KVM_E500_TLB0_WAY_NUM_BIT)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1276: FILE: arch/powerpc/kvm/e500_tlb.h:38:
+#define E500_TLB_USER_PERM_MASK (MAS3_UX|MAS3_UR|MAS3_UW)
                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1276: FILE: arch/powerpc/kvm/e500_tlb.h:38:
+#define E500_TLB_USER_PERM_MASK (MAS3_UX|MAS3_UR|MAS3_UW)
                                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1277: FILE: arch/powerpc/kvm/e500_tlb.h:39:
+#define E500_TLB_SUPER_PERM_MASK (MAS3_SX|MAS3_SR|MAS3_SW)
                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1277: FILE: arch/powerpc/kvm/e500_tlb.h:39:
+#define E500_TLB_SUPER_PERM_MASK (MAS3_SX|MAS3_SR|MAS3_SW)
                                                  ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1284: FILE: arch/powerpc/kvm/e500_tlb.h:46:
+extern void kvmppc_dump_tlbs(struct kvm_vcpu *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1285: FILE: arch/powerpc/kvm/e500_tlb.h:47:
+extern int kvmppc_e500_emul_tlbwe(struct kvm_vcpu *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvm_vcpu *' should also have an identifier name
#1285: FILE: arch/powerpc/kvm/e500_tlb.h:47:
+extern int kvmppc_e500_emul_tlbwe(struct kvm_vcpu *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1286: FILE: arch/powerpc/kvm/e500_tlb.h:48:
+extern int kvmppc_e500_emul_tlbre(struct kvm_vcpu *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvm_vcpu *' should also have an identifier name
#1286: FILE: arch/powerpc/kvm/e500_tlb.h:48:
+extern int kvmppc_e500_emul_tlbre(struct kvm_vcpu *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1287: FILE: arch/powerpc/kvm/e500_tlb.h:49:
+extern int kvmppc_e500_emul_tlbivax(struct kvm_vcpu *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvm_vcpu *' should also have an identifier name
#1287: FILE: arch/powerpc/kvm/e500_tlb.h:49:
+extern int kvmppc_e500_emul_tlbivax(struct kvm_vcpu *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1287: FILE: arch/powerpc/kvm/e500_tlb.h:49:
+extern int kvmppc_e500_emul_tlbivax(struct kvm_vcpu *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1287: FILE: arch/powerpc/kvm/e500_tlb.h:49:
+extern int kvmppc_e500_emul_tlbivax(struct kvm_vcpu *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1288: FILE: arch/powerpc/kvm/e500_tlb.h:50:
+extern int kvmppc_e500_emul_tlbsx(struct kvm_vcpu *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvm_vcpu *' should also have an identifier name
#1288: FILE: arch/powerpc/kvm/e500_tlb.h:50:
+extern int kvmppc_e500_emul_tlbsx(struct kvm_vcpu *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1288: FILE: arch/powerpc/kvm/e500_tlb.h:50:
+extern int kvmppc_e500_emul_tlbsx(struct kvm_vcpu *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1289: FILE: arch/powerpc/kvm/e500_tlb.h:51:
+extern int kvmppc_e500_tlb_search(struct kvm_vcpu *, gva_t, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvm_vcpu *' should also have an identifier name
#1289: FILE: arch/powerpc/kvm/e500_tlb.h:51:
+extern int kvmppc_e500_tlb_search(struct kvm_vcpu *, gva_t, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gva_t' should also have an identifier name
#1289: FILE: arch/powerpc/kvm/e500_tlb.h:51:
+extern int kvmppc_e500_tlb_search(struct kvm_vcpu *, gva_t, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1289: FILE: arch/powerpc/kvm/e500_tlb.h:51:
+extern int kvmppc_e500_tlb_search(struct kvm_vcpu *, gva_t, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1289: FILE: arch/powerpc/kvm/e500_tlb.h:51:
+extern int kvmppc_e500_tlb_search(struct kvm_vcpu *, gva_t, unsigned int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1290: FILE: arch/powerpc/kvm/e500_tlb.h:52:
+extern void kvmppc_e500_tlb_put(struct kvm_vcpu *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvm_vcpu *' should also have an identifier name
#1290: FILE: arch/powerpc/kvm/e500_tlb.h:52:
+extern void kvmppc_e500_tlb_put(struct kvm_vcpu *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1291: FILE: arch/powerpc/kvm/e500_tlb.h:53:
+extern void kvmppc_e500_tlb_load(struct kvm_vcpu *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvm_vcpu *' should also have an identifier name
#1291: FILE: arch/powerpc/kvm/e500_tlb.h:53:
+extern void kvmppc_e500_tlb_load(struct kvm_vcpu *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1291: FILE: arch/powerpc/kvm/e500_tlb.h:53:
+extern void kvmppc_e500_tlb_load(struct kvm_vcpu *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1292: FILE: arch/powerpc/kvm/e500_tlb.h:54:
+extern int kvmppc_e500_tlb_init(struct kvmppc_vcpu_e500 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvmppc_vcpu_e500 *' should also have an identifier name
#1292: FILE: arch/powerpc/kvm/e500_tlb.h:54:
+extern int kvmppc_e500_tlb_init(struct kvmppc_vcpu_e500 *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1293: FILE: arch/powerpc/kvm/e500_tlb.h:55:
+extern void kvmppc_e500_tlb_uninit(struct kvmppc_vcpu_e500 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvmppc_vcpu_e500 *' should also have an identifier name
#1293: FILE: arch/powerpc/kvm/e500_tlb.h:55:
+extern void kvmppc_e500_tlb_uninit(struct kvmppc_vcpu_e500 *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1294: FILE: arch/powerpc/kvm/e500_tlb.h:56:
+extern void kvmppc_e500_tlb_setup(struct kvmppc_vcpu_e500 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvmppc_vcpu_e500 *' should also have an identifier name
#1294: FILE: arch/powerpc/kvm/e500_tlb.h:56:
+extern void kvmppc_e500_tlb_setup(struct kvmppc_vcpu_e500 *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1310: FILE: arch/powerpc/kvm/e500_tlb.h:72:
+	unsigned int pgsize = get_tlb_size(tlbe);
+	return 1ULL << 10 << (pgsize << 1);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1316: FILE: arch/powerpc/kvm/e500_tlb.h:78:
+	u64 bytes = get_tlb_bytes(tlbe);
+	return get_tlb_eaddr(tlbe) + bytes - 1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1322: FILE: arch/powerpc/kvm/e500_tlb.h:84:
+	u64 rpn = tlbe->mas7;
+	return (rpn << 32) | (tlbe->mas3 & 0xfffff000);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1350: FILE: arch/powerpc/kvm/e500_tlb.h:112:
+static inline unsigned int get_cur_spid(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1356: FILE: arch/powerpc/kvm/e500_tlb.h:118:
+static inline unsigned int get_cur_sas(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1362: FILE: arch/powerpc/kvm/e500_tlb.h:124:
+static inline unsigned int get_tlb_tlbsel(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1372: FILE: arch/powerpc/kvm/e500_tlb.h:134:
+static inline unsigned int get_tlb_nv_bit(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1378: FILE: arch/powerpc/kvm/e500_tlb.h:140:
+static inline unsigned int get_tlb_esel_bit(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1384: FILE: arch/powerpc/kvm/e500_tlb.h:146:
+static inline unsigned int get_tlb_esel(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1402: FILE: arch/powerpc/kvm/e500_tlb.h:164:
+static inline int tlbe_is_host_safe(const struct kvm_vcpu *vcpu,
+			const struct tlbe *tlbe)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161479.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 45 warnings, 61 checks, 1339 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161479.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
