WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#51: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: arch/arm/plat-omap/include/mach/iommu.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bytes' - possible side-effects?
#168: FILE: arch/arm/plat-omap/include/mach/iommu.h:113:
+#define iopgsz_max(bytes)			\
+	(((bytes) >= SZ_16M) ? SZ_16M :		\
+	 ((bytes) >= SZ_1M)  ? SZ_1M  :		\
+	 ((bytes) >= SZ_64K) ? SZ_64K :		\
+	 ((bytes) >= SZ_4K)  ? SZ_4K  :	0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bytes' - possible side-effects?
#174: FILE: arch/arm/plat-omap/include/mach/iommu.h:119:
+#define bytes_to_iopgsz(bytes)				\
+	(((bytes) == SZ_16M) ? MMU_CAM_PGSZ_16M :	\
+	 ((bytes) == SZ_1M)  ? MMU_CAM_PGSZ_1M  :	\
+	 ((bytes) == SZ_64K) ? MMU_CAM_PGSZ_64K :	\
+	 ((bytes) == SZ_4K)  ? MMU_CAM_PGSZ_4K  : -1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'iopgsz' - possible side-effects?
#180: FILE: arch/arm/plat-omap/include/mach/iommu.h:125:
+#define iopgsz_to_bytes(iopgsz)				\
+	(((iopgsz) == MMU_CAM_PGSZ_16M)	? SZ_16M :	\
+	 ((iopgsz) == MMU_CAM_PGSZ_1M)	? SZ_1M  :	\
+	 ((iopgsz) == MMU_CAM_PGSZ_64K)	? SZ_64K :	\
+	 ((iopgsz) == MMU_CAM_PGSZ_4K)	? SZ_4K  : 0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: arch/arm/plat-omap/include/mach/iommu.h:136:
+extern u32 iommu_arch_version(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: arch/arm/plat-omap/include/mach/iommu.h:138:
+extern int load_iotlb_entry(struct iommu *obj, struct iotlb_entry *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: arch/arm/plat-omap/include/mach/iommu.h:139:
+extern void flush_iotlb_page(struct iommu *obj, u32 da);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: arch/arm/plat-omap/include/mach/iommu.h:140:
+extern void flush_iotlb_range(struct iommu *obj, u32 start, u32 end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: arch/arm/plat-omap/include/mach/iommu.h:141:
+extern void flush_iotlb_all(struct iommu *obj);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: arch/arm/plat-omap/include/mach/iommu.h:145:
+extern int iopgtable_store_entry(struct iommu *obj, struct iotlb_entry *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#201: FILE: arch/arm/plat-omap/include/mach/iommu.h:146:
+extern size_t iopgtable_clear_entry(struct iommu *obj, u32 iova);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: arch/arm/plat-omap/include/mach/iommu.h:148:
+extern struct iommu *iommu_get(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#204: FILE: arch/arm/plat-omap/include/mach/iommu.h:149:
+extern void iommu_put(struct iommu *obj);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#206: FILE: arch/arm/plat-omap/include/mach/iommu.h:151:
+extern void iommu_save_ctx(struct iommu *obj);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#207: FILE: arch/arm/plat-omap/include/mach/iommu.h:152:
+extern void iommu_restore_ctx(struct iommu *obj);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: arch/arm/plat-omap/include/mach/iommu.h:154:
+extern int install_iommu_arch(const struct iommu_functions *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: arch/arm/plat-omap/include/mach/iommu.h:155:
+extern void uninstall_iommu_arch(const struct iommu_functions *ops);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#219: FILE: arch/arm/plat-omap/iommu.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#240: FILE: arch/arm/plat-omap/iommu.c:22:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#296: FILE: arch/arm/plat-omap/iommu.c:78:
+	BUG_ON(!arch_iommu || !arch_iommu->enable);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#311: FILE: arch/arm/plat-omap/iommu.c:93:
+	BUG_ON(!arch_iommu || !arch_iommu->disable);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#326: FILE: arch/arm/plat-omap/iommu.c:108:
+	BUG_ON(!arch_iommu || !arch_iommu->dump_ctx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#340: FILE: arch/arm/plat-omap/iommu.c:122:
+	BUG_ON(!arch_iommu || !arch_iommu->cr_to_e || !cr || !e);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#347: FILE: arch/arm/plat-omap/iommu.c:129:
+	BUG_ON(!arch_iommu || !arch_iommu->cr_valid);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#358: FILE: arch/arm/plat-omap/iommu.c:140:
+	BUG_ON(!arch_iommu || !arch_iommu->alloc_cr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#368: FILE: arch/arm/plat-omap/iommu.c:150:
+	BUG_ON(!arch_iommu || !arch_iommu->cr_to_virt || !cr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#375: FILE: arch/arm/plat-omap/iommu.c:157:
+	BUG_ON(!arch_iommu || !arch_iommu->get_pte_attr || !e);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#382: FILE: arch/arm/plat-omap/iommu.c:164:
+	BUG_ON(!arch_iommu || !arch_iommu->fault_isr || !obj);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#391: FILE: arch/arm/plat-omap/iommu.c:173:
+	BUG_ON(!obj || !l);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#398: FILE: arch/arm/plat-omap/iommu.c:180:
+	BUG_ON(l->base != 0); /* Currently no preservation is used */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#405: FILE: arch/arm/plat-omap/iommu.c:187:
+	BUG_ON(!obj || !l);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#406: FILE: arch/arm/plat-omap/iommu.c:188:
+	BUG_ON(l->base != 0); /* Currently no preservation is used */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#416: FILE: arch/arm/plat-omap/iommu.c:198:
+	BUG_ON(!obj || !cr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#423: FILE: arch/arm/plat-omap/iommu.c:205:
+	BUG_ON(!obj || !cr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#433: FILE: arch/arm/plat-omap/iommu.c:215:
+	BUG_ON(!arch_iommu || !arch_iommu->dump_cr || !cr || !buf);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#492: FILE: arch/arm/plat-omap/iommu.c:274:
+	BUG_ON(!obj);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start <= da'
#511: FILE: arch/arm/plat-omap/iommu.c:293:
+		if ((start <= da) && (da < start + bytes)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#529: FILE: arch/arm/plat-omap/iommu.c:311:
+	BUG_ON(!obj);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#543: FILE: arch/arm/plat-omap/iommu.c:325:
+	BUG_ON(!obj);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#582: FILE: arch/arm/plat-omap/iommu.c:364:
+	BUG_ON(!iopte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iommu *' should also have an identifier name
#683: FILE: arch/arm/plat-omap/iommu.c:465:
+	int (*fn)(struct iommu *, u32, u32, u32);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#683: FILE: arch/arm/plat-omap/iommu.c:465:
+	int (*fn)(struct iommu *, u32, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#683: FILE: arch/arm/plat-omap/iommu.c:465:
+	int (*fn)(struct iommu *, u32, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#683: FILE: arch/arm/plat-omap/iommu.c:465:
+	int (*fn)(struct iommu *, u32, u32, u32);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#705: FILE: arch/arm/plat-omap/iommu.c:487:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#882: FILE: arch/arm/plat-omap/iommu.c:664:
+	BUG_ON(!obj);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#983: FILE: arch/arm/plat-omap/iommu.c:765:
+static int __devinit omap_iommu_probe(struct platform_device *pdev)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1051: FILE: arch/arm/plat-omap/iommu.c:833:
+	BUG_ON(!IS_ALIGNED((unsigned long)obj->iopgd, IOPGD_TABLE_SIZE));

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1068: FILE: arch/arm/plat-omap/iommu.c:850:
+static int __devexit omap_iommu_remove(struct platform_device *pdev)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1080: FILE: arch/arm/plat-omap/iommu.c:862:
+	BUG_ON(irq < 0);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1129: FILE: arch/arm/plat-omap/iommu.c:911:
+MODULE_ALIAS("platform:"DRV_NAME);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1138: FILE: arch/arm/plat-omap/iopgtable.h:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#1154: FILE: arch/arm/plat-omap/iopgtable.h:17:
+#define IOPGD_SIZE		(1 << IOPGD_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1164: FILE: arch/arm/plat-omap/iopgtable.h:27:
+#define IOPTE_SIZE		(1 << IOPTE_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1173: FILE: arch/arm/plat-omap/iopgtable.h:36:
+#define IOPGD_TABLE		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1175: FILE: arch/arm/plat-omap/iopgtable.h:38:
+#define IOPGD_SUPER		(1 << 18 | 2 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1178: FILE: arch/arm/plat-omap/iopgtable.h:41:
+#define IOPTE_LARGE		(1 << 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'iopgd' may be better as '(iopgd)' to avoid precedence issues
#1183: FILE: arch/arm/plat-omap/iopgtable.h:46:
+#define iopte_paddr(iopgd)	(*iopgd & ~((1 << 10) - 1))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1206: FILE: arch/arm/plat-omap/iopgtable.h:69:
+#define to_iommu(dev)							\
+	(struct iommu *)platform_get_drvdata(to_platform_device(dev))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000179721.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 34 warnings, 25 checks, 1142 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000179721.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
