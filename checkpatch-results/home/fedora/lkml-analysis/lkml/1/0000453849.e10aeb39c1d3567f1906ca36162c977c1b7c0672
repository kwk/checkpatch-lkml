WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
Make swsusp use memory bitmaps instead of page flags for marking 'nosave' and

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/suspend.h:37:
+extern int software_suspend(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/suspend.h:39:
+extern void __init register_nosave_region(unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#80: FILE: include/linux/suspend.h:39:
+extern void __init register_nosave_region(unsigned long, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#80: FILE: include/linux/suspend.h:39:
+extern void __init register_nosave_region(unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/suspend.h:40:
+extern int swsusp_page_is_forbidden(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#81: FILE: include/linux/suspend.h:40:
+extern int swsusp_page_is_forbidden(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/suspend.h:41:
+extern void swsusp_set_page_free(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#82: FILE: include/linux/suspend.h:41:
+extern void swsusp_set_page_free(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/linux/suspend.h:42:
+extern void swsusp_unset_page_free(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#83: FILE: include/linux/suspend.h:42:
+extern void swsusp_unset_page_free(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/suspend.h:43:
+extern unsigned long get_safe_page(gfp_t gfp_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: kernel/power/snapshot.c:452:
+static void memory_bm_find_bit(struct memory_bitmap *bm, unsigned long pfn,
+				void **addr, unsigned int *bit_nr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#201: FILE: kernel/power/snapshot.c:465:
+			BUG_ON(!zone_bm);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#212: FILE: kernel/power/snapshot.c:477:
+		BUG_ON(!bb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: kernel/power/snapshot.c:621:
+		region = list_entry(nosave_regions.prev,
+					struct nosave_region, list);

CHECK:CAMELCASE: Avoid CamelCase: <Report>
#286: FILE: kernel/power/snapshot.c:624:
+			goto Report;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#295: FILE: kernel/power/snapshot.c:633:
+	printk("swsusp: Registered nosave memory region: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: kernel/power/snapshot.c:634:
+	printk("swsusp: Registered nosave memory region: %016lx - %016lx\n",
+		start_pfn << PAGE_SHIFT, end_pfn << PAGE_SHIFT);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#364: FILE: kernel/power/snapshot.c:702:
+		printk("swsusp: Marking nosave pages: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: kernel/power/snapshot.c:703:
+		printk("swsusp: Marking nosave pages: %016lx - %016lx\n",
+				region->start_pfn << PAGE_SHIFT,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#386: FILE: kernel/power/snapshot.c:724:
+	BUG_ON(forbidden_pages_map || free_pages_map);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*bm1)...) over kzalloc(sizeof(struct memory_bitmap)...)
#388: FILE: kernel/power/snapshot.c:726:
+	bm1 = kzalloc(sizeof(struct memory_bitmap), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:CAMELCASE: Avoid CamelCase: <Free_first_object>
#394: FILE: kernel/power/snapshot.c:732:
+		goto Free_first_object;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*bm2)...) over kzalloc(sizeof(struct memory_bitmap)...)
#396: FILE: kernel/power/snapshot.c:734:
+	bm2 = kzalloc(sizeof(struct memory_bitmap), GFP_ATOMIC);

CHECK:CAMELCASE: Avoid CamelCase: <Free_first_bitmap>
#398: FILE: kernel/power/snapshot.c:736:
+		goto Free_first_bitmap;

CHECK:CAMELCASE: Avoid CamelCase: <Free_second_object>
#402: FILE: kernel/power/snapshot.c:740:
+		goto Free_second_object;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#408: FILE: kernel/power/snapshot.c:746:
+	printk("swsusp: Basic memory bitmaps created\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: kernel/power/snapshot.c:753:
+ ^Imemory_bm_free(bm1, PG_UNSAFE_CLEAR);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#415: FILE: kernel/power/snapshot.c:753:
+ ^Imemory_bm_free(bm1, PG_UNSAFE_CLEAR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: kernel/power/snapshot.c:753:
+ ^Imemory_bm_free(bm1, PG_UNSAFE_CLEAR);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#432: FILE: kernel/power/snapshot.c:770:
+	BUG_ON(!(forbidden_pages_map && free_pages_map));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#443: FILE: kernel/power/snapshot.c:781:
+	printk("swsusp: Basic memory bitmaps freed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: arch/x86_64/kernel/e820.c:279:
+			register_nosave_region(PFN_DOWN(paddr),
+						PFN_UP(ei->addr));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: arch/x86_64/kernel/e820.c:284:
+			register_nosave_region(PFN_UP(ei->addr),
+						PFN_DOWN(paddr));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#512: FILE: kernel/power/power.h:52:
+extern int create_basic_memory_bitmaps(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#513: FILE: kernel/power/power.h:53:
+extern void free_basic_memory_bitmaps(void);

ERROR:SPACING: space required before the open parenthesis '('
#525: FILE: kernel/power/user.c:55:
+	if(create_basic_memory_bitmaps())

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Thaw>
#550: FILE: kernel/power/disk.c:134:
+		goto Thaw;

CHECK:CAMELCASE: Avoid CamelCase: <Finish>
#556: FILE: kernel/power/disk.c:139:
+		goto Finish;

CHECK:CAMELCASE: Avoid CamelCase: <Unlock>
#591: FILE: kernel/power/disk.c:240:
+		goto Unlock;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453849.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 16 warnings, 23 checks, 529 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453849.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
