WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#84: FILE: block/elevator-fq.c:38:
+void elv_release_ioq(struct elevator_queue *eq, struct io_queue **ioq_ptr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#93: FILE: block/elevator-fq.c:58:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = entity->parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#93: FILE: block/elevator-fq.c:58:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = entity->parent)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#94: FILE: block/elevator-fq.c:59:
+	for (; entity != NULL; entity = entity->parent)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#96: FILE: block/elevator-fq.c:61:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#96: FILE: block/elevator-fq.c:61:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#96: FILE: block/elevator-fq.c:61:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#99: FILE: block/elevator-fq.c:64:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: block/elevator-fq.c:66:
+struct io_entity *bfq_lookup_next_entity(struct io_sched_data *sd,
+						 int extract);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#102: FILE: block/elevator-fq.c:67:
+void elv_del_ioq_busy(struct elevator_queue *e, struct io_queue *ioq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: block/elevator-fq.c:68:
+void elv_del_ioq_busy(struct elevator_queue *e, struct io_queue *ioq,
+					int requeue);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#104: FILE: block/elevator-fq.c:69:
+void elv_activate_ioq(struct io_queue *ioq, int add_front);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#105: FILE: block/elevator-fq.c:70:
+void elv_deactivate_ioq(struct elv_fq_data *efqd, struct io_queue *ioq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: block/elevator-fq.c:71:
+void elv_deactivate_ioq(struct elv_fq_data *efqd, struct io_queue *ioq,
+					int requeue);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->active_entity"
#113: FILE: block/elevator-fq.c:78:
+	if (sd->active_entity != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next_active"
#127: FILE: block/elevator-fq.c:92:
+	if (next_active != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#130: FILE: block/elevator-fq.c:95:
+		if (entity != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#140: FILE: block/elevator-fq.c:105:
+	BUG_ON(sd->next_active != entity);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#143: FILE: block/elevator-fq.c:108:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#143: FILE: block/elevator-fq.c:108:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#144: FILE: block/elevator-fq.c:109:
+	for (; entity != NULL; entity = NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#146: FILE: block/elevator-fq.c:111:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#146: FILE: block/elevator-fq.c:111:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#146: FILE: block/elevator-fq.c:111:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#147: FILE: block/elevator-fq.c:112:
+	for (parent = NULL; entity != NULL; entity = parent)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: block/elevator-fq.c:707:
+	BUG_ON(sd->next_active == entity);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->next_active"
#310: FILE: block/elevator-fq.c:733:
+		if (sd->next_active != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#362: FILE: block/elevator-fq.c:894:
+		BUG_ON(st->wsum == 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#383: FILE: block/elevator-fq.c:915:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#430: FILE: block/elevator-fq.c:962:
+	entity->weight = entity->new_weight = iocg->weight;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#431: FILE: block/elevator-fq.c:963:
+	entity->ioprio_class = entity->new_ioprio_class = iocg->ioprio_class;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#440: FILE: block/elevator-fq.c:972:
+	BUG_ON(parent == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#440: FILE: block/elevator-fq.c:972:
+	BUG_ON(parent == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#441: FILE: block/elevator-fq.c:973:
+	BUG_ON(iog == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#441: FILE: block/elevator-fq.c:973:
+	BUG_ON(iog == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#456: FILE: block/elevator-fq.c:988:
+	for (; entity != NULL; entity = st->first_idle)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__VAR' may be better as '(__VAR)' to avoid precedence issues
#460: FILE: block/elevator-fq.c:992:
+#define SHOW_FUNCTION(__VAR)						\
+static u64 io_cgroup_##__VAR##_read(struct cgroup *cgroup,		\
+				       struct cftype *cftype)		\
+{									\
+	struct io_cgroup *iocg;					\
+	u64 ret;							\
+									\
+	if (!cgroup_lock_live_group(cgroup))				\
+		return -ENODEV;						\
+									\
+	iocg = cgroup_to_io_cgroup(cgroup);				\
+	spin_lock_irq(&iocg->lock);					\
+	ret = iocg->__VAR;						\
+	spin_unlock_irq(&iocg->lock);					\
+									\
+	cgroup_unlock();						\
+									\
+	return ret;							\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__VAR' may be better as '(__VAR)' to avoid precedence issues
#484: FILE: block/elevator-fq.c:1016:
+#define STORE_FUNCTION(__VAR, __MIN, __MAX)				\
+static int io_cgroup_##__VAR##_write(struct cgroup *cgroup,		\
+					struct cftype *cftype,		\
+					u64 val)			\
+{									\
+	struct io_cgroup *iocg;					\
+	struct io_group *iog;						\
+	struct hlist_node *n;						\
+									\
+	if (val < (__MIN) || val > (__MAX))				\
+		return -EINVAL;						\
+									\
+	if (!cgroup_lock_live_group(cgroup))				\
+		return -ENODEV;						\
+									\
+	iocg = cgroup_to_io_cgroup(cgroup);				\
+									\
+	spin_lock_irq(&iocg->lock);					\
+	iocg->__VAR = (unsigned long)val;				\
+	hlist_for_each_entry(iog, n, &iocg->group_data, group_node) {	\
+		iog->entity.new_##__VAR = (unsigned long)val;		\
+		smp_wmb();						\
+		iog->entity.ioprio_changed = 1;				\
+	}								\
+	spin_unlock_irq(&iocg->lock);					\
+									\
+	cgroup_unlock();						\
+									\
+	return 0;							\
+}

WARNING:MEMORY_BARRIER: memory barrier without comment
#505: FILE: block/elevator-fq.c:1037:
+		smp_wmb();						\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#529: FILE: block/elevator-fq.c:1061:
+struct io_group *io_group_chain_alloc(struct request_queue *q, void *key,
+					struct cgroup *cgroup)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#535: FILE: block/elevator-fq.c:1067:
+	for (; cgroup != NULL; cgroup = cgroup->parent) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#539: FILE: block/elevator-fq.c:1071:
+		if (iog != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!leaf"
#555: FILE: block/elevator-fq.c:1087:
+		if (leaf == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#573: FILE: block/elevator-fq.c:1105:
+	while (leaf != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: block/elevator-fq.c:1130:
+void io_group_chain_link(struct request_queue *q, void *key,
+				struct cgroup *cgroup,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#608: FILE: block/elevator-fq.c:1140:
+	for (; cgroup != NULL && leaf != NULL; cgroup = cgroup->parent) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#608: FILE: block/elevator-fq.c:1140:
+	for (; cgroup != NULL && leaf != NULL; cgroup = cgroup->parent) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#613: FILE: block/elevator-fq.c:1145:
+		BUG_ON(iog != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#613: FILE: block/elevator-fq.c:1145:
+		BUG_ON(iog != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#627: FILE: block/elevator-fq.c:1159:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgroup"
#627: FILE: block/elevator-fq.c:1159:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#627: FILE: block/elevator-fq.c:1159:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#629: FILE: block/elevator-fq.c:1161:
+	if (cgroup != NULL && prev != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#629: FILE: block/elevator-fq.c:1161:
+	if (cgroup != NULL && prev != NULL) {

WARNING:TYPO_SPELLING: 'becames' may be misspelled - perhaps 'becomes'?
#647: FILE: block/elevator-fq.c:1179:
+ * but is a safe fallbak.  If this loss becames a problem it can be
                                         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: block/elevator-fq.c:1189:
+struct io_group *io_find_alloc_group(struct request_queue *q,
+			struct cgroup *cgroup, struct elv_fq_data *efqd,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#666: FILE: block/elevator-fq.c:1198:
+	if (iog != NULL || !create)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#670: FILE: block/elevator-fq.c:1202:
+	if (iog != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#710: FILE: block/elevator-fq.c:1242:
+	BUG_ON(!iog);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: block/elevator-fq.c:1251:
+struct io_group *io_alloc_root_group(struct request_queue *q,
+					struct elevator_queue *e, void *key)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#726: FILE: block/elevator-fq.c:1258:
+	if (iog == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#762: FILE: block/elevator-fq.c:1294:
+struct cgroup_subsys_state *iocg_create(struct cgroup_subsys *subsys,
+						struct cgroup *cgroup)

CHECK:BRACES: braces {} should be used on all arms of this statement
#766: FILE: block/elevator-fq.c:1298:
+	if (cgroup->parent != NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup->parent"
#766: FILE: block/elevator-fq.c:1298:
+	if (cgroup->parent != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iocg"
#768: FILE: block/elevator-fq.c:1300:
+		if (iocg == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#770: FILE: block/elevator-fq.c:1302:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#790: FILE: block/elevator-fq.c:1322:
+int iocg_can_attach(struct cgroup_subsys *subsys, struct cgroup *cgroup,
+			    struct task_struct *tsk)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioc"
#798: FILE: block/elevator-fq.c:1330:
+	if (ioc != NULL && atomic_read(&ioc->nr_tasks) > 1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: block/elevator-fq.c:1344:
+void iocg_attach(struct cgroup_subsys *subsys, struct cgroup *cgroup,
+			 struct cgroup *prev, struct task_struct *tsk)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioc"
#818: FILE: block/elevator-fq.c:1350:
+	if (ioc != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: block/elevator-fq.c:1362:
+void io_ioq_move(struct elevator_queue *e, struct io_queue *ioq,
+				struct io_group *iog)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#840: FILE: block/elevator-fq.c:1372:
+	BUG_ON(resume && !entity->on_st);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#841: FILE: block/elevator-fq.c:1373:
+	BUG_ON(busy && !resume && entity->on_st && ioq != efqd->active_queue);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#851: FILE: block/elevator-fq.c:1383:
+		BUG_ON(atomic_read(&ioq->ref) < 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#856: FILE: block/elevator-fq.c:1388:
+		BUG_ON(atomic_read(&ioq->ref) < 2);

WARNING:TYPO_SPELLING: 'Noone' may be misspelled - perhaps 'No one'?
#895: FILE: block/elevator-fq.c:1427:
+		 * cgroup from the one being destroyed now.  Noone else
 		                                             ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#900: FILE: block/elevator-fq.c:1432:
+		BUG_ON(!RB_EMPTY_ROOT(&st->active));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#901: FILE: block/elevator-fq.c:1433:
+		BUG_ON(!RB_EMPTY_ROOT(&st->idle));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#904: FILE: block/elevator-fq.c:1436:
+	BUG_ON(iog->sched_data.next_active != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog->sched_data.next_active"
#904: FILE: block/elevator-fq.c:1436:
+	BUG_ON(iog->sched_data.next_active != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#905: FILE: block/elevator-fq.c:1437:
+	BUG_ON(iog->sched_data.active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog->sched_data.active_entity"
#905: FILE: block/elevator-fq.c:1437:
+	BUG_ON(iog->sched_data.active_entity != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#906: FILE: block/elevator-fq.c:1438:
+	BUG_ON(entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#906: FILE: block/elevator-fq.c:1438:
+	BUG_ON(entity->tree != NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#919: FILE: block/elevator-fq.c:1451:
+	struct elv_fq_data *efqd = NULL;
+	unsigned long uninitialized_var(flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#919: FILE: block/elevator-fq.c:1451:
+	unsigned long uninitialized_var(flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'flags' should also have an identifier name
#919: FILE: block/elevator-fq.c:1451:
+	unsigned long uninitialized_var(flags);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:TYPO_SPELLING: 'gettting' may be misspelled - perhaps 'getting'?
#935: FILE: block/elevator-fq.c:1467:
+	 * associated queue lock. After gettting the queue lock it
 	                                ^^^^^^^^

WARNING:TYPO_SPELLING: 'alreday' may be misspelled - perhaps 'already'?
#936: FILE: block/elevator-fq.c:1468:
+	 * again checks whether elevator exit path had alreday got
 	                                               ^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "efqd"
#943: FILE: block/elevator-fq.c:1475:
+	if (efqd != NULL) {

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#954: FILE: block/elevator-fq.c:1486:
+	 * cgroup, so we can be sure that noone is a) still using
 	                                  ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#976: FILE: block/elevator-fq.c:1508:
+	BUG_ON(!hlist_empty(&iocg->group_data));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#988: FILE: block/elevator-fq.c:1520:
+	hlist_for_each_entry_safe(iog, pos, n, &efqd->group_list,
+					elv_data_node) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1032: FILE: block/elevator-fq.c:1564:
+		 * group has not been setup yet. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: block/elevator-fq.c:1584:
+struct io_group *io_alloc_root_group(struct request_queue *q,
+					struct elevator_queue *e, void *key)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#1058: FILE: block/elevator-fq.c:1590:
+	if (iog == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1070: FILE: block/elevator-fq.c:1602:
+	struct io_group *iog = e->efqd.root_group;
+	io_put_io_group_queues(e, iog);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd"
#1118: FILE: block/elevator-fq.c:2061:
+	for (; sd != NULL; sd = entity->my_sched_data) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1131: FILE: block/elevator-fq.c:2074:
+		BUG_ON(!entity && extract);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1152: FILE: block/elevator-fq.c:2098:
+		struct io_group *iog = ioq_to_io_group(ioq);
+		elv_log_ioq(efqd, ioq, "set_active, busy=%d ioprio=%d"

WARNING:SPLIT_STRING: quoted string split across lines
#1153: FILE: block/elevator-fq.c:2099:
+		elv_log_ioq(efqd, ioq, "set_active, busy=%d ioprio=%d"
+				" weight=%ld group_weight=%ld",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1294: FILE: block/elevator-fq.h:18:
+#define WEIGHT_MAX ^I^I1000$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1406: FILE: block/elevator-fq.h:250:
+	spinlock_t lock;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1439: FILE: block/elevator-fq.h:460:
+	return ((IOPRIO_BE_NR - ioprio) * WEIGHT_MAX)/IOPRIO_BE_NR;
 	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1454: FILE: block/elevator-fq.h:484:
+extern int io_group_allow_merge(struct request *rq, struct bio *bio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1455: FILE: block/elevator-fq.h:485:
+extern void io_ioq_move(struct elevator_queue *e, struct io_queue *ioq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1456: FILE: block/elevator-fq.h:486:
+extern void io_ioq_move(struct elevator_queue *e, struct io_queue *ioq,
+					struct io_group *iog);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1469: FILE: block/elevator-fq.h:499:
+static inline void io_ioq_move(struct elevator_queue *e, struct io_queue *ioq,
+					struct io_group *iog)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1477: FILE: block/elevator-fq.h:507:
+}
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1508: FILE: block/elevator-fq.h:569:
+extern struct io_group *io_get_io_group(struct request_queue *q, int create);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1591: FILE: init/Kconfig:609:
+config GROUP_IOSCHED
+	bool "Group IO Scheduler"
+	depends on CGROUPS && ELV_FAIR_QUEUING
+	default n
+	---help---
+	  This feature lets IO scheduler recognize task groups and control
+	  disk bandwidth allocation to such task groups.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120137.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 38 warnings, 73 checks, 1477 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120137.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
