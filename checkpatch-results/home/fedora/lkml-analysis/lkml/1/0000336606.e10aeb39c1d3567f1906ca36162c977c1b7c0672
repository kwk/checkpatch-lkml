WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#88: 
Content-Disposition: inline; filename="0001-fs-add-extent_map-library.patch"

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#139: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#144: FILE: fs/extent_map.c:1:
+#include <linux/err.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: fs/extent_map.c:15:
+	extent_map_cache = kmem_cache_create("extent_map",
+					    sizeof(struct extent_map), 0,

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#168: FILE: fs/extent_map.c:25:
+	if (extent_map_cache)
+		kmem_cache_destroy(extent_map_cache);

WARNING:LINE_SPACING: Missing a blank line after declarations
#182: FILE: fs/extent_map.c:39:
+	struct extent_map *em;
+	em = kmem_cache_alloc(extent_map_cache, mask);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#203: FILE: fs/extent_map.c:60:
+	struct rb_node ** p = &root->rb_node;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#204: FILE: fs/extent_map.c:61:
+	struct rb_node * parent = NULL;

ERROR:SPACING: space required before the open parenthesis '('
#207: FILE: fs/extent_map.c:64:
+	while(*p) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: fs/extent_map.c:83:
+static struct rb_node *__tree_search(struct rb_root *root, u64 offset,
+				   struct rb_node **prev_ret)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#228: FILE: fs/extent_map.c:85:
+	struct rb_node * n = root->rb_node;

ERROR:SPACING: space required before the open parenthesis '('
#233: FILE: fs/extent_map.c:90:
+	while(n) {

ERROR:SPACING: space required before the open parenthesis '('
#247: FILE: fs/extent_map.c:104:
+	while(prev && (offset >= prev_entry->start + prev_entry->len)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: fs/extent_map.c:116:
+	struct rb_node *ret;
+	ret = __tree_search(root, offset, &prev);

WARNING:TABSTOP: Statements should start on a tabstop
#326: FILE: fs/extent_map.c:183:
+	 }

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#423: FILE: fs/extent_map.c:280:
+		if (em->start > start) {
[...]
+		} else if (!create || em->block_start != EXTENT_MAP_HOLE) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#430: FILE: fs/extent_map.c:287:
+
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#443: FILE: fs/extent_map.c:300:
+	if (len < inode->i_sb->s_blocksize) {
+		printk("warning2: mapping length %Lu\n", len);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#444: FILE: fs/extent_map.c:301:
+		printk("warning2: mapping length %Lu\n", len);

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#444: FILE: fs/extent_map.c:301:
+		printk("warning2: mapping length %Lu\n", len);

CHECK:BRACES: braces {} should be used on all arms of this statement
#468: FILE: fs/extent_map.c:325:
+	if (buffer_mapped(&result))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#470: FILE: fs/extent_map.c:327:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#500: FILE: fs/extent_map.c:357:
+	if (IS_ERR(em) || !em || create || start + len < extent_map_end(em)) {
+		return em;
+	}

ERROR:SPACING: space required before the open parenthesis '('
#516: FILE: fs/extent_map.c:373:
+	} while(em->start <= start && start + len <= extent_map_end(em) &&

ERROR:SPACING: space required before the open parenthesis '('
#536: FILE: fs/extent_map.c:393:
+	while((em = lookup_extent_mapping(tree, start, len))) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#552: FILE: include/linux/extent_map.h:1:
+#ifndef __EXTENTMAP__

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#558: FILE: include/linux/extent_map.h:7:
+#define EXTENT_MAP_LAST_BYTE (u64)-4

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#559: FILE: include/linux/extent_map.h:8:
+#define EXTENT_MAP_HOLE (u64)-3

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#560: FILE: include/linux/extent_map.h:9:
+#define EXTENT_MAP_INLINE (u64)-2

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#561: FILE: include/linux/extent_map.h:10:
+#define EXTENT_MAP_DELALLOC (u64)-1

WARNING:BAD_SIGN_OFF: Duplicate signature
#623: 
Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Duplicate signature
#669: 
Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#801: 
Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

CHECK:SPACING: No space is necessary after a cast
#845: FILE: fs/ext3/inode.c:232:
+	remove_extent_mappings(&EXT3_I(inode)->extent_tree, 0, (u64) -1);

CHECK:SPACING: No space is necessary after a cast
#848: FILE: fs/ext3/inode.c:235:
+	remove_extent_mappings(&EXT3_I(inode)->extent_tree, 0, (u64) -1);

CHECK:SPACING: No space is necessary after a cast
#910: FILE: fs/ext3/super.c:472:
+	remove_extent_mappings(&EXT3_I(inode)->extent_tree, 0, (u64) -1);

WARNING:BAD_SIGN_OFF: Duplicate signature
#959: 
Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wq' - possible side-effects?
#981: FILE: drivers/block/loop.c:485:
+#define __lo_throttle(wq, lock, condition)				\
+do {									\
+	DEFINE_WAIT(__wait);						\
+	for (;;) {							\
+		prepare_to_wait((wq), &__wait, TASK_UNINTERRUPTIBLE);	\
+		if (condition)						\
+			break;						\
+		spin_unlock_irq((lock));				\
+		io_schedule();						\
+		spin_lock_irq((lock));					\
+	}								\
+	finish_wait((wq), &__wait);					\
+} while (0)								\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#981: FILE: drivers/block/loop.c:485:
+#define __lo_throttle(wq, lock, condition)				\
+do {									\
+	DEFINE_WAIT(__wait);						\
+	for (;;) {							\
+		prepare_to_wait((wq), &__wait, TASK_UNINTERRUPTIBLE);	\
+		if (condition)						\
+			break;						\
+		spin_unlock_irq((lock));				\
+		io_schedule();						\
+		spin_lock_irq((lock));					\
+	}								\
+	finish_wait((wq), &__wait);					\
+} while (0)								\
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bio->bi_bdev"
#997: FILE: drivers/block/loop.c:501:
+	return bio->bi_bdev != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1010: FILE: drivers/block/loop.c:514:
+		__lo_throttle(&lo->lo_bio_wait, &lo->lo_lock,
+				lo->lo_bio_cnt < LO_BIO_THROTTLE);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1084: FILE: drivers/block/loop.c:599:
+	if (wait) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1087: FILE: drivers/block/loop.c:602:
+	} else

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#1324: FILE: drivers/block/loop.c:851:
+		 * it wont ever fail
 		      ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_mapping->a_ops->map_extent"
#1496: FILE: drivers/block/loop.c:1106:
+	if (inode->i_mapping->a_ops->map_extent == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1517: FILE: drivers/block/loop.c:1127:
+	printk(KERN_INFO "loop%d: fast redirect\n", lo->lo_number);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1646: FILE: include/linux/loop.h:173:
+^ILOOP_SWITCH_RW_MAGIC = ^I0xfeedbeef,$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000336606.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 20 warnings, 15 checks, 1347 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000336606.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
