CHECK:SPACING: No space is necessary after a cast
#80: FILE: fs/unionfs/dirfops.c:46:
+	char *name = (char *) oname;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#252: FILE: fs/unionfs/dirhelper.c:39:
+	char *name = (char *) oname;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf->mode == RD_CHECK_EMPTY'
#278: FILE: fs/unionfs/dirhelper.c:59:
+	if ((buf->mode == RD_CHECK_EMPTY) && !is_whiteout)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'hierachy' may be misspelled - perhaps 'hierarchy'?
#445: FILE: fs/unionfs/inode.c:264:
+	/* check if parent hierachy is needed, then link in same branch */
 	                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#822: FILE: fs/unionfs/rename.c:264:
+			printk(KERN_ERR "unionfs: rename error (bwh_old=%d)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#846: FILE: fs/unionfs/rename.c:273:
 			printk(KERN_ERR "unionfs: can't create a whiteout for "
+			       "%s in rename!\n", old_dentry->d_name.name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1172: FILE: fs/unionfs/union.h:331:
+extern char *alloc_whname(const char *name, int len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1173: FILE: fs/unionfs/union.h:332:
+extern bool is_whiteout_name(char **namep, int *namelenp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1174: FILE: fs/unionfs/union.h:333:
+extern bool is_validname(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1175: FILE: fs/unionfs/union.h:334:
+extern struct dentry *lookup_whiteout(const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1177: FILE: fs/unionfs/union.h:336:
+extern struct dentry *find_first_whiteout(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1178: FILE: fs/unionfs/union.h:337:
+extern int unlink_whiteout(struct dentry *wh_dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1179: FILE: fs/unionfs/union.h:338:
+extern int check_unlink_whiteout(struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1181: FILE: fs/unionfs/union.h:340:
+extern int create_whiteout(struct dentry *dentry, int start);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1184: FILE: fs/unionfs/union.h:343:
+extern int is_opaque_dir(struct dentry *dentry, int bindex);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1185: FILE: fs/unionfs/union.h:344:
+extern int make_dir_opaque(struct dentry *dir, int bindex);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1186: FILE: fs/unionfs/union.h:345:
+extern void unionfs_set_max_namelen(long *namelen);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1212: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1217: FILE: fs/unionfs/whiteout.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1249: FILE: fs/unionfs/whiteout.c:33:
+#define UNIONFS_DIR_OPAQUE UNIONFS_WHPFX UNIONFS_DIR_OPAQUE_NAME

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#1314: FILE: fs/unionfs/whiteout.c:98:
+	if (unlikely(IS_ERR(whname))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1332: FILE: fs/unionfs/whiteout.c:116:
+		printk(KERN_ERR "unionfs: invalid whiteout %s entry type %d\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1407: FILE: fs/unionfs/whiteout.c:191:
+		struct inode *inode = lower_dir_dentry->d_inode;
+		err = inode->i_op->unlink(inode, wh_dentry);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1410: FILE: fs/unionfs/whiteout.c:194:
+		printk(KERN_ERR "unionfs: could not unlink whiteout %s, "

WARNING:SPLIT_STRING: quoted string split across lines
#1411: FILE: fs/unionfs/whiteout.c:195:
+		printk(KERN_ERR "unionfs: could not unlink whiteout %s, "
+		       "err = %d\n", wh_dentry->d_name.name, err);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1415: FILE: fs/unionfs/whiteout.c:199:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1455: FILE: fs/unionfs/whiteout.c:239:
+		printk(KERN_ERR "unionfs: found both whiteout and regular "

WARNING:SPLIT_STRING: quoted string split across lines
#1456: FILE: fs/unionfs/whiteout.c:240:
+		printk(KERN_ERR "unionfs: found both whiteout and regular "
+		       "file in directory %s (branch %d)\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1487: FILE: fs/unionfs/whiteout.c:271:
+	struct nameidata nd;
 	                 ^^

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#1498: FILE: fs/unionfs/whiteout.c:282:
+	if (unlikely(IS_ERR(name))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1520: FILE: fs/unionfs/whiteout.c:304:
+				int ret = PTR_ERR(lower_dentry);
+				if (!IS_COPYUP_ERR(ret))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1521: FILE: fs/unionfs/whiteout.c:305:
+					printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1523: FILE: fs/unionfs/whiteout.c:307:
+					       "unionfs: create_parents for "
+					       "whiteout failed: bindex=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#1524: FILE: fs/unionfs/whiteout.c:308:
+					       "whiteout failed: bindex=%d "
+					       "err=%d\n", bindex, ret);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1545: FILE: fs/unionfs/whiteout.c:329:
+		err = init_lower_nd(&nd, LOOKUP_CREATE);
 		                     ^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1553: FILE: fs/unionfs/whiteout.c:337:
+					 ~current->fs->umask & S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1554: FILE: fs/unionfs/whiteout.c:338:
+					 &nd);
 					  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1557: FILE: fs/unionfs/whiteout.c:341:
+		release_lower_nd(&nd, err);
 		                  ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1591: FILE: fs/unionfs/whiteout.c:375:
+	BUG_ON(!S_ISDIR(lower_dir_dentry->d_inode->i_mode));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1593: FILE: fs/unionfs/whiteout.c:377:
+	BUG_ON(!S_ISDIR(lower_dir->i_mode));

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1614: FILE: fs/unionfs/whiteout.c:398:
+			strlcpy(p, cursor->name, PATH_MAX - UNIONFS_WHLEN);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1640: FILE: fs/unionfs/whiteout.c:424:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1662: FILE: fs/unionfs/whiteout.c:446:
+	BUG_ON(!S_ISDIR(dentry->d_inode->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1663: FILE: fs/unionfs/whiteout.c:447:
+	BUG_ON(bindex < dbstart(dentry));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1664: FILE: fs/unionfs/whiteout.c:448:
+	BUG_ON(bindex > dbend(dentry));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1670: FILE: fs/unionfs/whiteout.c:454:
+	BUG_ON(!S_ISDIR(lower_dir_dentry->d_inode->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1672: FILE: fs/unionfs/whiteout.c:456:
+	BUG_ON(!S_ISDIR(lower_dir->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1707: FILE: fs/unionfs/whiteout.c:491:
+	BUG_ON(!S_ISDIR(lower_inode->i_mode));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1750: FILE: fs/unionfs/whiteout.c:534:
+	struct nameidata nd;
 	                 ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1767: FILE: fs/unionfs/whiteout.c:551:
+	BUG_ON(!S_ISDIR(dentry->d_inode->i_mode) ||

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1778: FILE: fs/unionfs/whiteout.c:562:
+	err = init_lower_nd(&nd, LOOKUP_CREATE);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1782: FILE: fs/unionfs/whiteout.c:566:
+		err = vfs_create(lower_dir, diropq, S_IRUGO, &nd);
 		                                              ^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1782: FILE: fs/unionfs/whiteout.c:566:
+		err = vfs_create(lower_dir, diropq, S_IRUGO, &nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1785: FILE: fs/unionfs/whiteout.c:569:
+	release_lower_nd(&nd, err);
 	                  ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247723.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 37 warnings, 16 checks, 1643 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247723.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
