WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: drivers/staging/dt3155/dt3155_drv.c:152:
+  int_csr_r.reg = readl(dt3155_lbase[minor] + INT_CSR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: drivers/staging/dt3155/dt3155_drv.c:156:
+  writel(int_csr_r.reg, dt3155_lbase[minor] + INT_CSR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: drivers/staging/dt3155/dt3155_drv.c:201:
+  csr1_r.reg = readl(dt3155_lbase[minor] + CSR1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: drivers/staging/dt3155/dt3155_drv.c:213:
+  int_csr_r.reg = readl(dt3155_lbase[minor] + INT_CSR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: drivers/staging/dt3155/dt3155_drv.c:224:
+      ReadI2C(dt3155_lbase[minor], EVEN_CSR, &i2c_even_csr.reg);$

CHECK:CAMELCASE: Avoid CamelCase: <ReadI2C>
#87: FILE: drivers/staging/dt3155/dt3155_drv.c:224:
+      ReadI2C(dt3155_lbase[minor], EVEN_CSR, &i2c_even_csr.reg);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: drivers/staging/dt3155/dt3155_drv.c:244:
+      writel(int_csr_r.reg, dt3155_lbase[minor] + INT_CSR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: drivers/staging/dt3155/dt3155_drv.c:270:
+      WriteI2C(dt3155_lbase[minor], EVEN_CSR, i2c_even_csr.reg);$

CHECK:CAMELCASE: Avoid CamelCase: <WriteI2C>
#114: FILE: drivers/staging/dt3155/dt3155_drv.c:270:
+      WriteI2C(dt3155_lbase[minor], EVEN_CSR, i2c_even_csr.reg);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: drivers/staging/dt3155/dt3155_drv.c:287:
+      ReadI2C(dt3155_lbase[minor], ODD_CSR, &i2c_odd_csr.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: drivers/staging/dt3155/dt3155_drv.c:323:
+      writel(int_csr_r.reg, dt3155_lbase[minor] + INT_CSR);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#139: FILE: drivers/staging/dt3155/dt3155_drv.c:397:
       if ( (dt3155_status[ minor ].state & DT3155_STATE_MODE) ==
[...]
+	  writel(buffer_addr, dt3155_lbase[minor] + EVEN_DMA_START);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#147: FILE: drivers/staging/dt3155/dt3155_drv.c:398:
+	   DT3155_STATE_FLD ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#149: FILE: drivers/staging/dt3155/dt3155_drv.c:400:
+	} else {
+	  writel(buffer_addr, dt3155_lbase[minor] + EVEN_DMA_START);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: drivers/staging/dt3155/dt3155_drv.c:404:
+	  writel(buffer_addr + dt3155_status[minor].config.cols,
+		    dt3155_lbase[minor] + ODD_DMA_START);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: drivers/staging/dt3155/dt3155_drv.c:412:
+      WriteI2C(dt3155_lbase[minor], ODD_CSR, i2c_odd_csr.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: drivers/staging/dt3155/dt3155_drv.c:465:
+  ReadI2C(dt3155_lbase[minor], CONFIG, &i2c_csr2.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: drivers/staging/dt3155/dt3155_drv.c:467:
+  WriteI2C(dt3155_lbase[minor], CONFIG, i2c_config.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: drivers/staging/dt3155/dt3155_drv.c:487:
+  writel(csr1_r.reg, dt3155_lbase[minor] + CSR1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/staging/dt3155/dt3155_drv.c:496:
+  writel(int_csr_r.reg, dt3155_lbase[minor] + INT_CSR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: drivers/staging/dt3155/dt3155_drv.c:500:
+  ReadI2C(dt3155_lbase[minor], CSR2, &i2c_csr2.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: drivers/staging/dt3155/dt3155_drv.c:503:
+  WriteI2C(dt3155_lbase[minor], CSR2, i2c_csr2.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: drivers/staging/dt3155/dt3155_drv.c:711:
+  writel(int_csr_r.reg, dt3155_lbase[minor] + INT_CSR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: drivers/staging/dt3155/dt3155_drv.c:902:
+      dt3155_lbase[pci_index-1] = ioremap(base, PCI_PAGE_SIZE);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#257: FILE: drivers/staging/dt3155/dt3155_drv.c:902:
+      dt3155_lbase[pci_index-1] = ioremap(base, PCI_PAGE_SIZE);
                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: drivers/staging/dt3155/dt3155_drv.c:905:
+      if (!dt3155_lbase[pci_index-1]) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#262: FILE: drivers/staging/dt3155/dt3155_drv.c:905:
+      if (!dt3155_lbase[pci_index-1]) {
 	  printk("DT3155: Unable to remap control registers\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#262: FILE: drivers/staging/dt3155/dt3155_drv.c:905:
+      if (!dt3155_lbase[pci_index-1]) {
                                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: drivers/staging/dt3155/dt3155_drv.c:1025:
+      writel(int_csr_r.reg, dt3155_lbase[index] + INT_CSR);$

CHECK:CAMELCASE: Avoid CamelCase: <lpReg>
#284: FILE: drivers/staging/dt3155/dt3155_io.c:82:
+static int wait_ibsyclr(void __iomem *lpReg)

CHECK:CAMELCASE: Avoid CamelCase: <wIregIndex>
#293: FILE: drivers/staging/dt3155/dt3155_io.c:108:
+int WriteI2C(void __iomem *lpReg, u_short wIregIndex, u8 byVal)

CHECK:CAMELCASE: Avoid CamelCase: <byVal>
#293: FILE: drivers/staging/dt3155/dt3155_io.c:108:
+int WriteI2C(void __iomem *lpReg, u_short wIregIndex, u8 byVal)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#367: FILE: drivers/staging/dt3155/dt3155_io.h:350:
+extern int ReadI2C(void __iomem *lpReg, u_short wIregIndex, u8 *byVal);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#368: FILE: drivers/staging/dt3155/dt3155_io.h:351:
+extern int WriteI2C(void __iomem *lpReg, u_short wIregIndex, u8 byVal);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005858.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 23 warnings, 10 checks, 295 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005858.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
