WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#159: FILE: fs/ext4/extents.c:1206:
+	unsigned uninitialized = 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#162: FILE: fs/ext4/extents.c:1208:
+	BUG_ON(ext4_ext_get_actual_len(newext) == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: fs/ext4/extents.c:1513:
+^I^I^I        (unsigned long) ext4_ext_get_actual_len(ex));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#273: FILE: fs/ext4/extents.c:1513:
+			        (unsigned long) ext4_ext_get_actual_len(ex));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: fs/ext4/extents.c:1515:
+^I^I            + ext4_ext_get_actual_len(ex)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: fs/ext4/extents.c:1517:
+^I^I         + ext4_ext_get_actual_len(ex);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: fs/ext4/extents.c:1521:
+^I^I^I        (unsigned long) ext4_ext_get_actual_len(ex),$

CHECK:SPACING: No space is necessary after a cast
#284: FILE: fs/ext4/extents.c:1521:
+			        (unsigned long) ext4_ext_get_actual_len(ex),

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#307: FILE: fs/ext4/extents.c:1670:
 	if (from >= le32_to_cpu(ex->ee_block)
+	    && to == le32_to_cpu(ex->ee_block) + ee_len - 1) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#323: FILE: fs/ext4/extents.c:1683:
 	} else if (from == le32_to_cpu(ex->ee_block)
+		   && to <= le32_to_cpu(ex->ee_block) + ee_len - 1) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#338: FILE: fs/ext4/extents.c:1703:
+	unsigned uninitialized = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: fs/ext4/extents.c:2096:
+				ext4_ext_put_in_cache(inode, ee_block,
+							ee_len, ee_start,

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#421: FILE: fs/ext4/extents.c:2153:
+	if (create!=EXT4_CREATE_UNINITIALIZED_EXT)
 	          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: fs/ext4/extents.c:2155:
+		ext4_ext_put_in_cache(inode, iblock, allocated, newblock,
+						EXT4_EXT_CACHE_EXTENT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: fs/ext4/extents.c:2293:
+^I^I ^I- block;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#465: FILE: fs/ext4/extents.c:2293:
+^I^I ^I- block;$

WARNING:SPLIT_STRING: quoted string split across lines
#489: FILE: fs/ext4/extents.c:2317:
+				   "ext4_ext_get_blocks returned 0! inode#%lu"
+				   ", block=%llu, max_blocks=%llu",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#504: FILE: fs/ext4/extents.c:2332:
+			if (buffer_new(&map_bh) && ((block + ret) >
[...]
+					nblocks = nblocks + ret;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#569: FILE: include/linux/ext4_fs.h:105:
+#define EXT4_BLOCK_ALIGN(size, blkbits)		ALIGN((size),(1 << (blkbits)))
                                        		            ^

WARNING:TYPO_SPELLING: 'uninitialzed' may be misspelled - perhaps 'uninitialized'?
#579: FILE: include/linux/ext4_fs.h:231:
+ * want uninitialzed extents.
         ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#589: FILE: include/linux/ext4_fs.h:985:
+extern int ext4_fallocate(struct inode *inode, int mode, loff_t offset,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#602: FILE: include/linux/ext4_fs_extents.h:191:
+static inline void ext4_ext_mark_uninitialized(struct ext4_extent *ext) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#606: FILE: include/linux/ext4_fs_extents.h:195:
+static inline int ext4_ext_is_uninitialized(struct ext4_extent *ext) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#610: FILE: include/linux/ext4_fs_extents.h:199:
+static inline int ext4_ext_get_actual_len(struct ext4_extent *ext) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000430990.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 7 warnings, 7 checks, 498 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000430990.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
