WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/aufs/whout.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#59: FILE: fs/aufs/whout.c:17:
+#define WH_MASK			S_IRUGO

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#112: FILE: fs/aufs/whout.c:70:
+		wh_dentry = au_lkup_one(wh_name, h_parent, br, /*nd*/NULL);
 		                                                 ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#128: FILE: fs/aufs/whout.c:86:
+	AuIOErr("%.*s Invalid whiteout entry type 0%o.\n",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#129: FILE: fs/aufs/whout.c:87:
+		AuDLNPair(wh_dentry), wh_dentry->d_inode->i_mode);

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#183: FILE: fs/aufs/whout.c:141:
+	AuDebugOn(name + qs.len + 1 - p <= HEX_LEN);

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#195: FILE: fs/aufs/whout.c:153:
+	AuDbg("%.*s\n", AuLNPair(&qs));

CHECK:CAMELCASE: Avoid CamelCase: <AuLNPair>
#195: FILE: fs/aufs/whout.c:153:
+	AuDbg("%.*s\n", AuLNPair(&qs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#196: FILE: fs/aufs/whout.c:154:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#220: FILE: fs/aufs/whout.c:178:
+	IMustLock(h_dir);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#229: FILE: fs/aufs/whout.c:187:
+	AuTraceErr(err);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#250: FILE: fs/aufs/whout.c:208:
+	force = (h_dir->i_mode & S_ISVTX)
+		&& h_path->dentry->d_inode->i_uid != current_fsuid();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#275: FILE: fs/aufs/whout.c:233:
+	h_path.dentry = au_lkup_one(wh, h_parent, br, /*nd*/NULL);
 	                                                ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#276: FILE: fs/aufs/whout.c:234:
+	if (IS_ERR(h_path.dentry))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#278: FILE: fs/aufs/whout.c:236:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#280: FILE: fs/aufs/whout.c:238:
+		if (h_path.dentry->d_inode
+		    && S_ISREG(h_path.dentry->d_inode->i_mode))

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#310: FILE: fs/aufs/whout.c:268:
+		AuWarn("failed removing %.*s (%d), ignored.\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuErr>
#321: FILE: fs/aufs/whout.c:279:
+	AuErr("%.*s (%s) doesn't support link(2), use noplink and rw+nolwh\n",

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#323: FILE: fs/aufs/whout.c:281:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:BRACES: braces {} should be used on all arms of this statement
#332: FILE: fs/aufs/whout.c:290:
+	if (!path->dentry->d_inode) {
[...]
+	} else if (S_ISDIR(path->dentry->d_inode->i_mode))
[...]
+	else
[...]

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU' are not preferred. Consider using octal permissions '0700'.
#333: FILE: fs/aufs/whout.c:291:
+		int mode = S_IRWXU;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#336: FILE: fs/aufs/whout.c:294:
+			mode |= S_IXUGO;

CHECK:CAMELCASE: Avoid CamelCase: <AuBrWh_BASE>
#358: FILE: fs/aufs/whout.c:316:
+	h_path->dentry = base[AuBrWh_BASE].dentry;

CHECK:CAMELCASE: Avoid CamelCase: <AuBrWh_PLINK>
#360: FILE: fs/aufs/whout.c:318:
+	h_path->dentry = base[AuBrWh_PLINK].dentry;

CHECK:CAMELCASE: Avoid CamelCase: <AuBrWh_ORPH>
#362: FILE: fs/aufs/whout.c:320:
+	h_path->dentry = base[AuBrWh_ORPH].dentry;

WARNING:TYPO_SPELLING: 'mesage' may be misspelled - perhaps 'message'?
#368: FILE: fs/aufs/whout.c:326:
+ * minus: error, caller should print the mesage
                                          ^^^^^^

WARNING:TYPO_SPELLING: 'mesage' may be misspelled - perhaps 'message'?
#370: FILE: fs/aufs/whout.c:328:
+ * plus: error, caller should NOT print the mesage
                                             ^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#383: FILE: fs/aufs/whout.c:341:
+	if (do_plink) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#394: FILE: fs/aufs/whout.c:352:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#432: FILE: fs/aufs/whout.c:390:
+	if (!base[AuBrWh_BASE].dentry->d_inode) {
[...]
+	} else if (S_ISREG(base[AuBrWh_BASE].dentry->d_inode->i_mode))
[...]
+	else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#448: FILE: fs/aufs/whout.c:406:
+	if (do_plink) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#453: FILE: fs/aufs/whout.c:411:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#474: FILE: fs/aufs/whout.c:432:
+	int err, i;
+	const unsigned char do_plink

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#475: FILE: fs/aufs/whout.c:433:
+	const unsigned char do_plink
+		= !!au_opt_test(au_mntflags(sb), PLINK);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#510: FILE: fs/aufs/whout.c:468:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <AuBrWh_Last>
#512: FILE: fs/aufs/whout.c:470:
+	for (i = 0; i < AuBrWh_Last; i++) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#523: FILE: fs/aufs/whout.c:481:
+		AuDebugOn(wbr
+			  && wbr->wbr_wh[i]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#524: FILE: fs/aufs/whout.c:482:
+			  && wbr->wbr_wh[i]
+			  && wbr->wbr_wh[i] != base[i].dentry);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#560: FILE: fs/aufs/whout.c:518:
+		BUG();

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT>
#611: FILE: fs/aufs/whout.c:569:
+	au_hin_imtx_lock_nested(hdir, AuLsc_I_PARENT);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#737: FILE: fs/aufs/whout.c:695:
+	opq_dentry = au_lkup_one(&diropq_name, h_dentry, br, /*nd*/NULL);
 	                                                       ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#782: FILE: fs/aufs/whout.c:740:
+	if (!au_test_h_perm_sio(h_dentry->d_inode, MAY_EXEC | MAY_WRITE))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#784: FILE: fs/aufs/whout.c:742:
+	else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#819: FILE: fs/aufs/whout.c:777:
+		wh_dentry = au_lkup_one(&wh_name, h_parent, br, /*nd*/NULL);
 		                                                  ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#839: FILE: fs/aufs/whout.c:797:
+		if (!err)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#841: FILE: fs/aufs/whout.c:799:
+		else {

CHECK:CAMELCASE: Avoid CamelCase: <AuSize_NHASH>
#874: FILE: fs/aufs/whout.c:832:
+	for (i = 0; !err && i < AuSize_NHASH; i++, head++) {

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#933: FILE: fs/aufs/whout.c:891:
+	mutex_lock_nested(&wh_inode->i_mutex, AuLsc_I_CHILD);

CHECK:BRACES: braces {} should be used on all arms of this statement
#939: FILE: fs/aufs/whout.c:897:
+	if (!au_test_h_perm_sio(wh_inode, MAY_EXEC | MAY_WRITE))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#941: FILE: fs/aufs/whout.c:899:
+	else {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#981: FILE: fs/aufs/whout.c:939:
+	iput(args->dir);
 	^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1059: FILE: fs/aufs/whout.h:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <AuDiropq_CREATE>
#1096: FILE: fs/aufs/whout.h:38:
+#define AuDiropq_CREATE	1

CHECK:CAMELCASE: Avoid CamelCase: <AuDiropq_##name>
#1097: FILE: fs/aufs/whout.h:39:
+#define au_ftest_diropq(flags, name)	((flags) & AuDiropq_##name)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 38 checks, 1088 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
