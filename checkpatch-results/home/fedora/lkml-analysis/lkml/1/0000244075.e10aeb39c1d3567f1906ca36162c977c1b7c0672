WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
>From NHM processor onward, Intel processors can support hardware accelerated

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: arch/x86/crypto/crc32c-intel.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cpufeature.h> instead of <asm/cpufeature.h>
#70: FILE: arch/x86/crypto/crc32c-intel.c:15:
+#include <asm/cpufeature.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#86: FILE: arch/x86/crypto/crc32c-intel.c:31:
+		__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#88: FILE: arch/x86/crypto/crc32c-intel.c:33:
+			:"=S"(crc)
 			^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#89: FILE: arch/x86/crypto/crc32c-intel.c:34:
+			:"0"(crc), "c"(*data)
 			^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#104: FILE: arch/x86/crypto/crc32c-intel.c:49:
+		__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#106: FILE: arch/x86/crypto/crc32c-intel.c:51:
+			:"=S"(crc)
 			^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#107: FILE: arch/x86/crypto/crc32c-intel.c:52:
+			:"0"(crc), "c"(*ptmp)
 			^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: arch/x86/crypto/crc32c-intel.c:59:
+		crc = crc32c_intel_le_hw_byte(crc, (unsigned char *)ptmp,
+				 iremainder);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: arch/x86/crypto/crc32c-intel.c:70:
+static int crc32c_intel_setkey(struct crypto_ahash *hash, const u8 *key,
+			unsigned int keylen)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#154: FILE: arch/x86/crypto/crc32c-intel.c:99:
+	for (nbytes = crypto_hash_walk_first(req, &walk); nbytes;
[...]
+	crc = crc32c_intel_le_hw(crc, walk.data, nbytes);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: arch/x86/crypto/crc32c-intel.c:165:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#223: FILE: arch/x86/crypto/crc32c-intel.c:168:
+	if (cpu_has_xmm4_2)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#225: FILE: arch/x86/crypto/crc32c-intel.c:170:
+		return crypto_register_alg(&alg);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#225: FILE: arch/x86/crypto/crc32c-intel.c:170:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#226: FILE: arch/x86/crypto/crc32c-intel.c:171:
+		printk(KERN_ERR"No support in current hardware.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#226: FILE: arch/x86/crypto/crc32c-intel.c:171:
+		printk(KERN_ERR"No support in current hardware.\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#287: FILE: include/asm-x86/cpufeature.h:94:
+#define X86_FEATURE_XMM4_2	(4*32+20) /* Streaming SIMD Extensions-4.2 */
                           	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#287: FILE: include/asm-x86/cpufeature.h:94:
+#define X86_FEATURE_XMM4_2	(4*32+20) /* Streaming SIMD Extensions-4.2 */
                           	     ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000244075.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 5 warnings, 11 checks, 230 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000244075.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
