WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Gitweb:     http://git.kernel.org/tip/f41d911f8c49a5d65c86504c19e8204bb605c4fd

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#43: 
for preemptable RCU (or, under the #else branch of the #ifdef,
    ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#48: 
This variant of preemptable RCU uses a new algorithm whose
                ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#55: 
of code compared to mainline's implementation of preemptable
                                                 ^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: include/linux/rcutree.h:40:
+extern void __rcu_read_lock(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/linux/rcutree.h:41:
+extern void __rcu_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: include/linux/rcutree.h:42:
+extern void exit_rcu(void);

CHECK:BIT_MACRO: Prefer using the BIT macro
#217: FILE: include/linux/sched.h:1735:
+#define RCU_READ_UNLOCK_BLOCKED (1 << 0) /* blocked while in RCU read-side. */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#218: FILE: include/linux/sched.h:1736:
+#define RCU_READ_UNLOCK_NEED_QS (1 << 1) /* RCU core needs CPU response. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#219: FILE: include/linux/sched.h:1737:
+#define RCU_READ_UNLOCK_GOT_QS  (1 << 2) /* CPU has responded to RCU core. */

WARNING:TYPO_SPELLING: 'Preemptable' may be misspelled - perhaps 'Preemptible'?
#257: FILE: init/Kconfig:339:
+	bool "Preemptable tree-based hierarchical RCU"
 	      ^^^^^^^^^^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#356: FILE: kernel/rcutree.c:83:
+extern long rcu_batches_completed_sched(void);

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#367: FILE: kernel/rcutree.c:94:
+					   int preemptable);
 					       ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#425: FILE: kernel/rcutree.c:212:
+	/* If preemptable RCU, no point in sending reschedule IPI. */
 	      ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#426: FILE: kernel/rcutree.c:213:
+	if (rdp->preemptable)
 	         ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#560: FILE: kernel/rcutree.c:1409:
+rcu_init_percpu_data(int cpu, struct rcu_state *rsp, int preemptable)
                                                          ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#568: FILE: kernel/rcutree.c:1425:
+	rdp->preemptable = preemptable;
 	     ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#568: FILE: kernel/rcutree.c:1425:
+	rdp->preemptable = preemptable;
 	                   ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#682: FILE: kernel/rcutree.h:117:
+	bool		preemptable;	/* Preemptable RCU? */
 	    		^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'Preemptable' may be misspelled - perhaps 'Preemptible'?
#682: FILE: kernel/rcutree.h:117:
+	bool		preemptable;	/* Preemptable RCU? */
 	    		            	   ^^^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#698: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#703: FILE: kernel/rcutree_plugin.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#706: FILE: kernel/rcutree_plugin.h:4:
+ * or preemptable semantics.
       ^^^^^^^^^^^

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#719: FILE: kernel/rcutree_plugin.h:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#720: FILE: kernel/rcutree_plugin.h:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#729: FILE: kernel/rcutree_plugin.h:27:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#740: FILE: kernel/rcutree_plugin.h:38:
+	printk(KERN_INFO

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#741: FILE: kernel/rcutree_plugin.h:39:
+	       "Experimental preemptable hierarchical RCU implementation.\n");
 	                     ^^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#772: FILE: kernel/rcutree_plugin.h:70:
+	struct rcu_data *rdp = &per_cpu(rcu_preempt_data, cpu);
+	rdp->passed_quiesc = 1;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#791: FILE: kernel/rcutree_plugin.h:89:
+	    (t->rcu_read_unlock_special & RCU_READ_UNLOCK_BLOCKED) == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rnp->parent"
#893: FILE: kernel/rcutree_plugin.h:191:
+			if (rnp->parent == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#947: FILE: kernel/rcutree_plugin.h:245:
+			printk(" P%d", t->pid);

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#993: FILE: kernel/rcutree_plugin.h:291:
+ * Process callbacks for preemptable RCU.
                          ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1021: FILE: kernel/rcutree_plugin.h:319:
+ * Does preemptable RCU need the CPU to stay out of dynticks mode?
         ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1029: FILE: kernel/rcutree_plugin.h:327:
+ * Initialize preemptable RCU's per-CPU data.
               ^^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1059: FILE: kernel/rcutree_plugin.h:357:
+	printk(KERN_INFO "Hierarchical RCU implementation.\n");

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1072: FILE: kernel/rcutree_plugin.h:370:
+ * Because preemptable RCU does not exist, we never have to check for
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1082: FILE: kernel/rcutree_plugin.h:380:
+ * Because preemptable RCU does not exist, we never have to check for
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1092: FILE: kernel/rcutree_plugin.h:390:
+ * Because preemptable RCU does not exist, there are never any preempted
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1101: FILE: kernel/rcutree_plugin.h:399:
+ * Because preemptable RCU does not exist, it never has any callbacks
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1109: FILE: kernel/rcutree_plugin.h:407:
+ * Because preemptable RCU does not exist, it never has any callbacks
            ^^^^^^^^^^^

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#1121: FILE: kernel/rcutree_plugin.h:419:
+	call_rcu_sched(head, func);

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1126: FILE: kernel/rcutree_plugin.h:424:
+ * Because preemptable RCU does not exist, it never has any work to do.
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1134: FILE: kernel/rcutree_plugin.h:432:
+ * Because preemptable RCU does not exist, it never needs any CPU.
            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1142: FILE: kernel/rcutree_plugin.h:440:
+ * Because preemptable RCU does not exist, there is no per-CPU
            ^^^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000081101.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 34 warnings, 9 checks, 1023 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000081101.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
