WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
 This patch is a simple s/p_s_bh/bh/g to the reiserfs code. This is the second

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#171: FILE: fs/reiserfs/fix_node.c:2013:
 		RFALSE(!n_h
+		       && B_FREE_SPACE(bh) !=

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bh->b_count
#191: FILE: fs/reiserfs/fix_node.c:2097:
+		if (atomic_read(&(bh->b_count)) <= 0)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPLIT_STRING: quoted string split across lines
#197: FILE: fs/reiserfs/fix_node.c:2101:
 				       "reference counter for buffer %s[%d] "
+				       "(%b)", descr, level, bh);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#281: FILE: fs/reiserfs/stree.c:629:
+		if ((bh = p_s_last_element->pe_buffer =

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPLIT_STRING: quoted string split across lines
#317: FILE: fs/reiserfs/stree.c:691:
 				       "invalid format found in block %ld. "
+				       "Fsck?", bh->b_blocknr);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#457: FILE: include/linux/reiserfs_fs.h:760:
+#define PUT_B_NR_ITEMS(bh, val)		do { set_blkh_nr_item(B_BLK_HEAD(bh), val); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#458: FILE: include/linux/reiserfs_fs.h:761:
+#define PUT_B_LEVEL(bh, val)		do { set_blkh_level(B_BLK_HEAD(bh), val); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#459: FILE: include/linux/reiserfs_fs.h:762:
+#define PUT_B_FREE_SPACE(bh, val)	do { set_blkh_free_space(B_BLK_HEAD(bh), val); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bh' - possible side-effects?
#472: FILE: include/linux/reiserfs_fs.h:771:
+#define B_IS_KEYS_LEVEL(bh)      (B_LEVEL(bh) > DISK_LEAF_NODE_LEVEL \
+					    && B_LEVEL(bh) <= MAX_HEIGHT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#473: FILE: include/linux/reiserfs_fs.h:772:
+#define B_IS_KEYS_LEVEL(bh)      (B_LEVEL(bh) > DISK_LEAF_NODE_LEVEL \
+					    && B_LEVEL(bh) <= MAX_HEIGHT)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bh' - possible side-effects?
#483: FILE: include/linux/reiserfs_fs.h:1122:
+#define B_N_CHILD(bh, n_pos)  ((struct disk_child *)\
+((bh)->b_data + BLKH_SIZE + B_NR_ITEMS(bh) * KEY_SIZE + DC_SIZE * (n_pos)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#500: FILE: include/linux/reiserfs_fs.h:1841:
+extern void decrement_bcount(struct buffer_head *bh);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000147282.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 6 warnings, 6 checks, 445 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000147282.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
