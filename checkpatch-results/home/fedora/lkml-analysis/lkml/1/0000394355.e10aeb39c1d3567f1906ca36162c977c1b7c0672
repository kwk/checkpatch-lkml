WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#121: FILE: fs/9p/vfs_inode.c:496:
+		filp = lookup_instantiate_filp(lookup, dentry,
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#133: FILE: fs/affs/affs.h:158:
+extern int	affs_create(struct inode *dir, struct dentry *dentry, int mode, struct vfs_lookup *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: fs/affs/affs.h:158:
+extern int	affs_create(struct inode *dir, struct dentry *dentry, int mode, struct vfs_lookup *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#133: FILE: fs/affs/affs.h:158:
+extern int	affs_create(struct inode *dir, struct dentry *dentry, int mode, struct vfs_lookup *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: fs/cifs/dir.c:267:
+		if ((!lookup /* nfsd case - nfs srv does not set lookup */) ||
+			((lookup->flags & LOOKUP_OPEN) == FALSE)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#325: FILE: fs/exec.c:177:
+	release_open_intent(&nd.lookup.intent.open);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#334: FILE: fs/exec.c:701:
+		release_open_intent(&nd.lookup.intent.open);
 		                     ^^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#345: FILE: fs/ext2/namei.c:106:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct vfs_lookup *lookup)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#345: FILE: fs/ext2/namei.c:106:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct vfs_lookup *lookup)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#345: FILE: fs/ext2/namei.c:106:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct vfs_lookup *lookup)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#345: FILE: fs/ext2/namei.c:106:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct vfs_lookup *lookup)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#500: FILE: fs/hpfs/namei.c:121:
+static int hpfs_create(struct inode *dir, struct dentry *dentry, int mode, struct vfs_lookup *lookup)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#511: FILE: fs/hugetlbfs/inode.c:440:
+static int hugetlbfs_create(struct inode *dir, struct dentry *dentry, int mode, struct vfs_lookup *lookup)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_path.dentry"
#592: FILE: fs/namei.c:376:
+	if (file->f_path.dentry == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#662: FILE: fs/namei.c:1940:
+			error = vfs_create(nd.lookup.path.dentry->d_inode,
 			                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#663: FILE: fs/namei.c:1941:
+					   dentry, mode, &nd.lookup);
 					                  ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#706: FILE: fs/nfs/dir.c:692:
+	if (lookup->flags & (LOOKUP_CONTINUE|LOOKUP_PARENT))
 	                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: fs/nfs/dir.c:716:
+		if (nfs_lookup_check_intent(&nd->lookup, LOOKUP_OPEN) != 0 &&
 				!(server->flags & NFS_MOUNT_NOCTO) &&

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#727: FILE: fs/nfs/dir.c:738:
+	if (nd != NULL && nfs_lookup_check_intent(&nd->lookup, LOOKUP_CREATE) != 0)
 	    ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nd"
#727: FILE: fs/nfs/dir.c:738:
+	if (nd != NULL && nfs_lookup_check_intent(&nd->lookup, LOOKUP_CREATE) != 0)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#762: FILE: fs/nfs/dir.c:994:
+	if (nd == NULL || nfs_lookup_check_intent(&nd->lookup, LOOKUP_OPEN) == 0)
 	    ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd"
#762: FILE: fs/nfs/dir.c:994:
+	if (nd == NULL || nfs_lookup_check_intent(&nd->lookup, LOOKUP_OPEN) == 0)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#809: FILE: fs/nfs/nfs4proc.c:1379:
+static int nfs4_intent_set_file(struct vfs_lookup *lookup, struct path *path, struct nfs4_state *state)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#825: FILE: fs/nfs/nfs4proc.c:1392:
+	filp = lookup_instantiate_filp(lookup, path->dentry, NULL);
 	^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#869: FILE: fs/nfs/nfs4proc.c:1888:
+                 int flags, struct vfs_lookup *lookup)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: fs/nfs/nfs4proc.c:1888:
+                 int flags, struct vfs_lookup *lookup)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#938: FILE: fs/open.c:852:
+struct file *lookup_instantiate_filp(struct vfs_lookup *lookup,
+		struct dentry *dentry,

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#984: FILE: fs/ramfs/inode.c:120:
+static int ramfs_create(struct inode *dir, struct dentry *dentry, int mode, struct vfs_lookup *lookup)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1026: FILE: fs/sysv/namei.c:83:
+static int sysv_create(struct inode * dir, struct dentry * dentry, int mode, struct vfs_lookup *lookup)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1026: FILE: fs/sysv/namei.c:83:
+static int sysv_create(struct inode * dir, struct dentry * dentry, int mode, struct vfs_lookup *lookup)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1026: FILE: fs/sysv/namei.c:83:
+static int sysv_create(struct inode * dir, struct dentry * dentry, int mode, struct vfs_lookup *lookup)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1081: FILE: include/linux/fs.h:1012:
+extern int vfs_create(struct inode *, struct dentry *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1081: FILE: include/linux/fs.h:1012:
+extern int vfs_create(struct inode *, struct dentry *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1081: FILE: include/linux/fs.h:1012:
+extern int vfs_create(struct inode *, struct dentry *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1081: FILE: include/linux/fs.h:1012:
+extern int vfs_create(struct inode *, struct dentry *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#1081: FILE: include/linux/fs.h:1012:
+extern int vfs_create(struct inode *, struct dentry *, int, struct vfs_lookup *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1090: FILE: include/linux/fs.h:1136:
+	int (*create) (struct inode *,struct dentry *,int, struct vfs_lookup *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#1090: FILE: include/linux/fs.h:1136:
+	int (*create) (struct inode *,struct dentry *,int, struct vfs_lookup *);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#1090: FILE: include/linux/fs.h:1136:
+	int (*create) (struct inode *,struct dentry *,int, struct vfs_lookup *);
 	                                             ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1090: FILE: include/linux/fs.h:1136:
+	int (*create) (struct inode *,struct dentry *,int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1090: FILE: include/linux/fs.h:1136:
+	int (*create) (struct inode *,struct dentry *,int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1090: FILE: include/linux/fs.h:1136:
+	int (*create) (struct inode *,struct dentry *,int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#1090: FILE: include/linux/fs.h:1136:
+	int (*create) (struct inode *,struct dentry *,int, struct vfs_lookup *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1101: FILE: include/linux/namei.h:82:
+extern struct file *lookup_instantiate_filp(struct vfs_lookup *lookup,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1102: FILE: include/linux/namei.h:83:
+extern struct file *lookup_instantiate_filp(struct vfs_lookup *lookup,
+		struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1106: FILE: include/linux/namei.h:86:
+extern void release_open_intent(struct open_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct open_intent *' should also have an identifier name
#1106: FILE: include/linux/namei.h:86:
+extern void release_open_intent(struct open_intent *);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1128: FILE: include/linux/qnx4_fs.h:125:
+extern int qnx4_create(struct inode *inode, struct dentry *dentry, int mode, struct vfs_lookup *lookup);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1128: FILE: include/linux/qnx4_fs.h:125:
+extern int qnx4_create(struct inode *inode, struct dentry *dentry, int mode, struct vfs_lookup *lookup);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394355.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 29 warnings, 13 checks, 875 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394355.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
