WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
The question is: how bad is it?  Let's look at those numbers for SLOB (32-bit

WARNING:LINE_SPACING: Missing a blank line after declarations
#100: FILE: drivers/lguest/core.c:281:
+			unsigned int k;
+			sb_printf_append(&sb, GFP_KERNEL, "a");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#103: FILE: drivers/lguest/core.c:284:
+#if 0

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#104: FILE: drivers/lguest/core.c:285:
+			if (sb->buf[j+1] != '\0') {
 			             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#105: FILE: drivers/lguest/core.c:286:
+				printk("Final sb->buf[%i] = %i\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#106: FILE: drivers/lguest/core.c:287:
+				       j+1, sb->buf[j+1]);
 				        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#106: FILE: drivers/lguest/core.c:287:
+				       j+1, sb->buf[j+1]);
 				                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#111: FILE: drivers/lguest/core.c:292:
+					printk("sb->buf[%i] = %i\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#122: FILE: drivers/lguest/core.c:303:
+	printk("1000 x 1000 sb_printf_append == %lli ns %u allocs\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#138: FILE: drivers/lguest/core.c:319:
+	printk("1000 x 1000 sprintf == %lli ns\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#155: FILE: drivers/lguest/core.c:336:
+	printk("1000 x 1000 realloc_no_copy == %lli ns %u allocs\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#172: FILE: drivers/lguest/core.c:353:
+	printk("1000 x 1000 krealloc == %lli ns %u allocs\n",

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#190: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#195: FILE: include/linux/stringbuf.h:1:
+#ifndef _LINUX_STRINGBUF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/linux/stringbuf.h:14:
+extern void sb_printf_append(struct stringbuf **sb,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#210: FILE: include/linux/stringbuf.h:16:
+	__attribute__((format(printf, 3, 4)));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#245: FILE: lib/stringbuf.c:1:
+#include <stdarg.h>

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(__alignof__(struct stringbuf)) over __attribute__((aligned(__alignof__(struct stringbuf))))
#249: FILE: lib/stringbuf.c:5:
+char enomem_string[] __attribute__((aligned(__alignof__(struct stringbuf))))

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#250: FILE: lib/stringbuf.c:6:
+char enomem_string[] __attribute__((aligned(__alignof__(struct stringbuf))))
+	= "stringbuf: out of memory";

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363984.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 5 checks, 222 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363984.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
