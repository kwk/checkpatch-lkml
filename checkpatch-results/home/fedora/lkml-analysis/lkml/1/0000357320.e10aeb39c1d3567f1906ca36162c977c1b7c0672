ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#33: 
--- a/arch/x86/ia32/ia32entry.S

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#85: FILE: include/asm-x86/indirect_32.h:1:
+#ifndef _ASM_X86_INDIRECT_32_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: include/asm-x86/indirect_32.h:5:
+  __u32 eax;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: include/asm-x86/indirect_32.h:6:
+  __u32 ebx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: include/asm-x86/indirect_32.h:7:
+  __u32 ecx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: include/asm-x86/indirect_32.h:8:
+  __u32 edx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: include/asm-x86/indirect_32.h:9:
+  __u32 esi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: include/asm-x86/indirect_32.h:10:
+  __u32 edi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: include/asm-x86/indirect_32.h:11:
+  __u32 ebp;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#98: FILE: include/asm-x86/indirect_32.h:14:
+#define CALL_INDIRECT(regs) \
+  ({ long res; \
+     if (unlikely((regs)->eax > NR_syscalls)) \
+	res = -ENOSYS; \
+     else if (unlikely((regs)->eax == __NR_indirect)) \
+	res = -EINVAL; \
+     else { \
+	extern long (*sys_call_table[]) (__u32, __u32, __u32, __u32, __u32, __u32); \
+	res = sys_call_table[(regs)->eax] ((regs)->ebx, (regs)->ecx, (regs)->edx, \
+					   (regs)->esi, (regs)->edi, (regs)->ebp); \
+     } \
+     res; })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: include/asm-x86/indirect_32.h:15:
+  ({ long res; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: include/asm-x86/indirect_32.h:16:
+     if (unlikely((regs)->eax > NR_syscalls)) \$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#101: FILE: include/asm-x86/indirect_32.h:17:
+	res = -ENOSYS; \

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: include/asm-x86/indirect_32.h:18:
+     else if (unlikely((regs)->eax == __NR_indirect)) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: include/asm-x86/indirect_32.h:20:
+     else { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: include/asm-x86/indirect_32.h:24:
+     } \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: include/asm-x86/indirect_32.h:25:
+     res; })$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: include/asm-x86/indirect_64.h:1:
+#ifndef _ASM_X86_INDIRECT_64_H

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: include/asm-x86/indirect_64.h:5:
+  __u64 rax;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: include/asm-x86/indirect_64.h:6:
+  __u64 rdi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: include/asm-x86/indirect_64.h:7:
+  __u64 rsi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: include/asm-x86/indirect_64.h:8:
+  __u64 rdx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: include/asm-x86/indirect_64.h:9:
+  __u64 r10;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: include/asm-x86/indirect_64.h:10:
+  __u64 r8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: include/asm-x86/indirect_64.h:11:
+  __u64 r9;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#128: FILE: include/asm-x86/indirect_64.h:14:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: include/asm-x86/indirect_64.h:16:
+  CALL_INDIRECT_WMAX(regs, __NR_syscall_max)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#131: FILE: include/asm-x86/indirect_64.h:17:
+#define CALL_INDIRECT_WMAX(regs, max) \
+  ({ long res; \
+     if (unlikely((regs)->rax > max)) \
+	res = -ENOSYS; \
+     else if (unlikely((regs)->rax == __NR_indirect)) \
+	res = -EINVAL; \
+     else { \
+	extern long (*sys_call_table[]) (__u64, __u64, __u64, __u64, __u64, __u64); \
+	res = sys_call_table[(regs)->rax] ((regs)->rdi, (regs)->rsi, (regs)->rdx, \
+					   (regs)->r10, (regs)->r8, (regs)->r9); \
+     } \
+     res; })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'max' may be better as '(max)' to avoid precedence issues
#131: FILE: include/asm-x86/indirect_64.h:17:
+#define CALL_INDIRECT_WMAX(regs, max) \
+  ({ long res; \
+     if (unlikely((regs)->rax > max)) \
+	res = -ENOSYS; \
+     else if (unlikely((regs)->rax == __NR_indirect)) \
+	res = -EINVAL; \
+     else { \
+	extern long (*sys_call_table[]) (__u64, __u64, __u64, __u64, __u64, __u64); \
+	res = sys_call_table[(regs)->rax] ((regs)->rdi, (regs)->rsi, (regs)->rdx, \
+					   (regs)->r10, (regs)->r8, (regs)->r9); \
+     } \
+     res; })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: include/asm-x86/indirect_64.h:18:
+  ({ long res; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: include/asm-x86/indirect_64.h:19:
+     if (unlikely((regs)->rax > max)) \$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#134: FILE: include/asm-x86/indirect_64.h:20:
+	res = -ENOSYS; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: include/asm-x86/indirect_64.h:21:
+     else if (unlikely((regs)->rax == __NR_indirect)) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: include/asm-x86/indirect_64.h:23:
+     else { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: include/asm-x86/indirect_64.h:27:
+     } \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: include/asm-x86/indirect_64.h:28:
+     res; })$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: include/asm-x86/indirect.h:1:
+#ifdef CONFIG_X86_32

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000357320.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 32 warnings, 4 checks, 91 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000357320.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
