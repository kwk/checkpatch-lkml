WARNING:TYPO_SPELLING: 'orginally' may be misspelled - perhaps 'originally'?
#35: 
> > kunmap() takes as argument the struct page that orginally got kmap()'d,
                                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> > however the sg_miter_stop() function passed it the kernel virtual address

CHECK:SPACING: No space is necessary after a cast
#120: FILE: include/linux/highmem.h:45:
+#define __kunmap(page) do { (void) (page); } while (0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#120: FILE: include/linux/highmem.h:45:
+#define __kunmap(page) do { (void) (page); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#129: FILE: include/linux/highmem.h:56:
+#define __kunmap_atomic(addr, idx)	do { pagefault_enable(); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#137: FILE: include/linux/highmem.h:65:
+#define kunmap(p)			\
+	do {				\
+		struct page *__p;	\
+		(void) (&__p == &(p));	\
+		__kunmap(p);		\
+	} while (0)

CHECK:SPACING: No space is necessary after a cast
#140: FILE: include/linux/highmem.h:68:
+		(void) (&__p == &(p));	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#144: FILE: include/linux/highmem.h:72:
+#define kunmap_atomic(a, t)		\
+	do {				\
+		void *__p;		\
+		(void) (&__p == &(a));	\
+		__kunmap_atomic(a, t);	\
+	} while (0)

CHECK:SPACING: No space is necessary after a cast
#147: FILE: include/linux/highmem.h:75:
+		(void) (&__p == &(a));	\

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000203174.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 5 checks, 80 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000203174.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
