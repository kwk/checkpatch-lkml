WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: drivers/block/drbd/lru_cache.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#48: FILE: drivers/block/drbd/lru_cache.h:2:
+/*
+   lru_cache.c

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#68: FILE: drivers/block/drbd/lru_cache.h:22:
+   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#78: FILE: drivers/block/drbd/lru_cache.h:32:
+	struct hlist_node colision;
 	                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#101: FILE: drivers/block/drbd/lru_cache.h:55:
+	/* hash colision chains here, then element storage. */
 	        ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#104: FILE: drivers/block/drbd/lru_cache.h:58:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#111: FILE: drivers/block/drbd/lru_cache.h:65:
+};
+#define LC_PARANOIA (1<<__LC_PARANOIA)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#111: FILE: drivers/block/drbd/lru_cache.h:65:
+#define LC_PARANOIA (1<<__LC_PARANOIA)
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#111: FILE: drivers/block/drbd/lru_cache.h:65:
+#define LC_PARANOIA (1<<__LC_PARANOIA)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#112: FILE: drivers/block/drbd/lru_cache.h:66:
+#define LC_DIRTY    (1<<__LC_DIRTY)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#112: FILE: drivers/block/drbd/lru_cache.h:66:
+#define LC_DIRTY    (1<<__LC_DIRTY)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#113: FILE: drivers/block/drbd/lru_cache.h:67:
+#define LC_STARVING (1<<__LC_STARVING)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#113: FILE: drivers/block/drbd/lru_cache.h:67:
+#define LC_STARVING (1<<__LC_STARVING)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: drivers/block/drbd/lru_cache.h:69:
+extern struct lru_cache *lc_alloc(const char *name, unsigned int e_count,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: drivers/block/drbd/lru_cache.h:71:
+extern void lc_reset(struct lru_cache *lc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: drivers/block/drbd/lru_cache.h:72:
+extern void lc_free(struct lru_cache *lc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: drivers/block/drbd/lru_cache.h:73:
+extern void lc_set(struct lru_cache *lc, unsigned int enr, int index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: drivers/block/drbd/lru_cache.h:74:
+extern void lc_del(struct lru_cache *lc, struct lc_element *element);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: drivers/block/drbd/lru_cache.h:76:
+extern struct lc_element *lc_try_get(struct lru_cache *lc, unsigned int enr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: drivers/block/drbd/lru_cache.h:77:
+extern struct lc_element *lc_find(struct lru_cache *lc, unsigned int enr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: drivers/block/drbd/lru_cache.h:78:
+extern struct lc_element *lc_get(struct lru_cache *lc, unsigned int enr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: drivers/block/drbd/lru_cache.h:79:
+extern unsigned int lc_put(struct lru_cache *lc, struct lc_element *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: drivers/block/drbd/lru_cache.h:80:
+extern void lc_changed(struct lru_cache *lc, struct lc_element *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: drivers/block/drbd/lru_cache.h:83:
+extern size_t lc_printf_stats(struct seq_file *seq, struct lru_cache *lc);

WARNING:SPACING: Unnecessary space before function pointer arguments
#132: FILE: drivers/block/drbd/lru_cache.h:86:
+	     void (*detail) (struct seq_file *, struct lc_element *));

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#136: FILE: drivers/block/drbd/lru_cache.h:90:
+ * returns true if we aquired the lock.
                       ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: drivers/block/drbd/lru_cache.h:106:
+	struct lc_element *e = lc_find(lc, enr);
+	return e && e->refcnt;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lc' - possible side-effects?
#157: FILE: drivers/block/drbd/lru_cache.h:111:
+#define lc_e_base(lc)  ((char *)((lc)->slot + (lc)->nr_elements))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lc' - possible side-effects?
#158: FILE: drivers/block/drbd/lru_cache.h:112:
+#define lc_entry(lc, i) ((struct lc_element *) \
+		       (lc_e_base(lc) + (i)*(lc)->element_size))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#159: FILE: drivers/block/drbd/lru_cache.h:113:
+		       (lc_e_base(lc) + (i)*(lc)->element_size))
 		                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#160: FILE: drivers/block/drbd/lru_cache.h:114:
+#define lc_index_of(lc, e) (((char *)(e) - lc_e_base(lc))/(lc)->element_size)
                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lc' - possible side-effects?
#160: FILE: drivers/block/drbd/lru_cache.h:114:
+#define lc_index_of(lc, e) (((char *)(e) - lc_e_base(lc))/(lc)->element_size)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#167: FILE: drivers/block/drbd/lru_cache.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#168: FILE: drivers/block/drbd/lru_cache.c:2:
+/*
+   lru_cache.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#188: FILE: drivers/block/drbd/lru_cache.c:22:
+   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#199: FILE: drivers/block/drbd/lru_cache.c:33:
+#define PARANOIA_ENTRY() BUG_ON(test_and_set_bit(__LC_PARANOIA, &lc->flags))

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#200: FILE: drivers/block/drbd/lru_cache.c:34:
+#define PARANOIA_LEAVE() do { clear_bit(__LC_PARANOIA, &lc->flags); smp_mb__after_clear_bit(); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#201: FILE: drivers/block/drbd/lru_cache.c:35:
+#define RETURN(x...)     do { PARANOIA_LEAVE(); return x ; } while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: drivers/block/drbd/lru_cache.c:44:
+static inline void lc_init(struct lru_cache *lc,
+		const size_t bytes, const char *name,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#245: FILE: drivers/block/drbd/lru_cache.c:79:
+	BUG_ON(!e_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: drivers/block/drbd/lru_cache.c:105:
+	lc_init(lc, size_of_lc(lc->nr_elements, lc->element_size), lc->name,
+			lc->nr_elements, lc->element_size, lc->lc_private);

WARNING:SPLIT_STRING: quoted string split across lines
#284: FILE: drivers/block/drbd/lru_cache.c:118:
+	return seq_printf(seq, "\t%s: used:%u/%u "
+		"hits:%lu misses:%lu starving:%lu dirty:%lu changed:%lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#294: FILE: drivers/block/drbd/lru_cache.c:128:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#306: FILE: drivers/block/drbd/lru_cache.c:140:
+	BUG_ON(!lc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#307: FILE: drivers/block/drbd/lru_cache.c:141:
+	BUG_ON(!lc->nr_elements);

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#308: FILE: drivers/block/drbd/lru_cache.c:142:
+	hlist_for_each_entry(e, n, lc->slot + lc_hash_fn(lc, enr), colision) {
 	                                                           ^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#327: FILE: drivers/block/drbd/lru_cache.c:161:
+	hlist_del(&e->colision);
 	              ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#341: FILE: drivers/block/drbd/lru_cache.c:175:
+	BUG_ON(e->refcnt);

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#343: FILE: drivers/block/drbd/lru_cache.c:177:
+	hlist_del_init(&e->colision);
 	                   ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#372: FILE: drivers/block/drbd/lru_cache.c:206:
+
+

WARNING:TYPO_SPELLING: 'houskeeping' may be misspelled - perhaps 'housekeeping'?
#390: FILE: drivers/block/drbd/lru_cache.c:224:
+ *          The user now should do whatever houskeeping is necessary. Then he
                                             ^^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#404: FILE: drivers/block/drbd/lru_cache.c:238:
+	BUG_ON(!lc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#405: FILE: drivers/block/drbd/lru_cache.c:239:
+	BUG_ON(!lc->nr_elements);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#442: FILE: drivers/block/drbd/lru_cache.c:276:
+	BUG_ON(!e);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#445: FILE: drivers/block/drbd/lru_cache.c:279:
+	BUG_ON(++e->refcnt != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#462: FILE: drivers/block/drbd/lru_cache.c:296:
+	BUG_ON(!lc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#463: FILE: drivers/block/drbd/lru_cache.c:297:
+	BUG_ON(!lc->nr_elements);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#484: FILE: drivers/block/drbd/lru_cache.c:318:
+	BUG_ON(e != lc->changing_element);

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#488: FILE: drivers/block/drbd/lru_cache.c:322:
+	hlist_add_head(&e->colision,
 	                   ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: drivers/block/drbd/lru_cache.c:323:
+	hlist_add_head(&e->colision,
+		lc->slot + lc_hash_fn(lc, lc->new_number));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#497: FILE: drivers/block/drbd/lru_cache.c:331:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#500: FILE: drivers/block/drbd/lru_cache.c:334:
+	BUG_ON(!lc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#501: FILE: drivers/block/drbd/lru_cache.c:335:
+	BUG_ON(!lc->nr_elements);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#502: FILE: drivers/block/drbd/lru_cache.c:336:
+	BUG_ON(!e);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#505: FILE: drivers/block/drbd/lru_cache.c:339:
+	BUG_ON(e->refcnt == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#506: FILE: drivers/block/drbd/lru_cache.c:340:
+	BUG_ON(e == lc->changing_element);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#517: FILE: drivers/block/drbd/lru_cache.c:351:
+
+

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#535: FILE: drivers/block/drbd/lru_cache.c:369:
+	hlist_del_init(&e->colision);
 	                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#536: FILE: drivers/block/drbd/lru_cache.c:370:
+	hlist_add_head(&e->colision, lc->slot + lc_hash_fn(lc, enr));
 	                   ^^^^^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#544: FILE: drivers/block/drbd/lru_cache.c:378:
+	     void (*detail) (struct seq_file *, struct lc_element *))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141073.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 37 warnings, 31 checks, 513 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141073.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
