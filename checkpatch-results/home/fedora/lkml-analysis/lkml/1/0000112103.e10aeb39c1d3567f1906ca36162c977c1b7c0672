WARNING:SPLIT_STRING: quoted string split across lines
#61: FILE: fs/fat/cache.c:245:
+			fat_fs_error(sb, __func__, "detected the cluster "
+				"chain loop (i_pos %lld)",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#73: FILE: fs/fat/cache.c:256:
+			fat_fs_error(sb, __func__, "invalid cluster chain"
+				     " (i_pos %lld)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: fs/fat/cache.c:289:
+		fat_fs_error(sb, __func__, "request beyond EOF (i_pos %lld)",
+			MSDOS_I(inode)->i_pos);

WARNING:SPLIT_STRING: quoted string split across lines
#99: FILE: fs/fat/dir.c:89:
+		fat_fs_warning(sb, __func__, "Directory bread(block %llu) "
+			"failed",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: fs/fat/dir.c:1274:
+		fat_fs_warning(sb, __func__, "Corrupted directory (i_pos %lld)",
+			MSDOS_I(dir)->i_pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: fs/fat/fat.h:319:
+extern void fat_fs_error(struct super_block *s, const char *function,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: fs/fat/fat.h:320:
+extern void fat_fs_error(struct super_block *s, const char *function,
+		const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#136: FILE: fs/fat/fat.h:321:
+	__attribute__ ((format (printf, 3, 4))) __cold;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: fs/fat/fat.h:322:
+extern void fat_fs_warning(struct super_block *s, const char *function,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: fs/fat/fat.h:323:
+extern void fat_fs_warning(struct super_block *s, const char *function,
+		const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#139: FILE: fs/fat/fat.h:324:
+	__attribute__ ((format (printf, 3, 4))) __cold;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: fs/fat/fatent.c:97:
+	fat_fs_warning(sb, __func__, "FAT read failed (blocknr %llu)",
+		(llu)blocknr);

WARNING:SPLIT_STRING: quoted string split across lines
#164: FILE: fs/fat/fatent.c:110:
+		fat_fs_warning(sb, __func__, "FAT: FAT read failed "
+			"(blocknr %llu)",

WARNING:SPLIT_STRING: quoted string split across lines
#175: FILE: fs/fat/fatent.c:351:
+		fat_fs_error(sb, __func__, "invalid access to FAT "
+			"(entry 0x%08x)", entry);

WARNING:SPLIT_STRING: quoted string split across lines
#186: FILE: fs/fat/fatent.c:564:
+			fat_fs_error(sb, __func__, "deleting FAT entry beyond "
+				"EOF");

WARNING:SPLIT_STRING: quoted string split across lines
#217: FILE: fs/fat/inode.c:83:
+		fat_fs_error(sb, __func__, "corrupted file size "
+			"(i_pos %lld, %lld)",

WARNING:SPLIT_STRING: quoted string split across lines
#228: FILE: fs/fat/inode.c:592:
+		fat_fs_warning(sb, __func__, "unable to read inode block "
+		       "for updating (i_pos %lld)", i_pos);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#239: FILE: fs/fat/inode.c:1119:
+				printk(KERN_ERR "FAT: Unrecognized mount "

WARNING:SPLIT_STRING: quoted string split across lines
#240: FILE: fs/fat/inode.c:1120:
+				printk(KERN_ERR "FAT: Unrecognized mount "
+					"option \"%s\" or missing value\n", p);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#251: FILE: fs/fat/inode.c:1129:
+		printk(KERN_WARNING "FAT: utf8 is not a recommended IO "

WARNING:SPLIT_STRING: quoted string split across lines
#252: FILE: fs/fat/inode.c:1130:
+		printk(KERN_WARNING "FAT: utf8 is not a recommended IO "
+			"charset for FAT filesystems, filesystem will be "

WARNING:SPLIT_STRING: quoted string split across lines
#253: FILE: fs/fat/inode.c:1131:
+			"charset for FAT filesystems, filesystem will be "
+			"case sensitive!");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#262: FILE: fs/fat/inode.c:1348:
+			printk(KERN_ERR "FAT: bogus number of reserved "

WARNING:SPLIT_STRING: quoted string split across lines
#263: FILE: fs/fat/inode.c:1349:
+			printk(KERN_ERR "FAT: bogus number of reserved "
+					"sectors\n");

WARNING:SPLIT_STRING: quoted string split across lines
#298: FILE: fs/fat/inode.c:1394:
 		printk(KERN_ERR "FAT: logical sector size too small for device"
+				" (logical sector size = %u)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#316: FILE: fs/fat/inode.c:1409:
+			printk(KERN_ERR "FAT: unable to read boot sector "

WARNING:SPLIT_STRING: quoted string split across lines
#317: FILE: fs/fat/inode.c:1410:
+			printk(KERN_ERR "FAT: unable to read boot sector "
+					"(logical sector size = %lu)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#328: FILE: fs/fat/inode.c:1446:
+			printk(KERN_ERR "FAT: bread failed, FSINFO "

WARNING:SPLIT_STRING: quoted string split across lines
#329: FILE: fs/fat/inode.c:1447:
+			printk(KERN_ERR "FAT: bread failed, FSINFO "
+					"block (sector = %lu)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#340: FILE: fs/fat/inode.c:1477:
+			printk(KERN_ERR "FAT: bogus directroy-entries"

WARNING:SPLIT_STRING: quoted string split across lines
#341: FILE: fs/fat/inode.c:1478:
+			printk(KERN_ERR "FAT: bogus directroy-entries"
+					" per block (%u)\n", sbi->dir_entries);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: fs/fat/misc.c:19:
+void fat_fs_error(struct super_block *s, const char *function,
+		const char *fmt, ...)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#378: FILE: fs/fat/misc.c:23:
+	printk(KERN_ERR "FAT: Filesystem error (dev %s): %s:\n", s->s_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: fs/fat/misc.c:24:
+	printk(KERN_ERR "FAT: Filesystem error (dev %s): %s:\n", s->s_id,
+		function);

WARNING:TYPO_SPELLING: 'stil' may be misspelled - perhaps 'still'?
#391: FILE: fs/fat/misc.c:40:
+ * fat_fs_warning reports a file system non-critical problem that stil
                                                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#394: FILE: fs/fat/misc.c:43:
+void fat_fs_warning(struct super_block *s, const char * function,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: fs/fat/misc.c:44:
+void fat_fs_warning(struct super_block *s, const char * function,
+		const char *fmt, ...)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#399: FILE: fs/fat/misc.c:48:
+	printk(KERN_ERR "FAT: Filesystem warning (dev %s): %s:\n", s->s_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: fs/fat/misc.c:49:
+	printk(KERN_ERR "FAT: Filesystem warning (dev %s): %s:\n", s->s_id,
+		function);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#402: FILE: fs/fat/misc.c:51:
+	printk(KERN_ERR "    ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#405: FILE: fs/fat/misc.c:54:
+	printk("\n");

WARNING:SPLIT_STRING: quoted string split across lines
#427: FILE: fs/fat/misc.c:80:
+		fat_fs_warning(sb, __func__, "Invalid FSINFO signature: "
+		       "0x%08x, 0x%08x (sector = %lu)",

WARNING:SPLIT_STRING: quoted string split across lines
#440: FILE: fs/fat/misc.c:149:
+		fat_fs_error(sb, __func__, "clusters badly computed "
+			"(%d != %llu)",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112103.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 31 warnings, 11 checks, 365 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112103.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
