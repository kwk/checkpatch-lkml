WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#16: 
Subject: [PATCH 147/148] include/asm-x86/xor_32.h: checkpatch cleanups - formatting only

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#46: FILE: include/asm-x86/xor_32.h:19:
+#define LD(x, y)	"       movq   8*("#x")(%1), %%mm"#y"   ;\n"

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#47: FILE: include/asm-x86/xor_32.h:20:
+#define ST(x, y)	"       movq %%mm"#y",   8*("#x")(%1)   ;\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#48: FILE: include/asm-x86/xor_32.h:21:
+#define XO1(x, y)	"       pxor   8*("#x")(%2), %%mm"#y"   ;\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#49: FILE: include/asm-x86/xor_32.h:22:
+#define XO2(x, y)	"       pxor   8*("#x")(%3), %%mm"#y"   ;\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#50: FILE: include/asm-x86/xor_32.h:23:
+#define XO3(x, y)	"       pxor   8*("#x")(%4), %%mm"#y"   ;\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#51: FILE: include/asm-x86/xor_32.h:24:
+#define XO4(x, y)	"       pxor   8*("#x")(%5), %%mm"#y"   ;\n"

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#60: FILE: include/asm-x86/xor_32.h:35:
+	asm volatile(

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#75: FILE: include/asm-x86/xor_32.h:37:
+#define BLOCK(i)				\
+	LD(i, 0)				\
+		LD(i + 1, 1)			\
+			LD(i + 2, 2)		\
+				LD(i + 3, 3)	\
+	XO1(i, 0)				\
+	ST(i, 0)				\
+		XO1(i+1, 1)			\
+		ST(i+1, 1)			\
+			XO1(i + 2, 2)		\
+			ST(i + 2, 2)		\
+				XO1(i + 3, 3)	\
+				ST(i + 3, 3)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#75: FILE: include/asm-x86/xor_32.h:37:
+#define BLOCK(i)				\
+	LD(i, 0)				\
+		LD(i + 1, 1)			\
+			LD(i + 2, 2)		\
+				LD(i + 3, 3)	\
+	XO1(i, 0)				\
+	ST(i, 0)				\
+		XO1(i+1, 1)			\
+		ST(i+1, 1)			\
+			XO1(i + 2, 2)		\
+			ST(i + 2, 2)		\
+				XO1(i + 3, 3)	\
+				ST(i + 3, 3)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#82: FILE: include/asm-x86/xor_32.h:44:
+		XO1(i+1, 1)			\
 		     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#83: FILE: include/asm-x86/xor_32.h:45:
+		ST(i+1, 1)			\
 		    ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#100: FILE: include/asm-x86/xor_32.h:79:
+	asm volatile(

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#119: FILE: include/asm-x86/xor_32.h:81:
+#define BLOCK(i)				\
+	LD(i, 0)				\
+		LD(i + 1, 1)			\
+			LD(i + 2, 2)		\
+				LD(i + 3, 3)	\
+	XO1(i, 0)				\
+		XO1(i + 1, 1)			\
+			XO1(i + 2, 2)		\
+				XO1(i + 3, 3)	\
+	XO2(i, 0)				\
+	ST(i, 0)				\
+		XO2(i + 1, 1)			\
+		ST(i + 1, 1)			\
+			XO2(i + 2, 2)		\
+			ST(i + 2, 2)		\
+				XO2(i + 3, 3)	\
+				ST(i + 3, 3)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#119: FILE: include/asm-x86/xor_32.h:81:
+#define BLOCK(i)				\
+	LD(i, 0)				\
+		LD(i + 1, 1)			\
+			LD(i + 2, 2)		\
+				LD(i + 3, 3)	\
+	XO1(i, 0)				\
+		XO1(i + 1, 1)			\
+			XO1(i + 2, 2)		\
+				XO1(i + 3, 3)	\
+	XO2(i, 0)				\
+	ST(i, 0)				\
+		XO2(i + 1, 1)			\
+		ST(i + 1, 1)			\
+			XO2(i + 2, 2)		\
+			ST(i + 2, 2)		\
+				XO2(i + 3, 3)	\
+				ST(i + 3, 3)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#144: FILE: include/asm-x86/xor_32.h:128:
+	asm volatile(

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#167: FILE: include/asm-x86/xor_32.h:130:
+#define BLOCK(i)				\
+	LD(i, 0)				\
+		LD(i + 1, 1)			\
+			LD(i + 2, 2)		\
+				LD(i + 3, 3)	\
+	XO1(i, 0)				\
+		XO1(i + 1, 1)			\
+			XO1(i + 2, 2)		\
+				XO1(i + 3, 3)	\
+	XO2(i, 0)				\
+		XO2(i + 1, 1)			\
+			XO2(i + 2, 2)		\
+				XO2(i + 3, 3)	\
+	XO3(i, 0)				\
+	ST(i, 0)				\
+		XO3(i + 1, 1)			\
+		ST(i + 1, 1)			\
+			XO3(i + 2, 2)		\
+			ST(i + 2, 2)		\
+				XO3(i + 3, 3)	\
+				ST(i + 3, 3)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#167: FILE: include/asm-x86/xor_32.h:130:
+#define BLOCK(i)				\
+	LD(i, 0)				\
+		LD(i + 1, 1)			\
+			LD(i + 2, 2)		\
+				LD(i + 3, 3)	\
+	XO1(i, 0)				\
+		XO1(i + 1, 1)			\
+			XO1(i + 2, 2)		\
+				XO1(i + 3, 3)	\
+	XO2(i, 0)				\
+		XO2(i + 1, 1)			\
+			XO2(i + 2, 2)		\
+				XO2(i + 3, 3)	\
+	XO3(i, 0)				\
+	ST(i, 0)				\
+		XO3(i + 1, 1)			\
+		ST(i + 1, 1)			\
+			XO3(i + 2, 2)		\
+			ST(i + 2, 2)		\
+				XO3(i + 3, 3)	\
+				ST(i + 3, 3)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#199: FILE: include/asm-x86/xor_32.h:191:
+	asm volatile(

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#226: FILE: include/asm-x86/xor_32.h:193:
+#define BLOCK(i)				\
+	LD(i, 0)				\
+		LD(i + 1, 1)			\
+			LD(i + 2, 2)		\
+				LD(i + 3, 3)	\
+	XO1(i, 0)				\
+		XO1(i + 1, 1)			\
+			XO1(i + 2, 2)		\
+				XO1(i + 3, 3)	\
+	XO2(i, 0)				\
+		XO2(i + 1, 1)			\
+			XO2(i + 2, 2)		\
+				XO2(i + 3, 3)	\
+	XO3(i, 0)				\
+		XO3(i + 1, 1)			\
+			XO3(i + 2, 2)		\
+				XO3(i + 3, 3)	\
+	XO4(i, 0)				\
+	ST(i, 0)				\
+		XO4(i + 1, 1)			\
+		ST(i + 1, 1)			\
+			XO4(i + 2, 2)		\
+			ST(i + 2, 2)		\
+				XO4(i + 3, 3)	\
+				ST(i + 3, 3)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#226: FILE: include/asm-x86/xor_32.h:193:
+#define BLOCK(i)				\
+	LD(i, 0)				\
+		LD(i + 1, 1)			\
+			LD(i + 2, 2)		\
+				LD(i + 3, 3)	\
+	XO1(i, 0)				\
+		XO1(i + 1, 1)			\
+			XO1(i + 2, 2)		\
+				XO1(i + 3, 3)	\
+	XO2(i, 0)				\
+		XO2(i + 1, 1)			\
+			XO2(i + 2, 2)		\
+				XO2(i + 3, 3)	\
+	XO3(i, 0)				\
+		XO3(i + 1, 1)			\
+			XO3(i + 2, 2)		\
+				XO3(i + 3, 3)	\
+	XO4(i, 0)				\
+	ST(i, 0)				\
+		XO4(i + 1, 1)			\
+		ST(i + 1, 1)			\
+			XO4(i + 2, 2)		\
+			ST(i + 2, 2)		\
+				XO4(i + 3, 3)	\
+				ST(i + 3, 3)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#275: FILE: include/asm-x86/xor_32.h:262:
+	asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#293: FILE: include/asm-x86/xor_32.h:310:
+	asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#311: FILE: include/asm-x86/xor_32.h:367:
+	asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#332: FILE: include/asm-x86/xor_32.h:441:
+	asm volatile(

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#398: FILE: include/asm-x86/xor_32.h:569:
+#define LD(x, y)	"       movaps   "OFFS(x)"(%1), %%xmm"#y"	;\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#399: FILE: include/asm-x86/xor_32.h:570:
+#define ST(x, y)	"       movaps %%xmm"#y",   "OFFS(x)"(%1)	;\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#410: FILE: include/asm-x86/xor_32.h:576:
+#define XO1(x, y)	"       xorps   "OFFS(x)"(%2), %%xmm"#y"	;\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#411: FILE: include/asm-x86/xor_32.h:577:
+#define XO2(x, y)	"       xorps   "OFFS(x)"(%3), %%xmm"#y"	;\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#412: FILE: include/asm-x86/xor_32.h:578:
+#define XO3(x, y)	"       xorps   "OFFS(x)"(%4), %%xmm"#y"	;\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#413: FILE: include/asm-x86/xor_32.h:579:
+#define XO4(x, y)	"       xorps   "OFFS(x)"(%5), %%xmm"#y"	;\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#414: FILE: include/asm-x86/xor_32.h:580:
+#define XO5(x, y)	"       xorps   "OFFS(x)"(%6), %%xmm"#y"	;\n"

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#428: FILE: include/asm-x86/xor_32.h:592:
+	asm volatile(

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#433: FILE: include/asm-x86/xor_32.h:594:
+#define BLOCK(i)					\
+		LD(i, 0)				\
+			LD(i + 1, 1)			\
 		PF1(i)					\
+				PF1(i + 2)		\
+				LD(i + 2, 2)		\
+					LD(i + 3, 3)	\
+		PF0(i + 4)				\
+				PF0(i + 6)		\
+		XO1(i, 0)				\
+			XO1(i + 1, 1)			\
+				XO1(i + 2, 2)		\
+					XO1(i + 3, 3)	\
+		ST(i, 0)				\
+			ST(i + 1, 1)			\
+				ST(i + 2, 2)		\
+					ST(i + 3, 3)	\
 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#433: FILE: include/asm-x86/xor_32.h:594:
+#define BLOCK(i)					\
+		LD(i, 0)				\
+			LD(i + 1, 1)			\
 		PF1(i)					\
+				PF1(i + 2)		\
+				LD(i + 2, 2)		\
+					LD(i + 3, 3)	\
+		PF0(i + 4)				\
+				PF0(i + 6)		\
+		XO1(i, 0)				\
+			XO1(i + 1, 1)			\
+				XO1(i + 2, 2)		\
+					XO1(i + 3, 3)	\
+		ST(i, 0)				\
+			ST(i + 1, 1)			\
+				ST(i + 2, 2)		\
+					ST(i + 3, 3)	\
 

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#505: FILE: include/asm-x86/xor_32.h:646:
+	asm volatile(

ERROR:SPACING: space prohibited before that close parenthesis ')'
#574: FILE: include/asm-x86/xor_32.h:692:
+	: "memory" );

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#590: FILE: include/asm-x86/xor_32.h:707:
+	asm volatile(

ERROR:SPACING: space prohibited before that close parenthesis ')'
#671: FILE: include/asm-x86/xor_32.h:760:
+	: "memory" );

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#692: FILE: include/asm-x86/xor_32.h:783:
+	asm volatile(

CHECK:CAMELCASE: Avoid CamelCase: <xor_block_pIII_sse>
#830: FILE: include/asm-x86/xor_32.h:872:
+		xor_speed(&xor_block_pIII_sse);		\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <xor_block_pII_mmx>
#832: FILE: include/asm-x86/xor_32.h:874:
+		xor_speed(&xor_block_pII_mmx);		\

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304433.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 2 warnings, 34 checks, 783 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304433.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
