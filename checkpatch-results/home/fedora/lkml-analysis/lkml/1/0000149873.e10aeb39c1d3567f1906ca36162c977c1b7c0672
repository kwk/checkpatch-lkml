CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#284: FILE: kernel/trace/ftrace.c:350:
+	pg = profile_pages = profile_pages_start;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#328: FILE: kernel/trace/ftrace.c:375:
+	pg = profile_pages_start = profile_pages;

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#378: FILE: kernel/trace/ftrace.c:409:
+	ftrace_profile_hash =
+		kzalloc(sizeof(struct hlist_head) * size, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:REPEATED_WORD: Possible repeated word: 'and'
#483: FILE: kernel/trace/ftrace.c:504:
+ * If we are not in an interrupt, or softirq and
+ * and interrupts are disabled and preemption is not enabled

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#555: FILE: kernel/trace/ftrace.c:589:
+ftrace_profile_read(struct file *filp, char __user *ubuf,
                                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: kernel/trace/ftrace.c:590:
+ftrace_profile_read(struct file *filp, char __user *ubuf,
+		     size_t cnt, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: kernel/trace/ftrace.c:674:
+  ((PAGE_SIZE - sizeof(struct ftrace_page)) / sizeof(struct dyn_ftrace))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pg' - possible side-effects?
#663: FILE: kernel/trace/ftrace.c:688:
+#define do_for_each_ftrace_rec(pg, rec)					\
+	for (pg = ftrace_pages_start; pg; pg = pg->next) {		\
+		int _____i;						\
+		for (_____i = 0; _____i < pg->index; _____i++) {	\
+			rec = &pg->records[_____i];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#663: FILE: kernel/trace/ftrace.c:688:
+#define do_for_each_ftrace_rec(pg, rec)					\
+	for (pg = ftrace_pages_start; pg; pg = pg->next) {		\
+		int _____i;						\
+		for (_____i = 0; _____i < pg->index; _____i++) {	\
+			rec = &pg->records[_____i];

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#669: FILE: kernel/trace/ftrace.c:694:
+#define while_for_each_ftrace_rec()		\
+		}				\
+	}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149873.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 5 warnings, 4 checks, 638 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149873.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
