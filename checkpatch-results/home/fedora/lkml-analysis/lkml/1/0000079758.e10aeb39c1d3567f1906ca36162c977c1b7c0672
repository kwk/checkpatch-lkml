WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: arch/score/kernel/irq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#51: FILE: arch/score/kernel/irq.c:2:
+ * arch/score/kernel/irq.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#72: FILE: arch/score/kernel/irq.c:23:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#79: FILE: arch/score/kernel/irq.c:30:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#109: FILE: arch/score/kernel/irq.c:60:
+		__raw_writel((__raw_readl(SCORE_PIC + INT_MASKL) | \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#112: FILE: arch/score/kernel/irq.c:63:
+		__raw_writel((__raw_readl(SCORE_PIC + INT_MASKH) | \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#121: FILE: arch/score/kernel/irq.c:72:
+		__raw_writel((__raw_readl(SCORE_PIC + INT_MASKL) & \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#124: FILE: arch/score/kernel/irq.c:75:
+		__raw_writel((__raw_readl(SCORE_PIC + INT_MASKH) & \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#150: FILE: arch/score/kernel/irq.c:101:
+		memcpy((void *)target_addr, \

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#156: FILE: arch/score/kernel/irq.c:107:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#158: FILE: arch/score/kernel/irq.c:109:
+		: : "r" (EXCEPTION_VECTOR_BASE_ADDR | \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#204: FILE: arch/score/kernel/time.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#205: FILE: arch/score/kernel/time.c:2:
+ * arch/score/kernel/time.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#226: FILE: arch/score/kernel/time.c:23:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: arch/score/kernel/time.c:49:
+static int score_timer_set_next_event(unsigned long delta,
+		struct clock_event_device *evdev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: arch/score/kernel/time.c:59:
+static void score_timer_set_mode(enum clock_event_mode mode,
+		struct clock_event_device *evdev)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#267: FILE: arch/score/kernel/time.c:64:
+		outl(SYSTEM_CLOCK/HZ, P_TIMER0_PRELOAD);
 		                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#276: FILE: arch/score/kernel/time.c:73:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#291: FILE: arch/score/kernel/time.c:88:
+	setup_irq(IRQ_TIMER , &timer_irq);
 	                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: arch/score/kernel/time.c:92:
+	score_clockevent.mult = div_sc(SYSTEM_CLOCK, NSEC_PER_SEC,
+					score_clockevent.shift);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: arch/score/kernel/time.c:94:
+	score_clockevent.max_delta_ns = clockevent_delta2ns((u32)~0,
+					&score_clockevent);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: arch/score/kernel/time.c:96:
+	score_clockevent.min_delta_ns = clockevent_delta2ns(50,
+						&score_clockevent) + 1;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#309: FILE: arch/score/kernel/traps.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#310: FILE: arch/score/kernel/traps.c:2:
+ * arch/score/kernel/traps.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#331: FILE: arch/score/kernel/traps.c:23:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#337: FILE: arch/score/kernel/traps.c:29:
+#include <asm/cacheflush.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#353: FILE: arch/score/kernel/traps.c:45:
+	printk(KERN_NOTICE "Stack: ");

CHECK:SPACING: No space is necessary after a cast
#355: FILE: arch/score/kernel/traps.c:47:
+	while ((long) sp & (PAGE_SIZE - 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#357: FILE: arch/score/kernel/traps.c:49:
+			printk(KERN_NOTICE "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#359: FILE: arch/score/kernel/traps.c:51:
+			printk(KERN_NOTICE " ...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#364: FILE: arch/score/kernel/traps.c:56:
+			printk(KERN_NOTICE " (Bad stack address)");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#368: FILE: arch/score/kernel/traps.c:60:
+		printk(KERN_NOTICE " %08lx", stackdata);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#371: FILE: arch/score/kernel/traps.c:63:
+	printk(KERN_NOTICE "\n");

CHECK:SPACING: No space is necessary after a cast
#379: FILE: arch/score/kernel/traps.c:71:
+	sp = sp ? sp : (long *) &sp;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#381: FILE: arch/score/kernel/traps.c:73:
+	printk(KERN_NOTICE "Call Trace:  ");

CHECK:SPACING: No space is necessary after a cast
#383: FILE: arch/score/kernel/traps.c:75:
+	while ((long) sp & (PAGE_SIZE - 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#386: FILE: arch/score/kernel/traps.c:78:
+				printk(KERN_NOTICE "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#387: FILE: arch/score/kernel/traps.c:79:
+			printk(KERN_NOTICE " (Bad stack address)\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#393: FILE: arch/score/kernel/traps.c:85:
+				printk(KERN_NOTICE "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#395: FILE: arch/score/kernel/traps.c:87:
+				printk(KERN_NOTICE " ...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#399: FILE: arch/score/kernel/traps.c:91:
+			printk(KERN_NOTICE " [<%08lx>]", addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#403: FILE: arch/score/kernel/traps.c:95:
+	printk(KERN_NOTICE "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#410: FILE: arch/score/kernel/traps.c:102:
+	printk(KERN_NOTICE "\nCode:");

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: arch/score/kernel/traps.c:106:
+		unsigned long insn;
+		if (__get_user(insn, pc + i)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#415: FILE: arch/score/kernel/traps.c:107:
+			printk(KERN_NOTICE " (Bad address in epc)\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#418: FILE: arch/score/kernel/traps.c:110:
+		printk(KERN_NOTICE "%c%08lx%c", (i ? ' ' : '<'),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: arch/score/kernel/traps.c:111:
+		printk(KERN_NOTICE "%c%08lx%c", (i ? ' ' : '<'),
+			insn, (i ? ' ' : '>'));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#428: FILE: arch/score/kernel/traps.c:120:
+	printk("r0 : %08lx %08lx %08lx %08lx %08lx %08lx %08lx %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: arch/score/kernel/traps.c:121:
+	printk("r0 : %08lx %08lx %08lx %08lx %08lx %08lx %08lx %08lx\n",
+		regs->regs[0], regs->regs[1], regs->regs[2], regs->regs[3],

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#431: FILE: arch/score/kernel/traps.c:123:
+	printk("r8 : %08lx %08lx %08lx %08lx %08lx %08lx %08lx %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: arch/score/kernel/traps.c:124:
+	printk("r8 : %08lx %08lx %08lx %08lx %08lx %08lx %08lx %08lx\n",
+		regs->regs[8], regs->regs[9], regs->regs[10], regs->regs[11],

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: arch/score/kernel/traps.c:126:
+	printk("r16: %08lx %08lx %08lx %08lx %08lx %08lx %08lx %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: arch/score/kernel/traps.c:127:
+	printk("r16: %08lx %08lx %08lx %08lx %08lx %08lx %08lx %08lx\n",
+		regs->regs[16], regs->regs[17], regs->regs[18], regs->regs[19],

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#437: FILE: arch/score/kernel/traps.c:129:
+	printk("r24: %08lx %08lx %08lx %08lx %08lx %08lx %08lx %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: arch/score/kernel/traps.c:130:
+	printk("r24: %08lx %08lx %08lx %08lx %08lx %08lx %08lx %08lx\n",
+		regs->regs[24], regs->regs[25], regs->regs[26], regs->regs[27],

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#441: FILE: arch/score/kernel/traps.c:133:
+	printk("CEH : %08lx\n", regs->ceh);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#442: FILE: arch/score/kernel/traps.c:134:
+	printk("CEL : %08lx\n", regs->cel);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#444: FILE: arch/score/kernel/traps.c:136:
+	printk("EMA:%08lx, epc:%08lx %s\nPSR: %08lx\nECR:%08lx\nCondition : %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: arch/score/kernel/traps.c:137:
+	printk("EMA:%08lx, epc:%08lx %s\nPSR: %08lx\nECR:%08lx\nCondition : %08lx\n",
+		regs->cp0_ema, regs->cp0_epc, print_tainted(), regs->cp0_psr,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#452: FILE: arch/score/kernel/traps.c:144:
+	printk(KERN_NOTICE "Process %s (pid: %d, stackpage=%08lx)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: arch/score/kernel/traps.c:145:
+	printk(KERN_NOTICE "Process %s (pid: %d, stackpage=%08lx)\n",
+		current->comm, current->pid, (unsigned long) current);

CHECK:SPACING: No space is necessary after a cast
#453: FILE: arch/score/kernel/traps.c:145:
+		current->comm, current->pid, (unsigned long) current);

CHECK:SPACING: No space is necessary after a cast
#454: FILE: arch/score/kernel/traps.c:146:
+	show_stack(current_thread_info()->task, (long *) regs->regs[0]);

CHECK:SPACING: No space is necessary after a cast
#455: FILE: arch/score/kernel/traps.c:147:
+	show_trace((long *) regs->regs[0]);

CHECK:SPACING: No space is necessary after a cast
#456: FILE: arch/score/kernel/traps.c:148:
+	show_code((unsigned int *) regs->cp0_epc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#457: FILE: arch/score/kernel/traps.c:149:
+	printk(KERN_NOTICE "\n");

CHECK:SPACING: No space is necessary after a cast
#466: FILE: arch/score/kernel/traps.c:158:
+		   (long *) get_irq_regs()->regs[0]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: arch/score/kernel/traps.c:163:
+void __die(const char *str, struct pt_regs *regs, const char *file,
+	const char *func, unsigned long line)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#474: FILE: arch/score/kernel/traps.c:166:
+	printk("%s", str);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#476: FILE: arch/score/kernel/traps.c:168:
+		printk(" in %s:%s, line %ld", file, func, line);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#477: FILE: arch/score/kernel/traps.c:169:
+	printk(":\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: arch/score/kernel/traps.c:175:
+void __die_if_kernel(const char *str, struct pt_regs *regs,
+		const char *file, const char *func, unsigned long line)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#491: FILE: arch/score/kernel/traps.c:183:
+	printk("do_ADE-linsn:ema:0x%08lx:epc:0x%08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: arch/score/kernel/traps.c:184:
+	printk("do_ADE-linsn:ema:0x%08lx:epc:0x%08lx\n",
+		 regs->cp0_ema, regs->cp0_epc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#500: FILE: arch/score/kernel/traps.c:192:
+	const struct exception_table_entry *fixup;
+	fixup = search_exception_tables(regs->cp0_epc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#505: FILE: arch/score/kernel/traps.c:197:
+	printk("do_ADE-data:ema:0x%08lx:epc:0x%08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: arch/score/kernel/traps.c:198:
+	printk("do_ADE-data:ema:0x%08lx:epc:0x%08lx\n",
+		 regs->cp0_ema, regs->cp0_epc);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_pel', this function's name, in a string
#513: FILE: arch/score/kernel/traps.c:205:
+	die_if_kernel("do_pel execution Exception", regs);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_cee', this function's name, in a string
#519: FILE: arch/score/kernel/traps.c:211:
+	die_if_kernel("do_cee execution Exception", regs);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_cpe', this function's name, in a string
#525: FILE: arch/score/kernel/traps.c:217:
+	die_if_kernel("do_cpe execution Exception", regs);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_be', this function's name, in a string
#531: FILE: arch/score/kernel/traps.c:223:
+	die_if_kernel("do_be execution Exception", regs);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_ov', this function's name, in a string
#539: FILE: arch/score/kernel/traps.c:231:
+	die_if_kernel("do_ov execution Exception", regs);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_tr', this function's name, in a string
#550: FILE: arch/score/kernel/traps.c:242:
+	die_if_kernel("do_tr execution Exception", regs);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'epc == current->thread.addr1'
#561: FILE: arch/score/kernel/traps.c:253:
+		if ((epc == current->thread.addr1) ||
+		    (epc == current->thread.addr2)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'epc == current->thread.addr2'
#561: FILE: arch/score/kernel/traps.c:253:
+		if ((epc == current->thread.addr1) ||
+		    (epc == current->thread.addr2)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#561: FILE: arch/score/kernel/traps.c:253:
+		if ((epc == current->thread.addr1) ||
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#566: FILE: arch/score/kernel/traps.c:258:
+			return;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#566: FILE: arch/score/kernel/traps.c:258:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#567: FILE: arch/score/kernel/traps.c:259:
+			BUG();

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#568: FILE: arch/score/kernel/traps.c:260:
+	} else if ((epc_insn == BREAKPOINT32_INSN) ||
[...]
+			force_sig(SIGTRAP, current);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_ri', this function's name, in a string
#574: FILE: arch/score/kernel/traps.c:266:
+		die_if_kernel("do_ri execution Exception", regs);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_ccu', this function's name, in a string
#581: FILE: arch/score/kernel/traps.c:273:
+	die_if_kernel("do_ccu execution Exception", regs);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_reserved', this function's name, in a string
#592: FILE: arch/score/kernel/traps.c:284:
+	die_if_kernel("do_reserved execution Exception", regs);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nmi_exception_handler', this function's name, in a string
#602: FILE: arch/score/kernel/traps.c:294:
+	die_if_kernel("nmi_exception_handler execution Exception", regs);

CHECK:SPACING: No space is necessary after a cast
#609: FILE: arch/score/kernel/traps.c:301:
+	unsigned long handler = (unsigned long) addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: arch/score/kernel/traps.c:315:
+	memcpy((void *)DEBUG_VECTOR_BASE_ADDR,
+			&debug_exception_vector, DEBUG_VECTOR_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: arch/score/kernel/traps.c:318:
+	memcpy((void *)GENERAL_VECTOR_BASE_ADDR,
+			&general_exception_vector, GENERAL_VECTOR_SIZE);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000079758.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 59 warnings, 35 checks, 596 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000079758.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
