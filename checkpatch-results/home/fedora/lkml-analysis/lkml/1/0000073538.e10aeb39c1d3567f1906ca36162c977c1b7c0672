WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-asm-for-linus

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#228: FILE: arch/x86/include/asm/desc_defs.h:37:
+#define GDT_ENTRY_INIT(flags, base, limit) { { { \
+		.a = ((limit) & 0xffff) | (((base) & 0xffff) << 16), \
+		.b = (((base) & 0xff0000) >> 16) | (((flags) & 0xf0ff) << 8) | \
+			((limit) & 0xf0000) | ((base) & 0xff000000), \
+	} } }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'limit' - possible side-effects?
#228: FILE: arch/x86/include/asm/desc_defs.h:37:
+#define GDT_ENTRY_INIT(flags, base, limit) { { { \
+		.a = ((limit) & 0xffff) | (((base) & 0xffff) << 16), \
+		.b = (((base) & 0xff0000) >> 16) | (((flags) & 0xf0ff) << 8) | \
+			((limit) & 0xf0000) | ((base) & 0xff000000), \
+	} } }

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#425: FILE: arch/x86/kernel/alternative.c:55:
+static int __initdata_or_module noreplace_paravirt = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#446: FILE: arch/x86/kernel/alternative.c:78:
+intel_nops[ASM_NOP_MAX+1] = {
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#462: FILE: arch/x86/kernel/alternative.c:98:
+k8_nops[ASM_NOP_MAX+1] = {
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#480: FILE: arch/x86/kernel/alternative.c:118:
+k7_nops[ASM_NOP_MAX+1] = {
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#496: FILE: arch/x86/kernel/alternative.c:138:
+p6_nops[ASM_NOP_MAX+1] = {
                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: arch/x86/kernel/apm_32.c:2361:
+	set_desc_base(&gdt[APM_CS >> 3],
+		 (unsigned long)__va((unsigned long)apm_info.bios.cseg << 4));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: arch/x86/kernel/apm_32.c:2363:
+	set_desc_base(&gdt[APM_CS_16 >> 3],
+		 (unsigned long)__va((unsigned long)apm_info.bios.cseg_16 << 4));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: arch/x86/kernel/apm_32.c:2365:
+	set_desc_base(&gdt[APM_DS >> 3],
+		 (unsigned long)__va((unsigned long)apm_info.bios.dseg << 4));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#707: FILE: arch/x86/kernel/cpu/common.c:130:
+	[GDT_ENTRY_APMBIOS_BASE+1]	= GDT_ENTRY_INIT(0x009a, 0, 0xffff),
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#710: FILE: arch/x86/kernel/cpu/common.c:132:
+	[GDT_ENTRY_APMBIOS_BASE+2]	= GDT_ENTRY_INIT(0x4092, 0, 0xffff),
 	                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#864: FILE: drivers/pnp/pnpbios/bioscalls.c:485:
+		set_desc_base(&gdt[GDT_ENTRY_PNPBIOS_CS32],
+			 (unsigned long)&pnp_bios_callfunc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#866: FILE: drivers/pnp/pnpbios/bioscalls.c:487:
+		set_desc_base(&gdt[GDT_ENTRY_PNPBIOS_CS16],
+			 (unsigned long)__va(header->fields.pm16cseg));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#868: FILE: drivers/pnp/pnpbios/bioscalls.c:489:
+		set_desc_base(&gdt[GDT_ENTRY_PNPBIOS_DS],
+			 (unsigned long)__va(header->fields.pm16dseg));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#903: FILE: include/linux/init.h:106:
+#define __INITDATA	.section	".init.data","aw",%progbits
                   	        	            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#903: FILE: include/linux/init.h:106:
+#define __INITDATA	.section	".init.data","aw",%progbits
                   	        	                 ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#903: FILE: include/linux/init.h:106:
+#define __INITDATA	.section	".init.data","aw",%progbits
                   	        	                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#903: FILE: include/linux/init.h:106:
+#define __INITDATA	.section	".init.data","aw",%progbits

ERROR:SPACING: space required after that ',' (ctx:VxV)
#904: FILE: include/linux/init.h:107:
+#define __INITRODATA	.section	".init.rodata","a",%progbits
                     	        	              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#904: FILE: include/linux/init.h:107:
+#define __INITRODATA	.section	".init.rodata","a",%progbits
                     	        	                  ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#904: FILE: include/linux/init.h:107:
+#define __INITRODATA	.section	".init.rodata","a",%progbits
                     	        	                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#904: FILE: include/linux/init.h:107:
+#define __INITRODATA	.section	".init.rodata","a",%progbits

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#913: FILE: include/linux/init.h:309:
+#define __INIT_OR_MODULE	.text

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#914: FILE: include/linux/init.h:310:
+#define __INITDATA_OR_MODULE	.data

ERROR:SPACING: space required after that ',' (ctx:VxV)
#915: FILE: include/linux/init.h:311:
+#define __INITRODATA_OR_MODULE	.section ".rodata","a",%progbits
                               	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#915: FILE: include/linux/init.h:311:
+#define __INITRODATA_OR_MODULE	.section ".rodata","a",%progbits
                               	                      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#915: FILE: include/linux/init.h:311:
+#define __INITRODATA_OR_MODULE	.section ".rodata","a",%progbits
                               	                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#915: FILE: include/linux/init.h:311:
+#define __INITRODATA_OR_MODULE	.section ".rodata","a",%progbits

ERROR:INIT_ATTRIBUTE: Use of __initconst requires a separate use of const
#919: FILE: include/linux/init.h:315:
+#define __initconst_or_module __initconst

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073538.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 1 warnings, 17 checks, 697 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073538.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
