WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
Designing AIO without network in mind can only be result of heavy hang-over.

WARNING:TYPO_SPELLING: 'themselfs' may be misspelled - perhaps 'themselves'?
#54: 
there are callbacks in it, callbacks can requeue themselfs into the 
                                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: fs/ext3/inode.c:1655:
+ext3_readpages_aio(struct file *file, struct address_space *mapping,
+		struct list_head *pages, unsigned nr_pages, void *priv)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#110: FILE: fs/ext3/inode.c:1655:
+		struct list_head *pages, unsigned nr_pages, void *priv)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: fs/mpage.c:180:
+^I^Istruct bio *(*alloc)(struct block_device *bdev, sector_t first_sector, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: fs/mpage.c:181:
+		struct bio *(*alloc)(struct block_device *bdev, sector_t first_sector, 
+			int nr_vecs, gfp_t gfp_flags, void *priv),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: fs/mpage.c:314:
+		bio = alloc(bdev, blocks[0] << (blkbits - 9),
 			  	min_t(int, nr_pages, bio_get_nr_vecs(bdev)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: fs/mpage.c:345:
+__mpage_readpages(struct address_space *mapping, struct list_head *pages,
+				unsigned nr_pages, get_block_t get_block,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#205: FILE: fs/mpage.c:345:
+				unsigned nr_pages, get_block_t get_block,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: fs/mpage.c:346:
+^I^Istruct bio *(*alloc)(struct block_device *bdev, sector_t first_sector, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: fs/mpage.c:347:
+		struct bio *(*alloc)(struct block_device *bdev, sector_t first_sector, 
+			int nr_vecs, gfp_t gfp_flags, void *priv),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: fs/mpage.c:348:
+^I^Istruct bio *(*submit)(int rw, struct bio *bio), $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#212: FILE: fs/mpage.c:352:
+	unsigned page_idx;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: fs/mpage.c:366:
+		if (!add_to_page_cache(page, mapping,
+					page->index, GFP_KERNEL)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: fs/mpage.c:368:
+			bio = do_mpage_readpage(bio, page,
+					nr_pages - page_idx,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#239: FILE: fs/mpage.c:379:
+	BUG_ON(!list_empty(pages));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: fs/mpage.c:441:
+extern struct bio *kaio_mpage_alloc(struct block_device *bdev, sector_t first_sector, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: fs/mpage.c:442:
+extern struct bio *kaio_mpage_alloc(struct block_device *bdev, sector_t first_sector, 
+		int nr_vecs, gfp_t gfp_flags, void *priv);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#270: FILE: fs/mpage.c:443:
+extern struct bio *kaio_mpage_bio_submit(int rw, struct bio *bio);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: fs/mpage.c:451:
+mpage_readpages_aio(struct address_space *mapping, struct list_head *pages,
+				unsigned nr_pages, get_block_t get_block, void *priv)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#298: FILE: fs/mpage.c:451:
+				unsigned nr_pages, get_block_t get_block, void *priv)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#323: FILE: fs/mpage.c:633:
+				bio_get_nr_vecs(bdev), GFP_NOFS|__GFP_HIGH, NULL);
 				                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: include/linux/mpage.h:20:
+int mpage_readpages_aio(struct address_space *mapping, struct list_head *pages,
+				unsigned nr_pages, get_block_t get_block, void *priv);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#336: FILE: include/linux/mpage.h:20:
+				unsigned nr_pages, get_block_t get_block, void *priv);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#341: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#346: FILE: kernel/kevent/kevent_aio.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: kernel/kevent/kevent_aio.c:4:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#361: FILE: kernel/kevent/kevent_aio.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#362: FILE: kernel/kevent/kevent_aio.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#385: FILE: kernel/kevent/kevent_aio.c:40:
+#define dprintk(f, a...) printk(f, ##a)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#391: FILE: kernel/kevent/kevent_aio.c:46:
+struct kaio_thread
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#393: FILE: kernel/kevent/kevent_aio.c:48:
+	spinlock_t		req_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#396: FILE: kernel/kevent/kevent_aio.c:51:
+^Iwait_queue_head_t ^Iwait;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#399: FILE: kernel/kevent/kevent_aio.c:54:
+extern struct file_operations kevent_user_fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#399: FILE: kernel/kevent/kevent_aio.c:54:
+extern struct file_operations kevent_user_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: kernel/kevent/kevent_aio.c:60:
+ * It can only be accessed under RCU protection, $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#413: FILE: kernel/kevent/kevent_aio.c:68:
+typedef int (* kaio_callback)(struct kaio_req *req, int direct);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#413: FILE: kernel/kevent/kevent_aio.c:68:
+typedef int (* kaio_callback)(struct kaio_req *req, int direct);
              ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#430: FILE: kernel/kevent/kevent_aio.c:85:
+struct kaio_req
+{

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kaio_req *' should also have an identifier name
#437: FILE: kernel/kevent/kevent_aio.c:92:
+	void			(*destructor)(struct kaio_req *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:IF_1: Consider removing the #if 1 and its #endif
#450: FILE: kernel/kevent/kevent_aio.c:105:
+#if 1

WARNING:LINE_SPACING: Missing a blank line after declarations
#452: FILE: kernel/kevent/kevent_aio.c:107:
+		int *cnt = &__get_cpu_var(kaio_req_cpu);
+		cpu = *cnt;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#490: FILE: kernel/kevent/kevent_aio.c:145:
+		BUG_ON(!th);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#505: FILE: kernel/kevent/kevent_aio.c:160:
+EXPORT_SYMBOL_GPL(kaio_schedule_req);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#532: FILE: kernel/kevent/kevent_aio.c:187:
+	if ((req->add_idx + 1 == req->read_idx) ||
+			((req->add_idx + 1 == KAIO_CALL_NUM) && req->read_idx == 0))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: kernel/kevent/kevent_aio.c:193:
+^I^I^I__func__, req, req->read_idx, req->add_idx, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: kernel/kevent/kevent_aio.c:193:
+	dprintk("%s: req: %p, read_idx: %d, add_idx: %d, call: %p [%p].\n",
+			__func__, req, req->read_idx, req->add_idx, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: kernel/kevent/kevent_aio.c:199:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#548: FILE: kernel/kevent/kevent_aio.c:203:
+EXPORT_SYMBOL_GPL(kaio_append_call);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#580: FILE: kernel/kevent/kevent_aio.c:235:
+EXPORT_SYMBOL_GPL(kaio_add_call);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#592: FILE: kernel/kevent/kevent_aio.c:247:
+ * If positive value is returned, then further processing is stopped, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: kernel/kevent/kevent_aio.c:257:
+^I^I^I^I__func__, req, req->read_idx, req->add_idx, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: kernel/kevent/kevent_aio.c:257:
+		dprintk("%s: req: %p, read_idx: %d, add_idx: %d, call: %p [%p].\n",
+				__func__, req, req->read_idx, req->add_idx, 

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#625: FILE: kernel/kevent/kevent_aio.c:280:
+		first = req = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: kernel/kevent/kevent_aio.c:290:
+^I^I^I^I$

WARNING:LONG_LINE_STRING: line length of 101 exceeds 100 columns
#644: FILE: kernel/kevent/kevent_aio.c:299:
+					dprintk("%s: req: %p, read_idx: %d, add_idx: %d, err: %d.\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#645: FILE: kernel/kevent/kevent_aio.c:300:
+							__func__, req, req->read_idx, req->add_idx, err);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: kernel/kevent/kevent_aio.c:300:
+					dprintk("%s: req: %p, read_idx: %d, add_idx: %d, err: %d.\n",
+							__func__, req, req->read_idx, req->add_idx, err);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#662: FILE: kernel/kevent/kevent_aio.c:317:
+^I$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#669: FILE: kernel/kevent/kevent_aio.c:324:
+struct kaio_private
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#671: FILE: kernel/kevent/kevent_aio.c:326:
+^I^Ivoid ^I^I*sptr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#675: FILE: kernel/kevent/kevent_aio.c:330:
+^I^Ivoid ^I^I*dptr;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#685: FILE: kernel/kevent/kevent_aio.c:340:
+extern void bio_fs_destructor(struct bio *bio);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#697: FILE: kernel/kevent/kevent_aio.c:352:
+	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#710: FILE: kernel/kevent/kevent_aio.c:365:
+		if (uptodate) {
 		    ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#719: FILE: kernel/kevent/kevent_aio.c:374:
+^Idprintk("%s: bio: %p, req: %p, pending: %d.\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: kernel/kevent/kevent_aio.c:375:
+	dprintk("%s: bio: %p, req: %p, pending: %d.\n", 
+			__func__, bio, req, test_bit(KAIO_REQ_PENDING, &req->flags));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: kernel/kevent/kevent_aio.c:396:
+struct bio *kaio_mpage_alloc(struct block_device *bdev,
+		sector_t first_sector, int nr_vecs, gfp_t gfp_flags, void *priv)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#747: FILE: kernel/kevent/kevent_aio.c:402:
+	if (bio == NULL && (current->flags & PF_MEMALLOC)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#769: FILE: kernel/kevent/kevent_aio.c:424:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#774: FILE: kernel/kevent/kevent_aio.c:429:
+static int kaio_vfs_read(struct kaio_private *priv,
+		ssize_t (*actor)(struct kaio_private *, struct page *, size_t))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#791: FILE: kernel/kevent/kevent_aio.c:446:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#792: FILE: kernel/kevent/kevent_aio.c:447:
+^Idprintk("%s: start: priv: %p, ret: %d, num: %d, count: %Lu, offset: %Lu, processed: %Lu.\n", $

WARNING:LONG_LINE_STRING: line length of 101 exceeds 100 columns
#792: FILE: kernel/kevent/kevent_aio.c:447:
+	dprintk("%s: start: priv: %p, ret: %d, num: %d, count: %Lu, offset: %Lu, processed: %Lu.\n", 

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#792: FILE: kernel/kevent/kevent_aio.c:447:
+	dprintk("%s: start: priv: %p, ret: %d, num: %d, count: %Lu, offset: %Lu, processed: %Lu.\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#793: FILE: kernel/kevent/kevent_aio.c:448:
+	dprintk("%s: start: priv: %p, ret: %d, num: %d, count: %Lu, offset: %Lu, processed: %Lu.\n", 
+			__func__, priv, i, pg_num, priv->count, priv->offset, priv->processed);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#795: FILE: kernel/kevent/kevent_aio.c:450:
+	for (i=0; i<pg_num && priv->count; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#795: FILE: kernel/kevent/kevent_aio.c:450:
+	for (i=0; i<pg_num && priv->count; ++i) {
 	           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#800: FILE: kernel/kevent/kevent_aio.c:455:
+		if (unlikely(page == NULL))

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#803: FILE: kernel/kevent/kevent_aio.c:458:
+			dprintk("%s: %2d: page=%p, processed=%Lu, count=%Lu not uptodate.\n", 
 			                                                        ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: kernel/kevent/kevent_aio.c:458:
+^I^I^Idprintk("%s: %2d: page=%p, processed=%Lu, count=%Lu not uptodate.\n", $

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#803: FILE: kernel/kevent/kevent_aio.c:458:
+			dprintk("%s: %2d: page=%p, processed=%Lu, count=%Lu not uptodate.\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: kernel/kevent/kevent_aio.c:459:
+			dprintk("%s: %2d: page=%p, processed=%Lu, count=%Lu not uptodate.\n", 
+					__func__, i, page, priv->processed, priv->count);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: kernel/kevent/kevent_aio.c:490:
+^Idprintk("%s: end: priv: %p, ret: %d, num: %d, count: %Lu, offset: %Lu, processed: %Lu.\n", $

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#835: FILE: kernel/kevent/kevent_aio.c:490:
+	dprintk("%s: end: priv: %p, ret: %d, num: %d, count: %Lu, offset: %Lu, processed: %Lu.\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: kernel/kevent/kevent_aio.c:491:
+	dprintk("%s: end: priv: %p, ret: %d, num: %d, count: %Lu, offset: %Lu, processed: %Lu.\n", 
+			__func__, priv, i, pg_num, priv->count, priv->offset, priv->processed);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#925: FILE: kernel/kevent/kevent_aio.c:580:
+^Inum = min_t(int, max_sane_readahead(priv->limit), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#926: FILE: kernel/kevent/kevent_aio.c:581:
+	num = min_t(int, max_sane_readahead(priv->limit), 
+			ALIGN(priv->count, PAGE_SIZE) >> PAGE_SHIFT);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#929: FILE: kernel/kevent/kevent_aio.c:584:
+	for (i=0; i<num; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#929: FILE: kernel/kevent/kevent_aio.c:584:
+	for (i=0; i<num; ++i) {
 	           ^

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#940: FILE: kernel/kevent/kevent_aio.c:595:
+	dprintk("%s: submit: req: %p, priv: %p, offset: %Lu, num: %d, limit: %Lu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: kernel/kevent/kevent_aio.c:596:
+	dprintk("%s: submit: req: %p, priv: %p, offset: %Lu, num: %d, limit: %Lu.\n",
+			__func__, req, priv, offset, i, priv->limit);

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#945: FILE: kernel/kevent/kevent_aio.c:600:
+		dprintk("%s: kevent_mpage_readpages failed: err=%d, count=%Lu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: kernel/kevent/kevent_aio.c:601:
+		dprintk("%s: kevent_mpage_readpages failed: err=%d, count=%Lu.\n",
+				__func__, err, priv->count);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1021: FILE: kernel/kevent/kevent_aio.c:676:
+static struct kaio_req *kaio_sendfile(int kevent_fd, int sock_fd, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1022: FILE: kernel/kevent/kevent_aio.c:677:
+^I^Ivoid __user *header, size_t header_size, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1022: FILE: kernel/kevent/kevent_aio.c:677:
+static struct kaio_req *kaio_sendfile(int kevent_fd, int sock_fd, 
+		void __user *header, size_t header_size, 

WARNING:LONG_LINE_STRING: line length of 108 exceeds 100 columns
#1056: FILE: kernel/kevent/kevent_aio.c:711:
+	dprintk("%s: req: %p, priv: %p, call: %p [%p], offset: %Lu, processed: %Lu, count: %Lu, err: %d.\n",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#1056: FILE: kernel/kevent/kevent_aio.c:711:
+	dprintk("%s: req: %p, priv: %p, call: %p [%p], offset: %Lu, processed: %Lu, count: %Lu, err: %d.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1057: FILE: kernel/kevent/kevent_aio.c:712:
+^I^I^I__func__, req, priv, &kaio_read_send_pages, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1057: FILE: kernel/kevent/kevent_aio.c:712:
+	dprintk("%s: req: %p, priv: %p, call: %p [%p], offset: %Lu, processed: %Lu, count: %Lu, err: %d.\n",
+			__func__, req, priv, &kaio_read_send_pages, 

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1079: FILE: kernel/kevent/kevent_aio.c:734:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1107: FILE: kernel/kevent/kevent_aio.c:762:
+asmlinkage long sys_aio_sendfile_path(int kevent_fd, int sock_fd, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1108: FILE: kernel/kevent/kevent_aio.c:763:
+^I^Ivoid __user *header, size_t header_size, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1108: FILE: kernel/kevent/kevent_aio.c:763:
+asmlinkage long sys_aio_sendfile_path(int kevent_fd, int sock_fd, 
+		void __user *header, size_t header_size, 

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1114: FILE: kernel/kevent/kevent_aio.c:769:
+	struct nameidata nd;
 	                 ^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1132: FILE: kernel/kevent/kevent_aio.c:787:
+	if ((flags+1) & O_ACCMODE)
 	          ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1135: FILE: kernel/kevent/kevent_aio.c:790:
+	err = open_namei(AT_FDCWD, tmp, flags, 0400, &nd);
 	                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1139: FILE: kernel/kevent/kevent_aio.c:794:
+	file = nameidata_to_filp(&nd, flags);
 	                          ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1143: FILE: kernel/kevent/kevent_aio.c:798:
+^I/* One reference will be released in sys_close(), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1144: FILE: kernel/kevent/kevent_aio.c:799:
+^I * second one through req->destructor() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1148: FILE: kernel/kevent/kevent_aio.c:803:
+^Ireq = kaio_sendfile(kevent_fd, sock_fd, header, header_size, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1149: FILE: kernel/kevent/kevent_aio.c:804:
+	req = kaio_sendfile(kevent_fd, sock_fd, header, header_size, 
+			file, offset, count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1177: FILE: kernel/kevent/kevent_aio.c:832:
+		__u32 *processed = (__u32 *)&priv->processed;
+		k->event.ret_data[0] = processed[0];

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*th)...) over kzalloc(sizeof(struct kaio_thread)...)
#1222: FILE: kernel/kevent/kevent_aio.c:877:
+	th = kzalloc(sizeof(struct kaio_thread), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#1234: FILE: kernel/kevent/kevent_aio.c:889:
+		int err = PTR_ERR(th->thread);
+		kfree(th);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1239: FILE: kernel/kevent/kevent_aio.c:894:
+	wmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1254: FILE: kernel/kevent/kevent_aio.c:909:
+^Ikaio_req_cache = kmem_cache_create("kaio_req", sizeof(struct kaio_req), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1255: FILE: kernel/kevent/kevent_aio.c:910:
+	kaio_req_cache = kmem_cache_create("kaio_req", sizeof(struct kaio_req), 
+			0, SLAB_PANIC, NULL, NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1256: FILE: kernel/kevent/kevent_aio.c:911:
+^Ikaio_priv_cache = kmem_cache_create("kaio_priv", sizeof(struct kaio_private), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1257: FILE: kernel/kevent/kevent_aio.c:912:
+	kaio_priv_cache = kmem_cache_create("kaio_priv", sizeof(struct kaio_private), 
+			0, SLAB_PANIC, NULL, NULL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1261: FILE: kernel/kevent/kevent_aio.c:916:
+	for (i=0; i<KAIO_THREAD_NUM; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1261: FILE: kernel/kevent/kevent_aio.c:916:
+	for (i=0; i<KAIO_THREAD_NUM; ++i) {
 	           ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1278: FILE: kernel/kevent/kevent_aio.c:933:
+		wmb();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468493.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 41 errors, 46 warnings, 37 checks, 1163 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468493.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
