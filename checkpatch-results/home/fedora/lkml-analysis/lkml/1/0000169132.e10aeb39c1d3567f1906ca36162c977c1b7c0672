WARNING:TYPO_SPELLING: 'performence' may be misspelled - perhaps 'performance'?
#43: 
performence punishment.
^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'leaveing' may be misspelled - perhaps 'leaving'?
#58: 
is only a logical concept. Entering and leaveing one module don't like
                                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'performence' may be misspelled - perhaps 'performance'?
#62: 
performence punishment, I write this patch as a kernel hacking option.
^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'kenel' may be misspelled - perhaps 'kernel'?
#76: 
problem is the current kenel code's object-oriented style may be
                       ^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#96: FILE: arch/x86/Kconfig.debug:70:
+config DEBUG_KM_PROTECT
+        bool "Debug kernel memory protect"
+        depends on DEBUG_KERNEL
+        select DEBUG_PAGEALLOC
+        select SLUB
+        help
+          Change page table's present flag to prevent other module's accidental
+          access. This results in a large slowdown and waste more memory, but
+          helps to find certain types of memory corruptions.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'NULL != tsk->km_handle'
#125: FILE: arch/x86/mm/fault.c:849:
+	if ((NULL != tsk->km_handle) && km_valid_addr(address))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#125: FILE: arch/x86/mm/fault.c:849:
+	if ((NULL != tsk->km_handle) && km_valid_addr(address))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#149: FILE: arch/x86/mm/init_32.c:571:
+}
+early_param("protectmem", parse_protectmem);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#163: FILE: arch/x86/mm/init_32.c:593:
+extern unsigned long __meminitdata arch_zone_lowest_possible_pfn[MAX_NR_ZONES];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#164: FILE: arch/x86/mm/init_32.c:594:
+extern unsigned long __meminitdata

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#165: FILE: arch/x86/mm/init_32.c:594:
arch_zone_highest_possible_pfn[MAX_NR_ZONES];

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#175: FILE: arch/x86/mm/init_32.c:604:
+}
+early_param("protectmem", parse_protectmem);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#205: FILE: arch/x86/mm/km_protect.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#213: FILE: arch/x86/mm/km_protect.c:9:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#227: FILE: arch/x86/mm/km_protect.c:23:
+	volatile int val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#230: FILE: arch/x86/mm/km_protect.c:26:
+	struct km_struct *prev;
+	km_alloc_handle("test1", &km_handle);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#233: FILE: arch/x86/mm/km_protect.c:29:
+	printk("addr: %lx pfn: %lx\n", addr, __pa(addr) >> PAGE_SHIFT);

CHECK:BRACES: braces {} should be used on all arms of this statement
#234: FILE: arch/x86/mm/km_protect.c:30:
+	if (addr) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#240: FILE: arch/x86/mm/km_protect.c:36:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#241: FILE: arch/x86/mm/km_protect.c:37:
+		printk("__get_free_page failed\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: arch/x86/mm/km_protect.c:40:
+int km_thread1(void * arg)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#246: FILE: arch/x86/mm/km_protect.c:42:
+	volatile int val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#247: FILE: arch/x86/mm/km_protect.c:43:
+	volatile int val;
+	printk("PID: %d\n", current->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#247: FILE: arch/x86/mm/km_protect.c:43:
+	printk("PID: %d\n", current->pid);

ERROR:SPACING: space required before the open parenthesis '('
#249: FILE: arch/x86/mm/km_protect.c:45:
+	while(1) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#255: FILE: arch/x86/mm/km_protect.c:51:
+}
+int km_thread2(void * arg)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: arch/x86/mm/km_protect.c:51:
+int km_thread2(void * arg)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#258: FILE: arch/x86/mm/km_protect.c:54:
+	volatile int val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: arch/x86/mm/km_protect.c:55:
+	volatile int val;
+	printk("PID: %d\n", current->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#259: FILE: arch/x86/mm/km_protect.c:55:
+	printk("PID: %d\n", current->pid);

ERROR:SPACING: space required before the open parenthesis '('
#260: FILE: arch/x86/mm/km_protect.c:56:
+	for(i = 0; i < 200; i++) {

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#261: FILE: arch/x86/mm/km_protect.c:57:
+		udelay(20000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:LONG_UDELAY: long udelay - prefer mdelay; see arch/arm/include/asm/delay.h
#261: FILE: arch/x86/mm/km_protect.c:57:
+		udelay(20000);

ERROR:SPACING: space required before the open parenthesis '('
#264: FILE: arch/x86/mm/km_protect.c:60:
+	while(1) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#270: FILE: arch/x86/mm/km_protect.c:66:
+}
+void km_test2(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: arch/x86/mm/km_protect.c:70:
+	struct km_struct *prev;
+	km_alloc_handle("test2", &km_handle);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#278: FILE: arch/x86/mm/km_protect.c:74:
+		printk("__get_free_page failed\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#298: FILE: arch/x86/mm/km_protect.c:94:
+}
+void km_test3(void)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#300: FILE: arch/x86/mm/km_protect.c:96:
+	volatile int val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#304: FILE: arch/x86/mm/km_protect.c:100:
+	void *addr;
+	km_alloc_handle("test3", &km_handle);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#308: FILE: arch/x86/mm/km_protect.c:104:
+	printk("%p\n", addr);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#315: FILE: arch/x86/mm/km_protect.c:111:
+}
+void km_test4(void)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#317: FILE: arch/x86/mm/km_protect.c:113:
+	volatile int val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: arch/x86/mm/km_protect.c:116:
+	void *addr, *addr2;
+	km_alloc_handle("test4", &km_handle);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#323: FILE: arch/x86/mm/km_protect.c:119:
+	printk("addr: %p\n", addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#325: FILE: arch/x86/mm/km_protect.c:121:
+	printk("addr2: %p\n", addr2);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#333: FILE: arch/x86/mm/km_protect.c:129:
+}
+void km_test5(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#337: FILE: arch/x86/mm/km_protect.c:133:
+}
+void km_test6(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#340: FILE: arch/x86/mm/km_protect.c:136:
+}
+void km_test7(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#343: FILE: arch/x86/mm/km_protect.c:139:
+}
+void km_test8(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#346: FILE: arch/x86/mm/km_protect.c:142:
+}
+int km_protect_write(struct file *file, const char __user * buffer,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#346: FILE: arch/x86/mm/km_protect.c:142:
+int km_protect_write(struct file *file, const char __user * buffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: arch/x86/mm/km_protect.c:143:
+int km_protect_write(struct file *file, const char __user * buffer,
+		unsigned long count, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#352: FILE: arch/x86/mm/km_protect.c:148:
+	unsigned long cmd;
+	printk("PID: %d pgd: %p\n", current->pid, current->mm->pgd);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#352: FILE: arch/x86/mm/km_protect.c:148:
+	printk("PID: %d pgd: %p\n", current->pid, current->mm->pgd);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#356: FILE: arch/x86/mm/km_protect.c:152:
+	sscanf(buf, "%li", &cmd);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#356: FILE: arch/x86/mm/km_protect.c:152:
+	sscanf(buf, "%li", &cmd);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#383: FILE: arch/x86/mm/km_protect.c:179:
+		printk("Command error!\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#387: FILE: arch/x86/mm/km_protect.c:183:
+}
+int km_protect_read(char *buf, char **start, off_t offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: arch/x86/mm/km_protect.c:184:
+int km_protect_read(char *buf, char **start, off_t offset,
+		int count, int *eof, void *data)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#393: FILE: arch/x86/mm/km_protect.c:189:
+}
+void __init km_protect_init(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#398: FILE: arch/x86/mm/km_protect.c:194:
+		printk(KERN_EMERG "km_protect: alloc km_table failed!\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#404: FILE: arch/x86/mm/km_protect.c:200:
+}
+void __init km_protect_dbginit(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: arch/x86/mm/km_protect.c:203:
+	struct proc_dir_entry *e;
+	e = create_proc_entry("km_protect", 0, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#409: FILE: arch/x86/mm/km_protect.c:205:
+		printk(KERN_EMERG "km_protect: Create proc file failed!\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#416: FILE: arch/x86/mm/km_protect.c:212:
+}
+void km_alloc_handle(const char *name, struct km_struct **handle)

WARNING:LINE_SPACING: Missing a blank line after declarations
#421: FILE: arch/x86/mm/km_protect.c:217:
+	char buf[8];
+	if(cur_km_id >= MAX_KM_ID)

ERROR:SPACING: space required before the open parenthesis '('
#421: FILE: arch/x86/mm/km_protect.c:217:
+	if(cur_km_id >= MAX_KM_ID)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct km_struct)...)
#424: FILE: arch/x86/mm/km_protect.c:220:
+	p = kmalloc(sizeof(struct km_struct) + size * PAGE_SHIFT, GFP_KERNEL

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#427: FILE: arch/x86/mm/km_protect.c:222:
+	if (!p)
+		panic("Cannot alloc km handle %s\n", name);

ERROR:SPACING: space required before the open parenthesis '('
#429: FILE: arch/x86/mm/km_protect.c:224:
+	for(i = 0; i < PAGE_SHIFT; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: arch/x86/mm/km_protect.c:229:
+		p->kmalloc_caches[0] = kmem_cache_create(&p->name[0], 96, 0,
+		strcat(&p->name[size], "-192");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: arch/x86/mm/km_protect.c:231:
+		p->kmalloc_caches[1] = kmem_cache_create(&p->name[size], 192, 0,
+	}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#447: FILE: arch/x86/mm/km_protect.c:239:
+}
+void km_free_handle(struct km_struct *handle)

WARNING:LINE_SPACING: Missing a blank line after declarations
#450: FILE: arch/x86/mm/km_protect.c:242:
+	int i;
+	if (KMALLOC_MIN_SIZE <= 64) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#458: FILE: arch/x86/mm/km_protect.c:250:
+}
+void km_set_handle(struct km_struct *handle, struct km_struct **prev)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#460: FILE: arch/x86/mm/km_protect.c:252:
+	if (NULL != prev)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->km_handle"
#463: FILE: arch/x86/mm/km_protect.c:255:
+		if (current->km_handle != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#468: FILE: arch/x86/mm/km_protect.c:260:
+}
+void km_protect_addr(unsigned long addr, int numpages)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#478: FILE: arch/x86/mm/km_protect.c:270:
+	WARN_ON(0 == current->km_handle->id);

ERROR:SPACING: spaces required around that '||' (ctx:WxV)
#479: FILE: arch/x86/mm/km_protect.c:271:
+	WARN_ON(pfn < protectmem_lowest_pfn ||pfn > protectmem_highest_pfn);
 	                                    ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#498: FILE: arch/x86/mm/km_protect.c:290:
+}
+void km_unprotect_addr(unsigned long addr, int numpages)

ERROR:SPACING: spaces required around that '||' (ctx:WxV)
#508: FILE: arch/x86/mm/km_protect.c:300:
+	if (pfn < protectmem_lowest_pfn ||pfn > protectmem_highest_pfn)
 	                                ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#525: FILE: arch/x86/mm/km_protect.c:317:
+}
+bool km_valid_addr(unsigned long addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#527: FILE: arch/x86/mm/km_protect.c:319:
+	volatile int v;

WARNING:LINE_SPACING: Missing a blank line after declarations
#536: FILE: arch/x86/mm/km_protect.c:328:
+	unsigned long pfn = __pa(addr) >> PAGE_SHIFT;
+	WARN_ON(0 == current->km_handle->id);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#536: FILE: arch/x86/mm/km_protect.c:328:
+	WARN_ON(0 == current->km_handle->id);

ERROR:SPACING: spaces required around that '||' (ctx:WxV)
#537: FILE: arch/x86/mm/km_protect.c:329:
+	if (pfn < protectmem_lowest_pfn ||pfn > protectmem_highest_pfn)
 	                                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#620: FILE: include/linux/km_protect.h:1:
+/*

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#634: FILE: include/linux/km_protect.h:15:
+#define KM_TABLE_SIZE protectmem_pages*sizeof(unsigned short)
                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#634: FILE: include/linux/km_protect.h:15:
+#define KM_TABLE_SIZE protectmem_pages*sizeof(unsigned short)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#666: FILE: include/linux/km_protect.h:47:
+}
+static inline void __init km_protect_dbginit(void)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev->km_handle"
#787: FILE: kernel/sched.c:2610:
+	if (prev->km_handle != NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: mm/page_alloc.c:154:
+  unsigned long __meminitdata arch_zone_lowest_possible_pfn[MAX_NR_ZONES];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: mm/page_alloc.c:155:
+  unsigned long __meminitdata arch_zone_highest_possible_pfn[MAX_NR_ZONES];$

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#833: FILE: mm/page_alloc.c:1419:
+		if (ZONE_PROTECT == z->zone_idx) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#836: FILE: mm/page_alloc.c:1422:
+				return buffered_rmqueue(preferred_zone, zone, order, gfp_mask);
+			else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169132.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 50 warnings, 33 checks, 733 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169132.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
