WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
  This functions expand IPRIO_BE class section of traditional CFQ scheduler.

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#44: 
    Signed-off-by: Satoshi UCHIDA <s-uchida@ap.jp.nec.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#141: FILE: block/cfq-cgroup.c:348:
+	return base_slice + (base_slice/CFQ_CGROUP_SLICE_SCALE *
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#167: FILE: block/cfq-cgroup.c:374:
+	if (!add_front) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#171: FILE: block/cfq-cgroup.c:378:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: block/cfq-cgroup.c:416:
+static void __cfq_cgroup_slice_expired(struct cfq_driver_data *cfqdd,
+					struct cfq_data *cfqd, int timed_out)

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#251: FILE: block/cfq-cgroup.c:458:
+static void __cfq_cgroup_set_active_data(struct cfq_driver_data*cfqdd,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: block/cfq-cgroup.c:459:
+static void __cfq_cgroup_set_active_data(struct cfq_driver_data*cfqdd,
+					struct cfq_data *cfqd)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#268: FILE: block/cfq-cgroup.c:475:
+	__cfq_cgroup_set_active_data(cfqdd , cfqd);
 	                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#308: FILE: block/cfq-cgroup.c:515:
+	BUG_ON(cfqdd->busy_data);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#341: FILE: block/cfq-cgroup.c:548:
+
+		}

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#368: FILE: block/cfq-cgroup.c:954:
+	iosched_cfq_cgroup.ops.elevator_dispatch_fn =
+					cfq_cgroup_dispatch_requests,
 
 	elv_register(&iosched_cfq_cgroup);

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: block/cfq-iosched.c:938:
+	struct cfq_queue *cfqq = cfqd->active_queue;
+	if (cfqq)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#404: FILE: block/cfq-iosched.c:940:
+		return timer_pending(&cfqd->cfqdd->idle_slice_timer)
+			|| (cfqq->dispatched && cfq_cfqq_idle_window(cfqq));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfqd->active_queue == cfqq'
#462: FILE: block/cfq-iosched.c:1923:
+	if ((flag) && (cfqd->active_queue == cfqq)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#522: FILE: include/linux/cfq-iosched.h:144:
+extern void cfq_free_cfq_data(struct cfq_data *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfq_data *' should also have an identifier name
#522: FILE: include/linux/cfq-iosched.h:144:
+extern void cfq_free_cfq_data(struct cfq_data *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#523: FILE: include/linux/cfq-iosched.h:145:
+extern void cfq_rb_erase(struct rb_node *, struct cfq_rb_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_node *' should also have an identifier name
#523: FILE: include/linux/cfq-iosched.h:145:
+extern void cfq_rb_erase(struct rb_node *, struct cfq_rb_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfq_rb_root *' should also have an identifier name
#523: FILE: include/linux/cfq-iosched.h:145:
+extern void cfq_rb_erase(struct rb_node *, struct cfq_rb_root *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#524: FILE: include/linux/cfq-iosched.h:146:
+extern void cfq_slice_expired(struct cfq_data *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfq_data *' should also have an identifier name
#524: FILE: include/linux/cfq-iosched.h:146:
+extern void cfq_slice_expired(struct cfq_data *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#524: FILE: include/linux/cfq-iosched.h:146:
+extern void cfq_slice_expired(struct cfq_data *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#525: FILE: include/linux/cfq-iosched.h:147:
+extern int wait_request_checker(struct cfq_data *cfqd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#526: FILE: include/linux/cfq-iosched.h:148:
+extern int cfq_forced_dispatch(struct cfq_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfq_data *' should also have an identifier name
#526: FILE: include/linux/cfq-iosched.h:148:
+extern int cfq_forced_dispatch(struct cfq_data *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#527: FILE: include/linux/cfq-iosched.h:149:
+extern int cfq_queue_dispatch_requests(struct cfq_data *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfq_data *' should also have an identifier name
#527: FILE: include/linux/cfq-iosched.h:149:
+extern int cfq_queue_dispatch_requests(struct cfq_data *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#527: FILE: include/linux/cfq-iosched.h:149:
+extern int cfq_queue_dispatch_requests(struct cfq_data *, int);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205169.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 13 warnings, 14 checks, 448 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205169.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
