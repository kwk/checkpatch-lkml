WARNING:TYPO_SPELLING: 'backupped' may be misspelled - perhaps 'backed-up'?
#49: 
are backupped. Before jumping to the new (kexeced) kernel and after
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#86: FILE: arch/x86/kernel/machine_kexec_32.c:23:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: arch/x86/kernel/machine_kexec_32.c:120:
+int machine_kexec_vcall(struct kimage *image, unsigned long *ret,
+			 unsigned int argc, va_list args)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#142: FILE: arch/x86/kernel/machine_kexec_32.c:134:
+	memcpy(control_page, relocate_page, PAGE_SIZE/2);
 	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#147: FILE: arch/x86/kernel/machine_kexec_32.c:139:
+		unsigned int i;
+		KCALL_MAGIC(control_page) = KCALL_MAGIC_NUMBER;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#150: FILE: arch/x86/kernel/machine_kexec_32.c:142:
+			KCALL_ARGS(control_page)[i] = \

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#247: FILE: include/asm-x86/kexec_32.h:27:
+#define KCALL_DATA(buf)		((__u8 *)(buf)+KCALL_DATA_BASE)
                        		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#248: FILE: include/asm-x86/kexec_32.h:28:
+#define KCALL_OFF(off)		(KCALL_DATA_BASE+(off))
                       		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#251: FILE: include/asm-x86/kexec_32.h:31:
+#define KCALL_MAGIC(buf)	(*(__u32 *)(KCALL_DATA(buf)+0x0))
                         	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#253: FILE: include/asm-x86/kexec_32.h:33:
+#define KCALL_ARGC(buf)		(*(__u32 *)(KCALL_DATA(buf)+0x4))
                        		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#255: FILE: include/asm-x86/kexec_32.h:35:
+#define KCALL_ARGS(buf)		((__u32 *)(KCALL_DATA(buf)+0x8))
                        		                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#262: FILE: include/asm-x86/kexec_32.h:42:
+#define KCALL_ENTRY(buf)	(*(__u32 *)(KCALL_DATA(buf)+0x200))
                         	                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: include/linux/kexec.h:112:
+extern void machine_kexec(struct kimage *image);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: include/linux/kexec.h:113:
+extern int machine_kexec_vcall(struct kimage *image, unsigned long *ret,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#307: FILE: include/linux/kexec.h:115:
+extern int machine_kexec_call(struct kimage *image, unsigned long *ret,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: include/linux/kexec.h:123:
+extern void kimage_free(struct kimage *image);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#316: FILE: include/linux/kexec.h:124:
+extern int kexec_call(struct kimage *image, unsigned long *ret,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: include/linux/kexec.h:126:
+extern int kexec_vcall(struct kimage *image, unsigned long *ret,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/kexec.h:128:
+extern int machine_kexec_jump(struct kimage *image, unsigned long *cmd_ret,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: include/linux/kexec.h:130:
+extern int kexec_jump(struct kimage *image, unsigned long *cmd_ret,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#378: FILE: kernel/kexec.c:252:
+		printk(KERN_ERR "Could not allocate swap buffer\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: kernel/kexec.c:1438:
+int machine_kexec_call(struct kimage *image, unsigned long *ret,
+			unsigned int argc, ...)

WARNING:LINE_SPACING: Missing a blank line after declarations
#421: FILE: kernel/kexec.c:1442:
+	int error;
+	va_start(args, argc);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#427: FILE: kernel/kexec.c:1448:
+int __attribute__ ((weak)) machine_kexec_vcall(struct kimage *image,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: kernel/kexec.c:1449:
+int __attribute__ ((weak)) machine_kexec_vcall(struct kimage *image,
+						unsigned long *ret,

WARNING:LINE_SPACING: Missing a blank line after declarations
#443: FILE: kernel/kexec.c:1464:
+	va_list args;
+	va_start(args, argc);

CHECK:CAMELCASE: Avoid CamelCase: <Resume_console>
#461: FILE: kernel/kexec.c:1482:
+			goto Resume_console;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Resume_devices>
#466: FILE: kernel/kexec.c:1487:
+			goto Resume_devices;

CHECK:CAMELCASE: Avoid CamelCase: <Enable_irqs>
#479: FILE: kernel/kexec.c:1500:
+			goto Enable_irqs;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#533: FILE: kernel/sys.c:306:
+	int ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#546: FILE: kernel/sys.c:314:
+		printk(KERN_EMERG "Starting new kernel\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#566: FILE: kernel/sys.c:431:
+			int ret;
+			ret = kernel_kexec((unsigned long)arg);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000356275.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 22 checks, 869 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000356275.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
