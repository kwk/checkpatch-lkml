WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
perf_counter tools: resurrect perf top annotation in a simple interactive form.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#166: FILE: tools/perf/builtin-top.c:88:
+static char			*sym_filter			=  NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#167: FILE: tools/perf/builtin-top.c:89:
+struct sym_entry		*sym_filter_entry		=  NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#169: FILE: tools/perf/builtin-top.c:91:
+static int			sym_counter			=  0;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#196: FILE: tools/perf/builtin-top.c:123:
+	char command[PATH_MAX*2], *path = vmlinux;
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#228: FILE: tools/perf/builtin-top.c:155:
+	sprintf(command, "objdump --start-address=0x%016Lx --stop-address=0x%016Lx -dS %s", start, end, path);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#228: FILE: tools/perf/builtin-top.c:155:
+	sprintf(command, "objdump --start-address=0x%016Lx --stop-address=0x%016Lx -dS %s", start, end, path);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "src"
#242: FILE: tools/perf/builtin-top.c:169:
+		assert(src != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#258: FILE: tools/perf/builtin-top.c:185:
+		if (strlen(src->line)>8 && src->line[8] == ':') {
 		                     ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#263: FILE: tools/perf/builtin-top.c:190:
+		if (strlen(src->line)>8 && src->line[16] == ':') {
 		                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#345: FILE: tools/perf/builtin-top.c:272:
+		float pcnt = 100.0*(float)line->count[sym_counter]/(float)total;
 		                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#345: FILE: tools/perf/builtin-top.c:272:
+		float pcnt = 100.0*(float)line->count[sym_counter]/(float)total;
 		                                                  ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#395: FILE: tools/perf/builtin-top.c:322:
+			else more++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#454: FILE: tools/perf/builtin-top.c:525:
+	while(*p) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#509: FILE: tools/perf/builtin-top.c:580:
+	if (!found) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#513: FILE: tools/perf/builtin-top.c:584:
+		return;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#513: FILE: tools/perf/builtin-top.c:584:
+	} else

WARNING:TYPO_SPELLING: 'nknown' may be misspelled - perhaps 'unknown'?
#522: FILE: tools/perf/builtin-top.c:593:
+	fprintf(stderr, "\nknown keys:\n");
 	                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#537: FILE: tools/perf/builtin-top.c:608:
+	switch (c) {
+		case 'd':
[...]
+		case 'e':
[...]
+		case 'E':
[...]
+		case 'f':
[...]
+		case 'F':
[...]
+		case 'q':
+		case 'Q':
[...]
+		case 's':
[...]
+		case 'S':
[...]
+		case 'z':
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:BRACES: braces {} should be used on all arms of this statement
#545: FILE: tools/perf/builtin-top.c:616:
+			if (nr_counters > 1) {
[...]
+			} else sym_counter = 0;
[...]

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#555: FILE: tools/perf/builtin-top.c:626:
+					fprintf(stderr, "Sorry, no such event, using %s.\n", event_name(0));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#559: FILE: tools/perf/builtin-top.c:630:
+			} else sym_counter = 0;

WARNING:LONG_LINE_STRING: line length of 105 exceeds 100 columns
#565: FILE: tools/perf/builtin-top.c:636:
+			prompt_percent(&sym_pcnt_filter, "Enter details display event filter (percent)");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: braces {} should be used on all arms of this statement
#575: FILE: tools/perf/builtin-top.c:646:
+			if (!sym_filter_entry)
[...]
+			else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#577: FILE: tools/perf/builtin-top.c:648:
+				break;
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#577: FILE: tools/perf/builtin-top.c:648:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#701: FILE: tools/perf/builtin-top.c:1084:
+	OPT_STRING('s', "sym-annotate", &sym_filter, "symbol name",
+		    "symbol to annotate - requires -k option"),

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094863.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 8 warnings, 10 checks, 574 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094863.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
