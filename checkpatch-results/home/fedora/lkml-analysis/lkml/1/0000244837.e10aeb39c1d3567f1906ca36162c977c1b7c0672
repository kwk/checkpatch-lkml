WARNING:TYPO_SPELLING: 'an userspace' may be misspelled - perhaps 'a userspace'?
#29: 
to an userspace daemon.
   ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#59: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: Documentation/talpa/allow_most.c:1:
+/* This is a userspace talpa client.  It looks for a file /root/denyme and

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#65: FILE: Documentation/talpa/allow_most.c:2:
+ * will deny access to that file if it starts with the string "bad" */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - int main() should probably be int main(void)
#106: FILE: Documentation/talpa/allow_most.c:43:
+int main()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#129: FILE: Documentation/talpa/allow_most.c:66:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#135: FILE: Documentation/talpa/allow_most.c:72:
+			fprintf(stderr, "RERR: %zd (expected %zd) - errno %d\n", ret, sizeof(details), errno);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: braces {} should be used on all arms of this statement
#141: FILE: Documentation/talpa/allow_most.c:78:
+		if (details.fd >= 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#144: FILE: Documentation/talpa/allow_most.c:81:
+			ret = readlink(link, buf, sizeof(buf)-1);
 			                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#151: FILE: Documentation/talpa/allow_most.c:88:
+		} else

WARNING:LONG_LINE_STRING: line length of 110 exceeds 100 columns
#170: FILE: Documentation/talpa/allow_most.c:107:
+				fprintf(stderr, "file_contains_bad returned something other than -1, 0, 1\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: Documentation/talpa/allow_most.c:128:
+			fprintf(stderr, "WERR: %zd (expected %zd) - errno %d\n",
+					ret, sizeof(response), errno);

WARNING:TYPO_SPELLING: 'timeing' may be misspelled - perhaps 'timing'?
#292: FILE: Documentation/talpa/client:85:
+timeout_ms: RW:	number of ms any access decision should wait for userspace before being timeing out
                	                                                                        ^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#299: FILE: Documentation/talpa/test_deny.c:1:
+#include <errno.h>

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fd < 0'
#324: FILE: Documentation/talpa/test_deny.c:26:
+	if ((fd < 0) && (errno != EACCES)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno != EACCES'
#324: FILE: Documentation/talpa/test_deny.c:26:
+	if ((fd < 0) && (errno != EACCES)) {

WARNING:TYPO_SPELLING: 'asyncronous' may be misspelled - perhaps 'asynchronous'?
#408: FILE: Documentation/talpa/test_deny.c:110:
+	/* this sleep gives the asyncronous close scan enough time to cache */
 	                        ^^^^^^^^^^^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#438: FILE: Documentation/talpa/test_deny.c:140:
+	file = mmap(NULL, GOOD_STRING_LEN , PROT_WRITE, MAP_SHARED, fd, 0);
 	                                  ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#467: FILE: Documentation/talpa/test_deny.c:169:
+	file = mmap(NULL, GOOD_STRING_LEN , PROT_READ, MAP_PRIVATE, fd, 0);
 	                                  ^

WARNING:TYPO_SPELLING: 'asyncronous' may be misspelled - perhaps 'asynchronous'?
#492: FILE: Documentation/talpa/test_deny.c:194:
+	/* this sleep gives the asyncronous close scan enough time to cache */
 	                        ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'asyncronous' may be misspelled - perhaps 'asynchronous'?
#563: FILE: Documentation/talpa/test_deny.c:265:
+	/* this sleep gives the asyncronous close scan enough time to cache */
 	                        ^^^^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#570: FILE: Documentation/talpa/test_deny.c:272:
+}
+int test_bad_write_mmap(void)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#592: FILE: Documentation/talpa/test_deny.c:294:
+	file = mmap(NULL, BAD_STRING_LEN , PROT_WRITE, MAP_SHARED, fd, 0);
 	                                 ^

WARNING:TYPO_SPELLING: 'asyncronous' may be misspelled - perhaps 'asynchronous'?
#637: FILE: Documentation/talpa/test_deny.c:339:
+	/* this sleep gives the asyncronous close scan enough time to cache */
 	                        ^^^^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#644: FILE: Documentation/talpa/test_deny.c:346:
+}
+int main(void)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#685: FILE: include/linux/talpa.h:64:
+	uint32_t version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#686: FILE: include/linux/talpa.h:65:
+	uint32_t type;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#687: FILE: include/linux/talpa.h:66:
+} __attribute__ ((packed));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#703: FILE: include/linux/talpa.h:82:
+		int32_t code;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#704: FILE: include/linux/talpa.h:83:
+		uint32_t cache;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#706: FILE: include/linux/talpa.h:85:
+} __attribute__ ((packed));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#729: FILE: include/linux/talpa.h:108:
+	int32_t fd;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#730: FILE: include/linux/talpa.h:109:
+	uint32_t operation;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#731: FILE: include/linux/talpa.h:110:
+	uint32_t flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#732: FILE: include/linux/talpa.h:111:
+	uint32_t mode;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#733: FILE: include/linux/talpa.h:112:
+	uint32_t uid;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#734: FILE: include/linux/talpa.h:113:
+	uint32_t gid;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#735: FILE: include/linux/talpa.h:114:
+	uint32_t tgid;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#736: FILE: include/linux/talpa.h:115:
+	uint32_t pid;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#737: FILE: include/linux/talpa.h:116:
+} __attribute__ ((packed));

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#759: FILE: security/talpa/Kconfig:43:
+config TALPA_CLIENT
+	bool "Userspace vetting support"
+	depends on TALPA
+	default y
+	help
+	  This enables userspace clients to register with Talpa and
+	  receive vetting requests for filesystem operations.
+
+	  If you are unsure how to answer this question, answer Y.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#784: FILE: security/talpa/talpa_client.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#800: FILE: security/talpa/talpa_client.c:17:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#822: FILE: security/talpa/talpa_client.c:39:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#827: FILE: security/talpa/talpa_client.c:44:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#829: FILE: security/talpa/talpa_client.c:46:
+/* Each interception is stored in a form of this structure
+   and put in a queue until consumed by the client or expired. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#829: FILE: security/talpa/talpa_client.c:46:
+   and put in a queue until consumed by the client or expired. */

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#839: FILE: security/talpa/talpa_client.c:56:
+	struct file *file;		/* filp from the open/close call */
 	                  		   ^^^^

WARNING:TYPO_SPELLING: 'miliseconds' may be misspelled - perhaps 'milliseconds'?
#860: FILE: security/talpa/talpa_client.c:77:
+static unsigned long talpa_client_timeout = 5000; /* Time in miliseconds to wait for vetting to complete. */
                                                              ^^^^^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#860: FILE: security/talpa/talpa_client.c:77:
+static unsigned long talpa_client_timeout = 5000; /* Time in miliseconds to wait for vetting to complete. */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#870: FILE: security/talpa/talpa_client.c:87:
+static DECLARE_WAIT_QUEUE_HEAD(intercept_queue_wait); /* Wait queue for clients awaiting interceptions. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#872: FILE: security/talpa/talpa_client.c:89:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#931: FILE: security/talpa/talpa_client.c:148:
+	/* Interceptions of close can immediately proceed because
+	   response is not required.  callbacks into the cache based

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#933: FILE: security/talpa/talpa_client.c:150:
+	   client thread */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: security/talpa/talpa_client.c:160:
+		ret = wait_event_interruptible_timeout(details->wait,
+							details->complete,

WARNING:LINE_SPACING: Missing a blank line after declarations
#948: FILE: security/talpa/talpa_client.c:165:
+			struct list_head *pos;
+			if (ret == 0) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*client)...) over kmalloc(sizeof(struct vetting_client)...)
#996: FILE: security/talpa/talpa_client.c:213:
+	client = kmalloc(sizeof(struct vetting_client), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1137: FILE: security/talpa/talpa_client.c:354:
+		printk(KERN_CRIT "dentry_open failed with reason %ld\n", PTR_ERR(client_file));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1269: FILE: security/talpa/talpa_client.c:486:
+		.mode = S_IRUSR|S_IWUSR|S_IRGRP,
 		               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1269: FILE: security/talpa/talpa_client.c:486:
+		.mode = S_IRUSR|S_IWUSR|S_IRGRP,
 		                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR|S_IRGRP' are not preferred. Consider using octal permissions '0640'.
#1269: FILE: security/talpa/talpa_client.c:486:
+		.mode = S_IRUSR|S_IWUSR|S_IRGRP,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1276: FILE: security/talpa/talpa_client.c:493:
+		.mode = S_IRUSR|S_IWUSR|S_IRGRP,
 		               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1276: FILE: security/talpa/talpa_client.c:493:
+		.mode = S_IRUSR|S_IWUSR|S_IRGRP,
 		                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR|S_IRGRP' are not preferred. Consider using octal permissions '0640'.
#1276: FILE: security/talpa/talpa_client.c:493:
+		.mode = S_IRUSR|S_IWUSR|S_IRGRP,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1283: FILE: security/talpa/talpa_client.c:500:
+		.mode = S_IRUSR|S_IRGRP,
 		               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#1283: FILE: security/talpa/talpa_client.c:500:
+		.mode = S_IRUSR|S_IRGRP,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1291: FILE: security/talpa/talpa_client.c:508:
+static struct file_operations client_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1312: FILE: security/talpa/talpa_client.c:529:
+	dentry = securityfs_create_file("talpa-vetting", S_IRUSR|S_IWUSR, dentry, NULL, &client_fops);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1312: FILE: security/talpa/talpa_client.c:529:
+	dentry = securityfs_create_file("talpa-vetting", S_IRUSR|S_IWUSR, dentry, NULL, &client_fops);
 	                                                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#1312: FILE: security/talpa/talpa_client.c:529:
+	dentry = securityfs_create_file("talpa-vetting", S_IRUSR|S_IWUSR, dentry, NULL, &client_fops);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1318: FILE: security/talpa/talpa_client.c:535:
+	det_cache = kmem_cache_create("talpa_vetting_details", sizeof(struct vetting_details), 0, 0, NULL);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1326: FILE: security/talpa/talpa_client.c:543:
+__initcall(talpa_client_init);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1335: FILE: security/talpa/talpa_evaluation_calls.h:6:
+extern enum talpa_action talpa_client_examine(struct talpa_file_vetting *tfv);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000244837.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 36 warnings, 32 checks, 1249 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000244837.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
