WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: security/apparmor/apparmor.h:288:
+extern int aa_net_perm(struct aa_profile *profile, char *operation,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: security/apparmor/apparmor.h:289:
+extern int aa_net_perm(struct aa_profile *profile, char *operation,
+			int family, int type, int protocol);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: security/apparmor/apparmor.h:290:
+extern int aa_revalidate_sk(struct sock *sk, char *operation);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: security/apparmor/lsm.c:632:
+		error = aa_net_perm(profile, "socket_create", family,
+							type, protocol);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#120: FILE: security/apparmor/lsm.c:638:
+static int apparmor_socket_post_create(struct socket * sock, int family,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: security/apparmor/lsm.c:639:
+static int apparmor_socket_post_create(struct socket * sock, int family,
+					int type, int protocol, int kern)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#131: FILE: security/apparmor/lsm.c:649:
+static int apparmor_socket_bind(struct socket * sock,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: security/apparmor/lsm.c:650:
+				struct sockaddr * address, int addrlen)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: security/apparmor/lsm.c:657:
+static int apparmor_socket_connect(struct socket * sock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: security/apparmor/lsm.c:658:
+static int apparmor_socket_connect(struct socket * sock,
+					struct sockaddr * address, int addrlen)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: security/apparmor/lsm.c:658:
+					struct sockaddr * address, int addrlen)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: security/apparmor/lsm.c:665:
+static int apparmor_socket_listen(struct socket * sock, int backlog)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#154: FILE: security/apparmor/lsm.c:672:
+static int apparmor_socket_accept(struct socket * sock, struct socket * newsock)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#154: FILE: security/apparmor/lsm.c:672:
+static int apparmor_socket_accept(struct socket * sock, struct socket * newsock)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: security/apparmor/lsm.c:679:
+static int apparmor_socket_sendmsg(struct socket * sock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: security/apparmor/lsm.c:680:
+static int apparmor_socket_sendmsg(struct socket * sock,
+					struct msghdr * msg, int size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#162: FILE: security/apparmor/lsm.c:680:
+					struct msghdr * msg, int size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#169: FILE: security/apparmor/lsm.c:687:
+static int apparmor_socket_recvmsg(struct socket * sock,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#170: FILE: security/apparmor/lsm.c:688:
+				   struct msghdr * msg, int size, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#177: FILE: security/apparmor/lsm.c:695:
+static int apparmor_socket_getsockname(struct socket * sock)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#184: FILE: security/apparmor/lsm.c:702:
+static int apparmor_socket_getpeername(struct socket * sock)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#191: FILE: security/apparmor/lsm.c:709:
+static int apparmor_socket_getsockopt(struct socket * sock, int level,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: security/apparmor/lsm.c:710:
+static int apparmor_socket_getsockopt(struct socket * sock, int level,
+					int optname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#199: FILE: security/apparmor/lsm.c:717:
+static int apparmor_socket_setsockopt(struct socket * sock, int level,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: security/apparmor/lsm.c:718:
+static int apparmor_socket_setsockopt(struct socket * sock, int level,
+					int optname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#207: FILE: security/apparmor/lsm.c:725:
+static int apparmor_socket_shutdown(struct socket * sock, int how)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: security/apparmor/lsm.c:733:
+static int apparmor_socket_getpeersec_stream(struct socket *sock,
+			char __user *optval, int __user *optlen, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#215: FILE: security/apparmor/lsm.c:733:
+			char __user *optval, int __user *optlen, unsigned len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: security/apparmor/lsm.c:741:
+static int apparmor_socket_getpeersec_dgram(struct socket *sock,
+					struct sk_buff *skb, u32 *secid)

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#282: FILE: security/apparmor/main.c:350:
+static const char *address_families[] = {

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#286: FILE: security/apparmor/main.c:354:
+static const char *sock_types[] = {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'family < 0'
#339: FILE: security/apparmor/main.c:779:
+	if ((family < 0) || (family >= AF_MAX))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'family >= AF_MAX'
#339: FILE: security/apparmor/main.c:779:
+	if ((family < 0) || (family >= AF_MAX))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type < 0'
#342: FILE: security/apparmor/main.c:782:
+	if ((type < 0) || (type >= SOCK_MAX))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type >= SOCK_MAX'
#342: FILE: security/apparmor/main.c:782:
+	if ((type < 0) || (type >= SOCK_MAX))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#372: FILE: security/apparmor/main.c:812:
+	/* this is some debugging code to flush out the network hooks that
+	   that are called in interrupt context */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#372: FILE: security/apparmor/main.c:812:
+	   that are called in interrupt context */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#374: FILE: security/apparmor/main.c:814:
+		printk("AppArmor Debug: Hook being called from interrupt context\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364998.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 7 warnings, 15 checks, 366 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364998.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
