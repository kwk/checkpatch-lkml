WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#95: FILE: arch/x86/kernel/cpu/common.c:1146:
+	if (!oist->ist[0]) {
 	           ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#101: FILE: arch/x86/kernel/cpu/common.c:1151:
+			oist->ist[v] = t->x86_tss.ist[v] =
 			      ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#101: FILE: arch/x86/kernel/cpu/common.c:1151:
+			oist->ist[v] = t->x86_tss.ist[v] =
 			                          ^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#101: FILE: arch/x86/kernel/cpu/common.c:1151:
+			oist->ist[v] = t->x86_tss.ist[v] =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#240: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:630:
+	per_cpu(ici_cpuid4_info, cpu) = kzalloc(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!per_cpu"
#243: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:632:
+	if (per_cpu(ici_cpuid4_info, cpu) == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!per_cpu"
#298: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:900:
+	if (unlikely(per_cpu(ici_cache_kobject, cpu) == NULL))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#302: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:903:
+	per_cpu(ici_index_kobject, cpu) = kzalloc(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!per_cpu"
#305: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:905:
+	if (unlikely(per_cpu(ici_index_kobject, cpu) == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!per_cpu"
#347: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:965:
+	if (per_cpu(ici_cpuid4_info, cpu) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sd)...) over kzalloc(sizeof(struct svm_cpu_data)...)
#452: FILE: arch/x86/kvm/svm.c:372:
+	sd = kzalloc(sizeof(struct svm_cpu_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: arch/x86/kvm/svm.c:2380:
+	struct svm_cpu_data *sd = per_cpu(svm_data, cpu);
+	sd->tss_desc->type = 9; /* available 32/64-bit TSS */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000059536.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 8 checks, 407 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000059536.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
