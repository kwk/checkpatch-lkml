WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: security/evm/evm_config.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#67: FILE: security/evm/evm_config.c:6:
+ * ^I   Kylene Hall <kjhall@us.ibm.com>$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#82: FILE: security/evm/evm_config.c:21:
+int evm_config_xattrnum = 0;	/* number of extended attributes */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#91: FILE: security/evm/evm_config.c:30:
+	for_each_xattr(config_p, evm_config_xattrdata, evm_config_xattrnum)
+	    printk(KERN_INFO "%s: %s\n", name, config_p->xattr_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#92: FILE: security/evm/evm_config.c:31:
+	    printk(KERN_INFO "%s: %s\n", name, config_p->xattr_name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#105: FILE: security/evm/evm_config.c:44:
+		display_config(__FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#108: FILE: security/evm/evm_config.c:47:
+		printk(KERN_INFO "%s: config file definition missing\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#109: FILE: security/evm/evm_config.c:48:
+		       __FUNCTION__);

CHECK:BRACES: braces {} should be used on all arms of this statement
#123: FILE: security/evm/evm_config.c:62:
+		if (*bufp == ' ')	/* skip blanks */
[...]
+		else if (*bufp == '#') {	/* skip comment */
[...]
+		} else if (*bufp == '\n')	/* skip newline */
[...]
+		else if (*bufp == '\t')	/* skip tabs */
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited before semicolon
#124: FILE: security/evm/evm_config.c:63:
+			while ((*bufp == ' ') && (bufp++ < buf_end)) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#124: FILE: security/evm/evm_config.c:63:
+			while ((*bufp == ' ') && (bufp++ < buf_end)) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited before semicolon
#126: FILE: security/evm/evm_config.c:65:
+			while ((*bufp != '\n') && (bufp++ < buf_end)) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#126: FILE: security/evm/evm_config.c:65:
+			while ((*bufp != '\n') && (bufp++ < buf_end)) ;

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#171: FILE: security/evm/evm_config.c:110:
+	config_xattrdata =
+	    kmalloc(num_xattr * sizeof(struct evm_xattr_config), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tag"
#179: FILE: security/evm/evm_config.c:118:
+		datap = tag == NULL ? dataend : tag + taglen;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SIZEOF_PARENTHESIS: sizeof config_p->xattr_name should be sizeof(config_p->xattr_name)
#180: FILE: security/evm/evm_config.c:119:
+		memset(config_p->xattr_name, 0, sizeof config_p->xattr_name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#196: FILE: security/evm/evm_crypto.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: security/evm/evm_crypto.c:8:
+ * ^I   Kylene Hall <kjhall@us.ibm.com>$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#246: FILE: security/evm/evm_crypto.c:51:
+			printk(KERN_INFO "%s: dentry_open failed\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#247: FILE: security/evm/evm_crypto.c:52:
+			       __FUNCTION__);

CHECK:BRACES: braces {} should be used on all arms of this statement
#288: FILE: security/evm/evm_crypto.c:93:
+	if (dentry->d_inode->i_op->readlink == generic_readlink)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#290: FILE: security/evm/evm_crypto.c:95:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#292: FILE: security/evm/evm_crypto.c:97:
+		char *fname;
+		fname = (!dentry->d_name.name) ? " " :

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#295: FILE: security/evm/evm_crypto.c:100:
+			__FUNCTION__, fname);

CHECK:BRACES: braces {} should be used on all arms of this statement
#297: FILE: security/evm/evm_crypto.c:102:
+	if (rbuf_len > 0) {
[...]
+	} else
[...]

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#299: FILE: security/evm/evm_crypto.c:104:
+			__FUNCTION__, rbuf_len, rbuf);

CHECK:BRACES: Unbalanced braces around else statement
#306: FILE: security/evm/evm_crypto.c:111:
+	} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#327: FILE: security/evm/evm_crypto.c:132:
+			__FUNCTION__, evm_hash);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#328: FILE: security/evm/evm_crypto.c:133:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#364: FILE: security/evm/evm_crypto.c:169:
+			__FUNCTION__, evm_hmac);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#365: FILE: security/evm/evm_crypto.c:170:
+		return -ENOSYS;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#383: FILE: security/evm/evm_crypto.c:188:
+				__FUNCTION__, config_p->xattr_name, len);

WARNING:SIZEOF_PARENTHESIS: sizeof misc should be sizeof(misc)
#391: FILE: security/evm/evm_crypto.c:196:
+	memset(hmac_misc, 0, sizeof misc);

WARNING:SIZEOF_PARENTHESIS: sizeof misc should be sizeof(misc)
#396: FILE: security/evm/evm_crypto.c:201:
+	sg[0].length = sizeof misc;

WARNING:SIZEOF_PARENTHESIS: sizeof misc should be sizeof(misc)
#397: FILE: security/evm/evm_crypto.c:202:
+	crypto_hash_update(&desc, sg, sizeof misc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#432: FILE: security/evm/evm_crypto.c:237:
+			__FUNCTION__, evm_hmac);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#433: FILE: security/evm/evm_crypto.c:238:
+		return -ENOSYS;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#463: FILE: security/evm/evm_crypto.c:268:
+				__FUNCTION__, fname, config_p->xattr_name,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#473: FILE: security/evm/evm_crypto.c:278:
+					__FUNCTION__, fname,

WARNING:SIZEOF_PARENTHESIS: sizeof misc should be sizeof(misc)
#478: FILE: security/evm/evm_crypto.c:283:
+	memset(hmac_misc, 0, sizeof misc);

WARNING:SIZEOF_PARENTHESIS: sizeof misc should be sizeof(misc)
#483: FILE: security/evm/evm_crypto.c:288:
+	sg[0].length = sizeof misc;

WARNING:SIZEOF_PARENTHESIS: sizeof misc should be sizeof(misc)
#484: FILE: security/evm/evm_crypto.c:289:
+	crypto_hash_update(&desc, sg, sizeof misc);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iint->hmac_status == INTEGRITY_FAIL'
#500: FILE: security/evm/evm_crypto.c:305:
+	if (!evm_install && (iint->hmac_status == INTEGRITY_FAIL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#502: FILE: security/evm/evm_crypto.c:307:
+			__FUNCTION__, dentry->d_name.name);

WARNING:SIZEOF_PARENTHESIS: sizeof hmac_val should be sizeof(hmac_val)
#506: FILE: security/evm/evm_crypto.c:311:
+	memset(hmac_val, 0, sizeof hmac_val);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#509: FILE: security/evm/evm_crypto.c:314:
+		__FUNCTION__, dentry->d_name.name, rc);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#530: FILE: security/evm/evm_crypto.c:335:
+		return (-1);
+	} else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#551: FILE: security/evm/evm.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#562: FILE: security/evm/evm.h:12:
+#define MAX_DIGEST_SIZE ^I20^I/* 160-bits */$

WARNING:TYPO_SPELLING: 'preceeded' may be misspelled - perhaps 'preceded'?
#583: FILE: security/evm/evm.h:33:
+ * inode->i_integrity, preceeded by a header (structure evm_iint_cache),
                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#598: FILE: security/evm/evm.h:48:
+	struct mutex mutex;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#601: FILE: security/evm/evm.h:51:
+extern void display_config(const char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#601: FILE: security/evm/evm.h:51:
+extern void display_config(const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#602: FILE: security/evm/evm.h:52:
+extern struct evm_xattr_config *evm_parse_config(char *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#606: FILE: security/evm/evm.h:56:
+extern int evm_init_config(struct evm_xattr_config *evm_new_data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#608: FILE: security/evm/evm.h:58:
+extern void evm_cleanup_config(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#613: FILE: security/evm/evm.h:63:
+#define for_each_xattr(ptr, head, size) \
+	for (ptr = head; ptr < (head + size); ptr++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#613: FILE: security/evm/evm.h:63:
+#define for_each_xattr(ptr, head, size) \
+	for (ptr = head; ptr < (head + size); ptr++)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#613: FILE: security/evm/evm.h:63:
+#define for_each_xattr(ptr, head, size) \
+	for (ptr = head; ptr < (head + size); ptr++)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#616: FILE: security/evm/evm.h:66:
+extern int evm_init_tpmkernkey(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#617: FILE: security/evm/evm.h:67:
+extern int evm_calc_hash(struct dentry *d, struct file *file,

CHECK:CAMELCASE: Avoid CamelCase: <xattrType>
#618: FILE: security/evm/evm.h:68:
+			 char *digest, int xattrType);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#619: FILE: security/evm/evm.h:69:
+extern int evm_init_integrity(struct inode *inode, struct inode *dir,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#622: FILE: security/evm/evm.h:72:
+extern int evm_update_hmac(struct dentry *dentry, int flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#623: FILE: security/evm/evm.h:73:
+extern int evm_calc_hmac(struct dentry *d, char *digest);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#624: FILE: security/evm/evm.h:74:
+extern int evm_init_secfs(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#625: FILE: security/evm/evm.h:75:
+extern void evm_cleanup_secfs(void);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#633: FILE: security/evm/evm.h:83:
+#define dprintk(level, format, a...) \
+	if (evm_debug & level) \
+		printk(KERN_INFO format, ##a)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#633: FILE: security/evm/evm.h:83:
+#define dprintk(level, format, a...) \
+	if (evm_debug & level) \
+		printk(KERN_INFO format, ##a)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#635: FILE: security/evm/evm.h:85:
+		printk(KERN_INFO format, ##a)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#641: FILE: security/evm/evm_secfs.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#646: FILE: security/evm/evm_secfs.c:6:
+ * ^I   Kylene Hall <kjhall@us.ibm.com>$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#653: FILE: security/evm/evm_secfs.c:13:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#683: FILE: security/evm/evm_secfs.c:43:
+static ssize_t evm_read_debug(struct file *file, char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#684: FILE: security/evm/evm_secfs.c:44:
+			      size_t buflen, loff_t * ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#713: FILE: security/evm/evm_secfs.c:73:
+static ssize_t evm_write_debug(struct file *file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#714: FILE: security/evm/evm_secfs.c:74:
+			       size_t buflen, loff_t * ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#733: FILE: security/evm/evm_secfs.c:93:
+static ssize_t evm_write_secfs(struct file *file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#734: FILE: security/evm/evm_secfs.c:94:
+			       size_t buflen, loff_t * ppos)

CHECK:BRACES: braces {} should be used on all arms of this statement
#744: FILE: security/evm/evm_secfs.c:104:
+	if (error < 0) {
[...]
+	} else
[...]

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#745: FILE: security/evm/evm_secfs.c:105:
+		dprintk(EVM_BASE, "%s: tpmkernkey initialization failed \n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#746: FILE: security/evm/evm_secfs.c:106:
+			__FUNCTION__);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#748: FILE: security/evm/evm_secfs.c:108:
+		return error;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#748: FILE: security/evm/evm_secfs.c:108:
+	} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#749: FILE: security/evm/evm_secfs.c:109:
+		dprintk(EVM_BASE, "%s: tpmkernkey initialized\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#768: FILE: security/evm/evm_secfs.c:128:
+		dprintk(EVM_BASE, "%s: invalid config file\n", __FUNCTION__);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#779: FILE: security/evm/evm_secfs.c:139:
+static struct file_operations evm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#783: FILE: security/evm/evm_secfs.c:143:
+static struct file_operations evm_debug_ops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP | S_IWUSR' are not preferred. Consider using octal permissions '0640'.
#796: FILE: security/evm/evm_secfs.c:156:
+					    S_IRUSR | S_IRGRP | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#803: FILE: security/evm/evm_secfs.c:163:
+	evm_cache = debugfs_create_file("cache", S_IRUSR | S_IRGRP,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#807: FILE: security/evm/evm_secfs.c:167:
+	evm_crypto = debugfs_create_file("crypto", S_IRUSR | S_IRGRP, evm_dir,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#812: FILE: security/evm/evm_secfs.c:172:
+	evm_xattr = debugfs_create_file("xattr", S_IRUSR | S_IRGRP, evm_dir,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#891: FILE: security/evm/evm_main.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#896: FILE: security/evm/evm_main.c:6:
+ * ^I   Kylene Hall <kjhall@us.ibm.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#921: FILE: security/evm/evm_main.c:31:
+#define MAX_STR_SIZE ^I^I40^I/* String value  */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#922: FILE: security/evm/evm_main.c:32:
+#define SHA1_STR_SIZE ^I^I40^I/* String value  */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#923: FILE: security/evm/evm_main.c:33:
+#define SHA1_DIGEST_SIZE ^I20^I/* SHA1 is 160-bits */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#925: FILE: security/evm/evm_main.c:35:
+#define MD5_STR_SIZE ^I^I32^I/* String value  */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#926: FILE: security/evm/evm_main.c:36:
+#define MD5_DIGEST_SIZE ^I16^I/* MD5 is 128-bits */$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#928: FILE: security/evm/evm_main.c:38:
+int evm_initialized = 0;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#931: FILE: security/evm/evm_main.c:41:
+#define FIXED_STR_LEN (sizeof (FIXED_STR) -1)

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#931: FILE: security/evm/evm_main.c:41:
+#define FIXED_STR_LEN (sizeof (FIXED_STR) -1)
                                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#934: FILE: security/evm/evm_main.c:44:
+#define XATTR_EVM_SUFFIX_LEN (sizeof (XATTR_EVM_SUFFIX) -1)

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#934: FILE: security/evm/evm_main.c:44:
+#define XATTR_EVM_SUFFIX_LEN (sizeof (XATTR_EVM_SUFFIX) -1)
                                                         ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#937: FILE: security/evm/evm_main.c:47:
+#define XATTR_MD5_SUFFIX_LEN (sizeof (XATTR_MD5_SUFFIX) -1)

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#937: FILE: security/evm/evm_main.c:47:
+#define XATTR_MD5_SUFFIX_LEN (sizeof (XATTR_MD5_SUFFIX) -1)
                                                         ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#940: FILE: security/evm/evm_main.c:50:
+#define XATTR_SHA1_SUFFIX_LEN (sizeof (XATTR_SHA1_SUFFIX) -1)

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#940: FILE: security/evm/evm_main.c:50:
+#define XATTR_SHA1_SUFFIX_LEN (sizeof (XATTR_SHA1_SUFFIX) -1)
                                                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#943: FILE: security/evm/evm_main.c:53:
+#define XATTR_HMAC_SUFFIX_LEN (sizeof (XATTR_HMAC_SUFFIX) -1)

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#943: FILE: security/evm/evm_main.c:53:
+#define XATTR_HMAC_SUFFIX_LEN (sizeof (XATTR_HMAC_SUFFIX) -1)
                                                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#946: FILE: security/evm/evm_main.c:56:
+#define XATTR_FLAGS_SUFFIX_LEN (sizeof (XATTR_FLAGS_SUFFIX) -1)

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#946: FILE: security/evm/evm_main.c:56:
+#define XATTR_FLAGS_SUFFIX_LEN (sizeof (XATTR_FLAGS_SUFFIX) -1)
                                                             ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#955: FILE: security/evm/evm_main.c:65:
+	evm_debug = simple_strtol(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#959: FILE: security/evm/evm_main.c:69:
+__setup("evm_debug=", debug_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#970: FILE: security/evm/evm_main.c:80:
+__setup("evm_hmac=", hmac_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#983: FILE: security/evm/evm_main.c:93:
+__setup("evm_hash=", hash_setup);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#988: FILE: security/evm/evm_main.c:98:
+	evm_enable_ima = simple_strtol(str, NULL, 0);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#992: FILE: security/evm/evm_main.c:102:
+__setup("evm_enable_ima=", evm_enable_ima_setup);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#994: FILE: security/evm/evm_main.c:104:
+unsigned int evm_install = 0;

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#997: FILE: security/evm/evm_main.c:107:
+	evm_install = simple_strtol(str, NULL, 0);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1001: FILE: security/evm/evm_main.c:111:
+__setup("evm_install_mode=", install_mode_setup);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1006: FILE: security/evm/evm_main.c:116:
+		printk("%02x", *buf++);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1008: FILE: security/evm/evm_main.c:118:
+	printk("\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1014: FILE: security/evm/evm_main.c:124:
+ssize_t evm_verify_xattr(struct dentry * dentry, char *kval,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1030: FILE: security/evm/evm_main.c:140:
+			__FUNCTION__, fname, xattr_name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1041: FILE: security/evm/evm_main.c:151:
+				__FUNCTION__, fname, xattr_name, size,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1051: FILE: security/evm/evm_main.c:161:
+				__FUNCTION__, fname, xattr_name);

CHECK:BRACES: Unbalanced braces around else statement
#1053: FILE: security/evm/evm_main.c:163:
+	} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1055: FILE: security/evm/evm_main.c:165:
+			__FUNCTION__, fname, xattr_name, error);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1060: FILE: security/evm/evm_main.c:170:
+
+

WARNING:SIZEOF_PARENTHESIS: sizeof hmac_val should be sizeof(hmac_val)
#1071: FILE: security/evm/evm_main.c:181:
+	memset(hmac_val, 0, sizeof hmac_val);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1083: FILE: security/evm/evm_main.c:193:
+			dprintk(EVM_BASE, "%s: %s rc = %s\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#1088: FILE: security/evm/evm_main.c:198:
+			dprintk(EVM_CACHE, "%s: %s rc = %d not EOPNOTSUPP, "
+				"ENODATA or EPERM\n", __FUNCTION__, fname, rc);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1088: FILE: security/evm/evm_main.c:198:
+				"ENODATA or EPERM\n", __FUNCTION__, fname, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1094: FILE: security/evm/evm_main.c:204:
+			__FUNCTION__, fname);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1102: FILE: security/evm/evm_main.c:212:
+ *  ^Iintegrity_verify_metadata()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1103: FILE: security/evm/evm_main.c:213:
+ *  ^Iintegrity_verify_data()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1104: FILE: security/evm/evm_main.c:214:
+ *  ^Iintegrity_measure()$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1122: FILE: security/evm/evm_main.c:232:
+			dprintk(EVM_CACHE, "%s: %s -ENODATA \n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1123: FILE: security/evm/evm_main.c:233:
+				__FUNCTION__, dentry->d_name.name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1135: FILE: security/evm/evm_main.c:245:
+	if (!evm_initialized)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1137: FILE: security/evm/evm_main.c:247:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iint->mtime.tv_sec != 0'
#1140: FILE: security/evm/evm_main.c:250:
+		if (!iint->initialized &&
+			((iint->mtime.tv_sec != 0) || S_ISDIR(inode->i_mode)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1141: FILE: security/evm/evm_main.c:251:
+		if (!iint->initialized &&
+			((iint->mtime.tv_sec != 0) || S_ISDIR(inode->i_mode)))

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1154: FILE: security/evm/evm_main.c:264:
+	const char hexchars[] = "0123456789abcdef";

CHECK:BRACES: braces {} should be used on all arms of this statement
#1177: FILE: security/evm/evm_main.c:287:
+	if (rc < 0) {
[...]
+	} else
[...]

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1181: FILE: security/evm/evm_main.c:291:
+			dprintk(EVM_CACHE, "%s: %s -EOPNOTSUPP \n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1182: FILE: security/evm/evm_main.c:292:
+				__FUNCTION__, dentry->d_name.name);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1186: FILE: security/evm/evm_main.c:296:
+			dprintk(EVM_CACHE, "%s: %s -ENODATA \n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1187: FILE: security/evm/evm_main.c:297:
+				__FUNCTION__, dentry->d_name.name);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1192: FILE: security/evm/evm_main.c:302:
+			dprintk(EVM_CACHE, "%s: %s -EINVAL \n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1193: FILE: security/evm/evm_main.c:303:
+				__FUNCTION__, dentry->d_name.name);

CHECK:BRACES: Unbalanced braces around else statement
#1196: FILE: security/evm/evm_main.c:306:
+	} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1200: FILE: security/evm/evm_main.c:310:
+		__FUNCTION__, dentry->d_name.name, rc);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1216: FILE: security/evm/evm_main.c:326:
+		dprintk(EVM_CACHE, "%s: %s no xattr \n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1217: FILE: security/evm/evm_main.c:327:
+			__FUNCTION__, dentry->d_name.name);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1235: FILE: security/evm/evm_main.c:345:
+
+	}

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1237: FILE: security/evm/evm_main.c:347:
+		__FUNCTION__, dentry->d_name.name, iint->hash_status);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == DEVFS_SUPER_MAGIC'
#1253: FILE: security/evm/evm_main.c:363:
+	if ((inode->i_sb->s_magic == DEVFS_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == PROC_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == SYSFS_MAGIC)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == PROC_SUPER_MAGIC'
#1253: FILE: security/evm/evm_main.c:363:
+	if ((inode->i_sb->s_magic == DEVFS_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == PROC_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == SYSFS_MAGIC)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == SYSFS_MAGIC'
#1253: FILE: security/evm/evm_main.c:363:
+	if ((inode->i_sb->s_magic == DEVFS_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == PROC_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == SYSFS_MAGIC)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_READ'
#1261: FILE: security/evm/evm_main.c:371:
+	if (S_ISREG(inode->i_mode)
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))
+	    && (mask != MAY_WRITE) && (mask != MAY_APPEND))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_EXEC'
#1261: FILE: security/evm/evm_main.c:371:
+	if (S_ISREG(inode->i_mode)
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))
+	    && (mask != MAY_WRITE) && (mask != MAY_APPEND))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask != MAY_WRITE'
#1261: FILE: security/evm/evm_main.c:371:
+	if (S_ISREG(inode->i_mode)
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))
+	    && (mask != MAY_WRITE) && (mask != MAY_APPEND))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask != MAY_APPEND'
#1261: FILE: security/evm/evm_main.c:371:
+	if (S_ISREG(inode->i_mode)
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))
+	    && (mask != MAY_WRITE) && (mask != MAY_APPEND))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1262: FILE: security/evm/evm_main.c:372:
+	if (S_ISREG(inode->i_mode)
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1263: FILE: security/evm/evm_main.c:373:
+	    && ((mask == MAY_READ) || (mask == MAY_EXEC))
+	    && (mask != MAY_WRITE) && (mask != MAY_APPEND))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1283: FILE: security/evm/evm_main.c:393:
+			__FUNCTION__, filename);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1297: FILE: security/evm/evm_main.c:407:
+			__FUNCTION__, filename);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1302: FILE: security/evm/evm_main.c:412:
+				__FUNCTION__, filename);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1316: FILE: security/evm/evm_main.c:426:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1328: FILE: security/evm/evm_main.c:438:
+static void evm_inode_init_hmac(struct inode *inode, struct inode *dir,
+			       char **name, void **value, size_t * len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1328: FILE: security/evm/evm_main.c:438:
+			       char **name, void **value, size_t * len)

WARNING:SIZEOF_PARENTHESIS: sizeof hmac_val should be sizeof(hmac_val)
#1349: FILE: security/evm/evm_main.c:459:
+	memset(hmac_val, 0, sizeof hmac_val);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1359: FILE: security/evm/evm_main.c:469:
+	return;
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1376: FILE: security/evm/evm_main.c:486:
+	int xattr_flags_len =XATTR_SECURITY_PREFIX_LEN + XATTR_FLAGS_SUFFIX_LEN;
 	                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1384: FILE: security/evm/evm_main.c:494:
+		printk(KERN_INFO "%s: name | value is null \n", __FUNCTION__);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1384: FILE: security/evm/evm_main.c:494:
+		printk(KERN_INFO "%s: name | value is null \n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1384: FILE: security/evm/evm_main.c:494:
+		printk(KERN_INFO "%s: name | value is null \n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1394: FILE: security/evm/evm_main.c:504:
+			if ((strncmp(name, XATTR_SECURITY_PREFIX,
+					XATTR_SECURITY_PREFIX_LEN) != 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1397: FILE: security/evm/evm_main.c:507:
+		} else if ((!capable(CAP_SYS_ADMIN))
+			 && (strncmp(name, xattr_evm, xattr_evm_len) == 0))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1413: FILE: security/evm/evm_main.c:523:
+	dprintk(EVM_XATTR, "%s: %s %s(%d - %s)\n", __FUNCTION__,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dentry->d_name.name'
#1415: FILE: security/evm/evm_main.c:525:
+		(!dentry->d_name.name) ? " " : (char *)dentry->d_name.
+		name, error == 0 ? "succeeded" : "failed", error, name);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1433: FILE: security/evm/evm_main.c:543:
+			struct evm_iint_cache *iint=inode->i_integrity;
 			                           ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1440: FILE: security/evm/evm_main.c:550:
+				__FUNCTION__, (!dentry->d_name.name)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1465: FILE: security/evm/evm_main.c:575:
+		dprintk(EVM_XATTR, "%s: dentry->d_inode or ->i_op is null \n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1466: FILE: security/evm/evm_main.c:576:
+			__FUNCTION__);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1471: FILE: security/evm/evm_main.c:581:
+		dprintk(EVM_XATTR, "%s: i_op->setxattr is null \n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1472: FILE: security/evm/evm_main.c:582:
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1518: FILE: security/evm/evm_main.c:628:
+				__FUNCTION__, dentry->d_name.name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1523: FILE: security/evm/evm_main.c:633:
+			__FUNCTION__, dentry->d_name.name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1528: FILE: security/evm/evm_main.c:638:
+	dprintk(EVM_CACHE, "%s: flags %d len %d %32s\n", __FUNCTION__,

WARNING:RETURN_VOID: void function return statements are not generally useful
#1534: FILE: security/evm/evm_main.c:644:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1591: FILE: security/evm/evm_main.c:701:
+	if ((file->f_mode & FMODE_WRITE) &&
+		(atomic_read(&inode->i_writecount) == 1)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1595: FILE: security/evm/evm_main.c:705:
+		if ((!timespec_equal(&iint->mtime, &inode->i_mtime))
+			|| timespec_recent(&iint->mtime)) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*iint)...) over kzalloc(sizeof(struct evm_iint_cache)...)
#1608: FILE: security/evm/evm_main.c:718:
+	iint = kzalloc(sizeof(struct evm_iint_cache), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required before the open brace '{'
#1633: FILE: security/evm/evm_main.c:743:
+	if (iint){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iint->mtime.tv_sec != 0'
#1695: FILE: security/evm/evm_main.c:805:
+		if ((iint->mtime.tv_sec != 0) || S_ISDIR(inode->i_mode))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1755: FILE: security/evm/evm_main.c:865:
+	if (evm_install) {
[...]
+	} else
[...]

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1758: FILE: security/evm/evm_main.c:868:
+			__FUNCTION__);

CHECK:BRACES: Unbalanced braces around else statement
#1759: FILE: security/evm/evm_main.c:869:
+	} else

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1765: FILE: security/evm/evm_main.c:875:
+	if (evm_install) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1767: FILE: security/evm/evm_main.c:877:
+	} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1788: FILE: security/evm/evm_main.c:898:
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1793: FILE: security/evm/evm_main.c:903:
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1808: FILE: security/evm/evm_main.c:918:
+	dprintk(EVM_BASE, "%s: %s completed\n", __FUNCTION__,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1839: FILE: fs/namei.c:2621:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1842: FILE: fs/namei.c:2624:
+	nd.depth = 0;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1843: FILE: fs/namei.c:2625:
+	cookie = dentry->d_inode->i_op->follow_link(dentry, &nd);
 	                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1847: FILE: fs/namei.c:2629:
+		link = nd_get_link(&nd);
 		                    ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buffer"
#1851: FILE: fs/namei.c:2633:
+		*buflen = (*buffer == NULL) ? 0 : strlen(*buffer);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1853: FILE: fs/namei.c:2635:
+			dentry->d_inode->i_op->put_link(dentry, &nd, cookie);
 			                                         ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000458692.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 129 warnings, 66 checks, 1761 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000458692.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
