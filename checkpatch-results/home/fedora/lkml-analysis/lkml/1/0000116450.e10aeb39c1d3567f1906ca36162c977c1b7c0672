WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#49: FILE: drivers/char/Kconfig:100:
+config BFIN_JTAG_COMM
+	tristate "Blackfin JTAG Communication"
+	depends on BLACKFIN
+	help
+	  Add support for emulating a TTY device over the Blackfin JTAG.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called bfin_jtag_comm.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#58: FILE: drivers/char/Kconfig:109:
+config BFIN_JTAG_COMM_CONSOLE
+	bool "Console on Blackfin JTAG"
+	depends on BFIN_JTAG_COMM=y
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: drivers/char/bfin_jtag_comm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#109: FILE: drivers/char/bfin_jtag_comm.c:27:
+#include <asm/atomic.h>

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#111: FILE: drivers/char/bfin_jtag_comm.c:29:
+#define pr_init(fmt, args...) ({ static const __initconst char __fmt[] = fmt; printk(__fmt, ## args); })

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#111: FILE: drivers/char/bfin_jtag_comm.c:29:
+#define pr_init(fmt, args...) ({ static const __initconst char __fmt[] = fmt; printk(__fmt, ## args); })

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#127: FILE: drivers/char/bfin_jtag_comm.c:45:
+	uint32_t emudat;

WARNING:LINE_SPACING: Missing a blank line after declarations
#128: FILE: drivers/char/bfin_jtag_comm.c:46:
+	uint32_t emudat;
+	__asm__ __volatile__("%0 = emudat;" : "=d"(emudat));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'circ' - possible side-effects?
#139: FILE: drivers/char/bfin_jtag_comm.c:57:
+#define circ_empty(circ)     ((circ)->head == (circ)->tail)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'circ' - possible side-effects?
#140: FILE: drivers/char/bfin_jtag_comm.c:58:
+#define circ_free(circ)      CIRC_SPACE((circ)->head, (circ)->tail, CIRC_SIZE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'circ' - possible side-effects?
#141: FILE: drivers/char/bfin_jtag_comm.c:59:
+#define circ_cnt(circ)       CIRC_CNT((circ)->head, (circ)->tail, CIRC_SIZE)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#146: FILE: drivers/char/bfin_jtag_comm.c:64:
+static struct tty_struct * volatile bfin_jc_tty;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#149: FILE: drivers/char/bfin_jtag_comm.c:67:
+static volatile struct circ_buf bfin_jc_write_buf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#154: FILE: drivers/char/bfin_jtag_comm.c:72:
+	uint32_t inbound_len = 0, outbound_len = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfin_jc_tty"
#158: FILE: drivers/char/bfin_jtag_comm.c:76:
+		if (bfin_jc_tty == NULL && circ_empty(&bfin_jc_write_buf)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: drivers/char/bfin_jtag_comm.c:86:
+			pr_debug("waiting for data (in_len = %i) (circ: %i %i)\n",
+				inbound_len, bfin_jc_write_buf.tail, bfin_jc_write_buf.head);

WARNING:LINE_SPACING: Missing a blank line after declarations
#179: FILE: drivers/char/bfin_jtag_comm.c:97:
+			struct tty_struct *tty;
+			mutex_lock(&bfin_jc_tty_mutex);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tty"
#181: FILE: drivers/char/bfin_jtag_comm.c:99:
+			if (tty != NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#182: FILE: drivers/char/bfin_jtag_comm.c:100:
+				uint32_t emudat = bfin_read_emudat();

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: drivers/char/bfin_jtag_comm.c:101:
+				uint32_t emudat = bfin_read_emudat();
+				if (inbound_len == 0) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#187: FILE: drivers/char/bfin_jtag_comm.c:105:
+					size_t num_chars = (4 <= inbound_len ? 4 : inbound_len);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#188: FILE: drivers/char/bfin_jtag_comm.c:106:
+					pr_debug("  incoming data: 0x%08x (pushing %zu)\n", emudat, num_chars);

WARNING:LINE_SPACING: Missing a blank line after declarations
#188: FILE: drivers/char/bfin_jtag_comm.c:106:
+					size_t num_chars = (4 <= inbound_len ? 4 : inbound_len);
+					pr_debug("  incoming data: 0x%08x (pushing %zu)\n", emudat, num_chars);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#190: FILE: drivers/char/bfin_jtag_comm.c:108:
+					tty_insert_flip_string(tty, (unsigned char *)&emudat, num_chars);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#206: FILE: drivers/char/bfin_jtag_comm.c:124:
+				size_t ate = (4 <= outbound_len ? 4 : outbound_len);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#207: FILE: drivers/char/bfin_jtag_comm.c:125:
+				uint32_t emudat =

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#208: FILE: drivers/char/bfin_jtag_comm.c:126:
+				bfin_write_emudat_chars(

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#231: FILE: drivers/char/bfin_jtag_comm.c:149:
+bfin_jc_open(struct tty_struct *tty, struct file *filp)
                                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#243: FILE: drivers/char/bfin_jtag_comm.c:161:
+bfin_jc_close(struct tty_struct *tty, struct file *filp)
                                                    ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#258: FILE: drivers/char/bfin_jtag_comm.c:176:
+	int i;
+	count = min(count, circ_free(&bfin_jc_write_buf));

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: drivers/char/bfin_jtag_comm.c:192:
+	int i;
+	acquire_console_sem();

WARNING:LINE_SPACING: Missing a blank line after declarations
#303: FILE: drivers/char/bfin_jtag_comm.c:221:
+	unsigned long expire = jiffies + timeout;
+	while (!circ_empty(&bfin_jc_write_buf)) {

WARNING:CONST_STRUCT: struct tty_operations should normally be const
#311: FILE: drivers/char/bfin_jtag_comm.c:229:
+static struct tty_operations bfin_jc_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#332: FILE: drivers/char/bfin_jtag_comm.c:250:
+	bfin_jc_write_buf.head = bfin_jc_write_buf.tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#376: FILE: drivers/char/bfin_jtag_comm.c:294:
+bfin_jc_straight_buffer_write(const char *buf, unsigned count)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#378: FILE: drivers/char/bfin_jtag_comm.c:296:
+	unsigned ate = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#379: FILE: drivers/char/bfin_jtag_comm.c:297:
+	unsigned ate = 0;
+	while (bfin_read_DBGSTAT() & EMUDOF)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#385: FILE: drivers/char/bfin_jtag_comm.c:303:
+		bfin_write_emudat_chars(buf[ate], buf[ate+1], buf[ate+2], buf[ate+3]);
 		                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#385: FILE: drivers/char/bfin_jtag_comm.c:303:
+		bfin_write_emudat_chars(buf[ate], buf[ate+1], buf[ate+2], buf[ate+3]);
 		                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#385: FILE: drivers/char/bfin_jtag_comm.c:303:
+		bfin_write_emudat_chars(buf[ate], buf[ate+1], buf[ate+2], buf[ate+3]);
 		                                                                 ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#393: FILE: drivers/char/bfin_jtag_comm.c:311:
+bfin_jc_console_write(struct console *co, const char *buf, unsigned count)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfin_jc_kthread"
#395: FILE: drivers/char/bfin_jtag_comm.c:313:
+	if (bfin_jc_kthread == NULL)

ERROR:MISPLACED_INIT: __initdata should be placed after bfin_jc_early_console
#431: FILE: drivers/char/bfin_jtag_comm.c:349:
+static struct __initdata console bfin_jc_early_console = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000116450.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 27 warnings, 16 checks, 391 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000116450.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
