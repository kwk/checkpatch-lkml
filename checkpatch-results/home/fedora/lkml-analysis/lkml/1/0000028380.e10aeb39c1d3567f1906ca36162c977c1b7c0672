WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
> > Right, so acquiring the PTE lock will either instantiate page tables for

WARNING:REPEATED_WORD: Possible repeated word: 'really'
#47: 
> > [ To make live really really interesting you could even re-use the

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: arch/x86/mm/fault.c:1045:
+		fault = handle_speculative_fault(mm, address,
+				error_code & PF_WRITE ? FAULT_FLAG_WRITE : 0);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#186: FILE: include/linux/mm.h:771:
+	unsigned seq = vma->vm_sequence.sequence;

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: include/linux/mm.h:772:
+	unsigned seq = vma->vm_sequence.sequence;
+	smp_rmb();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#187: FILE: include/linux/mm.h:772:
+	smp_rmb();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#198: FILE: include/linux/mm.h:832:
+extern int handle_speculative_fault(struct mm_struct *mm,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: include/linux/mm.h:833:
+extern int handle_speculative_fault(struct mm_struct *mm,
+			unsigned long address, unsigned int flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: mm/memory.c:1961:
+static int pte_map_lock(struct mm_struct *mm, struct vm_area_struct *vma,
+		unsigned long address, pmd_t *pmd, unsigned int flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: mm/memory.c:2061:
+			if (!pte_map_lock(mm, vma, address, pmd, flags, seq,
+						&page_table, &ptl)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: mm/memory.c:2127:
+			if (!pte_map_lock(mm, vma, address, pmd, flags, seq,
+						&page_table, &ptl)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: mm/memory.c:2591:
+			if (!pte_map_lock(mm, vma, address, pmd, flags, seq,
+						&page_table, &ptl)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: mm/memory.c:2717:
+		if (!pte_map_lock(mm, vma, address, pmd, flags, seq,
+					&page_table, &ptl))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#813: FILE: mm/memory.c:3108:
+int handle_speculative_fault(struct mm_struct *mm, unsigned long address,
+		unsigned int flags)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#817: FILE: mm/memory.c:3112:
+	spinlock_t *ptl;

WARNING:MEMORY_BARRIER: memory barrier without comment
#838: FILE: mm/memory.c:3133:
+	smp_rmb();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#858: FILE: mm/memory.c:3153:
 
+

WARNING:MEMORY_BARRIER: memory barrier without comment
#899: FILE: mm/mmap.c:504:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#945: FILE: mm/mmap.c:1836:
+		smp_wmb();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000028380.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 11 checks, 775 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000028380.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
