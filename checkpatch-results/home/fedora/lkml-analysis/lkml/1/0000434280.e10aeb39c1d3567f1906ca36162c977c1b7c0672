WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
 (5) Be consistent about the presentation of volume ID:vnode ID in debugging

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#380: FILE: fs/afs/fsclient.c:278:
+			case 0:		break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#427: FILE: fs/afs/inode.c:215:
+	 * written back */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: fs/afs/inode.c:293:
+int afs_getattr(struct vfsmount *mnt, struct dentry *dentry,
 		      struct kstat *stat)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#485: FILE: fs/afs/internal.h:473:
+extern void afs_zap_data(struct afs_vnode *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#485: FILE: fs/afs/internal.h:473:
+extern void afs_zap_data(struct afs_vnode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#490: FILE: fs/afs/internal.h:475:
+extern int afs_getattr(struct vfsmount *, struct dentry *, struct kstat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#490: FILE: fs/afs/internal.h:475:
+extern int afs_getattr(struct vfsmount *, struct dentry *, struct kstat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#490: FILE: fs/afs/internal.h:475:
+extern int afs_getattr(struct vfsmount *, struct dentry *, struct kstat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kstat *' should also have an identifier name
#490: FILE: fs/afs/internal.h:475:
+extern int afs_getattr(struct vfsmount *, struct dentry *, struct kstat *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#498: FILE: fs/afs/internal.h:531:
+extern void afs_zap_permits(struct rcu_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rcu_head *' should also have an identifier name
#498: FILE: fs/afs/internal.h:531:
+extern void afs_zap_permits(struct rcu_head *);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'L' - possible side-effects?
#506: FILE: fs/afs/internal.h:726:
+#define ASSERTRANGE(L, OP1, N, OP2, H)					\
+do {									\
+	if (unlikely(!((L) OP1 (N)) || !((N) OP2 (H)))) {		\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "AFS: Assertion failed\n");		\
+		printk(KERN_ERR "%lu "#OP1" %lu "#OP2" %lu is false\n",	\
+		       (unsigned long)(L), (unsigned long)(N),		\
+		       (unsigned long)(H));				\
+		printk(KERN_ERR "0x%lx "#OP1" 0x%lx "#OP2" 0x%lx is false\n", \
+		       (unsigned long)(L), (unsigned long)(N),		\
+		       (unsigned long)(H));				\
+		BUG();							\
+	}								\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'N' - possible side-effects?
#506: FILE: fs/afs/internal.h:726:
+#define ASSERTRANGE(L, OP1, N, OP2, H)					\
+do {									\
+	if (unlikely(!((L) OP1 (N)) || !((N) OP2 (H)))) {		\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "AFS: Assertion failed\n");		\
+		printk(KERN_ERR "%lu "#OP1" %lu "#OP2" %lu is false\n",	\
+		       (unsigned long)(L), (unsigned long)(N),		\
+		       (unsigned long)(H));				\
+		printk(KERN_ERR "0x%lx "#OP1" 0x%lx "#OP2" 0x%lx is false\n", \
+		       (unsigned long)(L), (unsigned long)(N),		\
+		       (unsigned long)(H));				\
+		BUG();							\
+	}								\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'H' - possible side-effects?
#506: FILE: fs/afs/internal.h:726:
+#define ASSERTRANGE(L, OP1, N, OP2, H)					\
+do {									\
+	if (unlikely(!((L) OP1 (N)) || !((N) OP2 (H)))) {		\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "AFS: Assertion failed\n");		\
+		printk(KERN_ERR "%lu "#OP1" %lu "#OP2" %lu is false\n",	\
+		       (unsigned long)(L), (unsigned long)(N),		\
+		       (unsigned long)(H));				\
+		printk(KERN_ERR "0x%lx "#OP1" 0x%lx "#OP2" 0x%lx is false\n", \
+		       (unsigned long)(L), (unsigned long)(N),		\
+		       (unsigned long)(H));				\
+		BUG();							\
+	}								\
+} while(0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#508: FILE: fs/afs/internal.h:728:
+	if (unlikely(!((L) OP1 (N)) || !((N) OP2 (H)))) {		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#508: FILE: fs/afs/internal.h:728:
+	if (unlikely(!((L) OP1 (N)) || !((N) OP2 (H)))) {		\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#509: FILE: fs/afs/internal.h:729:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#510: FILE: fs/afs/internal.h:730:
+		printk(KERN_ERR "AFS: Assertion failed\n");		\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#511: FILE: fs/afs/internal.h:731:
+		printk(KERN_ERR "%lu "#OP1" %lu "#OP2" %lu is false\n",	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#511: FILE: fs/afs/internal.h:731:
+		printk(KERN_ERR "%lu "#OP1" %lu "#OP2" %lu is false\n",	\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#514: FILE: fs/afs/internal.h:734:
+		printk(KERN_ERR "0x%lx "#OP1" 0x%lx "#OP2" 0x%lx is false\n", \

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#514: FILE: fs/afs/internal.h:734:
+		printk(KERN_ERR "0x%lx "#OP1" 0x%lx "#OP2" 0x%lx is false\n", \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#517: FILE: fs/afs/internal.h:737:
+		BUG();							\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#519: FILE: fs/afs/internal.h:739:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#530: FILE: fs/afs/internal.h:775:
+} while(0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434280.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 14 warnings, 9 checks, 559 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434280.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
