CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#281: FILE: mm/allocpercpu.c:157:
+		new = krealloc(pcpu_size, sizeof(new[0])*pcpu_num_allocated*2,
 		                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#281: FILE: mm/allocpercpu.c:157:
+		new = krealloc(pcpu_size, sizeof(new[0])*pcpu_num_allocated*2,
 		                                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#291: FILE: mm/allocpercpu.c:167:
+	memmove(&pcpu_size[i+1], &pcpu_size[i],
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#295: FILE: mm/allocpercpu.c:171:
+	pcpu_size[i+1] -= size;
 	           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#320: FILE: mm/allocpercpu.c:196:
+		BUG_ON(i == 0 && extra != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#326: FILE: mm/allocpercpu.c:202:
+		if (pcpu_size[i-1] < 0)
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#327: FILE: mm/allocpercpu.c:203:
+			pcpu_size[i-1] -= extra;
 			           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#329: FILE: mm/allocpercpu.c:205:
+			pcpu_size[i-1] += extra;
 			           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#347: FILE: mm/allocpercpu.c:223:
+	printk(KERN_WARNING "Could not allocate %lu bytes percpu data\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#367: FILE: mm/allocpercpu.c:243:
+	BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#371: FILE: mm/allocpercpu.c:247:
+	if (pcpu_size[i-1] >= 0) {
 	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#372: FILE: mm/allocpercpu.c:248:
+		pcpu_size[i-1] += pcpu_size[i];
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#374: FILE: mm/allocpercpu.c:250:
+		memmove(&pcpu_size[i], &pcpu_size[i+1],
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: mm/allocpercpu.c:255:
+	if (i+1 < pcpu_num_used && pcpu_size[i+1] >= 0) {
 	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: mm/allocpercpu.c:255:
+	if (i+1 < pcpu_num_used && pcpu_size[i+1] >= 0) {
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#380: FILE: mm/allocpercpu.c:256:
+		pcpu_size[i] += pcpu_size[i+1];
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#382: FILE: mm/allocpercpu.c:258:
+		memmove(&pcpu_size[i+1], &pcpu_size[i+2],
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#382: FILE: mm/allocpercpu.c:258:
+		memmove(&pcpu_size[i+1], &pcpu_size[i+2],
 		                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#383: FILE: mm/allocpercpu.c:259:
+			(pcpu_num_used - (i+1)) * sizeof(pcpu_size[0]));
 			                   ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#391: FILE: mm/allocpercpu.c:267:
+	pcpu_size = kmalloc(sizeof(pcpu_size[0]) * pcpu_num_allocated,
+			    GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#394: FILE: mm/allocpercpu.c:270:
+	pcpu_size[0] = -(__per_cpu_end-__per_cpu_start);
 	                              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#397: FILE: mm/allocpercpu.c:273:
+	BUG_ON(pcpu_size[1] < 0);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000203099.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 17 checks, 343 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000203099.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
