WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   miss      hit    %        Function                  File              Line

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#90: FILE: include/asm-generic/vmlinux.lds.h:83:
+^ILIKELY_PROFILE()^I^I       ^I^I^I^I\$

ERROR:SPACING: space required before the open parenthesis '('
#128: FILE: include/linux/compiler.h:120:
+#define if(cond) if (__builtin_constant_p((cond)) ? !!(cond) :		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#128: FILE: include/linux/compiler.h:120:
+#define if(cond) if (__builtin_constant_p((cond)) ? !!(cond) :		\
+	({								\
+		int ______r;						\
+		static struct ftrace_branch_data			\
+			__attribute__((__aligned__(4)))			\
+			__attribute__((section("_ftrace_branch")))	\
+			______f = {					\
+				.func = __func__,			\
+				.file = __FILE__,			\
+				.line = __LINE__,			\
+			};						\
+		______r = !!(cond);					\
+		if (______r)						\
+			______f.hit++;					\
+		else							\
+			______f.miss++;					\
+		______r;						\
+	}))

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cond' - possible side-effects?
#128: FILE: include/linux/compiler.h:120:
+#define if(cond) if (__builtin_constant_p((cond)) ? !!(cond) :		\
+	({								\
+		int ______r;						\
+		static struct ftrace_branch_data			\
+			__attribute__((__aligned__(4)))			\
+			__attribute__((section("_ftrace_branch")))	\
+			______f = {					\
+				.func = __func__,			\
+				.file = __FILE__,			\
+				.line = __LINE__,			\
+			};						\
+		______r = !!(cond);					\
+		if (______r)						\
+			______f.hit++;					\
+		else							\
+			______f.miss++;					\
+		______r;						\
+	}))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#132: FILE: include/linux/compiler.h:124:
+			__attribute__((__aligned__(4)))			\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_branch") over __attribute__((section("_ftrace_branch")))
#133: FILE: include/linux/compiler.h:125:
+			__attribute__((section("_ftrace_branch")))	\

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#203: FILE: kernel/trace/trace_branch.c:234:
+			seq_printf(m, "   miss      hit    %% ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#205: FILE: kernel/trace/trace_branch.c:236:
+			seq_printf(m, " correct incorrect  %% ");

WARNING:TYPO_SPELLING: 'overlayed' may be misspelled - perhaps 'overlaid'?
#215: FILE: kernel/trace/trace_branch.c:252:
+	 * The miss is overlayed on correct, and hit on incorrect.
 	               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#226: FILE: kernel/trace/trace_branch.c:297:
+extern unsigned long __stop_branch_profile[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPLIT_STRING: quoted string split across lines
#249: FILE: kernel/trace/trace_branch.c:335:
+		pr_warning("Could not create debugfs"
+			   " 'profile_branch' entry\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000201364.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 9 warnings, 1 checks, 163 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000201364.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
