CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: fs/ext4/ext4.h:1071:
+int ext4_get_block(struct inode *inode, sector_t iblock,
+				struct buffer_head *bh_result, int create);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: fs/ext4/ext4_extents.h:240:
+extern int ext4_ext_walk_space(struct inode *, ext4_lblk_t, ext4_lblk_t,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#126: FILE: fs/ext4/ext4_extents.h:240:
+extern int ext4_ext_walk_space(struct inode *, ext4_lblk_t, ext4_lblk_t,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_lblk_t' should also have an identifier name
#126: FILE: fs/ext4/ext4_extents.h:240:
+extern int ext4_ext_walk_space(struct inode *, ext4_lblk_t, ext4_lblk_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_lblk_t' should also have an identifier name
#126: FILE: fs/ext4/ext4_extents.h:240:
+extern int ext4_ext_walk_space(struct inode *, ext4_lblk_t, ext4_lblk_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext_prepare_callback' should also have an identifier name
#126: FILE: fs/ext4/ext4_extents.h:240:
+extern int ext4_ext_walk_space(struct inode *, ext4_lblk_t, ext4_lblk_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#126: FILE: fs/ext4/ext4_extents.h:240:
+extern int ext4_ext_walk_space(struct inode *, ext4_lblk_t, ext4_lblk_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: fs/ext4/ext4_extents.h:241:
+extern int ext4_ext_walk_space(struct inode *, ext4_lblk_t, ext4_lblk_t,
+							ext_prepare_callback, void *);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#158: FILE: fs/ext4/extents.c:1641:
+	BUG_ON(func == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!func"
#158: FILE: fs/ext4/extents.c:1641:
+	BUG_ON(func == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#159: FILE: fs/ext4/extents.c:1642:
+	BUG_ON(inode == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#159: FILE: fs/ext4/extents.c:1642:
+	BUG_ON(inode == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#172: FILE: fs/ext4/extents.c:1655:
+		BUG_ON(path[depth].p_hdr == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path[depth].p_hdr"
#172: FILE: fs/ext4/extents.c:1655:
+		BUG_ON(path[depth].p_hdr == NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#179: FILE: fs/ext4/extents.c:1662:
+			 * all requested space */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: fs/ext4/extents.c:1690:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#209: FILE: fs/ext4/extents.c:1692:
+		BUG_ON(end <= start);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#223: FILE: fs/ext4/extents.c:1706:
+		BUG_ON(cbex.ec_len == 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#230: FILE: fs/ext4/extents.c:1713:
+		if (err == EXT_REPEAT)
[...]
+		else if (err == EXT_BREAK) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#332: FILE: fs/ext4/extents.c:3153:
+#define EXT4_FIEMAP_FLAGS	(FIEMAP_FLAG_SYNC|FIEMAP_FLAG_XATTR)
                          	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: fs/ext4/extents.c:3215:
+		error = ext4_ext_walk_space(inode, start_blk, len_blks,
+					  ext4_ext_fiemap_cb, fieinfo);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: fs/ext4/file.c:144:
+extern int ext4_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo,
+		__u64 start, __u64 len);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000219311.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 10 checks, 323 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000219311.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
