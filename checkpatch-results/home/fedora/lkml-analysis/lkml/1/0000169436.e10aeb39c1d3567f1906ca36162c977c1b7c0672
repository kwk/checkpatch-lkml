WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#59: FILE: MAINTAINERS:2247:
+P:	Eric Paris
+M:	eparis@parisplace.org

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#120: FILE: fs/notify/inotify/inotify.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: fs/notify/inotify/inotify.h:101:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#221: FILE: fs/notify/inotify/inotify.h:102:
+int find_inode(const char __user *dirname, struct path *path, unsigned flags);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#234: FILE: fs/notify/inotify/inotify_fsnotify.c:1:
+/*

WARNING:TYPO_SPELLING: 'rewriten' may be misspelled - perhaps 'rewritten'?
#245: FILE: fs/notify/inotify/inotify_fsnotify.c:12:
+ * inotify was largely rewriten to make use of the fsnotify infrastructure
                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#310: FILE: fs/notify/inotify/inotify_fsnotify.c:77:
+	return fsnotify_add_notif_event(group, event, (struct fsnotify_event_private_data *)event_priv);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#313: FILE: fs/notify/inotify/inotify_fsnotify.c:80:
+static void inotify_mark_clear_inode(struct fsnotify_mark_entry *entry, struct inode *inode, unsigned int flags)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flags != FSNOTIFY_LAST_DENTRY'
#315: FILE: fs/notify/inotify/inotify_fsnotify.c:82:
+	if (unlikely((flags != FSNOTIFY_LAST_DENTRY) && (flags != FSNOTIFY_INODE_DESTROY))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flags != FSNOTIFY_INODE_DESTROY'
#315: FILE: fs/notify/inotify/inotify_fsnotify.c:82:
+	if (unlikely((flags != FSNOTIFY_LAST_DENTRY) && (flags != FSNOTIFY_INODE_DESTROY))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#316: FILE: fs/notify/inotify/inotify_fsnotify.c:83:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#362: FILE: fs/notify/inotify/inotify_fsnotify.c:129:
+	BUG();

WARNING:TYPO_SPELLING: 'teh' may be misspelled - perhaps 'the'?
#368: FILE: fs/notify/inotify/inotify_fsnotify.c:135:
+	/* ideally the idr is empty and we won't hit the BUG in teh callback */
 	                                                        ^^^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#386: FILE: fs/notify/inotify/inotify_fsnotify.c:153:
+	event_priv = (struct inotify_event_private_data *)fsnotify_get_priv_from_event(group, event);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#387: FILE: fs/notify/inotify/inotify_fsnotify.c:154:
+	BUG_ON(!event_priv);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#416: FILE: fs/notify/inotify/inotify_kernel.c:1:
+/*

WARNING:TYPO_SPELLING: 'rewriten' may be misspelled - perhaps 'rewritten'?
#427: FILE: fs/notify/inotify/inotify_kernel.c:12:
+ * inotify was largely rewriten to make use of the fsnotify infrastructure
                        ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#471: FILE: fs/notify/inotify/inotify_kernel.c:56:
+int find_inode(const char __user *dirname, struct path *path, unsigned flags)

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#487: FILE: fs/notify/inotify/inotify_kernel.c:72:
+	struct inotify_inode_mark_entry *ientry = container_of(entry, struct inotify_inode_mark_entry, fsn_entry);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#501: FILE: fs/notify/inotify/inotify_kernel.c:86:
+	 * and it's going to block on entry->lock */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#545: FILE: fs/notify/inotify/inotify_kernel.c:130:
+		if (atomic_read(&group->inotify_data.user->inotify_watches) >= inotify_max_user_watches) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#565: FILE: fs/notify/inotify/inotify_kernel.c:150:
+		 * when entry is removed from idr */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#624: FILE: fs/notify/inotify/inotify_kernel.c:209:
+	/* fsnotify_obtain_group took a reference to group, we put this when we kill the file in the end */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: fs/notify/inotify/inotify_kernel.c:229:
+	inotify_inode_mark_cachep = kmem_cache_create("inotify_mark_entry",
+					sizeof(struct inotify_inode_mark_entry),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: fs/notify/inotify/inotify_kernel.c:232:
+	event_priv_cachep = kmem_cache_create("inotify_event_priv_cache",
+					sizeof(struct inotify_event_private_data),

WARNING:TYPO_SPELLING: 'rewriten' may be misspelled - perhaps 'rewritten'?
#661: FILE: fs/notify/inotify/inotify_user.c:12:
+ * inotify was largely rewriten to make use of the fsnotify infrastructure
                        ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1087: FILE: fs/notify/inotify/inotify_user.c:137:
+	 * same event we peeked above */

CHECK:SPACING: No space is necessary after a cast
#1274: FILE: fs/notify/inotify/inotify_user.c:307:
+		ret = put_user(send_len, (int __user *) p);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1316: FILE: fs/notify/inotify/inotify_user.c:355:
+	/* fsnotify_obtain_group took a reference to group, we put this when we kill the file in the end */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1445: FILE: fs/notify/inotify/inotify_user.c:480:
+    .name^I= "inotifyfs",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1446: FILE: fs/notify/inotify/inotify_user.c:481:
+    .get_sb^I= inotify_get_sb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1447: FILE: fs/notify/inotify/inotify_user.c:482:
+    .kill_sb^I= kill_anon_super,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1498: FILE: fs/notify/notification.c:152:
+^Iif (group->q_len >= group->max_events) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1510: FILE: fs/notify/notification.c:164:
+		 * was in use */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1647: FILE: include/linux/fsnotify_backend.h:84:
+#define INOTIFY_GROUP_NUM	(DNOTIFY_GROUP_NUM-1)
                          	                  ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1657: FILE: include/linux/fsnotify_backend.h:125:
+			spinlock_t	idr_lock;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169436.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 27 warnings, 8 checks, 1541 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169436.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
