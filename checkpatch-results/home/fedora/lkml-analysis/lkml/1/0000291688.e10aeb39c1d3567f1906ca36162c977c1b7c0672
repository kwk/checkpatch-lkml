CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: include/linux/trace.h:119:
+int trace_exists(const char *parent_dir, const char *dir,
+					struct trace_info **ti);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: include/linux/trace.h:123:
+int debugfs_dump(struct debugfs_printk_data *dpk, const void *output,
+							const int output_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: include/linux/trace.h:136:
+static inline int trace_exists(const char *parent_dir, const char *dir,
+				struct trace_info **ti)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#163: FILE: include/linux/trace.h:140:
+}
+static inline void trace_cleanup_all(const char *parent_dir) {}

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: include/linux/trace.h:142:
+static inline int debugfs_printk(struct debugfs_printk_data *dpk, char *format,
+				...)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#169: FILE: include/linux/trace.h:146:
+}
+int debugfs_dump(struct debugfs_printk_data *dpk, const void *output,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: include/linux/trace.h:147:
+int debugfs_dump(struct debugfs_printk_data *dpk, const void *output,
+							const int output_len)

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: lib/trace.c:114:
+ ^I^I^Ikfree(dr);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#206: FILE: lib/trace.c:114:
+ ^I^I^Ikfree(dr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: lib/trace.c:114:
+ ^I^I^Ikfree(dr);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*temp)...) over kzalloc(sizeof(struct trace_dir)...)
#222: FILE: lib/trace.c:162:
+	temp = kzalloc(sizeof(struct trace_dir), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#237: FILE: lib/trace.c:176:
+	if (IS_ERR(temp->trace_dir))
[...]
-	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#240: FILE: lib/trace.c:178:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: lib/trace.c:190:
+int trace_exists(const char *parent_dir, const char *dir,
+					struct trace_info **ti)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: lib/trace.c:634:
+static int trace_printf(struct trace_info *trace, const char *format,
+								va_list ap)

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: lib/trace.c:653:
+                        ^I^I^Idebugfs_printk_data *dpk)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#327: FILE: lib/trace.c:653:
+                        ^I^I^Idebugfs_printk_data *dpk)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: lib/trace.c:653:
+                        ^I^I^Idebugfs_printk_data *dpk)$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#327: FILE: lib/trace.c:653:
+                        			debugfs_printk_data *dpk)
                         			                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: lib/trace.c:655:
+        struct trace_info *ti;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: lib/trace.c:655:
+        struct trace_info *ti;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: lib/trace.c:657:
+        dpk->exists = trace_exists(dpk->parent_dir, dpk->dir, &ti);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: lib/trace.c:657:
+        dpk->exists = trace_exists(dpk->parent_dir, dpk->dir, &ti);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: lib/trace.c:659:
+        switch(dpk->exists) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: lib/trace.c:659:
+        switch(dpk->exists) {$

ERROR:SPACING: space required before the open parenthesis '('
#333: FILE: lib/trace.c:659:
+        switch(dpk->exists) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#334: FILE: lib/trace.c:660:
+        switch(dpk->exists) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: lib/trace.c:661:
+        case TRACE_PARENT_DIR_EXISTS:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: lib/trace.c:661:
+        case TRACE_PARENT_DIR_EXISTS:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: lib/trace.c:662:
+        case TRACE_PARENT_DIR_ABSENT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: lib/trace.c:662:
+        case TRACE_PARENT_DIR_ABSENT:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: lib/trace.c:663:
+                if(!dpk->buf_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: lib/trace.c:663:
+                if(!dpk->buf_size)$

ERROR:SPACING: space required before the open parenthesis '('
#337: FILE: lib/trace.c:663:
+                if(!dpk->buf_size)

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: lib/trace.c:664:
+                        dpk->buf_size = DEFAULT_TRACE_BUF_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: lib/trace.c:664:
+                        dpk->buf_size = DEFAULT_TRACE_BUF_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: lib/trace.c:665:
+                if(!dpk->sub_buf_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: lib/trace.c:665:
+                if(!dpk->sub_buf_size)$

ERROR:SPACING: space required before the open parenthesis '('
#339: FILE: lib/trace.c:665:
+                if(!dpk->sub_buf_size)

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: lib/trace.c:666:
+                        dpk->sub_buf_size = DEFAULT_TRACE_SUB_BUF_NR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: lib/trace.c:666:
+                        dpk->sub_buf_size = DEFAULT_TRACE_SUB_BUF_NR;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: lib/trace.c:667:
+                if(!dpk->flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: lib/trace.c:667:
+                if(!dpk->flags)$

ERROR:SPACING: space required before the open parenthesis '('
#341: FILE: lib/trace.c:667:
+                if(!dpk->flags)

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: lib/trace.c:669:
+                ti = trace_setup(dpk->parent_dir, dpk->dir,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: lib/trace.c:669:
+                ti = trace_setup(dpk->parent_dir, dpk->dir,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: lib/trace.c:670:
+                        dpk->buf_size, dpk->sub_buf_size, dpk->flags);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: lib/trace.c:670:
+                ti = trace_setup(dpk->parent_dir, dpk->dir,
+                        dpk->buf_size, dpk->sub_buf_size, dpk->flags);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: lib/trace.c:670:
+                        dpk->buf_size, dpk->sub_buf_size, dpk->flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: lib/trace.c:671:
+                printk(KERN_INFO "Trace interface %s setup through "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: lib/trace.c:671:
+                printk(KERN_INFO "Trace interface %s setup through "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#345: FILE: lib/trace.c:671:
+                printk(KERN_INFO "Trace interface %s setup through "

ERROR:CODE_INDENT: code indent should use tabs where possible
#346: FILE: lib/trace.c:672:
+                                                        "debugfs_printk\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: lib/trace.c:672:
+                                                        "debugfs_printk\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#346: FILE: lib/trace.c:672:
+                printk(KERN_INFO "Trace interface %s setup through "
+                                                        "debugfs_printk\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: lib/trace.c:673:
+                                                        ti->dir->d_iname);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: lib/trace.c:673:
+                                                        ti->dir->d_iname);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: lib/trace.c:674:
+                if (IS_ERR(ti)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: lib/trace.c:674:
+                if (IS_ERR(ti)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: lib/trace.c:675:
+                        printk(KERN_ERR "Trace interface could not be "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: lib/trace.c:675:
+                        printk(KERN_ERR "Trace interface could not be "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#349: FILE: lib/trace.c:675:
+                        printk(KERN_ERR "Trace interface could not be "

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: lib/trace.c:676:
+                        "initialised\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: lib/trace.c:676:
+                        "initialised\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#350: FILE: lib/trace.c:676:
+                        printk(KERN_ERR "Trace interface could not be "
+                        "initialised\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: lib/trace.c:677:
+                        return PTR_ERR(ti);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: lib/trace.c:677:
+                        return PTR_ERR(ti);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: lib/trace.c:678:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: lib/trace.c:678:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: lib/trace.c:679:
+                /* Fall through */$

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#353: FILE: lib/trace.c:679:
+                /* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: lib/trace.c:680:
+        case TRACE_DIR_EXISTS:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: lib/trace.c:680:
+        case TRACE_DIR_EXISTS:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: lib/trace.c:681:
+                if (ti->state != TRACE_RUNNING) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: lib/trace.c:681:
+                if (ti->state != TRACE_RUNNING) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#355: FILE: lib/trace.c:681:
+                if (ti->state != TRACE_RUNNING) {
+                        trace_start(ti);
+                }

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: lib/trace.c:682:
+                        trace_start(ti);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: lib/trace.c:682:
+                        trace_start(ti);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#357: FILE: lib/trace.c:683:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: lib/trace.c:683:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: lib/trace.c:684:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: lib/trace.c:684:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: lib/trace.c:685:
+        return ti;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: lib/trace.c:685:
+        return ti;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#372: FILE: lib/trace.c:698:
+	struct trace_info *ti;
+	va_list(ap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: lib/trace.c:728:
+int debugfs_dump(struct debugfs_printk_data *dpk, const void *output,
+							const int output_len)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#426: FILE: samples/trace/fork_new_trace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#443: FILE: samples/trace/fork_new_trace.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#444: FILE: samples/trace/fork_new_trace.c:19:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#489: FILE: samples/trace/fork_new_trace.c:64:
+		printk(KERN_ERR "fork_trace: register_kprobe failed\n");

ERROR:SPACING: space required before the open parenthesis '('
#498: FILE: samples/trace/fork_new_trace.c:73:
+	if(!dpk) ret = 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#498: FILE: samples/trace/fork_new_trace.c:73:
+	if(!dpk) ret = 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#509: FILE: samples/trace/fork_new_trace.c:84:
+	if(ret)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#510: FILE: samples/trace/fork_new_trace.c:85:
+		printk(KERN_ERR "Unable to find required free memory. "

WARNING:SPLIT_STRING: quoted string split across lines
#511: FILE: samples/trace/fork_new_trace.c:86:
+		printk(KERN_ERR "Unable to find required free memory. "
+				"Trace new sample module loading aborted");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000291688.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 38 errors, 41 warnings, 16 checks, 446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000291688.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
