CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#60: FILE: arch/blackfin/include/asm/uaccess.h:282:
+};
+/**

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: arch/blackfin/kernel/kgdb.c:474:
+			u16 mmr = bfin_read16(src);
+			memcpy(dst, &mmr, sizeof(mmr));

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: arch/blackfin/kernel/kgdb.c:478:
+			u32 mmr = bfin_read32(src);
+			memcpy(dst, &mmr, sizeof(mmr));

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#141: FILE: arch/blackfin/kernel/kgdb.c:482:
+		switch (mem_type) {
+			case BFIN_MEM_ACCESS_CORE:
+			case BFIN_MEM_ACCESS_CORE_ONLY:
[...]
+			case BFIN_MEM_ACCESS_DMA:
[...]
+			case BFIN_MEM_ACCESS_ITEST:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#172: FILE: arch/blackfin/kernel/kgdb.c:513:
+			u16 mmr;
+			memcpy(&mmr, src, sizeof(mmr));

WARNING:LINE_SPACING: Missing a blank line after declarations
#178: FILE: arch/blackfin/kernel/kgdb.c:518:
+			u32 mmr;
+			memcpy(&mmr, src, sizeof(mmr));

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#184: FILE: arch/blackfin/kernel/kgdb.c:523:
+		switch (mem_type) {
+			case BFIN_MEM_ACCESS_CORE:
+			case BFIN_MEM_ACCESS_CORE_ONLY:
[...]
+			case BFIN_MEM_ACCESS_DMA:
[...]
+			case BFIN_MEM_ACCESS_ITEST:

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l1_addr' - possible side-effects?
#381: FILE: arch/blackfin/kernel/kgdb.c:620:
+#define IN_MEM(addr, size, l1_addr, l1_size) \
+({ \
+	unsigned long __addr = (unsigned long)(addr); \
+	(l1_size && __addr >= l1_addr && __addr + (size) <= l1_addr + l1_size); \
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'l1_addr' may be better as '(l1_addr)' to avoid precedence issues
#381: FILE: arch/blackfin/kernel/kgdb.c:620:
+#define IN_MEM(addr, size, l1_addr, l1_size) \
+({ \
+	unsigned long __addr = (unsigned long)(addr); \
+	(l1_size && __addr >= l1_addr && __addr + (size) <= l1_addr + l1_size); \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l1_size' - possible side-effects?
#381: FILE: arch/blackfin/kernel/kgdb.c:620:
+#define IN_MEM(addr, size, l1_addr, l1_size) \
+({ \
+	unsigned long __addr = (unsigned long)(addr); \
+	(l1_size && __addr >= l1_addr && __addr + (size) <= l1_addr + l1_size); \
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'l1_size' may be better as '(l1_size)' to avoid precedence issues
#381: FILE: arch/blackfin/kernel/kgdb.c:620:
+#define IN_MEM(addr, size, l1_addr, l1_size) \
+({ \
+	unsigned long __addr = (unsigned long)(addr); \
+	(l1_size && __addr >= l1_addr && __addr + (size) <= l1_addr + l1_size); \
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: arch/blackfin/kernel/kgdb.c:652:
+^I                                 BREAK_INSTR_SIZE);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: arch/blackfin/kernel/kgdb.c:656:
+^I                               BREAK_INSTR_SIZE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: arch/blackfin/kernel/process.c:349:
+           unsigned long start, unsigned long end)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: arch/blackfin/kernel/process.c:349:
+           unsigned long start, unsigned long end)$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#461: FILE: arch/blackfin/kernel/process.c:353:
+}
+static inline

ERROR:CODE_INDENT: code indent should use tabs where possible
#463: FILE: arch/blackfin/kernel/process.c:355:
+                     unsigned long const_addr, unsigned long const_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: arch/blackfin/kernel/process.c:355:
+                     unsigned long const_addr, unsigned long const_size)$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#468: FILE: arch/blackfin/kernel/process.c:360:
+}
+static inline

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: arch/blackfin/kernel/process.c:362:
+                 unsigned long const_addr, unsigned long const_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: arch/blackfin/kernel/process.c:362:
+                 unsigned long const_addr, unsigned long const_size)$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#474: FILE: arch/blackfin/kernel/process.c:366:
+}
+#define IN_ASYNC(bnum, bctlnum) \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bnum' may be better as '(bnum)' to avoid precedence issues
#474: FILE: arch/blackfin/kernel/process.c:366:
+#define IN_ASYNC(bnum, bctlnum) \
+({ \
+	(bfin_read_EBIU_AMGCTL() & 0xe) < ((bnum + 1) << 1) ? -EFAULT : \
+	bfin_read_EBIU_AMBCTL##bctlnum() & B##bnum##RDYEN ? -EFAULT : \
+	BFIN_MEM_ACCESS_CORE; \
+})

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#592: FILE: arch/blackfin/kernel/process.c:470:
+	if (in_mem_const_off(addr, size, _ebss_b_l1 - _sdata_b_l1, L1_DATA_B_START, L1_DATA_B_LENGTH))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#689: FILE: arch/blackfin/kernel/traps.c:650:
+	switch (bfin_mem_access_type(addr, 2)) {
+		case BFIN_MEM_ACCESS_CORE:
+		case BFIN_MEM_ACCESS_CORE_ONLY:
[...]
+		case BFIN_MEM_ACCESS_DMA:
[...]
+		case BFIN_MEM_ACCESS_ITEST:
[...]
+		default: /* invalid access */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107151.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 8 warnings, 9 checks, 648 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107151.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
