WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: fs/syaoran_2.6.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#42: FILE: fs/syaoran_2.6.c:2:
+ * fs/syaoran_2.6.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#94: FILE: fs/syaoran_2.6.c:54:
+static struct address_space_operations syaoran_aops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#95: FILE: fs/syaoran_2.6.c:55:
+static struct inode_operations syaoran_file_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#96: FILE: fs/syaoran_2.6.c:56:
+static struct inode_operations syaoran_dir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#97: FILE: fs/syaoran_2.6.c:57:
+static struct inode_operations syaoran_symlink_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#98: FILE: fs/syaoran_2.6.c:58:
+static struct file_operations syaoran_file_operations;

WARNING:LINE_SPACING: Missing a blank line after declarations
#164: FILE: fs/syaoran_2.6.c:124:
+	int error = -ENOSPC;
+	if (syaoran_may_create_node(dentry, mode, dev) < 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: fs/syaoran_2.6.c:143:
+	int retval = syaoran_mknod(dir, dentry, mode | S_IFDIR, 0);
+	if (!retval)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#189: FILE: fs/syaoran_2.6.c:149:
+			  struct nameidata *nd)
 			                    ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#199: FILE: fs/syaoran_2.6.c:159:
+	int error = -ENOSPC;
+	if (syaoran_may_create_node(dentry, S_IFLNK, 0) < 0)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#201: FILE: fs/syaoran_2.6.c:161:
+	inode = syaoran_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#201: FILE: fs/syaoran_2.6.c:161:
+	inode = syaoran_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#203: FILE: fs/syaoran_2.6.c:163:
+		int l = strlen(symname)+1;
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: fs/syaoran_2.6.c:164:
+		int l = strlen(symname)+1;
+		error = page_symlink(inode, symname, l);

CHECK:BRACES: braces {} should be used on all arms of this statement
#205: FILE: fs/syaoran_2.6.c:165:
+		if (!error) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#210: FILE: fs/syaoran_2.6.c:170:
+		} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#211: FILE: fs/syaoran_2.6.c:171:
+			iput(inode);
 			^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: fs/syaoran_2.6.c:180:
+	struct inode *inode = old_dentry->d_inode;
+	if (!inode || syaoran_may_create_node(dentry, inode->i_mode,

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: fs/syaoran_2.6.c:197:
+	struct inode *inode = old_dentry->d_inode;
+	if (!inode || syaoran_may_modify_node(old_dentry, MAY_DELETE) < 0 ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: fs/syaoran_2.6.c:215:
+	int error = inode_change_ok(inode, attr);
+	if (!error) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#258: FILE: fs/syaoran_2.6.c:218:
+		unsigned int flags = 0;
+		if (ia_valid & (ATTR_UID | ATTR_GID))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#276: FILE: fs/syaoran_2.6.c:236:
+}
+static struct address_space_operations syaoran_aops = {

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#276: FILE: fs/syaoran_2.6.c:236:
+static struct address_space_operations syaoran_aops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#283: FILE: fs/syaoran_2.6.c:243:
+static struct file_operations syaoran_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#294: FILE: fs/syaoran_2.6.c:254:
+static struct inode_operations syaoran_file_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#299: FILE: fs/syaoran_2.6.c:259:
+static struct inode_operations syaoran_dir_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#312: FILE: fs/syaoran_2.6.c:272:
+static struct inode_operations syaoran_symlink_inode_operations = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: fs/syaoran_2.6.c:298:
+		int error = syaoran_initialize(sb, data);
+		if (error < 0)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#347: FILE: fs/syaoran_2.6.c:307:
+		iput(inode);
 		^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299157.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 25 warnings, 5 checks, 342 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299157.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
