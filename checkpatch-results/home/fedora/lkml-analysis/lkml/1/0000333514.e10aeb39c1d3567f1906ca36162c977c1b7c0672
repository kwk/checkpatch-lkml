WARNING:TYPO_SPELLING: 'sugestion' may be misspelled - perhaps 'suggestion'?
#91: 
Update kerneldoc as david brownell's sugestion.
                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#132: FILE: drivers/base/class.c:817:
+int class_for_each_device(struct class *class, void *data,
+			   int (*fn)(struct device *, void *))
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: drivers/base/class.c:818:
+int class_for_each_device(struct class *class, void *data,
+			   int (*fn)(struct device *, void *))

CHECK:BRACES: braces {} should be used on all arms of this statement
#143: FILE: drivers/base/class.c:828:
+		if (dev) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#146: FILE: drivers/base/class.c:831:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: drivers/base/class.c:863:
+struct device *class_find_device(struct class *class, void *data,
+				   int (*match)(struct device *, void *))

CHECK:BRACES: braces {} should be used on all arms of this statement
#189: FILE: drivers/base/class.c:874:
+		if (dev) {
[...]
+		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#190: FILE: drivers/base/class.c:875:
+			if (match(dev, data)) {
[...]
+			} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#193: FILE: drivers/base/class.c:878:
+				break;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#193: FILE: drivers/base/class.c:878:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#195: FILE: drivers/base/class.c:880:
+		} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#220: FILE: drivers/base/class.c:905:
+int class_for_each_child(struct class *class, void *data,
+			   int (*fn)(struct class_device *, void *))
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: drivers/base/class.c:906:
+int class_for_each_child(struct class *class, void *data,
+			   int (*fn)(struct class_device *, void *))

CHECK:BRACES: braces {} should be used on all arms of this statement
#231: FILE: drivers/base/class.c:916:
+		if (dev) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#234: FILE: drivers/base/class.c:919:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: drivers/base/class.c:951:
+struct class_device *class_find_child(struct class *class, void *data,
+				   int (*match)(struct class_device *, void *))

CHECK:BRACES: braces {} should be used on all arms of this statement
#277: FILE: drivers/base/class.c:962:
+		if (dev) {
[...]
+		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#278: FILE: drivers/base/class.c:963:
+			if (match(dev, data)) {
[...]
+			} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#281: FILE: drivers/base/class.c:966:
+				break;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#281: FILE: drivers/base/class.c:966:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#283: FILE: drivers/base/class.c:968:
+		} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#311: FILE: include/linux/device.h:201:
+extern int class_for_each_device(struct class *class, void *data,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: include/linux/device.h:202:
+extern int class_for_each_device(struct class *class, void *data,
+				int (*fn)(struct device *dev, void *data));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/linux/device.h:203:
+extern struct device *class_find_device(struct class *class, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: include/linux/device.h:204:
+extern struct device *class_find_device(struct class *class, void *data,
+				   int (*match)(struct device *, void *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: include/linux/device.h:205:
+extern int class_for_each_child(struct class *class, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: include/linux/device.h:206:
+extern int class_for_each_child(struct class *class, void *data,
+			   int (*fn)(struct class_device *, void *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#317: FILE: include/linux/device.h:207:
+extern struct class_device *class_find_child(struct class *class, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: include/linux/device.h:208:
+extern struct class_device *class_find_child(struct class *class, void *data,
+				   int (*match)(struct class_device *, void *));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333514.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 3 warnings, 24 checks, 204 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333514.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
