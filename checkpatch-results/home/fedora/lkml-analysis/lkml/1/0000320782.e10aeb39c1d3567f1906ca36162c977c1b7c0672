WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '8ebb7e2d1636f0fca44caaab936e9bfe21ae515b', maybe rebased or not pulled?
#108: 
commit 8ebb7e2d1636f0fca44caaab936e9bfe21ae515b

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#169: FILE: arch/um/kernel/syscall.c:155:
+extern long do_switch_mm(int fd, long __user *save, long __user *new,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#231: FILE: arch/x86/ia32/ptrace32.c:41:
+int putreg32(struct task_struct *child, unsigned regno, u32 val)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#240: FILE: arch/x86/ia32/ptrace32.c:142:
+int getreg32(struct task_struct *child, unsigned regno, u32 *val)

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#293: FILE: arch/x86/kernel/ptrace_32.c:717:
+int ptrace_to_pt_regs(struct pt_regs *regs, struct __user user_regs *ptrace)
                                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#300: FILE: arch/x86/kernel/ptrace_32.c:724:
+	for (i = 0; i < FRAME_SIZE; i++){

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#313: FILE: arch/x86/kernel/ptrace_32.c:737:
+int pt_regs_to_ptrace(struct __user user_regs *ptrace, struct pt_regs *regs)
                                               ^

ERROR:SPACING: space required before the open brace '{'
#320: FILE: arch/x86/kernel/ptrace_32.c:744:
+	for (i = 0; i < FRAME_SIZE; i++){

WARNING:LINE_SPACING: Missing a blank line after declarations
#322: FILE: arch/x86/kernel/ptrace_32.c:746:
+		unsigned long n = getreg(current, i * 4), err;
+		err = __put_user(n, &ptrace->regs[i]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#355: FILE: arch/x86/kernel/ptrace_64.c:622:
+extern int putreg32(struct task_struct *child, unsigned regno, u32 val);

ERROR:SPACING: space required before the open brace '{'
#363: FILE: arch/x86/kernel/ptrace_64.c:630:
+		for (i = 0; i < MAX_REG32_NR; i++){

ERROR:SPACING: space required before the open brace '{'
#372: FILE: arch/x86/kernel/ptrace_64.c:639:
+	for (i = 0; i < MAX_REG_NR; i++){

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#381: FILE: arch/x86/kernel/ptrace_64.c:648:
+extern int getreg32(struct task_struct *child, unsigned regno, u32 *val);

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#383: FILE: arch/x86/kernel/ptrace_64.c:650:
+int pt_regs_to_ptrace(struct __user user_regs *ptrace, struct pt_regs *regs)
                                               ^

WARNING:SIZEOF_ADDRESS: sizeof(& should be avoided
#390: FILE: arch/x86/kernel/ptrace_64.c:657:
+			       sizeof(&ptrace->u.regs32)))

ERROR:SPACING: space required before the open brace '{'
#393: FILE: arch/x86/kernel/ptrace_64.c:660:
+		for (i = 0; i < ARRAY_SIZE(ptrace->u.regs32); i++){

ERROR:SPACING: space required before the open brace '{'
#412: FILE: arch/x86/kernel/ptrace_64.c:679:
+	for (i = 0; i < ARRAY_SIZE(ptrace->u.regs64); i++){

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: arch/x86/kernel/ptrace_64.c:681:
+		unsigned long n = getreg(current, i * 8);
+		err = __put_user(n, &ptrace->u.regs64[i]);

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#451: FILE: arch/x86/kernel/sys_i386_32.c:265:
+extern long do_switch_mm(int fd, struct __user user_regs *save,
                                                          ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#451: FILE: arch/x86/kernel/sys_i386_32.c:265:
+extern long do_switch_mm(int fd, struct __user user_regs *save,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#452: FILE: arch/x86/kernel/sys_i386_32.c:266:
+			 struct __user user_regs *new, unsigned long ip,
 			                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#470: FILE: arch/x86/kernel/sys_x86_64.c:157:
+extern long do_switch_mm(int fd, struct __user user_regs *save,
                                                          ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#470: FILE: arch/x86/kernel/sys_x86_64.c:157:
+extern long do_switch_mm(int fd, struct __user user_regs *save,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#471: FILE: arch/x86/kernel/sys_x86_64.c:158:
+			 struct __user user_regs *new, unsigned long ip,
 			                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#474: FILE: arch/x86/kernel/sys_x86_64.c:161:
+asmlinkage long sys_switch_mm(int fd, struct __user user_regs *save,
                                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#475: FILE: arch/x86/kernel/sys_x86_64.c:162:
+			      struct __user user_regs *new, unsigned long ip,
 			                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#502: FILE: fs/proc/base.c:2194:
+	if (task == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#505: FILE: fs/proc/base.c:2197:
+	if(task->mm != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "task->mm"
#505: FILE: fs/proc/base.c:2197:
+	if(task->mm != NULL)

ERROR:SPACING: space required before the open parenthesis '('
#515: FILE: fs/proc/base.c:2207:
+	if(mm != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mm"
#515: FILE: fs/proc/base.c:2207:
+	if(mm != NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#533: FILE: fs/proc/base.c:2281:
+	REG("mm", S_IRUSR | S_IWUSR, pid_mm),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#549: FILE: include/asm-um/ptrace-generic.h:41:
+extern int copyin_user_regs(struct user_regs *to, unsigned long __user *from);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#550: FILE: include/asm-um/ptrace-generic.h:42:
+extern int ptrace_to_pt_regs(struct pt_regs *to, struct user_regs __user *from);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#551: FILE: include/asm-um/ptrace-generic.h:43:
+extern int pt_regs_to_ptrace(struct user_regs __user *to, struct pt_regs *from);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#564: FILE: include/asm-um/ptrace-i386.h:43:
+#define pt_regs_ip(r) (r).regs.gp[EIP]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#565: FILE: include/asm-um/ptrace-i386.h:44:
+#define pt_regs_sp(r) (r).regs.gp[UESP]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#567: FILE: include/asm-um/ptrace-i386.h:46:
+#define ptrace_ip(r) (r)->regs[EIP]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#568: FILE: include/asm-um/ptrace-i386.h:47:
+#define ptrace_sp(r) (r)->regs[UESP]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#581: FILE: include/asm-um/ptrace-x86_64.h:65:
+#define pt_regs_ip(r) (r).regs.gp[RIP / sizeof(long)]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#582: FILE: include/asm-um/ptrace-x86_64.h:66:
+#define pt_regs_sp(r) (r).regs.gp[RSP / sizeof(long)]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#584: FILE: include/asm-um/ptrace-x86_64.h:68:
+#define ptrace_ip(r) (r)->regs[RIP / sizeof(long)]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#585: FILE: include/asm-um/ptrace-x86_64.h:69:
+#define ptrace_sp(r) (r)->regs[RSP / sizeof(long)]

WARNING:INCLUDE_LINUX: Use #include <linux/user.h> instead of <asm/user.h>
#598: FILE: include/asm-x86/ptrace.h:5:
+#include <asm/user.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#610: FILE: include/asm-x86/ptrace.h:40:
+#define pt_regs_ip(r) (r).eip

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#611: FILE: include/asm-x86/ptrace.h:41:
+#define pt_regs_sp(r) (r).esp

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#613: FILE: include/asm-x86/ptrace.h:43:
+#define ptrace_ip(r) (r)->regs[EIP]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#614: FILE: include/asm-x86/ptrace.h:44:
+#define ptrace_sp(r) (r)->regs[UESP]

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#616: FILE: include/asm-x86/ptrace.h:46:
+extern int ptrace_to_pt_regs(struct pt_regs *regs,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#618: FILE: include/asm-x86/ptrace.h:48:
+extern int pt_regs_to_ptrace(struct __user user_regs *ptrace,
                                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#618: FILE: include/asm-x86/ptrace.h:48:
+extern int pt_regs_to_ptrace(struct __user user_regs *ptrace,

CHECK:SPACING: No space is necessary after a cast
#634: FILE: include/asm-x86/ptrace.h:123:
+#define ptrace_ip32(regs) (unsigned long) (regs)[EIP]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#634: FILE: include/asm-x86/ptrace.h:123:
+#define ptrace_ip32(regs) (unsigned long) (regs)[EIP]

CHECK:SPACING: No space is necessary after a cast
#635: FILE: include/asm-x86/ptrace.h:124:
+#define ptrace_sp32(regs) (unsigned long) (regs)[UESP]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#635: FILE: include/asm-x86/ptrace.h:124:
+#define ptrace_sp32(regs) (unsigned long) (regs)[UESP]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#650: FILE: include/asm-x86/ptrace.h:139:
+#define pt_regs_ip(regs) (regs).rip

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#651: FILE: include/asm-x86/ptrace.h:140:
+#define pt_regs_sp(regs) (regs).rsp

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#653: FILE: include/asm-x86/ptrace.h:142:
+extern unsigned long ptrace_ip(struct user_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#654: FILE: include/asm-x86/ptrace.h:143:
+extern unsigned long ptrace_sp(struct user_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#656: FILE: include/asm-x86/ptrace.h:145:
+extern int ptrace_to_pt_regs(struct pt_regs *regs,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#658: FILE: include/asm-x86/ptrace.h:147:
+extern int pt_regs_to_ptrace(struct __user user_regs *ptrace,
                                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#658: FILE: include/asm-x86/ptrace.h:147:
+extern int pt_regs_to_ptrace(struct __user user_regs *ptrace,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#713: FILE: include/linux/sched.h:1655:
+extern struct mm_struct *dup_mm(struct task_struct *tsk);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#738: FILE: kernel/ptrace.c:369:
+extern int do_switch(struct task_struct *task, int fd);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#769: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#774: FILE: mm/mmfs.c:1:
+#define __FRAME_OFFSETS

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#779: FILE: mm/mmfs.c:6:
+#include <asm/mmu_context.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#781: FILE: mm/mmfs.c:8:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/user.h> instead of <asm/user.h>
#782: FILE: mm/mmfs.c:9:
+#include <asm/user.h>

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#856: FILE: mm/mmfs.c:83:
+static struct dentry_operations mm_dentry_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#861: FILE: mm/mmfs.c:88:
+static struct file_operations mm_fops = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm"
#875: FILE: mm/mmfs.c:102:
+	if (mm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry"
#886: FILE: mm/mmfs.c:113:
+	if (dentry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#893: FILE: mm/mmfs.c:120:
+	if (inode == NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#896: FILE: mm/mmfs.c:123:
+	inode->i_mode = S_IRUSR;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#899: FILE: mm/mmfs.c:126:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#904: FILE: mm/mmfs.c:131:
+	if (file == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_op != &mm_fops'
#935: FILE: mm/mmfs.c:162:
+	if ((file->f_op != &mm_fops) && (file->f_op != &proc_pid_mm_operations))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_op != &proc_pid_mm_operations'
#935: FILE: mm/mmfs.c:162:
+	if ((file->f_op != &mm_fops) && (file->f_op != &proc_pid_mm_operations))

ERROR:SPACING: space required before the open parenthesis '('
#946: FILE: mm/mmfs.c:173:
+	if(task == current)

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#959: FILE: mm/mmfs.c:186:
+long do_switch_mm(int fd, struct __user user_regs *save,
                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#960: FILE: mm/mmfs.c:187:
+		  struct __user user_regs *new, unsigned long ip,
 		                          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->mm"
#965: FILE: mm/mmfs.c:192:
+	if (current->mm == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'save != NULL'
#968: FILE: mm/mmfs.c:195:
+	if ((save != NULL) && pt_regs_to_ptrace(save, regs))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "save"
#968: FILE: mm/mmfs.c:195:
+	if ((save != NULL) && pt_regs_to_ptrace(save, regs))

CHECK:BRACES: braces {} should be used on all arms of this statement
#975: FILE: mm/mmfs.c:202:
+	if (new != NULL)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new"
#975: FILE: mm/mmfs.c:202:
+	if (new != NULL)

CHECK:BRACES: Unbalanced braces around else statement
#977: FILE: mm/mmfs.c:204:
+	else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000320782.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 25 errors, 22 warnings, 41 checks, 724 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000320782.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
