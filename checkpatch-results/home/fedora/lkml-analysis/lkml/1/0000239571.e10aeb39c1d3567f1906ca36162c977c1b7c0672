ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#86: FILE: arch/x86/kernel/smp_64.c:301:
static DEFINE_SPINLOCK(call_lock);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#98: FILE: arch/x86/kernel/smp_64.c:537:
+void sysrq_t_smp_call_function (void (*func) (void *info), void *info)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: arch/x86/kernel/smp_64.c:539:
+    static struct call_data_struct dumpdata;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/x86/kernel/smp_64.c:540:
+    static int dumping_cpu = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: arch/x86/kernel/smp_64.c:541:
+    int waitcount = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: arch/x86/kernel/smp_64.c:543:
+    call_lock_locked_by_freezer = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: arch/x86/kernel/smp_64.c:545:
+    dumping_cpu = smp_processor_id();$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#109: FILE: arch/x86/kernel/smp_64.c:548:
+    /*
+    *Enable irq to avoid the deadlock of call_lock

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: arch/x86/kernel/smp_64.c:551:
+    local_irq_enable();$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#115: FILE: arch/x86/kernel/smp_64.c:554:
+    /*
+    * Try to get call_lock or wait for 2 second to let ipis settle down.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: arch/x86/kernel/smp_64.c:559:
+    while (!spin_trylock(&call_lock)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: arch/x86/kernel/smp_64.c:560:
+        if (waitcount++ > 2000) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: arch/x86/kernel/smp_64.c:560:
+        if (waitcount++ > 2000) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#121: FILE: arch/x86/kernel/smp_64.c:560:
+        if (waitcount++ > 2000) {
+            call_lock_locked_by_freezer = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: arch/x86/kernel/smp_64.c:561:
+            call_lock_locked_by_freezer = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: arch/x86/kernel/smp_64.c:561:
+            call_lock_locked_by_freezer = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: arch/x86/kernel/smp_64.c:562:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: arch/x86/kernel/smp_64.c:562:
+            break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: arch/x86/kernel/smp_64.c:563:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: arch/x86/kernel/smp_64.c:563:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: arch/x86/kernel/smp_64.c:564:
+        udelay(1000);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: arch/x86/kernel/smp_64.c:564:
+        udelay(1000);$

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#125: FILE: arch/x86/kernel/smp_64.c:564:
+        udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: arch/x86/kernel/smp_64.c:565:
+        barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: arch/x86/kernel/smp_64.c:565:
+        barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: arch/x86/kernel/smp_64.c:566:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: arch/x86/kernel/smp_64.c:568:
+    local_irq_disable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: arch/x86/kernel/smp_64.c:569:
+    dumpdata.func = func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: arch/x86/kernel/smp_64.c:570:
+    dumpdata.info = info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: arch/x86/kernel/smp_64.c:571:
+    dumpdata.wait = 0; /* not used */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: arch/x86/kernel/smp_64.c:572:
+    atomic_set(&dumpdata.started, 0); /* not used */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: arch/x86/kernel/smp_64.c:573:
+    atomic_set(&dumpdata.finished, 0); /* not used */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: arch/x86/kernel/smp_64.c:575:
+    call_data = &dumpdata;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: arch/x86/kernel/smp_64.c:576:
+    wmb();$

WARNING:MEMORY_BARRIER: memory barrier without comment
#137: FILE: arch/x86/kernel/smp_64.c:576:
+    wmb();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: arch/x86/kernel/smp_64.c:577:
+    send_IPI_allbutself(CALL_FUNCTION_VECTOR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: arch/x86/kernel/smp_64.c:583:
+    if (call_lock_locked_by_freezer)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: arch/x86/kernel/smp_64.c:584:
+        spin_unlock(&call_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: arch/x86/kernel/smp_64.c:584:
+        spin_unlock(&call_lock);$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#147: FILE: arch/x86/kernel/smp_64.c:586:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#150: FILE: include/asm-x86/sysrq-t.h:587:
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#155: FILE: include/asm-x86/sysrq-t.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: include/asm-x86/sysrq-t.h:4:
+    local_irq_disable();    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: include/asm-x86/sysrq-t.h:5:
+    while (freezer)        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: include/asm-x86/sysrq-t.h:6:
+        cpu_relax();    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: include/asm-x86/sysrq-t.h:6:
+        cpu_relax();    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: include/asm-x86/sysrq-t.h:7:
+    local_irq_enable();     \$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: include/linux/smp.h:59:
+extern void sysrq_t_smp_call_function(void(*func)(void *info), void *info);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#174: FILE: include/linux/smp.h:60:
+extern void sysrq_t_unlock_call_lock(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: kernel/sched.c:4924:
+    show_stack(p, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: kernel/sched.c:4931:
+    unsigned long __ms = (n);      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: kernel/sched.c:4932:
+    while (__ms--) {     \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 4)
#205: FILE: kernel/sched.c:4932:
+    while (__ms--) {     \
+    udelay(1000);     \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: kernel/sched.c:4933:
+    udelay(1000);     \$

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#206: FILE: kernel/sched.c:4933:
+    udelay(1000);     \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: kernel/sched.c:4934:
+    barrier();    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: kernel/sched.c:4935:
+    touch_nmi_watchdog();    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: kernel/sched.c:4936:
+    }       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: kernel/sched.c:4944:
+    unsigned int cpu = smp_processor_id();$

WARNING:LINE_SPACING: Missing a blank line after declarations
#218: FILE: kernel/sched.c:4945:
+    unsigned int cpu = smp_processor_id();
+    sysrq_tasks[cpu] = current;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: kernel/sched.c:4945:
+    sysrq_tasks[cpu] = current;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: kernel/sched.c:4946:
+    platform_freeze_cpu();$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#225: FILE: kernel/sched.c:4952:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: kernel/sched.c:4956:
+    int i;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#230: FILE: kernel/sched.c:4957:
+    int i;
+    freezer = 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: kernel/sched.c:4957:
+    freezer = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: kernel/sched.c:4959:
+    sysrq_t_smp_call_function(freeze_cpu, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: kernel/sched.c:4962:
+    sysrq_t_mdelay(3000);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: kernel/sched.c:4963:
+    printk(KERN_INFO "CPUs frozen: ");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#236: FILE: kernel/sched.c:4963:
+    printk(KERN_INFO "CPUs frozen: ");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: kernel/sched.c:4964:
+    for (i = 0; i < NR_CPUS; i++) {$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#237: FILE: kernel/sched.c:4964:
+    for (i = 0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: kernel/sched.c:4965:
+        if (sysrq_tasks[i] != NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: kernel/sched.c:4965:
+        if (sysrq_tasks[i] != NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#238: FILE: kernel/sched.c:4965:
+        if (sysrq_tasks[i] != NULL)
+            printk(KERN_INFO "#%d(pid: %d) ",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sysrq_tasks[i]"
#238: FILE: kernel/sched.c:4965:
+        if (sysrq_tasks[i] != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: kernel/sched.c:4966:
+            printk(KERN_INFO "#%d(pid: %d) ",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: kernel/sched.c:4966:
+            printk(KERN_INFO "#%d(pid: %d) ",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#239: FILE: kernel/sched.c:4966:
+            printk(KERN_INFO "#%d(pid: %d) ",

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: kernel/sched.c:4967:
+                i, sysrq_tasks[i]->pid);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: kernel/sched.c:4967:
+            printk(KERN_INFO "#%d(pid: %d) ",
+                i, sysrq_tasks[i]->pid);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: kernel/sched.c:4967:
+                i, sysrq_tasks[i]->pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: kernel/sched.c:4969:
+    }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#242: FILE: kernel/sched.c:4969:
+
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: kernel/sched.c:4970:
+    printk("\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#243: FILE: kernel/sched.c:4970:
+    printk("\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: kernel/sched.c:4971:
+    printk(KERN_INFO "CPU#%d is executing sysrq-t(pid: %d).\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#244: FILE: kernel/sched.c:4971:
+    printk(KERN_INFO "CPU#%d is executing sysrq-t(pid: %d).\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: kernel/sched.c:4972:
+        smp_processor_id(), current->pid);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: kernel/sched.c:4972:
+    printk(KERN_INFO "CPU#%d is executing sysrq-t(pid: %d).\n",
+        smp_processor_id(), current->pid);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: kernel/sched.c:4972:
+        smp_processor_id(), current->pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: kernel/sched.c:4978:
+    freezer = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: kernel/sched.c:4979:
+    sysrq_t_unlock_call_lock();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: kernel/sched.c:4993:
+    freeze_other_cpus_temporarily();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: kernel/sched.c:5016:
+    defreeze_other_cpus();$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000239571.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 72 warnings, 10 checks, 178 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000239571.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
