WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#44: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: include/asm-generic/atomic.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#174: FILE: include/asm-generic/atomic.h:126:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#174: FILE: include/asm-generic/atomic.h:126:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: include/asm-generic/atomic.h:150:
+#define cmpxchg_local(ptr, o, n)^I^I^I^I  ^I       \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#198: FILE: include/asm-generic/atomic.h:150:
+#define cmpxchg_local(ptr, o, n)				  	       \
+	((__typeof__(*(ptr)))__cmpxchg_local_generic((ptr), (unsigned long)(o),\
+			(unsigned long)(n), sizeof(*(ptr))))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#220: FILE: include/asm-generic/io.h:1:
+/* Generic I/O port emulation, based on MN10300 code

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#234: FILE: include/asm-generic/io.h:15:
+#include <asm/cacheflush.h>

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#250: FILE: include/asm-generic/io.h:31:
+static inline u8 __raw_readb(const volatile void __iomem *addr)

CHECK:SPACING: No space is necessary after a cast
#252: FILE: include/asm-generic/io.h:33:
+	return *(const volatile u8 __force *) addr;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#252: FILE: include/asm-generic/io.h:33:
+	return *(const volatile u8 __force *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#255: FILE: include/asm-generic/io.h:36:
+static inline u16 __raw_readw(const volatile void __iomem *addr)

CHECK:SPACING: No space is necessary after a cast
#257: FILE: include/asm-generic/io.h:38:
+	return *(const volatile u16 __force *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#257: FILE: include/asm-generic/io.h:38:
+	return *(const volatile u16 __force *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#260: FILE: include/asm-generic/io.h:41:
+static inline u32 __raw_readl(const volatile void __iomem *addr)

CHECK:SPACING: No space is necessary after a cast
#262: FILE: include/asm-generic/io.h:43:
+	return *(const volatile u32 __force *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#262: FILE: include/asm-generic/io.h:43:
+	return *(const volatile u32 __force *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#269: FILE: include/asm-generic/io.h:50:
+static inline void __raw_writeb(u8 b, volatile void __iomem *addr)

CHECK:SPACING: No space is necessary after a cast
#271: FILE: include/asm-generic/io.h:52:
+	*(volatile u8 __force *) addr = b;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#271: FILE: include/asm-generic/io.h:52:
+	*(volatile u8 __force *) addr = b;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#274: FILE: include/asm-generic/io.h:55:
+static inline void __raw_writew(u16 b, volatile void __iomem *addr)

CHECK:SPACING: No space is necessary after a cast
#276: FILE: include/asm-generic/io.h:57:
+	*(volatile u16 __force *) addr = b;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#276: FILE: include/asm-generic/io.h:57:
+	*(volatile u16 __force *) addr = b;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#279: FILE: include/asm-generic/io.h:60:
+static inline void __raw_writel(u32 b, volatile void __iomem *addr)

CHECK:SPACING: No space is necessary after a cast
#281: FILE: include/asm-generic/io.h:62:
+	*(volatile u32 __force *) addr = b;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#281: FILE: include/asm-generic/io.h:62:
+	*(volatile u32 __force *) addr = b;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: include/asm-generic/io.h:66:
+#define writew(b,addr) __raw_writew(__cpu_to_le16(b),addr)
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: include/asm-generic/io.h:66:
+#define writew(b,addr) __raw_writew(__cpu_to_le16(b),addr)
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: include/asm-generic/io.h:67:
+#define writel(b,addr) __raw_writel(__cpu_to_le32(b),addr)
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: include/asm-generic/io.h:67:
+#define writel(b,addr) __raw_writel(__cpu_to_le32(b),addr)
                                                     ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#289: FILE: include/asm-generic/io.h:70:
+static inline u64 __raw_readq(const volatile void __iomem *addr)

CHECK:SPACING: No space is necessary after a cast
#291: FILE: include/asm-generic/io.h:72:
+	return *(const volatile u64 __force *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#291: FILE: include/asm-generic/io.h:72:
+	return *(const volatile u64 __force *) addr;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#293: FILE: include/asm-generic/io.h:74:
+}
+#define readq(addr) __le64_to_cpu(__raw_readq(addr))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#295: FILE: include/asm-generic/io.h:76:
+static inline void __raw_writeq(u64 b, volatile void __iomem *addr)

CHECK:SPACING: No space is necessary after a cast
#297: FILE: include/asm-generic/io.h:78:
+	*(volatile u64 __force *) addr = b;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#297: FILE: include/asm-generic/io.h:78:
+	*(volatile u64 __force *) addr = b;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#299: FILE: include/asm-generic/io.h:80:
+}
+#define writeq(b,addr) __raw_writeq(__cpu_to_le64(b),addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#299: FILE: include/asm-generic/io.h:80:
+#define writeq(b,addr) __raw_writeq(__cpu_to_le64(b),addr)
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#299: FILE: include/asm-generic/io.h:80:
+#define writeq(b,addr) __raw_writeq(__cpu_to_le64(b),addr)
                                                     ^

CHECK:SPACING: No space is necessary after a cast
#309: FILE: include/asm-generic/io.h:90:
+	return readb((volatile void __iomem *) addr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#309: FILE: include/asm-generic/io.h:90:
+	return readb((volatile void __iomem *) addr);

CHECK:SPACING: No space is necessary after a cast
#314: FILE: include/asm-generic/io.h:95:
+	return readw((volatile void __iomem *) addr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#314: FILE: include/asm-generic/io.h:95:
+	return readw((volatile void __iomem *) addr);

CHECK:SPACING: No space is necessary after a cast
#319: FILE: include/asm-generic/io.h:100:
+	return readl((volatile void __iomem *) addr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#319: FILE: include/asm-generic/io.h:100:
+	return readl((volatile void __iomem *) addr);

CHECK:SPACING: No space is necessary after a cast
#324: FILE: include/asm-generic/io.h:105:
+	writeb(b, (volatile void __iomem *) addr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#324: FILE: include/asm-generic/io.h:105:
+	writeb(b, (volatile void __iomem *) addr);

CHECK:SPACING: No space is necessary after a cast
#329: FILE: include/asm-generic/io.h:110:
+	writew(b, (volatile void __iomem *) addr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#329: FILE: include/asm-generic/io.h:110:
+	writew(b, (volatile void __iomem *) addr);

CHECK:SPACING: No space is necessary after a cast
#334: FILE: include/asm-generic/io.h:115:
+	writel(b, (volatile void __iomem *) addr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#334: FILE: include/asm-generic/io.h:115:
+	writel(b, (volatile void __iomem *) addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#348: FILE: include/asm-generic/io.h:129:
+		u8 *buf = buffer;
+		do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#359: FILE: include/asm-generic/io.h:140:
+		u16 *buf = buffer;
+		do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#370: FILE: include/asm-generic/io.h:151:
+		u32 *buf = buffer;
+		do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#381: FILE: include/asm-generic/io.h:162:
+		const u8 *buf = buffer;
+		do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#391: FILE: include/asm-generic/io.h:172:
+		const u16 *buf = buffer;
+		do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: include/asm-generic/io.h:182:
+		const u32 *buf = buffer;
+		do {

CHECK:SPACING: No space is necessary after a cast
#417: FILE: include/asm-generic/io.h:198:
+	insb((unsigned long) (p), (dst), (count))

CHECK:SPACING: No space is necessary after a cast
#419: FILE: include/asm-generic/io.h:200:
+	insw((unsigned long) (p), (dst), (count))

CHECK:SPACING: No space is necessary after a cast
#421: FILE: include/asm-generic/io.h:202:
+	insl((unsigned long) (p), (dst), (count))

CHECK:SPACING: No space is necessary after a cast
#424: FILE: include/asm-generic/io.h:205:
+	outsb((unsigned long) (p), (src), (count))

CHECK:SPACING: No space is necessary after a cast
#426: FILE: include/asm-generic/io.h:207:
+	outsw((unsigned long) (p), (src), (count))

CHECK:SPACING: No space is necessary after a cast
#428: FILE: include/asm-generic/io.h:209:
+	outsl((unsigned long) (p), (src), (count))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#431: FILE: include/asm-generic/io.h:212:
+
+

CHECK:SPACING: No space is necessary after a cast
#437: FILE: include/asm-generic/io.h:218:
+#define __io_virt(x) ((void *) (x))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#442: FILE: include/asm-generic/io.h:223:
+extern void __iomem *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#452: FILE: include/asm-generic/io.h:233:
+static inline unsigned long virt_to_phys(volatile void *address)

CHECK:SPACING: No space is necessary after a cast
#467: FILE: include/asm-generic/io.h:248:
+	return (void *) offset;

CHECK:SPACING: No space is necessary after a cast
#487: FILE: include/asm-generic/io.h:268:
+	return (void __iomem *) port;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#494: FILE: include/asm-generic/io.h:275:
+extern void __iomem *ioport_map(unsigned long port, unsigned int nr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#495: FILE: include/asm-generic/io.h:276:
+extern void ioport_unmap(void __iomem *p);

CHECK:SPACING: No space is necessary after a cast
#499: FILE: include/asm-generic/io.h:280:
+#define xlate_dev_mem_ptr(p)	((void *) (p))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#502: FILE: include/asm-generic/io.h:283:
+static inline unsigned long virt_to_bus(volatile void *address)

CHECK:SPACING: No space is necessary after a cast
#504: FILE: include/asm-generic/io.h:285:
+	return ((unsigned long) address);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#504: FILE: include/asm-generic/io.h:285:
+	return ((unsigned long) address);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:SPACING: No space is necessary after a cast
#509: FILE: include/asm-generic/io.h:290:
+	return (void *) address;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131576.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 35 warnings, 35 checks, 465 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131576.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
