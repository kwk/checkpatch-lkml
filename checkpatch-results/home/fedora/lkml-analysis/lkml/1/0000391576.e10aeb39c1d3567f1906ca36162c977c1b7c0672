CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: include/linux/memcontrol.h:35:
+extern void mem_container_move_lists(struct page_container *pc, bool active);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: include/linux/memcontrol.h:36:
+extern unsigned long mem_container_isolate_pages(unsigned long nr_to_scan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#70: FILE: include/linux/memcontrol.h:37:
+extern unsigned long mem_container_isolate_pages(unsigned long nr_to_scan,
+					struct list_head *dst,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: include/linux/memcontrol.h:82:
+static inline void mem_container_move_lists(struct page_container *pc,
+						bool active)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/swap.h:195:
+extern unsigned long try_to_free_mem_container_pages(struct mem_container *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/swap.h:196:
+extern int __isolate_lru_page(struct page *page, int mode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#185: FILE: mm/memcontrol.c:165:
+	struct mem_container *mem;
+	if (!pc)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: mm/memcontrol.c:176:
+unsigned long mem_container_isolate_pages(unsigned long nr_to_scan,
+					struct list_head *dst,

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: mm/memcontrol.c:302:
+ ^I^I * try_to_free_mem_container_pages() might not give us a full$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#281: FILE: mm/memcontrol.c:302:
+ ^I^I * try_to_free_mem_container_pages() might not give us a full$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: mm/memcontrol.c:303:
+ ^I^I * picture of reclaim. Some pages are reclaimed and might be$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#282: FILE: mm/memcontrol.c:303:
+ ^I^I * picture of reclaim. Some pages are reclaimed and might be$

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: mm/memcontrol.c:304:
+ ^I^I * moved to swap cache or just unmapped from the container.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#283: FILE: mm/memcontrol.c:304:
+ ^I^I * moved to swap cache or just unmapped from the container.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: mm/memcontrol.c:305:
+ ^I^I * Check the limit again to see if the reclaim reduced the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#284: FILE: mm/memcontrol.c:305:
+ ^I^I * Check the limit again to see if the reclaim reduced the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: mm/memcontrol.c:306:
+ ^I^I * current usage of the container before giving up$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#285: FILE: mm/memcontrol.c:306:
+ ^I^I * current usage of the container before giving up$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: mm/memcontrol.c:307:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: mm/memcontrol.c:307:
+ ^I^I */$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#298: FILE: mm/memcontrol.c:319:
+			congestion_wait(WRITE, HZ/10);
 			                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: mm/memcontrol.c:382:
+ ^I^Ispin_lock_irqsave(&mem->lru_lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#329: FILE: mm/memcontrol.c:382:
+ ^I^Ispin_lock_irqsave(&mem->lru_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: mm/memcontrol.c:382:
+ ^I^Ispin_lock_irqsave(&mem->lru_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: mm/memcontrol.c:383:
+ ^I^Ilist_del_init(&pc->lru);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#330: FILE: mm/memcontrol.c:383:
+ ^I^Ilist_del_init(&pc->lru);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: mm/memcontrol.c:383:
+ ^I^Ilist_del_init(&pc->lru);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: mm/memcontrol.c:384:
+ ^I^Ispin_unlock_irqrestore(&mem->lru_lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#331: FILE: mm/memcontrol.c:384:
+ ^I^Ispin_unlock_irqrestore(&mem->lru_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: mm/memcontrol.c:384:
+ ^I^Ispin_unlock_irqrestore(&mem->lru_lock, flags);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: mm/vmscan.c:80:
+	unsigned long (*isolate_pages)(unsigned long nr, struct list_head *dst,
+			unsigned long *scanned, int order, int mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: mm/vmscan.c:752:
+static unsigned long isolate_pages_global(unsigned long nr,
+					struct list_head *dst,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: mm/vmscan.c:1159:
+unsigned long do_try_to_free_pages(struct zone **zones, gfp_t gfp_mask,
+					struct scan_control *sc)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sc->mem_container"
#503: FILE: mm/vmscan.c:1191:
+		if (sc->mem_container == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sc->mem_container"
#536: FILE: mm/vmscan.c:1221:
+	if (!sc->all_unreclaimable && sc->mem_container == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000391576.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 13 warnings, 13 checks, 495 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000391576.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
