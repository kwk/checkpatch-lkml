WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
  @SYM[+|-offs] : Fetch memory at SYM +|- offs (SYM should be a data symbol)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#151: FILE: kernel/trace/trace_kprobe.c:38:
+	unsigned long (*func)(struct pt_regs *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#151: FILE: kernel/trace/trace_kprobe.c:38:
+	unsigned long (*func)(struct pt_regs *, void *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#163: FILE: kernel/trace/trace_kprobe.c:50:
+	return get_register(regs, (unsigned)((unsigned long)offset));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#168: FILE: kernel/trace/trace_kprobe.c:55:
+	return get_stack_nth(regs, (unsigned)((unsigned long)num));

WARNING:LINE_SPACING: Missing a blank line after declarations
#174: FILE: kernel/trace/trace_kprobe.c:61:
+	unsigned long retval;
+	if (probe_kernel_address(addr, retval))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#181: FILE: kernel/trace/trace_kprobe.c:68:
+	return get_argument_nth(regs, (unsigned)((unsigned long)num));

WARNING:LINE_SPACING: Missing a blank line after declarations
#218: FILE: kernel/trace/trace_kprobe.c:105:
+	struct symbol_cache *sc;
+	if (!sym || strlen(sym) == 0)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sc)...) over kzalloc(sizeof(struct symbol_cache)...)
#220: FILE: kernel/trace/trace_kprobe.c:107:
+	sc = kzalloc(sizeof(struct symbol_cache), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#238: FILE: kernel/trace/trace_kprobe.c:125:
+	struct symbol_cache *sc = data;
+	if (sc->addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#254: FILE: kernel/trace/trace_kprobe.c:141:
+	unsigned long addr;
+	addr = call_fetch(&ind->orig, regs);

CHECK:BRACES: braces {} should be used on all arms of this statement
#255: FILE: kernel/trace/trace_kprobe.c:142:
+	if (addr) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#258: FILE: kernel/trace/trace_kprobe.c:145:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: kernel/trace/trace_kprobe.c:241:
+	int i;
+	for (i = 0; i < tp->nr_args; i++)

CHECK:BRACES: braces {} should be used on all arms of this statement
#314: FILE: kernel/trace/trace_kprobe.c:299:
+	if (tmp) {
[...]
+	} else
[...]

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#316: FILE: kernel/trace/trace_kprobe.c:301:
+		ret = strict_strtol(tmp + 1, 0, offset);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: Unbalanced braces around else statement
#322: FILE: kernel/trace/trace_kprobe.c:307:
+	} else

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#339: FILE: kernel/trace/trace_kprobe.c:324:
+		ret = strict_strtoul(arg + 1, 10, &param);

CHECK:BRACES: braces {} should be used on all arms of this statement
#340: FILE: kernel/trace/trace_kprobe.c:325:
+		if (ret || param > PARAM_MAX_ARGS)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#342: FILE: kernel/trace/trace_kprobe.c:327:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#348: FILE: kernel/trace/trace_kprobe.c:333:
+		if (is_return && arg[1] == 'v') {
[...]
+		} else if (is_return && arg[1] == 'a') {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#354: FILE: kernel/trace/trace_kprobe.c:339:
+		} else

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#366: FILE: kernel/trace/trace_kprobe.c:351:
+		ret = strict_strtoul(arg + 1, 10, &param);

CHECK:BRACES: braces {} should be used on all arms of this statement
#367: FILE: kernel/trace/trace_kprobe.c:352:
+		if (ret || param > PARAM_MAX_STACK)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#369: FILE: kernel/trace/trace_kprobe.c:354:
+		else {

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#376: FILE: kernel/trace/trace_kprobe.c:361:
+			ret = strict_strtoul(arg + 1, 0, &param);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: kernel/trace/trace_kprobe.c:371:
+			ff->data = alloc_symbol_cache(arg + 1,
+							      offset);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#401: FILE: kernel/trace/trace_kprobe.c:386:
+		ret = strict_strtol(arg + 1, 0, &offset);

CHECK:BRACES: braces {} should be used on all arms of this statement
#408: FILE: kernel/trace/trace_kprobe.c:393:
+		if (tmp) {
[...]
+		} else
[...]

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*id)...) over kzalloc(sizeof(struct indirect_fetch_data)...)
#411: FILE: kernel/trace/trace_kprobe.c:396:
+			id = kzalloc(sizeof(struct indirect_fetch_data),

CHECK:BRACES: braces {} should be used on all arms of this statement
#417: FILE: kernel/trace/trace_kprobe.c:402:
+			if (ret)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#419: FILE: kernel/trace/trace_kprobe.c:404:
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#423: FILE: kernel/trace/trace_kprobe.c:408:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#505: FILE: kernel/trace/trace_kprobe.c:543:
+	if (ff->func == fetch_argument)
[...]
+	else if (ff->func == fetch_register) {
[...]
+	} else if (ff->func == fetch_stack)
[...]
+	else if (ff->func == fetch_memory)
[...]
+	else if (ff->func == fetch_symbol) {
[...]
+	} else if (ff->func == fetch_retvalue)
[...]
+	else if (ff->func == fetch_ip)
[...]
+	else if (ff->func == fetch_indirect) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#509: FILE: kernel/trace/trace_kprobe.c:547:
+		const char *name;
+		name = query_register_name((unsigned)((long)ff->data));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#509: FILE: kernel/trace/trace_kprobe.c:547:
+		name = query_register_name((unsigned)((long)ff->data));

WARNING:LINE_SPACING: Missing a blank line after declarations
#517: FILE: kernel/trace/trace_kprobe.c:555:
+		struct symbol_cache *sc = ff->data;
+		seq_printf(m, "@%s%+ld", sc->symbol, sc->offset);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#519: FILE: kernel/trace/trace_kprobe.c:557:
+		seq_printf(m, "rv");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#521: FILE: kernel/trace/trace_kprobe.c:559:
+		seq_printf(m, "ra");

WARNING:LINE_SPACING: Missing a blank line after declarations
#524: FILE: kernel/trace/trace_kprobe.c:562:
+		struct indirect_fetch_data *id = ff->data;
+		seq_printf(m, "%+ld(", id->offset);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#526: FILE: kernel/trace/trace_kprobe.c:564:
+		seq_printf(m, ")");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: kernel/trace/trace_kprobe.c:578:
+		seq_printf(m, "%c %s%+ld",
 			probe_is_return(tp) ? 'r' : 'p',

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: kernel/trace/trace_kprobe.c:582:
+		seq_printf(m, "%c 0x%p",
 			probe_is_return(tp) ? 'r' : 'p',

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#550: FILE: kernel/trace/trace_kprobe.c:586:
+		seq_printf(m, " ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#553: FILE: kernel/trace/trace_kprobe.c:589:
+	seq_printf(m, "\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#571: FILE: kernel/trace/trace_kprobe.c:688:
 }
+static void kprobe_trace_printk_1(unsigned long ip, struct trace_probe *tp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#579: FILE: kernel/trace/trace_kprobe.c:696:
+}
+static void kprobe_trace_printk_2(unsigned long ip, struct trace_probe *tp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#588: FILE: kernel/trace/trace_kprobe.c:705:
+}
+static void kprobe_trace_printk_3(unsigned long ip, struct trace_probe *tp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#598: FILE: kernel/trace/trace_kprobe.c:715:
+}
+static void kprobe_trace_printk_4(unsigned long ip, struct trace_probe *tp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#609: FILE: kernel/trace/trace_kprobe.c:726:
+}
+static void kprobe_trace_printk_5(unsigned long ip, struct trace_probe *tp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#621: FILE: kernel/trace/trace_kprobe.c:738:
+}
+static void kprobe_trace_printk_6(unsigned long ip, struct trace_probe *tp,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000145175.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 25 warnings, 26 checks, 574 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000145175.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
