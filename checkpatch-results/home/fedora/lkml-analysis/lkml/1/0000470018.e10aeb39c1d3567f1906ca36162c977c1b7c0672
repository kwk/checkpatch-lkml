WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
This is an update/cleanup based off a patch submitted by Daniel Ferenci a few years ago.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: include/net/x25.h:210:
+extern void x25_clear_forward_by_lci(unsigned int lci);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/net/x25.h:211:
+extern void x25_clear_forward_by_dev(struct net_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device *' should also have an identifier name
#65: FILE: include/net/x25.h:211:
+extern void x25_clear_forward_by_dev(struct net_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: include/net/x25.h:212:
+extern int x25_forward_data(int, struct x25_neigh *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#66: FILE: include/net/x25.h:212:
+extern int x25_forward_data(int, struct x25_neigh *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct x25_neigh *' should also have an identifier name
#66: FILE: include/net/x25.h:212:
+extern int x25_forward_data(int, struct x25_neigh *, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#66: FILE: include/net/x25.h:212:
+extern int x25_forward_data(int, struct x25_neigh *, struct sk_buff *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: include/net/x25.h:213:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct x25_address *' should also have an identifier name
#67: FILE: include/net/x25.h:213:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct x25_neigh *' should also have an identifier name
#67: FILE: include/net/x25.h:213:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#67: FILE: include/net/x25.h:213:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#67: FILE: include/net/x25.h:213:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: include/net/x25.h:214:
+extern int x25_forward_call(struct x25_address *, struct x25_neigh *,
+				struct sk_buff *, int);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#108: FILE: net/x25/af_x25.c:877:
+	if (sk != NULL && sk_acceptq_is_full(sk)) {
+		goto out_sock_put;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sk"
#108: FILE: net/x25/af_x25.c:877:
+	if (sk != NULL && sk_acceptq_is_full(sk)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#119: FILE: net/x25/af_x25.c:885:
+	if (sk == NULL) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#121: FILE: net/x25/af_x25.c:887:
+		if (x25_forward_call(&dest_addr, nb, skb, lci) > 0)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#164: FILE: net/x25/x25_dev.c:70:
+^I * ^IIts not a Call Request, nor is it a control frame.$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#169: FILE: net/x25/x25_dev.c:75:
+		if (frametype == X25_CLEAR_CONFIRMATION) {
+			x25_clear_forward_by_lci(lci);
+		}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#183: FILE: net/x25/x25_forward.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: net/x25/x25_forward.c:19:
+int x25_forward_call(struct x25_address *dest_addr, struct x25_neigh *from,
+			struct sk_buff *skb, int lci)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#211: FILE: net/x25/x25_forward.c:29:
+	if ((rt = x25_get_route(dest_addr)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#212: FILE: net/x25/x25_forward.c:30:
+	if ((rt = x25_get_route(dest_addr)) != NULL) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#213: FILE: net/x25/x25_forward.c:31:
+		if ((neigh_new = x25_get_neigh(rt->dev)) == NULL) {

WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#214: FILE: net/x25/x25_forward.c:32:
+			/* This shouldnt happen, if it occurs somehow
 			        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#223: FILE: net/x25/x25_forward.c:41:
+		if (rt->dev == from->dev) {
+			goto out_put_nb;
+		}

WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#228: FILE: net/x25/x25_forward.c:46:
+		 * established LCI? It shouldnt happen, just in case..
 		                       ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#234: FILE: net/x25/x25_forward.c:52:
+				printk(KERN_WARNING "X.25: call request for lci which is already registered!, transmitting but not registering new pair\n");

ERROR:SPACING: space required before the open brace '{'
#241: FILE: net/x25/x25_forward.c:59:
+		if (!same_lci){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#242: FILE: net/x25/x25_forward.c:60:
+			if ((new_frwd = kmalloc(sizeof(struct x25_forward),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_frwd)...) over kmalloc(sizeof(struct x25_forward)...)
#242: FILE: net/x25/x25_forward.c:60:
+			if ((new_frwd = kmalloc(sizeof(struct x25_forward),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: net/x25/x25_forward.c:61:
+			if ((new_frwd = kmalloc(sizeof(struct x25_forward),
+							GFP_ATOMIC)) == NULL){

ERROR:SPACING: space required before the open brace '{'
#256: FILE: net/x25/x25_forward.c:74:
+		if ( (skbn = skb_clone(skb, GFP_ATOMIC)) == NULL){

ERROR:SPACING: space prohibited after that open parenthesis '('
#256: FILE: net/x25/x25_forward.c:74:
+		if ( (skbn = skb_clone(skb, GFP_ATOMIC)) == NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#256: FILE: net/x25/x25_forward.c:74:
+		if ( (skbn = skb_clone(skb, GFP_ATOMIC)) == NULL){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#256: FILE: net/x25/x25_forward.c:74:
+		if ( (skbn = skb_clone(skb, GFP_ATOMIC)) == NULL){
+			goto out_put_nb;
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#263: FILE: net/x25/x25_forward.c:81:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: net/x25/x25_forward.c:86:
+^Ix25_route_put(rt);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#272: FILE: net/x25/x25_forward.c:90:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#273: FILE: net/x25/x25_forward.c:91:
+int x25_forward_data(int lci, struct x25_neigh *from, struct sk_buff *skb) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#274: FILE: net/x25/x25_forward.c:92:
+int x25_forward_data(int lci, struct x25_neigh *from, struct sk_buff *skb) {
+

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#287: FILE: net/x25/x25_forward.c:105:
+			if (from->dev == frwd->dev1) {
[...]
+			} else {
[...]

ERROR:SPACING: space prohibited after that open parenthesis '('
#297: FILE: net/x25/x25_forward.c:115:
+	if ( (nb = x25_get_neigh(peer)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#297: FILE: net/x25/x25_forward.c:115:
+	if ( (nb = x25_get_neigh(peer)) == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: net/x25/x25_forward.c:117:
+^I$

ERROR:SPACING: space required before the open brace '{'
#300: FILE: net/x25/x25_forward.c:118:
+	if ( (skbn = pskb_copy(skb, GFP_ATOMIC)) == NULL){

ERROR:SPACING: space prohibited after that open parenthesis '('
#300: FILE: net/x25/x25_forward.c:118:
+	if ( (skbn = pskb_copy(skb, GFP_ATOMIC)) == NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#300: FILE: net/x25/x25_forward.c:118:
+	if ( (skbn = pskb_copy(skb, GFP_ATOMIC)) == NULL){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#300: FILE: net/x25/x25_forward.c:118:
+	if ( (skbn = pskb_copy(skb, GFP_ATOMIC)) == NULL){
+		goto out;
+
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#303: FILE: net/x25/x25_forward.c:121:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#329: FILE: net/x25/x25_forward.c:147:
+
+

ERROR:SPACING: space required before the open brace '{'
#339: FILE: net/x25/x25_forward.c:157:
+		if ((fwd->dev1 == dev) || (fwd->dev2 == dev)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fwd->dev1 == dev'
#339: FILE: net/x25/x25_forward.c:157:
+		if ((fwd->dev1 == dev) || (fwd->dev2 == dev)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fwd->dev2 == dev'
#339: FILE: net/x25/x25_forward.c:157:
+		if ((fwd->dev1 == dev) || (fwd->dev2 == dev)){

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000470018.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 20 warnings, 18 checks, 289 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000470018.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
