WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#50: FILE: drivers/pcmcia/m8xx_pcmcia.c:116:
+#endif				/* !defined(CONFIG_PCMCIA_SLOT_A) && !defined(CONFIG_PCMCIA_SLOT_B) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: Unnecessary space before function pointer arguments
#93: FILE: drivers/pcmcia/m8xx_pcmcia.c:227:
+	void (*handler) (void *info, u32 events);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#122: FILE: drivers/pcmcia/m8xx_pcmcia.c:267:
+#define PCMCIA_BMT_LIMIT (15*4)	/* Bus Monitor Timeout value */
                             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vcc == 50'
#159: FILE: drivers/pcmcia/m8xx_pcmcia.c:320:
+	if (!((vcc == 50) || (vcc == 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vcc == 0'
#159: FILE: drivers/pcmcia/m8xx_pcmcia.c:320:
+	if (!((vcc == 50) || (vcc == 0)))

CHECK:SPACING: No space is necessary after a cast
#165: FILE: drivers/pcmcia/m8xx_pcmcia.c:325:
+	out_be32(((u32 *) RPX_CSR_ADDR),

CHECK:SPACING: No space is necessary after a cast
#166: FILE: drivers/pcmcia/m8xx_pcmcia.c:326:
+		 in_be32(((u32 *) RPX_CSR_ADDR)) & ~(BCSR1_PCVCTL4 |

CHECK:SPACING: No space is necessary after a cast
#174: FILE: drivers/pcmcia/m8xx_pcmcia.c:333:
+	out_be32(((u32 *) RPX_CSR_ADDR), in_be32(((u32 *) RPX_CSR_ADDR)) | reg);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vcc == 33'
#245: FILE: drivers/pcmcia/m8xx_pcmcia.c:378:
+		if ((vcc == 33) || (vcc == 50))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vcc == 50'
#245: FILE: drivers/pcmcia/m8xx_pcmcia.c:378:
+		if ((vcc == 33) || (vcc == 50))

CHECK:SPACING: No space is necessary after a cast
#255: FILE: drivers/pcmcia/m8xx_pcmcia.c:387:
+	out_be32((u32 *) BCSR1,

CHECK:SPACING: No space is necessary after a cast
#256: FILE: drivers/pcmcia/m8xx_pcmcia.c:388:
+		 in_be32((u32 *) BCSR1) & ~(BCSR1_PCCVCC_MASK |

CHECK:SPACING: No space is necessary after a cast
#261: FILE: drivers/pcmcia/m8xx_pcmcia.c:392:
+	out_be32((u32 *) BCSR1, in_be32((u32 *) BCSR1) | reg);

CHECK:SPACING: No space is necessary after a cast
#270: FILE: drivers/pcmcia/m8xx_pcmcia.c:401:
+	out_be32((u32 *) BCSR1, in_be32((u32 *) BCSR1) & ~BCSR1_PCCEN);

CHECK:SPACING: No space is necessary after a cast
#276: FILE: drivers/pcmcia/m8xx_pcmcia.c:406:
+	out_be32((u32 *) BCSR1, in_be32((u32 *) BCSR1) | BCSR1_PCCEN);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vcc == 33'
#344: FILE: drivers/pcmcia/m8xx_pcmcia.c:470:
+		if ((vcc == 33) || (vcc == 50))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vcc == 50'
#344: FILE: drivers/pcmcia/m8xx_pcmcia.c:470:
+		if ((vcc == 33) || (vcc == 50))

CHECK:SPACING: No space is necessary after a cast
#354: FILE: drivers/pcmcia/m8xx_pcmcia.c:479:
+	out_8((u8 *) MBX_CSR2_ADDR,

CHECK:SPACING: No space is necessary after a cast
#355: FILE: drivers/pcmcia/m8xx_pcmcia.c:480:
+	      in_8((u8 *) MBX_CSR2_ADDR) & ~(CSR2_VCC_MASK | CSR2_VPP_MASK));

CHECK:SPACING: No space is necessary after a cast
#359: FILE: drivers/pcmcia/m8xx_pcmcia.c:483:
+	out_8((u8 *) MBX_CSR2_ADDR, in_8((u8 *) MBX_CSR2_ADDR) | reg);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vcc == 33'
#430: FILE: drivers/pcmcia/m8xx_pcmcia.c:530:
+		if ((vcc == 33) || (vcc == 50))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vcc == 50'
#430: FILE: drivers/pcmcia/m8xx_pcmcia.c:530:
+		if ((vcc == 33) || (vcc == 50))

CHECK:CAMELCASE: Avoid CamelCase: <Vcc>
#523: FILE: drivers/pcmcia/m8xx_pcmcia.c:608:
+		    (s->state.Vcc | s->state.Vpp)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Vpp>
#523: FILE: drivers/pcmcia/m8xx_pcmcia.c:608:
+		    (s->state.Vcc | s->state.Vpp)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#529: FILE: drivers/pcmcia/m8xx_pcmcia.c:612:
+			   | M8XX_PCMCIA_CD1(i)))); */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPLIT_STRING: quoted string split across lines
#538: FILE: drivers/pcmcia/m8xx_pcmcia.c:619:
 		dprintk("slot %u: events = 0x%02x, pscr = 0x%08x, "
+			"pipr = 0x%08x\n", i, events, pscr, pipr);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'k == M8XX_SIZES_NO'
#556: FILE: drivers/pcmcia/m8xx_pcmcia.c:658:
+	if ((k == M8XX_SIZES_NO) || (m8xx_size_to_gray[k] == -1))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#596: FILE: drivers/pcmcia/m8xx_pcmcia.c:695:
+		printk("Max access time limit reached\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#654: FILE: drivers/pcmcia/m8xx_pcmcia.c:823:
+static int m8xx_set_socket(struct pcmcia_socket *sock, socket_state_t * state)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#666: FILE: drivers/pcmcia/m8xx_pcmcia.c:833:
+	dprintk("SetSocket(%d, flags %#3.3x, Vcc %d, Vpp %d, "
+		"io_irq %d, csc_mask %#2.2x)\n", lsock, state->flags,

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#679: FILE: drivers/pcmcia/m8xx_pcmcia.c:842:
+		out_be32(M8XX_PGCRX(lsock), in_be32(M8XX_PGCRX(lsock)) | M8XX_PGCRX_CXRESET);	/* active high */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#694: FILE: drivers/pcmcia/m8xx_pcmcia.c:858:
+		out_be32(M8XX_PGCRX(lsock), in_be32(M8XX_PGCRX(lsock)) & ~M8XX_PGCRX_CXOE);	/* active low */

CHECK:BRACES: Unbalanced braces around else statement
#745: FILE: drivers/pcmcia/m8xx_pcmcia.c:910:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pcmcia->pcmc_per'
#786: FILE: drivers/pcmcia/m8xx_pcmcia.c:954:
+	    in_be32(&pcmcia->
+		    pcmc_per) & (M8XX_PCMCIA_MASK(0) | M8XX_PCMCIA_MASK(1));

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:SPLIT_STRING: quoted string split across lines
#802: FILE: drivers/pcmcia/m8xx_pcmcia.c:979:
+	dprintk("SetIOMap(%d, %d, %#2.2x, %d ns, "
+		"%#4.4x-%#4.4x)\n", lsock, io->map, io->flags,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#810: FILE: drivers/pcmcia/m8xx_pcmcia.c:986:
+	if ((reg = m8xx_get_graycode(M8XX_SIZE)) == -1)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPLIT_STRING: quoted string split across lines
#857: FILE: drivers/pcmcia/m8xx_pcmcia.c:1022:
 		dprintk("Socket %u: Mapped io window %u at %#8.8x, "
+			"OR = %#8.8x.\n", lsock, io->map, w->br, w->or);

WARNING:SPLIT_STRING: quoted string split across lines
#904: FILE: drivers/pcmcia/m8xx_pcmcia.c:1059:
+	dprintk("SetMemMap(%d, %d, %#2.2x, %d ns, "
+		"%#5.5lx, %#5.5x)\n", lsock, mem->map, mem->flags,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#913: FILE: drivers/pcmcia/m8xx_pcmcia.c:1065:
 	    || (mem->card_start >= 0x04000000)
+	    || (mem->static_start & 0xfff)	/* 4KByte resolution */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#914: FILE: drivers/pcmcia/m8xx_pcmcia.c:1066:
+	    || (mem->static_start & 0xfff)	/* 4KByte resolution */
+	    ||(mem->card_start & 0xfff))

ERROR:SPACING: spaces required around that '||' (ctx:ExV)
#914: FILE: drivers/pcmcia/m8xx_pcmcia.c:1066:
+	    ||(mem->card_start & 0xfff))
 	    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#919: FILE: drivers/pcmcia/m8xx_pcmcia.c:1069:
+	if ((reg = m8xx_get_graycode(PCMCIA_MEM_WIN_SIZE)) == -1) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#920: FILE: drivers/pcmcia/m8xx_pcmcia.c:1070:
+		printk("Cannot set size to 0x%08x.\n", PCMCIA_MEM_WIN_SIZE);

WARNING:SPLIT_STRING: quoted string split across lines
#957: FILE: drivers/pcmcia/m8xx_pcmcia.c:1101:
 	dprintk("Socket %u: Mapped memory window %u at %#8.8x, "
+		"OR = %#8.8x.\n", lsock, mem->map, w->br, w->or);

WARNING:SPLIT_STRING: quoted string split across lines
#972: FILE: drivers/pcmcia/m8xx_pcmcia.c:1111:
 	dprintk("SetMemMap(%d, %d, %#2.2x, %d ns, "
+		"%#5.5lx, %#5.5x)\n", lsock, mem->map, mem->flags,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pcmcia"
#1021: FILE: drivers/pcmcia/m8xx_pcmcia.c:1172:
+	if (pcmcia == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "fsl,pq-pcmcia" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#1140: FILE: drivers/pcmcia/m8xx_pcmcia.c:1311:
+	 .compatible = "fsl,pq-pcmcia",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434645.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 16 warnings, 27 checks, 1072 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434645.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
