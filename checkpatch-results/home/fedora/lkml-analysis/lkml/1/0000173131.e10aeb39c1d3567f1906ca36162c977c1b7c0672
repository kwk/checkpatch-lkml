WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
This patch adds initial support for Asymmetric Logical Unit Assignment (ALUA) in

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#86: 
This is the initial support for implict non-transitional aware ALUA.
                                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#87: 
Functionality for both explict and implict transitional ALUA will be
                       ^^^^^^^

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#87: 
Functionality for both explict and implict transitional ALUA will be
                                   ^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#124: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: drivers/lio-core/target_core_alua.c:1:
+/*********************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'assigntment' may be misspelled - perhaps 'assignment'?
#132: FILE: drivers/lio-core/target_core_alua.c:4:
+ * This file contains SPC-3 compliant asymmetric logical unit assigntment (ALUA)
                                                               ^^^^^^^^^^^

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#150: FILE: drivers/lio-core/target_core_alua.c:22:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#151: FILE: drivers/lio-core/target_core_alua.c:23:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#174: FILE: drivers/lio-core/target_core_alua.c:46:
+extern int core_scsi3_emulate_report_target_port_groups (se_cmd_t *cmd)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: drivers/lio-core/target_core_alua.c:54:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#184: FILE: drivers/lio-core/target_core_alua.c:56:
+		printk(KERN_ERR "SPC-3 ALUA se_lun_t is NULL!\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#185: FILE: drivers/lio-core/target_core_alua.c:57:
+		return(PYX_TRANSPORT_LOGICAL_UNIT_COMMUNICATION_FAILURE);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#187: FILE: drivers/lio-core/target_core_alua.c:59:
+	if (!(port = lun->lun_sep)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#188: FILE: drivers/lio-core/target_core_alua.c:60:
+		printk(KERN_ERR "SPC-3 ALUA se_port_t is NULL\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#189: FILE: drivers/lio-core/target_core_alua.c:61:
+		return(PYX_TRANSPORT_LOGICAL_UNIT_COMMUNICATION_FAILURE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: drivers/lio-core/target_core_alua.c:85:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: drivers/lio-core/target_core_alua.c:122:
+^Ireturn(0);^I$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#250: FILE: drivers/lio-core/target_core_alua.c:122:
+	return(0);	

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#253: FILE: drivers/lio-core/target_core_alua.c:125:
+extern int core_setup_alua (se_device_t *dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: drivers/lio-core/target_core_alua.c:134:
+^I */ $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#266: FILE: drivers/lio-core/target_core_alua.c:138:
+		printk("%s: Using SPC_ALUA_PASSTHROUGH, no ALUA emulation\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: drivers/lio-core/target_core_alua.c:139:
+		printk("%s: Using SPC_ALUA_PASSTHROUGH, no ALUA emulation\n",
+				TRANSPORT(dev)->name);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#268: FILE: drivers/lio-core/target_core_alua.c:140:
+		return(0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#276: FILE: drivers/lio-core/target_core_alua.c:148:
+		printk("%s: Enabling ALUA Emulation for SPC-3 device\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: drivers/lio-core/target_core_alua.c:149:
+		printk("%s: Enabling ALUA Emulation for SPC-3 device\n",
+				TRANSPORT(dev)->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#280: FILE: drivers/lio-core/target_core_alua.c:152:
+		printk("%s: Disabling ALUA for SPC-2 device\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: drivers/lio-core/target_core_alua.c:153:
+		printk("%s: Disabling ALUA for SPC-2 device\n",
+				TRANSPORT(dev)->name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#292: FILE: drivers/lio-core/target_core_alua.h:1:
+#ifndef TARGET_CORE_ALUA_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: drivers/lio-core/target_core_alua.h:13:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: drivers/lio-core/target_core_alua.h:13:
+ $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#326: FILE: drivers/lio-core/target_core_alua.h:35:
+extern int core_scsi3_emulate_report_target_port_groups (struct se_cmd_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#326: FILE: drivers/lio-core/target_core_alua.h:35:
+extern int core_scsi3_emulate_report_target_port_groups (struct se_cmd_s *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#326: FILE: drivers/lio-core/target_core_alua.h:35:
+extern int core_scsi3_emulate_report_target_port_groups (struct se_cmd_s *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#327: FILE: drivers/lio-core/target_core_alua.h:36:
+extern int core_setup_alua (struct se_device_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: drivers/lio-core/target_core_alua.h:36:
+extern int core_setup_alua (struct se_device_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#327: FILE: drivers/lio-core/target_core_alua.h:36:
+extern int core_setup_alua (struct se_device_s *);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#338: FILE: drivers/lio-core/target_core_base.h:182:
+typedef enum {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#344: FILE: drivers/lio-core/target_core_base.h:188:
+typedef struct t10_alua_s {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: drivers/lio-core/target_core_base.h:189:
+^It10_alua_index_t alua_type;^I$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#396: FILE: drivers/lio-core/target_core_iblock.c:839:
+	return(SCSI_SPC_2); // Returns SPC-3 in Initiator Data

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: drivers/lio-core/target_core_transport.c:4062:
+^I^I^I */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: drivers/lio-core/target_core_transport.c:4640:
+^I^I^I^I^I(T10_ALUA(su_dev)->alua_type == SPC3_ALUA_EMULATED) ?^I^I$

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#455: FILE: drivers/lio-core/target_core_transport.c:4640:
+					(T10_ALUA(su_dev)->alua_type == SPC3_ALUA_EMULATED) ?		

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000173131.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 23 warnings, 5 checks, 333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000173131.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
