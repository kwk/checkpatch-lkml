WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#59: FILE: drivers/base/sys.c:491:
+	unsigned long new = simple_strtoul(buf, &end, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#60: FILE: drivers/base/sys.c:492:
+	unsigned long new = simple_strtoul(buf, &end, 0);
+	if (end == buf)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#72: FILE: drivers/base/sys.c:504:
+	struct sysdev_ext_attribute *ea = to_ext_attr(attr);
+	return snprintf(buf, PAGE_SIZE, "%lx\n", *(unsigned long *)(ea->var));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: drivers/base/sys.c:509:
+ssize_t sysdev_store_int(struct sys_device *sysdev,
+			   struct sysdev_attribute *attr,

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#82: FILE: drivers/base/sys.c:514:
+	long new = simple_strtol(buf, &end, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#83: FILE: drivers/base/sys.c:515:
+	long new = simple_strtol(buf, &end, 0);
+	if (end == buf || new > INT_MAX || new < INT_MIN)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: drivers/base/sys.c:523:
+ssize_t sysdev_show_int(struct sys_device *sysdev,
+			  struct sysdev_attribute *attr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#95: FILE: drivers/base/sys.c:527:
+	struct sysdev_ext_attribute *ea = to_ext_attr(attr);
+	return snprintf(buf, PAGE_SIZE, "%d\n", *(int *)(ea->var));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/sysdev.h:134:
+extern ssize_t sysdev_show_ulong(struct sys_device *, struct sysdev_attribute *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sys_device *' should also have an identifier name
#119: FILE: include/linux/sysdev.h:134:
+extern ssize_t sysdev_show_ulong(struct sys_device *, struct sysdev_attribute *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_attribute *' should also have an identifier name
#119: FILE: include/linux/sysdev.h:134:
+extern ssize_t sysdev_show_ulong(struct sys_device *, struct sysdev_attribute *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#119: FILE: include/linux/sysdev.h:134:
+extern ssize_t sysdev_show_ulong(struct sys_device *, struct sysdev_attribute *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: include/linux/sysdev.h:135:
+extern ssize_t sysdev_show_ulong(struct sys_device *, struct sysdev_attribute *,
+				char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/linux/sysdev.h:136:
+extern ssize_t sysdev_store_ulong(struct sys_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sys_device *' should also have an identifier name
#121: FILE: include/linux/sysdev.h:136:
+extern ssize_t sysdev_store_ulong(struct sys_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_attribute *' should also have an identifier name
#121: FILE: include/linux/sysdev.h:136:
+extern ssize_t sysdev_store_ulong(struct sys_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#121: FILE: include/linux/sysdev.h:136:
+extern ssize_t sysdev_store_ulong(struct sys_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#121: FILE: include/linux/sysdev.h:136:
+extern ssize_t sysdev_store_ulong(struct sys_device *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: include/linux/sysdev.h:137:
+extern ssize_t sysdev_store_ulong(struct sys_device *,
+			struct sysdev_attribute *, const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/sysdev.h:138:
+extern ssize_t sysdev_show_int(struct sys_device *, struct sysdev_attribute *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sys_device *' should also have an identifier name
#123: FILE: include/linux/sysdev.h:138:
+extern ssize_t sysdev_show_int(struct sys_device *, struct sysdev_attribute *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_attribute *' should also have an identifier name
#123: FILE: include/linux/sysdev.h:138:
+extern ssize_t sysdev_show_int(struct sys_device *, struct sysdev_attribute *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#123: FILE: include/linux/sysdev.h:138:
+extern ssize_t sysdev_show_int(struct sys_device *, struct sysdev_attribute *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: include/linux/sysdev.h:139:
+extern ssize_t sysdev_show_int(struct sys_device *, struct sysdev_attribute *,
+				char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/sysdev.h:140:
+extern ssize_t sysdev_store_int(struct sys_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sys_device *' should also have an identifier name
#125: FILE: include/linux/sysdev.h:140:
+extern ssize_t sysdev_store_int(struct sys_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_attribute *' should also have an identifier name
#125: FILE: include/linux/sysdev.h:140:
+extern ssize_t sysdev_store_int(struct sys_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#125: FILE: include/linux/sysdev.h:140:
+extern ssize_t sysdev_store_int(struct sys_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#125: FILE: include/linux/sysdev.h:140:
+extern ssize_t sysdev_store_int(struct sys_device *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: include/linux/sysdev.h:141:
+extern ssize_t sysdev_store_int(struct sys_device *,
+			struct sysdev_attribute *, const char *, size_t);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#131: FILE: include/linux/sysdev.h:146:
+#define SYSDEV_ULONG_ATTR(_name, _mode, _var)			\
+	struct sysdev_ext_attribute attr_##_name = 		\
+		_SYSDEV_ULONG_ATTR(_name, _mode, _var);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#132: FILE: include/linux/sysdev.h:147:
+^Istruct sysdev_ext_attribute attr_##_name = ^I^I\$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#137: FILE: include/linux/sysdev.h:152:
+#define SYSDEV_INT_ATTR(_name, _mode, _var)			\
+	struct sysdev_ext_attribute attr_##_name = 		\
+		_SYSDEV_INT_ATTR(_name, _mode, _var);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: include/linux/sysdev.h:153:
+^Istruct sysdev_ext_attribute attr_##_name = ^I^I\$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000251243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 24 warnings, 10 checks, 90 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000251243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
