WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
pages that are merged are marked as readonly and are COWed when any application

WARNING:TYPO_SPELLING: 'registred' may be misspelled - perhaps 'registered'?
#44: 
ksm scan just memory areas that were registred to be scanned by it.
                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#67: FILE: drivers/Kconfig:109:
+config KSM
+	bool "KSM driver support"
+	help
+		ksm is driver for merging identical pages between applciations

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#73: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: include/linux/ksm.h:1:
+#ifndef __LINUX_KSM_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#94: FILE: include/linux/ksm.h:17:
+	__u64 addr; /* the begining of the virtual address */
 	                   ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: include/linux/ksm.h:41:
+^I^I^I^I^I      struct ksm_kthread_info) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#120: FILE: include/linux/ksm.h:43:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#172: FILE: mm/ksm.c:1:
+/*

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#234: FILE: mm/ksm.c:63:
+	unsigned long addr;	/* the begining of the virtual address */
 	                   	       ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: mm/ksm.c:160:
+	page_hash_item_cache = kmem_cache_create("ksm_page_hash_item",
+					    sizeof(struct page_hash_item), 0, 0,

WARNING:LINE_SPACING: Missing a blank line after declarations
#483: FILE: mm/ksm.c:312:
+	void *addr = kmap_atomic(page, KM_USER0);
+	hash = jhash(addr, PAGE_SIZE, 17);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*slot)...) over kzalloc(sizeof(struct ksm_mem_slot)...)
#516: FILE: mm/ksm.c:345:
+	slot = kzalloc(sizeof(struct ksm_mem_slot), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#544: FILE: mm/ksm.c:373:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#570: FILE: mm/ksm.c:399:
+static int ksm_sma_release(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#580: FILE: mm/ksm.c:409:
+static long ksm_sma_ioctl(struct file *filp,
                                        ^^^^

WARNING:SIZEOF_PARENTHESIS: sizeof ksm_memory_region should be sizeof(ksm_memory_region)
#593: FILE: mm/ksm.c:422:
+				   sizeof ksm_memory_region))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: mm/ksm.c:459:
+static void update_hash(struct ksm_scan *ksm_scan,
+		       unsigned long hash_index)

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#638: FILE: mm/ksm.c:467:
+	slot = ksm_scan->slot_index;;

WARNING:TYPO_SPELLING: 'diffrent' may be misspelled - perhaps 'different'?
#732: FILE: mm/ksm.c:561:
+	 * and then recreated and have diffrent sha1 value.
 	                               ^^^^^^^^

WARNING:TYPO_SPELLING: 'beacuse' may be misspelled - perhaps 'because'?
#733: FILE: mm/ksm.c:562:
+	 * (swapping as for now is not an issue, beacuse KsmPages cannot be
 	                                         ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#755: FILE: mm/ksm.c:584:
+		char *old_addr, *new_addr;
+		old_addr = kmap_atomic(oldpage, KM_USER0);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#757: FILE: mm/ksm.c:586:
+		r = !memcmp(old_addr+PAGECMP_OFFSET, new_addr+PAGECMP_OFFSET, PAGE_SIZE-PAGECMP_OFFSET);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#757: FILE: mm/ksm.c:586:
+		r = !memcmp(old_addr+PAGECMP_OFFSET, new_addr+PAGECMP_OFFSET, PAGE_SIZE-PAGECMP_OFFSET);
 		                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#757: FILE: mm/ksm.c:586:
+		r = !memcmp(old_addr+PAGECMP_OFFSET, new_addr+PAGECMP_OFFSET, PAGE_SIZE-PAGECMP_OFFSET);
 		                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#757: FILE: mm/ksm.c:586:
+		r = !memcmp(old_addr+PAGECMP_OFFSET, new_addr+PAGECMP_OFFSET, PAGE_SIZE-PAGECMP_OFFSET);
 		                                                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: mm/ksm.c:664:
+^I * If page2 isn't shared (it isn't PageKsm) we have to allocate a new $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#905: FILE: mm/ksm.c:734:
+^I */ $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#936: FILE: mm/ksm.c:765:
+		if (calc_hash_index(hash_page[0]) == hash_index) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'vaild' may be misspelled - perhaps 'valid'?
#1004: FILE: mm/ksm.c:833:
+ * update slot_index so it point to vaild data, it is possible that by
                                     ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1049: FILE: mm/ksm.c:878:
+		if (is_present_pte(slot->mm, slot->addr +
[...]
+		} else
[...]

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#1052: FILE: mm/ksm.c:881:
+					     ksm_scan->page_index * PAGE_SIZE ,
 					                                      ^

CHECK:BRACES: Unbalanced braces around else statement
#1061: FILE: mm/ksm.c:890:
+		} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1079: FILE: mm/ksm.c:908:
+static int ksm_scan_release(struct inode *inode, struct file *filp)
                                                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1087: FILE: mm/ksm.c:916:
+static long ksm_scan_ioctl(struct file *filp,
                                         ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1109: FILE: mm/ksm.c:938:
+static struct file_operations ksm_sma_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ksm_sma)...) over kmalloc(sizeof(struct ksm_sma)...)
#1120: FILE: mm/ksm.c:949:
+	ksm_sma = kmalloc(sizeof(struct ksm_sma), GFP_KERNEL);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1137: FILE: mm/ksm.c:966:
+static struct file_operations ksm_scan_fops = {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ksm_scan)...) over kzalloc(sizeof(struct ksm_scan)...)
#1147: FILE: mm/ksm.c:976:
+	ksm_scan = kzalloc(sizeof(struct ksm_scan), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1218: FILE: mm/ksm.c:1047:
+static long ksm_dev_ioctl(struct file *filp,
                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1263: FILE: mm/ksm.c:1092:
+static int ksm_dev_open(struct inode *inode, struct file *filp)
                                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1269: FILE: mm/ksm.c:1098:
+static int ksm_dev_release(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1275: FILE: mm/ksm.c:1104:
+static struct file_operations ksm_chardev_ops = {

ERROR:SPACING: space required before the open parenthesis '('
#1291: FILE: mm/ksm.c:1120:
+		if(kthread_run) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1291: FILE: mm/ksm.c:1120:
+		if(kthread_run) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1298: FILE: mm/ksm.c:1127:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1332: FILE: mm/ksm.c:1161:
+		printk(KERN_ERR "ksm: creating kthread failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1338: FILE: mm/ksm.c:1167:
+		printk(KERN_ERR "ksm: misc device register failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1342: FILE: mm/ksm.c:1171:
+	printk(KERN_WARNING "ksm loaded\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 30 warnings, 14 checks, 1284 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
