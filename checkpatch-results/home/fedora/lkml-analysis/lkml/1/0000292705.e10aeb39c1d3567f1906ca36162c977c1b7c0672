WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
All hlist_for_each_entry_xxx() macros require the "pos" argument, which is not

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#281: FILE: include/linux/list.h:933:
+#define hlist_for_each_entry(pos, head, member)				\
+	for (pos = (void*)(head)->first; pos && ({			\
+		prefetch(((struct hlist_node*)pos)->next);		\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); pos = (void*)(pos)->member.next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#281: FILE: include/linux/list.h:933:
+#define hlist_for_each_entry(pos, head, member)				\
+	for (pos = (void*)(head)->first; pos && ({			\
+		prefetch(((struct hlist_node*)pos)->next);		\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); pos = (void*)(pos)->member.next)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#282: FILE: include/linux/list.h:934:
+	for (pos = (void*)(head)->first; pos && ({			\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#283: FILE: include/linux/list.h:935:
+		prefetch(((struct hlist_node*)pos)->next);		\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#284: FILE: include/linux/list.h:936:
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#285: FILE: include/linux/list.h:937:
+	     }); pos = (void*)(pos)->member.next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#299: FILE: include/linux/list.h:944:
+#define hlist_for_each_entry_continue(pos, member)			\
+	for (; (pos = (void*)(pos)->member.next) && ({			\
+		prefetch(((struct hlist_node*)pos)->next);		\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#299: FILE: include/linux/list.h:944:
+#define hlist_for_each_entry_continue(pos, member)			\
+	for (; (pos = (void*)(pos)->member.next) && ({			\
+		prefetch(((struct hlist_node*)pos)->next);		\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#299: FILE: include/linux/list.h:944:
+#define hlist_for_each_entry_continue(pos, member)			\
+	for (; (pos = (void*)(pos)->member.next) && ({			\
+		prefetch(((struct hlist_node*)pos)->next);		\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); )

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#300: FILE: include/linux/list.h:945:
+	for (; (pos = (void*)(pos)->member.next) && ({			\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#301: FILE: include/linux/list.h:946:
+		prefetch(((struct hlist_node*)pos)->next);		\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#302: FILE: include/linux/list.h:947:
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#303: FILE: include/linux/list.h:948:
+	     }); )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#316: FILE: include/linux/list.h:955:
+#define hlist_for_each_entry_from(pos, member)				\
+	for (pos = pos ? (void*)&(pos)->member.next : pos; pos && ({	\
+		prefetch(((struct hlist_node*)pos)->next);		\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); pos = (void*)(pos)->member.next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#316: FILE: include/linux/list.h:955:
+#define hlist_for_each_entry_from(pos, member)				\
+	for (pos = pos ? (void*)&(pos)->member.next : pos; pos && ({	\
+		prefetch(((struct hlist_node*)pos)->next);		\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); pos = (void*)(pos)->member.next)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#316: FILE: include/linux/list.h:955:
+#define hlist_for_each_entry_from(pos, member)				\
+	for (pos = pos ? (void*)&(pos)->member.next : pos; pos && ({	\
+		prefetch(((struct hlist_node*)pos)->next);		\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); pos = (void*)(pos)->member.next)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#317: FILE: include/linux/list.h:956:
+	for (pos = pos ? (void*)&(pos)->member.next : pos; pos && ({	\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#318: FILE: include/linux/list.h:957:
+		prefetch(((struct hlist_node*)pos)->next);		\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#319: FILE: include/linux/list.h:958:
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#320: FILE: include/linux/list.h:959:
+	     }); pos = (void*)(pos)->member.next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#336: FILE: include/linux/list.h:968:
+#define hlist_for_each_entry_safe(pos, n, head, member)			\
+	for (pos = (void*)(head)->first; pos && ({			\
+		n = ((struct hlist_node*)pos)->next; prefetch(n);	\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); pos = (void*)n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#336: FILE: include/linux/list.h:968:
+#define hlist_for_each_entry_safe(pos, n, head, member)			\
+	for (pos = (void*)(head)->first; pos && ({			\
+		n = ((struct hlist_node*)pos)->next; prefetch(n);	\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); pos = (void*)n)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#337: FILE: include/linux/list.h:969:
+	for (pos = (void*)(head)->first; pos && ({			\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#338: FILE: include/linux/list.h:970:
+		n = ((struct hlist_node*)pos)->next; prefetch(n);	\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#339: FILE: include/linux/list.h:971:
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#340: FILE: include/linux/list.h:972:
+	     }); pos = (void*)n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#355: FILE: include/linux/list.h:984:
+#define hlist_for_each_entry_rcu(pos, head, member)			\
+	for (pos = (void*)(head)->first; rcu_dereference(pos) && ({	\
+		prefetch(((struct hlist_node*)pos)->next);		\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); pos = (void*)(pos)->member.next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#355: FILE: include/linux/list.h:984:
+#define hlist_for_each_entry_rcu(pos, head, member)			\
+	for (pos = (void*)(head)->first; rcu_dereference(pos) && ({	\
+		prefetch(((struct hlist_node*)pos)->next);		\
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\
+	     }); pos = (void*)(pos)->member.next)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#356: FILE: include/linux/list.h:985:
+	for (pos = (void*)(head)->first; rcu_dereference(pos) && ({	\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#357: FILE: include/linux/list.h:986:
+		prefetch(((struct hlist_node*)pos)->next);		\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#358: FILE: include/linux/list.h:987:
+		pos = hlist_entry((void*)pos, typeof(*pos), member); 1;	\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#359: FILE: include/linux/list.h:988:
+	     }); pos = (void*)(pos)->member.next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tpos' - possible side-effects?
#363: FILE: include/linux/list.h:992:
+#define __hlist_for_each_entry(tpos, pos, head, member)			 \
+	for (pos = (head)->first;					 \
+	     pos && ({ prefetch(pos->next); 1;}) &&			 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
+	     pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#363: FILE: include/linux/list.h:992:
+#define __hlist_for_each_entry(tpos, pos, head, member)			 \
+	for (pos = (head)->first;					 \
+	     pos && ({ prefetch(pos->next); 1;}) &&			 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
+	     pos = pos->next)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#365: FILE: include/linux/list.h:994:
+	     pos && ({ prefetch(pos->next); 1;}) &&			 \
 	                                     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#366: FILE: include/linux/list.h:995:
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
 		                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tpos' - possible side-effects?
#369: FILE: include/linux/list.h:998:
+#define __hlist_for_each_entry_continue(tpos, pos, member)		 \
+	for (pos = (pos)->next;						 \
+	     pos && ({ prefetch(pos->next); 1;}) &&			 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
+	     pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#369: FILE: include/linux/list.h:998:
+#define __hlist_for_each_entry_continue(tpos, pos, member)		 \
+	for (pos = (pos)->next;						 \
+	     pos && ({ prefetch(pos->next); 1;}) &&			 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
+	     pos = pos->next)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#371: FILE: include/linux/list.h:1000:
+	     pos && ({ prefetch(pos->next); 1;}) &&			 \
 	                                     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#372: FILE: include/linux/list.h:1001:
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
 		                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tpos' - possible side-effects?
#375: FILE: include/linux/list.h:1004:
+#define __hlist_for_each_entry_from(tpos, pos, member)			 \
+	for (; pos && ({ prefetch(pos->next); 1;}) &&			 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
+	     pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#375: FILE: include/linux/list.h:1004:
+#define __hlist_for_each_entry_from(tpos, pos, member)			 \
+	for (; pos && ({ prefetch(pos->next); 1;}) &&			 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
+	     pos = pos->next)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pos' may be better as '(pos)' to avoid precedence issues
#375: FILE: include/linux/list.h:1004:
+#define __hlist_for_each_entry_from(tpos, pos, member)			 \
+	for (; pos && ({ prefetch(pos->next); 1;}) &&			 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
+	     pos = pos->next)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#376: FILE: include/linux/list.h:1005:
+	for (; pos && ({ prefetch(pos->next); 1;}) &&			 \
 	                                       ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#377: FILE: include/linux/list.h:1006:
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
 		                                                    ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: include/linux/list.h:1009:
+#define __hlist_for_each_entry_safe(tpos, pos, n, head, member) ^I \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tpos' - possible side-effects?
#380: FILE: include/linux/list.h:1009:
+#define __hlist_for_each_entry_safe(tpos, pos, n, head, member) 	 \
+	for (pos = (head)->first;					 \
+	     pos && ({ n = pos->next; 1; }) && 				 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
+	     pos = n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#380: FILE: include/linux/list.h:1009:
+#define __hlist_for_each_entry_safe(tpos, pos, n, head, member) 	 \
+	for (pos = (head)->first;					 \
+	     pos && ({ n = pos->next; 1; }) && 				 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
+	     pos = n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#380: FILE: include/linux/list.h:1009:
+#define __hlist_for_each_entry_safe(tpos, pos, n, head, member) 	 \
+	for (pos = (head)->first;					 \
+	     pos && ({ n = pos->next; 1; }) && 				 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
+	     pos = n)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#382: FILE: include/linux/list.h:1011:
+^I     pos && ({ n = pos->next; 1; }) && ^I^I^I^I \$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#383: FILE: include/linux/list.h:1012:
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \
 		                                                    ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#386: FILE: include/linux/list.h:1015:
+#define __hlist_for_each_entry_rcu(tpos, pos, head, member)		 \
 	for (pos = (head)->first;					 \
 	     rcu_dereference(pos) && ({ prefetch(pos->next); 1;}) &&	 \
 		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tpos' - possible side-effects?
#386: FILE: include/linux/list.h:1015:
+#define __hlist_for_each_entry_rcu(tpos, pos, head, member)		 \
 	for (pos = (head)->first;					 \
 	     rcu_dereference(pos) && ({ prefetch(pos->next); 1;}) &&	 \
 		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#386: FILE: include/linux/list.h:1015:
+#define __hlist_for_each_entry_rcu(tpos, pos, head, member)		 \
 	for (pos = (head)->first;					 \
 	     rcu_dereference(pos) && ({ prefetch(pos->next); 1;}) &&	 \
 		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1;}); \

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000292705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 28 errors, 3 warnings, 24 checks, 122 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000292705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
