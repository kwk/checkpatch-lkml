WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#113: FILE: security/integrity/ima/Kconfig:36:
+config IMA_LSM_RULES
+	bool "Enable LSM measurement policy rules"
+	depends on IMA && (SECURITY_SELINUX || SECURITY_SMACK)
+	default y
+	help
+	  Disabling this option will not enforce LSM based policy rules.

Kconfig symbols should have a help text which fully describes
it.

CHECK:CAMELCASE: Avoid CamelCase: <bufStart>
#158: FILE: security/integrity/ima/ima_fs.c:283:
+static char *get_tag(char *bufStart, char *bufEnd, char delimiter, int *taglen)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <bufEnd>
#158: FILE: security/integrity/ima/ima_fs.c:283:
+static char *get_tag(char *bufStart, char *bufEnd, char delimiter, int *taglen)

CHECK:BRACES: braces {} should be used on all arms of this statement
#165: FILE: security/integrity/ima/ima_fs.c:290:
+		if (*bufp == ' ')	/* skip blanks */
[...]
+		else if (*bufp == '#') {	/* skip comment */
[...]
+		} else if (*bufp == '\n')	/* skip newline */
[...]
+		else if (*bufp == '\t')	/* skip tabs */
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited before semicolon
#166: FILE: security/integrity/ima/ima_fs.c:291:
+			while ((*bufp == ' ') && (bufp++ < bufEnd)) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#166: FILE: security/integrity/ima/ima_fs.c:291:
+			while ((*bufp == ' ') && (bufp++ < bufEnd)) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited before semicolon
#168: FILE: security/integrity/ima/ima_fs.c:293:
+			while ((*bufp != '\n') && (bufp++ < bufEnd)) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#168: FILE: security/integrity/ima/ima_fs.c:293:
+			while ((*bufp != '\n') && (bufp++ < bufEnd)) ;

CHECK:BRACES: braces {} should be used on all arms of this statement
#225: FILE: security/integrity/ima/ima_fs.c:350:
+	if (strncmp(datap, "measure", 7) == 0) {
[...]
+	} else if (strncmp(datap, "dont_measure", 12) == 0)
[...]
+	else			/* bad format */
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#237: FILE: security/integrity/ima/ima_fs.c:362:
+		if (strncmp(tag, "obj_user=", 9) == 0)
[...]
+		else if (strncmp(tag, "obj_role=", 9) == 0)
[...]
+		else if (strncmp(tag, "obj_type=", 9) == 0)
[...]
+		else if (strncmp(tag, "subj_user=", 10) == 0)
[...]
+		else if (strncmp(tag, "subj_role=", 10) == 0)
[...]
+		else if (strncmp(tag, "subj_type=", 10) == 0)
[...]
+		else if (strncmp(tag, "func=", 5) == 0)
[...]
+		else if (strncmp(tag, "mask=", 5) == 0)
[...]
+		else if (strncmp(tag, "fsmagic=", 8) == 0)
[...]
+		else if (strncmp(tag, "uid=", 4) == 0)
[...]
+		else {		/* bad format */
[...]

CHECK:BRACES: Unbalanced braces around else statement
#257: FILE: security/integrity/ima/ima_fs.c:382:
+		else {		/* bad format */

WARNING:CONST_STRUCT: struct file_operations should normally be const
#289: FILE: security/integrity/ima/ima_fs.c:414:
+static struct file_operations ima_measure_policy_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP | S_IWUSR' are not preferred. Consider using octal permissions '0640'.
#301: FILE: security/integrity/ima/ima_fs.c:453:
+					    S_IRUSR | S_IRGRP | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#549: FILE: security/integrity/ima/ima_policy.c:304:
+		rc = strict_strtoul(fsmagic, 16, &entry->fsmagic);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#559: FILE: security/integrity/ima/ima_policy.c:314:
+		rc = strict_strtoul(uid, 10, &lnum);

CHECK:BRACES: braces {} should be used on all arms of this statement
#560: FILE: security/integrity/ima/ima_policy.c:315:
+		if (rc)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#562: FILE: security/integrity/ima/ima_policy.c:317:
+		else {

CHECK:SPACING: No space is necessary after a cast
#563: FILE: security/integrity/ima/ima_policy.c:318:
+			entry->uid = (uid_t) lnum;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197102.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 8 warnings, 9 checks, 507 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197102.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
