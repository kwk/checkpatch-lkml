WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#29: 
 - skb reserves are used for incomming packets,
                             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/net/sock.h:438:
+extern int rx_emergency_get(int bytes);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/net/sock.h:439:
+extern int rx_emergency_get_overcommit(int bytes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/net/sock.h:440:
+extern void rx_emergency_put(int bytes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: include/net/sock.h:442:
+extern void sk_adjust_memalloc(int socks, int tx_reserve_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/net/sock.h:443:
+extern void skb_reserve_memory(int skb_reserve_bytes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/net/sock.h:444:
+extern void aux_reserve_memory(int aux_reserve_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/net/sock.h:445:
+extern int sk_set_vmio(struct sock *sk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/net/sock.h:446:
+extern int sk_clear_vmio(struct sock *sk);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#121: FILE: net/core/sock.c:211:
+/*
+ * is there room for another emergency packet?

WARNING:LINE_SPACING: Missing a blank line after declarations
#129: FILE: net/core/sock.c:219:
+	int thresh = (3 * skb_reserve_bytes) / 2;
+	if (nr < thresh || overcommit)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#149: FILE: net/core/sock.c:239:
+	int size = roundup_pow_of_two(bytes);
+	return atomic_sub(size, &rx_emergency_bytes);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#172: FILE: net/core/sock.c:262:
+	BUG_ON(nr_socks < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: net/core/sock.c:267:
+		int rx_pages = 2 * skb_reserve_pages + aux_reserve_pages;
+		reserve += rx_pages - rx_net_reserve;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#191: FILE: net/core/sock.c:281:
+/*
+ * tiny helper functions to track the memory reserves

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#219: FILE: net/core/sock.c:309:
+	BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#233: FILE: net/core/sock.c:323:
+	int set = sock_flag(sk, SOCK_VMIO);
+	if (set) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464829.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 8 checks, 204 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464829.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
