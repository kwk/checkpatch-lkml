WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
http://oss.oracle.com/osswiki/OCFS2/DesignDocs/IndexedEATrees. I only had to

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#117: FILE: fs/ocfs2/xattr.c:1794:
+	BUG_ON(!(xb_flags & OCFS2_XATTR_INDEXED) ||

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: fs/ocfs2/xattr.c:1795:
+	BUG_ON(!(xb_flags & OCFS2_XATTR_INDEXED) ||
+		le16_to_cpu(el->l_next_free_rec) != 0);

CHECK:BRACES: Unbalanced braces around else statement
#155: FILE: fs/ocfs2/xattr.c:1919:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#321: FILE: fs/ocfs2/xattr.c:2671:
+		if (OCFS2_XATTR_BUCKET_SIZE != blocksize) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: fs/ocfs2/xattr.c:2673:
+			ret = ocfs2_read_blocks(OCFS2_SB(inode->i_sb),
+					xs->bucket.bhs[0]->b_blocknr + 1,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#360: FILE: fs/ocfs2/xattr.c:2710:
+	BUG_ON(xb_flags & OCFS2_XATTR_INDEXED);

WARNING:TYPO_SPELLING: 'beteen' may be misspelled - perhaps 'between'?
#505: FILE: fs/ocfs2/xattr.c:2855:
+ * holes beteen name/value pairs.
          ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#525: FILE: fs/ocfs2/xattr.c:2875:
+	bhs = kzalloc(sizeof(struct buffer_head *) * blk_per_bucket,
+			GFP_NOFS);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: fs/ocfs2/xattr.c:2876:
+	bhs = kzalloc(sizeof(struct buffer_head *) * blk_per_bucket,
+			GFP_NOFS);

WARNING:SPLIT_STRING: quoted string split across lines
#573: FILE: fs/ocfs2/xattr.c:2923:
+	mlog(0, "adjust xattr bucket in %llu, count = %u, "
+	     "xh_free_start = %u, xh_name_value_len = %u.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#592: FILE: fs/ocfs2/xattr.c:2942:
+			value_len = OCFS2_XATTR_SIZE(

WARNING:SPLIT_STRING: quoted string split across lines
#614: FILE: fs/ocfs2/xattr.c:2964:
+		mlog_bug_on_msg(end < offset + len, "Defrag check failed for "
+				"bucket %llu\n", (unsigned long long)blkno);

WARNING:SPLIT_STRING: quoted string split across lines
#620: FILE: fs/ocfs2/xattr.c:2970:
+	mlog_bug_on_msg(xh_free_start > end, "Defrag check failed for "
+			"bucket %llu\n", (unsigned long long)blkno);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#681: FILE: fs/ocfs2/xattr.c:3031:
+	BUG_ON(le16_to_cpu(xh->xh_num_buckets) < num_buckets);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#682: FILE: fs/ocfs2/xattr.c:3032:
+	BUG_ON(OCFS2_XATTR_BUCKET_SIZE == osb->s_clustersize);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#682: FILE: fs/ocfs2/xattr.c:3032:
+	BUG_ON(OCFS2_XATTR_BUCKET_SIZE == osb->s_clustersize);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#713: FILE: fs/ocfs2/xattr.c:3063:
+		old_bh = new_bh = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#746: FILE: fs/ocfs2/xattr.c:3096:
+				*first_hash = le32_to_cpu(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bhs[i]"
#791: FILE: fs/ocfs2/xattr.c:3141:
+		if (bhs[i] == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#989: FILE: fs/ocfs2/xattr.c:3339:
+	BUG_ON(s_blkno == t_blkno);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#994: FILE: fs/ocfs2/xattr.c:3344:
+	s_bhs = kzalloc(sizeof(struct buffer_head *) * blk_per_bucket,
+			GFP_NOFS);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1003: FILE: fs/ocfs2/xattr.c:3353:
+	t_bhs = kzalloc(sizeof(struct buffer_head *) * blk_per_bucket,
+			GFP_NOFS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1140: FILE: fs/ocfs2/xattr.c:3490:
+	BUG_ON(OCFS2_XATTR_BUCKET_SIZE < OCFS2_SB(inode->i_sb)->s_clustersize);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1140: FILE: fs/ocfs2/xattr.c:3490:
+	BUG_ON(OCFS2_XATTR_BUCKET_SIZE < OCFS2_SB(inode->i_sb)->s_clustersize);

WARNING:TYPO_SPELLING: 'upate' may be misspelled - perhaps 'update'?
#1173: FILE: fs/ocfs2/xattr.c:3523:
+ *       new one. This time, we don't need to upate the first_bh and header_bh
                                               ^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1204: FILE: fs/ocfs2/xattr.c:3554:
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1211: FILE: fs/ocfs2/xattr.c:3561:
+		else {

WARNING:SPLIT_STRING: quoted string split across lines
#1265: FILE: fs/ocfs2/xattr.c:3615:
+	mlog(0, "Add new xattr cluster for %llu, previous xattr hash = %u, "
+	     "previous xattr blkno = %llu\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1301: FILE: fs/ocfs2/xattr.c:3651:
+	BUG_ON(num_bits > clusters_to_add);

WARNING:SPLIT_STRING: quoted string split across lines
#1386: FILE: fs/ocfs2/xattr.c:3736:
+	mlog(0, "extend xattr bucket in %llu, xattr extend rec starting "
+	     "from %llu, len = %u\n", start_blk,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1389: FILE: fs/ocfs2/xattr.c:3739:
+	BUG_ON(bucket >= num_buckets);

WARNING:TYPO_SPELLING: 'refrence' may be misspelled - perhaps 'reference'?
#1466: FILE: fs/ocfs2/xattr.c:3816:
+	 * Add refrence for header_bh here because it may be
 	       ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1518: FILE: fs/ocfs2/xattr.c:3868:
+static inline char *ocfs2_xattr_bucket_get_val(struct inode *inode,
+					struct ocfs2_xattr_bucket *bucket,

WARNING:TYPO_SPELLING: 'initalized' may be misspelled - perhaps 'initialized'?
#1563: FILE: fs/ocfs2/xattr.c:3913:
+		 * initalized as an empty ocfs2_xattr_value_root, and the same
 		   ^^^^^^^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1592: FILE: fs/ocfs2/xattr.c:3942:
+			return;
+		} else {

WARNING:RETURN_VOID: void function return statements are not generally useful
#1664: FILE: fs/ocfs2/xattr.c:4014:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handle"
#1766: FILE: fs/ocfs2/xattr.c:4116:
+	if (handle == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1814: FILE: fs/ocfs2/xattr.c:4164:
+	BUG_ON(!xe || ocfs2_xattr_is_local(xe));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1822: FILE: fs/ocfs2/xattr.c:4172:
+	BUG_ON(value_blk != (offset + OCFS2_XATTR_ROOT_SIZE - 1) / blocksize);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1862: FILE: fs/ocfs2/xattr.c:4212:
+	BUG_ON(!xs->bucket.bhs[0] || !xe || ocfs2_xattr_is_local(xe));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1882: FILE: fs/ocfs2/xattr.c:4232:
+	BUG_ON(!xs->base || !xe || ocfs2_xattr_is_local(xe));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1934: FILE: fs/ocfs2/xattr.c:4284:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handle"
#1997: FILE: fs/ocfs2/xattr.c:4347:
+	if (handle == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2061: FILE: fs/ocfs2/xattr.c:4411:
+	BUG_ON(xs->header->xh_count != 0);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#2100: FILE: fs/ocfs2/xattr.c:4450:
+	struct ocfs2_xattr_entry *last = &xh->xh_entries[

WARNING:TYPO_SPELLING: 'initalize' may be misspelled - perhaps 'initialize'?
#2185: FILE: fs/ocfs2/xattr.c:4535:
+		 * initalize a new empty value root and insert it first.
 		   ^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#2238: FILE: fs/ocfs2/xattr.c:4588:
+		mlog(ML_ERROR, "Too much hash collision in xattr bucket %llu, "
+		     "hash = %u\n",

WARNING:SPLIT_STRING: quoted string split across lines
#2272: FILE: fs/ocfs2/xattr.c:4622:
+	mlog_bug_on_msg(header_size > blocksize, "bucket %llu has header size "
+			"of %u which exceed block size\n",

CHECK:BRACES: Unbalanced braces around else statement
#2284: FILE: fs/ocfs2/xattr.c:4634:
+	else {

WARNING:SPLIT_STRING: quoted string split across lines
#2311: FILE: fs/ocfs2/xattr.c:4661:
+	mlog(0, "xs->not_found = %d, in xattr bucket %llu: free = %d, "
+	     "need = %d, max_free = %d, xh_free_start = %u, xh_name_value_len ="

WARNING:SPLIT_STRING: quoted string split across lines
#2312: FILE: fs/ocfs2/xattr.c:4662:
+	     "need = %d, max_free = %d, xh_free_start = %u, xh_name_value_len ="
+	     " %u\n", xs->not_found,

WARNING:SPLIT_STRING: quoted string split across lines
#2340: FILE: fs/ocfs2/xattr.c:4690:
+			mlog(0, "Can't get enough space for xattr insert by "
+			     "defragment. Need %u bytes, but we have %d, so "

WARNING:SPLIT_STRING: quoted string split across lines
#2341: FILE: fs/ocfs2/xattr.c:4691:
+			     "defragment. Need %u bytes, but we have %d, so "
+			     "allocate new bucket for it.\n", need, free);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2348: FILE: fs/ocfs2/xattr.c:4698:
+		BUG_ON(allocation);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 39 warnings, 16 checks, 2320 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
