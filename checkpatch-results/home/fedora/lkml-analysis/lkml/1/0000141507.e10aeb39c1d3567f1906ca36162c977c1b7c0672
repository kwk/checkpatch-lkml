WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Packets that ingress on one interface, egress on the other (and vice versa).

WARNING:TYPO_SPELLING: 'substitues' may be misspelled - perhaps 'substitutes'?
#38: 
This module offers a similar concept, except that it substitues the
                                                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#68: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: drivers/vbus/devices/venet-tap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#122: FILE: drivers/vbus/devices/venet-tap.c:20:
+ * along with this program; if not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#123: FILE: drivers/vbus/devices/venet-tap.c:21:
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#159: FILE: drivers/vbus/devices/venet-tap.c:57:
+#  define PDEBUG(fmt, args...) printk(KERN_DEBUG "venet-tap: " fmt, ## args)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#187: FILE: drivers/vbus/devices/venet-tap.c:85:
+	spinlock_t                   lock;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#271: FILE: drivers/vbus/devices/venet-tap.c:169:
+	BUG_ON(!priv->netif.txq.irqdepth);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#304: FILE: drivers/vbus/devices/venet-tap.c:202:
+	BUG_ON(priv->netif.link);

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#310: FILE: drivers/vbus/devices/venet-tap.c:208:
+	 * softirq, we cannot guarantee this wont call us back in interrupt
 	                                     ^^^^

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#311: FILE: drivers/vbus/devices/venet-tap.c:209:
+	 * context, so we cant use it.  And both a work-queue or softirq
 	                  ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#378: FILE: drivers/vbus/devices/venet-tap.c:276:
+		printk(KERN_WARNING "venettap: Can't change I/O address\n");

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#422: FILE: drivers/vbus/devices/venet-tap.c:320:
+	 * to the ioq and ctx explictly, but this would require an extra
 	                      ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#435: FILE: drivers/vbus/devices/venet-tap.c:333:
+	BUG_ON(ret < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#438: FILE: drivers/vbus/devices/venet-tap.c:336:
+	BUG_ON(ret < 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#455: FILE: drivers/vbus/devices/venet-tap.c:353:
+		skb = dev_alloc_skb(len+2);
 		                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#457: FILE: drivers/vbus/devices/venet-tap.c:355:
+			printk(KERN_INFO "VENETTAP: skb alloc failed:"	\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#457: FILE: drivers/vbus/devices/venet-tap.c:355:
+			printk(KERN_INFO "VENETTAP: skb alloc failed:"	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#490: FILE: drivers/vbus/devices/venet-tap.c:388:
+		BUG_ON(ret < 0);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#498: FILE: drivers/vbus/devices/venet-tap.c:396:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#506: FILE: drivers/vbus/devices/venet-tap.c:404:
+	 * If we processed all packets we're done, so reenable ints
 	                                              ^^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#549: FILE: drivers/vbus/devices/venet-tap.c:447:
+	if (priv->vbus.link
+	    && priv->netif.txq.len < ioq_remain(ioq, ioq_idxtype_inuse)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#550: FILE: drivers/vbus/devices/venet-tap.c:448:
+	    && priv->netif.txq.len < ioq_remain(ioq, ioq_idxtype_inuse)
+	    && test_and_clear_bit(TX_NETIF_CONGESTED, &priv->flags)) {

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#584: FILE: drivers/vbus/devices/venet-tap.c:482:
+	 * to the ioq and ctx explictly, but this would require an extra
 	                      ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#594: FILE: drivers/vbus/devices/venet-tap.c:492:
+	BUG_ON(ret < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#597: FILE: drivers/vbus/devices/venet-tap.c:495:
+	BUG_ON(ret < 0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#600: FILE: drivers/vbus/devices/venet-tap.c:498:
+	while (priv->vbus.link && iter.desc->sown && priv->netif.txq.len) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#612: FILE: drivers/vbus/devices/venet-tap.c:510:
+			BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#621: FILE: drivers/vbus/devices/venet-tap.c:519:
+			BUG_ON(ret < 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#623: FILE: drivers/vbus/devices/venet-tap.c:521:
+			printk(KERN_WARNING				\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#623: FILE: drivers/vbus/devices/venet-tap.c:521:
+			printk(KERN_WARNING				\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#734: FILE: drivers/vbus/devices/venet-tap.c:632:
+	BUG_ON(test_bit(TX_NETIF_CONGESTED, &priv->flags));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#740: FILE: drivers/vbus/devices/venet-tap.c:638:
+		printk(KERN_ERR "VENETTAP: tx on link down\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#782: FILE: drivers/vbus/devices/venet-tap.c:680:
+	struct venettap *priv = netdev_priv(dev);
+	return &priv->netif.stats;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#804: FILE: drivers/vbus/devices/venet-tap.c:702:
+	if (priv->netif.link
+	    && !ioq_empty(priv->vbus.rxq.queue, ioq_idxtype_inuse)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#847: FILE: drivers/vbus/devices/venet-tap.c:745:
+	if (priv->vbus.link
+	    && !ioq_full(priv->vbus.txq.queue, ioq_idxtype_inuse)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#848: FILE: drivers/vbus/devices/venet-tap.c:746:
+	    && !ioq_full(priv->vbus.txq.queue, ioq_idxtype_inuse)
+	    && test_and_clear_bit(TX_IOQ_CONGESTED, &priv->flags)) {

WARNING:TYPO_SPELLING: 'compatability' may be misspelled - perhaps 'compatibility'?
#953: FILE: drivers/vbus/devices/venet-tap.c:851:
+ * interface may be extended without breaking ABI compatability
                                                   ^^^^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1018: FILE: drivers/vbus/devices/venet-tap.c:916:
+	BUG_ON(ret < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1021: FILE: drivers/vbus/devices/venet-tap.c:919:
+	BUG_ON(ret < 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1295: FILE: drivers/vbus/devices/venet-tap.c:1193:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1310: FILE: drivers/vbus/devices/venet-tap.c:1208:
+host_mac_show(struct vbus_device *dev, struct vbus_device_attribute *attr,
+	 char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1322: FILE: drivers/vbus/devices/venet-tap.c:1220:
+client_mac_show(struct vbus_device *dev, struct vbus_device_attribute *attr,
+	 char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1334: FILE: drivers/vbus/devices/venet-tap.c:1232:
+enabled_show(struct vbus_device *dev, struct vbus_device_attribute *attr,
+	 char *buf)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1370: FILE: drivers/vbus/devices/venet-tap.c:1268:
+	__ATTR(enabled, S_IRUGO | S_IWUSR, enabled_show, enabled_store);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1374: FILE: drivers/vbus/devices/venet-tap.c:1272:
+ifname_show(struct vbus_device *dev, struct vbus_device_attribute *attr,
+	   char *buf)

WARNING:CONST_STRUCT: struct net_device_ops should normally be const
#1399: FILE: drivers/vbus/devices/venet-tap.c:1297:
+static struct net_device_ops venettap_netdev_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1499: FILE: kernel/vbus/Kconfig:17:
+config VBUS_DEVICES
+       bool "Virtual-Bus Devices"
+       depends on VBUS
+       default n
+       help
+         Provides device-class modules for instantiation on a virtual-bus
+
+	 If unsure, say N
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141507.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 33 warnings, 14 checks, 1432 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141507.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
