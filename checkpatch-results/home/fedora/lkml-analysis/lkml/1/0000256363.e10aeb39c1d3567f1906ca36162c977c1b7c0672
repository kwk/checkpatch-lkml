WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
code reorganization of the generic Intel vt-d parsing related routines and linux

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: drivers/pci/dmar.c:329:
+		if (drhd->include_all || dmar_pci_device_match(drhd->devices,
+						drhd->devices_cnt, dev))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#107: FILE: drivers/pci/dmar.c:388:
+		printk(KERN_ERR "IOMMU: can't map the region\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: drivers/pci/dmar.c:396:
+	map_size = max_t(int, ecap_max_iotlb_offset(iommu->ecap),
+		cap_max_fault_reg_offset(iommu->cap));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#121: FILE: drivers/pci/dmar.c:402:
+			printk(KERN_ERR "IOMMU: can't map the region\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: drivers/pci/dmar.c:409:
+	pr_debug("IOMMU %llx: ver %d:%d cap %llx ecap %llx\n",
+		drhd->reg_base_addr, DMAR_VER_MAJOR(ver), DMAR_VER_MINOR(ver),

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#461: FILE: drivers/pci/intel-iommu.h:187:
+^Iunsigned long ^I*domain_ids; /* bitmap of domains */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#479: FILE: drivers/pci/intel-iommu.h:199:
+extern struct dmar_drhd_unit * dmar_find_matched_drhd_unit(struct pci_dev *dev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#479: FILE: drivers/pci/intel-iommu.h:199:
+extern struct dmar_drhd_unit * dmar_find_matched_drhd_unit(struct pci_dev *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#481: FILE: drivers/pci/intel-iommu.h:201:
+extern struct intel_iommu *alloc_iommu(struct intel_iommu *iommu,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#483: FILE: drivers/pci/intel-iommu.h:203:
+extern void free_iommu(struct intel_iommu *iommu);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#491: FILE: drivers/pci/dma_remapping.h:1:
+#ifndef _DMA_REMAPPING_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#499: FILE: drivers/pci/dma_remapping.h:9:
+#define PAGE_SIZE_4K		(1UL << PAGE_SHIFT_4K)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#507: FILE: drivers/pci/dma_remapping.h:17:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#518: FILE: drivers/pci/dma_remapping.h:28:
+};
+#define ROOT_ENTRY_NR (PAGE_SIZE_4K/sizeof(struct root_entry))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#518: FILE: drivers/pci/dma_remapping.h:28:
+#define ROOT_ENTRY_NR (PAGE_SIZE_4K/sizeof(struct root_entry))
                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#523: FILE: drivers/pci/dma_remapping.h:33:
+}
+static inline void set_root_present(struct root_entry *root)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#527: FILE: drivers/pci/dma_remapping.h:37:
+}
+static inline void set_root_value(struct root_entry *root, unsigned long value)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#537: FILE: drivers/pci/dma_remapping.h:47:
+		(root_present(root)?phys_to_virt(

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#537: FILE: drivers/pci/dma_remapping.h:47:
+		(root_present(root)?phys_to_virt(
 		                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#538: FILE: drivers/pci/dma_remapping.h:48:
+		root->val & PAGE_MASK_4K):
 		                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#557: FILE: drivers/pci/dma_remapping.h:67:
+};
+#define context_present(c) ((c).lo & 1)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#564: FILE: drivers/pci/dma_remapping.h:74:
+#define context_set_present(c) do {(c).lo |= 1;} while (0)
                                               ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#564: FILE: drivers/pci/dma_remapping.h:74:
+#define context_set_present(c) do {(c).lo |= 1;} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#565: FILE: drivers/pci/dma_remapping.h:75:
+#define context_set_fault_enable(c) \
+	do {(c).lo &= (((u64)-1) << 2) | 1;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#566: FILE: drivers/pci/dma_remapping.h:76:
+	do {(c).lo &= (((u64)-1) << 2) | 1;} while (0)
 	                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#567: FILE: drivers/pci/dma_remapping.h:77:
+#define context_set_translation_type(c, val) \
+	do { \
+		(c).lo &= (((u64)-1) << 4) | 3; \
+		(c).lo |= ((val) & 3) << 2; \
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#573: FILE: drivers/pci/dma_remapping.h:83:
+#define context_set_address_root(c, val) \
+	do {(c).lo |= (val) & PAGE_MASK_4K;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#574: FILE: drivers/pci/dma_remapping.h:84:
+	do {(c).lo |= (val) & PAGE_MASK_4K;} while (0)
 	                                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#575: FILE: drivers/pci/dma_remapping.h:85:
+#define context_set_address_width(c, val) do {(c).hi |= (val) & 7;} while (0)
                                                                  ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#575: FILE: drivers/pci/dma_remapping.h:85:
+#define context_set_address_width(c, val) do {(c).hi |= (val) & 7;} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#576: FILE: drivers/pci/dma_remapping.h:86:
+#define context_set_domain_id(c, val) \
+	do {(c).hi |= ((val) & ((1 << 16) - 1)) << 8;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#577: FILE: drivers/pci/dma_remapping.h:87:
+	do {(c).hi |= ((val) & ((1 << 16) - 1)) << 8;} while (0)
 	                                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#578: FILE: drivers/pci/dma_remapping.h:88:
+#define context_clear_entry(c) do {(c).lo = 0; (c).hi = 0;} while (0)
                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#578: FILE: drivers/pci/dma_remapping.h:88:
+#define context_clear_entry(c) do {(c).lo = 0; (c).hi = 0;} while (0)

WARNING:TYPO_SPELLING: 'physcial' may be misspelled - perhaps 'physical'?
#586: FILE: drivers/pci/dma_remapping.h:96:
+ * 12-63: Host physcial address
                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#591: FILE: drivers/pci/dma_remapping.h:101:
+};
+#define dma_clear_pte(p)	do {(p).val = 0;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#591: FILE: drivers/pci/dma_remapping.h:101:
+#define dma_clear_pte(p)	do {(p).val = 0;} while (0)
                         	               ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#591: FILE: drivers/pci/dma_remapping.h:101:
+#define dma_clear_pte(p)	do {(p).val = 0;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#596: FILE: drivers/pci/dma_remapping.h:106:
+#define dma_set_pte_readable(p) do {(p).val |= DMA_PTE_READ;} while (0)
                                                            ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#596: FILE: drivers/pci/dma_remapping.h:106:
+#define dma_set_pte_readable(p) do {(p).val |= DMA_PTE_READ;} while (0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#597: FILE: drivers/pci/dma_remapping.h:107:
+#define dma_set_pte_writable(p) do {(p).val |= DMA_PTE_WRITE;} while (0)
                                                             ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#597: FILE: drivers/pci/dma_remapping.h:107:
+#define dma_set_pte_writable(p) do {(p).val |= DMA_PTE_WRITE;} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#598: FILE: drivers/pci/dma_remapping.h:108:
+#define dma_set_pte_prot(p, prot) \
+		do {(p).val = ((p).val & ~3) | ((prot) & 3); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#598: FILE: drivers/pci/dma_remapping.h:108:
+#define dma_set_pte_prot(p, prot) \
+		do {(p).val = ((p).val & ~3) | ((prot) & 3); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#601: FILE: drivers/pci/dma_remapping.h:111:
+#define dma_set_pte_addr(p, addr) do {\
+		(p).val |= ((addr) & PAGE_MASK_4K); } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#602: FILE: drivers/pci/dma_remapping.h:112:
+		(p).val |= ((addr) & PAGE_MASK_4K); } while (0)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#611: FILE: drivers/pci/dma_remapping.h:121:
+^Istruct list_head devices; ^I/* all devices' list */$

WARNING:TYPO_SPELLING: 'numer' may be misspelled - perhaps 'number'?
#629: FILE: drivers/pci/dma_remapping.h:139:
+	u8 bus;			/* PCI bus numer */
 	       			           ^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#635: FILE: drivers/pci/dma_remapping.h:145:
+extern int init_dmars(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#636: FILE: drivers/pci/dma_remapping.h:146:
+extern void free_dmar_iommu(struct intel_iommu *iommu);

WARNING:RETURN_VOID: void function return statements are not generally useful
#642: FILE: drivers/pci/dma_remapping.h:152:
+	return;
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000256363.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 19 warnings, 21 checks, 580 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000256363.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
