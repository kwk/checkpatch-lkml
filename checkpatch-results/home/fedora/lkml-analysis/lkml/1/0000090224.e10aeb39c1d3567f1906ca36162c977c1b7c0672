WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#793: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#809: FILE: drivers/usb/early/ehci-dbgp.c:1:
+#include <linux/console.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#816: FILE: drivers/usb/early/ehci-dbgp.c:8:
+#include <asm/io.h>

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#923: FILE: drivers/usb/early/ehci-dbgp.c:115:
+static int dbgp_wait_until_done(unsigned ctrl)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lpid == USB_PID_NAK'
#942: FILE: drivers/usb/early/ehci-dbgp.c:134:
+	if ((lpid == USB_PID_NAK) || (lpid == USB_PID_NYET))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lpid == USB_PID_NYET'
#942: FILE: drivers/usb/early/ehci-dbgp.c:134:
+	if ((lpid == USB_PID_NAK) || (lpid == USB_PID_NYET))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#960: FILE: drivers/usb/early/ehci-dbgp.c:152:
+	lo = hi = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#962: FILE: drivers/usb/early/ehci-dbgp.c:154:
+		lo |= bytes[i] << (8*i);
 		                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#964: FILE: drivers/usb/early/ehci-dbgp.c:156:
+		hi |= bytes[i] << (8*(i - 4));
 		                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#978: FILE: drivers/usb/early/ehci-dbgp.c:170:
+		bytes[i] = (lo >> (8*i)) & 0xff;
 		                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#980: FILE: drivers/usb/early/ehci-dbgp.c:172:
+		bytes[i] = (hi >> (8*(i - 4))) & 0xff;
 		                    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#983: FILE: drivers/usb/early/ehci-dbgp.c:175:
+static int dbgp_bulk_write(unsigned devnum, unsigned endpoint,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#983: FILE: drivers/usb/early/ehci-dbgp.c:175:
+static int dbgp_bulk_write(unsigned devnum, unsigned endpoint,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#984: FILE: drivers/usb/early/ehci-dbgp.c:176:
+static int dbgp_bulk_write(unsigned devnum, unsigned endpoint,
+			 const char *bytes, int size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1013: FILE: drivers/usb/early/ehci-dbgp.c:205:
+static int __init dbgp_bulk_read(unsigned devnum, unsigned endpoint, void *data,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1013: FILE: drivers/usb/early/ehci-dbgp.c:205:
+static int __init dbgp_bulk_read(unsigned devnum, unsigned endpoint, void *data,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1044: FILE: drivers/usb/early/ehci-dbgp.c:236:
+static int __init dbgp_control_msg(unsigned devnum, int requesttype,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1045: FILE: drivers/usb/early/ehci-dbgp.c:237:
+static int __init dbgp_control_msg(unsigned devnum, int requesttype,
+	int request, int value, int index, void *data, int size)

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1053: FILE: drivers/usb/early/ehci-dbgp.c:245:
+	if (size > (read ? DBGP_MAX_PACKET:0))
 	                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <bRequestType>
#1057: FILE: drivers/usb/early/ehci-dbgp.c:249:
+	req.bRequestType = requesttype;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <bRequest>
#1058: FILE: drivers/usb/early/ehci-dbgp.c:250:
+	req.bRequest = request;

CHECK:CAMELCASE: Avoid CamelCase: <wValue>
#1059: FILE: drivers/usb/early/ehci-dbgp.c:251:
+	req.wValue = cpu_to_le16(value);

CHECK:CAMELCASE: Avoid CamelCase: <wIndex>
#1060: FILE: drivers/usb/early/ehci-dbgp.c:252:
+	req.wIndex = cpu_to_le16(index);

CHECK:CAMELCASE: Avoid CamelCase: <wLength>
#1061: FILE: drivers/usb/early/ehci-dbgp.c:253:
+	req.wLength = cpu_to_le16(size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1083: FILE: drivers/usb/early/ehci-dbgp.c:275:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1099: FILE: drivers/usb/early/ehci-dbgp.c:291:
+		id = read_pci_config_byte(num, slot, func, pos+PCI_CAP_LIST_ID);
 		                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1106: FILE: drivers/usb/early/ehci-dbgp.c:298:
+		pos = read_pci_config_byte(num, slot, func,
+						 pos+PCI_CAP_LIST_NEXT);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1106: FILE: drivers/usb/early/ehci-dbgp.c:298:
+						 pos+PCI_CAP_LIST_NEXT);
 						    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1129: FILE: drivers/usb/early/ehci-dbgp.c:321:
+				unsigned cap;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: drivers/usb/early/ehci-dbgp.c:361:
+			writel(portsc & ~(PORT_RWC_BITS | PORT_RESET),
+				&ehci_regs->port_status[port - 1]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1171: FILE: drivers/usb/early/ehci-dbgp.c:363:
+				portsc = readl(&ehci_regs->port_status[port-1]);
 				                                           ^

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#1179: FILE: drivers/usb/early/ehci-dbgp.c:371:
+		/* bomb out completely if something weird happend */
 		                                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:MISPLACED_INIT: __initdata should be placed after set_debug_port
#1219: FILE: drivers/usb/early/ehci-dbgp.c:411:
+static set_debug_port_t __initdata set_debug_port = default_set_debug_port;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1224: FILE: drivers/usb/early/ehci-dbgp.c:416:
+	u32 dword;
+	dword = read_pci_config(ehci_dev.bus, ehci_dev.slot, ehci_dev.func,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1225: FILE: drivers/usb/early/ehci-dbgp.c:417:
+	dword = read_pci_config(ehci_dev.bus, ehci_dev.slot, ehci_dev.func,
+				 0x74);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1226: FILE: drivers/usb/early/ehci-dbgp.c:418:
+	dword &= ~(0x0f<<12);
 	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1227: FILE: drivers/usb/early/ehci-dbgp.c:419:
+	dword |= ((port & 0x0f)<<12);
 	                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1229: FILE: drivers/usb/early/ehci-dbgp.c:421:
+	write_pci_config(ehci_dev.bus, ehci_dev.slot, ehci_dev.func, 0x74,
+				 dword);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: drivers/usb/early/ehci-dbgp.c:430:
+	vendorid = read_pci_config(ehci_dev.bus, ehci_dev.slot, ehci_dev.func,
+		 0x00);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1270: FILE: drivers/usb/early/ehci-dbgp.c:462:
+		portsc = readl(&ehci_regs->port_status[i-1]);
 		                                        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_debug_port != debug_port'
#1274: FILE: drivers/usb/early/ehci-dbgp.c:466:
+	if (port_map_tried && (new_debug_port != debug_port)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1354: FILE: drivers/usb/early/ehci-dbgp.c:546:
+		ret = dbgp_control_msg(devnum,
+			USB_DIR_IN | USB_TYPE_STANDARD | USB_RECIP_DEVICE,

CHECK:CAMELCASE: Avoid CamelCase: <bDebugOutEndpoint>
#1368: FILE: drivers/usb/early/ehci-dbgp.c:560:
+	dbgp_endpoint_out = dbgp_desc.bDebugOutEndpoint;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1373: FILE: drivers/usb/early/ehci-dbgp.c:565:
+		ret = dbgp_control_msg(devnum,
+			USB_DIR_OUT | USB_TYPE_STANDARD | USB_RECIP_DEVICE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1377: FILE: drivers/usb/early/ehci-dbgp.c:569:
+			dbgp_printk("Could not move attached device to %d\n",
+				USB_DEBUG_DEVNUM);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1386: FILE: drivers/usb/early/ehci-dbgp.c:578:
+	ret = dbgp_control_msg(USB_DEBUG_DEVNUM,
+		USB_DIR_OUT | USB_TYPE_STANDARD | USB_RECIP_DEVICE,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1412: FILE: drivers/usb/early/ehci-dbgp.c:604:
+	port_map_tried |= (1<<(debug_port - 1));
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1413: FILE: drivers/usb/early/ehci-dbgp.c:605:
+	new_debug_port = ((debug_port-1+1)%n_ports) + 1;
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1413: FILE: drivers/usb/early/ehci-dbgp.c:605:
+	new_debug_port = ((debug_port-1+1)%n_ports) + 1;
 	                               ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1413: FILE: drivers/usb/early/ehci-dbgp.c:605:
+	new_debug_port = ((debug_port-1+1)%n_ports) + 1;
 	                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1414: FILE: drivers/usb/early/ehci-dbgp.c:606:
+	if (port_map_tried != ((1<<n_ports) - 1)) {
 	                         ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1442: FILE: drivers/usb/early/ehci-dbgp.c:634:
+		dbgp_num = simple_strtoul(s, &e, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1450: FILE: drivers/usb/early/ehci-dbgp.c:642:
+	dbgp_printk("Found EHCI debug port on %02x:%02x.%1x\n", bus, slot,
+			 func);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1519: FILE: drivers/usb/early/ehci-dbgp.c:711:
+		ret = dbgp_bulk_write(USB_DEBUG_DEVNUM,
+			dbgp_endpoint_out, str, chunk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1542: FILE: include/linux/usb/ehci_def.h:162:
+extern int __init early_dbgp_init(char *s);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000090224.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 41 checks, 1466 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000090224.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
