WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#34: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#39: FILE: fs/omfs/file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#40: FILE: fs/omfs/file.c:2:
+ * fs/omfs/file.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#53: FILE: fs/omfs/file.c:15:
+static int omfs_sync_file(struct file *file, struct dentry *dentry,
+		int datasync)

CHECK:SPACING: No space is necessary after a cast
#69: FILE: fs/omfs/file.c:31:
+	struct omfs_extent *oe = (struct omfs_extent *) &bh->b_data[offset];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#111: FILE: fs/omfs/file.c:73:
+			u64 start, count;
+			start = be64_to_cpu(entry->e_cluster);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#114: FILE: fs/omfs/file.c:76:
+			omfs_clear_range(inode->i_sb, start, (int) count);

CHECK:SPACING: No space is necessary after a cast
#117: FILE: fs/omfs/file.c:79:
+		omfs_make_empty_table(bh, (char *) oe - bh->b_data);

CHECK:SPACING: No space is necessary after a cast
#130: FILE: fs/omfs/file.c:92:
+		oe = (struct omfs_extent *) (&bh->b_data[OMFS_EXTENT_CONT]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: fs/omfs/file.c:110:
+static int omfs_grow_extent(struct inode *inode, struct omfs_extent *oe,
+			u64 *ret_block)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#174: FILE: fs/omfs/file.c:136:
+		entry = terminator-1;
 		                  ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#181: FILE: fs/omfs/file.c:143:
+			terminator->e_blocks = ~(cpu_to_be64(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#191: FILE: fs/omfs/file.c:153:
+	if (be32_to_cpu(oe->e_extent_count) > max_count-1)
 	                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: fs/omfs/file.c:158:
+	ret = omfs_allocate_range(inode->i_sb, 1, sbi->s_clustersize,
+		&new_block, &new_count);

CHECK:SPACING: No space is necessary after a cast
#206: FILE: fs/omfs/file.c:168:
+	entry->e_blocks = cpu_to_be64((u64) new_count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#208: FILE: fs/omfs/file.c:170:
+	terminator->e_blocks = ~(cpu_to_be64(

CHECK:SPACING: No space is necessary after a cast
#209: FILE: fs/omfs/file.c:171:
+		be64_to_cpu(~terminator->e_blocks) + (u64) new_count));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: fs/omfs/file.c:187:
+static sector_t find_block(struct inode *inode, struct omfs_extent_entry *ent,
+			sector_t block, int count, int *left)

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: fs/omfs/file.c:191:
+	sector_t searched = 0;
+	for (; count > 1; count--) {

CHECK:SPACING: No space is necessary after a cast
#292: FILE: fs/omfs/file.c:254:
+		oe = (struct omfs_extent *) (&bh->b_data[OMFS_EXTENT_CONT]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: fs/omfs/file.c:262:
+			map_bh(bh_result, inode->i_sb,
+					clus_to_blk(sbi, new_block));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: fs/omfs/file.c:277:
+static int omfs_readpages(struct file *file, struct address_space *mapping,
+		struct list_head *pages, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#315: FILE: fs/omfs/file.c:277:
+		struct list_head *pages, unsigned nr_pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: fs/omfs/file.c:294:
+static int omfs_prepare_write(struct file *file, struct page *page,
+	unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#332: FILE: fs/omfs/file.c:294:
+	unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#332: FILE: fs/omfs/file.c:294:
+	unsigned from, unsigned to)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#342: FILE: fs/omfs/file.c:304:
+struct file_operations omfs_file_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#353: FILE: fs/omfs/file.c:315:
+struct inode_operations omfs_file_inops = {

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#357: FILE: fs/omfs/file.c:319:
+struct address_space_operations omfs_aops = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302808.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 18 checks, 329 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302808.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
