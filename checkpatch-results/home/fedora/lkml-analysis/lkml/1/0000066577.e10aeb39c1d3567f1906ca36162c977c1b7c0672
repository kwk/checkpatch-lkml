WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#84: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'tre' may be misspelled - perhaps 'tree'?
#107: FILE: Documentation/pmask.txt:19:
+   - Processes keeps a list of open fds to prevent recursing up the FS tre=
                                                                        ^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#108: FILE: Documentation/pmask.txt:19:
e?

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:TYPO_SPELLING: 'privilages' may be misspelled - perhaps 'privileges'?
#164: FILE: Documentation/pmask.txt:75:
+    When committing, privilages can only be revoked.
                      ^^^^^^^^^^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#202: FILE: lib/vsprintf.c:1774:
+			while (!isspace(*fmt) && *fmt !=3D '%' && *fmt)
 			                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#244: FILE: security/pmask/Kconfig:1:
+config SECURITY_PERM_MASKING
+	bool "Permission masking"
+	depends on SECURITY
+	select SECURITYFS
+	default n
+	help
+	  This enabled support for masking filesystem permissions.
+	  If you are unsure how to answer this question, answer N.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#265: FILE: security/pmask/fs.c:1:
+/**

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'optio' may be misspelled - perhaps 'option'?
#273: FILE: security/pmask/fs.c:8:
+ * Software Foundation, either version 2 of the License, or (at your optio=
                                                                      ^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#306: FILE: security/pmask/fs.c:38:
+	struct pmask_policy *policy =3D sf->private;
 	                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#307: FILE: security/pmask/fs.c:39:
+	struct pmask_policy *policy =3D sf->private;
+	down_read(&policy->privs_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#313: FILE: security/pmask/fs.c:45:
+	struct pmask_policy *policy =3D sf->private;
 	                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: security/pmask/fs.c:46:
+	struct pmask_policy *policy =3D sf->private;
+	return seq_list_next(seq, &policy->privs, pos);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#319: FILE: security/pmask/fs.c:51:
+	struct pmask_policy *policy =3D sf->private;
 	                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: security/pmask/fs.c:52:
+	struct pmask_policy *policy =3D sf->private;
+	up_read(&policy->privs_lock);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#325: FILE: security/pmask/fs.c:57:
+	struct pmask_line *line =3D list_entry(seq, struct pmask_line, list);
 	                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#326: FILE: security/pmask/fs.c:58:
+	char perm_str[PMASK_PERM_BITS+1] =3D {};
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#326: FILE: security/pmask/fs.c:58:
+	char perm_str[PMASK_PERM_BITS+1] =3D {};
 	                                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#327: FILE: security/pmask/fs.c:59:
+	char perm_str[PMASK_PERM_BITS+1] =3D {};
+	if (pmask_isset(line->self_perm) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#327: FILE: security/pmask/fs.c:59:
+	if (pmask_isset(line->self_perm) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: security/pmask/fs.c:60:
+	if (pmask_isset(line->self_perm) &&
+			line->self_perm =3D=3D line->kids_perm) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#328: FILE: security/pmask/fs.c:60:
+			line->self_perm =3D=3D line->kids_perm) {
 			                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#328: FILE: security/pmask/fs.c:60:
+			line->self_perm =3D=3D line->kids_perm) {
 			                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#344: FILE: security/pmask/fs.c:76:
+static const struct seq_operations pmask_seq_ops =3D {
                                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#345: FILE: security/pmask/fs.c:77:
+	.start =3D pmask_seq_start,
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#346: FILE: security/pmask/fs.c:78:
+	.next  =3D pmask_seq_next,
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#347: FILE: security/pmask/fs.c:79:
+	.stop  =3D pmask_seq_stop,
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#348: FILE: security/pmask/fs.c:80:
+	.show  =3D pmask_seq_show,
 	       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#354: FILE: security/pmask/fs.c:86:
+	 * Not sure if this is correct way to store private data */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#356: FILE: security/pmask/fs.c:88:
+	struct seq_file *sf;
+	if (seq_open(file, &pmask_seq_ops) < 0) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#360: FILE: security/pmask/fs.c:92:
+	sf =3D file->private_data;
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#361: FILE: security/pmask/fs.c:93:
+	sf->private =3D policy;
 	            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#365: FILE: security/pmask/fs.c:97:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#381: FILE: security/pmask/fs.c:113:
+static ssize_t pmask_stage_write(struct file *filp, const char *ubuffer,
                                               ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: security/pmask/fs.c:114:
+static ssize_t pmask_stage_write(struct file *filp, const char *ubuffer,
+		size_t length, loff_t *off)

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#390: FILE: security/pmask/fs.c:122:
+		return -EINVAL;;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#391: FILE: security/pmask/fs.c:123:
+	kbuffer =3D kmalloc(length+1, GFP_KERNEL);
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#391: FILE: security/pmask/fs.c:123:
+	kbuffer =3D kmalloc(length+1, GFP_KERNEL);
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#394: FILE: security/pmask/fs.c:126:
+	kbuffer[length] =3D '\0';
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#400: FILE: security/pmask/fs.c:132:
+	path_start =3D -1;
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#400: FILE: security/pmask/fs.c:132:
+	path_start =3D -1;
 	               ^

WARNING:NAKED_SSCANF: unchecked sscanf return value
#401: FILE: security/pmask/fs.c:133:
+	sscanf(kbuffer, " %n%*s%n %n%*s%n %n", &cmd_start, &cmd_end,
+			&perm_start, &perm_end, &path_start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: security/pmask/fs.c:134:
+	sscanf(kbuffer, " %n%*s%n %n%*s%n %n", &cmd_start, &cmd_end,
+			&perm_start, &perm_end, &path_start);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#403: FILE: security/pmask/fs.c:135:
+	if (path_start =3D=3D -1)
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#403: FILE: security/pmask/fs.c:135:
+	if (path_start =3D=3D -1)
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#403: FILE: security/pmask/fs.c:135:
+	if (path_start =3D=3D -1)
 	                      ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#403: FILE: security/pmask/fs.c:135:
+	if (path_start =3D=3D -1)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#405: FILE: security/pmask/fs.c:137:
+	cmd_str  =3D kbuffer+cmd_start;  kbuffer[cmd_end]  =3D '\0';
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#405: FILE: security/pmask/fs.c:137:
+	cmd_str  =3D kbuffer+cmd_start;  kbuffer[cmd_end]  =3D '\0';
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#405: FILE: security/pmask/fs.c:137:
+	cmd_str  =3D kbuffer+cmd_start;  kbuffer[cmd_end]  =3D '\0';
 	                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#406: FILE: security/pmask/fs.c:138:
+	perm_str =3D kbuffer+perm_start; kbuffer[perm_end] =3D '\0';
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#406: FILE: security/pmask/fs.c:138:
+	perm_str =3D kbuffer+perm_start; kbuffer[perm_end] =3D '\0';
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#406: FILE: security/pmask/fs.c:138:
+	perm_str =3D kbuffer+perm_start; kbuffer[perm_end] =3D '\0';
 	                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#407: FILE: security/pmask/fs.c:139:
+	path_str =3D kbuffer+path_start;
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#407: FILE: security/pmask/fs.c:139:
+	path_str =3D kbuffer+path_start;
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#411: FILE: security/pmask/fs.c:143:
+		scope =3D PMASK_SELF;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#413: FILE: security/pmask/fs.c:145:
+		scope =3D PMASK_KIDS;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#415: FILE: security/pmask/fs.c:147:
+		scope =3D PMASK_BOTH;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#420: FILE: security/pmask/fs.c:152:
+	if (perm_str[0] =3D=3D '\0')
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#420: FILE: security/pmask/fs.c:152:
+	if (perm_str[0] =3D=3D '\0')
 	                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#420: FILE: security/pmask/fs.c:152:
+	if (perm_str[0] =3D=3D '\0')

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#422: FILE: security/pmask/fs.c:154:
+	perm =3D pmask_str_to_perm(perm_str);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#427: FILE: security/pmask/fs.c:159:
+	if (path_str[0] =3D=3D '\0')
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#427: FILE: security/pmask/fs.c:159:
+	if (path_str[0] =3D=3D '\0')
 	                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#427: FILE: security/pmask/fs.c:159:
+	if (path_str[0] =3D=3D '\0')

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#429: FILE: security/pmask/fs.c:161:
+	file =3D filp_open(path_str, 0, 0);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#433: FILE: security/pmask/fs.c:165:
+		if (path_str[0] =3D=3D '\0')
 		                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#433: FILE: security/pmask/fs.c:165:
+		if (path_str[0] =3D=3D '\0')
 		                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#433: FILE: security/pmask/fs.c:165:
+		if (path_str[0] =3D=3D '\0')

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#435: FILE: security/pmask/fs.c:167:
+		file =3D filp_open(path_str, 0, 0);
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#440: FILE: security/pmask/fs.c:172:
+	path_str =3D kstrdup(path_str, GFP_KERNEL);
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#444: FILE: security/pmask/fs.c:176:
+	err =3D pmask_policy_set_perm(pmask_cur_stage,
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#448: FILE: security/pmask/fs.c:180:
+		rval =3D err;
 		     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: security/pmask/fs.c:185:
+	pr_debug("pmask_task=3D%p pid=3D%d perm=3D%o[%s] path=3D%p[%s]\n",
+		pmask_cur_task, current->pid, perm, perm_str, file, path_str);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#455: FILE: security/pmask/fs.c:187:
+	rval =3D length;
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#458: FILE: security/pmask/fs.c:190:
+fail_inval: rval =3D -EINVAL; goto out;
                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#458: FILE: security/pmask/fs.c:190:
+fail_inval: rval =3D -EINVAL; goto out;
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#459: FILE: security/pmask/fs.c:191:
+fail_nomem: rval =3D -ENOMEM; goto out;
                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#459: FILE: security/pmask/fs.c:191:
+fail_nomem: rval =3D -ENOMEM; goto out;
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#460: FILE: security/pmask/fs.c:192:
+fail_fault: rval =3D -EFAULT; goto out;
                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#460: FILE: security/pmask/fs.c:192:
+fail_fault: rval =3D -EFAULT; goto out;
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#461: FILE: security/pmask/fs.c:193:
+fail_noent: rval =3D -ENOENT; goto out;
                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#461: FILE: security/pmask/fs.c:193:
+fail_noent: rval =3D -ENOENT; goto out;
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#468: FILE: security/pmask/fs.c:200:
+static const struct file_operations pmask_stage_fops =3D {
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#469: FILE: security/pmask/fs.c:201:
+	.open    =3D pmask_stage_open,
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#470: FILE: security/pmask/fs.c:202:
+	.write   =3D pmask_stage_write,
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#471: FILE: security/pmask/fs.c:203:
+	.read    =3D seq_read,
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#472: FILE: security/pmask/fs.c:204:
+	.llseek  =3D seq_lseek,
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#473: FILE: security/pmask/fs.c:205:
+	.release =3D seq_release,
 	         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#476: FILE: security/pmask/fs.c:208:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#486: FILE: security/pmask/fs.c:218:
+static const struct file_operations pmask_policy_fops =3D {
                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#487: FILE: security/pmask/fs.c:219:
+	.open    =3D pmask_policy_open,
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#488: FILE: security/pmask/fs.c:220:
+	.read    =3D seq_read,
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#489: FILE: security/pmask/fs.c:221:
+	.llseek  =3D seq_lseek,
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#490: FILE: security/pmask/fs.c:222:
+	.release =3D seq_release,
 	         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#493: FILE: security/pmask/fs.c:225:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#504: FILE: security/pmask/fs.c:236:
+static ssize_t pmask_control_write(struct file *filp, const char *buffer,
                                                 ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: security/pmask/fs.c:237:
+static ssize_t pmask_control_write(struct file *filp, const char *buffer,
+		size_t length, loff_t *off)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#510: FILE: security/pmask/fs.c:242:
+	command =3D kzalloc(length+1, GFP_KERNEL);
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#510: FILE: security/pmask/fs.c:242:
+	command =3D kzalloc(length+1, GFP_KERNEL);
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#515: FILE: security/pmask/fs.c:247:
+		rval =3D -EFAULT;
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#515: FILE: security/pmask/fs.c:247:
+		rval =3D -EFAULT;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#523: FILE: security/pmask/fs.c:255:
+		err =3D pmask_policy_commit(pmask_cur_stage, pmask_cur_policy);
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#525: FILE: security/pmask/fs.c:257:
+			rval =3D err;
 			     ^

WARNING:TYPO_SPELLING: 'coomand' may be misspelled - perhaps 'command'?
#530: FILE: security/pmask/fs.c:262:
+		pr_debug("unimplemented control coomand `%s'\n", command);
 		                                ^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#531: FILE: security/pmask/fs.c:263:
+		rval =3D -EINVAL;
 		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#531: FILE: security/pmask/fs.c:263:
+		rval =3D -EINVAL;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#535: FILE: security/pmask/fs.c:267:
+	rval =3D length; /* success */
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#543: FILE: security/pmask/fs.c:275:
+static const struct file_operations pmask_control_fops =3D {
                                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#544: FILE: security/pmask/fs.c:276:
+	.write =3D pmask_control_write,
 	       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#547: FILE: security/pmask/fs.c:279:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#555: FILE: security/pmask/fs.c:287:
+	struct dentry *pmask_dir;
+	if (!pmask_loaded)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#557: FILE: security/pmask/fs.c:289:
+	pmask_dir =3D securityfs_create_dir("pmask", NULL);
 	          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: security/pmask/fs.c:291:
+	securityfs_create_file("stage",
+			0666, pmask_dir, NULL, &pmask_stage_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: security/pmask/fs.c:293:
+	securityfs_create_file("policy",
+			0444, pmask_dir, NULL, &pmask_policy_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: security/pmask/fs.c:295:
+	securityfs_create_file("control",
+			0222, pmask_dir, NULL, &pmask_control_fops);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#575: FILE: security/pmask/pmask.c:1:
+/**

WARNING:TYPO_SPELLING: 'optio' may be misspelled - perhaps 'option'?
#583: FILE: security/pmask/pmask.c:8:
+ * Software Foundation, either version 2 of the License, or (at your optio=
                                                                      ^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#599: FILE: security/pmask/pmask.c:21:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#614: FILE: security/pmask/pmask.c:36:
+	cred->security =3D NULL;
 	               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: security/pmask/pmask.c:40:
+static int pmask_cred_prepare(struct cred *new, const struct cred *old,
+		gfp_t gfp)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#620: FILE: security/pmask/pmask.c:42:
+	new->security =3D pmask_task_dup(old->security, gfp);
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#634: FILE: security/pmask/pmask.c:56:
+		file->f_dentry->d_inode->i_security =3D
 		                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#637: FILE: security/pmask/pmask.c:59:
+		file->f_dentry->d_inode->i_security =3D NULL;
 		                                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#639: FILE: security/pmask/pmask.c:61:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#641: FILE: security/pmask/pmask.c:63:
+	perm =3D pmask_policy_get_perm(pmask_cur_policy,
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#643: FILE: security/pmask/pmask.c:65:
+	need =3D pmask_flags_to_mode(file->f_flags);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#644: FILE: security/pmask/pmask.c:66:
+	need =3D pmask_imode_to_perm(need, file->f_dentry->d_inode);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#646: FILE: security/pmask/pmask.c:68:
+		char *path =3D kzalloc(PATH_MAX, GFP_KERNEL);
 		           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#647: FILE: security/pmask/pmask.c:69:
+		char *path =3D kzalloc(PATH_MAX, GFP_KERNEL);
+		if (path) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#648: FILE: security/pmask/pmask.c:70:
+			path =3D d_path(&file->f_path, path, sizeof(path));
 			     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: security/pmask/pmask.c:72:
+			pr_debug("denied perm=3D%o:%o path=3D%s\n",
+					perm, need, path);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#655: FILE: security/pmask/pmask.c:77:
+			pr_debug("denied perm=3D%o:%o path=3D%s\n",
+					perm, need, "-ENOMEM");

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#665: FILE: security/pmask/pmask.c:87:
+	u16 perm =3D pmask_policy_get_perm(pmask_cur_policy, inode);
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#666: FILE: security/pmask/pmask.c:88:
+	u16 need =3D pmask_imode_to_perm(mask, inode);
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#667: FILE: security/pmask/pmask.c:89:
+	u16 need =3D pmask_imode_to_perm(mask, inode);
+	if (unlikely(pmask_denied(perm, need))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: security/pmask/pmask.c:91:
+		pr_debug("denied perm=3D%o:%o:%o inode=3D%p\n",
+				perm, need, mask, inode);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#677: FILE: security/pmask/pmask.c:99:
+/*
+static int pmask_inode_alloc_security(struct inode *inode)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#693: FILE: security/pmask/pmask.c:114:
+static struct security_operations pmask_security_ops =3D {
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#694: FILE: security/pmask/pmask.c:115:
+	.name                 =3D "pmask",
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#695: FILE: security/pmask/pmask.c:116:
+	.cred_prepare         =3D pmask_cred_prepare,
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#696: FILE: security/pmask/pmask.c:117:
+	.cred_free            =3D pmask_cred_free,
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#697: FILE: security/pmask/pmask.c:118:
+	.dentry_open          =3D pmask_dentry_open,
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#698: FILE: security/pmask/pmask.c:119:
+	.inode_permission     =3D pmask_inode_permission,
 	                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#700: FILE: security/pmask/pmask.c:121:
+	/*
+	.inode_alloc_security =3D pmask_inode_alloc_security,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#705: FILE: security/pmask/pmask.c:126:
+	 * filesystem layout changes */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#710: FILE: security/pmask/pmask.c:131:
+	struct cred *cred =3D (struct cred *)current_cred();

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#710: FILE: security/pmask/pmask.c:131:
+	struct cred *cred =3D (struct cred *)current_cred();
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#716: FILE: security/pmask/pmask.c:137:
+	cred->security =3D pmask_task_new(GFP_KERNEL);
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#720: FILE: security/pmask/pmask.c:141:
+	pmask_loaded =3D 1;
 	             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#731: FILE: security/pmask/policy.c:1:
+/**

WARNING:TYPO_SPELLING: 'optio' may be misspelled - perhaps 'option'?
#739: FILE: security/pmask/policy.c:8:
+ * Software Foundation, either version 2 of the License, or (at your optio=
                                                                      ^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#768: FILE: security/pmask/policy.c:34:
+static char pmask_perm_bit_list[] =3D "rwxsguRWXSGU";
                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#769: FILE: security/pmask/policy.c:35:
+static u16  pmask_perm_bit_table['z'] =3D {
                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#787: FILE: security/pmask/policy.c:53:
+	u16 mode =3D 0;
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#788: FILE: security/pmask/policy.c:54:
+	u16 mode =3D 0;
+	if (flags & FMODE_READ)  mode |=3D PMASK_READ;

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#788: FILE: security/pmask/policy.c:54:
+	if (flags & FMODE_READ)  mode |=3D PMASK_READ;
 	                              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#788: FILE: security/pmask/policy.c:54:
+	if (flags & FMODE_READ)  mode |=3D PMASK_READ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#789: FILE: security/pmask/policy.c:55:
+	if (flags & FMODE_WRITE) mode |=3D PMASK_WRITE;
 	                              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#789: FILE: security/pmask/policy.c:55:
+	if (flags & FMODE_WRITE) mode |=3D PMASK_WRITE;

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#790: FILE: security/pmask/policy.c:56:
+	if (flags & FMODE_EXEC)  mode |=3D PMASK_EXEC;
 	                              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#790: FILE: security/pmask/policy.c:56:
+	if (flags & FMODE_EXEC)  mode |=3D PMASK_EXEC;

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#791: FILE: security/pmask/policy.c:57:
+	if (flags & O_CREAT)     mode |=3D PMASK_CREATE;
 	                              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#791: FILE: security/pmask/policy.c:57:
+	if (flags & O_CREAT)     mode |=3D PMASK_CREATE;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#797: FILE: security/pmask/policy.c:63:
+	int perm =3D 0;
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#798: FILE: security/pmask/policy.c:64:
+	int perm =3D 0;
+	for (; *str; str++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: security/pmask/policy.c:66:
+		if ((!isalpha(*str) || !pmask_perm_bit_table[(int)*str]) &&
+				*str !=3D '.')

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#800: FILE: security/pmask/policy.c:66:
+				*str !=3D '.')
 				     ^

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#802: FILE: security/pmask/policy.c:68:
+		perm |=3D pmask_perm_bit_table[(int)*str];
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#809: FILE: security/pmask/policy.c:75:
+	char *c =3D pmask_perm_bit_list;
 	        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#810: FILE: security/pmask/policy.c:76:
+	char *c =3D pmask_perm_bit_list;
+	for (; *c; c++, str++)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#811: FILE: security/pmask/policy.c:77:
+		*str =3D (perm & pmask_perm_bit_table[(int)*c]) ?  *c : '.';

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#811: FILE: security/pmask/policy.c:77:
+		*str =3D (perm & pmask_perm_bit_table[(int)*c]) ?  *c : '.';
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#812: FILE: security/pmask/policy.c:78:
+	*str =3D '\0';
 	     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#815: FILE: security/pmask/policy.c:81:
+
+

WARNING:TYPO_SPELLING: 'initalize' may be misspelled - perhaps 'initialize'?
#821: FILE: security/pmask/policy.c:87:
+ * Allocate and initalize a new pmask_line
                 ^^^^^^^^^

WARNING:TYPO_SPELLING: 'fileds' may be misspelled - perhaps 'fields'?
#822: FILE: security/pmask/policy.c:88:
+ * @indoe, @path, @perm: fileds to store en line
                          ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: security/pmask/policy.c:91:
+static struct pmask_line *pmask_line_new(const struct inode *inode,
+		const char *path, gfp_t gfp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#828: FILE: security/pmask/policy.c:94:
+	struct pmask_line *line;
+	line =3D kzalloc(sizeof(struct pmask_line), gfp);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#828: FILE: security/pmask/policy.c:94:
+	line =3D kzalloc(sizeof(struct pmask_line), gfp);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#831: FILE: security/pmask/policy.c:97:
+	line->inode =3D inode;
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#832: FILE: security/pmask/policy.c:98:
+	line->path  =3D path;
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#833: FILE: security/pmask/policy.c:99:
+	line->self_perm =3D PMASK_IGNORE;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#834: FILE: security/pmask/policy.c:100:
+	line->kids_perm =3D PMASK_IGNORE;
 	                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#838: FILE: security/pmask/policy.c:104:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#844: FILE: security/pmask/policy.c:110:
+static struct pmask_line *pmask_policy_get_line(

WARNING:LINE_SPACING: Missing a blank line after declarations
#848: FILE: security/pmask/policy.c:114:
+	struct pmask_line *line;
+	list_for_each_entry(line, &policy->privs, list)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#849: FILE: security/pmask/policy.c:115:
+		if (line->inode =3D=3D inode)
 		                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#849: FILE: security/pmask/policy.c:115:
+		if (line->inode =3D=3D inode)
 		                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#849: FILE: security/pmask/policy.c:115:
+		if (line->inode =3D=3D inode)

WARNING:TYPO_SPELLING: 'updat' may be misspelled - perhaps 'update'?
#854: FILE: security/pmask/policy.c:120:
+/* Create and add a line to to @policy while checking for errors and updat=
                                                                      ^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#854: FILE: security/pmask/policy.c:120:
+/* Create and add a line to to @policy while checking for errors and updat=

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#856: FILE: security/pmask/policy.c:121:
+ * the quota */

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#857: FILE: security/pmask/policy.c:122:
+static struct pmask_line *pmask_policy_add_line(struct pmask_policy *polic=
                                                                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#862: FILE: security/pmask/policy.c:126:
+	struct pmask_line *line;
+	if (atomic_read(&policy->privs_count) >=3D PMASK_MAX_LINES)

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#862: FILE: security/pmask/policy.c:126:
+	if (atomic_read(&policy->privs_count) >=3D PMASK_MAX_LINES)
 	                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#865: FILE: security/pmask/policy.c:129:
+	line =3D pmask_line_new(inode, path, GFP_KERNEL);
 	     ^

WARNING:TYPO_SPELLING: 'updat' may be misspelled - perhaps 'update'?
#872: FILE: security/pmask/policy.c:136:
+/* Create and add a line to to @policy while checking for errors and updat=
                                                                      ^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#872: FILE: security/pmask/policy.c:136:
+/* Create and add a line to to @policy while checking for errors and updat=

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#874: FILE: security/pmask/policy.c:137:
+ * the quota */

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#875: FILE: security/pmask/policy.c:138:
+static struct pmask_line *pmask_policy_ensure_line(struct pmask_policy *po=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#879: FILE: security/pmask/policy.c:141:
+	struct pmask_line *line =3D pmask_policy_get_line(policy, inode);
 	                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#880: FILE: security/pmask/policy.c:142:
+	struct pmask_line *line =3D pmask_policy_get_line(policy, inode);
+	if (!line)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#881: FILE: security/pmask/policy.c:143:
+		line =3D pmask_policy_add_line(policy, inode, path, gfp);
 		     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#885: FILE: security/pmask/policy.c:147:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#888: FILE: security/pmask/policy.c:150:
+static void pmask_policy_del_line(struct pmask_policy *policy,
+		struct pmask_line *line)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#897: FILE: security/pmask/policy.c:158:
+ * but without duplicating conostant data such as paths and dentries */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: security/pmask/policy.c:160:
+static int pmask_policy_append(struct pmask_policy *from,
+		struct pmask_policy *to, gfp_t gfp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#902: FILE: security/pmask/policy.c:163:
+	struct pmask_line *old_line, *new_line;
+	list_for_each_entry(old_line, &from->privs, list) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#903: FILE: security/pmask/policy.c:164:
+		new_line =3D pmask_policy_add_line(to,
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#907: FILE: security/pmask/policy.c:168:
+		new_line->self_perm =3D old_line->self_perm;
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#908: FILE: security/pmask/policy.c:169:
+		new_line->kids_perm =3D old_line->kids_perm;
 		                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#924: FILE: security/pmask/policy.c:185:
+	struct pmask_line *line, *n;
+	list_for_each_entry_safe(line, n, &policy->privs, list)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#928: FILE: security/pmask/policy.c:189:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: security/pmask/policy.c:191:
+static u16 pmask_policy_get_perm_rec(const struct pmask_policy *policy,
+		const struct inode *inode)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#936: FILE: security/pmask/policy.c:197:
+	if (inode =3D=3D NULL)
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#936: FILE: security/pmask/policy.c:197:
+	if (inode =3D=3D NULL)
 	             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#936: FILE: security/pmask/policy.c:197:
+	if (inode =3D=3D NULL)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#939: FILE: security/pmask/policy.c:200:
+	line =3D pmask_policy_get_line(policy, inode);
 	     ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#950: FILE: security/pmask/policy.c:211:
+^I * ^Iperm &=3D pmask_policy_get_perm(policy, inode->d_parent);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: security/pmask/policy.c:217:
+u16 pmask_policy_get_perm(const struct pmask_policy *policy,
+		const struct inode *inode)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#959: FILE: security/pmask/policy.c:220:
+	struct pmask_line *line =3D pmask_policy_get_line(policy, inode);
 	                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#960: FILE: security/pmask/policy.c:221:
+	struct pmask_line *line =3D pmask_policy_get_line(policy, inode);
+	if (line && pmask_isset(line->self_perm))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#967: FILE: security/pmask/policy.c:227:
+/* We need the inode and path so we can create the line if it doesn't exis=
+int pmask_policy_set_perm(struct pmask_policy *policy,

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1008: FILE: security/pmask/policy.c:268:
+		merge_line =3D pmask_policy_ensure_line(&merge,
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1017: FILE: security/pmask/policy.c:277:
+		merge_line =3D pmask_policy_ensure_line(&merge,
 		           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1036: FILE: security/pmask/policy.c:296:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1044: FILE: security/pmask/policy.c:304:
+	struct pmask_task *task;
+	task =3D kzalloc(sizeof(struct pmask_task), gfp);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1044: FILE: security/pmask/policy.c:304:
+	task =3D kzalloc(sizeof(struct pmask_task), gfp);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1063: FILE: security/pmask/policy.c:323:
+	struct pmask_task *copy =3D pmask_task_new(gfp);
 	                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1064: FILE: security/pmask/policy.c:324:
+	struct pmask_task *copy =3D pmask_task_new(gfp);
+	if (!copy)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1085: FILE: security/pmask/policy.h:1:
+/**

WARNING:TYPO_SPELLING: 'optio' may be misspelled - perhaps 'option'?
#1093: FILE: security/pmask/policy.h:8:
+ * Software Foundation, either version 2 of the License, or (at your optio=
                                                                      ^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1127: FILE: security/pmask/policy.h:39:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1132: FILE: security/pmask/policy.h:44:
+#define PMASK_EXEC    (1u<<0)  /* x */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1132: FILE: security/pmask/policy.h:44:
+#define PMASK_EXEC    (1u<<0)  /* x */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1133: FILE: security/pmask/policy.h:45:
+#define PMASK_WRITE   (1u<<1)  /* w */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1133: FILE: security/pmask/policy.h:45:
+#define PMASK_WRITE   (1u<<1)  /* w */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1134: FILE: security/pmask/policy.h:46:
+#define PMASK_READ    (1u<<2)  /* r */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1134: FILE: security/pmask/policy.h:46:
+#define PMASK_READ    (1u<<2)  /* r */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1135: FILE: security/pmask/policy.h:47:
+#define PMASK_KEEPSWP (1u<<3)  /* s (ignored) */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1135: FILE: security/pmask/policy.h:47:
+#define PMASK_KEEPSWP (1u<<3)  /* s (ignored) */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1136: FILE: security/pmask/policy.h:48:
+#define PMASK_SETGID  (1u<<4)  /* g */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1136: FILE: security/pmask/policy.h:48:
+#define PMASK_SETGID  (1u<<4)  /* g */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1137: FILE: security/pmask/policy.h:49:
+#define PMASK_SETUID  (1u<<5)  /* u */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1137: FILE: security/pmask/policy.h:49:
+#define PMASK_SETUID  (1u<<5)  /* u */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1140: FILE: security/pmask/policy.h:52:
+#define PMASK_WALK    (1u<<6)  /* X */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1140: FILE: security/pmask/policy.h:52:
+#define PMASK_WALK    (1u<<6)  /* X */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1141: FILE: security/pmask/policy.h:53:
+#define PMASK_CREATE  (1u<<7)  /* W */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1141: FILE: security/pmask/policy.h:53:
+#define PMASK_CREATE  (1u<<7)  /* W */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1142: FILE: security/pmask/policy.h:54:
+#define PMASK_LIST    (1u<<8)  /* R */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1142: FILE: security/pmask/policy.h:54:
+#define PMASK_LIST    (1u<<8)  /* R */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1143: FILE: security/pmask/policy.h:55:
+#define PMASK_STICKY  (1u<<9)  /* S */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1143: FILE: security/pmask/policy.h:55:
+#define PMASK_STICKY  (1u<<9)  /* S */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1144: FILE: security/pmask/policy.h:56:
+#define PMASK_PASSGID (1u<<10) /* G */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1144: FILE: security/pmask/policy.h:56:
+#define PMASK_PASSGID (1u<<10) /* G */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1145: FILE: security/pmask/policy.h:57:
+#define PMASK_PASSUID (1u<<11) /* U (ignored) */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1145: FILE: security/pmask/policy.h:57:
+#define PMASK_PASSUID (1u<<11) /* U (ignored) */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1148: FILE: security/pmask/policy.h:60:
+#define PMASK_IGNORE  (1u<<12) /* Permissions unset */
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1148: FILE: security/pmask/policy.h:60:
+#define PMASK_IGNORE  (1u<<12) /* Permissions unset */

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#1172: FILE: security/pmask/policy.h:84:
+	return perm >=3D 0 && ~perm & request;
 	            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1216: FILE: security/pmask/policy.h:128:
+
+

WARNING:TYPO_SPELLING: 'stroing' may be misspelled - perhaps 'storing'?
#1227: FILE: security/pmask/policy.h:139:
+ * @list:      list_head for stroing in policy
                              ^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1241: FILE: security/pmask/policy.h:153:
+
+

WARNING:TYPO_SPELLING: 'privilages' may be misspelled - perhaps 'privileges'?
#1251: FILE: security/pmask/policy.h:163:
+ * @privs:      List of pmask_lines for filesystem privilages
                                                    ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'Recursivly' may be misspelled - perhaps 'Recursively'?
#1270: FILE: security/pmask/policy.h:182:
+/* Recursivly lookup perm for @inode in @policy */
    ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1272: FILE: security/pmask/policy.h:184:
+u16 pmask_policy_get_perm(const struct pmask_policy *policy,
+		const struct inode *inode);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1276: FILE: security/pmask/policy.h:187:
+/* Set perm for @inode in @policy to @perm, create new line if necessasiar=
+int pmask_policy_set_perm(struct pmask_policy *policy,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1282: FILE: security/pmask/policy.h:192:
+ * allowed in @to after the commit is performed */

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1283: FILE: security/pmask/policy.h:193:
+int pmask_policy_commit(struct pmask_policy *from, struct pmask_policy *to=
                                                                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1286: FILE: security/pmask/policy.h:195:
+
+

WARNING:TYPO_SPELLING: 'privilages' may be misspelled - perhaps 'privileges'?
#1297: FILE: security/pmask/policy.h:205:
+ *   The modifialbe policy, privilages can be allowed or denied in the sta=
                             ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'commiting' may be misspelled - perhaps 'committing'?
#1302: FILE: security/pmask/policy.h:209:
+ * @policy can only be modified by commiting @stage to @policy. When this =
                                    ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1325: FILE: security/pmask/policy.h:229:
+/* Create a semi-deep copy of @task, suitable for passing to a child on ex=
+struct pmask_task *pmask_task_dup(struct pmask_task *task, gfp_t gfp);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000066577.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 136 errors, 62 warnings, 75 checks, 1185 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000066577.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
