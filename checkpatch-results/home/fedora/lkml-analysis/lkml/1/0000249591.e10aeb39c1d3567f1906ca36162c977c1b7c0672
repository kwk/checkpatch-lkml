WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#33: 
Split off existing code into two seperate files. One file holds general
                                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#164: FILE: arch/x86/kernel/microcode.c:105:
+DEFINE_MUTEX(microcode_mutex);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#318: FILE: arch/x86/kernel/microcode.c:109:
+extern long get_next_ucode(void **mc, long offset);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#319: FILE: arch/x86/kernel/microcode.c:110:
+extern int microcode_sanity_check(void *mc);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#320: FILE: arch/x86/kernel/microcode.c:111:
+extern int get_matching_microcode(void *mc, int cpu);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#321: FILE: arch/x86/kernel/microcode.c:112:
+extern void collect_cpu_info(int cpu_num);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#322: FILE: arch/x86/kernel/microcode.c:113:
+extern int cpu_request_microcode(int cpu);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#323: FILE: arch/x86/kernel/microcode.c:114:
+extern void microcode_fini_cpu(int cpu);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#324: FILE: arch/x86/kernel/microcode.c:115:
+extern void apply_microcode(int cpu);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#325: FILE: arch/x86/kernel/microcode.c:116:
+extern int apply_microcode_check_cpu(int cpu);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#525: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#530: FILE: arch/x86/kernel/microcode_intel.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#623: FILE: arch/x86/kernel/microcode_intel.c:94:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#624: FILE: arch/x86/kernel/microcode_intel.c:95:
+#include <asm/processor.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#631: FILE: arch/x86/kernel/microcode_intel.c:102:
+#define DEFAULT_UCODE_DATASIZE ^I(2000) ^I  /* 2000 bytes */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#632: FILE: arch/x86/kernel/microcode_intel.c:103:
+#define MC_HEADER_SIZE^I^I(sizeof(struct microcode_header))  ^I  /* 48 bytes */$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mc' - possible side-effects?
#637: FILE: arch/x86/kernel/microcode_intel.c:108:
+#define get_totalsize(mc) \
+	(((struct microcode *)mc)->hdr.totalsize ? \
+	 ((struct microcode *)mc)->hdr.totalsize : DEFAULT_UCODE_TOTALSIZE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mc' - possible side-effects?
#640: FILE: arch/x86/kernel/microcode_intel.c:111:
+#define get_datasize(mc) \
+	(((struct microcode *)mc)->hdr.datasize ? \
+	 ((struct microcode *)mc)->hdr.datasize : DEFAULT_UCODE_DATASIZE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p1' - possible side-effects?
#644: FILE: arch/x86/kernel/microcode_intel.c:115:
+#define sigmatch(s1, s2, p1, p2) \
+	(((s1) == (s2)) && (((p1) & (p2)) || (((p1) == 0) && ((p2) == 0))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p2' - possible side-effects?
#644: FILE: arch/x86/kernel/microcode_intel.c:115:
+#define sigmatch(s1, s2, p1, p2) \
+	(((s1) == (s2)) && (((p1) & (p2)) || (((p1) == 0) && ((p2) == 0))))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#653: FILE: arch/x86/kernel/microcode_intel.c:124:
+extern struct mutex microcode_mutex;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#655: FILE: arch/x86/kernel/microcode_intel.c:126:
+extern struct ucode_cpu_info ucode_cpu_info[NR_CPUS];

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#664: FILE: arch/x86/kernel/microcode_intel.c:135:
+	BUG_ON(raw_smp_processor_id() != cpu_num);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#665: FILE: arch/x86/kernel/microcode_intel.c:136:
+	uci->pf = uci->rev = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#671: FILE: arch/x86/kernel/microcode_intel.c:142:
+		printk(KERN_ERR "microcode: CPU%d not a capable Intel "

WARNING:SPLIT_STRING: quoted string split across lines
#672: FILE: arch/x86/kernel/microcode_intel.c:143:
+		printk(KERN_ERR "microcode: CPU%d not a capable Intel "
+			"processor\n", cpu_num);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model >= 5'
#679: FILE: arch/x86/kernel/microcode_intel.c:150:
+	if ((c->x86_model >= 5) || (c->x86 > 6)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86 > 6'
#679: FILE: arch/x86/kernel/microcode_intel.c:150:
+	if ((c->x86_model >= 5) || (c->x86 > 6)) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'collect_cpu_info', this function's name, in a string
#690: FILE: arch/x86/kernel/microcode_intel.c:161:
+	pr_debug("microcode: collect_cpu_info : sig=0x%x, pf=0x%x, rev=0x%x\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#691: FILE: arch/x86/kernel/microcode_intel.c:162:
+	pr_debug("microcode: collect_cpu_info : sig=0x%x, pf=0x%x, rev=0x%x\n",
+			uci->sig, uci->pf, uci->rev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: arch/x86/kernel/microcode_intel.c:166:
+static inline int microcode_update_match(int cpu_num,
+	struct microcode_header *mc_header, int sig, int pf)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#700: FILE: arch/x86/kernel/microcode_intel.c:171:
+	if (!sigmatch(sig, uci->sig, pf, uci->pf)
+		|| mc_header->rev <= uci->rev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#716: FILE: arch/x86/kernel/microcode_intel.c:187:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#717: FILE: arch/x86/kernel/microcode_intel.c:188:
+		printk(KERN_ERR "microcode: error! "
+			"Bad data size in microcode data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#722: FILE: arch/x86/kernel/microcode_intel.c:193:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#723: FILE: arch/x86/kernel/microcode_intel.c:194:
+		printk(KERN_ERR "microcode: error! "
+			"Unknown microcode update format\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ext_table_size < EXT_HEADER_SIZE'
#728: FILE: arch/x86/kernel/microcode_intel.c:199:
+		if ((ext_table_size < EXT_HEADER_SIZE)
+		 || ((ext_table_size - EXT_HEADER_SIZE) % EXT_SIGNATURE_SIZE)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#729: FILE: arch/x86/kernel/microcode_intel.c:200:
+		if ((ext_table_size < EXT_HEADER_SIZE)
+		 || ((ext_table_size - EXT_HEADER_SIZE) % EXT_SIGNATURE_SIZE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#730: FILE: arch/x86/kernel/microcode_intel.c:201:
+			printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#731: FILE: arch/x86/kernel/microcode_intel.c:202:
+			printk(KERN_ERR "microcode: error! "
+				"Small exttable size in microcode data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#736: FILE: arch/x86/kernel/microcode_intel.c:207:
+			printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#737: FILE: arch/x86/kernel/microcode_intel.c:208:
+			printk(KERN_ERR "microcode: error! "
+				"Bad exttable size in microcode data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#752: FILE: arch/x86/kernel/microcode_intel.c:223:
+			printk(KERN_WARNING "microcode: aborting, "

WARNING:SPLIT_STRING: quoted string split across lines
#753: FILE: arch/x86/kernel/microcode_intel.c:224:
+			printk(KERN_WARNING "microcode: aborting, "
+				"bad extended signature table checksum\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#764: FILE: arch/x86/kernel/microcode_intel.c:235:
+		printk(KERN_ERR "microcode: aborting, bad checksum\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#777: FILE: arch/x86/kernel/microcode_intel.c:248:
+			printk(KERN_ERR "microcode: aborting, bad checksum\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: arch/x86/kernel/microcode_intel.c:271:
+	if (microcode_update_match(cpu, mc_header,
+			mc_header->sig, mc_header->pf))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#811: FILE: arch/x86/kernel/microcode_intel.c:282:
+		if (microcode_update_match(cpu, mc_header,
+				ext_sig->sig, ext_sig->pf))

WARNING:SPLIT_STRING: quoted string split across lines
#818: FILE: arch/x86/kernel/microcode_intel.c:289:
+	pr_debug("microcode: CPU%d found a matching microcode update with"
+		 " version 0x%x (current=0x%x)\n", cpu, mc_header->rev, uci->rev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#821: FILE: arch/x86/kernel/microcode_intel.c:292:
+		printk(KERN_ERR "microcode: error! Can not allocate memory\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#841: FILE: arch/x86/kernel/microcode_intel.c:312:
+	BUG_ON(cpu_num != cpu);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uci->mc"
#843: FILE: arch/x86/kernel/microcode_intel.c:314:
+	if (uci->mc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: arch/x86/kernel/microcode_intel.c:322:
+	wrmsr(MSR_IA32_UCODE_WRITE,
+		(unsigned long) uci->mc->bits,

CHECK:SPACING: No space is necessary after a cast
#851: FILE: arch/x86/kernel/microcode_intel.c:322:
+		(unsigned long) uci->mc->bits,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#852: FILE: arch/x86/kernel/microcode_intel.c:323:
+		(unsigned long) uci->mc->bits >> 16 >> 16);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#863: FILE: arch/x86/kernel/microcode_intel.c:334:
+		printk(KERN_ERR "microcode: CPU%d update from revision "

WARNING:SPLIT_STRING: quoted string split across lines
#864: FILE: arch/x86/kernel/microcode_intel.c:335:
+		printk(KERN_ERR "microcode: CPU%d update from revision "
+			"0x%x to 0x%x failed\n", cpu_num, uci->rev, val[1]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#867: FILE: arch/x86/kernel/microcode_intel.c:338:
+	printk(KERN_INFO "microcode: CPU%d updated from revision "

WARNING:SPLIT_STRING: quoted string split across lines
#868: FILE: arch/x86/kernel/microcode_intel.c:339:
+	printk(KERN_INFO "microcode: CPU%d updated from revision "
+	       "0x%x to 0x%x, date = %08x \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#868: FILE: arch/x86/kernel/microcode_intel.c:339:
+	       "0x%x to 0x%x, date = %08x \n",

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#875: FILE: arch/x86/kernel/microcode_intel.c:346:
+extern unsigned int user_buffer_size;   /* it's size */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#886: FILE: arch/x86/kernel/microcode_intel.c:357:
+		printk(KERN_ERR "microcode: error! Can not read user data\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#891: FILE: arch/x86/kernel/microcode_intel.c:362:
+		printk(KERN_ERR "microcode: error! Bad total size in microcode "

WARNING:SPLIT_STRING: quoted string split across lines
#892: FILE: arch/x86/kernel/microcode_intel.c:363:
+		printk(KERN_ERR "microcode: error! Bad total size in microcode "
+				"data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#899: FILE: arch/x86/kernel/microcode_intel.c:370:
+		printk(KERN_ERR "microcode: error! Can not read user data\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#908: FILE: arch/x86/kernel/microcode_intel.c:379:
+static long get_next_ucode_from_buffer(void **mc, const u8 *buf,
+	unsigned long size, long offset)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#920: FILE: arch/x86/kernel/microcode_intel.c:391:
+		printk(KERN_ERR "microcode: error! Bad data in microcode data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#926: FILE: arch/x86/kernel/microcode_intel.c:397:
+		printk(KERN_ERR "microcode: error! Can not allocate memory\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#948: FILE: arch/x86/kernel/microcode_intel.c:419:
+	BUG_ON(cpu != raw_smp_processor_id());

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model >= 5'
#1005: FILE: arch/x86/kernel/microcode_intel.c:476:
+	if (!err && ((c->x86_model >= 5) || (c->x86 > 6))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86 > 6'
#1005: FILE: arch/x86/kernel/microcode_intel.c:476:
+	if (!err && ((c->x86_model >= 5) || (c->x86 > 6))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1025: FILE: arch/x86/kernel/microcode_intel.c:496:
+		printk(KERN_ERR "microcode: Could not apply microcode to CPU%d:"

WARNING:SPLIT_STRING: quoted string split across lines
#1026: FILE: arch/x86/kernel/microcode_intel.c:497:
+		printk(KERN_ERR "microcode: Could not apply microcode to CPU%d:"
+			" sig=0x%x, pf=0x%x, rev=0x%x\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249591.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 49 warnings, 24 checks, 978 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249591.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
