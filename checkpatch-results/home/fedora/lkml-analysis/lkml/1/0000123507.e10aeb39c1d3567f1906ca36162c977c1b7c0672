WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#63: FILE: fs/namei.c:1272:
+			dentry = union_create_topmost(nd, &this, &next);
 			                              ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#68: FILE: fs/namei.c:1277:
+			path_put_conditional(&next, nd);
 			                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#86: FILE: fs/namei.c:1337:
+			dentry = union_create_topmost(nd, &this, &next);
 			                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#91: FILE: fs/namei.c:1342:
+			path_put_conditional(&next, nd);
 			                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#105: FILE: fs/namei.c:1710:
+int hash_lookup_union(struct nameidata *nd, struct qstr *name,
                                         ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: fs/namei.c:1711:
+int hash_lookup_union(struct nameidata *nd, struct qstr *name,
 			     struct path *path)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#114: FILE: fs/namei.c:2195:
+			     is_unionized(nd.path.dentry, nd.path.mnt) &&
 			                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#114: FILE: fs/namei.c:2195:
+			     is_unionized(nd.path.dentry, nd.path.mnt) &&
 			                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#115: FILE: fs/namei.c:2196:
+			     S_ISREG(nd.path.dentry->d_inode->i_mode))) {
 			             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#116: FILE: fs/namei.c:2197:
+			error = union_copyup(&nd, flag);
 			                      ^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'path.dentry->d_parent != dir'
#137: FILE: fs/namei.c:2298:
+	if (path.dentry->d_inode && (path.dentry->d_parent != dir)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#138: FILE: fs/namei.c:2299:
+		error = __union_copyup(&path, &nd, &path);
 		                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#143: FILE: fs/namei.c:2304:
+	path_to_nameidata(&path, &nd);
 	                          ^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#187: FILE: fs/union.c:351:
+extern void follow_mount(struct vfsmount **, struct dentry **);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount **' should also have an identifier name
#187: FILE: fs/union.c:351:
+extern void follow_mount(struct vfsmount **, struct dentry **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#187: FILE: fs/union.c:351:
+extern void follow_mount(struct vfsmount **, struct dentry **);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#191: FILE: fs/union.c:355:
+ * @nd: pointer to nameidata
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#194: FILE: fs/union.c:358:
+static int union_relookup_topmost(struct nameidata *nd, int flags)
                                                     ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#209: FILE: fs/union.c:373:
+	err = path_lookup(name, flags|LOOKUP_CREATE|LOOKUP_TOPMOST, &this);
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#209: FILE: fs/union.c:373:
+	err = path_lookup(name, flags|LOOKUP_CREATE|LOOKUP_TOPMOST, &this);
 	                                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#220: FILE: fs/union.c:384:
+	BUG_ON(this.um_flags & LAST_LOWLEVEL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:RETURN_VOID: void function return statements are not generally useful
#243: FILE: fs/union.c:407:
+	return;
+}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#247: FILE: fs/union.c:411:
+ * @nd: pointer to nameidata of the base directory
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: fs/union.c:418:
+struct dentry *union_create_topmost(struct nameidata *nd, struct qstr *name,
                                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#283: FILE: fs/union.c:447:
+		res = vfs_create(parent->d_inode, dentry, mode, nd);
 		                                                ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#378: FILE: fs/union.c:542:
+	if (new_nd->path.dentry != new->dentry->d_parent) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#387: FILE: fs/union.c:551:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#401: FILE: fs/union.c:565:
+		BUG_ON(vfs_unlink(new_nd->path.dentry->d_inode, dentry));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#419: FILE: fs/union.c:583:
+ * @nd: nameidata pointer to the file
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#422: FILE: fs/union.c:586:
+int union_copyup(struct nameidata *nd, int flags)
                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#445: FILE: fs/union.c:609:
+	err = union_relookup_topmost(nd, nd->flags|LOOKUP_PARENT);
 	                             ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#445: FILE: fs/union.c:609:
+	err = union_relookup_topmost(nd, nd->flags|LOOKUP_PARENT);
 	                                          ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#454: FILE: fs/union.c:618:
+	err = hash_lookup_union(nd, &this, &path);
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#476: FILE: fs/union.c:640:
+		err = __union_copyup(&path, nd, &path);
 		                            ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#506: FILE: include/linux/union.h:56:
+extern struct dentry *union_create_topmost(struct nameidata *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#506: FILE: include/linux/union.h:56:
+extern struct dentry *union_create_topmost(struct nameidata *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#506: FILE: include/linux/union.h:56:
+extern struct dentry *union_create_topmost(struct nameidata *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct path *' should also have an identifier name
#506: FILE: include/linux/union.h:56:
+extern struct dentry *union_create_topmost(struct nameidata *, struct qstr *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#508: FILE: include/linux/union.h:58:
+extern int __union_copyup(struct path *, struct nameidata *, struct path *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct path *' should also have an identifier name
#508: FILE: include/linux/union.h:58:
+extern int __union_copyup(struct path *, struct nameidata *, struct path *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#508: FILE: include/linux/union.h:58:
+extern int __union_copyup(struct path *, struct nameidata *, struct path *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct path *' should also have an identifier name
#508: FILE: include/linux/union.h:58:
+extern int __union_copyup(struct path *, struct nameidata *, struct path *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#509: FILE: include/linux/union.h:59:
+extern int union_copyup(struct nameidata *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#509: FILE: include/linux/union.h:59:
+extern int union_copyup(struct nameidata *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#509: FILE: include/linux/union.h:59:
+extern int union_copyup(struct nameidata *, int);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#517: FILE: include/linux/union.h:74:
+#define union_create_topmost(x, y, z)	({ BUG(); (NULL); })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#518: FILE: include/linux/union.h:75:
+#define __union_copyup(x, y, z)		({ BUG(); (0); })

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123507.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 37 warnings, 10 checks, 458 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123507.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
