WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#50: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: fs/ceph/inode.c:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#77: FILE: fs/ceph/inode.c:23:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#87: FILE: fs/ceph/inode.c:33:
+	if (inode == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#90: FILE: fs/ceph/inode.c:36:
+		dout(40, "get_inode created new inode %p %llx.%llx ino %llx\n",
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#95: FILE: fs/ceph/inode.c:41:
+	dout(30, "get_inode on %lu=%llx.%llx got %p\n", inode->i_ino, vino.ino,
 	^^^^

WARNING:TYPO_SPELLING: 'constuct' may be misspelled - perhaps 'construct'?
#101: FILE: fs/ceph/inode.c:47:
+ * get/constuct snapdir inode for a given directory
        ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#110: FILE: fs/ceph/inode.c:56:
+	struct inode *inode = ceph_get_inode(parent->i_sb, vino);
+	if (IS_ERR(inode))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#121: FILE: fs/ceph/inode.c:67:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#131: FILE: fs/ceph/inode.c:77:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#170: FILE: fs/ceph/inode.c:116:
+	dout(20, "get_or_create_frag added %llx.%llx frag %x\n",
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: fs/ceph/inode.c:128:
+u32 ceph_choose_frag(struct ceph_inode_info *ci, u32 v,
+		       struct ceph_inode_frag *pfrag,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#187: FILE: fs/ceph/inode.c:133:
+	unsigned nway, i;

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#209: FILE: fs/ceph/inode.c:155:
+		dout(30, "choose_frag(%x) %x splits by %d (%d ways)\n", v, t,
 		^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#218: FILE: fs/ceph/inode.c:164:
+		BUG_ON(i == nway);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#220: FILE: fs/ceph/inode.c:166:
+	dout(30, "choose_frag(%x) = %x\n", v, t);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#250: FILE: fs/ceph/inode.c:196:
+			dout(20, "fill_dirfrag removed %llx.%llx frag %x"
 			^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#251: FILE: fs/ceph/inode.c:197:
+			dout(20, "fill_dirfrag removed %llx.%llx frag %x"
+			     " (no ref)\n", ceph_vinop(inode), id);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#256: FILE: fs/ceph/inode.c:202:
+			dout(20, "fill_dirfrag cleared %llx.%llx frag %x"
 			^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#257: FILE: fs/ceph/inode.c:203:
+			dout(20, "fill_dirfrag cleared %llx.%llx frag %x"
+			     " referral\n", ceph_vinop(inode), id);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#264: FILE: fs/ceph/inode.c:210:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#269: FILE: fs/ceph/inode.c:215:
+		/* this is not the end of the world; we can continue
+		   with bad/inaccurate delegation info */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#269: FILE: fs/ceph/inode.c:215:
+		   with bad/inaccurate delegation info */

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#280: FILE: fs/ceph/inode.c:226:
+	dout(20, "fill_dirfrag %llx.%llx frag %x referral mds %d ndist=%d\n",
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#288: FILE: fs/ceph/inode.c:234:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#301: FILE: fs/ceph/inode.c:247:
+	dout(10, "alloc_inode %p\n", &ci->vfs_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#367: FILE: fs/ceph/inode.c:313:
+	dout(30, "destroy_inode %p ino %llx.%llx\n", inode, ceph_vinop(inode));
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#378: FILE: fs/ceph/inode.c:324:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#395: FILE: fs/ceph/inode.c:341:
+		dout(10, "size %lld -> %llu\n", inode->i_size, size);
 		^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#397: FILE: fs/ceph/inode.c:343:
+		inode->i_blocks = (size + (1<<9) - 1) >> 9;
 		                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#400: FILE: fs/ceph/inode.c:346:
+			dout(10, "truncate_seq %u -> %u\n",
 			^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#404: FILE: fs/ceph/inode.c:350:
+			if (issued & (CEPH_CAP_FILE_RDCACHE|CEPH_CAP_FILE_RD|
 			                                   ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#404: FILE: fs/ceph/inode.c:350:
+			if (issued & (CEPH_CAP_FILE_RDCACHE|CEPH_CAP_FILE_RD|
 			                                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#405: FILE: fs/ceph/inode.c:351:
+				      CEPH_CAP_FILE_WR|CEPH_CAP_FILE_WRBUFFER|
 				                      ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#405: FILE: fs/ceph/inode.c:351:
+				      CEPH_CAP_FILE_WR|CEPH_CAP_FILE_WRBUFFER|
 				                                             ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#412: FILE: fs/ceph/inode.c:358:
+		dout(10, "truncate_size %lld -> %llu\n", ci->i_truncate_size,
 		^^^^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#426: FILE: fs/ceph/inode.c:372:
+	if (issued & (CEPH_CAP_FILE_EXCL|
 	                                ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#427: FILE: fs/ceph/inode.c:373:
+		      CEPH_CAP_FILE_WR|
 		                      ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#459: FILE: fs/ceph/inode.c:405:
+		dout(10, "%p mds time_warp_seq %llu < %u\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#483: FILE: fs/ceph/inode.c:429:
+	dout(30, "fill_inode %p ino %llx.%llx v %llu had %llu\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fill_inode', this function's name, in a string
#483: FILE: fs/ceph/inode.c:429:
+	dout(30, "fill_inode %p ino %llx.%llx v %llu had %llu\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#523: FILE: fs/ceph/inode.c:469:
+		dout(20, "%p mode 0%o uid.gid %d.%d\n", inode, inode->i_mode, 
 		^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: fs/ceph/inode.c:469:
+^I^Idout(20, "%p mode 0%o uid.gid %d.%d\n", inode, inode->i_mode, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#527: FILE: fs/ceph/inode.c:473:
+	if ((issued & CEPH_CAP_LINK_EXCL) == 0) {
+		inode->i_nlink = le32_to_cpu(info->nlink);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#589: FILE: fs/ceph/inode.c:535:
+		dout(20, " frag %x split by %d\n", frag->frag, frag->split_by);
 		^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#637: FILE: fs/ceph/inode.c:583:
+			BUG_ON(symlen != inode->i_size);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#639: FILE: fs/ceph/inode.c:585:
+			ci->i_symlink = kmalloc(symlen+1, GFP_NOFS);
 			                              ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#666: FILE: fs/ceph/inode.c:612:
+			dout(10, " marking %p complete (empty)\n", inode);
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#692: FILE: fs/ceph/inode.c:638:
+	dout(10, "ceph_inode_holds_cap inode %p have %s want %s = %d\n", inode,
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_inode_holds_cap', this function's name, in a string
#692: FILE: fs/ceph/inode.c:638:
+	dout(10, "ceph_inode_holds_cap inode %p have %s want %s = %d\n", inode,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#697: FILE: fs/ceph/inode.c:643:
+
+

WARNING:MISORDERED_TYPE: type 'long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#708: FILE: fs/ceph/inode.c:654:
+	long unsigned duration = le32_to_cpu(lease->duration_ms);

WARNING:MISORDERED_TYPE: type 'long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#709: FILE: fs/ceph/inode.c:655:
+	long unsigned ttl = from_time + (duration * HZ) / 1000;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#713: FILE: fs/ceph/inode.c:659:
+^I^Ireturn;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#714: FILE: fs/ceph/inode.c:660:
+^I$

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#715: FILE: fs/ceph/inode.c:661:
+	dout(10, "update_dentry_lease %p mask %d duration %lu ms ttl %lu\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'update_dentry_lease', this function's name, in a string
#715: FILE: fs/ceph/inode.c:661:
+	dout(10, "update_dentry_lease %p mask %d duration %lu ms ttl %lu\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#725: FILE: fs/ceph/inode.c:671:
+		struct inode *dir = dentry->d_parent->d_inode;
+		dentry->d_time = ceph_inode(dir)->i_version;

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#726: FILE: fs/ceph/inode.c:672:
+		dout(20, " no lease, setting d_time to %lu\n", dentry->d_time);
 		^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#737: FILE: fs/ceph/inode.c:683:
+	if (!di) {
[...]
+	} else if (di->lease_session != session)
[...]

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*di)...) over kmalloc(sizeof(struct ceph_dentry_info)...)
#739: FILE: fs/ceph/inode.c:685:
+		di = kmalloc(sizeof(struct ceph_dentry_info),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:RETURN_VOID: void function return statements are not generally useful
#759: FILE: fs/ceph/inode.c:705:
+	return;
+}

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#792: FILE: fs/ceph/inode.c:738:
+	dout(20, "dentry_lease_valid - dentry %p = %d\n", dentry, valid);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#796: FILE: fs/ceph/inode.c:742:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#822: FILE: fs/ceph/inode.c:768:
+		dout(10, "dn %p (%d) spliced with %p (%d) "
 		^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#823: FILE: fs/ceph/inode.c:769:
+		dout(10, "dn %p (%d) spliced with %p (%d) "
+		     "inode %p ino %llx.%llx\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#831: FILE: fs/ceph/inode.c:777:
+		dout(10, "dn %p attached to %p ino %llx.%llx\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#872: FILE: fs/ceph/inode.c:818:
+		dout(10, "fill_trace reply has empty trace!\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#876: FILE: fs/ceph/inode.c:822:
+			dout(10, " clearing %p complete (empty trace)\n",
 			^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#876: FILE: fs/ceph/inode.c:822:
+			struct ceph_inode_info *ci = ceph_inode(req->r_locked_dir);
+			dout(10, " clearing %p complete (empty trace)\n",

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#884: FILE: fs/ceph/inode.c:830:
+#if 0

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#891: FILE: fs/ceph/inode.c:837:
+		dout(0, "fill_trace faking empty trace on %d %s\n",
 		^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#905: FILE: fs/ceph/inode.c:851:
+		 * (if it is in an mds stray dir) */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn"
#913: FILE: fs/ceph/inode.c:859:
+		if (dn == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sb->s_root"
#929: FILE: fs/ceph/inode.c:875:
+		if (unlikely(sb->s_root == NULL))

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#942: FILE: fs/ceph/inode.c:888:
+		dout(10, "fill_trace %d/%d parent %p inode %p: '%.*s'"
 		^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#943: FILE: fs/ceph/inode.c:889:
+		dout(10, "fill_trace %d/%d parent %p inode %p: '%.*s'"
+		     " dmask %d\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#944: FILE: fs/ceph/inode.c:890:
+		     (d+1), rinfo->trace_numd, parent, parent->d_inode,
 		       ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#951: FILE: fs/ceph/inode.c:897:
+			dout(10, "fill_trace  FAILED to take %p i_mutex\n",
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#967: FILE: fs/ceph/inode.c:913:
+			dout(10, "fill_trace  no dentry lease or dir cap\n");
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#969: FILE: fs/ceph/inode.c:915:
+		dout(10, "fill_trace  took %p i_mutex\n", parent->d_inode);
 		^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#972: FILE: fs/ceph/inode.c:918:
+	retry_lookup:

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#975: FILE: fs/ceph/inode.c:921:
+		dout(10, "fill_trace d_lookup of '%.*s' got %p\n",
 		^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#982: FILE: fs/ceph/inode.c:928:
+		if (d == rinfo->trace_numd-1 && req->r_dentry) {
 		                          ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#985: FILE: fs/ceph/inode.c:931:
+				dout(10, "fill_trace provided dn %p '%.*s'\n",
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#989: FILE: fs/ceph/inode.c:935:
+				dout(10, "fill_trace matches provided dn %p\n",
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#993: FILE: fs/ceph/inode.c:939:
+				dout(10, "fill_trace NOT using provided dn %p "
 				^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#994: FILE: fs/ceph/inode.c:940:
+				dout(10, "fill_trace NOT using provided dn %p "
+				     "(parent %p)\n", req->r_dentry,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1008: FILE: fs/ceph/inode.c:954:
+			dout(10, "fill_trace d_alloc %p '%.*s'\n", dn,
 			^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1012: FILE: fs/ceph/inode.c:958:
+		BUG_ON(!dn);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1015: FILE: fs/ceph/inode.c:961:
+		if (d+1 == rinfo->trace_numi) {
 		     ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1016: FILE: fs/ceph/inode.c:962:
+			dout(10, "fill_trace null dentry\n");
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1018: FILE: fs/ceph/inode.c:964:
+				dout(20, "d_delete %p\n", dn);
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1023: FILE: fs/ceph/inode.c:969:
+			dout(20, "d_instantiate %p NULL\n", dn);
 			^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1033: FILE: fs/ceph/inode.c:979:
+		if (d == rinfo->trace_numd-1 && req->r_old_dentry) {
 		                          ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1034: FILE: fs/ceph/inode.c:980:
+			dout(10, " src %p '%.*s' dst %p '%.*s'\n",
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1039: FILE: fs/ceph/inode.c:985:
+			dout(10, "fill_trace doing d_move %p -> %p\n",
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1042: FILE: fs/ceph/inode.c:988:
+			dout(10, " src %p '%.*s' dst %p '%.*s'\n",
 			^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1053: FILE: fs/ceph/inode.c:999:
+		ininfo = rinfo->trace_in[d+1].in;
 		                          ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1059: FILE: fs/ceph/inode.c:1005:
+				dout(10, "dn %p wrong inode %p ino %llx.%llx\n",
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1066: FILE: fs/ceph/inode.c:1012:
+			dout(10, "dn %p correct %p ino %llx.%llx\n",
 			^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1071: FILE: fs/ceph/inode.c:1017:
+			struct dentry *newdn;
+			in = ceph_get_inode(dn->d_sb, vino);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1081: FILE: fs/ceph/inode.c:1027:
+			if (IS_ERR(newdn)) {
+				goto no_mutex_find_alias;
+			}

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1093: FILE: fs/ceph/inode.c:1039:
+			dout(10, " updated parent, clearing %p complete\n", parent->d_inode);
 			^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1093: FILE: fs/ceph/inode.c:1039:
+			struct ceph_inode_info *ci = ceph_inode(parent->d_inode);
+			dout(10, " updated parent, clearing %p complete\n", parent->d_inode);

WARNING:INDENTED_LABEL: labels should not be indented
#1101: FILE: fs/ceph/inode.c:1047:
+	update_inode:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1102: FILE: fs/ceph/inode.c:1048:
+		BUG_ON(dn->d_inode != in);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1104: FILE: fs/ceph/inode.c:1050:
+				 &rinfo->trace_in[d+1],
 				                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1106: FILE: fs/ceph/inode.c:1052:
+				 rinfo->trace_dir[d+1] : NULL,
 				                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1108: FILE: fs/ceph/inode.c:1054:
+				 (d == rinfo->trace_numd-1 &&
 				                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1125: FILE: fs/ceph/inode.c:1071:
+			struct inode *snapdir = ceph_get_snapdir(in);
+			dput(dn);

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#1131: FILE: fs/ceph/inode.c:1077:
+				dname.name = client->mount_args.snapdir_name,
+				dname.len = strlen(dname.name);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1138: FILE: fs/ceph/inode.c:1084:
+					iput(snapdir);
 					^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1143: FILE: fs/ceph/inode.c:1089:
+			iput(snapdir);
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1144: FILE: fs/ceph/inode.c:1090:
+			dout(10, " snapdir dentry is %p\n", dn);
 			^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1148: FILE: fs/ceph/inode.c:1094:
+
+

WARNING:INDENTED_LABEL: labels should not be indented
#1149: FILE: fs/ceph/inode.c:1095:
+	out_dir_no_inode:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1156: FILE: fs/ceph/inode.c:1102:
+
+

WARNING:INDENTED_LABEL: labels should not be indented
#1157: FILE: fs/ceph/inode.c:1103:
+	no_dir_mutex:

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1162: FILE: fs/ceph/inode.c:1108:
+		if (d == rinfo->trace_numd-1 && req->r_dentry) {
 		                          ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1164: FILE: fs/ceph/inode.c:1110:
+			dout(10, "fill_trace using provided dn %p\n", dn);
 			^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1170: FILE: fs/ceph/inode.c:1116:
+		if (d+1 == rinfo->trace_numi) {
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1178: FILE: fs/ceph/inode.c:1124:
+		ininfo = rinfo->trace_in[d+1].in;
 		                          ^

WARNING:INDENTED_LABEL: labels should not be indented
#1188: FILE: fs/ceph/inode.c:1134:
+	no_mutex_find_alias:

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1193: FILE: fs/ceph/inode.c:1139:
+			iput(in);
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1195: FILE: fs/ceph/inode.c:1141:
+			dout(10, " using existing %p alias %p\n", in, dn);
 			^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn->d_inode"
#1198: FILE: fs/ceph/inode.c:1144:
+			if (dn && dn->d_inode == NULL) {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1199: FILE: fs/ceph/inode.c:1145:
+				dout(10, " instantiating provided %p\n", dn);
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1203: FILE: fs/ceph/inode.c:1149:
+					dout(10, " ignoring provided dn %p\n",
 					^^^^

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1207: FILE: fs/ceph/inode.c:1153:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 28)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1207: FILE: fs/ceph/inode.c:1153:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 28)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1212: FILE: fs/ceph/inode.c:1158:
+				iput(in);
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1213: FILE: fs/ceph/inode.c:1159:
+				dout(10, " d_alloc_anon new dn %p\n", dn);
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1221: FILE: fs/ceph/inode.c:1167:
+	dout(10, "fill_trace done err=%d, last dn %p in %p\n", err, dn, in);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1226: FILE: fs/ceph/inode.c:1172:
+		iput(req->r_last_inode);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1250: FILE: fs/ceph/inode.c:1196:
+		dout(10, "readdir_prepopulate %d items under SNAPDIR dn %p\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1253: FILE: fs/ceph/inode.c:1199:
+		dout(10, "readdir_prepopulate %d items under dn %p\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1271: FILE: fs/ceph/inode.c:1217:
+		dout(30, "d_lookup on parent=%p name=%.*s got %p\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1276: FILE: fs/ceph/inode.c:1222:
+			dout(40, "d_alloc %p '%.*s' = %p\n", parent,
 			^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn"
#1278: FILE: fs/ceph/inode.c:1224:
+			if (dn == NULL) {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1279: FILE: fs/ceph/inode.c:1225:
+				dout(30, "d_alloc badness\n");
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1287: FILE: fs/ceph/inode.c:1233:
+			dout(10, " dn %p points to wrong inode %p\n",
 			^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!in"
#1299: FILE: fs/ceph/inode.c:1245:
+			if (in == NULL) {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1300: FILE: fs/ceph/inode.c:1246:
+				dout(30, "new_inode badness\n");
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1311: FILE: fs/ceph/inode.c:1257:
+			dout(0, "fill_inode badness on %p\n", in);
 			^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1322: FILE: fs/ceph/inode.c:1268:
+		iput(snapdir);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1325: FILE: fs/ceph/inode.c:1271:
+	dout(10, "readdir_prepopulate done\n");
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1329: FILE: fs/ceph/inode.c:1275:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1335: FILE: fs/ceph/inode.c:1281:
+	dout(30, "set_size %p %llu -> %llu\n", inode, inode->i_size, size);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1359: FILE: fs/ceph/inode.c:1305:
+	dout(10, "writeback %p\n", inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1361: FILE: fs/ceph/inode.c:1307:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1377: FILE: fs/ceph/inode.c:1323:
+	dout(10, "invalidate_pages %p gen %d revoking %d\n", inode,
 	^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1381: FILE: fs/ceph/inode.c:1327:
+		BUG_ON(ci->i_rdcache_revoking > ci->i_rdcache_gen);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1394: FILE: fs/ceph/inode.c:1340:
+		dout(10, "invalidate_pages %p gen %d successful\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1400: FILE: fs/ceph/inode.c:1346:
+		dout(10, "invalidate_pages %p gen %d raced, gen now %d\n",
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1408: FILE: fs/ceph/inode.c:1354:
+	iput(inode);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1411: FILE: fs/ceph/inode.c:1357:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1423: FILE: fs/ceph/inode.c:1369:
+	dout(10, "vmtruncate_work %p\n", inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1427: FILE: fs/ceph/inode.c:1373:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1444: FILE: fs/ceph/inode.c:1390:
+		dout(10, "__do_pending_vmtruncate %p none pending\n", inode);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1450: FILE: fs/ceph/inode.c:1396:
+	dout(10, "__do_pending_vmtruncate %p (%d) to %lld\n", inode,
 	^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1471: FILE: fs/ceph/inode.c:1417:
+static void *ceph_sym_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1474: FILE: fs/ceph/inode.c:1420:
+	nd_set_link(nd, ci->i_symlink);
 	            ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1474: FILE: fs/ceph/inode.c:1420:
+	struct ceph_inode_info *ci = ceph_inode(dentry->d_inode);
+	nd_set_link(nd, ci->i_symlink);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1483: FILE: fs/ceph/inode.c:1429:
+
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1497: FILE: fs/ceph/inode.c:1443:
+	    (issued & (CEPH_CAP_FILE_WR|CEPH_CAP_FILE_WRBUFFER)))
 	                               ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1500: FILE: fs/ceph/inode.c:1446:
+	dout(5, "prepare_setattr dentry %p (inode %llx.%llx)\n", dentry,
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_setattr', this function's name, in a string
#1500: FILE: fs/ceph/inode.c:1446:
+	dout(5, "prepare_setattr dentry %p (inode %llx.%llx)\n", dentry,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1520: FILE: fs/ceph/inode.c:1466:
+		dout(10, "chown holding auth EXCL, doing locally\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1547: FILE: fs/ceph/inode.c:1493:
+	dout(10, "chown result %d\n", err);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1563: FILE: fs/ceph/inode.c:1509:
+		dout(10, "chmod holding auth EXCL, doing locally\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1579: FILE: fs/ceph/inode.c:1525:
+	dout(10, "chmod result %d\n", err);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1596: FILE: fs/ceph/inode.c:1542:
+		dout(10, "utime holding EXCL, doing locally\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1613: FILE: fs/ceph/inode.c:1559:
+		dout(10, "utime holding WR, doing [am]time increase locally\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1628: FILE: fs/ceph/inode.c:1574:
+		dout(10, "lease indicates utimes is a no-op\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1647: FILE: fs/ceph/inode.c:1593:
+	dout(10, "utime result %d\n", err);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1662: FILE: fs/ceph/inode.c:1608:
+	dout(10, "truncate: ia_size %d i_size %d\n",
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1666: FILE: fs/ceph/inode.c:1612:
+		dout(10, "holding EXCL, doing truncate (fwd) locally\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1679: FILE: fs/ceph/inode.c:1625:
+		dout(10, "lease indicates truncate is a no-op\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1690: FILE: fs/ceph/inode.c:1636:
+	dout(10, "truncate result %d\n", err);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1695: FILE: fs/ceph/inode.c:1641:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1713: FILE: fs/ceph/inode.c:1659:
+		dout(10, "setattr: %p uid %d -> %d\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1716: FILE: fs/ceph/inode.c:1662:
+		dout(10, "setattr: %p gid %d -> %d\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1719: FILE: fs/ceph/inode.c:1665:
+		dout(10, "setattr: %p mode 0%o -> 0%o\n", inode, inode->i_mode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1722: FILE: fs/ceph/inode.c:1668:
+		dout(10, "setattr: %p size %lld -> %lld\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1725: FILE: fs/ceph/inode.c:1671:
+		dout(10, "setattr: %p atime %ld.%ld -> %ld.%ld\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1729: FILE: fs/ceph/inode.c:1675:
+		dout(10, "setattr: %p mtime %ld.%ld -> %ld.%ld\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1733: FILE: fs/ceph/inode.c:1679:
+		dout(10, "setattr: %p ctime %ld.%ld -> %ld.%ld\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1737: FILE: fs/ceph/inode.c:1683:
+		dout(10, "setattr: %p ATTR_FILE ... hrm!\n", inode);
 		^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1739: FILE: fs/ceph/inode.c:1685:
+	if (ia_valid & (ATTR_UID|ATTR_GID))
 	                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1743: FILE: fs/ceph/inode.c:1689:
+	if (ia_valid & (ATTR_ATIME|ATTR_MTIME))
 	                          ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1760: FILE: fs/ceph/inode.c:1706:
+		dout(30, "getattr dentry %p inode %p SNAPDIR\n", dentry,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1765: FILE: fs/ceph/inode.c:1711:
+	dout(30, "getattr dentry %p inode %p mask %d\n", dentry,
 	^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1776: FILE: fs/ceph/inode.c:1722:
+		if (ceph_get_cap_mds(dentry->d_inode) >= 0)
[...]
+		else if (dentry != dentry->d_inode->i_sb->s_root) {
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#1780: FILE: fs/ceph/inode.c:1726:
+			derr(0, "WARNING: getattr on unhashed cap-less"
+			     " dentry %p %.*s\n", dentry,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1807: FILE: fs/ceph/inode.c:1753:
+	dout(30, "getattr returned %d\n", err);
 	^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (vir_xattr->getxattr_cb)
#1918: FILE: fs/ceph/inode.c:1864:
+		return (vir_xattr->getxattr_cb)(ci, value, size);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#1938: FILE: fs/ceph/inode.c:1884:
+		int match;
+		ceph_decode_32_safe(&p, end, len, bad);

ERROR:SPACING: spaces required around that '>' (ctx:VxW)
#2012: FILE: fs/ceph/inode.c:1958:
+	if (ci->i_xattr_len> 4) {
 	                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "_ceph_match_vir_xattr"
#2067: FILE: fs/ceph/inode.c:2013:
+	if (_ceph_match_vir_xattr(name) != NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2073: FILE: fs/ceph/inode.c:2019:
+		pages = kmalloc(sizeof(pages)*nr_pages, GFP_NOFS);
 		                             ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#2073: FILE: fs/ceph/inode.c:2019:
+		pages = kmalloc(sizeof(pages)*nr_pages, GFP_NOFS);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2084: FILE: fs/ceph/inode.c:2030:
+			memcpy(kaddr, value + i*PAGE_CACHE_SIZE,
 			                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2085: FILE: fs/ceph/inode.c:2031:
+			       min(PAGE_CACHE_SIZE, size-i*PAGE_CACHE_SIZE));
 			                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2085: FILE: fs/ceph/inode.c:2031:
+			       min(PAGE_CACHE_SIZE, size-i*PAGE_CACHE_SIZE));
 			                                  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "_ceph_match_vir_xattr"
#2131: FILE: fs/ceph/inode.c:2077:
+	if (_ceph_match_vir_xattr(name) != NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157323.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 149 warnings, 53 checks, 2090 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157323.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
