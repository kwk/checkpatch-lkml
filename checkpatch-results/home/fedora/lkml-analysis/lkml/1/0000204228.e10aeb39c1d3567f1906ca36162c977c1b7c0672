WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#43: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: fs/ceph/super.h:1:
+#ifndef _FS_CEPH_SUPER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#71: FILE: fs/ceph/super.h:24:
+ * large volume sizes on 32-bit machines. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BIT_MACRO: Prefer using the BIT macro
#73: FILE: fs/ceph/super.h:26:
+#define CEPH_BLOCK         (1 << CEPH_BLOCK_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#80: FILE: fs/ceph/super.h:33:
+	BUG_ON(time_after(b, a));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#87: FILE: fs/ceph/super.h:40:
+#define CEPH_MOUNT_FSID          (1<<0)
                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#87: FILE: fs/ceph/super.h:40:
+#define CEPH_MOUNT_FSID          (1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#88: FILE: fs/ceph/super.h:41:
+#define CEPH_MOUNT_NOSHARE       (1<<1) /* don't share client with other sbs */
                                    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#88: FILE: fs/ceph/super.h:41:
+#define CEPH_MOUNT_NOSHARE       (1<<1) /* don't share client with other sbs */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#89: FILE: fs/ceph/super.h:42:
+#define CEPH_MOUNT_MYIP          (1<<2) /* specified my ip */
                                    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#89: FILE: fs/ceph/super.h:42:
+#define CEPH_MOUNT_MYIP          (1<<2) /* specified my ip */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#90: FILE: fs/ceph/super.h:43:
+#define CEPH_MOUNT_UNSAFE_WRITEBACK (1<<3)
                                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#90: FILE: fs/ceph/super.h:43:
+#define CEPH_MOUNT_UNSAFE_WRITEBACK (1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#91: FILE: fs/ceph/super.h:44:
+#define CEPH_MOUNT_DIRSTAT       (1<<4) /* funky `cat dirname` for stats */
                                    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#91: FILE: fs/ceph/super.h:44:
+#define CEPH_MOUNT_DIRSTAT       (1<<4) /* funky `cat dirname` for stats */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#92: FILE: fs/ceph/super.h:45:
+#define CEPH_MOUNT_RBYTES        (1<<5) /* dir st_bytes = rbytes */
                                    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#92: FILE: fs/ceph/super.h:45:
+#define CEPH_MOUNT_RBYTES        (1<<5) /* dir st_bytes = rbytes */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#93: FILE: fs/ceph/super.h:46:
+#define CEPH_MOUNT_NOCRC         (1<<6) /* no data crc on writes */
                                    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#93: FILE: fs/ceph/super.h:46:
+#define CEPH_MOUNT_NOCRC         (1<<6) /* no data crc on writes */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#97: FILE: fs/ceph/super.h:50:
+#define CEPH_DEFAULT_READ_SIZE	(128*1024) /* readahead */
                               	    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#123: FILE: fs/ceph/super.h:76:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#225: FILE: fs/ceph/super.h:178:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#243: FILE: fs/ceph/super.h:196:
+
+

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#245: FILE: fs/ceph/super.h:198:
+	struct mutex i_fragtree_mutex;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: fs/ceph/super.h:201:
+	 * this until someone actually called getxattr, etc. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#253: FILE: fs/ceph/super.h:206:
+	 * s_mutex. */

WARNING:MISORDERED_TYPE: type 'long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#256: FILE: fs/ceph/super.h:209:
+	long unsigned i_lease_ttl;     /* jiffies */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#261: FILE: fs/ceph/super.h:214:
+	 * s_mutex. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#267: FILE: fs/ceph/super.h:220:
+	unsigned i_cap_exporting_mseq;   /*  mds's. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#268: FILE: fs/ceph/super.h:221:
+	unsigned i_cap_exporting_issued;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#271: FILE: fs/ceph/super.h:224:
+	unsigned i_snap_caps;           /* cap bits for snapped files */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#286: FILE: fs/ceph/super.h:239:
+	u32 i_rdcache_gen;      /* we increment this each time we get RDCACHE.
+				   If it's non-zero, we _may_ have cached

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#287: FILE: fs/ceph/super.h:240:
+				   pages. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#318: FILE: fs/ceph/super.h:271:
+		int c = frag_compare(f, frag->frag);
+		if (c < 0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: fs/ceph/super.h:285:
+extern u32 ceph_choose_frag(struct ceph_inode_info *ci, u32 v,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: fs/ceph/super.h:286:
+extern u32 ceph_choose_frag(struct ceph_inode_info *ci, u32 v,
+			      struct ceph_inode_frag *pfrag,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#351: FILE: fs/ceph/super.h:304:
+
+

WARNING:TYPO_SPELLING: 'leaset' may be misspelled - perhaps 'least'?
#355: FILE: fs/ceph/super.h:308:
+ * don't include snap in ino hash, at leaset for now.
                                       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#361: FILE: fs/ceph/super.h:314:
+	ino ^= vino.ino >> (sizeof(u64)-sizeof(ino_t)) * 8;
 	                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#379: FILE: fs/ceph/super.h:332:
+#define ceph_vinop(i) ceph_inode(i)->i_vino.ino, ceph_inode(i)->i_vino.snap

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#379: FILE: fs/ceph/super.h:332:
+#define ceph_vinop(i) ceph_inode(i)->i_vino.ino, ceph_inode(i)->i_vino.snap

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#385: FILE: fs/ceph/super.h:338:
+}
+static inline u64 ceph_snap(struct inode *inode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#394: FILE: fs/ceph/super.h:347:
+	struct ceph_inode_info *ci = ceph_inode(inode);
+	return ci->i_vino.ino == pvino->ino &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: fs/ceph/super.h:355:
+	ino_t t = ceph_vino_to_ino(vino);
+	return ilookup5(sb, t, ceph_ino_compare, &vino);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#405: FILE: fs/ceph/super.h:358:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#409: FILE: fs/ceph/super.h:362:
+extern int __ceph_caps_issued(struct ceph_inode_info *ci, int *implemented);

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: fs/ceph/super.h:367:
+	int issued;
+	spin_lock(&ci->vfs_inode.i_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#423: FILE: fs/ceph/super.h:376:
+	int used = 0;
+	if (ci->i_rd_ref)

WARNING:LINE_SPACING: Missing a blank line after declarations
#441: FILE: fs/ceph/super.h:394:
+	int mode;
+	for (mode = 0; mode < 4; mode++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#453: FILE: fs/ceph/super.h:406:
+	int w = __ceph_caps_file_wanted(ci) | __ceph_caps_used(ci);
+	if (w & CEPH_CAP_WRBUFFER)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#463: FILE: fs/ceph/super.h:416:
+}
+extern void ceph_put_fmode(struct ceph_inode_info *ci, int mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#463: FILE: fs/ceph/super.h:416:
+extern void ceph_put_fmode(struct ceph_inode_info *ci, int mode);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#487: FILE: fs/ceph/super.h:440:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#501: FILE: fs/ceph/super.h:454:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#526: FILE: fs/ceph/super.h:479:
+	/*
+	printk("get_snap_context %p %d -> %d\n", sc, atomic_read(&sc->nref),

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#539: FILE: fs/ceph/super.h:492:
+	/*
+	printk("put_snap_context %p %d -> %d\n", sc, atomic_read(&sc->nref),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#579: FILE: fs/ceph/super.h:532:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#587: FILE: fs/ceph/super.h:540:
+	return ((off+len+PAGE_CACHE_SIZE-1) >> PAGE_CACHE_SHIFT) -
 	            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#587: FILE: fs/ceph/super.h:540:
+	return ((off+len+PAGE_CACHE_SIZE-1) >> PAGE_CACHE_SHIFT) -
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#587: FILE: fs/ceph/super.h:540:
+	return ((off+len+PAGE_CACHE_SIZE-1) >> PAGE_CACHE_SHIFT) -
 	                                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#591: FILE: fs/ceph/super.h:544:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#594: FILE: fs/ceph/super.h:547:
+extern void ceph_put_snap_realm(struct ceph_mds_client *mdsc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#596: FILE: fs/ceph/super.h:549:
+extern struct ceph_snap_realm *ceph_update_snap_trace(struct ceph_mds_client *m,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#599: FILE: fs/ceph/super.h:552:
+extern void ceph_handle_snap(struct ceph_mds_client *mdsc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#601: FILE: fs/ceph/super.h:554:
+extern void ceph_queue_cap_snap(struct ceph_inode_info *ci,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#603: FILE: fs/ceph/super.h:556:
+extern int __ceph_finish_cap_snap(struct ceph_inode_info *ci,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#617: FILE: fs/ceph/super.h:570:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#619: FILE: fs/ceph/super.h:572:
+extern const char *ceph_msg_type_name(int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#625: FILE: fs/ceph/super.h:578:
+extern struct inode *ceph_alloc_inode(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#626: FILE: fs/ceph/super.h:579:
+extern void ceph_destroy_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#628: FILE: fs/ceph/super.h:581:
+extern struct inode *ceph_get_inode(struct super_block *sb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#630: FILE: fs/ceph/super.h:583:
+extern struct inode *ceph_get_snapdir(struct inode *parent);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#631: FILE: fs/ceph/super.h:584:
+extern int ceph_fill_inode(struct inode *inode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#634: FILE: fs/ceph/super.h:587:
+extern void ceph_fill_file_bits(struct inode *inode, int issued,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#638: FILE: fs/ceph/super.h:591:
+extern int ceph_fill_trace(struct super_block *sb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#641: FILE: fs/ceph/super.h:594:
+extern int ceph_readdir_prepopulate(struct ceph_mds_request *req);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#643: FILE: fs/ceph/super.h:596:
+extern int ceph_inode_lease_valid(struct inode *inode, int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#644: FILE: fs/ceph/super.h:597:
+extern int ceph_dentry_lease_valid(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#646: FILE: fs/ceph/super.h:599:
+extern void ceph_inode_set_size(struct inode *inode, loff_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#647: FILE: fs/ceph/super.h:600:
+extern void ceph_inode_writeback(struct work_struct *work);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#648: FILE: fs/ceph/super.h:601:
+extern void ceph_vmtruncate_work(struct work_struct *work);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#649: FILE: fs/ceph/super.h:602:
+extern void __ceph_do_pending_vmtruncate(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#651: FILE: fs/ceph/super.h:604:
+extern int ceph_do_getattr(struct dentry *dentry, int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#652: FILE: fs/ceph/super.h:605:
+extern int ceph_setattr(struct dentry *dentry, struct iattr *attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#653: FILE: fs/ceph/super.h:606:
+extern int ceph_getattr(struct vfsmount *mnt, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#655: FILE: fs/ceph/super.h:608:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#655: FILE: fs/ceph/super.h:608:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#655: FILE: fs/ceph/super.h:608:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#655: FILE: fs/ceph/super.h:608:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#655: FILE: fs/ceph/super.h:608:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#655: FILE: fs/ceph/super.h:608:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#657: FILE: fs/ceph/super.h:610:
+extern ssize_t ceph_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#657: FILE: fs/ceph/super.h:610:
+extern ssize_t ceph_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#657: FILE: fs/ceph/super.h:610:
+extern ssize_t ceph_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#657: FILE: fs/ceph/super.h:610:
+extern ssize_t ceph_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#657: FILE: fs/ceph/super.h:610:
+extern ssize_t ceph_getxattr(struct dentry *, const char *, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#658: FILE: fs/ceph/super.h:611:
+extern ssize_t ceph_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#658: FILE: fs/ceph/super.h:611:
+extern ssize_t ceph_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#658: FILE: fs/ceph/super.h:611:
+extern ssize_t ceph_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#658: FILE: fs/ceph/super.h:611:
+extern ssize_t ceph_listxattr(struct dentry *, char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: fs/ceph/super.h:612:
+extern int ceph_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#659: FILE: fs/ceph/super.h:612:
+extern int ceph_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#659: FILE: fs/ceph/super.h:612:
+extern int ceph_removexattr(struct dentry *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#662: FILE: fs/ceph/super.h:615:
+extern void ceph_handle_caps(struct ceph_mds_client *mdsc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#664: FILE: fs/ceph/super.h:617:
+extern int ceph_add_cap(struct inode *inode,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#666: FILE: fs/ceph/super.h:619:
+			int fmode, unsigned issued,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#667: FILE: fs/ceph/super.h:620:
+			unsigned cap, unsigned seq,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#667: FILE: fs/ceph/super.h:620:
+			unsigned cap, unsigned seq,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#670: FILE: fs/ceph/super.h:623:
+extern void ceph_remove_cap(struct ceph_cap *cap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#671: FILE: fs/ceph/super.h:624:
+extern int ceph_get_cap_mds(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#672: FILE: fs/ceph/super.h:625:
+extern int ceph_get_cap_refs(struct ceph_inode_info *ci, int need, int want,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#674: FILE: fs/ceph/super.h:627:
+extern void ceph_put_cap_refs(struct ceph_inode_info *ci, int had);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#675: FILE: fs/ceph/super.h:628:
+extern void ceph_put_wrbuffer_cap_refs(struct ceph_inode_info *ci, int nr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#677: FILE: fs/ceph/super.h:630:
+extern void __ceph_flush_snaps(struct ceph_inode_info *ci,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#679: FILE: fs/ceph/super.h:632:
+extern void ceph_check_caps(struct ceph_inode_info *ci, int delayed);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#680: FILE: fs/ceph/super.h:633:
+extern void ceph_check_delayed_caps(struct ceph_mds_client *mdsc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#684: FILE: fs/ceph/super.h:637:
+extern int ceph_mmap(struct file *file, struct vm_area_struct *vma);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#689: FILE: fs/ceph/super.h:642:
+extern int ceph_open(struct inode *inode, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#690: FILE: fs/ceph/super.h:643:
+extern struct dentry *ceph_lookup_open(struct inode *dir, struct dentry *dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#691: FILE: fs/ceph/super.h:644:
+				       struct nameidata *nd, int mode,
 				                         ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#693: FILE: fs/ceph/super.h:646:
+extern int ceph_release(struct inode *inode, struct file *filp);
                                                           ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#693: FILE: fs/ceph/super.h:646:
+extern int ceph_release(struct inode *inode, struct file *filp);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#695: FILE: fs/ceph/super.h:648:
+
+

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#699: FILE: fs/ceph/super.h:652:
+extern struct dentry_operations ceph_dentry_ops, ceph_snap_dentry_ops,

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#702: FILE: fs/ceph/super.h:655:
+extern char *ceph_build_path(struct dentry *dn, int *len, u64 *base, int min);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#703: FILE: fs/ceph/super.h:656:
+extern struct dentry *ceph_do_lookup(struct super_block *sb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#706: FILE: fs/ceph/super.h:659:
+extern struct dentry *ceph_finish_lookup(struct ceph_mds_request *req,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#725: FILE: fs/ceph/super.h:678:
+extern long ceph_ioctl(struct file *file, unsigned int cmd, unsigned long arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#731: FILE: fs/ceph/super.h:684:
+extern int ceph_proc_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#732: FILE: fs/ceph/super.h:685:
+extern void ceph_proc_cleanup(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#741: FILE: fs/ceph/types.h:1:
+#ifndef _FS_CEPH_TYPES_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204228.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 44 warnings, 86 checks, 707 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204228.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
