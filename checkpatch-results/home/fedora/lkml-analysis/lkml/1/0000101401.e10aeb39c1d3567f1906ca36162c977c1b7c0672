WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
perf_counter tools: connect module support infrastructure to symbol loading infrastructure.

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Sym>
#112: FILE: tools/perf/util/symbol.c:317:
+static inline int elf_sym__is_label(const GElf_Sym *sym)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Shdr>
#120: FILE: tools/perf/util/symbol.c:325:
+static inline const char *elf_sec__name(const GElf_Shdr *shdr,

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Data>
#121: FILE: tools/perf/util/symbol.c:326:
+					const Elf_Data *secstrs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: tools/perf/util/symbol.c:332:
+static inline int elf_sec__is_text(const GElf_Shdr *shdr,
+					const Elf_Data *secstrs)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strstr"
#129: FILE: tools/perf/util/symbol.c:334:
+	return strstr(elf_sec__name(shdr, secstrs), "text") != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Scn>
#152: FILE: tools/perf/util/symbol.c:488:
+	Elf_Scn *sec, *sec_dynsym, *sec_strndx;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sec_strndx"
#161: FILE: tools/perf/util/symbol.c:548:
+	if (sec_strndx == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!symstrs"
#165: FILE: tools/perf/util/symbol.c:552:
+	if (symstrs == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#202: FILE: tools/perf/util/symbol.c:593:
+			if (section)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#204: FILE: tools/perf/util/symbol.c:595:
+			else {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dso__load_sym', this function's name, in a string
#205: FILE: tools/perf/util/symbol.c:596:
+				fprintf(stderr, "dso__load_sym() module %s lookup of %s failed\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: tools/perf/util/symbol.c:676:
+static int dso__load_module(struct dso *self, struct mod_dso *mods, const char *name,
+			     symbol_filter_t filter, int verbose)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mod"
#241: FILE: tools/perf/util/symbol.c:681:
+	if (mod == NULL || !mod->active)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#292: FILE: tools/perf/util/symbol.c:732:
+	struct rb_node *nd;
 	                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#294: FILE: tools/perf/util/symbol.c:734:
+	for (nd = rb_last(&self->syms); nd; nd = rb_prev(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#294: FILE: tools/perf/util/symbol.c:734:
+	for (nd = rb_last(&self->syms); nd; nd = rb_prev(nd)) {
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#294: FILE: tools/perf/util/symbol.c:734:
+	for (nd = rb_last(&self->syms); nd; nd = rb_prev(nd)) {
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#294: FILE: tools/perf/util/symbol.c:734:
+	for (nd = rb_last(&self->syms); nd; nd = rb_prev(nd)) {
 	                                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#295: FILE: tools/perf/util/symbol.c:735:
+		struct symbol *pos = rb_entry(nd, struct symbol, rb_node);
 		                              ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101401.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 12 checks, 297 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101401.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
