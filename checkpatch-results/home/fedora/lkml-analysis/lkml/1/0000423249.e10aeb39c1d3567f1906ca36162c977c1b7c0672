WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#59: FILE: drivers/edac/edac_core.h:387:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#59: FILE: drivers/edac/edac_core.h:387:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#59: FILE: drivers/edac/edac_core.h:387:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))
                                              ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#59: FILE: drivers/edac/edac_core.h:387:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#73: FILE: drivers/edac/edac_core.h:584:
*/

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#84: FILE: drivers/edac/edac_core.h:599:
+#define edac_calc_delay(dev) dev->delay = dev->poll_msec * HZ / 1000;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#84: FILE: drivers/edac/edac_core.h:599:
+#define edac_calc_delay(dev) dev->delay = dev->poll_msec * HZ / 1000;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dev' may be better as '(dev)' to avoid precedence issues
#84: FILE: drivers/edac/edac_core.h:599:
+#define edac_calc_delay(dev) dev->delay = dev->poll_msec * HZ / 1000;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#84: FILE: drivers/edac/edac_core.h:599:
+#define edac_calc_delay(dev) dev->delay = dev->poll_msec * HZ / 1000;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: drivers/edac/edac_device.c:372:
+void edac_device_workq_setup(struct edac_device_ctl_info *edac_dev,
+		unsigned msec)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#127: FILE: drivers/edac/edac_device.c:372:
+		unsigned msec)

ERROR:SPACING: space required before the open parenthesis '('
#217: FILE: drivers/edac/edac_mc.c:227:
+	if(edac_op_state == EDAC_OPSTATE_POLL)

ERROR:SPACING: space required before the open parenthesis '('
#221: FILE: drivers/edac/edac_mc.c:231:
+	if(vreg) {

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#233: FILE: drivers/edac/edac_mc.c:243:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#233: FILE: drivers/edac/edac_mc.c:243:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#233: FILE: drivers/edac/edac_mc.c:243:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))
                                              ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#233: FILE: drivers/edac/edac_mc.c:243:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))

CHECK:SPACING: No space is necessary after a cast
#236: FILE: drivers/edac/edac_mc.c:246:
+	struct delayed_work *d_work = (struct delayed_work*) work_req;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#236: FILE: drivers/edac/edac_mc.c:246:
+	struct delayed_work *d_work = (struct delayed_work*) work_req;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#241: FILE: drivers/edac/edac_mc.c:251:
+	struct mem_ctl_info *mci = (struct mem_ctl_info *) ptr;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mci->edac_check !=
 ULL'
#247: FILE: drivers/edac/edac_mc.c:257:
+	if (edac_mc_assert_error_check_and_clear() && (mci->edac_check !=
NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: drivers/edac/edac_mc.c:270:
+	queue_delayed_work(edac_workqueue, &mci->work,
+}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#269: FILE: drivers/edac/edac_mc.c:277:
+void edac_mc_workq_setup(struct mem_ctl_info *mci, unsigned msec)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#271: FILE: drivers/edac/edac_mc.c:279:
+	debugf0("%s()\n", __func__);

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#273: FILE: drivers/edac/edac_mc.c:281:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: drivers/edac/edac_mc.c:281:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: drivers/edac/edac_mc.c:281:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))
                                              ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#273: FILE: drivers/edac/edac_mc.c:281:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: drivers/edac/edac_mc.c:287:
+	queue_delayed_work(edac_workqueue, &mci->work,
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mci->edac_check"
#323: FILE: drivers/edac/edac_mc.c:458:
+	if (mci->edac_check != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#357: FILE: drivers/edac/edac_module.h:31:
+extern int edac_mc_get_poll_msec(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#368: FILE: drivers/edac/edac_module.h:39:
+extern void edac_device_workq_setup(struct edac_device_ctl_info

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#373: FILE: drivers/edac/edac_module.h:41:
+extern void edac_device_workq_teardown(struct edac_device_ctl_info

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#386: FILE: drivers/edac/edac_module.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423249.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 11 warnings, 12 checks, 446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423249.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
