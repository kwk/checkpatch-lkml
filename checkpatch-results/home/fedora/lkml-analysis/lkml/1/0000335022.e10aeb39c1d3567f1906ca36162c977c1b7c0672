WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/asm-x86/alternative.h:1:
+#ifndef _X86_ALTERNATIVE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#72: FILE: include/asm-x86/alternative.h:20:
+^Iu8 *instr; ^I^I/* original instruction */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#76: FILE: include/asm-x86/alternative.h:24:
+^Iu8  replacementlen; ^I/* length of new instruction, <= instrlen */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: include/asm-x86/alternative.h:55:
+^I       ^I"661:\n\tlock; "$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#107: FILE: include/asm-x86/alternative.h:55:
+^I       ^I"661:\n\tlock; "$

WARNING:INCLUDE_LINUX: Use #include <linux/cpufeature.h> instead of <asm/cpufeature.h>
#113: FILE: include/asm-x86/alternative.h:61:
+#include <asm/cpufeature.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/asm-x86/alternative.h:63:
+extern void alternative_instructions(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/asm-x86/alternative.h:64:
+extern void apply_alternatives(struct alt_instr *start, struct alt_instr *end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/asm-x86/alternative.h:69:
+extern void alternatives_smp_module_add(struct module *mod, char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/asm-x86/alternative.h:72:
+extern void alternatives_smp_module_del(struct module *mod);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/asm-x86/alternative.h:73:
+extern void alternatives_smp_switch(int smp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: include/asm-x86/alternative.h:76:
+static inline void alternatives_smp_module_add(struct module *mod, char *name,
+					void *locks, void *locks_end,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: include/asm-x86/alternative.h:96:
+#define alternative(oldinstr, newinstr, feature) ^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#148: FILE: include/asm-x86/alternative.h:96:
+#define alternative(oldinstr, newinstr, feature) 	\
+	asm volatile ("661:\n\t" oldinstr "\n662:\n" 		     \
+		      ".section .altinstructions,\"a\"\n"     	     \
+		      "  .align " ALT_ALIGN " \n"		      \
+		      "  " ALT_ASMPTR " 661b\n" /* label */          \
+		      "  " ALT_ASMPTR " 663f\n"	/* new instruction */ \
+		      "  .byte %c0\n"             /* feature bit */    \
+		      "  .byte 662b-661b\n"       /* sourcelen */      \
+		      "  .byte 664f-663f\n"       /* replacementlen */ \
+		      ".previous\n"					\
+		      ".section .altinstr_replacement,\"ax\"\n"		\
+		      "663:\n\t" newinstr "\n664:\n"   /* replacement */ \
+		      ".previous" :: "i" (feature) : "memory")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#149: FILE: include/asm-x86/alternative.h:97:
+^Iasm volatile ("661:\n\t" oldinstr "\n662:\n" ^I^I     \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#150: FILE: include/asm-x86/alternative.h:98:
+^I^I      ".section .altinstructions,\"a\"\n"     ^I     \$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#151: FILE: include/asm-x86/alternative.h:99:
+		      "  .align " ALT_ALIGN " \n"		      \

WARNING:TYPO_SPELLING: 'Pecularities' may be misspelled - perhaps 'Peculiarities'?
#165: FILE: include/asm-x86/alternative.h:113:
+ * Pecularities:
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#172: FILE: include/asm-x86/alternative.h:120:
+#define alternative_input(oldinstr, newinstr, feature, input...)	\
+	asm volatile ("661:\n\t" oldinstr "\n662:\n"			\
+		      ".section .altinstructions,\"a\"\n"		\
+		      "  .align " ALT_ALIGN " \n"			\
+		      "  " ALT_ASMPTR " 661b\n"   /* label */		\
+		      "  " ALT_ASMPTR " 663f\n"	  /* new instruction */	\
+		      "  .byte %c0\n"             /* feature bit */	\
+		      "  .byte 662b-661b\n"       /* sourcelen */	\
+		      "  .byte 664f-663f\n"       /* replacementlen */	\
+		      ".previous\n"					\
+		      ".section .altinstr_replacement,\"ax\"\n"		\
+		      "663:\n\t" newinstr "\n664:\n"   /* replacement */ \
+		      ".previous" :: "i" (feature), ##input)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#175: FILE: include/asm-x86/alternative.h:123:
+		      "  .align " ALT_ALIGN " \n"			\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#187: FILE: include/asm-x86/alternative.h:135:
+#define alternative_io(oldinstr, newinstr, feature, output, input...) \
+	asm volatile ("661:\n\t" oldinstr "\n662:\n"			\
+		      ".section .altinstructions,\"a\"\n"		\
+		      "  .align " ALT_ALIGN " \n"			\
+		      "  " ALT_ASMPTR " 661b\n"   /* label */		\
+		      "  " ALT_ASMPTR " 663f\n"	  /* new instruction */	\
+		      "  .byte %c[feat]\n"        /* feature bit */	\
+		      "  .byte 662b-661b\n"       /* sourcelen */	\
+		      "  .byte 664f-663f\n"       /* replacementlen */	\
+		      ".previous\n"					\
+		      ".section .altinstr_replacement,\"ax\"\n"		\
+		      "663:\n\t" newinstr "\n664:\n"   /* replacement */ \
+		      ".previous" : output : [feat] "i" (feature), ##input)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#190: FILE: include/asm-x86/alternative.h:138:
+		      "  .align " ALT_ALIGN " \n"			\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#205: FILE: include/asm-x86/alternative.h:153:
+#define ASM_OUTPUT2(a, b) a, b

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: include/asm-x86/alternative.h:166:
+extern void text_poke(void *addr, unsigned char *opcode, int len);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#222: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000335022.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 13 warnings, 7 checks, 171 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000335022.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
