WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
       . there is no need for this routine to return the pointer passed in as

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_ids *' should also have an identifier name
#138: FILE: ipc/util.h:40:
+void ipc_init_ids(struct ipc_ids *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_ids *' should also have an identifier name
#149: FILE: ipc/util.h:54:
+int ipc_addid(struct ipc_ids *, struct kern_ipc_perm *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kern_ipc_perm *' should also have an identifier name
#149: FILE: ipc/util.h:54:
+int ipc_addid(struct ipc_ids *, struct kern_ipc_perm *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#149: FILE: ipc/util.h:54:
+int ipc_addid(struct ipc_ids *, struct kern_ipc_perm *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_ids *' should also have an identifier name
#150: FILE: ipc/util.h:55:
+int ipc_get_maxid(struct ipc_ids *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_ids *' should also have an identifier name
#154: FILE: ipc/util.h:58:
+void ipc_rmid(struct ipc_ids *, struct kern_ipc_perm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kern_ipc_perm *' should also have an identifier name
#154: FILE: ipc/util.h:58:
+void ipc_rmid(struct ipc_ids *, struct kern_ipc_perm *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ipc"
#257: FILE: ipc/util.c:209:
+		if (ipc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#278: FILE: ipc/util.c:225:
+ *^Iipc_get_maxid ^I-^Iget the last assigned id$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ipc"
#328: FILE: ipc/util.c:247:
+		if (ipc != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!out"
#477: FILE: ipc/util.c:599:
+	if (out == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: ipc/util.c:676:
+struct kern_ipc_perm *sysvipc_find_ipc(struct ipc_ids *ids, loff_t pos,
+					loff_t *new_pos)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ipc"
#516: FILE: ipc/util.c:684:
+		if (ipc != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ipc"
#535: FILE: ipc/util.c:693:
+		if (ipc != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#731: FILE: ipc/msg.c:278:
+		if (!ret)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#733: FILE: ipc/msg.c:280:
+		else {

CHECK:SPACING: No space is necessary after a cast
#748: FILE: ipc/msg.c:287:
+		msq = (struct msg_queue *) ipc_findkey(&msg_ids(ns), key);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msq"
#749: FILE: ipc/msg.c:288:
+		if (msq == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#763: FILE: ipc/msg.c:299:
+			if (msgflg & IPC_CREAT && msgflg & IPC_EXCL)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#765: FILE: ipc/msg.c:301:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#766: FILE: ipc/msg.c:302:
+				if (ipcperms(&msq->q_perm, msgflg))
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#768: FILE: ipc/msg.c:304:
+				else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#769: FILE: ipc/msg.c:305:
+					ret = security_msg_queue_associate(

CHECK:BRACES: braces {} should be used on all arms of this statement
#948: FILE: ipc/sem.c:280:
+		if (!err)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#950: FILE: ipc/sem.c:282:
+		else {

CHECK:SPACING: No space is necessary after a cast
#970: FILE: ipc/sem.c:289:
+		sma = (struct sem_array *) ipc_findkey(&sem_ids(ns), key);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sma"
#971: FILE: ipc/sem.c:290:
+		if (sma == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#982: FILE: ipc/sem.c:301:
+			if (semflg & IPC_CREAT && semflg & IPC_EXCL)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#984: FILE: ipc/sem.c:303:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#985: FILE: ipc/sem.c:304:
+				if (nsems > sma->sem_nsems)
[...]
+				else if (ipcperms(&sma->sem_perm, semflg))
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#989: FILE: ipc/sem.c:308:
+				else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: ipc/sem.c:310:
+					err = security_sem_associate(sma,
+								semflg);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1185: FILE: ipc/shm.c:436:
+		if (!err)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1187: FILE: ipc/shm.c:438:
+		else {

CHECK:SPACING: No space is necessary after a cast
#1207: FILE: ipc/shm.c:445:
+		shp = (struct shmid_kernel *) ipc_findkey(&shm_ids(ns), key);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shp"
#1208: FILE: ipc/shm.c:446:
+		if (shp == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1218: FILE: ipc/shm.c:456:
+			if ((shmflg & IPC_CREAT) && (shmflg & IPC_EXCL))
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1220: FILE: ipc/shm.c:458:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1221: FILE: ipc/shm.c:459:
+				if (shp->shm_segsz < size)
[...]
+				else if (ipcperms(&shp->shm_perm, shmflg))
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1225: FILE: ipc/shm.c:463:
+				else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1227: FILE: ipc/shm.c:465:
+					err = security_shm_associate(shp,
+								shmflg);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shp"
#1262: FILE: ipc/shm.c:585:
+		if (shp == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385097.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 34 checks, 1174 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385097.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
