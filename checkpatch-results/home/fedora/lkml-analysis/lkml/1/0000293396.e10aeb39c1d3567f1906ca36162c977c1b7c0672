WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#31: 
    Signed-off-by: Bob Copeland <me@bobcopeland.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: fs/omfs/file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#56: FILE: fs/omfs/file.c:15:
+static int omfs_sync_file(struct file *file, struct dentry *dentry,
+		int datasync)

CHECK:SPACING: No space is necessary after a cast
#72: FILE: fs/omfs/file.c:31:
+	struct omfs_extent *oe = (struct omfs_extent *) &bh->b_data[offset];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#106: FILE: fs/omfs/file.c:65:
+	for (;;) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#107: FILE: fs/omfs/file.c:66:
+		if (omfs_is_bad(sbi, (struct omfs_header *) bh->b_data, next)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#120: FILE: fs/omfs/file.c:79:
+			u64 start, count;
+			start = be64_to_cpu(entry->e_cluster);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#123: FILE: fs/omfs/file.c:82:
+			omfs_clear_range(inode->i_sb, start, (int) count);

CHECK:SPACING: No space is necessary after a cast
#126: FILE: fs/omfs/file.c:85:
+		omfs_make_empty_table(bh, (char *) oe - bh->b_data);

CHECK:SPACING: No space is necessary after a cast
#139: FILE: fs/omfs/file.c:98:
+		oe = (struct omfs_extent *) (&bh->b_data[OMFS_EXTENT_CONT]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: fs/omfs/file.c:116:
+static int omfs_grow_extent(struct inode *inode, struct omfs_extent *oe,
+			u64 *ret_block)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#184: FILE: fs/omfs/file.c:143:
+		entry = terminator-1;
 		                  ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#191: FILE: fs/omfs/file.c:150:
+			terminator->e_blocks = ~(cpu_to_be64(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#201: FILE: fs/omfs/file.c:160:
+	if (be32_to_cpu(oe->e_extent_count) > max_count-1)
 	                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: fs/omfs/file.c:165:
+	ret = omfs_allocate_range(inode->i_sb, 1, sbi->s_clustersize,
+		&new_block, &new_count);

CHECK:SPACING: No space is necessary after a cast
#216: FILE: fs/omfs/file.c:175:
+	entry->e_blocks = cpu_to_be64((u64) new_count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#218: FILE: fs/omfs/file.c:177:
+	terminator->e_blocks = ~(cpu_to_be64(

CHECK:SPACING: No space is necessary after a cast
#219: FILE: fs/omfs/file.c:178:
+		be64_to_cpu(~terminator->e_blocks) + (u64) new_count));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: fs/omfs/file.c:194:
+static sector_t find_block(struct inode *inode, struct omfs_extent_entry *ent,
+			sector_t block, int count, int *left)

WARNING:LINE_SPACING: Missing a blank line after declarations
#239: FILE: fs/omfs/file.c:198:
+	sector_t searched = 0;
+	for (; count > 1; count--) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#282: FILE: fs/omfs/file.c:241:
+	for (;;) {
+

CHECK:SPACING: No space is necessary after a cast
#283: FILE: fs/omfs/file.c:242:
+		if (omfs_is_bad(sbi, (struct omfs_header *) bh->b_data, next)) {

CHECK:SPACING: No space is necessary after a cast
#308: FILE: fs/omfs/file.c:267:
+		oe = (struct omfs_extent *) (&bh->b_data[OMFS_EXTENT_CONT]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: fs/omfs/file.c:275:
+			map_bh(bh_result, inode->i_sb,
+					clus_to_blk(sbi, new_block));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: fs/omfs/file.c:290:
+static int omfs_readpages(struct file *file, struct address_space *mapping,
+		struct list_head *pages, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#331: FILE: fs/omfs/file.c:290:
+		struct list_head *pages, unsigned nr_pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: fs/omfs/file.c:307:
+static int omfs_write_begin(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#348: FILE: fs/omfs/file.c:307:
+			loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#348: FILE: fs/omfs/file.c:307:
+			loff_t pos, unsigned len, unsigned flags,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#361: FILE: fs/omfs/file.c:320:
+struct file_operations omfs_file_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#372: FILE: fs/omfs/file.c:331:
+struct inode_operations omfs_file_inops = {

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#376: FILE: fs/omfs/file.c:335:
+struct address_space_operations omfs_aops = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000293396.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 22 checks, 345 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000293396.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
