WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
> > It seems to me that signal handlers must run with a copy of the original

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#163: FILE: bptest/bptest.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#214: FILE: bptest/bptest.c:52:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#223: FILE: bptest/bptest.c:61:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#226: FILE: bptest/bptest.c:64:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#228: FILE: bptest/bptest.c:66:
+static unsigned char bytes[NUM_BYTES] __attribute__((aligned(8)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: bptest/bptest.c:70:
+static ssize_t read_store(struct device_driver *d, const char *buf,
+		size_t count)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#236: FILE: bptest/bptest.c:74:
+	if (sscanf(buf, "%d", &n) < 1 || n < 0 || n >= NUM_BYTES) {
+		printk(KERN_WARNING "bptest: read: invalid index %d\n", n);
+		return -EINVAL;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#237: FILE: bptest/bptest.c:75:
+		printk(KERN_WARNING "bptest: read: invalid index %d\n", n);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#240: FILE: bptest/bptest.c:78:
+	printk(KERN_INFO "bptest: read: bytes[%d] = %d\n", n, bytes[n]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: bptest/bptest.c:85:
+static ssize_t write_store(struct device_driver *d, const char *buf,
+		size_t count)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#253: FILE: bptest/bptest.c:91:
+		printk(KERN_WARNING "bptest: write: invalid index %d\n", n);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#257: FILE: bptest/bptest.c:95:
+	printk(KERN_INFO "bptest: write: bytes[%d] <- %d\n", n, v);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#262: FILE: bptest/bptest.c:100:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#266: FILE: bptest/bptest.c:104:
+	printk(KERN_INFO "This is r%d\n", 0);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#268: FILE: bptest/bptest.c:106:
+}
+static void r1(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#270: FILE: bptest/bptest.c:108:
+	printk(KERN_INFO "This is r%d\n", 1);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#272: FILE: bptest/bptest.c:110:
+}
+static void r2(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#274: FILE: bptest/bptest.c:112:
+	printk(KERN_INFO "This is r%d\n", 2);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#276: FILE: bptest/bptest.c:114:
+}
+static void r3(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#278: FILE: bptest/bptest.c:116:
+	printk(KERN_INFO "This is r%d\n", 3);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#285: FILE: bptest/bptest.c:123:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: bptest/bptest.c:126:
+static ssize_t call_store(struct device_driver *d, const char *buf,
+		size_t count)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#292: FILE: bptest/bptest.c:130:
+	if (sscanf(buf, "%d", &n) == 0) {
+		printk(KERN_INFO "bptest: call all routines\n");
+		r0();
+		r1();
+		r2();
+		r3();
+	} else if (n >= 0 && n < 4) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#293: FILE: bptest/bptest.c:131:
+		printk(KERN_INFO "bptest: call all routines\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#299: FILE: bptest/bptest.c:137:
+		printk(KERN_INFO "bptest: call r%d\n", n);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#302: FILE: bptest/bptest.c:140:
+		printk(KERN_WARNING "bptest: call: invalid index: %d\n", n);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#309: FILE: bptest/bptest.c:147:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#313: FILE: bptest/bptest.c:151:
+	printk(KERN_INFO "Breakpoint %d triggered\n", bp - bps);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#318: FILE: bptest/bptest.c:156:
+	printk(KERN_INFO "Breakpoint %d installed\n", bp - bps);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#323: FILE: bptest/bptest.c:161:
+	printk(KERN_INFO "Breakpoint %d uninstalled\n", bp - bps);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#326: FILE: bptest/bptest.c:164:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#339: FILE: bptest/bptest.c:177:
+	case HW_BREAKPOINT_LEN_1:	len = 1;	break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#342: FILE: bptest/bptest.c:180:
+	case HW_BREAKPOINT_LEN_2:	len = 2;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#345: FILE: bptest/bptest.c:183:
+	case HW_BREAKPOINT_LEN_4:	len = 4;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#348: FILE: bptest/bptest.c:186:
+	case HW_BREAKPOINT_LEN_4:	len = 8;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#355: FILE: bptest/bptest.c:193:
+	case HW_BREAKPOINT_READ:	type = 'r';	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#358: FILE: bptest/bptest.c:196:
+	case HW_BREAKPOINT_WRITE:	type = 'w';	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#361: FILE: bptest/bptest.c:199:
+	case HW_BREAKPOINT_RW:		type = 'b';	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#364: FILE: bptest/bptest.c:202:
+	case HW_BREAKPOINT_EXECUTE:	type = 'e';	break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#398: FILE: bptest/bptest.c:236:
+		printk(KERN_INFO "bptest: bp%d: format:  priority type "

WARNING:SPLIT_STRING: quoted string split across lines
#399: FILE: bptest/bptest.c:237:
+		printk(KERN_INFO "bptest: bp%d: format:  priority type "
+				"address len\n", n);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#400: FILE: bptest/bptest.c:238:
+		printk(KERN_INFO "  type = r, w, b, or e; address = 0 - 31; "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#402: FILE: bptest/bptest.c:240:
+		printk(KERN_INFO "  Write any non-digit to unregister\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#407: FILE: bptest/bptest.c:245:
+	printk(KERN_INFO "bptest: bp%d unregistered\n", n);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#414: FILE: bptest/bptest.c:252:
+		printk(KERN_WARNING "bptest: bp%d: too few fields\n", n);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#442: FILE: bptest/bptest.c:280:
+		printk(KERN_WARNING "bptest: bp%d: invalid type %c\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: bptest/bptest.c:281:
+		printk(KERN_WARNING "bptest: bp%d: invalid type %c\n",
+				n, type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#448: FILE: bptest/bptest.c:286:
+		printk(KERN_WARNING "bptest: bp%d: invalid address %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: bptest/bptest.c:287:
+		printk(KERN_WARNING "bptest: bp%d: invalid address %d\n",
+				n, a);

CHECK:BRACES: braces {} should be used on all arms of this statement
#452: FILE: bptest/bptest.c:290:
+	if (type == 'e')
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#454: FILE: bptest/bptest.c:292:
+	else {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#459: FILE: bptest/bptest.c:297:
+		case 1:		bp->len = HW_BREAKPOINT_LEN_1;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#462: FILE: bptest/bptest.c:300:
+		case 2:		bp->len = HW_BREAKPOINT_LEN_2;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#465: FILE: bptest/bptest.c:303:
+		case 4:		bp->len = HW_BREAKPOINT_LEN_4;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#468: FILE: bptest/bptest.c:306:
+		case 8:		bp->len = HW_BREAKPOINT_LEN_8;	break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#471: FILE: bptest/bptest.c:309:
+			printk(KERN_WARNING "bptest: bp%d: invalid len %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: bptest/bptest.c:310:
+			printk(KERN_WARNING "bptest: bp%d: invalid len %d\n",
+					n, len);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#474: FILE: bptest/bptest.c:312:
+			return -EINVAL;
+			break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#483: FILE: bptest/bptest.c:321:
+	if (i < 0) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#484: FILE: bptest/bptest.c:322:
+		printk(KERN_WARNING "bptest: bp%d: failed to register %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: bptest/bptest.c:323:
+		printk(KERN_WARNING "bptest: bp%d: failed to register %d\n",
+				n, i);

CHECK:BRACES: Unbalanced braces around else statement
#487: FILE: bptest/bptest.c:325:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#488: FILE: bptest/bptest.c:326:
+		printk(KERN_INFO "bptest: bp%d registered: %d\n", n, i);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#492: FILE: bptest/bptest.c:330:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#497: FILE: bptest/bptest.c:335:
+}
+static ssize_t bp0_store(struct device_driver *d, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: bptest/bptest.c:336:
+static ssize_t bp0_store(struct device_driver *d, const char *buf,
+		size_t count)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#508: FILE: bptest/bptest.c:346:
+}
+static ssize_t bp1_store(struct device_driver *d, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: bptest/bptest.c:347:
+static ssize_t bp1_store(struct device_driver *d, const char *buf,
+		size_t count)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#519: FILE: bptest/bptest.c:357:
+}
+static ssize_t bp2_store(struct device_driver *d, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: bptest/bptest.c:358:
+static ssize_t bp2_store(struct device_driver *d, const char *buf,
+		size_t count)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#530: FILE: bptest/bptest.c:368:
+}
+static ssize_t bp3_store(struct device_driver *d, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: bptest/bptest.c:369:
+static ssize_t bp3_store(struct device_driver *d, const char *buf,
+		size_t count)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#537: FILE: bptest/bptest.c:375:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#557: FILE: bptest/bptest.c:395:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bptest_group[]
#558: FILE: bptest/bptest.c:396:
+static struct driver_attribute *(bptest_group[]) = {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#596: FILE: bptest/bptest.c:434:
+		printk(KERN_ERR "Failed to register bptest driver: %d\n", rc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#605: FILE: bptest/bptest.c:443:
+	printk("bptest loaded\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#617: FILE: bptest/bptest.c:455:
+	printk("bptest unloaded\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#643: FILE: arch/i386/kernel/process.c:329:
+	printk("DR0: %08lx DR1: %08lx DR2: %08lx DR3: %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: arch/i386/kernel/process.c:330:
+	printk("DR0: %08lx DR1: %08lx DR2: %08lx DR3: %08lx\n",
+			d0, d1, d2, d3);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#647: FILE: arch/i386/kernel/process.c:333:
+	printk("    DR6: %08lx DR7: %08lx\n", d2, d3);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000430501.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 36 warnings, 34 checks, 484 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000430501.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
