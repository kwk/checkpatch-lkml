WARNING:TYPO_SPELLING: 'wouldnt' may be misspelled - perhaps 'wouldn't'?
#37: 
> since i also had to implement irqflags/stacktrace as well, i wouldnt
                                                               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#60: 
--- a/kernel/lockdep.c

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: kernel/lockdep.c:638:
+   if (L1_DATA_A_LENGTH) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 7)
#67: FILE: kernel/lockdep.c:638:
+   if (L1_DATA_A_LENGTH) {
+       start = (unsigned long) &_sdata_l1;

CHECK:SPACING: No space is necessary after a cast
#68: FILE: kernel/lockdep.c:639:
+       start = (unsigned long) &_sdata_l1;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: kernel/lockdep.c:639:
+       start = (unsigned long) &_sdata_l1;$

CHECK:SPACING: No space is necessary after a cast
#69: FILE: kernel/lockdep.c:640:
+       end   = (unsigned long) &_ebss_l1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: kernel/lockdep.c:640:
+       end   = (unsigned long) &_ebss_l1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: kernel/lockdep.c:641:
+       if ((addr >= start) && (addr < end))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 11)
#70: FILE: kernel/lockdep.c:641:
+       if ((addr >= start) && (addr < end))
+           return 1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= start'
#70: FILE: kernel/lockdep.c:641:
+       if ((addr >= start) && (addr < end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < end'
#70: FILE: kernel/lockdep.c:641:
+       if ((addr >= start) && (addr < end))

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: kernel/lockdep.c:642:
+           return 1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: kernel/lockdep.c:642:
+           return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: kernel/lockdep.c:643:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: kernel/lockdep.c:644:
+   if (L1_DATA_B_LENGTH) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 7)
#73: FILE: kernel/lockdep.c:644:
+   if (L1_DATA_B_LENGTH) {
+       start = (unsigned long) &_sdata_b_l1;

CHECK:SPACING: No space is necessary after a cast
#74: FILE: kernel/lockdep.c:645:
+       start = (unsigned long) &_sdata_b_l1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: kernel/lockdep.c:645:
+       start = (unsigned long) &_sdata_b_l1;$

CHECK:SPACING: No space is necessary after a cast
#75: FILE: kernel/lockdep.c:646:
+       end   = (unsigned long) &_ebss_b_l1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: kernel/lockdep.c:646:
+       end   = (unsigned long) &_ebss_b_l1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: kernel/lockdep.c:647:
+       if ((addr >= start) && (addr < end))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 11)
#76: FILE: kernel/lockdep.c:647:
+       if ((addr >= start) && (addr < end))
+           return 1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= start'
#76: FILE: kernel/lockdep.c:647:
+       if ((addr >= start) && (addr < end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < end'
#76: FILE: kernel/lockdep.c:647:
+       if ((addr >= start) && (addr < end))

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: kernel/lockdep.c:648:
+           return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: kernel/lockdep.c:648:
+           return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: kernel/lockdep.c:649:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: kernel/lockdep.c:650:
+   if (L2_LENGTH) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 7)
#79: FILE: kernel/lockdep.c:650:
+   if (L2_LENGTH) {
+       start = (unsigned long) &_sdata_l2;

CHECK:SPACING: No space is necessary after a cast
#80: FILE: kernel/lockdep.c:651:
+       start = (unsigned long) &_sdata_l2;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: kernel/lockdep.c:651:
+       start = (unsigned long) &_sdata_l2;$

CHECK:SPACING: No space is necessary after a cast
#81: FILE: kernel/lockdep.c:652:
+       end   = (unsigned long) &_ebss_l2;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: kernel/lockdep.c:652:
+       end   = (unsigned long) &_ebss_l2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: kernel/lockdep.c:653:
+       if ((addr >= start) && (addr < end))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 11)
#82: FILE: kernel/lockdep.c:653:
+       if ((addr >= start) && (addr < end))
+           return 1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= start'
#82: FILE: kernel/lockdep.c:653:
+       if ((addr >= start) && (addr < end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < end'
#82: FILE: kernel/lockdep.c:653:
+       if ((addr >= start) && (addr < end))

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: kernel/lockdep.c:654:
+           return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: kernel/lockdep.c:654:
+           return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: kernel/lockdep.c:655:
+   }$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113661.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 25 warnings, 12 checks, 27 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113661.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
