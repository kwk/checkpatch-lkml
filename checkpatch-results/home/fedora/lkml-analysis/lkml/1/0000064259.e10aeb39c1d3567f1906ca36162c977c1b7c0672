WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#36: FILE: security/tomoyo/memory.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#37: FILE: security/tomoyo/memory.c:2:
+ * security/tomoyo/memory.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LINE_SPACING: Missing a blank line after declarations
#48: FILE: security/tomoyo/memory.c:13:
+	const pid_t pid = current->pid;
+	if (tomoyo_last_pid != pid) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#49: FILE: security/tomoyo/memory.c:14:
+		printk(KERN_WARNING "ERROR: Out of memory at %s.\n",

WARNING:TYPO_SPELLING: 'otehrwise' may be misspelled - perhaps 'otherwise'?
#66: FILE: security/tomoyo/memory.c:31:
+ * Returns true if @ptr is not NULL and quota not exceeded, false otehrwise.
                                                                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#71: FILE: security/tomoyo/memory.c:36:
+	size_t s = tomoyo_round2(size);
+	atomic_add(s, &tomoyo_policy_memory_size);

WARNING:TYPO_SPELLING: 'otehrwise' may be misspelled - perhaps 'otherwise'?
#88: FILE: security/tomoyo/memory.c:53:
+ * Returns true if @ptr is not NULL and quota not exceeded, false otehrwise.
                                                                   ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#100: FILE: security/tomoyo/memory.c:65:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#129: FILE: security/tomoyo/memory.c:94:
+	int error = -ENOMEM;
+	if (!addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: security/tomoyo/memory.c:126:
+	bool can_delete = false;
+	if (!addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: security/tomoyo/memory.c:158:
+	bool can_delete = false;
+	if (!cond)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#195: FILE: security/tomoyo/memory.c:160:
+	BUG_ON(atomic_read(&cond->users) <= 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#209: FILE: security/tomoyo/memory.c:174:
+	condp = (const struct tomoyo_condition_element *) (cond + 1);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#210: FILE: security/tomoyo/memory.c:175:
+	numbers_p = (struct tomoyo_number_union *) (condp + condc);

CHECK:SPACING: No space is necessary after a cast
#211: FILE: security/tomoyo/memory.c:176:
+	names_p = (struct tomoyo_name_union *) (numbers_p + numbers_count);

CHECK:SPACING: No space is necessary after a cast
#212: FILE: security/tomoyo/memory.c:177:
+	argv = (const struct tomoyo_argv_entry *) (names_p + names_count);

CHECK:SPACING: No space is necessary after a cast
#213: FILE: security/tomoyo/memory.c:178:
+	envp = (const struct tomoyo_envp_entry *) (argv + argc);

CHECK:SPACING: No space is necessary after a cast
#271: FILE: security/tomoyo/memory.c:236:
+	hash = full_name_hash((const unsigned char *) name, len - 1);

CHECK:SPACING: No space is necessary after a cast
#291: FILE: security/tomoyo/memory.c:256:
+	ptr->entry.name = ((char *) ptr) + sizeof(*ptr);

CHECK:SPACING: No space is necessary after a cast
#292: FILE: security/tomoyo/memory.c:257:
+	memmove((char *) ptr->entry.name, name, len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: security/tomoyo/memory.c:276:
+	bool can_delete = false;
+	if (!name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: security/tomoyo/memory.c:299:
+	int i;
+	if (!tomoyo_registered)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#347: FILE: security/tomoyo/memory.c:312:
+		static char tomoyo_builtin_initializers[] __initdata
+			= CONFIG_SECURITY_TOMOYO_BUILTIN_INITIALIZERS;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:LINE_SPACING: Missing a blank line after declarations
#349: FILE: security/tomoyo/memory.c:314:
+		char *cp = tomoyo_builtin_initializers;
+		tomoyo_normalize_line(cp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#352: FILE: security/tomoyo/memory.c:317:
+			char *cp2 = strchr(cp, ' ');
+			if (cp2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#395: FILE: security/tomoyo/memory.c:360:
+	int i;
+	if (head->read_eof)

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: security/tomoyo/memory.c:384:
+	unsigned int size;
+	if (sscanf(data, "Policy: %u", &size) == 1)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064259.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 10 checks, 391 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064259.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
