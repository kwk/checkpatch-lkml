WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
:0000192     <- xfs_btree_cur filp kmalloc-192 uid_cache tw_sock_TCP request_sock_TCPv6 tw_sock_TCPv6 skbuff_head_cache xfs_ili

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#70: 
:0000192     <- xfs_btree_cur filp kmalloc-192 uid_cache tw_sock_TCP request_sock_TCPv6 tw_sock_TCPv6 skbuff_head_cache xfs_ili
                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#194: FILE: include/linux/slub_def.h:41:
+	unsigned stat[NR_SLUB_STAT_ITEMS];

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#244: FILE: mm/slub.c:1379:
+			if (SlabDebug(page) && (s->flags & SLAB_STORE_USER))
 			add_full(n, page);

CHECK:CAMELCASE: Avoid CamelCase: <SlabDebug>
#244: FILE: mm/slub.c:1379:
+			if (SlabDebug(page) && (s->flags & SLAB_STORE_USER))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SlabFrozen>
#340: FILE: mm/slub.c:1702:
+	if (unlikely(SlabFrozen(page))) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#399: FILE: mm/slub.c:4017:
+#define STAT_ATTR(si, text) ^I^I^I^I^I\$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#399: FILE: mm/slub.c:4017:
+#define STAT_ATTR(si, text) 					\
+static ssize_t text##_show(struct kmem_cache *s, char *buf)	\
+{								\
+	unsigned long sum  = 0;					\
+	int cpu;						\
+								\
+	for_each_online_cpu(cpu)				\
+		sum += get_cpu_slab(s, cpu)->stat[si];		\
+	return sprintf(buf, "%lu\n", sum);			\
+}								\
+SLAB_ATTR_RO(text);						\
+

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#482: FILE: Documentation/vm/slabinfo.c:74:
+int sort_active = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#485: FILE: Documentation/vm/slabinfo.c:77:
+int show_activity = 0;

WARNING:SPLIT_STRING: quoted string split across lines
#511: FILE: Documentation/vm/slabinfo.c:299:
+		printf("Name                   Objects Objsize    Space "
+			"Slabs/Part/Cpu  O/S O %%Fr %%Ef Flg\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#521: FILE: Documentation/vm/slabinfo.c:328:
+^Ireturn ^Is->alloc_fastpath + s->free_fastpath +$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: Documentation/vm/slabinfo.c:434:
+	printf("Fastpath             %8lu %8lu %3lu %3lu\n",
+		s->alloc_fastpath, s->free_fastpath,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: Documentation/vm/slabinfo.c:438:
+	printf("Slowpath             %8lu %8lu %3lu %3lu\n",
+		total_alloc - s->alloc_fastpath, s->free_slowpath,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: Documentation/vm/slabinfo.c:442:
+	printf("Page Alloc           %8lu %8lu %3lu %3lu\n",
+		s->alloc_slab, s->free_slab,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: Documentation/vm/slabinfo.c:446:
+	printf("Add partial          %8lu %8lu %3lu %3lu\n",
+		s->deactivate_to_head + s->deactivate_to_tail,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: Documentation/vm/slabinfo.c:451:
+	printf("Remove partial       %8lu %8lu %3lu %3lu\n",
+		s->alloc_from_partial, s->free_remove_partial,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: Documentation/vm/slabinfo.c:456:
+	printf("RemoteObj/SlabFrozen %8lu %8lu %3lu %3lu\n",
+		s->deactivate_remote_frees, s->free_frozen,

WARNING:SPLIT_STRING: quoted string split across lines
#590: FILE: Documentation/vm/slabinfo.c:473:
+		printf("Deactivate Full=%lu(%lu%%) Empty=%lu(%lu%%) "
+			"ToHead=%lu(%lu%%) ToTail=%lu(%lu%%)\n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#626: FILE: Documentation/vm/slabinfo.c:575:
+		printf("%-21s %8ld %8ld %8ld %3ld %3ld \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: Documentation/vm/slabinfo.c:576:
+		printf("%-21s %8ld %8ld %8ld %3ld %3ld \n",
+			s->name, s->objects,

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#632: FILE: Documentation/vm/slabinfo.c:581:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: Documentation/vm/slabinfo.c:583:
+		printf("%-21s %8ld %7d %8s %14s %4d %1d %3ld %3ld %s\n",
+			s->name, s->objects, s->object_size, size_str, dist_str,

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#660: FILE: Documentation/vm/slabinfo.c:1183:
+			slab->free_frozen= get_obj("free_frozen");
 			                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#692: FILE: Documentation/vm/slabinfo.c:1274:
+	while ((c = getopt_long(argc, argv, "aAd::Defhil1noprstvzTS",
 						opts, NULL)) != -1)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000326656.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 10 warnings, 11 checks, 526 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000326656.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
