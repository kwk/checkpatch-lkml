ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#51: FILE: fs/cramfs/inode.c:565:
+	struct inode * inode = get_cramfs_inode(dir->i_sb, mode, dev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#63: FILE: fs/cramfs/inode.c:577:
+		dir->i_mtime = dir->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: fs/cramfs/inode.c:582:
+static int cramfs_mkdir(struct inode * dir, struct dentry * dentry, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: fs/cramfs/inode.c:582:
+static int cramfs_mkdir(struct inode * dir, struct dentry * dentry, int mode)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#73: FILE: fs/cramfs/inode.c:587:
+static int cramfs_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *nd)
                                                                                                ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#78: FILE: fs/cramfs/inode.c:592:
+static int cramfs_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#78: FILE: fs/cramfs/inode.c:592:
+static int cramfs_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#83: FILE: fs/cramfs/inode.c:597:
+	inode = get_cramfs_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);
 	                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#83: FILE: fs/cramfs/inode.c:597:
+	inode = get_cramfs_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#85: FILE: fs/cramfs/inode.c:599:
+		int l = strlen(symname)+1;
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: fs/cramfs/inode.c:600:
+		int l = strlen(symname)+1;
+		error = page_symlink(inode, symname, l);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#87: FILE: fs/cramfs/inode.c:601:
+		if (!error) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#92: FILE: fs/cramfs/inode.c:606:
+			dir->i_mtime = dir->i_ctime = CURRENT_TIME;

CHECK:BRACES: Unbalanced braces around else statement
#93: FILE: fs/cramfs/inode.c:607:
+		} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#94: FILE: fs/cramfs/inode.c:608:
+			iput(inode);
 			^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: fs/cramfs/inode.c:614:
+int cramfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+		struct inode *new_dir, struct dentry *new_dentry)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#110: FILE: fs/cramfs/inode.c:624:
+	old_dir->i_ctime = old_dir->i_mtime = new_dir->i_ctime =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#111: FILE: fs/cramfs/inode.c:625:
+		new_dir->i_mtime = inode->i_ctime = CURRENT_TIME;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#116: FILE: fs/cramfs/inode.c:630:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000273272.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 4 warnings, 10 checks, 92 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000273272.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
