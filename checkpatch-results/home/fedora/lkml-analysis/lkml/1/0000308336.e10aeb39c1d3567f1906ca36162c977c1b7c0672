WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#49: 
is used for clean uptodate page cache pages. The host can choose to
                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#82: 
7) The page is not uptodate.
                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'grabed' may be misspelled - perhaps 'grabbed'?
#165: 
  original page table if copy_one_pte would not have grabed the page
                                                     ^^^^^^

WARNING:TYPO_SPELLING: 'noticable' may be misspelled - perhaps 'noticeable'?
#196: 
Another noticable change is that the first few lines of code in
        ^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/pagemap.h:147:
+extern void __remove_from_page_cache_nocheck(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#329: FILE: include/linux/page-states.h:1:
+#ifndef _LINUX_PAGE_STATES_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#333: FILE: include/linux/page-states.h:5:
+ * include/linux/page-states.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#383: FILE: include/linux/page-states.h:55:
+extern void page_unmap_all(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#384: FILE: include/linux/page-states.h:56:
+extern void page_discard(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#385: FILE: include/linux/page-states.h:57:
+extern int  __page_make_stable(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#386: FILE: include/linux/page-states.h:58:
+extern void __page_make_volatile(struct page *page, int offset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#387: FILE: include/linux/page-states.h:59:
+extern void __pagevec_make_volatile(struct pagevec *pvec);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#431: FILE: include/linux/page-states.h:103:
+#define page_set_unused(_page,_order)		do { } while (0)
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: include/linux/page-states.h:104:
+#define page_set_stable(_page,_order)		do { } while (0)
                              ^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#469: FILE: mm/filemap.c:118:
+void inline __remove_from_page_cache_nocheck(struct page *page)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:SPACING: space prohibited before that close parenthesis ')'
#754: FILE: mm/page_alloc.c:250:
+			1 << PG_discarded );

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#805: FILE: mm/page-states.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#806: FILE: mm/page-states.c:2:
+ * mm/page-states.c

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#849: FILE: mm/page-states.c:45:
+	return page_mapping(page) != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageLRU>
#970: FILE: mm/page-states.c:166:
+		__ClearPageLRU(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#979: FILE: mm/page-states.c:175:
+ ^Imapping = page->mapping;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#979: FILE: mm/page-states.c:175:
+ ^Imapping = page->mapping;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#979: FILE: mm/page-states.c:175:
+ ^Imapping = page->mapping;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1049: FILE: mm/rmap.c:262:
+	if (!spin_is_locked(ptl))
[...]
 	if (!pte_present(*pte)) {

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1049: FILE: mm/rmap.c:262:
+	if (!spin_is_locked(ptl))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1158: FILE: mm/rmap.c:1045:
+void page_unmap_all(struct page* page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#1280: FILE: mm/vmscan.c:919:
+			} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308336.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 12 warnings, 9 checks, 1029 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308336.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
