CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: arch/cris/kernel/sys_cris.c:42:
+	err = sys_mmap_pgoff(buffer[0], buffer[1], buffer[2], buffer[3],
                        buffer[4], buffer[5] >> PAGE_SHIFT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: arch/cris/kernel/sys_cris.c:52:
+        return sys_mmap_pgoff(addr, len, prot, flags, fd, pgoff);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: arch/cris/kernel/sys_cris.c:52:
+        return sys_mmap_pgoff(addr, len, prot, flags, fd, pgoff);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1017: FILE: arch/m68knommu/kernel/sys_m68k.c:59:
+	error = sys_mmap_pgoff(a.addr, a.len, a.prot, a.flags, a.fd,
+				a.offset >> PAGE_SHIFT);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1132: FILE: arch/mips/kernel/linux32.c:76:
+			       pgoff >> (PAGE_SHIFT-12));
 			                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1196: FILE: arch/mips/kernel/syscall.c:156:
+	return sys_mmap_pgoff(addr, len, prot, flags, fd, pgoff >> (PAGE_SHIFT-12));
 	                                                                      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1565: FILE: arch/sh/kernel/sys_sh.c:37:
+	return sys_mmap_pgoff(addr, len, prot, flags, fd, off>>PAGE_SHIFT);
 	                                                     ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1709: FILE: arch/sparc/kernel/sys_sparc_64.c:320:
+	unsigned long (*get_area)(struct file *, unsigned long,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1709: FILE: arch/sparc/kernel/sys_sparc_64.c:320:
+	unsigned long (*get_area)(struct file *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1709: FILE: arch/sparc/kernel/sys_sparc_64.c:320:
+	unsigned long (*get_area)(struct file *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1709: FILE: arch/sparc/kernel/sys_sparc_64.c:320:
+	unsigned long (*get_area)(struct file *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1709: FILE: arch/sparc/kernel/sys_sparc_64.c:320:
+	unsigned long (*get_area)(struct file *, unsigned long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2073: FILE: arch/x86/kernel/sys_i386_32.c:56:
+	err = sys_mmap_pgoff(a.addr, a.len, a.prot, a.flags,
 			a.fd, a.offset >> PAGE_SHIFT);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2143: FILE: arch/xtensa/include/asm/unistd.h:192:
+__SYSCALL( 80, sys_mmap_pgoff, 6)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2193: FILE: include/linux/syscalls.h:884:
+asmlinkage long sys_mmap_pgoff(unsigned long addr, unsigned long len,
+			unsigned long prot, unsigned long flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2248: FILE: ipc/shm.c:893:
+	file = alloc_file(path.mnt, path.dentry, f_mode,
+			is_file_hugepages(shp->shm_file) ?

WARNING:LINE_SPACING: Missing a blank line after declarations
#2303: FILE: mm/mmap.c:1441:
+	unsigned long error = arch_mmap_check(addr, len, flags);
+	if (error)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2345: FILE: mm/mremap.c:265:
+static struct vm_area_struct *vma_to_resize(unsigned long addr,
+	unsigned long old_len, unsigned long new_len, unsigned long *p)

CHECK:CAMELCASE: Avoid CamelCase: <Efault>
#2351: FILE: mm/mremap.c:271:
+		goto Efault;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Einval>
#2354: FILE: mm/mremap.c:274:
+		goto Einval;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2367: FILE: mm/mremap.c:287:
+		unsigned long locked, lock_limit;
+		locked = mm->locked_vm << PAGE_SHIFT;

CHECK:CAMELCASE: Avoid CamelCase: <Eagain>
#2371: FILE: mm/mremap.c:291:
+			goto Eagain;

CHECK:CAMELCASE: Avoid CamelCase: <Enomem>
#2375: FILE: mm/mremap.c:295:
+		goto Enomem;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2379: FILE: mm/mremap.c:299:
+		unsigned long charged = (new_len - old_len) >> PAGE_SHIFT;
+		if (security_vm_enough_memory(charged))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2397: FILE: mm/mremap.c:317:
+static unsigned long mremap_to(unsigned long addr,
+	unsigned long old_len, unsigned long new_addr,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2415: FILE: mm/mremap.c:335:
+	if ((new_addr <= addr) && (new_addr+new_len) > addr)
 	                                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_addr <= addr'
#2415: FILE: mm/mremap.c:335:
+	if ((new_addr <= addr) && (new_addr+new_len) > addr)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2418: FILE: mm/mremap.c:338:
+	if ((addr <= new_addr) && (addr+old_len) > new_addr)
 	                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr <= new_addr'
#2418: FILE: mm/mremap.c:338:
+	if ((addr <= new_addr) && (addr+old_len) > new_addr)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2430: FILE: mm/mremap.c:350:
+		ret = do_munmap(mm, addr+new_len, old_len - new_len);
 		                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2465: FILE: mm/mremap.c:385:
+	unsigned long end = vma->vm_end + delta;
+	if (end < vma->vm_end) /* overflow */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2602: FILE: mm/mremap.c:485:
+		unsigned long map_flags = 0;
+		if (vma->vm_flags & VM_MAYSHARE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2606: FILE: mm/mremap.c:489:
+		new_addr = get_unmapped_area(vma->vm_file, 0, new_len,
+					vma->vm_pgoff +

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2649: FILE: mm/util.c:279:
+	struct file * file = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2668: FILE: mm/util.c:298:
+		file = hugetlb_file_setup(HUGETLB_ANON_FILE, len, VM_NORESERVE,
+						&user, HUGETLB_ANONHUGE_INODE);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000023567.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 11 warnings, 21 checks, 2225 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000023567.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
