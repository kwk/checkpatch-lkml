CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#436: FILE: kernel/sched.c:881:
+	return min(rq->lrq.cpu_load[type-1], rq->lrq.raw_weighted_load);
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#448: FILE: kernel/sched.c:895:
+	return max(rq->lrq.cpu_load[type-1], rq->lrq.raw_weighted_load);
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#480: FILE: kernel/sched.c:1196:
+			       100*(tl + p->se.load_weight) <= imbalance*load) {
 			          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#480: FILE: kernel/sched.c:1196:
+			       100*(tl + p->se.load_weight) <= imbalance*load) {
 			                                                ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#499: FILE: kernel/sched.c:1294:
+	p->se.wait_start_fair = p->se.wait_start = p->se.exec_start = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#509: FILE: kernel/sched.c:1299:
+	p->se.sum_wait_runtime = p->se.sum_sleep_runtime = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#510: FILE: kernel/sched.c:1300:
+	p->se.sleep_start = p->se.sleep_start_fair = p->se.block_start = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#511: FILE: kernel/sched.c:1301:
+	p->se.sleep_max = p->se.block_max = p->se.exec_max = p->se.wait_max = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#512: FILE: kernel/sched.c:1302:
+	p->se.wait_runtime_overruns = p->se.wait_runtime_underruns = 0;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#571: FILE: kernel/sched.c:1639:
+		this_rq->lrq.cpu_load[i] = (old_load*(scale-1) + new_load) >> i;
 		                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#571: FILE: kernel/sched.c:1639:
+		this_rq->lrq.cpu_load[i] = (old_load*(scale-1) + new_load) >> i;
 		                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: kernel/sched.c:2241:
+		if (rq->nr_running == 1 &&
+				 rq->lrq.raw_weighted_load > imbalance)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#654: FILE: kernel/sched.c:3739:
+	BUG_ON(p->se.on_rq);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#692: FILE: kernel/sched.c:6112:
+		rq->clock = rq->lrq.fair_clock = 1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#870: FILE: kernel/sched_debug.c:238:
+	p->se.sleep_max = p->se.block_max = p->se.exec_max = p->se.wait_max = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#871: FILE: kernel/sched_debug.c:239:
+	p->se.wait_runtime_overruns = p->se.wait_runtime_underruns = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1087: FILE: kernel/sched_fair.c:268:
+	if (likely(p->se.load_weight == NICE_0_LOAD))
[...]
 	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1098: FILE: kernel/sched_fair.c:276:
+^I^I^I^I^I^I^I ^INICE_0_LOAD);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1098: FILE: kernel/sched_fair.c:276:
+^I^I^I^I^I^I^I ^INICE_0_LOAD);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1126: FILE: kernel/sched_fair.c:299:
+			delta_fair = div64_s(delta_fair * p->se.load_weight,
 								NICE_0_LOAD);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1186: FILE: kernel/sched_fair.c:390:
+		delta_fair = div64_s(delta_fair * load,
+						 load + p->se.load_weight);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1284: FILE: kernel/sched_fair.c:502:
 			p_to->sched_class == &fair_sched_class
+			&& p->se.wait_runtime > 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1306: FILE: kernel/sched_fair.c:594:
+		if (prev->se.on_rq &&
 			test_tsk_thread_flag(prev, TIF_NEED_RESCHED)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419824.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 2 warnings, 20 checks, 1247 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419824.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
