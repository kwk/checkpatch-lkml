CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#197: FILE: include/linux/jiffies.h:264:
+extern unsigned int jiffies_to_msecs(const unsigned long j);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#198: FILE: include/linux/jiffies.h:265:
+extern unsigned int jiffies_to_usecs(const unsigned long j);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#199: FILE: include/linux/jiffies.h:266:
+extern unsigned long msecs_to_jiffies(const unsigned int m);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: include/linux/jiffies.h:267:
+extern unsigned long usecs_to_jiffies(const unsigned int u);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#201: FILE: include/linux/jiffies.h:268:
+extern unsigned long timespec_to_jiffies(const struct timespec *value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#202: FILE: include/linux/jiffies.h:269:
+extern void jiffies_to_timespec(const unsigned long jiffies,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#204: FILE: include/linux/jiffies.h:271:
+extern unsigned long timeval_to_jiffies(const struct timeval *value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/linux/jiffies.h:272:
+extern void jiffies_to_timeval(const unsigned long jiffies,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#207: FILE: include/linux/jiffies.h:274:
+extern clock_t jiffies_to_clock_t(long x);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/linux/jiffies.h:275:
+extern unsigned long clock_t_to_jiffies(unsigned long x);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: include/linux/jiffies.h:276:
+extern u64 jiffies_64_to_clock_t(u64 x);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: include/linux/jiffies.h:277:
+extern u64 nsec_to_clock_t(u64 x);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#286: FILE: kernel/time.c:481:
+#if HZ <= MSEC_PER_SEC && !(MSEC_PER_SEC % HZ)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#288: FILE: kernel/time.c:483:
+#elif HZ > MSEC_PER_SEC && !(HZ % MSEC_PER_SEC)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#289: FILE: kernel/time.c:484:
+	return (j + (HZ / MSEC_PER_SEC) - 1)/(HZ / MSEC_PER_SEC);
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#298: FILE: kernel/time.c:493:
+#if HZ <= USEC_PER_SEC && !(USEC_PER_SEC % HZ)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#300: FILE: kernel/time.c:495:
+#elif HZ > USEC_PER_SEC && !(HZ % USEC_PER_SEC)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#301: FILE: kernel/time.c:496:
+	return (j + (HZ / USEC_PER_SEC) - 1)/(HZ / USEC_PER_SEC);
 	                                    ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#312: FILE: kernel/time.c:507:
+#if HZ <= MSEC_PER_SEC && !(MSEC_PER_SEC % HZ)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#314: FILE: kernel/time.c:509:
+#elif HZ > MSEC_PER_SEC && !(HZ % MSEC_PER_SEC)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#326: FILE: kernel/time.c:521:
+#if HZ <= USEC_PER_SEC && !(USEC_PER_SEC % HZ)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#328: FILE: kernel/time.c:523:
+#elif HZ > USEC_PER_SEC && !(HZ % USEC_PER_SEC)

WARNING:TYPO_SPELLING: 'boundries' may be misspelled - perhaps 'boundaries'?
#339: FILE: kernel/time.c:534:
+ * resolution values don't fall on second boundries.  I.e. the line:
                                           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before the open brace '{'
#353: FILE: kernel/time.c:548:
+	if (sec >= MAX_SEC_IN_JIFFIES){

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#361: FILE: kernel/time.c:556:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#372: FILE: kernel/time.c:567:
+	u64 nsec = (u64)jiffies * TICK_NSEC;
+	value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &value->tv_nsec);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#394: FILE: kernel/time.c:589:
+	if (sec >= MAX_SEC_IN_JIFFIES){

WARNING:LINE_SPACING: Missing a blank line after declarations
#426: FILE: kernel/time.c:621:
+	u64 tmp = (u64)x * TICK_NSEC;
+	do_div(tmp, (NSEC_PER_SEC / USER_HZ));

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#434: FILE: kernel/time.c:629:
+#if (HZ % USER_HZ)==0
                   ^

CHECK:SPACING: No space is necessary after a cast
#446: FILE: kernel/time.c:641:
+	jif = x * (u64) HZ;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#469: FILE: kernel/time.c:664:
+EXPORT_SYMBOL(jiffies_64_to_clock_t);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#476: FILE: kernel/time.c:671:
+	x *= USER_HZ/512;
 	            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: kernel/time.c:675:
+         * max relative error 5.7e-8 (1.8s per year) for USER_HZ <= 1024,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: kernel/time.c:676:
+         * overflow after 64.99 years.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: kernel/time.c:677:
+         * exact for HZ=60, 72, 90, 120, 144, 180, 300, 600, 900, ...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#483: FILE: kernel/time.c:678:
+         */$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#485: FILE: kernel/time.c:680:
+	do_div(x, (unsigned long)((9ull * NSEC_PER_SEC + (USER_HZ/2)) /
 	                                                         ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475223.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 12 warnings, 18 checks, 442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475223.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
