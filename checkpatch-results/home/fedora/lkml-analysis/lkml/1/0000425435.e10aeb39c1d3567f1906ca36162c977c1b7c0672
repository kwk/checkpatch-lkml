WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
	- if notification uis requested, then a message is appedend to the context message

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: perfmon/perfmon_intr.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#67: FILE: perfmon/perfmon_intr.c:22:
+ * ^Ihttp://perfmon2.sf.net$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#79: FILE: perfmon/perfmon_intr.c:34:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#80: FILE: perfmon/perfmon_intr.c:35:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#82: FILE: perfmon/perfmon_intr.c:37:
+ * 02111-1307 USA
+  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#137: FILE: perfmon/perfmon_intr.c:92:
+	now = t0 = sched_clock();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#146: FILE: perfmon/perfmon_intr.c:101:
+	num_ovfl = num_ovfl_orig = set->npend_ovfls;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#154: FILE: perfmon/perfmon_intr.c:109:
+	must_switch = has_64b_ovfl = 0;

WARNING:SPLIT_STRING: quoted string split across lines
#159: FILE: perfmon/perfmon_intr.c:114:
+	PFM_DBG_ovfl("ovfl_pmds=0x%llx npend=%u ip=%p, blocking=%d "
+		     "u_pmds=0x%llx use_fmt=%u",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ctx->smpl_fmt"
#165: FILE: perfmon/perfmon_intr.c:120:
+		     ctx->smpl_fmt != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#209: FILE: perfmon/perfmon_intr.c:164:
+		old_val = new_val = pmds[i];

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: perfmon/perfmon_intr.c:194:
+^I^I ^I * on some PMU, it may be necessary to re-arm the PMD$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#239: FILE: perfmon/perfmon_intr.c:194:
+^I^I ^I * on some PMU, it may be necessary to re-arm the PMD$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: perfmon/perfmon_intr.c:195:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#240: FILE: perfmon/perfmon_intr.c:195:
+^I^I ^I */$

WARNING:SPLIT_STRING: quoted string split across lines
#245: FILE: perfmon/perfmon_intr.c:200:
+		PFM_DBG_ovfl("pmd%u=0x%llx old_val=0x%llx "
+			     "hw_pmd=0x%llx o_pmds=0x%llx must_switch=%u "

WARNING:SPLIT_STRING: quoted string split across lines
#246: FILE: perfmon/perfmon_intr.c:201:
+			     "hw_pmd=0x%llx o_pmds=0x%llx must_switch=%u "
+			     "o_thres=%llu o_thres_ref=%llu",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: perfmon/perfmon_intr.c:219:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#315: FILE: perfmon/perfmon_intr.c:270:
+		for (i = first_cnt_pmd; num_ovfl && !ret; i++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: perfmon/perfmon_intr.c:283:
+^I^I ^I * copy values of pmds of interest.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#328: FILE: perfmon/perfmon_intr.c:283:
+^I^I ^I * copy values of pmds of interest.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: perfmon/perfmon_intr.c:286:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#331: FILE: perfmon/perfmon_intr.c:286:
+^I^I ^I */$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#335: FILE: perfmon/perfmon_intr.c:290:
+			if (!bitmap_empty(ulp(smpl_pmds), max_pmd)) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#337: FILE: perfmon/perfmon_intr.c:292:
+				for (j = 0; j < max_pmd; j++) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#351: FILE: perfmon/perfmon_intr.c:306:
+					PFM_DBG_ovfl("s_pmd_val[%u]="
+						     "pmd%u=0x%llx",

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: perfmon/perfmon_intr.c:318:
+^I^I ^I * call custom buffer format record (handler) routine$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#363: FILE: perfmon/perfmon_intr.c:318:
+^I^I ^I * call custom buffer format record (handler) routine$

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: perfmon/perfmon_intr.c:319:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#364: FILE: perfmon/perfmon_intr.c:319:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#399: FILE: perfmon/perfmon_intr.c:354:
+^I^I * ^I- mask monitoring$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#400: FILE: perfmon/perfmon_intr.c:355:
+^I^I * ^I- notify user if requested$

WARNING:SPLIT_STRING: quoted string split across lines
#416: FILE: perfmon/perfmon_intr.c:371:
+	PFM_DBG_ovfl("set%u o_notify=0x%llx o_pmds=0x%llx "
+		     "r_pmds=0x%llx ovfl_ctrl=0x%x",

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: perfmon/perfmon_intr.c:391:
+^I^I ^I * update our view of the active set$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#436: FILE: perfmon/perfmon_intr.c:391:
+^I^I ^I * update our view of the active set$

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: perfmon/perfmon_intr.c:392:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#437: FILE: perfmon/perfmon_intr.c:392:
+^I^I ^I */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#443: FILE: perfmon/perfmon_intr.c:398:
+			u16 nn;
+			t0 = sched_clock();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#504: FILE: perfmon/perfmon_intr.c:459:
+ * ^I- For per-thread, we must prevent pfm_restart() which works when$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#505: FILE: perfmon/perfmon_intr.c:460:
+ * ^I  context is LOADED or MASKED$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#520: FILE: perfmon/perfmon_intr.c:475:
+	if (unlikely(ctx == NULL)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#594: FILE: perfmon/perfmon_intr.c:549:
+	BUG_ON(!irqs_disabled());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425435.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 23 warnings, 9 checks, 558 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425435.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
