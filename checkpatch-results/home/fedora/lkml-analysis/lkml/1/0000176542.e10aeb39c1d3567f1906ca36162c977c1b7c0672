WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#39: 
to diagnose and log that these are occuring...which can be very helpful
                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
Content-Type: text/x-patch; name=add_smi_detector_module.patch; charset=UTF-8

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#71: FILE: drivers/misc/smi_detector.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#105: FILE: drivers/misc/smi_detector.c:35:
+static int debug = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#106: FILE: drivers/misc/smi_detector.c:36:
+static int enabled = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#107: FILE: drivers/misc/smi_detector.c:37:
+static int threshold = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#113: FILE: drivers/misc/smi_detector.c:43:
+struct task_struct *smi_kthread = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#116: FILE: drivers/misc/smi_detector.c:46:
+struct smdata_struct {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#129: FILE: drivers/misc/smi_detector.c:59:
+struct dentry *smi_debug_dir = NULL;	        /* SMI debugfs directory */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#130: FILE: drivers/misc/smi_detector.c:60:
+struct dentry *smi_debug_max = NULL;            /* maximum TSC delta */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#131: FILE: drivers/misc/smi_detector.c:61:
+struct dentry *smi_debug_smi = NULL;            /* SMI detect count */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#132: FILE: drivers/misc/smi_detector.c:62:
+struct dentry *smi_debug_sample_ms = NULL;      /* sample size ms */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#133: FILE: drivers/misc/smi_detector.c:63:
+struct dentry *smi_debug_interval_ms = NULL;    /* interval size ms */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#134: FILE: drivers/misc/smi_detector.c:64:
+struct dentry *smi_debug_sample = NULL;		/* raw SMI samples (us) */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#135: FILE: drivers/misc/smi_detector.c:65:
+struct dentry *smi_debug_threshold = NULL;	/* latency threshold (us) */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#136: FILE: drivers/misc/smi_detector.c:66:
+struct dentry *smi_debug_frequency_us = NULL;	/* avg smi spike interval (us) */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#155: FILE: drivers/misc/smi_detector.c:85:
+	do {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#163: FILE: drivers/misc/smi_detector.c:93:
+			printk(KERN_ERR SMI_BANNER "time running backwards\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#172: FILE: drivers/misc/smi_detector.c:102:
+	} while (total <= USEC_PER_MSEC*smi_sample_ms);
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: drivers/misc/smi_detector.c:114:
+^I^Ielse $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#191: FILE: drivers/misc/smi_detector.c:121:
+	atomic_set(&smi_data->pending,1);
 	                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: drivers/misc/smi_detector.c:125:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: drivers/misc/smi_detector.c:125:
+ $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#223: FILE: drivers/misc/smi_detector.c:153:
+static int smi_debug_sample_fopen(struct inode *inode, struct file *filp)
                                                                     ^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#225: FILE: drivers/misc/smi_detector.c:155:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: drivers/misc/smi_detector.c:158:
+^Ireturn 0;^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#230: FILE: drivers/misc/smi_detector.c:160:
+static ssize_t smi_debug_sample_fread(struct file *filp, char __user *ubuf,
                                                    ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#230: FILE: drivers/misc/smi_detector.c:160:
+}
+static ssize_t smi_debug_sample_fread(struct file *filp, char __user *ubuf,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: drivers/misc/smi_detector.c:161:
+static ssize_t smi_debug_sample_fread(struct file *filp, char __user *ubuf,
+					size_t cnt, loff_t *ppos)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#238: FILE: drivers/misc/smi_detector.c:168:
+	atomic_set(&smi_data->pending,0);
 	                             ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#245: FILE: drivers/misc/smi_detector.c:175:
+static struct file_operations smi_sample_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#253: FILE: drivers/misc/smi_detector.c:183:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#254: FILE: drivers/misc/smi_detector.c:184:
+	printk(KERN_INFO SMI_BANNER "version %s\n", smi_version);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#256: FILE: drivers/misc/smi_detector.c:186:
+		printk(KERN_INFO SMI_BANNER "please reload with enabled=1\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: drivers/misc/smi_detector.c:206:
+	smi_debug_sample_ms = debugfs_create_u32("ms_per_sample",
+				0644, smi_debug_dir, &smi_sample_ms);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: drivers/misc/smi_detector.c:208:
+	smi_debug_interval_ms = debugfs_create_u32("ms_between_samples",
+				0644, smi_debug_dir, &smi_interval_ms);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: drivers/misc/smi_detector.c:210:
+	smi_debug_max = debugfs_create_u64("max_sample_us",
+				0644, smi_debug_dir, &smdata.max_sample);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: drivers/misc/smi_detector.c:212:
+	smi_debug_smi = debugfs_create_u64("smi_count",
+				0644, smi_debug_dir, &smdata.smi_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: drivers/misc/smi_detector.c:214:
+	smi_debug_sample = debugfs_create_file("sample_us",
+				0444, smi_debug_dir, &smdata, &smi_sample_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: drivers/misc/smi_detector.c:216:
+	smi_debug_frequency_us = debugfs_create_u64("avg_smi_interval_us",
+				0444, smi_debug_dir, &smdata.frequency);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: drivers/misc/smi_detector.c:218:
+	smi_debug_threshold = debugfs_create_u64("latency_threshold_us",
+				0444, smi_debug_dir, &smdata.threshold);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#290: FILE: drivers/misc/smi_detector.c:220:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#295: FILE: drivers/misc/smi_detector.c:225:
+
+}

WARNING:TYPO_SPELLING: 'Continously' may be misspelled - perhaps 'Continuously'?
#364: FILE: Documentation/smi_detector.txt:48:
+sample_us		- last sample (usecs). Continously updated, may be used
          		                       ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: Documentation/smi_detector.txt:82:
+^I# cat smi_count $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#400: FILE: Documentation/smi_detector.txt:84:
+^I# cat max_sample_us $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: Documentation/smi_detector.txt:86:
+^I# cat avg_smi_interval_us $

WARNING:TYPO_SPELLING: 'continous' may be misspelled - perhaps 'continuous'?
#407: FILE: Documentation/smi_detector.txt:91:
+to not create a continous sampling situation, that might be perceived by the
                 ^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000176542.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 20 errors, 12 warnings, 16 checks, 341 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000176542.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
