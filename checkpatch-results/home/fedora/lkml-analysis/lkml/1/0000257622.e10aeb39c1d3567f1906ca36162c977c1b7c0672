WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#71: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: arch/microblaze/kernel/ptrace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#111: FILE: arch/microblaze/kernel/ptrace.c:36:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#112: FILE: arch/microblaze/kernel/ptrace.c:37:
+#include <asm/uaccess.h>

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#116: FILE: arch/microblaze/kernel/ptrace.c:41:
+static microblaze_reg_t *reg_save_addr(unsigned reg_offs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: arch/microblaze/kernel/ptrace.c:42:
+static microblaze_reg_t *reg_save_addr(unsigned reg_offs,
+					struct task_struct *t)

CHECK:BRACES: braces {} should be used on all arms of this statement
#158: FILE: arch/microblaze/kernel/ptrace.c:83:
+		if (addr >= PT_SIZE && request == PTRACE_PEEKUSR) {
[...]
+		} else if (addr >= 0 && addr < PT_SIZE && (addr & 0x3) == 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#160: FILE: arch/microblaze/kernel/ptrace.c:85:
+			/* Special requests that don't actually correspond
+			 to offsets in struct pt_regs. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#160: FILE: arch/microblaze/kernel/ptrace.c:85:
+			 to offsets in struct pt_regs. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#173: FILE: arch/microblaze/kernel/ptrace.c:98:
+			microblaze_reg_t *reg_addr = reg_save_addr(addr, child);
+			if (request == PTRACE_PEEKUSR)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#177: FILE: arch/microblaze/kernel/ptrace.c:102:
+		} else

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#191: FILE: arch/microblaze/kernel/ptrace.c:116:
+#if 0

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#199: FILE: arch/microblaze/kernel/ptrace.c:124:
+	/* The 0x80 provides a way for the tracing parent to distinguish
+	 between a syscall stop and SIGTRAP delivery */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#199: FILE: arch/microblaze/kernel/ptrace.c:124:
+	 between a syscall stop and SIGTRAP delivery */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#224: FILE: include/asm-microblaze/ptrace.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#238: FILE: include/asm-microblaze/ptrace.h:15:
+typedef unsigned long microblaze_reg_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: include/asm-microblaze/ptrace.h:64:
+extern void show_regs(struct pt_regs *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#287: FILE: include/asm-microblaze/ptrace.h:64:
+extern void show_regs(struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257622.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 6 checks, 210 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257622.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
