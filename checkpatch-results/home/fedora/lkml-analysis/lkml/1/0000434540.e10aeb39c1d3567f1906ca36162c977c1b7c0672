CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#96: FILE: arch/i386/kernel/irq.c:24:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#138: FILE: arch/i386/kernel/irq.c:165:
+					ilog2(THREAD_SIZE/PAGE_SIZE));
 					                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#160: FILE: arch/i386/kernel/irq.c:186:
+	irqctx = (union irq_ctx*)per_cpu(hardirq_stack, cpu);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#171: FILE: arch/i386/kernel/irq.c:195:
+	irqctx = (union irq_ctx*)per_cpu(softirq_stack, cpu);

WARNING:BAD_SIGN_OFF: Duplicate signature
#212: 
Signed-off-by: William Irwin <bill.irwin@oracle.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#231: FILE: include/asm-i386/irq.h:27:
+void irq_ctx_init(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#232: FILE: include/asm-i386/irq.h:28:
+void irq_ctx_exit(int);

ERROR:DEFINE_ARCH_HAS: #define of '__ARCH_HAS_DO_SOFTIRQ' is wrong - use Kconfig variables or standard guards instead
#233: FILE: include/asm-i386/irq.h:29:
+#define __ARCH_HAS_DO_SOFTIRQ

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

WARNING:BAD_SIGN_OFF: Duplicate signature
#319: 
Signed-off-by: William Irwin <bill.irwin@oracle.com>

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#363: FILE: arch/i386/kernel/process.c:330:
+	struct page *pages[THREAD_SIZE/PAGE_SIZE], **tmp = pages;
 	                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#373: FILE: arch/i386/kernel/process.c:340:
+	for (i = 0; i < THREAD_SIZE/PAGE_SIZE; ++i) {
 	                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#397: FILE: arch/i386/kernel/process.c:364:
+	for (i = 0; i < THREAD_SIZE/PAGE_SIZE; ++i)
 	                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#398: FILE: arch/i386/kernel/process.c:365:
+		__free_page(vmalloc_to_page(p + PAGE_SIZE*i));
 		                                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#429: FILE: include/asm-i386/module.h:77:
+#define MODULE_ARCH_VERMAGIC MODULE_PROC_FAMILY MODULE_STACKSIZE \
+		MODULE_DEBUG_STACK

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#443: FILE: include/asm-i386/thread_info.h:99:
+struct thread_info *alloc_thread_info(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct thread_info *' should also have an identifier name
#444: FILE: include/asm-i386/thread_info.h:100:
+void free_thread_info(struct thread_info *);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#489: FILE: arch/i386/kernel/irq.c:152:
+	struct page *pages[THREAD_SIZE/PAGE_SIZE];
 	                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#492: FILE: arch/i386/kernel/irq.c:155:
+		pages[i] =  virt_to_page(stack + PAGE_SIZE*i);
 		                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#493: FILE: arch/i386/kernel/irq.c:156:
+	return vmap(pages, THREAD_SIZE/PAGE_SIZE, VM_IOREMAP, PAGE_KERNEL);
 	                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#502: FILE: arch/i386/kernel/irq.c:165:
+	if (!tmp)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#504: FILE: arch/i386/kernel/irq.c:167:
+		return -ENOMEM;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#504: FILE: arch/i386/kernel/irq.c:167:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#510: FILE: arch/i386/kernel/irq.c:173:
+	if (!tmp)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#512: FILE: arch/i386/kernel/irq.c:175:
+		return -ENOMEM;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#512: FILE: arch/i386/kernel/irq.c:175:
+	else {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#524: FILE: arch/i386/kernel/irq.c:187:
+	struct page *pages[THREAD_SIZE/PAGE_SIZE], **tmp = pages;
 	                              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#562: FILE: arch/i386/mm/pgtable.c:188:
+		BUG_ON(kvaddr >= VMALLOC_START);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#564: FILE: arch/i386/mm/pgtable.c:190:
+		BUG_ON(kvaddr >= (unsigned long)__va(MAXMEM));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#588: FILE: include/asm-i386/page.h:127:
+#define __pa(x)			((unsigned long)(x)-PAGE_OFFSET)
                			                   ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#623: FILE: arch/i386/kernel/irq.c:151:
+};
+static DEFINE_PER_CPU(struct irq_stack_info, softirq_stack_info);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#635: FILE: arch/i386/kernel/irq.c:157:
+	struct page *page, *pages[THREAD_SIZE/PAGE_SIZE];
 	                                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#662: FILE: arch/i386/kernel/irq.c:174:
+		for (i = 0; i < THREAD_SIZE/PAGE_SIZE; ++i) {
 		                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#698: FILE: arch/i386/kernel/irq.c:205:
+		info->stack = __alloc_bootmem(THREAD_SIZE, THREAD_SIZE,
 						__pa(MAX_DMA_ADDRESS));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: arch/i386/kernel/irq.c:217:
+	info->stack = vmap(info->pages, ARRAY_SIZE(info->pages), VM_IOREMAP,
+								 PAGE_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: arch/i386/kernel/irq.c:245:
+		info->stack = __alloc_bootmem(THREAD_SIZE, THREAD_SIZE,
 						__pa(MAX_DMA_ADDRESS));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#760: FILE: arch/i386/kernel/irq.c:257:
+		__free_pages(page, ilog2(THREAD_SIZE/PAGE_SIZE));
 		                                    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#791: FILE: arch/i386/kernel/irq.c:291:
+	irqctx = (union irq_ctx*)per_cpu(hardirq_stack_info, cpu).stack;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#800: FILE: arch/i386/kernel/irq.c:300:
+	irqctx = (union irq_ctx*)per_cpu(softirq_stack_info, cpu).stack;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#822: FILE: arch/i386/kernel/process.c:330:
+	struct page *pages[THREAD_SIZE/PAGE_SIZE];
 	                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#844: FILE: arch/i386/kernel/process.c:342:
+	info = vmap(pages, THREAD_SIZE/PAGE_SIZE, VM_IOREMAP, PAGE_KERNEL);
 	                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#859: FILE: arch/i386/kernel/process.c:354:
+	struct page *pages[THREAD_SIZE/PAGE_SIZE];
 	                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#865: FILE: arch/i386/kernel/process.c:358:
+		pages[i] = vmalloc_to_page(p + PAGE_SIZE*i);
 		                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#867: FILE: arch/i386/kernel/process.c:360:
+	for (i = 0; i < THREAD_SIZE/PAGE_SIZE; ++i)
 	                           ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#892: FILE: arch/i386/kernel/irq.c:286:
+	*irqctx = (union irq_ctx*)info->stack;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#947: FILE: include/asm-i386/irq.h:27:
+int irq_ctx_init(int);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#961: FILE: arch/i386/kernel/i8259.c:421:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#977: FILE: arch/i386/kernel/smpboot.c:832:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#995: FILE: arch/i386/mach-voyager/voyager_smp.c:593:
+		printk(KERN_INFO

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434540.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 14 warnings, 27 checks, 767 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434540.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
