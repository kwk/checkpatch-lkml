CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#68: FILE: include/linux/container.h:38:
+};
+#undef SUBSYS

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#93: FILE: include/linux/container.h:112:
+struct css_group {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#122: FILE: include/linux/container.h:141:
+	 * immutable after creation */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#177: FILE: include/linux/container.h:262:
+ * 1) call container_iter_start to intialize an iterator
                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#189: FILE: include/linux/container.h:274:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#292: FILE: kernel/container.c:162:
+ * chain of tasks off each css_group. Nests inside task->alloc_lock */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#296: FILE: kernel/container.c:166:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#319: FILE: kernel/container.c:189:
+	int i;
+	write_lock(&css_group_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#324: FILE: kernel/container.c:194:
+		struct cg_container_link *link;
+		link = list_entry(cg->cg_links.next,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#331: FILE: kernel/container.c:201:
+	for (i = 0; i < CONTAINER_SUBSYS_COUNT; i++) {
+		atomic_dec(&cg->subsys[i]->container->count);
+	}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#366: FILE: kernel/container.c:236:
+static struct css_group *find_existing_css_group(

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#376: FILE: kernel/container.c:246:
+	 * see in the new css_group */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#382: FILE: kernel/container.c:251:
+			 * container */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#386: FILE: kernel/container.c:255:
+			 * don't want to change the subsystem state */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#445: FILE: kernel/container.c:313:
+static struct css_group *find_css_group(

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#456: FILE: kernel/container.c:324:
+	 * the desired set */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#481: FILE: kernel/container.c:349:
+	 * find_existing_css_group() */

WARNING:LINE_SPACING: Missing a blank line after declarations
#490: FILE: kernel/container.c:357:
+		struct container_subsys *ss = subsys[i];
+		atomic_inc(&cont->count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#497: FILE: kernel/container.c:364:
+			BUG_ON(list_empty(&tmp_cg_links));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#517: FILE: kernel/container.c:384:
+	BUG_ON(!list_empty(&tmp_cg_links));

WARNING:LINE_SPACING: Missing a blank line after declarations
#536: FILE: kernel/container.c:671:
+		struct cg_container_link *link;
+		link = list_entry(cont->css_groups.next,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#573: FILE: kernel/container.c:858:
+		 * structures left over */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#582: FILE: kernel/container.c:867:
+		 * the css_group objects */

WARNING:LINE_SPACING: Missing a blank line after declarations
#588: FILE: kernel/container.c:873:
+			struct cg_container_link *link;
+			cg = list_entry(l, struct css_group, list);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#589: FILE: kernel/container.c:874:
+			BUG_ON(list_empty(&tmp_cg_links));

WARNING:LINE_SPACING: Missing a blank line after declarations
#605: FILE: kernel/container.c:890:
+			struct cg_container_link *link;
+			printk(KERN_INFO "Freeing unused cg_container_link\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#605: FILE: kernel/container.c:890:
+			printk(KERN_INFO "Freeing unused cg_container_link\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#632: FILE: kernel/container.c:1031:
+	 * based on its final set of containers */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#634: FILE: kernel/container.c:1033:
+	if (!newcg) {
+		return -ENOMEM;
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#751: FILE: kernel/container.c:1407:
+		 * the next cg_container_link */

WARNING:LINE_SPACING: Missing a blank line after declarations
#789: FILE: kernel/container.c:1454:
+	struct task_struct *tsk;
+	container_iter_start(cont, &it);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#827: FILE: kernel/container.c:1779:
+	 * groups are in the subsystem's top container. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#841: FILE: kernel/container.c:1793:
+ ^Iif (ss->fork) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#841: FILE: kernel/container.c:1793:
+ ^Iif (ss->fork) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#841: FILE: kernel/container.c:1793:
+ ^Iif (ss->fork) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#842: FILE: kernel/container.c:1794:
+ ^I^Istruct task_struct *g, *p;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#842: FILE: kernel/container.c:1794:
+ ^I^Istruct task_struct *g, *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#842: FILE: kernel/container.c:1794:
+ ^I^Istruct task_struct *g, *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#856: FILE: kernel/container.c:1796:
+ ^I^Iread_lock(&tasklist_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#856: FILE: kernel/container.c:1796:
+ ^I^Iread_lock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#856: FILE: kernel/container.c:1796:
+ ^I^Iread_lock(&tasklist_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#857: FILE: kernel/container.c:1797:
+ ^I^Ido_each_thread(g, p) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#857: FILE: kernel/container.c:1797:
+ ^I^Ido_each_thread(g, p) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: kernel/container.c:1797:
+ ^I^Ido_each_thread(g, p) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#858: FILE: kernel/container.c:1798:
+ ^I^I^Iss->fork(ss, p);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#858: FILE: kernel/container.c:1798:
+ ^I^I^Iss->fork(ss, p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#858: FILE: kernel/container.c:1798:
+ ^I^I^Iss->fork(ss, p);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#859: FILE: kernel/container.c:1799:
+ ^I^I} while_each_thread(g, p);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#859: FILE: kernel/container.c:1799:
+ ^I^I} while_each_thread(g, p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: kernel/container.c:1799:
+ ^I^I} while_each_thread(g, p);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#860: FILE: kernel/container.c:1800:
+ ^I^Iread_unlock(&tasklist_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#860: FILE: kernel/container.c:1800:
+ ^I^Iread_unlock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#860: FILE: kernel/container.c:1800:
+ ^I^Iread_unlock(&tasklist_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#861: FILE: kernel/container.c:1801:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#861: FILE: kernel/container.c:1801:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#861: FILE: kernel/container.c:1801:
+ ^I}$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425466.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 42 warnings, 6 checks, 958 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425466.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
