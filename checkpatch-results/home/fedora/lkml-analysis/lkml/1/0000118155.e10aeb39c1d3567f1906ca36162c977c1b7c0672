ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: Documentation/networking/proc_net_dev.txt:25:
+    you want to set consecutive elements, DO NOT use a comma separated $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#70: FILE: Documentation/networking/proc_net_dev.txt:25:
list!

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: net/core/dev.c:2934:
+static void get_usr_buf(char *buffer, const char __user *input, size_t $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: net/core/dev.c:2936:
+    if (size < USR_BUF_SIZE) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: net/core/dev.c:2937:
+        copy_from_user(buffer, input, size - 1);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: net/core/dev.c:2937:
+        copy_from_user(buffer, input, size - 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: net/core/dev.c:2938:
+        buffer[size - 1]='\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: net/core/dev.c:2938:
+        buffer[size - 1]='\0';$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#91: FILE: net/core/dev.c:2938:
+        buffer[size - 1]='\0';
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: net/core/dev.c:2939:
+    } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: net/core/dev.c:2940:
+        printk(KERN_WARNING "Dev: Ignoring characters past size %d\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: net/core/dev.c:2940:
+        printk(KERN_WARNING "Dev: Ignoring characters past size %d\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#93: FILE: net/core/dev.c:2940:
+        printk(KERN_WARNING "Dev: Ignoring characters past size %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: net/core/dev.c:2941:
+                            USR_BUF_SIZE - 1);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: net/core/dev.c:2941:
+        printk(KERN_WARNING "Dev: Ignoring characters past size %d\n",
+                            USR_BUF_SIZE - 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: net/core/dev.c:2941:
+                            USR_BUF_SIZE - 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: net/core/dev.c:2942:
+        copy_from_user(buffer, input, USR_BUF_SIZE - 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: net/core/dev.c:2942:
+        copy_from_user(buffer, input, USR_BUF_SIZE - 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: net/core/dev.c:2943:
+        buffer[USR_BUF_SIZE - 1] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: net/core/dev.c:2943:
+        buffer[USR_BUF_SIZE - 1] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: net/core/dev.c:2944:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: net/core/dev.c:2949:
+    if (stats)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: net/core/dev.c:2950:
+        memset(stats, 0, sizeof(struct net_device_stats));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: net/core/dev.c:2950:
+        memset(stats, 0, sizeof(struct net_device_stats));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: net/core/dev.c:2955:
+    while (isspace(*start))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: net/core/dev.c:2956:
+        ++start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: net/core/dev.c:2956:
+        ++start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: net/core/dev.c:2957:
+    return start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: net/core/dev.c:2962:
+    char tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: net/core/dev.c:2963:
+    char *scan_end = *scan_start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: net/core/dev.c:2965:
+    while ((*scan_end) && !(*scan_end == ',') && !isspace(*scan_end))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: net/core/dev.c:2966:
+        ++scan_end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: net/core/dev.c:2966:
+        ++scan_end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: net/core/dev.c:2968:
+    tmp = *scan_end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: net/core/dev.c:2969:
+    if (!tmp) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: net/core/dev.c:2970:
+        printk(KERN_ERR "Dev: Invalid parameter(s)\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: net/core/dev.c:2970:
+        printk(KERN_ERR "Dev: Invalid parameter(s)\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#123: FILE: net/core/dev.c:2970:
+        printk(KERN_ERR "Dev: Invalid parameter(s)\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: net/core/dev.c:2971:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: net/core/dev.c:2971:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: net/core/dev.c:2972:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: net/core/dev.c:2974:
+    *scan_end = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: net/core/dev.c:2975:
+    *net_dev = dev_get_by_name(*scan_start);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: net/core/dev.c:2976:
+    if (!*net_dev) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: net/core/dev.c:2977:
+        printk(KERN_ERR "Dev: network device not found: \"%s\"\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: net/core/dev.c:2977:
+        printk(KERN_ERR "Dev: network device not found: \"%s\"\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#130: FILE: net/core/dev.c:2977:
+        printk(KERN_ERR "Dev: network device not found: \"%s\"\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: net/core/dev.c:2978:
+                                *scan_start);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: net/core/dev.c:2978:
+        printk(KERN_ERR "Dev: network device not found: \"%s\"\n",
+                                *scan_start);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: net/core/dev.c:2978:
+                                *scan_start);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: net/core/dev.c:2979:
+        return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: net/core/dev.c:2979:
+        return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: net/core/dev.c:2980:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: net/core/dev.c:2982:
+    *scan_end = tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: net/core/dev.c:2983:
+    *scan_start = skip_whitespace(scan_end);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: net/core/dev.c:2985:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: net/core/dev.c:2990:
+    char * scan_end;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#143: FILE: net/core/dev.c:2990:
+    char * scan_end;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: net/core/dev.c:2991:
+    unsigned long *stat_ptr = (unsigned long *)net_dev->get_stats(net_dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: net/core/dev.c:2993:
+    while (*scan_start) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: net/core/dev.c:2994:
+        if (isdigit(*scan_start))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: net/core/dev.c:2994:
+        if (isdigit(*scan_start))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#147: FILE: net/core/dev.c:2994:
+        if (isdigit(*scan_start))
+            *stat_ptr = simple_strtoul(scan_start, &scan_end, 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#147: FILE: net/core/dev.c:2994:
+        if (isdigit(*scan_start))
[...]
+        else if (*scan_start == ',')
[...]
+        else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: net/core/dev.c:2995:
+            *stat_ptr = simple_strtoul(scan_start, &scan_end, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: net/core/dev.c:2995:
+            *stat_ptr = simple_strtoul(scan_start, &scan_end, 0);$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#148: FILE: net/core/dev.c:2995:
+            *stat_ptr = simple_strtoul(scan_start, &scan_end, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: net/core/dev.c:2996:
+        else if (*scan_start == ',')$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: net/core/dev.c:2996:
+        else if (*scan_start == ',')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#149: FILE: net/core/dev.c:2996:
+        else if (*scan_start == ',')
+            scan_end = scan_start + 1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: net/core/dev.c:2997:
+            scan_end = scan_start + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: net/core/dev.c:2997:
+            scan_end = scan_start + 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: net/core/dev.c:2998:
+        else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: net/core/dev.c:2998:
+        else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#151: FILE: net/core/dev.c:2998:
+        else {
+            printk(KERN_ERR "Dev: Invalid scan character:\"%c\"\n",

CHECK:BRACES: Unbalanced braces around else statement
#151: FILE: net/core/dev.c:2998:
+        else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: net/core/dev.c:2999:
+            printk(KERN_ERR "Dev: Invalid scan character:\"%c\"\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: net/core/dev.c:2999:
+            printk(KERN_ERR "Dev: Invalid scan character:\"%c\"\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#152: FILE: net/core/dev.c:2999:
+            printk(KERN_ERR "Dev: Invalid scan character:\"%c\"\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: net/core/dev.c:3000:
+                                *scan_start);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: net/core/dev.c:3000:
+            printk(KERN_ERR "Dev: Invalid scan character:\"%c\"\n",
+                                *scan_start);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: net/core/dev.c:3000:
+                                *scan_start);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: net/core/dev.c:3001:
+            return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: net/core/dev.c:3001:
+            return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: net/core/dev.c:3002:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: net/core/dev.c:3002:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: net/core/dev.c:3004:
+        scan_start = skip_whitespace(scan_end);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: net/core/dev.c:3004:
+        scan_start = skip_whitespace(scan_end);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: net/core/dev.c:3005:
+        ++stat_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: net/core/dev.c:3005:
+        ++stat_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: net/core/dev.c:3006:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: net/core/dev.c:3008:
+    return 0;$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#165: FILE: net/core/dev.c:3012:
+/*
+ * dev_stats_write - clear or set stats for network devices

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: net/core/dev.c:3016:
+ * echo "eth1 clear" > /proc/net/dev : clears all stats for a single $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: net/core/dev.c:3021:
+ *      leaving byte and packet counters unchanged.  Perhaps useful for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: net/core/dev.c:3022:
+ *      network health monitoring software. Each comma skips an $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: net/core/dev.c:3023:
+ *      you want to set consecutive elements, DO NOT use a comma $

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: net/core/dev.c:3030:
+                size_t size, loff_t *ofs)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: net/core/dev.c:3030:
+static ssize_t dev_stats_write(struct file *file, const char __user *input,
+                size_t size, loff_t *ofs)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: net/core/dev.c:3030:
+                size_t size, loff_t *ofs)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: net/core/dev.c:3032:
+    char usr_buf[USR_BUF_SIZE];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: net/core/dev.c:3033:
+    char *scan_start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: net/core/dev.c:3034:
+    int retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: net/core/dev.c:3035:
+    struct net_device *net_dev = dev_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: net/core/dev.c:3037:
+    if (!capable(CAP_NET_ADMIN))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#194: FILE: net/core/dev.c:3037:
+    if (!capable(CAP_NET_ADMIN))
+                return -EPERM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: net/core/dev.c:3038:
+                return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: net/core/dev.c:3038:
+                return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: net/core/dev.c:3039:
+    if (size < 2)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: net/core/dev.c:3040:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: net/core/dev.c:3040:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: net/core/dev.c:3042:
+    get_usr_buf(usr_buf, input, size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: net/core/dev.c:3044:
+    scan_start = strstrip(usr_buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: net/core/dev.c:3046:
+    if (!strcmp(scan_start, "clearall")) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: net/core/dev.c:3047:
+        while (net_dev) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: net/core/dev.c:3047:
+        while (net_dev) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#204: FILE: net/core/dev.c:3047:
+        while (net_dev) {
+            clear_stats(net_dev->get_stats(net_dev));

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: net/core/dev.c:3048:
+            clear_stats(net_dev->get_stats(net_dev));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: net/core/dev.c:3048:
+            clear_stats(net_dev->get_stats(net_dev));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: net/core/dev.c:3049:
+            net_dev = net_dev->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: net/core/dev.c:3049:
+            net_dev = net_dev->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: net/core/dev.c:3050:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: net/core/dev.c:3050:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: net/core/dev.c:3051:
+        return size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: net/core/dev.c:3051:
+        return size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: net/core/dev.c:3052:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: net/core/dev.c:3054:
+    if ((retval = get_net_dev(&scan_start, &net_dev)))$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#211: FILE: net/core/dev.c:3054:
+    if ((retval = get_net_dev(&scan_start, &net_dev)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: net/core/dev.c:3055:
+        return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: net/core/dev.c:3055:
+        return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: net/core/dev.c:3057:
+    if (!strcmp(scan_start, "clear")) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: net/core/dev.c:3058:
+        clear_stats(net_dev->get_stats(net_dev));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: net/core/dev.c:3058:
+        clear_stats(net_dev->get_stats(net_dev));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: net/core/dev.c:3059:
+        return size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: net/core/dev.c:3059:
+        return size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: net/core/dev.c:3060:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: net/core/dev.c:3062:
+    if ((retval = set_stats(net_dev, scan_start)))$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#219: FILE: net/core/dev.c:3062:
+    if ((retval = set_stats(net_dev, scan_start)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: net/core/dev.c:3063:
+        return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: net/core/dev.c:3063:
+        return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: net/core/dev.c:3064:
+    else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: net/core/dev.c:3065:
+        return size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: net/core/dev.c:3065:
+        return size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: net/core/dev.c:3141:
+    .write   = dev_stats_write,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: net/core/dev.c:3275:
+    if (!proc_net_fops_create(net, "dev", S_IRUGO | S_IWUSR, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: net/core/dev.c:3275:
+    if (!proc_net_fops_create(net, "dev", S_IRUGO | S_IWUSR, $

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#241: FILE: net/core/dev.c:3275:
+    if (!proc_net_fops_create(net, "dev", S_IRUGO | S_IWUSR, 

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: net/core/dev.c:3276:
+    if (!proc_net_fops_create(net, "dev", S_IRUGO | S_IWUSR, 
         goto out;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000118155.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 50 errors, 91 warnings, 7 checks, 197 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000118155.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
