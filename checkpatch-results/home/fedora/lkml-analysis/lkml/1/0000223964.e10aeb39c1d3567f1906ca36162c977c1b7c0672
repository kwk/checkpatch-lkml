WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
> No, for large NR_CPUS, cpumask_t is a pointer as shown.  And we have numerous 

WARNING:BAD_SIGN_OFF: Non-standard signature: 'Signed-of-by:' - perhaps 'Signed-off-by:'?
#135: 
Signed-of-by: Mike Travis <travis@sgi.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#262: FILE: include/linux/cpumask.h:103:
+struct __cpumask_data_s { DECLARE_BITMAP(bits, NR_CPUS); };

WARNING:NEW_TYPEDEFS: do not add new typedefs
#265: FILE: include/linux/cpumask.h:106:
+typedef struct __cpumask_data_s cpumask_map_t[1];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#268: FILE: include/linux/cpumask.h:109:
+typedef struct __cpumask_data_s *cpumask_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#275: FILE: include/linux/cpumask.h:116:
+typedef struct __cpumask_data_s	cpumask_var_t[1];

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#282: FILE: include/linux/cpumask.h:123:
+#define for_each_cpu(cpu, mask)	\
+	for ((cpu) = 0; (cpu) < 1; (cpu)++, (void)mask)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#284: FILE: include/linux/cpumask.h:125:
+#define for_each_cpu_in(cpu, mask, andmask) \
+	for ((cpu) = 0; (cpu) < 1; (cpu)++, (void)mask, (void)andmask)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#303: FILE: include/linux/cpumask.h:144:
+typedef struct __cpumask_data_s	cpumask_var_t[1];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#315: FILE: include/linux/cpumask.h:156:
+typedef struct __cpumask_data_s	*cpumask_var_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: include/linux/cpumask.h:171:
+extern int cpus_first(const cpumask_t srcp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: include/linux/cpumask.h:172:
+extern int cpus_next(int n, const cpumask_t srcp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: include/linux/cpumask.h:173:
+extern int cpus_next_in(int n, const cpumask_t srcp, const cpumask_t andsrc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: include/linux/cpumask.h:174:
+extern int any_cpu_in(const cpumask_t mask);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#338: FILE: include/linux/cpumask.h:179:
+#define for_each_cpu(cpu, mask)				\
+	for ((cpu) = -1;				\
+		(cpu) = cpus_next((cpu), (mask)),	\
+		(cpu) < nr_cpu_ids; )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#341: FILE: include/linux/cpumask.h:182:
+		(cpu) < nr_cpu_ids; )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#343: FILE: include/linux/cpumask.h:184:
+#define for_each_cpu_in(cpu, mask, andmask)			\
+	for ((cpu) = -1;					\
+		(cpu) = cpus_next_in((cpu), (mask), (andmask)),	\
+		(cpu) < nr_cpu_ids; )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#346: FILE: include/linux/cpumask.h:187:
+		(cpu) < nr_cpu_ids; )

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#361: FILE: include/linux/cpumask.h:200:
+static inline void __cpu_set(int cpu, volatile cpumask_t dstp)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#369: FILE: include/linux/cpumask.h:206:
+static inline void __cpu_clear(int cpu, volatile cpumask_t dstp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: include/linux/cpumask.h:240:
+static inline void __cpus_and(cpumask_t dstp, const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: include/linux/cpumask.h:247:
+static inline void __cpus_or(cpumask_t dstp, const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: include/linux/cpumask.h:254:
+static inline void __cpus_xor(cpumask_t dstp, const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: include/linux/cpumask.h:262:
+static inline void __cpus_andnot(cpumask_t dstp, const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: include/linux/cpumask.h:269:
+static inline void __cpus_complement(cpumask_t dstp,
+					const cpumask_t srcp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: include/linux/cpumask.h:276:
+static inline int __cpus_equal(const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: include/linux/cpumask.h:283:
+static inline int __cpus_intersects(const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: include/linux/cpumask.h:290:
+static inline int __cpus_subset(const cpumask_t src1p,
+					const cpumask_t src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: include/linux/cpumask.h:316:
+static inline void __cpus_shift_right(cpumask_t dstp,
+					const cpumask_t srcp, int n, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: include/linux/cpumask.h:324:
+static inline void __cpus_shift_left(cpumask_t dstp,
+					const cpumask_t srcp, int n, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: include/linux/cpumask.h:427:
+static inline void __cpus_remap(cpumask_t dstp, const cpumask_t srcp,
+		const cpumask_t oldp, const cpumask_t newp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: include/linux/cpumask.h:435:
+static inline void __cpus_onto(cpumask_t dstp, const cpumask_t origp,
+		const cpumask_t relmapp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: include/linux/cpumask.h:443:
+static inline void __cpus_fold(cpumask_t dstp, const cpumask_t origp,
 		int sz, int nbits)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223964.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 10 warnings, 21 checks, 630 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223964.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
