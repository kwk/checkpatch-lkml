WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/aufs/branch.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#71: FILE: fs/aufs/branch.c:28:
+	AuDebugOn(atomic_read(&br->br_count));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuBrWh_Last>
#75: FILE: fs/aufs/branch.c:32:
+		for (i = 0; i < AuBrWh_Last; i++)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#130: FILE: fs/aufs/branch.c:87:
+	return !!au_test_subdir(h_d1, h_d2)
+		|| !!au_test_subdir(h_d2, h_d1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#131: FILE: fs/aufs/branch.c:88:
+		|| !!au_test_subdir(h_d2, h_d1)
+		|| au_test_loopback_overlap(sb, h_d1, h_d2)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#132: FILE: fs/aufs/branch.c:89:
+		|| au_test_loopback_overlap(sb, h_d1, h_d2)
+		|| au_test_loopback_overlap(sb, h_d2, h_d1);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#160: FILE: fs/aufs/branch.c:117:
+	if (unlikely(au_sbr_realloc(au_sbi(sb), new_nbranch)
+		     || au_di_realloc(au_di(root), new_nbranch)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#161: FILE: fs/aufs/branch.c:118:
+		     || au_di_realloc(au_di(root), new_nbranch)
+		     || au_ii_realloc(au_ii(root->d_inode), new_nbranch)))

CHECK:CAMELCASE: Avoid CamelCase: <AuErr>
#182: FILE: fs/aufs/branch.c:139:
+		AuErr("write permission for readonly mount or inode, %s\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#206: FILE: fs/aufs/branch.c:163:
+	if (unlikely(bend >= 0
+		     && au_find_dbindex(root, add->path.dentry) >= 0)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#216: FILE: fs/aufs/branch.c:173:
+	if (unlikely(AUFS_BRANCH_MAX <= add->bindex

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#217: FILE: fs/aufs/branch.c:174:
+	if (unlikely(AUFS_BRANCH_MAX <= add->bindex
+		     || AUFS_BRANCH_MAX - 1 <= bend)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#266: FILE: fs/aufs/branch.c:223:
+		if ((h_inode->i_mode & S_IALLUGO) != (inode->i_mode & S_IALLUGO)
+		    || h_inode->i_uid != inode->i_uid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#267: FILE: fs/aufs/branch.c:224:
+		    || h_inode->i_uid != inode->i_uid
+		    || h_inode->i_gid != inode->i_gid)

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#268: FILE: fs/aufs/branch.c:225:
+			AuWarn("uid/gid/perm %s %u/%u/0%o, %u/%u/0%o\n",

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#288: FILE: fs/aufs/branch.c:245:
+	struct mutex *h_mtx;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#298: FILE: fs/aufs/branch.c:255:
+	if (0 <= bindex) {

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT>
#300: FILE: fs/aufs/branch.c:257:
+		au_hin_imtx_lock_nested(hdir, AuLsc_I_PARENT);

CHECK:BRACES: braces {} should be used on all arms of this statement
#305: FILE: fs/aufs/branch.c:262:
+	if (!wbr)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#307: FILE: fs/aufs/branch.c:264:
+	else {

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#343: FILE: fs/aufs/branch.c:300:
+/* intialize a new branch */
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#453: FILE: fs/aufs/branch.c:410:
+	IMustLock(root_inode);

CHECK:BRACES: braces {} should be used on all arms of this statement
#476: FILE: fs/aufs/branch.c:433:
+	if (!remount)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#478: FILE: fs/aufs/branch.c:435:
+	else {

WARNING:TYPO_SPELLING: 'unnecesary' may be misspelled - perhaps 'unnecessary'?
#493: FILE: fs/aufs/branch.c:450:
+	 * this test/set prevents aufs from handling unnecesary inotify events
 	                                             ^^^^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#498: FILE: fs/aufs/branch.c:455:
+	if (au_xino_brid(sb) < 0
+	    && au_br_writable(add_branch->br_perm)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#499: FILE: fs/aufs/branch.c:456:
+	    && au_br_writable(add_branch->br_perm)
+	    && !au_test_fs_bad_xino(h_dentry->d_sb)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#500: FILE: fs/aufs/branch.c:457:
+	    && !au_test_fs_bad_xino(h_dentry->d_sb)
+	    && add_branch->br_xino.xi_file

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#501: FILE: fs/aufs/branch.c:458:
+	    && add_branch->br_xino.xi_file
+	    && add_branch->br_xino.xi_file->f_dentry->d_parent == h_dentry)

CHECK:CAMELCASE: Avoid CamelCase: <AuVerbose>
#515: FILE: fs/aufs/branch.c:472:
+#define AuVerbose(do_info, fmt, args...) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuInfo>
#517: FILE: fs/aufs/branch.c:474:
+		AuInfo(fmt, ##args); \

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#524: FILE: fs/aufs/branch.c:481:
+			    unsigned int sigen)
 			                 ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#549: FILE: fs/aufs/branch.c:506:
+			if (au_digen(d) == sigen && au_iigen(inode) == sigen)
 			                   ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#549: FILE: fs/aufs/branch.c:506:
+			if (au_digen(d) == sigen && au_iigen(inode) == sigen)
 			                                               ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#549: FILE: fs/aufs/branch.c:506:
+			if (au_digen(d) == sigen && au_iigen(inode) == sigen)
[...]
+			else {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#550: FILE: fs/aufs/branch.c:507:
+				di_read_lock_child(d, AuLock_IR);

CHECK:BRACES: Unbalanced braces around else statement
#551: FILE: fs/aufs/branch.c:508:
+			else {

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#553: FILE: fs/aufs/branch.c:510:
+				err = au_reval_dpath(d, sigen);
 				                        ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#554: FILE: fs/aufs/branch.c:511:
+				if (!err)
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#556: FILE: fs/aufs/branch.c:513:
+				else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#565: FILE: fs/aufs/branch.c:522:
+			if (bstart <= bindex
+			    && bindex <= bend

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#566: FILE: fs/aufs/branch.c:523:
+			    && bindex <= bend
+			    && au_h_dptr(d, bindex)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#567: FILE: fs/aufs/branch.c:524:
+			    && au_h_dptr(d, bindex)
+			    && (!S_ISDIR(inode->i_mode) || bstart == bend)) {

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#569: FILE: fs/aufs/branch.c:526:
+				AuVerbose(verbose, "busy %.*s\n", AuDLNPair(d));

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#582: FILE: fs/aufs/branch.c:539:
+			   unsigned int sigen)
 			                ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#596: FILE: fs/aufs/branch.c:553:
+		if (au_iigen(i) == sigen)
 		                   ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#596: FILE: fs/aufs/branch.c:553:
+		if (au_iigen(i) == sigen)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#598: FILE: fs/aufs/branch.c:555:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#601: FILE: fs/aufs/branch.c:558:
+			if (!err)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#603: FILE: fs/aufs/branch.c:560:
+			else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#612: FILE: fs/aufs/branch.c:569:
+		if (bstart <= bindex
+		    && bindex <= bend

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#613: FILE: fs/aufs/branch.c:570:
+		    && bindex <= bend
+		    && au_h_iptr(i, bindex)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#614: FILE: fs/aufs/branch.c:571:
+		    && au_h_iptr(i, bindex)
+		    && (!S_ISDIR(i->i_mode) || bstart == bend)) {

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#629: FILE: fs/aufs/branch.c:586:
+	unsigned int sigen;
 	             ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#631: FILE: fs/aufs/branch.c:588:
+	sigen = au_sigen(root->d_sb);
 	^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <DiMustNoWaiters>
#632: FILE: fs/aufs/branch.c:589:
+	DiMustNoWaiters(root);

CHECK:CAMELCASE: Avoid CamelCase: <IiMustNoWaiters>
#633: FILE: fs/aufs/branch.c:590:
+	IiMustNoWaiters(root->d_inode);

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#635: FILE: fs/aufs/branch.c:592:
+	err = test_dentry_busy(root, bindex, sigen);
 	                                     ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#637: FILE: fs/aufs/branch.c:594:
+		err = test_inode_busy(root->d_sb, bindex, sigen);
 		                                          ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#734: FILE: fs/aufs/branch.c:691:
+	AuDbg("bindex b%d\n", bindex);

CHECK:BRACES: braces {} should be used on all arms of this statement
#769: FILE: fs/aufs/branch.c:726:
+	if (!remount)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#771: FILE: fs/aufs/branch.c:728:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#824: FILE: fs/aufs/branch.c:781:
+	return do_need_sigen_inc(old, new)
+		|| do_need_sigen_inc(new, old);

WARNING:TYPO_SPELLING: 'defered' may be misspelled - perhaps 'deferred'?
#844: FILE: fs/aufs/branch.c:801:
+	/* no need file_list_lock() since sbinfo is locked? defered? */
 	                                                    ^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <FiMustNoWaiters>
#853: FILE: fs/aufs/branch.c:810:
+			FiMustNoWaiters(file);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#860: FILE: fs/aufs/branch.c:817:
+		if (!S_ISREG(file->f_dentry->d_inode->i_mode)
+		    || !(file->f_mode & FMODE_WRITE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#861: FILE: fs/aufs/branch.c:818:
+		    || !(file->f_mode & FMODE_WRITE)
+		    || bstart != bindex) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#871: FILE: fs/aufs/branch.c:828:
+		if (n < files)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#873: FILE: fs/aufs/branch.c:830:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#880: FILE: fs/aufs/branch.c:837:
+			if (p) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#883: FILE: fs/aufs/branch.c:840:
+			} else

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#958: FILE: fs/aufs/branch.c:915:
+					AuIOErr("nested error %d (%d)\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#996: FILE: fs/aufs/branch.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1026: FILE: fs/aufs/branch.h:31:
+	struct mutex		xi_nondir_mtx;

CHECK:CAMELCASE: Avoid CamelCase: <AuBrWh_BASE>
#1036: FILE: fs/aufs/branch.h:41:
+enum {AuBrWh_BASE, AuBrWh_PLINK, AuBrWh_ORPH, AuBrWh_Last};

CHECK:CAMELCASE: Avoid CamelCase: <AuBrWh_PLINK>
#1036: FILE: fs/aufs/branch.h:41:
+enum {AuBrWh_BASE, AuBrWh_PLINK, AuBrWh_ORPH, AuBrWh_Last};

CHECK:CAMELCASE: Avoid CamelCase: <AuBrWh_ORPH>
#1036: FILE: fs/aufs/branch.h:41:
+enum {AuBrWh_BASE, AuBrWh_PLINK, AuBrWh_ORPH, AuBrWh_Last};

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1040: FILE: fs/aufs/branch.h:45:
+^Iatomic_t ^I^Iwbr_wh_running;$

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_RW>
#1076: FILE: fs/aufs/branch.h:81:
+	AuBrPerm_RW,		/* writable, linkable wh */

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_RO>
#1077: FILE: fs/aufs/branch.h:82:
+	AuBrPerm_RO,		/* readonly, no wh */

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_RR>
#1078: FILE: fs/aufs/branch.h:83:
+	AuBrPerm_RR,		/* natively readonly, no wh */

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_RWNoLinkWH>
#1080: FILE: fs/aufs/branch.h:85:
+	AuBrPerm_RWNoLinkWH,	/* un-linkable whiteouts */

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_ROWH>
#1082: FILE: fs/aufs/branch.h:87:
+	AuBrPerm_ROWH,		/* whiteout-able */

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_RRWH>
#1083: FILE: fs/aufs/branch.h:88:
+	AuBrPerm_RRWH,		/* whiteout-able */

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_Last>
#1085: FILE: fs/aufs/branch.h:90:
+	AuBrPerm_Last

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1096: FILE: fs/aufs/branch.h:101:
+	return brperm == AuBrPerm_RW
+		|| brperm == AuBrPerm_ROWH

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1097: FILE: fs/aufs/branch.h:102:
+		|| brperm == AuBrPerm_ROWH
+		|| brperm == AuBrPerm_RRWH;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1103: FILE: fs/aufs/branch.h:108:
+	return ((br->br_mnt->mnt_sb->s_flags & MS_RDONLY)
+		|| !au_br_writable(br->br_perm))

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleRwsemFuncs>
#1197: FILE: fs/aufs/branch.h:202:
+AuSimpleRwsemFuncs(wbr_wh, struct au_wbr *wbr, &wbr->wbr_wh_rwsem);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141181.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 71 checks, 1151 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141181.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
