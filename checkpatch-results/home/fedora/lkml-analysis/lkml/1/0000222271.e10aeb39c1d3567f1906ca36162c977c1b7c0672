CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#108: FILE: arch/s390/mm/extmem.c:122:
+	if (name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#111: FILE: arch/s390/mm/extmem.c:125:
+	rx = (unsigned long) name;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#115: FILE: arch/s390/mm/extmem.c:129:
+	asm volatile(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: arch/s390/mm/extmem.c:208:
+dcss_diag(int *func, void *parameter,
            unsigned long *ret1, unsigned long *ret2)

CHECK:SPACING: No space is necessary after a cast
#167: FILE: arch/s390/mm/extmem.c:220:
+	ry = (unsigned long) *func;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#175: FILE: arch/s390/mm/extmem.c:225:
+		asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#182: FILE: arch/s390/mm/extmem.c:232:
+		asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#190: FILE: arch/s390/mm/extmem.c:240:
+	asm volatile(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#219: FILE: arch/s390/mm/extmem.c:296:
+	/* Only old format of output area of Diagnose x'64' is supported,
+	   copy data for the new format. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#219: FILE: arch/s390/mm/extmem.c:296:
+	   copy data for the new format. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: arch/s390/mm/extmem.c:299:
+		struct qout64_old *qout_old;
+		qout_old = kzalloc(sizeof(struct qout64_old), GFP_DMA);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*qout_old)...) over kzalloc(sizeof(struct qout64_old)...)
#222: FILE: arch/s390/mm/extmem.c:299:
+		qout_old = kzalloc(sizeof(struct qout64_old), GFP_DMA);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qout_old"
#223: FILE: arch/s390/mm/extmem.c:300:
+		if (qout_old == NULL) {

CHECK:SPACING: No space is necessary after a cast
#228: FILE: arch/s390/mm/extmem.c:305:
+		qout->segstart = (unsigned long) qout_old->segstart;

CHECK:SPACING: No space is necessary after a cast
#229: FILE: arch/s390/mm/extmem.c:306:
+		qout->segend = (unsigned long) qout_old->segend;

CHECK:SPACING: No space is necessary after a cast
#237: FILE: arch/s390/mm/extmem.c:314:
+				(unsigned long) qout_old->range[i].start;

CHECK:SPACING: No space is necessary after a cast
#239: FILE: arch/s390/mm/extmem.c:316:
+				(unsigned long) qout_old->range[i].end;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#255: FILE: arch/s390/mm/extmem.c:396:
+segment_overlaps_others (struct dcss_segment *seg)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#260: FILE: arch/s390/mm/extmem.c:401:
+	BUG_ON(!mutex_is_locked(&dcss_lock));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: arch/s390/mm/extmem.c:472:
+		diag_cc = dcss_diag(&loadnsr_scode, seg->dcss_name,
+				&start_addr, &end_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: arch/s390/mm/extmem.c:475:
+		diag_cc = dcss_diag(&loadshr_scode, seg->dcss_name,
+				&start_addr, &end_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: arch/s390/mm/extmem.c:478:
+		dcss_diag(&purgeseg_scode, seg->dcss_name,
+				&dummy, &dummy);

WARNING:SPLIT_STRING: quoted string split across lines
#328: FILE: arch/s390/mm/extmem.c:484:
 		PRINT_WARN ("segment_load: could not load segment %s - "
+				"diag returned error (%ld)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: arch/s390/mm/extmem.c:488:
+		dcss_diag(&purgeseg_scode, seg->dcss_name,
+				&dummy, &dummy);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: arch/s390/mm/extmem.c:626:
+		diag_cc = dcss_diag(&loadnsr_scode, seg->dcss_name,
+				&start_addr, &end_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: arch/s390/mm/extmem.c:629:
+		diag_cc = dcss_diag(&loadshr_scode, seg->dcss_name,
+				&start_addr, &end_addr);

WARNING:SPLIT_STRING: quoted string split across lines
#395: FILE: arch/s390/mm/extmem.c:636:
 		PRINT_WARN ("segment_modify_shared: could not reload segment %s"
+				" - diag returned error (%ld)\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#431: FILE: arch/s390/mm/extmem.c:721:
+		sprintf(cmd1+strlen(cmd1), " %lX-%lX %s",
 		            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: drivers/s390/block/dcssblk.c:85:
+static ssize_t dcssblk_seglist_show(struct device *dev,
+				struct device_attribute *attr,

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUSR | S_IRUSR' used
#489: FILE: drivers/s390/block/dcssblk.c:90:
+static DEVICE_ATTR(save, S_IWUSR | S_IRUSR, dcssblk_save_show,

The permissions used in DEVICE_ATTR are unusual.
Typically only three permissions are used - 0644 (RW), 0444 (RO)
and 0200 (WO).

See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUSR' are not preferred. Consider using octal permissions '0600'.
#489: FILE: drivers/s390/block/dcssblk.c:90:
+static DEVICE_ATTR(save, S_IWUSR | S_IRUSR, dcssblk_save_show,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUSR | S_IRUSR' used
#492: FILE: drivers/s390/block/dcssblk.c:92:
+static DEVICE_ATTR(shared, S_IWUSR | S_IRUSR, dcssblk_shared_show,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUSR' are not preferred. Consider using octal permissions '0600'.
#492: FILE: drivers/s390/block/dcssblk.c:92:
+static DEVICE_ATTR(shared, S_IWUSR | S_IRUSR, dcssblk_shared_show,

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR' used
#494: FILE: drivers/s390/block/dcssblk.c:94:
+static DEVICE_ATTR(seglist, S_IRUSR, dcssblk_seglist_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#494: FILE: drivers/s390/block/dcssblk.c:94:
+static DEVICE_ATTR(seglist, S_IRUSR, dcssblk_seglist_show, NULL);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#610: FILE: drivers/s390/block/dcssblk.c:238:
+	sort_list = kzalloc(

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#610: FILE: drivers/s390/block/dcssblk.c:238:
+	sort_list = kzalloc(
+			sizeof(struct segment_info) * dev_info->num_of_segments,
+			GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sort_list"
#613: FILE: drivers/s390/block/dcssblk.c:241:
+	if (sort_list == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: drivers/s390/block/dcssblk.c:254:
+				memcpy(&temp, &sort_list[i],
+					sizeof(struct segment_info));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: drivers/s390/block/dcssblk.c:256:
+				memcpy(&sort_list[i], &sort_list[j],
+					sizeof(struct segment_info));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: drivers/s390/block/dcssblk.c:258:
+				memcpy(&sort_list[j], &temp,
+					sizeof(struct segment_info));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#635: FILE: drivers/s390/block/dcssblk.c:263:
+		if ((sort_list[i].end + 1) != sort_list[i+1].start) {
 		                                         ^

WARNING:SPLIT_STRING: quoted string split across lines
#637: FILE: drivers/s390/block/dcssblk.c:265:
+			PRINT_ERR("Segment %s is not contiguous with "
+				"segment %s\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#639: FILE: drivers/s390/block/dcssblk.c:267:
+				sort_list[i+1].segment_name);
 				           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#644: FILE: drivers/s390/block/dcssblk.c:272:
+		if (sort_list[i].segment_type != sort_list[i+1].segment_type) {
 		                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sort_list[i].segment_type == SEG_TYPE_ER'
#645: FILE: drivers/s390/block/dcssblk.c:273:
+			if (!(sort_list[i].segment_type & SEGMENT_EXCLUSIVE) ||
+				(sort_list[i].segment_type == SEG_TYPE_ER) ||
+				!(sort_list[i+1].segment_type &
+				SEGMENT_EXCLUSIVE) ||
+				(sort_list[i+1].segment_type == SEG_TYPE_ER)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sort_list[i+1].segment_type == SEG_TYPE_ER'
#645: FILE: drivers/s390/block/dcssblk.c:273:
+			if (!(sort_list[i].segment_type & SEGMENT_EXCLUSIVE) ||
+				(sort_list[i].segment_type == SEG_TYPE_ER) ||
+				!(sort_list[i+1].segment_type &
+				SEGMENT_EXCLUSIVE) ||
+				(sort_list[i+1].segment_type == SEG_TYPE_ER)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#646: FILE: drivers/s390/block/dcssblk.c:274:
+			if (!(sort_list[i].segment_type & SEGMENT_EXCLUSIVE) ||
+				(sort_list[i].segment_type == SEG_TYPE_ER) ||

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#647: FILE: drivers/s390/block/dcssblk.c:275:
+				!(sort_list[i+1].segment_type &
 				             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#649: FILE: drivers/s390/block/dcssblk.c:277:
+				(sort_list[i+1].segment_type == SEG_TYPE_ER)) {
 				            ^

WARNING:SPLIT_STRING: quoted string split across lines
#651: FILE: drivers/s390/block/dcssblk.c:279:
+				PRINT_ERR("Segment %s has different type from "
+					"segment %s\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#653: FILE: drivers/s390/block/dcssblk.c:281:
+					sort_list[i+1].segment_name);
 					           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "seg_info"
#677: FILE: drivers/s390/block/dcssblk.c:305:
+	if (*seg_info != NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*seg_info)...) over kzalloc(sizeof(struct segment_info)...)
#681: FILE: drivers/s390/block/dcssblk.c:309:
+	*seg_info = kzalloc(sizeof(struct segment_info), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg_info"
#682: FILE: drivers/s390/block/dcssblk.c:310:
+	if (*seg_info == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: drivers/s390/block/dcssblk.c:317:
+	rc = segment_load(name, SEGMENT_SHARED,
+			&(*seg_info)->start, &(*seg_info)->end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: drivers/s390/block/dcssblk.c:366:
+			rc = segment_modify_shared(entry->segment_name,
+						SEGMENT_SHARED);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#740: FILE: drivers/s390/block/dcssblk.c:368:
+				BUG_ON(rc == -EINVAL);

WARNING:SPLIT_STRING: quoted string split across lines
#758: FILE: drivers/s390/block/dcssblk.c:384:
 			PRINT_ERR("Segment type SC (%s) cannot be loaded in "
+				"non-shared mode\n", dev_info->segment_name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#775: FILE: drivers/s390/block/dcssblk.c:392:
+				BUG_ON(rc == -EINVAL);

WARNING:SPLIT_STRING: quoted string split across lines
#792: FILE: drivers/s390/block/dcssblk.c:408:
+	PRINT_ERR("Could not reload segment(s) of the device %s, removing "
+		"segment(s) now!\n",

WARNING:SPLIT_STRING: quoted string split across lines
#827: FILE: drivers/s390/block/dcssblk.c:466:
+			PRINT_INFO("Device %s is currently busy, segment(s) "
+				   "will be saved when it becomes idle...\n",

WARNING:SPLIT_STRING: quoted string split across lines
#837: FILE: drivers/s390/block/dcssblk.c:476:
+			PRINT_INFO("Pending save for segment(s) of the device "
+					"%s deactivated\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: drivers/s390/block/dcssblk.c:492:
+dcssblk_seglist_show(struct device *dev, struct device_attribute *attr,
+		char *buf)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count < 1'
#889: FILE: drivers/s390/block/dcssblk.c:531:
+	if ((count < 1) || (buf[0] == '\0') || (buf[0] == '\n')) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#907: FILE: drivers/s390/block/dcssblk.c:548:
+		for (j = i; (buf[j] != ':') &&
+			(buf[j] != '\0') &&

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#910: FILE: drivers/s390/block/dcssblk.c:551:
+			local_buf[j-i] = toupper(buf[j]);
 			           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#912: FILE: drivers/s390/block/dcssblk.c:553:
+		local_buf[j-i] = '\0';
 		           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev_info)...) over kzalloc(sizeof(struct dcssblk_dev_info)...)
#925: FILE: drivers/s390/block/dcssblk.c:566:
+			dev_info = kzalloc(sizeof(struct dcssblk_dev_info),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#926: FILE: drivers/s390/block/dcssblk.c:567:
+			dev_info = kzalloc(sizeof(struct dcssblk_dev_info),
+					GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info"
#927: FILE: drivers/s390/block/dcssblk.c:568:
+			if (dev_info == NULL) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#946: FILE: drivers/s390/block/dcssblk.c:585:
+	if ((i > 0) && (buf[i-1] == ':')) {
 	                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i > 0'
#946: FILE: drivers/s390/block/dcssblk.c:585:
+	if ((i > 0) && (buf[i-1] == ':')) {

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#970: FILE: drivers/s390/block/dcssblk.c:589:
+	strlcpy(local_buf, buf, i + 1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info"
#1105: FILE: drivers/s390/block/dcssblk.c:699:
+	if (dev_info == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: drivers/s390/block/dcssblk.c:812:
+		PRINT_INFO("Device %s became idle and is being saved now\n",
 			    dev_info->segment_name);

WARNING:SPLIT_STRING: quoted string split across lines
#1226: FILE: drivers/s390/block/dcssblk.c:995:
 MODULE_PARM_DESC(segments, "Name of DCSS segment(s) to be loaded, "
+		 "comma-separated list, names in each set separated "

WARNING:SPLIT_STRING: quoted string split across lines
#1227: FILE: drivers/s390/block/dcssblk.c:996:
+		 "comma-separated list, names in each set separated "
+		 "by commas are separated by colons, each set contains "

WARNING:SPLIT_STRING: quoted string split across lines
#1228: FILE: drivers/s390/block/dcssblk.c:997:
+		 "by commas are separated by colons, each set contains "
+		 "names of contiguous segments and each name max. 8 chars.\n"

WARNING:SPLIT_STRING: quoted string split across lines
#1230: FILE: drivers/s390/block/dcssblk.c:999:
+		 "Adding \"(local)\" to the end of each set equals echoing 0 "
+		 "to /sys/devices/dcssblk/<device name>/shared after loading "

WARNING:SPLIT_STRING: quoted string split across lines
#1231: FILE: drivers/s390/block/dcssblk.c:1000:
+		 "to /sys/devices/dcssblk/<device name>/shared after loading "
+		 "the contiguous segments - \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1231: FILE: drivers/s390/block/dcssblk.c:1000:
+		 "the contiguous segments - \n"

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000222271.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 29 warnings, 53 checks, 1148 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000222271.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
