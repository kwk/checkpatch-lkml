WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git tracing-core-for-linus

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#477: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'positon' may be misspelled - perhaps 'position'?
#769: FILE: Documentation/trace/ring-buffer-design.txt:240:
+      +---------+  <--- next positon for write (current commit)
                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'outter' may be misspelled - perhaps 'outer'?
#1191: FILE: Documentation/trace/ring-buffer-design.txt:662:
+by the outter most writer (the writer that was preempted).
        ^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1215: FILE: Documentation/trace/ring-buffer-design.txt:686:
+page. If this fails, a nested write pushed it forward, the the current write

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1529: FILE: arch/s390/include/asm/thread_info.h:114:
+#define _TIF_SYSCALL_TRACEPOINT	(1<<TIF_SYSCALL_TRACEPOINT)
                                	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#1529: FILE: arch/s390/include/asm/thread_info.h:114:
+#define _TIF_SYSCALL_TRACEPOINT	(1<<TIF_SYSCALL_TRACEPOINT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1733: FILE: arch/x86/include/asm/thread_info.h:121:
+#define _TIF_SYSCALL_TRACEPOINT	(1 << TIF_SYSCALL_TRACEPOINT)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1991: FILE: include/linux/ftrace_event.h:119:
+	int			(*regfunc)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1992: FILE: include/linux/ftrace_event.h:120:
+	void			(*unregfunc)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_event_call *' should also have an identifier name
#1999: FILE: include/linux/ftrace_event.h:125:
+	int			(*define_fields)(struct ftrace_event_call *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2017: FILE: include/linux/ftrace_event.h:142:
+extern int filter_current_check_discard(struct ring_buffer *buffer,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2031: FILE: include/linux/ftrace_event.h:154:
+extern int trace_define_field(struct ftrace_event_call *call,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2035: FILE: include/linux/ftrace_event.h:158:
+extern int trace_define_common_fields(struct ftrace_event_call *call);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2075: FILE: include/linux/module.h:468:
+		unsigned int cpu = get_cpu();
+		local_inc(__module_ref_addr(module, cpu));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#2086: FILE: include/linux/module.h:481:
+		if (likely(module_is_live(module))) {
[...]
 		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2089: FILE: include/linux/module.h:484:
+			trace_module_get(module, _THIS_IP_,
+				local_read(__module_ref_addr(module, cpu)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2102: FILE: include/linux/perf_counter.h:764:
+extern void perf_tpcounter_event(int event_id, u64 addr, u64 count,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sname' - possible side-effects?
#2228: FILE: include/linux/syscalls.h:163:
+#define SYSCALL_TRACE_ENTER_EVENT(sname)				\
+	static struct ftrace_event_call event_enter_##sname;		\
+	struct trace_event enter_syscall_print_##sname = {		\
+		.trace                  = print_syscall_enter,		\
+	};								\
+	static int init_enter_##sname(void)				\
+	{								\
+		int num, id;						\
+		num = syscall_name_to_nr("sys"#sname);			\
+		if (num < 0)						\
+			return -ENOSYS;					\
+		id = register_ftrace_event(&enter_syscall_print_##sname);\
+		if (!id)						\
+			return -ENODEV;					\
+		event_enter_##sname.id = id;				\
+		set_syscall_enter_id(num, id);				\
+		INIT_LIST_HEAD(&event_enter_##sname.fields);		\
+		return 0;						\
+	}								\
+	TRACE_SYS_ENTER_PROFILE(sname);					\
+	static struct ftrace_event_call __used				\
+	  __attribute__((__aligned__(4)))				\
+	  __attribute__((section("_ftrace_events")))			\
+	  event_enter_##sname = {					\
+		.name                   = "sys_enter"#sname,		\
+		.system                 = "syscalls",			\
+		.event                  = &event_syscall_enter,		\
+		.raw_init		= init_enter_##sname,		\
+		.show_format		= syscall_enter_format,		\
+		.define_fields		= syscall_enter_define_fields,	\
+		.regfunc		= reg_event_syscall_enter,	\
+		.unregfunc		= unreg_event_syscall_enter,	\
+		.data			= "sys"#sname,			\
+		TRACE_SYS_ENTER_PROFILE_INIT(sname)			\
+	}

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2238: FILE: include/linux/syscalls.h:173:
+			return -ENOSYS;					\

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#2249: FILE: include/linux/syscalls.h:184:
+	  __attribute__((__aligned__(4)))				\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_events") over __attribute__((section("_ftrace_events")))
#2250: FILE: include/linux/syscalls.h:185:
+	  __attribute__((section("_ftrace_events")))			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sname' - possible side-effects?
#2264: FILE: include/linux/syscalls.h:199:
+#define SYSCALL_TRACE_EXIT_EVENT(sname)					\
+	static struct ftrace_event_call event_exit_##sname;		\
+	struct trace_event exit_syscall_print_##sname = {		\
+		.trace                  = print_syscall_exit,		\
+	};								\
+	static int init_exit_##sname(void)				\
+	{								\
+		int num, id;						\
+		num = syscall_name_to_nr("sys"#sname);			\
+		if (num < 0)						\
+			return -ENOSYS;					\
+		id = register_ftrace_event(&exit_syscall_print_##sname);\
+		if (!id)						\
+			return -ENODEV;					\
+		event_exit_##sname.id = id;				\
+		set_syscall_exit_id(num, id);				\
+		INIT_LIST_HEAD(&event_exit_##sname.fields);		\
+		return 0;						\
+	}								\
+	TRACE_SYS_EXIT_PROFILE(sname);					\
+	static struct ftrace_event_call __used				\
+	  __attribute__((__aligned__(4)))				\
+	  __attribute__((section("_ftrace_events")))			\
+	  event_exit_##sname = {					\
+		.name                   = "sys_exit"#sname,		\
+		.system                 = "syscalls",			\
+		.event                  = &event_syscall_exit,		\
+		.raw_init		= init_exit_##sname,		\
+		.show_format		= syscall_exit_format,		\
+		.define_fields		= syscall_exit_define_fields,	\
+		.regfunc		= reg_event_syscall_exit,	\
+		.unregfunc		= unreg_event_syscall_exit,	\
+		.data			= "sys"#sname,			\
+		TRACE_SYS_EXIT_PROFILE_INIT(sname)			\
+	}

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2274: FILE: include/linux/syscalls.h:209:
+			return -ENOSYS;					\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#2285: FILE: include/linux/syscalls.h:220:
+	  __attribute__((__aligned__(4)))				\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_events") over __attribute__((section("_ftrace_events")))
#2286: FILE: include/linux/syscalls.h:221:
+	  __attribute__((section("_ftrace_events")))			\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2350: FILE: include/linux/tracepoint.h:83:
 
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2359: FILE: include/linux/tracepoint.h:91:
+#define DEFINE_TRACE(name)						\
+	DEFINE_TRACE_FN(name, NULL, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2437: FILE: include/trace/events/module.h:1:
+#undef TRACE_SYSTEM

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2455: FILE: include/trace/events/module.h:19:
+TRACE_EVENT(module_load,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2460: FILE: include/trace/events/module.h:24:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2461: FILE: include/trace/events/module.h:25:
+		__field(	unsigned int,	taints		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2461: FILE: include/trace/events/module.h:25:
+		__field(	unsigned int,	taints		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2462: FILE: include/trace/events/module.h:26:
+		__string(	name,		mod->name	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2462: FILE: include/trace/events/module.h:26:
+		__string(	name,		mod->name	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2465: FILE: include/trace/events/module.h:29:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2474: FILE: include/trace/events/module.h:38:
+TRACE_EVENT(module_free,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2479: FILE: include/trace/events/module.h:43:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2480: FILE: include/trace/events/module.h:44:
+		__string(	name,		mod->name	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2480: FILE: include/trace/events/module.h:44:
+		__string(	name,		mod->name	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2483: FILE: include/trace/events/module.h:47:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2490: FILE: include/trace/events/module.h:54:
+TRACE_EVENT(module_get,
+
+	TP_PROTO(struct module *mod, unsigned long ip, int refcnt),
+
+	TP_ARGS(mod, ip, refcnt),
+
+	TP_STRUCT__entry(
+		__field(	unsigned long,	ip		)
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2491: FILE: include/trace/events/module.h:55:
+TRACE_EVENT(module_get,
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2492: FILE: include/trace/events/module.h:56:
+	TP_PROTO(struct module *mod, unsigned long ip, int refcnt),
+
+	TP_ARGS(mod, ip, refcnt),
+
+	TP_STRUCT__entry(
+		__field(	unsigned long,	ip		)
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2494: FILE: include/trace/events/module.h:58:
+	TP_ARGS(mod, ip, refcnt),
+
+	TP_STRUCT__entry(
+		__field(	unsigned long,	ip		)
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2496: FILE: include/trace/events/module.h:60:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2496: FILE: include/trace/events/module.h:60:
+	TP_STRUCT__entry(
+		__field(	unsigned long,	ip		)
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2497: FILE: include/trace/events/module.h:61:
+		__field(	unsigned long,	ip		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2497: FILE: include/trace/events/module.h:61:
+		__field(	unsigned long,	ip		)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2497: FILE: include/trace/events/module.h:61:
+		__field(	unsigned long,	ip		)
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2498: FILE: include/trace/events/module.h:62:
+		__field(	int,		refcnt		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2498: FILE: include/trace/events/module.h:62:
+		__field(	int,		refcnt		)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2498: FILE: include/trace/events/module.h:62:
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2499: FILE: include/trace/events/module.h:63:
+		__string(	name,		mod->name	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2499: FILE: include/trace/events/module.h:63:
+		__string(	name,		mod->name	)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2499: FILE: include/trace/events/module.h:63:
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2500: FILE: include/trace/events/module.h:64:
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2502: FILE: include/trace/events/module.h:66:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2502: FILE: include/trace/events/module.h:66:
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2506: FILE: include/trace/events/module.h:70:
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2512: FILE: include/trace/events/module.h:76:
+TRACE_EVENT(module_put,
+
+	TP_PROTO(struct module *mod, unsigned long ip, int refcnt),
+
+	TP_ARGS(mod, ip, refcnt),
+
+	TP_STRUCT__entry(
+		__field(	unsigned long,	ip		)
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2513: FILE: include/trace/events/module.h:77:
+TRACE_EVENT(module_put,
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2514: FILE: include/trace/events/module.h:78:
+	TP_PROTO(struct module *mod, unsigned long ip, int refcnt),
+
+	TP_ARGS(mod, ip, refcnt),
+
+	TP_STRUCT__entry(
+		__field(	unsigned long,	ip		)
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2516: FILE: include/trace/events/module.h:80:
+	TP_ARGS(mod, ip, refcnt),
+
+	TP_STRUCT__entry(
+		__field(	unsigned long,	ip		)
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2518: FILE: include/trace/events/module.h:82:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2518: FILE: include/trace/events/module.h:82:
+	TP_STRUCT__entry(
+		__field(	unsigned long,	ip		)
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2519: FILE: include/trace/events/module.h:83:
+		__field(	unsigned long,	ip		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2519: FILE: include/trace/events/module.h:83:
+		__field(	unsigned long,	ip		)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2519: FILE: include/trace/events/module.h:83:
+		__field(	unsigned long,	ip		)
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2520: FILE: include/trace/events/module.h:84:
+		__field(	int,		refcnt		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2520: FILE: include/trace/events/module.h:84:
+		__field(	int,		refcnt		)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2520: FILE: include/trace/events/module.h:84:
+		__field(	int,		refcnt		)
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2521: FILE: include/trace/events/module.h:85:
+		__string(	name,		mod->name	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2521: FILE: include/trace/events/module.h:85:
+		__string(	name,		mod->name	)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2521: FILE: include/trace/events/module.h:85:
+		__string(	name,		mod->name	)
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2522: FILE: include/trace/events/module.h:86:
+	),
+
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2524: FILE: include/trace/events/module.h:88:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2524: FILE: include/trace/events/module.h:88:
+	TP_fast_assign(
+		__entry->ip	= ip;
+		__entry->refcnt	= refcnt;
+		__assign_str(name, mod->name);
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2528: FILE: include/trace/events/module.h:92:
+	),
+
+	TP_printk("%s call_site=%pf refcnt=%d",
+		  __get_str(name), (void *)__entry->ip, __entry->refcnt)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2534: FILE: include/trace/events/module.h:98:
+TRACE_EVENT(module_request,
+
+	TP_PROTO(char *name, bool wait, unsigned long ip),
+
+	TP_ARGS(name, wait, ip),
+
+	TP_STRUCT__entry(
+		__field(	bool,		wait		)
+		__field(	unsigned long,	ip		)
+		__string(	name,		name		)
+	),
+
+	TP_fast_assign(
+		__entry->wait	= wait;
+		__entry->ip	= ip;
+		__assign_str(name, name);
+	),
+
+	TP_printk("%s wait=%d call_site=%pf",
+		  __get_str(name), (int)__entry->wait, (void *)__entry->ip)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2535: FILE: include/trace/events/module.h:99:
+TRACE_EVENT(module_request,
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2536: FILE: include/trace/events/module.h:100:
+	TP_PROTO(char *name, bool wait, unsigned long ip),
+
+	TP_ARGS(name, wait, ip),
+
+	TP_STRUCT__entry(
+		__field(	bool,		wait		)
+		__field(	unsigned long,	ip		)
+		__string(	name,		name		)
+	),
+
+	TP_fast_assign(
+		__entry->wait	= wait;
+		__entry->ip	= ip;
+		__assign_str(name, name);
+	),
+
+	TP_printk("%s wait=%d call_site=%pf",
+		  __get_str(name), (int)__entry->wait, (void *)__entry->ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2538: FILE: include/trace/events/module.h:102:
+	TP_ARGS(name, wait, ip),
+
+	TP_STRUCT__entry(
+		__field(	bool,		wait		)
+		__field(	unsigned long,	ip		)
+		__string(	name,		name		)
+	),
+
+	TP_fast_assign(
+		__entry->wait	= wait;
+		__entry->ip	= ip;
+		__assign_str(name, name);
+	),
+
+	TP_printk("%s wait=%d call_site=%pf",
+		  __get_str(name), (int)__entry->wait, (void *)__entry->ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2540: FILE: include/trace/events/module.h:104:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2540: FILE: include/trace/events/module.h:104:
+	TP_STRUCT__entry(
+		__field(	bool,		wait		)
+		__field(	unsigned long,	ip		)
+		__string(	name,		name		)
+	),
+
+	TP_fast_assign(
+		__entry->wait	= wait;
+		__entry->ip	= ip;
+		__assign_str(name, name);
+	),
+
+	TP_printk("%s wait=%d call_site=%pf",
+		  __get_str(name), (int)__entry->wait, (void *)__entry->ip)
+);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2541: FILE: include/trace/events/module.h:105:
+		__field(	bool,		wait		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2541: FILE: include/trace/events/module.h:105:
+		__field(	bool,		wait		)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2541: FILE: include/trace/events/module.h:105:
+		__field(	bool,		wait		)
+		__field(	unsigned long,	ip		)
+		__string(	name,		name		)
+	),
+
+	TP_fast_assign(
+		__entry->wait	= wait;
+		__entry->ip	= ip;
+		__assign_str(name, name);
+	),
+
+	TP_printk("%s wait=%d call_site=%pf",
+		  __get_str(name), (int)__entry->wait, (void *)__entry->ip)
+);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2542: FILE: include/trace/events/module.h:106:
+		__field(	unsigned long,	ip		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2542: FILE: include/trace/events/module.h:106:
+		__field(	unsigned long,	ip		)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2542: FILE: include/trace/events/module.h:106:
+		__field(	unsigned long,	ip		)
+		__string(	name,		name		)
+	),
+
+	TP_fast_assign(
+		__entry->wait	= wait;
+		__entry->ip	= ip;
+		__assign_str(name, name);
+	),
+
+	TP_printk("%s wait=%d call_site=%pf",
+		  __get_str(name), (int)__entry->wait, (void *)__entry->ip)
+);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2543: FILE: include/trace/events/module.h:107:
+		__string(	name,		name		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2543: FILE: include/trace/events/module.h:107:
+		__string(	name,		name		)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2543: FILE: include/trace/events/module.h:107:
+		__string(	name,		name		)
+	),
+
+	TP_fast_assign(
+		__entry->wait	= wait;
+		__entry->ip	= ip;
+		__assign_str(name, name);
+	),
+
+	TP_printk("%s wait=%d call_site=%pf",
+		  __get_str(name), (int)__entry->wait, (void *)__entry->ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2544: FILE: include/trace/events/module.h:108:
+	),
+
+	TP_fast_assign(
+		__entry->wait	= wait;
+		__entry->ip	= ip;
+		__assign_str(name, name);
+	),
+
+	TP_printk("%s wait=%d call_site=%pf",
+		  __get_str(name), (int)__entry->wait, (void *)__entry->ip)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2546: FILE: include/trace/events/module.h:110:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2546: FILE: include/trace/events/module.h:110:
+	TP_fast_assign(
+		__entry->wait	= wait;
+		__entry->ip	= ip;
+		__assign_str(name, name);
+	),
+
+	TP_printk("%s wait=%d call_site=%pf",
+		  __get_str(name), (int)__entry->wait, (void *)__entry->ip)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#2550: FILE: include/trace/events/module.h:114:
+	),
+
+	TP_printk("%s wait=%d call_site=%pf",
+		  __get_str(name), (int)__entry->wait, (void *)__entry->ip)
+);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2571: FILE: include/trace/events/sched.h:97:
+		__field(	int,	cpu			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2571: FILE: include/trace/events/sched.h:97:
+		__field(	int,	cpu			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2594: FILE: include/trace/events/sched.h:130:
+		__field(	int,	cpu			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2594: FILE: include/trace/events/sched.h:130:
+		__field(	int,	cpu			)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2619: FILE: include/trace/events/syscalls.h:1:
+#undef TRACE_SYSTEM

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2630: FILE: include/trace/events/syscalls.h:12:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2633: FILE: include/trace/events/syscalls.h:15:
+extern void syscall_regfunc(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2634: FILE: include/trace/events/syscalls.h:16:
+extern void syscall_unregfunc(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2637: FILE: include/trace/events/syscalls.h:19:
+TRACE_EVENT_FN(sys_enter,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2642: FILE: include/trace/events/syscalls.h:24:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2643: FILE: include/trace/events/syscalls.h:25:
+		__field(	long,		id		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2643: FILE: include/trace/events/syscalls.h:25:
+		__field(	long,		id		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2644: FILE: include/trace/events/syscalls.h:26:
+		__array(	unsigned long,	args,	6	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2644: FILE: include/trace/events/syscalls.h:26:
+		__array(	unsigned long,	args,	6	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2647: FILE: include/trace/events/syscalls.h:29:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2661: FILE: include/trace/events/syscalls.h:43:
+TRACE_EVENT_FN(sys_exit,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2666: FILE: include/trace/events/syscalls.h:48:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2667: FILE: include/trace/events/syscalls.h:49:
+		__field(	long,	id	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2667: FILE: include/trace/events/syscalls.h:49:
+		__field(	long,	id	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2668: FILE: include/trace/events/syscalls.h:50:
+		__field(	long,	ret	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2668: FILE: include/trace/events/syscalls.h:50:
+		__field(	long,	ret	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2671: FILE: include/trace/events/syscalls.h:53:
+	TP_fast_assign(

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2698: FILE: include/trace/ftrace.h:25:
+#define __field_ext(type, item, filter_type)	type	item;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2698: FILE: include/trace/ftrace.h:25:
+#define __field_ext(type, item, filter_type)	type	item;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2705: FILE: include/trace/ftrace.h:31:
+#define __dynamic_array(type, item, len) u32 __data_loc_##item;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2755: FILE: include/trace/ftrace.h:87:
+#define __dynamic_array(type, item, len)	u32 item;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2804: FILE: include/trace/ftrace.h:288:
+#define __field_ext(type, item, filter_type)				\
 	ret = trace_define_field(event_call, #type, #item,		\
 				 offsetof(typeof(field), item),		\
+				 sizeof(field.item),			\
+				 is_signed_type(type), filter_type);	\
 	if (ret)							\
 		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#2804: FILE: include/trace/ftrace.h:288:
+#define __field_ext(type, item, filter_type)				\
 	ret = trace_define_field(event_call, #type, #item,		\
 				 offsetof(typeof(field), item),		\
+				 sizeof(field.item),			\
+				 is_signed_type(type), filter_type);	\
 	if (ret)							\
 		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2804: FILE: include/trace/ftrace.h:288:
+#define __field_ext(type, item, filter_type)				\
 	ret = trace_define_field(event_call, #type, #item,		\
 				 offsetof(typeof(field), item),		\
+				 sizeof(field.item),			\
+				 is_signed_type(type), filter_type);	\
 	if (ret)							\
 		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2804: FILE: include/trace/ftrace.h:288:
+#define __field_ext(type, item, filter_type)				\
 	ret = trace_define_field(event_call, #type, #item,		\
 				 offsetof(typeof(field), item),		\
+				 sizeof(field.item),			\
+				 is_signed_type(type), filter_type);	\
 	if (ret)							\
 		return ret;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2969: FILE: include/trace/syscall.h:10:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3006: FILE: include/trace/syscall.h:37:
+extern int syscall_name_to_nr(char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3011: FILE: include/trace/syscall.h:42:
+extern int reg_event_syscall_enter(void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3012: FILE: include/trace/syscall.h:43:
+extern void unreg_event_syscall_enter(void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3013: FILE: include/trace/syscall.h:44:
+extern int reg_event_syscall_exit(void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3014: FILE: include/trace/syscall.h:45:
+extern void unreg_event_syscall_exit(void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3015: FILE: include/trace/syscall.h:46:
+extern int syscall_enter_format(struct ftrace_event_call *call,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3017: FILE: include/trace/syscall.h:48:
+extern int syscall_exit_format(struct ftrace_event_call *call,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3018: FILE: include/trace/syscall.h:49:
+extern int syscall_exit_format(struct ftrace_event_call *call,
+				struct trace_seq *s);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3019: FILE: include/trace/syscall.h:50:
+extern int syscall_enter_define_fields(struct ftrace_event_call *call);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3020: FILE: include/trace/syscall.h:51:
+extern int syscall_exit_define_fields(struct ftrace_event_call *call);

CHECK:BRACES: Unbalanced braces around else statement
#3148: FILE: kernel/kprobes.c:266:
+			} else

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3427: FILE: kernel/trace/ftrace.c:1410:
+	seq_printf(m, "%pf:%pf", (void *)rec->ip, (void *)rec->ops->func);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3446: FILE: kernel/trace/ftrace.c:1520:
+	seq_printf(m, "%pf\n", (void *)rec->ip);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#3552: FILE: kernel/trace/kmemtrace.c:248:
+	ret = trace_seq_printf(s, "type_id %d call_site %pF ptr %lu "
+	    "bytes_req %lu bytes_alloc %lu gfp_flags %lu node %d\n",
+	    entry->type_id, (void *)entry->call_site, (unsigned long)entry->ptr,
+	    (unsigned long)entry->bytes_req, (unsigned long)entry->bytes_alloc,
+	    (unsigned long)entry->gfp_flags, entry->node);

WARNING:SPLIT_STRING: quoted string split across lines
#3553: FILE: kernel/trace/kmemtrace.c:249:
+	ret = trace_seq_printf(s, "type_id %d call_site %pF ptr %lu "
+	    "bytes_req %lu bytes_alloc %lu gfp_flags %lu node %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#3572: FILE: kernel/trace/kmemtrace.c:268:
+	ret = trace_seq_printf(s, "type_id %d call_site %pF ptr %lu\n",
+			       entry->type_id, (void *)entry->call_site,
+			       (unsigned long)entry->ptr);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3639: FILE: kernel/trace/kmemtrace.c:391:
+	ret = trace_seq_printf(s, "%4d   %pf\n", entry->node,
+						 (void *)entry->call_site);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3640: FILE: kernel/trace/kmemtrace.c:392:
+	ret = trace_seq_printf(s, "%4d   %pf\n", entry->node,
+						 (void *)entry->call_site);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#3671: FILE: kernel/trace/kmemtrace.c:442:
+	ret = trace_seq_printf(s, "       %pf\n", (void *)entry->call_site);

CHECK:BIT_MACRO: Prefer using the BIT macro
#3817: FILE: kernel/trace/ring_buffer.c:349:
+#define RB_WRITE_INTCNT		(1 << 20)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#3861: FILE: kernel/trace/ring_buffer.c:470:
+#define RB_WARN_ON(b, cond)						\
+	({								\
+		int _____ret = unlikely(cond);				\
+		if (_____ret) {						\
+			if (__same_type(*(b), struct ring_buffer_per_cpu)) { \
+				struct ring_buffer_per_cpu *__b =	\
+					(void *)b;			\
+				atomic_inc(&__b->buffer->record_disabled); \
+			} else						\
+				atomic_inc(&b->record_disabled);	\
+			WARN_ON(1);					\
+		}							\
+		_____ret;						\
 	})

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3954: FILE: kernel/trace/ring_buffer.c:587:
+
+

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#3978: FILE: kernel/trace/ring_buffer.c:611:
+static int inline

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4132: FILE: kernel/trace/ring_buffer.c:765:
+	page = head = cpu_buffer->head_page;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#4360: FILE: kernel/trace/ring_buffer.c:1023:
 	cpu_buffer->head_page
+		= list_entry(cpu_buffer->pages, struct buffer_page, list);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4529: FILE: kernel/trace/ring_buffer.c:1479:
 	       rb_page_write(cpu_buffer->commit_page)) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_buffer->commit_page !=
 				      cpu_buffer->tail_page'
#4840: FILE: kernel/trace/ring_buffer.c:1857:
+			if (unlikely((cpu_buffer->commit_page !=
+				      cpu_buffer->tail_page) &&
+				     (cpu_buffer->commit_page ==
+				      cpu_buffer->reader_page))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_buffer->commit_page ==
 				      cpu_buffer->reader_page'
#4840: FILE: kernel/trace/ring_buffer.c:1857:
+			if (unlikely((cpu_buffer->commit_page !=
+				      cpu_buffer->tail_page) &&
+				     (cpu_buffer->commit_page ==
+				      cpu_buffer->reader_page))) {

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#5057: FILE: kernel/trace/ring_buffer.c:2397:
+ * This function only works if it is called before the the item has been

WARNING:TYPO_SPELLING: 'accidently' may be misspelled - perhaps 'accidentally'?
#5222: FILE: kernel/trace/ring_buffer.c:2885:
+	 *  of our way so we don't accidently swap it.
 	                           ^^^^^^^^^^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#5346: FILE: kernel/trace/ring_buffer.c:3365:
 	cpu_buffer->head_page
+		= list_entry(cpu_buffer->pages, struct buffer_page, list);

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#5579: FILE: kernel/trace/trace.c:402:
+unsigned long __read_mostly	tracing_max_latency;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#5580: FILE: kernel/trace/trace.c:403:
+unsigned long __read_mostly	tracing_thresh;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5658: FILE: kernel/trace/trace.c:493:
+		trace_array_printk(&max_tr, _THIS_IP_,
+			"Failed to swap buffers due to commit in progress\n");

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#5720: FILE: kernel/trace/trace.c:670:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#5734: FILE: kernel/trace/trace.c:684:
+	synchronize_sched();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6353: FILE: kernel/trace/trace.c:1562:
 
+

CHECK:BRACES: Unbalanced braces around else statement
#6365: FILE: kernel/trace/trace.c:1574:
+		} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6523: FILE: kernel/trace/trace.c:3265:
+static ssize_t tracing_clock_read(struct file *filp, char __user *ubuf,
                                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6540: FILE: kernel/trace/trace.c:3282:
+static ssize_t tracing_clock_write(struct file *filp, const char __user *ubuf,
                                                 ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6829: FILE: kernel/trace/trace.h:811:
+extern int filter_assign_type(const char *type);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6948: FILE: kernel/trace/trace_events.c:72:
+#define __common_field(type, item)					\
+	ret = trace_define_field(call, #type, "common_" #item,		\
+				 offsetof(typeof(ent), item),		\
+				 sizeof(ent.item),			\
+				 is_signed_type(type), FILTER_OTHER);	\
+	if (ret)							\
+		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#6948: FILE: kernel/trace/trace_events.c:72:
+#define __common_field(type, item)					\
+	ret = trace_define_field(call, #type, "common_" #item,		\
+				 offsetof(typeof(ent), item),		\
+				 sizeof(ent.item),			\
+				 is_signed_type(type), FILTER_OTHER);	\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#6948: FILE: kernel/trace/trace_events.c:72:
+#define __common_field(type, item)					\
+	ret = trace_define_field(call, #type, "common_" #item,		\
+				 offsetof(typeof(ent), item),		\
+				 sizeof(ent.item),			\
+				 is_signed_type(type), FILTER_OTHER);	\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6948: FILE: kernel/trace/trace_events.c:72:
+#define __common_field(type, item)					\
+	ret = trace_define_field(call, #type, "common_" #item,		\
+				 offsetof(typeof(ent), item),		\
+				 sizeof(ent.item),			\
+				 is_signed_type(type), FILTER_OTHER);	\
+	if (ret)							\
+		return ret;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#7094: FILE: kernel/trace/trace_events.c:1101:
+				if (ret != -ENOSYS)

WARNING:SPLIT_STRING: quoted string split across lines
#7096: FILE: kernel/trace/trace_events.c:1103:
+					pr_warning("Could not initialize trace "
+					"point events/%s\n", call->name);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#7119: FILE: kernel/trace/trace_events.c:1202:
+	strlcpy(bootup_event_buf, str, COMMAND_LINE_SIZE);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#7125: FILE: kernel/trace/trace_events.c:1208:
+__setup("trace_event=", setup_trace_event);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#7146: FILE: kernel/trace/trace_events.c:1261:
+				if (ret != -ENOSYS)

WARNING:SPLIT_STRING: quoted string split across lines
#7148: FILE: kernel/trace/trace_events.c:1263:
+					pr_warning("Could not initialize trace "
+					"point events/%s\n", call->name);

CHECK:BRACES: Unbalanced braces around else statement
#7460: FILE: kernel/trace/trace_events_filter.c:628:
+		else {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#7726: FILE: kernel/trace/trace_export.c:122:
+int ftrace_define_fields_##call(struct ftrace_event_call *event_call);	\

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#7802: FILE: kernel/trace/trace_functions.c:293:
+	seq_printf(m, "%pf:", (void *)ip);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7824: FILE: kernel/trace/trace_functions_graph.c:170:
+static int __trace_graph_entry(struct trace_array *tr,
+				struct ftrace_graph_ent *trace,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7888: FILE: kernel/trace/trace_functions_graph.c:234:
+static void __trace_graph_return(struct trace_array *tr,
+				struct ftrace_graph_ret *trace,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#8210: FILE: kernel/trace/trace_sched_switch.c:23:
 
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#8389: FILE: kernel/trace/trace_stack.c:228:
+	return seq_printf(m, "%pF\n", (void *)addr);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#8590: FILE: kernel/trace/trace_syscalls.c:103:
+#define SYSCALL_FIELD(type, name)					\
+	sizeof(type) != sizeof(trace.name) ?				\
+		__bad_type_size() :					\
+		#type, #name, offsetof(typeof(trace), name), sizeof(trace.name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#8590: FILE: kernel/trace/trace_syscalls.c:103:
+#define SYSCALL_FIELD(type, name)					\
+	sizeof(type) != sizeof(trace.name) ?				\
+		__bad_type_size() :					\
+		#type, #name, offsetof(typeof(trace), name), sizeof(trace.name)

ERROR:CODE_INDENT: code indent should use tabs where possible
#8628: FILE: kernel/trace/trace_syscalls.c:130:
+^I^I^I^I        entry->args[i]);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8628: FILE: kernel/trace/trace_syscalls.c:130:
+		ret = trace_seq_printf(s, "\tfield:%s %s;", entry->types[i],
+				        entry->args[i]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#8642: FILE: kernel/trace/trace_syscalls.c:143:
+^I^I^I^I        sizeof(unsigned long),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8642: FILE: kernel/trace/trace_syscalls.c:143:
+		ret = trace_seq_printf(s, "%s: 0x%%0%zulx%s", entry->args[i],
+				        sizeof(unsigned long),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8797: FILE: kernel/trace/trace_syscalls.c:275:
+	event = trace_current_buffer_lock_reserve(&buffer, sys_data->exit_id,
 				sizeof(*entry), 0, 0);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#8822: FILE: kernel/trace/trace_syscalls.c:297:
+		return -ENOSYS;

WARNING:SPLIT_STRING: quoted string split across lines
#8828: FILE: kernel/trace/trace_syscalls.c:303:
+		pr_info("event trace: Could not activate"
+				"syscall entry trace point");

WARNING:MISSING_SPACE: break quoted strings at a space character
#8828: FILE: kernel/trace/trace_syscalls.c:303:
+		pr_info("event trace: Could not activate"
+				"syscall entry trace point");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#8867: FILE: kernel/trace/trace_syscalls.c:338:
+		return -ENOSYS;

WARNING:SPLIT_STRING: quoted string split across lines
#8873: FILE: kernel/trace/trace_syscalls.c:344:
+		pr_info("event trace: Could not activate"
+				"syscall exit trace point");

WARNING:MISSING_SPACE: break quoted strings at a space character
#8873: FILE: kernel/trace/trace_syscalls.c:344:
+		pr_info("event trace: Could not activate"
+				"syscall exit trace point");

CHECK:SPACING: No space is necessary after a cast
#8959: FILE: kernel/trace/trace_syscalls.c:411:
+		rec = (struct syscall_trace_enter *) raw_data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8964: FILE: kernel/trace/trace_syscalls.c:416:
+		syscall_get_arguments(current, regs, 0, sys_data->nb_args,
+				       (unsigned long *)&rec->args);

ERROR:SPACING: space required before the open parenthesis '('
#8966: FILE: kernel/trace/trace_syscalls.c:418:
+	} while(0);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#8976: FILE: kernel/trace/trace_syscalls.c:428:
+		return -ENOSYS;

WARNING:SPLIT_STRING: quoted string split across lines
#8983: FILE: kernel/trace/trace_syscalls.c:435:
+		pr_info("event trace: Could not activate"
+				"syscall entry trace point");

WARNING:MISSING_SPACE: break quoted strings at a space character
#8983: FILE: kernel/trace/trace_syscalls.c:435:
+		pr_info("event trace: Could not activate"
+				"syscall entry trace point");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#9042: FILE: kernel/trace/trace_syscalls.c:489:
+		return -ENOSYS;

WARNING:SPLIT_STRING: quoted string split across lines
#9049: FILE: kernel/trace/trace_syscalls.c:496:
+		pr_info("event trace: Could not activate"
+				"syscall entry trace point");

WARNING:MISSING_SPACE: break quoted strings at a space character
#9049: FILE: kernel/trace/trace_syscalls.c:496:
+		pr_info("event trace: Could not activate"
+				"syscall entry trace point");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#9078: FILE: kernel/trace/trace_syscalls.c:523:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073551.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 46 errors, 88 warnings, 76 checks, 8436 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073551.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
