CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#54: FILE: ia64.c:74:
+	if ((vt.mem_flags & MEMORY_PAGETABLE_4L)
+	    || (vt.mem_flags & MEMORY_PAGETABLE_3L))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: makedumpfile.c:2057:
+		if (strncmp(buf, STR_CONFIG_X86_PAE,
+		    strlen(STR_CONFIG_X86_PAE)) == 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: makedumpfile.c:2061:
+		if (strncmp(buf, STR_CONFIG_PGTABLE_3,
+		    strlen(STR_CONFIG_PGTABLE_3)) == 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: makedumpfile.c:2065:
+		if (strncmp(buf, STR_CONFIG_PGTABLE_4,
+		    strlen(STR_CONFIG_PGTABLE_4)) == 0)

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Phdr>
#99: FILE: makedumpfile.c:2230:
+	Elf64_Phdr phdr64;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Phdr>
#100: FILE: makedumpfile.c:2231:
+	Elf32_Phdr phdr32;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: makedumpfile.c:2238:
+	elf_format = check_elf_format(info->fd_memory, info->name_memory,
+	    &phnum, &num_load);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#109: FILE: makedumpfile.c:2240:
+	if (elf_format == ELF64)
[...]
+	else if (elf_format == ELF32)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#113: FILE: makedumpfile.c:2244:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: makedumpfile.c:2250:
+			if (!get_elf64_phdr(info->fd_memory, info->name_memory,
+			    i, &phdr64)) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#129: FILE: makedumpfile.c:2260:
+			break;
+		} else {         /* ELF32 */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: makedumpfile.c:2262:
+			if (!get_elf32_phdr(info->fd_memory, info->name_memory,
+			    i, &phdr32)) {

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Nhdr>
#157: FILE: makedumpfile.c:2288:
+	Elf64_Nhdr note64;

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Nhdr>
#158: FILE: makedumpfile.c:2289:
+	Elf32_Nhdr note32;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: makedumpfile.c:2305:
+			ERRMSG("Can't seek the dump memory(%s). %s\n",
+			    info->name_memory, strerror(errno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: makedumpfile.c:2312:
+				ERRMSG("Can't read the dump memory(%s). %s\n",
+				    info->name_memory, strerror(errno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: makedumpfile.c:2319:
+				ERRMSG("Can't read the dump memory(%s). %s\n",
+				    info->name_memory, strerror(errno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: makedumpfile.c:2325:
+			ERRMSG("Can't read the dump memory(%s). %s\n",
+			    info->name_memory, strerror(errno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: makedumpfile.c:2329:
+		if (strncmp(VMCOREINFO_NOTE_NAME, buf,
+		    VMCOREINFO_NOTE_NAME_BYTES)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#232: FILE: makedumpfile.c:2363:
+	if ((fd = mkstemp(info->name_vmcoreinfo)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: makedumpfile.c:2365:
+		ERRMSG("Can't open the vmcoreinfo file(%s). %s\n",
+		    info->name_vmcoreinfo, strerror(errno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: makedumpfile.c:2371:
+		ERRMSG("Can't seek the dump memory(%s). %s\n",
+		    info->name_memory, strerror(errno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: makedumpfile.c:2377:
+		ERRMSG("Can't read the dump memory(%s). %s\n",
+		    info->name_memory, strerror(errno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: makedumpfile.c:2382:
+		ERRMSG("Can't write the vmcoreinfo file(%s). %s\n",
+		    info->name_vmcoreinfo, strerror(errno));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: makedumpfile.c:2387:
+		ERRMSG("Can't close the vmcoreinfo file(%s). %s\n",
+		    info->name_vmcoreinfo, strerror(errno));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#328: FILE: makedumpfile.c:3121:
+		if ((info->name_vmcoreinfo

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#329: FILE: makedumpfile.c:3122:
+		if ((info->name_vmcoreinfo
+		    = malloc(sizeof(FILENAME_VMCOREINFO))) == NULL) {

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: makedumpfile.c:3124:
+			ERRMSG("Can't allocate memory for the filename. %s\n",
+			    strerror(errno));

CHECK:BIT_MACRO: Prefer using the BIT macro
#357: FILE: makedumpfile.h:73:
+#define MEMORY_X86_PAE		(1 << 2)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#384: FILE: makedumpfile.h:382:
+#define STR_SYMBOL(X)		"SYMBOL("X")="

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#385: FILE: makedumpfile.h:383:
+#define STR_SIZE(X)		"SIZE("X")="

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#386: FILE: makedumpfile.h:384:
+#define STR_OFFSET(X)		"OFFSET("X")="

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#387: FILE: makedumpfile.h:385:
+#define STR_LENGTH(X)		"LENGTH("X")="

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#388: FILE: makedumpfile.h:386:
+#define STR_SRCFILE(X)		"SRCFILE("X")="

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#420: FILE: x86.c:25:
+	if ((vt.mem_flags & MEMORY_X86_PAE)
+	    || ((SYMBOL(pkmap_count) != NOT_FOUND_SYMBOL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#421: FILE: x86.c:26:
+	    || ((SYMBOL(pkmap_count) != NOT_FOUND_SYMBOL)
+	      && (SYMBOL(pkmap_count_next) != NOT_FOUND_SYMBOL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#422: FILE: x86.c:27:
+	      && (SYMBOL(pkmap_count_next) != NOT_FOUND_SYMBOL)
+	      && ((SYMBOL(pkmap_count_next)-SYMBOL(pkmap_count))/sizeof(int))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#422: FILE: x86.c:27:
+	      && ((SYMBOL(pkmap_count_next)-SYMBOL(pkmap_count))/sizeof(int))
 	                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#422: FILE: x86.c:27:
+	      && ((SYMBOL(pkmap_count_next)-SYMBOL(pkmap_count))/sizeof(int))
 	                                                        ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000388228.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 2 warnings, 35 checks, 359 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000388228.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
