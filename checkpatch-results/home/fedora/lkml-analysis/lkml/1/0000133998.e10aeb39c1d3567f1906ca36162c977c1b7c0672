CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#78: FILE: arch/microblaze/include/asm/pgtable.h:61:
+#include <asm/processor.h>		/* For TASK_SIZE */

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: arch/microblaze/include/asm/pgtable.h:67:
+extern unsigned long va_to_phys(unsigned long address);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: arch/microblaze/include/asm/pgtable.h:68:
+extern pte_t *va_to_pte(unsigned long address);

CHECK:BIT_MACRO: Prefer using the BIT macro
#136: FILE: arch/microblaze/include/asm/pgtable.h:119:
+#define PMD_SIZE	(1UL << PMD_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#137: FILE: arch/microblaze/include/asm/pgtable.h:120:
+#define PMD_MASK	(~(PMD_SIZE-1))
                 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#141: FILE: arch/microblaze/include/asm/pgtable.h:124:
+#define PGDIR_SIZE	(1UL << PGDIR_SHIFT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#142: FILE: arch/microblaze/include/asm/pgtable.h:125:
+#define PGDIR_MASK	(~(PGDIR_SIZE-1))
                   	             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#148: FILE: arch/microblaze/include/asm/pgtable.h:131:
+#define PTRS_PER_PTE	(1 << PTE_SHIFT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#156: FILE: arch/microblaze/include/asm/pgtable.h:139:
+#define KERNEL_PGD_PTRS (PTRS_PER_PGD-USER_PGD_PTRS)
                                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#159: FILE: arch/microblaze/include/asm/pgtable.h:142:
+	printk(KERN_ERR "%s:%d: bad pte "PTE_FMT".\n", \

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#159: FILE: arch/microblaze/include/asm/pgtable.h:142:
+	printk(KERN_ERR "%s:%d: bad pte "PTE_FMT".\n", \

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#162: FILE: arch/microblaze/include/asm/pgtable.h:145:
+	printk(KERN_ERR "%s:%d: bad pmd %08lx.\n", \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#165: FILE: arch/microblaze/include/asm/pgtable.h:148:
+	printk(KERN_ERR "%s:%d: bad pgd %08lx.\n", \

WARNING:REPEATED_WORD: Possible repeated word: 'use'
#194: FILE: arch/microblaze/include/asm/pgtable.h:177:
+ * software PTE bits.  We actually use use bits 21, 24, 25, and

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#297: FILE: arch/microblaze/include/asm/pgtable.h:280:
+#define pte_clear(mm, addr, ptep) \
+	do { set_pte_at((mm), (addr), (ptep), __pte(0)); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#303: FILE: arch/microblaze/include/asm/pgtable.h:286:
+#define	pmd_clear(pmdp)		do { pmd_val(*(pmdp)) = 0; } while (0)

CHECK:SPACING: No space is necessary after a cast
#325: FILE: arch/microblaze/include/asm/pgtable.h:308:
+	((unsigned long) __va(pgd_val(pgd) & PAGE_MASK))

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#342: FILE: arch/microblaze/include/asm/pgtable.h:325:
+static inline pte_t pte_rdprotect(pte_t pte) \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#344: FILE: arch/microblaze/include/asm/pgtable.h:327:
+static inline pte_t pte_wrprotect(pte_t pte) \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#346: FILE: arch/microblaze/include/asm/pgtable.h:329:
+static inline pte_t pte_exprotect(pte_t pte) \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#348: FILE: arch/microblaze/include/asm/pgtable.h:331:
+static inline pte_t pte_mkclean(pte_t pte) \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#350: FILE: arch/microblaze/include/asm/pgtable.h:333:
+static inline pte_t pte_mkold(pte_t pte) \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#353: FILE: arch/microblaze/include/asm/pgtable.h:336:
+static inline pte_t pte_mkread(pte_t pte) \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#355: FILE: arch/microblaze/include/asm/pgtable.h:338:
+static inline pte_t pte_mkexec(pte_t pte) \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#357: FILE: arch/microblaze/include/asm/pgtable.h:340:
+static inline pte_t pte_mkwrite(pte_t pte) \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#359: FILE: arch/microblaze/include/asm/pgtable.h:342:
+static inline pte_t pte_mkdirty(pte_t pte) \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#361: FILE: arch/microblaze/include/asm/pgtable.h:344:
+static inline pte_t pte_mkyoung(pte_t pte) \

WARNING:LINE_SPACING: Missing a blank line after declarations
#372: FILE: arch/microblaze/include/asm/pgtable.h:355:
+	pte_t pte;
+	pte_val(pte) = physpage | pgprot_val(pgprot);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#376: FILE: arch/microblaze/include/asm/pgtable.h:359:
+#define mk_pte(page, pgprot) \
+({									   \
+	pte_t pte;							   \
+	pte_val(pte) = (((page - mem_map) << PAGE_SHIFT) + memory_start) |  \
+			pgprot_val(pgprot);				   \
+	pte;								   \
+})

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: arch/microblaze/include/asm/pgtable.h:382:
+static inline unsigned long pte_update(pte_t *p, unsigned long clr,
+				unsigned long set)

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#403: FILE: arch/microblaze/include/asm/pgtable.h:386:
+	__asm__ __volatile__("\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#413: FILE: arch/microblaze/include/asm/pgtable.h:396:
+	: "r" ((unsigned long)(p+1) - 4), "r" (clr), "r" (set), "m" (*p)
 	                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: arch/microblaze/include/asm/pgtable.h:406:
+static inline void set_pte(struct mm_struct *mm, unsigned long addr,
+		pte_t *ptep, pte_t pte)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: arch/microblaze/include/asm/pgtable.h:412:
+static inline void set_pte_at(struct mm_struct *mm, unsigned long addr,
+		pte_t *ptep, pte_t pte)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: arch/microblaze/include/asm/pgtable.h:418:
+static inline int ptep_test_and_clear_young(struct mm_struct *mm,
+		unsigned long addr, pte_t *ptep)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: arch/microblaze/include/asm/pgtable.h:424:
+static inline int ptep_test_and_clear_dirty(struct mm_struct *mm,
+		unsigned long addr, pte_t *ptep)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#443: FILE: arch/microblaze/include/asm/pgtable.h:426:
+	return (pte_update(ptep, \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: arch/microblaze/include/asm/pgtable.h:431:
+static inline pte_t ptep_get_and_clear(struct mm_struct *mm,
+		unsigned long addr, pte_t *ptep)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#454: FILE: arch/microblaze/include/asm/pgtable.h:437:
+/*static inline void ptep_set_wrprotect(struct mm_struct *mm,
+		unsigned long addr, pte_t *ptep)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#457: FILE: arch/microblaze/include/asm/pgtable.h:440:
+}*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: arch/microblaze/include/asm/pgtable.h:443:
+static inline void ptep_mkdirty(struct mm_struct *mm,
+		unsigned long addr, pte_t *ptep)

CHECK:SPACING: No space is necessary after a cast
#470: FILE: arch/microblaze/include/asm/pgtable.h:453:
+#define pmd_page_kernel(pmd)	((unsigned long) (pmd_val(pmd) & PAGE_MASK))

CHECK:SPACING: No space is necessary after a cast
#485: FILE: arch/microblaze/include/asm/pgtable.h:468:
+	return (pmd_t *) dir;

CHECK:SPACING: No space is necessary after a cast
#492: FILE: arch/microblaze/include/asm/pgtable.h:475:
+	((pte_t *) pmd_page_kernel(*(dir)) + pte_index(addr))

CHECK:SPACING: No space is necessary after a cast
#494: FILE: arch/microblaze/include/asm/pgtable.h:477:
+	((pte_t *) kmap_atomic(pmd_page(*(dir)), KM_PTE0) + pte_index(addr))

CHECK:SPACING: No space is necessary after a cast
#496: FILE: arch/microblaze/include/asm/pgtable.h:479:
+	((pte_t *) kmap_atomic(pmd_page(*(dir)), KM_PTE1) + pte_index(addr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#512: FILE: arch/microblaze/include/asm/pgtable.h:495:
+extern int flush_hash_page(unsigned context, unsigned long va, pte_t *ptep);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#512: FILE: arch/microblaze/include/asm/pgtable.h:495:
+extern int flush_hash_page(unsigned context, unsigned long va, pte_t *ptep);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#515: FILE: arch/microblaze/include/asm/pgtable.h:498:
+extern void add_hash_page(unsigned context, unsigned long va, pte_t *ptep);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#515: FILE: arch/microblaze/include/asm/pgtable.h:498:
+extern void add_hash_page(unsigned context, unsigned long va, pte_t *ptep);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#530: FILE: arch/microblaze/include/asm/pgtable.h:513:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#533: FILE: arch/microblaze/include/asm/pgtable.h:516:
+extern void cache_clear(__u32 addr, int length);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#534: FILE: arch/microblaze/include/asm/pgtable.h:517:
+extern void cache_push(__u32 addr, int length);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#535: FILE: arch/microblaze/include/asm/pgtable.h:518:
+extern int mm_end_of_chunk(unsigned long addr, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#536: FILE: arch/microblaze/include/asm/pgtable.h:519:
+extern unsigned long iopa(unsigned long addr);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#538: FILE: arch/microblaze/include/asm/pgtable.h:521:
+/* extern unsigned long mm_ptov(unsigned long addr) \
+	__attribute__ ((const)); TBD */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#538: FILE: arch/microblaze/include/asm/pgtable.h:521:
+	__attribute__ ((const)); TBD */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __attribute_const__ over __attribute__((const))
#538: FILE: arch/microblaze/include/asm/pgtable.h:521:
+	__attribute__ ((const)); TBD */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#552: FILE: arch/microblaze/include/asm/pgtable.h:535:
+extern unsigned long kernel_map(unsigned long paddr, unsigned long size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#558: FILE: arch/microblaze/include/asm/pgtable.h:541:
+extern void kernel_set_cachemode(unsigned long address, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: arch/microblaze/include/asm/pgtable.h:542:
+extern void kernel_set_cachemode(unsigned long address, unsigned long size,
+				unsigned int cmode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: arch/microblaze/include/asm/pgtable.h:576:
+void consistent_sync_page(struct page *page, unsigned long offset,
+	size_t size, int direction);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#622: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#627: FILE: arch/microblaze/mm/pgtable.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#661: FILE: arch/microblaze/mm/pgtable.c:35:
+#include <asm/pgtable.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: arch/microblaze/mm/pgtable.c:56:
+static void __iomem *__ioremap(phys_addr_t addr, unsigned long size,
+		unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#704: FILE: arch/microblaze/mm/pgtable.c:78:
+	if (mem_init_done &&
+		p >= memory_start && p < virt_to_phys(high_memory) &&

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#707: FILE: arch/microblaze/mm/pgtable.c:81:
+		printk(KERN_WARNING "__ioremap(): phys addr "PTE_FMT

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__ioremap', this function's name, in a string
#707: FILE: arch/microblaze/mm/pgtable.c:81:
+		printk(KERN_WARNING "__ioremap(): phys addr "PTE_FMT

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#707: FILE: arch/microblaze/mm/pgtable.c:81:
+		printk(KERN_WARNING "__ioremap(): phys addr "PTE_FMT

WARNING:LINE_SPACING: Missing a blank line after declarations
#729: FILE: arch/microblaze/mm/pgtable.c:103:
+		struct vm_struct *area;
+		area = get_vm_area(size, VM_IOREMAP);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!area"
#730: FILE: arch/microblaze/mm/pgtable.c:104:
+		if (area == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#751: FILE: arch/microblaze/mm/pgtable.c:125:
+	return (void __iomem *) (v + ((unsigned long)addr & ~PAGE_MASK));

CHECK:SPACING: No space is necessary after a cast
#762: FILE: arch/microblaze/mm/pgtable.c:136:
+	if (addr > high_memory && (unsigned long) addr < ioremap_bot)

CHECK:SPACING: No space is necessary after a cast
#763: FILE: arch/microblaze/mm/pgtable.c:137:
+		vfree((void *) (PAGE_MASK & (unsigned long) addr));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#767: FILE: arch/microblaze/mm/pgtable.c:141:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pg"
#780: FILE: arch/microblaze/mm/pgtable.c:154:
+	if (pg != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: arch/microblaze/mm/pgtable.c:157:
+		set_pte_at(&init_mm, va, pg, pfn_pte(pa >> PAGE_SHIFT,
+				__pgprot(flags)));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#788: FILE: arch/microblaze/mm/pgtable.c:162:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#796: FILE: arch/microblaze/mm/pgtable.c:170:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#802: FILE: arch/microblaze/mm/pgtable.c:176:
+		printk(KERN_INFO "Warning, memory limited to %ld Mb, use "

WARNING:SPLIT_STRING: quoted string split across lines
#803: FILE: arch/microblaze/mm/pgtable.c:177:
+		printk(KERN_INFO "Warning, memory limited to %ld Mb, use "
+				"CONFIG_HIGHMEM to reach %ld Mb\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#813: FILE: arch/microblaze/mm/pgtable.c:187:
+	volatile unsigned long a;

WARNING:LINE_SPACING: Missing a blank line after declarations
#814: FILE: arch/microblaze/mm/pgtable.c:188:
+	volatile unsigned long a;
+	a = a + tmem;

CHECK:SPACING: No space is necessary after a cast
#830: FILE: arch/microblaze/mm/pgtable.c:204:
+		if ((char *) v < _stext || (char *) v >= _etext)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#834: FILE: arch/microblaze/mm/pgtable.c:208:
+			/* On the MicroBlaze, no user access
+			   forces R/W kernel access */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#834: FILE: arch/microblaze/mm/pgtable.c:208:
+			   forces R/W kernel access */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#843: FILE: arch/microblaze/mm/pgtable.c:217:
+#define is_power_of_2(x)	((x) != 0 && (((x) & ((x) - 1)) == 0))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#856: FILE: arch/microblaze/mm/pgtable.c:230:
+		ioremap_bot = ioremap_base = virt;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000133998.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 38 warnings, 51 checks, 849 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000133998.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
