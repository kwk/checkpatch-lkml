WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#52: FILE: drivers/serial/Kconfig:1323:
+config SERIAL_MSM
+	bool "MSM on-chip serial port support"
+	depends on ARM && ARCH_MSM
+	select SERIAL_CORE
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#57: FILE: drivers/serial/Kconfig:1328:
+config SERIAL_MSM_CONSOLE
+	bool "MSM serial console support"
+	depends on SERIAL_MSM=y
+	select SERIAL_CORE_CONSOLE
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: drivers/serial/msm_serial.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#84: FILE: drivers/serial/msm_serial.c:2:
+ * drivers/serial/msm_serial.c - driver for msm7k serial device and console

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: No space is necessary after a cast
#126: FILE: drivers/serial/msm_serial.c:44:
+#define UART_TO_MSM(uart_port)	((struct msm_port *) uart_port)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'ignorning' may be misspelled - perhaps 'ignoring'?
#203: FILE: drivers/serial/msm_serial.c:121:
+		/* Mask conditions we're ignorning. */
 		                         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#206: FILE: drivers/serial/msm_serial.c:124:
+		if (sr & UART_SR_RX_BREAK) {
[...]
+		} else if (sr & UART_SR_PAR_FRAME_ERR) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#595: FILE: drivers/serial/msm_serial.c:513:
+static int msm_verify_port(struct uart_port *port, struct serial_struct *ser)
                                                                          ^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#617: FILE: drivers/serial/msm_serial.c:535:
+		printk(KERN_ERR "msm_serial: Unknown PM state %d\n", state);

WARNING:CONST_STRUCT: struct uart_ops should normally be const
#621: FILE: drivers/serial/msm_serial.c:539:
+static struct uart_ops msm_uart_pops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#693: FILE: drivers/serial/msm_serial.c:611:
+	BUG_ON(co->index < 0 || co->index >= UART_NR);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#735: FILE: drivers/serial/msm_serial.c:653:
+	printk(KERN_INFO "msm_serial: console setup on port #%d\n", port->line);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#775: FILE: drivers/serial/msm_serial.c:693:
+	printk(KERN_INFO "msm_serial: detected port #%d\n", pdev->id);

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#782: FILE: drivers/serial/msm_serial.c:700:
+	if (unlikely(IS_ERR(msm_port->clk)))

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#800: FILE: drivers/serial/msm_serial.c:718:
+static int __devexit msm_serial_remove(struct platform_device *pdev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#830: FILE: drivers/serial/msm_serial.c:748:
+	printk(KERN_INFO "msm_serial: driver initialized\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#856: FILE: drivers/serial/msm_serial.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#857: FILE: drivers/serial/msm_serial.h:2:
+ * drivers/serial/msm_serial.h

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#879: FILE: drivers/serial/msm_serial.h:24:
+#define UART_MR1_RX_RDY_CTL    ^I^I(1 << 7)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#879: FILE: drivers/serial/msm_serial.h:24:
+#define UART_MR1_RX_RDY_CTL    		(1 << 7)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#880: FILE: drivers/serial/msm_serial.h:25:
+#define UART_MR1_CTS_CTL       ^I^I(1 << 6)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#880: FILE: drivers/serial/msm_serial.h:25:
+#define UART_MR1_CTS_CTL       		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#883: FILE: drivers/serial/msm_serial.h:28:
+#define UART_MR2_ERROR_MODE		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#915: FILE: drivers/serial/msm_serial.h:60:
+#define UART_CR_CMD_RESET_RX		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#926: FILE: drivers/serial/msm_serial.h:71:
+#define UART_CR_TX_DISABLE		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#927: FILE: drivers/serial/msm_serial.h:72:
+#define UART_CR_TX_ENABLE		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#928: FILE: drivers/serial/msm_serial.h:73:
+#define UART_CR_RX_DISABLE		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#929: FILE: drivers/serial/msm_serial.h:74:
+#define UART_CR_RX_ENABLE		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#932: FILE: drivers/serial/msm_serial.h:77:
+#define UART_IMR_TXLEV		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#933: FILE: drivers/serial/msm_serial.h:78:
+#define UART_IMR_RXSTALE	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#934: FILE: drivers/serial/msm_serial.h:79:
+#define UART_IMR_RXLEV		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#935: FILE: drivers/serial/msm_serial.h:80:
+#define UART_IMR_DELTA_CTS	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#936: FILE: drivers/serial/msm_serial.h:81:
+#define UART_IMR_CURRENT_CTS	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#959: FILE: drivers/serial/msm_serial.h:104:
+#define UART_SR_HUNT_CHAR	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#960: FILE: drivers/serial/msm_serial.h:105:
+#define UART_SR_RX_BREAK	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#961: FILE: drivers/serial/msm_serial.h:106:
+#define UART_SR_PAR_FRAME_ERR	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#962: FILE: drivers/serial/msm_serial.h:107:
+#define UART_SR_OVERRUN		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#963: FILE: drivers/serial/msm_serial.h:108:
+#define UART_SR_TX_EMPTY	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#964: FILE: drivers/serial/msm_serial.h:109:
+#define UART_SR_TX_READY	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#965: FILE: drivers/serial/msm_serial.h:110:
+#define UART_SR_RX_FULL		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#966: FILE: drivers/serial/msm_serial.h:111:
+#define UART_SR_RX_READY	(1 << 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110295.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 22 checks, 916 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110295.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
