CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: drivers/gpio/gpiolib.c:325:
+static int gpio_setup_irq(struct gpio_desc *desc, struct device *dev,
+		unsigned long gpio_flags)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pdesc)...) over kmalloc(sizeof(struct poll_desc)...)
#227: FILE: drivers/gpio/gpiolib.c:359:
+		pdesc = kmalloc(sizeof(struct poll_desc), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: drivers/gpio/gpiolib.c:384:
+		pdesc->value_sd = sysfs_get_dirent(dev->kobj.sd,
+							 "value");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: drivers/gpio/gpiolib.c:422:
+static ssize_t gpio_edge_show(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:BRACES: braces {} should be used on all arms of this statement
#297: FILE: drivers/gpio/gpiolib.c:429:
+	if (!test_bit(FLAG_EXPORT, &desc->flags))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#299: FILE: drivers/gpio/gpiolib.c:431:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: drivers/gpio/gpiolib.c:449:
+static ssize_t gpio_edge_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#331: FILE: drivers/gpio/gpiolib.c:463:
+	if (!test_bit(FLAG_EXPORT, &desc->flags))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#333: FILE: drivers/gpio/gpiolib.c:465:
+	else {

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'gpio_edge_show' to 'edge_show' 'gpio_edge_store' to 'edge_store'
#342: FILE: drivers/gpio/gpiolib.c:474:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: drivers/gpio/gpiolib.c:673:
+			if (!status && gpio_to_irq(gpio) >= 0 &&
+					(direction_may_change ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: drivers/gpio/gpiolib.c:676:
+				status = device_create_file(dev,
+						&dev_attr_edge);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000096527.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 11 checks, 278 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000096527.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
