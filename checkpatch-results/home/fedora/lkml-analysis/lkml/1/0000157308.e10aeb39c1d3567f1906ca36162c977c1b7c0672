WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#58: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#63: FILE: fs/ceph/bookkeeper.c:1:
+#include <linux/spinlock.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#96: FILE: fs/ceph/bookkeeper.c:34:
+	struct alloc_data *p = kmalloc(size+sizeof(struct alloc_data), flags);
 	                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#113: FILE: fs/ceph/bookkeeper.c:51:
+	return ((void *)p)+sizeof(struct alloc_data);
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: fs/ceph/bookkeeper.c:75:
+		derr(0, "Memory allocated at %s(%d): p=%p (%zu bytes)\n", p->fname,
+			p->line,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#138: FILE: fs/ceph/bookkeeper.c:76:
+			((void *)p)+sizeof(struct alloc_data),
 			           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: fs/ceph/bookkeeper.c:80:
+	BUG_ON(overrun);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:RETURN_VOID: void function return statements are not generally useful
#152: FILE: fs/ceph/bookkeeper.c:90:
+	return;
+}

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#156: FILE: fs/ceph/bookkeeper.c:94:
+	dout(10, "bookkeeper: start\n");
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#165: FILE: fs/ceph/bookkeeper.c:103:
+	dout(1, "bookkeeper: total bytes alloc: %zu\n", _total_alloc);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#166: FILE: fs/ceph/bookkeeper.c:104:
+	dout(1, "bookkeeper: total bytes free: %zu\n", _total_free);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#171: FILE: fs/ceph/bookkeeper.c:109:
+			dout(1, "%s(%d): p=%p (%zu bytes)\n", entry->fname,
 			^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#173: FILE: fs/ceph/bookkeeper.c:111:
+			     ((void *)entry)+sizeof(struct alloc_data),
 			                    ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#177: FILE: fs/ceph/bookkeeper.c:115:
+		dout(1, "No leaks found! Yay!\n");
 		^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#186: FILE: fs/ceph/bookkeeper.h:1:
+#ifndef _FS_CEPH_BOOKKEEPER_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: fs/ceph/bookkeeper.h:5:
+extern void ceph_bookkeeper_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: fs/ceph/bookkeeper.h:6:
+extern void ceph_bookkeeper_finalize(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: fs/ceph/bookkeeper.h:7:
+extern void *ceph_kmalloc(char *fname, int line, size_t size, gfp_t flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: fs/ceph/bookkeeper.h:8:
+extern void ceph_kfree(void *ptr);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#197: FILE: fs/ceph/bookkeeper.h:12:
+#define kzalloc(size, flags)	ceph_kmalloc(__FILE__, __LINE__, size, \
+					     flags | __GFP_ZERO)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#211: FILE: fs/ceph/ceph_debug.h:1:
+#ifndef _FS_CEPH_DEBUG_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#274: FILE: fs/ceph/ceph_debug.h:64:
+#define LOG_LINE FMT_PREFIX fmt, LOG_ARGS, args

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#276: FILE: fs/ceph/ceph_debug.h:66:
+#define dout_flag(x, mask, fmt, args...) do {				\
+		if (((ceph_debug_mask | DOUT_UNMASKABLE) & mask) &&	\
+		    ((DOUT_VAR >= 0 && x <= DOUT_VAR) ||		\
+		     (DOUT_VAR < 0 && x <= ceph_debug))) {		\
+			if (ceph_debug_console)				\
+				printk(KERN_ERR FMT_PREFIX fmt, LOG_ARGS, args);	\
+			else						\
+				printk(KERN_DEBUG FMT_PREFIX fmt, LOG_ARGS, args);	\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#276: FILE: fs/ceph/ceph_debug.h:66:
+#define dout_flag(x, mask, fmt, args...) do {				\
+		if (((ceph_debug_mask | DOUT_UNMASKABLE) & mask) &&	\
+		    ((DOUT_VAR >= 0 && x <= DOUT_VAR) ||		\
+		     (DOUT_VAR < 0 && x <= ceph_debug))) {		\
+			if (ceph_debug_console)				\
+				printk(KERN_ERR FMT_PREFIX fmt, LOG_ARGS, args);	\
+			else						\
+				printk(KERN_DEBUG FMT_PREFIX fmt, LOG_ARGS, args);	\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mask' may be better as '(mask)' to avoid precedence issues
#276: FILE: fs/ceph/ceph_debug.h:66:
+#define dout_flag(x, mask, fmt, args...) do {				\
+		if (((ceph_debug_mask | DOUT_UNMASKABLE) & mask) &&	\
+		    ((DOUT_VAR >= 0 && x <= DOUT_VAR) ||		\
+		     (DOUT_VAR < 0 && x <= ceph_debug))) {		\
+			if (ceph_debug_console)				\
+				printk(KERN_ERR FMT_PREFIX fmt, LOG_ARGS, args);	\
+			else						\
+				printk(KERN_DEBUG FMT_PREFIX fmt, LOG_ARGS, args);	\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#276: FILE: fs/ceph/ceph_debug.h:66:
+#define dout_flag(x, mask, fmt, args...) do {				\
+		if (((ceph_debug_mask | DOUT_UNMASKABLE) & mask) &&	\
+		    ((DOUT_VAR >= 0 && x <= DOUT_VAR) ||		\
+		     (DOUT_VAR < 0 && x <= ceph_debug))) {		\
+			if (ceph_debug_console)				\
+				printk(KERN_ERR FMT_PREFIX fmt, LOG_ARGS, args);	\
+			else						\
+				printk(KERN_DEBUG FMT_PREFIX fmt, LOG_ARGS, args);	\
+		}							\
+	} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#281: FILE: fs/ceph/ceph_debug.h:71:
+				printk(KERN_ERR FMT_PREFIX fmt, LOG_ARGS, args);	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#283: FILE: fs/ceph/ceph_debug.h:73:
+				printk(KERN_DEBUG FMT_PREFIX fmt, LOG_ARGS, args);	\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#289: FILE: fs/ceph/ceph_debug.h:79:
+#define _derr(x, fmt, args...) do {					\
+		printk(KERN_ERR FMT_PREFIX fmt FMT_SUFFIX, LOG_ARGS, args);	\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#290: FILE: fs/ceph/ceph_debug.h:80:
+		printk(KERN_ERR FMT_PREFIX fmt FMT_SUFFIX, LOG_ARGS, args);	\

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#293: FILE: fs/ceph/ceph_debug.h:83:
+#define dout(x, args...) _dout(x, args, TRAIL_PARAM)
         ^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#297: FILE: fs/ceph/ceph_debug.h:87:
+#if 0

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dentry' - possible side-effects?
#298: FILE: fs/ceph/ceph_debug.h:88:
+# define dput(dentry)				       \
+	do {					       \
+		dout(20, "dput %p %d -> %d\n", dentry, \
+		     atomic_read(&dentry->d_count),    \
+		     atomic_read(&dentry->d_count)-1); \
+		dput(dentry);			       \
+	} while (0)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#300: FILE: fs/ceph/ceph_debug.h:90:
+		dout(20, "dput %p %d -> %d\n", dentry, \
 		^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#302: FILE: fs/ceph/ceph_debug.h:92:
+		     atomic_read(&dentry->d_count)-1); \
 		                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dentry' - possible side-effects?
#305: FILE: fs/ceph/ceph_debug.h:95:
+# define d_drop(dentry)				       \
+	do {					       \
+		dout(20, "d_drop %p\n", dentry);       \
+		d_drop(dentry);			       \
+	} while (0)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#307: FILE: fs/ceph/ceph_debug.h:97:
+		dout(20, "d_drop %p\n", dentry);       \
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#312: FILE: fs/ceph/ceph_debug.h:102:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157308.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 19 warnings, 18 checks, 239 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157308.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
