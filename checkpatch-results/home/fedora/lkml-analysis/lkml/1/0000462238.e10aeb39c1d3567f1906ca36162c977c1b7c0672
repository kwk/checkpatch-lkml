ERROR:SPACING: space prohibited after that open parenthesis '('
#193: FILE: arch/i386/kernel/i387.c:302:
+	if ( __copy_to_user( buf, &tsk->thread.i387->fsave,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: arch/i386/kernel/i387.c:303:
+	if ( __copy_to_user( buf, &tsk->thread.i387->fsave,
 			     sizeof(struct i387_fsave_struct) ) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#202: FILE: arch/i386/kernel/i387.c:315:
+	if ( convert_fxsr_to_user( buf, &tsk->thread.i387->fxsave ) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#202: FILE: arch/i386/kernel/i387.c:315:
+	if ( convert_fxsr_to_user( buf, &tsk->thread.i387->fxsave ) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#206: FILE: arch/i386/kernel/i387.c:318:
+	err |= __put_user( tsk->thread.i387->fxsave.swd, &buf->status );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#206: FILE: arch/i386/kernel/i387.c:318:
+	err |= __put_user( tsk->thread.i387->fxsave.swd, &buf->status );

ERROR:SPACING: space prohibited after that open parenthesis '('
#212: FILE: arch/i386/kernel/i387.c:323:
+	if ( __copy_to_user( &buf->_fxsr_env[0], &tsk->thread.i387->fxsave,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: arch/i386/kernel/i387.c:324:
+	if ( __copy_to_user( &buf->_fxsr_env[0], &tsk->thread.i387->fxsave,
 			     sizeof(struct i387_fxsave_struct) ) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#221: FILE: arch/i386/kernel/i387.c:346:
+		return save_i387_soft( &current->thread.i387->soft, buf );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#221: FILE: arch/i386/kernel/i387.c:346:
+		return save_i387_soft( &current->thread.i387->soft, buf );

ERROR:SPACING: space prohibited after that open parenthesis '('
#230: FILE: arch/i386/kernel/i387.c:354:
+	return __copy_from_user( &tsk->thread.i387->fsave, buf,

ERROR:SPACING: space prohibited after that open parenthesis '('
#239: FILE: arch/i386/kernel/i387.c:363:
+	err = __copy_from_user( &tsk->thread.i387->fxsave, &buf->_fxsr_env[0],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: arch/i386/kernel/i387.c:364:
+	err = __copy_from_user( &tsk->thread.i387->fxsave, &buf->_fxsr_env[0],
 				sizeof(struct i387_fxsave_struct) );

ERROR:SPACING: space prohibited after that open parenthesis '('
#245: FILE: arch/i386/kernel/i387.c:367:
+	return err ? 1 : convert_fxsr_from_user( &tsk->thread.i387->fxsave, buf );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#245: FILE: arch/i386/kernel/i387.c:367:
+	return err ? 1 : convert_fxsr_from_user( &tsk->thread.i387->fxsave, buf );

ERROR:SPACING: space prohibited after that open parenthesis '('
#254: FILE: arch/i386/kernel/i387.c:381:
+		err = restore_i387_soft( &current->thread.i387->soft, buf );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#254: FILE: arch/i386/kernel/i387.c:381:
+		err = restore_i387_soft( &current->thread.i387->soft, buf );

ERROR:SPACING: space prohibited after that open parenthesis '('
#263: FILE: arch/i386/kernel/i387.c:394:
+	return __copy_to_user( buf, &tsk->thread.i387->fsave,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#272: FILE: arch/i386/kernel/i387.c:402:
+				     &tsk->thread.i387->fxsave );

ERROR:SPACING: space prohibited after that open parenthesis '('
#281: FILE: arch/i386/kernel/i387.c:414:
+		return save_i387_soft( &tsk->thread.i387->soft,

ERROR:SPACING: space prohibited after that open parenthesis '('
#290: FILE: arch/i386/kernel/i387.c:422:
+	return __copy_from_user( &tsk->thread.i387->fsave, buf,

ERROR:SPACING: space prohibited after that open parenthesis '('
#298: FILE: arch/i386/kernel/i387.c:429:
+	return convert_fxsr_from_user( &tsk->thread.i387->fxsave,

ERROR:SPACING: space prohibited after that open parenthesis '('
#307: FILE: arch/i386/kernel/i387.c:442:
+		return restore_i387_soft( &tsk->thread.i387->soft,

ERROR:SPACING: space prohibited after that open parenthesis '('
#316: FILE: arch/i386/kernel/i387.c:450:
+		if (__copy_to_user( buf, &tsk->thread.i387->fxsave,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: arch/i386/kernel/i387.c:451:
+		if (__copy_to_user( buf, &tsk->thread.i387->fxsave,
 				    sizeof(struct user_fxsr_struct) ))

ERROR:SPACING: space prohibited after that open parenthesis '('
#325: FILE: arch/i386/kernel/i387.c:464:
+		if (__copy_from_user( &tsk->thread.i387->fxsave, buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: arch/i386/kernel/i387.c:465:
+		if (__copy_from_user( &tsk->thread.i387->fxsave, buf,
 				  sizeof(struct user_fxsr_struct) ))

ERROR:SPACING: space prohibited after that open parenthesis '('
#339: FILE: arch/i386/kernel/i387.c:482:
+	memcpy( fpu, &tsk->thread.i387->fsave,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: arch/i386/kernel/i387.c:483:
+	memcpy( fpu, &tsk->thread.i387->fsave,
 		sizeof(struct user_i387_struct) );

ERROR:SPACING: space prohibited after that open parenthesis '('
#348: FILE: arch/i386/kernel/i387.c:493:
+	memcpy( fpu, &tsk->thread.i387->fxsave, 7 * sizeof(long) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#348: FILE: arch/i386/kernel/i387.c:493:
+	memcpy( fpu, &tsk->thread.i387->fxsave, 7 * sizeof(long) );

CHECK:LINE_SPACING: Please don't use multiple blank lines
#383: FILE: arch/i386/kernel/process.c:931:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#388: FILE: arch/i386/kernel/process.c:936:
+struct task_struct * alloc_task_struct(void)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#391: FILE: arch/i386/kernel/process.c:939:
+	struct task_struct *tsk;
+	tsk = kmem_cache_alloc(task_struct_cachep, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#408: FILE: arch/i386/kernel/process.c:956:
+	union i387_union *ptr;
+	ptr = dst->thread.i387;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#417: FILE: arch/i386/kernel/process.c:965:
+	tsk->thread.i387=NULL;
 	                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#421: FILE: arch/i386/kernel/process.c:969:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: arch/i386/kernel/process.c:972:
+ ^I/* create a slab on which task_structs can be allocated */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#424: FILE: arch/i386/kernel/process.c:972:
+ ^I/* create a slab on which task_structs can be allocated */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: arch/i386/kernel/process.c:972:
+ ^I/* create a slab on which task_structs can be allocated */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: arch/i386/kernel/process.c:973:
+        task_struct_cachep =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: arch/i386/kernel/process.c:973:
+        task_struct_cachep =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: arch/i386/kernel/process.c:974:
+        ^Ikmem_cache_create("task_struct", sizeof(struct task_struct),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#426: FILE: arch/i386/kernel/process.c:974:
+        ^Ikmem_cache_create("task_struct", sizeof(struct task_struct),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: arch/i386/kernel/process.c:974:
+        ^Ikmem_cache_create("task_struct", sizeof(struct task_struct),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: arch/i386/kernel/process.c:975:
+        ^I^IARCH_MIN_TASKALIGN, SLAB_PANIC, NULL, NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#427: FILE: arch/i386/kernel/process.c:975:
+        ^I^IARCH_MIN_TASKALIGN, SLAB_PANIC, NULL, NULL);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: arch/i386/kernel/process.c:975:
+        	kmem_cache_create("task_struct", sizeof(struct task_struct),
+        		ARCH_MIN_TASKALIGN, SLAB_PANIC, NULL, NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: arch/i386/kernel/process.c:975:
+        ^I^IARCH_MIN_TASKALIGN, SLAB_PANIC, NULL, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: arch/i386/kernel/process.c:976:
+        task_i387_cachep =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: arch/i386/kernel/process.c:976:
+        task_i387_cachep =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: arch/i386/kernel/process.c:977:
+        ^Ikmem_cache_create("task_i387", sizeof(union i387_union), 32,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#429: FILE: arch/i386/kernel/process.c:977:
+        ^Ikmem_cache_create("task_i387", sizeof(union i387_union), 32,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: arch/i386/kernel/process.c:977:
+        ^Ikmem_cache_create("task_i387", sizeof(union i387_union), 32,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#430: FILE: arch/i386/kernel/process.c:978:
+        ^I    SLAB_PANIC | SLAB_MUST_HWCACHE_ALIGN, NULL, NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#430: FILE: arch/i386/kernel/process.c:978:
+        ^I    SLAB_PANIC | SLAB_MUST_HWCACHE_ALIGN, NULL, NULL);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: arch/i386/kernel/process.c:978:
+        	kmem_cache_create("task_i387", sizeof(union i387_union), 32,
+        	    SLAB_PANIC | SLAB_MUST_HWCACHE_ALIGN, NULL, NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: arch/i386/kernel/process.c:978:
+        ^I    SLAB_PANIC | SLAB_MUST_HWCACHE_ALIGN, NULL, NULL);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#433: FILE: arch/i386/kernel/process.c:981:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#498: FILE: include/asm-i386/processor.h:423:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#519: FILE: include/asm-i386/thread_info.h:106:
+extern struct task_struct * alloc_task_struct(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#519: FILE: include/asm-i386/thread_info.h:106:
+extern struct task_struct * alloc_task_struct(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#520: FILE: include/asm-i386/thread_info.h:107:
+extern void free_task_struct(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#521: FILE: include/asm-i386/thread_info.h:108:
+extern void memcpy_task_struct(struct task_struct *dst, struct task_struct *src);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#522: FILE: include/asm-i386/thread_info.h:109:
+extern void task_struct_slab_init(void);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#535: FILE: kernel/fork.c:87:
+# define memcpy_task_struct(dst, src) *dst = *src;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dst' may be better as '(dst)' to avoid precedence issues
#535: FILE: kernel/fork.c:87:
+# define memcpy_task_struct(dst, src) *dst = *src;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'src' may be better as '(src)' to avoid precedence issues
#535: FILE: kernel/fork.c:87:
+# define memcpy_task_struct(dst, src) *dst = *src;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#535: FILE: kernel/fork.c:87:
+# define memcpy_task_struct(dst, src) *dst = *src;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000462238.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 36 errors, 15 warnings, 18 checks, 432 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000462238.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
