WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#63: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: include/linux/unaligned.h:1:
+#ifndef _LINUX_UNALIGNED_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#123: FILE: include/linux/unaligned.h:56:
+struct __una_u16 { u16 x; } __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#124: FILE: include/linux/unaligned.h:57:
+struct __una_u32 { u32 x; } __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#125: FILE: include/linux/unaligned.h:58:
+struct __una_u64 { u64 x; } __attribute__((packed));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#375: FILE: include/linux/unaligned.h:308:
+extern void __bad_unaligned_access_size(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#377: FILE: include/linux/unaligned.h:310:
+#define get_unaligned(ptr) ((__force typeof(*(ptr)))({				\
+	__builtin_choose_expr(sizeof(*(ptr)) == 1, *(ptr),			\
+	__builtin_choose_expr(sizeof(*(ptr)) == 2, __load_cpu16_noalign(ptr),	\
+	__builtin_choose_expr(sizeof(*(ptr)) == 4, __load_cpu32_noalign(ptr),	\
+	__builtin_choose_expr(sizeof(*(ptr)) == 8, __load_cpu64_noalign(ptr),	\
+	__bad_unaligned_access_size()))));					\
+	}))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#385: FILE: include/linux/unaligned.h:318:
+#define put_unaligned(val, ptr) ({					\
+	void *__gu_p = (ptr);						\
+	switch (sizeof(*(ptr))) {					\
+	case 1:								\
+		*(u8 *)__gu_p = (__force u8)(val);			\
+		break;							\
+	case 2:								\
+		__store_cpu16_noalign(__gu_p, (__force u16)(val));	\
+		break;							\
+	case 4:								\
+		__store_cpu32_noalign(__gu_p, (__force u32)(val));	\
+		break;							\
+	case 8:								\
+		__store_cpu64_noalign(__gu_p, (__force u64)(val));	\
+		break;							\
+	default:							\
+		__bad_unaligned_access_size();				\
+		break;							\
+	}								\
+	(void)0; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#385: FILE: include/linux/unaligned.h:318:
+#define put_unaligned(val, ptr) ({					\
+	void *__gu_p = (ptr);						\
+	switch (sizeof(*(ptr))) {					\
+	case 1:								\
+		*(u8 *)__gu_p = (__force u8)(val);			\
+		break;							\
+	case 2:								\
+		__store_cpu16_noalign(__gu_p, (__force u16)(val));	\
+		break;							\
+	case 4:								\
+		__store_cpu32_noalign(__gu_p, (__force u32)(val));	\
+		break;							\
+	case 8:								\
+		__store_cpu64_noalign(__gu_p, (__force u64)(val));	\
+		break;							\
+	default:							\
+		__bad_unaligned_access_size();				\
+		break;							\
+	}								\
+	(void)0; })

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000180550.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 4 checks, 339 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000180550.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
