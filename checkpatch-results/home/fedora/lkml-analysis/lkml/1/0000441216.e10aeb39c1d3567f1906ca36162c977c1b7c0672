WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Add support for the CB.GetCapabilities operation with which the fileserver can

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#55: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:CAMELCASE: Avoid CamelCase: <CBGetCapabilities>
#87: FILE: fs/afs/afs_cm.h:26:
+	CBGetCapabilities	= 65538, /* get client capabilities */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <afs_SRXCBGetCapabilites>
#112: FILE: fs/afs/cmservice.c:62:
+static const struct afs_call_type afs_SRXCBGetCapabilites = {

CHECK:SPACING: No space is necessary after a cast
#180: FILE: fs/afs/cmservice.c:389:
+	reply.ia.uuid[3] = htonl((s8) afs_uuid.clock_seq_hi_and_reserved);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#181: FILE: fs/afs/cmservice.c:390:
+	reply.ia.uuid[4] = htonl((s8) afs_uuid.clock_seq_low);

CHECK:SPACING: No space is necessary after a cast
#183: FILE: fs/afs/cmservice.c:392:
+		reply.ia.uuid[loop + 5] = htonl((s8) afs_uuid.node[loop]);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#232: FILE: fs/afs/internal.h:353:
+	unsigned	index;		/* interface index */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#235: FILE: fs/afs/internal.h:356:
+	unsigned	mtu;		/* MTU of interface */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#277: FILE: fs/afs/internal.h:508:
+extern void afs_send_simple_reply(struct afs_call *, const void *, size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_call *' should also have an identifier name
#277: FILE: fs/afs/internal.h:508:
+extern void afs_send_simple_reply(struct afs_call *, const void *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#277: FILE: fs/afs/internal.h:508:
+extern void afs_send_simple_reply(struct afs_call *, const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#277: FILE: fs/afs/internal.h:508:
+extern void afs_send_simple_reply(struct afs_call *, const void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: fs/afs/internal.h:542:
+extern int afs_get_ipv4_interfaces(struct afs_interface *, size_t, bool);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_interface *' should also have an identifier name
#287: FILE: fs/afs/internal.h:542:
+extern int afs_get_ipv4_interfaces(struct afs_interface *, size_t, bool);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#287: FILE: fs/afs/internal.h:542:
+extern int afs_get_ipv4_interfaces(struct afs_interface *, size_t, bool);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#287: FILE: fs/afs/internal.h:542:
+extern int afs_get_ipv4_interfaces(struct afs_interface *, size_t, bool);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#288: FILE: fs/afs/internal.h:543:
+extern int afs_get_MAC_address(u8 [6]);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#288: FILE: fs/afs/internal.h:543:
+extern int afs_get_MAC_address(u8 [6]);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#315: FILE: fs/afs/main.c:56:
+	 * a UUID from it */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#321: FILE: fs/afs/main.c:62:
+	uuidtime = (u64) ts.tv_sec * 1000 * 1000 * 10;

CHECK:SPACING: No space is necessary after a cast
#378: FILE: fs/afs/rxrpc.c:726:
+	iov[0].iov_base		= (void *) buf;

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#412: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#417: FILE: fs/afs/use-rtnetlink.c:1:
+/* RTNETLINK client

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#445: FILE: fs/afs/use-rtnetlink.c:29:
+	unsigned		mac_index;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_rtm_desc *' should also have an identifier name
#447: FILE: fs/afs/use-rtnetlink.c:31:
+	int (*parse)(struct afs_rtm_desc *, struct nlmsghdr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nlmsghdr *' should also have an identifier name
#447: FILE: fs/afs/use-rtnetlink.c:31:
+	int (*parse)(struct afs_rtm_desc *, struct nlmsghdr *);

CHECK:SPACING: No space is necessary after a cast
#462: FILE: fs/afs/use-rtnetlink.c:46:
+	ifa = (struct ifaddrmsg *) NLMSG_DATA(nlhdr);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#496: FILE: fs/afs/use-rtnetlink.c:80:
+	_debug("%s: "NIPQUAD_FMT"/"NIPQUAD_FMT,

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:SPACING: No space is necessary after a cast
#516: FILE: fs/afs/use-rtnetlink.c:100:
+	ifi = (struct ifinfomsg *) NLMSG_DATA(nlhdr);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#550: FILE: fs/afs/use-rtnetlink.c:134:
+	_debug("%s: "NIPQUAD_FMT"/"NIPQUAD_FMT" mtu %u",

CHECK:SPACING: No space is necessary after a cast
#571: FILE: fs/afs/use-rtnetlink.c:155:
+	ifi = (struct ifinfomsg *) NLMSG_DATA(nlhdr);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(NLMSG_ALIGNTO) over __attribute__((aligned(NLMSG_ALIGNTO)))
#705: FILE: fs/afs/use-rtnetlink.c:289:
+		struct nlmsghdr nl_msg __attribute__((aligned(NLMSG_ALIGNTO)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(NLMSG_ALIGNTO) over __attribute__((aligned(NLMSG_ALIGNTO)))
#706: FILE: fs/afs/use-rtnetlink.c:290:
+		struct ifaddrmsg addr_msg __attribute__((aligned(NLMSG_ALIGNTO)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(NLMSG_ALIGNTO) over __attribute__((aligned(NLMSG_ALIGNTO)))
#738: FILE: fs/afs/use-rtnetlink.c:322:
+		struct nlmsghdr nl_msg __attribute__((aligned(NLMSG_ALIGNTO)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(NLMSG_ALIGNTO) over __attribute__((aligned(NLMSG_ALIGNTO)))
#739: FILE: fs/afs/use-rtnetlink.c:323:
+		struct ifinfomsg link_msg __attribute__((aligned(NLMSG_ALIGNTO)));

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#832: FILE: fs/afs/use-rtnetlink.c:416:
+		_debug("[%d] "NIPQUAD_FMT"/"NIPQUAD_FMT" mtu %u",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000441216.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 21 warnings, 16 checks, 780 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000441216.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
