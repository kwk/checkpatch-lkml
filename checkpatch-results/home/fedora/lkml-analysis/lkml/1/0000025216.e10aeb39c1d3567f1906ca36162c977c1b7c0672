WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: include/linux/uprobes.h:1:
+#ifndef _LINUX_UPROBES_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#94: FILE: include/linux/uprobes.h:5:
+ * include/linux/uprobes.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#107: FILE: include/linux/uprobes.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#108: FILE: include/linux/uprobes.h:19:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct uprobe*' should also have an identifier name
#129: FILE: include/linux/uprobes.h:40:
+	void (*handler)(struct uprobe*, struct pt_regs*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs*' should also have an identifier name
#129: FILE: include/linux/uprobes.h:40:
+	void (*handler)(struct uprobe*, struct pt_regs*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/uprobes.h:54:
+extern int register_uprobe(struct uprobe *u);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/uprobes.h:55:
+extern void unregister_uprobe(struct uprobe *u);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#148: FILE: include/linux/uprobes.h:59:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#150: FILE: include/linux/uprobes.h:61:
+}
+static inline void unregister_uprobe(struct uprobe *u)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#160: FILE: include/linux/uprobes.h:71:
+#include <asm/atomic.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: include/linux/uprobes.h:89:
+^IUPTASK_SLEEPING,^I/* See utask_fake_quiesce(). ^I^I*/$

CHECK:BIT_MACRO: Prefer using the BIT macro
#191: FILE: include/linux/uprobes.h:102:
+#define UPROBE_TABLE_SIZE (1 << UPROBE_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#275: FILE: include/linux/uprobes.h:186:
+	 * 0 if the the insert/remove operation has succeeded, or -errno

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#399: FILE: kernel/uprobes_core.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#401: FILE: kernel/uprobes_core.c:3:
+ *  kernel/uprobes_core.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#414: FILE: kernel/uprobes_core.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#415: FILE: kernel/uprobes_core.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: kernel/uprobes_core.c:46:
+static int uprobe_post_ssout(struct uprobe_task *utask,
+	struct uprobe_probept *ppt, struct pt_regs *regs);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#534: FILE: kernel/uprobes_core.c:136:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: kernel/uprobes_core.c:168:
+static struct uprobe_probept *uprobe_find_probept(struct uprobe_process *uproc,
+		unsigned long vaddr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: kernel/uprobes_core.c:188:
+static void uprobe_insert_bkpt(struct uprobe_probept *ppt,
+						struct task_struct *tsk)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: kernel/uprobes_core.c:212:
+static inline void reset_thread_ip(struct task_struct *tsk,
+				struct pt_regs *regs, unsigned long addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#613: FILE: kernel/uprobes_core.c:215:
+	if ((ubp_get_bkpt_addr(regs) == addr) &&
+				!test_tsk_thread_flag(tsk, TIF_SINGLESTEP))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#644: FILE: kernel/uprobes_core.c:246:
+		BUG_ON(utask->tsk == current);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: kernel/uprobes_core.c:260:
+static void uprobe_remove_bkpt(struct uprobe_probept *ppt,
+						struct task_struct *tsk)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#662: FILE: kernel/uprobes_core.c:264:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#664: FILE: kernel/uprobes_core.c:266:
+				"Error removing uprobe at pid %d vaddr %#lx:"
+				" can't restore original instruction\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#677: FILE: kernel/uprobes_core.c:279:
+			unsigned long flags;
+			spin_lock_irqsave(&ppt->ssil_lock, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: kernel/uprobes_core.c:301:
+static void handle_pending_uprobes(struct uprobe_process *uproc,
+	struct task_struct *tsk)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#712: FILE: kernel/uprobes_core.c:314:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: kernel/uprobes_core.c:321:
+static void utask_adjust_flags(struct uprobe_task *utask, int set,
+	unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: kernel/uprobes_core.c:340:
+		if (utrace_set_events_pid(utask->pid, utask->engine,
+							newflags) != 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: kernel/uprobes_core.c:351:
+		if (utrace_control_pid(utask->pid, utask->engine,
+						UTRACE_RESUME) != 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: kernel/uprobes_core.c:383:
+static int check_uproc_quiesced(struct uprobe_process *uproc,
+		struct task_struct *tsk)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#800: FILE: kernel/uprobes_core.c:402:
+	BUG_ON(utask->tsk == current);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: kernel/uprobes_core.c:426:
+			result = utrace_control_pid(utask->pid, utask->engine,
+							UTRACE_INTERRUPT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#838: FILE: kernel/uprobes_core.c:440:
+static bool quiesce_all_threads(struct uprobe_process *uproc,
+		struct uprobe_task **cur_utask_quiescing)

CHECK:BRACES: braces {} should be used on all arms of this statement
#857: FILE: kernel/uprobes_core.c:459:
+			if (utask->tsk == current)
[...]
+			else if (utask->state == UPTASK_RUNNING) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#861: FILE: kernel/uprobes_core.c:463:
+				utask_adjust_flags(utask, UPROBE_SET_FLAGS,
+						UTRACE_EVENT(QUIESCE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#888: FILE: kernel/uprobes_core.c:490:
+		result = utrace_control_pid(utask->pid, utask->engine,
+							UTRACE_DETACH);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#889: FILE: kernel/uprobes_core.c:491:
+		BUG_ON(result == -EINPROGRESS);

WARNING:SIZEOF_PARENTHESIS: sizeof *uk should be sizeof(*uk)
#959: FILE: kernel/uprobes_core.c:561:
+	struct uprobe_kimg *uk = kzalloc(sizeof *uk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#984: FILE: kernel/uprobes_core.c:586:
+static struct uprobe_task *uprobe_add_task(struct pid *p,
+		struct uprobe_process *uproc)

WARNING:SIZEOF_PARENTHESIS: sizeof *utask should be sizeof(*utask)
#992: FILE: kernel/uprobes_core.c:594:
+	utask = kzalloc(sizeof *utask, GFP_USER);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utask"
#993: FILE: kernel/uprobes_core.c:595:
+	if (unlikely(utask == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1010: FILE: kernel/uprobes_core.c:612:
+	engine = utrace_attach_pid(p, UTRACE_ATTACH_CREATE,
+						p_uprobe_utrace_ops, utask);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1013: FILE: kernel/uprobes_core.c:615:
+		long err = PTR_ERR(engine);
+		printk("uprobes: utrace_attach_task failed, returned %ld\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1013: FILE: kernel/uprobes_core.c:615:
+		printk("uprobes: utrace_attach_task failed, returned %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1014: FILE: kernel/uprobes_core.c:616:
+		printk("uprobes: utrace_attach_task failed, returned %ld\n",
+									err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1026: FILE: kernel/uprobes_core.c:628:
+	utask_adjust_flags(utask, UPROBE_SET_FLAGS,
+			UTRACE_EVENT(SIGNAL) | UTRACE_EVENT(SIGNAL_IGN) |

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1044: FILE: kernel/uprobes_core.c:646:
+static struct pid *find_next_thread_to_add(struct uprobe_process *uproc,
+						struct pid *start_pid)

WARNING:SIZEOF_PARENTHESIS: sizeof *uproc should be sizeof(*uproc)
#1082: FILE: kernel/uprobes_core.c:684:
+	uproc = kzalloc(sizeof *uproc, GFP_USER);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uproc"
#1083: FILE: kernel/uprobes_core.c:685:
+	if (unlikely(uproc == NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1147: FILE: kernel/uprobes_core.c:749:
+static struct uprobe_probept *uprobe_add_probept(struct uprobe_kimg *uk,
+	struct uprobe_process *uproc)

WARNING:SIZEOF_PARENTHESIS: sizeof *ppt should be sizeof(*ppt)
#1151: FILE: kernel/uprobes_core.c:753:
+	ppt = kzalloc(sizeof *ppt, GFP_USER);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ppt"
#1152: FILE: kernel/uprobes_core.c:754:
+	if (unlikely(ppt == NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1178: FILE: kernel/uprobes_core.c:780:
+	hlist_add_head(&ppt->ut_node,
+			&uproc->uprobe_table[hash_long(ppt->ubp.vaddr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1228: FILE: kernel/uprobes_core.c:830:
+static int defer_registration(struct uprobe *u, int regflag,
+		struct uprobe_task *utask)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1240: FILE: kernel/uprobes_core.c:842:
+				return 0;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#1240: FILE: kernel/uprobes_core.c:842:
+			} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dr)...) over kmalloc(sizeof(struct deferred_registration)...)
#1247: FILE: kernel/uprobes_core.c:849:
+	dr = kmalloc(sizeof(struct deferred_registration), GFP_USER);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#1270: FILE: kernel/uprobes_core.c:872:
+		struct task_struct *t = pid_task(pid, PIDTYPE_PID);
+		if (t)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1335: FILE: kernel/uprobes_core.c:937:
+			BUG_ON(utask->state != UPTASK_SSTEP);

CHECK:SPACING: No space is necessary after a cast
#1344: FILE: kernel/uprobes_core.c:946:
+			ret = (int) PTR_ERR(uproc);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1372: FILE: kernel/uprobes_core.c:974:
+		ret = (int) PTR_ERR(uk);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1387: FILE: kernel/uprobes_core.c:989:
+				BUG_ON(!cur_utask_quiescing);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1397: FILE: kernel/uprobes_core.c:999:
+			/*FALLTHROUGH*/

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1402: FILE: kernel/uprobes_core.c:1004:
+			BUG();

CHECK:SPACING: No space is necessary after a cast
#1414: FILE: kernel/uprobes_core.c:1016:
+			ret = (int) PTR_ERR(ppt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1421: FILE: kernel/uprobes_core.c:1023:
+		hlist_add_head(&uproc->hlist,
+				&uproc_table[hash_ptr(uproc->tg_leader,

CHECK:SPACING: No space is necessary after a cast
#1439: FILE: kernel/uprobes_core.c:1041:
+		(void) utask_fake_quiesce(cur_utask_quiescing);

CHECK:SPACING: No space is necessary after a cast
#1489: FILE: kernel/uprobes_core.c:1091:
+		(void) defer_registration(u, 0, cur_utask);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1509: FILE: kernel/uprobes_core.c:1111:
+		BUG_ON(utask->state != UPTASK_SSTEP);

CHECK:SPACING: No space is necessary after a cast
#1511: FILE: kernel/uprobes_core.c:1113:
+			(void) defer_registration(u, 0, utask);

CHECK:SPACING: No space is necessary after a cast
#1540: FILE: kernel/uprobes_core.c:1142:
+	(void) quiesce_all_threads(uproc, &cur_utask_quiescing);

CHECK:SPACING: No space is necessary after a cast
#1544: FILE: kernel/uprobes_core.c:1146:
+		(void) utask_fake_quiesce(cur_utask_quiescing);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1639: FILE: kernel/uprobes_core.c:1241:
+	if (uproc->n_quiescent_threads == uproc->nthreads-1) {
 	                                                 ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1645: FILE: kernel/uprobes_core.c:1247:
+		return 0;
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1670: FILE: kernel/uprobes_core.c:1272:
+static void uprobe_pre_ssin(struct uprobe_task *utask,
+	struct uprobe_probept *ppt, struct pt_regs *regs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1699: FILE: kernel/uprobes_core.c:1301:
+	if (unlikely(ubp_pre_sstep(utask->tsk, &ppt->ubp,
+					&utask->arch_info, regs) != 0)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1700: FILE: kernel/uprobes_core.c:1302:
+		printk(KERN_ERR "Failed to temporarily restore original "

WARNING:SPLIT_STRING: quoted string split across lines
#1701: FILE: kernel/uprobes_core.c:1303:
+		printk(KERN_ERR "Failed to temporarily restore original "
+			"instruction for single-stepping: "

WARNING:SPLIT_STRING: quoted string split across lines
#1702: FILE: kernel/uprobes_core.c:1304:
+			"instruction for single-stepping: "
+			"pid/tgid=%d/%d, vaddr=%#lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1710: FILE: kernel/uprobes_core.c:1312:
+static void uprobe_post_ssin(struct uprobe_task *utask,
+	struct uprobe_probept *ppt, struct pt_regs *regs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1715: FILE: kernel/uprobes_core.c:1317:
+	if (unlikely(ubp_post_sstep(utask->tsk, &ppt->ubp,
+					&utask->arch_info, regs) != 0))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1716: FILE: kernel/uprobes_core.c:1318:
+		printk("Couldn't restore bp: pid/tgid=%d/%d, addr=%#lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1717: FILE: kernel/uprobes_core.c:1319:
+		printk("Couldn't restore bp: pid/tgid=%d/%d, addr=%#lx\n",
+			utask->tsk->pid, utask->tsk->tgid, ppt->ubp.vaddr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1741: FILE: kernel/uprobes_core.c:1343:
+		struct hlist_head *head;
+		for (i = 0; i < UPROBE_TABLE_SIZE; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1756: FILE: kernel/uprobes_core.c:1358:
+static int uprobe_pre_ssout(struct uprobe_task *utask,
+	struct uprobe_probept *ppt, struct pt_regs *regs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1760: FILE: kernel/uprobes_core.c:1362:
+		ppt->ubp.xol_vaddr = xol_get_insn_slot(&ppt->ubp,
+						ppt->uproc->xol_area);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1771: FILE: kernel/uprobes_core.c:1373:
+static int uprobe_post_ssout(struct uprobe_task *utask,
+	struct uprobe_probept *ppt, struct pt_regs *regs)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1794: FILE: kernel/uprobes_core.c:1396:
+		return check_uproc_quiesced(utask->uproc, current);
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1833: FILE: kernel/uprobes_core.c:1435:
+static bool validate_and_post_sstep(struct uprobe_task *utask,
+				struct pt_regs *regs,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1921: FILE: kernel/uprobes_core.c:1523:
+		bool done_quiescing;
+		if (utask->active_probe)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1945: FILE: kernel/uprobes_core.c:1547:
+	BUG_ON(!info);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1947: FILE: kernel/uprobes_core.c:1549:
+	if (signal_action == UTRACE_SIGNAL_DELIVER && utask->active_probe &&
+					info->si_signo != SSTEP_SIGNAL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1953: FILE: kernel/uprobes_core.c:1555:
+	if (info->si_signo != BREAKPOINT_SIGNAL &&
+					info->si_signo != SSTEP_SIGNAL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1974: FILE: kernel/uprobes_core.c:1576:
+			if (unlikely(uproc->sstep_out_of_line) &&
+					unlikely(!uproc->xol_area))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1994: FILE: kernel/uprobes_core.c:1596:
+				struct uprobe *u = uk->uprobe;
+				if (u->handler)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2001: FILE: kernel/uprobes_core.c:1603:
+		if ((ppt->ubp.strategy & UBP_HNT_INLINE) ||
+				uprobe_pre_ssout(utask, ppt, regs) != 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2013: FILE: kernel/uprobes_core.c:1615:
+		utask_adjust_flags(utask, UPROBE_SET_FLAGS,
+							UTRACE_EVENT(QUIESCE));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2027: FILE: kernel/uprobes_core.c:1629:
+		BUG_ON(!ppt);

WARNING:TYPO_SPELLING: 'Havent' may be misspelled - perhaps 'Haven't'?
#2030: FILE: kernel/uprobes_core.c:1632:
+		 * Havent singlestepped yet? then re-assert
 		   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#2048: FILE: kernel/uprobes_core.c:1650:
+		if (utask->quiescing) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2050: FILE: kernel/uprobes_core.c:1652:
+			int uproc_freed;
+			up_read(&uproc->rwsem);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2052: FILE: kernel/uprobes_core.c:1654:
+			BUG_ON(uproc_freed);

CHECK:BRACES: Unbalanced braces around else statement
#2053: FILE: kernel/uprobes_core.c:1655:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2091: FILE: kernel/uprobes_core.c:1693:
+	BUG_ON(!utask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2097: FILE: kernel/uprobes_core.c:1699:
+	report_action = uprobe_handle_signal(action, utask, regs, info,
+								orig_ka);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2114: FILE: kernel/uprobes_core.c:1716:
+static u32 uprobe_report_quiesce(u32 action,
+				struct utrace_engine *engine,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2122: FILE: kernel/uprobes_core.c:1724:
+	BUG_ON(!utask);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2132: FILE: kernel/uprobes_core.c:1734:
+	BUG_ON(utask->active_probe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2159: FILE: kernel/uprobes_core.c:1761:
+			if (ppt->state == UPROBE_INSERTING ||
+					ppt->state == UPROBE_REMOVING) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2168: FILE: kernel/uprobes_core.c:1770:
+				list_for_each_entry_safe(uk, unode,
+					       &ppt->uprobe_list, list)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2173: FILE: kernel/uprobes_core.c:1775:
+				list_for_each_entry_safe(uk, unode,
+					       &ppt->uprobe_list, list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2190: FILE: kernel/uprobes_core.c:1792:
+static u32 uprobe_exec_exit(struct utrace_engine *engine,
+				struct task_struct *tsk, int exit)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2203: FILE: kernel/uprobes_core.c:1805:
+		printk(KERN_WARNING "Task handler called %s while at uprobe"

WARNING:SPLIT_STRING: quoted string split across lines
#2204: FILE: kernel/uprobes_core.c:1806:
+		printk(KERN_WARNING "Task handler called %s while at uprobe"
+				" probepoint: pid/tgid = %d/%d, probepoint"

WARNING:SPLIT_STRING: quoted string split across lines
#2205: FILE: kernel/uprobes_core.c:1807:
+				" probepoint: pid/tgid = %d/%d, probepoint"
+				" = %#lx\n", (exit ? "exit" : "exec"),

CHECK:SPACING: No space is necessary after a cast
#2243: FILE: kernel/uprobes_core.c:1845:
+			(void) check_uproc_quiesced(uproc,

CHECK:BRACES: Unbalanced braces around else statement
#2245: FILE: kernel/uprobes_core.c:1847:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2262: FILE: kernel/uprobes_core.c:1864:
+static u32 uprobe_report_exit(u32 action,
+			struct utrace_engine *engine,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2267: FILE: kernel/uprobes_core.c:1869:
+}
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2280: FILE: kernel/uprobes_core.c:1882:
+static u32 uprobe_report_clone(u32 action,
+				struct utrace_engine *engine,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2308: FILE: kernel/uprobes_core.c:1910:
+			struct pid *child_pid = get_pid(task_pid(child));
+			BUG_ON(!child_pid);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2308: FILE: kernel/uprobes_core.c:1910:
+			BUG_ON(!child_pid);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2310: FILE: kernel/uprobes_core.c:1912:
+			BUG_ON(!ctask);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2341: FILE: kernel/uprobes_core.c:1943:
+					printk(KERN_ERR "Pid %d forked %d;"

WARNING:SPLIT_STRING: quoted string split across lines
#2343: FILE: kernel/uprobes_core.c:1945:
+						" failed to remove probepoint"
+						" at %#lx in child\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2374: FILE: kernel/uprobes_core.c:1976:
+static u32 uprobe_report_exec(u32 action,
+				struct utrace_engine *engine,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2397: FILE: kernel/uprobes_core.c:1999:
+		printk(KERN_ERR "Can't start uprobes: ubp_init() returned %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2398: FILE: kernel/uprobes_core.c:2000:
+		printk(KERN_ERR "Can't start uprobes: ubp_init() returned %d\n",
+								ret);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000025216.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 57 warnings, 72 checks, 2340 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000025216.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
