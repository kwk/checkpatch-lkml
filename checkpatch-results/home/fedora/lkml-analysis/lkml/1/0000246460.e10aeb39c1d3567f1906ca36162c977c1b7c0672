WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
I/O statistics are stored in a rbtree (one for each thread or process), using

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#129: FILE: include/linux/task_io_accounting.h:66:
+	 * Red-Black tree to store each block device accounting informations.
 	                                                        ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/task_io_accounting_ops.h:14:
+extern void block_device_acct(struct block_device *bdev, size_t bytes,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: include/linux/task_io_accounting_ops.h:15:
+extern void block_device_acct(struct block_device *bdev, size_t bytes,
+				enum io_acct_ops iop);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/linux/task_io_accounting_ops.h:16:
+extern void task_io_account_cleanup(struct task_io_accounting *ioac);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/task_io_accounting_ops.h:17:
+extern void task_io_account_merge_stat(struct task_io_accounting *dst,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: include/linux/task_io_accounting_ops.h:18:
+extern void task_io_account_merge_stat(struct task_io_accounting *dst,
+					struct task_io_accounting *src);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: include/linux/task_io_accounting_ops.h:27:
+static inline void block_device_acct(struct block_device *bdev, size_t bytes,
+					enum io_acct_ops iop)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#171: FILE: include/linux/task_io_accounting_ops.h:30:
+}
+static inline void task_io_account_merge_stat(struct task_io_accounting *dst,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: include/linux/task_io_accounting_ops.h:31:
+static inline void task_io_account_merge_stat(struct task_io_accounting *dst,
+					struct task_io_accounting *src)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#175: FILE: include/linux/task_io_accounting_ops.h:34:
+}
+static inline void task_io_account_init(struct task_io_accounting *ioac)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#179: FILE: include/linux/task_io_accounting_ops.h:38:
+}
+#define task_io_account_cleanup(__x)	task_io_account_init(__x)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#233: FILE: include/linux/task_io_accounting_ops.h:75:
+ *    */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: include/linux/task_io_accounting_ops.h:82:
+static inline void task_blk_io_account_add(struct task_io_accounting *dst,
 						struct task_io_accounting *src)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: include/linux/task_io_accounting_ops.h:114:
+static inline void task_blk_io_account_add(struct task_io_accounting *dst,
 						struct task_io_accounting *src)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: include/linux/task_io_accounting_ops.h:121:
+static inline void task_chr_io_account_add(struct task_io_accounting *dst,
 						struct task_io_accounting *src)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: include/linux/task_io_accounting_ops.h:130:
+static inline void task_chr_io_account_add(struct task_io_accounting *dst,
 						struct task_io_accounting *src)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: include/linux/task_io_accounting_ops.h:136:
+static inline void task_io_account_add(struct task_io_accounting *dst,
 						struct task_io_accounting *src)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#331: FILE: init/Kconfig:218:
+config TASK_IO_ACCOUNTING_BDEV
+	bool "Enable distinct block device I/O accounting (EXPERIMENTAL)"
+	depends on TASK_IO_ACCOUNTING
+	help
+	  Collect informations on the number of bytes of real storage I/O which
+	  each task has caused for each block device.
+
+	  Say N if unsure.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#335: FILE: init/Kconfig:222:
+	  Collect informations on the number of bytes of real storage I/O which
 	          ^^^^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#356: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#361: FILE: kernel/task-io-accounting.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around root->rb_node
#398: FILE: kernel/task-io-accounting.c:38:
+	struct rb_node **new = &(root->rb_node), *parent = NULL;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#477: FILE: kernel/task-io-accounting.c:117:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: kernel/task-io-accounting.c:135:
+void block_device_acct(struct block_device *bdev, size_t bytes,
+				enum io_acct_ops iop)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#503: FILE: kernel/task-io-accounting.c:143:
+	BUG_ON(!bdev->bd_inode || !bdev->bd_disk);

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#517: FILE: kernel/task-io-accounting.c:157:
+	if (unlikely(!io) && printk_ratelimit()) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#518: FILE: kernel/task-io-accounting.c:158:
+		printk(KERN_WARNING

WARNING:TYPO_SPELLING: 'alredy' may be misspelled - perhaps 'already'?
#533: FILE: kernel/task-io-accounting.c:173:
+	 * It seems the new element has been alredy added by another cpu in the
 	                                     ^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000246460.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 17 checks, 460 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000246460.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
