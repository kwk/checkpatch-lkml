WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: arch/ia64/kvm/vcpu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: arch/ia64/kvm/vcpu.c:15:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#70: FILE: arch/ia64/kvm/vcpu.c:27:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#74: FILE: arch/ia64/kvm/vcpu.c:31:
+#include <asm/pgtable.h>

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#149: FILE: arch/ia64/kvm/vcpu.c:106:
+	ia64_set_rr(VRN0<<VRN_SHIFT, vcpu->arch.metaphysical_rr0);
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#151: FILE: arch/ia64/kvm/vcpu.c:108:
+	ia64_set_rr(VRN4<<VRN_SHIFT, vcpu->arch.metaphysical_rr4);
 	                ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#156: FILE: arch/ia64/kvm/vcpu.c:113:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#158: FILE: arch/ia64/kvm/vcpu.c:115:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#170: FILE: arch/ia64/kvm/vcpu.c:127:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: arch/ia64/kvm/vcpu.c:135:
+void switch_mm_mode(struct kvm_vcpu *vcpu, struct ia64_psr old_psr,
+					struct ia64_psr new_psr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: arch/ia64/kvm/vcpu.c:138:
+	int act;
+	act = mm_switch_action(old_psr, new_psr);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#185: FILE: arch/ia64/kvm/vcpu.c:142:
+		/*printk("V -> P mode transition: (0x%lx -> 0x%lx)\n",
+		old_psr.val, new_psr.val);*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#185: FILE: arch/ia64/kvm/vcpu.c:142:
+		old_psr.val, new_psr.val);*/

WARNING:TYPO_SPELLING: 'restor' may be misspelled - perhaps 'restore'?
#189: FILE: arch/ia64/kvm/vcpu.c:146:
+		 *save/restor when guest physical mode.
 		       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:RETURN_VOID: void function return statements are not generally useful
#210: FILE: arch/ia64/kvm/vcpu.c:167:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: arch/ia64/kvm/vcpu.c:169:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: arch/ia64/kvm/vcpu.c:188:
+void check_mm_mode_switch(struct kvm_vcpu *vcpu,  struct ia64_psr old_psr,
+					struct ia64_psr new_psr)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#233: FILE: arch/ia64/kvm/vcpu.c:190:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_psr.dt != new_psr.dt'
#234: FILE: arch/ia64/kvm/vcpu.c:191:
+	if ((old_psr.dt != new_psr.dt)
+			|| (old_psr.it != new_psr.it)
+			|| (old_psr.rt != new_psr.rt))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_psr.it != new_psr.it'
#234: FILE: arch/ia64/kvm/vcpu.c:191:
+	if ((old_psr.dt != new_psr.dt)
+			|| (old_psr.it != new_psr.it)
+			|| (old_psr.rt != new_psr.rt))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_psr.rt != new_psr.rt'
#234: FILE: arch/ia64/kvm/vcpu.c:191:
+	if ((old_psr.dt != new_psr.dt)
+			|| (old_psr.it != new_psr.it)
+			|| (old_psr.rt != new_psr.rt))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#235: FILE: arch/ia64/kvm/vcpu.c:192:
+	if ((old_psr.dt != new_psr.dt)
+			|| (old_psr.it != new_psr.it)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#236: FILE: arch/ia64/kvm/vcpu.c:193:
+			|| (old_psr.it != new_psr.it)
+			|| (old_psr.rt != new_psr.rt))

WARNING:RETURN_VOID: void function return statements are not generally useful
#240: FILE: arch/ia64/kvm/vcpu.c:197:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#242: FILE: arch/ia64/kvm/vcpu.c:199:
+
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#266: FILE: arch/ia64/kvm/vcpu.c:223:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#275: FILE: arch/ia64/kvm/vcpu.c:232:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#277: FILE: arch/ia64/kvm/vcpu.c:234:
+#define RPT(x)	((u16) &((struct kvm_pt_regs *)0)->x)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#277: FILE: arch/ia64/kvm/vcpu.c:234:
+#define RPT(x)	((u16) &((struct kvm_pt_regs *)0)->x)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#280: FILE: arch/ia64/kvm/vcpu.c:237:
+^I0, ^I/* r0 is read-only : WE SHOULD NEVER GET THIS */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: arch/ia64/kvm/vcpu.c:266:
+static inline unsigned long fph_index(struct kvm_pt_regs *regs,
+						long regnum)

WARNING:LINE_SPACING: Missing a blank line after declarations
#312: FILE: arch/ia64/kvm/vcpu.c:269:
+	unsigned long rrb_fr = (regs->cr_ifs >> 25) & 0x7f;
+	return rotate_reg(96, rrb_fr, (regnum - IA64_FIRST_ROTATING_FR));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#315: FILE: arch/ia64/kvm/vcpu.c:272:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: arch/ia64/kvm/vcpu.c:278:
+static inline unsigned long *kvm_rse_skip_regs(unsigned long *addr,
+							long num_regs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: arch/ia64/kvm/vcpu.c:301:
+static void get_rse_reg(struct kvm_pt_regs *regs, unsigned long r1,
+					unsigned long *val, int *nat)

CHECK:SPACING: No space is necessary after a cast
#347: FILE: arch/ia64/kvm/vcpu.c:304:
+	unsigned long *kbs = (void *) current_vcpu + VMM_RBS_OFFSET;

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#359: FILE: arch/ia64/kvm/vcpu.c:316:
+	new_rsc = old_rsc&(~(0x3));
 	                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: arch/ia64/kvm/vcpu.c:343:
+void set_rse_reg(struct kvm_pt_regs *regs, unsigned long r1,
+				unsigned long val, unsigned long nat)

CHECK:SPACING: No space is necessary after a cast
#389: FILE: arch/ia64/kvm/vcpu.c:346:
+	unsigned long *kbs = (void *) current_vcpu + VMM_RBS_OFFSET;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#414: FILE: arch/ia64/kvm/vcpu.c:371:
+	if (addr >= bspstore) {
+

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#423: FILE: arch/ia64/kvm/vcpu.c:380:
+			*rnat_addr = (*rnat_addr)&(~nat_mask);
 			                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#432: FILE: arch/ia64/kvm/vcpu.c:389:
+			rnat = rnat&(~nat_mask);
 			           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: arch/ia64/kvm/vcpu.c:401:
+void getreg(unsigned long regnum, unsigned long *val,
+				int *nat, struct kvm_pt_regs *regs)

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: arch/ia64/kvm/vcpu.c:404:
+	unsigned long addr, *unat;
+	if (regnum >= IA64_FIRST_STACKED_GR) {

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#456: FILE: arch/ia64/kvm/vcpu.c:413:
+	unat = &regs->eml_unat;;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: arch/ia64/kvm/vcpu.c:426:
+void setreg(unsigned long regnum, unsigned long val,
+			int nat, struct kvm_pt_regs *regs)

WARNING:TABSTOP: Statements should start on a tabstop
#503: FILE: arch/ia64/kvm/vcpu.c:460:
+	 else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#506: FILE: arch/ia64/kvm/vcpu.c:463:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#532: FILE: arch/ia64/kvm/vcpu.c:489:
+void getfpreg(unsigned long regnum, struct ia64_fpreg *fpval,
+				struct kvm_pt_regs *regs)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#537: FILE: arch/ia64/kvm/vcpu.c:494:
+#define CASE_FIXED_FP(reg)			\
+	case  (reg) :				\
+		ia64_stf_spill(fpval, reg);	\
+	break

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#537: FILE: arch/ia64/kvm/vcpu.c:494:
+#define CASE_FIXED_FP(reg)			\
+	case  (reg) :				\
+		ia64_stf_spill(fpval, reg);	\
+	break

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#538: FILE: arch/ia64/kvm/vcpu.c:495:
+	case  (reg) :				\
 	            ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#540: FILE: arch/ia64/kvm/vcpu.c:497:
+	break
+
+	switch (regnum) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: arch/ia64/kvm/vcpu.c:635:
+void setfpreg(unsigned long regnum, struct ia64_fpreg *fpval,
+					struct kvm_pt_regs *regs)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#684: FILE: arch/ia64/kvm/vcpu.c:641:
+#define CASE_FIXED_FP(reg)			\
+	case (reg) :				\
+		ia64_ldf_fill(reg, fpval);	\
+	break

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#685: FILE: arch/ia64/kvm/vcpu.c:642:
+	case (reg) :				\
 	           ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#687: FILE: arch/ia64/kvm/vcpu.c:644:
+	break
+
+	switch (regnum) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: arch/ia64/kvm/vcpu.c:779:
+void vcpu_get_fpreg(struct kvm_vcpu *vcpu, unsigned long reg,
+						struct ia64_fpreg *val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: arch/ia64/kvm/vcpu.c:787:
+void vcpu_set_fpreg(struct kvm_vcpu *vcpu, unsigned long reg,
+						struct ia64_fpreg *val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#844: FILE: arch/ia64/kvm/vcpu.c:801:
+	unsigned long guest_itc;
+	guest_itc = VMX(vcpu, itc_offset) + ia64_getreg(_IA64_REG_AR_ITC);

CHECK:BRACES: braces {} should be used on all arms of this statement
#846: FILE: arch/ia64/kvm/vcpu.c:803:
+	if (guest_itc >= VMX(vcpu, last_itc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#849: FILE: arch/ia64/kvm/vcpu.c:806:
+	} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#877: FILE: arch/ia64/kvm/vcpu.c:834:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#887: FILE: arch/ia64/kvm/vcpu.c:844:
+	unsigned long vitv = VCPU(vcpu, itv);
+	VCPU(vcpu, itm) = val;

CHECK:BRACES: braces {} should be used on all arms of this statement
#889: FILE: arch/ia64/kvm/vcpu.c:846:
+	if (val > vcpu_get_itc(vcpu)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#893: FILE: arch/ia64/kvm/vcpu.c:850:
+	} else

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#897: FILE: arch/ia64/kvm/vcpu.c:854:
+#define  ITV_VECTOR(itv)    (itv&0xff)
                                 ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'itv' may be better as '(itv)' to avoid precedence issues
#897: FILE: arch/ia64/kvm/vcpu.c:854:
+#define  ITV_VECTOR(itv)    (itv&0xff)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#898: FILE: arch/ia64/kvm/vcpu.c:855:
+#define  ITV_IRQ_MASK(itv)  (itv&(1<<16))
                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#898: FILE: arch/ia64/kvm/vcpu.c:855:
+#define  ITV_IRQ_MASK(itv)  (itv&(1<<16))
                                    ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'itv' may be better as '(itv)' to avoid precedence issues
#898: FILE: arch/ia64/kvm/vcpu.c:855:
+#define  ITV_IRQ_MASK(itv)  (itv&(1<<16))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#920: FILE: arch/ia64/kvm/vcpu.c:877:
+
+}

CHECK:CAMELCASE: Avoid CamelCase: <ExtINT_VECTOR>
#937: FILE: arch/ia64/kvm/vcpu.c:894:
+	if (h_inservice == ExtINT_VECTOR)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: braces {} should be used on all arms of this statement
#941: FILE: arch/ia64/kvm/vcpu.c:898:
+		if (vtpr.mmi) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#944: FILE: arch/ia64/kvm/vcpu.c:901:
+		} else

WARNING:MEMORY_BARRIER: memory barrier without comment
#980: FILE: arch/ia64/kvm/vcpu.c:937:
+		wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1000: FILE: arch/ia64/kvm/vcpu.c:957:
+		ia64_call_vsa(PAL_VPS_SET_PENDING_INTERRUPT,
+				(u64)vcpu->arch.vpd, 0, 0, 0, 0, 0, 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1025: FILE: arch/ia64/kvm/vcpu.c:982:
+/**************************************************************************
+  Privileged operation emulation routines

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: arch/ia64/kvm/vcpu.c:996:
+		pval = ia64_call_vsa(PAL_VPS_THASH, vadr, vrr.val,
+				vpta.val, 0, 0, 0, 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1055: FILE: arch/ia64/kvm/vcpu.c:1012:
+	if (vpta.vf) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1057: FILE: arch/ia64/kvm/vcpu.c:1014:
+		pval = ia64_call_vsa(PAL_VPS_TTAG, vadr, vrr.val,
+						0, 0, 0, 0, 0);

CHECK:BRACES: Unbalanced braces around else statement
#1058: FILE: arch/ia64/kvm/vcpu.c:1015:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1084: FILE: arch/ia64/kvm/vcpu.c:1041:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1095: FILE: arch/ia64/kvm/vcpu.c:1052:
+
+

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1130: FILE: arch/ia64/kvm/vcpu.c:1087:
+			return IA64_FAULT;
+		} else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1147: FILE: arch/ia64/kvm/vcpu.c:1104:
+			return IA64_FAULT;
+		} else{

ERROR:SPACING: space required before the open brace '{'
#1147: FILE: arch/ia64/kvm/vcpu.c:1104:
+		} else{

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1158: FILE: arch/ia64/kvm/vcpu.c:1115:
+			return IA64_FAULT;
+		} else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1167: FILE: arch/ia64/kvm/vcpu.c:1124:
+			return IA64_FAULT;
+		} else{

ERROR:SPACING: space required before the open brace '{'
#1167: FILE: arch/ia64/kvm/vcpu.c:1124:
+		} else{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1176: FILE: arch/ia64/kvm/vcpu.c:1133:
+
+

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1187: FILE: arch/ia64/kvm/vcpu.c:1144:
+	return(IA64_NO_FAULT);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1199: FILE: arch/ia64/kvm/vcpu.c:1156:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1228: FILE: arch/ia64/kvm/vcpu.c:1185:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1248: FILE: arch/ia64/kvm/vcpu.c:1205:
+	vcpu_set_tr((struct thash_data *)&vcpu->arch.dtrs[slot],
+							pte, itir, va, rid);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1291: FILE: arch/ia64/kvm/vcpu.c:1248:
+	long psr;
+	local_irq_save(psr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1303: FILE: arch/ia64/kvm/vcpu.c:1260:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1373: FILE: arch/ia64/kvm/vcpu.c:1330:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1430: FILE: arch/ia64/kvm/vcpu.c:1387:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1438: FILE: arch/ia64/kvm/vcpu.c:1395:
+}
+/**************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1439: FILE: arch/ia64/kvm/vcpu.c:1396:
+/**************************************************************************
+  struct kvm_vcpu*protection key register access routines

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1452: FILE: arch/ia64/kvm/vcpu.c:1409:
+
+

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1461: FILE: arch/ia64/kvm/vcpu.c:1418:
+	return (rr1.val);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1464: FILE: arch/ia64/kvm/vcpu.c:1421:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1470: FILE: arch/ia64/kvm/vcpu.c:1427:
+unsigned long vcpu_set_rr(struct kvm_vcpu *vcpu, unsigned long reg,
+					unsigned long val)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1509: FILE: arch/ia64/kvm/vcpu.c:1466:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1555: FILE: arch/ia64/kvm/vcpu.c:1512:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1602: FILE: arch/ia64/kvm/vcpu.c:1559:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1654: FILE: arch/ia64/kvm/vcpu.c:1611:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1678: FILE: arch/ia64/kvm/vcpu.c:1635:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1682: FILE: arch/ia64/kvm/vcpu.c:1639:
+{
+

WARNING:SPACING: space prohibited before semicolon
#1726: FILE: arch/ia64/kvm/vcpu.c:1683:
+	return ;

WARNING:RETURN_VOID: void function return statements are not generally useful
#1727: FILE: arch/ia64/kvm/vcpu.c:1684:
+	return ;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1734: FILE: arch/ia64/kvm/vcpu.c:1691:
+	struct kvm_pt_regs *regs = vcpu_regs(vcpu);
+	vpsr = *(struct ia64_psr *)&VCPU(vcpu, vpsr);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1739: FILE: arch/ia64/kvm/vcpu.c:1696:
+	return (IA64_NO_FAULT);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1742: FILE: arch/ia64/kvm/vcpu.c:1699:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1745: FILE: arch/ia64/kvm/vcpu.c:1702:
+/**************************************************************************
+  VCPU banked general register access routines

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b0unat' may be better as '(b0unat)' to avoid precedence issues
#1747: FILE: arch/ia64/kvm/vcpu.c:1704:
+#define vcpu_bsw0_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {     							\
+		__asm__ __volatile__ (					\
+				";;extr.u %0 = %3,%6,16;;\n"		\
+				"dep %1 = %0, %1, 0, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 16, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b1unat), "r"(*b0unat),	\
+				"r"(*runat), "r"(b1unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b1unat' - possible side-effects?
#1747: FILE: arch/ia64/kvm/vcpu.c:1704:
+#define vcpu_bsw0_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {     							\
+		__asm__ __volatile__ (					\
+				";;extr.u %0 = %3,%6,16;;\n"		\
+				"dep %1 = %0, %1, 0, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 16, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b1unat), "r"(*b0unat),	\
+				"r"(*runat), "r"(b1unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b1unat' may be better as '(b1unat)' to avoid precedence issues
#1747: FILE: arch/ia64/kvm/vcpu.c:1704:
+#define vcpu_bsw0_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {     							\
+		__asm__ __volatile__ (					\
+				";;extr.u %0 = %3,%6,16;;\n"		\
+				"dep %1 = %0, %1, 0, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 16, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b1unat), "r"(*b0unat),	\
+				"r"(*runat), "r"(b1unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'runat' - possible side-effects?
#1747: FILE: arch/ia64/kvm/vcpu.c:1704:
+#define vcpu_bsw0_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {     							\
+		__asm__ __volatile__ (					\
+				";;extr.u %0 = %3,%6,16;;\n"		\
+				"dep %1 = %0, %1, 0, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 16, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b1unat), "r"(*b0unat),	\
+				"r"(*runat), "r"(b1unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'runat' may be better as '(runat)' to avoid precedence issues
#1747: FILE: arch/ia64/kvm/vcpu.c:1704:
+#define vcpu_bsw0_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {     							\
+		__asm__ __volatile__ (					\
+				";;extr.u %0 = %3,%6,16;;\n"		\
+				"dep %1 = %0, %1, 0, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 16, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b1unat), "r"(*b0unat),	\
+				"r"(*runat), "r"(b1unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1747: FILE: arch/ia64/kvm/vcpu.c:1704:
+#define vcpu_bsw0_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {     							\
+		__asm__ __volatile__ (					\
+				";;extr.u %0 = %3,%6,16;;\n"		\
+				"dep %1 = %0, %1, 0, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 16, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b1unat), "r"(*b0unat),	\
+				"r"(*runat), "r"(b1unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1748: FILE: arch/ia64/kvm/vcpu.c:1705:
+^Ido {     ^I^I^I^I^I^I^I\$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1773: FILE: arch/ia64/kvm/vcpu.c:1730:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1780: FILE: arch/ia64/kvm/vcpu.c:1737:
+		vcpu_bsw0_unat(i, b0unat, b1unat, runat,
+				VMM_PT_REGS_R16_SLOT);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b0unat' - possible side-effects?
#1785: FILE: arch/ia64/kvm/vcpu.c:1742:
+#define vcpu_bsw1_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {             						\
+		__asm__ __volatile__ (";;extr.u %0 = %3, %6, 16;;\n"	\
+				"dep %1 = %0, %1, 16, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 0, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b0unat), "r"(*b1unat),	\
+				"r"(*runat), "r"(b0unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b0unat' may be better as '(b0unat)' to avoid precedence issues
#1785: FILE: arch/ia64/kvm/vcpu.c:1742:
+#define vcpu_bsw1_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {             						\
+		__asm__ __volatile__ (";;extr.u %0 = %3, %6, 16;;\n"	\
+				"dep %1 = %0, %1, 16, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 0, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b0unat), "r"(*b1unat),	\
+				"r"(*runat), "r"(b0unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b1unat' may be better as '(b1unat)' to avoid precedence issues
#1785: FILE: arch/ia64/kvm/vcpu.c:1742:
+#define vcpu_bsw1_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {             						\
+		__asm__ __volatile__ (";;extr.u %0 = %3, %6, 16;;\n"	\
+				"dep %1 = %0, %1, 16, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 0, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b0unat), "r"(*b1unat),	\
+				"r"(*runat), "r"(b0unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'runat' - possible side-effects?
#1785: FILE: arch/ia64/kvm/vcpu.c:1742:
+#define vcpu_bsw1_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {             						\
+		__asm__ __volatile__ (";;extr.u %0 = %3, %6, 16;;\n"	\
+				"dep %1 = %0, %1, 16, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 0, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b0unat), "r"(*b1unat),	\
+				"r"(*runat), "r"(b0unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'runat' may be better as '(runat)' to avoid precedence issues
#1785: FILE: arch/ia64/kvm/vcpu.c:1742:
+#define vcpu_bsw1_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {             						\
+		__asm__ __volatile__ (";;extr.u %0 = %3, %6, 16;;\n"	\
+				"dep %1 = %0, %1, 16, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 0, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b0unat), "r"(*b1unat),	\
+				"r"(*runat), "r"(b0unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1785: FILE: arch/ia64/kvm/vcpu.c:1742:
+#define vcpu_bsw1_unat(i, b0unat, b1unat, runat, VMM_PT_REGS_R16_SLOT)	\
+	do {             						\
+		__asm__ __volatile__ (";;extr.u %0 = %3, %6, 16;;\n"	\
+				"dep %1 = %0, %1, 16, 16;;\n"		\
+				"st8 [%4] = %1\n"			\
+				"extr.u %0 = %2, 0, 16;;\n"		\
+				"dep %3 = %0, %3, %6, 16;;\n"		\
+				"st8 [%5] = %3\n"			\
+				::"r"(i), "r"(*b0unat), "r"(*b1unat),	\
+				"r"(*runat), "r"(b0unat), "r"(runat),	\
+				"i"(VMM_PT_REGS_R16_SLOT) : "memory");	\
+	} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1786: FILE: arch/ia64/kvm/vcpu.c:1743:
+^Ido {             ^I^I^I^I^I^I\$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1815: FILE: arch/ia64/kvm/vcpu.c:1772:
+		vcpu_bsw1_unat(i, b0unat, b1unat, runat,
+				VMM_PT_REGS_R16_SLOT);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1820: FILE: arch/ia64/kvm/vcpu.c:1777:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1822: FILE: arch/ia64/kvm/vcpu.c:1779:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1840: FILE: arch/ia64/kvm/vcpu.c:1797:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1842: FILE: arch/ia64/kvm/vcpu.c:1799:
+/*
+   VPSR can't keep track of below bits of guest PSR

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1859: FILE: arch/ia64/kvm/vcpu.c:1816:
+	unsigned long imm24 = (inst.M44.i<<23) | (inst.M44.i2<<21)
 	                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1859: FILE: arch/ia64/kvm/vcpu.c:1816:
+	unsigned long imm24 = (inst.M44.i<<23) | (inst.M44.i2<<21)
 	                                                     ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1883: FILE: arch/ia64/kvm/vcpu.c:1840:
+#define MASK(bit,len)^I^I^I^I   ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1883: FILE: arch/ia64/kvm/vcpu.c:1840:
+#define MASK(bit,len)				   	\
                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1888: FILE: arch/ia64/kvm/vcpu.c:1845:
+				: "=r" (ret):		\
 				            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1921: FILE: arch/ia64/kvm/vcpu.c:1878:
+	struct ia64_psr *ipsr = (struct ia64_psr *)&regs->cr_ipsr;
+	if (ipsr->ri == 2) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1921: FILE: arch/ia64/kvm/vcpu.c:1878:
+	if (ipsr->ri == 2) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1924: FILE: arch/ia64/kvm/vcpu.c:1881:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1933: FILE: arch/ia64/kvm/vcpu.c:1890:
+	if (ipsr->ri == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1936: FILE: arch/ia64/kvm/vcpu.c:1893:
+	} else

WARNING:SPACING: space prohibited before semicolon
#1950: FILE: arch/ia64/kvm/vcpu.c:1907:
+	unsigned long status, cause, opcode ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2157: FILE: arch/ia64/kvm/vcpu.c:2114:
+		ia64_set_rr((VRN0 << VRN_SHIFT),
+				vcpu->arch.metaphysical_saved_rr0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2160: FILE: arch/ia64/kvm/vcpu.c:2117:
+		ia64_set_rr((VRN4 << VRN_SHIFT),
+				vcpu->arch.metaphysical_saved_rr4);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2164: FILE: arch/ia64/kvm/vcpu.c:2121:
+	ia64_set_rr((VRN1 << VRN_SHIFT),
+			vrrtomrr(VMX(vcpu, vrr[VRN1])));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2167: FILE: arch/ia64/kvm/vcpu.c:2124:
+	ia64_set_rr((VRN2 << VRN_SHIFT),
+			vrrtomrr(VMX(vcpu, vrr[VRN2])));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2170: FILE: arch/ia64/kvm/vcpu.c:2127:
+	ia64_set_rr((VRN3 << VRN_SHIFT),
+			vrrtomrr(VMX(vcpu, vrr[VRN3])));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2173: FILE: arch/ia64/kvm/vcpu.c:2130:
+	ia64_set_rr((VRN5 << VRN_SHIFT),
+			vrrtomrr(VMX(vcpu, vrr[VRN5])));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2176: FILE: arch/ia64/kvm/vcpu.c:2133:
+	ia64_set_rr((VRN7 << VRN_SHIFT),
+			vrrtomrr(VMX(vcpu, vrr[VRN7])));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2185: FILE: arch/ia64/kvm/vcpu.c:2142:
+	struct kvm_vcpu *v;
+	v = current_vcpu;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2188: FILE: arch/ia64/kvm/vcpu.c:2145:
+	ia64_call_vsa(PAL_VPS_RESTORE, (unsigned long)v->arch.vpd,
+						0, 0, 0, 0, 0, 0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2205: FILE: arch/ia64/kvm/vcpu.c:2162:
+	while (1);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 40 warnings, 106 checks, 2163 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
