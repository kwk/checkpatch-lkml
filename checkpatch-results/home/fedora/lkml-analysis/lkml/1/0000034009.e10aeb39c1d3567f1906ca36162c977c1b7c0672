WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-fixes-for-linus

WARNING:SPLIT_STRING: quoted string split across lines
#122: FILE: arch/x86/boot/compressed/relocs.c:38:
+	"^(xen_irq_disable_direct_reloc$|"
+	"xen_save_fl_direct_reloc$|"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#123: FILE: arch/x86/boot/compressed/relocs.c:39:
+	"xen_save_fl_direct_reloc$|"
+	"VDSO|"

WARNING:SPLIT_STRING: quoted string split across lines
#124: FILE: arch/x86/boot/compressed/relocs.c:40:
+	"VDSO|"
+	"__crc_)";

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: arch/x86/boot/compressed/relocs.c:61:
+        char errbuf[128];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: arch/x86/boot/compressed/relocs.c:61:
+        char errbuf[128];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: arch/x86/boot/compressed/relocs.c:62:
+        int err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: arch/x86/boot/compressed/relocs.c:62:
+        int err;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: arch/x86/boot/compressed/relocs.c:63:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: arch/x86/boot/compressed/relocs.c:64:
+        err = regcomp(&abs_sym_regex_c, abs_sym_regex,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: arch/x86/boot/compressed/relocs.c:64:
+        err = regcomp(&abs_sym_regex_c, abs_sym_regex,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: arch/x86/boot/compressed/relocs.c:65:
+                      REG_EXTENDED|REG_NOSUB);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: arch/x86/boot/compressed/relocs.c:65:
+                      REG_EXTENDED|REG_NOSUB);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#161: FILE: arch/x86/boot/compressed/relocs.c:65:
+                      REG_EXTENDED|REG_NOSUB);
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: arch/x86/boot/compressed/relocs.c:66:
+        if (err) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: arch/x86/boot/compressed/relocs.c:66:
+        if (err) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: arch/x86/boot/compressed/relocs.c:67:
+                regerror(err, &abs_sym_regex_c, errbuf, sizeof errbuf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: arch/x86/boot/compressed/relocs.c:67:
+                regerror(err, &abs_sym_regex_c, errbuf, sizeof errbuf);$

WARNING:SIZEOF_PARENTHESIS: sizeof errbuf should be sizeof(errbuf)
#163: FILE: arch/x86/boot/compressed/relocs.c:67:
+                regerror(err, &abs_sym_regex_c, errbuf, sizeof errbuf);

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: arch/x86/boot/compressed/relocs.c:68:
+                die("%s", errbuf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: arch/x86/boot/compressed/relocs.c:68:
+                die("%s", errbuf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: arch/x86/boot/compressed/relocs.c:69:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: arch/x86/boot/compressed/relocs.c:69:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: arch/x86/boot/compressed/relocs.c:71:
+        err = regcomp(&rel_sym_regex_c, rel_sym_regex,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: arch/x86/boot/compressed/relocs.c:71:
+        err = regcomp(&rel_sym_regex_c, rel_sym_regex,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: arch/x86/boot/compressed/relocs.c:72:
+                      REG_EXTENDED|REG_NOSUB);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: arch/x86/boot/compressed/relocs.c:72:
+                      REG_EXTENDED|REG_NOSUB);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#168: FILE: arch/x86/boot/compressed/relocs.c:72:
+                      REG_EXTENDED|REG_NOSUB);
                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: arch/x86/boot/compressed/relocs.c:73:
+        if (err) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/x86/boot/compressed/relocs.c:73:
+        if (err) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: arch/x86/boot/compressed/relocs.c:74:
+                regerror(err, &rel_sym_regex_c, errbuf, sizeof errbuf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: arch/x86/boot/compressed/relocs.c:74:
+                regerror(err, &rel_sym_regex_c, errbuf, sizeof errbuf);$

WARNING:SIZEOF_PARENTHESIS: sizeof errbuf should be sizeof(errbuf)
#170: FILE: arch/x86/boot/compressed/relocs.c:74:
+                regerror(err, &rel_sym_regex_c, errbuf, sizeof errbuf);

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: arch/x86/boot/compressed/relocs.c:75:
+                die("%s", errbuf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: arch/x86/boot/compressed/relocs.c:75:
+                die("%s", errbuf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: arch/x86/boot/compressed/relocs.c:76:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: arch/x86/boot/compressed/relocs.c:76:
+        }$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#181: FILE: arch/x86/boot/compressed/relocs.c:159:
+	if (type < ARRAY_SIZE(type_name) && type_name[type]) {
 		name = type_name[type];
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: arch/x86/include/asm/swiotlb.h:8:
+extern int __init pci_swiotlb_detect(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#266: FILE: arch/x86/include/asm/swiotlb.h:9:
+extern void __init pci_swiotlb_init(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#274: FILE: arch/x86/include/asm/swiotlb.h:16:
 }
+static inline void pci_swiotlb_init(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#288: FILE: arch/x86/include/asm/syscalls.h:21:
+long sys_iopl(unsigned int, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#288: FILE: arch/x86/include/asm/syscalls.h:21:
+long sys_iopl(unsigned int, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user *' should also have an identifier name
#293: FILE: arch/x86/include/asm/syscalls.h:26:
+long sys_execve(char __user *, char __user * __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user * __user' should also have an identifier name
#293: FILE: arch/x86/include/asm/syscalls.h:26:
+long sys_execve(char __user *, char __user * __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user * __user' should also have an identifier name
#293: FILE: arch/x86/include/asm/syscalls.h:26:
+long sys_execve(char __user *, char __user * __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#293: FILE: arch/x86/include/asm/syscalls.h:26:
+long sys_execve(char __user *, char __user * __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#295: FILE: arch/x86/include/asm/syscalls.h:28:
+long sys_clone(unsigned long, unsigned long, void __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#295: FILE: arch/x86/include/asm/syscalls.h:28:
+long sys_clone(unsigned long, unsigned long, void __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#295: FILE: arch/x86/include/asm/syscalls.h:28:
+long sys_clone(unsigned long, unsigned long, void __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#295: FILE: arch/x86/include/asm/syscalls.h:28:
+long sys_clone(unsigned long, unsigned long, void __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#295: FILE: arch/x86/include/asm/syscalls.h:28:
+long sys_clone(unsigned long, unsigned long, void __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const stack_t __user *' should also have an identifier name
#303: FILE: arch/x86/include/asm/syscalls.h:36:
+long sys_sigaltstack(const stack_t __user *, stack_t __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'stack_t __user *' should also have an identifier name
#303: FILE: arch/x86/include/asm/syscalls.h:36:
+long sys_sigaltstack(const stack_t __user *, stack_t __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#303: FILE: arch/x86/include/asm/syscalls.h:36:
+long sys_sigaltstack(const stack_t __user *, stack_t __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm86_struct __user *' should also have an identifier name
#334: FILE: arch/x86/include/asm/syscalls.h:68:
+int sys_vm86old(struct vm86_struct __user *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#334: FILE: arch/x86/include/asm/syscalls.h:68:
+int sys_vm86old(struct vm86_struct __user *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#335: FILE: arch/x86/include/asm/syscalls.h:69:
+int sys_vm86(unsigned long, unsigned long, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#335: FILE: arch/x86/include/asm/syscalls.h:69:
+int sys_vm86(unsigned long, unsigned long, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#335: FILE: arch/x86/include/asm/syscalls.h:69:
+int sys_vm86(unsigned long, unsigned long, struct pt_regs *);

CHECK:SPACING: No space is necessary after a cast
#751: FILE: arch/x86/kernel/process.c:283:
+	regs.si = (unsigned long) fn;

CHECK:SPACING: No space is necessary after a cast
#752: FILE: arch/x86/kernel/process.c:284:
+	regs.di = (unsigned long) arg;

CHECK:SPACING: No space is necessary after a cast
#762: FILE: arch/x86/kernel/process.c:294:
+	regs.ip = (unsigned long) kernel_thread_helper;

ERROR:CODE_INDENT: code indent should use tabs where possible
#789: FILE: arch/x86/kernel/process.c:321:
+                set_thread_flag(TIF_IRET);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: arch/x86/kernel/process.c:321:
+                set_thread_flag(TIF_IRET);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#790: FILE: arch/x86/kernel/process.c:322:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: arch/x86/kernel/process.c:322:
+        }$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034009.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 42 warnings, 8 checks, 880 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034009.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
