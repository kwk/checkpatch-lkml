WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
Subject: [PATCH] slim: move file revocation into file_table.c and mprotect.c

WARNING:TYPO_SPELLING: 'verison' may be misspelled - perhaps 'version'?
#43: 
Move the file revocation code out of slim.  This first verison is
                                                       ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: fs/file_table.c:281:
+extern void mm_revoke_mmap_write(int(*need_revoke)(struct inode *, void *),
+							void *l);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: fs/file_table.c:296:
+int fd_revoke_write_iter(int(*need_revoke)(struct inode *, void *),
+		void *l)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#155: FILE: fs/file_table.c:332:
+		if (!(inode = file->f_dentry->d_inode))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: include/linux/fs.h:1600:
+extern int fd_revoke_write_iter(int(*need_revoke)(struct inode *, void *),

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: include/linux/fs.h:1601:
+extern int fd_revoke_write_iter(int(*need_revoke)(struct inode *, void *),
+		void *l);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/linux/mm.h:144:
+extern void mm_revoke_mmap_write(int(*need_revoke)(struct inode *, void *),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: include/linux/mm.h:145:
+extern void mm_revoke_mmap_write(int(*need_revoke)(struct inode *, void *),
+							void *l);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: include/linux/sched.h:387:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mm->ioctx_list"
#210: FILE: include/linux/sched.h:389:
+	if (mm->ioctx_list != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#234: FILE: mm/mprotect.c:322:
+		printk(KERN_WARNING "%s: do_mprotect failed", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#234: FILE: mm/mprotect.c:322:
+		printk(KERN_WARNING "%s: do_mprotect failed", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: mm/mprotect.c:329:
+void mm_revoke_mmap_write(int(*need_revoke)(struct inode *, void *),
+							void *l)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#256: FILE: mm/mprotect.c:344:
+		if (!(dentry = file->f_dentry))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#259: FILE: mm/mprotect.c:347:
+		if (!(inode = dentry->d_inode))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: mm/mprotect.c:351:
+^I^I^Icontinue;   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: mm/mprotect.c:353:
+    ^I^Iif (!(mpnt->vm_flags & VM_SHARED))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#265: FILE: mm/mprotect.c:353:
+    ^I^Iif (!(mpnt->vm_flags & VM_SHARED))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: mm/mprotect.c:353:
+    ^I^Iif (!(mpnt->vm_flags & VM_SHARED))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: mm/mprotect.c:354:
+^I^I^Icontinue;   $

CHECK:SPACING: No space is necessary after a cast
#307: FILE: security/slim/slm_main.c:117:
+	curl = (struct slm_file_xattr *) l;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#456: FILE: security/slim/slm_main.c:425:
+		if (rc == 0) {
[...]
+		} else if (rc == -EAGAIN && count < 5) {
[...]
-		return rc ? -EACCES : 0;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#467: FILE: security/slim/slm_main.c:433:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#532: FILE: security/slim/slm_main.c:965:
+		if (rc == 0) {
[...]
+		} else if (rc == -EAGAIN && count < 5) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#540: FILE: security/slim/slm_main.c:973:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#631: FILE: security/slim/slm_main.c:1151:
+	if (rc == 0) {
[...]
+	} else if (rc == -EAGAIN && count < 5) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#639: FILE: security/slim/slm_main.c:1159:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000465260.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 6 warnings, 15 checks, 532 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000465260.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
