CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: arch/x86/mm/fault.c:97:
+static int is_prefetch(struct pt_regs *regs, unsigned long error_code,
+			unsigned long addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: arch/x86/mm/fault.c:415:
+static noinline void pgtable_bad(struct pt_regs *regs,
+			 unsigned long error_code, unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: arch/x86/mm/fault.c:434:
+static noinline void no_context(struct pt_regs *regs,
+			unsigned long error_code, unsigned long address)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#174: FILE: arch/x86/mm/fault.c:484:
+	printk(KERN_EMERG "CR2: %016lx\n", address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: arch/x86/mm/fault.c:490:
+static void __bad_area_nosemaphore(struct pt_regs *regs,
+			unsigned long error_code, unsigned long address,

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#203: FILE: arch/x86/mm/fault.c:513:
+		    printk_ratelimit()) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#204: FILE: arch/x86/mm/fault.c:514:
+			printk(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#204: FILE: arch/x86/mm/fault.c:514:
+			printk(

CHECK:SPACING: No space is necessary after a cast
#208: FILE: arch/x86/mm/fault.c:518:
+			(void *) regs->ip, (void *) regs->sp, error_code);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#210: FILE: arch/x86/mm/fault.c:520:
+			printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: arch/x86/mm/fault.c:538:
+static noinline void bad_area_nosemaphore(struct pt_regs *regs,
+			unsigned long error_code, unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: arch/x86/mm/fault.c:544:
+static void __bad_area(struct pt_regs *regs,
+			unsigned long error_code, unsigned long address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: arch/x86/mm/fault.c:559:
+static noinline void bad_area(struct pt_regs *regs,
+			unsigned long error_code, unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: arch/x86/mm/fault.c:565:
+static noinline void bad_area_accerr(struct pt_regs *regs,
+			unsigned long error_code, unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: arch/x86/mm/fault.c:571:
+static void out_of_memory(struct pt_regs *regs,
+			unsigned long error_code, unsigned long address)

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#271: FILE: arch/x86/mm/fault.c:581:
+		yield();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#275: FILE: arch/x86/mm/fault.c:585:
+	printk("VM: killing process %s\n", tsk->comm);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: arch/x86/mm/fault.c:592:
+static void do_sigbus(struct pt_regs *regs,
+			unsigned long error_code, unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: arch/x86/mm/fault.c:614:
+static noinline void mm_fault_error(struct pt_regs *regs,
+		unsigned long error_code, unsigned long address, unsigned int fault)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#311: FILE: arch/x86/mm/fault.c:621:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: arch/x86/mm/fault.c:644:
+static noinline int spurious_fault(unsigned long error_code,
+				unsigned long address)

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#390: FILE: arch/x86/mm/fault.c:870:
+	if (unlikely(in_atomic() || !mm)) {

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204655.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 14 checks, 558 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204655.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
