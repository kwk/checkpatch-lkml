WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
This is a driver for the ARM PrimeCell PL061 GPIO AMBA peripheral. The driver

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: drivers/gpio/Kconfig:70:
+config GPIO_PL061
+	bool "PrimeCell PL061 GPIO support"
+	depends on ARM_AMBA
+	help
+	  Say yes here to support the PrimeCell PL061 GPIO device
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#102: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: drivers/gpio/pl061.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#108: FILE: drivers/gpio/pl061.c:2:
+ *  linux/drivers/gpio/pl061.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'interates' may be misspelled - perhaps 'iterates'?
#149: FILE: drivers/gpio/pl061.c:43:
+	 * interates through this list to find the source of the interrupt.
 	   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'regiters' may be misspelled - perhaps 'registers'?
#154: FILE: drivers/gpio/pl061.c:48:
+	 * regiters and data structurs. This decouples the code of the IRQ from
 	   ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#162: FILE: drivers/gpio/pl061.c:56:
+	unsigned		irq_base;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#166: FILE: drivers/gpio/pl061.c:60:
+static int pl061_direction_input(struct gpio_chip *gc, unsigned offset)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#184: FILE: drivers/gpio/pl061.c:78:
+static int pl061_direction_output(struct gpio_chip *gc, unsigned offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: drivers/gpio/pl061.c:79:
+static int pl061_direction_output(struct gpio_chip *gc, unsigned offset,
+		int value)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#204: FILE: drivers/gpio/pl061.c:98:
+static int pl061_get_value(struct gpio_chip *gc, unsigned offset)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#211: FILE: drivers/gpio/pl061.c:105:
+static void pl061_set_value(struct gpio_chip *gc, unsigned offset, int value)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#221: FILE: drivers/gpio/pl061.c:115:
+static void pl061_irq_disable(unsigned irq)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#235: FILE: drivers/gpio/pl061.c:129:
+static void pl061_irq_enable(unsigned irq)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#249: FILE: drivers/gpio/pl061.c:143:
+static int pl061_irq_type(unsigned irq, unsigned trigger)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#249: FILE: drivers/gpio/pl061.c:143:
+static int pl061_irq_type(unsigned irq, unsigned trigger)

CHECK:BRACES: braces {} should be used on all arms of this statement
#264: FILE: drivers/gpio/pl061.c:158:
+	if (trigger & (IRQ_TYPE_LEVEL_HIGH | IRQ_TYPE_LEVEL_LOW)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#270: FILE: drivers/gpio/pl061.c:164:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#275: FILE: drivers/gpio/pl061.c:169:
+	if ((trigger & IRQ_TYPE_EDGE_BOTH) == IRQ_TYPE_EDGE_BOTH)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#277: FILE: drivers/gpio/pl061.c:171:
+	else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#300: FILE: drivers/gpio/pl061.c:194:
+static void pl061_irq_handler(unsigned irq, struct irq_desc *desc)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdata"
#333: FILE: drivers/gpio/pl061.c:227:
+	if (pdata == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#337: FILE: drivers/gpio/pl061.c:231:
+	if (chip == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip->base"
#347: FILE: drivers/gpio/pl061.c:241:
+	if (chip->base == NULL) {

CHECK:SPACING: No space is necessary after a cast
#376: FILE: drivers/gpio/pl061.c:270:
+	if (chip->irq_base == (unsigned) -1)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#376: FILE: drivers/gpio/pl061.c:270:
+	if (chip->irq_base == (unsigned) -1)

CHECK:BRACES: braces {} should be used on all arms of this statement
#386: FILE: drivers/gpio/pl061.c:280:
+	if (!test_and_set_bit(irq, init_irq)) { /* list initialized? */
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip_list"
#388: FILE: drivers/gpio/pl061.c:282:
+		if (chip_list == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#394: FILE: drivers/gpio/pl061.c:288:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: drivers/gpio/pl061.c:295:
+			pl061_direction_output(&chip->gc, i,
+					pdata->values & (1 << i));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#405: FILE: drivers/gpio/pl061.c:299:
+		set_irq_chip(i+chip->irq_base, &pl061_irqchip);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#406: FILE: drivers/gpio/pl061.c:300:
+		set_irq_handler(i+chip->irq_base, handle_simple_irq);
 		                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#407: FILE: drivers/gpio/pl061.c:301:
+		set_irq_flags(i+chip->irq_base, IRQF_VALID);
 		               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#408: FILE: drivers/gpio/pl061.c:302:
+		set_irq_chip_data(i+chip->irq_base, chip);
 		                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#454: FILE: include/linux/amba/pl061.h:1:
+/* platform data for the PL061 GPIO driver */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#458: FILE: include/linux/amba/pl061.h:5:
+	unsigned	gpio_base;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#464: FILE: include/linux/amba/pl061.h:11:
+	unsigned	irq_base;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108793.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 21 warnings, 17 checks, 375 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108793.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
