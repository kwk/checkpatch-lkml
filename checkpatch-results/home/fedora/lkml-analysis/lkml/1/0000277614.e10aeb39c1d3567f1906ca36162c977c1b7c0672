WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#41: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: fs/aufs/hinode.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#60: FILE: fs/aufs/hinode.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#61: FILE: fs/aufs/hinode.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <AuLockFunc>
#216: FILE: fs/aufs/hinode.h:171:
+#define AuLockFunc(name, lsc) \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_##lsc>
#219: FILE: fs/aufs/hinode.h:174:
+{ au_do_hdir_lock(h_dir, dir, bindex, AuLsc_I_##lsc); }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#236: FILE: fs/aufs/hinotify.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#250: FILE: fs/aufs/hinotify.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#251: FILE: fs/aufs/hinotify.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <AuInMask>
#261: FILE: fs/aufs/hinotify.c:26:
+static const __u32 AuInMask = (IN_MOVE | IN_DELETE | IN_CREATE

CHECK:CAMELCASE: Avoid CamelCase: <AuCacheFuncs>
#271: FILE: fs/aufs/hinotify.c:36:
+AuCacheFuncs(hinotify, AuCache_HINOTIFY);

CHECK:CAMELCASE: Avoid CamelCase: <AuCache_HINOTIFY>
#271: FILE: fs/aufs/hinotify.c:36:
+AuCacheFuncs(hinotify, AuCache_HINOTIFY);

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#280: FILE: fs/aufs/hinotify.c:45:
+	LKTRTrace("i%lu, hi%lu\n", inode->i_ino, hidden_inode->i_ino);

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#285: FILE: fs/aufs/hinotify.c:50:
+		AuDebugOn(hinode->hi_notify);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#303: FILE: fs/aufs/hinotify.c:68:
+	AuTraceErr(err);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceEnter>
#312: FILE: fs/aufs/hinotify.c:77:
+	AuTraceEnter();

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#336: FILE: fs/aufs/hinotify.c:101:
+	IMustLock(h_inode);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#341: FILE: fs/aufs/hinotify.c:106:
+#if 0 /* reserved for future use */

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: fs/aufs/hinotify.c:109:
+		u32 wd;
+		wd = inotify_find_update_watch(in_handle, h_inode, mask);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#398: FILE: fs/aufs/hinotify.c:163:
+		  AuDLNPair(h_parents[0]), AuDLNPair(h_parents[1]));

CHECK:CAMELCASE: Avoid CamelCase: <AuHi_XINO>
#451: FILE: fs/aufs/hinotify.c:216:
+				      flags & ~AuHi_XINO);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#452: FILE: fs/aufs/hinotify.c:217:
+			iput(hi);
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#469: FILE: fs/aufs/hinotify.c:234:
+	if ((ia->ia_valid & (ATTR_UID | ATTR_GID | ATTR_MODE))
+	    || (ia->ia_valid & amtime) == amtime)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#472: FILE: fs/aufs/hinotify.c:237:
+	if ((ia->ia_valid & ATTR_SIZE)
+	    || (ia->ia_valid & amtime) == ATTR_MTIME)

CHECK:CAMELCASE: Avoid CamelCase: <DbgInotify>
#541: FILE: fs/aufs/hinotify.c:306:
+#ifdef DbgInotify

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#542: FILE: fs/aufs/hinotify.c:307:
+	AuDbg("hi%lu, 0x%x\n", hinode->hi_inode->i_ino, events);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#578: FILE: fs/aufs/hinotify.c:343:
+#define test_ret(flag)	if (mask & flag) return #flag;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flag' may be better as '(flag)' to avoid precedence issues
#578: FILE: fs/aufs/hinotify.c:343:
+#define test_ret(flag)	if (mask & flag) return #flag;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#578: FILE: fs/aufs/hinotify.c:343:
+#define test_ret(flag)	if (mask & flag) return #flag;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#578: FILE: fs/aufs/hinotify.c:343:
+#define test_ret(flag)	if (mask & flag) return #flag;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#657: FILE: fs/aufs/hinotify.c:422:
+		AuWarn("wrong root branch\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#658: FILE: fs/aufs/hinotify.c:423:
+		iput(inode);
 		^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#686: FILE: fs/aufs/hinotify.c:451:
+#if 0 /* reserved for future use */

WARNING:LINE_SPACING: Missing a blank line after declarations
#739: FILE: fs/aufs/hinotify.c:504:
+			struct dentry *d;
+			d = dentries[j];

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#748: FILE: fs/aufs/hinotify.c:513:
+				/* todo: reset children xino?
+				   cached children only? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#748: FILE: fs/aufs/hinotify.c:513:
+				   cached children only? */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#790: FILE: fs/aufs/hinotify.c:555:
+			if (dname->len != nlen
+			    && memcmp(dname->name, name, nlen))

CHECK:CAMELCASE: Avoid CamelCase: <AuHinJob_XINO0>
#872: FILE: fs/aufs/hinotify.c:637:
+#define AuHinJob_XINO0	1

CHECK:CAMELCASE: Avoid CamelCase: <AuHinJob_GEN>
#873: FILE: fs/aufs/hinotify.c:638:
+#define AuHinJob_GEN	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#873: FILE: fs/aufs/hinotify.c:638:
+#define AuHinJob_GEN	(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <AuHinJob_DIRENT>
#874: FILE: fs/aufs/hinotify.c:639:
+#define AuHinJob_DIRENT	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#874: FILE: fs/aufs/hinotify.c:639:
+#define AuHinJob_DIRENT	(1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <AuHinJob_ATTR>
#875: FILE: fs/aufs/hinotify.c:640:
+#define AuHinJob_ATTR	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#875: FILE: fs/aufs/hinotify.c:640:
+#define AuHinJob_ATTR	(1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <AuHinJob_ISDIR>
#876: FILE: fs/aufs/hinotify.c:641:
+#define AuHinJob_ISDIR	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#876: FILE: fs/aufs/hinotify.c:641:
+#define AuHinJob_ISDIR	(1 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <AuHinJob_TRYXINO0>
#877: FILE: fs/aufs/hinotify.c:642:
+#define AuHinJob_TRYXINO0 (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#877: FILE: fs/aufs/hinotify.c:642:
+#define AuHinJob_TRYXINO0 (1 << 5)

CHECK:CAMELCASE: Avoid CamelCase: <AuHinJob_MNTPNT>
#878: FILE: fs/aufs/hinotify.c:643:
+#define AuHinJob_MNTPNT	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#878: FILE: fs/aufs/hinotify.c:643:
+#define AuHinJob_MNTPNT	(1 << 6)

CHECK:CAMELCASE: Avoid CamelCase: <AuHinJob_##name>
#879: FILE: fs/aufs/hinotify.c:644:
+#define au_ftest_hinjob(flags, name)	((flags) & AuHinJob_##name)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#901: FILE: fs/aufs/hinotify.c:666:
+	if (au_ftest_hinjob(a->flags, TRYXINO0)
+	    && a->inode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#902: FILE: fs/aufs/hinotify.c:667:
+	    && a->inode
+	    && a->h_inode) {

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#903: FILE: fs/aufs/hinotify.c:668:
+		mutex_lock_nested(&a->h_inode->i_mutex, AuLsc_I_CHILD);

WARNING:LINE_SPACING: Missing a blank line after declarations
#913: FILE: fs/aufs/hinotify.c:678:
+		int err = -1;
+		if (a->inode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#924: FILE: fs/aufs/hinotify.c:689:
+		struct au_vdir *vdir;
+		IiMustWriteLock(a->inode);

CHECK:CAMELCASE: Avoid CamelCase: <IiMustWriteLock>
#924: FILE: fs/aufs/hinotify.c:689:
+		IiMustWriteLock(a->inode);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#938: FILE: fs/aufs/hinotify.c:703:
+	if (au_ftest_hinjob(a->flags, MNTPNT)
+	    && a->dentry

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#939: FILE: fs/aufs/hinotify.c:704:
+	    && a->dentry
+	    && d_mountpoint(a->dentry))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1008: FILE: fs/aufs/hinotify.c:773:
+	if (a->h_child_nlen
+	    && (au_ftest_hinjob(a->flags[CHILD], GEN)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1009: FILE: fs/aufs/hinotify.c:774:
+	    && (au_ftest_hinjob(a->flags[CHILD], GEN)
+		|| au_ftest_hinjob(a->flags[CHILD], MNTPNT)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1015: FILE: fs/aufs/hinotify.c:780:
+	if (xino && !inode && h_ino
+	    && (au_ftest_hinjob(a->flags[CHILD], XINO0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1016: FILE: fs/aufs/hinotify.c:781:
+	    && (au_ftest_hinjob(a->flags[CHILD], XINO0)
+		|| au_ftest_hinjob(a->flags[CHILD], TRYXINO0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1017: FILE: fs/aufs/hinotify.c:782:
+		|| au_ftest_hinjob(a->flags[CHILD], TRYXINO0)
+		|| au_ftest_hinjob(a->flags[CHILD], GEN)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1018: FILE: fs/aufs/hinotify.c:783:
+		|| au_ftest_hinjob(a->flags[CHILD], GEN)
+		|| au_ftest_hinjob(a->flags[CHILD], ATTR)))

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1035: FILE: fs/aufs/hinotify.c:800:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1054: FILE: fs/aufs/hinotify.c:819:
+	iput(a->h_child_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1055: FILE: fs/aufs/hinotify.c:820:
+	iput(a->h_dir);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1056: FILE: fs/aufs/hinotify.c:821:
+	iput(a->dir);
 	^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1092: FILE: fs/aufs/hinotify.c:857:
+		AuDbg("i%lu, wd %d, mask 0x%x %s, cookie 0x%x, hcname %s,"
+		      " hi%lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1103: FILE: fs/aufs/hinotify.c:868:
+	if (0 <= atomic_dec_return(cnt))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1130: FILE: fs/aufs/hinotify.c:895:
+		/*FALLTHROUGH*/

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1132: FILE: fs/aufs/hinotify.c:897:
+		if (h_child_inode) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1135: FILE: fs/aufs/hinotify.c:900:
+		} else

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1180: FILE: fs/aufs/hinotify.c:945:
+		/*FALLTHROUGH*/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1191: FILE: fs/aufs/hinotify.c:956:
+			iput(dir);
 			^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1209: FILE: fs/aufs/hinotify.c:974:
+	/* iput() and kfree() will be called in postproc() */
 	   ^^^^

CHECK:CAMELCASE: Avoid CamelCase: <AuErr1>
#1218: FILE: fs/aufs/hinotify.c:983:
+		AuErr1("no memory\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1219: FILE: fs/aufs/hinotify.c:984:
+		iput(dir);
 		^^^^

CHECK:CAMELCASE: Avoid CamelCase: <AuErr>
#1243: FILE: fs/aufs/hinotify.c:1008:
+		AuErr("wkq %d\n", wkq_err);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1251: FILE: fs/aufs/hinotify.c:1016:
+	return;
+}

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1275: FILE: fs/aufs/hinotify.c:1040:
+	au_cachep[AuCache_HINOTIFY]
+		= AuCacheX(au_hinotify, sizeof(atomic_t) * au_hin_nignore);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:CAMELCASE: Avoid CamelCase: <AuCacheX>
#1275: FILE: fs/aufs/hinotify.c:1040:
+		= AuCacheX(au_hinotify, sizeof(atomic_t) * au_hin_nignore);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#1285: FILE: fs/aufs/hinotify.c:1050:
+	AuTraceErrPtr(in_handle);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277614.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 27 warnings, 52 checks, 1243 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277614.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
