WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#43: FILE: drivers/scsi/scsi_lib.c:2118:
+ * ^Isdev_evt_emit - emit a single SCSI device uevent$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#70: FILE: drivers/scsi/scsi_lib.c:2145:
+ * ^Isdev_evt_thread - send a uevent for each scsi event$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#105: FILE: drivers/scsi/scsi_lib.c:2180:
+ * ^Isdev_evt_send - send asserted event to uevent thread$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: drivers/scsi/scsi_lib.c:2203:
+ * ^Isdev_evt_alloc - allocate a new scsi event$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*evt)...) over kzalloc(sizeof(struct scsi_event)...)
#137: FILE: drivers/scsi/scsi_lib.c:2212:
+	struct scsi_event *evt = kzalloc(sizeof(struct scsi_event), gfpflags);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#138: FILE: drivers/scsi/scsi_lib.c:2213:
+	struct scsi_event *evt = kzalloc(sizeof(struct scsi_event), gfpflags);
+	if (!evt)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#157: FILE: drivers/scsi/scsi_lib.c:2232:
+ * ^Isdev_evt_send_simple - send asserted event to uevent thread$

WARNING:LINE_SPACING: Missing a blank line after declarations
#168: FILE: drivers/scsi/scsi_lib.c:2243:
+	struct scsi_event *evt = sdev_evt_alloc(evt_type, gfpflags);
+	if (!evt) {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#190: FILE: drivers/scsi/scsi_scan.c:239:
+	extern void scsi_evt_thread(struct work_struct *work);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <Cap_name>
#237: FILE: drivers/scsi/scsi_sysfs.c:628:
+#define DECLARE_EVT_SHOW(name, Cap_name)				\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SDEV_EVT_##Cap_name>
#243: FILE: drivers/scsi/scsi_sysfs.c:634:
+	int val = test_bit(SDEV_EVT_##Cap_name, sdev->supported_events);\

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#253: FILE: drivers/scsi/scsi_sysfs.c:644:
+	int val = simple_strtoul(buf, NULL, 0);				\

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#263: FILE: drivers/scsi/scsi_sysfs.c:654:
+#define DECLARE_EVT(name, Cap_name)					\
+	DECLARE_EVT_SHOW(name, Cap_name)				\
+	DECLARE_EVT_STORE(name, Cap_name)				\
+	static DEVICE_ATTR(evt_##name, S_IRUGO, sdev_show_evt_##name,	\
+			   sdev_store_evt_##name);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#263: FILE: drivers/scsi/scsi_sysfs.c:654:
+#define DECLARE_EVT(name, Cap_name)					\
+	DECLARE_EVT_SHOW(name, Cap_name)				\
+	DECLARE_EVT_STORE(name, Cap_name)				\
+	static DEVICE_ATTR(evt_##name, S_IRUGO, sdev_show_evt_##name,	\
+			   sdev_store_evt_##name);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Cap_name' - possible side-effects?
#263: FILE: drivers/scsi/scsi_sysfs.c:654:
+#define DECLARE_EVT(name, Cap_name)					\
+	DECLARE_EVT_SHOW(name, Cap_name)				\
+	DECLARE_EVT_STORE(name, Cap_name)				\
+	static DEVICE_ATTR(evt_##name, S_IRUGO, sdev_show_evt_##name,	\
+			   sdev_store_evt_##name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#263: FILE: drivers/scsi/scsi_sysfs.c:654:
+#define DECLARE_EVT(name, Cap_name)					\
+	DECLARE_EVT_SHOW(name, Cap_name)				\
+	DECLARE_EVT_STORE(name, Cap_name)				\
+	static DEVICE_ATTR(evt_##name, S_IRUGO, sdev_show_evt_##name,	\
+			   sdev_store_evt_##name);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#266: FILE: drivers/scsi/scsi_sysfs.c:657:
+	static DEVICE_ATTR(evt_##name, S_IRUGO, sdev_show_evt_##name,	\

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#268: FILE: drivers/scsi/scsi_sysfs.c:659:
+#define REF_EVT(name) &dev_attr_evt_##name.attr

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#325: FILE: include/scsi/scsi_device.h:298:
+extern struct scsi_event *sdev_evt_alloc(enum scsi_device_event evt_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: include/scsi/scsi_device.h:299:
+extern struct scsi_event *sdev_evt_alloc(enum scsi_device_event evt_type,
+					  gfp_t gfpflags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: include/scsi/scsi_device.h:300:
+extern void sdev_evt_send(struct scsi_device *sdev, struct scsi_event *evt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#328: FILE: include/scsi/scsi_device.h:301:
+extern void sdev_evt_send_simple(struct scsi_device *sdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: include/scsi/scsi_device.h:302:
+extern void sdev_evt_send_simple(struct scsi_device *sdev,
+			  enum scsi_device_event evt_type, gfp_t gfpflags);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363581.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 11 warnings, 10 checks, 272 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363581.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
