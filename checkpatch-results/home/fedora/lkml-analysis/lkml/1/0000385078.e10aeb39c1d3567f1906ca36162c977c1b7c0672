WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
TASKSTATS_CMD_ATTR_TGID also aggregates the accounting info for all threads of a

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: Documentation/accounting/dump-test.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: space prohibited before semicolon
#187: FILE: Documentation/accounting/dump-test.c:40:
+		while (read(fd, buffer, sizeof(buffer)) > 0) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#187: FILE: Documentation/accounting/dump-test.c:40:
+		while (read(fd, buffer, sizeof(buffer)) > 0) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#195: FILE: Documentation/accounting/dump-test.c:48:
+static volatile pid_t tid;

WARNING:SPACING: space prohibited before semicolon
#250: FILE: Documentation/accounting/dump-test.c:103:
+	for (;;) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#250: FILE: Documentation/accounting/dump-test.c:103:
+	for (;;) ;

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#274: FILE: Documentation/accounting/dump-test.c:127:
+	fd = creat(TMP_PATH, 0600);
 	     ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: Documentation/accounting/dump-test.c:136:
+		int remaining = sizeof(buffer);
+		while (remaining) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: Documentation/accounting/dump-test.c:138:
+			int written = write(fd, buffer, remaining);
+			if (written > 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#285: FILE: Documentation/accounting/dump-test.c:138:
+			if (written > 0)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#287: FILE: Documentation/accounting/dump-test.c:140:
+			else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!request"
#341: FILE: Documentation/accounting/dump-test.c:194:
+	if (request == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!request_header"
#349: FILE: Documentation/accounting/dump-test.c:202:
+	if (request_header == NULL) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#378: FILE: Documentation/accounting/dump-test.c:231:
+	nla_for_each_nested(nlattr, reply, len)
+	    if (nlattr->nla_type == TASKSTATS_TYPE_STATS) {

WARNING:TABSTOP: Statements should start on a tabstop
#379: FILE: Documentation/accounting/dump-test.c:232:
+	    if (nlattr->nla_type == TASKSTATS_TYPE_STATS) {

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#392: FILE: Documentation/accounting/dump-test.c:245:
+#define LINE(fo, f) do {						    \
              ^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fo' - possible side-effects?
#392: FILE: Documentation/accounting/dump-test.c:245:
+#define LINE(fo, f) do {						    \
+	char *stripped = strndup(#f, 14);				    \
+	printf("%-14s|" fo "|" fo "|" fo "|" fo "|" fo "|\n", stripped,	    \
+	       stats[0].f, stats[1].f, stats[2].f, stats[3].f, stats[4].f); \
+	free(stripped);							    \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#392: FILE: Documentation/accounting/dump-test.c:245:
+#define LINE(fo, f) do {						    \
+	char *stripped = strndup(#f, 14);				    \
+	printf("%-14s|" fo "|" fo "|" fo "|" fo "|" fo "|\n", stripped,	    \
+	       stats[0].f, stats[1].f, stats[2].f, stats[3].f, stats[4].f); \
+	free(stripped);							    \
+} while (0)

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#394: FILE: Documentation/accounting/dump-test.c:247:
+	printf("%-14s|" fo "|" fo "|" fo "|" fo "|" fo "|\n", stripped,	    \
 	                ^^

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#394: FILE: Documentation/accounting/dump-test.c:247:
+	printf("%-14s|" fo "|" fo "|" fo "|" fo "|" fo "|\n", stripped,	    \
 	                       ^^

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#394: FILE: Documentation/accounting/dump-test.c:247:
+	printf("%-14s|" fo "|" fo "|" fo "|" fo "|" fo "|\n", stripped,	    \
 	                              ^^

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#394: FILE: Documentation/accounting/dump-test.c:247:
+	printf("%-14s|" fo "|" fo "|" fo "|" fo "|" fo "|\n", stripped,	    \
 	                                     ^^

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#394: FILE: Documentation/accounting/dump-test.c:247:
+	printf("%-14s|" fo "|" fo "|" fo "|" fo "|" fo "|\n", stripped,	    \
 	                                            ^^

WARNING:SPLIT_STRING: quoted string split across lines
#402: FILE: Documentation/accounting/dump-test.c:255:
+	puts("Name          |      System|        User|  Cached I/O"
+	     "|        Self|       Group|");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#404: FILE: Documentation/accounting/dump-test.c:257:
+	puts("--------------+------------+------------+------------"
+	     "+------------+------------+");

WARNING:LINE_SPACING: Missing a blank line after declarations
#448: FILE: Documentation/accounting/dump-test.c:301:
+	pid_t cached_io = start_thread(cached_io_thread, 0);
+	start_thread(dead_thread_having_written, 1);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#584: FILE: kernel/taskstats.c:281:
+	do
[...]
+			add_tsk(stats, tsk);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385078.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 20 warnings, 6 checks, 622 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385078.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
