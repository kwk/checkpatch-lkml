WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: fs/pramfs/namei.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#48: FILE: fs/pramfs/namei.c:2:
+ * FILE NAME fs/pramfs/namei.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: fs/pramfs/namei.c:39:
+static inline int pram_add_nondir(struct inode *dir,
+				   struct dentry *dentry,

WARNING:LINE_SPACING: Missing a blank line after declarations
#89: FILE: fs/pramfs/namei.c:43:
+	int err = pram_add_link(dentry, inode);
+	if (!err) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#94: FILE: fs/pramfs/namei.c:48:
+	iput(inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#132: FILE: fs/pramfs/namei.c:86:
+pram_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)
                                                                         ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: fs/pramfs/namei.c:97:
+		struct pram_inode *pi = pram_get_inode(dir->i_sb, ino);
+		inode = pram_fill_new_inode(dir->i_sb, pi);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#152: FILE: fs/pramfs/namei.c:106:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#162: FILE: fs/pramfs/namei.c:116:
+			int mode, struct nameidata *nd)
 			                            ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: fs/pramfs/namei.c:116:
+static int pram_create(struct inode *dir, struct dentry *dentry,
+			int mode, struct nameidata *nd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#166: FILE: fs/pramfs/namei.c:120:
+	int err = PTR_ERR(inode);
+	if (!IS_ERR(inode)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#167: FILE: fs/pramfs/namei.c:121:
+	if (!IS_ERR(inode)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: fs/pramfs/namei.c:131:
+static int pram_mknod(struct inode *dir, struct dentry *dentry, int mode,
+		       dev_t rdev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: fs/pramfs/namei.c:135:
+	int err = PTR_ERR(inode);
+	if (!IS_ERR(inode)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: fs/pramfs/namei.c:144:
+static int pram_symlink(struct inode *dir,
+			  struct dentry *dentry,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#195: FILE: fs/pramfs/namei.c:149:
+	unsigned len = strlen(symname);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#198: FILE: fs/pramfs/namei.c:152:
+	if (len+1 > sb->s_blocksize)
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#201: FILE: fs/pramfs/namei.c:155:
+	inode = pram_new_inode(dir, S_IFLNK | S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#222: FILE: fs/pramfs/namei.c:176:
+	iput(inode);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: fs/pramfs/namei.c:181:
+static int pram_link(struct dentry *dest_dentry,
+		       struct inode *dir,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#231: FILE: fs/pramfs/namei.c:185:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: fs/pramfs/namei.c:191:
+	struct inode *inode = dentry->d_inode;
+	inode->i_ctime = dir->i_ctime;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#271: FILE: fs/pramfs/namei.c:225:
+	pi->i_type.dir.head = pi->i_type.dir.tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#285: FILE: fs/pramfs/namei.c:239:
+	iput(inode);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: fs/pramfs/namei.c:272:
+static int pram_rename(struct inode  *old_dir,
+			struct dentry *old_dentry,

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#364: FILE: fs/pramfs/namei.c:318:
+struct inode_operations pram_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110773.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 10 checks, 328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110773.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
