WARNING:MISPLACED_INIT: __cpuinitdata should be placed after smp_cpu_nb
#83: FILE: arch/s390/kernel/smp.c:855:
+static struct notifier_block __cpuinitdata smp_cpu_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: drivers/s390/char/sclp_config.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#130: FILE: drivers/s390/char/sclp_config.c:2:
+ *  drivers/s390/char/sclp_config.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#148: FILE: drivers/s390/char/sclp_config.c:20:
+} __attribute__((packed));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#159: FILE: drivers/s390/char/sclp_config.c:31:
+	printk(KERN_WARNING TAG "cpu capability changed.\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#178: FILE: drivers/s390/char/sclp_config.c:50:
+static struct sclp_register sclp_conf_register =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#191: FILE: drivers/s390/char/sclp_config.c:63:
+		printk(KERN_ERR TAG "failed to register (%d).\n", rc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#196: FILE: drivers/s390/char/sclp_config.c:68:
+		printk(KERN_WARNING TAG "no configuration management.\n");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#198: FILE: drivers/s390/char/sclp_config.c:70:
+		rc = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#203: FILE: drivers/s390/char/sclp_config.c:75:
+__initcall(sclp_conf_init);

CHECK:SPACING: No space is necessary after a cast
#237: FILE: drivers/s390/sysinfo.c:365:
+	info = (void *) get_zeroed_page(GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#241: FILE: drivers/s390/sysinfo.c:369:
+	if (rc == -ENOSYS)

CHECK:SPACING: No space is necessary after a cast
#246: FILE: drivers/s390/sysinfo.c:374:
+	free_page((unsigned long) info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: include/asm-s390/processor.h:60:
+extern int get_cpu_capability(unsigned int *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int *' should also have an identifier name
#261: FILE: include/asm-s390/processor.h:60:
+extern int get_cpu_capability(unsigned int *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000439937.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 3 checks, 190 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000439937.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
