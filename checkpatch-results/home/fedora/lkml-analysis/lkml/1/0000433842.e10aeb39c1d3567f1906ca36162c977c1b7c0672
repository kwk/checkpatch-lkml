WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: drivers/lguest/core.c:1:
+/* World's simplest hypervisor, to test paravirt_ops and show

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#55: FILE: drivers/lguest/core.c:2:
+ * unbelievers that virtualization is the future.  Plus, it's fun! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#66: FILE: drivers/lguest/core.c:13:
+#include <asm/pgtable.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#67: FILE: drivers/lguest/core.c:14:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#76: FILE: drivers/lguest/core.c:23:
+extern unsigned long default_idt_entries[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#114: FILE: drivers/lguest/core.c:61:
+		  (SWITCHER_ADDR + SHARED_SWITCHER_PAGES*PAGE_SIZE))[cpu]);
 		                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#122: FILE: drivers/lguest/core.c:69:
+	switcher_page = kmalloc(sizeof(switcher_page[0])*TOTAL_SWITCHER_PAGES,
 	                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: drivers/lguest/core.c:78:
+		unsigned long addr = get_zeroed_page(GFP_KERNEL);
+		if (!addr) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: drivers/lguest/core.c:86:
+	switcher_vma = __get_vm_area(TOTAL_SWITCHER_PAGES * PAGE_SIZE,
+				       VM_ALLOC, SWITCHER_ADDR, VMALLOC_END);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#142: FILE: drivers/lguest/core.c:89:
+		printk("lguest: could not map switcher pages high\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#149: FILE: drivers/lguest/core.c:96:
+		printk("lguest: map_vm_area failed: %i\n", err);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#164: FILE: drivers/lguest/core.c:111:
+		state->host_gdt_desc.size = GDT_SIZE-1;
 		                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#167: FILE: drivers/lguest/core.c:114:
+		state->guest_idt_desc.size = sizeof(state->guest_idt)-1;
 		                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#169: FILE: drivers/lguest/core.c:116:
+		state->guest_gdt_desc.size = sizeof(state->guest_gdt)-1;
 		                                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#187: FILE: drivers/lguest/core.c:134:
+	printk(KERN_INFO "lguest: mapped switcher at %p\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#264: FILE: drivers/lguest/core.c:211:
+	return (addr+len) / PAGE_SIZE < lg->pfn_limit && (addr+len >= addr);
 	            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#264: FILE: drivers/lguest/core.c:211:
+	return (addr+len) / PAGE_SIZE < lg->pfn_limit && (addr+len >= addr);
 	                                                      ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#274: FILE: drivers/lguest/core.c:221:
+	if (!lguest_address_ok(lg, addr, sizeof(val))
+	    || get_user(val, (u32 __user *)addr) != 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#282: FILE: drivers/lguest/core.c:229:
+	if (!lguest_address_ok(lg, addr, sizeof(val))
+	    || put_user(val, (u32 __user *)addr) != 0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#286: FILE: drivers/lguest/core.c:233:
+void lgread(struct lguest *lg, void *b, u32 addr, unsigned bytes)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#289: FILE: drivers/lguest/core.c:236:
+	if (!lguest_address_ok(lg, addr, bytes)
+	    || copy_from_user(b, (void __user *)addr, bytes) != 0) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#296: FILE: drivers/lguest/core.c:243:
+void lgwrite(struct lguest *lg, u32 addr, const void *b, unsigned bytes)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#299: FILE: drivers/lguest/core.c:246:
+	if (!lguest_address_ok(lg, addr, bytes)
+	    || copy_to_user((void __user *)addr, b, bytes) != 0)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#309: FILE: drivers/lguest/core.c:256:
+		write_cr0(cr0|8);
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#359: FILE: drivers/lguest/core.c:306:
+			    put_user(lg->pending_key, (unsigned long *)user+1))
 			                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#361: FILE: drivers/lguest/core.c:308:
+			return sizeof(unsigned long)*2;
 			                            ^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#414: FILE: drivers/lguest/core.c:361:
+		case 32 ... 255: /* Real interrupt, fall thru */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: drivers/lguest/core.c:380:
+	unsigned int i;
+	for (i = 0; i < MAX_LGUEST_GUESTS; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#452: FILE: drivers/lguest/core.c:399:
+		printk("lguest is afraid of %s\n", paravirt_ops.name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#504: FILE: drivers/lguest/hypercalls.c:1:
+/*  Actual hypercalls, which allow guests to actually do something.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#505: FILE: drivers/lguest/hypercalls.c:2:
+/*  Actual hypercalls, which allow guests to actually do something.
+    Copyright (C) 2006 Rusty Russell IBM Corporation

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#518: FILE: drivers/lguest/hypercalls.c:15:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#519: FILE: drivers/lguest/hypercalls.c:16:
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA$

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#525: FILE: drivers/lguest/hypercalls.c:22:
+#include <asm/pgtable.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#539: FILE: drivers/lguest/hypercalls.c:36:
+		char msg[128];
+		lgread(lg, msg, regs->edx, sizeof(msg));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#540: FILE: drivers/lguest/hypercalls.c:37:
+		msg[sizeof(msg)-1] = '\0';
 		               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#552: FILE: drivers/lguest/hypercalls.c:49:
+		u32 now = jiffies;
+		mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#552: FILE: drivers/lguest/hypercalls.c:49:
+		mb();

WARNING:LINE_SPACING: Missing a blank line after declarations
#559: FILE: drivers/lguest/hypercalls.c:56:
+		struct timespec ts;
+		ktime_get_real_ts(&ts);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#589: FILE: drivers/lguest/hypercalls.c:86:
+		guest_load_tls(lg, (struct desc_struct __user*)regs->edx);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#622: FILE: drivers/lguest/hypercalls.c:119:
+		if (get_user(regs.eax, &lg->lguest_data->hcalls[n].eax)
+		    || get_user(regs.edx, &lg->lguest_data->hcalls[n].edx)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#623: FILE: drivers/lguest/hypercalls.c:120:
+		    || get_user(regs.edx, &lg->lguest_data->hcalls[n].edx)
+		    || get_user(regs.ecx, &lg->lguest_data->hcalls[n].ecx)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#624: FILE: drivers/lguest/hypercalls.c:121:
+		    || get_user(regs.ecx, &lg->lguest_data->hcalls[n].ecx)
+		    || get_user(regs.ebx, &lg->lguest_data->hcalls[n].ebx)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#656: FILE: drivers/lguest/hypercalls.c:153:
+	if (get_user(lg->noirq_start, &lg->lguest_data->noirq_start)
+	    || get_user(lg->noirq_end, &lg->lguest_data->noirq_end)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#658: FILE: drivers/lguest/hypercalls.c:155:
+	    /* We reserve the top pgd entry. */
+	    || put_user(4U*1024*1024, &lg->lguest_data->reserve_mem)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#658: FILE: drivers/lguest/hypercalls.c:155:
+	    || put_user(4U*1024*1024, &lg->lguest_data->reserve_mem)
 	                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#658: FILE: drivers/lguest/hypercalls.c:155:
+	    || put_user(4U*1024*1024, &lg->lguest_data->reserve_mem)
 	                       ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#659: FILE: drivers/lguest/hypercalls.c:156:
+	    || put_user(4U*1024*1024, &lg->lguest_data->reserve_mem)
+	    || put_user(lg->guestid, &lg->lguest_data->guestid))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#665: FILE: drivers/lguest/hypercalls.c:162:
+	 * the old (read-only) page. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#670: FILE: drivers/lguest/hypercalls.c:167:
+ * the hypercall again. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#697: FILE: drivers/lguest/interrupts_and_traps.c:1:
+#include <linux/uaccess.h>

ERROR:SPACING: space required one side of that '--' (ctx:VxV)
#717: FILE: drivers/lguest/interrupts_and_traps.c:21:
+	lgwrite_u32(lg, (u32)--(*gstack), val);
 	                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#726: FILE: drivers/lguest/interrupts_and_traps.c:30:
+	if ((lg->regs->ss&0x3) != GUEST_PL) {
 	                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#737: FILE: drivers/lguest/interrupts_and_traps.c:41:
+	/* We use IF bit in eflags to indicate whether irqs were disabled
+	   (it's always 0, since irqs are enabled when guest is running). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#737: FILE: drivers/lguest/interrupts_and_traps.c:41:
+	   (it's always 0, since irqs are enabled when guest is running). */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#753: FILE: drivers/lguest/interrupts_and_traps.c:57:
+	lg->regs->cs = (__KERNEL_CS|GUEST_PL);
 	                           ^

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#772: FILE: drivers/lguest/interrupts_and_traps.c:76:
+	if (jiffies != lg->last_timer)

WARNING:LINE_SPACING: Missing a blank line after declarations
#798: FILE: drivers/lguest/interrupts_and_traps.c:102:
+		u32 irq_enabled;
+		if (get_user(irq_enabled, &lg->lguest_data->irq_enabled))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#804: FILE: drivers/lguest/interrupts_and_traps.c:108:
+	idt = &lg->idt[FIRST_EXTERNAL_VECTOR+irq];
 	                                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#835: FILE: drivers/lguest/interrupts_and_traps.c:139:
+	/* We intercept page fault (demand shadow paging & cr2 saving)
+	   protection fault (in/out emulation) and device not

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#836: FILE: drivers/lguest/interrupts_and_traps.c:140:
+	   available (TS handling), and hypercall */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#872: FILE: drivers/lguest/interrupts_and_traps.c:176:
+		trap->a = trap->b = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#879: FILE: drivers/lguest/interrupts_and_traps.c:183:
+	trap->a = ((__KERNEL_CS|GUEST_PL)<<16) | (lo&0x0000FFFF);
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#879: FILE: drivers/lguest/interrupts_and_traps.c:183:
+	trap->a = ((__KERNEL_CS|GUEST_PL)<<16) | (lo&0x0000FFFF);
 	                                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#879: FILE: drivers/lguest/interrupts_and_traps.c:183:
+	trap->a = ((__KERNEL_CS|GUEST_PL)<<16) | (lo&0x0000FFFF);
 	                                            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#880: FILE: drivers/lguest/interrupts_and_traps.c:184:
+	trap->b = (hi&0xFFFFEF00);
 	             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#906: FILE: drivers/lguest/interrupts_and_traps.c:210:
+	idt->a = (LGUEST_CS<<16) | (handler&0x0000FFFF);
 	                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#906: FILE: drivers/lguest/interrupts_and_traps.c:210:
+	idt->a = (LGUEST_CS<<16) | (handler&0x0000FFFF);
 	                                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#907: FILE: drivers/lguest/interrupts_and_traps.c:211:
+	idt->b = (handler&0xFFFF0000) | flags;
 	                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#925: FILE: drivers/lguest/interrupts_and_traps.c:229:
+	 * traps might be different. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#942: FILE: drivers/lguest/io.c:1:
+/* Simple I/O model for guests, based on shared memory.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#956: FILE: drivers/lguest/io.c:15:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#957: FILE: drivers/lguest/io.c:16:
+ *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1002: FILE: drivers/lguest/io.c:61:
+	return jhash2((u32*)&key->both.word,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1003: FILE: drivers/lguest/io.c:62:
+		      (sizeof(key->both.word)+sizeof(key->both.ptr))/4,
 		                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1003: FILE: drivers/lguest/io.c:62:
+		      (sizeof(key->both.word)+sizeof(key->both.ptr))/4,
 		                                                    ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1011: FILE: drivers/lguest/io.c:70:
+	return (a->both.word == b->both.word
+		&& a->both.ptr == b->both.ptr

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1012: FILE: drivers/lguest/io.c:71:
+		&& a->both.ptr == b->both.ptr
+		&& a->both.offset == b->both.offset);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1018: FILE: drivers/lguest/io.c:77:
+	BUG_ON(!mutex_is_locked(&lguest_lock));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#1059: FILE: drivers/lguest/io.c:118:
+	if (interrupt == 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1061: FILE: drivers/lguest/io.c:120:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1079: FILE: drivers/lguest/io.c:138:
+ ^Iup_read(fshared);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1079: FILE: drivers/lguest/io.c:138:
+ ^Iup_read(fshared);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1079: FILE: drivers/lguest/io.c:138:
+ ^Iup_read(fshared);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1086: FILE: drivers/lguest/io.c:145:
+			void *buf, u32 addr, unsigned bytes)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1089: FILE: drivers/lguest/io.c:148:
+	if (!lguest_address_ok(lg, addr, bytes)
+	    || access_process_vm(lg->tsk, addr, buf, bytes, 0) != bytes) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1099: FILE: drivers/lguest/io.c:158:
+			 const void *buf, unsigned bytes)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1102: FILE: drivers/lguest/io.c:161:
+	if (!lguest_address_ok(lg, addr, bytes)
+	    || (access_process_vm(lg->tsk, addr, (void *)buf, bytes, 1)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1119: FILE: drivers/lguest/io.c:178:
+	si = di = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1120: FILE: drivers/lguest/io.c:179:
+	srcoff = dstoff = 0;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1122: FILE: drivers/lguest/io.c:181:
+	while (si < LGUEST_MAX_DMA_SECTIONS && src->len[si]
+	       && di < LGUEST_MAX_DMA_SECTIONS && dst->len[di]) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1129: FILE: drivers/lguest/io.c:188:
+		/* FIXME: This is not completely portable, since
+		   archs do different things for copy_to_user_page. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1129: FILE: drivers/lguest/io.c:188:
+		   archs do different things for copy_to_user_page. */

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1130: FILE: drivers/lguest/io.c:189:
+		if (copy_from_user(maddr + (dst->addr[di] + dstoff)%PAGE_SIZE,
 		                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1174: FILE: drivers/lguest/io.c:233:
+				   dst->addr[i], 1, 1, 1, pages+i, NULL)
 				                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1204: FILE: drivers/lguest/io.c:263:
+	 * is all under the lguest_lock. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1224: FILE: drivers/lguest/io.c:283:
+			    udma+offsetof(struct lguest_dma, used_len), ret);
 			        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1236: FILE: drivers/lguest/io.c:295:
+ ^Iup_read(&dstlg->mm->mmap_sem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1236: FILE: drivers/lguest/io.c:295:
+ ^Iup_read(&dstlg->mm->mmap_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1236: FILE: drivers/lguest/io.c:295:
+ ^Iup_read(&dstlg->mm->mmap_sem);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1264: FILE: drivers/lguest/io.c:323:
+		struct lguest_dma_info *i;
+		list_for_each_entry(i, &dma_hash[hash(&key)], list) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1296: FILE: drivers/lguest/io.c:355:
+	BUG_ON(!mutex_is_locked(&lguest_lock));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1339: FILE: drivers/lguest/io.c:398:
+			unsigned int j;
+			for (j = 0; j < i->num_dmas; j++) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1361: FILE: drivers/lguest/lg.h:1:
+#ifndef _LGUEST_H

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1386: FILE: drivers/lguest/lg.h:26:
+struct lguest_regs
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1410: FILE: drivers/lguest/lg.h:50:
+struct lguest_dma_info
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1417: FILE: drivers/lguest/lg.h:57:
+^Iu8 interrupt; ^I/* 0 when not registered */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1422: FILE: drivers/lguest/lg.h:62:
+ * shadow pagetables don't, we can't use the normal pte_t/pgd_t. */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1423: FILE: drivers/lguest/lg.h:63:
+typedef union {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1427: FILE: drivers/lguest/lg.h:67:
+typedef union {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1431: FILE: drivers/lguest/lg.h:71:
+typedef union {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1435: FILE: drivers/lguest/lg.h:75:
+typedef union {

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1443: FILE: drivers/lguest/lg.h:83:
+struct pgdir
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1450: FILE: drivers/lguest/lg.h:90:
+struct lguest_ro_state
+{

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#1453: FILE: drivers/lguest/lg.h:93:
+	struct Xgt_desc_struct host_idt_desc;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1467: FILE: drivers/lguest/lg.h:107:
+struct lguest_pages
+{

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(PAGE_SIZE) over __attribute__((aligned(PAGE_SIZE)))
#1474: FILE: drivers/lguest/lg.h:114:
+} __attribute__((aligned(PAGE_SIZE)));

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1482: FILE: drivers/lguest/lg.h:122:
+struct lguest
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1488: FILE: drivers/lguest/lg.h:128:
+^Istruct mm_struct *mm; ^I/* == tsk->mm, but that becomes NULL on exit */$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1527: FILE: drivers/lguest/lg.h:167:
+	struct desc_struct idt[FIRST_EXTERNAL_VECTOR+LGUEST_IRQS];
 	                                            ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1540: FILE: drivers/lguest/lg.h:180:
+void lgread(struct lguest *lg, void *buf, u32 addr, unsigned bytes);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1541: FILE: drivers/lguest/lg.h:181:
+void lgwrite(struct lguest *lg, u32 addr, const void *buf, unsigned bytes);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1547: FILE: drivers/lguest/lg.h:187:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lg' - possible side-effects?
#1597: FILE: drivers/lguest/lg.h:237:
+#define kill_guest(lg, fmt...)					\
+do {								\
+	if (!(lg)->dead) {					\
+		(lg)->dead = kasprintf(GFP_ATOMIC, fmt);	\
+		if (!(lg)->dead)				\
+			(lg)->dead = ERR_PTR(-ENOMEM);		\
+	}							\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1604: FILE: drivers/lguest/lg.h:244:
+} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1697: FILE: drivers/lguest/lguest_user.c:1:
+/* Userspace control of the guest, via /dev/lguest. */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1706: FILE: drivers/lguest/lguest_user.c:10:
+	regs->ds = regs->es = regs->ss = __KERNEL_DS|GUEST_PL;
 	                                            ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1706: FILE: drivers/lguest/lguest_user.c:10:
+	regs->ds = regs->es = regs->ss = __KERNEL_DS|GUEST_PL;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1707: FILE: drivers/lguest/lguest_user.c:11:
+	regs->cs = __KERNEL_CS|GUEST_PL;
 	                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1708: FILE: drivers/lguest/lguest_user.c:12:
+^Iregs->eflags = 0x202; ^I/* Interrupts enabled. */$

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#1742: FILE: drivers/lguest/lguest_user.c:46:
+static ssize_t read(struct file *file, char __user *user, size_t size,loff_t*o)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1742: FILE: drivers/lguest/lguest_user.c:46:
+static ssize_t read(struct file *file, char __user *user, size_t size,loff_t*o)
                                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1755: FILE: drivers/lguest/lguest_user.c:59:
+		len = min(size, strlen(lg->dead)+1);
 		                                ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1868: FILE: drivers/lguest/lguest_user.c:172:
+static struct file_operations lguest_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1874: FILE: drivers/lguest/lguest_user.c:178:
+};
+static struct miscdevice lguest_dev = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1893: FILE: drivers/lguest/page_tables.c:1:
+/* Shadow page table operations.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1895: FILE: drivers/lguest/page_tables.c:3:
+ * GPL v2 and any later version */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1905: FILE: drivers/lguest/page_tables.c:13:
+#define PTES_PER_PAGE (1 << PTES_PER_PAGE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1911: FILE: drivers/lguest/page_tables.c:19:
+static unsigned vaddr_to_pgd_index(unsigned long vaddr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1931: FILE: drivers/lguest/page_tables.c:39:
+	spte_t *page = __va(spgd.pfn << PAGE_SHIFT);
+	BUG_ON(!(spgd.flags & _PAGE_PRESENT));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1931: FILE: drivers/lguest/page_tables.c:39:
+	BUG_ON(!(spgd.flags & _PAGE_PRESENT));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1939: FILE: drivers/lguest/page_tables.c:47:
+	unsigned int index = vaddr >> (PAGE_SHIFT + PTES_PER_PAGE_SHIFT);
+	return lg->pgdirs[lg->pgdidx].cr3 + index * sizeof(gpgd_t);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1946: FILE: drivers/lguest/page_tables.c:54:
+	unsigned long gpage = gpgd.pfn << PAGE_SHIFT;
+	BUG_ON(!(gpgd.flags & _PAGE_PRESENT));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1946: FILE: drivers/lguest/page_tables.c:54:
+	BUG_ON(!(gpgd.flags & _PAGE_PRESENT));

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1947: FILE: drivers/lguest/page_tables.c:55:
+	return gpage + ((vaddr>>PAGE_SHIFT) % PTES_PER_PAGE) * sizeof(gpte_t);
 	                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1989: FILE: drivers/lguest/page_tables.c:97:
+	if ((gpte.flags & (_PAGE_PWT|_PAGE_PSE)) || gpte.pfn >= lg->pfn_limit)
 	                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2000: FILE: drivers/lguest/page_tables.c:108:
+/* FIXME: We hold reference to pages, which prevents them from being
+   swapped.  It'd be nice to have a callback when Linux wants to swap out. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2000: FILE: drivers/lguest/page_tables.c:108:
+   swapped.  It'd be nice to have a callback when Linux wants to swap out. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2003: FILE: drivers/lguest/page_tables.c:111:
+ * Return true if we got page. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2054: FILE: drivers/lguest/page_tables.c:162:
+	 * write will fault so we can set dirty bit in guest. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#2055: FILE: drivers/lguest/page_tables.c:163:
+	if (gpte.flags & _PAGE_DIRTY)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2057: FILE: drivers/lguest/page_tables.c:165:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2059: FILE: drivers/lguest/page_tables.c:167:
+		gpte_t ro_gpte = gpte;
+		ro_gpte.flags &= ~_PAGE_RW;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2079: FILE: drivers/lguest/page_tables.c:187:
+	return (flags & (_PAGE_PRESENT|_PAGE_RW)) == (_PAGE_PRESENT|_PAGE_RW);
 	                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2079: FILE: drivers/lguest/page_tables.c:187:
+	return (flags & (_PAGE_PRESENT|_PAGE_RW)) == (_PAGE_PRESENT|_PAGE_RW);
 	                                                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2093: FILE: drivers/lguest/page_tables.c:201:
+		spte_t *ptepage = __va(spgd->pfn << PAGE_SHIFT);
+		for (i = 0; i < PTES_PER_PAGE; i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2103: FILE: drivers/lguest/page_tables.c:211:
+	unsigned int i;
+	for (i = 0; i < vaddr_to_pgd_index(lg->page_offset); i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2115: FILE: drivers/lguest/page_tables.c:223:
+	unsigned int i;
+	for (i = 0; i < ARRAY_SIZE(lg->pgdirs); i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2175: FILE: drivers/lguest/page_tables.c:283:
+	spgd_t *spgd = spgd_addr(lg, idx, vaddr);
+	if (spgd->flags & _PAGE_PRESENT) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2177: FILE: drivers/lguest/page_tables.c:285:
+		spte_t *spte = spte_addr(lg, *spgd, vaddr);
+		release_pte(*spte);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2178: FILE: drivers/lguest/page_tables.c:286:
+		if (gpte.flags & (_PAGE_DIRTY | _PAGE_ACCESSED)) {
[...]
+		} else
[...]

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2180: FILE: drivers/lguest/page_tables.c:288:
+			*spte = gpte_to_spte(lg, gpte, gpte.flags&_PAGE_DIRTY);
 			                                         ^

CHECK:BRACES: Unbalanced braces around else statement
#2181: FILE: drivers/lguest/page_tables.c:289:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#2192: FILE: drivers/lguest/page_tables.c:300:
+		unsigned int i;
+		for (i = 0; i < ARRAY_SIZE(lg->pgdirs); i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2197: FILE: drivers/lguest/page_tables.c:305:
+		int pgdir = find_pgdir(lg, cr3);
+		if (pgdir != ARRAY_SIZE(lg->pgdirs))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2221: FILE: drivers/lguest/page_tables.c:329:
+	lg->pgdirs[lg->pgdidx].pgdir = (spgd_t*)get_zeroed_page(GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2251: FILE: drivers/lguest/page_tables.c:359:
+	switcher_pte_page[(unsigned long)pages/PAGE_SIZE%PTES_PER_PAGE]
 	                                      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#2251: FILE: drivers/lguest/page_tables.c:359:
+	switcher_pte_page[(unsigned long)pages/PAGE_SIZE%PTES_PER_PAGE]
 	                                                ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2252: FILE: drivers/lguest/page_tables.c:360:
+	switcher_pte_page[(unsigned long)pages/PAGE_SIZE%PTES_PER_PAGE]
+		= regs_pte;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2272: FILE: drivers/lguest/page_tables.c:380:
+		pte[i].flags = _PAGE_PRESENT|_PAGE_ACCESSED;
 		                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2276: FILE: drivers/lguest/page_tables.c:384:
+	i = pages + cpu*2;
 	               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2280: FILE: drivers/lguest/page_tables.c:388:
+	pte[i].flags = _PAGE_PRESENT|_PAGE_ACCESSED|_PAGE_RW;
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2280: FILE: drivers/lguest/page_tables.c:388:
+	pte[i].flags = _PAGE_PRESENT|_PAGE_ACCESSED|_PAGE_RW;
 	                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2281: FILE: drivers/lguest/page_tables.c:389:
+	pte[i+1].pfn = page_to_pfn(switcher_page[i+1]);
 	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2281: FILE: drivers/lguest/page_tables.c:389:
+	pte[i+1].pfn = page_to_pfn(switcher_page[i+1]);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2282: FILE: drivers/lguest/page_tables.c:390:
+	pte[i+1].flags = _PAGE_PRESENT|_PAGE_ACCESSED;
 	     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2282: FILE: drivers/lguest/page_tables.c:390:
+	pte[i+1].flags = _PAGE_PRESENT|_PAGE_ACCESSED;
 	                              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2308: FILE: drivers/lguest/segments.c:1:
+#include "lg.h"

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2324: FILE: drivers/lguest/segments.c:17:
+	return (num == GDT_ENTRY_TSS
+		|| num == GDT_ENTRY_LGUEST_CS

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2325: FILE: drivers/lguest/segments.c:18:
+		|| num == GDT_ENTRY_LGUEST_CS
+		|| num == GDT_ENTRY_LGUEST_DS

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2326: FILE: drivers/lguest/segments.c:19:
+		|| num == GDT_ENTRY_LGUEST_DS
+		|| num == GDT_ENTRY_DOUBLEFAULT_TSS);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2339: FILE: drivers/lguest/segments.c:32:
+	if (lg->regs->ds / 8 == desc
+	    || lg->regs->cs / 8 == desc

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2340: FILE: drivers/lguest/segments.c:33:
+	    || lg->regs->cs / 8 == desc
+	    || lg->regs->ss / 8 == desc)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2354: FILE: drivers/lguest/segments.c:47:
+		 * a removed segment. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2382: FILE: drivers/lguest/segments.c:75:
+	/* This is the one which we *cannot* copy from guest, since tss
+	   is depended on this lguest_ro_state, ie. this cpu. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2382: FILE: drivers/lguest/segments.c:75:
+	   is depended on this lguest_ro_state, ie. this cpu. */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2419: FILE: drivers/lguest/segments.c:112:
+	lgread(lg, tls, (u32)gtls, sizeof(*tls)*GDT_ENTRY_TLS_ENTRIES);
 	                                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2427: FILE: drivers/lguest/switcher.S:1:
+/* This code sits at 0xFFC00000 to do the low-level guest<->host switch.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2605: FILE: include/linux/lguest_launcher.h:1:
+#ifndef _ASM_LGUEST_USER

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2614: FILE: include/linux/lguest_launcher.h:10:
+#define LGUEST_MAX_DEVICES (LGUEST_MAX_DMA/2)
                                           ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2617: FILE: include/linux/lguest_launcher.h:13:
+struct lguest_dma
+{

ERROR:CODE_INDENT: code indent should use tabs where possible
#2619: FILE: include/linux/lguest_launcher.h:15:
+ ^Iu32 used_len;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2619: FILE: include/linux/lguest_launcher.h:15:
+ ^Iu32 used_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2619: FILE: include/linux/lguest_launcher.h:15:
+ ^Iu32 used_len;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2625: FILE: include/linux/lguest_launcher.h:21:
+struct lguest_block_page
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2628: FILE: include/linux/lguest_launcher.h:24:
+^Iu32 sector; ^I/* Offset in device = sector * 512. */$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2637: FILE: include/linux/lguest_launcher.h:33:
+struct lguest_net
+{

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#2671: FILE: include/linux/lguest_launcher.h:67:
+enum lguest_req
+{

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000433842.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 88 warnings, 86 checks, 2570 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000433842.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
