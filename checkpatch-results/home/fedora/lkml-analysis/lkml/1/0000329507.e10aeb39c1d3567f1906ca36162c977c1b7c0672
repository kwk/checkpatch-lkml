CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#59: FILE: arch/powerpc/sysdev/fsl_rio.c:27:
+#define IRQ_RIO_BELL(m)		(((struct rio_priv *)(m->priv))->bellirq)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#60: FILE: arch/powerpc/sysdev/fsl_rio.c:28:
+#define IRQ_RIO_TX(m)		(((struct rio_priv *)(m->priv))->txirq)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#61: FILE: arch/powerpc/sysdev/fsl_rio.c:29:
+#define IRQ_RIO_RX(m)		(((struct rio_priv *)(m->priv))->rxirq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: arch/powerpc/sysdev/fsl_rio.c:173:
+static int fsl_rio_doorbell_send(struct rio_mport *mport,
+				int index, u16 destid, u16 data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: arch/powerpc/sysdev/fsl_rio.c:195:
+static int fsl_local_config_read(struct rio_mport *mport,
+				int index, u32 offset, int len, u32 * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#150: FILE: arch/powerpc/sysdev/fsl_rio.c:195:
+				int index, u32 offset, int len, u32 * data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: arch/powerpc/sysdev/fsl_rio.c:216:
+static int fsl_local_config_write(struct rio_mport *mport,
+				int index, u32 offset, int len, u32 data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: arch/powerpc/sysdev/fsl_rio.c:241:
+fsl_rio_config_read(struct rio_mport *mport, int index, u16 destid,
+			u8 hopcount, u32 offset, int len, u32 * val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#184: FILE: arch/powerpc/sysdev/fsl_rio.c:241:
+			u8 hopcount, u32 offset, int len, u32 * val)

CHECK:SPACING: No space is necessary after a cast
#197: FILE: arch/powerpc/sysdev/fsl_rio.c:252:
+	data = (u8 *) priv->maint_win + offset;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: arch/powerpc/sysdev/fsl_rio.c:282:
+fsl_rio_config_write(struct rio_mport *mport, int index, u16 destid,
+			u8 hopcount, u32 offset, int len, u32 val)

CHECK:SPACING: No space is necessary after a cast
#220: FILE: arch/powerpc/sysdev/fsl_rio.c:292:
+	data = (u8 *) priv->maint_win + offset;

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: arch/powerpc/sysdev/fsl_rio.c:326:
+^I^I    ^I^I+ priv->msg_tx_ring.tx_slot;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#233: FILE: arch/powerpc/sysdev/fsl_rio.c:326:
+^I^I    ^I^I+ priv->msg_tx_ring.tx_slot;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: arch/powerpc/sysdev/fsl_rio.c:340:
+	memcpy(priv->msg_tx_ring.virt_buffer[priv->msg_tx_ring.tx_slot], buffer,
+			len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#304: FILE: arch/powerpc/sysdev/fsl_rio.c:404:
+		int slot = (dqp - priv->msg_tx_ring.phys) >> 5;
+		port->outb_msg[0].mcback(port, priv->msg_tx_ring.dev_id, -1,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#359: FILE: arch/powerpc/sysdev/fsl_rio.c:461:
+	if (!(priv->msg_tx_ring.virt = dma_alloc_coherent(NULL,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: arch/powerpc/sysdev/fsl_rio.c:462:
+	if (!(priv->msg_tx_ring.virt = dma_alloc_coherent(NULL,
+						    priv->msg_tx_ring.size *

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: arch/powerpc/sysdev/fsl_rio.c:470:
+	memset(priv->msg_tx_ring.virt, 0,
+			priv->msg_tx_ring.size * RIO_MSG_DESC_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#509: FILE: arch/powerpc/sysdev/fsl_rio.c:615:
+	if (!(priv->msg_rx_ring.virt = dma_alloc_coherent(NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: arch/powerpc/sysdev/fsl_rio.c:616:
+	if (!(priv->msg_rx_ring.virt = dma_alloc_coherent(NULL,
+						    priv->msg_rx_ring.size *

CHECK:SPACING: No space is necessary after a cast
#522: FILE: arch/powerpc/sysdev/fsl_rio.c:625:
+	out_be32(&priv->msg_regs->ifqdpar, (u32) priv->msg_rx_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#523: FILE: arch/powerpc/sysdev/fsl_rio.c:626:
+	out_be32(&priv->msg_regs->ifqepar, (u32) priv->msg_rx_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#632: FILE: arch/powerpc/sysdev/fsl_rio.c:738:
+	virt_buf = (u32) priv->msg_rx_ring.virt + (phys_buf - priv->msg_rx_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#681: FILE: arch/powerpc/sysdev/fsl_rio.c:795:
+		    (u32) priv->dbell_ring.virt +

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#707: FILE: arch/powerpc/sysdev/fsl_rio.c:841:
+	if (!(priv->dbell_win =

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#716: FILE: arch/powerpc/sysdev/fsl_rio.c:851:
+	if (!(priv->dbell_ring.virt = dma_alloc_coherent(NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#717: FILE: arch/powerpc/sysdev/fsl_rio.c:852:
+	if (!(priv->dbell_ring.virt = dma_alloc_coherent(NULL,
 						   512 * DOORBELL_MESSAGE_SIZE,

CHECK:SPACING: No space is necessary after a cast
#731: FILE: arch/powerpc/sysdev/fsl_rio.c:862:
+	out_be32(&priv->msg_regs->dqdpar, (u32) priv->dbell_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#732: FILE: arch/powerpc/sysdev/fsl_rio.c:863:
+	out_be32(&priv->msg_regs->dqepar, (u32) priv->dbell_ring.phys);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*priv)...) over kzalloc(sizeof(struct rio_priv)...)
#773: FILE: arch/powerpc/sysdev/fsl_rio.c:936:
+	priv = kzalloc(sizeof(struct rio_priv), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#775: FILE: arch/powerpc/sysdev/fsl_rio.c:938:
+		printk(KERN_ERR "Can't alloc memory for 'priv'\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#775: FILE: arch/powerpc/sysdev/fsl_rio.c:938:
+	if (!priv) {
+		printk(KERN_ERR "Can't alloc memory for 'priv'\n");

CHECK:SPACING: No space is necessary after a cast
#795: FILE: arch/powerpc/sysdev/fsl_rio.c:959:
+	priv->regs_win = (u32) ioremap(RIO_REGS_BASE, 0x20000);

CHECK:SPACING: No space is necessary after a cast
#809: FILE: arch/powerpc/sysdev/fsl_rio.c:970:
+	priv->maint_win = (u32) ioremap(law_start, RIO_MAINT_WIN_SIZE);

WARNING:SPACING: Unnecessary space before function pointer arguments
#905: FILE: include/linux/rio.h:234:
+	int (*lcread) (struct rio_mport *mport, int index, u32 offset, int len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#906: FILE: include/linux/rio.h:235:
+	int (*lcread) (struct rio_mport *mport, int index, u32 offset, int len,
+			u32 * data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#906: FILE: include/linux/rio.h:235:
+			u32 * data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#907: FILE: include/linux/rio.h:236:
+	int (*lcwrite) (struct rio_mport *mport, int index, u32 offset, int len,

WARNING:SPACING: Unnecessary space before function pointer arguments
#909: FILE: include/linux/rio.h:238:
+	int (*cread) (struct rio_mport *mport, int index, u16 destid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#910: FILE: include/linux/rio.h:239:
+	int (*cread) (struct rio_mport *mport, int index, u16 destid,
+			u8 hopcount, u32 offset, int len, u32 * data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#910: FILE: include/linux/rio.h:239:
+			u8 hopcount, u32 offset, int len, u32 * data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#911: FILE: include/linux/rio.h:240:
+	int (*cwrite) (struct rio_mport *mport, int index, u16 destid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: include/linux/rio.h:241:
+	int (*cwrite) (struct rio_mport *mport, int index, u16 destid,
+			u8 hopcount, u32 offset, int len, u32 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#913: FILE: include/linux/rio.h:242:
+	int (*dsend) (struct rio_mport *mport, int index, u16 destid, u16 data);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000329507.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 9 warnings, 27 checks, 824 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000329507.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
