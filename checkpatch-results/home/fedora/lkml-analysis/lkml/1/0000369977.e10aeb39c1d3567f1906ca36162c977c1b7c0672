WARNING:BAD_SIGN_OFF: Duplicate signature
#56: 
Signed-off-by: Jason Wessel <jason.wessel@windriver.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#208: FILE: arch/powerpc/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#209: FILE: arch/powerpc/kernel/kgdb.c:2:
+ * arch/powerpc/kernel/kgdb.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#236: FILE: arch/powerpc/kernel/kgdb.c:29:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:TYPO_SPELLING: 'performace' may be misspelled - perhaps 'performance'?
#267: FILE: arch/powerpc/kernel/kgdb.c:60:
+	{ 0x2060, 0x0e /* SIGILL */  },		/* performace monitor */
 	                               		   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#270: FILE: arch/powerpc/kernel/kgdb.c:63:
+^I{ 0x3200, 0x02 /* SIGINT */  }, ^I/* watchdog */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#274: FILE: arch/powerpc/kernel/kgdb.c:67:
+^I{ 0x1020, 0x02 /* SIGINT */  }, ^I/* watchdog */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#285: FILE: arch/powerpc/kernel/kgdb.c:78:
+^I{ 0x1300, 0x05 /* SIGTRAP */ }, ^I/* instruction address break */$

CHECK:CAMELCASE: Avoid CamelCase: <computeSignal>
#303: FILE: arch/powerpc/kernel/kgdb.c:96:
+static int computeSignal(unsigned int tt)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#341: FILE: arch/powerpc/kernel/kgdb.c:134:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->nip'
#341: FILE: arch/powerpc/kernel/kgdb.c:134:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&arch_kgdb_ops.gdb_bpt_instr'
#341: FILE: arch/powerpc/kernel/kgdb.c:134:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

WARNING:TYPO_SPELLING: 'processsors' may be misspelled - perhaps 'processors'?
#355: FILE: arch/powerpc/kernel/kgdb.c:148:
+	 * On Book E and perhaps other processsors, singlestep is handled on
 	                               ^^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#357: FILE: arch/powerpc/kernel/kgdb.c:150:
+	 * to fail, since it it locates the thread_info by masking off

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#364: FILE: arch/powerpc/kernel/kgdb.c:157:
+	thread_info = (struct thread_info *)(regs->gpr[1] & ~(THREAD_SIZE-1));
 	                                                                 ^

WARNING:SIZEOF_PARENTHESIS: sizeof *thread_info should be sizeof(*thread_info)
#368: FILE: arch/powerpc/kernel/kgdb.c:161:
+		memcpy(exception_thread_info, thread_info, sizeof *thread_info);

WARNING:SIZEOF_PARENTHESIS: sizeof *thread_info should be sizeof(*thread_info)
#373: FILE: arch/powerpc/kernel/kgdb.c:166:
+		memcpy(thread_info, exception_thread_info, sizeof *thread_info);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#398: FILE: arch/powerpc/kernel/kgdb.c:191:
+#define PACK64(ptr, src) do { *(ptr++) = (src); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#398: FILE: arch/powerpc/kernel/kgdb.c:191:
+#define PACK64(ptr, src) do { *(ptr++) = (src); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#400: FILE: arch/powerpc/kernel/kgdb.c:193:
+#define PACK32(ptr, src) do {          \
+	u32 *ptr32;                   \
+	ptr32 = (u32 *)ptr;           \
+	*(ptr32++) = (src);           \
+	ptr = (unsigned long *)ptr32; \
+	} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#407: FILE: arch/powerpc/kernel/kgdb.c:200:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#437: FILE: arch/powerpc/kernel/kgdb.c:230:
+	BUG_ON((unsigned long)ptr >

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: arch/powerpc/kernel/kgdb.c:273:
+	BUG_ON((unsigned long)ptr >

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#484: FILE: arch/powerpc/kernel/kgdb.c:277:
+#define UNPACK64(dest, ptr) do { dest = *(ptr++); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#484: FILE: arch/powerpc/kernel/kgdb.c:277:
+#define UNPACK64(dest, ptr) do { dest = *(ptr++); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#486: FILE: arch/powerpc/kernel/kgdb.c:279:
+#define UNPACK32(dest, ptr) do {       \
+	u32 *ptr32;                   \
+	ptr32 = (u32 *)ptr;           \
+	dest = *(ptr32++);            \
+	ptr = (unsigned long *)ptr32; \
+	} while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#526: FILE: arch/powerpc/kernel/kgdb.c:319:
+	BUG_ON((unsigned long)ptr >

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#531: FILE: arch/powerpc/kernel/kgdb.c:324:
+ * This function does PowerPC specific procesing for interfacing to gdb.
                                        ^^^^^^^^^

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#575: FILE: arch/powerpc/kernel/kgdb.c:368:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#750: FILE: arch/ppc/kernel/kgdb.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#751: FILE: arch/ppc/kernel/kgdb.c:2:
+ * arch/ppc/kernel/kgdb.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#773: FILE: arch/ppc/kernel/kgdb.c:24:
+#include <asm/processor.h>

WARNING:TYPO_SPELLING: 'performace' may be misspelled - perhaps 'performance'?
#804: FILE: arch/ppc/kernel/kgdb.c:55:
+	{ 0x2060, 0x0e /* SIGILL */  },		/* performace monitor */
 	                               		   ^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#807: FILE: arch/ppc/kernel/kgdb.c:58:
+^I{ 0x3200, 0x02 /* SIGINT */  }, ^I/* watchdog */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#811: FILE: arch/ppc/kernel/kgdb.c:62:
+^I{ 0x1020, 0x02 /* SIGINT */  }, ^I/* watchdog */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#822: FILE: arch/ppc/kernel/kgdb.c:73:
+^I{ 0x1300, 0x05 /* SIGTRAP */ }, ^I/* instruction address break */$

CHECK:SPACING: No space is necessary after a cast
#857: FILE: arch/ppc/kernel/kgdb.c:108:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->nip'
#857: FILE: arch/ppc/kernel/kgdb.c:108:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&arch_kgdb_ops.gdb_bpt_instr'
#857: FILE: arch/ppc/kernel/kgdb.c:108:
+	if (*(u32 *) (regs->nip) == *(u32 *) (&arch_kgdb_ops.gdb_bpt_instr))

WARNING:TYPO_SPELLING: 'processsors' may be misspelled - perhaps 'processors'?
#870: FILE: arch/ppc/kernel/kgdb.c:121:
+	* On Book E and perhaps other processsors, singlestep is handled on
 	                              ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#870: FILE: arch/ppc/kernel/kgdb.c:121:
+	/*
+	* On Book E and perhaps other processsors, singlestep is handled on

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#872: FILE: arch/ppc/kernel/kgdb.c:123:
+	* to fail, since it it locates the thread_info by masking off

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#879: FILE: arch/ppc/kernel/kgdb.c:130:
+	thread_info = (struct thread_info *)(regs->gpr[1] & ~(THREAD_SIZE-1));
 	                                                                 ^

WARNING:SIZEOF_PARENTHESIS: sizeof *thread_info should be sizeof(*thread_info)
#883: FILE: arch/ppc/kernel/kgdb.c:134:
+		memcpy(exception_thread_info, thread_info, sizeof *thread_info);

WARNING:SIZEOF_PARENTHESIS: sizeof *thread_info should be sizeof(*thread_info)
#888: FILE: arch/ppc/kernel/kgdb.c:139:
+		memcpy(thread_info, exception_thread_info, sizeof *thread_info);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1069: FILE: arch/ppc/kernel/kgdb.c:320:
+			mtspr(SPRN_DBCR0,
+				  mfspr(SPRN_DBCR0) | DBCR0_IC | DBCR0_IDM);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1077: FILE: arch/ppc/kernel/kgdb.c:328:
+				atomic_set(&cpu_doing_single_step,
+						   smp_processor_id());

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#1088: FILE: arch/ppc/kernel/kgdb.c:339:
+struct kgdb_arch arch_kgdb_ops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2281: FILE: arch/ppc/platforms/85xx/sbc8560.c:72:
+		printk(KERN_ERR "Early serial init of port 0 failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2303: FILE: arch/ppc/platforms/85xx/sbc8560.c:89:
+		printk(KERN_ERR "Early serial init of port 0 failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2579: FILE: arch/ppc/syslib/mv64x60.c:1508:
+		if (pdev &&
+			pdev->id == id &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "r"
#2601: FILE: arch/ppc/syslib/mv64x60.c:1846:
+	if (r != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "r"
#2606: FILE: arch/ppc/syslib/mv64x60.c:1851:
+	if (r != NULL) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2805: FILE: drivers/serial/cpm_uart/cpm_uart.h:71:
+#define KGDB_PINFO_INDEX ^IUART_SCC1$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2856: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:1164:
+void cpm_uart_early_write(int index, const char *s,
 				   u_int count)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2869: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:1171:
+	BUG_ON(index > UART_NR);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2903: FILE: drivers/serial/cpm_uart/cpm_uart_core.c:1285:
+	BUG_ON(index > UART_NR);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#3002: FILE: drivers/serial/cpm_uart/cpm_uart_cpm1.c:67:
+	unsigned *bcsr_io;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bcsr_io"
#3014: FILE: drivers/serial/cpm_uart/cpm_uart_cpm1.c:114:
+	if (bcsr_io == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#3015: FILE: drivers/serial/cpm_uart/cpm_uart_cpm1.c:115:
+		printk(KERN_CRIT "Could not remap BCSR\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#3027: FILE: drivers/serial/cpm_uart/cpm_uart_cpm1.c:127:
+	unsigned *bcsr_io;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bcsr_io"
#3032: FILE: drivers/serial/cpm_uart/cpm_uart_cpm1.c:132:
+	if (bcsr_io == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#3033: FILE: drivers/serial/cpm_uart/cpm_uart_cpm1.c:133:
+		printk(KERN_CRIT "Could not remap BCSR\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3047: FILE: drivers/serial/cpm_uart/cpm_uart_cpm1.c:230:
+	/* Check if we have called this yet. This may happen if early kgdb
+	breakpoint is on */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3047: FILE: drivers/serial/cpm_uart/cpm_uart_cpm1.c:230:
+	breakpoint is on */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3060: FILE: drivers/serial/cpm_uart/cpm_uart_cpm2.c:308:
+	/* Check if we have called this yet. This may happen if early kgdb
+	breakpoint is on */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3060: FILE: drivers/serial/cpm_uart/cpm_uart_cpm2.c:308:
+	breakpoint is on */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3069: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#3070: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:2:
+ * drivers/serial/cpm_uart/cpm_uart_kgdb.c

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3100: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:32:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3114: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:46:
+	volatile cbd_t	*bdp;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3122: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:54:
+	while (bdp->cbd_sc & BD_SC_EMPTY);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#3129: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:61:
+	if (obuf) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#3134: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:66:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3147: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:79:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3159: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:91:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3176: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:108:
+static void termios_set_options(int index,
+		 int baud, int parity, int bits, int flow)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3182: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:114:
+	BUG_ON(index > UART_NR);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3207: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:139:
+		/*fall through*/

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3248: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:180:
+
+

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#3249: FILE: drivers/serial/cpm_uart/cpm_uart_kgdb.c:181:
+struct kgdb_io kgdb_io_ops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3258: FILE: drivers/serial/mpsc_kgdb.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#3259: FILE: drivers/serial/mpsc_kgdb.c:2:
+ * drivers/serial/mpsc_kgdb.c

CHECK:BIT_MACRO: Prefer using the BIT macro
#3298: FILE: drivers/serial/mpsc_kgdb.c:41:
+#define MPSC_MPCR_FRZ		(1 << 9)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3303: FILE: drivers/serial/mpsc_kgdb.c:46:
+#define MPSC_MPCR_SBL_1 ^I0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3304: FILE: drivers/serial/mpsc_kgdb.c:47:
+#define MPSC_MPCR_SBL_2 ^I1$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3306: FILE: drivers/serial/mpsc_kgdb.c:49:
+#define MPSC_CHR_2_TEV		(1<<1)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3306: FILE: drivers/serial/mpsc_kgdb.c:49:
+#define MPSC_CHR_2_TEV		(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3307: FILE: drivers/serial/mpsc_kgdb.c:50:
+#define MPSC_CHR_2_TA		(1<<7)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3307: FILE: drivers/serial/mpsc_kgdb.c:50:
+#define MPSC_CHR_2_TA		(1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3308: FILE: drivers/serial/mpsc_kgdb.c:51:
+#define MPSC_CHR_2_TTCS		(1<<9)
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3308: FILE: drivers/serial/mpsc_kgdb.c:51:
+#define MPSC_CHR_2_TTCS		(1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3309: FILE: drivers/serial/mpsc_kgdb.c:52:
+#define MPSC_CHR_2_REV		(1<<17)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3309: FILE: drivers/serial/mpsc_kgdb.c:52:
+#define MPSC_CHR_2_REV		(1<<17)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3310: FILE: drivers/serial/mpsc_kgdb.c:53:
+#define MPSC_CHR_2_RA		(1<<23)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3310: FILE: drivers/serial/mpsc_kgdb.c:53:
+#define MPSC_CHR_2_RA		(1<<23)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3311: FILE: drivers/serial/mpsc_kgdb.c:54:
+#define MPSC_CHR_2_CRD		(1<<25)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3311: FILE: drivers/serial/mpsc_kgdb.c:54:
+#define MPSC_CHR_2_CRD		(1<<25)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3312: FILE: drivers/serial/mpsc_kgdb.c:55:
+#define MPSC_CHR_2_EH		(1<<31)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3312: FILE: drivers/serial/mpsc_kgdb.c:55:
+#define MPSC_CHR_2_EH		(1<<31)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3324: FILE: drivers/serial/mpsc_kgdb.c:67:
+#define MPSC_INTR_CAUSE ^I0x0004$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3326: FILE: drivers/serial/mpsc_kgdb.c:69:
+#define MPSC_INTR_CAUSE_RCC	(1<<6)
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3326: FILE: drivers/serial/mpsc_kgdb.c:69:
+#define MPSC_INTR_CAUSE_RCC	(1<<6)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3329: FILE: drivers/serial/mpsc_kgdb.c:72:
+#define BRG_BCR ^I^I0x0000$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3330: FILE: drivers/serial/mpsc_kgdb.c:73:
+#define BRG_BTR ^I^I0x0004$

CHECK:CAMELCASE: Avoid CamelCase: <kgdbmpsc_ttyMM>
#3336: FILE: drivers/serial/mpsc_kgdb.c:79:
+static int kgdbmpsc_ttyMM = CONFIG_KGDB_PORT_NUM;

WARNING:SPACING: space prohibited before semicolon
#3363: FILE: drivers/serial/mpsc_kgdb.c:106:
+	while (readl(mpsc_base + MPSC_CHR_2) & MPSC_CHR_2_TTCS) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3363: FILE: drivers/serial/mpsc_kgdb.c:106:
+	while (readl(mpsc_base + MPSC_CHR_2) & MPSC_CHR_2_TTCS) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3370: FILE: drivers/serial/mpsc_kgdb.c:113:
+	while (!(readl(sdma_base + MPSC_INTR_REG_SELECT(MPSC_INTR_CAUSE)) &
+		 MPSC_INTR_CAUSE_RCC)) ;

WARNING:SPACING: space prohibited before semicolon
#3371: FILE: drivers/serial/mpsc_kgdb.c:114:
+		 MPSC_INTR_CAUSE_RCC)) ;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#3379: FILE: drivers/serial/mpsc_kgdb.c:122:
+	return (c);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#3452: FILE: drivers/serial/mpsc_kgdb.c:195:
+	udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3535: FILE: drivers/serial/mpsc_kgdb.c:278:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3570: FILE: drivers/serial/mpsc_kgdb.c:313:
+{
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#3586: FILE: drivers/serial/mpsc_kgdb.c:329:
+	unsigned int msk;
+	if (!request_irq(mpsc_irq, kgdbmpsc_interrupt, 0, "kgdb mpsc", NULL)) {

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#3599: FILE: drivers/serial/mpsc_kgdb.c:342:
+struct kgdb_io kgdb_io_ops = {

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#3611: FILE: include/asm-powerpc/kgdb.h:2:
+ * include/asm-powerpc/kgdb.h

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#3677: FILE: include/asm-powerpc/kgdb.h:33:
+#define BREAKPOINT()		asm(".long 0x7d821008"); /* twge r2, r2 */

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3682: FILE: include/asm-powerpc/kgdb.h:38:
+ * vector state registers. */

WARNING:TYPO_SPELLING: 'fpr' may be misspelled - perhaps 'for'?
#3687: FILE: include/asm-powerpc/kgdb.h:42:
+ *   32 gpr, 32 fpr, nip, msr, link, ctr
                 ^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3700: FILE: include/asm-powerpc/kgdb.h:51:
+ * need to store, and add it up. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3702: FILE: include/asm-powerpc/kgdb.h:53:
+#define MAXREG			(PT_FPSCR+1)
               			         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3705: FILE: include/asm-powerpc/kgdb.h:56:
+#define MAXREG                 ((32*2)+6+2+1)
                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3705: FILE: include/asm-powerpc/kgdb.h:56:
+#define MAXREG                 ((32*2)+6+2+1)
                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3705: FILE: include/asm-powerpc/kgdb.h:56:
+#define MAXREG                 ((32*2)+6+2+1)
                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3705: FILE: include/asm-powerpc/kgdb.h:56:
+#define MAXREG                 ((32*2)+6+2+1)
                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3804: FILE: include/asm-ppc/mv64x60.h:344:
+struct platform_device *mv64x60_early_get_pdev_data(const char *name,
+		int id, int remove);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3845: FILE: lib/Kconfig.kgdb:81:
+config KGDB_MPSC
+	bool "KGDB: On MV64x60 MPSC"
+	depends on SERIAL_MPSC
+	help
+	  Uses a Marvell GT64260B or MV64x60 Multi-Purpose Serial
+	  Controller (MPSC) channel. Note that the GT64260A is not
+	  supported.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3853: FILE: lib/Kconfig.kgdb:89:
+config KGDB_CPM_UART
+ 	bool "KGDB: On CPM UART"
+	depends on PPC && (CPM2 || 8xx)
+ 	help
+ 	  Uses CPM UART to communicate with the host GDB.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3860: FILE: lib/Kconfig.kgdb:96:
+choice
+	prompt "SCC/SMC to use for KGDB"
+	depends on KGDB_CPM_UART
+	default KGDB_CPM_UART_SCC4 if ADS8272
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3865: FILE: lib/Kconfig.kgdb:101:
+config KGDB_CPM_UART_SCC1
+	bool "SCC1"
+	depends on SERIAL_CPM_SCC1
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3869: FILE: lib/Kconfig.kgdb:105:
+config KGDB_CPM_UART_SCC2
+	bool "SCC2"
+	depends on SERIAL_CPM_SCC2
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3873: FILE: lib/Kconfig.kgdb:109:
+config KGDB_CPM_UART_SCC3
+	bool "SCC3"
+	depends on SERIAL_CPM_SCC3
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3877: FILE: lib/Kconfig.kgdb:113:
+config KGDB_CPM_UART_SCC4
+	bool "SCC4"
+	depends on SERIAL_CPM_SCC4
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3881: FILE: lib/Kconfig.kgdb:117:
+config KGDB_CPM_UART_SMC1
+	bool "SMC1"
+	depends on SERIAL_CPM_SMC1
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3885: FILE: lib/Kconfig.kgdb:121:
+config KGDB_CPM_UART_SMC2
+	bool "SMC2"
+	depends on SERIAL_CPM_SMC2

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3915: FILE: arch/powerpc/kernel/kgdb_setjmp32.S:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3959: FILE: arch/powerpc/kernel/kgdb_setjmp64.S:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4039: FILE: arch/ppc/kernel/kgdb_setjmp32.S:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369977.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 77 warnings, 58 checks, 3317 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369977.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
