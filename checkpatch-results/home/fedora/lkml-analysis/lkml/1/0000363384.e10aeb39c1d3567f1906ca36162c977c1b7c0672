WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: drivers/dma/Kconfig:37:
+config FSL_DMA
+	bool "Freescale MPC85xx/MPC83xx DMA support"
+	depends on PPC
+	select DMA_ENGINE
+	---help---
+	  Enable support for the Freescale DMA engine. Now, it support
+	  MPC8560/40, MPC8555, MPC8548 and MPC8641 processors.
+	  The MPC8349, MPC8360 is also supported.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#89: FILE: drivers/dma/Kconfig:46:
+config FSL_DMA_SELFTEST
+	bool "Enable the self test for each DMA channel"
+	depends on FSL_DMA
+	default y
+	---help---
+	  Enable the self test for each DMA channel. A self test will be
+	  performed after the channel probed to ensure the DMA works well.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: drivers/dma/fsldma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: drivers/dma/fsldma.c:54:
+		DMA_OUT(fsl_chan, &fsl_chan->reg_base->mr, FSL_DMA_MR_EOTIE,
+				32);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#172: FILE: drivers/dma/fsldma.c:58:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: drivers/dma/fsldma.c:71:
+static void set_desc_cnt(struct fsl_dma_chan *fsl_chan,
+				struct fsl_dma_ld_hw *hw, u32 count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: drivers/dma/fsldma.c:77:
+static void set_desc_src(struct fsl_dma_chan *fsl_chan,
+				struct fsl_dma_ld_hw *hw, dma_addr_t src)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: drivers/dma/fsldma.c:87:
+static void set_desc_dest(struct fsl_dma_chan *fsl_chan,
+				struct fsl_dma_ld_hw *hw, dma_addr_t dest)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: drivers/dma/fsldma.c:97:
+static void set_desc_next(struct fsl_dma_chan *fsl_chan,
+				struct fsl_dma_ld_hw *hw, dma_addr_t next)

WARNING:LINE_SPACING: Missing a blank line after declarations
#243: FILE: drivers/dma/fsldma.c:129:
+	u32 sr = get_sr(fsl_chan);
+	return (!(sr & FSL_DMA_SR_CB)) || (sr & FSL_DMA_SR_CH);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#248: FILE: drivers/dma/fsldma.c:134:
+	u32 mr_set = 0;;

CHECK:BRACES: Unbalanced braces around else statement
#253: FILE: drivers/dma/fsldma.c:139:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: drivers/dma/fsldma.c:150:
+	DMA_OUT(fsl_chan, &fsl_chan->reg_base->mr,
+			DMA_IN(fsl_chan, &fsl_chan->reg_base->mr, 32)

WARNING:LINE_SPACING: Missing a blank line after declarations
#271: FILE: drivers/dma/fsldma.c:157:
+	int i = 0;
+	DMA_OUT(fsl_chan, &fsl_chan->reg_base->mr,

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#279: FILE: drivers/dma/fsldma.c:165:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: drivers/dma/fsldma.c:171:
+static void set_ld_eol(struct fsl_dma_chan *fsl_chan,
+			struct fsl_desc_sw *desc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: drivers/dma/fsldma.c:174:
+	desc->hw.next_ln_addr = CPU_TO_DMA(fsl_chan,
+		DMA_TO_CPU(fsl_chan, desc->hw.next_ln_addr, 64)	| FSL_DMA_EOL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: drivers/dma/fsldma.c:179:
+static void append_ld_queue(struct fsl_dma_chan *fsl_chan,
+		struct fsl_desc_sw *new_desc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: drivers/dma/fsldma.c:194:
+	queue_tail->hw.next_ln_addr = CPU_TO_DMA(fsl_chan,
+			new_desc->async_tx.phys | FSL_DMA_EOSIE |

CHECK:BRACES: braces {} should be used on all arms of this statement
#391: FILE: drivers/dma/fsldma.c:277:
+	if (size) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#397: FILE: drivers/dma/fsldma.c:283:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: drivers/dma/fsldma.c:306:
+static void fsl_dma_set_src(dma_addr_t addr,
+				struct dma_async_tx_descriptor *tx, int index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: drivers/dma/fsldma.c:318:
+static void fsl_dma_set_dest(dma_addr_t addr,
+				struct dma_async_tx_descriptor *tx, int index)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#474: FILE: drivers/dma/fsldma.c:360:
+static struct fsl_desc_sw *fsl_dma_alloc_descriptor(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: drivers/dma/fsldma.c:370:
+		dma_async_tx_descriptor_init(&desc_sw->async_tx,
+						&fsl_chan->common);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#495: FILE: drivers/dma/fsldma.c:381:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: drivers/dma/fsldma.c:399:
+	fsl_chan->desc_pool = dma_pool_create("fsl_dma_engine_desc_pool",
+			fsl_chan->dev, sizeof(struct fsl_desc_sw),

WARNING:SPLIT_STRING: quoted string split across lines
#517: FILE: drivers/dma/fsldma.c:403:
+		dev_err(fsl_chan->dev, "No memory for channel %d "
+			"descriptor dma pool.\n", fsl_chan->id);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: drivers/dma/fsldma.c:425:
+		dev_dbg(fsl_chan->dev,
+				"LD %p will be released.\n", desc);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#549: FILE: drivers/dma/fsldma.c:435:
+static struct dma_async_tx_descriptor *fsl_dma_prep_memcpy(

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#566: FILE: drivers/dma/fsldma.c:452:
+	do {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: drivers/dma/fsldma.c:457:
+			dev_err(fsl_chan->dev,
+					"No free memory for link descriptor\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#648: FILE: drivers/dma/fsldma.c:534:
+	dev_dbg(fsl_chan->dev, "chan completed_cookie = %d\n",
+			fsl_chan->completed_cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: drivers/dma/fsldma.c:540:
+		if (dma_async_is_complete(desc->async_tx.cookie,
+			    fsl_chan->completed_cookie, fsl_chan->common.cookie)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: drivers/dma/fsldma.c:551:
+		dev_dbg(fsl_chan->dev, "link descriptor %p will be recycle.\n",
+				desc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: drivers/dma/fsldma.c:558:
+			dev_dbg(fsl_chan->dev, "link descriptor %p callback\n",
+					desc);

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#696: FILE: drivers/dma/fsldma.c:582:
+	 * not transfered in queue. We need to start it.
 	       ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'desciptor' may be misspelled - perhaps 'descriptor'?
#700: FILE: drivers/dma/fsldma.c:586:
+	/* Find the first un-transfer desciptor */
 	                              ^^^^^^^^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#701: FILE: drivers/dma/fsldma.c:587:
+	for (ld_node = fsl_chan->ld_queue.next;
[...]
+		ld_node = ld_node->next);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#703: FILE: drivers/dma/fsldma.c:589:
+		(ld_node != &fsl_chan->ld_queue)
+			&& (dma_async_is_complete(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#703: FILE: drivers/dma/fsldma.c:589:
+			&& (dma_async_is_complete(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: drivers/dma/fsldma.c:601:
+		dev_dbg(fsl_chan->dev, "xfer LDs staring from 0x%016llx\n",
+				(u64)next_dest_addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#745: FILE: drivers/dma/fsldma.c:631:
+		int i;
+		dev_dbg(fsl_chan->dev, "Ch %d, LD %08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: drivers/dma/fsldma.c:632:
+		dev_dbg(fsl_chan->dev, "Ch %d, LD %08x\n",
+				fsl_chan->id, ld->async_tx.phys);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: drivers/dma/fsldma.c:635:
+			dev_dbg(fsl_chan->dev, "LD offset %d: %08x\n",
+					i, *(((u32 *)&ld->hw) + i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#770: FILE: drivers/dma/fsldma.c:656:
+static enum dma_status fsl_dma_is_complete(struct dma_chan *chan,
+					dma_cookie_t cookie,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#799: FILE: drivers/dma/fsldma.c:685:
+	dev_dbg(fsl_chan->dev, "event: channel %d, stat = 0x%x\n",
+						fsl_chan->id, stat);

WARNING:SPLIT_STRING: quoted string split across lines
#815: FILE: drivers/dma/fsldma.c:701:
+		dev_dbg(fsl_chan->dev, "event: clndar 0x%016llx, "
+				"nlndar 0x%016llx\n", (u64)get_cdar(fsl_chan),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: drivers/dma/fsldma.c:719:
+		dev_dbg(fsl_chan->dev, "event: unhandled sr 0x%02x\n",
+					stat);

WARNING:LINE_SPACING: Missing a blank line after declarations
#857: FILE: drivers/dma/fsldma.c:743:
+	struct fsl_dma_chan *fsl_chan = (struct fsl_dma_chan *)data;
+	fsl_chan_ld_cleanup(fsl_chan);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#881: FILE: drivers/dma/fsldma.c:767:
+	if (!src) {
+		dev_err(fsl_chan->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#882: FILE: drivers/dma/fsldma.c:768:
+		dev_err(fsl_chan->dev,
+				"selftest: Cannot alloc memory for test!\n");

CHECK:SPACING: No space is necessary after a cast
#890: FILE: drivers/dma/fsldma.c:776:
+		src[i] = (u8) i;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#896: FILE: drivers/dma/fsldma.c:782:
+		dev_err(fsl_chan->dev,
+				"selftest: Cannot alloc resources for DMA\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#907: FILE: drivers/dma/fsldma.c:793:
+	addr = dma_map_single(fsl_chan->dev, dest, test_size / 2,
+							DMA_FROM_DEVICE);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#912: FILE: drivers/dma/fsldma.c:798:
+	msleep(2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#925: FILE: drivers/dma/fsldma.c:811:
+		dev_err(fsl_chan->dev,
+				"selftest: Cannot alloc resources for DMA\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#936: FILE: drivers/dma/fsldma.c:822:
+	addr = dma_map_single(fsl_chan->dev, src + test_size / 2,
+					test_size / 4, DMA_TO_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: drivers/dma/fsldma.c:825:
+	addr = dma_map_single(fsl_chan->dev, dest + test_size / 2,
+					test_size / 4, DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: drivers/dma/fsldma.c:832:
+	addr = dma_map_single(fsl_chan->dev, src + test_size * 3 / 4,
+					test_size / 4, DMA_TO_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#949: FILE: drivers/dma/fsldma.c:835:
+	addr = dma_map_single(fsl_chan->dev, dest + test_size * 3 / 4,
+					test_size / 4, DMA_FROM_DEVICE);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#964: FILE: drivers/dma/fsldma.c:850:
+	msleep(2);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#974: FILE: drivers/dma/fsldma.c:860:
+		for (i = 0; (*(src + i) == *(dest + i)) && (i < test_size);
+				i++);

WARNING:SPLIT_STRING: quoted string split across lines
#977: FILE: drivers/dma/fsldma.c:863:
+		dev_err(fsl_chan->dev, "selftest: Test failed, data %d/%d is "
+				"error! src 0x%x, dest 0x%x\n",

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#988: FILE: drivers/dma/fsldma.c:874:
+static int __devinit of_fsl_dma_chan_probe(struct of_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#989: FILE: drivers/dma/fsldma.c:875:
+static int __devinit of_fsl_dma_chan_probe(struct of_device *dev,
+			const struct of_device_id *match)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#996: FILE: drivers/dma/fsldma.c:882:
+	BUG_ON(!fdev);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*new_fsl_chan)...) over kzalloc(sizeof(struct fsl_dma_chan)...)
#999: FILE: drivers/dma/fsldma.c:885:
+	new_fsl_chan = kzalloc(sizeof(struct fsl_dma_chan), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1001: FILE: drivers/dma/fsldma.c:887:
+	if (!new_fsl_chan) {
+		dev_err(&dev->dev, "No free memory for allocating "

WARNING:SPLIT_STRING: quoted string split across lines
#1002: FILE: drivers/dma/fsldma.c:888:
+		dev_err(&dev->dev, "No free memory for allocating "
+				"dma channels!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1011: FILE: drivers/dma/fsldma.c:897:
+		dev_err(&dev->dev, "Can't get %s property 'reg'\n",
+				dev->node->full_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: drivers/dma/fsldma.c:913:
+	new_fsl_chan->reg_base = ioremap(new_fsl_chan->reg.start,
+			new_fsl_chan->reg.end - new_fsl_chan->reg.start + 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1032: FILE: drivers/dma/fsldma.c:918:
+		dev_err(&dev->dev, "There is no %d channel!\n",
+				new_fsl_chan->id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1038: FILE: drivers/dma/fsldma.c:924:
+	tasklet_init(&new_fsl_chan->tasklet, dma_do_tasklet,
+			(unsigned long)new_fsl_chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1062: FILE: drivers/dma/fsldma.c:948:
+	list_add_tail(&new_fsl_chan->common.device_node,
+			&fdev->common.channels);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1068: FILE: drivers/dma/fsldma.c:954:
+		err = request_irq(new_fsl_chan->irq,
+					&fsl_dma_chan_do_interrupt, IRQF_SHARED,

WARNING:SPLIT_STRING: quoted string split across lines
#1072: FILE: drivers/dma/fsldma.c:958:
+			dev_err(&dev->dev, "DMA channel %s request_irq error "
+				"with return %d\n", dev->node->full_name, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1084: FILE: drivers/dma/fsldma.c:970:
+	dev_info(&dev->dev, "#%d (%s), irq %d\n", new_fsl_chan->id,
+				match->compatible, new_fsl_chan->irq);

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#1099: FILE: drivers/dma/fsldma.c:985:
+static struct of_device_id of_fsl_dma_chan_ids[] = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1122: FILE: drivers/dma/fsldma.c:1008:
+static int __devinit of_fsl_dma_probe(struct of_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1123: FILE: drivers/dma/fsldma.c:1009:
+static int __devinit of_fsl_dma_probe(struct of_device *dev,
+			const struct of_device_id *match)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fdev)...) over kzalloc(sizeof(struct fsl_dma_device)...)
#1129: FILE: drivers/dma/fsldma.c:1015:
+	fdev = kzalloc(sizeof(struct fsl_dma_device), GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1131: FILE: drivers/dma/fsldma.c:1017:
+	if (!fdev) {
+		dev_err(&dev->dev, "No enough memory for 'priv'\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1142: FILE: drivers/dma/fsldma.c:1028:
+		dev_err(&dev->dev, "Can't get %s property 'reg'\n",
+				dev->node->full_name);

WARNING:SPLIT_STRING: quoted string split across lines
#1147: FILE: drivers/dma/fsldma.c:1033:
+	dev_info(&dev->dev, "Probe the Freescale DMA driver for %s "
+			"controller at 0x%08x...\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1165: FILE: drivers/dma/fsldma.c:1051:
+		err = request_irq(irq, &fsl_dma_do_interrupt, IRQF_SHARED,
+					"fsldma-device", fdev);

WARNING:SPLIT_STRING: quoted string split across lines
#1168: FILE: drivers/dma/fsldma.c:1054:
+			dev_err(&dev->dev, "DMA device request_irq error "
+				"with return %d\n", err);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->dev
#1173: FILE: drivers/dma/fsldma.c:1059:
+	dev_set_drvdata(&(dev->dev), fdev);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#1185: FILE: drivers/dma/fsldma.c:1071:
+static struct of_device_id of_fsl_dma_ids[] = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1210: FILE: drivers/dma/fsldma.h:1:
+/*

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1287: FILE: drivers/dma/fsldma.h:78:
+	u64 __bitwise	src_addr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1288: FILE: drivers/dma/fsldma.h:79:
+	u64 __bitwise	dst_addr;

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1289: FILE: drivers/dma/fsldma.h:80:
+	u64 __bitwise	next_ln_addr;

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1290: FILE: drivers/dma/fsldma.h:81:
+	u32 __bitwise	count;

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1291: FILE: drivers/dma/fsldma.h:82:
+	u32 __bitwise	reserve;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(32) over __attribute__((aligned(32)))
#1292: FILE: drivers/dma/fsldma.h:83:
+} __attribute__((aligned(32)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(32) over __attribute__((aligned(32)))
#1300: FILE: drivers/dma/fsldma.h:91:
+} __attribute__((aligned(32)));

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1303: FILE: drivers/dma/fsldma.h:94:
+	u32 __bitwise	mr;	/* 0x00 - Mode Register */

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1304: FILE: drivers/dma/fsldma.h:95:
+	u32 __bitwise	sr;	/* 0x04 - Status Register */

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1305: FILE: drivers/dma/fsldma.h:96:
+	u64 __bitwise	cdar;	/* 0x08 - Current descriptor address register */

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1306: FILE: drivers/dma/fsldma.h:97:
+	u64 __bitwise	sar;	/* 0x10 - Source Address Register */

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1307: FILE: drivers/dma/fsldma.h:98:
+	u64 __bitwise	dar;	/* 0x18 - Destination Address Register */

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1308: FILE: drivers/dma/fsldma.h:99:
+	u32 __bitwise	bcr;	/* 0x20 - Byte Count Register */

ERROR:POINTER_LOCATION: "foo __bitwise	bar" should be "foo __bitwise bar"
#1309: FILE: drivers/dma/fsldma.h:100:
+	u64 __bitwise	ndar;	/* 0x24 - Next Descriptor Address Register */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#1384: FILE: drivers/dma/fsldma.h:175:
+#define DMA_IN(fsl_chan, addr, width)					\
+		(((fsl_chan)->feature & FSL_DMA_BIG_ENDIAN) ?		\
+			in_be##width(addr) : in_le##width(addr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#1387: FILE: drivers/dma/fsldma.h:178:
+#define DMA_OUT(fsl_chan, addr, val, width)				\
+		(((fsl_chan)->feature & FSL_DMA_BIG_ENDIAN) ?		\
+			out_be##width(addr, val) : out_le##width(addr, val))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#1387: FILE: drivers/dma/fsldma.h:178:
+#define DMA_OUT(fsl_chan, addr, val, width)				\
+		(((fsl_chan)->feature & FSL_DMA_BIG_ENDIAN) ?		\
+			out_be##width(addr, val) : out_le##width(addr, val))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1391: FILE: drivers/dma/fsldma.h:182:
+#define DMA_TO_CPU(fsl_chan, d, width)					\
+		(((fsl_chan)->feature & FSL_DMA_BIG_ENDIAN) ?		\
+			be##width##_to_cpu(d) :	le##width##_to_cpu(d))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#1394: FILE: drivers/dma/fsldma.h:185:
+#define CPU_TO_DMA(fsl_chan, c, width)					\
+		(((fsl_chan)->feature & FSL_DMA_BIG_ENDIAN) ?		\
+			cpu_to_be##width(c) : cpu_to_le##width(c))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363384.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 30 warnings, 65 checks, 1326 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363384.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
