WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/firewire/net.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#147: FILE: drivers/firewire/net.c:68:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#155: FILE: drivers/firewire/net.c:76:
+} __attribute__((packed));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: drivers/firewire/net.c:98:
+static inline void fwnet_make_uf_hdr(struct rfc2734_header *hdr,
+		unsigned ether_type)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#177: FILE: drivers/firewire/net.c:98:
+		unsigned ether_type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: drivers/firewire/net.c:105:
+static inline void fwnet_make_ff_hdr(struct rfc2734_header *hdr,
+		unsigned ether_type, unsigned dg_size, unsigned dgl)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#184: FILE: drivers/firewire/net.c:105:
+		unsigned ether_type, unsigned dg_size, unsigned dgl)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#184: FILE: drivers/firewire/net.c:105:
+		unsigned ether_type, unsigned dg_size, unsigned dgl)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#184: FILE: drivers/firewire/net.c:105:
+		unsigned ether_type, unsigned dg_size, unsigned dgl)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: drivers/firewire/net.c:114:
+static inline void fwnet_make_sf_hdr(struct rfc2734_header *hdr,
+		unsigned lf, unsigned dg_size, unsigned fg_off, unsigned dgl)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#193: FILE: drivers/firewire/net.c:114:
+		unsigned lf, unsigned dg_size, unsigned fg_off, unsigned dgl)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#193: FILE: drivers/firewire/net.c:114:
+		unsigned lf, unsigned dg_size, unsigned fg_off, unsigned dgl)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#193: FILE: drivers/firewire/net.c:114:
+		unsigned lf, unsigned dg_size, unsigned fg_off, unsigned dgl)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#193: FILE: drivers/firewire/net.c:114:
+		unsigned lf, unsigned dg_size, unsigned fg_off, unsigned dgl)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#224: FILE: drivers/firewire/net.c:145:
+	spinlock_t lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#233: FILE: drivers/firewire/net.c:154:
+	unsigned broadcast_rcv_next_ptr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#234: FILE: drivers/firewire/net.c:155:
+	unsigned num_broadcast_rcv_ptrs;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#235: FILE: drivers/firewire/net.c:156:
+	unsigned rcv_buffer_size;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#241: FILE: drivers/firewire/net.c:162:
+	unsigned broadcast_xmt_max_payload;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#274: FILE: drivers/firewire/net.c:195:
+	unsigned pdg_size;        /* pd_list size */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: drivers/firewire/net.c:198:
+	unsigned max_payload;     /* includes RFC2374_FRAG_HDR_SIZE overhead */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#280: FILE: drivers/firewire/net.c:201:
+	unsigned speed;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#296: FILE: drivers/firewire/net.c:217:
+	unsigned max_payload;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: drivers/firewire/net.c:229:
+static int fwnet_header_create(struct sk_buff *skb, struct net_device *net,
+			unsigned short type, const void *daddr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#309: FILE: drivers/firewire/net.c:230:
+			const void *saddr, unsigned len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: drivers/firewire/net.c:283:
+static void fwnet_header_cache_update(struct hh_cache *hh,
+		const struct net_device *net, const unsigned char *haddr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#384: FILE: drivers/firewire/net.c:305:
+			       unsigned offset, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#384: FILE: drivers/firewire/net.c:305:
+			       unsigned offset, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#387: FILE: drivers/firewire/net.c:308:
+	unsigned end = offset + len;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#397: FILE: drivers/firewire/net.c:318:
+static struct fwnet_fragment_info *fwnet_frag_new(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#398: FILE: drivers/firewire/net.c:319:
+	struct fwnet_partial_datagram *pd, unsigned offset, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#398: FILE: drivers/firewire/net.c:319:
+	struct fwnet_partial_datagram *pd, unsigned offset, unsigned len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: drivers/firewire/net.c:384:
+static struct fwnet_partial_datagram *fwnet_pd_new(struct net_device *net,
+		struct fwnet_peer *peer, u16 datagram_label, unsigned dg_size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#463: FILE: drivers/firewire/net.c:384:
+		struct fwnet_peer *peer, u16 datagram_label, unsigned dg_size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#464: FILE: drivers/firewire/net.c:385:
+		void *frag_buf, unsigned frag_off, unsigned frag_len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#464: FILE: drivers/firewire/net.c:385:
+		void *frag_buf, unsigned frag_off, unsigned frag_len)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fi"
#475: FILE: drivers/firewire/net.c:396:
+	if (fi == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new->skb"
#481: FILE: drivers/firewire/net.c:402:
+	if (new->skb == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#513: FILE: drivers/firewire/net.c:434:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: drivers/firewire/net.c:448:
+static bool fwnet_pd_update(struct fwnet_peer *peer,
+		struct fwnet_partial_datagram *pd, void *frag_buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#528: FILE: drivers/firewire/net.c:449:
+		unsigned frag_off, unsigned frag_len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#528: FILE: drivers/firewire/net.c:449:
+		unsigned frag_off, unsigned frag_len)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fwnet_frag_new"
#530: FILE: drivers/firewire/net.c:451:
+	if (fwnet_frag_new(pd, frag_off, frag_len) == NULL)

WARNING:TYPO_SPELLING: 'beginnig' may be misspelled - perhaps 'beginning'?
#536: FILE: drivers/firewire/net.c:457:
+	 * Move list entry to beginnig of list so that oldest partial
 	                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: drivers/firewire/net.c:489:
+static struct fwnet_peer *fwnet_peer_find_by_node_id(struct fwnet_device *dev,
+						int node_id, int generation)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#581: FILE: drivers/firewire/net.c:502:
+static unsigned fwnet_max_payload(unsigned max_rec, unsigned speed)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#581: FILE: drivers/firewire/net.c:502:
+static unsigned fwnet_max_payload(unsigned max_rec, unsigned speed)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#581: FILE: drivers/firewire/net.c:502:
+static unsigned fwnet_max_payload(unsigned max_rec, unsigned speed)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#593: FILE: drivers/firewire/net.c:514:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#625: FILE: drivers/firewire/net.c:546:
+		unsigned sspd;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#692: FILE: drivers/firewire/net.c:613:
+	if (dev_hard_header(skb, net, ether_type,
+			   is_broadcast ? &broadcast_hw : &guid,

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#705: FILE: drivers/firewire/net.c:626:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#757: FILE: drivers/firewire/net.c:678:
+	unsigned lf;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pd"
#813: FILE: drivers/firewire/net.c:734:
+	if (pd == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: drivers/firewire/net.c:738:
+			fwnet_pd_delete(list_first_entry(&peer->pd_list,
+				struct fwnet_partial_datagram, pd_link));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pd"
#822: FILE: drivers/firewire/net.c:743:
+		if (pd == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pd"
#837: FILE: drivers/firewire/net.c:758:
+			if (pd == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#888: FILE: drivers/firewire/net.c:809:
+static void fwnet_receive_packet(struct fw_card *card, struct fw_request *r,
+		int tcode, int destination, int source, int generation,

CHECK:BRACES: braces {} should be used on all arms of this statement
#901: FILE: drivers/firewire/net.c:822:
+	if (offset != dev->handler.offset)
[...]
+	else if (tcode != TCODE_WRITE_BLOCK_REQUEST)
[...]
+	else if (fwnet_incoming_packet(dev, payload, length,
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#909: FILE: drivers/firewire/net.c:830:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: drivers/firewire/net.c:837:
+static void fwnet_receive_broadcast(struct fw_iso_context *context,
+		u32 cycle, size_t header_length, void *header, void *data)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1008: FILE: drivers/firewire/net.c:929:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fwnet_write_complete', this function's name, in a string
#1051: FILE: drivers/firewire/net.c:972:
+		fw_error("fwnet_write_complete: failed: %x\n", rcode);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1058: FILE: drivers/firewire/net.c:979:
+	unsigned tx_len;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1081: FILE: drivers/firewire/net.c:1002:
+		BUG();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1090: FILE: drivers/firewire/net.c:1011:
+		smp_rmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1102: FILE: drivers/firewire/net.c:1023:
+				fw_stream_packet_destination_id(3,
+						IEEE1394_BROADCAST_CHANNEL, 0),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1133: FILE: drivers/firewire/net.c:1054:
+	unsigned num_packets;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1134: FILE: drivers/firewire/net.c:1055:
+	unsigned max_receive;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1137: FILE: drivers/firewire/net.c:1058:
+	unsigned u;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1164: FILE: drivers/firewire/net.c:1085:
+		context = fw_iso_context_create(dev->card,
+		    FW_ISO_CONTEXT_RECEIVE, IEEE1394_BROADCAST_CHANNEL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: drivers/firewire/net.c:1093:
+		retval = fw_iso_buffer_init(&dev->broadcast_rcv_buffer,
+		    dev->card, FWNET_ISO_PAGE_COUNT, DMA_FROM_DEVICE);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1176: FILE: drivers/firewire/net.c:1097:
+		ptrptr = kmalloc(sizeof(void *) * num_packets, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1185: FILE: drivers/firewire/net.c:1106:
+			unsigned v;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1207: FILE: drivers/firewire/net.c:1128:
+		retval = fw_iso_context_queue(context, &packet,
+				&dev->broadcast_rcv_buffer, offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1217: FILE: drivers/firewire/net.c:1138:
+	retval = fw_iso_context_start(context, -1, 0,
+			FW_ISO_CONTEXT_MATCH_ALL_TAGS); /* ??? sync */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1276: FILE: drivers/firewire/net.c:1197:
+	unsigned max_payload;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptask"
#1284: FILE: drivers/firewire/net.c:1205:
+	if (ptask == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1309: FILE: drivers/firewire/net.c:1230:
+	if (memcmp(hdr_buf.h_dest, net->broadcast, FWNET_ALEN) == 0
+	    || proto == htons(ETH_P_ARP)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1310: FILE: drivers/firewire/net.c:1231:
+	    || proto == htons(ETH_P_ARP)
+	    || (proto == htons(ETH_P_IP)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1311: FILE: drivers/firewire/net.c:1232:
+	    || (proto == htons(ETH_P_IP)
+		&& IN_MULTICAST(ntohl(ip_hdr(skb)->daddr)))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skb"
#1392: FILE: drivers/firewire/net.c:1313:
+	if (skb != NULL)

WARNING:CONST_STRUCT: struct ethtool_ops should normally be const
#1424: FILE: drivers/firewire/net.c:1345:
+static struct ethtool_ops fwnet_ethtool_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:MEMORY_BARRIER: memory barrier without comment
#1482: FILE: drivers/firewire/net.c:1403:
+	smp_rmb();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1500: FILE: drivers/firewire/net.c:1421:
+	unsigned max_mtu;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!net"
#1512: FILE: drivers/firewire/net.c:1433:
+	if (net == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1705: FILE: drivers/firewire/net.c:1626:
+	fwnet_packet_task_cache = kmem_cache_create("packet_task",
+			sizeof(struct fwnet_packet_task), 0, 0, NULL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108428.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 51 warnings, 36 checks, 1688 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108428.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
