CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: arch/um/os-Linux/start_up.c:245:
+	if ((ptrace(PTRACE_OLDSETOPTIONS, pid, 0,
 		   (void *) PTRACE_O_TRACESYSGOOD) < 0))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#288: FILE: arch/um/os-Linux/start_up.c:257:
+		    (WSTOPSIG(status) == (SIGTRAP|0x80))) {
 		                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#301: FILE: arch/um/os-Linux/start_up.c:268:
 		}
+		else if (WIFSTOPPED(status) && (WSTOPSIG(status) == SIGTRAP))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: arch/um/os-Linux/start_up.c:299:
+	if ((ptrace(PTRACE_OLDSETOPTIONS, pid, 0,
 		   (void *) PTRACE_O_TRACESYSGOOD) < 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: arch/um/os-Linux/start_up.c:311:
+		if (!WIFSTOPPED(status) ||
 		   (WSTOPSIG(status) != (SIGTRAP | 0x80)))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#410: FILE: arch/um/os-Linux/start_up.c:478:
 	}
+	else if (!proc_mm)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#412: FILE: arch/um/os-Linux/start_up.c:480:
+	else non_fatal("found\n");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#430: FILE: arch/um/os-Linux/start_up.c:506:
+	if (file == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#451: FILE: arch/um/os-Linux/start_up.c:524:
+	if (new == NULL) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#489: FILE: include/asm-um/processor-generic.h:62:
+^I.regs^I^I   ^I= EMPTY_REGS,^I\$

ERROR:SPACING: space required before the open parenthesis '('
#574: FILE: arch/um/kernel/process.c:42:
+	for(i = 0; i < ncpus; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->thread.prev_sched"
#628: FILE: arch/um/kernel/process.c:148:
+	if (current->thread.prev_sched != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->thread.prev_sched"
#651: FILE: arch/um/kernel/process.c:172:
+	if (current->thread.prev_sched == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#685: FILE: arch/um/kernel/process.c:244:
+	while(1) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task->mm"
#702: FILE: arch/um/kernel/process.c:273:
+	if (task->mm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pte_out"
#726: FILE: arch/um/kernel/process.c:292:
+	if (pte_out != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#802: FILE: arch/um/sys-i386/signal.c:38:
+ ^Istruct sigcontext sc;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#802: FILE: arch/um/sys-i386/signal.c:38:
+ ^Istruct sigcontext sc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: arch/um/sys-i386/signal.c:38:
+ ^Istruct sigcontext sc;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#819: FILE: arch/um/sys-i386/signal.c:51:
+^I  ^Iprintk(KERN_ERR "copy_sc_from_user_skas - PTRACE_SETFPREGS "$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#819: FILE: arch/um/sys-i386/signal.c:51:
+^I  ^Iprintk(KERN_ERR "copy_sc_from_user_skas - PTRACE_SETFPREGS "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#819: FILE: arch/um/sys-i386/signal.c:51:
+	  	printk(KERN_ERR "copy_sc_from_user_skas - PTRACE_SETFPREGS "

WARNING:SPLIT_STRING: quoted string split across lines
#820: FILE: arch/um/sys-i386/signal.c:52:
+	  	printk(KERN_ERR "copy_sc_from_user_skas - PTRACE_SETFPREGS "
+		       "failed, errno = %d\n", -err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#849: FILE: arch/um/sys-i386/signal.c:91:
+^I  ^Iprintk(KERN_ERR "copy_sc_to_user_skas - PTRACE_GETFPREGS "$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#849: FILE: arch/um/sys-i386/signal.c:91:
+^I  ^Iprintk(KERN_ERR "copy_sc_to_user_skas - PTRACE_GETFPREGS "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#849: FILE: arch/um/sys-i386/signal.c:91:
+	  	printk(KERN_ERR "copy_sc_to_user_skas - PTRACE_GETFPREGS "

WARNING:SPLIT_STRING: quoted string split across lines
#850: FILE: arch/um/sys-i386/signal.c:92:
+	  	printk(KERN_ERR "copy_sc_to_user_skas - PTRACE_GETFPREGS "
+		       "failed, errno = %d\n", err);

CHECK:SPACING: No space is necessary after a cast
#934: FILE: arch/um/sys-i386/signal.c:301:
+		(struct rt_sigframe __user *) (sp - 4);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'to->thread.arch.fs == 0'
#1116: FILE: arch/um/sys-x86_64/syscalls.c:110:
+	if ((to->thread.arch.fs == 0) || (to->mm == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'to->mm == NULL'
#1116: FILE: arch/um/sys-x86_64/syscalls.c:110:
+	if ((to->thread.arch.fs == 0) || (to->mm == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!to->mm"
#1116: FILE: arch/um/sys-x86_64/syscalls.c:110:
+	if ((to->thread.arch.fs == 0) || (to->mm == NULL))

CHECK:SPACING: No space is necessary after a cast
#1120: FILE: arch/um/sys-x86_64/syscalls.c:113:
+	arch_prctl(to, ARCH_SET_FS, (void __user *) to->thread.arch.fs);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1163: FILE: arch/um/sys-i386/tls.c:86:
+		struct uml_tls_struct* curr =

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1190: FILE: arch/um/sys-i386/tls.c:126:
+		struct uml_tls_struct* curr =

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1217: FILE: arch/um/sys-i386/tls.c:150:
+		struct uml_tls_struct* curr =

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lim.rlim_cur == RLIM_INFINITY'
#1346: FILE: arch/um/os-Linux/main.c:32:
+	if ((lim.rlim_cur == RLIM_INFINITY) || (lim.rlim_cur > STACKSIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lim.rlim_cur > STACKSIZE'
#1346: FILE: arch/um/os-Linux/main.c:32:
+	if ((lim.rlim_cur == RLIM_INFINITY) || (lim.rlim_cur > STACKSIZE)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_argv"
#1396: FILE: arch/um/os-Linux/main.c:124:
+	if (new_argv == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_argv[i]"
#1404: FILE: arch/um/os-Linux/main.c:130:
+		if (new_argv[i] == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ret"
#1481: FILE: arch/um/os-Linux/main.c:207:
+	if (ret == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptr"
#1490: FILE: arch/um/os-Linux/main.c:217:
+	if (ptr == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= uml_physmem'
#1510: FILE: arch/um/os-Linux/main.c:250:
+	if ((addr >= uml_physmem) && (addr < high_physmem)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < high_physmem'
#1510: FILE: arch/um/os-Linux/main.c:250:
+	if ((addr >= uml_physmem) && (addr < high_physmem)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1510: FILE: arch/um/os-Linux/main.c:250:
+	if ((addr >= uml_physmem) && (addr < high_physmem)) {
[...]
-	else if((addr >= start_vm) && (addr < end_vm)){
[...]
 			vfree(ptr);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1516: FILE: arch/um/os-Linux/main.c:254:
 	}
+	else if ((addr >= start_vm) && (addr < end_vm)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptrace_ldt.ptr"
#1635: FILE: arch/um/sys-i386/ldt.c:98:
+	if (ptrace_ldt.ptr == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1665: FILE: arch/um/sys-i386/ldt.c:142:
+	if (bytecount > LDT_ENTRY_SIZE*LDT_ENTRIES)
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1690: FILE: arch/um/sys-i386/ldt.c:160:
+		for (i=0; i<ldt->entry_count/LDT_ENTRIES_PER_PAGE && bytecount;
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1690: FILE: arch/um/sys-i386/ldt.c:160:
+		for (i=0; i<ldt->entry_count/LDT_ENTRIES_PER_PAGE && bytecount;
 		           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1690: FILE: arch/um/sys-i386/ldt.c:160:
+		for (i=0; i<ldt->entry_count/LDT_ENTRIES_PER_PAGE && bytecount;
 		                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1719: FILE: arch/um/sys-i386/ldt.c:189:
+	if (bytecount > 5*LDT_ENTRY_SIZE)
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1787: FILE: arch/um/sys-i386/ldt.c:244:
+		for (i=ldt->entry_count/LDT_ENTRIES_PER_PAGE;
 		      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1787: FILE: arch/um/sys-i386/ldt.c:244:
+		for (i=ldt->entry_count/LDT_ENTRIES_PER_PAGE;
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1788: FILE: arch/um/sys-i386/ldt.c:245:
+		     i*LDT_ENTRIES_PER_PAGE <= ldt_info.entry_number;
 		      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1826: FILE: arch/um/sys-i386/ldt.c:278:
+	if (ldt_info.base_addr == 0 && ldt_info.limit == 0 &&
+	   (func == 1 || LDT_empty(&ldt_info))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host_ldt_entries"
#1835: FILE: arch/um/sys-i386/ldt.c:329:
+	if (host_ldt_entries != NULL) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1844: FILE: arch/um/sys-i386/ldt.c:337:
+	for (i = LDT_PAGES_MAX-1, order=0; i; i>>=1, order++)
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1844: FILE: arch/um/sys-i386/ldt.c:337:
+	for (i = LDT_PAGES_MAX-1, order=0; i; i>>=1, order++)
 	                               ^

ERROR:SPACING: spaces required around that '>>=' (ctx:VxV)
#1844: FILE: arch/um/sys-i386/ldt.c:337:
+	for (i = LDT_PAGES_MAX-1, order=0; i; i>>=1, order++)
 	                                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ldt"
#1852: FILE: arch/um/sys-i386/ldt.c:342:
+	if (ldt == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1853: FILE: arch/um/sys-i386/ldt.c:343:
+		printk(KERN_ERR "ldt_get_host_info: couldn't allocate buffer "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ldt_get_host_info', this function's name, in a string
#1853: FILE: arch/um/sys-i386/ldt.c:343:
+		printk(KERN_ERR "ldt_get_host_info: couldn't allocate buffer "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#1854: FILE: arch/um/sys-i386/ldt.c:344:
+		printk(KERN_ERR "ldt_get_host_info: couldn't allocate buffer "
+		       "for host ldt\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1862: FILE: arch/um/sys-i386/ldt.c:350:
+		printk(KERN_ERR "ldt_get_host_info: couldn't read host ldt\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ldt_get_host_info', this function's name, in a string
#1862: FILE: arch/um/sys-i386/ldt.c:350:
+		printk(KERN_ERR "ldt_get_host_info: couldn't read host ldt\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1874: FILE: arch/um/sys-i386/ldt.c:359:
+	for (i=0, size=0; i<ret/LDT_ENTRY_SIZE; i++) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1874: FILE: arch/um/sys-i386/ldt.c:359:
+	for (i=0, size=0; i<ret/LDT_ENTRY_SIZE; i++) {
 	              ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1874: FILE: arch/um/sys-i386/ldt.c:359:
+	for (i=0, size=0; i<ret/LDT_ENTRY_SIZE; i++) {
 	                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1874: FILE: arch/um/sys-i386/ldt.c:359:
+	for (i=0, size=0; i<ret/LDT_ENTRY_SIZE; i++) {
 	                       ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1880: FILE: arch/um/sys-i386/ldt.c:364:
+	if (size < ARRAY_SIZE(dummy_list))
[...]
 	else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#1888: FILE: arch/um/sys-i386/ldt.c:369:
+		if (tmp == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1889: FILE: arch/um/sys-i386/ldt.c:370:
+			printk(KERN_ERR "ldt_get_host_info: couldn't allocate "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ldt_get_host_info', this function's name, in a string
#1889: FILE: arch/um/sys-i386/ldt.c:370:
+			printk(KERN_ERR "ldt_get_host_info: couldn't allocate "

WARNING:SPLIT_STRING: quoted string split across lines
#1890: FILE: arch/um/sys-i386/ldt.c:371:
+			printk(KERN_ERR "ldt_get_host_info: couldn't allocate "
+			       "host ldt list\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1898: FILE: arch/um/sys-i386/ldt.c:377:
+	for (i=0, k=0; i<ret/LDT_ENTRY_SIZE; i++) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1898: FILE: arch/um/sys-i386/ldt.c:377:
+	for (i=0, k=0; i<ret/LDT_ENTRY_SIZE; i++) {
 	           ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1898: FILE: arch/um/sys-i386/ldt.c:377:
+	for (i=0, k=0; i<ret/LDT_ENTRY_SIZE; i++) {
 	                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1898: FILE: arch/um/sys-i386/ldt.c:377:
+	for (i=0, k=0; i<ret/LDT_ENTRY_SIZE; i++) {
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1939: FILE: arch/um/sys-i386/ldt.c:423:
+			for (num_p=host_ldt_entries; *num_p != -1; num_p++) {
 			          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1968: FILE: arch/um/sys-i386/ldt.c:448:
+			printk(KERN_ERR "new_mm : /proc/mm copy_segments "

WARNING:SPLIT_STRING: quoted string split across lines
#1969: FILE: arch/um/sys-i386/ldt.c:449:
+			printk(KERN_ERR "new_mm : /proc/mm copy_segments "
+			       "failed, err = %d\n", -i);

CHECK:BRACES: Unbalanced braces around else statement
#1988: FILE: arch/um/sys-i386/ldt.c:463:
+		else {

ERROR:SPACING: spaces required around that '>' (ctx:OxV)
#1991: FILE: arch/um/sys-i386/ldt.c:465:
+			while (i-->0) {
 			          ^

CHECK:SPACING: No space is necessary after a cast
#2009: FILE: arch/um/sys-i386/ldt.c:493:
+			free_page((long) mm->ldt.u.pages[i]);

ERROR:SPACING: space required before the open parenthesis '('
#2108: FILE: arch/um/kernel/um_arch.c:221:
+	while(p < &__uml_postsetup_end) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 1'
#2119: FILE: arch/um/kernel/um_arch.c:258:
+		if ((i == 1) && (argv[i][0] == ' '))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2246: FILE: arch/um/sys-x86_64/signal.c:18:
+#define GETREG(regs, regno, sc, regname)				\
+	(regs)->regs[(regno) / sizeof(unsigned long)] = (sc)->regname

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#2246: FILE: arch/um/sys-x86_64/signal.c:18:
+#define GETREG(regs, regno, sc, regname)				\
+	(regs)->regs[(regno) / sizeof(unsigned long)] = (sc)->regname

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regname' may be better as '(regname)' to avoid precedence issues
#2246: FILE: arch/um/sys-x86_64/signal.c:18:
+#define GETREG(regs, regno, sc, regname)				\
+	(regs)->regs[(regno) / sizeof(unsigned long)] = (sc)->regname

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#2320: FILE: arch/um/sys-x86_64/signal.c:49:
+#define GETREG(regs, regno, sc, regname)				\
+	__get_user((regs)->regs.regs[(regno) / sizeof(unsigned long)],	\
+		   &(sc)->regname)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regname' may be better as '(regname)' to avoid precedence issues
#2320: FILE: arch/um/sys-x86_64/signal.c:49:
+#define GETREG(regs, regno, sc, regname)				\
+	__get_user((regs)->regs.regs[(regno) / sizeof(unsigned long)],	\
+		   &(sc)->regname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2355: FILE: arch/um/sys-x86_64/signal.c:82:
+	struct faultinfo * fi = &current->thread.arch.faultinfo;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#2364: FILE: arch/um/sys-x86_64/signal.c:88:
+#define PUTREG(regs, regno, sc, regname)				\
+	__put_user((regs)->regs.regs[(regno) / sizeof(unsigned long)],	\
+		   &(sc)->regname)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regname' may be better as '(regname)' to avoid precedence issues
#2364: FILE: arch/um/sys-x86_64/signal.c:88:
+#define PUTREG(regs, regno, sc, regname)				\
+	__put_user((regs)->regs.regs[(regno) / sizeof(unsigned long)],	\
+		   &(sc)->regname)

WARNING:TYPO_SPELLING: 'orignal' may be misspelled - perhaps 'original'?
#2375: FILE: arch/um/sys-x86_64/signal.c:95:
+	/* Must use orignal RSP, which is passed in, rather than what's in
 	            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#2413: FILE: arch/um/sys-x86_64/signal.c:149:
+	frame = (struct rt_sigframe __user *) ((unsigned long) frame - 128 - 8);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2456: FILE: arch/um/sys-i386/ptrace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2480: FILE: arch/um/sys-i386/ptrace.c:19:
+		printk(KERN_WARNING "arch_switch_tls failed, errno %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#2481: FILE: arch/um/sys-i386/ptrace.c:20:
+		printk(KERN_WARNING "arch_switch_tls failed, errno %d, "
+		       "not EINVAL\n", -err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2502: FILE: arch/um/sys-i386/ptrace.c:39:
+			printk(KERN_ERR "is_syscall : failed to read "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'is_syscall', this function's name, in a string
#2502: FILE: arch/um/sys-i386/ptrace.c:39:
+			printk(KERN_ERR "is_syscall : failed to read "

WARNING:SPLIT_STRING: quoted string split across lines
#2503: FILE: arch/um/sys-i386/ptrace.c:40:
+			printk(KERN_ERR "is_syscall : failed to read "
+			       "instruction from 0x%lx\n", addr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2534: FILE: arch/um/sys-i386/ptrace.c:92:
+	if (addr < MAX_REG_OFFSET)
[...]
+	else if ((addr >= offsetof(struct user, u_debugreg[0])) &&
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr == 4'
#2540: FILE: arch/um/sys-i386/ptrace.c:98:
+		if ((addr == 4) || (addr == 5))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr == 5'
#2540: FILE: arch/um/sys-i386/ptrace.c:98:
+		if ((addr == 4) || (addr == 5))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2569: FILE: arch/um/sys-i386/ptrace.c:138:
 	}
+	else if ((addr >= offsetof(struct user, u_debugreg[0])) &&

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2589: FILE: arch/um/sys-i386/ptrace.c:173:
+	tmp = (tmp | (tmp>>1)) & 0x5555; /* 0V0V0V0V0V0V0V0V */
 	                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2700: FILE: arch/um/kernel/exec.c:28:
+		printk(KERN_ERR "flush_thread - clearing address space failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flush_thread', this function's name, in a string
#2700: FILE: arch/um/kernel/exec.c:28:
+		printk(KERN_ERR "flush_thread - clearing address space failed, "

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2773: FILE: arch/um/include/sysdep-i386/ptrace.h:105:
+				     UPT_SYSCALL_ARG6(r) } } )

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2832: FILE: arch/um/include/os.h:141:
+extern int os_seek_file(int fd, unsigned long long offset);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2843: FILE: arch/um/os-Linux/process.c:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2885: FILE: arch/um/os-Linux/process.c:37:
+		printk(UM_KERN_ERR "os_process_pc - couldn't open '%s', "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'os_process_pc', this function's name, in a string
#2885: FILE: arch/um/os-Linux/process.c:37:
+		printk(UM_KERN_ERR "os_process_pc - couldn't open '%s', "

WARNING:SPLIT_STRING: quoted string split across lines
#2886: FILE: arch/um/os-Linux/process.c:38:
+		printk(UM_KERN_ERR "os_process_pc - couldn't open '%s', "
+		       "err = %d\n", proc_stat, -fd);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2894: FILE: arch/um/os-Linux/process.c:43:
+		printk(UM_KERN_ERR "os_process_pc - couldn't read '%s', "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'os_process_pc', this function's name, in a string
#2894: FILE: arch/um/os-Linux/process.c:43:
+		printk(UM_KERN_ERR "os_process_pc - couldn't read '%s', "

WARNING:SPLIT_STRING: quoted string split across lines
#2895: FILE: arch/um/os-Linux/process.c:44:
+		printk(UM_KERN_ERR "os_process_pc - couldn't read '%s', "
+		       "err = %d\n", proc_stat, errno);

WARNING:SPLIT_STRING: quoted string split across lines
#2906: FILE: arch/um/os-Linux/process.c:52:
 		  "%*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d "
+		  "%*d %*d %*d %*d %*d %lu", &pc) != 1) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2907: FILE: arch/um/os-Linux/process.c:53:
+		printk(UM_KERN_ERR "os_process_pc - couldn't find pc in '%s'\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'os_process_pc', this function's name, in a string
#2907: FILE: arch/um/os-Linux/process.c:53:
+		printk(UM_KERN_ERR "os_process_pc - couldn't find pc in '%s'\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2925: FILE: arch/um/os-Linux/process.c:71:
+		printk(UM_KERN_ERR "Couldn't open '%s', err = %d\n", stat, -fd);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2935: FILE: arch/um/os-Linux/process.c:79:
+		printk(UM_KERN_ERR "Couldn't read '%s', err = %d\n", stat,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2945: FILE: arch/um/os-Linux/process.c:87:
+		printk(UM_KERN_ERR "Failed to scan '%s'\n", data);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3028: FILE: arch/um/os-Linux/process.c:203:
+	printk(UM_KERN_INFO "Checking host MADV_REMOVE support...");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3033: FILE: arch/um/os-Linux/process.c:206:
+		printk(UM_KERN_ERR "Creating test memory file failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#3034: FILE: arch/um/os-Linux/process.c:207:
+		printk(UM_KERN_ERR "Creating test memory file failed, "
+		       "err = %d\n", -fd);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3043: FILE: arch/um/os-Linux/process.c:214:
+		printk(UM_KERN_ERR "Mapping test memory file failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#3044: FILE: arch/um/os-Linux/process.c:215:
+		printk(UM_KERN_ERR "Mapping test memory file failed, "
+		       "err = %d\n", -errno);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3051: FILE: arch/um/os-Linux/process.c:220:
+		printk(UM_KERN_ERR "MADV_REMOVE failed, err = %d\n", -errno);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_fd"
#3169: FILE: arch/um/kernel/irq.c:91:
+		for (irq_fd = active_fds; irq_fd != NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3180: FILE: arch/um/kernel/irq.c:124:
+	else events = UM_POLLOUT;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3191: FILE: arch/um/kernel/irq.c:138:
+			printk(KERN_ERR "Registering fd %d twice\n", fd);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3192: FILE: arch/um/kernel/irq.c:139:
+			printk(KERN_ERR "Irqs : %d, %d\n", irq_fd->irq, irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3193: FILE: arch/um/kernel/irq.c:140:
+			printk(KERN_ERR "Ids : 0x%p, 0x%p\n", irq_fd->id,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3223: FILE: arch/um/kernel/irq.c:252:
+		printk(KERN_ERR "find_irq_by_fd doesn't have descriptor %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_irq_by_fd', this function's name, in a string
#3223: FILE: arch/um/kernel/irq.c:252:
+		printk(KERN_ERR "find_irq_by_fd doesn't have descriptor %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3231: FILE: arch/um/kernel/irq.c:258:
+		printk(KERN_ERR "find_irq_by_fd - mismatch between active_fds "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_irq_by_fd', this function's name, in a string
#3231: FILE: arch/um/kernel/irq.c:258:
+		printk(KERN_ERR "find_irq_by_fd - mismatch between active_fds "

WARNING:SPLIT_STRING: quoted string split across lines
#3232: FILE: arch/um/kernel/irq.c:259:
+		printk(KERN_ERR "find_irq_by_fd - mismatch between active_fds "
+		       "and pollfds, fd %d vs %d, need %d\n", irq->fd,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq"
#3241: FILE: arch/um/kernel/irq.c:295:
+	if (irq == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3263: FILE: arch/um/kernel/irq.c:413:
+		printk(KERN_ERR "init_aio_irq - os_pipe failed, err = %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_aio_irq', this function's name, in a string
#3263: FILE: arch/um/kernel/irq.c:413:
+		printk(KERN_ERR "init_aio_irq - os_pipe failed, err = %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3273: FILE: arch/um/kernel/irq.c:422:
+		printk(KERN_ERR "init_aio_irq - : um_request_irq failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_aio_irq', this function's name, in a string
#3273: FILE: arch/um/kernel/irq.c:422:
+		printk(KERN_ERR "init_aio_irq - : um_request_irq failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#3274: FILE: arch/um/kernel/irq.c:423:
+		printk(KERN_ERR "init_aio_irq - : um_request_irq failed, "
+		       "err = %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3315: FILE: arch/um/kernel/physmem.c:78:
+			printk(KERN_ERR "try increasing the host's "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3335: FILE: arch/um/kernel/physmem.c:206:
+			printk(KERN_ERR "Mapping iomem region for driver '%s' "

WARNING:SPLIT_STRING: quoted string split across lines
#3336: FILE: arch/um/kernel/physmem.c:207:
+			printk(KERN_ERR "Mapping iomem region for driver '%s' "
+			       "failed, errno = %d\n", region->driver, -err);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->type == MMAP'
#3592: FILE: arch/um/kernel/tlb.c:28:
+		if ((last->type == MMAP) &&
 		   (last->u.mmap.addr + last->u.mmap.len == virt) &&
 		   (last->u.mmap.prot == prot) && (last->u.mmap.fd == fd) &&
+		   (last->u.mmap.offset + last->u.mmap.len == offset)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mmap.prot == prot'
#3592: FILE: arch/um/kernel/tlb.c:28:
+		if ((last->type == MMAP) &&
 		   (last->u.mmap.addr + last->u.mmap.len == virt) &&
 		   (last->u.mmap.prot == prot) && (last->u.mmap.fd == fd) &&
+		   (last->u.mmap.offset + last->u.mmap.len == offset)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mmap.fd == fd'
#3592: FILE: arch/um/kernel/tlb.c:28:
+		if ((last->type == MMAP) &&
 		   (last->u.mmap.addr + last->u.mmap.len == virt) &&
 		   (last->u.mmap.prot == prot) && (last->u.mmap.fd == fd) &&
+		   (last->u.mmap.offset + last->u.mmap.len == offset)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3593: FILE: arch/um/kernel/tlb.c:29:
+		if ((last->type == MMAP) &&
 		   (last->u.mmap.addr + last->u.mmap.len == virt) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->type == MUNMAP'
#3616: FILE: arch/um/kernel/tlb.c:64:
+		if ((last->type == MUNMAP) &&
+		   (last->u.munmap.addr + last->u.mmap.len == addr)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3617: FILE: arch/um/kernel/tlb.c:65:
+		if ((last->type == MUNMAP) &&
+		   (last->u.munmap.addr + last->u.mmap.len == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->type == MPROTECT'
#3636: FILE: arch/um/kernel/tlb.c:94:
+		if ((last->type == MPROTECT) &&
 		   (last->u.mprotect.addr + last->u.mprotect.len == addr) &&
+		   (last->u.mprotect.prot == prot)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mprotect.prot == prot'
#3636: FILE: arch/um/kernel/tlb.c:94:
+		if ((last->type == MPROTECT) &&
 		   (last->u.mprotect.addr + last->u.mprotect.len == addr) &&
+		   (last->u.mprotect.prot == prot)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3637: FILE: arch/um/kernel/tlb.c:95:
+		if ((last->type == MPROTECT) &&
 		   (last->u.mprotect.addr + last->u.mprotect.len == addr) &&

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#3665: FILE: arch/um/kernel/tlb.c:149:
 		}
+		else if (pte_newprot(*pte))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3714: FILE: arch/um/kernel/tlb.c:251:
+		printk(KERN_ERR "fix_range_common: failed, killing current "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fix_range_common', this function's name, in a string
#3714: FILE: arch/um/kernel/tlb.c:251:
+		printk(KERN_ERR "fix_range_common: failed, killing current "

WARNING:SPLIT_STRING: quoted string split across lines
#3715: FILE: arch/um/kernel/tlb.c:252:
+		printk(KERN_ERR "fix_range_common: failed, killing current "
+		       "process\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#3802: FILE: arch/um/kernel/tlb.c:333:
 		}
+		else if (pte_newprot(*pte)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#3848: FILE: arch/um/kernel/tlb.c:392:
 	}
+	else if (pte_newprot(*pte))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3861: FILE: arch/um/kernel/tlb.c:403:
+	printk(KERN_ERR "Failed to flush page for address 0x%lx\n", address);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#3917: FILE: arch/um/kernel/tlb.c:462:
+	for (i = 0; i <= last && !ret; i++) {
+	op = &ops[i];

ERROR:SPACING: space required before the open parenthesis '('
#3919: FILE: arch/um/kernel/tlb.c:464:
+		switch(op->type) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3928: FILE: arch/um/kernel/tlb.c:481:
+			printk(KERN_ERR "Unknown op type %d in do_ops\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_ops', this function's name, in a string
#3928: FILE: arch/um/kernel/tlb.c:481:
+			printk(KERN_ERR "Unknown op type %d in do_ops\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end_addr > CONFIG_STUB_START'
#3939: FILE: arch/um/kernel/tlb.c:493:
+	if (!proc_mm && (end_addr > CONFIG_STUB_START))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_mm"
#3952: FILE: arch/um/kernel/tlb.c:502:
+	if (vma->vm_mm == NULL)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3954: FILE: arch/um/kernel/tlb.c:504:
+	else fix_range(vma->vm_mm, start, end, 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#3984: FILE: arch/um/kernel/tlb.c:527:
+	while (vma != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4051: FILE: arch/um/os-Linux/aio.c:115:
+			printk(UM_KERN_ERR "aio_thread - io_getevents failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_thread', this function's name, in a string
#4051: FILE: arch/um/os-Linux/aio.c:115:
+			printk(UM_KERN_ERR "aio_thread - io_getevents failed, "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4063: FILE: arch/um/os-Linux/aio.c:125:
+				printk(UM_KERN_ERR "aio_thread - write failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_thread', this function's name, in a string
#4063: FILE: arch/um/os-Linux/aio.c:125:
+				printk(UM_KERN_ERR "aio_thread - write failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#4064: FILE: arch/um/os-Linux/aio.c:126:
+				printk(UM_KERN_ERR "aio_thread - write failed, "
+				       "fd = %d, err = %d\n", reply_fd, errno);

ERROR:SPACING: space required before the open parenthesis '('
#4077: FILE: arch/um/os-Linux/aio.c:144:
+	switch(req->type) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4086: FILE: arch/um/os-Linux/aio.c:155:
+		printk(UM_KERN_ERR "do_not_aio - bad request type : %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_not_aio', this function's name, in a string
#4086: FILE: arch/um/os-Linux/aio.c:155:
+		printk(UM_KERN_ERR "do_not_aio - bad request type : %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4109: FILE: arch/um/os-Linux/aio.c:182:
+				printk(UM_KERN_ERR "not_aio_thread - "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'not_aio_thread', this function's name, in a string
#4109: FILE: arch/um/os-Linux/aio.c:182:
+				printk(UM_KERN_ERR "not_aio_thread - "

WARNING:SPLIT_STRING: quoted string split across lines
#4110: FILE: arch/um/os-Linux/aio.c:183:
+				printk(UM_KERN_ERR "not_aio_thread - "
+				       "read failed, fd = %d, err = %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4116: FILE: arch/um/os-Linux/aio.c:187:
+				printk(UM_KERN_ERR "not_aio_thread - short "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'not_aio_thread', this function's name, in a string
#4116: FILE: arch/um/os-Linux/aio.c:187:
+				printk(UM_KERN_ERR "not_aio_thread - short "

WARNING:SPLIT_STRING: quoted string split across lines
#4117: FILE: arch/um/os-Linux/aio.c:188:
+				printk(UM_KERN_ERR "not_aio_thread - short "
+				       "read, fd = %d, length = %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4130: FILE: arch/um/os-Linux/aio.c:198:
+			printk(UM_KERN_ERR "not_aio_thread - write failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'not_aio_thread', this function's name, in a string
#4130: FILE: arch/um/os-Linux/aio.c:198:
+			printk(UM_KERN_ERR "not_aio_thread - write failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#4131: FILE: arch/um/os-Linux/aio.c:199:
+			printk(UM_KERN_ERR "not_aio_thread - write failed, "
+			       "fd = %d, err = %d\n", req.aio->reply_fd, errno);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4163: FILE: arch/um/os-Linux/aio.c:235:
+	printk(UM_KERN_INFO "/usr/include/linux/aio_abi.h not present during "

WARNING:SPLIT_STRING: quoted string split across lines
#4164: FILE: arch/um/os-Linux/aio.c:236:
+	printk(UM_KERN_INFO "/usr/include/linux/aio_abi.h not present during "
+	       "build\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4168: FILE: arch/um/os-Linux/aio.c:238:
+	printk(UM_KERN_INFO "2.6 host AIO support not used - falling back to "

WARNING:SPLIT_STRING: quoted string split across lines
#4169: FILE: arch/um/os-Linux/aio.c:239:
+	printk(UM_KERN_INFO "2.6 host AIO support not used - falling back to "
+	       "I/O thread\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4182: FILE: arch/um/os-Linux/aio.c:251:
+		printk(UM_KERN_ERR "aio_thread failed to initialize context, "

WARNING:SPLIT_STRING: quoted string split across lines
#4183: FILE: arch/um/os-Linux/aio.c:252:
+		printk(UM_KERN_ERR "aio_thread failed to initialize context, "
+		       "err = %d\n", errno);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4196: FILE: arch/um/os-Linux/aio.c:263:
+	printk(UM_KERN_INFO "Using 2.6 host AIO\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#4210: FILE: arch/um/os-Linux/aio.c:278:
+		if (err != sizeof(reply)) {
[...]
 		}
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4213: FILE: arch/um/os-Linux/aio.c:280:
+			printk(UM_KERN_ERR "submit_aio_26 - write failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'submit_aio_26', this function's name, in a string
#4213: FILE: arch/um/os-Linux/aio.c:280:
+			printk(UM_KERN_ERR "submit_aio_26 - write failed, "

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#4227: FILE: arch/um/os-Linux/aio.c:330:
+		if (err && (errno == ENOSYS)) {

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == ENOSYS'
#4227: FILE: arch/um/os-Linux/aio.c:330:
+		if (err && (errno == ENOSYS)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#4227: FILE: arch/um/os-Linux/aio.c:330:
+		if (err && (errno == ENOSYS)) {
[...]
 		else return err;
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4228: FILE: arch/um/os-Linux/aio.c:331:
+			printk(UM_KERN_INFO "2.6 AIO not supported on the "

WARNING:SPLIT_STRING: quoted string split across lines
#4229: FILE: arch/um/os-Linux/aio.c:332:
+			printk(UM_KERN_INFO "2.6 AIO not supported on the "
+			       "host - reverting to 2.4 AIO\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig == SIGIO'
#4322: FILE: arch/um/os-Linux/signal.c:46:
+	if (!enabled && (sig == SIGIO)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sc"
#4335: FILE: arch/um/os-Linux/signal.c:65:
+	if (sc != NULL)

ERROR:SPACING: space required before the open parenthesis '('
#4463: FILE: arch/um/os-Linux/signal.c:221:
+	while(1) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4577: FILE: arch/um/kernel/ptrace.c:1:
+/*

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4629: FILE: arch/um/kernel/ptrace.c:33:
+	set_singlestepping(child,0);
 	                        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4688: FILE: arch/um/kernel/ptrace.c:78:
+		else clear_tsk_thread_flag(child, TIF_SYSCALL_TRACE);

CHECK:SPACING: No space is necessary after a cast
#4773: FILE: arch/um/kernel/ptrace.c:225:
+		ret = arch_prctl(child, data, (void *) addr);

ERROR:SPACING: space required before the open parenthesis '('
#4863: FILE: arch/um/kernel/signal.c:39:
+		switch(PT_REGS_SYSCALL_RET(regs)) {

ERROR:SPACING: space required before the open parenthesis '('
#4926: FILE: arch/um/kernel/signal.c:119:
+		switch(PT_REGS_SYSCALL_RET(regs)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->mm"
#5032: FILE: arch/um/kernel/skas/process.c:65:
+	if (current->mm == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'syscall >= NR_syscalls'
#5077: FILE: arch/um/kernel/skas/syscall.c:33:
+	if ((syscall >= NR_syscalls) || (syscall < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'syscall < 0'
#5077: FILE: arch/um/kernel/skas/syscall.c:33:
+	if ((syscall >= NR_syscalls) || (syscall < 0))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5182: FILE: arch/um/kernel/skas/mmu.c:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#5226: FILE: arch/um/kernel/skas/mmu.c:52:
+	mm->context.skas.last_pmd = (unsigned long) __va(pud_val(*pud));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->mm"
#5282: FILE: arch/um/kernel/skas/mmu.c:99:
+	if (current->mm != NULL && current->mm != &init_mm)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5292: FILE: arch/um/kernel/skas/mmu.c:105:
+			printk(KERN_ERR "init_new_context_skas - "

WARNING:SPLIT_STRING: quoted string split across lines
#5293: FILE: arch/um/kernel/skas/mmu.c:106:
+			printk(KERN_ERR "init_new_context_skas - "
+			       "new_mm failed, errno = %d\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5310: FILE: arch/um/kernel/skas/mmu.c:120:
+		printk(KERN_ERR "init_new_context_skas - init_ldt"

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stack"
#5387: FILE: arch/um/os-Linux/skas/mem.c:31:
+	if (stack == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5408: FILE: arch/um/os-Linux/skas/mem.c:73:
+		printk(UM_KERN_ERR "Registers - \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#5408: FILE: arch/um/os-Linux/skas/mem.c:73:
+		printk(UM_KERN_ERR "Registers - \n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5410: FILE: arch/um/os-Linux/skas/mem.c:75:
+			printk(UM_KERN_ERR "\t%d\t0x%lx\n", i, syscall_regs[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5434: FILE: arch/um/os-Linux/skas/mem.c:98:
+		printk(UM_KERN_ERR "do_syscall_stub : ret = %ld, offset = %ld, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_syscall_stub', this function's name, in a string
#5434: FILE: arch/um/os-Linux/skas/mem.c:98:
+		printk(UM_KERN_ERR "do_syscall_stub : ret = %ld, offset = %ld, "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5439: FILE: arch/um/os-Linux/skas/mem.c:101:
+		printk(UM_KERN_ERR "do_syscall_stub: syscall %ld failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_syscall_stub', this function's name, in a string
#5439: FILE: arch/um/os-Linux/skas/mem.c:101:
+		printk(UM_KERN_ERR "do_syscall_stub: syscall %ld failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#5440: FILE: arch/um/os-Linux/skas/mem.c:102:
+		printk(UM_KERN_ERR "do_syscall_stub: syscall %ld failed, "
+		       "return value = 0x%lx, expected return value = 0x%lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5443: FILE: arch/um/os-Linux/skas/mem.c:104:
+		printk(UM_KERN_ERR "    syscall parameters: "

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#5452: FILE: arch/um/os-Linux/skas/mem.c:108:
+		for (n = 1; n < data[0]/sizeof(long); n++) {
 		                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5454: FILE: arch/um/os-Linux/skas/mem.c:110:
+				printk(UM_KERN_ERR "    additional syscall "

WARNING:SPLIT_STRING: quoted string split across lines
#5455: FILE: arch/um/os-Linux/skas/mem.c:111:
+				printk(UM_KERN_ERR "    additional syscall "
+				       "data:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5457: FILE: arch/um/os-Linux/skas/mem.c:113:
+				printk("\n" UM_KERN_ERR "      ");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#5470: FILE: arch/um/os-Linux/skas/mem.c:132:
+	if (done && *addr == NULL)

CHECK:SPACING: No space is necessary after a cast
#5480: FILE: arch/um/os-Linux/skas/mem.c:149:
+	if (!done && ((((unsigned long) stack) & ~UM_KERN_PAGE_MASK) <

CHECK:SPACING: No space is necessary after a cast
#5495: FILE: arch/um/os-Linux/skas/mem.c:169:
+	if ((((unsigned long) *addr) & ~UM_KERN_PAGE_MASK) >=

CHECK:BRACES: braces {} should be used on all arms of this statement
#5518: FILE: arch/um/os-Linux/skas/mem.c:211:
+		if (ret != sizeof(map)) {
[...]
 		}
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5521: FILE: arch/um/os-Linux/skas/mem.c:213:
+			printk(UM_KERN_ERR "map : /proc/mm map failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'map', this function's name, in a string
#5521: FILE: arch/um/os-Linux/skas/mem.c:213:
+			printk(UM_KERN_ERR "map : /proc/mm map failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#5522: FILE: arch/um/os-Linux/skas/mem.c:214:
+			printk(UM_KERN_ERR "map : /proc/mm map failed, "
+			       "err = %d\n", -ret);

CHECK:BRACES: braces {} should be used on all arms of this statement
#5540: FILE: arch/um/os-Linux/skas/mem.c:246:
+		if (ret != sizeof(unmap)) {
[...]
 		}
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5543: FILE: arch/um/os-Linux/skas/mem.c:248:
+			printk(UM_KERN_ERR "unmap - proc_mm write returned "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unmap', this function's name, in a string
#5543: FILE: arch/um/os-Linux/skas/mem.c:248:
+			printk(UM_KERN_ERR "unmap - proc_mm write returned "

WARNING:SPLIT_STRING: quoted string split across lines
#5544: FILE: arch/um/os-Linux/skas/mem.c:249:
+			printk(UM_KERN_ERR "unmap - proc_mm write returned "
+			       "%d\n", ret);

CHECK:BRACES: braces {} should be used on all arms of this statement
#5562: FILE: arch/um/os-Linux/skas/mem.c:282:
+		if (ret != sizeof(protect)) {
[...]
 		}
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5565: FILE: arch/um/os-Linux/skas/mem.c:284:
+			printk(UM_KERN_ERR "protect failed, err = %d", -ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'protect', this function's name, in a string
#5565: FILE: arch/um/os-Linux/skas/mem.c:284:
+			printk(UM_KERN_ERR "protect failed, err = %d", -ret);

ERROR:CODE_INDENT: code indent should use tabs where possible
#5646: FILE: arch/um/os-Linux/skas/process.c:43:
+        if (ptrace(PTRACE_GETREGS, pid, 0, regs) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5646: FILE: arch/um/os-Linux/skas/process.c:43:
+        if (ptrace(PTRACE_GETREGS, pid, 0, regs) < 0)$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5654: FILE: arch/um/os-Linux/skas/process.c:46:
+	printk(UM_KERN_ERR "Stub registers -\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5656: FILE: arch/um/os-Linux/skas/process.c:48:
+		printk(UM_KERN_ERR "\t%d - %lx\n", i, regs[i]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n < 0'
#5668: FILE: arch/um/os-Linux/skas/process.c:68:
+		if ((n < 0) || !WIFSTOPPED(status))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5691: FILE: arch/um/os-Linux/skas/process.c:86:
+		printk(UM_KERN_ERR "Failed to get registers from stub, "

WARNING:SPLIT_STRING: quoted string split across lines
#5692: FILE: arch/um/os-Linux/skas/process.c:87:
+		printk(UM_KERN_ERR "Failed to get registers from stub, "
+		       "errno = %d\n", -err);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'handle_trap', this function's name, in a string
#5747: FILE: arch/um/os-Linux/skas/process.c:148:
+			panic("handle_trap - nullifying syscall failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#5748: FILE: arch/um/os-Linux/skas/process.c:149:
+			panic("handle_trap - nullifying syscall failed, "
+			      "errno = %d\n", errno);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'handle_trap', this function's name, in a string
#5755: FILE: arch/um/os-Linux/skas/process.c:153:
+			panic("handle_trap - continuing to end of syscall "

WARNING:SPLIT_STRING: quoted string split across lines
#5756: FILE: arch/um/os-Linux/skas/process.c:154:
+			panic("handle_trap - continuing to end of syscall "
+			      "failed, errno = %d\n", errno);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err < 0'
#5761: FILE: arch/um/os-Linux/skas/process.c:157:
+		if ((err < 0) || !WIFSTOPPED(status) ||
+		   (WSTOPSIG(status) != SIGTRAP + 0x80)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5762: FILE: arch/um/os-Linux/skas/process.c:158:
+		if ((err < 0) || !WIFSTOPPED(status) ||
+		   (WSTOPSIG(status) != SIGTRAP + 0x80)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#5767: FILE: arch/um/os-Linux/skas/process.c:160:
+                        if (err)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5767: FILE: arch/um/os-Linux/skas/process.c:160:
+                        if (err)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5768: FILE: arch/um/os-Linux/skas/process.c:161:
+                                printk(UM_KERN_ERR "Failed to get registers "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5768: FILE: arch/um/os-Linux/skas/process.c:161:
+                                printk(UM_KERN_ERR "Failed to get registers "$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5768: FILE: arch/um/os-Linux/skas/process.c:161:
+                                printk(UM_KERN_ERR "Failed to get registers "

WARNING:SPLIT_STRING: quoted string split across lines
#5769: FILE: arch/um/os-Linux/skas/process.c:162:
+                                printk(UM_KERN_ERR "Failed to get registers "
+				       "from process, errno = %d\n", -err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5799: FILE: arch/um/os-Linux/skas/process.c:197:
+			printk(UM_KERN_ERR "mapping mmap stub failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#5800: FILE: arch/um/os-Linux/skas/process.c:198:
+			printk(UM_KERN_ERR "mapping mmap stub failed, "
+			       "errno = %d\n", errno);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "stack"
#5805: FILE: arch/um/os-Linux/skas/process.c:202:
+		if (stack != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5814: FILE: arch/um/os-Linux/skas/process.c:208:
+				printk(UM_KERN_ERR "mapping segfault stack "

WARNING:SPLIT_STRING: quoted string split across lines
#5815: FILE: arch/um/os-Linux/skas/process.c:209:
+				printk(UM_KERN_ERR "mapping segfault stack "
+				       "failed, errno = %d\n", errno);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'stack != NULL'
#5821: FILE: arch/um/os-Linux/skas/process.c:214:
+	if (!ptrace_faultinfo && (stack != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "stack"
#5821: FILE: arch/um/os-Linux/skas/process.c:214:
+	if (!ptrace_faultinfo && (stack != NULL)) {

CHECK:SPACING: No space is necessary after a cast
#5878: FILE: arch/um/os-Linux/skas/process.c:278:
+		   (void *) PTRACE_O_TRACESYSGOOD) < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'start_userspace', this function's name, in a string
#5879: FILE: arch/um/os-Linux/skas/process.c:279:
+		panic("start_userspace : PTRACE_OLDSETOPTIONS failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#5880: FILE: arch/um/os-Linux/skas/process.c:280:
+		panic("start_userspace : PTRACE_OLDSETOPTIONS failed, "
+		      "errno = %d\n", errno);

ERROR:CODE_INDENT: code indent should use tabs where possible
#5924: FILE: arch/um/os-Linux/skas/process.c:320:
+^I^I  ^Iswitch(sig) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5924: FILE: arch/um/os-Linux/skas/process.c:320:
+^I^I  ^Iswitch(sig) {$

ERROR:SPACING: space required before the open parenthesis '('
#5924: FILE: arch/um/os-Linux/skas/process.c:320:
+		  	switch(sig) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#5928: FILE: arch/um/os-Linux/skas/process.c:322:
+				if (PTRACE_FULL_FAULTINFO ||
[...]
 				else handle_segv(pid, regs);
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#5941: FILE: arch/um/os-Linux/skas/process.c:347:
+^I^I^I        printk(UM_KERN_ERR "userspace - child stopped "$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5941: FILE: arch/um/os-Linux/skas/process.c:347:
+			        printk(UM_KERN_ERR "userspace - child stopped "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'userspace', this function's name, in a string
#5941: FILE: arch/um/os-Linux/skas/process.c:347:
+			        printk(UM_KERN_ERR "userspace - child stopped "

WARNING:SPLIT_STRING: quoted string split across lines
#5942: FILE: arch/um/os-Linux/skas/process.c:348:
+			        printk(UM_KERN_ERR "userspace - child stopped "
+				       "with signal %d\n", sig);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6008: FILE: arch/um/os-Linux/skas/process.c:464:
+		printk(UM_KERN_ERR "mmap args - addr = 0x%lx, fd = %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#6009: FILE: arch/um/os-Linux/skas/process.c:465:
+		printk(UM_KERN_ERR "mmap args - addr = 0x%lx, fd = %d, "
+		       "offset = %llx\n", code, code_fd,

CHECK:SPACING: No space is necessary after a cast
#6010: FILE: arch/um/os-Linux/skas/process.c:466:
+		       (unsigned long long) code_offset);

ERROR:SPACING: space required before the open parenthesis '('
#6043: FILE: arch/um/os-Linux/skas/process.c:534:
+	switch(n) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#6095: FILE: arch/um/os-Linux/skas/trap.c:6:
+#if 0

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig == SIGFPE'
#6144: FILE: arch/um/os-Linux/skas/trap.c:53:
+	if ((sig == SIGFPE) || (sig == SIGSEGV) || (sig == SIGBUS) ||
+	    (sig == SIGILL) || (sig == SIGTRAP))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig == SIGSEGV'
#6144: FILE: arch/um/os-Linux/skas/trap.c:53:
+	if ((sig == SIGFPE) || (sig == SIGSEGV) || (sig == SIGBUS) ||
+	    (sig == SIGILL) || (sig == SIGTRAP))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig == SIGBUS'
#6144: FILE: arch/um/os-Linux/skas/trap.c:53:
+	if ((sig == SIGFPE) || (sig == SIGSEGV) || (sig == SIGBUS) ||
+	    (sig == SIGILL) || (sig == SIGTRAP))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig == SIGILL'
#6144: FILE: arch/um/os-Linux/skas/trap.c:53:
+	if ((sig == SIGFPE) || (sig == SIGSEGV) || (sig == SIGBUS) ||
+	    (sig == SIGILL) || (sig == SIGTRAP))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig == SIGTRAP'
#6144: FILE: arch/um/os-Linux/skas/trap.c:53:
+	if ((sig == SIGFPE) || (sig == SIGSEGV) || (sig == SIGBUS) ||
+	    (sig == SIGILL) || (sig == SIGTRAP))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6190: FILE: arch/um/sys-i386/bugs.c:33:
+			printk(UM_KERN_ERR "Reading /proc/cpuinfo failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#6191: FILE: arch/um/sys-i386/bugs.c:34:
+			printk(UM_KERN_ERR "Reading /proc/cpuinfo failed, "
+			       "err = %d\n", -n);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6202: FILE: arch/um/sys-i386/bugs.c:42:
+		printk(UM_KERN_ERR "Failed to find '%c' in /proc/cpuinfo\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#6215: FILE: arch/um/sys-i386/bugs.c:58:
+		if (c <= 0)
[...]
-		else if(c != ':'){
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6220: FILE: arch/um/sys-i386/bugs.c:61:
+			printk(UM_KERN_ERR "Failed to find ':' in "

WARNING:SPLIT_STRING: quoted string split across lines
#6221: FILE: arch/um/sys-i386/bugs.c:62:
+			printk(UM_KERN_ERR "Failed to find ':' in "
+			       "/proc/cpuinfo\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6234: FILE: arch/um/sys-i386/bugs.c:72:
+				printk(UM_KERN_ERR "Failed to find newline in "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6248: FILE: arch/um/sys-i386/bugs.c:86:
+	printk(UM_KERN_INFO "Checking for host processor %s support...",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6254: FILE: arch/um/sys-i386/bugs.c:90:
+		printk(UM_KERN_ERR "Couldn't open /proc/cpuinfo, err = %d\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#6266: FILE: arch/um/sys-i386/bugs.c:100:
+	if (c < 0)
[...]
-	else if(c != ' '){
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6271: FILE: arch/um/sys-i386/bugs.c:103:
+		printk(UM_KERN_ERR "Failed to find ' ' in /proc/cpuinfo\n");

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#6303: FILE: arch/um/sys-i386/bugs.c:128:
+#if 0 /*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6315: FILE: arch/um/sys-i386/bugs.c:143:
+		printk(UM_KERN_ERR "Failed to disable lcall7 - errno = %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6328: FILE: arch/um/sys-i386/bugs.c:160:
+		printk(UM_KERN_ERR "/proc/cpuinfo not available - skipping CPU "

WARNING:SPLIT_STRING: quoted string split across lines
#6329: FILE: arch/um/sys-i386/bugs.c:161:
+		printk(UM_KERN_ERR "/proc/cpuinfo not available - skipping CPU "
+		       "capability checks\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig != SIGILL'
#6350: FILE: arch/um/sys-i386/bugs.c:178:
+	if ((sig != SIGILL) || (TASK_PID(get_current()) != 1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp[0] != 0x0f'
#6356: FILE: arch/um/sys-i386/bugs.c:183:
+	if ((tmp[0] != 0x0f) || ((tmp[1] & 0xf0) != 0x40))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6389: FILE: arch/um/os-Linux/umid.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!home"
#6425: FILE: arch/um/os-Linux/umid.c:39:
+		if (home == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6426: FILE: arch/um/os-Linux/umid.c:40:
+			printk(UM_KERN_ERR "make_uml_dir : no value in "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'make_uml_dir', this function's name, in a string
#6426: FILE: arch/um/os-Linux/umid.c:40:
+			printk(UM_KERN_ERR "make_uml_dir : no value in "

WARNING:SPLIT_STRING: quoted string split across lines
#6427: FILE: arch/um/os-Linux/umid.c:41:
+			printk(UM_KERN_ERR "make_uml_dir : no value in "
+			       "environment for $HOME\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno != EEXIST'
#6436: FILE: arch/um/os-Linux/umid.c:60:
+	if ((mkdir(uml_dir, 0777) < 0) && (errno != EEXIST)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6468: FILE: arch/um/os-Linux/umid.c:143:
+		printk(UM_KERN_ERR "is_umdir_used - pid filename too long\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'is_umdir_used', this function's name, in a string
#6468: FILE: arch/um/os-Linux/umid.c:143:
+		printk(UM_KERN_ERR "is_umdir_used - pid filename too long\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6482: FILE: arch/um/os-Linux/umid.c:153:
+			printk(UM_KERN_ERR "is_umdir_used : couldn't open pid "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'is_umdir_used', this function's name, in a string
#6482: FILE: arch/um/os-Linux/umid.c:153:
+			printk(UM_KERN_ERR "is_umdir_used : couldn't open pid "

WARNING:SPLIT_STRING: quoted string split across lines
#6483: FILE: arch/um/os-Linux/umid.c:154:
+			printk(UM_KERN_ERR "is_umdir_used : couldn't open pid "
+			       "file '%s', err = %d\n", file, -fd);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6494: FILE: arch/um/os-Linux/umid.c:162:
+		printk(UM_KERN_ERR "is_umdir_used : couldn't read pid file "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'is_umdir_used', this function's name, in a string
#6494: FILE: arch/um/os-Linux/umid.c:162:
+		printk(UM_KERN_ERR "is_umdir_used : couldn't read pid file "

WARNING:SPLIT_STRING: quoted string split across lines
#6495: FILE: arch/um/os-Linux/umid.c:163:
+		printk(UM_KERN_ERR "is_umdir_used : couldn't read pid file "
+		       "'%s', err = %d\n", file, errno);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6501: FILE: arch/um/os-Linux/umid.c:166:
+		printk(UM_KERN_ERR "is_umdir_used : couldn't read pid file "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'is_umdir_used', this function's name, in a string
#6501: FILE: arch/um/os-Linux/umid.c:166:
+		printk(UM_KERN_ERR "is_umdir_used : couldn't read pid file "

WARNING:SPLIT_STRING: quoted string split across lines
#6502: FILE: arch/um/os-Linux/umid.c:167:
+		printk(UM_KERN_ERR "is_umdir_used : couldn't read pid file "
+		       "'%s', 0-byte read\n", file);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6511: FILE: arch/um/os-Linux/umid.c:173:
+		printk(UM_KERN_ERR "is_umdir_used : couldn't parse pid file "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'is_umdir_used', this function's name, in a string
#6511: FILE: arch/um/os-Linux/umid.c:173:
+		printk(UM_KERN_ERR "is_umdir_used : couldn't parse pid file "

WARNING:SPLIT_STRING: quoted string split across lines
#6512: FILE: arch/um/os-Linux/umid.c:174:
+		printk(UM_KERN_ERR "is_umdir_used : couldn't parse pid file "
+		       "'%s', errno = %d\n", file, errno);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno != ESRCH'
#6518: FILE: arch/um/os-Linux/umid.c:178:
+	if ((kill(p, 0) == 0) || (errno != ESRCH)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6519: FILE: arch/um/os-Linux/umid.c:179:
+		printk(UM_KERN_ERR "umid \"%s\" is already in use by pid %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6530: FILE: arch/um/os-Linux/umid.c:204:
+		printk(UM_KERN_ERR "is_umdir_used - remove_files_and_dir "

WARNING:SPLIT_STRING: quoted string split across lines
#6531: FILE: arch/um/os-Linux/umid.c:205:
+		printk(UM_KERN_ERR "is_umdir_used - remove_files_and_dir "
+		       "failed with err = %d\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6548: FILE: arch/um/os-Linux/umid.c:221:
+		printk(UM_KERN_ERR "Open of machine pid file \"%s\" failed: "

WARNING:SPLIT_STRING: quoted string split across lines
#6549: FILE: arch/um/os-Linux/umid.c:222:
+		printk(UM_KERN_ERR "Open of machine pid file \"%s\" failed: "
+		       "%s\n", file, strerror(errno));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6558: FILE: arch/um/os-Linux/umid.c:229:
+		printk(UM_KERN_ERR "Write of pid file failed - err = %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6590: FILE: arch/um/os-Linux/umid.c:263:
+			printk(UM_KERN_ERR "make_umid - mkstemp(%s) failed: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'make_umid', this function's name, in a string
#6590: FILE: arch/um/os-Linux/umid.c:263:
+			printk(UM_KERN_ERR "make_umid - mkstemp(%s) failed: "

WARNING:SPLIT_STRING: quoted string split across lines
#6591: FILE: arch/um/os-Linux/umid.c:264:
+			printk(UM_KERN_ERR "make_umid - mkstemp(%s) failed: "
+			       "%s\n", tmp, strerror(errno));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6630: FILE: arch/um/os-Linux/umid.c:298:
+		printk(UM_KERN_ERR "Failed to create '%s' - err = %d\n", umid,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6650: FILE: arch/um/os-Linux/umid.c:321:
+	printk(UM_KERN_ERR "Failed to initialize umid \"%s\", trying with a "

WARNING:SPLIT_STRING: quoted string split across lines
#6651: FILE: arch/um/os-Linux/umid.c:322:
+	printk(UM_KERN_ERR "Failed to initialize umid \"%s\", trying with a "
+	       "random umid\n", umid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6667: FILE: arch/um/os-Linux/umid.c:341:
+		printk(UM_KERN_ERR "umid_file_name : buffer too short\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'umid_file_name', this function's name, in a string
#6667: FILE: arch/um/os-Linux/umid.c:341:
+		printk(UM_KERN_ERR "umid_file_name : buffer too short\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uml_dir"
#6689: FILE: arch/um/os-Linux/umid.c:366:
+	if (uml_dir == NULL) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390877.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 49 errors, 194 warnings, 108 checks, 6080 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390877.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
