WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#102: FILE: arch/x86/kernel/tsc_64.c:48:
+/* We need to define a real function for sched_clock, to override the
+   weak default version */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#102: FILE: arch/x86/kernel/tsc_64.c:48:
+   weak default version */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("native_sched_clock") over __attribute__((alias("native_sched_clock")))
#110: FILE: arch/x86/kernel/tsc_64.c:56:
+sched_clock(void) __attribute__((alias("native_sched_clock")));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#113: FILE: arch/x86/kernel/tsc_64.c:59:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#179: FILE: include/asm-x86/alternative_32.h:104:
+#define ASM_OUTPUT2(a, b...) a, b

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#181: FILE: include/asm-x86/alternative_32.h:106:
+#define fixup_section(code, fixup, output, input...)		\
+		asm volatile("2: " code "\n"                    \
+			     "1:\n\t"                           \
+			     ".section .fixup,\"ax\"\n\t"       \
+			     "3: "  fixup "\n\t"                \
+			     "jmp 1b\n\t"                       \
+			     ".previous\n\t"                    \
+			     ".section __ex_table,\"a\"\n"      \
+			     "   .align 4\n\t"                  \
+			     "   .long  2b,3b\n\t"              \
+			     ".previous"                        \
+			     : output                           \
+			     : input)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#209: FILE: include/asm-x86/alternative_64.h:144:
+#define ASM_OUTPUT2(a, b...) a, b

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#211: FILE: include/asm-x86/alternative_64.h:146:
+#define fixup_section(code, fixup, output, input...)   \
+		asm volatile("2: " code "\n"                    \
+			     "1:\n\t"                           \
+			     ".section .fixup,\"ax\"\n\t"       \
+			     "3: " fixup "\n\t"                 \
+			     " jmp 1b\n\t"                      \
+			     ".previous\n\t"                    \
+			     ".section __ex_table,\"a\"\n"      \
+			     "   .align 8\n\t"                  \
+			     "   .quad  2b,3b\n\t"              \
+			     ".previous"                        \
+			     : output                           \
+			     : input)

WARNING:LINE_SPACING: Missing a blank line after declarations
#260: FILE: include/asm-x86/msr.h:14:
+	unsigned long a, d;
+	asm volatile("rdmsr" : "=a" (a), "=d" (d) : "c" (msr));

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: include/asm-x86/msr.h:22:
+	unsigned long a, d;
+	fixup_section("rdmsr; xor %0, %0", "mov %4, %0",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: include/asm-x86/msr.h:23:
+	fixup_section("rdmsr; xor %0, %0", "mov %4, %0",
+	ASM_OUTPUT2("=r" (*err), "=a"((a)), "=d"((d))),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#290: FILE: include/asm-x86/msr.h:28:
+static inline void native_write_msr(unsigned int msr, unsigned low,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#291: FILE: include/asm-x86/msr.h:29:
+				    unsigned high)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#299: FILE: include/asm-x86/msr.h:35:
+					unsigned low, unsigned high)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#299: FILE: include/asm-x86/msr.h:35:
+					unsigned low, unsigned high)

WARNING:LINE_SPACING: Missing a blank line after declarations
#326: FILE: include/asm-x86/msr.h:47:
+	unsigned int low, high;
+	asm volatile("rdtsc" : "=a" (low), "=d" (high));

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: include/asm-x86/msr.h:54:
+	unsigned long low, high;
+	asm volatile ("rdpmc"

WARNING:LINE_SPACING: Missing a blank line after declarations
#347: FILE: include/asm-x86/msr.h:64:
+	unsigned long low, high;
+	asm volatile (".byte 0x0f,0x01,0xf9"

WARNING:LINE_SPACING: Missing a blank line after declarations
#377: FILE: include/asm-x86/msr.h:101:
+	unsigned long low, high;
+	low = (u32)val;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#456: FILE: include/asm-x86/msr.h:137:
+#define rdtscp(low, high, aux) ^I^I^I^I^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#464: FILE: include/asm-x86/msr.h:144:
+#define rdtscpll(val, aux) (val) = native_read_tscp(&(aux))

WARNING:LINE_SPACING: Missing a blank line after declarations
#569: FILE: include/asm-x86/tsc.h:65:
+	unsigned long long ret;
+	ret = __get_cycles_sync();

WARNING:LINE_SPACING: Missing a blank line after declarations
#587: FILE: include/asm-x86/tsc.h:83:
+	unsigned long long ret;
+	ret = __get_cycles_sync();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000359491.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 16 warnings, 2 checks, 495 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000359491.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
