WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#43: FILE: drivers/input/serio/Kconfig:203:
+config SERIO_ALTERA_PS2
+	tristate "Altera UP PS/2 controller"
+	depends on EMBEDDED
+	help
+	  Say Y here if you have Altera University Program PS/2 ports.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called altera_ps2.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#63: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: drivers/input/serio/altera_ps2.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#94: FILE: drivers/input/serio/altera_ps2.c:27:
+	unsigned base;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#95: FILE: drivers/input/serio/altera_ps2.c:28:
+	unsigned irq;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#134: FILE: drivers/input/serio/altera_ps2.c:67:
+		printk(KERN_ERR DRV_NAME ": could not allocate IRQ%d: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: drivers/input/serio/altera_ps2.c:68:
+		printk(KERN_ERR DRV_NAME ": could not allocate IRQ%d: %d\n",
+			ps2if->irq, ret);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ps2if)...) over kzalloc(sizeof(struct ps2if)...)
#160: FILE: drivers/input/serio/altera_ps2.c:93:
+	ps2if = kzalloc(sizeof(struct ps2if), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*serio)...) over kzalloc(sizeof(struct serio)...)
#161: FILE: drivers/input/serio/altera_ps2.c:94:
+	serio = kzalloc(sizeof(struct serio), GFP_KERNEL);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#171: FILE: drivers/input/serio/altera_ps2.c:104:
+	strlcpy(serio->name, dev_name(&dev->dev), sizeof(serio->name));

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#172: FILE: drivers/input/serio/altera_ps2.c:105:
+	strlcpy(serio->phys, dev_name(&dev->dev), sizeof(serio->phys));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#180: FILE: drivers/input/serio/altera_ps2.c:113:
+	if (res == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#189: FILE: drivers/input/serio/altera_ps2.c:122:
+	ps2if->base = (unsigned) ioremap(res->start,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#189: FILE: drivers/input/serio/altera_ps2.c:122:
+	ps2if->base = (unsigned) ioremap(res->start,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#195: FILE: drivers/input/serio/altera_ps2.c:128:
+	printk(KERN_INFO DRV_NAME ": base %08x irq %d\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062318.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 5 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062318.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
