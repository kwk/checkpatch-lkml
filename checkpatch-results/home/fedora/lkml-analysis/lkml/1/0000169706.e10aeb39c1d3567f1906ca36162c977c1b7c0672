WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#54: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#95: FILE: fs/exofs/Kconfig:1:
+config EXOFS_FS
+	tristate "exofs: OSD based file system support"
+	depends on SCSI_OSD_ULD
+	help
+	  EXOFS is a file system that uses an OSD storage device,
+	  as its backing storage.
+
+# Debugging-related stuff

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#103: FILE: fs/exofs/Kconfig:9:
+config EXOFS_DEBUG
+	bool "Enable debugging"
+	depends on EXOFS_FS
+	help
+	  This option enables EXOFS debug prints.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#114: FILE: fs/exofs/common.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#147: FILE: fs/exofs/common.h:34:
+ * along with exofs; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#148: FILE: fs/exofs/common.h:35:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:BIT_MACRO: Prefer using the BIT macro
#189: FILE: fs/exofs/common.h:76:
+#define EXOFS_BLKSIZE	(1UL << EXOFS_BLKSHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#220: FILE: fs/exofs/common.h:107:
+^I__le16  i_mode;         ^I/* File mode */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#221: FILE: fs/exofs/common.h:108:
+^I__le16  i_links_count;  ^I/* Links count */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#222: FILE: fs/exofs/common.h:109:
+^I__le32  i_uid;          ^I/* Owner Uid */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: fs/exofs/common.h:110:
+^I__le32  i_gid;          ^I/* Group Id */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: fs/exofs/common.h:111:
+^I__le32  i_atime;        ^I/* Access time */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: fs/exofs/common.h:112:
+^I__le32  i_ctime;        ^I/* Creation time */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: fs/exofs/common.h:113:
+^I__le32  i_mtime;        ^I/* Modification time */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#227: FILE: fs/exofs/common.h:114:
+^I__le32  i_flags;        ^I/* File flags (unused for now)*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#228: FILE: fs/exofs/common.h:115:
+^I__le32  i_generation;   ^I/* File version (for NFS) */$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#235: FILE: fs/exofs/common.h:122:
+static const struct __weak osd_attr g_attr_inode_data = ATTR_DEF(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: fs/exofs/common.h:171:
+int exofs_async_op(struct osd_request *or,
+	osd_req_done_fn *async_done, void *caller_context, u8 *cred);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: fs/exofs/common.h:176:
+int osd_req_read_kern(struct osd_request *or,
+	const struct osd_obj_id *obj, u64 offset, void *buff, u64 len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: fs/exofs/common.h:179:
+int osd_req_write_kern(struct osd_request *or,
+	const struct osd_obj_id *obj, u64 offset, void *buff, u64 len);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#301: FILE: fs/exofs/exofs.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#332: FILE: fs/exofs/exofs.h:32:
+ * along with exofs; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#333: FILE: fs/exofs/exofs.h:33:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#343: FILE: fs/exofs/exofs.h:43:
+#define EXOFS_ERR(fmt, a...) printk(KERN_ERR "exofs: " fmt, ##a)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#347: FILE: fs/exofs/exofs.h:47:
+	printk(KERN_NOTICE "exofs @%s:%d: " fmt, __func__, __LINE__, ##a)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#354: FILE: fs/exofs/exofs.h:54:
+#define _LLU(x) (unsigned long long)(x)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#363: FILE: fs/exofs/exofs.h:63:
+	uint64_t	s_nextid;		/* highest object ID used     */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#364: FILE: fs/exofs/exofs.h:64:
+	uint32_t	s_numfiles;		/* number of files on fs      */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#368: FILE: fs/exofs/exofs.h:68:
+	uint8_t		s_cred[OSD_CAP_LEN];	/* all-powerful credential    */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#376: FILE: fs/exofs/exofs.h:76:
+	uint32_t       i_data[EXOFS_IDATA];/*short symlink names and device #s*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#377: FILE: fs/exofs/exofs.h:77:
+	uint32_t       i_dir_start_lookup; /* which page to start lookup      */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#379: FILE: fs/exofs/exofs.h:79:
+	uint64_t       i_commit_size;      /* the object's written length     */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#380: FILE: fs/exofs/exofs.h:80:
+	uint8_t        i_cred[OSD_CAP_LEN];/* all-powerful credential         */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around oi->i_flags
#392: FILE: fs/exofs/exofs.h:92:
+	return test_bit(OBJ_2BCREATED, &(oi->i_flags));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around oi->i_flags
#397: FILE: fs/exofs/exofs.h:97:
+	set_bit(OBJ_2BCREATED, &(oi->i_flags));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around oi->i_flags
#402: FILE: fs/exofs/exofs.h:102:
+	return test_bit(OBJ_CREATED, &(oi->i_flags));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around oi->i_flags
#407: FILE: fs/exofs/exofs.h:107:
+	set_bit(OBJ_CREATED, &(oi->i_flags));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: fs/exofs/exofs.h:132:
+int osd_req_read_pages(struct osd_request *or,
+	const struct osd_obj_id *, u64 offset, u64 length,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct osd_obj_id *' should also have an identifier name
#435: FILE: fs/exofs/exofs.h:135:
+int osd_req_write_pages(struct osd_request *or,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: fs/exofs/exofs.h:136:
+int osd_req_write_pages(struct osd_request *or,
+	const struct osd_obj_id *, u64 offset, u64 length,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#446: FILE: fs/exofs/osd.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#468: FILE: fs/exofs/osd.c:23:
+ * along with exofs; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#469: FILE: fs/exofs/osd.c:24:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:BRACES: braces {} should be used on all arms of this statement
#483: FILE: fs/exofs/osd.c:38:
+		if (osi.additional_code == scsi_invalid_field_in_cdb) {
[...]
+		} else if (osi.additional_code == osd_quota_error)
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'Faild' may be misspelled - perhaps 'Failed'?
#514: FILE: fs/exofs/osd.c:69:
+		EXOFS_DBGMSG("Faild to osd_finalize_request() => %d\n", ret);
 		              ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Faild' may be misspelled - perhaps 'Failed'?
#536: FILE: fs/exofs/osd.c:91:
+		EXOFS_DBGMSG("Faild to osd_finalize_request() => %d\n", ret);
 		              ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_attr.attr_page == attr->attr_page'
#556: FILE: fs/exofs/osd.c:111:
+		if ((cur_attr.attr_page == attr->attr_page) &&
+		    (cur_attr.attr_id == attr->attr_id)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_attr.attr_id == attr->attr_id'
#556: FILE: fs/exofs/osd.c:111:
+		if ((cur_attr.attr_page == attr->attr_page) &&
+		    (cur_attr.attr_id == attr->attr_id)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: fs/exofs/osd.c:123:
+static void _osd_read(struct osd_request *or,
+	const struct osd_obj_id *obj, uint64_t offset, struct bio *bio)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: fs/exofs/osd.c:127:
+	EXOFS_DBGMSG("osd_req_read(p=%llX, ob=%llX, l=%llu, of=%llu)\n",
+		_LLU(obj->partition), _LLU(obj->id), _LLU(bio->bi_size),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#578: FILE: fs/exofs/osd.c:133:
+				  struct page **pages, unsigned page_count,

WARNING:SPLIT_STRING: quoted string split across lines
#596: FILE: fs/exofs/osd.c:151:
+			EXOFS_ERR("Failed bio_add_pc_page req_q=%p pages[i]=%p "
+				  "use_len=%Zd page_count=%d length=%Zd\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#596: FILE: fs/exofs/osd.c:151:
+				  "use_len=%Zd page_count=%d length=%Zd\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: fs/exofs/osd.c:165:
+int osd_req_read_pages(struct osd_request *or,
+	const struct osd_obj_id *obj, u64 offset, u64 length,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: fs/exofs/osd.c:181:
+int osd_req_read_kern(struct osd_request *or,
+	const struct osd_obj_id *obj, u64 offset, void* buff, u64 len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#626: FILE: fs/exofs/osd.c:181:
+	const struct osd_obj_id *obj, u64 offset, void* buff, u64 len)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: fs/exofs/osd.c:194:
+static void _osd_write(struct osd_request *or,
+	const struct osd_obj_id *obj, uint64_t offset, struct bio *bio)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: fs/exofs/osd.c:198:
+	EXOFS_DBGMSG("osd_req_write(p=%llX, ob=%llX, l=%llu, of=%llu)\n",
+		_LLU(obj->partition), _LLU(obj->id), _LLU(bio->bi_size),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: fs/exofs/osd.c:204:
+int osd_req_write_pages(struct osd_request *or,
+	const struct osd_obj_id *obj, u64 offset, u64 length,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: fs/exofs/osd.c:220:
+int osd_req_write_kern(struct osd_request *or,
+	const struct osd_obj_id *obj, u64 offset, void* buff, u64 len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#665: FILE: fs/exofs/osd.c:220:
+	const struct osd_obj_id *obj, u64 offset, void* buff, u64 len)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169706.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 23 warnings, 29 checks, 593 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169706.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
