WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
> Brad reported that his SGI 750 (Itanium 1) will crash from 2.6.26, and bisected

WARNING:TYPO_SPELLING: 'directy' may be misspelled - perhaps 'directly'?
#39: 
> |Many host bridges support a 4k config space, so check them directy
                                                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: arch/ia64/pci/pci.c:49:
+	int (*read)(unsigned int domain, unsigned int bus, unsigned int devfn,
+						int reg, int len, u32 *val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#81: FILE: arch/ia64/pci/pci.c:51:
+	int (*write)(unsigned int domain, unsigned int bus, unsigned int devfn,
+						int reg, int len, u32 val);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#90: FILE: arch/ia64/pci/pci.c:60:
+	if (!value || !seg || (bus > 255) || (devfn > 255) || (reg > 255))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#90: FILE: arch/ia64/pci/pci.c:60:
+	if (!value || !seg || (bus > 255) || (devfn > 255) || (reg > 255))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 255'
#90: FILE: arch/ia64/pci/pci.c:60:
+	if (!value || !seg || (bus > 255) || (devfn > 255) || (reg > 255))

CHECK:SPACING: No space is necessary after a cast
#100: FILE: arch/ia64/pci/pci.c:70:
+	*value = (u32) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#110: FILE: arch/ia64/pci/pci.c:80:
+	if (!seg || (bus > 255) || (devfn > 255) || (reg > 255))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#110: FILE: arch/ia64/pci/pci.c:80:
+	if (!seg || (bus > 255) || (devfn > 255) || (reg > 255))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 255'
#110: FILE: arch/ia64/pci/pci.c:80:
+	if (!seg || (bus > 255) || (devfn > 255) || (reg > 255))

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#122: FILE: arch/ia64/pci/pci.c:92:
+static struct pci_raw_ops sal_pci_conf = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: arch/ia64/pci/pci.c:98:
+static int sal_pci_ext_read(unsigned int seg, unsigned int bus, unsigned int devfn,
 	      int reg, int len, u32 *value)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: arch/ia64/pci/pci.c:118:
+static int sal_pci_ext_write(unsigned int seg, unsigned int bus, unsigned int devfn,
 	       int reg, int len, u32 value)

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#177: FILE: arch/ia64/pci/pci.c:135:
+static struct pci_raw_ops sal_pci_ext_conf = {

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#182: FILE: arch/ia64/pci/pci.c:140:
+static struct pci_raw_ops *raw_pci_ops = sal_pci_ops;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#183: FILE: arch/ia64/pci/pci.c:141:
+static struct pci_raw_ops *raw_pci_ext_opsi = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#183: FILE: arch/ia64/pci/pci.c:141:
+static struct pci_raw_ops *raw_pci_ext_opsi = NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#187: FILE: arch/ia64/pci/pci.c:145:
+	if (sal_revision >= SAL_VERSION_CODE(3,2))
 	                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: arch/ia64/pci/pci.c:152:
+int raw_pci_read(unsigned int seg, unsigned int bus, unsigned int devfn,
+	      int reg, int len, u32 *value)

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: arch/ia64/pci/pci.c:158:
+        return -EINVAL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: arch/ia64/pci/pci.c:158:
+        return -EINVAL;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#204: FILE: arch/ia64/pci/pci.c:162:
+int raw_pci_write(unsigned int seg, unsigned int bus, unsigned int devfn,
+	       int reg, int len, u32 value)

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: arch/ia64/pci/pci.c:168:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: arch/ia64/pci/pci.c:168:
+        return -EINVAL;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000061078.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 8 warnings, 13 checks, 140 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000061078.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
