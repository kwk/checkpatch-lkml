WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#63: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#108: FILE: kernel/notifier.c:1:
+#include <linux/kdebug.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: kernel/notifier.c:11:
+ *^Iand the like. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: kernel/notifier.c:22:
+static int notifier_chain_register(struct notifier_block **nl,
+		struct notifier_block *n)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: kernel/notifier.c:35:
+static int notifier_chain_unregister(struct notifier_block **nl,
+		struct notifier_block *n)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: kernel/notifier.c:53:
+ *^I^I     ^Ivalue of this parameter is -1.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: kernel/notifier.c:55:
+ *^I^I   ^Ivalue of this field is NULL.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#163: FILE: kernel/notifier.c:56:
+ * ^I@returns:^Inotifier_call_chain returns the value returned by the$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: kernel/notifier.c:61:
+static int __kprobes notifier_call_chain(struct notifier_block **nl,
+					unsigned long val, void *v,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: kernel/notifier.c:100:
+int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#218: FILE: kernel/notifier.c:111:
+EXPORT_SYMBOL_GPL(atomic_notifier_chain_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: kernel/notifier.c:123:
+int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#242: FILE: kernel/notifier.c:135:
+EXPORT_SYMBOL_GPL(atomic_notifier_chain_unregister);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: kernel/notifier.c:156:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: kernel/notifier.c:156:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: kernel/notifier.c:158:
+int __kprobes __atomic_notifier_call_chain(struct atomic_notifier_head *nh,
+					unsigned long val, void *v,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#276: FILE: kernel/notifier.c:169:
+EXPORT_SYMBOL_GPL(__atomic_notifier_call_chain);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: kernel/notifier.c:172:
+int __kprobes atomic_notifier_call_chain(struct atomic_notifier_head *nh,
+		unsigned long val, void *v)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#284: FILE: kernel/notifier.c:177:
+EXPORT_SYMBOL_GPL(atomic_notifier_call_chain);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: kernel/notifier.c:193:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: kernel/notifier.c:193:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: kernel/notifier.c:195:
+int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#320: FILE: kernel/notifier.c:213:
+EXPORT_SYMBOL_GPL(blocking_notifier_chain_register);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: kernel/notifier.c:226:
+int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#351: FILE: kernel/notifier.c:244:
+EXPORT_SYMBOL_GPL(blocking_notifier_chain_unregister);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: kernel/notifier.c:264:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: kernel/notifier.c:264:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: kernel/notifier.c:279:
+		ret = notifier_call_chain(&nh->head, val, v, nr_to_call,
+					nr_calls);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: kernel/notifier.c:287:
+int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
+		unsigned long val, void *v)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: kernel/notifier.c:310:
+int raw_notifier_chain_register(struct raw_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#422: FILE: kernel/notifier.c:315:
+EXPORT_SYMBOL_GPL(raw_notifier_chain_register);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: kernel/notifier.c:328:
+int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#440: FILE: kernel/notifier.c:333:
+EXPORT_SYMBOL_GPL(raw_notifier_chain_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#469: FILE: kernel/notifier.c:362:
+EXPORT_SYMBOL_GPL(__raw_notifier_call_chain);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: kernel/notifier.c:365:
+int raw_notifier_call_chain(struct raw_notifier_head *nh,
+		unsigned long val, void *v)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#477: FILE: kernel/notifier.c:370:
+EXPORT_SYMBOL_GPL(raw_notifier_call_chain);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: kernel/notifier.c:389:
+int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#514: FILE: kernel/notifier.c:407:
+EXPORT_SYMBOL_GPL(srcu_notifier_chain_register);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: kernel/notifier.c:420:
+int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#546: FILE: kernel/notifier.c:439:
+EXPORT_SYMBOL_GPL(srcu_notifier_chain_unregister);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: kernel/notifier.c:475:
+int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
+		unsigned long val, void *v)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#605: FILE: kernel/notifier.c:498:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#609: FILE: kernel/notifier.c:502:
+EXPORT_SYMBOL_GPL(srcu_init_notifier_head);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#621: FILE: kernel/notifier.c:514:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: kernel/notifier.c:514:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#622: FILE: kernel/notifier.c:515:
+int register_reboot_notifier(struct notifier_block * nb)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#627: FILE: kernel/notifier.c:520:
+EXPORT_SYMBOL(register_reboot_notifier);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: kernel/notifier.c:531:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: kernel/notifier.c:531:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#639: FILE: kernel/notifier.c:532:
+int unregister_reboot_notifier(struct notifier_block * nb)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#644: FILE: kernel/notifier.c:537:
+EXPORT_SYMBOL(unregister_reboot_notifier);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#646: FILE: kernel/notifier.c:539:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000403566.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 26 warnings, 18 checks, 1123 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000403566.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
