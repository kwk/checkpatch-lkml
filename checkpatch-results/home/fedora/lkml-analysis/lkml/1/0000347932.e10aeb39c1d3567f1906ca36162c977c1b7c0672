WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
c) Then I created 10,000,000 files in directories of 1000 files per directory.

WARNING:LINE_SPACING: Missing a blank line after declarations
#114: FILE: fs/fs-writeback.c:56:
+	struct rb_node *n = sb->s_flush_root.rb_node;
+	assert_spin_locked(&inode_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#117: FILE: fs/fs-writeback.c:59:
+		struct inode *inode = rb_to_inode(n);
+		if (time_before(ts, inode->dirtied_when)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#117: FILE: fs/fs-writeback.c:59:
+		if (time_before(ts, inode->dirtied_when)) {
[...]
+		} else if (time_after(ts, inode->dirtied_when)) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sb->s_flush_root.rb_node
#138: FILE: fs/fs-writeback.c:80:
+	struct rb_node **new = &(sb->s_flush_root.rb_node);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: fs/fs-writeback.c:84:
+	BUG_ON((inode->i_state & I_DIRTY) == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#143: FILE: fs/fs-writeback.c:85:
+	BUG_ON(inode->i_state & (I_FREEING|I_CLEAR));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#143: FILE: fs/fs-writeback.c:85:
+	BUG_ON(inode->i_state & (I_FREEING|I_CLEAR));
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#144: FILE: fs/fs-writeback.c:86:
+	BUG_ON(RB_LINKED_NODE(&inode->i_flush_node));

WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: fs/fs-writeback.c:93:
+		struct inode *this = rb_to_inode(*new);
+		parent = *new;

CHECK:BRACES: braces {} should be used on all arms of this statement
#152: FILE: fs/fs-writeback.c:94:
+		if (time_before(inode->dirtied_when, this->dirtied_when))
[...]
+		else if (time_after(inode->dirtied_when,
[...]
+		} else {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: fs/fs-writeback.c:97:
+		else if (time_after(inode->dirtied_when,
+				      this->dirtied_when)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#168: FILE: fs/fs-writeback.c:110:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#187: FILE: fs/fs-writeback.c:129:
+		/* If this value is greater than our prev_time and is
+		less than the best so far, this is our new best so far.*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#187: FILE: fs/fs-writeback.c:129:
+		less than the best so far, this is our new best so far.*/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'data->dirtied_when > prev_time'
#188: FILE: fs/fs-writeback.c:130:
+		if ((data->dirtied_when > prev_time) &&
+		    (bsf ? bsf->dirtied_when > data->dirtied_when : 1))

WARNING:LINE_SPACING: Missing a blank line after declarations
#212: FILE: fs/fs-writeback.c:154:
+	struct inode *inode = flush_tree_search(sb, prev_time);
+	assert_spin_locked(&inode_lock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#228: FILE: fs/fs-writeback.c:170:
+	BUG_ON((inode->i_state & I_DIRTY) == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#234: FILE: fs/fs-writeback.c:176:
+		BUG_ON(!RB_LINKED_NODE(rb_node));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#251: FILE: fs/fs-writeback.c:193:
+
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#290: FILE: fs/fs-writeback.c:273:
+		if (inode->i_state & (I_FREEING|I_CLEAR))
 		                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#477: FILE: fs/fs-writeback.c:454:
+	BUG_ON((inode->i_state & I_DIRTY) == 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wbc->sync_mode != WB_SYNC_ALL'
#485: FILE: fs/fs-writeback.c:462:
+	if ((wbc->sync_mode != WB_SYNC_ALL) && (inode->i_state & I_SYNC)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: fs/fs-writeback.c:569:
+		if (wbc->older_than_this && time_after(inode->dirtied_when,
+						*wbc->older_than_this))

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#805: FILE: include/linux/fs.h:1013:
+	struct mutex		s_flush_lock;

CHECK:BIT_MACRO: Prefer using the BIT macro
#821: FILE: include/linux/fs.h:1324:
+#define I_DIRTY_SYNC		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#822: FILE: include/linux/fs.h:1325:
+#define I_DIRTY_DATASYNC	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#823: FILE: include/linux/fs.h:1326:
+#define I_DIRTY_PAGES		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#824: FILE: include/linux/fs.h:1327:
+#define I_NEW			(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#825: FILE: include/linux/fs.h:1328:
+#define I_WILL_FREE		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#826: FILE: include/linux/fs.h:1329:
+#define I_FREEING		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#827: FILE: include/linux/fs.h:1330:
+#define I_CLEAR			(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#832: FILE: include/linux/fs.h:1335:
+#define I_DIRTY_NEVER		(1 << 9)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#844: FILE: include/linux/rbtree.h:138:
+#define RB_LINKED_NODE(node)	((node)->rb_parent_color || \
+				 (node)->rb_left || (node)->rb_right)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347932.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 20 checks, 770 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347932.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
