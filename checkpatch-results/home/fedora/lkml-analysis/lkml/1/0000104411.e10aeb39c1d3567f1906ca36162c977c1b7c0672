WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
Currently kmemleak prints info about all objects. I guess sometimes kmemleak gives you more than you actually need.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#305: FILE: mm/kmemleak.c:273:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#306: FILE: mm/kmemleak.c:274:
+static int lookup_function(unsigned long pointer) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#315: FILE: mm/kmemleak.c:283:
+		if( function->pointer == pointer) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#315: FILE: mm/kmemleak.c:283:
+		if( function->pointer == pointer) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#316: FILE: mm/kmemleak.c:284:
+			pr_info("Function already blacklisted <%p>\n", (void*)pointer);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: mm/kmemleak.c:289:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#325: FILE: mm/kmemleak.c:293:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#326: FILE: mm/kmemleak.c:294:
+static void create_function(unsigned long pointer) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#331: FILE: mm/kmemleak.c:299:
+	if( lookup_function(pointer) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#331: FILE: mm/kmemleak.c:299:
+	if( lookup_function(pointer) )

ERROR:SPACING: space required before the open parenthesis '('
#331: FILE: mm/kmemleak.c:299:
+	if( lookup_function(pointer) )

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*function)...) over kmalloc(sizeof(struct kmemleak_function)...)
#335: FILE: mm/kmemleak.c:303:
+	function = kmalloc(sizeof(struct kmemleak_function), GFP_KERNEL & GFP_KMEMLEAK_MASK);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space prohibited after that open parenthesis '('
#336: FILE: mm/kmemleak.c:304:
+	if( !function ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#336: FILE: mm/kmemleak.c:304:
+	if( !function ) {

ERROR:SPACING: space required before the open parenthesis '('
#336: FILE: mm/kmemleak.c:304:
+	if( !function ) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#337: FILE: mm/kmemleak.c:305:
+	if( !function ) {
+		kmemleak_warn("Cannot allocate a kmemleak_function structure\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: mm/kmemleak.c:311:
+^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#348: FILE: mm/kmemleak.c:316:
+	pr_info("Added to blacklist: <%p>\n", (void*)pointer);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#351: FILE: mm/kmemleak.c:319:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#352: FILE: mm/kmemleak.c:320:
+static void delete_function(unsigned long pointer) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#359: FILE: mm/kmemleak.c:327:
+		if( function->pointer == pointer ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#359: FILE: mm/kmemleak.c:327:
+		if( function->pointer == pointer ) {

ERROR:SPACING: space required before the open parenthesis '('
#359: FILE: mm/kmemleak.c:327:
+		if( function->pointer == pointer ) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#365: FILE: mm/kmemleak.c:333:
+			pr_info("Removed from blacklist <%p>\n", (void*)pointer);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: mm/kmemleak.c:337:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#373: FILE: mm/kmemleak.c:341:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#374: FILE: mm/kmemleak.c:342:
+static int match_function(const unsigned long *trace , int trace_len) {

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#374: FILE: mm/kmemleak.c:342:
+static int match_function(const unsigned long *trace , int trace_len) {
                                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: mm/kmemleak.c:346:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#385: FILE: mm/kmemleak.c:353:
+		for(i = 0; i < trace_len; i++) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#386: FILE: mm/kmemleak.c:354:
+			if( function->pointer == trace[i]) {

ERROR:SPACING: space required before the open parenthesis '('
#386: FILE: mm/kmemleak.c:354:
+			if( function->pointer == trace[i]) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#388: FILE: mm/kmemleak.c:356:
+				pr_info("Function blacklisted <%p>\n", (void*)trace[i]);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#399: FILE: mm/kmemleak.c:367:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: mm/kmemleak.c:433:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: mm/kmemleak.c:433:
+ $

ERROR:SPACING: space prohibited after that open parenthesis '('
#414: FILE: mm/kmemleak.c:438:
+	if( match_function(object->trace, object->trace_len) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#414: FILE: mm/kmemleak.c:438:
+	if( match_function(object->trace, object->trace_len) )

ERROR:SPACING: space required before the open parenthesis '('
#414: FILE: mm/kmemleak.c:438:
+	if( match_function(object->trace, object->trace_len) )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#436: FILE: mm/kmemleak.c:1426:
+^I^I$

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#441: FILE: mm/kmemleak.c:1431:
+		err = strict_strtoul(buf + 6, 16, &pointer);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#447: FILE: mm/kmemleak.c:1437:
+	else if (strncmp(buf, "unblock=", 8) ==0 ) {
 	                                     ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#447: FILE: mm/kmemleak.c:1437:
+	else if (strncmp(buf, "unblock=", 8) ==0 ) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#447: FILE: mm/kmemleak.c:1437:
+	}
+	else if (strncmp(buf, "unblock=", 8) ==0 ) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#454: FILE: mm/kmemleak.c:1444:
+		err = strict_strtoul(buf + 8, 16, &pointer);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: mm/kmemleak.c:1489:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#471: FILE: mm/kmemleak.c:1489:
 
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: mm/kmemleak.c:1505:
+^I$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104411.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 37 errors, 5 warnings, 7 checks, 212 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104411.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
