WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#86: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: fs/vmufat/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#142: FILE: fs/vmufat/inode.c:19:
+	struct nameidata *nd)
 	                  ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: fs/vmufat/inode.c:19:
+struct dentry *vmufat_inode_lookup(struct inode *in, struct dentry *dent,
+	struct nameidata *nd)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: fs/vmufat/inode.c:59:
+			ino = vmufat_get_inode(sb,
+				le16_to_cpu(((__u16 *) bh->b_data)

CHECK:SPACING: No space is necessary after a cast
#182: FILE: fs/vmufat/inode.c:59:
+				le16_to_cpu(((__u16 *) bh->b_data)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#216: FILE: fs/vmufat/inode.c:93:
+	 * and then call the superblock delete_inode */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#218: FILE: fs/vmufat/inode.c:95:
+	struct super_block *sb = in->i_sb;
+	sb->s_op->delete_inode(de->d_inode);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#223: FILE: fs/vmufat/inode.c:100:
+		int imode, struct nameidata *nd)
 		                             ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: fs/vmufat/inode.c:100:
+static int vmufat_inode_create(struct inode *dir, struct dentry *de,
+		int imode, struct nameidata *nd)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: fs/vmufat/inode.c:114:
+
+

CHECK:SPACING: No space is necessary after a cast
#242: FILE: fs/vmufat/inode.c:119:
+	vmudetails = (struct memcard *) sb->s_fs_info;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#249: FILE: fs/vmufat/inode.c:126:
+	* Is this an executible file? */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#249: FILE: fs/vmufat/inode.c:126:
+	/* Walk through blocks looking for place to write
+	* Is this an executible file? */

CHECK:SPACING: No space is necessary after a cast
#258: FILE: fs/vmufat/inode.c:135:
+		fatdata = ((__u16 *) bh_fat->b_data)[0];

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#260: FILE: fs/vmufat/inode.c:137:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#262: FILE: fs/vmufat/inode.c:139:
+				"vmufat: cannot write executible file to"
+				" filesystem - block 0 already allocated.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#276: FILE: fs/vmufat/inode.c:153:
+			fatdata = ((__u16 *) bh_fat->b_data)[nextblock];

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#284: FILE: fs/vmufat/inode.c:161:
+			iput(inode);
 			^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#294: FILE: fs/vmufat/inode.c:171:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#304: FILE: fs/vmufat/inode.c:181:
+	* Now search for space for the directory entry */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#304: FILE: fs/vmufat/inode.c:181:
+	/* Write to the directory
+	* Now search for space for the directory entry */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bh->b_data'
#318: FILE: fs/vmufat/inode.c:195:
+		if (((bh->b_data)[(y % 0x10) * 0x20]) == 0)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#322: FILE: fs/vmufat/inode.c:199:
+	 * so now update it */

CHECK:SPACING: No space is necessary after a cast
#329: FILE: fs/vmufat/inode.c:206:
+	if ((bh->b_data[z + 1] != (char) 0x00) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bh->b_data[z + 1] != (char) 0x00'
#329: FILE: fs/vmufat/inode.c:206:
+	if ((bh->b_data[z + 1] != (char) 0x00) &&
+		(bh->b_data[z + 1] != (char) 0xff))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bh->b_data[z + 1] != (char) 0xff'
#329: FILE: fs/vmufat/inode.c:206:
+	if ((bh->b_data[z + 1] != (char) 0x00) &&
+		(bh->b_data[z + 1] != (char) 0xff))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: fs/vmufat/inode.c:207:
+	if ((bh->b_data[z + 1] != (char) 0x00) &&
+		(bh->b_data[z + 1] != (char) 0xff))

CHECK:SPACING: No space is necessary after a cast
#330: FILE: fs/vmufat/inode.c:207:
+		(bh->b_data[z + 1] != (char) 0xff))

CHECK:SPACING: No space is necessary after a cast
#331: FILE: fs/vmufat/inode.c:208:
+		bh->b_data[z + 1] = (char) 0x00;

CHECK:SPACING: No space is necessary after a cast
#334: FILE: fs/vmufat/inode.c:211:
+		((__u16 *) bh->b_data)[z / 2 + 1] =

CHECK:SPACING: No space is necessary after a cast
#336: FILE: fs/vmufat/inode.c:213:
+		((__u16 *) bh->b_data)[z / 2 + 0x0D] = 0;

CHECK:SPACING: No space is necessary after a cast
#338: FILE: fs/vmufat/inode.c:215:
+		((__u16 *) bh->b_data)[z / 2 + 1] = 0;

CHECK:SPACING: No space is necessary after a cast
#339: FILE: fs/vmufat/inode.c:216:
+		((__u16 *) bh->b_data)[z / 2 + 0x0D] = 1;

CHECK:SPACING: No space is necessary after a cast
#343: FILE: fs/vmufat/inode.c:220:
+	memset((char *) (bh->b_data + z + 0x04), '\0', 0x0C);

CHECK:SPACING: No space is necessary after a cast
#344: FILE: fs/vmufat/inode.c:221:
+	memcpy((char *) (bh->b_data + z + 0x04), ((de->d_name).name),

CHECK:SPACING: No space is necessary after a cast
#376: FILE: fs/vmufat/inode.c:253:
+	bh->b_data[z + 0x12] = bcd_from_u8((__u8) month);

CHECK:SPACING: No space is necessary after a cast
#378: FILE: fs/vmufat/inode.c:255:
+	    bcd_from_u8((__u8) day - day_n[month - 1] + 1);

CHECK:SPACING: No space is necessary after a cast
#380: FILE: fs/vmufat/inode.c:257:
+	    bcd_from_u8((__u8) ((unix_date / 3600) % 24));

CHECK:SPACING: No space is necessary after a cast
#381: FILE: fs/vmufat/inode.c:258:
+	bh->b_data[z + 0x15] = bcd_from_u8((__u8) ((unix_date / 60) % 60));

CHECK:SPACING: No space is necessary after a cast
#382: FILE: fs/vmufat/inode.c:259:
+	bh->b_data[z + 0x16] = bcd_from_u8((__u8) (unix_date % 60));

CHECK:SPACING: No space is necessary after a cast
#384: FILE: fs/vmufat/inode.c:261:
+	((__u16 *) bh->b_data)[z / 2 + 0x0C] =

CHECK:LINE_SPACING: Please don't use multiple blank lines
#396: FILE: fs/vmufat/inode.c:273:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: fs/vmufat/inode.c:275:
+static int vmufat_inode_rename(struct inode *in_source,
+			      struct dentry *de_source,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#412: FILE: fs/vmufat/inode.c:289:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#413: FILE: fs/vmufat/inode.c:290:
+static int vmufat_readdir(struct file *filp, void *dirent, filldir_t filldir)
                                        ^^^^

CHECK:SPACING: No space is necessary after a cast
#421: FILE: fs/vmufat/inode.c:298:
+	    ((struct memcard *) sb->s_fs_info);

WARNING:LINE_SPACING: Missing a blank line after declarations
#425: FILE: fs/vmufat/inode.c:302:
+	int blck_read = vmudetails->dir_bnum;
+	bh = vmufat_sb_bread(sb, blck_read);

CHECK:SPACING: No space is necessary after a cast
#431: FILE: fs/vmufat/inode.c:308:
+	switch ((unsigned int) filp->f_pos) {

CHECK:SPACING: No space is necessary after a cast
#474: FILE: fs/vmufat/inode.c:351:
+		    le16_to_cpu(((__u16 *) bh->b_data)[1 +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: fs/vmufat/inode.c:386:
+static int vmufat_game_write(struct file *file, const char *buf, char *writebuf,
+		     size_t count, loff_t *ppos)

CHECK:SPACING: No space is necessary after a cast
#516: FILE: fs/vmufat/inode.c:393:
+	    ((struct memcard *) sb->s_fs_info);

WARNING:LINE_SPACING: Missing a blank line after declarations
#519: FILE: fs/vmufat/inode.c:396:
+	unsigned long blkoffset = *ppos >> in->i_sb->s_blocksize_bits;
+	if (blkoffset < 1) {

CHECK:SPACING: No space is necessary after a cast
#531: FILE: fs/vmufat/inode.c:408:
+	fatdata = ((__u16 *) bh_fat->b_data)[(__u16) blkoffset];

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#534: FILE: fs/vmufat/inode.c:411:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#536: FILE: fs/vmufat/inode.c:413:
+			"vmufat: Cannot save game file - insufficient"
+			" linear space\n");

CHECK:SPACING: No space is necessary after a cast
#549: FILE: fs/vmufat/inode.c:426:
+		memset((char *) (bh->b_data), '\0', sb->s_blocksize);

CHECK:SPACING: No space is necessary after a cast
#550: FILE: fs/vmufat/inode.c:427:
+	memcpy((char *) (bh->b_data), writebuf, count);

CHECK:SPACING: No space is necessary after a cast
#557: FILE: fs/vmufat/inode.c:434:
+	((__u16 *) (bh_fat->b_data))[(__u16) blkoffset] = 0xfffa;

CHECK:SPACING: No space is necessary after a cast
#558: FILE: fs/vmufat/inode.c:435:
+	((__u16 *) (bh_fat->b_data))[((__u16) (blkoffset - 1))] =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: fs/vmufat/inode.c:447:
+static ssize_t vmufat_file_write(struct file *file, const char *buf, size_t count,
+			 loff_t *ppos)

CHECK:SPACING: No space is necessary after a cast
#580: FILE: fs/vmufat/inode.c:457:
+	    ((struct memcard *) sb->s_fs_info);

CHECK:SPACING: No space is necessary after a cast
#583: FILE: fs/vmufat/inode.c:460:
+	if ((ssize_t) count < 0)

CHECK:SPACING: No space is necessary after a cast
#611: FILE: fs/vmufat/inode.c:488:
+			memset((char *) (bh->b_data), '\0', sb->s_blocksize);

CHECK:SPACING: No space is necessary after a cast
#612: FILE: fs/vmufat/inode.c:489:
+		memcpy((char *) (bh->b_data), writebuf, count);

CHECK:SPACING: No space is necessary after a cast
#629: FILE: fs/vmufat/inode.c:506:
+			    ((__u16 *) bh_fat->

CHECK:SPACING: No space is necessary after a cast
#630: FILE: fs/vmufat/inode.c:507:
+			     b_data)[(__u16) currentblock];

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'bh_fat->b_data'
#630: FILE: fs/vmufat/inode.c:507:
+			    ((__u16 *) bh_fat->
+			     b_data)[(__u16) currentblock];

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:SPACING: No space is necessary after a cast
#633: FILE: fs/vmufat/inode.c:510:
+			((__u16 *) (bh_fat->b_data))[(__u16) currentblock]

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#634: FILE: fs/vmufat/inode.c:511:
+			((__u16 *) (bh_fat->b_data))[(__u16) currentblock]
+			    = 0xfffc;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#642: FILE: fs/vmufat/inode.c:519:
+		 * required here */

CHECK:SPACING: No space is necessary after a cast
#643: FILE: fs/vmufat/inode.c:520:
+		fatdata = ((__u16 *) bh_fat->b_data)[(__u16) (inode_num)];

CHECK:SPACING: No space is necessary after a cast
#645: FILE: fs/vmufat/inode.c:522:
+			((__u16 *) (bh_fat->b_data))[(__u16) (inode_num)]

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#646: FILE: fs/vmufat/inode.c:523:
+			((__u16 *) (bh_fat->b_data))[(__u16) (inode_num)]
+			    = 0xfffa;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#651: FILE: fs/vmufat/inode.c:528:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#653: FILE: fs/vmufat/inode.c:530:
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#657: FILE: fs/vmufat/inode.c:534:
+		else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#658: FILE: fs/vmufat/inode.c:535:
+		else {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#661: FILE: fs/vmufat/inode.c:538:
+			__u16 fatdata;
+			nextblock = inode_num - 1;

CHECK:SPACING: No space is necessary after a cast
#670: FILE: fs/vmufat/inode.c:547:
+				    ((__u16 *) bh_fat->b_data)[nextblock];

CHECK:SPACING: No space is necessary after a cast
#676: FILE: fs/vmufat/inode.c:553:
+			if ((long) nextblock < 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#679: FILE: fs/vmufat/inode.c:556:
+				printk(KERN_ERR

CHECK:SPACING: No space is necessary after a cast
#692: FILE: fs/vmufat/inode.c:569:
+				memset((char *) (bh->b_data), '\0',

CHECK:SPACING: No space is necessary after a cast
#694: FILE: fs/vmufat/inode.c:571:
+			memcpy((char *) (bh->b_data), writebuf, count);

CHECK:SPACING: No space is necessary after a cast
#701: FILE: fs/vmufat/inode.c:578:
+			    ((__u16 *) bh_fat->b_data)[(__u16) nextblock];

CHECK:SPACING: No space is necessary after a cast
#703: FILE: fs/vmufat/inode.c:580:
+				((__u16 *) (bh_fat->

CHECK:SPACING: No space is necessary after a cast
#704: FILE: fs/vmufat/inode.c:581:
+					    b_data))[(__u16) nextblock] =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'bh_fat->b_data'
#704: FILE: fs/vmufat/inode.c:581:
+				((__u16 *) (bh_fat->
+					    b_data))[(__u16) nextblock] =

CHECK:SPACING: No space is necessary after a cast
#711: FILE: fs/vmufat/inode.c:588:
+				    ((__u16 *) bh_fat->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'bh_fat->b_data'
#712: FILE: fs/vmufat/inode.c:589:
+				    ((__u16 *) bh_fat->
+				     b_data)[previousblock];

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#714: FILE: fs/vmufat/inode.c:591:
+				if (fatdata == 0xfffc
+				    || fatdata == 0xfffa) {

CHECK:SPACING: No space is necessary after a cast
#715: FILE: fs/vmufat/inode.c:592:
+					((__u16 *) bh_fat->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'bh_fat->b_data'
#716: FILE: fs/vmufat/inode.c:593:
+					((__u16 *) bh_fat->
+					 b_data)[previousblock] =

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#733: FILE: fs/vmufat/inode.c:610:
+
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#735: FILE: fs/vmufat/inode.c:612:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#736: FILE: fs/vmufat/inode.c:613:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#738: FILE: fs/vmufat/inode.c:615:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: fs/vmufat/inode.c:622:
+ssize_t vmufat_file_read(struct file *file, char *buf, size_t count,
+			loff_t *ppos)

CHECK:SPACING: No space is necessary after a cast
#758: FILE: fs/vmufat/inode.c:635:
+	    ((struct memcard *) sb->s_fs_info);

CHECK:SPACING: No space is necessary after a cast
#784: FILE: fs/vmufat/inode.c:661:
+			    ((__u16 *) bh_fat->b_data)[next_block];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: fs/vmufat/inode.c:671:
+		memcpy(readbuf + x * sb->s_blocksize, bh_file->b_data,
+			sb->s_blocksize);

CHECK:SPACING: No space is necessary after a cast
#796: FILE: fs/vmufat/inode.c:673:
+		fatblk = ((__u16 *) bh_fat->b_data)[next_block];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#803: FILE: fs/vmufat/inode.c:680:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#832: FILE: fs/vmufat/super.c:1:
+#include <linux/module.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#862: FILE: fs/vmufat/super.c:31:
+	__u8 botnib = num % 10;
+	return topnib << 4 | botnib;

CHECK:SPACING: No space is necessary after a cast
#879: FILE: fs/vmufat/super.c:48:
+	    ((struct memcard *) sb->s_fs_info);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#907: FILE: fs/vmufat/super.c:76:
+		in->i_mode |= S_IFDIR | S_IRUGO | S_IXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#910: FILE: fs/vmufat/super.c:79:
+		in->i_ctime.tv_sec = in->i_mtime.tv_sec =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#913: FILE: fs/vmufat/super.c:82:
+		in->i_uid = in->i_gid = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#925: FILE: fs/vmufat/super.c:94:
+			printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#927: FILE: fs/vmufat/super.c:96:
+				"vmufat: Attempt to access file which cannot"
+				" exist on this size of VMU\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#938: FILE: fs/vmufat/super.c:107:
+		/*
+		* Do the same here.. clear out the old mask, and force

CHECK:SPACING: No space is necessary after a cast
#957: FILE: fs/vmufat/super.c:126:
+			    (((__u16 *) bh->b_data)[(y % 0x10) * 0x10 +

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#964: FILE: fs/vmufat/super.c:133:
+			printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#966: FILE: fs/vmufat/super.c:135:
+				"vmufat: could not find this file on "
+				" filesystem\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#986: FILE: fs/vmufat/super.c:155:
+		in->i_ctime.tv_sec = in->i_mtime.tv_sec =

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO | S_IXUGO' are not preferred. Consider using octal permissions '0333'.
#991: FILE: fs/vmufat/super.c:160:
+		in->i_mode &= ~(S_IWUGO | S_IXUGO);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#992: FILE: fs/vmufat/super.c:161:
+		in->i_mode |= S_IRUGO;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#994: FILE: fs/vmufat/super.c:163:
+
+

CHECK:SPACING: No space is necessary after a cast
#996: FILE: fs/vmufat/super.c:165:
+		if ((((__u8 *) bh->b_data)[0x01 + (y % 0x10) * 0x20] ==

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#998: FILE: fs/vmufat/super.c:167:
+			in->i_mode |= S_IWUGO;

CHECK:SPACING: No space is necessary after a cast
#1000: FILE: fs/vmufat/super.c:169:
+		if ((((__u8 *) bh->b_data)[(y % 0x10) * 0x20] ==

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#1002: FILE: fs/vmufat/super.c:171:
+			in->i_mode |= S_IXUGO;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1004: FILE: fs/vmufat/super.c:173:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1005: FILE: fs/vmufat/super.c:174:
+		in->i_uid = in->i_gid = 0;

CHECK:SPACING: No space is necessary after a cast
#1011: FILE: fs/vmufat/super.c:180:
+		    le16_to_cpu(((__u16 *) bh->b_data)[(y % 0x10) * 0x10 +

WARNING:LINE_SPACING: Missing a blank line after declarations
#1028: FILE: fs/vmufat/super.c:197:
+	struct memcard *vmudetails;
+	sb->s_dev = 0;

CHECK:SPACING: No space is necessary after a cast
#1029: FILE: fs/vmufat/super.c:198:
+	vmudetails = (struct memcard *) (sb->s_fs_info);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1049: FILE: fs/vmufat/super.c:218:
+	 * wiping underlying data on media             */

CHECK:SPACING: No space is necessary after a cast
#1059: FILE: fs/vmufat/super.c:228:
+	vmudetails = (struct memcard *) sb->s_fs_info;

CHECK:SPACING: No space is necessary after a cast
#1067: FILE: fs/vmufat/super.c:236:
+		fatdata = ((__u16 *) bh->b_data)[nextblock];

CHECK:SPACING: No space is necessary after a cast
#1068: FILE: fs/vmufat/super.c:237:
+		((__u16 *) bh->b_data)[nextblock] = 0xfffc;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1078: FILE: fs/vmufat/super.c:247:
+	 * to find the appropriate entry */

CHECK:SPACING: No space is necessary after a cast
#1093: FILE: fs/vmufat/super.c:262:
+		    (((__u16 *) bh->b_data)[(y % 0x10) * 0x10 +

CHECK:SPACING: No space is necessary after a cast
#1100: FILE: fs/vmufat/super.c:269:
+		((__u16 *) bh->b_data)[(y % 0x10) * 0x10 + z] = 0;

CHECK:SPACING: No space is necessary after a cast
#1133: FILE: fs/vmufat/super.c:302:
+				((__u16 *) bh_old->b_data)[(x % 0x10) *

CHECK:SPACING: No space is necessary after a cast
#1135: FILE: fs/vmufat/super.c:304:
+					((__u16 *) bh->b_data)[(y % 0x10) *

CHECK:SPACING: No space is necessary after a cast
#1137: FILE: fs/vmufat/super.c:306:
+				((__u16 *) bh->b_data)[(y % 0x10) * 0x10 +

CHECK:SPACING: No space is necessary after a cast
#1161: FILE: fs/vmufat/super.c:330:
+	    ((struct memcard *) sb->s_fs_info);

CHECK:SPACING: No space is necessary after a cast
#1184: FILE: fs/vmufat/super.c:353:
+		    (((__u16 *) bh->b_data)[(y % 0x10) * 0x10 +

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1189: FILE: fs/vmufat/super.c:358:
+	 * so now update it */

CHECK:SPACING: No space is necessary after a cast
#1195: FILE: fs/vmufat/super.c:364:
+	if ((bh->b_data[z + 1] != (char) 0x00)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bh->b_data[z + 1] != (char) 0x00'
#1195: FILE: fs/vmufat/super.c:364:
+	if ((bh->b_data[z + 1] != (char) 0x00)
+	    && (bh->b_data[z + 1] != (char) 0xff))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bh->b_data[z + 1] != (char) 0xff'
#1195: FILE: fs/vmufat/super.c:364:
+	if ((bh->b_data[z + 1] != (char) 0x00)
+	    && (bh->b_data[z + 1] != (char) 0xff))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1196: FILE: fs/vmufat/super.c:365:
+	if ((bh->b_data[z + 1] != (char) 0x00)
+	    && (bh->b_data[z + 1] != (char) 0xff))

CHECK:SPACING: No space is necessary after a cast
#1196: FILE: fs/vmufat/super.c:365:
+	    && (bh->b_data[z + 1] != (char) 0xff))

CHECK:SPACING: No space is necessary after a cast
#1197: FILE: fs/vmufat/super.c:366:
+		bh->b_data[z + 1] = (char) 0x00;

CHECK:SPACING: No space is necessary after a cast
#1198: FILE: fs/vmufat/super.c:367:
+	((__u16 *) bh->b_data)[z / 2 + 1] = cpu_to_le16(inode_num);

CHECK:SPACING: No space is necessary after a cast
#1225: FILE: fs/vmufat/super.c:394:
+	bh->b_data[z + 0x12] = bcd_from_u8((__u8) month);

CHECK:SPACING: No space is necessary after a cast
#1227: FILE: fs/vmufat/super.c:396:
+	    bcd_from_u8((__u8) day - day_n[month - 1] + 1);

CHECK:SPACING: No space is necessary after a cast
#1229: FILE: fs/vmufat/super.c:398:
+	    bcd_from_u8((__u8) ((unix_date / 3600) % 24));

CHECK:SPACING: No space is necessary after a cast
#1230: FILE: fs/vmufat/super.c:399:
+	bh->b_data[z + 0x15] = bcd_from_u8((__u8) ((unix_date / 60) % 60));

CHECK:SPACING: No space is necessary after a cast
#1231: FILE: fs/vmufat/super.c:400:
+	bh->b_data[z + 0x16] = bcd_from_u8((__u8) (unix_date % 60));

CHECK:SPACING: No space is necessary after a cast
#1233: FILE: fs/vmufat/super.c:402:
+	((__u16 *) bh->b_data)[z / 2 + 0x0C] = cpu_to_le16(in->i_blocks);

CHECK:SPACING: No space is necessary after a cast
#1235: FILE: fs/vmufat/super.c:404:
+		((__u16 *) bh->b_data)[z / 2 + 0x0D] = 0;

CHECK:SPACING: No space is necessary after a cast
#1237: FILE: fs/vmufat/super.c:406:
+		((__u16 *) bh->b_data)[z / 2 + 0x0D] = cpu_to_le16(1);

CHECK:SPACING: No space is necessary after a cast
#1256: FILE: fs/vmufat/super.c:425:
+	if (!((((__u32 *) bh->b_data)[0] == s_magic)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1257: FILE: fs/vmufat/super.c:426:
+	if (!((((__u32 *) bh->b_data)[0] == s_magic)
+	      && (((__u32 *) bh->b_data)[1] == s_magic)

CHECK:SPACING: No space is necessary after a cast
#1257: FILE: fs/vmufat/super.c:426:
+	      && (((__u32 *) bh->b_data)[1] == s_magic)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1258: FILE: fs/vmufat/super.c:427:
+	      && (((__u32 *) bh->b_data)[1] == s_magic)
+	      && (((__u32 *) bh->b_data)[2] == s_magic)

CHECK:SPACING: No space is necessary after a cast
#1258: FILE: fs/vmufat/super.c:427:
+	      && (((__u32 *) bh->b_data)[2] == s_magic)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1259: FILE: fs/vmufat/super.c:428:
+	      && (((__u32 *) bh->b_data)[2] == s_magic)
+	      && (s_magic == ((__u32 *) bh->b_data)[3])))

CHECK:SPACING: No space is necessary after a cast
#1259: FILE: fs/vmufat/super.c:428:
+	      && (s_magic == ((__u32 *) bh->b_data)[3])))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1266: FILE: fs/vmufat/super.c:435:
+static int vmufat_fill_super(struct super_block *sb,
+					    void *data, int silent)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1269: FILE: fs/vmufat/super.c:438:
+	* 128, 256, 512 and 1024 blocks */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1269: FILE: fs/vmufat/super.c:438:
+	/*Search for the superblock - assuming likely sizes are
+	* 128, 256, 512 and 1024 blocks */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1288: FILE: fs/vmufat/super.c:457:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1290: FILE: fs/vmufat/super.c:459:
+				"vmufat: attempted to mount non vmufat medium"
+				" as vmufat\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*vmudata)...) over kmalloc(sizeof(struct memcard)...)
#1296: FILE: fs/vmufat/super.c:465:
+	vmudata = kmalloc(sizeof(struct memcard), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#1299: FILE: fs/vmufat/super.c:468:
+	vmudata->numblocks = le16_to_cpu(((__u16 *) bh->b_data)[0x50 / 2]);

CHECK:SPACING: No space is necessary after a cast
#1301: FILE: fs/vmufat/super.c:470:
+	vmudata->fat_bnum = le16_to_cpu(((__u16 *) bh->b_data)[0x46 / 2]);

CHECK:SPACING: No space is necessary after a cast
#1302: FILE: fs/vmufat/super.c:471:
+	vmudata->fat_len = le16_to_cpu(((__u16 *) bh->b_data)[0x48 / 2]);

CHECK:SPACING: No space is necessary after a cast
#1303: FILE: fs/vmufat/super.c:472:
+	vmudata->dir_bnum = le16_to_cpu(((__u16 *) bh->b_data)[0x4a / 2]);

CHECK:SPACING: No space is necessary after a cast
#1304: FILE: fs/vmufat/super.c:473:
+	vmudata->dir_len = le16_to_cpu(((__u16 *) bh->b_data)[0x4c / 2]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1319: FILE: fs/vmufat/super.c:488:
+		printk(KERN_ERR "vmufs: get root inode failed\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1326: FILE: fs/vmufat/super.c:495:
+		iput(root_i);
 		^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1332: FILE: fs/vmufat/super.c:501:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1335: FILE: fs/vmufat/super.c:504:
+static int vmufat_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1371: FILE: fs/vmufat/vmufat.h:1:
+/* Licenced under the GPL v2

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1373: FILE: fs/vmufat/vmufat.h:3:
+ * adrian@mcmen.demon.co.uk */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1409: FILE: fs/vmufat/vmufat.h:39:
+extern __u8 bcd_from_u8(__u8 num);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1410: FILE: fs/vmufat/vmufat.h:40:
+extern struct inode *vmufat_get_inode(struct super_block *sb, int ino);

WARNING:TYPO_SPELLING: 'hardare' may be misspelled - perhaps 'hardware'?
#1413: FILE: fs/vmufat/vmufat.h:43:
+ * without losing hardare independence -
                   ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1417: FILE: fs/vmufat/vmufat.h:47:
+static inline struct buffer_head *vmufat_sb_bread(struct super_block *sb,
+	sector_t block)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1420: FILE: fs/vmufat/vmufat.h:50:
+	struct buffer_head *bh;
+	bh = sb_bread(sb, block);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1428: FILE: fs/vmufat/vmufat.h:58:
+    {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1428: FILE: fs/vmufat/vmufat.h:58:
+static int day_n[] =
+    {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000167131.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 53 warnings, 133 checks, 1325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000167131.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
