WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-v28-for-linus-phase6

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#750: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#755: FILE: arch/x86/kernel/dumpstack_32.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#790: FILE: arch/x86/kernel/dumpstack_32.c:36:
+	symname = kallsyms_lookup(address, &symsize, &offset,
+					&modname, namebuf);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#792: FILE: arch/x86/kernel/dumpstack_32.c:38:
+		printk(" [<%08lx>]\n", address);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#799: FILE: arch/x86/kernel/dumpstack_32.c:45:
+		modname = delim = "";

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#800: FILE: arch/x86/kernel/dumpstack_32.c:46:
+	printk(" [<%08lx>] %s%s%s%s%s+0x%lx/0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#801: FILE: arch/x86/kernel/dumpstack_32.c:47:
+	printk(" [<%08lx>] %s%s%s%s%s+0x%lx/0x%lx\n",
+		address, reliab, delim, modname, delim, symname, offset, symsize);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#803: FILE: arch/x86/kernel/dumpstack_32.c:49:
+	printk(" [<%08lx>]\n", address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#808: FILE: arch/x86/kernel/dumpstack_32.c:54:
+static inline int valid_stack_ptr(struct thread_info *tinfo,
+			void *p, unsigned int size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#811: FILE: arch/x86/kernel/dumpstack_32.c:57:
+	void *t = tinfo;
+	return	p > t && p <= t + THREAD_SIZE - size;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: arch/x86/kernel/dumpstack_32.c:68:
+print_context_stack(struct thread_info *tinfo,
+		unsigned long *stack, unsigned long bp,

CHECK:SPACING: No space is necessary after a cast
#832: FILE: arch/x86/kernel/dumpstack_32.c:78:
+			if ((unsigned long) stack == bp + 4) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#835: FILE: arch/x86/kernel/dumpstack_32.c:81:
+				bp = (unsigned long) frame;

WARNING:LINE_SPACING: Missing a blank line after declarations
#854: FILE: arch/x86/kernel/dumpstack_32.c:100:
+		unsigned long dummy;
+		stack = &dummy;

CHECK:SPACING: No space is necessary after a cast
#866: FILE: arch/x86/kernel/dumpstack_32.c:112:
+			bp = *(unsigned long *) task->thread.sp;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#895: FILE: arch/x86/kernel/dumpstack_32.c:141:
+	printk(data);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#897: FILE: arch/x86/kernel/dumpstack_32.c:143:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#902: FILE: arch/x86/kernel/dumpstack_32.c:148:
+	printk("%s%s\n", (char *)data, msg);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#915: FILE: arch/x86/kernel/dumpstack_32.c:161:
+	printk("%s [<%08lx>] ", (char *)data, addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#917: FILE: arch/x86/kernel/dumpstack_32.c:163:
+		printk("? ");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#931: FILE: arch/x86/kernel/dumpstack_32.c:177:
+show_trace_log_lvl(struct task_struct *task, struct pt_regs *regs,
+		unsigned long *stack, unsigned long bp, char *log_lvl)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#934: FILE: arch/x86/kernel/dumpstack_32.c:180:
+	printk("%s =======================\n", log_lvl);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#950: FILE: arch/x86/kernel/dumpstack_32.c:196:
+	if (sp == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#962: FILE: arch/x86/kernel/dumpstack_32.c:208:
+			printk("\n%s       ", log_lvl);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#963: FILE: arch/x86/kernel/dumpstack_32.c:209:
+		printk("%08lx ", *stack++);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#965: FILE: arch/x86/kernel/dumpstack_32.c:211:
+	printk("\n%sCall Trace:\n", log_lvl);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#972: FILE: arch/x86/kernel/dumpstack_32.c:218:
+	printk("       ");

ERROR:SPACING: spaces required around that ':' (ctx:VxB)
#986: FILE: arch/x86/kernel/dumpstack_32.c:232:
+		asm("movl %%ebp, %0" : "=r" (bp):);
 		                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#989: FILE: arch/x86/kernel/dumpstack_32.c:235:
+	printk("Pid: %d, comm: %.20s %s %s %.*s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#990: FILE: arch/x86/kernel/dumpstack_32.c:236:
+	printk("Pid: %d, comm: %.20s %s %s %.*s\n",
+		current->pid, current->comm, print_tainted(),

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#998: FILE: arch/x86/kernel/dumpstack_32.c:244:
+EXPORT_SYMBOL(dump_stack);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1007: FILE: arch/x86/kernel/dumpstack_32.c:253:
+	printk(KERN_EMERG "Process %.*s (pid: %d, ti=%p task=%p task.ti=%p)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1008: FILE: arch/x86/kernel/dumpstack_32.c:254:
+	printk(KERN_EMERG "Process %.*s (pid: %d, ti=%p task=%p task.ti=%p)",
+		TASK_COMM_LEN, current->comm, task_pid_nr(current),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1020: FILE: arch/x86/kernel/dumpstack_32.c:266:
+		printk("\n" KERN_EMERG "Stack: ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1023: FILE: arch/x86/kernel/dumpstack_32.c:269:
+		printk(KERN_EMERG "Code: ");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1033: FILE: arch/x86/kernel/dumpstack_32.c:279:
+			if (ip < (u8 *)PAGE_OFFSET ||
+					probe_kernel_address(ip, c)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1034: FILE: arch/x86/kernel/dumpstack_32.c:280:
+				printk(" Bad EIP value.");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1038: FILE: arch/x86/kernel/dumpstack_32.c:284:
+				printk("<%02x> ", c);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1040: FILE: arch/x86/kernel/dumpstack_32.c:286:
+				printk("%02x ", c);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1043: FILE: arch/x86/kernel/dumpstack_32.c:289:
+	printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1111: FILE: arch/x86/kernel/dumpstack_32.c:357:
+	printk(KERN_EMERG "%s: %04lx [#%d] ", str, err & 0xffff, ++die_counter);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1113: FILE: arch/x86/kernel/dumpstack_32.c:359:
+	printk("PREEMPT ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1116: FILE: arch/x86/kernel/dumpstack_32.c:362:
+	printk("SMP ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1119: FILE: arch/x86/kernel/dumpstack_32.c:365:
+	printk("DEBUG_PAGEALLOC");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1121: FILE: arch/x86/kernel/dumpstack_32.c:367:
+	printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1123: FILE: arch/x86/kernel/dumpstack_32.c:369:
+	if (notify_die(DIE_OOPS, str, regs, err,
+			current->thread.trap_no, SIGSEGV) == NOTIFY_STOP)

CHECK:SPACING: No space is necessary after a cast
#1128: FILE: arch/x86/kernel/dumpstack_32.c:374:
+	sp = (unsigned long) (&regs->sp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1134: FILE: arch/x86/kernel/dumpstack_32.c:380:
+	printk(KERN_EMERG "EIP: [<%08lx>] ", regs->ip);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1136: FILE: arch/x86/kernel/dumpstack_32.c:382:
+	printk(" SS:ESP %04x:%08lx\n", ss, sp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1154: FILE: arch/x86/kernel/dumpstack_32.c:400:
+		printk(KERN_EMERG "Recursive die() failure, output suppressed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'die', this function's name, in a string
#1154: FILE: arch/x86/kernel/dumpstack_32.c:400:
+		printk(KERN_EMERG "Recursive die() failure, output suppressed\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1162: FILE: arch/x86/kernel/dumpstack_32.c:408:
+	kstack_depth_to_print = simple_strtoul(s, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1166: FILE: arch/x86/kernel/dumpstack_32.c:412:
+__setup("kstack=", kstack_setup);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1170: FILE: arch/x86/kernel/dumpstack_32.c:416:
+	code_bytes = simple_strtoul(s, NULL, 0);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1176: FILE: arch/x86/kernel/dumpstack_32.c:422:
+__setup("code_bytes=", code_bytes_setup);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1183: FILE: arch/x86/kernel/dumpstack_64.c:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1208: FILE: arch/x86/kernel/dumpstack_64.c:26:
+	printk(" [<%016lx>] %s%pS\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1209: FILE: arch/x86/kernel/dumpstack_64.c:27:
+	printk(" [<%016lx>] %s%pS\n",
+			address, reliable ?	"" : "? ", (void *) address);

CHECK:SPACING: No space is necessary after a cast
#1209: FILE: arch/x86/kernel/dumpstack_64.c:27:
+			address, reliable ?	"" : "? ", (void *) address);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1212: FILE: arch/x86/kernel/dumpstack_64.c:30:
+static unsigned long *in_exception_stack(unsigned cpu, unsigned long stack,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1213: FILE: arch/x86/kernel/dumpstack_64.c:31:
+static unsigned long *in_exception_stack(unsigned cpu, unsigned long stack,
+					unsigned *usedp, char **idp)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1213: FILE: arch/x86/kernel/dumpstack_64.c:31:
+					unsigned *usedp, char **idp)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1226: FILE: arch/x86/kernel/dumpstack_64.c:44:
+	unsigned k;

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#1233: FILE: arch/x86/kernel/dumpstack_64.c:51:
+		unsigned long end = per_cpu(orig_ist, cpu).ist[k];
 		                                           ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1264: FILE: arch/x86/kernel/dumpstack_64.c:82:
+			unsigned j = N_EXCEPTION_STACKS - 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1295: FILE: arch/x86/kernel/dumpstack_64.c:113:
+static inline int valid_stack_ptr(struct thread_info *tinfo,
+			void *p, unsigned int size, void *end)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1298: FILE: arch/x86/kernel/dumpstack_64.c:116:
+	void *t = tinfo;
+	if (end) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1299: FILE: arch/x86/kernel/dumpstack_64.c:117:
+		if (p < end && p >= (end-THREAD_SIZE))
 		                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1315: FILE: arch/x86/kernel/dumpstack_64.c:133:
+print_context_stack(struct thread_info *tinfo,
+		unsigned long *stack, unsigned long bp,

CHECK:SPACING: No space is necessary after a cast
#1326: FILE: arch/x86/kernel/dumpstack_64.c:144:
+			if ((unsigned long) stack == bp + 8) {

CHECK:SPACING: No space is necessary after a cast
#1329: FILE: arch/x86/kernel/dumpstack_64.c:147:
+				bp = (unsigned long) frame;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1343: FILE: arch/x86/kernel/dumpstack_64.c:161:
+	const unsigned cpu = get_cpu();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1345: FILE: arch/x86/kernel/dumpstack_64.c:163:
+	unsigned used = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1353: FILE: arch/x86/kernel/dumpstack_64.c:171:
+		unsigned long dummy;
+		stack = &dummy;

CHECK:SPACING: No space is necessary after a cast
#1365: FILE: arch/x86/kernel/dumpstack_64.c:183:
+			bp = *(unsigned long *) task->thread.sp;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1379: FILE: arch/x86/kernel/dumpstack_64.c:197:
+		unsigned long *estack_end;
+		estack_end = in_exception_stack(cpu, (unsigned long)stack,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1387: FILE: arch/x86/kernel/dumpstack_64.c:205:
+			bp = print_context_stack(tinfo, stack, bp, ops,
+							data, estack_end);

CHECK:SPACING: No space is necessary after a cast
#1394: FILE: arch/x86/kernel/dumpstack_64.c:212:
+			stack = (unsigned long *) estack_end[-2];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1399: FILE: arch/x86/kernel/dumpstack_64.c:217:
+			unsigned long *irqstack;
+			irqstack = irqstack_end -

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1406: FILE: arch/x86/kernel/dumpstack_64.c:224:
+				bp = print_context_stack(tinfo, stack, bp,
+						ops, data, irqstack_end);

CHECK:SPACING: No space is necessary after a cast
#1412: FILE: arch/x86/kernel/dumpstack_64.c:230:
+				stack = (unsigned long *) (irqstack_end[-1]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1433: FILE: arch/x86/kernel/dumpstack_64.c:251:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1438: FILE: arch/x86/kernel/dumpstack_64.c:256:
+	printk("%s\n", msg);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1443: FILE: arch/x86/kernel/dumpstack_64.c:261:
+	printk(" <%s> ", name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1462: FILE: arch/x86/kernel/dumpstack_64.c:280:
+show_trace_log_lvl(struct task_struct *task, struct pt_regs *regs,
+		unsigned long *stack, unsigned long bp, char *log_lvl)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1464: FILE: arch/x86/kernel/dumpstack_64.c:282:
+	printk("Call Trace:\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1476: FILE: arch/x86/kernel/dumpstack_64.c:294:
+show_stack_log_lvl(struct task_struct *task, struct pt_regs *regs,
+		unsigned long *sp, unsigned long bp, char *log_lvl)

CHECK:SPACING: No space is necessary after a cast
#1482: FILE: arch/x86/kernel/dumpstack_64.c:300:
+		(unsigned long *) (cpu_pda(cpu)->irqstackptr);

CHECK:SPACING: No space is necessary after a cast
#1484: FILE: arch/x86/kernel/dumpstack_64.c:302:
+		(unsigned long *) (cpu_pda(cpu)->irqstackptr - IRQSTACKSIZE);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#1491: FILE: arch/x86/kernel/dumpstack_64.c:309:
+	if (sp == NULL) {

CHECK:SPACING: No space is necessary after a cast
#1502: FILE: arch/x86/kernel/dumpstack_64.c:320:
+				stack = (unsigned long *) (irqstack_end[-1]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1503: FILE: arch/x86/kernel/dumpstack_64.c:321:
+				printk(" <EOI> ");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1505: FILE: arch/x86/kernel/dumpstack_64.c:323:
+		} else {
+		if (((long) stack & (THREAD_SIZE-1)) == 0)

CHECK:SPACING: No space is necessary after a cast
#1506: FILE: arch/x86/kernel/dumpstack_64.c:324:
+		if (((long) stack & (THREAD_SIZE-1)) == 0)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1506: FILE: arch/x86/kernel/dumpstack_64.c:324:
+		if (((long) stack & (THREAD_SIZE-1)) == 0)
 		                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1510: FILE: arch/x86/kernel/dumpstack_64.c:328:
+			printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1511: FILE: arch/x86/kernel/dumpstack_64.c:329:
+		printk(" %016lx", *stack++);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1514: FILE: arch/x86/kernel/dumpstack_64.c:332:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1536: FILE: arch/x86/kernel/dumpstack_64.c:354:
+	printk("Pid: %d, comm: %.20s %s %s %.*s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1537: FILE: arch/x86/kernel/dumpstack_64.c:355:
+	printk("Pid: %d, comm: %.20s %s %s %.*s\n",
+		current->pid, current->comm, print_tainted(),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1553: FILE: arch/x86/kernel/dumpstack_64.c:371:
+	printk("CPU %d ", cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1555: FILE: arch/x86/kernel/dumpstack_64.c:373:
+	printk("Process %s (pid: %d, threadinfo %p, task %p)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1556: FILE: arch/x86/kernel/dumpstack_64.c:374:
+	printk("Process %s (pid: %d, threadinfo %p, task %p)\n",
+		cur->comm, cur->pid, task_thread_info(cur), cur);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1568: FILE: arch/x86/kernel/dumpstack_64.c:386:
+		printk("Stack: ");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1570: FILE: arch/x86/kernel/dumpstack_64.c:388:
+		show_stack_log_lvl(NULL, regs, (unsigned long *)sp,
+				regs->bp, "");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1572: FILE: arch/x86/kernel/dumpstack_64.c:390:
+		printk(KERN_EMERG "Code: ");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1582: FILE: arch/x86/kernel/dumpstack_64.c:400:
+			if (ip < (u8 *)PAGE_OFFSET ||
+					probe_kernel_address(ip, c)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1583: FILE: arch/x86/kernel/dumpstack_64.c:401:
+				printk(" Bad RIP value.");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1587: FILE: arch/x86/kernel/dumpstack_64.c:405:
+				printk("<%02x> ", c);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1589: FILE: arch/x86/kernel/dumpstack_64.c:407:
+				printk("%02x ", c);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1592: FILE: arch/x86/kernel/dumpstack_64.c:410:
+	printk("\n");

CHECK:SPACING: No space is necessary after a cast
#1599: FILE: arch/x86/kernel/dumpstack_64.c:417:
+	if (__copy_from_user(&ud2, (const void __user *) ip, sizeof(ud2)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 65)
#1620: FILE: arch/x86/kernel/dumpstack_64.c:438:
+		if (cpu == die_owner)
+			/* nested oops. should stop eventually */;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1655: FILE: arch/x86/kernel/dumpstack_64.c:473:
+	printk(KERN_EMERG "%s: %04lx [%u] ", str, err & 0xffff, ++die_counter);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1657: FILE: arch/x86/kernel/dumpstack_64.c:475:
+	printk("PREEMPT ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1660: FILE: arch/x86/kernel/dumpstack_64.c:478:
+	printk("SMP ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1663: FILE: arch/x86/kernel/dumpstack_64.c:481:
+	printk("DEBUG_PAGEALLOC");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1665: FILE: arch/x86/kernel/dumpstack_64.c:483:
+	printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1667: FILE: arch/x86/kernel/dumpstack_64.c:485:
+	if (notify_die(DIE_OOPS, str, regs, err,
+			current->thread.trap_no, SIGSEGV) == NOTIFY_STOP)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1673: FILE: arch/x86/kernel/dumpstack_64.c:491:
+	printk(KERN_ALERT "RIP ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1675: FILE: arch/x86/kernel/dumpstack_64.c:493:
+	printk(" RSP <%016lx>\n", regs->sp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1706: FILE: arch/x86/kernel/dumpstack_64.c:524:
+	printk(KERN_EMERG "%s", str);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1707: FILE: arch/x86/kernel/dumpstack_64.c:525:
+	printk(" on CPU%d, ip %08lx, registers:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1708: FILE: arch/x86/kernel/dumpstack_64.c:526:
+	printk(" on CPU%d, ip %08lx, registers:\n",
+		smp_processor_id(), regs->ip);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1728: FILE: arch/x86/kernel/dumpstack_64.c:546:
+}
+early_param("oops", oops_setup);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1734: FILE: arch/x86/kernel/dumpstack_64.c:552:
+	kstack_depth_to_print = simple_strtoul(s, NULL, 0);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1737: FILE: arch/x86/kernel/dumpstack_64.c:555:
+}
+early_param("kstack", kstack_setup);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1741: FILE: arch/x86/kernel/dumpstack_64.c:559:
+	code_bytes = simple_strtoul(s, NULL, 0);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1747: FILE: arch/x86/kernel/dumpstack_64.c:565:
+__setup("code_bytes=", code_bytes_setup);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1865: FILE: arch/x86/kernel/es7000_32.c:112:
+extern void unmap_unisys_acpi_oem_table(unsigned long oem_addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <OEMTableAddr>
#1890: FILE: arch/x86/kernel/es7000_32.c:259:
+			oem_addrX = t->OEMTableAddr;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <OEMTableSize>
#1891: FILE: arch/x86/kernel/es7000_32.c:260:
+			oem_size = t->OEMTableSize;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1966: FILE: arch/x86/kernel/head.c:38:
+	printk(KERN_INFO "BIOS EBDA/lowmem at: %08x/%08x\n", ebda_addr, lowmem);

ERROR:SPACING: space required before the open parenthesis '('
#2001: FILE: arch/x86/kernel/ldt.c:96:
+	for(i = 0; i < old->size; i++)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2020: FILE: arch/x86/kernel/paravirt-spinlocks.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2234: FILE: arch/x86/kernel/process_64.c:181:
+	printk(KERN_INFO "FS:  %016lx(%04x) GS:%016lx(%04x) knlGS:%016lx\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2268: FILE: arch/x86/kernel/setup.c:305:
+		p = early_memremap(mapaddr, clen+slop);
 		                                ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2447: FILE: arch/x86/kernel/smpboot.c:1310:
+		/*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:MEMORY_BARRIER: memory barrier without comment
#2539: FILE: arch/x86/kernel/smpboot.c:1406:
+	mb();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2571: FILE: arch/x86/kernel/smpboot.c:1436:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#2967: FILE: arch/x86/kernel/traps.c:147:
+			memset((char *) tss->io_bitmap +

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#3138: FILE: arch/x86/kernel/traps.c:202:
+	    printk_ratelimit()) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3139: FILE: arch/x86/kernel/traps.c:203:
+		printk(KERN_INFO

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3144: FILE: arch/x86/kernel/traps.c:208:
+		printk("\n");

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'trapnr' - possible side-effects?
#3204: FILE: arch/x86/kernel/traps.c:245:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+dotraplinkage void do_##name(struct pt_regs *regs, long error_code)	\
 {									\
 	siginfo_t info;							\
 	info.si_signo = signr;						\
 	info.si_errno = 0;						\
 	info.si_code = sicode;						\
 	info.si_addr = (void __user *)siaddr;				\
 	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
 							== NOTIFY_STOP)	\
 		return;							\
+	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'signr' - possible side-effects?
#3204: FILE: arch/x86/kernel/traps.c:245:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+dotraplinkage void do_##name(struct pt_regs *regs, long error_code)	\
 {									\
 	siginfo_t info;							\
 	info.si_signo = signr;						\
 	info.si_errno = 0;						\
 	info.si_code = sicode;						\
 	info.si_addr = (void __user *)siaddr;				\
 	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
 							== NOTIFY_STOP)	\
 		return;							\
+	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'str' - possible side-effects?
#3204: FILE: arch/x86/kernel/traps.c:245:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+dotraplinkage void do_##name(struct pt_regs *regs, long error_code)	\
 {									\
 	siginfo_t info;							\
 	info.si_signo = signr;						\
 	info.si_errno = 0;						\
 	info.si_code = sicode;						\
 	info.si_addr = (void __user *)siaddr;				\
 	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
 							== NOTIFY_STOP)	\
 		return;							\
+	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
 }

WARNING:TYPO_SPELLING: 'IST' may be misspelled - perhaps 'IS'?
#3243: FILE: arch/x86/kernel/traps.c:273:
+/* Runs on IST stack */
            ^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3247: FILE: arch/x86/kernel/traps.c:277:
+	if (notify_die(DIE_TRAP, "stack segment", regs, error_code,
+			12, SIGBUS) == NOTIFY_STOP)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3267: FILE: arch/x86/kernel/traps.c:296:
+	/* This is always a kernel trap and never fixable (and thus must
+	   never return). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3267: FILE: arch/x86/kernel/traps.c:296:
+	   never return). */

WARNING:TYPO_SPELLING: 'IST' may be misspelled - perhaps 'IS'?
#3411: FILE: arch/x86/kernel/traps.c:545:
+/* May run on IST stack. */
               ^^^

WARNING:TYPO_SPELLING: 'IST' may be misspelled - perhaps 'IS'?
#3438: FILE: arch/x86/kernel/traps.c:564:
+/* Help handler running on IST stack to switch back to user stack
                            ^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3439: FILE: arch/x86/kernel/traps.c:565:
+/* Help handler running on IST stack to switch back to user stack
+   for scheduling or signal handling. The actual stack switch is done in

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3440: FILE: arch/x86/kernel/traps.c:566:
+   entry.S */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3451: FILE: arch/x86/kernel/traps.c:577:
+	/* Exception from kernel and interrupts are enabled. Move to
+	   kernel process stack. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3451: FILE: arch/x86/kernel/traps.c:577:
+	   kernel process stack. */

WARNING:TYPO_SPELLING: 'IST' may be misspelled - perhaps 'IS'?
#3465: FILE: arch/x86/kernel/traps.c:608:
+ * May run on IST stack.
               ^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3609: FILE: arch/x86/kernel/traps.c:850:
+	if (!user_mode(regs) &&
+			kernel_math_error(regs, "kernel simd math error", 19))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#3635: FILE: arch/x86/kernel/traps.c:886:
+asmlinkage void __attribute__((weak)) smp_thermal_interrupt(void)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#3639: FILE: arch/x86/kernel/traps.c:890:
+asmlinkage void __attribute__((weak)) mce_threshold_interrupt(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3707: FILE: arch/x86/kernel/traps.c:982:
+	siginfo_t info;
+	local_irq_enable();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3714: FILE: arch/x86/kernel/traps.c:989:
+	if (notify_die(DIE_TRAP, "iret exception",
+			regs, error_code, 32, SIGILL) == NOTIFY_STOP)

CHECK:BRACES: braces {} should be used on all arms of this statement
#5081: FILE: arch/x86/mach-generic/es7000.c:58:
+		if (check_dsdt)
[...]
 		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5325: FILE: arch/x86/mm/ioremap.c:82:
+	VIRTUAL_BUG_ON(system_state != SYSTEM_BOOTING &&
+		is_vmalloc_addr((void *) x));

CHECK:SPACING: No space is necessary after a cast
#5325: FILE: arch/x86/mm/ioremap.c:82:
+		is_vmalloc_addr((void *) x));

CHECK:SPACING: No space is necessary after a cast
#5335: FILE: arch/x86/mm/ioremap.c:92:
+	if (system_state != SYSTEM_BOOTING && is_vmalloc_addr((void *) x))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5434: FILE: arch/x86/mm/ioremap.c:660:
+		printk(KERN_INFO "early_iomap(%08lx, %08lx) not found slot\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5435: FILE: arch/x86/mm/ioremap.c:661:
+		printk(KERN_INFO "early_iomap(%08lx, %08lx) not found slot\n",
+			 phys_addr, size);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5465: FILE: arch/x86/mm/ioremap.c:699:
+	idx0 = FIX_BTMAP_BEGIN - NR_FIX_BTMAPS*slot;
 	                                      ^

CHECK:SPACING: No space is necessary after a cast
#5478: FILE: arch/x86/mm/ioremap.c:710:
+	prev_map[slot] = (void *) (offset + fix_to_virt(idx0));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5513: FILE: arch/x86/mm/ioremap.c:743:
+		printk(KERN_INFO "early_iounmap(%p, %08lx) not found slot\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'early_iounmap', this function's name, in a string
#5513: FILE: arch/x86/mm/ioremap.c:743:
+		printk(KERN_INFO "early_iounmap(%p, %08lx) not found slot\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5514: FILE: arch/x86/mm/ioremap.c:744:
+		printk(KERN_INFO "early_iounmap(%p, %08lx) not found slot\n",
+			 addr, size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5520: FILE: arch/x86/mm/ioremap.c:750:
+		printk(KERN_INFO "early_iounmap(%p, %08lx) [%d] size not consistent %08lx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'early_iounmap', this function's name, in a string
#5520: FILE: arch/x86/mm/ioremap.c:750:
+		printk(KERN_INFO "early_iounmap(%p, %08lx) [%d] size not consistent %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5521: FILE: arch/x86/mm/ioremap.c:751:
+		printk(KERN_INFO "early_iounmap(%p, %08lx) [%d] size not consistent %08lx\n",
+			 addr, size, slot, prev_size[slot]);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5538: FILE: arch/x86/mm/ioremap.c:770:
+	idx = FIX_BTMAP_BEGIN - NR_FIX_BTMAPS*slot;
 	                                     ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#5564: FILE: arch/x86/xen/Kconfig:32:
+config XEN_DEBUG_FS
+	bool "Enable Xen debug and tuning parameters in debugfs"
+	depends on XEN && DEBUG_FS
+	default n
+	help
+	  Enable statistics output and various tuning options in debugfs.
+	  Enabling this option may incur a significant performance overhead.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5598: FILE: arch/x86/xen/debugfs.c:1:
+#include <linux/init.h>

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#5619: FILE: arch/x86/xen/debugfs.c:22:
+struct array_data
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5621: FILE: arch/x86/xen/debugfs.c:24:
+	unsigned elements;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5631: FILE: arch/x86/xen/debugfs.c:34:
+			   u32 *array, unsigned array_size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5634: FILE: arch/x86/xen/debugfs.c:37:
+	unsigned i;

ERROR:SPACING: space required before the open parenthesis '('
#5636: FILE: arch/x86/xen/debugfs.c:39:
+	for(i = 0; i < array_size; i++) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5646: FILE: arch/x86/xen/debugfs.c:49:
+			buf[-1] = (i == array_size-1) ? '\n' : ' ';
 			                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5657: FILE: arch/x86/xen/debugfs.c:60:
+static char *format_array_alloc(const char *fmt, u32 *array, unsigned array_size)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ret"
#5663: FILE: arch/x86/xen/debugfs.c:66:
+	if (ret == NULL)

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#5679: FILE: arch/x86/xen/debugfs.c:82:
+		if (file->private_data) {
+			kfree(file->private_data);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#5700: FILE: arch/x86/xen/debugfs.c:103:
+static struct file_operations u32_array_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#5703: FILE: arch/x86/xen/debugfs.c:106:
+	.release= xen_array_release,
 	        ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5709: FILE: arch/x86/xen/debugfs.c:112:
+					    u32 *array, unsigned elements)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#5713: FILE: arch/x86/xen/debugfs.c:116:
+	if (data == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5727: FILE: arch/x86/xen/debugfs.h:1:
+#ifndef _XEN_DEBUGFS_H

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5734: FILE: arch/x86/xen/debugfs.h:8:
+					    u32 *array, unsigned elements);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5837: FILE: arch/x86/xen/enlighten.c:258:
+	BUG_ON(ptep == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptep"
#5837: FILE: arch/x86/xen/enlighten.c:258:
+	BUG_ON(ptep == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5853: FILE: arch/x86/xen/enlighten.c:266:
+		BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#5859: FILE: arch/x86/xen/enlighten.c:268:
+	if (!PageHighMem(page)) {
[...]
-	if (HYPERVISOR_sched_op(SCHEDOP_block, NULL) != 0)
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5869: FILE: arch/x86/xen/enlighten.c:273:
+				BUG();

CHECK:BRACES: Unbalanced braces around else statement
#5870: FILE: arch/x86/xen/enlighten.c:274:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5875: FILE: arch/x86/xen/enlighten.c:278:
+static void xen_alloc_ldt(struct desc_struct *ldt, unsigned entries)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5882: FILE: arch/x86/xen/enlighten.c:280:
+	const unsigned entries_per_page = PAGE_SIZE / LDT_ENTRY_SIZE;

ERROR:SPACING: space required before the open parenthesis '('
#5889: FILE: arch/x86/xen/enlighten.c:283:
+	for(i = 0; i < entries; i += entries_per_page)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5894: FILE: arch/x86/xen/enlighten.c:287:
+static void xen_free_ldt(struct desc_struct *ldt, unsigned entries)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5897: FILE: arch/x86/xen/enlighten.c:289:
+	const unsigned entries_per_page = PAGE_SIZE / LDT_ENTRY_SIZE;

ERROR:SPACING: space required before the open parenthesis '('
#5900: FILE: arch/x86/xen/enlighten.c:292:
+	for(i = 0; i < entries; i += entries_per_page)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5937: FILE: arch/x86/xen/enlighten.c:813:
+		/* Fast syscall setup is all done in hypercalls, so
+		   these are all ignored.  Stub them out here to stop

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5938: FILE: arch/x86/xen/enlighten.c:814:
+		   Xen console noise. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6057: FILE: arch/x86/xen/irq.c:1:
+#include <linux/hardirq.h>

ERROR:SPACING: space required before the open parenthesis '('
#6084: FILE: arch/x86/xen/irq.c:28:
+	for(i = 0; i < NR_VECTORS; i++) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6106: FILE: arch/x86/xen/irq.c:50:
+	/* convert to IF type flag
+	   -0 -> 0x00000000

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6120: FILE: arch/x86/xen/irq.c:64:
+	/* There's a one instruction preempt window here.  We need to
+	   make sure we're don't switch CPUs between getting the vcpu

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6121: FILE: arch/x86/xen/irq.c:65:
+	   pointer and updating the mask. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6128: FILE: arch/x86/xen/irq.c:72:
+	/* Doesn't matter if we get preempted here, because any
+	   pending event will get dealt with anyway. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6128: FILE: arch/x86/xen/irq.c:72:
+	   pending event will get dealt with anyway. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6141: FILE: arch/x86/xen/irq.c:85:
+	/* There's a one instruction preempt window here.  We need to
+	   make sure we're don't switch CPUs between getting the vcpu

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6142: FILE: arch/x86/xen/irq.c:86:
+	   pointer and updating the mask. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6153: FILE: arch/x86/xen/irq.c:97:
+	/* We don't need to worry about being preempted here, since
+	   either a) interrupts are disabled, so no preemption, or b)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6155: FILE: arch/x86/xen/irq.c:99:
+	   on an indeterminate processor. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6161: FILE: arch/x86/xen/irq.c:105:
+	/* Doesn't matter if we get preempted here, because any
+	   pending event will get dealt with anyway. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6161: FILE: arch/x86/xen/irq.c:105:
+	   pending event will get dealt with anyway. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6172: FILE: arch/x86/xen/irq.c:116:
+		BUG();

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#6183: FILE: arch/x86/xen/irq.c:127:
+static const struct pv_irq_ops xen_irq_ops __initdata = {

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __init xen_init_irq_ops() should probably be void __init xen_init_irq_ops(void)
#6196: FILE: arch/x86/xen/irq.c:140:
+void __init xen_init_irq_ops()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'elem' may be better as '(elem)' to avoid precedence issues
#6263: FILE: arch/x86/xen/mmu.c:108:
+#define ADD_STATS(elem, val)			\
+	do { check_zero(); mmu_stats.elem += (val); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#6264: FILE: arch/x86/xen/mmu.c:109:
+	do { check_zero(); mmu_stats.elem += (val); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#6268: FILE: arch/x86/xen/mmu.c:113:
+#define ADD_STATS(elem, val)	do { (void)(val); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#6268: FILE: arch/x86/xen/mmu.c:113:
+#define ADD_STATS(elem, val)	do { (void)(val); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mcs.mc"
#6295: FILE: arch/x86/xen/mmu.c:302:
+	if (mcs.mc != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6475: FILE: arch/x86/xen/mmu.c:737:
+	/* Do the top level last, so that the callbacks can use it as
+	   a cue to do final things like tlb flushes. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6475: FILE: arch/x86/xen/mmu.c:737:
+	   a cue to do final things like tlb flushes. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6483: FILE: arch/x86/xen/mmu.c:744:
+/* If we're using split pte locks, then take the page's lock and
+   return a pointer to it.  Otherwise return NULL. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6483: FILE: arch/x86/xen/mmu.c:744:
+   return a pointer to it.  Otherwise return NULL. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d_xen"
#6699: FILE: arch/x86/xen/mmu.c:1111:
+	if (d_xen == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6775: FILE: arch/x86/xen/multicalls.c:37:
 
+

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#6785: FILE: arch/x86/xen/multicalls.c:56:
+enum flush_reasons
+{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6797: FILE: arch/x86/xen/multicalls.c:68:
+	unsigned histo[MC_BATCH+1];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6797: FILE: arch/x86/xen/multicalls.c:68:
+	unsigned histo[MC_BATCH+1];
 	                       ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6799: FILE: arch/x86/xen/multicalls.c:70:
+	unsigned issued;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6800: FILE: arch/x86/xen/multicalls.c:71:
+	unsigned arg_total;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6801: FILE: arch/x86/xen/multicalls.c:72:
+	unsigned hypercalls;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6802: FILE: arch/x86/xen/multicalls.c:73:
+	unsigned histo_hypercalls[NHYPERCALLS];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6804: FILE: arch/x86/xen/multicalls.c:75:
+	unsigned flush[FL_N_REASONS];

ERROR:SPACING: space required before the open parenthesis '('
#6828: FILE: arch/x86/xen/multicalls.c:99:
+	for(i = 0; i < mc->mcidx; i++) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6829: FILE: arch/x86/xen/multicalls.c:100:
+		unsigned op = mc->entries[i].op;

WARNING:LINE_SPACING: Missing a blank line after declarations
#6830: FILE: arch/x86/xen/multicalls.c:101:
+		unsigned op = mc->entries[i].op;
+		if (op < NHYPERCALLS)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d_xen"
#6896: FILE: arch/x86/xen/multicalls.c:256:
+	if (d_xen == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#7000: FILE: arch/x86/xen/smp.c:339:
+	unsigned int cpu = smp_processor_id();
+	if (cpu == 0)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#7013: FILE: arch/x86/xen/smp.c:352:
+		schedule_timeout(HZ/10);
 		                   ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#7036: FILE: arch/x86/xen/smp.c:375:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7041: FILE: arch/x86/xen/smp.c:380:
+	BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7046: FILE: arch/x86/xen/smp.c:385:
+	BUG();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7241: FILE: arch/x86/xen/spinlock.c:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7273: FILE: arch/x86/xen/spinlock.c:33:
+	u32 histo_spin_total[HISTO_BUCKETS+1];
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7274: FILE: arch/x86/xen/spinlock.c:34:
+	u32 histo_spin_spinning[HISTO_BUCKETS+1];
 	                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7275: FILE: arch/x86/xen/spinlock.c:35:
+	u32 histo_spin_blocked[HISTO_BUCKETS+1];
 	                                    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7284: FILE: arch/x86/xen/spinlock.c:44:
+static unsigned lock_timeout = 1 << 10;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'elem' may be better as '(elem)' to avoid precedence issues
#7295: FILE: arch/x86/xen/spinlock.c:55:
+#define ADD_STATS(elem, val)			\
+	do { check_zero(); spinlock_stats.elem += (val); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#7296: FILE: arch/x86/xen/spinlock.c:56:
+	do { check_zero(); spinlock_stats.elem += (val); } while(0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7305: FILE: arch/x86/xen/spinlock.c:65:
+	unsigned index = ilog2(delta);

CHECK:BIT_MACRO: Prefer using the BIT macro
#7339: FILE: arch/x86/xen/spinlock.c:99:
+#define TIMEOUT			(1 << 10)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:SPACING: space required before the open parenthesis '('
#7340: FILE: arch/x86/xen/spinlock.c:100:
+#define ADD_STATS(elem, val)	do { (void)(val); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#7340: FILE: arch/x86/xen/spinlock.c:100:
+#define ADD_STATS(elem, val)	do { (void)(val); } while(0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#7350: FILE: arch/x86/xen/spinlock.c:110:
+}
+static inline void spin_time_accum_spinning(u64 start)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#7353: FILE: arch/x86/xen/spinlock.c:113:
+}
+static inline void spin_time_accum_blocked(u64 start)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#7375: FILE: arch/x86/xen/spinlock.c:135:
+	/* Not strictly true; this is only the count of contended
+	   lock-takers entering the slow path. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#7375: FILE: arch/x86/xen/spinlock.c:135:
+	   lock-takers entering the slow path. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#7449: FILE: arch/x86/xen/spinlock.c:209:
+	ADD_STATS(taken_slow_nested, prev != NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#7456: FILE: arch/x86/xen/spinlock.c:216:
+		/* check again make sure it didn't become free while
+		   we weren't looking  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#7456: FILE: arch/x86/xen/spinlock.c:216:
+		   we weren't looking  */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#7466: FILE: arch/x86/xen/spinlock.c:226:
+			if (prev != NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7497: FILE: arch/x86/xen/spinlock.c:257:
+	unsigned timeout;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7575: FILE: arch/x86/xen/spinlock.c:335:
+	BUG();

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#7588: FILE: arch/x86/xen/spinlock.c:348:
+				     IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING,
 				                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#7588: FILE: arch/x86/xen/spinlock.c:348:
+				     IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING,
 				                              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#7597: FILE: arch/x86/xen/spinlock.c:357:
+	printk("cpu %d spinlock event irq %d\n", cpu, irq);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d_xen"
#7623: FILE: arch/x86/xen/spinlock.c:383:
+	if (d_xen == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#7698: FILE: arch/x86/xen/time.c:456:
+	struct clock_event_device *evt;
+	BUG_ON(cpu == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7698: FILE: arch/x86/xen/time.c:456:
+	BUG_ON(cpu == 0);

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#8043: FILE: drivers/xen/balloon.c:466:
+#define BALLOON_SHOW(name, format, args...)				\
+	static ssize_t show_##name(struct sys_device *dev,		\
+				   struct sysdev_attribute *attr,	\
+				   char *buf)				\
+	{								\
+		return sprintf(buf, format, ##args);			\
+	}								\
 	static SYSDEV_ATTR(name, S_IRUGO, show_##name, NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8112: FILE: drivers/xen/cpu_hotplug.c:1:
+#include <linux/notifier.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#8146: FILE: drivers/xen/cpu_hotplug.c:35:
+		printk(KERN_ERR "XENBUS: Unable to read cpu state\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#8156: FILE: drivers/xen/cpu_hotplug.c:45:
+		printk(KERN_ERR "XENBUS: unknown state(%s) on CPU%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8162: FILE: drivers/xen/cpu_hotplug.c:51:
+static void handle_vcpu_hotplug_event(struct xenbus_watch *watch,
+					const char **vec, unsigned int len)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cpustr"
#8169: FILE: drivers/xen/cpu_hotplug.c:58:
+	if (cpustr != NULL) {

WARNING:NAKED_SSCANF: unchecked sscanf return value
#8170: FILE: drivers/xen/cpu_hotplug.c:59:
+		sscanf(cpustr, "cpu/%u", &cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8176: FILE: drivers/xen/cpu_hotplug.c:65:
+static int setup_cpu_watcher(struct notifier_block *notifier,
+			      unsigned long event, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#8231: FILE: drivers/xen/events.c:170:
+	struct shared_info *s = HYPERVISOR_shared_info;
+	return sync_test_bit(port, &s->evtchn_pending[0]);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#8363: FILE: include/asm-x86/desc.h:106:
+static inline void paravirt_alloc_ldt(struct desc_struct *ldt, unsigned entries)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#8367: FILE: include/asm-x86/desc.h:110:
+static inline void paravirt_free_ldt(struct desc_struct *ldt, unsigned entries)

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#8404: FILE: include/asm-x86/desc.h:378:
+static inline void set_system_intr_gate_ist(int n, void *addr, unsigned ist)
                                                                         ^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#8404: FILE: include/asm-x86/desc.h:378:
+static inline void set_system_intr_gate_ist(int n, void *addr, unsigned ist)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8416: FILE: include/asm-x86/es7000/mpparse.h:8:
+extern void unmap_unisys_acpi_oem_table(unsigned long oem_addr);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#8433: FILE: include/asm-x86/fixmap_32.h:100:
+	FIX_BTMAP_BEGIN = FIX_BTMAP_END + NR_FIX_BTMAPS*FIX_BTMAPS_SLOTS - 1,
 	                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#8475: FILE: include/asm-x86/fixmap_64.h:67:
+	FIX_BTMAP_BEGIN = FIX_BTMAP_END + NR_FIX_BTMAPS*FIX_BTMAPS_SLOTS - 1,
 	                                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8508: FILE: include/asm-x86/io.h:86:
+extern void *early_memremap(unsigned long offset, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8570: FILE: include/asm-x86/kdebug.h:32:
+extern void __show_regs(struct pt_regs *regs, int all);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8683: FILE: include/asm-x86/page.h:198:
+extern bool __virt_addr_valid(unsigned long kaddr);

CHECK:SPACING: No space is necessary after a cast
#8684: FILE: include/asm-x86/page.h:199:
+#define virt_addr_valid(kaddr)	__virt_addr_valid((unsigned long) (kaddr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8712: FILE: include/asm-x86/page_32.h:84:
+extern unsigned long __phys_addr(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#8712: FILE: include/asm-x86/page_32.h:84:
+extern unsigned long __phys_addr(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#8727: FILE: include/asm-x86/paravirt.h:127:
+	void (*alloc_ldt)(struct desc_struct *ldt, unsigned entries);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#8728: FILE: include/asm-x86/paravirt.h:128:
+	void (*free_ldt)(struct desc_struct *ldt, unsigned entries);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#8745: FILE: include/asm-x86/paravirt.h:837:
+static inline void paravirt_alloc_ldt(struct desc_struct *ldt, unsigned entries)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#8750: FILE: include/asm-x86/paravirt.h:842:
+static inline void paravirt_free_ldt(struct desc_struct *ldt, unsigned entries)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#8857: FILE: include/asm-x86/smp.h:58:
+	int (*cpu_up)(unsigned cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8906: FILE: include/asm-x86/smp.h:144:
+extern void prefill_possible_map(void);

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'dotraplinkage'
#9020: FILE: include/asm-x86/traps.h:9:
+#define dotraplinkage asmlinkage

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9160: FILE: include/linux/kernel.h:185:
+extern unsigned long long memparse(const char *ptr, char **retptr);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#9251: FILE: include/linux/mmdebug.h:1:
+#ifndef LINUX_MM_DEBUG_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#9257: FILE: include/linux/mmdebug.h:7:
+#define VM_BUG_ON(cond) BUG_ON(cond)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#9263: FILE: include/linux/mmdebug.h:13:
+#define VIRTUAL_BUG_ON(cond) BUG_ON(cond)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#9321: FILE: lib/Kconfig.debug:498:
+config DEBUG_VIRTUAL
+	bool "Debug VM translations"
+	depends on DEBUG_KERNEL && X86
+	help
+	  Enable some costly sanity checks in virtual to page code. This can
+	  catch mistakes with virt_to_page() and friends.
+
+	  If unsure, say N.
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9359: FILE: mm/vmalloc.c:188:
+	VIRTUAL_BUG_ON(!is_vmalloc_addr(vmalloc_addr) &&
+			!is_module_address(addr));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218921.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 193 warnings, 107 checks, 7116 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218921.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
