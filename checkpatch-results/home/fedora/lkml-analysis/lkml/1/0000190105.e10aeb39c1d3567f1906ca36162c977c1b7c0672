WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git sched-core-for-linus

WARNING:TYPO_SPELLING: 'defintion' may be misspelled - perhaps 'definition'?
#64: 
      sched/rt: removed unneeded defintion
                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#138: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#351: FILE: include/linux/sched.h:2224:
+extern void set_tg_uid(struct user_struct *user);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#495: FILE: kernel/sched.c:774:
+static int sched_feat_open(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#497: FILE: kernel/sched.c:776:
+	return single_open(filp, sched_feat_show, NULL);
 	                   ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#616: FILE: kernel/sched.c:1609:
+		BUG_ON(1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#619: FILE: kernel/sched.c:1612:
+		if (busiest < this_rq) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#624: FILE: kernel/sched.c:1617:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#748: FILE: kernel/sched.c:6639:
+	printk(KERN_CONT "span %s level %s\n", str, sd->name);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#748: FILE: kernel/sched.c:6639:
+	printk(KERN_CONT "span %s level %s\n", str, sd->name);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#768: FILE: kernel/sched.c:7297:
+#define SCHED_CPUMASK_DECLARE(v)	struct allmasks *v

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#773: FILE: kernel/sched.c:7302:
+}
+static inline void sched_cpumask_free(struct allmasks *masks)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#781: FILE: kernel/sched.c:7307:
+#define SCHED_CPUMASK_DECLARE(v)	struct allmasks _v, *v = &_v

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#835: FILE: kernel/sched.c:7685:
+int __attribute__((weak)) arch_update_cpu_topology(void)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc_node(sizeof(*cfs_rq)...) over kzalloc_node(sizeof(struct cfs_rq)...)
#903: FILE: kernel/sched.c:8484:
+		cfs_rq = kzalloc_node(sizeof(struct cfs_rq),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc_node(sizeof(*se)...) over kzalloc_node(sizeof(struct sched_entity)...)
#910: FILE: kernel/sched.c:8489:
+		se = kzalloc_node(sizeof(struct sched_entity),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc_node(sizeof(*rt_rq)...) over kzalloc_node(sizeof(struct rt_rq)...)
#936: FILE: kernel/sched.c:8572:
+		rt_rq = kzalloc_node(sizeof(struct rt_rq),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc_node(sizeof(*rt_se)...) over kzalloc_node(sizeof(struct sched_rt_entity)...)
#943: FILE: kernel/sched.c:8577:
+		rt_se = kzalloc_node(sizeof(struct sched_rt_entity),

CHECK:SPACING: No space is necessary after a cast
#1066: FILE: kernel/sched.c:9356:
+		seq_printf(m, "%llu ", (unsigned long long) percpu);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1068: FILE: kernel/sched.c:9358:
+	seq_printf(m, "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: kernel/sched_debug.c:58:
+static void print_cfs_group_stats(struct seq_file *m, int cpu,
+		struct task_group *tg)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1118: FILE: kernel/sched_debug.c:61:
+	struct sched_entity *se = tg->se[cpu];
+	if (!se)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1168: FILE: kernel/sched_debug.c:166:
+		uid_t uid = cfs_rq->tg->uid;
+		SEQ_printf(m, "\ncfs_rq[%d] for UID: %u\n", cpu, uid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1207: FILE: kernel/sched_debug.c:305:
+	SEQ_printf(m, "Sched Debug Version: v0.08, %s %.*s\n",
 		init_utsname()->release,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190105.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 13 checks, 1032 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190105.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
