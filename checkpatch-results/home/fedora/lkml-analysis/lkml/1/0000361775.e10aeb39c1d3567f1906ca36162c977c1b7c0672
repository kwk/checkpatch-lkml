WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#61: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#66: FILE: include/net/9p/srv.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#67: FILE: include/net/9p/srv.h:2:
+ * include/net/9p/srv.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#85: FILE: include/net/9p/srv.h:20:
+ *  51 Franklin Street, Fifth Floor$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#93: FILE: include/net/9p/srv.h:28:
+#define P9SRV_DEBUG_SRV		(1<<16)
                        		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#93: FILE: include/net/9p/srv.h:28:
+#define P9SRV_DEBUG_SRV		(1<<16)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#94: FILE: include/net/9p/srv.h:29:
+#define P9SRV_DEBUG_CONN	(1<<17)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#94: FILE: include/net/9p/srv.h:29:
+#define P9SRV_DEBUG_CONN	(1<<17)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#95: FILE: include/net/9p/srv.h:30:
+#define P9SRV_DEBUG_FID		(1<<18)
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#95: FILE: include/net/9p/srv.h:30:
+#define P9SRV_DEBUG_FID		(1<<18)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#96: FILE: include/net/9p/srv.h:31:
+#define P9SRV_DEBUG_REQ		(1<<19)
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#96: FILE: include/net/9p/srv.h:31:
+#define P9SRV_DEBUG_REQ		(1<<19)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#97: FILE: include/net/9p/srv.h:32:
+#define P9SRV_DEBUG_FCALL	(1<<20)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#97: FILE: include/net/9p/srv.h:32:
+#define P9SRV_DEBUG_FCALL	(1<<20)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#98: FILE: include/net/9p/srv.h:33:
+#define P9SRV_DEBUG_FS		(1<<21)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#98: FILE: include/net/9p/srv.h:33:
+#define P9SRV_DEBUG_FS		(1<<21)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv *' should also have an identifier name
#114: FILE: include/net/9p/srv.h:49:
+	void			(*start)(struct p9srv *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv *' should also have an identifier name
#115: FILE: include/net/9p/srv.h:50:
+	void			(*stop)(struct p9srv *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv *' should also have an identifier name
#116: FILE: include/net/9p/srv.h:51:
+	void			(*destroy)(struct p9srv *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_conn *' should also have an identifier name
#117: FILE: include/net/9p/srv.h:52:
+	void			(*connopen)(struct p9srv_conn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_conn *' should also have an identifier name
#118: FILE: include/net/9p/srv.h:53:
+	void			(*connclose)(struct p9srv_conn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_fid *' should also have an identifier name
#119: FILE: include/net/9p/srv.h:54:
+	void			(*fiddestroy)(struct p9srv_fid *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#120: FILE: include/net/9p/srv.h:55:
+	void			(*reqdestroy)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#123: FILE: include/net/9p/srv.h:58:
+	void			(*attach)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#124: FILE: include/net/9p/srv.h:59:
+	void			(*auth)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#125: FILE: include/net/9p/srv.h:60:
+	int			(*flush)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#126: FILE: include/net/9p/srv.h:61:
+	void			(*walk)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#127: FILE: include/net/9p/srv.h:62:
+	void			(*open)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#128: FILE: include/net/9p/srv.h:63:
+	void			(*create)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#129: FILE: include/net/9p/srv.h:64:
+	void			(*read)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#130: FILE: include/net/9p/srv.h:65:
+	void			(*write)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#131: FILE: include/net/9p/srv.h:66:
+	void			(*clunk)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#132: FILE: include/net/9p/srv.h:67:
+	void			(*remove)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#133: FILE: include/net/9p/srv.h:68:
+	void			(*stat)(struct p9srv_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9srv_req *' should also have an identifier name
#134: FILE: include/net/9p/srv.h:69:
+	void			(*wstat)(struct p9srv_req *);

CHECK:CAMELCASE: Avoid CamelCase: <Reset>
#160: FILE: include/net/9p/srv.h:95:
+	Reset = 1,		/* resetting */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Destroy>
#161: FILE: include/net/9p/srv.h:96:
+	Destroy = 2,		/* destroying */

CHECK:BIT_MACRO: Prefer using the BIT macro
#180: FILE: include/net/9p/srv.h:115:
+#define FID_HTABLE_SIZE		(1 << FID_HTABLE_BITS)

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#186: FILE: include/net/9p/srv.h:121:
+	struct p9_fcall		*rcall;
 	               		 ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <Eunknownfid>
#201: FILE: include/net/9p/srv.h:136:
+extern char *Eunknownfid;

CHECK:CAMELCASE: Avoid CamelCase: <Enomem>
#202: FILE: include/net/9p/srv.h:137:
+extern char *Enomem;

CHECK:CAMELCASE: Avoid CamelCase: <Enoauth>
#203: FILE: include/net/9p/srv.h:138:
+extern char *Enoauth;

CHECK:CAMELCASE: Avoid CamelCase: <Enotimpl>
#204: FILE: include/net/9p/srv.h:139:
+extern char *Enotimpl;

CHECK:CAMELCASE: Avoid CamelCase: <Einuse>
#205: FILE: include/net/9p/srv.h:140:
+extern char *Einuse;

CHECK:CAMELCASE: Avoid CamelCase: <Ebadusefid>
#206: FILE: include/net/9p/srv.h:141:
+extern char *Ebadusefid;

CHECK:CAMELCASE: Avoid CamelCase: <Enotdir>
#207: FILE: include/net/9p/srv.h:142:
+extern char *Enotdir;

CHECK:CAMELCASE: Avoid CamelCase: <Etoomanywnames>
#208: FILE: include/net/9p/srv.h:143:
+extern char *Etoomanywnames;

CHECK:CAMELCASE: Avoid CamelCase: <Eperm>
#209: FILE: include/net/9p/srv.h:144:
+extern char *Eperm;

CHECK:CAMELCASE: Avoid CamelCase: <Etoolarge>
#210: FILE: include/net/9p/srv.h:145:
+extern char *Etoolarge;

CHECK:CAMELCASE: Avoid CamelCase: <Ebadoffset>
#211: FILE: include/net/9p/srv.h:146:
+extern char *Ebadoffset;

CHECK:CAMELCASE: Avoid CamelCase: <Edirchange>
#212: FILE: include/net/9p/srv.h:147:
+extern char *Edirchange;

CHECK:CAMELCASE: Avoid CamelCase: <Enotfound>
#213: FILE: include/net/9p/srv.h:148:
+extern char *Enotfound;

CHECK:CAMELCASE: Avoid CamelCase: <Eopen>
#214: FILE: include/net/9p/srv.h:149:
+extern char *Eopen;

CHECK:CAMELCASE: Avoid CamelCase: <Eexist>
#215: FILE: include/net/9p/srv.h:150:
+extern char *Eexist;

CHECK:CAMELCASE: Avoid CamelCase: <Enotempty>
#216: FILE: include/net/9p/srv.h:151:
+extern char *Enotempty;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#218: FILE: include/net/9p/srv.h:153:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#293: FILE: net/9p/srv.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#294: FILE: net/9p/srv.c:2:
+ * net/9p/srv.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#312: FILE: net/9p/srv.c:20:
+ *  51 Franklin Street, Fifth Floor$

CHECK:CAMELCASE: Avoid CamelCase: <Respond>
#334: FILE: net/9p/srv.c:42:
+	Respond = 1,

CHECK:CAMELCASE: Avoid CamelCase: <Flush>
#335: FILE: net/9p/srv.c:43:
+	Flush,

CHECK:CAMELCASE: Avoid CamelCase: <Flushwork>
#336: FILE: net/9p/srv.c:44:
+	Flushwork,

WARNING:TYPO_SPELLING: 'alread' may be misspelled - perhaps 'already'?
#367: FILE: net/9p/srv.c:75:
+char *Eopen = "file alread exclusively opened";
                     ^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*srv)...) over kmalloc(sizeof(struct p9srv)...)
#443: FILE: net/9p/srv.c:151:
+	srv = kmalloc(sizeof(struct p9srv), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#484: FILE: net/9p/srv.c:192:
+		BUG_ON(!list_empty(&srv->conn_list));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#485: FILE: net/9p/srv.c:193:
+		BUG_ON(!list_empty(&srv->req_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#486: FILE: net/9p/srv.c:194:
+		BUG_ON(!list_empty(&srv->workreq_list));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: net/9p/srv.c:244:
+	if (tc->id < P9_FIRST || tc->id > P9_LAST ||
+		!p9srv_fcall[(tc->id - P9_FIRST)/2] || tc->id%2 == 1) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#536: FILE: net/9p/srv.c:244:
+		!p9srv_fcall[(tc->id - P9_FIRST)/2] || tc->id%2 == 1) {
 		                                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#536: FILE: net/9p/srv.c:244:
+		!p9srv_fcall[(tc->id - P9_FIRST)/2] || tc->id%2 == 1) {
 		                                             ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#537: FILE: net/9p/srv.c:245:
+		!p9srv_fcall[(tc->id - P9_FIRST)/2] || tc->id%2 == 1) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#557: FILE: net/9p/srv.c:265:
+		if (rc != req->rcall)
 		               ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#558: FILE: net/9p/srv.c:266:
+			kfree(req->rcall);
 			           ^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rc"
#569: FILE: net/9p/srv.c:277:
+	if (test_bit(Flush, &req->status) && rc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#573: FILE: net/9p/srv.c:281:
+	if (req->rcall != rc)
 	         ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#574: FILE: net/9p/srv.c:282:
+		kfree(req->rcall);
 		           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#576: FILE: net/9p/srv.c:284:
+	req->rcall = rc;
 	     ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: net/9p/srv.c:286:
+	if (req->tcall->id >= P9_FIRST && req->tcall->id < P9_LAST &&
+			p9srv_fcall_post[(req->tcall->id - P9_FIRST) / 2])

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#593: FILE: net/9p/srv.c:301:
+		p9_set_tag(freq->rcall, freq->tag);
 		                 ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: net/9p/srv.c:311:
+	P9_DPRINTK(P9SRV_DEBUG_REQ, "req %p ename %s ecode %d\n",
+		req, ename, ecode);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#604: FILE: net/9p/srv.c:312:
+	p9_create_rerror(req->rcall, ename, ecode, req->conn->dotu);
 	                      ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#605: FILE: net/9p/srv.c:313:
+	p9srv_respond(req, req->rcall);
 	                        ^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*req)...) over kmalloc(sizeof(struct p9srv_req)...)
#613: FILE: net/9p/srv.c:321:
+	req = kmalloc(sizeof(struct p9srv_req), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#620: FILE: net/9p/srv.c:328:
+	req->rcall = NULL;
 	     ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: net/9p/srv.c:348:
+	P9_DPRINTK(P9SRV_DEBUG_REQ, "req %p count %d\n", req,
+		atomic_read(&req->refcount));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: net/9p/srv.c:358:
+	P9_DPRINTK(P9SRV_DEBUG_REQ, "req %p count %d\n", req,
+		atomic_read(&req->refcount));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: net/9p/srv.c:389:
+	if ((version->len != 8 || memcmp(version->str, "9P2000.u", 8)) &&
+		(version->len != 6 || memcmp(version->str, "9P2000", 6))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#682: FILE: net/9p/srv.c:390:
+		(version->len != 6 || memcmp(version->str, "9P2000", 6))) {
+

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#688: FILE: net/9p/srv.c:396:
+	p9_create_rversion(req->rcall, conn->msize,
 	                        ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: net/9p/srv.c:397:
+	p9_create_rversion(req->rcall, conn->msize,
+		conn->dotu?"9P2000.u":"9P2000");

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#689: FILE: net/9p/srv.c:397:
+		conn->dotu?"9P2000.u":"9P2000");
 		          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#689: FILE: net/9p/srv.c:397:
+		conn->dotu?"9P2000.u":"9P2000");
 		                     ^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#690: FILE: net/9p/srv.c:398:
+	p9srv_respond(req, req->rcall);
 	                        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#760: FILE: net/9p/srv.c:468:
+	if (req->rcall && req->rcall->id == P9_RATTACH) {
 	         ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: net/9p/srv.c:486:
+	P9_DPRINTK(P9SRV_DEBUG_FCALL, "req %p tag %d oldtag %d\n", freq,
+		freq->tag, oldtag);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#779: FILE: net/9p/srv.c:487:
+	p9_create_rflush(freq->rcall);
 	                       ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#785: FILE: net/9p/srv.c:493:
+	/* if the server didn't start working on the request, mark it as
+	   being flushed, but don't call srv->flush */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#785: FILE: net/9p/srv.c:493:
+	   being flushed, but don't call srv->flush */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#790: FILE: net/9p/srv.c:498:
+			list_add_tail(&freq->flush_req_list,
+				&req->flush_req_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#801: FILE: net/9p/srv.c:509:
+			list_add_tail(&freq->flush_req_list,
+				&req->flush_req_list);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#803: FILE: net/9p/srv.c:511:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#813: FILE: net/9p/srv.c:521:
+				/* if srv->flush returns non-zero, the
+				   fs is not planning to respond to the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#816: FILE: net/9p/srv.c:524:
+				   thing */

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#833: FILE: net/9p/srv.c:541:
+	p9_create_rflush(req->rcall);
 	                      ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#834: FILE: net/9p/srv.c:542:
+	p9srv_respond(req, req->rcall);
 	                        ^^^^^

CHECK:SPACING: No space is necessary after a cast
#860: FILE: net/9p/srv.c:568:
+	if (fid->omode != (u16) ~0) {

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#897: FILE: net/9p/srv.c:605:
+	if (req->rcall && req->rcall->id == P9_RWALK && req->newfid) {
 	         ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#898: FILE: net/9p/srv.c:606:
+		rc = req->rcall;
 		          ^^^^^

CHECK:SPACING: No space is necessary after a cast
#927: FILE: net/9p/srv.c:635:
+	if (fid->omode != (u16) ~0) {

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#946: FILE: net/9p/srv.c:654:
+	if (req->rcall && req->rcall->id == P9_ROPEN && req->fid)
 	         ^^^^^

CHECK:SPACING: No space is necessary after a cast
#969: FILE: net/9p/srv.c:677:
+	if (fid->omode != (u16) ~0) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tc->params.tcreate.mode != P9_OREAD'
#980: FILE: net/9p/srv.c:688:
+	if ((perm & P9_DMDIR) && (tc->params.tcreate.mode != P9_OREAD)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#987: FILE: net/9p/srv.c:695:
+		P9_DMSOCKET) && !conn->dotu) {
+

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1001: FILE: net/9p/srv.c:709:
+	if (req->rcall && req->rcall->id == P9_RCREATE && req->fid) {
 	         ^^^^^

CHECK:SPACING: No space is necessary after a cast
#1025: FILE: net/9p/srv.c:733:
+	if ((fid->omode == (u16) ~0) || ((fid->omode & 3) == P9_OWRITE)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1031: FILE: net/9p/srv.c:739:
+	if (fid->type & P9_QTDIR && tc->params.tread.offset != 0 &&
+				tc->params.tread.offset != fid->diroffset) {

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1050: FILE: net/9p/srv.c:758:
+	if (req->fid && req->rcall && req->rcall->id == P9_RREAD &&
 	                     ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1051: FILE: net/9p/srv.c:759:
+	if (req->fid && req->rcall && req->rcall->id == P9_RREAD &&
+					req->fid->type & P9_QTDIR)

CHECK:SPACING: No space is necessary after a cast
#1074: FILE: net/9p/srv.c:782:
+	if ((fid->omode == (u16) ~0) || ((fid->omode & 3) == P9_OREAD)) {

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1117: FILE: net/9p/srv.c:825:
+	if (req->rcall && req->rcall->id == P9_RCLUNK && req->fid)
 	         ^^^^^

CHECK:SPACING: No space is necessary after a cast
#1196: FILE: net/9p/srv.c:904:
+	if ((stat->type != (u16) ~0) || (stat->dev != (u32) ~0) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1197: FILE: net/9p/srv.c:905:
+	if ((stat->type != (u16) ~0) || (stat->dev != (u32) ~0) ||
+				(stat->qid.version != (u32) ~0) ||

CHECK:SPACING: No space is necessary after a cast
#1197: FILE: net/9p/srv.c:905:
+				(stat->qid.version != (u32) ~0) ||

CHECK:SPACING: No space is necessary after a cast
#1198: FILE: net/9p/srv.c:906:
+				(stat->qid.path != (u64) ~0)) {

CHECK:SPACING: No space is necessary after a cast
#1203: FILE: net/9p/srv.c:911:
+	if (stat->mode != (u32) ~0 && ((fid->type & P9_QTDIR &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1204: FILE: net/9p/srv.c:912:
+	if (stat->mode != (u32) ~0 && ((fid->type & P9_QTDIR &&
+		!(stat->mode & P9_DMDIR)) ||

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1206: FILE: net/9p/srv.c:914:
+		(!(fid->type & P9_QTDIR) && (stat->mode & P9_DMDIR)))) {
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fp)...) over kmalloc(sizeof(struct p9srv_fidpool)...)
#1222: FILE: net/9p/srv.c:930:
+	fp = kmalloc(sizeof(struct p9srv_fidpool), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1240: FILE: net/9p/srv.c:948:
+		BUG_ON(!hlist_empty(&fp->hash[i]));

WARNING:TYPO_SPELLING: 'htmp' may be misspelled - perhaps 'html'?
#1249: FILE: net/9p/srv.c:957:
+	struct hlist_node *hn, *htmp;
 	                        ^^^^

WARNING:TYPO_SPELLING: 'htmp' may be misspelled - perhaps 'html'?
#1255: FILE: net/9p/srv.c:963:
+		hlist_for_each_entry_safe(cfid, hn, htmp, &fp->hash[i],
 		                                    ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1256: FILE: net/9p/srv.c:964:
+		hlist_for_each_entry_safe(cfid, hn, htmp, &fp->hash[i],
+								fid_list) {

WARNING:TYPO_SPELLING: 'htmp' may be misspelled - perhaps 'html'?
#1263: FILE: net/9p/srv.c:971:
+	hlist_for_each_entry_safe(cfid, hn, htmp, &hh, fid_list) {
 	                                    ^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*nfid)...) over kmalloc(sizeof(struct p9srv_fid)...)
#1277: FILE: net/9p/srv.c:985:
+	nfid = kmalloc(sizeof(struct p9srv_fid), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1333: FILE: net/9p/srv.c:1041:
+	P9_DPRINTK(P9SRV_DEBUG_FID, "fidpool %p fid %d count %d\n",
+		fid->fidpool, fid->fid, atomic_read(&fid->refcount));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1345: FILE: net/9p/srv.c:1053:
+	P9_DPRINTK(P9SRV_DEBUG_FID, "fidpool %p fid %d count %d \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1346: FILE: net/9p/srv.c:1054:
+	P9_DPRINTK(P9SRV_DEBUG_FID, "fidpool %p fid %d count %d \n",
+		fid->fidpool, fid->fid, atomic_read(&fid->refcount));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1349: FILE: net/9p/srv.c:1057:
+		P9_DPRINTK(P9SRV_DEBUG_FID, "destroy fidpool %p fid %d\n",
+			fid->fidpool, fid->fid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1361: FILE: net/9p/srv.c:1069:
+struct p9srv_conn *p9srv_conn_create(struct p9srv *srv,
+	struct p9_trans *trans)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*conn)...) over kmalloc(sizeof(struct p9srv_conn)...)
#1366: FILE: net/9p/srv.c:1074:
+	conn = kmalloc(sizeof(struct p9srv_conn), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1446: FILE: net/9p/srv.c:1154:
+		if (req->conn == conn && req != vreq &&
+			!test_and_set_bit(Flush, &req->status)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1447: FILE: net/9p/srv.c:1155:
+			!test_and_set_bit(Flush, &req->status)) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wreqs[i]'
#1459: FILE: net/9p/srv.c:1167:
+			if ((*srv->flush)(wreqs[i]))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1477: FILE: net/9p/srv.c:1185:
+	wait_event_interruptible(conn->reset_wqueue,
+		!atomic_read(&conn->reset_wcount));

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1506: FILE: net/9p/srv.c:1214:
+	if ((p9_debug_level&P9_DEBUG_FCALL) == P9_DEBUG_FCALL) {
 	                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1510: FILE: net/9p/srv.c:1218:
+		printk(KERN_NOTICE ">}> %s\n", buf);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1518: FILE: net/9p/srv.c:1226:
+	req->rcall = treq->rc;
 	     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1519: FILE: net/9p/srv.c:1227:
+	if (!req->rcall)
 	          ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1520: FILE: net/9p/srv.c:1228:
+		req->rcall = p9_fcall_alloc(conn->msize);
 		     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1536: FILE: net/9p/srv.c:1244:
+	if (treq->rc != req->rcall) {
 	                     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1538: FILE: net/9p/srv.c:1246:
+		treq->rc = req->rcall;
 		                ^^^^^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1542: FILE: net/9p/srv.c:1250:
+	if ((p9_debug_level&P9_DEBUG_FCALL) == P9_DEBUG_FCALL) {
 	                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1546: FILE: net/9p/srv.c:1254:
+		printk(KERN_NOTICE "<{< %s\n", buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1558: FILE: net/9p/srv.c:1266:
+		printk(KERN_WARNING "9psrv: creating workqueue failed\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361775.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 67 warnings, 85 checks, 1502 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361775.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
