WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
This is a resubmission of the posix timer rework patch, posted a few days ago.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: include/linux/sched.h:433:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#338: FILE: include/linux/sched.h:444:
+};
+/* Alternate field names when used to cache expirations. */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#429: FILE: include/linux/sched.h:1627:
+extern unsigned long long thread_group_sched_runtime(struct task_struct *task);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#441: FILE: include/linux/sched.h:2129:
+extern int thread_group_cputime_alloc_smp(struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#442: FILE: include/linux/sched.h:2130:
+extern void thread_group_cputime_smp(struct task_struct *, struct task_cputime *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#442: FILE: include/linux/sched.h:2130:
+extern void thread_group_cputime_smp(struct task_struct *, struct task_cputime *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_cputime *' should also have an identifier name
#442: FILE: include/linux/sched.h:2130:
+extern void thread_group_cputime_smp(struct task_struct *, struct task_cputime *);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#468: FILE: include/linux/sched.h:2156:
+static inline void thread_group_cputime(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#485: FILE: include/linux/sched.h:2173:
+static inline void thread_group_cputime_account_user(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#508: FILE: include/linux/sched.h:2196:
+static inline void thread_group_cputime_account_system(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#532: FILE: include/linux/sched.h:2220:
+static inline void thread_group_cputime_account_exec_runtime(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: include/linux/sched.h:2252:
+static inline int thread_group_cputime_clone_thread(struct task_struct *curr,
+						     struct task_struct *tsk)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: include/linux/sched.h:2257:
+static inline void thread_group_cputime(struct task_struct *tsk,
+					 struct task_cputime *cputime)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#574: FILE: include/linux/sched.h:2262:
+static inline void thread_group_cputime_account_user(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#581: FILE: include/linux/sched.h:2269:
+static inline void thread_group_cputime_account_system(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#588: FILE: include/linux/sched.h:2276:
+static inline void thread_group_cputime_account_exec_runtime(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: include/linux/sched.h:2286:
+static inline void account_group_user_time(struct task_struct *tsk,
+					    cputime_t cputime)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: include/linux/sched.h:2296:
+static inline void account_group_system_time(struct task_struct *tsk,
+					      cputime_t cputime)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: include/linux/sched.h:2306:
+static inline void account_group_exec_runtime(struct task_struct *tsk,
+					       unsigned long long ns)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#640: FILE: include/linux/time.h:129:
+extern void do_sys_times(struct tms *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tms *' should also have an identifier name
#640: FILE: include/linux/time.h:129:
+extern void do_sys_times(struct tms *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#787: FILE: kernel/fork.c:762:
 
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#844: FILE: kernel/fork.c:830:
+	sig->cutime = sig->cstime = cputime_zero;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cputime"
#1055: FILE: kernel/posix-cpu-timers.c:31:
+	if (cputime == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1085: FILE: kernel/posix-cpu-timers.c:61:
+void thread_group_cputime_smp(

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1100: FILE: kernel/posix-cpu-timers.c:76:
+	times->stime = times->utime = cputime_zero;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1121: FILE: kernel/posix-cpu-timers.c:97:
+            cputime_lt(current->signal->it_prof_expires, cputime)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1121: FILE: kernel/posix-cpu-timers.c:97:
+	if (cputime_eq(current->signal->it_prof_expires, cputime_zero) ||
+            cputime_lt(current->signal->it_prof_expires, cputime)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1121: FILE: kernel/posix-cpu-timers.c:97:
+            cputime_lt(current->signal->it_prof_expires, cputime)) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1538: FILE: kernel/posix-cpu-timers.c:1308:
+static inline int task_cputime_expired(const struct task_cputime *sample,
+					const struct task_cputime *expires)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1564: FILE: kernel/posix-cpu-timers.c:1334:
+static inline int fastpath_timer_check(struct task_struct *tsk,
+					struct signal_struct *sig)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1619: FILE: kernel/posix-cpu-timers.c:1375:
+	if (unlikely(!sig) || !fastpath_timer_check(tsk, sig)) {
+		return;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 6 warnings, 25 checks, 1630 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
