WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#46: FILE: fs/inode.c:1419:
+	printk("WARNING: at %s:%d %s(): Attempted to open a whiteout!\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#47: FILE: fs/inode.c:1420:
+	       __FILE__, __LINE__, __FUNCTION__);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#56: FILE: fs/inode.c:1429:
+static struct file_operations def_wht_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#229: FILE: fs/namei.c:2087:
+	BUG_ON(!S_ISDIR(dentry->d_inode->i_mode));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#253: FILE: fs/namei.c:2111:
+	BUG_ON(dentry->d_parent->d_inode != dir);

CHECK:BRACES: braces {} should be used on all arms of this statement
#284: FILE: fs/namei.c:2142:
+	if (isdir) {
[...]
+	} else if (S_ISDIR(victim->d_inode->i_mode))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'an union' may be misspelled - perhaps 'a union'?
#300: FILE: fs/namei.c:2158:
+ * This is called by the VFS when removing or renaming files on an union mount.
                                                                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#303: FILE: fs/namei.c:2161:
+static int do_whiteout(struct nameidata *nd, struct path *path, int isdir)
                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#348: FILE: fs/namei.c:2206:
+	dentry = __lookup_hash_kern(&name, nd->dentry, nd);
 	                                               ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#392: FILE: fs/namei.c:2250:
+	if (d_mountpoint(dentry))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#394: FILE: fs/namei.c:2252:
+	else {

WARNING:TYPO_SPELLING: 'againt' may be misspelled - perhaps 'against'?
#407: FILE: fs/namei.c:2265:
+	 * this race againt if(inode && S_ISWHT(inode->i_mode)) tests???
 	             ^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: fs/namei.c:2272:
+			struct inode *inode = dentry->d_inode;
+			dentry->d_inode = NULL;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#421: FILE: fs/namei.c:2279:
+				iput(inode);
 				^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#427: FILE: fs/namei.c:2285:
+			printk("WARNING: at %s:%d %s(): couldn't unlink\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#428: FILE: fs/namei.c:2286:
+			       __FILE__, __LINE__, __FUNCTION__);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#508: FILE: fs/namei.c:2366:
+	struct unlink_whiteout_dirent dirent =
+		{ .list = LIST_HEAD_INIT(dirent.list),

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#521: FILE: fs/namei.c:2379:
+		printk(KERN_ERR "%s: dentry_open failed (%ld)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#522: FILE: fs/namei.c:2380:
+		       __FUNCTION__, PTR_ERR(file));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#549: FILE: fs/namei.c:2407:
+		printk(KERN_ERR "%s: readdir failed (%d)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#550: FILE: fs/namei.c:2408:
+		       __FUNCTION__, res);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: fs/namei.c:2412:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#649: FILE: include/linux/fs.h:134:
+#define MS_WHITEOUT	(1<<25)	/* fs does support white-out filetype */
                    	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#649: FILE: include/linux/fs.h:134:
+#define MS_WHITEOUT	(1<<25)	/* fs does support white-out filetype */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#673: FILE: include/linux/fs.h:1094:
+extern int vfs_whiteout(struct inode *, struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#673: FILE: include/linux/fs.h:1094:
+extern int vfs_whiteout(struct inode *, struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#673: FILE: include/linux/fs.h:1094:
+extern int vfs_whiteout(struct inode *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#674: FILE: include/linux/fs.h:1095:
+extern int vfs_unlink_whiteout(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#674: FILE: include/linux/fs.h:1095:
+extern int vfs_unlink_whiteout(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#674: FILE: include/linux/fs.h:1095:
+extern int vfs_unlink_whiteout(struct inode *, struct dentry *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#682: FILE: include/linux/fs.h:1221:
+	int (*whiteout) (struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#682: FILE: include/linux/fs.h:1221:
+	int (*whiteout) (struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#682: FILE: include/linux/fs.h:1221:
+	int (*whiteout) (struct inode *, struct dentry *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000398705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 24 warnings, 8 checks, 619 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000398705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
