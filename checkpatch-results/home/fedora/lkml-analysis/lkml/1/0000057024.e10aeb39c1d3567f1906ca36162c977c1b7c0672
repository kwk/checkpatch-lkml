WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#79: 
change, all callers were just doing "may_open(&nd.path, ...)" anyway.
                                               ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#105: FILE: fs/namei.c:2118:
+int may_open(struct nameidata *nd, int acc_mode, int flag)
                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#117: FILE: fs/namei.c:2194:
+			error = union_copyup(nd, flag /* XXX not used */);
 			                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#126: FILE: fs/namei.c:2241:
+	return may_open(nd, 0, flag & ~O_TRUNC);
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#148: FILE: fs/namei.c:2453:
+	error = may_open(&nd, acc_mode, flag);
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#156: FILE: fs/namei.c:2461:
+		error = union_copyup(&nd, flag /* XXX not used */);
 		                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#173: FILE: fs/nfsctl.c:41:
+		error = may_open(&nd, MAY_READ|MAY_WRITE,
 		                  ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#173: FILE: fs/nfsctl.c:41:
+		error = may_open(&nd, MAY_READ|MAY_WRITE,
 		                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#174: FILE: fs/nfsctl.c:42:
+				 FMODE_READ|FMODE_WRITE);
 				           ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#177: FILE: fs/nfsctl.c:44:
+		error = may_open(&nd, MAY_WRITE, FMODE_WRITE);
 		                  ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#194: FILE: fs/open.c:228:
+	struct inode * inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#246: FILE: fs/open.c:258:
+					       ATTR_MTIME|ATTR_CTIME);
 					                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#249: FILE: fs/open.c:261:
+		error = do_truncate(dentry, length, ATTR_MTIME|ATTR_CTIME, file);
 		                                              ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#358: FILE: include/linux/fs.h:2137:
+extern int may_open(struct nameidata *, int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#358: FILE: include/linux/fs.h:2137:
+extern int may_open(struct nameidata *, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#358: FILE: include/linux/fs.h:2137:
+extern int may_open(struct nameidata *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#358: FILE: include/linux/fs.h:2137:
+extern int may_open(struct nameidata *, int, int);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057024.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 5 checks, 241 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057024.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
