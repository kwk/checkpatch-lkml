WARNING:TYPO_SPELLING: 'analagous' may be misspelled - perhaps 'analogous'?
#369: FILE: Documentation/ksplice.txt:304:
+Ksplice also provides analagous xxx_reverse hooks.
                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#380: FILE: MAINTAINERS:2641:
+P:	Jeff Arnold
+M:	jbarnold@ksplice.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#382: FILE: MAINTAINERS:2643:
+P:	Anders Kaseorg
+M:	andersk@ksplice.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#384: FILE: MAINTAINERS:2645:
+P:	Tim Abbott
+M:	tabbott@ksplice.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'S:' before 'W:'
#386: FILE: MAINTAINERS:2647:
+W:	http://www.ksplice.com
+S:	Supported

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#399: FILE: arch/Kconfig:46:
+config KSPLICE
+	tristate "Ksplice rebootless kernel updates"
+	depends on KALLSYMS_ALL && MODULE_UNLOAD && SYSFS && \
+		   FUNCTION_DATA_SECTIONS
+	depends on HAVE_KSPLICE
+	help
+          Say Y here if you want to be able to apply certain kinds of
+          patches to your running kernel, without rebooting.
+
+          If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#441: FILE: arch/x86/kernel/ksplice-arch.c:1:
+/*  Copyright (C) 2007-2009  Ksplice, Inc.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#453: FILE: arch/x86/kernel/ksplice-arch.c:13:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#454: FILE: arch/x86/kernel/ksplice-arch.c:14:
+ *  Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#534: FILE: arch/x86/kernel/ksplice-arch.c:94:
+	return p > (const void *)tinfo
+	    && p <= (const void *)tinfo + THREAD_SIZE - sizeof(long);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#555: FILE: include/linux/ksplice.h:1:
+#include <linux/types.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#602: FILE: include/linux/ksplice.h:48:
+ * ^I^I^Ireplaced with the relocated value$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#603: FILE: include/linux/ksplice.h:49:
+ * ^I^I^I(based on dst_mask from GNU BFD's reloc_howto_struct)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#605: FILE: include/linux/ksplice.h:51:
+ * ^I^I^Iused to drop unwanted data from the relocation$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#606: FILE: include/linux/ksplice.h:52:
+ * ^I^I^I(based on rightshift from GNU BFD's reloc_howto_struct)$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#639: FILE: include/linux/ksplice.h:85:
+};
+#define KSPLICE_SECTION_TEXT 0x00000001

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#663: FILE: include/linux/ksplice.h:109:
+ * ^I^I^Ioverwritten by the patch$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#716: FILE: include/linux/ksplice.h:162:
+ * ^I^I^I^Imay return nonzero to abort the action$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#718: FILE: include/linux/ksplice.h:164:
+ * ^I^I^I^Imay return nonzero to abort the action$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#773: FILE: include/linux/ksplice.h:219:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#806: FILE: kernel/ksplice.c:1:
+/*  Copyright (C) 2007-2009  Ksplice, Inc.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#818: FILE: kernel/ksplice.c:13:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#819: FILE: kernel/ksplice.c:14:
+ *  Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#856: FILE: kernel/ksplice.c:51:
+typedef int __bitwise__ abort_t;

CHECK:SPACING: No space is necessary after a cast
#858: FILE: kernel/ksplice.c:53:
+#define OK ((__force abort_t) 0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#859: FILE: kernel/ksplice.c:54:
+#define NO_MATCH ((__force abort_t) 1)

CHECK:SPACING: No space is necessary after a cast
#860: FILE: kernel/ksplice.c:55:
+#define CODE_BUSY ((__force abort_t) 2)

CHECK:SPACING: No space is necessary after a cast
#861: FILE: kernel/ksplice.c:56:
+#define MODULE_BUSY ((__force abort_t) 3)

CHECK:SPACING: No space is necessary after a cast
#862: FILE: kernel/ksplice.c:57:
+#define OUT_OF_MEMORY ((__force abort_t) 4)

CHECK:SPACING: No space is necessary after a cast
#863: FILE: kernel/ksplice.c:58:
+#define FAILED_TO_FIND ((__force abort_t) 5)

CHECK:SPACING: No space is necessary after a cast
#864: FILE: kernel/ksplice.c:59:
+#define ALREADY_REVERSED ((__force abort_t) 6)

CHECK:SPACING: No space is necessary after a cast
#865: FILE: kernel/ksplice.c:60:
+#define MISSING_EXPORT ((__force abort_t) 7)

CHECK:SPACING: No space is necessary after a cast
#866: FILE: kernel/ksplice.c:61:
+#define UNEXPECTED_RUNNING_TASK ((__force abort_t) 8)

CHECK:SPACING: No space is necessary after a cast
#867: FILE: kernel/ksplice.c:62:
+#define UNEXPECTED ((__force abort_t) 9)

CHECK:SPACING: No space is necessary after a cast
#868: FILE: kernel/ksplice.c:63:
+#define TARGET_NOT_LOADED ((__force abort_t) 10)

CHECK:SPACING: No space is necessary after a cast
#869: FILE: kernel/ksplice.c:64:
+#define CALL_FAILED ((__force abort_t) 11)

CHECK:SPACING: No space is necessary after a cast
#870: FILE: kernel/ksplice.c:65:
+#define COLD_UPDATE_LOADED ((__force abort_t) 12)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#984: FILE: kernel/ksplice.c:179:
+static void __attribute__((noreturn)) ksplice_deleted(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#988: FILE: kernel/ksplice.c:183:
+static abort_t match_change_sections(struct ksplice_mod_change *change,
+				   bool consider_data_sections);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#1120: FILE: kernel/ksplice.c:315:
+static int __attribute__((format(printf, 2, 3)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'change' may be better as '(change)' to avoid precedence issues
#1122: FILE: kernel/ksplice.c:317:
+#define ksdebug(change, fmt, ...) \
+	_ksdebug(change->update, fmt, ## __VA_ARGS__)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1154: FILE: kernel/ksplice.c:349:
+ * ^I^Ichange and its associated data structures should be populated$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1155: FILE: kernel/ksplice.c:350:
+ * ^I^Ibefore this function is called.  The values of the private$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1156: FILE: kernel/ksplice.c:351:
+ * ^I^Ifields will be ignored.$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1185: FILE: kernel/ksplice.c:380:
+		const struct ksplice_reloc *r = patch_reloc(change, p);
+		if (r == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!r"
#1185: FILE: kernel/ksplice.c:380:
+		if (r == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s"
#1189: FILE: kernel/ksplice.c:384:
+			if (s == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!update"
#1216: FILE: kernel/ksplice.c:411:
+	if (update == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!change->update"
#1243: FILE: kernel/ksplice.c:438:
+	if (change->update == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1276: FILE: kernel/ksplice.c:471:
+	struct update *update;
+	update = kcalloc(1, sizeof(struct update), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!update"
#1277: FILE: kernel/ksplice.c:472:
+	if (update == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!update->name"
#1280: FILE: kernel/ksplice.c:475:
+	if (update->name == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!update->kid"
#1285: FILE: kernel/ksplice.c:480:
+	if (update->kid == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1343: FILE: kernel/ksplice.c:538:
+	int ret = 0;
+	memset(&update->kobj, 0, sizeof(update->kobj));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!change->target"
#1367: FILE: kernel/ksplice.c:562:
+		} else if (change->target == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!change->target"
#1369: FILE: kernel/ksplice.c:564:
+			if (change->target == NULL ||

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1393: FILE: kernel/ksplice.c:588:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1397: FILE: kernel/ksplice.c:592:
+		const struct ksplice_section *sect;
+		for (sect = change->new_code.sections;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rec"
#1401: FILE: kernel/ksplice.c:596:
+			if (rec == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1427: FILE: kernel/ksplice.c:622:
+		struct ksplice_section *s;
+		if (update->stage == STAGE_PREPARING)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s->match_map"
#1432: FILE: kernel/ksplice.c:627:
+			if (s->match_map != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1442: FILE: kernel/ksplice.c:637:
+		printk(KERN_INFO "ksplice: Update %s applied successfully\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1466: FILE: kernel/ksplice.c:661:
+	printk(KERN_INFO "ksplice: Update %s reversed successfully\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1474: FILE: kernel/ksplice.c:669:
+	const struct ksplice_symbol *const *sympa = a, *const *sympb = b;
+	if ((*sympa)->name == NULL && (*sympb)->name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#1474: FILE: kernel/ksplice.c:669:
+	if ((*sympa)->name == NULL && (*sympb)->name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#1474: FILE: kernel/ksplice.c:669:
+	if ((*sympa)->name == NULL && (*sympb)->name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#1476: FILE: kernel/ksplice.c:671:
+	if ((*sympa)->name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#1478: FILE: kernel/ksplice.c:673:
+	if ((*sympb)->name == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1486: FILE: kernel/ksplice.c:681:
+	const struct ksplice_symbol *const *sympa = a, *const *sympb = b;
+	return strcmp((*sympa)->label, (*sympb)->label);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1494: FILE: kernel/ksplice.c:689:
+	const struct ksplice_symbol *sym = *symp;
+	if (sym->name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym->name"
#1494: FILE: kernel/ksplice.c:689:
+	if (sym->name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!symp"
#1507: FILE: kernel/ksplice.c:702:
+	if (symp == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1516: FILE: kernel/ksplice.c:711:
+		struct ksplice_symbol *sym = *symp;
+		if (sym->name == NULL || strcmp(sym_name, sym->name) != 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym->name"
#1516: FILE: kernel/ksplice.c:711:
+		if (sym->name == NULL || strcmp(sym_name, sym->name) != 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1530: FILE: kernel/ksplice.c:725:
+	struct ksplice_lookup *lookup = data;
+	if (owner == lookup->change->new_code_mod ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#1555: FILE: kernel/ksplice.c:750:
+	struct ksplice_symbol *sym;
+	for (sym = change->new_code.symbols; sym < change->new_code.symbols_end;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sym->candidate_vals"
#1557: FILE: kernel/ksplice.c:752:
+		if (sym->candidate_vals != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sym->candidate_vals"
#1566: FILE: kernel/ksplice.c:761:
+		if (sym->candidate_vals != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym_arr"
#1592: FILE: kernel/ksplice.c:787:
+	if (sym_arr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "symp"
#1606: FILE: kernel/ksplice.c:801:
+		if (symp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#1607: FILE: kernel/ksplice.c:802:
+			if ((*symp)->name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "symp"
#1617: FILE: kernel/ksplice.c:812:
+		if (symp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#1618: FILE: kernel/ksplice.c:813:
+			if ((*symp)->name == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1649: FILE: kernel/ksplice.c:844:
+			const char *name = colon + 1;
+			if (colon == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!colon"
#1649: FILE: kernel/ksplice.c:844:
+			if (colon == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ksym"
#1652: FILE: kernel/ksplice.c:847:
+			if (ksym == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#1654: FILE: kernel/ksplice.c:849:
+				ksdebug(change, "Could not find kernel_symbol "
+					"structure for %s\n", name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym->candidate_vals"
#1664: FILE: kernel/ksplice.c:859:
+		if (sym->candidate_vals == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym_arr"
#1671: FILE: kernel/ksplice.c:866:
+	if (sym_arr == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#1731: FILE: kernel/ksplice.c:926:
+		ksdebug(change, "Continuing without some sections; we might "
+			"find them later.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1735: FILE: kernel/ksplice.c:930:
+			ksdebug(change, "Aborted.  Unable to continue without "
+				"the unmatched sections.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1740: FILE: kernel/ksplice.c:935:
+		ksdebug(change, "run-pre: Considering .data sections to find "
+			"the unmatched sections\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1746: FILE: kernel/ksplice.c:941:
+		ksdebug(change, "run-pre: Found all previously unmatched "
+			"sections\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1763: FILE: kernel/ksplice.c:958:
+	abort_t ret;
+	ret = apply_relocs(change, change->new_code.relocs,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1783: FILE: kernel/ksplice.c:978:
+		bool found = false;
+		list_for_each_entry(rec, &change->safety_records, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1792: FILE: kernel/ksplice.c:987:
+			const struct ksplice_reloc *r = patch_reloc(change, p);
+			if (r == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!r"
#1792: FILE: kernel/ksplice.c:987:
+			if (r == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#1794: FILE: kernel/ksplice.c:989:
+				ksdebug(change, "A patch with no reloc at its "
+					"oldaddr has no safety record\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1798: FILE: kernel/ksplice.c:993:
+			ksdebug(change, "No safety record for patch with"
+				"oldaddr %s+%lx\n", r->symbol->label,

WARNING:MISSING_SPACE: break quoted strings at a space character
#1798: FILE: kernel/ksplice.c:993:
+			ksdebug(change, "No safety record for patch with"
+				"oldaddr %s+%lx\n", r->symbol->label,

WARNING:SPLIT_STRING: quoted string split across lines
#1811: FILE: kernel/ksplice.c:1006:
+			ksdebug(change, "Safety record %s is too short for "
+				"patch\n", rec->label);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1827: FILE: kernel/ksplice.c:1022:
+	struct ksplice_mod_change *change;
+	list_for_each_entry(change, &update->changes, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1829: FILE: kernel/ksplice.c:1024:
+		struct ksplice_patch *p;
+		for (p = change->patches; p < change->patches_end; p++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->vaddr"
#1831: FILE: kernel/ksplice.c:1026:
+			if (p->vaddr == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1845: FILE: kernel/ksplice.c:1040:
+	struct ksplice_mod_change *change;
+	list_for_each_entry(change, &update->changes, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1847: FILE: kernel/ksplice.c:1042:
+		struct ksplice_patch *p;
+		for (p = change->patches; p < change->patches_end; p++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pages"
#1871: FILE: kernel/ksplice.c:1066:
+	if (pages == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!__module_address"
#1875: FILE: kernel/ksplice.c:1070:
+		if (__module_address((unsigned long)page_addr) == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pages[i]"
#1881: FILE: kernel/ksplice.c:1076:
+		if (pages[i] == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vaddr"
#1889: FILE: kernel/ksplice.c:1084:
+	if (vaddr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m"
#1908: FILE: kernel/ksplice.c:1103:
+	if (m == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1924: FILE: kernel/ksplice.c:1119:
+	const struct ksplice_reloc *r;
+	for (r = relocs; r < relocs_end; r++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1926: FILE: kernel/ksplice.c:1121:
+		abort_t ret = apply_reloc(change, r);
+		if (ret != OK)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "r->symbol->candidate_vals"
#1978: FILE: kernel/ksplice.c:1173:
+	if (!singular(&vals) || (r->symbol->candidate_vals != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "r->symbol->candidate_vals"
#2035: FILE: kernel/ksplice.c:1230:
+	if (r->symbol->candidate_vals != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2105: FILE: kernel/ksplice.c:1300:
+	const struct ksplice_reloc_howto *howto = r->howto;
+	val >>= howto->rightshift;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#2143: FILE: kernel/ksplice.c:1338:
+	if (entry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry->new_code_mod_name"
#2147: FILE: kernel/ksplice.c:1342:
+	if (entry->new_code_mod_name == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry->target_mod_name"
#2152: FILE: kernel/ksplice.c:1347:
+	if (entry->target_mod_name == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2167: FILE: kernel/ksplice.c:1362:
+	struct ksplice_module_list_entry *entry;
+	list_for_each_entry(entry, &update->ksplice_module_list, update_list) {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#2176: FILE: kernel/ksplice.c:1371:
+static void __attribute__((noreturn)) ksplice_deleted(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2178: FILE: kernel/ksplice.c:1373:
+	printk(KERN_CRIT "Called a kernel function deleted by Ksplice!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2179: FILE: kernel/ksplice.c:1374:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2184: FILE: kernel/ksplice.c:1379:
+static abort_t match_change_sections(struct ksplice_mod_change *change,
+				   bool consider_data_sections)

WARNING:SPLIT_STRING: quoted string split across lines
#2229: FILE: kernel/ksplice.c:1424:
+			ksdebug(change, "run-pre: could not match %s "
+				"section %s\n",

WARNING:SPLIT_STRING: quoted string split across lines
#2236: FILE: kernel/ksplice.c:1431:
+		ksdebug(change, "Aborted.  run-pre: could not match some "
+			"sections.\n");

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#2268: FILE: kernel/ksplice.c:1463:
+		yield();

WARNING:LINE_SPACING: Missing a blank line after declarations
#2281: FILE: kernel/ksplice.c:1476:
+		LIST_HEAD(safety_records);
+		run_addr = list_entry(vals.next, struct candidate_val,

WARNING:SPLIT_STRING: quoted string split across lines
#2289: FILE: kernel/ksplice.c:1484:
+			ksdebug(change, "run-pre: Final run failed for sect "
+				"%s:\n", sect->symbol->label);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2296: FILE: kernel/ksplice.c:1491:
+		struct candidate_val *val;
+		ksdebug(change, "run-pre: multiple candidates for sect %s:\n",

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#2315: FILE: kernel/ksplice.c:1510:
+ * try_addr is the the interface to run-pre matching.  Its primary

WARNING:SPLIT_STRING: quoted string split across lines
#2330: FILE: kernel/ksplice.c:1525:
+		ksdebug(change, "run-pre: unexpected address %lx in new_code "
+			"module %s for sect %s\n", run_addr, run_module->name,

WARNING:SPLIT_STRING: quoted string split across lines
#2336: FILE: kernel/ksplice.c:1531:
+		ksdebug(change, "run-pre: ignoring address %lx in other module "
+			"%s for sect %s\n", run_addr, run_module == NULL ?

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!run_module"
#2336: FILE: kernel/ksplice.c:1531:
+			"%s for sect %s\n", run_addr, run_module == NULL ?

WARNING:SPLIT_STRING: quoted string split across lines
#2349: FILE: kernel/ksplice.c:1544:
+		ksdebug(change, "run-pre: %s sect %s does not match (r_a=%lx "
+			"p_a=%lx s=%lx)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#2412: FILE: kernel/ksplice.c:1607:
+		unsigned long offset = pre - pre_start;
+		ret = lookup_reloc(change, &finger, (unsigned long)pre, &r);

WARNING:SPLIT_STRING: quoted string split across lines
#2419: FILE: kernel/ksplice.c:1614:
+					ksdebug(change, "reloc in sect does "
+						"not match after %lx/%lx "

WARNING:SPLIT_STRING: quoted string split across lines
#2420: FILE: kernel/ksplice.c:1615:
+						"not match after %lx/%lx "
+						"bytes\n", offset, sect->size);

WARNING:SPLIT_STRING: quoted string split across lines
#2452: FILE: kernel/ksplice.c:1647:
+				ksdebug(change, "sect unmapped after %lx/%lx "
+					"bytes\n", offset, sect->size);

WARNING:SPLIT_STRING: quoted string split across lines
#2460: FILE: kernel/ksplice.c:1655:
+				ksdebug(change, "sect does not match after "
+					"%lx/%lx bytes\n", offset, sect->size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2483: FILE: kernel/ksplice.c:1678:
+	int matched = min(runc, prec);
+	for (o = 0; o < matched; o++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2504: FILE: kernel/ksplice.c:1699:
+	const struct ksplice_reloc *r = elt;
+	if (range->address + range->size <= r->blank_addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2518: FILE: kernel/ksplice.c:1713:
+	struct range range = { address, size };
+	r = bsearch((void *)&range, start, end - start, sizeof(*r),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!r"
#2520: FILE: kernel/ksplice.c:1715:
+	if (r == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2532: FILE: kernel/ksplice.c:1727:
+	const struct ksplice_reloc *r;
+	r = find_reloc(change->old_code.relocs, change->old_code.relocs_end,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!r"
#2534: FILE: kernel/ksplice.c:1729:
+	if (r == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#2574: FILE: kernel/ksplice.c:1769:
+		ksdebug(change, "run-pre: reloc skipped at p_a=%lx to %s+%lx "
+			"(altinstr)\n", r->blank_addr, r->symbol->label,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#2620: FILE: kernel/ksplice.c:1815:
+	if (buf == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#2685: FILE: kernel/ksplice.c:1880:
+		ksdebug(change, "run-pre: reloc at r_a=%lx p_a=%lx to %s+%lx: "
+			"found %s = %lx\n", run_addr, r->blank_addr,

WARNING:SPLIT_STRING: quoted string split across lines
#2690: FILE: kernel/ksplice.c:1885:
+		ksdebug(change, "Aborted.  Unexpected canary in run code at %lx"
+			"\n", run_addr);

WARNING:SPLIT_STRING: quoted string split across lines
#2700: FILE: kernel/ksplice.c:1895:
+		ksdebug(change, "run-pre: reloc at r_a=%lx p_a=%lx: labelval "
+			"%s = %lx does not match expected %lx\n", run_addr,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sym_sect"
#2705: FILE: kernel/ksplice.c:1900:
+	if (sym_sect != NULL && (sym_sect->flags & KSPLICE_SECTION_MATCHED) == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2706: FILE: kernel/ksplice.c:1901:
+	if (sym_sect != NULL && (sym_sect->flags & KSPLICE_SECTION_MATCHED) == 0
+	    && (sym_sect->flags & KSPLICE_SECTION_STRING) != 0) {

WARNING:SPLIT_STRING: quoted string split across lines
#2709: FILE: kernel/ksplice.c:1904:
+			ksdebug(change, "Recursively comparing string section "
+				"%s\n", sym_sect->symbol->label);

WARNING:SPLIT_STRING: quoted string split across lines
#2717: FILE: kernel/ksplice.c:1912:
+			ksdebug(change, "Successfully matched string section %s"
+				"\n", sym_sect->symbol->label);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2731: FILE: kernel/ksplice.c:1926:
+	struct ksplice_section *bug_sect = symbol_section(change, r->symbol);
+	if (run_bug == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!run_bug"
#2731: FILE: kernel/ksplice.c:1926:
+	if (run_bug == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bug_sect"
#2733: FILE: kernel/ksplice.c:1928:
+	if (bug_sect == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2747: FILE: kernel/ksplice.c:1942:
+	struct ksplice_section *ex_sect = symbol_section(change, r->symbol);
+	if (run_ent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!run_ent"
#2747: FILE: kernel/ksplice.c:1942:
+	if (run_ent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ex_sect"
#2749: FILE: kernel/ksplice.c:1944:
+	if (ex_sect == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2759: FILE: kernel/ksplice.c:1954:
+	const struct ksplice_section *sect = b;
+	return strcmp(sym->label, sect->symbol->label);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2765: FILE: kernel/ksplice.c:1960:
+	const struct ksplice_section *a = va, *b = vb;
+	return strcmp(a->symbol->label, b->symbol->label);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!r"
#2787: FILE: kernel/ksplice.c:1982:
+	if (r == NULL || r->blank_addr < addr ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ksym->candidate_vals"
#2803: FILE: kernel/ksplice.c:1998:
+	if (ksym->candidate_vals == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "change->target"
#2810: FILE: kernel/ksplice.c:2005:
+	if (strcmp(ksym->label, "cleanup_module") == 0 && change->target != NULL

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2811: FILE: kernel/ksplice.c:2006:
+	if (strcmp(ksym->label, "cleanup_module") == 0 && change->target != NULL
+	    && change->target->exit != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "change->target->exit"
#2811: FILE: kernel/ksplice.c:2006:
+	    && change->target->exit != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ksym->name"
#2818: FILE: kernel/ksplice.c:2013:
+	if (ksym->name != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2820: FILE: kernel/ksplice.c:2015:
+		struct candidate_val *val;
+		list_for_each_entry(val, ksym->candidate_vals, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2847: FILE: kernel/ksplice.c:2042:
+	struct ksplice_patch *p;
+	list_for_each_entry(change, &ichange->update->changes, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2851: FILE: kernel/ksplice.c:2046:
+			const struct ksplice_reloc *r;
+			if (p->type != KSPLICE_PATCH_EXPORT ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!r"
#2857: FILE: kernel/ksplice.c:2052:
+			if (r == NULL ||

WARNING:SIZEOF_ADDRESS: sizeof(& should be avoided
#2870: FILE: kernel/ksplice.c:2065:
+				       sizeof(&sym->value));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "r"
#2871: FILE: kernel/ksplice.c:2066:
+			if (r != NULL &&

WARNING:SPLIT_STRING: quoted string split across lines
#2927: FILE: kernel/ksplice.c:2122:
+		_ksdebug(update, "Aborted %s.  stack check: to-be-%s "
+			 "code is busy.\n", update->kid,

WARNING:SPLIT_STRING: quoted string split across lines
#2931: FILE: kernel/ksplice.c:2126:
+		_ksdebug(update, "Aborted %s.  Ksplice update %s is already "
+			 "reversed.\n", update->kid, update->kid);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2982: FILE: kernel/ksplice.c:2177:
+			struct ksplice_mod_change *change1;
+			list_for_each_entry(change1, &update->changes, list) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "find_module"
#3043: FILE: kernel/ksplice.c:2238:
+		    find_module(entry->target_mod_name) != NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3106: FILE: kernel/ksplice.c:2301:
+	abort_t status = OK, ret;
+	do_each_thread(g, p) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conf"
#3127: FILE: kernel/ksplice.c:2322:
+		if (conf == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conf->process_name"
#3130: FILE: kernel/ksplice.c:2325:
+		if (conf->process_name == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "conf"
#3180: FILE: kernel/ksplice.c:2375:
+	if (conf != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ca"
#3182: FILE: kernel/ksplice.c:2377:
+		if (ca == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3192: FILE: kernel/ksplice.c:2387:
+		unsigned long tramp_addr = follow_trampolines(change, addr);
+		list_for_each_entry(rec, &change->safety_records, list) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ca"
#3205: FILE: kernel/ksplice.c:2400:
+		if (ca != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3219: FILE: kernel/ksplice.c:2414:
+	const char *num;
+	if (!strstarts(t->comm, kstop_prefix))

WARNING:LINE_SPACING: Missing a blank line after declarations
#3228: FILE: kernel/ksplice.c:2423:
+	struct conflict *conf;
+	list_for_each_entry(conf, &update->conflicts, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3239: FILE: kernel/ksplice.c:2434:
+	const struct conflict_addr *ca;
+	list_for_each_entry(conf, &update->conflicts, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3254: FILE: kernel/ksplice.c:2449:
+	mm_segment_t old_fs = get_fs();
+	set_fs(KERNEL_DS);

WARNING:SPLIT_STRING: quoted string split across lines
#3266: FILE: kernel/ksplice.c:2461:
+		ksdebug(change, "Aborted.  Trampoline at %lx has been "
+			"overwritten.\n", p->oldaddr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3275: FILE: kernel/ksplice.c:2470:
+	mm_segment_t old_fs = get_fs();
+	set_fs(KERNEL_DS);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ksym->candidate_vals"
#3287: FILE: kernel/ksplice.c:2482:
+	if (ksym->candidate_vals == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3293: FILE: kernel/ksplice.c:2488:
+		struct labelval *lv = kmalloc(sizeof(*lv), GFP_KERNEL);
+		if (lv == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lv"
#3293: FILE: kernel/ksplice.c:2488:
+		if (lv == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!record_list"
#3316: FILE: kernel/ksplice.c:2511:
+	if (record_list == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3321: FILE: kernel/ksplice.c:2516:
+		const struct ksplice_reloc *r = patch_reloc(change, p);
+		if (strcmp(sect->symbol->label, r->symbol->label) == 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rec"
#3328: FILE: kernel/ksplice.c:2523:
+	if (rec == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rec->label"
#3335: FILE: kernel/ksplice.c:2530:
+	if (rec->label == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#3362: FILE: kernel/ksplice.c:2557:
+	if (new == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3387: FILE: kernel/ksplice.c:2582:
+	struct labelval *lv, *n;
+	list_for_each_entry_safe(lv, n, &change->temp_labelvals, list) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m"
#3441: FILE: kernel/ksplice.c:2636:
+		if (m == NULL || m == change->target ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#3452: FILE: kernel/ksplice.c:2647:
+	struct ksplice_module_list_entry *entry;
+	if (a == b)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3471: FILE: kernel/ksplice.c:2666:
+	int start = 0, end = n - 1, mid, result;
+	if (n == 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3489: FILE: kernel/ksplice.c:2684:
+	const struct ksplice_reloc *ra = a, *rb = b;
+	if (ra->blank_addr > rb->blank_addr)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#3504: FILE: kernel/ksplice.c:2699:
+	    debugfs_create_blob(update->name, S_IFREG | S_IRUSR, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!update->debugfs_dentry"
#3506: FILE: kernel/ksplice.c:2701:
+	if (update->debugfs_dentry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!update->debugfs_dentry"
#3513: FILE: kernel/ksplice.c:2708:
+	if (update->debugfs_dentry == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3540: FILE: kernel/ksplice.c:2735:
+		char *buf = vmalloc(new_size);
+		if (buf == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#3540: FILE: kernel/ksplice.c:2735:
+		if (buf == NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#3562: FILE: kernel/ksplice.c:2757:
+	return;
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3572: FILE: kernel/ksplice.c:2767:
+		printk(KERN_DEBUG "ksplice: ");

WARNING:LINE_SPACING: Missing a blank line after declarations
#3596: FILE: kernel/ksplice.c:2791:
+	struct update *update = container_of(kobj, struct update, kobj);
+	if (attribute->show == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!attribute->show"
#3596: FILE: kernel/ksplice.c:2791:
+	if (attribute->show == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3607: FILE: kernel/ksplice.c:2802:
+	struct update *update = container_of(kobj, struct update, kobj);
+	if (attribute->store == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!attribute->store"
#3607: FILE: kernel/ksplice.c:2802:
+	if (attribute->store == NULL)

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#3612: FILE: kernel/ksplice.c:2807:
+static struct sysfs_ops update_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#3620: FILE: kernel/ksplice.c:2815:
+	struct update *update;
+	update = container_of(kobj, struct update, kobj);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3677: FILE: kernel/ksplice.c:2872:
+	int used = 0;
+	mutex_lock(&module_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3697: FILE: kernel/ksplice.c:2892:
+	struct update *update = updateptr;
+	mutex_lock(&module_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3706: FILE: kernel/ksplice.c:2901:
+	enum stage old_stage;
+	mutex_lock(&module_mutex);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#3734: FILE: kernel/ksplice.c:2929:
+	int ret = strict_strtoul(buf, 10, &l);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#3735: FILE: kernel/ksplice.c:2930:
+	int ret = strict_strtoul(buf, 10, &l);
+	if (ret != 0)

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#3749: FILE: kernel/ksplice.c:2944:
+	int ret = strict_strtoul(buf, 10, &l);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3750: FILE: kernel/ksplice.c:2945:
+	int ret = strict_strtoul(buf, 10, &l);
+	if (ret != 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ksplice_kobj"
#3785: FILE: kernel/ksplice.c:2980:
+	if (ksplice_kobj == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000162847.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 124 warnings, 98 checks, 3697 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000162847.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
