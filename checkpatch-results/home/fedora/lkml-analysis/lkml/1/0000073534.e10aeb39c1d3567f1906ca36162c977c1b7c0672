WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-cleanups-for-linus

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#151: FILE: arch/x86/kernel/cpu/amd.c:90:
+			printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#151: FILE: arch/x86/kernel/cpu/amd.c:90:
+			printk(KERN_CONT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#155: FILE: arch/x86/kernel/cpu/amd.c:93:
+			printk(KERN_CONT "probably OK (after B9730xxxx).\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#155: FILE: arch/x86/kernel/cpu/amd.c:93:
+			printk(KERN_CONT "probably OK (after B9730xxxx).\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#165: FILE: arch/x86/kernel/cpu/amd.c:223:
+			printk(KERN_INFO

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#167: FILE: arch/x86/kernel/cpu/amd.c:225:
+					l, ((l & 0x000fffff)|0x20000000));
 					                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#186: FILE: arch/x86/kernel/cpu/amd.c:499:
+			printk(KERN_DEBUG "tseg: %010llx\n", tseg);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#187: FILE: arch/x86/kernel/cpu/amd.c:500:
+			if ((tseg>>PMD_SHIFT) <
 			         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#190: FILE: arch/x86/kernel/cpu/amd.c:502:
+				((tseg>>PMD_SHIFT) <
 				      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#194: FILE: arch/x86/kernel/cpu/amd.c:504:
+				(tseg>>PMD_SHIFT) >= (1ULL<<(32 - PMD_SHIFT))))
 				     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#194: FILE: arch/x86/kernel/cpu/amd.c:504:
+				(tseg>>PMD_SHIFT) >= (1ULL<<(32 - PMD_SHIFT))))
 				                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#204: FILE: arch/x86/kernel/cpu/amd.c:513:
+static unsigned int __cpuinit amd_size_cache(struct cpuinfo_x86 *c,
+							unsigned int size)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#228: FILE: arch/x86/kernel/cpu/bugs.c:84:
+		printk(KERN_WARNING "Hmm, FPU with FDIV bug.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#237: FILE: arch/x86/kernel/cpu/bugs.c:101:
+	printk(KERN_CONT "OK.\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#237: FILE: arch/x86/kernel/cpu/bugs.c:101:
+	printk(KERN_CONT "OK.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#246: FILE: arch/x86/kernel/cpu/bugs.c:125:
+		printk(KERN_CONT "Buggy.\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#246: FILE: arch/x86/kernel/cpu/bugs.c:125:
+		printk(KERN_CONT "Buggy.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#249: FILE: arch/x86/kernel/cpu/bugs.c:127:
+		printk(KERN_CONT "OK.\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#249: FILE: arch/x86/kernel/cpu/bugs.c:127:
+		printk(KERN_CONT "OK.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#258: FILE: arch/x86/kernel/cpu/bugs.c:159:
+	printk(KERN_INFO "CPU: ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#271: FILE: arch/x86/kernel/cpu/bugs_64.c:18:
+	printk(KERN_INFO "CPU: ");

CHECK:SPACING: No space is necessary after a cast
#311: FILE: arch/x86/kernel/cpu/common.c:985:
+struct desc_ptr idt_descr = { NR_VECTORS * 16 - 1, (unsigned long) idt_table };

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#347: FILE: arch/x86/kernel/cpu/cyrix.c:303:
+			if ((0x30 <= dir1 && dir1 <= 0x6f) ||

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: arch/x86/kernel/cpu/cyrix.c:304:
+			if ((0x30 <= dir1 && dir1 <= 0x6f) ||
+					(0x80 <= dir1 && dir1 <= 0x8f))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#348: FILE: arch/x86/kernel/cpu/cyrix.c:304:
+					(0x80 <= dir1 && dir1 <= 0x8f))

CHECK:CAMELCASE: Avoid CamelCase: <setCx86>
#360: FILE: arch/x86/kernel/cpu/cyrix.c:433:
+			setCx86(CX86_CCR3, (ccr3 & 0x0f) | 0x10);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <setCx86_old>
#362: FILE: arch/x86/kernel/cpu/cyrix.c:435:
+			setCx86_old(CX86_CCR4, getCx86_old(CX86_CCR4) | 0x80);

CHECK:CAMELCASE: Avoid CamelCase: <getCx86_old>
#362: FILE: arch/x86/kernel/cpu/cyrix.c:435:
+			setCx86_old(CX86_CCR4, getCx86_old(CX86_CCR4) | 0x80);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#474: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:35:
+/* All the cache descriptor types we care about (no TLB or
+   trace cache entries) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#474: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:35:
+   trace cache entries) */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#571: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:399:
+					index_msb = get_count_order(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#616: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:492:
+		printk(KERN_INFO "CPU: Trace cache: %dK uops", trace);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#618: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:494:
+		printk(KERN_INFO "CPU: L1 I cache: %dK", l1i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#622: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:497:
+		printk(KERN_CONT ", L1 D cache: %dK\n", l1d);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#622: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:497:
+		printk(KERN_CONT ", L1 D cache: %dK\n", l1d);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#625: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:499:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#625: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:499:
+		printk(KERN_CONT "\n");

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after cacheinfo_cpu_notifier
#746: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:985:
+static struct notifier_block __cpuinitdata cacheinfo_cpu_notifier = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1178: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1194: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:17:
+ * License along with this library; if not, write to the Free$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1195: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:18:
+ * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#1208: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:30:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:POINTER_LOCATION: "foo __initdata		bar" should be "foo __initdata bar"
#1245: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:59:
+static struct res_range __initdata		range[RANGE_NUM];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MISPLACED_INIT: __initdata should be placed after range[RANGE_NUM]
#1245: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:59:
+static struct res_range __initdata		range[RANGE_NUM];

ERROR:POINTER_LOCATION: "foo __initdata				bar" should be "foo __initdata bar"
#1246: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:60:
+static int __initdata				nr_range;

WARNING:MISPLACED_INIT: __initdata should be placed after nr_range
#1246: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:60:
+static int __initdata				nr_range;

ERROR:POINTER_LOCATION: "foo __initdata	bar" should be "foo __initdata bar"
#1248: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:62:
+static struct var_mtrr_range_state __initdata	range_state[RANGE_NUM];

WARNING:MISPLACED_INIT: __initdata should be placed after range_state[RANGE_NUM]
#1248: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:62:
+static struct var_mtrr_range_state __initdata	range_state[RANGE_NUM];

WARNING:MISPLACED_INIT: __initdata should be placed after debug_print
#1250: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:64:
+static int __initdata debug_print;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1251: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:65:
+#define Dprintk(x...) do { if (debug_print) printk(KERN_DEBUG x); } while (0)

CHECK:CAMELCASE: Avoid CamelCase: <Dprintk>
#1251: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:65:
+#define Dprintk(x...) do { if (debug_print) printk(KERN_DEBUG x); } while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1253: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:67:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1332: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:214:
+			printk(BIOS_BUG_MSG, i);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1474: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:453:
+			range0_basek<<10,
 			            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1475: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:454:
+			(range0_basek + state->range_sizek)<<10);
 			                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1515: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:498:
+			range0_basek<<10,
 			            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1516: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:499:
+			(range0_basek + range0_sizek)<<10);
 			                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1531: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:509:
+		Dprintk("range: %016lx - %016lx\n",
+			 range_basek<<10,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1531: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:509:
+			 range_basek<<10,
 			            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1532: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:510:
+			 (range_basek + range_sizek)<<10);
 			                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1545: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:519:
+		Dprintk("hole: %016lx - %016lx\n",
+			 hole_basek<<10,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1545: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:519:
+			 hole_basek<<10,
 			           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1546: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:520:
+			 (hole_basek + hole_sizek)<<10);
 			                          ^

WARNING:TYPO_SPELLING: 'Mininum' may be misspelled - perhaps 'Minimum'?
#1574: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:557:
+/* Mininum size of mtrr block that can take hole: */
    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1784: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:763:
+	pr_cont("num_reg: %d  \tlose cover RAM: %s%ld%c\n",

CHECK:CAMELCASE: Avoid CamelCase: <Tom2Enabled>
#1913: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:942:
+#define Tom2Enabled		(1U << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1913: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:942:
+#define Tom2Enabled		(1U << 21)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <Tom2ForceMemTypeWB>
#1914: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:943:
+#define Tom2ForceMemTypeWB	(1U << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1914: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:943:
+#define Tom2ForceMemTypeWB	(1U << 22)

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#2055: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:1089:
+		pr_warning("WARNING: BIOS bug: CPU MTRRs don't cover all of memory, losing %lluMB of RAM.\n", total_trim_size >> 20);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <getCx86>
#2107: FILE: arch/x86/kernel/cpu/mtrr/cyrix.c:25:
+	((unsigned char *)base)[3] = getCx86(arr);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2137: FILE: arch/x86/kernel/cpu/mtrr/cyrix.c:88:
+ * Returns: the index of the region on success, else -1 on error.
+*/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2299: FILE: arch/x86/kernel/cpu/mtrr/generic.c:1:
+/*

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#2301: FILE: arch/x86/kernel/cpu/mtrr/generic.c:3:
+ * because MTRRs can span upto 40 bits (36bits on most modern x86)
                           ^^^^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cpufeature.h> instead of <asm/cpufeature.h>
#2318: FILE: arch/x86/kernel/cpu/mtrr/generic.c:14:
+#include <asm/cpufeature.h>

CHECK:CAMELCASE: Avoid CamelCase: <MSR_MTRRfix64K_00000>
#2338: FILE: arch/x86/kernel/cpu/mtrr/generic.c:29:
+	{ MSR_MTRRfix64K_00000, 1 }, /* one   64k MTRR  */

CHECK:CAMELCASE: Avoid CamelCase: <MSR_MTRRfix16K_80000>
#2339: FILE: arch/x86/kernel/cpu/mtrr/generic.c:30:
+	{ MSR_MTRRfix16K_80000, 2 }, /* two   16k MTRRs */

CHECK:CAMELCASE: Avoid CamelCase: <MSR_MTRRfix4K_C0000>
#2340: FILE: arch/x86/kernel/cpu/mtrr/generic.c:31:
+	{ MSR_MTRRfix4K_C0000,  8 }, /* eight  4k MTRRs */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2445: FILE: arch/x86/kernel/cpu/mtrr/generic.c:237:
+print_fixed(unsigned base, unsigned step, const mtrr_type *types)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2445: FILE: arch/x86/kernel/cpu/mtrr/generic.c:237:
+print_fixed(unsigned base, unsigned step, const mtrr_type *types)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2514: FILE: arch/x86/kernel/cpu/mtrr/generic.c:303:
+		pr_debug("TOM2: %016llx aka %lldM\n", mtrr_tom2, mtrr_tom2>>20);
 		                                                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2525: FILE: arch/x86/kernel/cpu/mtrr/generic.c:311:
+	unsigned lo, dummy;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2674: FILE: arch/x86/kernel/cpu/mtrr/generic.c:519:
 		(hi & (size_and_mask >> (32 - PAGE_SHIFT)))) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2704: FILE: arch/x86/kernel/cpu/mtrr/generic.c:562:
 	    || ((deftype_lo & 0xc00) >> 10) != mtrr_state.enabled) {
+

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#2727: FILE: arch/x86/kernel/cpu/mtrr/generic.c:580:
+ * are reenabled after post_set() has been called.
        ^^^^^^^^^

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#2890: FILE: arch/x86/kernel/cpu/mtrr/generic.c:734:
+		pr_warning("mtrr: base(0x%lx000) is not aligned on a size(0x%lx000) boundary\n", base, size);

WARNING:SPLIT_STRING: quoted string split across lines
#3199: FILE: arch/x86/kernel/cpu/mtrr/if.c:422:
+		len += seq_printf(seq, "reg%02i: base=0x%06lx000 "
+			"(%5luMB), size=%5lu%cB, count=%d: %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#3247: FILE: arch/x86/kernel/cpu/mtrr/main.c:48:
+#include <asm/processor.h>

WARNING:CONST_STRUCT: struct mtrr_ops should normally be const
#3266: FILE: arch/x86/kernel/cpu/mtrr/main.c:62:
+static struct mtrr_ops *mtrr_ops[X86_VENDOR_NUM];

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct mtrr_ops should normally be const
#3269: FILE: arch/x86/kernel/cpu/mtrr/main.c:64:
+struct mtrr_ops *mtrr_if;

WARNING:CONST_STRUCT: struct mtrr_ops should normally be const
#3275: FILE: arch/x86/kernel/cpu/mtrr/main.c:69:
+void set_mtrr_ops(struct mtrr_ops *ops)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#3289: FILE: arch/x86/kernel/cpu/mtrr/main.c:82:
+	if (dev != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPLIT_STRING: quoted string split across lines
#3654: FILE: arch/x86/kernel/cpu/mtrr/main.c:385:
+			pr_warning("mtrr: 0x%lx000,0x%lx000 overlaps existing"
+				" 0x%lx000,0x%lx000\n", base, size, lbase,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3667: FILE: arch/x86/kernel/cpu/mtrr/main.c:394:
+			pr_warning("mtrr: type mismatch for %lx000,%lx000 old: %s new: %s\n",
+				base, size, mtrr_attrib_to_str(ltype),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3920: FILE: arch/x86/kernel/cpu/mtrr/main.c:615:
+			set_mtrr(i, mtrr_value[i].lbase,
+				    mtrr_value[i].lsize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4090: FILE: arch/x86/kernel/cpu/mtrr/mtrr.h:56:
+extern void set_mtrr_ops(struct mtrr_ops *ops);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct mtrr_ops should normally be const
#4090: FILE: arch/x86/kernel/cpu/mtrr/mtrr.h:56:
+extern void set_mtrr_ops(struct mtrr_ops *ops);

WARNING:CONST_STRUCT: struct mtrr_ops should normally be const
#4094: FILE: arch/x86/kernel/cpu/mtrr/mtrr.h:59:
+extern struct mtrr_ops *mtrr_if;

CHECK:CAMELCASE: Avoid CamelCase: <MSR_MTRRdefType>
#4194: FILE: arch/x86/kernel/cpu/mtrr/state.c:75:
+			mtrr_wrmsr(MSR_MTRRdefType, ctxt->deftype_lo,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4373: FILE: arch/x86/kernel/cpu/perfctr-watchdog.c:666:
+			(ARCH_PERFMON_UNHALTED_CORE_CYCLES_INDEX+1)) ||
 			                                        ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#4400: FILE: arch/x86/kernel/cpu/vmware.c:52:
+	uint64_t tsc_hz;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4401: FILE: arch/x86/kernel/cpu/vmware.c:53:
+	uint32_t eax, ebx, ecx, edx;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4416: FILE: arch/x86/kernel/cpu/vmware.c:61:
+	BUG_ON(tsc_hz >> 32);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn_once([subsystem]dev, ... then dev_warn_once(dev, ... then pr_warn_once(...  to printk_once(KERN_WARNING ...
#4526: FILE: arch/x86/kvm/x86.c:2300:
+	printk_once(KERN_WARNING "kvm: emulating exchange as write\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073534.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 54 warnings, 46 checks, 4115 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073534.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
