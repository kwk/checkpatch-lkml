WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
statment. This allows us to create a 'no-op' fastpath, which can subsequently

WARNING:TYPO_SPELLING: 'statment' may be misspelled - perhaps 'statement'?
#28: 
statment. This allows us to create a 'no-op' fastpath, which can subsequently
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#56: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: arch/x86/include/asm/jump_label.h:1:
+#ifndef _ASM_X86_JUMP_LABEL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#71: FILE: arch/x86/include/asm/jump_label.h:11:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#77: FILE: arch/x86/include/asm/jump_label.h:17:
+#  define JUMP_LABEL_NOP ".byte 0xe9 \n\t .long 0\n\t"

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__jump_strings") over __attribute__((section("__jump_strings")))
#83: FILE: arch/x86/include/asm/jump_label.h:23:
+		__used __attribute__((section("__jump_strings")))  = #tag; \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#86: FILE: arch/x86/include/asm/jump_label.h:26:
+			".pushsection __jump_table,  \"a\" \n\t"	   \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#87: FILE: arch/x86/include/asm/jump_label.h:27:
+			_ASM_PTR "1b, %l[" #label "], %c0 \n\t"		   \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#88: FILE: arch/x86/include/asm/jump_label.h:28:
+			".popsection \n\t"				   \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: arch/x86/kernel/jump_label.c:1:
+#include <linux/jump_label.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#123: FILE: arch/x86/kernel/jump_label.c:9:
+extern struct jump_entry __stop___jump_table[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#130: FILE: arch/x86/kernel/jump_label.c:16:
+	} __attribute__((packed));

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#196: FILE: include/asm-generic/vmlinux.lds.h:214:
+		*(__jump_strings)/* Jump: strings */	\
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#227: FILE: include/linux/jump_label.h:1:
+#ifndef _LINUX_JUMP_LABEL_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: include/linux/jump_label.h:19:
+extern int jump_label_update(const char *name, enum jump_label_type type, void *mod);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#247: FILE: include/linux/jump_label.h:21:
+#define enable_jump_label(name, mod) \
+	jump_label_update(name, JUMP_LABEL_ENABLE, mod);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#250: FILE: include/linux/jump_label.h:24:
+#define disable_jump_label(name, mod) \
+	jump_label_update(name, JUMP_LABEL_DISABLE, mod);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#255: FILE: include/linux/jump_label.h:29:
+#define JUMP_LABEL(tag, label, cond)		\
+	if (unlikely(cond))			\
+		goto label;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#255: FILE: include/linux/jump_label.h:29:
+#define JUMP_LABEL(tag, label, cond)		\
+	if (unlikely(cond))			\
+		goto label;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#255: FILE: include/linux/jump_label.h:29:
+#define JUMP_LABEL(tag, label, cond)		\
+	if (unlikely(cond))			\
+		goto label;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000046107.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 17 warnings, 3 checks, 186 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000046107.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
