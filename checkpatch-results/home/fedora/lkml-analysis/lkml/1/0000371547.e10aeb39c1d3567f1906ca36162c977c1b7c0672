WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
all possible pathnames (whereas AppArmor requires one of possible pathnames).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: security/tomoyo/tomoyo.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#43: FILE: security/tomoyo/tomoyo.c:2:
+ * security/tomoyo/tomoyo.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#149: FILE: security/tomoyo/tomoyo.c:108:
+				struct nameidata *nd)
 				                  ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#155: FILE: security/tomoyo/tomoyo.c:114:
+	if (!nd || !nd->dentry || !nd->mnt)
 	     ^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_EXEC'
#165: FILE: security/tomoyo/tomoyo.c:124:
+	if ((mask == MAY_EXEC) &&
+	    (TMY_SECURITY->flags & TMY_CHECK_READ_FOR_OPEN_EXEC))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_EXEC'
#168: FILE: security/tomoyo/tomoyo.c:127:
+	if ((mask == MAY_EXEC) || (mask == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == 0'
#168: FILE: security/tomoyo/tomoyo.c:127:
+	if ((mask == MAY_EXEC) || (mask == 0))

CHECK:BRACES: braces {} should be used on all arms of this statement
#171: FILE: security/tomoyo/tomoyo.c:130:
+	if (mask == (MAY_READ | MAY_EXEC))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#173: FILE: security/tomoyo/tomoyo.c:132:
+	else {

WARNING:SPACING: space prohibited before semicolon
#197: FILE: security/tomoyo/tomoyo.c:156:
+start: ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#293: FILE: security/tomoyo/tomoyo.c:252:
+start: ;

CHECK:SPACING: No space is necessary after a cast
#364: FILE: security/tomoyo/tomoyo.c:323:
+	if (sock->ops->getname(sock, (struct sockaddr *) addr, &addr_len, 0))

CHECK:SPACING: No space is necessary after a cast
#367: FILE: security/tomoyo/tomoyo.c:326:
+	switch (((struct sockaddr *) addr)->sa_family) {

CHECK:SPACING: No space is necessary after a cast
#372: FILE: security/tomoyo/tomoyo.c:331:
+		in6 = (struct sockaddr_in6 *) addr;

CHECK:SPACING: No space is necessary after a cast
#377: FILE: security/tomoyo/tomoyo.c:336:
+		in = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#378: FILE: security/tomoyo/tomoyo.c:337:
+		error = tmy_network_listen_acl(0, (u8 *) &in->sin_addr,

CHECK:SPACING: No space is necessary after a cast
#390: FILE: security/tomoyo/tomoyo.c:349:
+	unsigned int addr_len = (unsigned int) addr_len0;

CHECK:SPACING: No space is necessary after a cast
#409: FILE: security/tomoyo/tomoyo.c:368:
+		in6 = (struct sockaddr_in6 *) addr;

CHECK:BRACES: Unbalanced braces around else statement
#414: FILE: security/tomoyo/tomoyo.c:373:
+		else {

CHECK:SPACING: No space is necessary after a cast
#427: FILE: security/tomoyo/tomoyo.c:386:
+		in = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#430: FILE: security/tomoyo/tomoyo.c:389:
+							(u8 *) &in->sin_addr,

CHECK:BRACES: Unbalanced braces around else statement
#432: FILE: security/tomoyo/tomoyo.c:391:
+		else {

CHECK:SPACING: No space is necessary after a cast
#436: FILE: security/tomoyo/tomoyo.c:395:
+							(u8 *) &in->sin_addr,

CHECK:SPACING: No space is necessary after a cast
#449: FILE: security/tomoyo/tomoyo.c:408:
+	unsigned int addr_len = (unsigned int) addr_len0;

CHECK:SPACING: No space is necessary after a cast
#468: FILE: security/tomoyo/tomoyo.c:427:
+		in6 = ((struct sockaddr_in6 *) addr);

CHECK:BRACES: Unbalanced braces around else statement
#473: FILE: security/tomoyo/tomoyo.c:432:
+		else {

CHECK:SPACING: No space is necessary after a cast
#486: FILE: security/tomoyo/tomoyo.c:445:
+		in = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#489: FILE: security/tomoyo/tomoyo.c:448:
+						     (u8 *) &in->sin_addr,

CHECK:BRACES: Unbalanced braces around else statement
#491: FILE: security/tomoyo/tomoyo.c:450:
+		else {

CHECK:SPACING: No space is necessary after a cast
#495: FILE: security/tomoyo/tomoyo.c:454:
+						     (u8 *) &in->sin_addr,

CHECK:SPACING: No space is necessary after a cast
#508: FILE: security/tomoyo/tomoyo.c:467:
+	struct sockaddr *addr = (struct sockaddr *) msg->msg_name;

CHECK:SPACING: No space is necessary after a cast
#527: FILE: security/tomoyo/tomoyo.c:486:
+		in6 = (struct sockaddr_in6 *) addr;

CHECK:SPACING: No space is necessary after a cast
#538: FILE: security/tomoyo/tomoyo.c:497:
+		in = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#540: FILE: security/tomoyo/tomoyo.c:499:
+		error = tmy_network_sendmsg_acl(0, type, (u8 *) &in->sin_addr,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#550: FILE: security/tomoyo/tomoyo.c:509:
+			struct nameidata *nd,
 			                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#570: FILE: security/tomoyo/tomoyo.c:529:
+		error = tmy_conceal_mount(nd);
 		                          ^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#605: FILE: security/tomoyo/tomoyo.c:564:
+^I.socket_listen ^I       = tmy_socket_listen,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#607: FILE: security/tomoyo/tomoyo.c:566:
+^I.socket_bind ^I       = tmy_socket_bind,$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#616: FILE: security/tomoyo/tomoyo.c:575:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#621: FILE: security/tomoyo/tomoyo.c:580:
+	printk(KERN_INFO "TOMOYO Linux initialized\n");

CHECK:SPACING: No space is necessary after a cast
#634: FILE: security/tomoyo/tomoyo.c:593:
+	((struct tmy_security *) init_task.security)->domain = &KERNEL_DOMAIN;

CHECK:SPACING: No space is necessary after a cast
#635: FILE: security/tomoyo/tomoyo.c:594:
+	((struct tmy_security *) init_task.security)->prev_domain = NULL;

CHECK:SPACING: No space is necessary after a cast
#636: FILE: security/tomoyo/tomoyo.c:595:
+	((struct tmy_security *) init_task.security)->flags = 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371547.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 32 checks, 600 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371547.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
