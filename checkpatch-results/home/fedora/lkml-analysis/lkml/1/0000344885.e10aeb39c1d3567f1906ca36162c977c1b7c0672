WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#46: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#363: FILE: include/asm-x86/i387.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#378: FILE: include/asm-x86/i387.h:16:
+#include <asm/processor.h>

WARNING:INCLUDE_LINUX: Use #include <linux/user.h> instead of <asm/user.h>
#380: FILE: include/asm-x86/i387.h:18:
+#include <asm/user.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#381: FILE: include/asm-x86/i387.h:19:
+#include <asm/uaccess.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#383: FILE: include/asm-x86/i387.h:21:
+extern void fpu_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#385: FILE: include/asm-x86/i387.h:23:
+extern void mxcsr_feature_mask_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#386: FILE: include/asm-x86/i387.h:24:
+extern void init_fpu(struct task_struct *child);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#421: FILE: include/asm-x86/i387.h:59:
+#if 0 /* See comment in __save_init_fpu() below. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#431: FILE: include/asm-x86/i387.h:69:
+#define X87_FSW_ES (1 << 7)	/* Exception Summary */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#434: FILE: include/asm-x86/i387.h:72:
+/* AMD CPUs don't save/restore FDP/FIP/FOP unless an exception
+   is pending. Clear the x87 state here by setting it to fixed

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#437: FILE: include/asm-x86/i387.h:75:
+   Use the PDA as safe address because it should be already in L1. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#440: FILE: include/asm-x86/i387.h:78:
+	if (unlikely(fx->swd & X87_FSW_ES))
+		 asm volatile("fnclex");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: include/asm-x86/i387.h:81:
+	alternative_input(ASM_NOP8 ASM_NOP2,
+		     "    emms\n"		/* clear stack tags */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#463: FILE: include/asm-x86/i387.h:101:
+#if 0 /* See comment in __fxsave_clear() below. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#477: FILE: include/asm-x86/i387.h:115:
+	/* Using "rex64; fxsave %0" is broken because, if the memory operand
+	   uses any extended registers for addressing, a second REX prefix

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#479: FILE: include/asm-x86/i387.h:117:
+	   is a separate instruction), and hence the 64-bitness is lost. */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#480: FILE: include/asm-x86/i387.h:118:
+#if 0

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#482: FILE: include/asm-x86/i387.h:120:
+	/* Using "fxsaveq %0" would be the ideal choice, but is only supported
+	   starting with gas 2.16. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#482: FILE: include/asm-x86/i387.h:120:
+	   starting with gas 2.16. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#487: FILE: include/asm-x86/i387.h:125:
+	/* Using, as a workaround, the properly prefixed form below isn't
+	   accepted by any binutils version so far released, complaining that

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#489: FILE: include/asm-x86/i387.h:127:
+	   needed for addressing (fix submitted to mainline 2005-11-21). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#494: FILE: include/asm-x86/i387.h:132:
+	/* This, however, we can work around by forcing the compiler to select
+	   an addressing mode that doesn't require extended registers. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#494: FILE: include/asm-x86/i387.h:132:
+	   an addressing mode that doesn't require extended registers. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#518: FILE: include/asm-x86/i387.h:156:
+		printk("save_i387: bad fpstate %p\n", buf);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'save_i387', this function's name, in a string
#518: FILE: include/asm-x86/i387.h:156:
+		printk("save_i387: bad fpstate %p\n", buf);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#525: FILE: include/asm-x86/i387.h:163:
+		if (err) return err;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#562: FILE: include/asm-x86/i387.h:200:
+	alternative_input(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#570: FILE: include/asm-x86/i387.h:208:
+/* We need a safe address that is cheap to find and that is already
+   in L1 during context switch. The best choices are unfortunately

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#571: FILE: include/asm-x86/i387.h:209:
+   different for UP and SMP */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#584: FILE: include/asm-x86/i387.h:222:
+	/* Use more nops than strictly needed in case the compiler
+	   varies code */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#584: FILE: include/asm-x86/i387.h:222:
+	   varies code */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#585: FILE: include/asm-x86/i387.h:223:
+	alternative_input(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#593: FILE: include/asm-x86/i387.h:231:
+	/* AMD K7/K8 CPUs don't save/restore FDP/FIP/FOP unless an exception
+	   is pending.  Clear the x87 state here by setting it to fixed

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#594: FILE: include/asm-x86/i387.h:232:
+	   values. safe_address is a random variable that should be in L1 */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#595: FILE: include/asm-x86/i387.h:233:
+	alternative_input(

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#597: FILE: include/asm-x86/i387.h:235:
+^I^I"emms\n\t"^I  ^I/* clear stack tags */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#598: FILE: include/asm-x86/i387.h:236:
+^I^I"fildl %[addr]", ^I/* set F?P to defined value */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#607: FILE: include/asm-x86/i387.h:245:
+extern int save_i387(struct _fpstate __user *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#608: FILE: include/asm-x86/i387.h:246:
+extern int restore_i387(struct _fpstate __user *buf);

CHECK:BRACES: braces {} should be used on all arms of this statement
#614: FILE: include/asm-x86/i387.h:252:
+	if (task_thread_info(tsk)->status & TS_USEDFPU) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#617: FILE: include/asm-x86/i387.h:255:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#633: FILE: include/asm-x86/i387.h:271:
+	struct thread_info *me = current_thread_info();
+	preempt_disable();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#689: FILE: include/asm-x86/i387.h:327:
+extern int get_fpregs(struct user_i387_struct __user *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#691: FILE: include/asm-x86/i387.h:329:
+extern int set_fpregs(struct task_struct *tsk,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#695: FILE: include/asm-x86/i387.h:333:
+extern int get_fpxregs(struct user_fxsr_struct __user *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#697: FILE: include/asm-x86/i387.h:335:
+extern int set_fpxregs(struct task_struct *tsk,

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#705: FILE: include/asm-x86/i387.h:343:
+	if (cpu_has_fxsr) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#714: FILE: include/asm-x86/i387.h:352:
+	if (cpu_has_fxsr) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#723: FILE: include/asm-x86/i387.h:361:
+	if (cpu_has_xmm) {
[...]
+	} else {
[...]

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344885.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 33 warnings, 16 checks, 369 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344885.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
