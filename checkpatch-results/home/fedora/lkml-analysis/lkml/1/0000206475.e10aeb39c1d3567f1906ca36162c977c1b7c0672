WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
remove dyna_array, and enable sparse_irq by default, use kzalloc_node to get it

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#154: FILE: arch/x86/kernel/io_apic.c:151:
+	BUG_ON(legacy_count > NR_IRQS_LEGACY);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#187: FILE: arch/x86/kernel/io_apic.c:181:
+	printk(KERN_DEBUG "  alloc irq_cfg on cpu %d node %d\n", cpu, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: arch/x86/kernel/io_apic.c:201:
+static void init_copy_irq_2_pin(struct irq_cfg *old_cfg, struct irq_cfg *cfg,
+				 int cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: arch/x86/kernel/io_apic.c:204:
+void arch_init_copy_chip_data(struct irq_desc *old_desc,
+				 struct irq_desc *desc, int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#264: FILE: arch/x86/kernel/io_apic.c:256:
+	printk(KERN_DEBUG "  alloc irq_2_pin on cpu %d node %d\n", cpu, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: arch/x86/kernel/io_apic.c:264:
+static void init_copy_irq_2_pin(struct irq_cfg *old_cfg, struct irq_cfg *cfg,
+				 int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: arch/x86/kernel/io_apic.c:539:
+static void __init replace_pin_at_irq_cpu(struct irq_cfg *cfg, int cpu,
 				      int oldapic, int oldpin,

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#804: FILE: arch/x86/kernel/io_apic.c:3303:
+	dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for MSI/MSI-X\n", irq, irq);

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#911: FILE: arch/x86/kernel/io_apic.c:3635:
+		dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for HT\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: arch/x86/kernel/io_apic.c:3636:
+		dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for HT\n",
+				 irq, irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1133: FILE: drivers/pci/intr_remapping.c:33:
+	printk(KERN_DEBUG "alloc irq_2_iommu on cpu %d node %d\n", cpu, node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1145: FILE: drivers/pci/intr_remapping.c:44:
+	BUG_ON(!desc);

CHECK:CAMELCASE: Avoid CamelCase: <irq_2_iommuX>
#1175: FILE: drivers/pci/intr_remapping.c:74:
+static struct irq_2_iommu irq_2_iommuX[NR_IRQS];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1184: FILE: drivers/pci/intr_remapping.c:83:
+}
+static struct irq_2_iommu *irq_2_iommu_alloc_cpu(unsigned int irq, int cpu)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1381: FILE: include/linux/irq.h:196:
+extern struct irq_desc *irq_to_desc(unsigned int irq);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1382: FILE: include/linux/irq.h:197:
+extern struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1383: FILE: include/linux/irq.h:198:
+extern struct irq_desc *irq_to_desc_alloc(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1384: FILE: include/linux/irq.h:199:
+extern struct irq_desc *move_irq_desc(struct irq_desc *old_desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1385: FILE: include/linux/irq.h:200:
+extern void arch_sparse_irq_init_work(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1386: FILE: include/linux/irq.h:201:
+extern void arch_init_chip_data(struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1387: FILE: include/linux/irq.h:202:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1388: FILE: include/linux/irq.h:203:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,
+					struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1389: FILE: include/linux/irq.h:204:
+extern void arch_free_chip_data(struct irq_desc *desc);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#1398: FILE: include/linux/irq.h:212:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#1398: FILE: include/linux/irq.h:212:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#1400: FILE: include/linux/irq.h:214:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#1400: FILE: include/linux/irq.h:214:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1416: FILE: include/linux/irq.h:229:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irqX' - possible side-effects?
#1416: FILE: include/linux/irq.h:229:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#1416: FILE: include/linux/irq.h:229:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1418: FILE: include/linux/irq.h:231:
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1420: FILE: include/linux/irq.h:233:
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1422: FILE: include/linux/irq.h:235:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irqX' - possible side-effects?
#1422: FILE: include/linux/irq.h:235:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#1422: FILE: include/linux/irq.h:235:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1424: FILE: include/linux/irq.h:237:
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1426: FILE: include/linux/irq.h:239:
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1449: FILE: include/linux/kernel_stat.h:32:
+       unsigned int irqs[NR_IRQS];$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1478: FILE: include/linux/kernel_stat.h:64:
+extern unsigned int kstat_irqs_cpu(unsigned int irq, int cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1601: FILE: kernel/irq/handle.c:86:
+	printk(KERN_DEBUG "  alloc kstat_irqs on cpu %d node %d\n", cpu, node);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1627: FILE: kernel/irq/handle.c:112:
+void __attribute__((weak)) arch_init_chip_data(struct irq_desc *desc, int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1645: FILE: kernel/irq/handle.c:130:
+static void init_copy_one_irq_desc(int irq, struct irq_desc *old_desc,
+		 struct irq_desc *desc, int cpu)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1670: FILE: kernel/irq/handle.c:155:
+#define SPARSEIRQHASH_SIZE          (1UL << SPARSEIRQHASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1677: FILE: kernel/irq/handle.c:162:
+	[0 ... NR_IRQS_LEGACY-1] = {
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1693: FILE: kernel/irq/handle.c:178:
+void __init __attribute__((weak)) arch_sparse_irq_init_work(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1770: FILE: kernel/irq/handle.c:255:
+	printk(KERN_DEBUG "  alloc irq_desc for %d aka %#x on cpu %d node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1771: FILE: kernel/irq/handle.c:256:
+	printk(KERN_DEBUG "  alloc irq_desc for %d aka %#x on cpu %d node %d\n",
+		 irq, irq, cpu, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1797: FILE: kernel/irq/handle.c:282:
+static struct irq_desc *__real_move_irq_desc(struct irq_desc *old_desc,
+						int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1823: FILE: kernel/irq/handle.c:308:
+	printk(KERN_DEBUG "  move irq_desc for %d aka %#x to cpu %d node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1824: FILE: kernel/irq/handle.c:309:
+	printk(KERN_DEBUG "  move irq_desc for %d aka %#x to cpu %d node %d\n",
+		 irq, irq, cpu, node);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1878: FILE: kernel/irq/handle.c:369:
+}
+struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1882: FILE: kernel/irq/handle.c:373:
+}
+struct irq_desc *irq_to_desc_alloc(unsigned int irq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1886: FILE: kernel/irq/handle.c:377:
+}
+struct irq_desc *move_irq_desc(struct irq_desc *old_desc, int cpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1922: FILE: kernel/irq/handle.c:599:
+	struct irq_desc *desc = irq_to_desc(irq);
+	return desc->kstat_irqs[cpu];

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000206475.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 19 warnings, 34 checks, 1827 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000206475.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
