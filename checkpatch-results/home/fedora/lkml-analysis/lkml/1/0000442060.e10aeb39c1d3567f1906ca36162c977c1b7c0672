WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#284: FILE: arch/i386/xen/enlighten.c:1:
+#include <linux/kernel.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#304: FILE: arch/i386/xen/enlighten.c:21:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#307: FILE: arch/i386/xen/enlighten.c:24:
+#include <asm/pgtable.h>

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#313: FILE: arch/i386/xen/enlighten.c:30:
+EXPORT_SYMBOL_GPL(hypercall_page);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#322: FILE: arch/i386/xen/enlighten.c:39:
+extern const char xen_sti_sysexit[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#334: FILE: arch/i386/xen/enlighten.c:51:
+	printk(KERN_INFO "Booting paravirtualized kernel on %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#336: FILE: arch/i386/xen/enlighten.c:53:
+	printk(KERN_INFO "Hypervisor signature: %s\n", xen_start_info->magic);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#342: FILE: arch/i386/xen/enlighten.c:59:
+	unsigned maskedx = ~0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#343: FILE: arch/i386/xen/enlighten.c:60:
+	unsigned maskedx = ~0;
+	if (*eax == 1)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#379: FILE: arch/i386/xen/enlighten.c:96:
+	/* convert to IF type flag
+	   -0 -> 0x00000000

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#395: FILE: arch/i386/xen/enlighten.c:112:
+	if (flags == 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#400: FILE: arch/i386/xen/enlighten.c:117:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: arch/i386/xen/enlighten.c:124:
+	struct vcpu_info *vcpu;
+	preempt_disable();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#430: FILE: arch/i386/xen/enlighten.c:147:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#435: FILE: arch/i386/xen/enlighten.c:152:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#457: FILE: arch/i386/xen/enlighten.c:174:
+static void xen_set_ldt(const void *addr, unsigned entries)

WARNING:LINE_SPACING: Missing a blank line after declarations
#468: FILE: arch/i386/xen/enlighten.c:185:
+		xmaddr_t maddr;
+		maddr = arbitrary_virt_to_machine((unsigned long)addr);

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#479: FILE: arch/i386/xen/enlighten.c:196:
+static void xen_load_gdt(const struct Xgt_desc_struct *dtr)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#487: FILE: arch/i386/xen/enlighten.c:204:
+	BUG_ON(size > 16*PAGE_SIZE);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#487: FILE: arch/i386/xen/enlighten.c:204:
+	BUG_ON(size > 16*PAGE_SIZE);
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#488: FILE: arch/i386/xen/enlighten.c:205:
+	BUG_ON(va & ~PAGE_MASK);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#490: FILE: arch/i386/xen/enlighten.c:207:
+	mcs = xen_mc_entry(sizeof(*frames) * (size/PAGE_SIZE));
 	                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#498: FILE: arch/i386/xen/enlighten.c:215:
+	MULTI_set_gdt(mcs.mc, frames, size/8);
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#507: FILE: arch/i386/xen/enlighten.c:224:
+	xmaddr_t maddr = virt_to_machine(&gdt[GDT_ENTRY_TLS_MIN+i]);
 	                                                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#530: FILE: arch/i386/xen/enlighten.c:247:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#558: FILE: arch/i386/xen/enlighten.c:275:
+/* Set an IDT entry.  If the entry is part of the current IDT, then
+   also update Xen. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#558: FILE: arch/i386/xen/enlighten.c:275:
+   also update Xen. */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#561: FILE: arch/i386/xen/enlighten.c:278:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#578: FILE: arch/i386/xen/enlighten.c:295:
+				BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#583: FILE: arch/i386/xen/enlighten.c:300:
+/* Load a new IDT into Xen.  In principle this can be per-CPU, so we
+   hold a spinlock to protect the static traps[] array (static because

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#584: FILE: arch/i386/xen/enlighten.c:301:
+   it avoids allocation, and saves stack space). */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#591: FILE: arch/i386/xen/enlighten.c:308:
+	unsigned in, out, count;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#596: FILE: arch/i386/xen/enlighten.c:313:
+	BUG_ON(count > 256);

ERROR:SPACING: space required before the open parenthesis '('
#599: FILE: arch/i386/xen/enlighten.c:316:
+	for(in = out = 0; in < count; in++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#609: FILE: arch/i386/xen/enlighten.c:326:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#615: FILE: arch/i386/xen/enlighten.c:332:
+/* Write a GDT descriptor entry.  Ignore LDT descriptors, since
+   they're handled differently. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#615: FILE: arch/i386/xen/enlighten.c:332:
+   they're handled differently. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#630: FILE: arch/i386/xen/enlighten.c:347:
+			BUG();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#633: FILE: arch/i386/xen/enlighten.c:350:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#637: FILE: arch/i386/xen/enlighten.c:354:
+static void xen_load_esp0(struct tss_struct *tss,
+				   struct thread_struct *thread)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#641: FILE: arch/i386/xen/enlighten.c:358:
+			BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#644: FILE: arch/i386/xen/enlighten.c:361:
+		struct multicall_space mcs = xen_mc_entry(0);
+		MULTI_stack_switch(mcs.mc, __KERNEL_DS, thread->esp0);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#648: FILE: arch/i386/xen/enlighten.c:365:
+static void xen_set_iopl_mask(unsigned mask)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#650: FILE: arch/i386/xen/enlighten.c:367:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#676: FILE: arch/i386/xen/enlighten.c:393:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#686: FILE: arch/i386/xen/enlighten.c:403:
+		BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#705: FILE: arch/i386/xen/enlighten.c:422:
+#define xen_pfn_to_cr3(pfn) (((unsigned)(pfn) << 12) | ((unsigned)(pfn) >> 20))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#705: FILE: arch/i386/xen/enlighten.c:422:
+#define xen_pfn_to_cr3(pfn) (((unsigned)(pfn) << 12) | ((unsigned)(pfn) >> 20))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pfn' - possible side-effects?
#705: FILE: arch/i386/xen/enlighten.c:422:
+#define xen_pfn_to_cr3(pfn) (((unsigned)(pfn) << 12) | ((unsigned)(pfn) >> 20))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#706: FILE: arch/i386/xen/enlighten.c:423:
+#define xen_cr3_to_pfn(cr3) (((unsigned)(cr3) >> 12) | ((unsigned)(cr3) << 20))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#706: FILE: arch/i386/xen/enlighten.c:423:
+#define xen_cr3_to_pfn(cr3) (((unsigned)(cr3) >> 12) | ((unsigned)(cr3) << 20))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cr3' - possible side-effects?
#706: FILE: arch/i386/xen/enlighten.c:423:
+#define xen_cr3_to_pfn(cr3) (((unsigned)(cr3) >> 12) | ((unsigned)(cr3) << 20))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#723: FILE: arch/i386/xen/enlighten.c:440:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: arch/i386/xen/enlighten.c:478:
+static void xen_alloc_pd_clone(u32 pfn, u32 clonepfn,
+					u32 start, u32 count)

ERROR:SPACING: space required before the open parenthesis '('
#785: FILE: arch/i386/xen/enlighten.c:502:
+		for(i = 0; i < PTRS_PER_PGD; i++) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#786: FILE: arch/i386/xen/enlighten.c:503:
+			if (pgd_val_ma(xen_pgd[i]) & _PAGE_PRESENT) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#795: FILE: arch/i386/xen/enlighten.c:512:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#826: FILE: arch/i386/xen/enlighten.c:543:
+	} else

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#835: FILE: arch/i386/xen/enlighten.c:552:
+static const struct paravirt_ops xen_paravirt_ops __initdata = {

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#967: FILE: arch/i386/xen/enlighten.c:684:
+	BUG_ON(memcmp(xen_start_info->magic, "xen-3.0", 7) != 0);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#980: FILE: arch/i386/xen/enlighten.c:697:
+	init_pg_tables_end = __pa(pgd) + xen_start_info->nr_pt_frames*PAGE_SIZE;
 	                                                             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1015: FILE: arch/i386/xen/events.c:1:
+#include <linux/linkage.h>

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1039: FILE: arch/i386/xen/events.c:25:
+static DEFINE_PER_CPU(int, virq_to_irq[NR_VIRQS]) = {[0 ... NR_VIRQS-1] = -1};
                                                                     ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1043: FILE: arch/i386/xen/events.c:29:
+struct packed_irq
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1058: FILE: arch/i386/xen/events.c:44:
+	[0 ... NR_EVENT_CHANNELS-1] = -1
 	                        ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1060: FILE: arch/i386/xen/events.c:46:
+};
+static unsigned long cpu_evtchn_mask[NR_CPUS][NR_EVENT_CHANNELS/BITS_PER_LONG];

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1060: FILE: arch/i386/xen/events.c:46:
+static unsigned long cpu_evtchn_mask[NR_CPUS][NR_EVENT_CHANNELS/BITS_PER_LONG];
                                                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1119: FILE: arch/i386/xen/events.c:105:
+	BUG_ON(irq == -1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1151: FILE: arch/i386/xen/events.c:137:
+	struct shared_info *s = HYPERVISOR_shared_info;
+	sync_clear_bit(port, &s->evtchn_pending[0]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1157: FILE: arch/i386/xen/events.c:143:
+	struct shared_info *s = HYPERVISOR_shared_info;
+	sync_set_bit(port, &s->evtchn_pending[0]);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1160: FILE: arch/i386/xen/events.c:146:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1181: FILE: arch/i386/xen/events.c:167:
+	struct shared_info *s = HYPERVISOR_shared_info;
+	sync_set_bit(port, &s->evtchn_mask[0]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1189: FILE: arch/i386/xen/events.c:175:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1269: FILE: arch/i386/xen/events.c:255:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1303: FILE: arch/i386/xen/events.c:289:
+			BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1370: FILE: arch/i386/xen/events.c:356:
+/*
+  Search the CPUs pending events bitmasks.  For each one found, map

WARNING:LINE_SPACING: Missing a blank line after declarations
#1392: FILE: arch/i386/xen/events.c:378:
+		int word_idx = __ffs(pending_words);
+		pending_words &= ~(1UL << word_idx);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1410: FILE: arch/i386/xen/events.c:396:
+static void rebind_irq_to_cpu(unsigned irq, unsigned tcpu)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1410: FILE: arch/i386/xen/events.c:396:
+static void rebind_irq_to_cpu(unsigned irq, unsigned tcpu)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1431: FILE: arch/i386/xen/events.c:417:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1432: FILE: arch/i386/xen/events.c:418:
+static void set_affinity_irq(unsigned irq, cpumask_t dest)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1434: FILE: arch/i386/xen/events.c:420:
+	unsigned tcpu = first_cpu(dest);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1435: FILE: arch/i386/xen/events.c:421:
+	unsigned tcpu = first_cpu(dest);
+	rebind_irq_to_cpu(irq, tcpu);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1506: FILE: arch/i386/xen/features.c:1:
+/******************************************************************************

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1531: FILE: arch/i386/xen/features.c:26:
+		for (j=0; j<32; j++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1531: FILE: arch/i386/xen/features.c:26:
+		for (j=0; j<32; j++)
 		           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1532: FILE: arch/i386/xen/features.c:27:
+			xen_features[i*32+j] = !!(fi.submap & 1<<j);
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1532: FILE: arch/i386/xen/features.c:27:
+			xen_features[i*32+j] = !!(fi.submap & 1<<j);
 			                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1532: FILE: arch/i386/xen/features.c:27:
+			xen_features[i*32+j] = !!(fi.submap & 1<<j);
 			                                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1539: FILE: arch/i386/xen/mmu.c:1:
+#include <asm/bug.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bug.h> instead of <asm/bug.h>
#1539: FILE: arch/i386/xen/mmu.c:1:
+#include <asm/bug.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1541: FILE: arch/i386/xen/mmu.c:3:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#1543: FILE: arch/i386/xen/mmu.c:5:
+#include <asm/mmu_context.h>

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1556: FILE: arch/i386/xen/mmu.c:18:
+	unsigned offset = address & PAGE_MASK;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1558: FILE: arch/i386/xen/mmu.c:20:
+	BUG_ON(pte == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pte"
#1558: FILE: arch/i386/xen/mmu.c:20:
+	BUG_ON(pte == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1569: FILE: arch/i386/xen/mmu.c:31:
+	BUG_ON(pte == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pte"
#1569: FILE: arch/i386/xen/mmu.c:31:
+	BUG_ON(pte == NULL);

ERROR:SPACING: space required before the open parenthesis '('
#1573: FILE: arch/i386/xen/mmu.c:35:
+	if(HYPERVISOR_update_va_mapping(address, ptev, 0))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1574: FILE: arch/i386/xen/mmu.c:36:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1583: FILE: arch/i386/xen/mmu.c:45:
+	BUG_ON(pte == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pte"
#1583: FILE: arch/i386/xen/mmu.c:45:
+	BUG_ON(pte == NULL);

ERROR:SPACING: space required before the open parenthesis '('
#1587: FILE: arch/i386/xen/mmu.c:49:
+	if(HYPERVISOR_update_va_mapping(address, ptev, 0))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1588: FILE: arch/i386/xen/mmu.c:50:
+		BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1591: FILE: arch/i386/xen/mmu.c:53:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1599: FILE: arch/i386/xen/mmu.c:61:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1609: FILE: arch/i386/xen/mmu.c:71:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1620: FILE: arch/i386/xen/mmu.c:82:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1637: FILE: arch/i386/xen/mmu.c:99:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1642: FILE: arch/i386/xen/mmu.c:104:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1647: FILE: arch/i386/xen/mmu.c:109:
+		BUG();

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1675: FILE: arch/i386/xen/mmu.c:137:
+void xen_pte_clear(struct mm_struct *mm, unsigned long addr,pte_t *ptep)
                                                            ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1678: FILE: arch/i386/xen/mmu.c:140:
+	smp_wmb();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1702: FILE: arch/i386/xen/mmu.c:164:
+	unsigned long long ret = pmd.pmd;
+	if (ret)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1710: FILE: arch/i386/xen/mmu.c:172:
+	unsigned long long ret = pgd.pgd;
+	if (ret)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1751: FILE: arch/i386/xen/mmu.c:213:
+	BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1758: FILE: arch/i386/xen/mmu.c:220:
+	unsigned long ret = pgd.pgd;
+	if (ret)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1773: FILE: arch/i386/xen/mmu.c:235:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1786: FILE: arch/i386/xen/mmu.c:248:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1794: FILE: arch/i386/xen/mmu.c:256:
+		BUG();

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1814: FILE: arch/i386/xen/mmu.c:276:
+			pgd_walk_set_prot(pud,flags);
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1822: FILE: arch/i386/xen/mmu.c:284:
+				pgd_walk_set_prot(pmd,flags);
 				                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1829: FILE: arch/i386/xen/mmu.c:291:
+				/* This can get called before mem_map
+				   is set up, so we assume nothing is

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1830: FILE: arch/i386/xen/mmu.c:292:
+				   highmem at that point. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem_map"
#1831: FILE: arch/i386/xen/mmu.c:293:
+				if (mem_map == NULL ||

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1833: FILE: arch/i386/xen/mmu.c:295:
+					pte = pte_offset_kernel(pmd,0);
 					                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1834: FILE: arch/i386/xen/mmu.c:296:
+					pgd_walk_set_prot(pte,flags);
 					                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1844: FILE: arch/i386/xen/mmu.c:306:
+		BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1847: FILE: arch/i386/xen/mmu.c:309:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1849: FILE: arch/i386/xen/mmu.c:311:
+/* This is called just after a mm has been duplicated from its parent,
+   but it has not been used yet.  We need to make sure that its

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1850: FILE: arch/i386/xen/mmu.c:312:
+   pagetable is all read-only, and can be pinned. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1864: FILE: arch/i386/xen/mmu.c:326:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1876: FILE: arch/i386/xen/mmu.c:338:
+		BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1881: FILE: arch/i386/xen/mmu.c:343:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1909: FILE: arch/i386/xen/mmu.c:371:
+		BUG_ON(atomic_read(&mm->mm_count) == 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1920: FILE: arch/i386/xen/mmu.h:1:
+#ifndef _XEN_MMU_H

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pmd_t' should also have an identifier name
#1941: FILE: arch/i386/xen/mmu.h:22:
+unsigned long long xen_pmd_val(pmd_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pgd_t' should also have an identifier name
#1942: FILE: arch/i386/xen/mmu.h:23:
+unsigned long long xen_pgd_val(pgd_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1944: FILE: arch/i386/xen/mmu.h:25:
+pte_t xen_make_pte(unsigned long long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1945: FILE: arch/i386/xen/mmu.h:26:
+pmd_t xen_make_pmd(unsigned long long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1946: FILE: arch/i386/xen/mmu.h:27:
+pgd_t xen_make_pgd(unsigned long long);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1952: FILE: arch/i386/xen/mmu.h:33:
+void xen_pte_clear(struct mm_struct *mm, unsigned long addr,pte_t *ptep);
                                                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1955: FILE: arch/i386/xen/mmu.h:36:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pmd_t' should also have an identifier name
#1958: FILE: arch/i386/xen/mmu.h:39:
+unsigned long xen_pmd_val(pmd_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pgd_t' should also have an identifier name
#1959: FILE: arch/i386/xen/mmu.h:40:
+unsigned long xen_pgd_val(pgd_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1961: FILE: arch/i386/xen/mmu.h:42:
+pte_t xen_make_pte(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1962: FILE: arch/i386/xen/mmu.h:43:
+pmd_t xen_make_pmd(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1963: FILE: arch/i386/xen/mmu.h:44:
+pgd_t xen_make_pgd(unsigned long);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1971: FILE: arch/i386/xen/multicalls.c:1:
+#include <linux/percpu.h>

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1983: FILE: arch/i386/xen/multicalls.c:13:
+	unsigned mcidx, argidx;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1993: FILE: arch/i386/xen/multicalls.c:23:
+	if (b->mcidx) {
[...]
+	} else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1997: FILE: arch/i386/xen/multicalls.c:27:
+			BUG();

ERROR:SPACING: space required before the open parenthesis '('
#1998: FILE: arch/i386/xen/multicalls.c:28:
+		for(i = 0; i < b->mcidx; i++)

CHECK:BRACES: Unbalanced braces around else statement
#2003: FILE: arch/i386/xen/multicalls.c:33:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2004: FILE: arch/i386/xen/multicalls.c:34:
+		BUG_ON(b->argidx != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2008: FILE: arch/i386/xen/multicalls.c:38:
+	BUG_ON(ret);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2015: FILE: arch/i386/xen/multicalls.c:45:
+	unsigned argspace = (args + sizeof(u64) - 1) / sizeof(u64);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2017: FILE: arch/i386/xen/multicalls.c:47:
+	BUG_ON(argspace > MC_ARGS);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2036: FILE: arch/i386/xen/multicalls.h:1:
+#ifndef _XEN_MULTICALLS_H

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2043: FILE: arch/i386/xen/multicalls.h:8:
+struct multicall_space
+{

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2066: FILE: arch/i386/xen/setup.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2086: FILE: arch/i386/xen/setup.c:21:
+extern const char xen_failsafe_callback[];

WARNING:MISPLACED_INIT: __initdata should be placed after init_shared
#2088: FILE: arch/i386/xen/setup.c:23:
+static __initdata struct shared_info init_shared;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:BRACES: braces {} should be used on all arms of this statement
#2117: FILE: arch/i386/xen/setup.c:52:
+	if (need_resched())
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2119: FILE: arch/i386/xen/setup.c:54:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2144: FILE: arch/i386/xen/setup.c:79:
+		printk(KERN_INFO "physdev_op failed %d\n", rc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2148: FILE: arch/i386/xen/setup.c:83:
+		printk(KERN_INFO "ACPI in unprivileged domain disabled\n");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2154: FILE: arch/i386/xen/setup.c:89:
+	       MAX_GUEST_CMDLINE > COMMAND_LINE_SIZE ?

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2163: FILE: arch/i386/xen/time.c:1:
+#include <linux/kernel.h>

WARNING:MEMORY_BARRIER: memory barrier without comment
#2222: FILE: arch/i386/xen/time.c:60:
+		rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#2227: FILE: arch/i386/xen/time.c:65:
+		rmb();

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#2240: FILE: arch/i386/xen/time.c:78:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#2249: FILE: arch/i386/xen/time.c:87:
+#ifdef __i386__

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2250: FILE: arch/i386/xen/time.c:88:
+	__asm__ (

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2259: FILE: arch/i386/xen/time.c:97:
+		: "a" ((u32)delta), "1" ((u32)(delta >> 32)), "2" (mul_frac) );

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2261: FILE: arch/i386/xen/time.c:99:
+	__asm__ (

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2263: FILE: arch/i386/xen/time.c:101:
+		: "=a" (product) : "0" (delta), "d" ((u64)mul_frac) );

WARNING:LINE_SPACING: Missing a blank line after declarations
#2274: FILE: arch/i386/xen/time.c:112:
+	u64 now, delta;
+	rdtscll(now);

WARNING:MEMORY_BARRIER: memory barrier without comment
#2303: FILE: arch/i386/xen/time.c:141:
+		rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#2306: FILE: arch/i386/xen/time.c:144:
+		rmb();

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2338: FILE: arch/i386/xen/time.c:176:
+	.mult = 1<<XEN_SHIFT,		/* time directly in nanoseconds */
 	         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2344: FILE: arch/i386/xen/time.c:182:
+/*
+   Xen clockevent implementation

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2366: FILE: arch/i386/xen/time.c:204:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2368: FILE: arch/i386/xen/time.c:206:
+/*
+  Get a hypervisor absolute time.  In theory we could maintain an

ERROR:SPACING: space required before the open parenthesis '('
#2382: FILE: arch/i386/xen/time.c:220:
+	switch(mode) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2404: FILE: arch/i386/xen/time.c:242:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2407: FILE: arch/i386/xen/time.c:245:
+	/* We may have missed the deadline, but there's no real way of
+	   knowing for sure.  If the event was in the past, then we'll

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2408: FILE: arch/i386/xen/time.c:246:
+	   get an immediate interrupt. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2428: FILE: arch/i386/xen/time.c:266:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#2435: FILE: arch/i386/xen/time.c:273:
+	switch(mode) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2442: FILE: arch/i386/xen/time.c:280:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2449: FILE: arch/i386/xen/time.c:287:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2468: FILE: arch/i386/xen/time.c:306:
+	BUG_ON(ret != 0 && ret != -ETIME);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2512: FILE: arch/i386/xen/time.c:350:
+	printk("installing Xen timer for CPU %d\n", cpu);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2519: FILE: arch/i386/xen/time.c:357:
+				      IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING,
 				                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2519: FILE: arch/i386/xen/time.c:357:
+				      IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING,
 				                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2542: FILE: arch/i386/xen/time.c:380:
+		/* Successfully turned off 100hz tick, so we have the
+		   vcpuop-based timer interface */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2542: FILE: arch/i386/xen/time.c:380:
+		   vcpuop-based timer interface */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2543: FILE: arch/i386/xen/time.c:381:
+		printk(KERN_DEBUG "Xen: using vcpuop timer interface\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2560: FILE: arch/i386/xen/xen-head.S:1:
+/* Xen-specific pieces of head.S, intended to be included in the right

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2585: FILE: arch/i386/xen/xen-head.S:26:
+	ELFNOTE(Xen, XEN_ELFNOTE_FEATURES,       .asciz, "!writable_page_tables|pae_pgdir_above_4gb")

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2598: FILE: arch/i386/xen/xen-ops.h:1:
+#ifndef XEN_OPS_H

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2622: FILE: arch/i386/xen/xen-ops.h:25:
+static inline unsigned xen_get_lazy_mode(void)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2624: FILE: arch/i386/xen/xen-ops.h:27:
+	unsigned ret = get_cpu_var(xen_lazy_mode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2625: FILE: arch/i386/xen/xen-ops.h:28:
+	unsigned ret = get_cpu_var(xen_lazy_mode);
+	put_cpu_var(xen_lazy_mode);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2630: FILE: arch/i386/xen/xen-ops.h:33:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2673: FILE: include/xen/events.h:1:
+#ifndef _XEN_EVENTS_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2699: FILE: include/xen/events.h:27:
+extern void notify_remote_via_irq(int irq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2705: FILE: include/xen/features.h:1:
+/******************************************************************************

ERROR:SPACING: space required before the open parenthesis '('
#2724: FILE: include/xen/features.h:20:
+	switch(flag) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2735: FILE: include/xen/page.h:1:
+#ifndef __XEN_PAGE_H

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2740: FILE: include/xen/page.h:6:
+#include <asm/uaccess.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2746: FILE: include/xen/page.h:12:
+typedef struct xmaddr {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2751: FILE: include/xen/page.h:17:
+typedef struct xpaddr {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2756: FILE: include/xen/page.h:22:
+typedef struct xmaddr {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2761: FILE: include/xen/page.h:27:
+typedef struct xpaddr {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2771: FILE: include/xen/page.h:37:
+#define FOREIGN_FRAME_BIT	(1UL<<31)
                          	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2771: FILE: include/xen/page.h:37:
+#define FOREIGN_FRAME_BIT	(1UL<<31)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2800: FILE: include/xen/page.h:66:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2818: FILE: include/xen/page.h:84:
+	unsigned offset = phys.paddr & ~PAGE_MASK;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2819: FILE: include/xen/page.h:85:
+	unsigned offset = phys.paddr & ~PAGE_MASK;
+	return XMADDR(PFN_PHYS((u64)pfn_to_mfn(PFN_DOWN(phys.paddr))) | offset);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2824: FILE: include/xen/page.h:90:
+	unsigned offset = machine.maddr & ~PAGE_MASK;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2825: FILE: include/xen/page.h:91:
+	unsigned offset = machine.maddr & ~PAGE_MASK;
+	return XPADDR(PFN_PHYS((u64)mfn_to_pfn(PFN_DOWN(machine.maddr))) | offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2852: FILE: include/xen/page.h:118:
+	unsigned long pfn = mfn_to_pfn(mfn);
+	if ((pfn < max_mapnr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn < max_mapnr'
#2852: FILE: include/xen/page.h:118:
+	if ((pfn < max_mapnr)
+	    && !xen_feature(XENFEAT_auto_translated_physmap)
+	    && (phys_to_machine_mapping[pfn] != mfn))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phys_to_machine_mapping[pfn] != mfn'
#2852: FILE: include/xen/page.h:118:
+	if ((pfn < max_mapnr)
+	    && !xen_feature(XENFEAT_auto_translated_physmap)
+	    && (phys_to_machine_mapping[pfn] != mfn))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2853: FILE: include/xen/page.h:119:
+	if ((pfn < max_mapnr)
+	    && !xen_feature(XENFEAT_auto_translated_physmap)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2854: FILE: include/xen/page.h:120:
+	    && !xen_feature(XENFEAT_auto_translated_physmap)
+	    && (phys_to_machine_mapping[pfn] != mfn))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2862: FILE: include/xen/page.h:128:
+		BUG_ON(pfn != mfn && mfn != INVALID_P2M_ENTRY);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_pte' - possible side-effects?
#2874: FILE: include/xen/page.h:140:
+#define pte_mfn(_pte) (((_pte).pte_low >> PAGE_SHIFT) |\
+                       (((_pte).pte_high & 0xfff) << (32-PAGE_SHIFT)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#2875: FILE: include/xen/page.h:141:
+                       (((_pte).pte_high & 0xfff) << (32-PAGE_SHIFT)))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2875: FILE: include/xen/page.h:141:
+                       (((_pte).pte_high & 0xfff) << (32-PAGE_SHIFT)))$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2875: FILE: include/xen/page.h:141:
+                       (((_pte).pte_high & 0xfff) << (32-PAGE_SHIFT)))
                                                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2893: FILE: include/xen/page.h:159:
+}
+#define pmd_val_ma(v) ((v).pmd)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2895: FILE: include/xen/page.h:161:
+#define __pte_ma(x)	((pte_t) { .pte_low=(x), .pte_high=(x)>>32 } )
                    	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2895: FILE: include/xen/page.h:161:
+#define __pte_ma(x)	((pte_t) { .pte_low=(x), .pte_high=(x)>>32 } )
                    	                                  ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2895: FILE: include/xen/page.h:161:
+#define __pte_ma(x)	((pte_t) { .pte_low=(x), .pte_high=(x)>>32 } )
                    	                                      ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2895: FILE: include/xen/page.h:161:
+#define __pte_ma(x)	((pte_t) { .pte_low=(x), .pte_high=(x)>>32 } )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2895: FILE: include/xen/page.h:161:
+#define __pte_ma(x)	((pte_t) { .pte_low=(x), .pte_high=(x)>>32 } )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2896: FILE: include/xen/page.h:162:
+#define __pmd_ma(x)	((pmd_t) { (x) } )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2902: FILE: include/xen/page.h:168:
+#define __pte_ma(x)	((pte_t) { (x) } )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2907: FILE: include/xen/page.h:173:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000442060.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 27 errors, 147 warnings, 68 checks, 2712 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000442060.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
