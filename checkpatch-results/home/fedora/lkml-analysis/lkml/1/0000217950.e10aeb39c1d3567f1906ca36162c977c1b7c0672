WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
(this was all done at 35000 feet so if it's h0rked .. I'll claim lack of oxygen)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#67: FILE: include/linux/workqueue.h:241:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/workqueue.h:244:
+extern void init_async_calls(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/workqueue.h:245:
+extern void end_async_calls(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/workqueue.h:246:
+extern void call_async(int pool_number, int argc, ...);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#82: FILE: include/linux/workqueue.h:256:
+
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#124: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: kernel/asynccall.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#164: FILE: kernel/asynccall.c:36:
+static int async_active = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#172: FILE: kernel/asynccall.c:44:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: kernel/asynccall.c:48:
+^Iasync_func_t_0 ^Ifunc;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#184: FILE: kernel/asynccall.c:56:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#186: FILE: kernel/asynccall.c:58:
+static struct task_struct * thread_pool[ASYNC_MAX_POOL + 1];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#192: FILE: kernel/asynccall.c:64:
+extern int initcall_debug;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#205: FILE: kernel/asynccall.c:77:
+		printk("calling  %pF @ %i\n", item->func,

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#205: FILE: kernel/asynccall.c:77:
+		printk("calling  %pF @ %i\n", item->func,
+			task_pid_nr(current));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: kernel/asynccall.c:78:
+		printk("calling  %pF @ %i\n", item->func,
+			task_pid_nr(current));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#234: FILE: kernel/asynccall.c:106:
+		printk("asynccall %pF returned %d after %Ld msecs\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#234: FILE: kernel/asynccall.c:106:
+		printk("asynccall %pF returned %d after %Ld msecs\n",

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#234: FILE: kernel/asynccall.c:106:
+		printk("asynccall %pF returned %d after %Ld msecs\n",
+			item->func, result,
+			(unsigned long long) delta.tv64 >> 20);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: kernel/asynccall.c:107:
+		printk("asynccall %pF returned %d after %Ld msecs\n",
+			item->func, result,

CHECK:SPACING: No space is necessary after a cast
#236: FILE: kernel/asynccall.c:108:
+			(unsigned long long) delta.tv64 >> 20);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#240: FILE: kernel/asynccall.c:112:
+
+

CHECK:SPACING: No space is necessary after a cast
#243: FILE: kernel/asynccall.c:115:
+	int pool = (unsigned long) data;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: kernel/asynccall.c:145:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#277: FILE: kernel/asynccall.c:149:
+	unsigned long i;
+	spin_lock_init(&pool_lock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#286: FILE: kernel/asynccall.c:158:
+
+

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#293: FILE: kernel/asynccall.c:165:
+		WARN(1, KERN_ERR "Too many arguments to async function! Skipping...\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*item)...) over kmalloc(sizeof(struct async_item)...)
#297: FILE: kernel/asynccall.c:169:
+	item = kmalloc(sizeof(struct async_item), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: kernel/asynccall.c:204:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: kernel/asynccall.c:214:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: kernel/asynccall.c:217:
+^Iwmb(); $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217950.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 12 warnings, 15 checks, 272 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217950.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
