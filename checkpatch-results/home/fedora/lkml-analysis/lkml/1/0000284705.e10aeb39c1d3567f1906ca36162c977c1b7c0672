WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#43: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: fs/ubifs/tnc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#63: FILE: fs/ubifs/tnc.c:16:
+ * this program; if not, write to the Free Software Foundation, Inc., 51$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*old_idx)...) over kmalloc(sizeof(struct ubifs_old_idx)...)
#128: FILE: fs/ubifs/tnc.c:81:
+	old_idx = kmalloc(sizeof(struct ubifs_old_idx), GFP_NOFS);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#138: FILE: fs/ubifs/tnc.c:91:
+		if (lnum < o->lnum)
[...]
+		else if (lnum > o->lnum)
[...]
+		else if (offs < o->offs)
[...]
+		else if (offs > o->offs)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#146: FILE: fs/ubifs/tnc.c:99:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#172: FILE: fs/ubifs/tnc.c:125:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#203: FILE: fs/ubifs/tnc.c:156:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#522: FILE: fs/ubifs/tnc.c:475:
+	if (zbr->len) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#528: FILE: fs/ubifs/tnc.c:481:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zbr->leaf"
#562: FILE: fs/ubifs/tnc.c:515:
+	if (zbr->leaf == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zbr->leaf"
#624: FILE: fs/ubifs/tnc.c:577:
+	ubifs_assert(zbr->leaf == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zbr->leaf"
#656: FILE: fs/ubifs/tnc.c:609:
+	if (zbr->leaf == NULL)

WARNING:REPEATED_WORD: Possible repeated word: 'negative'
#669: FILE: fs/ubifs/tnc.c:622:
+ * success or a negative negative error code in case of failure.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#734: FILE: fs/ubifs/tnc.c:687:
+	uint32_t crc, node_crc;

CHECK:BRACES: braces {} should be used on all arms of this statement
#791: FILE: fs/ubifs/tnc.c:744:
+		if (keys_cmp(c, key, &node_key) == 0) {
[...]
+		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#798: FILE: fs/ubifs/tnc.c:751:
+			if (le64_to_cpu(dent->ch.sqnum) > c->replay_sqnum)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#800: FILE: fs/ubifs/tnc.c:753:
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#807: FILE: fs/ubifs/tnc.c:760:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#861: FILE: fs/ubifs/tnc.c:814:
+	if (err == 0) {
[...]
+	} else if (err < 0)
[...]
+	else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1121: FILE: fs/ubifs/tnc.c:1074:
+	if (err == 0) {
[...]
+	} else if (err < 0)
[...]
+	else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1171: FILE: fs/ubifs/tnc.c:1124:
+	struct ubifs_znode *o_znode = NULL, *znode = *zn;
+	int uninitialized_var(o_n), err, cmp, unsure = 0, nn = *n;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1212: FILE: fs/ubifs/tnc.c:1165:
+			if (err == NOT_ON_MEDIA) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1215: FILE: fs/ubifs/tnc.c:1168:
+			} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "c->zroot.znode"
#1355: FILE: fs/ubifs/tnc.c:1308:
+	ubifs_assert(c->zroot.znode != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "znode"
#1356: FILE: fs/ubifs/tnc.c:1309:
+	ubifs_assert(znode != NULL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1359: FILE: fs/ubifs/tnc.c:1312:
+		c->bottom_up_buf = kmalloc(c->zroot.znode->level * sizeof(int),
+					   GFP_NOFS);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#1396: FILE: fs/ubifs/tnc.c:1349:
+		if (unlikely(IS_ERR(znode)) || !p)

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1512: FILE: fs/ubifs/tnc.c:1465:
+	 * if we changed the the leftmost key of the parent znode, the garbage

CHECK:BRACES: Unbalanced braces around else statement
#1896: FILE: fs/ubifs/tnc.c:1849:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2123: FILE: fs/ubifs/tnc.c:2076:
+	if (!found) {
[...]
+	} else if (found == 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2140: FILE: fs/ubifs/tnc.c:2093:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 44)
#2203: FILE: fs/ubifs/tnc.c:2156:
+				if (znode->cnext || !ubifs_zn_dirty(znode)) {
+					    znode = dirty_cow_bottom_up(c,

WARNING:TABSTOP: Statements should start on a tabstop
#2206: FILE: fs/ubifs/tnc.c:2159:
+					    if (IS_ERR(znode)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (44, 52)
#2206: FILE: fs/ubifs/tnc.c:2159:
+					    if (IS_ERR(znode)) {
+						    err = PTR_ERR(znode);

WARNING:TABSTOP: Statements should start on a tabstop
#2208: FILE: fs/ubifs/tnc.c:2161:
+						    goto out_unlock;

WARNING:TABSTOP: Statements should start on a tabstop
#2209: FILE: fs/ubifs/tnc.c:2162:
+					    }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 28)
#2275: FILE: fs/ubifs/tnc.c:2228:
+		if (znode->cnext || !ubifs_zn_dirty(znode)) {
+			    znode = dirty_cow_bottom_up(c, znode);

WARNING:TABSTOP: Statements should start on a tabstop
#2277: FILE: fs/ubifs/tnc.c:2230:
+			    if (IS_ERR(znode)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (28, 36)
#2277: FILE: fs/ubifs/tnc.c:2230:
+			    if (IS_ERR(znode)) {
+				    err = PTR_ERR(znode);

WARNING:TABSTOP: Statements should start on a tabstop
#2279: FILE: fs/ubifs/tnc.c:2232:
+				    goto out_unlock;

WARNING:TABSTOP: Statements should start on a tabstop
#2280: FILE: fs/ubifs/tnc.c:2233:
+			    }

CHECK:BRACES: braces {} should be used on all arms of this statement
#2368: FILE: fs/ubifs/tnc.c:2321:
+		if (znode->cnext) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2372: FILE: fs/ubifs/tnc.c:2325:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!znode->parent"
#2390: FILE: fs/ubifs/tnc.c:2343:
+	if (znode->parent == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2413: FILE: fs/ubifs/tnc.c:2366:
+			ubifs_assert(!test_bit(OBSOLETE_ZNODE,
+				     &zp->flags));

CHECK:BRACES: braces {} should be used on all arms of this statement
#2417: FILE: fs/ubifs/tnc.c:2370:
+			if (zp->cnext) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2421: FILE: fs/ubifs/tnc.c:2374:
+			} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 36)
#2489: FILE: fs/ubifs/tnc.c:2442:
+			if (znode->cnext || !ubifs_zn_dirty(znode)) {
+				    znode = dirty_cow_bottom_up(c, znode);

WARNING:TABSTOP: Statements should start on a tabstop
#2491: FILE: fs/ubifs/tnc.c:2444:
+				    if (IS_ERR(znode)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (36, 44)
#2491: FILE: fs/ubifs/tnc.c:2444:
+				    if (IS_ERR(znode)) {
+					    err = PTR_ERR(znode);

WARNING:TABSTOP: Statements should start on a tabstop
#2493: FILE: fs/ubifs/tnc.c:2446:
+					    goto out_unlock;

WARNING:TABSTOP: Statements should start on a tabstop
#2494: FILE: fs/ubifs/tnc.c:2447:
+				    }

CHECK:BRACES: braces {} should be used on all arms of this statement
#2550: FILE: fs/ubifs/tnc.c:2503:
+		if (err)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2552: FILE: fs/ubifs/tnc.c:2505:
+		else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 28)
#2568: FILE: fs/ubifs/tnc.c:2521:
+		if (znode->cnext || !ubifs_zn_dirty(znode)) {
+			    znode = dirty_cow_bottom_up(c, znode);

WARNING:TABSTOP: Statements should start on a tabstop
#2570: FILE: fs/ubifs/tnc.c:2523:
+			    if (IS_ERR(znode)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (28, 36)
#2570: FILE: fs/ubifs/tnc.c:2523:
+			    if (IS_ERR(znode)) {
+				    err = PTR_ERR(znode);

WARNING:TABSTOP: Statements should start on a tabstop
#2572: FILE: fs/ubifs/tnc.c:2525:
+				    goto out_unlock;

WARNING:TABSTOP: Statements should start on a tabstop
#2573: FILE: fs/ubifs/tnc.c:2526:
+			    }

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cnext"
#2777: FILE: fs/ubifs/tnc.c:2730:
+	} while (cnext != NULL && cnext != c->cnext);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2964: FILE: fs/ubifs/tnc.c:2917:
+		if (n)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2966: FILE: fs/ubifs/tnc.c:2919:
+		else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!znode"
#2968: FILE: fs/ubifs/tnc.c:2921:
+			if (znode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!znode"
#2990: FILE: fs/ubifs/tnc.c:2943:
+			if (znode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!znode"
#3030: FILE: fs/ubifs/tnc.c:2983:
+	if (znode == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#3127: FILE: fs/ubifs/tnc.c:3080:
+	if (is_idx) {
[...]
+	} else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3138: FILE: fs/ubifs/tnc.c:3091:
+			BUG_ON(err != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Unbalanced braces around else statement
#3139: FILE: fs/ubifs/tnc.c:3092:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#3225: FILE: fs/ubifs/tnc.c:3178:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000284705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 28 warnings, 41 checks, 3240 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000284705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
