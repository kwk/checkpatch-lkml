WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: security/tomoyo/net.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#49: FILE: security/tomoyo/net.c:2:
+ * security/tomoyo/net.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: No space is necessary after a cast
#86: FILE: security/tomoyo/net.c:39:
+			       (const struct in6_addr *) address);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#87: FILE: security/tomoyo/net.c:40:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#89: FILE: security/tomoyo/net.c:42:
+		u32 ip = *address;
+		tmy_sncatprintf(buf, len - 1, NIPQUAD_FMT, NIPQUAD(ip));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#111: FILE: security/tomoyo/net.c:64:
+	int i = block_size;
+	if (!addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#123: FILE: security/tomoyo/net.c:76:
+		struct addr_list *p = list;
+		ptr = tmy_alloc_element(sizeof(*ptr));

CHECK:BRACES: braces {} should be used on all arms of this statement
#126: FILE: security/tomoyo/net.c:79:
+		if (p) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#130: FILE: security/tomoyo/net.c:83:
+		} else

CHECK:SPACING: No space is necessary after a cast
#159: FILE: security/tomoyo/net.c:112:
+	const u32 min_ip = ntohl(*(u32 *) min_address);

CHECK:SPACING: No space is necessary after a cast
#160: FILE: security/tomoyo/net.c:113:
+	const u32 max_ip = ntohl(*(u32 *) max_address);

WARNING:LINE_SPACING: Missing a blank line after declarations
#163: FILE: security/tomoyo/net.c:116:
+	const struct in6_addr *saved_max_address = NULL;
+	if (is_ipv6) {

CHECK:SPACING: No space is necessary after a cast
#165: FILE: security/tomoyo/net.c:118:
+			tmy_save_ipv6_address((struct in6_addr *) min_address);

CHECK:SPACING: No space is necessary after a cast
#167: FILE: security/tomoyo/net.c:120:
+			tmy_save_ipv6_address((struct in6_addr *) max_address);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#172: FILE: security/tomoyo/net.c:125:
+	if (!tmy_correct_path(group_name, 0, 0, 0, __FUNCTION__) ||

WARNING:SPACING: space prohibited before semicolon
#237: FILE: security/tomoyo/net.c:190:
+out: ;

WARNING:SPACING: space prohibited before semicolon
#289: FILE: security/tomoyo/net.c:242:
+ok: ;

WARNING:TYPO_SPELLING: 'dum' may be misspelled - perhaps 'dumb'?
#313: FILE: security/tomoyo/net.c:266:
+			const u8 dum[4] = { 0, 0, 0, 0 };
 			         ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dum' may be misspelled - perhaps 'dumb'?
#314: FILE: security/tomoyo/net.c:267:
+			tmy_add_address_group_entry(name, 0, dum, dum, 0);
 			                                     ^^^

WARNING:TYPO_SPELLING: 'dum' may be misspelled - perhaps 'dumb'?
#314: FILE: security/tomoyo/net.c:267:
+			tmy_add_address_group_entry(name, 0, dum, dum, 0);
 			                                          ^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: security/tomoyo/net.c:267:
+			const u8 dum[4] = { 0, 0, 0, 0 };
+			tmy_add_address_group_entry(name, 0, dum, dum, 0);

WARNING:TYPO_SPELLING: 'dum' may be misspelled - perhaps 'dumb'?
#315: FILE: security/tomoyo/net.c:268:
+			tmy_add_address_group_entry(name, 0, dum, dum, 1);
 			                                     ^^^

WARNING:TYPO_SPELLING: 'dum' may be misspelled - perhaps 'dumb'?
#315: FILE: security/tomoyo/net.c:268:
+			tmy_add_address_group_entry(name, 0, dum, dum, 1);
 			                                          ^^^

CHECK:SPACING: No space is necessary after a cast
#327: FILE: security/tomoyo/net.c:280:
+	const u32 ip = ntohl(*(u32 *) address);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#334: FILE: security/tomoyo/net.c:287:
+		if (member->is_ipv6) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#341: FILE: security/tomoyo/net.c:294:
+		} else {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#347: FILE: security/tomoyo/net.c:300:
+
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: security/tomoyo/net.c:307:
+static int tmy_read_address_group(struct io_buffer *head,
+			       struct address_group_entry *group,

WARNING:LINE_SPACING: Missing a blank line after declarations
#358: FILE: security/tomoyo/net.c:311:
+	char buf[128];
+	if (!member)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#362: FILE: security/tomoyo/net.c:315:
+	if (member->is_ipv6) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#377: FILE: security/tomoyo/net.c:330:
+	} else {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#405: FILE: security/tomoyo/net.c:358:
+	struct list_head *mpos;
+	list_for_each_cookie(gpos, head->read_var1, &address_group_list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: security/tomoyo/net.c:360:
+		struct address_group_entry *group;
+		group = list_entry(gpos, struct address_group_entry, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#411: FILE: security/tomoyo/net.c:364:
+			struct address_group_member *member;
+			member = list_entry(mpos, struct address_group_member,

WARNING:LINE_SPACING: Missing a blank line after declarations
#449: FILE: security/tomoyo/net.c:402:
+	const char *keyword = "unknown";
+	switch (operation) {

CHECK:SPACING: No space is necessary after a cast
#514: FILE: security/tomoyo/net.c:467:
+	const u32 min_ip = ntohl(*(u32 *) min_address);

CHECK:SPACING: No space is necessary after a cast
#515: FILE: security/tomoyo/net.c:468:
+	const u32 max_ip = ntohl(*(u32 *) max_address);

WARNING:LINE_SPACING: Missing a blank line after declarations
#518: FILE: security/tomoyo/net.c:471:
+	const struct in6_addr *saved_max_address = NULL;
+	if (!domain)

CHECK:SPACING: No space is necessary after a cast
#523: FILE: security/tomoyo/net.c:476:
+			tmy_save_ipv6_address((struct in6_addr *) min_address);

CHECK:SPACING: No space is necessary after a cast
#525: FILE: security/tomoyo/net.c:478:
+			tmy_save_ipv6_address((struct in6_addr *) max_address);

CHECK:BRACES: braces {} should be used on all arms of this statement
#562: FILE: security/tomoyo/net.c:515:
+	if (record_type == TMY_TYPE_ADDRESS_GROUP)
[...]
+	else if (record_type == TMY_TYPE_IPv4) {
[...]
+	} else {
[...]

WARNING:SPACING: space prohibited before semicolon
#576: FILE: security/tomoyo/net.c:529:
+remove: ;

WARNING:SPACING: space prohibited before semicolon
#595: FILE: security/tomoyo/net.c:548:
+ok: ;

CHECK:SPACING: No space is necessary after a cast
#614: FILE: security/tomoyo/net.c:567:
+	const u32 ip = ntohl(*(u32 *) address);

WARNING:LINE_SPACING: Missing a blank line after declarations
#622: FILE: security/tomoyo/net.c:575:
+		struct net_acl *acl;
+		acl = container_of(ptr, struct net_acl, head);

WARNING:LINE_SPACING: Missing a blank line after declarations
#662: FILE: security/tomoyo/net.c:615:
+			char buf[64];
+			tmy_print_ipv6(buf, sizeof(buf),

CHECK:SPACING: No space is necessary after a cast
#663: FILE: security/tomoyo/net.c:616:
+				       (const struct in6_addr *) address);

WARNING:SPLIT_STRING: quoted string split across lines
#669: FILE: security/tomoyo/net.c:622:
+			tmy_audit("TOMOYO-%s: %s to %u.%u.%u.%u %u denied for "
+				  "%s\n", tmy_getmsg(is_enforce), keyword,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#675: FILE: security/tomoyo/net.c:628:
+	if (is_enforce) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#677: FILE: security/tomoyo/net.c:630:
+		if (is_ipv6) {
+

CHECK:SPACING: No space is necessary after a cast
#681: FILE: security/tomoyo/net.c:634:
+				       (const struct in6_addr *) address);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#687: FILE: security/tomoyo/net.c:640:
+
+		}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#694: FILE: security/tomoyo/net.c:647:
+
+	}

CHECK:BRACES: braces {} should be used on all arms of this statement
#751: FILE: security/tomoyo/net.c:704:
+	if (strncmp(cp1, "bind ", 5) == 0) {
[...]
+	} else if (strncmp(cp1, "connect ", 8) == 0) {
[...]
+	} else if (sock_type == SOCK_STREAM &&
[...]
+	else if (sock_type == SOCK_STREAM &&
[...]
+	else
[...]

WARNING:SPACING: space prohibited before semicolon
#833: FILE: security/tomoyo/net.c:786:
+ok: ;

WARNING:SPACING: space prohibited before semicolon
#838: FILE: security/tomoyo/net.c:791:
+out: ;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000339088.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 28 warnings, 28 checks, 934 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000339088.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
