WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
  git://git.kernel.org/pub/scm/linux/kernel/git/mszeredi/vfs.git vfs-cleanups

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: fs/afs/internal.h:606:
+extern int afs_permission(struct dentry *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#158: FILE: fs/afs/internal.h:606:
+extern int afs_permission(struct dentry *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#158: FILE: fs/afs/internal.h:606:
+extern int afs_permission(struct dentry *, int);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#308: FILE: fs/exec.c:119:
+	error = path_permission(&nd.path, MAY_READ | MAY_EXEC);
 	                         ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#317: FILE: fs/exec.c:667:
+			int err = path_permission(&nd.path, MAY_EXEC);
 			                           ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: fs/ext2/acl.h:61:
+extern int ext2_permission(struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#346: FILE: fs/ext2/acl.h:61:
+extern int ext2_permission(struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#346: FILE: fs/ext2/acl.h:61:
+extern int ext2_permission(struct dentry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#375: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission(struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#375: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission(struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#375: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission(struct dentry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#404: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission(struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#404: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission(struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#404: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission(struct dentry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#729: FILE: fs/jffs2/acl.h:31:
+extern int jffs2_permission(struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#729: FILE: fs/jffs2/acl.h:31:
+extern int jffs2_permission(struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#729: FILE: fs/jffs2/acl.h:31:
+extern int jffs2_permission(struct dentry *, int);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#795: FILE: fs/namei.c:244:
+	    !(inode->i_mode & S_IXUGO))

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1005: FILE: fs/namei.c:1589:
+		      int mode,	struct nameidata *nd)
 		               	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1018: FILE: fs/namei.c:1617:
+		error = vfs_create(dir_path->dentry, dentry, mode, nd);
 		                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1045: FILE: fs/namei.c:1720:
+	error = vfs_create(dir, path->dentry, mode, nd);
 	                                            ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1292: FILE: fs/nfs/dir.c:1952:
+			if (nfs_server_capable(inode, NFS_CAP_ATOMIC_OPEN) &&
+					(mask & PERM_OP_MASK) == PERM_OP_OPEN)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1366: FILE: fs/nfsd/vfs.c:1949:
+	err = path_permission(&path, acc & (MAY_READ|MAY_WRITE|MAY_EXEC));
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1366: FILE: fs/nfsd/vfs.c:1949:
+	err = path_permission(&path, acc & (MAY_READ|MAY_WRITE|MAY_EXEC));
 	                                                      ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1414: FILE: fs/open.c:270:
+	error = path_permission(&nd.path, MAY_WRITE);
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1423: FILE: fs/open.c:470:
+	res = __user_walk_fd(dfd, filename, LOOKUP_FOLLOW, &nd);
 	                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1428: FILE: fs/open.c:474:
+	res = path_permission(&nd.path, mode | PERM_OP_ACCESS);
 	                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1438: FILE: fs/open.c:512:
+	error = __user_walk(filename, LOOKUP_FOLLOW | LOOKUP_DIRECTORY, &nd);
 	                                                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1443: FILE: fs/open.c:516:
+	error = path_permission(&nd.path, MAY_EXEC | PERM_OP_CHDIR);
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1461: FILE: fs/open.c:563:
+	error = path_permission(&nd.path, MAY_EXEC);
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1587: FILE: fs/utimes.c:144:
+			error = path_permission(&nd.path, MAY_WRITE);
 			                         ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1618: FILE: fs/xattr.c:73:
+vfs_setxattr(struct path *path, const char *name, const void *value,
 		size_t size, int flags)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1733: FILE: include/linux/fs.h:1136:
+extern int path_permission(struct path *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct path *' should also have an identifier name
#1733: FILE: include/linux/fs.h:1136:
+extern int path_permission(struct path *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1733: FILE: include/linux/fs.h:1136:
+extern int path_permission(struct path *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1742: FILE: include/linux/fs.h:1277:
+	int (*permission) (struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1742: FILE: include/linux/fs.h:1277:
+	int (*permission) (struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1742: FILE: include/linux/fs.h:1277:
+	int (*permission) (struct dentry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1753: FILE: include/linux/fs.h:1773:
+extern int check_execute(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1753: FILE: include/linux/fs.h:1773:
+extern int check_execute(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1753: FILE: include/linux/fs.h:1773:
+extern int check_execute(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1779: FILE: include/linux/nfs_fs.h:325:
+extern int nfs_permission(struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1779: FILE: include/linux/nfs_fs.h:325:
+extern int nfs_permission(struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1779: FILE: include/linux/nfs_fs.h:325:
+extern int nfs_permission(struct dentry *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1813: FILE: include/linux/security.h:1372:
+	int (*inode_permission) (struct inode *inode, int mask);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1905: FILE: net/unix/af_unix.c:716:
+		err = path_permission(&nd.path, MAY_WRITE);
 		                       ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1918: FILE: security/dummy.c:348:
+static int dummy_inode_permission (struct inode *inode, int mask)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000276755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 36 warnings, 12 checks, 1502 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000276755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
