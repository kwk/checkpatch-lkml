WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
    This patch allows drm to populate an agpgart structure with pages of its own.

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: drivers/char/agp/agp.h:117:
+        int (*agp_type_to_mask_type) (struct agp_bridge_data *, int);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: drivers/char/agp/agp.h:117:
+        int (*agp_type_to_mask_type) (struct agp_bridge_data *, int);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#76: FILE: drivers/char/agp/agp.h:117:
+        int (*agp_type_to_mask_type) (struct agp_bridge_data *, int);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#76: FILE: drivers/char/agp/agp.h:117:
+        int (*agp_type_to_mask_type) (struct agp_bridge_data *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#76: FILE: drivers/char/agp/agp.h:117:
+        int (*agp_type_to_mask_type) (struct agp_bridge_data *, int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#101: FILE: drivers/char/agp/agp.h:284:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#158: FILE: drivers/char/agp/amd-k7-agp.c:382:
 static struct agp_device_ids amd_agp_device_ids[] __devinitdata =

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#236: FILE: drivers/char/agp/efficeon-agp.c:341:
 static int __devinit agp_efficeon_probe(struct pci_dev *pdev,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#270: FILE: drivers/char/agp/generic.c:115:
+	if (size <= 2*PAGE_SIZE) {
 	             ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#270: FILE: drivers/char/agp/generic.c:115:
+	if (size <= 2*PAGE_SIZE) {
+		mem->memory = kmalloc(size, GFP_KERNEL | __GFP_NORETRY);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem->memory"
#273: FILE: drivers/char/agp/generic.c:118:
+	if (mem->memory == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#282: FILE: drivers/char/agp/generic.c:127:
+	if (mem->vmalloc_flag) {
[...]
+	} else {
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#290: FILE: drivers/char/agp/generic.c:135:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#294: FILE: drivers/char/agp/generic.c:139:
+	unsigned long alloc_size = num_agp_pages*sizeof(struct page *);
 	                                        ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new)...) over kmalloc(sizeof(struct agp_memory)...)
#296: FILE: drivers/char/agp/generic.c:141:
+	new = kmalloc(sizeof(struct agp_memory), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#298: FILE: drivers/char/agp/generic.c:143:
+	if (new == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new->memory"
#311: FILE: drivers/char/agp/generic.c:156:
+	if (new->memory == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#389: FILE: drivers/char/agp/generic.c:1074:
+	if (type != mem->type) {
+		return -EINVAL;
+	}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#404: FILE: drivers/char/agp/generic.c:1103:
+		       bridge->gatt_table+j);
 		                         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#448: FILE: drivers/char/agp/generic.c:1170:
+	if (new == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#451: FILE: drivers/char/agp/generic.c:1173:
+	for (i = 0; i < page_count; i++) {
+		new->memory[i] = 0;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#535: FILE: drivers/char/agp/intel-agp.c:29:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#560: FILE: drivers/char/agp/intel-agp.c:91:
 
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#619: FILE: drivers/char/agp/intel-agp.c:241:
+		if (!PGE_EMPTY(agp_bridge, readl(agp_bridge->gatt_table+j))) {
 		                                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#647: FILE: drivers/char/agp/intel-agp.c:257:
+			writel((i*4096)|I810_PTE_LOCAL|I810_PTE_VALID,
 			         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#647: FILE: drivers/char/agp/intel-agp.c:257:
+			writel((i*4096)|I810_PTE_LOCAL|I810_PTE_VALID,
 			               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#647: FILE: drivers/char/agp/intel-agp.c:257:
+			writel((i*4096)|I810_PTE_LOCAL|I810_PTE_VALID,
 			                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#648: FILE: drivers/char/agp/intel-agp.c:258:
+			       intel_i810_private.registers+I810_PTE_BASE+(i*4));
 			                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#648: FILE: drivers/char/agp/intel-agp.c:258:
+			       intel_i810_private.registers+I810_PTE_BASE+(i*4));
 			                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#648: FILE: drivers/char/agp/intel-agp.c:258:
+			       intel_i810_private.registers+I810_PTE_BASE+(i*4));
 			                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#650: FILE: drivers/char/agp/intel-agp.c:260:
+		readl(intel_i810_private.registers+I810_PTE_BASE+((i-1)*4));
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#650: FILE: drivers/char/agp/intel-agp.c:260:
+		readl(intel_i810_private.registers+I810_PTE_BASE+((i-1)*4));
 		                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#650: FILE: drivers/char/agp/intel-agp.c:260:
+		readl(intel_i810_private.registers+I810_PTE_BASE+((i-1)*4));
 		                                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#650: FILE: drivers/char/agp/intel-agp.c:260:
+		readl(intel_i810_private.registers+I810_PTE_BASE+((i-1)*4));
 		                                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#660: FILE: drivers/char/agp/intel-agp.c:270:
+			       intel_i810_private.registers+I810_PTE_BASE+(j*4));
 			                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#660: FILE: drivers/char/agp/intel-agp.c:270:
+			       intel_i810_private.registers+I810_PTE_BASE+(j*4));
 			                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#660: FILE: drivers/char/agp/intel-agp.c:270:
+			       intel_i810_private.registers+I810_PTE_BASE+(j*4));
 			                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#662: FILE: drivers/char/agp/intel-agp.c:272:
+		readl(intel_i810_private.registers+I810_PTE_BASE+((j-1)*4));
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#662: FILE: drivers/char/agp/intel-agp.c:272:
+		readl(intel_i810_private.registers+I810_PTE_BASE+((j-1)*4));
 		                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#662: FILE: drivers/char/agp/intel-agp.c:272:
+		readl(intel_i810_private.registers+I810_PTE_BASE+((j-1)*4));
 		                                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#662: FILE: drivers/char/agp/intel-agp.c:272:
+		readl(intel_i810_private.registers+I810_PTE_BASE+((j-1)*4));
 		                                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#754: FILE: drivers/char/agp/intel-agp.c:684:
+		       intel_i830_private.registers+I810_PTE_BASE+(j*4));
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#754: FILE: drivers/char/agp/intel-agp.c:684:
+		       intel_i830_private.registers+I810_PTE_BASE+(j*4));
 		                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#754: FILE: drivers/char/agp/intel-agp.c:684:
+		       intel_i830_private.registers+I810_PTE_BASE+(j*4));
 		                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#828: FILE: drivers/char/agp/intel-agp.c:806:
+			mem->memory[i], mask_type), intel_i830_private.gtt+j);
 			                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#832: FILE: drivers/char/agp/intel-agp.c:809:
+	readl(intel_i830_private.gtt+j-1);
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#832: FILE: drivers/char/agp/intel-agp.c:809:
+	readl(intel_i830_private.gtt+j-1);
 	                              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#936: FILE: drivers/char/agp/intel-agp.c:1696:
+       .agp_type_to_mask_type  = intel_i830_type_to_mask_type,$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#959: FILE: drivers/char/agp/nvidia-agp.c:316:
 static int __devinit agp_nvidia_probe(struct pci_dev *pdev,

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#995: FILE: drivers/char/agp/sis-agp.c:146:
 static struct agp_device_ids sis_agp_device_ids[] __devinitdata =

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1007: FILE: drivers/char/agp/sworks-agp.c:450:
 static int __devinit agp_serverworks_probe(struct pci_dev *pdev,

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1047: FILE: drivers/char/agp/via-agp.c:221:
 static struct agp_device_ids via_agp_device_ids[] __devinitdata =

ERROR:CODE_INDENT: code indent should use tabs where possible
#1056: FILE: include/linux/agp_backend.h:90:
+        u8 vmalloc_flag;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1056: FILE: include/linux/agp_backend.h:90:
+        u8 vmalloc_flag;$

CHECK:BIT_MACRO: Prefer using the BIT macro
#1061: FILE: include/linux/agp_backend.h:95:
+#define AGP_USER_TYPES (1 << 16)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471168.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 17 warnings, 37 checks, 850 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471168.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
