WARNING:TYPO_SPELLING: 'capabilites' may be misspelled - perhaps 'capabilities'?
#55: FILE: perfmon/perfmon_ctx.c:177:
+ * to grant/revoke Linux capabilites at login via PAM, we will
                          ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'alrady' may be misspelled - perhaps 'already'?
#58: FILE: perfmon/perfmon_ctx.c:180:
+ * is currently defined as u32 and 32 capabilities are alrady
                                                        ^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#64: FILE: perfmon/perfmon_ctx.c:186:
+	if (pfm_controls.task_group != PFM_GROUP_PERM_ANY
+		   && !in_group_p(pfm_controls.task_group)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#118: FILE: perfmon/perfmon_ctx.c:240:
+ * ^I>=0: the file descriptor to identify the context$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#119: FILE: perfmon/perfmon_ctx.c:241:
+ * ^I<0 : the error code$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#124: FILE: perfmon/perfmon_ctx.c:246:
+	struct file *filp = NULL;
 	             ^^^^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#128: FILE: perfmon/perfmon_ctx.c:250:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#167: FILE: perfmon/perfmon_ctx.c:289:
+	fd = pfm_alloc_fd(&filp);
 	                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#203: FILE: perfmon/perfmon_ctx.c:325:
+	fd_install(fd, filp);
 	               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#208: FILE: perfmon/perfmon_ctx.c:330:
+	put_filp(filp);
 	         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#273: FILE: perfmon/perfmon_file.c:112:
+static int __pfm_close(struct pfm_context *ctx, struct file *filp)
                                                              ^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#304: FILE: perfmon/perfmon_file.c:143:
+		can_unload = can_free = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#336: FILE: perfmon/perfmon_file.c:175:
+static int pfm_close(struct inode *inode, struct file *filp)
                                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#340: FILE: perfmon/perfmon_file.c:179:
+	PFM_DBG("called filp=%p", filp);
 	                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#340: FILE: perfmon/perfmon_file.c:179:
+	PFM_DBG("called filp=%p", filp);
 	                          ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#343: FILE: perfmon/perfmon_file.c:182:
+	if (ctx == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#347: FILE: perfmon/perfmon_file.c:186:
+	return __pfm_close(ctx, filp);
 	                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#357: FILE: perfmon/perfmon_file.c:196:
+static unsigned int pfm_no_poll(struct file *filp, poll_table *wait)
                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#362: FILE: perfmon/perfmon_file.c:201:
+static ssize_t pfm_read(struct file *filp, char __user *buf, size_t size,
                                      ^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_read', this function's name, in a string
#365: FILE: perfmon/perfmon_file.c:204:
+	PFM_DBG("pfm_read called");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: perfmon/perfmon_file.c:209:
+static ssize_t pfm_write(struct file *file, const char __user *ubuf,
+			  size_t size, loff_t *ppos)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_write', this function's name, in a string
#372: FILE: perfmon/perfmon_file.c:211:
+	PFM_DBG("pfm_write called");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_ioctl', this function's name, in a string
#379: FILE: perfmon/perfmon_file.c:218:
+	PFM_DBG("pfm_ioctl called");

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#398: FILE: perfmon/perfmon_file.c:237:
+static struct dentry_operations pfmfs_dentry_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#406: FILE: perfmon/perfmon_file.c:245:
+	struct inode * inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#430: FILE: perfmon/perfmon_file.c:269:
+	inode->i_mode = S_IFCHR|S_IRUGO;
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#430: FILE: perfmon/perfmon_file.c:269:
+	inode->i_mode = S_IFCHR|S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000261140.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 21 warnings, 5 checks, 416 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000261140.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
