WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
It can add another dimension to the parameters controlling a particular cgroup.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: block/as-iosched.c:279:
+static inline struct rb_root *rq_rb_root(struct as_data *ad,
+						struct request *rq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: block/as-iosched.c:300:
+static inline struct request *ad_fifo_next(struct as_data *ad,
+						unsigned short ioprio,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ad->prio_q[rq_prio_level(rq)].serviced <
 			ad->prio_q[rq_prio_level(rq)].ioprio_wt'
#211: FILE: block/as-iosched.c:728:
+		if ((ad->prio_q[rq_prio_level(rq)].serviced <
+			ad->prio_q[rq_prio_level(rq)].ioprio_wt)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#215: FILE: block/as-iosched.c:732:
+			return 1;
+		} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: block/as-iosched.c:739:
+	if (rq && cioprio != rioprio &&
+			ioprio_best(cioprio, rioprio) == cioprio) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#228: FILE: block/as-iosched.c:745:
+		unsigned short clevel = IOPRIO_PRIO_DATA(cioprio);
+		if ((ad->prio_q[clevel].serviced <

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ad->prio_q[clevel].serviced <
 				ad->prio_q[clevel].ioprio_wt'
#228: FILE: block/as-iosched.c:745:
+		if ((ad->prio_q[clevel].serviced <
+				ad->prio_q[clevel].ioprio_wt)) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#232: FILE: block/as-iosched.c:749:
+			return 0;
+		} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: block/as-iosched.c:860:
+		as_choose_req(ad, rq,
+			 ad->prio_q[rq_prio_level(rq)].next_rq[data_dir]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: block/as-iosched.c:1038:
+static int as_has_request_at_priority(struct as_data *ad,
+					unsigned int priority)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: block/as-iosched.c:1152:
+				as_move_to_dispatch(ad,
+				    ad->prio_q[ioprio].next_rq[REQ_SYNC]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: block/as-iosched.c:1159:
+				as_move_to_dispatch(ad,
+				    ad->prio_q[ioprio].next_rq[REQ_ASYNC]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#441: FILE: block/as-iosched.c:1220:
+		BUG_ON(RB_EMPTY_ROOT(&ad->prio_q[ioprio].sort_list[REQ_SYNC]));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: block/as-iosched.c:1223:
+		if (!changed_ioprio && writes &&
+				 ad->batch_data_dir == REQ_SYNC)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#469: FILE: block/as-iosched.c:1248:
+		BUG_ON(RB_EMPTY_ROOT(&ad->prio_q[ioprio].sort_list[REQ_ASYNC]));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#508: FILE: block/as-iosched.c:1333:
+	list_add_tail(&rq->queuelist,
+			&ad->prio_q[rq_prio_level(rq)].fifo_list[data_dir]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#532: FILE: block/as-iosched.c:1378:
+	if (class == IOPRIO_CLASS_BE)
[...]
+	else if (class == IOPRIO_CLASS_LATENCY)
[...]
+	else if (class == IOPRIO_CLASS_RT)
[...]
+	else if (class == IOPRIO_CLASS_IDLE)
[...]
+	else if (class == IOPRIO_CLASS_NONE) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#533: FILE: block/as-iosched.c:1379:
+		return ((data < IOPRIO_AS_MAX)? ioprio:
 		                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#533: FILE: block/as-iosched.c:1379:
+		return ((data < IOPRIO_AS_MAX)? ioprio:
 		                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: block/as-iosched.c:1381:
+			IOPRIO_PRIO_VALUE(IOPRIO_CLASS_BE,
+						(IOPRIO_AS_MAX - 1)));

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#537: FILE: block/as-iosched.c:1383:
+		return ((data < IOPRIO_AS_MAX)?
 		                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#538: FILE: block/as-iosched.c:1384:
+			IOPRIO_PRIO_VALUE(IOPRIO_CLASS_BE, data):
 			                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: block/as-iosched.c:1386:
+			IOPRIO_PRIO_VALUE(IOPRIO_CLASS_BE,
+						(IOPRIO_AS_MAX - 1)));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#547: FILE: block/as-iosched.c:1393:
+		return IOPRIO_AS_DEFAULT;
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: block/as-iosched.c:1413:
+	__rq = elv_rb_find(&ad->prio_q[ioprio].sort_list[bio_data_dir(bio)],
+								 rb_key);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#583: FILE: block/as-iosched.c:1509:
+		BUG_ON(as_has_request_at_priority(ad, ioprio));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: block/as-iosched.c:1613:
+static ssize_t as_priority_weights_store(elevator_t *e, const char *page,
+							size_t count)

ERROR:SPACING: space required before the open parenthesis '('
#646: FILE: block/as-iosched.c:1621:
+	while(tcount && i < IOPRIO_AS_MAX) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#649: FILE: block/as-iosched.c:1624:
+		val = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == 0'
#652: FILE: block/as-iosched.c:1627:
+		if ((p - prev_p) && (val == 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: block/as-iosched.c:1698:
+static int as_allow_merge(struct request_queue *q, struct request *rq,
+				struct bio *bio)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#740: FILE: block/blk-core.c:1535:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000211616.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 9 warnings, 19 checks, 639 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000211616.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
