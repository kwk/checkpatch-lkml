WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Subject: [PATCH 4/4] [Target_Core_Mod/ConfigFS] Add target/core/$HBA/$STORAGE_OBJECT/pr for T10 reservations

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#143: FILE: drivers/lio-core/target_core_configfs.c:715:
+#define SE_DEV_PR_ATTR(_name, _mode)						\
+static struct target_core_dev_pr_attribute target_core_dev_pr_##_name = 	\
+	__CONFIGFS_EATTR(_name, _mode,						\
+	target_core_dev_wwn_show_attr_##_name,					\
+	target_core_dev_wwn_store_attr_##_name);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#144: FILE: drivers/lio-core/target_core_configfs.c:716:
+static struct target_core_dev_pr_attribute target_core_dev_pr_##_name = ^I\$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#149: FILE: drivers/lio-core/target_core_configfs.c:721:
+#define SE_DEV_PR_ATTR_RO(_name);						\
+static struct target_core_dev_pr_attribute target_core_dev_pr_##_name =		\
+	__CONFIGFS_EATTR_RO(_name,						\
+	target_core_dev_pr_show_attr_##_name);					\
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#157: FILE: drivers/lio-core/target_core_configfs.c:729:
+static ssize_t target_core_dev_pr_show_spc3_res (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#157: FILE: drivers/lio-core/target_core_configfs.c:729:
+static ssize_t target_core_dev_pr_show_spc3_res (

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxO)
#162: FILE: drivers/lio-core/target_core_configfs.c:734:
+	*len += sprintf(page+*len, "Not Implemented yet\n");
 	                    ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#162: FILE: drivers/lio-core/target_core_configfs.c:734:
+	*len += sprintf(page+*len, "Not Implemented yet\n");
 	                     ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#163: FILE: drivers/lio-core/target_core_configfs.c:735:
+	return(*len);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#166: FILE: drivers/lio-core/target_core_configfs.c:738:
+static ssize_t target_core_dev_pr_show_spc2_res (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#166: FILE: drivers/lio-core/target_core_configfs.c:738:
+static ssize_t target_core_dev_pr_show_spc2_res (

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: drivers/lio-core/target_core_configfs.c:739:
+        struct se_device_s *dev,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: drivers/lio-core/target_core_configfs.c:739:
+        struct se_device_s *dev,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: drivers/lio-core/target_core_configfs.c:740:
+        char *page,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: drivers/lio-core/target_core_configfs.c:740:
+        char *page,$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#174: FILE: drivers/lio-core/target_core_configfs.c:746:
+	if (!(se_nacl = dev->dev_reserved_node_acl)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxO)
#175: FILE: drivers/lio-core/target_core_configfs.c:747:
+		*len += sprintf(page+*len, "None\n");
 		                    ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#175: FILE: drivers/lio-core/target_core_configfs.c:747:
+		*len += sprintf(page+*len, "None\n");
 		                     ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#177: FILE: drivers/lio-core/target_core_configfs.c:749:
+		return(*len);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxO)
#179: FILE: drivers/lio-core/target_core_configfs.c:751:
+	*len += sprintf(page+*len, "FABRIC[%s]: Initiator: %s\n",
 	                    ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#179: FILE: drivers/lio-core/target_core_configfs.c:751:
+	*len += sprintf(page+*len, "FABRIC[%s]: Initiator: %s\n",
 	                     ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#184: FILE: drivers/lio-core/target_core_configfs.c:756:
+	return(*len);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#187: FILE: drivers/lio-core/target_core_configfs.c:759:
+static ssize_t target_core_dev_pr_show_attr_res_active (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#187: FILE: drivers/lio-core/target_core_configfs.c:759:
+static ssize_t target_core_dev_pr_show_attr_res_active (

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: drivers/lio-core/target_core_configfs.c:768:
+		target_core_dev_pr_show_spc3_res(su_dev->se_dev_ptr,
+				page, &len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: drivers/lio-core/target_core_configfs.c:772:
+		target_core_dev_pr_show_spc2_res(su_dev->se_dev_ptr,
+				page, &len);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#203: FILE: drivers/lio-core/target_core_configfs.c:775:
+		len += sprintf(page+len, "None\n");
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#206: FILE: drivers/lio-core/target_core_configfs.c:778:
+		len += sprintf(page+len, "Unknown\n");
 		                   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#218: FILE: drivers/lio-core/target_core_configfs.c:790:
+static ssize_t target_core_dev_pr_show_attr_res_type (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#218: FILE: drivers/lio-core/target_core_configfs.c:790:
+static ssize_t target_core_dev_pr_show_attr_res_type (

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: drivers/lio-core/target_core_configfs.c:795:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#273: FILE: drivers/lio-core/target_core_configfs.c:1084:
+	if (!(dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 4,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#273: FILE: drivers/lio-core/target_core_configfs.c:1084:
+	if (!(dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 4,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: drivers/lio-core/target_core_configfs.c:1085:
+	if (!(dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 4,
 			GFP_KERNEL)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: drivers/lio-core/target_core_configfs.c:1102:
+	config_group_init_type_name(&se_dev->se_dev_pr_group, "pr",
+			&target_core_dev_pr_cit);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177311.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 10 warnings, 14 checks, 177 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177311.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
