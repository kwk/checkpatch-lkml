WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#100: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: fs/dlm/plock.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#142: FILE: fs/dlm/plock.c:38:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'DLM_PLOCK_VERSION_MAJOR != info->version[0]'
#152: FILE: fs/dlm/plock.c:48:
+	if ((DLM_PLOCK_VERSION_MAJOR != info->version[0]) ||
+	    (DLM_PLOCK_VERSION_MINOR < info->version[1])) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'DLM_PLOCK_VERSION_MINOR < info->version[1]'
#152: FILE: fs/dlm/plock.c:48:
+	if ((DLM_PLOCK_VERSION_MAJOR != info->version[0]) ||
+	    (DLM_PLOCK_VERSION_MINOR < info->version[1])) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#152: FILE: fs/dlm/plock.c:48:
+	if ((DLM_PLOCK_VERSION_MAJOR != info->version[0]) ||

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#153: FILE: fs/dlm/plock.c:49:
+	    (DLM_PLOCK_VERSION_MINOR < info->version[1])) {

WARNING:SPLIT_STRING: quoted string split across lines
#155: FILE: fs/dlm/plock.c:51:
+		log_print("plock device version mismatch: "
+			  "kernel (%u.%u.%u), user (%u.%u.%u)",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#206: FILE: fs/dlm/plock.c:102:
+		/* fl_owner is lockd which doesn't distinguish
+		   processes on the nfs client */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#206: FILE: fs/dlm/plock.c:102:
+		   processes on the nfs client */

CHECK:SPACING: No space is necessary after a cast
#207: FILE: fs/dlm/plock.c:103:
+		op->info.owner	= (__u64) fl->fl_pid;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#214: FILE: fs/dlm/plock.c:110:
+		op->info.owner	= (__u64)(long) fl->fl_owner;

CHECK:BRACES: braces {} should be used on all arms of this statement
#220: FILE: fs/dlm/plock.c:116:
+	if (xop->callback == NULL)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!xop->callback"
#220: FILE: fs/dlm/plock.c:116:
+	if (xop->callback == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#222: FILE: fs/dlm/plock.c:118:
+	else {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_posix_lock', this function's name, in a string
#229: FILE: fs/dlm/plock.c:125:
+		log_error(ls, "dlm_posix_lock: op on list %llx",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_posix_lock', this function's name, in a string
#239: FILE: fs/dlm/plock.c:135:
+			log_error(ls, "dlm_posix_lock: vfs lock error %llx",

WARNING:TYPO_SPELLING: 'succesful' may be misspelled - perhaps 'successful'?
#250: FILE: fs/dlm/plock.c:146:
+/* Returns failure iff a succesful lock operation should be canceled */
                          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_plock_callback', this function's name, in a string
#262: FILE: fs/dlm/plock.c:158:
+		log_print("dlm_plock_callback: op on list %llx",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_plock_callback', this function's name, in a string
#290: FILE: fs/dlm/plock.c:186:
+		log_print("dlm_plock_callback: vfs lock error %llx file %p fl %p",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_plock_callback', this function's name, in a string
#297: FILE: fs/dlm/plock.c:193:
+		log_print("dlm_plock_callback: lock granted after lock request "

WARNING:SPLIT_STRING: quoted string split across lines
#298: FILE: fs/dlm/plock.c:194:
+		log_print("dlm_plock_callback: lock granted after lock request "
+			  "failed; dangling lock!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_posix_unlock', this function's name, in a string
#325: FILE: fs/dlm/plock.c:221:
+		log_error(ls, "dlm_posix_unlock: vfs unlock error %llx",

CHECK:SPACING: No space is necessary after a cast
#335: FILE: fs/dlm/plock.c:231:
+		op->info.owner	= (__u64) fl->fl_pid;

CHECK:SPACING: No space is necessary after a cast
#337: FILE: fs/dlm/plock.c:233:
+		op->info.owner	= (__u64)(long) fl->fl_owner;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_posix_unlock', this function's name, in a string
#344: FILE: fs/dlm/plock.c:240:
+		log_error(ls, "dlm_posix_unlock: op on list %llx",

CHECK:SPACING: No space is necessary after a cast
#387: FILE: fs/dlm/plock.c:283:
+		op->info.owner	= (__u64) fl->fl_pid;

CHECK:SPACING: No space is necessary after a cast
#389: FILE: fs/dlm/plock.c:285:
+		op->info.owner	= (__u64)(long) fl->fl_owner;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_posix_get', this function's name, in a string
#396: FILE: fs/dlm/plock.c:292:
+		log_error(ls, "dlm_posix_get: op on list %llx",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#403: FILE: fs/dlm/plock.c:299:
+	/* info.rv from userspace is 1 for conflict, 0 for no-conflict,
+	   -ENOENT if there are no locks on the file */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#403: FILE: fs/dlm/plock.c:299:
+	   -ENOENT if there are no locks on the file */

CHECK:BRACES: braces {} should be used on all arms of this statement
#408: FILE: fs/dlm/plock.c:304:
+	if (rv == -ENOENT)
[...]
+	else if (rv > 0) {
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#452: FILE: fs/dlm/plock.c:348:
+/* a write copies in one plock result that should match a plock_op
+   on the recv list */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#452: FILE: fs/dlm/plock.c:348:
+   on the recv list */

WARNING:LINE_SPACING: Missing a blank line after declarations
#484: FILE: fs/dlm/plock.c:380:
+		struct plock_xop *xop;
+		xop = (struct plock_xop *)op;

CHECK:BRACES: Unbalanced braces around else statement
#489: FILE: fs/dlm/plock.c:385:
+	} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dev_write', this function's name, in a string
#490: FILE: fs/dlm/plock.c:386:
+		log_print("dev_write no op %x %llx", info.fsid,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_plock_init', this function's name, in a string
#534: FILE: fs/dlm/plock.c:430:
+		log_print("dlm_plock_init: misc_register failed %d", rv);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_plock_exit', this function's name, in a string
#541: FILE: fs/dlm/plock.c:437:
+		log_print("dlm_plock_exit: misc_deregister failed");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: fs/gfs2/locking/dlm/mount.c:240:
+static int gdlm_plock(void *lockspace, struct lm_lockname *name,
+	       struct file *file, int cmd, struct file_lock *fl)

WARNING:LINE_SPACING: Missing a blank line after declarations
#619: FILE: fs/gfs2/locking/dlm/mount.c:243:
+	struct gdlm_ls *ls = lockspace;
+	return dlm_posix_lock(ls->dlm_lockspace, name->ln_number, file, cmd, fl);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: fs/gfs2/locking/dlm/mount.c:247:
+static int gdlm_punlock(void *lockspace, struct lm_lockname *name,
+		 struct file *file, struct file_lock *fl)

WARNING:LINE_SPACING: Missing a blank line after declarations
#626: FILE: fs/gfs2/locking/dlm/mount.c:250:
+	struct gdlm_ls *ls = lockspace;
+	return dlm_posix_unlock(ls->dlm_lockspace, name->ln_number, file, fl);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: fs/gfs2/locking/dlm/mount.c:254:
+static int gdlm_plock_get(void *lockspace, struct lm_lockname *name,
+		   struct file *file, struct file_lock *fl)

WARNING:LINE_SPACING: Missing a blank line after declarations
#633: FILE: fs/gfs2/locking/dlm/mount.c:257:
+	struct gdlm_ls *ls = lockspace;
+	return dlm_posix_get(ls->dlm_lockspace, name->ln_number, file, fl);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1070: FILE: include/linux/dlm_plock.h:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1111: FILE: include/linux/dlm_plock.h:42:
+int dlm_posix_lock(dlm_lockspace_t *lockspace, u64 number, struct file *file,
+		int cmd, struct file_lock *fl);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1113: FILE: include/linux/dlm_plock.h:44:
+int dlm_posix_unlock(dlm_lockspace_t *lockspace, u64 number, struct file *file,
+		struct file_lock *fl);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: include/linux/dlm_plock.h:46:
+int dlm_posix_get(dlm_lockspace_t *lockspace, u64 number, struct file *file,
+		struct file_lock *fl);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000293777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 29 warnings, 20 checks, 608 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000293777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
