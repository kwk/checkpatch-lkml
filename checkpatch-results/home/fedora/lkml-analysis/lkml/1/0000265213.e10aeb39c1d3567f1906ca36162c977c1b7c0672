WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#100: FILE: drivers/usb/serial/garmin_gps.c:82:
+ *  large enough the store a complete packet inclusive header) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#101: FILE: drivers/usb/serial/garmin_gps.c:83:
+#define GPS_IN_BUFSIZ  (GARMIN_PKTHDR_LENGTH+MAX_SERIAL_PKT_SIZ)
                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#106: FILE: drivers/usb/serial/garmin_gps.c:86:
+#define GPS_OUT_BUFSIZ (GARMIN_PKTHDR_LENGTH+MAX_SERIAL_PKT_SIZ_STUFFED)
                                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#113: FILE: drivers/usb/serial/garmin_gps.c:90:
+ * packets data */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#171: FILE: drivers/usb/serial/garmin_gps.c:222:
+	/* the same device id seems to be used by all
+	   usb enabled GPS devices */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#171: FILE: drivers/usb/serial/garmin_gps.c:222:
+	   usb enabled GPS devices */

CHECK:CAMELCASE: Avoid CamelCase: <noResponseFromAppLayer>
#186: FILE: drivers/usb/serial/garmin_gps.c:238:
+static inline int noResponseFromAppLayer(struct garmin_data *garmin_data_p)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#202: FILE: drivers/usb/serial/garmin_gps.c:267:
+	if (0 == memcmp(buf, GARMIN_STOP_TRANSFER_REQ,

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: drivers/usb/serial/garmin_gps.c:268:
+	if (0 == memcmp(buf, GARMIN_STOP_TRANSFER_REQ,
+					sizeof(GARMIN_STOP_TRANSFER_REQ)) ||

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#204: FILE: drivers/usb/serial/garmin_gps.c:269:
+	    0 == memcmp(buf, GARMIN_STOP_TRANSFER_REQ_V2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: drivers/usb/serial/garmin_gps.c:286:
+		usb_serial_debug_data(debug, &port->dev,
 					__func__, actual_length, data);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'state == STATE_GSP_WAIT_DATA'
#241: FILE: drivers/usb/serial/garmin_gps.c:331:
+		if (result && (state == STATE_GSP_WAIT_DATA))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#296: FILE: drivers/usb/serial/garmin_gps.c:424:
+	const __u8 *recpkt = garmin_data_p->inbuffer+GSP_INITIAL_OFFSET;
 	                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around usbdata[3]
#307: FILE: drivers/usb/serial/garmin_gps.c:445:
+	if ((__u8 *)&(usbdata[3]) != recpkt) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: drivers/usb/serial/garmin_gps.c:467:
+	garmin_write_bulk(garmin_data_p->port, garmin_data_p->inbuffer,
 			   GARMIN_PKTHDR_LENGTH+size, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/usb/serial/garmin_gps.c:559:
+					dbg("packet complete - id=0x%X.",
+						0xFF & data);

CHECK:CAMELCASE: Avoid CamelCase: <getDataLength>
#429: FILE: drivers/usb/serial/garmin_gps.c:650:
+		datalen = getDataLength(garmin_data_p->outbuffer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: drivers/usb/serial/garmin_gps.c:669:
+		dbg("not an application packet (%d)",
+				getLayerId(garmin_data_p->outbuffer));

CHECK:CAMELCASE: Avoid CamelCase: <getLayerId>
#453: FILE: drivers/usb/serial/garmin_gps.c:669:
+				getLayerId(garmin_data_p->outbuffer));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#529: FILE: drivers/usb/serial/garmin_gps.c:792:
+			/* seems to be an invalid packet, ignore rest
+			   of input */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#529: FILE: drivers/usb/serial/garmin_gps.c:792:
+			   of input */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: drivers/usb/serial/garmin_gps.c:816:
+				garmin_write_bulk(garmin_data_p->port,
+						   garmin_data_p->inbuffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: drivers/usb/serial/garmin_gps.c:824:
+					spin_lock_irqsave(&garmin_data_p->lock,
+									flags);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#563: FILE: drivers/usb/serial/garmin_gps.c:826:
+					spin_unlock_irqrestore(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: drivers/usb/serial/garmin_gps.c:956:
+				spin_unlock_irqrestore(&garmin_data_p->lock,
+									flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: drivers/usb/serial/garmin_gps.c:969:
+static int garmin_open(struct tty_struct *tty,
 			struct usb_serial_port *port, struct file *filp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#709: FILE: drivers/usb/serial/garmin_gps.c:1006:
+			struct usb_serial_port *port, struct file *filp)
 			                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: drivers/usb/serial/garmin_gps.c:1055:
+			gsp_send_ack(garmin_data_p,
+					((__u8 *)urb->transfer_buffer)[4]);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#760: FILE: drivers/usb/serial/garmin_gps.c:1070:
+	/* Ignore errors that resulted from garmin_write_bulk with
+	   dismiss_ack = 1 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#760: FILE: drivers/usb/serial/garmin_gps.c:1070:
+	   dismiss_ack = 1 */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#770: FILE: drivers/usb/serial/garmin_gps.c:1078:
+static int garmin_write_bulk(struct usb_serial_port *port,
 			      const unsigned char *buf, int count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#807: FILE: drivers/usb/serial/garmin_gps.c:1113:
+	usb_fill_bulk_urb(urb, serial->dev,
+				usb_sndbulkpipe(serial->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#808: FILE: drivers/usb/serial/garmin_gps.c:1114:
+				usb_sndbulkpipe(serial->dev,
+					port->bulk_out_endpointAddress),

CHECK:CAMELCASE: Avoid CamelCase: <bulk_out_endpointAddress>
#808: FILE: drivers/usb/serial/garmin_gps.c:1114:
+					port->bulk_out_endpointAddress),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: drivers/usb/serial/garmin_gps.c:1145:
+static int garmin_write(struct tty_struct *tty, struct usb_serial_port *port,
 					 const unsigned char *buf, int count)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#846: FILE: drivers/usb/serial/garmin_gps.c:1165:
 		if (count == (GARMIN_PKTHDR_LENGTH+pktsiz)
+		    && GARMIN_LAYERID_PRIVATE ==

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#873: FILE: drivers/usb/serial/garmin_gps.c:1235:
+static void garmin_read_process(struct garmin_data *garmin_data_p,
 				 unsigned char *data, unsigned data_length)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#923: FILE: drivers/usb/serial/garmin_gps.c:1290:
+	usb_serial_debug_data(debug, &port->dev,
 				__func__, urb->actual_length, data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: drivers/usb/serial/garmin_gps.c:1363:
+			usb_fill_bulk_urb(port->read_urb, serial->dev,
+					usb_rcvbulkpipe(serial->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#959: FILE: drivers/usb/serial/garmin_gps.c:1364:
+					usb_rcvbulkpipe(serial->dev,
+						port->bulk_in_endpointAddress),

CHECK:CAMELCASE: Avoid CamelCase: <bulk_in_endpointAddress>
#959: FILE: drivers/usb/serial/garmin_gps.c:1364:
+						port->bulk_in_endpointAddress),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#977: FILE: drivers/usb/serial/garmin_gps.c:1379:
+				spin_unlock_irqrestore(&garmin_data_p->lock,
+									flags);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#995: FILE: drivers/usb/serial/garmin_gps.c:1397:
+		garmin_data_p->serial_num = __le32_to_cpup(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#996: FILE: drivers/usb/serial/garmin_gps.c:1398:
+					(__le32 *)(data+GARMIN_PKTHDR_LENGTH));
 					               ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265213.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 33 checks, 993 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265213.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
