WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: fs/ceph/file.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#66: FILE: fs/ceph/file.c:17:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#84: FILE: fs/ceph/file.c:35:
+	if (flags & (O_WRONLY|O_RDWR|O_CREAT|O_TRUNC))
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#84: FILE: fs/ceph/file.c:35:
+	if (flags & (O_WRONLY|O_RDWR|O_CREAT|O_TRUNC))
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#84: FILE: fs/ceph/file.c:35:
+	if (flags & (O_WRONLY|O_RDWR|O_CREAT|O_TRUNC))
 	                                    ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#87: FILE: fs/ceph/file.c:38:
+	dout(5, "prepare_open_request dentry %p name '%s' flags %d\n", dentry,
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_open_request', this function's name, in a string
#87: FILE: fs/ceph/file.c:38:
+	dout(5, "prepare_open_request dentry %p name '%s' flags %d\n", dentry,

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*req->r_expected_cap)...) over kmalloc(sizeof(struct ceph_cap)...)
#98: FILE: fs/ceph/file.c:49:
+	req->r_expected_cap = kmalloc(sizeof(struct ceph_cap), GFP_NOFS);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cf"
#121: FILE: fs/ceph/file.c:72:
+	if (cf == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#131: FILE: fs/ceph/file.c:82:
+ * If the filp already has private_data, that means the file was
           ^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#153: FILE: fs/ceph/file.c:104:
+		dout(5, "open file %p is already opened\n", file);
 		^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#158: FILE: fs/ceph/file.c:109:
+	flags = file->f_flags & ~(O_CREAT|O_EXCL);
 	                                 ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#162: FILE: fs/ceph/file.c:113:
+	dout(5, "open inode %p ino %llx.%llx file %p flags %d (%d)\n", inode,
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#170: FILE: fs/ceph/file.c:121:
+		dout(10, "open fmode %d caps %d using existing on %p\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#177: FILE: fs/ceph/file.c:128:
+	dout(10, "open fmode %d, don't have caps %d\n", fmode, wantcaps);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#192: FILE: fs/ceph/file.c:143:
+	dout(5, "open result=%d on %llx.%llx\n", err, ceph_vinop(inode));
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#198: FILE: fs/ceph/file.c:149:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#212: FILE: fs/ceph/file.c:163:
+				struct nameidata *nd, int mode,
 				                  ^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#222: FILE: fs/ceph/file.c:173:
+	dout(5, "ceph_lookup_open dentry %p '%.*s' flags %d mode 0%o\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_lookup_open', this function's name, in a string
#222: FILE: fs/ceph/file.c:173:
+	dout(5, "ceph_lookup_open dentry %p '%.*s' flags %d mode 0%o\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#238: FILE: fs/ceph/file.c:189:
+	dout(5, "ceph_lookup_open result=%p\n", dentry);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_lookup_open', this function's name, in a string
#238: FILE: fs/ceph/file.c:189:
+	dout(5, "ceph_lookup_open result=%p\n", dentry);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#247: FILE: fs/ceph/file.c:198:
+	dout(5, "release inode %p file %p\n", inode, file);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: fs/ceph/file.c:226:
+static ssize_t ceph_sync_read(struct file *file, char __user *data,
+			       size_t count, loff_t *offset)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#283: FILE: fs/ceph/file.c:234:
+	dout(10, "sync_read on file %p %lld~%u\n", file, *offset,
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#284: FILE: fs/ceph/file.c:235:
+	     (unsigned)count);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#306: FILE: fs/ceph/file.c:257:
+	dout(10, "sync_write on file %p %lld~%u\n", file, *offset,
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#307: FILE: fs/ceph/file.c:258:
+	     (unsigned)count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: fs/ceph/file.c:285:
+static ssize_t ceph_aio_read(struct kiocb *iocb, const struct iovec *iov,
+		      unsigned long nr_segs, loff_t pos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#336: FILE: fs/ceph/file.c:287:
+	struct file *filp = iocb->ki_filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#346: FILE: fs/ceph/file.c:297:
+	dout(10, "aio_read %llx.%llx %llu~%u trying to get caps on %p\n",
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#347: FILE: fs/ceph/file.c:298:
+	     ceph_vinop(inode), pos, (unsigned)len, inode);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#354: FILE: fs/ceph/file.c:305:
+	dout(10, "aio_read %llx.%llx %llu~%u got cap refs %d\n",
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#355: FILE: fs/ceph/file.c:306:
+	     ceph_vinop(inode), pos, (unsigned)len, got);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#360: FILE: fs/ceph/file.c:311:
+		ret = ceph_sync_read(filp, iov->iov_base, len, ppos);
 		                     ^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#365: FILE: fs/ceph/file.c:316:
+	dout(10, "aio_read %llx.%llx dropping cap refs on %d\n",
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#386: FILE: fs/ceph/file.c:337:
+		dout(10, "write %p at large endoff %llu, req max_size\n",
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: fs/ceph/file.c:358:
+static ssize_t ceph_aio_write(struct kiocb *iocb, const struct iovec *iov,
+		       unsigned long nr_segs, loff_t pos)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#425: FILE: fs/ceph/file.c:376:
+	dout(10, "aio_write %p %llu~%u getting caps. i_size %llu\n",
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#426: FILE: fs/ceph/file.c:377:
+	     inode, pos, (unsigned)iov->iov_len, inode->i_size);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#434: FILE: fs/ceph/file.c:385:
+	dout(10, "aio_write %p %llu~%u  got cap refs on %d\n",
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#435: FILE: fs/ceph/file.c:386:
+	     inode, pos, (unsigned)iov->iov_len, got);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#447: FILE: fs/ceph/file.c:398:
+	dout(10, "aio_write %p %llu~%u  dropping cap refs on %d\n",
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#448: FILE: fs/ceph/file.c:399:
+	     inode, pos, (unsigned)iov->iov_len, got);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#452: FILE: fs/ceph/file.c:403:
+		dout(10, "aio_write %p %llu~%u got EOLDSNAPC, retrying\n",
 		^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#453: FILE: fs/ceph/file.c:404:
+		     inode, pos, (unsigned)iov->iov_len);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#465: FILE: fs/ceph/file.c:416:
+	dout(10, "fsync on inode %p\n", inode);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#495: FILE: fs/ceph/file.c:446:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204221.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 37 warnings, 12 checks, 446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204221.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
