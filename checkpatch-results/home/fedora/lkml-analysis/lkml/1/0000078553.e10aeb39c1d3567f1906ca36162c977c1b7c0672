WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
fanotify sends event notification to userspace when userspace reads from the

CHECK:SPACING: No space is necessary after a cast
#85: FILE: fs/notify/fanotify/af_fanotify.c:135:
+	p = (void __user *) arg;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#93: FILE: fs/notify/fanotify/af_fanotify.c:143:
+		ret = put_user(send_len, (int __user *) p);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#117: FILE: fs/notify/fanotify/af_fanotify.c:324:
+	BUG_ON(!mutex_is_locked(&group->notification_mutex));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#122: FILE: fs/notify/fanotify/af_fanotify.c:329:
+	if (FAN_EVENT_METADATA_LEN > count)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#126: FILE: fs/notify/fanotify/af_fanotify.c:333:
+	 * same event we peeked above */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#156: FILE: fs/notify/fanotify/af_fanotify.c:363:
+	 * are NULL;  That's fine, just don't call dentry open */

CHECK:BRACES: braces {} should be used on all arms of this statement
#157: FILE: fs/notify/fanotify/af_fanotify.c:364:
+	if (dentry && mnt) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#159: FILE: fs/notify/fanotify/af_fanotify.c:366:
+		if (err)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#161: FILE: fs/notify/fanotify/af_fanotify.c:368:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#167: FILE: fs/notify/fanotify/af_fanotify.c:374:
+	} else

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#193: FILE: fs/notify/fanotify/af_fanotify.c:400:
+	pr_debug("%s: \n", __func__);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#193: FILE: fs/notify/fanotify/af_fanotify.c:400:
+	pr_debug("%s: \n", __func__);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#200: FILE: fs/notify/fanotify/af_fanotify.c:407:
+
+}

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#209: FILE: fs/notify/fanotify/af_fanotify.c:416:
+	pr_debug("%s: \n", __func__);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#209: FILE: fs/notify/fanotify/af_fanotify.c:416:
+	pr_debug("%s: \n", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: fs/notify/fanotify/af_fanotify.c:432:
+static ssize_t fan_recv_events(struct fsnotify_group *group, struct msghdr *msg,
+				int count, int nonblock)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#231: FILE: fs/notify/fanotify/af_fanotify.c:438:
+	pr_debug("%s: \n", __func__);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#231: FILE: fs/notify/fanotify/af_fanotify.c:438:
+	pr_debug("%s: \n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#280: FILE: fs/notify/fanotify/af_fanotify.c:487:
+	pr_debug("%s: \n", __func__);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#280: FILE: fs/notify/fanotify/af_fanotify.c:487:
+	pr_debug("%s: \n", __func__);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#355: FILE: include/linux/fanotify.h:74:
+}  __attribute__((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#357: FILE: include/linux/fanotify.h:76:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'meta' - possible side-effects?
#361: FILE: include/linux/fanotify.h:80:
+#define FAN_EVENT_NEXT(meta, len) ((len) -= (meta)->event_len, \
+				   (struct fanotify_event_metadata*)(((char *)(meta)) + \
+				   (meta)->event_len))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#362: FILE: include/linux/fanotify.h:81:
+				   (struct fanotify_event_metadata*)(((char *)(meta)) + \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'meta' - possible side-effects?
#365: FILE: include/linux/fanotify.h:84:
+#define FAN_EVENT_OK(meta, len)	((long)(len) >= (long)FAN_EVENT_METADATA_LEN && \
+				 (long)(meta)->event_len >= (long)FAN_EVENT_METADATA_LEN && \
+				 (long)(meta)->event_len <= (long)(len))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#365: FILE: include/linux/fanotify.h:84:
+#define FAN_EVENT_OK(meta, len)	((long)(len) >= (long)FAN_EVENT_METADATA_LEN && \
+				 (long)(meta)->event_len >= (long)FAN_EVENT_METADATA_LEN && \
+				 (long)(meta)->event_len <= (long)(len))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078553.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 14 warnings, 12 checks, 307 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078553.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
