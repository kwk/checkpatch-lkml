WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
>>>>> diff --git a/drivers/firmware/dmi_scan.c b/drivers/firmware/dmi_scan.c

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: dmi_scan.c:357:
+       if (simple_strtoul(s, NULL, 10) == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#85: FILE: dmi_scan.c:357:
+       if (simple_strtoul(s, NULL, 10) == 0)
+               return 0;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#85: FILE: dmi_scan.c:357:
+       if (simple_strtoul(s, NULL, 10) == 0)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: dmi_scan.c:358:
+               return 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: dmi_scan.c:358:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: dmi_scan.c:361:
+       s = strchr(s, '/');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: dmi_scan.c:362:
+       if (!s)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#90: FILE: dmi_scan.c:362:
+       if (!s)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: dmi_scan.c:363:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: dmi_scan.c:363:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: dmi_scan.c:366:
+       s += 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: dmi_scan.c:367:
+       if (simple_strtoul(s, NULL, 10) == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#95: FILE: dmi_scan.c:367:
+       if (simple_strtoul(s, NULL, 10) == 0)
+               return 0;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#95: FILE: dmi_scan.c:367:
+       if (simple_strtoul(s, NULL, 10) == 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: dmi_scan.c:368:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: dmi_scan.c:368:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: dmi_scan.c:375:
+       if (s[0] == '0' && s[1] == '0' && s[2] == '\0') {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#108: FILE: dmi_scan.c:375:
+       if (s[0] == '0' && s[1] == '0' && s[2] == '\0') {
+               year = 2000;

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: dmi_scan.c:376:
+               year = 2000;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: dmi_scan.c:376:
+               year = 2000;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: dmi_scan.c:377:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#110: FILE: dmi_scan.c:377:
+       } else {
+               year = simple_strtoul(s, NULL, 10);

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: dmi_scan.c:378:
+               year = simple_strtoul(s, NULL, 10);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: dmi_scan.c:378:
+               year = simple_strtoul(s, NULL, 10);$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#111: FILE: dmi_scan.c:378:
+               year = simple_strtoul(s, NULL, 10);

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: dmi_scan.c:379:
+               if (year && year < 100) {       /* 2-digit year */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: dmi_scan.c:379:
+               if (year && year < 100) {       /* 2-digit year */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#112: FILE: dmi_scan.c:379:
+               if (year && year < 100) {       /* 2-digit year */
+                       year += 1900;

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: dmi_scan.c:380:
+                       year += 1900;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: dmi_scan.c:380:
+                       year += 1900;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: dmi_scan.c:381:
+                       if (year < 1996)        /* no dates < spec 1.0 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: dmi_scan.c:381:
+                       if (year < 1996)        /* no dates < spec 1.0 */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#114: FILE: dmi_scan.c:381:
+                       if (year < 1996)        /* no dates < spec 1.0 */
+                               year += 100;

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: dmi_scan.c:382:
+                               year += 100;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: dmi_scan.c:382:
+                               year += 100;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: dmi_scan.c:383:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: dmi_scan.c:383:
+               }$

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#122: FILE: dmi_scan.c:386:
Matthias Pfaller                          Software Entwicklung

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098448.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 28 warnings, 0 checks, 47 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098448.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
