ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Daniel Lowengrub'
#39: 
Signed-off-by: Daniel Lowengrub

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma_next"
#172: FILE: arch/parisc/mm/fault.c:133:
+					if (vma_next(prev) == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 13)
#419: FILE: fs/binfmt_elf_fdpic.c:1767:
+		for(vml = current->mm->context.vmlist; vml; vml = vml->next)
[...]
+	     {

ERROR:SPACING: space required before the open parenthesis '('
#419: FILE: fs/binfmt_elf_fdpic.c:1767:
+		for(vml = current->mm->context.vmlist; vml; vml = vml->next)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#422: FILE: fs/binfmt_elf_fdpic.c:1769:
+	     {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma != tail_vma'
#512: FILE: fs/proc/task_mmu.c:166:
+	if (vma && (vma != tail_vma) && (next = vma_next(vma)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#512: FILE: fs/proc/task_mmu.c:166:
+	if (vma && (vma != tail_vma) && (next = vma_next(vma)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#537: FILE: include/linux/init_task.h:31:
+        .mm_vmas = LIST_HEAD_INIT(name.mm_vmas),^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: include/linux/init_task.h:31:
+        .mm_vmas = LIST_HEAD_INIT(name.mm_vmas),^I^I\$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#559: FILE: include/linux/mm.h:215:
 };
+/* Interface for the list_head prev and next pointers.  They

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zap_details *' should also have an identifier name
#601: FILE: include/linux/mm.h:784:
+unsigned long unmap_vmas(struct mmu_gather **tlb, struct list_head *vmas,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: include/linux/mm.h:785:
+unsigned long unmap_vmas(struct mmu_gather **tlb, struct list_head *vmas,
 		struct vm_area_struct *start_vma, unsigned long start_addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#753: FILE: mm/internal.h:17:
+void free_pgtables(struct mmu_gather *tlb, struct list_head *vmas,
+		struct vm_area_struct *start_vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: mm/memory.c:278:
+void free_pgtables(struct mmu_gather *tlb, struct list_head *vmas,
+		struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: mm/memory.c:893:
+unsigned long unmap_vmas(struct mmu_gather **tlbp, struct list_head *vmas,
 		struct vm_area_struct *vma, unsigned long start_addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: mm/memory.c:993:
+	end = unmap_vmas(&tlb, &mm->mm_vmas, vma, address, end,
+			&nr_accounted, details);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#864: FILE: mm/mempolicy.c:788:
+	check_range(mm, __vma_next(&mm->mm_vmas, NULL)->vm_start, TASK_SIZE,
+		&nmask, flags | MPOL_MF_DISCONTIG_OK, &pagelist);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#919: FILE: mm/mmap.c:47:
+static void unmap_region(struct mm_struct *mm, struct list_head *vmas,
 		struct vm_area_struct *vma, struct vm_area_struct *prev,

WARNING:LINE_SPACING: Missing a blank line after declarations
#955: FILE: mm/mmap.c:336:
+	struct vm_area_struct *vma;
+	list_for_each_entry(vma, &mm->mm_vmas, vm_list)

CHECK:BRACES: braces {} should be used on all arms of this statement
#972: FILE: mm/mmap.c:393:
+		if (rb_parent) {
[...]
-			vma->vm_next = NULL;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#978: FILE: mm/mmap.c:397:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < next->vm_end'
#1085: FILE: mm/mmap.c:1524:
+			if (!next || (addr < next->vm_end))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1104: FILE: mm/mmap.c:1749:
+static void remove_vma_list(struct mm_struct *mm, struct list_head *vmas,
+			struct vm_area_struct *vma)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1126: FILE: mm/mmap.c:1771:
+static void unmap_region(struct mm_struct *mm, struct list_head *vmas,
 		struct vm_area_struct *vma, struct vm_area_struct *prev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1143: FILE: mm/mmap.c:1784:
+	free_pgtables(tlb, vmas, vma,
+		prev ? prev->vm_end : FIRST_USER_ADDRESS,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1328: FILE: mm/mremap.c:372:
+		struct vm_area_struct *next = vma_next(vma);
+		if (next)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156614.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 6 warnings, 16 checks, 1031 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156614.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
