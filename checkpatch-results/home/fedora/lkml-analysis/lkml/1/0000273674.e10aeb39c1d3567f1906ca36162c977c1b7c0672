WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
> On Thu, May 29, 2008 at 11:36 AM, Jan Engelhardt <jengelh@medozas.de> wrote:

WARNING:TYPO_SPELLING: 'exemple' may be misspelled - perhaps 'example'?
#47: 
> exemple) ?
  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#81: FILE: fs/fcntl.c:376:
+		err = pipe_fcntl(filp, cmd, arg);
 		                 ^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#123: FILE: fs/pipe.c:475:
+			int newbuf = (pipe->curbuf + bufs) & (pipe->buffers-1);
 			                                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#141: FILE: fs/pipe.c:596:
+				buf = (buf+1) & (pipe->buffers - 1);
 				          ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pipe->bufs)...) over kzalloc(sizeof(struct pipe_buffer)...)
#161: FILE: fs/pipe.c:862:
+		pipe->bufs = kzalloc(sizeof(struct pipe_buffer) * PIPE_DEF_BUFFERS, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#164: FILE: fs/pipe.c:865:
+			pipe->r_counter = pipe->w_counter = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#233: FILE: fs/pipe.c:1145:
+			memcpy(bufs + head, pipe->bufs + pipe->curbuf, tail * sizeof(struct pipe_buffer));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#311: FILE: fs/splice.c:277:
+	spd->pages = kmalloc(pipe->buffers * sizeof(struct page *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#312: FILE: fs/splice.c:278:
+	spd->partial = kmalloc(pipe->buffers * sizeof(struct partial_page), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#527: FILE: fs/splice.c:1671:
+		ibuf = ipipe->bufs + ((ipipe->curbuf + i) & (ipipe->buffers-1));
 		                                                           ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#589: FILE: include/linux/pipe_fs_i.h:152:
+long pipe_fcntl(struct file *, unsigned int, unsigned long arg);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#589: FILE: include/linux/pipe_fs_i.h:152:
+long pipe_fcntl(struct file *, unsigned int, unsigned long arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#603: FILE: include/linux/splice.h:77:
+extern int splice_grow_spd(struct pipe_inode_info *, struct splice_pipe_desc *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#603: FILE: include/linux/splice.h:77:
+extern int splice_grow_spd(struct pipe_inode_info *, struct splice_pipe_desc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_pipe_desc *' should also have an identifier name
#603: FILE: include/linux/splice.h:77:
+extern int splice_grow_spd(struct pipe_inode_info *, struct splice_pipe_desc *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#604: FILE: include/linux/splice.h:78:
+extern void splice_shrink_spd(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#604: FILE: include/linux/splice.h:78:
+extern void splice_shrink_spd(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_pipe_desc *' should also have an identifier name
#604: FILE: include/linux/splice.h:78:
+extern void splice_shrink_spd(struct pipe_inode_info *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: include/linux/splice.h:79:
+extern void splice_shrink_spd(struct pipe_inode_info *,
+				struct splice_pipe_desc *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000273674.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 8 checks, 526 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000273674.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
