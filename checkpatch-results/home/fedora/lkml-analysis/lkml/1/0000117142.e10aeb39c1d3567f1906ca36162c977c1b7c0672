WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
 opcode: mnemonic|GrpXXX [operand1[,operand2...]] [(extra1)[,(extra2)...] [| 2nd-mnemonic ...]

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#103: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#108: FILE: arch/x86/include/asm/inat.h:1:
+#ifndef _ASM_INAT_INAT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#126: FILE: arch/x86/include/asm/inat.h:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#127: FILE: arch/x86/include/asm/inat.h:20:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:BIT_MACRO: Prefer using the BIT macro
#189: FILE: arch/x86/include/asm/inat.h:82:
+#define INAT_REXPFX	(1 << INAT_FLAG_OFFS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#197: FILE: arch/x86/include/asm/inat.h:90:
+extern insn_attr_t inat_get_opcode_attribute(u8 opcode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#198: FILE: arch/x86/include/asm/inat.h:91:
+extern insn_attr_t inat_get_escape_attribute(u8 opcode, u8 last_pfx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: arch/x86/include/asm/inat.h:93:
+extern insn_attr_t inat_get_group_attribute(u8 modrm, u8 last_pfx,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#204: FILE: arch/x86/include/asm/inat.h:97:
+#define INAT_IS_PREFIX(attr)	(attr & INAT_PFX_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#205: FILE: arch/x86/include/asm/inat.h:98:
+#define INAT_IS_ADDRSZ(attr)	((attr & INAT_PFX_MASK) == INAT_PFX_ADDRSZ)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#206: FILE: arch/x86/include/asm/inat.h:99:
+#define INAT_IS_OPNDSZ(attr)	((attr & INAT_PFX_MASK) == INAT_PFX_OPNDSZ)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'attr' - possible side-effects?
#207: FILE: arch/x86/include/asm/inat.h:100:
+#define INAT_LPREFIX_NUM(attr)	\
+	(((attr & INAT_PFX_MASK) > INAT_LPREFIX_MAX) ? 0 :\
+	 (attr & INAT_PFX_MASK))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#207: FILE: arch/x86/include/asm/inat.h:100:
+#define INAT_LPREFIX_NUM(attr)	\
+	(((attr & INAT_PFX_MASK) > INAT_LPREFIX_MAX) ? 0 :\
+	 (attr & INAT_PFX_MASK))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pfx' may be better as '(pfx)' to avoid precedence issues
#210: FILE: arch/x86/include/asm/inat.h:103:
+#define INAT_MAKE_PREFIX(pfx)	(pfx << INAT_PFX_OFFS)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#212: FILE: arch/x86/include/asm/inat.h:105:
+#define INAT_IS_ESCAPE(attr)	(attr & INAT_ESC_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#213: FILE: arch/x86/include/asm/inat.h:106:
+#define INAT_ESCAPE_NUM(attr)	((attr & INAT_ESC_MASK) >> INAT_ESC_OFFS)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'esc' may be better as '(esc)' to avoid precedence issues
#214: FILE: arch/x86/include/asm/inat.h:107:
+#define INAT_MAKE_ESCAPE(esc)	(esc << INAT_ESC_OFFS)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#216: FILE: arch/x86/include/asm/inat.h:109:
+#define INAT_IS_GROUP(attr)	(attr & INAT_GRP_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#217: FILE: arch/x86/include/asm/inat.h:110:
+#define INAT_GROUP_NUM(attr)	((attr & INAT_GRP_MASK) >> INAT_GRP_OFFS)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#218: FILE: arch/x86/include/asm/inat.h:111:
+#define INAT_GROUP_COMMON(attr)	(attr & ~INAT_GRP_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'grp' may be better as '(grp)' to avoid precedence issues
#219: FILE: arch/x86/include/asm/inat.h:112:
+#define INAT_MAKE_GROUP(grp)	((grp << INAT_GRP_OFFS) | INAT_MODRM)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#221: FILE: arch/x86/include/asm/inat.h:114:
+#define INAT_HAS_IMM(attr)	(attr & INAT_IMM_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#222: FILE: arch/x86/include/asm/inat.h:115:
+#define INAT_IMM_SIZE(attr)	((attr & INAT_IMM_MASK) >> INAT_IMM_OFFS)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'imm' may be better as '(imm)' to avoid precedence issues
#223: FILE: arch/x86/include/asm/inat.h:116:
+#define INAT_MAKE_IMM(imm)	(imm << INAT_IMM_OFFS)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#225: FILE: arch/x86/include/asm/inat.h:118:
+#define INAT_IS_REX_PREFIX(attr)	(attr & INAT_REXPFX)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#226: FILE: arch/x86/include/asm/inat.h:119:
+#define INAT_HAS_MODRM(attr)	(attr & INAT_MODRM)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#227: FILE: arch/x86/include/asm/inat.h:120:
+#define INAT_IS_FORCE64(attr)	(attr & INAT_FORCE64)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#228: FILE: arch/x86/include/asm/inat.h:121:
+#define INAT_HAS_ADDIMM(attr)	(attr & INAT_ADDIMM)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#229: FILE: arch/x86/include/asm/inat.h:122:
+#define INAT_HAS_MOFFSET(attr)	(attr & INAT_MOFFSET)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'attr' may be better as '(attr)' to avoid precedence issues
#230: FILE: arch/x86/include/asm/inat.h:123:
+#define INAT_HAS_VARIANT(attr)	(attr & INAT_VARIANT)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#239: FILE: arch/x86/include/asm/insn.h:1:
+#ifndef _ASM_X86_INSN_H

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#255: FILE: arch/x86/include/asm/insn.h:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#256: FILE: arch/x86/include/asm/insn.h:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'insn' - possible side-effects?
#328: FILE: arch/x86/include/asm/insn.h:90:
+#define MOFFSET64(insn)	(((u64)((insn)->moffset2.value) << 32) | \
+			  (u32)((insn)->moffset1.value))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'insn' - possible side-effects?
#331: FILE: arch/x86/include/asm/insn.h:93:
+#define IMMEDIATE64(insn)	(((u64)((insn)->immediate2.value) << 32) | \
+				  (u32)((insn)->immediate1.value))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: arch/x86/include/asm/insn.h:96:
+extern void insn_init(struct insn *insn, const u8 *kaddr, bool x86_64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: arch/x86/include/asm/insn.h:97:
+extern void insn_get_prefixes(struct insn *insn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: arch/x86/include/asm/insn.h:98:
+extern void insn_get_opcode(struct insn *insn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#337: FILE: arch/x86/include/asm/insn.h:99:
+extern void insn_get_modrm(struct insn *insn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#338: FILE: arch/x86/include/asm/insn.h:100:
+extern void insn_get_sib(struct insn *insn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#339: FILE: arch/x86/include/asm/insn.h:101:
+extern void insn_get_displacement(struct insn *insn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: arch/x86/include/asm/insn.h:102:
+extern void insn_get_immediate(struct insn *insn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#341: FILE: arch/x86/include/asm/insn.h:103:
+extern void insn_get_length(struct insn *insn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#350: FILE: arch/x86/include/asm/insn.h:112:
+extern bool insn_rip_relative(struct insn *insn);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'insn' - possible side-effects?
#361: FILE: arch/x86/include/asm/insn.h:123:
+#define INSN_OPCODE_OFFS(insn)		(INSN_REXPREFIX_OFFS(insn) + \
+					 ((insn)->rex_prefix.nbytes))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'insn' - possible side-effects?
#363: FILE: arch/x86/include/asm/insn.h:125:
+#define INSN_MODRM_OFFS(insn)		(INSN_OPCODE_OFFS(insn) + \
+					 ((insn)->opcode.nbytes))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'insn' - possible side-effects?
#365: FILE: arch/x86/include/asm/insn.h:127:
+#define INSN_SIB_OFFS(insn)		(INSN_MODRM_OFFS(insn) + \
+					 ((insn)->modrm.nbytes))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'insn' - possible side-effects?
#367: FILE: arch/x86/include/asm/insn.h:129:
+#define INSN_DISPLACEMENT_OFFS(insn)	(INSN_SIB_OFFS(insn) + \
+					 ((insn)->sib.nbytes))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'insn' - possible side-effects?
#369: FILE: arch/x86/include/asm/insn.h:131:
+#define INSN_IMMEDIATE_OFFS(insn)	(INSN_DISPLACEMENT_OFFS(insn) + \
+					 ((insn)->displacement.nbytes))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#409: FILE: arch/x86/lib/inat.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#425: FILE: arch/x86/lib/inat.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#426: FILE: arch/x86/lib/inat.c:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#495: FILE: arch/x86/lib/insn.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#509: FILE: arch/x86/lib/insn.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#510: FILE: arch/x86/lib/insn.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#520: FILE: arch/x86/lib/insn.c:26:
+#define get_next(t, insn)	\
+	({t r; r = *(t*)insn->next_byte; insn->next_byte += sizeof(t); r; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'insn' - possible side-effects?
#520: FILE: arch/x86/lib/insn.c:26:
+#define get_next(t, insn)	\
+	({t r; r = *(t*)insn->next_byte; insn->next_byte += sizeof(t); r; })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'insn' may be better as '(insn)' to avoid precedence issues
#520: FILE: arch/x86/lib/insn.c:26:
+#define get_next(t, insn)	\
+	({t r; r = *(t*)insn->next_byte; insn->next_byte += sizeof(t); r; })

CHECK:SPACING: spaces preferred around that '*' (ctx:VxB)
#521: FILE: arch/x86/lib/insn.c:27:
+	({t r; r = *(t*)insn->next_byte; insn->next_byte += sizeof(t); r; })
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#523: FILE: arch/x86/lib/insn.c:29:
+#define peek_next(t, insn)	\
+	({t r; r = *(t*)insn->next_byte; r; })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'insn' may be better as '(insn)' to avoid precedence issues
#523: FILE: arch/x86/lib/insn.c:29:
+#define peek_next(t, insn)	\
+	({t r; r = *(t*)insn->next_byte; r; })

CHECK:SPACING: spaces preferred around that '*' (ctx:VxB)
#524: FILE: arch/x86/lib/insn.c:30:
+	({t r; r = *(t*)insn->next_byte; r; })
 	              ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#620: FILE: arch/x86/lib/insn.c:126:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#638: FILE: arch/x86/lib/insn.c:144:
+	u8 op, pfx;
+	if (opcode->got)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#671: FILE: arch/x86/lib/insn.c:177:
+	u8 pfx, mod;
+	if (modrm->got)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#693: FILE: arch/x86/lib/insn.c:199:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#741: FILE: arch/x86/lib/insn.c:247:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#754: FILE: arch/x86/lib/insn.c:260:
+	u8 mod;
+	if (insn->displacement.got)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#764: FILE: arch/x86/lib/insn.c:270:
+^I^I * ^Iaddress size = 2 (0x67 prefix in 32-bit mode)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#774: FILE: arch/x86/lib/insn.c:280:
+^I^I * ^Ifield is 4 bytes$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#819: FILE: arch/x86/lib/insn.c:325:
+	insn->moffset1.got = insn->moffset2.got = true;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#857: FILE: arch/x86/lib/insn.c:363:
+	insn->immediate1.got = insn->immediate2.got = true;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#879: FILE: arch/x86/lib/insn.c:385:
+	insn->immediate1.got = insn->immediate2.got = true;

WARNING:TYPO_SPELLING: 'DAA' may be misspelled - perhaps 'DATA'?
#1032: FILE: arch/x86/lib/x86-opcode-map.txt:61:
+27: DAA (i64)
     ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1188: FILE: arch/x86/lib/x86-opcode-map.txt:217:
+ba: MOV rDX/r10,Iv
 ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1464: FILE: arch/x86/lib/x86-opcode-map.txt:493:
+ba: Grp8 Ev,Ib (1A)
 ^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#1690: FILE: arch/x86/scripts/gen-insn-attr-x86.awk:2:
+# gen-insn-attr-x86.awk: Instruction attribute table generator

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117142.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 16 warnings, 54 checks, 1860 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117142.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
