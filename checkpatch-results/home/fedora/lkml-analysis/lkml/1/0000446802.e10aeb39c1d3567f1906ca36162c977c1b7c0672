CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#96: FILE: lib/statistic.c:242:
+	spinlock_t lock;

CHECK:BRACES: braces {} should be used on all arms of this statement
#225: FILE: lib/statistic.c:270:
+	if (unlikely(info->flags & STATISTIC_FLAGS_NOINCR))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#227: FILE: lib/statistic.c:272:
+	else {

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#305: FILE: lib/statistic.c:535:
+		seq_printf(seq, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#311: FILE: lib/statistic.c:541:
+		seq_printf(seq, "(fix)");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#317: FILE: lib/statistic.c:547:
+		seq_printf(seq, "\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#348: FILE: lib/statistic.c:571:
+static struct seq_operations statistic_seq_ops_def = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#355: FILE: lib/statistic.c:578:
+static struct seq_operations statistic_seq_ops_data = {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*seq_priv)...) over kzalloc(sizeof(struct statistic_seq_private)...)
#392: FILE: lib/statistic.c:591:
+	seq_priv = kzalloc(sizeof(struct statistic_seq_private), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#397: FILE: lib/statistic.c:596:
+	if (!retval) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#400: FILE: lib/statistic.c:599:
+	} else

WARNING:CONST_STRUCT: struct file_operations should normally be const
#453: FILE: lib/statistic.c:643:
+static struct file_operations statistic_def_fops = {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*seq_priv)...) over kzalloc(sizeof(struct statistic_seq_private)...)
#488: FILE: lib/statistic.c:665:
+	seq_priv = kzalloc(sizeof(struct statistic_seq_private), GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#493: FILE: lib/statistic.c:670:
+	seq_priv->stat = stat = kmalloc(size, GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#611: FILE: lib/statistic.c:784:
+	seq_printf(seq, "%s %Lu\n", name, *(unsigned long long *)stat->data);

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#650: FILE: lib/statistic.c:878:
+	seq_printf(seq, "%s samples %Lu\n%s minimum %Ld\n"

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#651: FILE: lib/statistic.c:879:
+		   "%s average %Ld.%03Ld\n%s maximum %Ld\n"

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#652: FILE: lib/statistic.c:880:
+		   "%s variance %Ld.%03Ld\n", name, num, name, min,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#693: FILE: lib/statistic.c:985:
+		hits = ((u64*)stat->data)[i];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#694: FILE: lib/statistic.c:986:
+		seq_printf(seq, "%s <=%Ld %Lu\n", name, bound, hits);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#698: FILE: lib/statistic.c:988:
+	seq_printf(seq, "%s >%Ld %Lu\n", name, bound, hits);

WARNING:PRINTF_L: %Li is non-standard C, use %lli
#709: FILE: lib/statistic.c:994:
+	seq_printf(seq, " range_min=%Li entries=%Li base_interval=%Lu",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#746: FILE: lib/statistic.c:1173:
+	seq_printf(seq, "%s missed 0x%Lu\n", name,

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#749: FILE: lib/statistic.c:1176:
+		seq_printf(seq, "%s 0x%Lx %Lu\n", name,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000446802.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 15 warnings, 8 checks, 766 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000446802.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
