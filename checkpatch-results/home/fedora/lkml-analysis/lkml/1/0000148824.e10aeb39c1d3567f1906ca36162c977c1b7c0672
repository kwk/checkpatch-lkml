WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: kernel/trace/trace_kprobe.c:168:
+	struct symbol_cache *sc;
+	if (!sym || strlen(sym) == 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sc)...) over kzalloc(sizeof(struct symbol_cache)...)
#88: FILE: kernel/trace/trace_kprobe.c:170:
+	sc = kzalloc(sizeof(struct symbol_cache), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#106: FILE: kernel/trace/trace_kprobe.c:188:
+	struct symbol_cache *sc = data;
+	if (sc->addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#120: FILE: kernel/trace/trace_kprobe.c:278:
+	int i;
+	for (i = 0; i < tp->nr_args; i++)

CHECK:BRACES: braces {} should be used on all arms of this statement
#144: FILE: kernel/trace/trace_kprobe.c:328:
+	if (tmp) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#146: FILE: kernel/trace/trace_kprobe.c:330:
+		ret = strict_strtol(tmp + 1, 0, offset);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: Unbalanced braces around else statement
#152: FILE: kernel/trace/trace_kprobe.c:336:
+	} else

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#200: FILE: kernel/trace/trace_kprobe.c:459:
+				ret = strict_strtoul(tmp + 1, 0, &param);

WARNING:LINE_SPACING: Missing a blank line after declarations
#225: FILE: kernel/trace/trace_kprobe.c:554:
+			struct symbol_cache *sc = tp->args[i].data;
+			seq_printf(m, " @%s%+ld", sc->symbol, sc->offset);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148824.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 3 checks, 171 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148824.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
