WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#55: FILE: arch/x86/Kconfig:454:
+config KVM_GUEST_VBUS
+       tristate "KVM virtual-bus (VBUS) guest-side support"
+       depends on KVM_GUEST
+       select VBUS_DRIVERS
+       default y
+       ---help---
+          This option enables guest-side support for accessing virtual-bus
+	  devices.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#77: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: drivers/vbus/proxy/kvm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#106: FILE: drivers/vbus/proxy/kvm.c:17:
+ * along with this program; if not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#107: FILE: drivers/vbus/proxy/kvm.c:18:
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#132: FILE: drivers/vbus/proxy/kvm.c:43:
+	spinlock_t                lock;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: drivers/vbus/proxy/kvm.c:101:
+       return container_of(signal, struct _signal, signal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: drivers/vbus/proxy/kvm.c:107:
+       return container_of(node, struct _signal, node);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#287: FILE: drivers/vbus/proxy/kvm.c:198:
+		printk(KERN_ERR "KVM-VBUS: Error closing device %s/%lld: %d\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#316: FILE: drivers/vbus/proxy/kvm.c:227:
+	if (signal) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < sizeof(*sdesc)'
#321: FILE: drivers/vbus/proxy/kvm.c:232:
+		if (!sdesc
+		    || (len < sizeof(*sdesc))
+		    || ((void *)sdesc < ptr)
+		    || ((void *)sdesc > (ptr + len - sizeof(*sdesc))))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#322: FILE: drivers/vbus/proxy/kvm.c:233:
+		if (!sdesc
+		    || (len < sizeof(*sdesc))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#323: FILE: drivers/vbus/proxy/kvm.c:234:
+		    || (len < sizeof(*sdesc))
+		    || ((void *)sdesc < ptr)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#324: FILE: drivers/vbus/proxy/kvm.c:235:
+		    || ((void *)sdesc < ptr)
+		    || ((void *)sdesc > (ptr + len - sizeof(*sdesc))))

CHECK:BRACES: Unbalanced braces around else statement
#343: FILE: drivers/vbus/proxy/kvm.c:254:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#425: FILE: drivers/vbus/proxy/kvm.c:336:
+	struct kvm_vbus_device *new = kzalloc(sizeof(*new), GFP_KERNEL);
+	if (!new) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#426: FILE: drivers/vbus/proxy/kvm.c:337:
+		printk(KERN_ERR "KVM_VBUS: Out of memory on add_event\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#451: FILE: drivers/vbus/proxy/kvm.c:362:
+		printk(KERN_WARNING "KVM-VBUS: devdrop failed: %lld\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*kvm_vbus.ring)...) over kzalloc(sizeof(struct kvm_vbus_event)...)
#493: FILE: drivers/vbus/proxy/kvm.c:404:
+	kvm_vbus.ring = kzalloc(sizeof(struct kvm_vbus_event) * qlen,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#493: FILE: drivers/vbus/proxy/kvm.c:404:
+	kvm_vbus.ring = kzalloc(sizeof(struct kvm_vbus_event) * qlen,
+				GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#507: FILE: drivers/vbus/proxy/kvm.c:418:
+	BUG_ON(ret < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#514: FILE: drivers/vbus/proxy/kvm.c:425:
+	BUG_ON(ret < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#525: FILE: drivers/vbus/proxy/kvm.c:436:
+		BUG_ON(iter.desc->valid);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#538: FILE: drivers/vbus/proxy/kvm.c:449:
+		BUG_ON(ret < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#560: FILE: drivers/vbus/proxy/kvm.c:471:
+	BUG_ON(ret < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#563: FILE: drivers/vbus/proxy/kvm.c:474:
+	BUG_ON(ret < 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#593: FILE: drivers/vbus/proxy/kvm.c:504:
+			printk(KERN_WARNING "KVM_VBUS: Unexpected event %d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#602: FILE: drivers/vbus/proxy/kvm.c:513:
+		BUG_ON(ret < 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#750: FILE: drivers/vbus/proxy/kvm.c:661:
+		printk(KERN_ERR "KVM_VBUS: Could not register with host: %d\n",

WARNING:TYPO_SPELLING: 'Cound' may be misspelled - perhaps 'Could'?
#762: FILE: drivers/vbus/proxy/kvm.c:673:
+		printk(KERN_ERR "KVM_VBUS: Cound not init eventq\n");
 		                           ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#762: FILE: drivers/vbus/proxy/kvm.c:673:
+		printk(KERN_ERR "KVM_VBUS: Cound not init eventq\n");

WARNING:TYPO_SPELLING: 'Cound' may be misspelled - perhaps 'Could'?
#768: FILE: drivers/vbus/proxy/kvm.c:679:
+		printk(KERN_ERR "KVM_VBUS: Cound not setup ring\n");
 		                           ^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#768: FILE: drivers/vbus/proxy/kvm.c:679:
+		printk(KERN_ERR "KVM_VBUS: Cound not setup ring\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#777: FILE: drivers/vbus/proxy/kvm.c:688:
+		printk(KERN_ERR "KVM_VBUS: Failed to create IRQ\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#783: FILE: drivers/vbus/proxy/kvm.c:694:
+		printk(KERN_ERR "KVM_VBUS: Failed to register IRQ %d\n: %d",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#793: FILE: drivers/vbus/proxy/kvm.c:704:
+		printk(KERN_ERR "KVM_VBUS: Could not register with host: %d\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#805: FILE: drivers/vbus/proxy/kvm.c:716:
+
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141509.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 26 warnings, 9 checks, 747 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141509.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
