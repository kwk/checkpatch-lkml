WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#56: FILE: iscsi_linux_defs.h:52:
+# define SET_SG_TABLE(sg, cnt)         sg_init_table((struct scatterlist *)&sg[0], cnt);       \
+                                               sg_mark_end((struct scatterlist *)&sg[cnt - 1]);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sg' - possible side-effects?
#56: FILE: iscsi_linux_defs.h:52:
+# define SET_SG_TABLE(sg, cnt)         sg_init_table((struct scatterlist *)&sg[0], cnt);       \
+                                               sg_mark_end((struct scatterlist *)&sg[cnt - 1]);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sg' may be better as '(sg)' to avoid precedence issues
#56: FILE: iscsi_linux_defs.h:52:
+# define SET_SG_TABLE(sg, cnt)         sg_init_table((struct scatterlist *)&sg[0], cnt);       \
+                                               sg_mark_end((struct scatterlist *)&sg[cnt - 1]);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cnt' - possible side-effects?
#56: FILE: iscsi_linux_defs.h:52:
+# define SET_SG_TABLE(sg, cnt)         sg_init_table((struct scatterlist *)&sg[0], cnt);       \
+                                               sg_mark_end((struct scatterlist *)&sg[cnt - 1]);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#56: FILE: iscsi_linux_defs.h:52:
+# define SET_SG_TABLE(sg, cnt)         sg_init_table((struct scatterlist *)&sg[0], cnt);       \
+                                               sg_mark_end((struct scatterlist *)&sg[cnt - 1]);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#57: FILE: iscsi_linux_defs.h:53:
+                                               sg_mark_end((struct scatterlist *)&sg[cnt - 1]);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: iscsi_linux_defs.h:53:
+                                               sg_mark_end((struct scatterlist *)&sg[cnt - 1]);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: iscsi_linux_defs.h:59:
+#define SET_SG_TABLE(sg, cnt)  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: iscsi_target_rd.c:212:
+               SET_SG_TABLE(sg, sg_per_table);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: iscsi_target_rd.c:212:
+               SET_SG_TABLE(sg, sg_per_table);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: iscsi_target_transport.c:5099:
+       SET_SG_TABLE(task->task_buf, task->task_sg_num);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000322353.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 5 warnings, 3 checks, 30 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000322353.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
