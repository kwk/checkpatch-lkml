CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma != tail_vma'
#258: FILE: fs/proc/task_mmu.c:166:
+	if (vma && (vma != tail_vma) && (next = vma_next(vma)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#258: FILE: fs/proc/task_mmu.c:166:
+	if (vma && (vma != tail_vma) && (next = vma_next(vma)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: mm/memory.c:278:
+void free_pgtables(struct mmu_gather *tlb, struct list_head *vmas,
+		struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: mm/memory.c:960:
+unsigned long unmap_vmas(struct mmu_gather **tlbp, struct list_head *vmas,
 		struct vm_area_struct *vma, unsigned long start_addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: mm/memory.c:1063:
+	end = unmap_vmas(&tlb, &vma->vm_mm->mm_vmas, vma,
+			address, end, &nr_accounted, details);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: mm/mempolicy.c:788:
+	check_range(mm, __vma_next(&mm->mm_vmas, NULL)->vm_start, TASK_SIZE, &nmask,
 			flags | MPOL_MF_DISCONTIG_OK, &pagelist);

WARNING:LINE_SPACING: Missing a blank line after declarations
#508: FILE: mm/mremap.c:372:
+		struct vm_area_struct *next = vma_next(vma);
+		if (next)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zap_details *' should also have an identifier name
#746: FILE: include/linux/mm.h:799:
+unsigned long unmap_vmas(struct mmu_gather **tlb, struct list_head *vmas,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: include/linux/mm.h:800:
+unsigned long unmap_vmas(struct mmu_gather **tlb, struct list_head *vmas,
 		struct vm_area_struct *start_vma, unsigned long start_addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: mm/mmap.c:47:
+static void unmap_region(struct mm_struct *mm, struct list_head *vmas,
 		struct vm_area_struct *vma, struct vm_area_struct *prev,

WARNING:LINE_SPACING: Missing a blank line after declarations
#852: FILE: mm/mmap.c:336:
+	struct vm_area_struct *vma;
+	list_for_each_entry(vma, &mm->mm_vmas, vm_list)

CHECK:BRACES: braces {} should be used on all arms of this statement
#869: FILE: mm/mmap.c:393:
+		if (rb_parent) {
[...]
-			vma->vm_next = NULL;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#872: FILE: mm/mmap.c:396:
+				rb_entry(rb_parent,
 					struct vm_area_struct, vm_rb);

CHECK:BRACES: Unbalanced braces around else statement
#876: FILE: mm/mmap.c:398:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < next->vm_end'
#982: FILE: mm/mmap.c:1520:
+			if (!next || (addr < next->vm_end))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1001: FILE: mm/mmap.c:1745:
+static void remove_vma_list(struct mm_struct *mm, struct list_head *vmas,
+		struct vm_area_struct *vma)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1023: FILE: mm/mmap.c:1767:
+static void unmap_region(struct mm_struct *mm, struct list_head *vmas,
 		struct vm_area_struct *vma, struct vm_area_struct *prev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1040: FILE: mm/mmap.c:1780:
+	free_pgtables(tlb, vmas, vma,
+			prev ? prev->vm_end : FIRST_USER_ADDRESS,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000171073.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 3 warnings, 14 checks, 1004 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000171073.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
