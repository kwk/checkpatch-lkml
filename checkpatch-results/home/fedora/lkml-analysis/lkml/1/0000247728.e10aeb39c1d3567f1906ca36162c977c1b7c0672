WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
Rework the lookup code to use vfs_path_lookup as much as possible, to ensure

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#81: FILE: fs/unionfs/inode.c:204:
+	ret = unionfs_lookup_full(dentry, nd, INTERPOSE_LOOKUP);
 	                                  ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#91: FILE: fs/unionfs/inode.c:216:
+			BUG_ON(dbstart(dentry) < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#187: FILE: fs/unionfs/lookup.c:415:
+	tmp = unionfs_lookup_full(dentry, &nd, INTERPOSE_PARTIAL);
 	                                   ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#271: FILE: fs/unionfs/lookup.c:673:
+	BUG_ON(bstart < 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bopaque >= 0'
#274: FILE: fs/unionfs/lookup.c:676:
+	if ((bopaque >= 0) && (bopaque < bend))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bopaque < bend'
#274: FILE: fs/unionfs/lookup.c:676:
+	if ((bopaque >= 0) && (bopaque < bend))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#279: FILE: fs/unionfs/lookup.c:681:
+	for (bindex = bstart; bindex <= bend; bindex++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#331: FILE: fs/unionfs/lookup.c:733:
+		BUG_ON(!lower_mnt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#370: FILE: fs/unionfs/lookup.c:772:
+	BUG_ON(dbstart(dentry) < 0 && dbend(dentry) >= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#371: FILE: fs/unionfs/lookup.c:773:
+	BUG_ON(dbstart(dentry) >= 0 && dbend(dentry) < 0);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#437: FILE: fs/unionfs/lookup.c:839:
+	pos_start = pos_end = -1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#494: FILE: fs/unionfs/lookup.c:896:
+		BUG_ON(dbstart(dentry) < 0 && dbend(dentry) >= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#495: FILE: fs/unionfs/lookup.c:897:
+		BUG_ON(dbstart(dentry) >= 0 && dbend(dentry) < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#498: FILE: fs/unionfs/lookup.c:900:
+		BUG_ON(dbstart(d_interposed) < 0 && dbend(d_interposed) >= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#499: FILE: fs/unionfs/lookup.c:901:
+		BUG_ON(dbstart(d_interposed) >= 0 && dbend(d_interposed) < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#515: FILE: fs/unionfs/rename.c:198:
+		BUG_ON(bindex < 0);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#527: FILE: fs/unionfs/union.h:297:
+extern int realloc_dentry_private_data(struct dentry *dentry);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#535: FILE: fs/unionfs/union.h:313:
+extern struct dentry *unionfs_lookup_full(struct dentry *dentry,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247728.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 6 checks, 463 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247728.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
