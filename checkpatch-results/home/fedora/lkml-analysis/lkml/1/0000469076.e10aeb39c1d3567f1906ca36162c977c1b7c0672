WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#62: FILE: arch/i386/Kconfig:202:
+config VMI
+	bool "VMI Paravirt-ops support"
+	depends on PARAVIRT
+	default y
+	help
+	  VMI provides a paravirtualized interface to multiple hypervisors
+	  include VMware ESX server and Xen by connecting to a ROM module
+	  provided by the hypervisor.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#151: FILE: arch/i386/kernel/smpboot.c:68:
 static int __devinitdata smp_b_stepping;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#167: FILE: arch/i386/kernel/vmi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#184: FILE: arch/i386/kernel/vmi.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#185: FILE: arch/i386/kernel/vmi.c:19:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#197: FILE: arch/i386/kernel/vmi.c:31:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#201: FILE: arch/i386/kernel/vmi.c:35:
+#include <asm/processor.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#208: FILE: arch/i386/kernel/vmi.c:42:
+#define call_vrom_func(rom,func) \
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rom' may be better as '(rom)' to avoid precedence issues
#208: FILE: arch/i386/kernel/vmi.c:42:
+#define call_vrom_func(rom,func) \
+   (((VROMFUNC *)(rom->func))())

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'func' may be better as '(func)' to avoid precedence issues
#208: FILE: arch/i386/kernel/vmi.c:42:
+#define call_vrom_func(rom,func) \
+   (((VROMFUNC *)(rom->func))())

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: arch/i386/kernel/vmi.c:43:
+   (((VROMFUNC *)(rom->func))())$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#211: FILE: arch/i386/kernel/vmi.c:45:
+#define call_vrom_long_func(rom,func,arg) \
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#211: FILE: arch/i386/kernel/vmi.c:45:
+#define call_vrom_long_func(rom,func,arg) \
                                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rom' may be better as '(rom)' to avoid precedence issues
#211: FILE: arch/i386/kernel/vmi.c:45:
+#define call_vrom_long_func(rom,func,arg) \
+   (((VROMLONGFUNC *)(rom->func)) (arg))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'func' may be better as '(func)' to avoid precedence issues
#211: FILE: arch/i386/kernel/vmi.c:45:
+#define call_vrom_long_func(rom,func,arg) \
+   (((VROMLONGFUNC *)(rom->func)) (arg))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: arch/i386/kernel/vmi.c:46:
+   (((VROMLONGFUNC *)(rom->func)) (arg))$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#225: FILE: arch/i386/kernel/vmi.c:59:
+	void (*cpuid)(void /* non-c */);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#229: FILE: arch/i386/kernel/vmi.c:63:
+	void (*allocate_page)(u32, u32, u32, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#229: FILE: arch/i386/kernel/vmi.c:63:
+	void (*allocate_page)(u32, u32, u32, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#229: FILE: arch/i386/kernel/vmi.c:63:
+	void (*allocate_page)(u32, u32, u32, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#229: FILE: arch/i386/kernel/vmi.c:63:
+	void (*allocate_page)(u32, u32, u32, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#229: FILE: arch/i386/kernel/vmi.c:63:
+	void (*allocate_page)(u32, u32, u32, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#230: FILE: arch/i386/kernel/vmi.c:64:
+	void (*release_page)(u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#230: FILE: arch/i386/kernel/vmi.c:64:
+	void (*release_page)(u32, u32);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#231: FILE: arch/i386/kernel/vmi.c:65:
+	void (*set_pte)(pte_t, pte_t *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t' should also have an identifier name
#231: FILE: arch/i386/kernel/vmi.c:65:
+	void (*set_pte)(pte_t, pte_t *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t *' should also have an identifier name
#231: FILE: arch/i386/kernel/vmi.c:65:
+	void (*set_pte)(pte_t, pte_t *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#231: FILE: arch/i386/kernel/vmi.c:65:
+	void (*set_pte)(pte_t, pte_t *, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#232: FILE: arch/i386/kernel/vmi.c:66:
+	void (*update_pte)(pte_t *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t *' should also have an identifier name
#232: FILE: arch/i386/kernel/vmi.c:66:
+	void (*update_pte)(pte_t *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#232: FILE: arch/i386/kernel/vmi.c:66:
+	void (*update_pte)(pte_t *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#233: FILE: arch/i386/kernel/vmi.c:67:
+	void (*set_linear_mapping)(int, u32, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#233: FILE: arch/i386/kernel/vmi.c:67:
+	void (*set_linear_mapping)(int, u32, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#233: FILE: arch/i386/kernel/vmi.c:67:
+	void (*set_linear_mapping)(int, u32, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#233: FILE: arch/i386/kernel/vmi.c:67:
+	void (*set_linear_mapping)(int, u32, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#234: FILE: arch/i386/kernel/vmi.c:68:
+	void (*flush_tlb)(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#235: FILE: arch/i386/kernel/vmi.c:69:
+	void (*set_initial_ap_state)(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#235: FILE: arch/i386/kernel/vmi.c:69:
+	void (*set_initial_ap_state)(int, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#239: FILE: arch/i386/kernel/vmi.c:73:
+extern struct paravirt_patch __start_parainstructions[],

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#254: FILE: arch/i386/kernel/vmi.c:88:
+};
+#define IRQ_PATCH_INT_MASK 0

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: arch/i386/kernel/vmi.c:93:
+        *(unsigned long *)(eip+1) = dest-eip-5;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: arch/i386/kernel/vmi.c:93:
+        *(unsigned long *)(eip+1) = dest-eip-5;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#259: FILE: arch/i386/kernel/vmi.c:93:
+        *(unsigned long *)(eip+1) = dest-eip-5;
                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#259: FILE: arch/i386/kernel/vmi.c:93:
+        *(unsigned long *)(eip+1) = dest-eip-5;
                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#259: FILE: arch/i386/kernel/vmi.c:93:
+        *(unsigned long *)(eip+1) = dest-eip-5;
                                             ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#262: FILE: arch/i386/kernel/vmi.c:96:
+static unsigned patch_internal(int call, unsigned len, void *insns)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#262: FILE: arch/i386/kernel/vmi.c:96:
+static unsigned patch_internal(int call, unsigned len, void *insns)

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: arch/i386/kernel/vmi.c:100:
+	struct vmi_relocation_info *const rel = (struct vmi_relocation_info *)&reloc;
+	reloc = call_vrom_long_func(vmi_rom, get_reloc,	call);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#267: FILE: arch/i386/kernel/vmi.c:101:
+	switch(rel->type) {
+		case VMI_RELOCATION_CALL_REL:
[...]
+		case VMI_RELOCATION_JUMP_REL:
[...]
+		case VMI_RELOCATION_NOP:
[...]
+		case VMI_RELOCATION_NONE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#267: FILE: arch/i386/kernel/vmi.c:101:
+	switch(rel->type) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#269: FILE: arch/i386/kernel/vmi.c:103:
+			BUG_ON(len < 5);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#275: FILE: arch/i386/kernel/vmi.c:109:
+			BUG_ON(len < 5);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#289: FILE: arch/i386/kernel/vmi.c:123:
+			BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#298: FILE: arch/i386/kernel/vmi.c:132:
+static unsigned vmi_patch(u8 type, u16 clobbers, void *insns, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#298: FILE: arch/i386/kernel/vmi.c:132:
+static unsigned vmi_patch(u8 type, u16 clobbers, void *insns, unsigned len)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#300: FILE: arch/i386/kernel/vmi.c:134:
+	switch (type) {
+		case PARAVIRT_IRQ_DISABLE:
[...]
+		case PARAVIRT_IRQ_ENABLE:
[...]
+		case PARAVIRT_RESTORE_FLAGS:
[...]
+		case PARAVIRT_SAVE_FLAGS:
[...]
+        	case PARAVIRT_SAVE_FLAGS_IRQ_DISABLE:
[...]
+		case PARAVIRT_INTERRUPT_RETURN:
[...]
+		case PARAVIRT_STI_SYSEXIT:
[...]
+		default:

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: arch/i386/kernel/vmi.c:143:
+        ^Icase PARAVIRT_SAVE_FLAGS_IRQ_DISABLE:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#309: FILE: arch/i386/kernel/vmi.c:143:
+        ^Icase PARAVIRT_SAVE_FLAGS_IRQ_DISABLE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: arch/i386/kernel/vmi.c:143:
+        ^Icase PARAVIRT_SAVE_FLAGS_IRQ_DISABLE:$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#312: FILE: arch/i386/kernel/vmi.c:146:
+				patch_internal(VMI_CALL_DisableInterrupts, len-5, insns+5);
 				                                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#312: FILE: arch/i386/kernel/vmi.c:146:
+				patch_internal(VMI_CALL_DisableInterrupts, len-5, insns+5);
 				                                                       ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#314: FILE: arch/i386/kernel/vmi.c:148:
+				return 10;
+			} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#320: FILE: arch/i386/kernel/vmi.c:154:
+				BUG_ON(len < 5);

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: arch/i386/kernel/vmi.c:171:
+                               unsigned int *ecx, unsigned int *edx)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: arch/i386/kernel/vmi.c:171:
+static void vmi_cpuid(unsigned int *eax, unsigned int *ebx,
+                               unsigned int *ecx, unsigned int *edx)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: arch/i386/kernel/vmi.c:171:
+                               unsigned int *ecx, unsigned int *edx)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#340: FILE: arch/i386/kernel/vmi.c:174:
+	int override = 0;
+	if (*eax == 1)

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: arch/i386/kernel/vmi.c:176:
+        asm volatile ("call *%6"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: arch/i386/kernel/vmi.c:176:
+        asm volatile ("call *%6"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: arch/i386/kernel/vmi.c:177:
+                      : "=a" (*eax),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: arch/i386/kernel/vmi.c:177:
+                      : "=a" (*eax),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: arch/i386/kernel/vmi.c:178:
+                        "=b" (*ebx),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: arch/i386/kernel/vmi.c:178:
+                        "=b" (*ebx),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: arch/i386/kernel/vmi.c:179:
+                        "=c" (*ecx),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: arch/i386/kernel/vmi.c:179:
+                        "=c" (*ecx),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#346: FILE: arch/i386/kernel/vmi.c:180:
+                        "=d" (*edx)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: arch/i386/kernel/vmi.c:180:
+                        "=d" (*edx)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: arch/i386/kernel/vmi.c:181:
+                      : "0" (*eax), "2" (*ecx), "r" (vmi_ops.cpuid));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: arch/i386/kernel/vmi.c:181:
+                      : "0" (*eax), "2" (*ecx), "r" (vmi_ops.cpuid));$

WARNING:LINE_SPACING: Missing a blank line after declarations
#371: FILE: arch/i386/kernel/vmi.c:205:
+	struct desc_struct *gdt = get_cpu_gdt_table(cpu);
+	vmi_maybe_load_tls(gdt, GDT_ENTRY_TLS_MIN + 0, &t->tls_array[0]);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#376: FILE: arch/i386/kernel/vmi.c:210:
+static void vmi_set_ldt(const void *addr, unsigned entries)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#378: FILE: arch/i386/kernel/vmi.c:212:
+	unsigned cpu = smp_processor_id();

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#385: FILE: arch/i386/kernel/vmi.c:219:
+	vmi_ops._set_ldt(entries ? GDT_ENTRY_LDT*sizeof(struct desc_struct) : 0);
 	                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#390: FILE: arch/i386/kernel/vmi.c:224:
+	vmi_ops.set_tr(GDT_ENTRY_TSS*sizeof(struct desc_struct));
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: arch/i386/kernel/vmi.c:228:
+static void vmi_load_esp0(struct tss_struct *tss,
+				   struct thread_struct *thread)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#421: FILE: arch/i386/kernel/vmi.c:255:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#425: FILE: arch/i386/kernel/vmi.c:259:
+#define MAX_BOOT_PTS (2048+4+1)
                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#425: FILE: arch/i386/kernel/vmi.c:259:
+#define MAX_BOOT_PTS (2048+4+1)
                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#427: FILE: arch/i386/kernel/vmi.c:261:
+#define MAX_BOOT_PTS (1024+1)
                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#444: FILE: arch/i386/kernel/vmi.c:278:
+	int i;
+	BUG_ON(!mem_map);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#444: FILE: arch/i386/kernel/vmi.c:278:
+	BUG_ON(!mem_map);

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: arch/i386/kernel/vmi.c:281:
+		struct page *page = pfn_to_page(boot_page_allocations[i].pfn);
+		page->type = boot_page_allocations[i].type;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#456: FILE: arch/i386/kernel/vmi.c:290:
+	BUG_ON(num_boot_page_allocations >= MAX_BOOT_PTS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: arch/i386/kernel/vmi.c:313:
+		BUG_ON(ptr[i]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#494: FILE: arch/i386/kernel/vmi.c:328:
+		struct page *page = pfn_to_page(pfn);
+		if (type != VMI_PAGE_NORMAL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#495: FILE: arch/i386/kernel/vmi.c:329:
+			BUG_ON(page->type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#497: FILE: arch/i386/kernel/vmi.c:331:
+			BUG_ON(page->type == VMI_PAGE_NORMAL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#515: FILE: arch/i386/kernel/vmi.c:349:
+		struct page *page = pfn_to_page(pfn);
+		BUG_ON((page->type ^ type) & VMI_PAGE_PAE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#515: FILE: arch/i386/kernel/vmi.c:349:
+		BUG_ON((page->type ^ type) & VMI_PAGE_PAE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#516: FILE: arch/i386/kernel/vmi.c:350:
+		BUG_ON(type == VMI_PAGE_NORMAL && page->type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#517: FILE: arch/i386/kernel/vmi.c:351:
+		BUG_ON((type & page->type) == 0);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: arch/i386/kernel/vmi.c:355:
+#define vmi_set_page_type(p,t) do { } while (0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#522: FILE: arch/i386/kernel/vmi.c:356:
+#define vmi_check_page_type(p,t) do { } while (0)
                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#533: FILE: arch/i386/kernel/vmi.c:367:
+ ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#533: FILE: arch/i386/kernel/vmi.c:367:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: arch/i386/kernel/vmi.c:367:
+ ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#538: FILE: arch/i386/kernel/vmi.c:372:
+ ^Ivmi_set_page_type(pfn, VMI_PAGE_L2);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#538: FILE: arch/i386/kernel/vmi.c:372:
+ ^Ivmi_set_page_type(pfn, VMI_PAGE_L2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: arch/i386/kernel/vmi.c:372:
+ ^Ivmi_set_page_type(pfn, VMI_PAGE_L2);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: arch/i386/kernel/vmi.c:378:
+ ^Ivmi_set_page_type(pfn, VMI_PAGE_L2 | VMI_PAGE_CLONE);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#544: FILE: arch/i386/kernel/vmi.c:378:
+ ^Ivmi_set_page_type(pfn, VMI_PAGE_L2 | VMI_PAGE_CLONE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: arch/i386/kernel/vmi.c:378:
+ ^Ivmi_set_page_type(pfn, VMI_PAGE_L2 | VMI_PAGE_CLONE);$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mm' - possible side-effects?
#571: FILE: arch/i386/kernel/vmi.c:405:
+#define is_current_as(mm, mustbeuser) ((mm) == current->active_mm ||    \
+                                       (!mustbeuser && (mm) == &init_mm))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mustbeuser' may be better as '(mustbeuser)' to avoid precedence issues
#571: FILE: arch/i386/kernel/vmi.c:405:
+#define is_current_as(mm, mustbeuser) ((mm) == current->active_mm ||    \
+                                       (!mustbeuser && (mm) == &init_mm))

ERROR:CODE_INDENT: code indent should use tabs where possible
#572: FILE: arch/i386/kernel/vmi.c:406:
+                                       (!mustbeuser && (mm) == &init_mm))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: arch/i386/kernel/vmi.c:406:
+                                       (!mustbeuser && (mm) == &init_mm))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#574: FILE: arch/i386/kernel/vmi.c:408:
+        ((level) | (is_current_as(mm, user) ?                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: arch/i386/kernel/vmi.c:408:
+        ((level) | (is_current_as(mm, user) ?                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#575: FILE: arch/i386/kernel/vmi.c:409:
+                (VMI_PAGE_CURRENT_AS | ((addr) & VMI_PAGE_VA_MASK)) : 0))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: arch/i386/kernel/vmi.c:409:
+                (VMI_PAGE_CURRENT_AS | ((addr) & VMI_PAGE_VA_MASK)) : 0))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: arch/i386/kernel/vmi.c:411:
+        ((level) | (is_current_as(mm, user) ?                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: arch/i386/kernel/vmi.c:411:
+        ((level) | (is_current_as(mm, user) ?                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#578: FILE: arch/i386/kernel/vmi.c:412:
+                (VMI_PAGE_DEFER | VMI_PAGE_CURRENT_AS | ((addr) & VMI_PAGE_VA_MASK)) : 0))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: arch/i386/kernel/vmi.c:412:
+                (VMI_PAGE_DEFER | VMI_PAGE_CURRENT_AS | ((addr) & VMI_PAGE_VA_MASK)) : 0))$

WARNING:LINE_SPACING: Missing a blank line after declarations
#609: FILE: arch/i386/kernel/vmi.c:443:
+	const pte_t pte = { pmdval.pmd, pmdval.pmd >> 32 };
+	vmi_check_page_type(__pa(pmdp) >> PAGE_SHIFT, VMI_PAGE_PMD);

WARNING:LINE_SPACING: Missing a blank line after declarations
#612: FILE: arch/i386/kernel/vmi.c:446:
+	const pte_t pte = { pmdval.pud.pgd.pgd };
+	vmi_check_page_type(__pa(pmdp) >> PAGE_SHIFT, VMI_PAGE_PGD);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#628: FILE: arch/i386/kernel/vmi.c:462:
+	set_64bit((unsigned long long *)ptep,pte_val(pteval));
 	                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#642: FILE: arch/i386/kernel/vmi.c:476:
+	const pte_t pte = { pudval.pgd.pgd, pudval.pgd.pgd >> 32 };
+	vmi_check_page_type(__pa(pudp) >> PAGE_SHIFT, VMI_PAGE_PGD);

WARNING:LINE_SPACING: Missing a blank line after declarations
#649: FILE: arch/i386/kernel/vmi.c:483:
+	const pte_t pte = { 0 };
+	vmi_check_page_type(__pa(ptep) >> PAGE_SHIFT, VMI_PAGE_PTE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#656: FILE: arch/i386/kernel/vmi.c:490:
+	const pte_t pte = { 0 };
+	vmi_check_page_type(__pa(pmd) >> PAGE_SHIFT, VMI_PAGE_PMD);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#663: FILE: arch/i386/kernel/vmi.c:497:
+extern void setup_pda(void);

CHECK:SPACING: No space is necessary after a cast
#673: FILE: arch/i386/kernel/vmi.c:507:
+	ap.gdtr_base = (unsigned long) get_cpu_gdt_table(phys_apicid);

CHECK:SPACING: No space is necessary after a cast
#676: FILE: arch/i386/kernel/vmi.c:510:
+	ap.idtr_base = (unsigned long) idt_table;

CHECK:SPACING: No space is necessary after a cast
#681: FILE: arch/i386/kernel/vmi.c:515:
+	ap.eip = (unsigned long) start_eip;

CHECK:SPACING: No space is necessary after a cast
#683: FILE: arch/i386/kernel/vmi.c:517:
+	ap.esp = (unsigned long) start_esp;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#697: FILE: arch/i386/kernel/vmi.c:531:
+		unsigned l, h;

WARNING:LINE_SPACING: Missing a blank line after declarations
#698: FILE: arch/i386/kernel/vmi.c:532:
+		unsigned l, h;
+		rdmsr(MSR_EFER, l, h);

CHECK:SPACING: No space is necessary after a cast
#699: FILE: arch/i386/kernel/vmi.c:533:
+		ap.efer = (unsigned long long) h << 32 | l;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#724: FILE: arch/i386/kernel/vmi.c:558:
+	    rom->api_version_min+1 < VMI_API_REV_MINOR+1) {
 	                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#724: FILE: arch/i386/kernel/vmi.c:558:
+	    rom->api_version_min+1 < VMI_API_REV_MINOR+1) {
 	                                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#725: FILE: arch/i386/kernel/vmi.c:559:
+		printk(KERN_WARNING "VMI: Found mismatched rom version %d.%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: arch/i386/kernel/vmi.c:560:
+		printk(KERN_WARNING "VMI: Found mismatched rom version %d.%d\n",
+				rom->api_version_maj,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#737: FILE: arch/i386/kernel/vmi.c:571:
+		printk(KERN_WARNING "VMI: ROM does not contain PCI header.\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#741: FILE: arch/i386/kernel/vmi.c:575:
+	pci = (struct pci_header *)((char *)rom+rom->pci_header_offs);
 	                                       ^

CHECK:CAMELCASE: Avoid CamelCase: <vendorID>
#742: FILE: arch/i386/kernel/vmi.c:576:
+	if (pci->vendorID != PCI_VENDOR_ID_VMWARE ||

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <deviceID>
#743: FILE: arch/i386/kernel/vmi.c:577:
+	    pci->deviceID != PCI_DEVICE_ID_VMWARE_VMI) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#745: FILE: arch/i386/kernel/vmi.c:579:
+		printk(KERN_WARNING "VMI: ROM from unknown manufacturer\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#749: FILE: arch/i386/kernel/vmi.c:583:
+		pnp = (struct pnp_header *)((char *)rom+rom->pnp_header_offs);
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#751: FILE: arch/i386/kernel/vmi.c:585:
+			manufacturer = (const char *)rom+pnp->manufacturer_offset;
 			                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#753: FILE: arch/i386/kernel/vmi.c:587:
+			product = (const char *)rom+pnp->product_offset;
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#757: FILE: arch/i386/kernel/vmi.c:591:
+		license = (char *)rom+rom->license_offs;
 		                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#759: FILE: arch/i386/kernel/vmi.c:593:
+	printk(KERN_INFO "VMI: Found %s %s, API version %d.%d, ROM version %d.%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: arch/i386/kernel/vmi.c:594:
+	printk(KERN_INFO "VMI: Found %s %s, API version %d.%d, ROM version %d.%d\n",
+		manufacturer, product,

ERROR:CODE_INDENT: code indent should use tabs where possible
#764: FILE: arch/i386/kernel/vmi.c:598:
+        license_gplok = license_is_gpl_compatible(license);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: arch/i386/kernel/vmi.c:598:
+        license_gplok = license_is_gpl_compatible(license);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#765: FILE: arch/i386/kernel/vmi.c:599:
+        if (!license_gplok) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: arch/i386/kernel/vmi.c:599:
+        if (!license_gplok) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#766: FILE: arch/i386/kernel/vmi.c:600:
+                printk(KERN_WARNING "VMI: ROM license '%s' taints kernel... "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: arch/i386/kernel/vmi.c:600:
+                printk(KERN_WARNING "VMI: ROM license '%s' taints kernel... "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#766: FILE: arch/i386/kernel/vmi.c:600:
+                printk(KERN_WARNING "VMI: ROM license '%s' taints kernel... "

WARNING:SPLIT_STRING: quoted string split across lines
#767: FILE: arch/i386/kernel/vmi.c:601:
+                printk(KERN_WARNING "VMI: ROM license '%s' taints kernel... "
+		       "inlining disabled\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#768: FILE: arch/i386/kernel/vmi.c:602:
+                       license);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: arch/i386/kernel/vmi.c:602:
+                       license);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: arch/i386/kernel/vmi.c:603:
+                add_taint(TAINT_PROPRIETARY_MODULE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: arch/i386/kernel/vmi.c:603:
+                add_taint(TAINT_PROPRIETARY_MODULE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#770: FILE: arch/i386/kernel/vmi.c:604:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: arch/i386/kernel/vmi.c:604:
+        }$

WARNING:LINE_SPACING: Missing a blank line after declarations
#784: FILE: arch/i386/kernel/vmi.c:618:
+		struct vrom_header *romstart;
+		romstart = (struct vrom_header *)isa_bus_to_virt(base);

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: arch/i386/kernel/vmi.c:632:
+ ^I/* We must establish the lowmem mapping for MMU ops to work */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#798: FILE: arch/i386/kernel/vmi.c:632:
+ ^I/* We must establish the lowmem mapping for MMU ops to work */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: arch/i386/kernel/vmi.c:632:
+ ^I/* We must establish the lowmem mapping for MMU ops to work */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#810: FILE: arch/i386/kernel/vmi.c:644:
+	const struct vmi_relocation_info *rel = (struct vmi_relocation_info *)&reloc;
+	reloc = call_vrom_long_func(vmi_rom, get_reloc,	vmicall);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#811: FILE: arch/i386/kernel/vmi.c:645:
+	BUG_ON(rel->type == VMI_RELOCATION_JUMP_REL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#827: FILE: arch/i386/kernel/vmi.c:661:
+		BUG_ON(rel->type != VMI_RELOCATION_CALL_REL);	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#842: FILE: arch/i386/kernel/vmi.c:676:
+		printk(KERN_ERR "VMI ROM failed to initialize!");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#871: FILE: arch/i386/kernel/vmi.c:705:
+		BUG_ON(rel->type != VMI_RELOCATION_CALL_REL);

CHECK:CAMELCASE: Avoid CamelCase: <GetDR>
#877: FILE: arch/i386/kernel/vmi.c:711:
+	para_fill(get_debugreg, GetDR);

CHECK:CAMELCASE: Avoid CamelCase: <SetDR>
#878: FILE: arch/i386/kernel/vmi.c:712:
+	para_fill(set_debugreg, SetDR);

CHECK:CAMELCASE: Avoid CamelCase: <GetCR0>
#879: FILE: arch/i386/kernel/vmi.c:713:
+	para_fill(read_cr0, GetCR0);

CHECK:CAMELCASE: Avoid CamelCase: <GetCR2>
#880: FILE: arch/i386/kernel/vmi.c:714:
+	para_fill(read_cr2, GetCR2);

CHECK:CAMELCASE: Avoid CamelCase: <GetCR3>
#881: FILE: arch/i386/kernel/vmi.c:715:
+	para_fill(read_cr3, GetCR3);

CHECK:CAMELCASE: Avoid CamelCase: <GetCR4>
#882: FILE: arch/i386/kernel/vmi.c:716:
+	para_fill(read_cr4, GetCR4);

CHECK:CAMELCASE: Avoid CamelCase: <SetCR0>
#883: FILE: arch/i386/kernel/vmi.c:717:
+	para_fill(write_cr0, SetCR0);

CHECK:CAMELCASE: Avoid CamelCase: <SetCR2>
#884: FILE: arch/i386/kernel/vmi.c:718:
+	para_fill(write_cr2, SetCR2);

CHECK:CAMELCASE: Avoid CamelCase: <SetCR3>
#885: FILE: arch/i386/kernel/vmi.c:719:
+	para_fill(write_cr3, SetCR3);

CHECK:CAMELCASE: Avoid CamelCase: <SetCR4>
#886: FILE: arch/i386/kernel/vmi.c:720:
+	para_fill(write_cr4, SetCR4);

CHECK:CAMELCASE: Avoid CamelCase: <GetInterruptMask>
#887: FILE: arch/i386/kernel/vmi.c:721:
+	para_fill(save_fl, GetInterruptMask);

CHECK:CAMELCASE: Avoid CamelCase: <SetInterruptMask>
#888: FILE: arch/i386/kernel/vmi.c:722:
+	para_fill(restore_fl, SetInterruptMask);

CHECK:CAMELCASE: Avoid CamelCase: <DisableInterrupts>
#889: FILE: arch/i386/kernel/vmi.c:723:
+	para_fill(irq_disable, DisableInterrupts);

CHECK:CAMELCASE: Avoid CamelCase: <EnableInterrupts>
#890: FILE: arch/i386/kernel/vmi.c:724:
+	para_fill(irq_enable, EnableInterrupts);

CHECK:CAMELCASE: Avoid CamelCase: <Halt>
#896: FILE: arch/i386/kernel/vmi.c:730:
+	para_fill(safe_halt, Halt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#906: FILE: arch/i386/kernel/vmi.c:740:
+		BUG_ON(rel->type != VMI_RELOCATION_CALL_REL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#914: FILE: arch/i386/kernel/vmi.c:748:
+		BUG_ON(rel->type != VMI_RELOCATION_CALL_REL);

CHECK:CAMELCASE: Avoid CamelCase: <SetGDT>
#919: FILE: arch/i386/kernel/vmi.c:753:
+	para_fill(load_gdt, SetGDT);

CHECK:CAMELCASE: Avoid CamelCase: <SetIDT>
#920: FILE: arch/i386/kernel/vmi.c:754:
+	para_fill(load_idt, SetIDT);

CHECK:CAMELCASE: Avoid CamelCase: <GetGDT>
#921: FILE: arch/i386/kernel/vmi.c:755:
+	para_fill(store_gdt, GetGDT);

CHECK:CAMELCASE: Avoid CamelCase: <GetIDT>
#922: FILE: arch/i386/kernel/vmi.c:756:
+	para_fill(store_idt, GetIDT);

CHECK:CAMELCASE: Avoid CamelCase: <GetTR>
#923: FILE: arch/i386/kernel/vmi.c:757:
+	para_fill(store_tr, GetTR);

CHECK:CAMELCASE: Avoid CamelCase: <WriteLDTEntry>
#925: FILE: arch/i386/kernel/vmi.c:759:
+	para_fill(write_ldt_entry, WriteLDTEntry);

CHECK:CAMELCASE: Avoid CamelCase: <WriteGDTEntry>
#926: FILE: arch/i386/kernel/vmi.c:760:
+	para_fill(write_gdt_entry, WriteGDTEntry);

CHECK:CAMELCASE: Avoid CamelCase: <WriteIDTEntry>
#927: FILE: arch/i386/kernel/vmi.c:761:
+	para_fill(write_idt_entry, WriteIDTEntry);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#931: FILE: arch/i386/kernel/vmi.c:765:
+		BUG_ON(rel->type != VMI_RELOCATION_CALL_REL);

CHECK:CAMELCASE: Avoid CamelCase: <SetIOPLMask>
#936: FILE: arch/i386/kernel/vmi.c:770:
+	para_fill(set_iopl_mask, SetIOPLMask);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#938: FILE: arch/i386/kernel/vmi.c:772:
+	if (!disable_nodelay) {
+		paravirt_ops.const_udelay = (void *)vmi_nop;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <SetLazyMode>
#942: FILE: arch/i386/kernel/vmi.c:776:
+	para_fill(set_lazy_mode, SetLazyMode);

CHECK:CAMELCASE: Avoid CamelCase: <InvalPage>
#950: FILE: arch/i386/kernel/vmi.c:784:
+	para_fill(flush_tlb_single, InvalPage);

CHECK:CAMELCASE: Avoid CamelCase: <VMI_CALL_APICRead>
#1001: FILE: arch/i386/kernel/vmi.c:835:
+	paravirt_ops.apic_read = vmi_get_function(VMI_CALL_APICRead);

CHECK:CAMELCASE: Avoid CamelCase: <VMI_CALL_APICWrite>
#1002: FILE: arch/i386/kernel/vmi.c:836:
+	paravirt_ops.apic_write = vmi_get_function(VMI_CALL_APICWrite);

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#1009: FILE: arch/i386/kernel/vmi.c:843:
+	 * to do this before IRQs get reenabled.  Fortunately, it is
 	                              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1049: FILE: arch/i386/kernel/vmi.c:883:
+	if (!strcmp(arg, "disable_nodelay"))
[...]
+	else if (!strcmp(arg, "disable_pge")) {
[...]
+	} else if (!strcmp(arg, "disable_pse")) {
[...]
+	} else if (!strcmp(arg, "disable_sep")) {
[...]
+	} else if (!strcmp(arg, "disable_tsc")) {
[...]
+	} else if (!strcmp(arg, "disable_mtrr")) {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1079: FILE: arch/i386/mm/pgtable.c:174:
+	printk(KERN_INFO "Reserving virtual address space above 0x%08x\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1101: FILE: include/asm-i386/vmi.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1118: FILE: include/asm-i386/vmi.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1119: FILE: include/asm-i386/vmi.h:19:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1215: FILE: include/asm-i386/vmi.h:115:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1257: FILE: include/asm-i386/vmi.h:157:
+        unsigned char           *eip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1257: FILE: include/asm-i386/vmi.h:157:
+        unsigned char           *eip;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1258: FILE: include/asm-i386/vmi.h:158:
+        unsigned char           type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1258: FILE: include/asm-i386/vmi.h:158:
+        unsigned char           type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1259: FILE: include/asm-i386/vmi.h:159:
+        unsigned char           reserved[3];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1259: FILE: include/asm-i386/vmi.h:159:
+        unsigned char           reserved[3];$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1263: FILE: include/asm-i386/vmi.h:163:
+
+

WARNING:TYPO_SPELLING: 'reserverd' may be misspelled - perhaps 'reserved'?
#1289: FILE: include/asm-i386/vmi.h:189:
+	u32     rom_pad3;       // PnP reserverd / VMI reserved
 	                               ^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1293: FILE: include/asm-i386/vmi.h:193:
+} __attribute__((packed));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1296: FILE: include/asm-i386/vmi.h:196:
+        char sig[4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1296: FILE: include/asm-i386/vmi.h:196:
+        char sig[4];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1297: FILE: include/asm-i386/vmi.h:197:
+        char rev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1297: FILE: include/asm-i386/vmi.h:197:
+        char rev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1298: FILE: include/asm-i386/vmi.h:198:
+        char size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1298: FILE: include/asm-i386/vmi.h:198:
+        char size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1299: FILE: include/asm-i386/vmi.h:199:
+        short next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1299: FILE: include/asm-i386/vmi.h:199:
+        short next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1300: FILE: include/asm-i386/vmi.h:200:
+        short res;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1300: FILE: include/asm-i386/vmi.h:200:
+        short res;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1301: FILE: include/asm-i386/vmi.h:201:
+        long devID;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1301: FILE: include/asm-i386/vmi.h:201:
+        long devID;$

CHECK:CAMELCASE: Avoid CamelCase: <devID>
#1301: FILE: include/asm-i386/vmi.h:201:
+        long devID;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1302: FILE: include/asm-i386/vmi.h:202:
+        unsigned short manufacturer_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1302: FILE: include/asm-i386/vmi.h:202:
+        unsigned short manufacturer_offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1303: FILE: include/asm-i386/vmi.h:203:
+        unsigned short product_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1303: FILE: include/asm-i386/vmi.h:203:
+        unsigned short product_offset;$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1304: FILE: include/asm-i386/vmi.h:204:
+} __attribute__((packed));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1307: FILE: include/asm-i386/vmi.h:207:
+        char sig[4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1307: FILE: include/asm-i386/vmi.h:207:
+        char sig[4];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1308: FILE: include/asm-i386/vmi.h:208:
+        short vendorID;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1308: FILE: include/asm-i386/vmi.h:208:
+        short vendorID;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1309: FILE: include/asm-i386/vmi.h:209:
+        short deviceID;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1309: FILE: include/asm-i386/vmi.h:209:
+        short deviceID;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1310: FILE: include/asm-i386/vmi.h:210:
+        short vpdData;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: include/asm-i386/vmi.h:210:
+        short vpdData;$

CHECK:CAMELCASE: Avoid CamelCase: <vpdData>
#1310: FILE: include/asm-i386/vmi.h:210:
+        short vpdData;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1311: FILE: include/asm-i386/vmi.h:211:
+        short size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1311: FILE: include/asm-i386/vmi.h:211:
+        short size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1312: FILE: include/asm-i386/vmi.h:212:
+        char rev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1312: FILE: include/asm-i386/vmi.h:212:
+        char rev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1313: FILE: include/asm-i386/vmi.h:213:
+        char class;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1313: FILE: include/asm-i386/vmi.h:213:
+        char class;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1314: FILE: include/asm-i386/vmi.h:214:
+        char subclass;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1314: FILE: include/asm-i386/vmi.h:214:
+        char subclass;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1315: FILE: include/asm-i386/vmi.h:215:
+        char interface;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1315: FILE: include/asm-i386/vmi.h:215:
+        char interface;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1316: FILE: include/asm-i386/vmi.h:216:
+        short chunks;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1316: FILE: include/asm-i386/vmi.h:216:
+        short chunks;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1317: FILE: include/asm-i386/vmi.h:217:
+        char rom_version_min;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1317: FILE: include/asm-i386/vmi.h:217:
+        char rom_version_min;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1318: FILE: include/asm-i386/vmi.h:218:
+        char rom_version_maj;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1318: FILE: include/asm-i386/vmi.h:218:
+        char rom_version_maj;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1319: FILE: include/asm-i386/vmi.h:219:
+        char codetype;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1319: FILE: include/asm-i386/vmi.h:219:
+        char codetype;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1320: FILE: include/asm-i386/vmi.h:220:
+        char lastRom;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1320: FILE: include/asm-i386/vmi.h:220:
+        char lastRom;$

CHECK:CAMELCASE: Avoid CamelCase: <lastRom>
#1320: FILE: include/asm-i386/vmi.h:220:
+        char lastRom;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1321: FILE: include/asm-i386/vmi.h:221:
+        short reserved;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1321: FILE: include/asm-i386/vmi.h:221:
+        short reserved;$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1322: FILE: include/asm-i386/vmi.h:222:
+} __attribute__((packed));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1325: FILE: include/asm-i386/vmi.h:225:
+extern void vmi_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1326: FILE: include/asm-i386/vmi.h:226:
+extern void vmi_bringup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1327: FILE: include/asm-i386/vmi.h:227:
+extern void vmi_apply_boot_page_allocations(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469076.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 63 errors, 140 warnings, 75 checks, 1257 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469076.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
