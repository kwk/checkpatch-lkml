CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->sending_cpu == sender'
#134: FILE: arch/x86/kernel/tlb_uv.c:107:
+		if ((msg->sending_cpu == sender) && (!msg->replied_to)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!msg->replied_to'
#134: FILE: arch/x86/kernel/tlb_uv.c:107:
+		if ((msg->sending_cpu == sender) && (!msg->replied_to)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#136: FILE: arch/x86/kernel/tlb_uv.c:109:
+			printk(KERN_DEBUG

ERROR:SPACING: spaces prohibited around that '->' (ctx:VxW)
#141: FILE: arch/x86/kernel/tlb_uv.c:114:
+				if (!((long)1 << j & msp-> seen_by.bits)) {
 				                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long)1' could be '1L'
#141: FILE: arch/x86/kernel/tlb_uv.c:114:
+				if (!((long)1 << j & msp-> seen_by.bits)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#143: FILE: arch/x86/kernel/tlb_uv.c:116:
+					printk("%d ", j);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#146: FILE: arch/x86/kernel/tlb_uv.c:119:
+			printk("\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#241: FILE: arch/x86/kernel/tlb_uv.c:317:
+		BUG_ON(blade > (UV_DISTRIBUTION_SIZE - 1));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#259: FILE: arch/x86/kernel/tlb_uv.c:379:
+	pqp = va_queue_first = __get_cpu_var(bau_control).va_queue_first;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#336: FILE: arch/x86/kernel/tlb_uv.c:591:
+	BUG_ON(!bau_tabp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#345: FILE: arch/x86/kernel/tlb_uv.c:595:
+	BUG_ON(!bau_tabp->msg_statuses);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#359: FILE: arch/x86/kernel/tlb_uv.c:601:
+	BUG_ON(!bau_tabp->watching);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#360: FILE: arch/x86/kernel/tlb_uv.c:602:
+	for (i = 0, ip = bau_tabp->watching; i < DEST_Q_SIZE; i++, ip++) {
 		*ip = 0;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#402: FILE: arch/x86/kernel/tlb_uv.c:647:
+	BUG_ON(!adp);

CHECK:SPACING: No space is necessary after a cast
#425: FILE: arch/x86/kernel/tlb_uv.c:680:
+	pqp = (struct bau_payload_queue_entry *) kmalloc_node(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#425: FILE: arch/x86/kernel/tlb_uv.c:680:
+	pqp = (struct bau_payload_queue_entry *) kmalloc_node(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#425: FILE: arch/x86/kernel/tlb_uv.c:680:
+	pqp = (struct bau_payload_queue_entry *) kmalloc_node(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#428: FILE: arch/x86/kernel/tlb_uv.c:683:
+	BUG_ON(!pqp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#472: FILE: arch/x86/kernel/tlb_uv.c:760:
+	BUG_ON(!uv_bau_table_bases);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000266085.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 13 warnings, 5 checks, 439 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000266085.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
