WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/aufs/f_op.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#57: FILE: fs/aufs/f_op.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: fs/aufs/f_op.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#77: FILE: fs/aufs/f_op.c:35:
+	LKTRTrace("%.*s\n", AuDLNPair(dentry));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#77: FILE: fs/aufs/f_op.c:35:
+	LKTRTrace("%.*s\n", AuDLNPair(dentry));

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IW>
#81: FILE: fs/aufs/f_op.c:39:
+	di_read_lock_child(dentry, AuLock_IW);

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: fs/aufs/f_op.c:45:
+		struct file *h_file;
+		h_file = au_h_fptr(file, bindex);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#101: FILE: fs/aufs/f_op.c:59:
+	AuTraceErr(err);

CHECK:CAMELCASE: Avoid CamelCase: <FiMustWriteLock>
#119: FILE: fs/aufs/f_op.c:77:
+	FiMustWriteLock(file);

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#121: FILE: fs/aufs/f_op.c:79:
+	AuDebugOn(!inode || S_ISDIR(inode->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#130: FILE: fs/aufs/f_op.c:88:
+	BUG_ON(au_test_ro(sb, bindex, inode) && (flags & O_TRUNC));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#176: FILE: fs/aufs/f_op.c:134:
+	LKTRTrace("%.*s, cnt %lu, pos %Ld\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_FLUSH>
#180: FILE: fs/aufs/f_op.c:138:
+	si_read_lock(sb, AuLock_FLUSH);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#216: FILE: fs/aufs/f_op.c:174:
+	LKTRTrace("%.*s, cnt %lu, pos %Ld\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#235: FILE: fs/aufs/f_op.c:193:
+	if (!au_opt_test(mnt_flags, UDBA_INOTIFY))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#237: FILE: fs/aufs/f_op.c:195:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->mm"
#264: FILE: fs/aufs/f_op.c:222:
+	const int loopback = (current->mm == NULL

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#265: FILE: fs/aufs/f_op.c:223:
+	const int loopback = (current->mm == NULL
+			      && '0' <= c && c <= '9'

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#266: FILE: fs/aufs/f_op.c:224:
+			      && '0' <= c && c <= '9'
+			      && strncmp(current->comm, "loop", 4) == 0);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#280: FILE: fs/aufs/f_op.c:238:
+	LKTRTrace("%.*s, pos %Ld, len %lu\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#324: FILE: fs/aufs/f_op.c:282:
+	LKTRTrace("%.*s, len %lu, pos %Ld\n",

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#347: FILE: fs/aufs/f_op.c:305:
+#if 0 /* reserved for future use */

CHECK:BRACES: Unbalanced braces around else statement
#348: FILE: fs/aufs/f_op.c:306:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: fs/aufs/f_op.c:308:
+		struct dentry *parent = dget_parent(dentry);
+		vfsub_ign_hinode(&vargs, IN_MODIFY,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: fs/aufs/f_op.c:309:
+		vfsub_ign_hinode(&vargs, IN_MODIFY,
+		au_hi(parent->d_inode, au_fbstart(file));

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceEnter>
#380: FILE: fs/aufs/f_op.c:338:
+	AuTraceEnter();

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#401: FILE: fs/aufs/f_op.c:359:
+#if 0 /* def CONFIG_SMP */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#409: FILE: fs/aufs/f_op.c:367:
+#if 0 /* debug */

WARNING:LINE_SPACING: Missing a blank line after declarations
#411: FILE: fs/aufs/f_op.c:369:
+		struct page *page;
+		page = vmf->page;

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#412: FILE: fs/aufs/f_op.c:370:
+		AuDbg("%p, %d\n", page, page_mapcount(page));

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#425: FILE: fs/aufs/f_op.c:383:
+static struct vm_operations_struct aufs_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#427: FILE: fs/aufs/f_op.c:385:
+#if 0 /* reserved for future use */

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#438: FILE: fs/aufs/f_op.c:396:
+static struct vm_operations_struct *au_vm_ops(struct file *h_file,

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#441: FILE: fs/aufs/f_op.c:399:
+	struct vm_operations_struct *vm_ops;

CHECK:BRACES: braces {} should be used on all arms of this statement
#446: FILE: fs/aufs/f_op.c:404:
+	if (!au_test_nfs(h_file->f_vfsmnt->mnt_sb))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#448: FILE: fs/aufs/f_op.c:406:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#460: FILE: fs/aufs/f_op.c:418:
+		AuIOErr("failed internal unmapping %.*s, %d\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#466: FILE: fs/aufs/f_op.c:424:
+	AuTraceErrPtr(vm_ops);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#476: FILE: fs/aufs/f_op.c:434:
+	struct vm_operations_struct *vm_ops;

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#598: FILE: fs/aufs/f_op.c:556:
+	IMustLock(file->f_mapping->host);

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#623: FILE: fs/aufs/f_op.c:581:
+				  AuLsc_I_CHILD);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#675: FILE: fs/aufs/f_op.c:633:
+struct file_operations aufs_file_fop = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277608.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 19 warnings, 22 checks, 645 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277608.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
