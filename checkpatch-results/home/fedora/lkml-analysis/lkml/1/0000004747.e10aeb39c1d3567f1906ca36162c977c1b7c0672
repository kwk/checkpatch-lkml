WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:1:
+#ifdef CONFIG_CPU_SUP_INTEL

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#83: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:43:
+#define X86_DEBUGCTL_TR			(1 << 6)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#84: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:44:
+#define X86_DEBUGCTL_BTS		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#85: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:45:
+#define X86_DEBUGCTL_BTINT		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#86: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:46:
+#define X86_DEBUGCTL_BTS_OFF_OS		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#87: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:47:
+#define X86_DEBUGCTL_BTS_OFF_USR	(1 << 10)

CHECK:BRACES: braces {} should be used on all arms of this statement
#213: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:173:
+	if (err)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#215: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:175:
+	else {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#412: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:372:
+#define CC(pebs, regs, reg) (regs)->reg = (pebs)->reg

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#412: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:372:
+#define CC(pebs, regs, reg) (regs)->reg = (pebs)->reg

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#412: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:372:
+#define CC(pebs, regs, reg) (regs)->reg = (pebs)->reg

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pebs' - possible side-effects?
#416: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:376:
+#define PEBS_TO_REGS(pebs, regs)		\
+do {						\
+	memset((regs), 0, sizeof(*regs));	\
+	CC((pebs), (regs), ax);			\
+	CC((pebs), (regs), bx);			\
+	CC((pebs), (regs), cx);			\
+	CC((pebs), (regs), dx);			\
+	CC((pebs), (regs), si);			\
+	CC((pebs), (regs), di);			\
+	CC((pebs), (regs), bp);			\
+	CC((pebs), (regs), sp);			\
+	CC((pebs), (regs), flags);		\
+	CC((pebs), (regs), ip);			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#416: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:376:
+#define PEBS_TO_REGS(pebs, regs)		\
+do {						\
+	memset((regs), 0, sizeof(*regs));	\
+	CC((pebs), (regs), ax);			\
+	CC((pebs), (regs), bx);			\
+	CC((pebs), (regs), cx);			\
+	CC((pebs), (regs), dx);			\
+	CC((pebs), (regs), si);			\
+	CC((pebs), (regs), di);			\
+	CC((pebs), (regs), bp);			\
+	CC((pebs), (regs), sp);			\
+	CC((pebs), (regs), flags);		\
+	CC((pebs), (regs), ip);			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pebs' - possible side-effects?
#433: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:393:
+#define PEBS_TO_REGS(pebs, regs)		\
+do {						\
+	memset((regs), 0, sizeof(*regs));	\
+	CC((pebs), (regs), ax);			\
+	CC((pebs), (regs), bx);			\
+	CC((pebs), (regs), cx);			\
+	CC((pebs), (regs), dx);			\
+	CC((pebs), (regs), si);			\
+	CC((pebs), (regs), di);			\
+	CC((pebs), (regs), bp);			\
+	CC((pebs), (regs), sp);			\
+	CC((pebs), (regs), r8);			\
+	CC((pebs), (regs), r9);			\
+	CC((pebs), (regs), r10);		\
+	CC((pebs), (regs), r11);		\
+	CC((pebs), (regs), r12);		\
+	CC((pebs), (regs), r13);		\
+	CC((pebs), (regs), r14);		\
+	CC((pebs), (regs), r15);		\
+	CC((pebs), (regs), flags);		\
+	CC((pebs), (regs), ip);			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#433: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:393:
+#define PEBS_TO_REGS(pebs, regs)		\
+do {						\
+	memset((regs), 0, sizeof(*regs));	\
+	CC((pebs), (regs), ax);			\
+	CC((pebs), (regs), bx);			\
+	CC((pebs), (regs), cx);			\
+	CC((pebs), (regs), dx);			\
+	CC((pebs), (regs), si);			\
+	CC((pebs), (regs), di);			\
+	CC((pebs), (regs), bp);			\
+	CC((pebs), (regs), sp);			\
+	CC((pebs), (regs), r8);			\
+	CC((pebs), (regs), r9);			\
+	CC((pebs), (regs), r10);		\
+	CC((pebs), (regs), r11);		\
+	CC((pebs), (regs), r12);		\
+	CC((pebs), (regs), r13);		\
+	CC((pebs), (regs), r14);		\
+	CC((pebs), (regs), r15);		\
+	CC((pebs), (regs), flags);		\
+	CC((pebs), (regs), ip);			\
+} while (0)

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#497: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:457:
+		trace_printk("PEBS: too many events: %d\n", n);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#498: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:458:
+		at += n-1;
 		       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#540: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:500:
+		trace_printk("PEBS: too many events: %d\n", n);

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#548: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:508:
+				trace_printk("PEBS: status: %Lx\n", at->status);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#548: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:508:
+				trace_printk("PEBS: status: %Lx\n", at->status);

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#554: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:514:
+			trace_printk("PEBS: interrupt, status: %Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#554: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:514:
+			trace_printk("PEBS: interrupt, status: %Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:515:
+			trace_printk("PEBS: interrupt, status: %Lx\n",
+					at->status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#602: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:562:
+			printk(KERN_CONT "PEBS v0, ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#602: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:562:
+			printk(KERN_CONT "PEBS v0, ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#609: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:569:
+			printk(KERN_CONT "PEBS v1, ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#609: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:569:
+			printk(KERN_CONT "PEBS v1, ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#616: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:576:
+			printk(KERN_CONT "PEBS unknown format: %d, ", format);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#616: FILE: arch/x86/kernel/cpu/perf_event_intel_ds.c:576:
+			printk(KERN_CONT "PEBS unknown format: %d, ", format);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000004747.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 13 warnings, 15 checks, 1172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000004747.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
