WARNING:TYPO_SPELLING: 'agains' may be misspelled - perhaps 'against'?
#54: 
> something agains 2.6.22-stable? I have reasons not to move to -23 or
            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#115: FILE: fs/fs-writeback.c:52:
+			if (dt->max_index < inode->i_ino)
+			    dt->max_index = inode->i_ino;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#125: FILE: fs/fs-writeback.c:62:
+#define DIRTY_SCAN_REMAINING	(LONG_MAX-1)
                             	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: fs/fs-writeback.c:69:
+static unsigned long scan_dirty_tree(struct super_block *sb,
+					unsigned long begin, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: fs/fs-writeback.c:79:
+		j = radix_tree_gang_lookup(&dt->inode_tree, (void **)inodes,
+						begin, DIRTY_SCAN_BATCH);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: fs/fs-writeback.c:87:
+				if (time_after(inode->dirtied_when,
+					jiffies - dirty_volatile_interval)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#158: FILE: fs/fs-writeback.c:95:
+			BUG_ON(!p);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#168: FILE: fs/fs-writeback.c:105:
+				iput(inodes[i]);
 				^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: fs/fs-writeback.c:117:
+static void dispatch_cluster_inodes(struct super_block *sb,
+					unsigned long *older_than_this)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: fs/fs-writeback.c:157:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: fs/fs-writeback.c:300:
+		if (!time_after_eq(inode->dirtied_when,
+				tail_inode->dirtied_when))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: fs/fs-writeback.c:327:
+static void move_expired_inodes(struct list_head *delaying_queue,
+			       struct list_head *dispatch_queue,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: fs/fs-writeback.c:334:
+		if (older_than_this &&
+			time_after(inode->dirtied_when, *older_than_this))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: fs/fs-writeback.c:344:
+static void queue_io(struct super_block *sb,
+				unsigned long *older_than_this)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#360: FILE: fs/fs-writeback.c:378:
+	BUG_ON(inode->i_state & I_SYNC);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wbc->sync_mode != WB_SYNC_ALL'
#442: FILE: fs/fs-writeback.c:477:
+	if ((wbc->sync_mode != WB_SYNC_ALL) && (inode->i_state & I_SYNC)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: fs/fs-writeback.c:546:
+int generic_sync_sb_inodes(struct super_block *sb,
+			struct writeback_control *wbc)

WARNING:LINE_SPACING: Missing a blank line after declarations
#638: FILE: fs/fs-writeback.c:685:
+					int err = sync_sb_inodes(sb, wbc);
+					if (!ret)

WARNING:SPACING: Unnecessary space before function pointer arguments
#798: FILE: include/linux/fs.h:1251:
+	int (*sync_inodes) (struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#799: FILE: include/linux/fs.h:1252:
+	int (*sync_inodes) (struct super_block *sb,
+				struct writeback_control *wbc);

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#853: FILE: include/linux/fs.h:1302:
+ *			of inode dirty data.  Having a seperate lock for this
   			                               ^^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#877: FILE: include/linux/fs.h:1322:
+#define I_SYNC			(1 << __I_SYNC)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#885: FILE: include/linux/fs.h:1756:
+extern int generic_sync_sb_inodes(struct super_block *, struct writeback_control *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#885: FILE: include/linux/fs.h:1756:
+extern int generic_sync_sb_inodes(struct super_block *, struct writeback_control *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct writeback_control *' should also have an identifier name
#885: FILE: include/linux/fs.h:1756:
+extern int generic_sync_sb_inodes(struct super_block *, struct writeback_control *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#893: FILE: include/linux/fs.h:1874:
+extern int sb_has_dirty_inodes(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#893: FILE: include/linux/fs.h:1874:
+extern int sb_has_dirty_inodes(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#946: FILE: include/linux/writeback.h:73:
+int sync_inodes_sb(struct super_block *, int wait);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#955: FILE: include/linux/writeback.h:83:
 }
+static inline void inode_sync_wait(struct inode *inode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#959: FILE: include/linux/writeback.h:87:
+	wait_on_bit(&inode->i_state, __I_SYNC, inode_wait,
+							TASK_UNINTERRUPTIBLE);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1011: FILE: mm/page-writeback.c:399:
+				congestion_wait(WRITE, HZ/10);
 				                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1037: FILE: fs/hugetlbfs/inode.c:236:
+		if (!(inode->i_state & (I_DIRTY|I_SYNC)))
 		                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1064: FILE: fs/inode.c:247:
+	if (!(inode->i_state & (I_DIRTY|I_SYNC)))
 	                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1082: FILE: fs/inode.c:1063:
+		if (!(inode->i_state & (I_DIRTY|I_SYNC)))
 		                               ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385780.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 22 checks, 992 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385780.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
