WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
Don't know whether it is a good idea to move i_alloc_sem into implementation.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#74: FILE: fs/libfs.c:333:
+int simple_setsize(struct dentry *dentry, loff_t newsize,
+			unsigned flags, struct file *file)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#74: FILE: fs/libfs.c:333:
+			unsigned flags, struct file *file)

WARNING:TYPO_SPELLING: 'Trucating' may be misspelled - perhaps 'Truncating'?
#112: FILE: include/linux/fs.h:436:
+#define SETSIZE_FILE	(1 << 0) /* Trucating via an open file (eg ftruncate) */
                     	            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BIT_MACRO: Prefer using the BIT macro
#112: FILE: include/linux/fs.h:436:
+#define SETSIZE_FILE	(1 << 0) /* Trucating via an open file (eg ftruncate) */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#113: FILE: include/linux/fs.h:437:
+#define SETSIZE_OPEN	(1 << 1) /* Truncating from open(O_TRUNC) */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#123: FILE: include/linux/fs.h:1536:
+	int (*setsize) (struct dentry *, loff_t, unsigned, struct file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#123: FILE: include/linux/fs.h:1536:
+	int (*setsize) (struct dentry *, loff_t, unsigned, struct file *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#123: FILE: include/linux/fs.h:1536:
+	int (*setsize) (struct dentry *, loff_t, unsigned, struct file *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#123: FILE: include/linux/fs.h:1536:
+	int (*setsize) (struct dentry *, loff_t, unsigned, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#123: FILE: include/linux/fs.h:1536:
+	int (*setsize) (struct dentry *, loff_t, unsigned, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#123: FILE: include/linux/fs.h:1536:
+	int (*setsize) (struct dentry *, loff_t, unsigned, struct file *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/fs.h:2342:
+extern int simple_setsize(struct dentry *dentry, loff_t newsize,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: include/linux/fs.h:2343:
+extern int simple_setsize(struct dentry *dentry, loff_t newsize,
+			unsigned flags, struct file *file);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#132: FILE: include/linux/fs.h:2343:
+			unsigned flags, struct file *file);

CHECK:BRACES: Unbalanced braces around else statement
#242: FILE: fs/attr.c:224:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000099325.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 6 checks, 182 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000099325.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
