WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
o Reads of iocg->group_data are not always iocg->lock; so all the operations

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: block/elevator-fq.c:129:
+static void bfq_find_matching_entity(struct io_entity **entity,
+			struct io_entity **new_entity)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: block/elevator-fq.c:183:
+static void bfq_find_matching_entity(struct io_entity **entity,
+					struct io_entity **new_entity)

WARNING:TYPO_SPELLING: 'hiearchy' may be misspelled - perhaps 'hierarchy'?
#227: FILE: block/elevator-fq.c:914:
+	 * while we are traversing the hiearchy. It is possible that this
 	                               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'hierarhcy' may be misspelled - perhaps 'hierarchy'?
#233: FILE: block/elevator-fq.c:920:
+	 * Hence, hold a reference, deactivate the hierarhcy of entities and
 	                                           ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: block/elevator-fq.c:955:
+		__iog = container_of(entity->sched_data, struct io_group,
+						sched_data);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#306: FILE: block/elevator-fq.c:1032:
+	entity->weight = entity->new_weight = iocg->weight;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#307: FILE: block/elevator-fq.c:1033:
+	entity->ioprio_class = entity->new_ioprio_class = iocg->ioprio_class;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#316: FILE: block/elevator-fq.c:1042:
+	BUG_ON(parent == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#316: FILE: block/elevator-fq.c:1042:
+	BUG_ON(parent == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#317: FILE: block/elevator-fq.c:1043:
+	BUG_ON(iog == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#317: FILE: block/elevator-fq.c:1043:
+	BUG_ON(iog == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#395: FILE: block/elevator-fq.c:1256:
+	for (; cgroup != NULL; cgroup = cgroup->parent) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#399: FILE: block/elevator-fq.c:1260:
+		if (iog != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!leaf"
#428: FILE: block/elevator-fq.c:1289:
+		if (leaf == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#446: FILE: block/elevator-fq.c:1307:
+	while (leaf != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#481: FILE: block/elevator-fq.c:1342:
+	for (; cgroup != NULL && leaf != NULL; cgroup = cgroup->parent) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#481: FILE: block/elevator-fq.c:1342:
+	for (; cgroup != NULL && leaf != NULL; cgroup = cgroup->parent) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#486: FILE: block/elevator-fq.c:1347:
+		BUG_ON(iog != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#486: FILE: block/elevator-fq.c:1347:
+		BUG_ON(iog != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#500: FILE: block/elevator-fq.c:1361:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgroup"
#500: FILE: block/elevator-fq.c:1361:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#500: FILE: block/elevator-fq.c:1361:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#502: FILE: block/elevator-fq.c:1363:
+	if (cgroup != NULL && prev != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#502: FILE: block/elevator-fq.c:1363:
+	if (cgroup != NULL && prev != NULL) {

WARNING:TYPO_SPELLING: 'becames' may be misspelled - perhaps 'becomes'?
#520: FILE: block/elevator-fq.c:1381:
+ * but is a safe fallbak.  If this loss becames a problem it can be
                                         ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: block/elevator-fq.c:1391:
+static struct io_group *io_find_alloc_group(struct request_queue *q,
+			struct cgroup *cgroup, struct elv_fq_data *efqd,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#547: FILE: block/elevator-fq.c:1408:
+	if (iog != NULL || !create)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#551: FILE: block/elevator-fq.c:1412:
+	if (iog != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#604: FILE: block/elevator-fq.c:1465:
+	BUG_ON(!iog);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#619: FILE: block/elevator-fq.c:1480:
+static struct io_group *io_alloc_root_group(struct request_queue *q,
+					struct elevator_queue *e, void *key)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#626: FILE: block/elevator-fq.c:1487:
+	if (iog == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#665: FILE: block/elevator-fq.c:1526:
+		BUG_ON(!RB_EMPTY_ROOT(&st->active));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#666: FILE: block/elevator-fq.c:1527:
+		BUG_ON(!RB_EMPTY_ROOT(&st->idle));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#667: FILE: block/elevator-fq.c:1528:
+		BUG_ON(st->wsum != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#670: FILE: block/elevator-fq.c:1531:
+	BUG_ON(iog->sched_data.next_active != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog->sched_data.next_active"
#670: FILE: block/elevator-fq.c:1531:
+	BUG_ON(iog->sched_data.next_active != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#671: FILE: block/elevator-fq.c:1532:
+	BUG_ON(iog->sched_data.active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog->sched_data.active_entity"
#671: FILE: block/elevator-fq.c:1532:
+	BUG_ON(iog->sched_data.active_entity != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#672: FILE: block/elevator-fq.c:1533:
+	BUG_ON(entity != NULL && entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#672: FILE: block/elevator-fq.c:1533:
+	BUG_ON(entity != NULL && entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#672: FILE: block/elevator-fq.c:1533:
+	BUG_ON(entity != NULL && entity->tree != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#687: FILE: block/elevator-fq.c:1548:
+	BUG_ON(!iog);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#691: FILE: block/elevator-fq.c:1552:
+	BUG_ON(atomic_read(&iog->ref) <= 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: block/elevator-fq.c:1558:
+		parent = container_of(iog->my_entity->parent,
+					struct io_group, entity);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#745: FILE: block/elevator-fq.c:1606:
+	BUG_ON(iog->my_entity == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog->my_entity"
#745: FILE: block/elevator-fq.c:1606:
+	BUG_ON(iog->my_entity == NULL);

WARNING:TYPO_SPELLING: 'entites' may be misspelled - perhaps 'entities'?
#777: FILE: block/elevator-fq.c:1638:
+		 * io group does not have any active entites. Because this
 		                                     ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#798: FILE: block/elevator-fq.c:1659:
+	struct elv_fq_data *efqd;
+	unsigned long uninitialized_var(flags);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#798: FILE: block/elevator-fq.c:1659:
+	unsigned long uninitialized_var(flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'flags' should also have an identifier name
#798: FILE: block/elevator-fq.c:1659:
+	unsigned long uninitialized_var(flags);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#840: FILE: block/elevator-fq.c:1701:
+	BUG_ON(!hlist_empty(&iocg->group_data));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#850: FILE: block/elevator-fq.c:1711:
+static void io_group_check_and_destroy(struct elv_fq_data *efqd,
+					struct io_group *iog)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: block/elevator-fq.c:1745:
+	hlist_for_each_entry_safe(iog, pos, n, &efqd->group_list,
+					elv_data_node) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#906: FILE: block/elevator-fq.c:1767:
+		 * group has not been setup yet. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#928: FILE: block/elevator-fq.c:1789:
+static struct io_group *io_alloc_root_group(struct request_queue *q,
+					struct elevator_queue *e, void *key)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#934: FILE: block/elevator-fq.c:1795:
+	if (iog == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1004: FILE: block/elevator-fq.c:2245:
+		struct io_group *iog = ioq_to_io_group(ioq);
+		elv_log_ioq(efqd, ioq, "set_active, busy=%d ioprio=%d"

WARNING:SPLIT_STRING: quoted string split across lines
#1005: FILE: block/elevator-fq.c:2246:
+		elv_log_ioq(efqd, ioq, "set_active, busy=%d ioprio=%d"
+				" weight=%u group_weight=%u",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1058: FILE: block/elevator-fq.c:2532:
+
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1249: FILE: block/elevator-fq.h:453:
+	return ((IOPRIO_BE_NR - ioprio) * WEIGHT_MAX)/IOPRIO_BE_NR;
 	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1258: FILE: block/elevator-fq.h:477:
+extern int io_group_allow_merge(struct request *rq, struct bio *bio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1259: FILE: block/elevator-fq.h:478:
+extern void elv_put_iog(struct io_group *iog);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1305: FILE: block/elevator-fq.h:563:
+extern struct io_group *io_get_io_group(struct request_queue *q, int create);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101049.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 26 warnings, 38 checks, 1203 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101049.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
