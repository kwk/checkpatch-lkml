WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#38: FILE: security/apparmor/lsm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#77: FILE: security/apparmor/lsm.c:40:
+int apparmor_complain = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#78: FILE: security/apparmor/lsm.c:41:
+module_param_named(complain, apparmor_complain, aabool, S_IRUSR | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#82: FILE: security/apparmor/lsm.c:45:
+int apparmor_debug = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#83: FILE: security/apparmor/lsm.c:46:
+module_param_named(debug, apparmor_debug, aabool, S_IRUSR | S_IWUSR);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#87: FILE: security/apparmor/lsm.c:50:
+int apparmor_audit = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#88: FILE: security/apparmor/lsm.c:51:
+module_param_named(audit, apparmor_audit, aabool, S_IRUSR | S_IWUSR);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#92: FILE: security/apparmor/lsm.c:55:
+int apparmor_logsyscall = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#93: FILE: security/apparmor/lsm.c:56:
+module_param_named(logsyscall, apparmor_logsyscall, aabool, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#98: FILE: security/apparmor/lsm.c:61:
+module_param_named(path_max, apparmor_path_max, aauint, S_IRUSR | S_IWUSR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: security/apparmor/lsm.c:128:
+		LOG_HINT(cxt->profile, GFP_ATOMIC, HINT_PTRACE,
+				 "pid=%d child=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: security/apparmor/lsm.c:137:
+static int apparmor_capget(struct task_struct *task,
+			    kernel_cap_t *effective,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: security/apparmor/lsm.c:145:
+static int apparmor_capset_check(struct task_struct *task,
+				  kernel_cap_t *effective,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: security/apparmor/lsm.c:153:
+static void apparmor_capset_set(struct task_struct *task,
+				 kernel_cap_t *effective,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#264: FILE: security/apparmor/lsm.c:227:
+			 __FUNCTION__, bprm->filename);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#271: FILE: security/apparmor/lsm.c:234:
+static int apparmor_sb_mount(char *dev_name, struct nameidata *nd, char *type,
                                                                ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: security/apparmor/lsm.c:235:
+static int apparmor_sb_mount(char *dev_name, struct nameidata *nd, char *type,
+			      unsigned long flags, void *data)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#427: FILE: security/apparmor/lsm.c:390:
+				     struct nameidata *nd)
 				                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#431: FILE: security/apparmor/lsm.c:394:
+	if (!nd)
 	     ^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#519: FILE: security/apparmor/lsm.c:482:
+	struct aa_profile *file_profile = (struct aa_profile*)file->f_security;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#580: FILE: security/apparmor/lsm.c:543:
+	struct aa_profile *file_profile = (struct aa_profile*)file->f_security;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#597: FILE: security/apparmor/lsm.c:560:
+	 * write back to the files */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: security/apparmor/lsm.c:572:
+static int apparmor_file_mmap(struct file *file, unsigned long reqprot,
+			       unsigned long prot, unsigned long flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#648: FILE: security/apparmor/lsm.c:611:
+	unsigned len;

WARNING:SPLIT_STRING: quoted string split across lines
#707: FILE: security/apparmor/lsm.c:670:
+				"Attempt by confined task %s(%d) "
+				"[user %d] to assign profile to task %s(%d)",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#718: FILE: security/apparmor/lsm.c:681:
+		AA_ERROR("Unknown setprocattr command '%.*s' "
+			"by task %s(%d) [user %d] for task %s(%d)",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#788: FILE: security/apparmor/lsm.c:751:
+	if ((error = create_apparmorfs())) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open brace '{'
#793: FILE: security/apparmor/lsm.c:756:
+	if ((error = alloc_null_complain_profile())){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#793: FILE: security/apparmor/lsm.c:756:
+	if ((error = alloc_null_complain_profile())){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#798: FILE: security/apparmor/lsm.c:761:
+	if ((error = register_security(&apparmor_ops))) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#817: FILE: security/apparmor/lsm.c:780:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#856: FILE: security/apparmor/lsm.c:819:
+		AA_INFO(GFP_KERNEL, "Unable to properly unregister "
+			"AppArmor");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000445979.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 15 warnings, 7 checks, 829 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000445979.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
