ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#51: FILE: fs/ext2/ext2.h:119:
+extern struct inode * ext2_new_inode (struct inode *, int, struct cred *);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#51: FILE: fs/ext2/ext2.h:119:
+extern struct inode * ext2_new_inode (struct inode *, int, struct cred *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#51: FILE: fs/ext2/ext2.h:119:
+extern struct inode * ext2_new_inode (struct inode *, int, struct cred *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#51: FILE: fs/ext2/ext2.h:119:
+extern struct inode * ext2_new_inode (struct inode *, int, struct cred *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#51: FILE: fs/ext2/ext2.h:119:
+extern struct inode * ext2_new_inode (struct inode *, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#51: FILE: fs/ext2/ext2.h:119:
+extern struct inode * ext2_new_inode (struct inode *, int, struct cred *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#96: FILE: fs/ext2/namei.c:109:
+	struct inode * inode = ext2_new_inode (dir, mode, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#96: FILE: fs/ext2/namei.c:109:
+	struct inode * inode = ext2_new_inode (dir, mode, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#112: FILE: fs/ext2/namei.c:138:
+	inode = ext2_new_inode (dir, mode, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: fs/ext2/namei.c:163:
+	inode = ext2_new_inode (dir, S_IFLNK | S_IRWXUGO, cred);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#129: FILE: fs/ext2/namei.c:163:
+	inode = ext2_new_inode (dir, S_IFLNK | S_IRWXUGO, cred);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#146: FILE: fs/ext2/namei.c:222:
+	inode = ext2_new_inode (dir, S_IFDIR | mode, cred);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371091.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 9 warnings, 1 checks, 86 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371091.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
