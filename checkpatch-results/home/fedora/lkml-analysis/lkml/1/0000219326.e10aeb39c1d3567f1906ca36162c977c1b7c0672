WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#16: 
Subject: [PATCH 04/42] ext4: Fix whitespace checkpatch warnings/errors

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission(struct inode *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#65: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission(struct inode *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#65: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: fs/ext4/acl.h:62:
+extern int ext4_acl_chmod(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#66: FILE: fs/ext4/acl.h:62:
+extern int ext4_acl_chmod(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: fs/ext4/acl.h:63:
+extern int ext4_init_acl(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#67: FILE: fs/ext4/acl.h:63:
+extern int ext4_init_acl(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#67: FILE: fs/ext4/acl.h:63:
+extern int ext4_init_acl(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#67: FILE: fs/ext4/acl.h:63:
+extern int ext4_init_acl(handle_t *, struct inode *, struct inode *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: fs/ext4/balloc.c:203:
+struct ext4_group_desc * ext4_get_group_desc(struct super_block *sb,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#107: FILE: fs/ext4/balloc.c:215:
+			   "block_group >= groups_count - "
+			   "block_group = %lu, groups_count = %lu",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#122: FILE: fs/ext4/balloc.c:227:
+			   "Group descriptor not loaded - "
+			   "block_group = %lu, group_desc = %lu, desc = %lu",

WARNING:SPLIT_STRING: quoted string split across lines
#169: FILE: fs/ext4/balloc.c:678:
+			   "Freeing blocks not in datazone - "
+			   "block = %llu, count = %lu", block, count);

WARNING:SPLIT_STRING: quoted string split across lines
#197: FILE: fs/ext4/balloc.c:710:
+			   "Freeing blocks in system zones - "
+			   "Block = %llu, count = %lu",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!my_rsv"
#261: FILE: fs/ext4/balloc.c:1522:
+	if (my_rsv == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#311: FILE: fs/ext4/dir.c:36:
+static int ext4_dx_readdir(struct file *filp,
                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#314: FILE: fs/ext4/dir.c:39:
+				struct file *filp);
 				             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: fs/ext4/dir.c:39:
+static int ext4_release_dir(struct inode *inode,
+				struct file *filp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: fs/ext4/dir.c:86:
+		ext4_error(dir->i_sb, function,
 			"bad entry in directory #%lu: %s - "

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#351: FILE: fs/ext4/dir.c:94:
+static int ext4_readdir(struct file *filp,
                                      ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: fs/ext4/dir.c:95:
+static int ext4_readdir(struct file *filp,
+			 void *dirent, filldir_t filldir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: fs/ext4/dir.c:152:
+			ext4_error(sb, "ext4_readdir",
 				"directory #%lu contains a hole at offset %lu",

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#424: FILE: fs/ext4/dir.c:391:
+static int call_filldir(struct file *filp, void *dirent,
                                      ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#441: FILE: fs/ext4/dir.c:423:
+static int ext4_dx_readdir(struct file *filp,
                                         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: fs/ext4/dir.c:424:
+static int ext4_dx_readdir(struct file *filp,
+			 void *dirent, filldir_t filldir)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#451: FILE: fs/ext4/dir.c:515:
+static int ext4_release_dir(struct inode *inode, struct file *filp)
                                                               ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#464: FILE: fs/ext4/ext4.h:47:
+		printk(KERN_DEBUG "EXT4-fs DEBUG (%s, %d): %s:",	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#467: FILE: fs/ext4/ext4.h:49:
+		printk(KERN_DEBUG f, ## a);				\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#518: FILE: fs/ext4/ext4.h:988:
+extern void ext4_free_blocks(handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: fs/ext4/ext4.h:989:
+extern void ext4_free_blocks(handle_t *handle, struct inode *inode,
 			ext4_fsblk_t block, unsigned long count, int metadata);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#522: FILE: fs/ext4/ext4.h:990:
+extern void ext4_free_blocks_sb(handle_t *handle, struct super_block *sb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#527: FILE: fs/ext4/ext4.h:993:
+extern ext4_fsblk_t ext4_count_free_blocks(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#527: FILE: fs/ext4/ext4.h:993:
+extern ext4_fsblk_t ext4_count_free_blocks(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#528: FILE: fs/ext4/ext4.h:994:
+extern void ext4_check_blocks_bitmap(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#528: FILE: fs/ext4/ext4.h:994:
+extern void ext4_check_blocks_bitmap(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#537: FILE: fs/ext4/ext4.h:1012:
+extern int ext4_sync_file(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#537: FILE: fs/ext4/ext4.h:1012:
+extern int ext4_sync_file(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#537: FILE: fs/ext4/ext4.h:1012:
+extern int ext4_sync_file(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#537: FILE: fs/ext4/ext4.h:1012:
+extern int ext4_sync_file(struct file *, struct dentry *, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#551: FILE: fs/ext4/ext4.h:1019:
+extern struct inode * ext4_new_inode(handle_t *, struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#551: FILE: fs/ext4/ext4.h:1019:
+extern struct inode * ext4_new_inode(handle_t *, struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#551: FILE: fs/ext4/ext4.h:1019:
+extern struct inode * ext4_new_inode(handle_t *, struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#551: FILE: fs/ext4/ext4.h:1019:
+extern struct inode * ext4_new_inode(handle_t *, struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#551: FILE: fs/ext4/ext4.h:1019:
+extern struct inode * ext4_new_inode(handle_t *, struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#552: FILE: fs/ext4/ext4.h:1020:
+extern void ext4_free_inode(handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#552: FILE: fs/ext4/ext4.h:1020:
+extern void ext4_free_inode(handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#552: FILE: fs/ext4/ext4.h:1020:
+extern void ext4_free_inode(handle_t *, struct inode *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#553: FILE: fs/ext4/ext4.h:1021:
+extern struct inode * ext4_orphan_get(struct super_block *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#553: FILE: fs/ext4/ext4.h:1021:
+extern struct inode * ext4_orphan_get(struct super_block *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#553: FILE: fs/ext4/ext4.h:1021:
+extern struct inode * ext4_orphan_get(struct super_block *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#553: FILE: fs/ext4/ext4.h:1021:
+extern struct inode * ext4_orphan_get(struct super_block *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#554: FILE: fs/ext4/ext4.h:1022:
+extern unsigned long ext4_count_free_inodes(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#554: FILE: fs/ext4/ext4.h:1022:
+extern unsigned long ext4_count_free_inodes(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#555: FILE: fs/ext4/ext4.h:1023:
+extern unsigned long ext4_count_dirs(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#555: FILE: fs/ext4/ext4.h:1023:
+extern unsigned long ext4_count_dirs(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#556: FILE: fs/ext4/ext4.h:1024:
+extern void ext4_check_inodes_bitmap(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#556: FILE: fs/ext4/ext4.h:1024:
+extern void ext4_check_inodes_bitmap(struct super_block *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#557: FILE: fs/ext4/ext4.h:1025:
+extern unsigned long ext4_count_free(struct buffer_head *, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#557: FILE: fs/ext4/ext4.h:1025:
+extern unsigned long ext4_count_free(struct buffer_head *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#557: FILE: fs/ext4/ext4.h:1025:
+extern unsigned long ext4_count_free(struct buffer_head *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#557: FILE: fs/ext4/ext4.h:1025:
+extern unsigned long ext4_count_free(struct buffer_head *, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#567: FILE: fs/ext4/ext4.h:1059:
+extern int  ext4_write_inode(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#567: FILE: fs/ext4/ext4.h:1059:
+extern int  ext4_write_inode(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#567: FILE: fs/ext4/ext4.h:1059:
+extern int  ext4_write_inode(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#568: FILE: fs/ext4/ext4.h:1060:
+extern int  ext4_setattr(struct dentry *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#568: FILE: fs/ext4/ext4.h:1060:
+extern int  ext4_setattr(struct dentry *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#568: FILE: fs/ext4/ext4.h:1060:
+extern int  ext4_setattr(struct dentry *, struct iattr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#574: FILE: fs/ext4/ext4.h:1063:
+extern void ext4_delete_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#574: FILE: fs/ext4/ext4.h:1063:
+extern void ext4_delete_inode(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#575: FILE: fs/ext4/ext4.h:1064:
+extern int  ext4_sync_inode(handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#575: FILE: fs/ext4/ext4.h:1064:
+extern int  ext4_sync_inode(handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#575: FILE: fs/ext4/ext4.h:1064:
+extern int  ext4_sync_inode(handle_t *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#576: FILE: fs/ext4/ext4.h:1065:
+extern void ext4_discard_reservation(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#576: FILE: fs/ext4/ext4.h:1065:
+extern void ext4_discard_reservation(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#582: FILE: fs/ext4/ext4.h:1070:
+extern void ext4_truncate(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#582: FILE: fs/ext4/ext4.h:1070:
+extern void ext4_truncate(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#591: FILE: fs/ext4/ext4.h:1083:
+extern long ext4_compat_ioctl(struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#591: FILE: fs/ext4/ext4.h:1083:
+extern long ext4_compat_ioctl(struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#591: FILE: fs/ext4/ext4.h:1083:
+extern long ext4_compat_ioctl(struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#591: FILE: fs/ext4/ext4.h:1083:
+extern long ext4_compat_ioctl(struct file *, unsigned int, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#600: FILE: fs/ext4/ext4.h:1102:
+extern void ext4_error(struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#600: FILE: fs/ext4/ext4.h:1102:
+extern void ext4_error(struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#600: FILE: fs/ext4/ext4.h:1102:
+extern void ext4_error(struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#600: FILE: fs/ext4/ext4.h:1102:
+extern void ext4_error(struct super_block *, const char *, const char *, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#604: FILE: fs/ext4/ext4.h:1104:
+extern void __ext4_std_error(struct super_block *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#604: FILE: fs/ext4/ext4.h:1104:
+extern void __ext4_std_error(struct super_block *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#604: FILE: fs/ext4/ext4.h:1104:
+extern void __ext4_std_error(struct super_block *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#604: FILE: fs/ext4/ext4.h:1104:
+extern void __ext4_std_error(struct super_block *, const char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#605: FILE: fs/ext4/ext4.h:1105:
+extern void ext4_abort(struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#605: FILE: fs/ext4/ext4.h:1105:
+extern void ext4_abort(struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#605: FILE: fs/ext4/ext4.h:1105:
+extern void ext4_abort(struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#605: FILE: fs/ext4/ext4.h:1105:
+extern void ext4_abort(struct super_block *, const char *, const char *, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#608: FILE: fs/ext4/ext4.h:1107:
+extern void ext4_warning(struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#608: FILE: fs/ext4/ext4.h:1107:
+extern void ext4_warning(struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#608: FILE: fs/ext4/ext4.h:1107:
+extern void ext4_warning(struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#608: FILE: fs/ext4/ext4.h:1107:
+extern void ext4_warning(struct super_block *, const char *, const char *, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#611: FILE: fs/ext4/ext4.h:1109:
+extern void ext4_update_dynamic_rev(struct super_block *sb);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#683: FILE: fs/ext4/file.c:34:
+static int ext4_release_file(struct inode *inode, struct file *filp)
                                                                ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#903: FILE: fs/ext4/ialloc.c:1011:
+unsigned long ext4_count_dirs(struct super_block * sb)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#937: FILE: fs/ext4/inode.c:337:
+	} else if ((i_block -= direct_blocks) < indirect_blocks) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#963: FILE: fs/ext4/inode.c:446:
+	__le32 *start = ind->bh ? (__le32 *) ind->bh->b_data : ei->i_data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1034: FILE: fs/ext4/inode.c:1287:
+			     unsigned from,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1035: FILE: fs/ext4/inode.c:1288:
+			     unsigned to,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1068: FILE: fs/ext4/inode.c:1360:
+	unsigned from, to;

CHECK:SPACING: No space is necessary after a cast
#1132: FILE: fs/ext4/inode.c:3200:
+	for (p = partial; (p > chain) && all_zeroes((__le32 *) p->bh->b_data, p->p); p--)

CHECK:SPACING: No space is necessary after a cast
#1152: FILE: fs/ext4/inode.c:3411:
+					(__le32 *) bh->b_data,

CHECK:SPACING: No space is necessary after a cast
#1153: FILE: fs/ext4/inode.c:3412:
+					(__le32 *) bh->b_data + addr_per_block,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1258: FILE: fs/ext4/namei.c:154:
+static inline unsigned dx_get_hash(struct dx_entry *entry);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1259: FILE: fs/ext4/namei.c:155:
+static void dx_set_hash(struct dx_entry *entry, unsigned value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1260: FILE: fs/ext4/namei.c:156:
+static unsigned dx_get_count(struct dx_entry *entries);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1261: FILE: fs/ext4/namei.c:157:
+static unsigned dx_get_limit(struct dx_entry *entries);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1262: FILE: fs/ext4/namei.c:158:
+static void dx_set_count(struct dx_entry *entries, unsigned value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1263: FILE: fs/ext4/namei.c:159:
+static void dx_set_limit(struct dx_entry *entries, unsigned value);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1264: FILE: fs/ext4/namei.c:160:
+static unsigned dx_root_limit(struct inode *dir, unsigned infosize);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1264: FILE: fs/ext4/namei.c:160:
+static unsigned dx_root_limit(struct inode *dir, unsigned infosize);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1265: FILE: fs/ext4/namei.c:161:
+static unsigned dx_node_limit(struct inode *dir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1280: FILE: fs/ext4/namei.c:172:
+static struct ext4_dir_entry_2 *dx_move_dirents(char *from, char *to,
 		struct dx_map_entry *offsets, int count);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1282: FILE: fs/ext4/namei.c:173:
+static struct ext4_dir_entry_2* dx_pack_dirents(char *base, int size);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1291: FILE: fs/ext4/namei.c:210:
+static inline unsigned dx_get_hash(struct dx_entry *entry)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1297: FILE: fs/ext4/namei.c:215:
+static inline void dx_set_hash(struct dx_entry *entry, unsigned value)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1303: FILE: fs/ext4/namei.c:220:
+static inline unsigned dx_get_count(struct dx_entry *entries)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1309: FILE: fs/ext4/namei.c:225:
+static inline unsigned dx_get_limit(struct dx_entry *entries)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1315: FILE: fs/ext4/namei.c:230:
+static inline void dx_set_count(struct dx_entry *entries, unsigned value)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1321: FILE: fs/ext4/namei.c:235:
+static inline void dx_set_limit(struct dx_entry *entries, unsigned value)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1327: FILE: fs/ext4/namei.c:240:
+static inline unsigned dx_root_limit(struct inode *dir, unsigned infosize)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1327: FILE: fs/ext4/namei.c:240:
+static inline unsigned dx_root_limit(struct inode *dir, unsigned infosize)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1335: FILE: fs/ext4/namei.c:247:
+static inline unsigned dx_node_limit(struct inode *dir)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1344: FILE: fs/ext4/namei.c:309:
+	unsigned count = dx_get_count(entries), names = 0, space = 0, i;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1362: FILE: fs/ext4/namei.c:410:
+	dxtrace(printk("Look up %x", hash));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1429: FILE: fs/ext4/namei.c:1035:
+static struct dentry *ext4_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)
                                                                                               ^^

CHECK:SPACING: No space is necessary after a cast
#1454: FILE: fs/ext4/namei.c:1206:
+	count = dx_make_map((struct ext4_dir_entry_2 *) data1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1455: FILE: fs/ext4/namei.c:1207:
+	count = dx_make_map((struct ext4_dir_entry_2 *) data1,
 			     blocksize, hinfo, map);

CHECK:SPACING: No space is necessary after a cast
#1587: FILE: fs/ext4/namei.c:1573:
+			memcpy((char *) entries2, (char *) (entries + icount1),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1605: FILE: fs/ext4/namei.c:1588:
+			dxtrace(dx_show_index("node",
 			       ((struct dx_node *) bh2->b_data)->entries));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1633: FILE: fs/ext4/namei.c:1724:
+		       struct nameidata *nd)
 		                         ^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1724: FILE: fs/ext4/namei.c:1846:
+		iput(inode);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1781: FILE: fs/ext4/namei.c:1905:
+			bh = ext4_bread(NULL, inode,
 				offset >> EXT4_BLOCK_SIZE_BITS(sb), 0, &err);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1927: FILE: fs/ext4/namei.c:2210:
+	inode = ext4_new_inode(handle, dir, S_IFLNK|S_IRWXUGO);
 	                                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1927: FILE: fs/ext4/namei.c:2210:
+	inode = ext4_new_inode(handle, dir, S_IFLNK|S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1942: FILE: fs/ext4/namei.c:2228:
+			iput(inode);
 			^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2023: FILE: fs/ext4/namei.c:2349:
+		if (!new_inode && new_dir != old_dir &&
 				new_dir->i_nlink >= EXT4_LINK_MAX)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2109: FILE: fs/ext4/symlink.c:26:
+static void *ext4_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2113: FILE: fs/ext4/symlink.c:29:
+	nd_set_link(nd, (char *) ei->i_data);
 	            ^^

CHECK:SPACING: No space is necessary after a cast
#2113: FILE: fs/ext4/symlink.c:29:
+	nd_set_link(nd, (char *) ei->i_data);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000219326.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 93 warnings, 47 checks, 1854 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000219326.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
