WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
The rationale for using shmem seems to be that pageable "objects" are needed,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#45: 
Upon actually looking at how "GEM" makes use of its shmem_file_setup filp, I
                                                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#55: 
drop in replacement because one isn't allowed to know about the filp behind
                                                                ^^^^

WARNING:BAD_SIGN_OFF: email address 'keith.packard@intel.com, eric@anholt.net, hugh@veritas.com, hch@infradead.org, airlied@linux.ie, jbarnes@virtuousgeek.org, thomas@tungstengraphics.com, dri-devel@lists.sourceforge.net' might be better as 'keith.packard@intel.com eric@anholt.net, hugh@veritas.com, hch@infradead.org, airlied@linux.ie, jbarnes@virtuousgeek.org, thomas@tungstengraphics.com, dri-devel@lists.sourceforge.net'
#81: 
Cc: keith.packard@intel.com, eric@anholt.net, hugh@veritas.com, hch@infradead.org, airlied@linux.ie, jbarnes@virtuousgeek.org, thomas@tungstengraphics.com, dri-devel@lists.sourceforge.net

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Unexpected content after email: 'keith.packard@intel.com, eric@anholt.net, hugh@veritas.com, hch@infradead.org, airlied@linux.ie, jbarnes@virtuousgeek.org, thomas@tungstengraphics.com, dri-devel@lists.sourceforge.net', should be: 'keith.packard@intel.com (eric@anholt.net, hugh@veritas.com, hch@infradead.org, airlied@linux.ie, jbarnes@virtuousgeek.org, thomas@tungstengraphics.com, dri-devel@lists.sourceforge.net)'
#81: 
Cc: keith.packard@intel.com, eric@anholt.net, hugh@veritas.com, hch@infradead.org, airlied@linux.ie, jbarnes@virtuousgeek.org, thomas@tungstengraphics.com, dri-devel@lists.sourceforge.net

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#89: FILE: include/linux/pageable_alloc.h:1:
+#ifndef __MM_PAGEABLE_ALLOC_H__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#95: FILE: include/linux/pageable_alloc.h:7:
+typedef struct pgobj pgobj_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#219: FILE: mm/pageable_alloc.c:1:
+/*

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#241: FILE: mm/pageable_alloc.c:23:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#243: FILE: mm/pageable_alloc.c:25:
+	filp = shmem_file_setup("pageable object", size, 0);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#245: FILE: mm/pageable_alloc.c:27:
+	return (struct pgobj *)filp;
 	                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#250: FILE: mm/pageable_alloc.c:32:
+	struct file *filp = (struct file *)object;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#252: FILE: mm/pageable_alloc.c:34:
+	fput(filp);
 	     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#257: FILE: mm/pageable_alloc.c:39:
+	struct file *filp = (struct file *)object;
 	             ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#262: FILE: mm/pageable_alloc.c:44:
+	BUG_ON(start >= end);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#270: FILE: mm/pageable_alloc.c:52:
+		page = read_mapping_page(mapping, i, filp);
 		                                     ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#277: FILE: mm/pageable_alloc.c:59:
+	BUG_ON(err);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#282: FILE: mm/pageable_alloc.c:64:
+		pageable_unpin_object(object, start, start + i*PAGE_SIZE);
 		                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#288: FILE: mm/pageable_alloc.c:70:
+	struct file *filp = (struct file *)object;
 	             ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: mm/pageable_alloc.c:74:
+	BUG_ON(start >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#303: FILE: mm/pageable_alloc.c:85:
+		BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#304: FILE: mm/pageable_alloc.c:86:
+		BUG_ON(page_count(page) < 2);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#311: FILE: mm/pageable_alloc.c:93:
+	struct file *filp = (struct file *)object;
 	             ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#315: FILE: mm/pageable_alloc.c:97:
+	BUG_ON(start >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#326: FILE: mm/pageable_alloc.c:108:
+		BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#327: FILE: mm/pageable_alloc.c:109:
+		BUG_ON(page_count(page) < 2);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#334: FILE: mm/pageable_alloc.c:116:
+	struct file *filp = (struct file *)object;
 	             ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#342: FILE: mm/pageable_alloc.c:124:
+	BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#343: FILE: mm/pageable_alloc.c:125:
+	BUG_ON(page_count(page) < 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#350: FILE: mm/pageable_alloc.c:132:
+	BUG_ON(page_count(page) < 2);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#356: FILE: mm/pageable_alloc.c:138:
+	struct file *filp = (struct file *)object;
 	             ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#364: FILE: mm/pageable_alloc.c:146:
+	BUG_ON(start >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#377: FILE: mm/pageable_alloc.c:159:
+		BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#378: FILE: mm/pageable_alloc.c:160:
+		BUG_ON(page_count(page) < 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#396: FILE: mm/pageable_alloc.c:178:
+		BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#397: FILE: mm/pageable_alloc.c:179:
+		BUG_ON(page_count(page) < 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#417: FILE: mm/pageable_alloc.c:199:
+	BUG_ON(start >= end);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#447: FILE: mm/pageable_alloc.c:229:
+int pageable_pin_object(pgobj_t *object, unsigned long start, unsigned long end){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#447: FILE: mm/pageable_alloc.c:229:
+int pageable_pin_object(pgobj_t *object, unsigned long start, unsigned long end){

WARNING:LINE_SPACING: Missing a blank line after declarations
#462: FILE: mm/pageable_alloc.c:244:
+	void *ptr = object;
+	return virt_to_page(ptr + off);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#472: FILE: mm/pageable_alloc.c:254:
+	void *ptr = object;
+	return ptr + start;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000225496.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 38 warnings, 1 checks, 380 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000225496.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
