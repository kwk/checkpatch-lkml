WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: arch/x86/kernel/pci-swiotlb_64.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Losely' may be misspelled - perhaps 'Loosely'?
#86: FILE: arch/x86/kernel/pci-swiotlb_64.c:3:
+ * Losely based on the original swiotlb.c from Asit Mallick et.al.
    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#107: FILE: arch/x86/kernel/pci-swiotlb_64.c:24:
+#define DEFAULT_SWIOTLB_SIZE (64*1024*1024)
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#107: FILE: arch/x86/kernel/pci-swiotlb_64.c:24:
+#define DEFAULT_SWIOTLB_SIZE (64*1024*1024)
                                      ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#126: FILE: arch/x86/kernel/pci-swiotlb_64.c:29:
+#define SetPageSwiotlb(p)	set_bit(PG_swiotlb, &(p)->flags);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#127: FILE: arch/x86/kernel/pci-swiotlb_64.c:30:
+#define ClearPageSwiotlb(p)	clear_bit(PG_swiotlb, &(p)->flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#131: FILE: arch/x86/kernel/pci-swiotlb_64.c:34:
+unsigned swiotlb_size;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#133: FILE: arch/x86/kernel/pci-swiotlb_64.c:36:
+static unsigned long io_tlb_overflow = 32*1024;
                                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#151: FILE: arch/x86/kernel/pci-swiotlb_64.c:54:
+	printk(KERN_ERR "DMA: Out of DMA-TLB bounce space for %zu bytes at "

WARNING:SPLIT_STRING: quoted string split across lines
#152: FILE: arch/x86/kernel/pci-swiotlb_64.c:55:
+	printk(KERN_ERR "DMA: Out of DMA-TLB bounce space for %zu bytes at "
+	       "device %s\n", size, dev ? dev->bus_id : "?");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#174: FILE: arch/x86/kernel/pci-swiotlb_64.c:77:
+	unsigned waste;

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: arch/x86/kernel/pci-swiotlb_64.c:78:
+	unsigned waste;
+	get_cpu();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: arch/x86/kernel/pci-swiotlb_64.c:96:
+	gfp_t gfp = GFP_ATOMIC;
+	p = alloc_pages_mask(gfp, max(size, MASK_MIN_SIZE), *hwdev->dma_mask);

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: arch/x86/kernel/pci-swiotlb_64.c:106:
+		struct page *n = p + i;
+		SetPageSwiotlb(n);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#204: FILE: arch/x86/kernel/pci-swiotlb_64.c:107:
+		n->lru.next = (void *)buffer + i*PAGE_SIZE;
 		                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#211: FILE: arch/x86/kernel/pci-swiotlb_64.c:114:
+	BUG_ON(virt_to_phys(dma_addr + size - 1) & ~*hwdev->dma_mask);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#223: FILE: arch/x86/kernel/pci-swiotlb_64.c:126:
+	BUG_ON(dir == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#227: FILE: arch/x86/kernel/pci-swiotlb_64.c:130:
+	BUG_ON((long)p->lru.prev < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#228: FILE: arch/x86/kernel/pci-swiotlb_64.c:131:
+	BUG_ON((unsigned long)p->lru.prev < size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#244: FILE: arch/x86/kernel/pci-swiotlb_64.c:147:
+		struct page *n = p + i;
+		ClearPageSwiotlb(n);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#245: FILE: arch/x86/kernel/pci-swiotlb_64.c:148:
+		BUG_ON((long)n->lru.prev < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#246: FILE: arch/x86/kernel/pci-swiotlb_64.c:149:
+		BUG_ON((void *)n->lru.next != buffer + i*PAGE_SIZE);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#246: FILE: arch/x86/kernel/pci-swiotlb_64.c:149:
+		BUG_ON((void *)n->lru.next != buffer + i*PAGE_SIZE);
 		                                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#264: FILE: arch/x86/kernel/pci-swiotlb_64.c:167:
+			BUG_ON(dir != DMA_TO_DEVICE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#270: FILE: arch/x86/kernel/pci-swiotlb_64.c:173:
+			BUG_ON(dir != DMA_FROM_DEVICE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#273: FILE: arch/x86/kernel/pci-swiotlb_64.c:176:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#291: FILE: arch/x86/kernel/pci-swiotlb_64.c:194:
+	BUG_ON(dir == DMA_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: arch/x86/kernel/pci-swiotlb_64.c:228:
+dmatlb_sync_single(struct device *hwdev, dma_addr_t dev_addr,
+		    size_t size, int dir, int tgt)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#330: FILE: arch/x86/kernel/pci-swiotlb_64.c:233:
+	BUG_ON(dir == DMA_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: arch/x86/kernel/pci-swiotlb_64.c:241:
+dmatlb_sync_single_for_cpu(struct device *hwdev, dma_addr_t dev_addr,
+			    size_t size, int dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: arch/x86/kernel/pci-swiotlb_64.c:248:
+dmatlb_sync_single_for_device(struct device *hwdev, dma_addr_t dev_addr,
+			       size_t size, int dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: arch/x86/kernel/pci-swiotlb_64.c:258:
+dmatlb_sync_single_range(struct device *hwdev, dma_addr_t dev_addr,
+			  unsigned long offset, size_t size,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#361: FILE: arch/x86/kernel/pci-swiotlb_64.c:264:
+	BUG_ON(dir == DMA_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: arch/x86/kernel/pci-swiotlb_64.c:274:
+	dmatlb_sync_single_range(hwdev, dev_addr, offset, size, dir,
+				  SYNC_FOR_CPU);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: arch/x86/kernel/pci-swiotlb_64.c:284:
+	dmatlb_sync_single_range(hwdev, dev_addr, offset, size, dir,
+				  SYNC_FOR_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: arch/x86/kernel/pci-swiotlb_64.c:293:
+dmatlb_unmap_sg(struct device *hwdev, struct scatterlist *sg, int nelems,
+		 int dir)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: arch/x86/kernel/pci-swiotlb_64.c:297:
+	BUG_ON(dir == DMA_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: arch/x86/kernel/pci-swiotlb_64.c:308:
+dmatlb_map_sg(struct device *hwdev, struct scatterlist *sg, int nelems,
+	       int dir)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#411: FILE: arch/x86/kernel/pci-swiotlb_64.c:314:
+	BUG_ON(dir == DMA_NONE);

CHECK:BRACES: braces {} should be used on all arms of this statement
#416: FILE: arch/x86/kernel/pci-swiotlb_64.c:319:
+		if (swiotlb_force || needs_mapping(hwdev, dev_addr)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#418: FILE: arch/x86/kernel/pci-swiotlb_64.c:321:
+			void *map;
+			map = map_single(hwdev, addr, sg->length, dir);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#421: FILE: arch/x86/kernel/pci-swiotlb_64.c:324:
+				/* Don't panic here, we expect map_sg users
+				   to do proper error handling. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#421: FILE: arch/x86/kernel/pci-swiotlb_64.c:324:
+				   to do proper error handling. */

CHECK:BRACES: Unbalanced braces around else statement
#428: FILE: arch/x86/kernel/pci-swiotlb_64.c:331:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: arch/x86/kernel/pci-swiotlb_64.c:340:
+dmatlb_sync_sg(struct device *hwdev, struct scatterlist *sg,
+		int nelems, int dir, int target)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#441: FILE: arch/x86/kernel/pci-swiotlb_64.c:344:
+	BUG_ON(dir == DMA_NONE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#446: FILE: arch/x86/kernel/pci-swiotlb_64.c:349:
+		struct page *pg = virt_to_page(p);
+		if (PageSwiotlb(pg))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: arch/x86/kernel/pci-swiotlb_64.c:357:
+dmatlb_sync_sg_for_cpu(struct device *hwdev, struct scatterlist *sg,
+			int nelems, int dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: arch/x86/kernel/pci-swiotlb_64.c:364:
+dmatlb_sync_sg_for_device(struct device *hwdev, struct scatterlist *sg,
+			   int nelems, int dir)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#497: FILE: arch/x86/kernel/pci-swiotlb_64.c:400:
+		printk(KERN_INFO

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: arch/x86/kernel/pci-swiotlb_64.c:401:
+       "PCI-DMA: Using software bounce buffering for IO (SWIOTLB)\n");$

WARNING:LINE_SPACING: Missing a blank line after declarations
#521: FILE: arch/x86/kernel/pci-swiotlb_64.c:424:
+		char *e;
+		slabs = simple_strtoul(str, &e, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#521: FILE: arch/x86/kernel/pci-swiotlb_64.c:424:
+		slabs = simple_strtoul(str, &e, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#533: FILE: arch/x86/kernel/pci-swiotlb_64.c:436:
+__setup("swiotlb=", setup_io_tlb_npages);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310109.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 35 warnings, 19 checks, 512 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310109.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
