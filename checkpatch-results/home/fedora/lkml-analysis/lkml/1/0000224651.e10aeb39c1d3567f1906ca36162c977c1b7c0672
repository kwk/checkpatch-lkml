WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#67: FILE: fs/ocfs2/alloc.c:92:
+	BUG_ON(et->et_type != OCFS2_DINODE_EXTENT);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#78: FILE: fs/ocfs2/alloc.c:101:
+	BUG_ON(et->et_type != OCFS2_DINODE_EXTENT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#96: FILE: fs/ocfs2/alloc.c:124:
+	BUG_ON(et->et_type != OCFS2_DINODE_EXTENT);

CHECK:SPACING: No space is necessary after a cast
#117: FILE: fs/ocfs2/alloc.c:156:
+		(struct ocfs2_xattr_value_root *) et->et_private;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#135: FILE: fs/ocfs2/alloc.c:188:
+		(struct ocfs2_xattr_block *) et->et_root_bh->b_data;

CHECK:SPACING: No space is necessary after a cast
#144: FILE: fs/ocfs2/alloc.c:197:
+		(struct ocfs2_xattr_block *) et->et_root_bh->b_data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: fs/ocfs2/alloc.c:258:
+		et->et_max_leaf_clusters = ocfs2_clusters_for_bytes(inode->i_sb,
 						OCFS2_MAX_XATTR_TREE_LEAF_SIZE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > et->et_max_leaf_clusters'
#367: FILE: fs/ocfs2/alloc.c:4163:
+		if (et->et_max_leaf_clusters &&
+		    (len > et->et_max_leaf_clusters))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224651.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 5 checks, 360 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224651.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
