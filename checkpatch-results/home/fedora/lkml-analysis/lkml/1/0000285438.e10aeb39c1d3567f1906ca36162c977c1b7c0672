WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#60: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: arch/microblaze/lib/memcpy.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#66: FILE: arch/microblaze/lib/memcpy.c:2:
+ * arch/microblaze/lib/memcpy.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'unsuccesfully' may be misspelled - perhaps 'unsuccessfully'?
#76: FILE: arch/microblaze/lib/memcpy.c:12:
+ * Attempts were made, unsuccesfully, to contact the original
                        ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/string.h> instead of <asm/string.h>
#96: FILE: arch/microblaze/lib/memcpy.c:32:
+#include <asm/string.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#117: FILE: arch/microblaze/lib/memcpy.c:53:
+	const uint32_t *i_src;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#118: FILE: arch/microblaze/lib/memcpy.c:54:
+	uint32_t *i_dst;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#121: FILE: arch/microblaze/lib/memcpy.c:57:
+		unsigned  value, buf_hold;

WARNING:TYPO_SPELLING: 'dstination' may be misspelled - perhaps 'destination'?
#123: FILE: arch/microblaze/lib/memcpy.c:59:
+		/* Align the dstination to a word boundry. */
 		             ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#123: FILE: arch/microblaze/lib/memcpy.c:59:
+		/* Align the dstination to a word boundry. */
 		                                  ^^^^^^^

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#124: FILE: arch/microblaze/lib/memcpy.c:60:
+		/* This is done in an endian independant manner. */
 		                             ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'dstination' may be misspelled - perhaps 'destination'?
#140: FILE: arch/microblaze/lib/memcpy.c:76:
+		/* alignment relative to dstination. */
 		                         ^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#152: FILE: arch/microblaze/lib/memcpy.c:88:
+			i_src = (const void *) ((unsigned)src & ~3);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#152: FILE: arch/microblaze/lib/memcpy.c:88:
+			i_src = (const void *) ((unsigned)src & ~3);

CHECK:SPACING: No space is necessary after a cast
#169: FILE: arch/microblaze/lib/memcpy.c:105:
+			i_src = (const void *) ((unsigned)src & ~3);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#169: FILE: arch/microblaze/lib/memcpy.c:105:
+			i_src = (const void *) ((unsigned)src & ~3);

CHECK:SPACING: No space is necessary after a cast
#186: FILE: arch/microblaze/lib/memcpy.c:122:
+			i_src = (const void *) ((unsigned)src & ~3);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#186: FILE: arch/microblaze/lib/memcpy.c:122:
+			i_src = (const void *) ((unsigned)src & ~3);

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#206: FILE: arch/microblaze/lib/memcpy.c:142:
+	/* simple fast copy, ... unless a cache boundry is crossed */
 	                                        ^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#222: FILE: arch/microblaze/lib/memcpy.c:158:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#233: FILE: arch/microblaze/lib/memmove.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#234: FILE: arch/microblaze/lib/memmove.c:2:
+ * arch/microblaze/lib/memmove.c

WARNING:TYPO_SPELLING: 'unsuccesfully' may be misspelled - perhaps 'unsuccessfully'?
#244: FILE: arch/microblaze/lib/memmove.c:12:
+ * Attempts were made, unsuccesfully, to contact the original
                        ^^^^^^^^^^^^^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/string.h> instead of <asm/string.h>
#264: FILE: arch/microblaze/lib/memmove.c:32:
+#include <asm/string.h>

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#273: FILE: arch/microblaze/lib/memmove.c:41:
+	const uint32_t *i_src;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#274: FILE: arch/microblaze/lib/memmove.c:42:
+	uint32_t *i_dst;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#307: FILE: arch/microblaze/lib/memmove.c:75:
+		unsigned  value, buf_hold;

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#309: FILE: arch/microblaze/lib/memmove.c:77:
+		/* Align the destination to a word boundry. */
 		                                   ^^^^^^^

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#310: FILE: arch/microblaze/lib/memmove.c:78:
+		/* This is done in an endian independant manner. */
 		                             ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'dstination' may be misspelled - perhaps 'destination'?
#326: FILE: arch/microblaze/lib/memmove.c:94:
+		/* alignment relative to dstination. */
 		                         ^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#339: FILE: arch/microblaze/lib/memmove.c:107:
+			i_src = (const void *) (((unsigned)src + 4) & ~3);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#339: FILE: arch/microblaze/lib/memmove.c:107:
+			i_src = (const void *) (((unsigned)src + 4) & ~3);

CHECK:SPACING: No space is necessary after a cast
#356: FILE: arch/microblaze/lib/memmove.c:124:
+			i_src = (const void *) (((unsigned)src + 4) & ~3);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#356: FILE: arch/microblaze/lib/memmove.c:124:
+			i_src = (const void *) (((unsigned)src + 4) & ~3);

CHECK:SPACING: No space is necessary after a cast
#373: FILE: arch/microblaze/lib/memmove.c:141:
+			i_src = (const void *) (((unsigned)src + 4) & ~3);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#373: FILE: arch/microblaze/lib/memmove.c:141:
+			i_src = (const void *) (((unsigned)src + 4) & ~3);

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#392: FILE: arch/microblaze/lib/memmove.c:160:
+	/* simple fast copy, ... unless a cache boundry is crossed */
 	                                        ^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#415: FILE: arch/microblaze/lib/memset.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#416: FILE: arch/microblaze/lib/memset.c:2:
+ * arch/microblaze/lib/memset.c

WARNING:TYPO_SPELLING: 'unsuccesfully' may be misspelled - perhaps 'unsuccessfully'?
#426: FILE: arch/microblaze/lib/memset.c:12:
+ * Attempts were made, unsuccesfully, to contact the original
                        ^^^^^^^^^^^^^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/string.h> instead of <asm/string.h>
#446: FILE: arch/microblaze/lib/memset.c:32:
+#include <asm/string.h>

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#452: FILE: arch/microblaze/lib/memset.c:38:
+	uint32_t *i_src;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#453: FILE: arch/microblaze/lib/memset.c:39:
+	uint32_t w32;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#456: FILE: arch/microblaze/lib/memset.c:42:
+	w32 = c = (c & 0xFF);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#465: FILE: arch/microblaze/lib/memset.c:51:
+		/* This is done in an endian independant manner */
 		                             ^^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#466: FILE: arch/microblaze/lib/memset.c:52:
+		switch ((unsigned) src & 3) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#466: FILE: arch/microblaze/lib/memset.c:52:
+		switch ((unsigned) src & 3) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#467: FILE: arch/microblaze/lib/memset.c:53:
+		case 1: *src++ = c;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#469: FILE: arch/microblaze/lib/memset.c:55:
+		case 2: *src++ = c;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#471: FILE: arch/microblaze/lib/memset.c:57:
+		case 3: *src++ = c;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285438.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 29 warnings, 18 checks, 415 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285438.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
