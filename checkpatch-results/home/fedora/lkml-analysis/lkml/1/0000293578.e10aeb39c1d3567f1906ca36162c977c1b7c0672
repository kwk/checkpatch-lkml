WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#38: FILE: Makefile:4:
+EXTRAVERSION = .5
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#60: FILE: arch/parisc/kernel/firmware.c:1084:
+static int __attribute__((aligned(8)))   iodc_retbuf[32];

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(64) over __attribute__((aligned(64)))
#61: FILE: arch/parisc/kernel/firmware.c:1085:
+static char __attribute__((aligned(64))) iodc_dbuf[4096];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#70: FILE: arch/parisc/kernel/firmware.c:1097:
+int pdc_iodc_print(const unsigned char *str, unsigned count)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#101: FILE: arch/parisc/kernel/firmware.c:1130:
+	if (i == 79 && iodc_dbuf[i-1] != '\n') {
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#102: FILE: arch/parisc/kernel/firmware.c:1131:
+		iodc_dbuf[i+0] = '\r';
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#103: FILE: arch/parisc/kernel/firmware.c:1132:
+		iodc_dbuf[i+1] = '\n';
 		           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: arch/x86/xen/enlighten.c:106:
+	BUG_ON(HYPERVISOR_shared_info == &dummy_shared_info);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#312: FILE: arch/x86/xen/enlighten.c:824:
+	/* This will work as long as patching hasn't happened yet
+	   (which it hasn't) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#312: FILE: arch/x86/xen/enlighten.c:824:
+	   (which it hasn't) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#328: FILE: arch/x86/xen/enlighten.c:1181:
+	   possible map and a non-dummy shared_info. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err_mask == AC_ERR_DEV'
#452: FILE: drivers/ata/libata-core.c:1944:
+		if ((err_mask == AC_ERR_DEV) && (tf.feature & ATA_ABORTED)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#534: FILE: drivers/hwmon/w83781d.c:1825:
+	/* We have to request the region in two parts because some
+	   boards declare base+4 to base+7 as a PNP device */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#534: FILE: drivers/hwmon/w83781d.c:1825:
+	   boards declare base+4 to base+7 as a PNP device */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#630: FILE: drivers/md/raid5.c:2356:
+	if (test_and_clear_bit(STRIPE_OP_CHECK, &sh->ops.complete)) {
+	    clear_bit(STRIPE_OP_CHECK, &sh->ops.ack);

CHECK:BRACES: Unbalanced braces around else statement
#642: FILE: drivers/md/raid5.c:2384:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#658: FILE: drivers/md/raid5.c:2405:
+			BUG_ON(s->uptodate != disks);
 			          ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#658: FILE: drivers/md/raid5.c:2405:
+			BUG_ON(s->uptodate != disks);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#669: FILE: drivers/md/raid5.c:2415:
+	 * since the parity block may not be uptodate
 	                                     ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <SGlist>
#823: FILE: drivers/media/video/ivtv/ivtv-driver.c:691:
+	sg_init_table(itv->udma.SGlist, IVTV_DMA_SG_OSD_ENT);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#849: FILE: drivers/mtd/chips/cfi_cmdset_0001.c:672:
+		/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#868: FILE: drivers/mtd/chips/cfi_cmdset_0001.c:739:
+		/* Fall through */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#911: FILE: drivers/net/plip.c:911:
+	spin_lock_irqsave (&nl->lock, flags);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#918: FILE: drivers/net/plip.c:917:
+		spin_unlock_irqrestore (&nl->lock, flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1241: FILE: drivers/pnp/pnpacpi/rsparser.c:88:
+		printk(KERN_WARNING "pnpacpi: exceeded the max number of IRQ "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1250: FILE: drivers/pnp/pnpacpi/rsparser.c:190:
+		printk(KERN_WARNING "pnpacpi: exceeded the max number of DMA "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1259: FILE: drivers/pnp/pnpacpi/rsparser.c:216:
+		printk(KERN_WARNING "pnpacpi: exceeded the max number of IO "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1268: FILE: drivers/pnp/pnpacpi/rsparser.c:244:
+		printk(KERN_WARNING "pnpacpi: exceeded the max number of mem "

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1298: FILE: drivers/usb/core/message.c:1196:
+		ret = usb_control_msg(dev, usb_sndctrlpipe(dev, 0),
 				   USB_REQ_SET_INTERFACE, USB_RECIP_INTERFACE,

CHECK:CAMELCASE: Avoid CamelCase: <Tag>
#1388: FILE: drivers/usb/storage/transport.c:1013:
+	if (!(bcs->Tag == us->tag || (us->flags & US_FL_BULK_IGNORE_TAG)) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1389: FILE: drivers/usb/storage/transport.c:1014:
+	if (!(bcs->Tag == us->tag || (us->flags & US_FL_BULK_IGNORE_TAG)) ||
+		bcs->Status > US_BULK_STAT_PHASE) {

CHECK:CAMELCASE: Avoid CamelCase: <Status>
#1389: FILE: drivers/usb/storage/transport.c:1014:
+		bcs->Status > US_BULK_STAT_PHASE) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#1406: FILE: drivers/usb/storage/unusual_devs.h:1565:
+UNUSUAL_DEV(  0x22b8, 0x6426, 0x0101, 0x0101,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1407: FILE: drivers/usb/storage/unusual_devs.h:1566:
+UNUSUAL_DEV(  0x22b8, 0x6426, 0x0101, 0x0101,
+		"Motorola",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1435: FILE: fs/buffer.c:2568:
+	BUG_ON(fsdata != NULL && page_has_buffers(page));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fsdata"
#1435: FILE: fs/buffer.c:2568:
+	BUG_ON(fsdata != NULL && page_has_buffers(page));

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#1482: FILE: fs/hfsplus/dir.c:345:
+	if (!inode->i_nlink) {
[...]
+			hfsplus_delete_inode(inode);
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1483: FILE: fs/hfsplus/dir.c:346:
+		if (inode->i_ino != cnid) {
[...]
 		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1485: FILE: fs/hfsplus/dir.c:348:
+			if (!atomic_read(&HFSPLUS_I(inode).opencnt)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1491: FILE: fs/hfsplus/dir.c:354:
+			} else

ERROR:SPACING: spaces required around that '&=' (ctx:WxO)
#1528: FILE: fs/inotify.c:178:
+				child->d_flags &=~DCACHE_INOTIFY_PARENT_WATCHED;
 				               ^

ERROR:SPACING: space required before that '~' (ctx:OxV)
#1528: FILE: fs/inotify.c:178:
+				child->d_flags &=~DCACHE_INOTIFY_PARENT_WATCHED;
 				                 ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1586: FILE: fs/locks.c:1808:
+	if (filp->f_op && filp->f_op->lock != NULL)
[...]
+	else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "filp->f_op->lock"
#1586: FILE: fs/locks.c:1808:
+	if (filp->f_op && filp->f_op->lock != NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1587: FILE: fs/locks.c:1809:
+		error = filp->f_op->lock(filp, cmd, file_lock);
 		                         ^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1588: FILE: fs/locks.c:1810:
+	else {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1590: FILE: fs/locks.c:1812:
+			error = posix_lock_file(filp, file_lock, NULL);
 			                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1594: FILE: fs/locks.c:1816:
+			error = wait_event_interruptible(file_lock->fl_wait,
+					!file_lock->fl_next);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1618: FILE: fs/locks.c:1936:
+	if (filp->f_op && filp->f_op->lock != NULL)
[...]
+	else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "filp->f_op->lock"
#1618: FILE: fs/locks.c:1936:
+	if (filp->f_op && filp->f_op->lock != NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1619: FILE: fs/locks.c:1937:
+		error = filp->f_op->lock(filp, cmd, file_lock);
 		                         ^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1620: FILE: fs/locks.c:1938:
+	else {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1622: FILE: fs/locks.c:1940:
+			error = posix_lock_file(filp, file_lock, NULL);
 			                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1626: FILE: fs/locks.c:1944:
+			error = wait_event_interruptible(file_lock->fl_wait,
+					!file_lock->fl_next);

CHECK:SPACING: No space is necessary after a cast
#1653: FILE: fs/signalfd.c:119:
+		err |= __put_user((long) kinfo->si_ptr, &uinfo->ssi_ptr);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1693: FILE: include/asm-parisc/pdc.h:648:
+int pdc_iodc_print(const unsigned char *str, unsigned count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1745: FILE: include/linux/sched.h:1453:
+extern void wake_up_idle_cpu(int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1783: FILE: include/linux/time.h:177:
+		 * optimising this loop into a modulo operation.  */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1810: FILE: include/linux/usb_usual.h:54:
+	US_FLAG(BULK_IGNORE_TAG,0x00004000)			\
 	                       ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2151: FILE: net/sched/sch_generic.c:188:
+		/*
+		 * Postpone processing if

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#2155: FILE: net/sched/sch_generic.c:192:
+		if (need_resched() || jiffies != start_time) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2176: FILE: net/sched/sch_htb.c:712:
+	/* don't run for longer than 2 jiffies; 2 is used instead of
+	   1 to simplify things when jiffy is going to be incremented

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2177: FILE: net/sched/sch_htb.c:713:
+	   too soon */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2179: FILE: net/sched/sch_htb.c:715:
+	unsigned long stop_at = jiffies + 2;
+	while (time_before(jiffies, stop_at)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2311: FILE: scripts/mod/file2alias.c:54:
+unsigned int cross_build = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000293578.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 35 warnings, 26 checks, 1919 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000293578.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
