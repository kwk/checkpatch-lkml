WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
diff -upr linux-2.6.20.orig/include/linux/rss_container.h linux-2.6.20-0/include/linux/rss_container.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: include/linux/rss_container.h:1:
+#ifndef __RSS_CONTAINER_H__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#65: FILE: include/linux/rss_container.h:17:
+int container_rss_prepare(struct page *, struct vm_area_struct *vma,
+		struct page_container **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page_container *' should also have an identifier name
#67: FILE: include/linux/rss_container.h:19:
+void container_rss_add(struct page_container *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page_container *' should also have an identifier name
#68: FILE: include/linux/rss_container.h:20:
+void container_rss_del(struct page_container *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page_container *' should also have an identifier name
#69: FILE: include/linux/rss_container.h:21:
+void container_rss_release(struct page_container *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#75: FILE: include/linux/rss_container.h:27:
+unsigned long container_isolate_pages(unsigned long nr_to_scan,
+		struct rss_container *rss, struct list_head *dst,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rss_container *' should also have an identifier name
#79: FILE: include/linux/rss_container.h:31:
+unsigned long container_try_to_free_pages(struct rss_container *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rss_container *' should also have an identifier name
#80: FILE: include/linux/rss_container.h:32:
+void container_out_of_memory(struct rss_container *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: include/linux/rss_container.h:37:
+static inline int container_rss_prepare(struct page *pg,
+		struct vm_area_struct *vma, struct page_container **pc)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#124: FILE: init/Kconfig:268:
+config RSS_CONTAINER
+	bool "RSS accounting container"
+	select RESOURCE_COUNTERS
+	help
+	  Provides a simple Resource Controller for monitoring and
+	  controlling the total Resident Set Size of the tasks in a container
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#147: FILE: mm/rss_container.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: mm/rss_container.c:54:
+int container_rss_prepare(struct page *page, struct vm_area_struct *vma,
+		struct page_container **ppc)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pc)...) over kmalloc(sizeof(struct page_container)...)
#210: FILE: mm/rss_container.c:64:
+	pc = kmalloc(sizeof(struct page_container), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pc"
#211: FILE: mm/rss_container.c:65:
+	if (pc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: mm/rss_container.c:132:
+unsigned long container_isolate_pages(unsigned long nr_to_scan,
+		struct rss_container *rss, struct list_head *dst,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: mm/rss_container.c:156:
+			if ((active && PageActive(page)) ||
+					(!active && !PageActive(page))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: mm/rss_container.c:180:
+static void rss_move_task(struct container_subsys *ss,
+		struct container *cont,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm"
#334: FILE: mm/rss_container.c:188:
+	if (mm == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rss)...) over kzalloc(sizeof(struct rss_container)...)
#356: FILE: mm/rss_container.c:210:
+	rss = kzalloc(sizeof(struct rss_container), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rss"
#357: FILE: mm/rss_container.c:211:
+	if (rss == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: mm/rss_container.c:221:
+static void rss_destroy(struct container_subsys *ss,
+		struct container *cont)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#372: FILE: mm/rss_container.c:226:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: mm/rss_container.c:228:
+static ssize_t rss_read(struct container *cont, struct cftype *cft,
+		struct file *file, char __user *userbuf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: mm/rss_container.c:236:
+static ssize_t rss_write(struct container *cont, struct cftype *cft,
+		struct file *file, const char __user *userbuf,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#389: FILE: mm/rss_container.c:243:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: mm/rss_container.c:264:
+static int rss_populate(struct container_subsys *ss,
+		struct container *cont)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#414: FILE: mm/rss_container.c:268:
+	if ((rc = container_add_file(cont, &rss_usage)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#416: FILE: mm/rss_container.c:270:
+	if ((rc = container_add_file(cont, &rss_failcnt)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#418: FILE: mm/rss_container.c:272:
+	if ((rc = container_add_file(cont, &rss_limit)) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: mm/rss_container.c:281:
+static __init int rss_create_early(struct container_subsys *ss,
+		struct container *cont)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#450: FILE: mm/rss_container.c:304:
+	init_mm.rss_container = rss_from_cont(

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000459987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 9 warnings, 20 checks, 393 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000459987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
