WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#77: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: usr/osdblk.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#132: FILE: usr/osdblk.c:51:
+#define EXOFS_DBGMSG(fmt, a...) \
+	if (0) printf(fmt, ##a);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#132: FILE: usr/osdblk.c:51:
+#define EXOFS_DBGMSG(fmt, a...) \
+	if (0) printf(fmt, ##a);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#133: FILE: usr/osdblk.c:52:
+	if (0) printf(fmt, ##a);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usage', this function's name, in a string
#139: FILE: usr/osdblk.c:58:
+	"usage: osdblk COMMAND --pid=pid_no --obj=obj_no --length=ob_size /dev/osdX\n"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'existance' may be misspelled - perhaps 'existence'?
#152: FILE: usr/osdblk.c:71:
+	"        If --length=0 then does nothing (Only check for existance)\n"
 	                                                         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <ullwithGMK>
#179: FILE: usr/osdblk.c:98:
+static u64 ullwithGMK(char *optarg)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <pGMK>
#181: FILE: usr/osdblk.c:100:
+	char *pGMK;

WARNING:TYPO_SPELLING: 'Faild' may be misspelled - perhaps 'Failed'?
#216: FILE: usr/osdblk.c:135:
+		OSDBLK_ERR("Error: Faild to osd_finalize_request() => %d\n",
 		                   ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#225: FILE: usr/osdblk.c:144:
+		if (osi.additional_code == scsi_invalid_field_in_cdb) {
[...]
+		} else if (osi.additional_code == osd_quota_error)
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#246: FILE: usr/osdblk.c:165:
+	struct osd_attr attr_logical_length = ATTR_SET(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: usr/osdblk.c:185:
+	OSDBLK_INFO("Resized: pid=0x%llx oid=0x%llx length=0x%llx\n",
+		_LLU(obj->partition), _LLU(obj->id),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: usr/osdblk.c:209:
+	OSDBLK_INFO("Created: pid=0x%llx oid=0x%llx\n",
+		_LLU(obj->partition), _LLU(obj->id));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: usr/osdblk.c:232:
+	OSDBLK_INFO("Removed: pid=0x%llx oid=0x%llx\n",
+		_LLU(obj->partition), _LLU(obj->id));

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#359: FILE: usr/osdblk.c:278:
+		{.name = "create", .has_arg = 0, .flag = NULL, .val = 'c'} ,
 		                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#360: FILE: usr/osdblk.c:279:
+		{.name = "remove", .has_arg = 0, .flag = NULL, .val = 'r'} ,
 		                                                           ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#361: FILE: usr/osdblk.c:280:
+		{.name = "resize", .has_arg = 0, .flag = NULL, .val = 's'} ,
 		                                                           ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#362: FILE: usr/osdblk.c:281:
+		{.name = "pid", .has_arg = 1, .flag = NULL, .val =  'p'} ,
 		                                                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#363: FILE: usr/osdblk.c:282:
+		{.name = "oid", .has_arg = 1, .flag = NULL, .val =  'o'} ,
 		                                                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#364: FILE: usr/osdblk.c:283:
+		{.name = "size", .has_arg = 1, .flag = NULL, .val = 'l'} ,
 		                                                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#366: FILE: usr/osdblk.c:285:
+		{.name = 0, .has_arg = 0, .flag = 0, .val = 0} ,
 		                                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'todo == osd_none'
#407: FILE: usr/osdblk.c:326:
+	if ((todo == osd_none) || !obj.partition || !obj.id) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108039.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 6 warnings, 8 checks, 360 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108039.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
