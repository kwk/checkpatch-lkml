ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#68: FILE: arch/x86_64/kernel/apic.c:46:
+int apic_calibrate_pmtmr __initdata = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#71: FILE: arch/x86_64/kernel/apic.c:48:
+int disable_apic_timer __initdata = 0;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#95: FILE: arch/x86_64/kernel/e820.c:405:
+	static struct change_member change_point_list[2*E820MAX] __initdata = {{0}};
 	                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#96: FILE: arch/x86_64/kernel/e820.c:406:
+	static struct change_member *change_point[2*E820MAX] __initdata = {0};
 	                                           ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#107: FILE: arch/x86_64/kernel/e820.c:621:
+static int userdef __initdata = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#119: FILE: arch/x86_64/kernel/early_printk.c:216:
+static int __initdata keep_early = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after keep_early
#119: FILE: arch/x86_64/kernel/early_printk.c:216:
+static int __initdata keep_early = 0;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#131: FILE: arch/x86_64/kernel/early-quirks.c:33:
+static int nvidia_hpet_detected __initdata = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#143: FILE: arch/x86_64/kernel/io_apic.c:58:
+static int disable_timer_pin_1 __initdata = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#155: FILE: arch/x86_64/kernel/mpparse.c:65:
+unsigned disabled_cpus __initdata = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#169: FILE: arch/x86_64/kernel/pci-calgary.c:145:
+static struct rio_table_hdr	*rio_table_hdr __initdata = NULL;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#205: FILE: arch/x86_64/kernel/setup.c:336:
+unsigned __initdata ebda_addr = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#206: FILE: arch/x86_64/kernel/setup.c:337:
+unsigned __initdata ebda_size = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0l
#218: FILE: arch/x86_64/mm/init.c:52:
+static unsigned long dma_reserve __initdata = 0l;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#241: FILE: arch/x86_64/mm/numa.c:38:
+int numa_off __initdata = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0l
#242: FILE: arch/x86_64/mm/numa.c:39:
+unsigned long __initdata nodemap_addr = 0l;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0l
#243: FILE: arch/x86_64/mm/numa.c:40:
+unsigned long __initdata nodemap_size = 0l;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#255: FILE: arch/x86_64/mm/srat.c:24:
+int acpi_numa __initdata = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#265: FILE: arch/x86_64/mm/srat.c:31:
+static int found_add_area __initdata = 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 1 warnings, 2 checks, 171 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
