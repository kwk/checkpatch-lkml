WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
The maximum length of string data is limited to 4000 including trailing '\0'.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: fs/realpath.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#50: FILE: fs/realpath.c:2:
+ * fs/realpath.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#67: FILE: fs/realpath.c:19:
+#include <asm/atomic.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: fs/realpath.c:88:
+				char *ep;
+				const pid_t pid

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#137: FILE: fs/realpath.c:89:
+				const pid_t pid
+					= (pid_t) simple_strtoul(sp, &ep, 10);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: No space is necessary after a cast
#137: FILE: fs/realpath.c:89:
+					= (pid_t) simple_strtoul(sp, &ep, 10);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#137: FILE: fs/realpath.c:89:
+					= (pid_t) simple_strtoul(sp, &ep, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: No space is necessary after a cast
#145: FILE: fs/realpath.c:97:
+				c = *(unsigned char *) cp;

CHECK:SPACING: No space is necessary after a cast
#155: FILE: fs/realpath.c:107:
+					*--end = (char) c;

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: fs/realpath.c:133:
+		unsigned char c;
+		while (sp <= cp) {

CHECK:SPACING: No space is necessary after a cast
#182: FILE: fs/realpath.c:134:
+			c = *(unsigned char *) cp;

CHECK:SPACING: No space is necessary after a cast
#192: FILE: fs/realpath.c:144:
+				*--end = (char) c;

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: fs/realpath.c:181:
+	struct vfsmount *d_mnt;
+	if (!dentry || !mnt || !newname || newname_len <= 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#243: FILE: fs/realpath.c:195:
+		printk(KERN_WARNING "ccs_realpath: Pathname too long.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#262: FILE: fs/realpath.c:214:
+	char *buf = ccs_alloc(sizeof(struct ccs_page_buffer));
+	if (buf && ccs_realpath_from_dentry2(dentry, mnt, buf,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#278: FILE: fs/realpath.c:230:
+	struct nameidata nd;
 	                 ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#279: FILE: fs/realpath.c:231:
+	if (pathname && path_lookup(pathname, LOOKUP_FOLLOW, &nd) == 0) {
 	                                                      ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: fs/realpath.c:231:
+	struct nameidata nd;
+	if (pathname && path_lookup(pathname, LOOKUP_FOLLOW, &nd) == 0) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#280: FILE: fs/realpath.c:232:
+		char *buf = ccs_realpath_from_dentry(nd.path.dentry,
 		                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#281: FILE: fs/realpath.c:233:
+						     nd.path.mnt);
 						     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#282: FILE: fs/realpath.c:234:
+		path_put(&nd.path);
 		          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#297: FILE: fs/realpath.c:249:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#298: FILE: fs/realpath.c:250:
+	if (pathname && path_lookup(pathname, 0, &nd) == 0) {
 	                                          ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#298: FILE: fs/realpath.c:250:
+	struct nameidata nd;
+	if (pathname && path_lookup(pathname, 0, &nd) == 0) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#299: FILE: fs/realpath.c:251:
+		char *buf = ccs_realpath_from_dentry(nd.path.dentry,
 		                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#300: FILE: fs/realpath.c:252:
+						     nd.path.mnt);
 						     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#301: FILE: fs/realpath.c:253:
+		path_put(&nd.path);
 		          ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#355: FILE: fs/realpath.c:307:
+	const unsigned int word_aligned_size = round_up(size);
+	if (word_aligned_size > PAGE_SIZE)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#361: FILE: fs/realpath.c:313:
+			printk(KERN_WARNING "ERROR: Out of memory "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#361: FILE: fs/realpath.c:313:
+		if (!ptr) {
+			printk(KERN_WARNING "ERROR: Out of memory "

WARNING:SPLIT_STRING: quoted string split across lines
#362: FILE: fs/realpath.c:314:
+			printk(KERN_WARNING "ERROR: Out of memory "
+			       "for ccs_alloc_element().\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ccs_alloc_element', this function's name, in a string
#362: FILE: fs/realpath.c:314:
+			       "for ccs_alloc_element().\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#373: FILE: fs/realpath.c:325:
+		int i;
+		ptr = buf + buf_used_len;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#378: FILE: fs/realpath.c:330:
+			printk(KERN_ERR "WARNING: Reserved memory was tainted! "

WARNING:SPLIT_STRING: quoted string split across lines
#379: FILE: fs/realpath.c:331:
+			printk(KERN_ERR "WARNING: Reserved memory was tainted! "
+			       "The system might go wrong.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#435: FILE: fs/realpath.c:387:
+	char *cp;
+	if (!name)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#439: FILE: fs/realpath.c:391:
+		printk(KERN_WARNING "ERROR: Name too long "

WARNING:SPLIT_STRING: quoted string split across lines
#440: FILE: fs/realpath.c:392:
+		printk(KERN_WARNING "ERROR: Name too long "
+		       "for ccs_save_name().\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ccs_save_name', this function's name, in a string
#440: FILE: fs/realpath.c:392:
+		       "for ccs_save_name().\n");

CHECK:SPACING: No space is necessary after a cast
#443: FILE: fs/realpath.c:395:
+	hash = full_name_hash((const unsigned char *) name, len - 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#458: FILE: fs/realpath.c:410:
+		printk(KERN_WARNING "ERROR: Out of memory "

WARNING:SPLIT_STRING: quoted string split across lines
#459: FILE: fs/realpath.c:411:
+		printk(KERN_WARNING "ERROR: Out of memory "
+		       "for ccs_save_name().\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ccs_save_name', this function's name, in a string
#459: FILE: fs/realpath.c:411:
+		       "for ccs_save_name().\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: fs/realpath.c:457:
+	int i;
+	if (CCS_MAX_PATHNAME_LEN > PAGE_SIZE)

WARNING:LINE_SPACING: Missing a blank line after declarations
#551: FILE: fs/realpath.c:503:
+	void *ret = kzalloc(size, GFP_KERNEL);
+	if (!ret)

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: fs/realpath.c:535:
+	struct cache_entry *entry = NULL;
+	if (!p)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#603: FILE: fs/realpath.c:555:
+		printk(KERN_WARNING "BUG: ccs_free() with invalid pointer.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ccs_free', this function's name, in a string
#603: FILE: fs/realpath.c:555:
+		printk(KERN_WARNING "BUG: ccs_free() with invalid pointer.\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299124.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 42 warnings, 7 checks, 557 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299124.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
