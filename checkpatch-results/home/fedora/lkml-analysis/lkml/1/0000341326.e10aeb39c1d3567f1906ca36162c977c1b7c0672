WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
  CPU 0:  [<ffffffff80494691>] notifier_call_chain+0x16/0x60 <-- [<ffffffff80494701>] __atomic_notifier_call_chain+0x26/0x56

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#167: FILE: lib/mcount/tracer.c:166:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: lib/mcount/tracer.c:182:
+	struct mctracer_iterator *iter = m->private;
+	if (iter->tr->ctrl)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#201: FILE: lib/mcount/tracer.c:200:
+#define seq_print_ip_sym(m, ip)			\
+do {						\
+	seq_printf(m, "[<%08lx>]", ip);		\
+	seq_print_symbol(m, " %s", ip);	\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#201: FILE: lib/mcount/tracer.c:200:
+#define seq_print_ip_sym(m, ip)			\
+do {						\
+	seq_printf(m, "[<%08lx>]", ip);		\
+	seq_print_symbol(m, " %s", ip);	\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#207: FILE: lib/mcount/tracer.c:206:
+#define seq_print_ip_sym(m, ip)			\
+do {						\
+	seq_printf(m, "[<%016lx>]", ip);	\
+	seq_print_symbol(m, " %s", ip);	\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#207: FILE: lib/mcount/tracer.c:206:
+#define seq_print_ip_sym(m, ip)			\
+do {						\
+	seq_printf(m, "[<%016lx>]", ip);	\
+	seq_print_symbol(m, " %s", ip);	\
+} while (0)

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#220: FILE: lib/mcount/tracer.c:219:
+		seq_printf(m, "mctracer:\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#223: FILE: lib/mcount/tracer.c:222:
+			seq_printf(m, " ERROR!!!! ent is NULL!\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#230: FILE: lib/mcount/tracer.c:229:
+			seq_printf(m, " <-- ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#233: FILE: lib/mcount/tracer.c:232:
+		seq_printf(m, "\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#239: FILE: lib/mcount/tracer.c:238:
+static struct seq_operations mctrace_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#246: FILE: lib/mcount/tracer.c:245:
+static int mctrace_open (struct inode *inode, struct file *file)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#259: FILE: lib/mcount/tracer.c:258:
+	if (!ret) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#261: FILE: lib/mcount/tracer.c:260:
+		struct seq_file *m = file->private_data;
+		m->private = iter;

CHECK:BRACES: Unbalanced braces around else statement
#262: FILE: lib/mcount/tracer.c:261:
+	} else

WARNING:CONST_STRUCT: struct file_operations should normally be const
#278: FILE: lib/mcount/tracer.c:277:
+static struct file_operations mctrace_fops = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341326.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 6 checks, 248 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341326.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
