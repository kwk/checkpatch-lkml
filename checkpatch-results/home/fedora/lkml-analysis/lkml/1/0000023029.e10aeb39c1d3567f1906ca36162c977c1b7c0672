WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#67: 
	Signed-off-by: Stephane Eranian <eranian@google.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:BIT_MACRO: Prefer using the BIT macro
#81: FILE: arch/x86/include/asm/perf_event.h:22:
+#define ARCH_PERFMON_EVENTSEL_ANY			  (1 << 21)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#91: FILE: arch/x86/include/asm/perf_event.h:31:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#97: FILE: arch/x86/include/asm/perf_event.h:37:
+#define INTEL_ARCH_EVENT_MASK	(INTEL_ARCH_UNIT_MASK|INTEL_ARCH_EVTSEL_MASK)
                              	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#107: FILE: arch/x86/include/asm/perf_event.h:49:
+	(INTEL_ARCH_CNT_MASK| \
 	                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#108: FILE: arch/x86/include/asm/perf_event.h:50:
+	 INTEL_ARCH_INV_MASK| \
 	                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#109: FILE: arch/x86/include/asm/perf_event.h:51:
+	 INTEL_ARCH_EDGE_MASK|\
 	                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#110: FILE: arch/x86/include/asm/perf_event.h:52:
+	 INTEL_ARCH_UNIT_MASK|\
 	                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#170: FILE: arch/x86/kernel/cpu/perf_event.c:101:
+#define for_each_event_constraint(e, c) \
+	for ((e) = (c); (e)->cmask; (e)++)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#181: FILE: arch/x86/kernel/cpu/perf_event.c:129:
+	void		(*get_event_constraints)(struct cpu_hw_events *cpuc, struct perf_event *event, u64 *idxmsk);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#182: FILE: arch/x86/kernel/cpu/perf_event.c:130:
+	void		(*put_event_constraints)(struct cpu_hw_events *cpuc, struct perf_event *event);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: arch/x86/kernel/cpu/perf_event.c:141:
+static int x86_perf_event_set_period(struct perf_event *event,
+			     struct hw_perf_event *hwc, int idx);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#235: FILE: arch/x86/kernel/cpu/perf_event.c:214:
+static struct event_constraint intel_core_event_constraints[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#236: FILE: arch/x86/kernel/cpu/perf_event.c:215:
+	EVENT_CONSTRAINT(0xc0, (0x3|(1ULL<<32)), INTEL_ARCH_FIXED_MASK), /* INSTRUCTIONS_RETIRED */
 	                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#236: FILE: arch/x86/kernel/cpu/perf_event.c:215:
+	EVENT_CONSTRAINT(0xc0, (0x3|(1ULL<<32)), INTEL_ARCH_FIXED_MASK), /* INSTRUCTIONS_RETIRED */
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#237: FILE: arch/x86/kernel/cpu/perf_event.c:216:
+	EVENT_CONSTRAINT(0x3c, (0x3|(1ULL<<33)), INTEL_ARCH_FIXED_MASK), /* UNHALTED_CORE_CYCLES */
 	                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#237: FILE: arch/x86/kernel/cpu/perf_event.c:216:
+	EVENT_CONSTRAINT(0x3c, (0x3|(1ULL<<33)), INTEL_ARCH_FIXED_MASK), /* UNHALTED_CORE_CYCLES */
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#263: FILE: arch/x86/kernel/cpu/perf_event.c:230:
+	EVENT_CONSTRAINT(0xc0, (0x3|(1ULL<<32)), INTEL_ARCH_FIXED_MASK), /* INSTRUCTIONS_RETIRED */
 	                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#263: FILE: arch/x86/kernel/cpu/perf_event.c:230:
+	EVENT_CONSTRAINT(0xc0, (0x3|(1ULL<<32)), INTEL_ARCH_FIXED_MASK), /* INSTRUCTIONS_RETIRED */
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#264: FILE: arch/x86/kernel/cpu/perf_event.c:231:
+	EVENT_CONSTRAINT(0x3c, (0x3|(1ULL<<33)), INTEL_ARCH_FIXED_MASK), /* UNHALTED_CORE_CYCLES */
 	                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#264: FILE: arch/x86/kernel/cpu/perf_event.c:231:
+	EVENT_CONSTRAINT(0x3c, (0x3|(1ULL<<33)), INTEL_ARCH_FIXED_MASK), /* UNHALTED_CORE_CYCLES */
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#279: FILE: arch/x86/kernel/cpu/perf_event.c:246:
+	EVENT_CONSTRAINT(0xc0, (0x3|(1ULL<<32)), INTEL_ARCH_FIXED_MASK), /* INSTRUCTIONS_RETIRED */
 	                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#279: FILE: arch/x86/kernel/cpu/perf_event.c:246:
+	EVENT_CONSTRAINT(0xc0, (0x3|(1ULL<<32)), INTEL_ARCH_FIXED_MASK), /* INSTRUCTIONS_RETIRED */
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#280: FILE: arch/x86/kernel/cpu/perf_event.c:247:
+	EVENT_CONSTRAINT(0x3c, (0x3|(1ULL<<33)), INTEL_ARCH_FIXED_MASK), /* UNHALTED_CORE_CYCLES */
 	                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#280: FILE: arch/x86/kernel/cpu/perf_event.c:247:
+	EVENT_CONSTRAINT(0x3c, (0x3|(1ULL<<33)), INTEL_ARCH_FIXED_MASK), /* UNHALTED_CORE_CYCLES */
 	                                 ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#326: FILE: arch/x86/kernel/cpu/perf_event.c:1222:
+	int i, j , w, num;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#335: FILE: arch/x86/kernel/cpu/perf_event.c:1231:
+	for(i=0; i < n; i++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#335: FILE: arch/x86/kernel/cpu/perf_event.c:1231:
+	for(i=0; i < n; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#361: FILE: arch/x86/kernel/cpu/perf_event.c:1257:
+	for(w=1; num && w <= wmax; w++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#361: FILE: arch/x86/kernel/cpu/perf_event.c:1257:
+	for(w=1; num && w <= wmax; w++) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#362: FILE: arch/x86/kernel/cpu/perf_event.c:1258:
+	for(w=1; num && w <= wmax; w++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#364: FILE: arch/x86/kernel/cpu/perf_event.c:1260:
+		for(i=0; i < n; i++) {
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#364: FILE: arch/x86/kernel/cpu/perf_event.c:1260:
+		for(i=0; i < n; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: arch/x86/kernel/cpu/perf_event.c:1301:
+			pr_debug("CPU%d config=0x%llx idx=%d assign=%c\n",
+				smp_processor_id(),

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#420: FILE: arch/x86/kernel/cpu/perf_event.c:1316:
+		for(i=0; i < n; i++) {
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#420: FILE: arch/x86/kernel/cpu/perf_event.c:1316:
+		for(i=0; i < n; i++) {

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#425: FILE: arch/x86/kernel/cpu/perf_event.c:1321:
+	return num ? -ENOSPC: 0;
 	                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#465: FILE: arch/x86/kernel/cpu/perf_event.c:1361:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: arch/x86/kernel/cpu/perf_event.c:1363:
+static inline void x86_assign_hw_event(struct perf_event *event,
+				struct hw_perf_event *hwc, int idx)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#505: FILE: arch/x86/kernel/cpu/perf_event.c:1401:
+		for(i=0; i < cpuc->n_events; i++) {
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#505: FILE: arch/x86/kernel/cpu/perf_event.c:1401:
+		for(i=0; i < cpuc->n_events; i++) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#506: FILE: arch/x86/kernel/cpu/perf_event.c:1402:
+		for(i=0; i < cpuc->n_events; i++) {
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#524: FILE: arch/x86/kernel/cpu/perf_event.c:1420:
+		for(i=0; i < cpuc->n_events; i++) {
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#524: FILE: arch/x86/kernel/cpu/perf_event.c:1420:
+		for(i=0; i < cpuc->n_events; i++) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#525: FILE: arch/x86/kernel/cpu/perf_event.c:1421:
+		for(i=0; i < cpuc->n_events; i++) {
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#727: FILE: arch/x86/kernel/cpu/perf_event.c:1678:
+	memcpy(cpuc->assign, assign, n*sizeof(int));
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#764: FILE: arch/x86/kernel/cpu/perf_event.c:1843:
+	for(i=0; i < cpuc->n_events; i++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#764: FILE: arch/x86/kernel/cpu/perf_event.c:1843:
+	for(i=0; i < cpuc->n_events; i++) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#766: FILE: arch/x86/kernel/cpu/perf_event.c:1845:
+		if (event == cpuc->event_list[i]) {
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#771: FILE: arch/x86/kernel/cpu/perf_event.c:1850:
+				cpuc->event_list[i-1] = cpuc->event_list[i];
 				                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#783: FILE: arch/x86/kernel/cpu/perf_event.c:2125:
+static struct event_constraint bts_constraint={
                                              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hw_event ==
 		      x86_pmu.event_map(PERF_COUNT_HW_BRANCH_INSTRUCTIONS)'
#796: FILE: arch/x86/kernel/cpu/perf_event.c:2138:
+	if (unlikely((hw_event ==
+		      x86_pmu.event_map(PERF_COUNT_HW_BRANCH_INSTRUCTIONS)) &&
+		     (event->hw.sample_period == 1))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event->hw.sample_period == 1'
#796: FILE: arch/x86/kernel/cpu/perf_event.c:2138:
+	if (unlikely((hw_event ==
+		      x86_pmu.event_map(PERF_COUNT_HW_BRANCH_INSTRUCTIONS)) &&
+		     (event->hw.sample_period == 1))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#799: FILE: arch/x86/kernel/cpu/perf_event.c:2141:
+		     (event->hw.sample_period == 1))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#825: FILE: arch/x86/kernel/cpu/perf_event.c:2167:
+			if ((event->hw.config & c->cmask) == c->code) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#844: FILE: arch/x86/kernel/cpu/perf_event.c:2186:
+static int x86_event_sched_in(struct perf_event *event,
+			  struct perf_cpu_context *cpuctx, int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: arch/x86/kernel/cpu/perf_event.c:2207:
+static void x86_event_sched_out(struct perf_event *event,
+			    struct perf_cpu_context *cpuctx, int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: arch/x86/kernel/cpu/perf_event.c:2234:
+int hw_perf_group_sched_in(struct perf_event *leader,
+	       struct perf_cpu_context *cpuctx,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#926: FILE: arch/x86/kernel/cpu/perf_event.c:2268:
+	memcpy(cpuc->assign, assign, n0*sizeof(int));
 	                               ^

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1026: FILE: arch/x86/kernel/cpu/perf_event.c:2474:
+		pr_cont("generic architected perfmon, ");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1049: FILE: arch/x86/kernel/cpu/perf_event.c:2575:
+ * ^I- check events are compatible which each other$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1050: FILE: arch/x86/kernel/cpu/perf_event.c:2576:
+ * ^I- events do not compete for the same counter$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1051: FILE: arch/x86/kernel/cpu/perf_event.c:2577:
+ * ^I- number of events <= number of counters$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000023029.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 7 warnings, 38 checks, 991 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000023029.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
