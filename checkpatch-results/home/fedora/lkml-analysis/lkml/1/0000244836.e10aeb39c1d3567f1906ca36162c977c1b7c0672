CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#98: FILE: security/talpa/talpa.h:98:
+extern struct dentry *talpa_register_configuration(char *name, struct talpa_configuration *cfg);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: security/talpa/talpa.h:101:
+extern ssize_t talpa_generic_get_ulong(struct talpa_configuration *cfg, char *buf, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: security/talpa/talpa.h:102:
+extern ssize_t talpa_generic_set_ulong(struct talpa_configuration *cfg, char *buf, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: security/talpa/talpa.h:103:
+extern ssize_t talpa_generic_get_long(struct talpa_configuration *cfg, char *buf, size_t len);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#107: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#112: FILE: security/talpa/talpa_common.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#128: FILE: security/talpa/talpa_common.c:17:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: security/talpa/talpa_common.c:30:
+	int ret = snprintf(buf, len, "%lu\n", *((unsigned long *)cfg->data));
+	if (ret > 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#151: FILE: security/talpa/talpa_common.c:40:
+	if (strict_strtoul(buf, 10, (unsigned long *)cfg->data))

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#156: FILE: security/talpa/talpa_common.c:45:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: security/talpa/talpa_common.c:50:
+	int ret = snprintf(buf, len, "%ld\n", *((long *)cfg->data));
+	if (ret > 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#172: FILE: security/talpa/talpa_configuration.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#188: FILE: security/talpa/talpa_configuration.c:17:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:TYPO_SPELLING: 'Filesytem' may be misspelled - perhaps 'Filesystem'?
#205: FILE: security/talpa/talpa_configuration.c:34:
+/* Filesytem read function. */
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: security/talpa/talpa_configuration.c:41:
+
+

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#218: FILE: security/talpa/talpa_configuration.c:47:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:TYPO_SPELLING: 'Filesytem' may be misspelled - perhaps 'Filesystem'?
#239: FILE: security/talpa/talpa_configuration.c:68:
+/* Filesytem write function. */
    ^^^^^^^^^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#252: FILE: security/talpa/talpa_configuration.c:81:
+		return -ENOSYS;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#261: FILE: security/talpa/talpa_configuration.c:90:
+	/* Make sure we have space in buffer is string is
+	   not null-terminated. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#261: FILE: security/talpa/talpa_configuration.c:90:
+	   not null-terminated. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#272: FILE: security/talpa/talpa_configuration.c:101:
+	/* Null terminate string on first newline and find out it's
+	   resulting length. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#272: FILE: security/talpa/talpa_configuration.c:101:
+	   resulting length. */

WARNING:CONST_STRUCT: struct file_operations should normally be const
#293: FILE: security/talpa/talpa_configuration.c:122:
+static struct file_operations talpa_fs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cfg->name"
#311: FILE: security/talpa/talpa_configuration.c:140:
+	for (; cfg->name != NULL; cfg++)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#326: FILE: security/talpa/talpa_configuration.c:155:
+__initcall(talpa_configuration_init);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000244836.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 16 warnings, 7 checks, 266 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000244836.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
