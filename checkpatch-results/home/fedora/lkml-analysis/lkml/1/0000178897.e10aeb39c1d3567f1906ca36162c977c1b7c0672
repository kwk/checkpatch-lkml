WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#38: FILE: Makefile:4:
+EXTRAVERSION = .12
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#195: FILE: arch/ia64/kernel/sys_ia64.c:157:
+sys_ia64_pipe (void)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#272: FILE: arch/powerpc/include/asm/systbl.h:95:
+SYSX(sys_ni_syscall,compat_sys_old_readdir,sys_old_readdir)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#272: FILE: arch/powerpc/include/asm/systbl.h:95:
+SYSX(sys_ni_syscall,compat_sys_old_readdir,sys_old_readdir)
                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: arch/s390/kernel/entry.h:40:
+long sys_s390_fadvise64(int fd, u32 offset_high, u32 offset_low,
 		    size_t len, int advice);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#580: FILE: arch/s390/kernel/sys_s390.c:268:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#584: FILE: arch/s390/kernel/sys_s390.c:272:
+	return SYSC_s390_fallocate((int) fd, (int) mode, offset,

CHECK:SPACING: No space is necessary after a cast
#585: FILE: arch/s390/kernel/sys_s390.c:273:
+				   (u32) len_high, (u32) len_low);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#587: FILE: arch/s390/kernel/sys_s390.c:275:
+}
+SYSCALL_ALIAS(sys_s390_fallocate, SyS_s390_fallocate);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: arch/sh/kernel/sys_sh32.c:25:
+asmlinkage int sys_sh_pipe(unsigned long r4, unsigned long r5,
 	unsigned long r6, unsigned long r7,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#972: FILE: arch/x86/mm/init_64.c:595:
+	use_pse = use_gbpages = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BIT_MACRO: Prefer using the BIT macro
#1140: FILE: drivers/net/e1000e/e1000.h:336:
+#define FLAG2_CRC_STRIPPING               (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1216: FILE: drivers/net/e1000e/param.c:146:
+/*
+ * Enable CRC Stripping

CHECK:CAMELCASE: Avoid CamelCase: <CrcStripping>
#1222: FILE: drivers/net/e1000e/param.c:152:
+E1000_PARAM(CrcStripping, "Enable CRC Stripping, disable if your BMC needs " \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1222: FILE: drivers/net/e1000e/param.c:152:
+E1000_PARAM(CrcStripping, "Enable CRC Stripping, disable if your BMC needs " \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1223: FILE: drivers/net/e1000e/param.c:153:
+                          "the CRC");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1223: FILE: drivers/net/e1000e/param.c:153:
+                          "the CRC");$

CHECK:CAMELCASE: Avoid CamelCase: <num_CrcStripping>
#1240: FILE: drivers/net/e1000e/param.c:398:
+		if (num_CrcStripping > bd) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1242: FILE: drivers/net/e1000e/param.c:400:
+			unsigned int crc_stripping = CrcStripping[bd];
+			e1000_validate_option(&crc_stripping, &opt, adapter);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1312: FILE: drivers/net/wireless/iwlwifi/iwl-rx.c:266:
+			printk(KERN_CRIT DRV_NAME

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1355: FILE: drivers/pci/pci-driver.c:295:
+	return drv && (drv->suspend || drv->suspend_late || drv->resume
+		|| drv->resume_early);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1596: FILE: drivers/pci/pci.c:646:
+		dev_err(&dev->dev, "buffer not found in %s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1632: FILE: drivers/pci/pci.c:689:
+		dev_err(&dev->dev, "buffer not found in %s\n", __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1651: FILE: drivers/pci/pci.c:714:
+ /**
+ * pci_add_save_buffer - allocate buffer for saving given capability registers

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1656: FILE: drivers/pci/pci.c:719:
+static int pci_add_cap_save_buffer(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1705: FILE: drivers/pci/pci.h:38:
+extern void pci_allocate_cap_save_buffers(struct pci_dev *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1731: FILE: drivers/pci/pcie/portdrv_pci.c:56:
 
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#1824: FILE: drivers/scsi/eata.c:1629:
+	if (!scsi_sg_count(SCpnt)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1831: FILE: drivers/scsi/eata.c:1636:
+	BUG_ON(!count);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#1866: FILE: drivers/scsi/ibmvscsi/ibmvfc.c:851:
+		if (++vhost->init_retries > IBMVFC_MAX_HOST_INIT_RETRIES) {
[...]
-		} else if (vhost->init_retries == IBMVFC_MAX_INIT_RETRIES)
[...]
 			__ibmvfc_reset_host(vhost);
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1910: FILE: drivers/scsi/ibmvscsi/ibmvfc.c:3527:
+		if (vhost->delay_init) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1915: FILE: drivers/scsi/ibmvscsi/ibmvfc.c:3532:
+			return;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#1915: FILE: drivers/scsi/ibmvscsi/ibmvfc.c:3532:
+		} else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1973: FILE: drivers/scsi/pcmcia/aha152x_stub.c:117:
+    link->irq.Attributes = IRQ_TYPE_DYNAMIC_SHARING;$

CHECK:CAMELCASE: Avoid CamelCase: <Attributes>
#1973: FILE: drivers/scsi/pcmcia/aha152x_stub.c:117:
+    link->irq.Attributes = IRQ_TYPE_DYNAMIC_SHARING;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1991: FILE: drivers/usb/host/isp1760-if.c:270:
+static const struct pci_device_id isp1760_plx [] = {

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: space prohibited after that open parenthesis '('
#2026: FILE: drivers/usb/storage/unusual_devs.h:250:
+UNUSUAL_DEV(  0x0421, 0x04bd, 0x0000, 0x9999,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2027: FILE: drivers/usb/storage/unusual_devs.h:251:
+UNUSUAL_DEV(  0x0421, 0x04bd, 0x0000, 0x9999,
+		"Nokia",

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2030: FILE: drivers/usb/storage/unusual_devs.h:254:
+		US_FL_FIX_CAPACITY ),

ERROR:SPACING: space prohibited after that open parenthesis '('
#2040: FILE: drivers/usb/storage/unusual_devs.h:1050:
+UNUSUAL_DEV( 0x067b, 0x3507, 0x0001, 0x0101,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2041: FILE: drivers/usb/storage/unusual_devs.h:1051:
+UNUSUAL_DEV( 0x067b, 0x3507, 0x0001, 0x0101,
 		"Prolific Technology Inc.",

ERROR:SPACING: space prohibited after that open parenthesis '('
#2049: FILE: drivers/usb/storage/unusual_devs.h:1331:
+UNUSUAL_DEV( 0x0840, 0x0084, 0x0001, 0x0001,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2050: FILE: drivers/usb/storage/unusual_devs.h:1332:
+UNUSUAL_DEV( 0x0840, 0x0084, 0x0001, 0x0001,
+		"Argosy",

ERROR:SPACING: space prohibited after that open parenthesis '('
#2063: FILE: drivers/usb/storage/unusual_devs.h:1443:
+UNUSUAL_DEV( 0x0a17, 0x006e, 0x0100, 0x0100,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2064: FILE: drivers/usb/storage/unusual_devs.h:1444:
+UNUSUAL_DEV( 0x0a17, 0x006e, 0x0100, 0x0100,
+		"Pentax",

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2067: FILE: drivers/usb/storage/unusual_devs.h:1447:
+		US_FL_FIX_CAPACITY ),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2094: FILE: fs/aio.c:1261:
+SYSCALL_DEFINE2(io_setup, unsigned, nr_events, aio_context_t __user *, ctxp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2187: FILE: fs/compat.c:1644:
+static long do_compat_pselect(int n, compat_ulong_t __user *inp,
 	compat_ulong_t __user *outp, compat_ulong_t __user *exp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2251: FILE: fs/dcookies.c:143:
+SYSCALL_DEFINE(lookup_dcookie)(u64 cookie64, char __user * buf, size_t len)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2260: FILE: fs/dcookies.c:196:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:SPACING: No space is necessary after a cast
#2263: FILE: fs/dcookies.c:199:
+	return SYSC_lookup_dcookie(cookie64, (char __user *) buf, (size_t) len);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2265: FILE: fs/dcookies.c:201:
+}
+SYSCALL_ALIAS(sys_lookup_dcookie, SyS_lookup_dcookie);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2695: FILE: fs/namei.c:1994:
+		unsigned, dev)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2704: FILE: fs/namei.c:2044:
+SYSCALL_DEFINE3(mknod, const char __user *, filename, int, mode, unsigned, dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2831: FILE: fs/namei.c:2810:
+	unsigned int flags = AOP_FLAG_UNINTERRUPTIBLE;
+	if (nofs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3005: FILE: fs/open.c:347:
+SYSCALL_DEFINE(truncate64)(const char __user * path, loff_t length)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3009: FILE: fs/open.c:351:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:SPACING: No space is necessary after a cast
#3012: FILE: fs/open.c:354:
+	return SYSC_truncate64((const char __user *) path, length);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3014: FILE: fs/open.c:356:
+}
+SYSCALL_ALIAS(sys_truncate64, SyS_truncate64);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3025: FILE: fs/open.c:366:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:SPACING: No space is necessary after a cast
#3028: FILE: fs/open.c:369:
+	return SYSC_ftruncate64((unsigned int) fd, length);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3030: FILE: fs/open.c:371:
+}
+SYSCALL_ALIAS(sys_ftruncate64, SyS_ftruncate64);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3043: FILE: fs/open.c:432:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3048: FILE: fs/open.c:437:
+}
+SYSCALL_ALIAS(sys_fallocate, SyS_fallocate);

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#3186: FILE: fs/open.c:1082:
+SYSCALL_DEFINE2(creat, const char __user *, pathname, int, mode)
                 ^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3311: FILE: fs/read_write.c:392:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:SPACING: No space is necessary after a cast
#3314: FILE: fs/read_write.c:395:
+	return SYSC_pread64((unsigned int) fd, (char __user *) buf,

CHECK:SPACING: No space is necessary after a cast
#3315: FILE: fs/read_write.c:396:
+			    (size_t) count, pos);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3317: FILE: fs/read_write.c:398:
+}
+SYSCALL_ALIAS(sys_pread64, SyS_pread64);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3331: FILE: fs/read_write.c:421:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:SPACING: No space is necessary after a cast
#3334: FILE: fs/read_write.c:424:
+	return SYSC_pwrite64((unsigned int) fd, (const char __user *) buf,

CHECK:SPACING: No space is necessary after a cast
#3335: FILE: fs/read_write.c:425:
+			     (size_t) count, pos);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3337: FILE: fs/read_write.c:427:
+}
+SYSCALL_ALIAS(sys_pwrite64, SyS_pwrite64);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3720: FILE: fs/super.c:537:
+SYSCALL_DEFINE2(ustat, unsigned, dev, struct ustat __user *, ubuf)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3767: FILE: fs/sync.c:239:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:SPACING: No space is necessary after a cast
#3771: FILE: fs/sync.c:243:
+	return SYSC_sync_file_range((int) fd, offset, nbytes,

CHECK:SPACING: No space is necessary after a cast
#3772: FILE: fs/sync.c:244:
+				    (unsigned int) flags);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3774: FILE: fs/sync.c:246:
+}
+SYSCALL_ALIAS(sys_sync_file_range, SyS_sync_file_range);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3786: FILE: fs/sync.c:256:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:SPACING: No space is necessary after a cast
#3790: FILE: fs/sync.c:260:
+	return SYSC_sync_file_range2((int) fd, (unsigned int) flags,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3793: FILE: fs/sync.c:263:
+}
+SYSCALL_ALIAS(sys_sync_file_range2, SyS_sync_file_range2);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3842: FILE: fs/ubifs/file.c:216:
+			    loff_t pos, unsigned len, struct page **pagep,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3843: FILE: fs/ubifs/file.c:217:
+			    unsigned flags)

ERROR:SPACING: space required after that ',' (ctx:OxV)
#3955: FILE: fs/xattr.c:293:
+		const void __user *,value, size_t, size, int, flags)
 		                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4073: FILE: include/linux/compat.h:288:
+asmlinkage long compat_sys_newfstatat(unsigned int dfd, char __user * filename,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4091: FILE: include/linux/fs.h:408:
+						* to clear GFP_FS from alloc */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4126: FILE: include/linux/pagemap.h:217:
+struct page *grab_cache_page_write_begin(struct address_space *mapping,
+			pgoff_t index, unsigned flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4126: FILE: include/linux/pagemap.h:217:
+			pgoff_t index, unsigned flags);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4159: FILE: include/linux/syscalls.h:69:
+#define __SC_DECL1(t1, a1)	t1 a1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4160: FILE: include/linux/syscalls.h:70:
+#define __SC_DECL2(t2, a2, ...) t2 a2, __SC_DECL1(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4161: FILE: include/linux/syscalls.h:71:
+#define __SC_DECL3(t3, a3, ...) t3 a3, __SC_DECL2(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4162: FILE: include/linux/syscalls.h:72:
+#define __SC_DECL4(t4, a4, ...) t4 a4, __SC_DECL3(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4163: FILE: include/linux/syscalls.h:73:
+#define __SC_DECL5(t5, a5, ...) t5 a5, __SC_DECL4(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4164: FILE: include/linux/syscalls.h:74:
+#define __SC_DECL6(t6, a6, ...) t6 a6, __SC_DECL5(__VA_ARGS__)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4166: FILE: include/linux/syscalls.h:76:
+#define __SC_LONG1(t1, a1) ^Ilong a1$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4173: FILE: include/linux/syscalls.h:83:
+#define __SC_CAST1(t1, a1)	(t1) a1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4174: FILE: include/linux/syscalls.h:84:
+#define __SC_CAST2(t2, a2, ...) (t2) a2, __SC_CAST1(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4175: FILE: include/linux/syscalls.h:85:
+#define __SC_CAST3(t3, a3, ...) (t3) a3, __SC_CAST2(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4176: FILE: include/linux/syscalls.h:86:
+#define __SC_CAST4(t4, a4, ...) (t4) a4, __SC_CAST3(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4177: FILE: include/linux/syscalls.h:87:
+#define __SC_CAST5(t5, a5, ...) (t5) a5, __SC_CAST4(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4178: FILE: include/linux/syscalls.h:88:
+#define __SC_CAST6(t6, a6, ...) (t6) a6, __SC_CAST5(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#4182: FILE: include/linux/syscalls.h:92:
+#define __SC_TEST2(t2, a2, ...)	__SC_TEST(t2); __SC_TEST1(__VA_ARGS__)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#4183: FILE: include/linux/syscalls.h:93:
+#define __SC_TEST3(t3, a3, ...)	__SC_TEST(t3); __SC_TEST2(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#4184: FILE: include/linux/syscalls.h:94:
+#define __SC_TEST4(t4, a4, ...)	__SC_TEST(t4); __SC_TEST3(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#4185: FILE: include/linux/syscalls.h:95:
+#define __SC_TEST5(t5, a5, ...)	__SC_TEST(t5); __SC_TEST4(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#4186: FILE: include/linux/syscalls.h:96:
+#define __SC_TEST6(t6, a6, ...)	__SC_TEST(t6); __SC_TEST5(__VA_ARGS__)

CHECK:CAMELCASE: Avoid CamelCase: <SYSCALL_DEFINEx>
#4189: FILE: include/linux/syscalls.h:99:
+#define SYSCALL_DEFINE1(...)    SYSCALL_DEFINEx(1, __VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4197: FILE: include/linux/syscalls.h:107:
+#define SYSCALL_ALIAS(alias, name)					\
+	asm ("\t.globl " #alias "\n\t.set " #alias ", " #name "\n"	\
+	     "\t.globl ." #alias "\n\t.set ." #alias ", ." #name)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4201: FILE: include/linux/syscalls.h:111:
+#define SYSCALL_ALIAS(alias, name)					\
+	asm ("\t.globl " #alias "\n\t.set " #alias ", " #name)

CHECK:CAMELCASE: Avoid CamelCase: <SyS_##name>
#4211: FILE: include/linux/syscalls.h:121:
+	asmlinkage long SyS_##name(__SC_LONG##x(__VA_ARGS__))		\

CHECK:SPACING: No space is necessary after a cast
#4214: FILE: include/linux/syscalls.h:124:
+		return (long) SYSC_##name(__SC_CAST##x(__VA_ARGS__));	\

WARNING:LONG_LINE: line length of 161 exceeds 100 columns
#4365: FILE: include/linux/syscalls.h:548:
+asmlinkage long sys_mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct timespec __user *abs_timeout);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4576: FILE: ipc/sem.c:926:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:SPACING: No space is necessary after a cast
#4579: FILE: ipc/sem.c:929:
+	return SYSC_semctl((int) semid, (int) semnum, (int) cmd, arg);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4581: FILE: ipc/sem.c:931:
+}
+SYSCALL_ALIAS(sys_semctl, SyS_semctl);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4593: FILE: ipc/sem.c:1059:
+		unsigned, nsops, const struct timespec __user *, timeout)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4603: FILE: ipc/sem.c:1237:
+		unsigned, nsops)

ERROR:SPACING: space required after that ',' (ctx:OxV)
#5000: FILE: kernel/posix-timers.c:943:
+		struct timespec __user *,tp)
 		                        ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#5948: FILE: kernel/uid16.c:85:
+SYSCALL_DEFINE3(getresuid16, old_uid_t __user *, ruid, old_uid_t __user *, euid, old_uid_t __user *, suid)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5966: FILE: kernel/uid16.c:105:
 
+

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#5967: FILE: kernel/uid16.c:106:
+SYSCALL_DEFINE3(getresgid16, old_gid_t __user *, rgid, old_gid_t __user *, egid, old_gid_t __user *, sgid)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6051: FILE: mm/fadvise.c:129:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:SPACING: No space is necessary after a cast
#6054: FILE: mm/fadvise.c:132:
+	return SYSC_fadvise64_64((int) fd, offset, len, (int) advice);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6056: FILE: mm/fadvise.c:134:
+}
+SYSCALL_ALIAS(sys_fadvise64_64, SyS_fadvise64_64);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6066: FILE: mm/fadvise.c:143:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:SPACING: No space is necessary after a cast
#6069: FILE: mm/fadvise.c:146:
+	return SYSC_fadvise64((int) fd, offset, (size_t)len, (int)advice);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6071: FILE: mm/fadvise.c:148:
+}
+SYSCALL_ALIAS(sys_fadvise64, SyS_fadvise64);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6092: FILE: mm/filemap.c:1375:
 }
+#ifdef CONFIG_HAVE_SYSCALL_WRAPPERS

CHECK:SPACING: No space is necessary after a cast
#6095: FILE: mm/filemap.c:1378:
+	return SYSC_readahead((int) fd, offset, (size_t) count);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6097: FILE: mm/filemap.c:1380:
+}
+SYSCALL_ALIAS(sys_readahead, SyS_readahead);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6117: FILE: mm/filemap.c:2201:
+struct page *grab_cache_page_write_begin(struct address_space *mapping,
+					pgoff_t index, unsigned flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6117: FILE: mm/filemap.c:2201:
+					pgoff_t index, unsigned flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#6122: FILE: mm/filemap.c:2206:
+	gfp_t gfp_notmask = 0;
+	if (flags & AOP_FLAG_NOFS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6135: FILE: mm/filemap.c:2217:
+	status = add_to_page_cache_lru(page, mapping, index,
+						GFP_KERNEL & ~gfp_notmask);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6199: FILE: mm/mempolicy.c:1064:
+		unsigned long, maxnode, unsigned, flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6533: FILE: net/socket.c:1684:
+		unsigned, flags, struct sockaddr __user *, addr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6544: FILE: net/socket.c:1729:
+		unsigned, flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6556: FILE: net/socket.c:1741:
+		unsigned, flags, struct sockaddr __user *, addr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6597: FILE: net/socket.c:1884:
+SYSCALL_DEFINE3(sendmsg, int, fd, struct msghdr __user *, msg, unsigned, flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#6715: FILE: sound/usb/caiaq/caiaq-midi.c:63:
+	struct snd_usb_caiaqdev *dev = substream->rmidi->private_data;
+	if (dev->midi_out_active) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'snd_usb_caiaq_midi_send', this function's name, in a string
#6738: FILE: sound/usb/caiaq/caiaq-midi.c:88:
+		log("snd_usb_caiaq_midi_send(%p): usb_submit_urb() failed,"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#6739: FILE: sound/usb/caiaq/caiaq-midi.c:89:
+		log("snd_usb_caiaq_midi_send(%p): usb_submit_urb() failed,"
+		    "ret=%d, len=%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000178897.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 34 errors, 40 warnings, 69 checks, 5551 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000178897.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
