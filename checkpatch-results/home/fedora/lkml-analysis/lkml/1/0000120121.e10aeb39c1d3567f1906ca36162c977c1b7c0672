WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
flat fair queuing support where there is only one group, "root group" and all

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#69: FILE: block/Kconfig.iosched:5:
+config ELV_FAIR_QUEUING
+	bool "Elevator Fair Queuing Support"
+	default n
+	---help---
+	  Traditionally only cfq had notion of multiple queues and it did
+	  fair queuing at its own. With the cgroups and need of controlling
+	  IO, now even the simple io schedulers like noop, deadline, as will
+	  have one queue per cgroup and will need hierarchical fair queuing.
+	  Instead of every io scheduler implementing its own fair queuing
+	  logic, this option enables fair queuing in elevator layer so that
+	  other ioschedulers can make use of it.
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#104: FILE: block/blk-sysfs.c:281:
+	.attr = {.name = "slice_idle", .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#110: FILE: block/blk-sysfs.c:287:
+	.attr = {.name = "slice_sync", .mode = S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#116: FILE: block/blk-sysfs.c:293:
+	.attr = {.name = "slice_async", .mode = S_IRUGO | S_IWUSR },

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#138: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#143: FILE: block/elevator-fq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: block/elevator-fq.c:28:
+static inline struct io_queue *elv_close_cooperator(struct request_queue *q,
+					struct io_queue *ioq, int probe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: block/elevator-fq.c:30:
+struct io_entity *bfq_lookup_next_entity(struct io_sched_data *sd,
+						 int extract);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: block/elevator-fq.c:33:
+static inline int elv_prio_slice(struct elv_fq_data *efqd, int sync,
+					unsigned short prio)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#181: FILE: block/elevator-fq.c:39:
+	return base_slice + (base_slice/ELV_SLICE_SCALE * (4 - prio));
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#234: FILE: block/elevator-fq.c:92:
+	BUG_ON(entity->weight == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#243: FILE: block/elevator-fq.c:101:
+	BUG_ON(entity == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entity"
#243: FILE: block/elevator-fq.c:101:
+	BUG_ON(entity == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entity->my_sched_data"
#244: FILE: block/elevator-fq.c:102:
+	if (entity->my_sched_data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#262: FILE: block/elevator-fq.c:120:
+	if (node != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#275: FILE: block/elevator-fq.c:133:
+	BUG_ON(entity->tree != root);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: block/elevator-fq.c:145:
+static void bfq_idle_extract(struct io_service_tree *st,
+				struct io_entity *entity)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: block/elevator-fq.c:150:
+	BUG_ON(entity->tree != &st->idle);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#325: FILE: block/elevator-fq.c:183:
+	BUG_ON(entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#325: FILE: block/elevator-fq.c:183:
+	BUG_ON(entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#327: FILE: block/elevator-fq.c:185:
+	while (*node != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: block/elevator-fq.c:212:
+static inline void bfq_update_min(struct io_entity *entity,
+					struct rb_node *node)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#358: FILE: block/elevator-fq.c:216:
+	if (node != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#400: FILE: block/elevator-fq.c:258:
+	if (parent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "parent->rb_right"
#403: FILE: block/elevator-fq.c:261:
+	if (node == parent->rb_left && parent->rb_right != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "parent->rb_left"
#405: FILE: block/elevator-fq.c:263:
+	else if (parent->rb_left != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: block/elevator-fq.c:281:
+static void bfq_active_insert(struct io_service_tree *st,
+					struct io_entity *entity)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->rb_left"
#429: FILE: block/elevator-fq.c:287:
+	if (node->rb_left != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->rb_right"
#431: FILE: block/elevator-fq.c:289:
+	else if (node->rb_right != NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#475: FILE: block/elevator-fq.c:333:
+	if (node->rb_right == NULL && node->rb_left == NULL)
[...]
+	else if (node->rb_right == NULL)
[...]
+	else if (node->rb_left == NULL)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_right"
#475: FILE: block/elevator-fq.c:333:
+	if (node->rb_right == NULL && node->rb_left == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_left"
#475: FILE: block/elevator-fq.c:333:
+	if (node->rb_right == NULL && node->rb_left == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_right"
#477: FILE: block/elevator-fq.c:335:
+	else if (node->rb_right == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_left"
#479: FILE: block/elevator-fq.c:337:
+	else if (node->rb_left == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#481: FILE: block/elevator-fq.c:339:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "deepest->rb_right"
#483: FILE: block/elevator-fq.c:341:
+		if (deepest->rb_right != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: block/elevator-fq.c:356:
+static void bfq_active_extract(struct io_service_tree *st,
+				struct io_entity *entity)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#505: FILE: block/elevator-fq.c:363:
+	if (node != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: block/elevator-fq.c:373:
+static void bfq_idle_insert(struct io_service_tree *st,
+					struct io_entity *entity)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first_idle"
#521: FILE: block/elevator-fq.c:379:
+	if (first_idle == NULL || bfq_gt(first_idle->finish, entity->finish))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!last_idle"
#523: FILE: block/elevator-fq.c:381:
+	if (last_idle == NULL || bfq_gt(entity->finish, last_idle->finish))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: block/elevator-fq.c:401:
+static void bfq_forget_entity(struct io_service_tree *st,
+				struct io_entity *entity)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#547: FILE: block/elevator-fq.c:405:
+	BUG_ON(!entity->on_st);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: block/elevator-fq.c:420:
+void bfq_put_idle_entity(struct io_service_tree *st,
+				struct io_entity *entity)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "last_idle"
#580: FILE: block/elevator-fq.c:438:
+	if (RB_EMPTY_ROOT(&st->active) && last_idle != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "first_idle"
#591: FILE: block/elevator-fq.c:449:
+	if (first_idle != NULL && !bfq_gt(first_idle->finish, st->vtime))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#595: FILE: block/elevator-fq.c:453:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: block/elevator-fq.c:456:
+__bfq_entity_update_prio(struct io_service_tree *old_st,
+				struct io_entity *entity)

WARNING:LINE_SPACING: Missing a blank line after declarations
#614: FILE: block/elevator-fq.c:472:
+			struct elv_fq_data *efqd = ioq->efqd;
+			entity->budget = elv_prio_to_slice(efqd, ioq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#653: FILE: block/elevator-fq.c:511:
+		BUG_ON(entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#653: FILE: block/elevator-fq.c:511:
+		BUG_ON(entity->tree != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#687: FILE: block/elevator-fq.c:545:
+		BUG_ON(entity->on_st);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#718: FILE: block/elevator-fq.c:576:
+			BUG_ON(new_st != st);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#761: FILE: block/elevator-fq.c:619:
+	BUG_ON(was_active && entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#761: FILE: block/elevator-fq.c:619:
+	BUG_ON(was_active && entity->tree != NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#763: FILE: block/elevator-fq.c:621:
+	if (was_active) {
[...]
+	} else if (entity->tree == &st->active)
[...]
+	else if (entity->tree == &st->idle)
[...]
+	else if (entity->tree != NULL)
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#770: FILE: block/elevator-fq.c:628:
+	else if (entity->tree != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#771: FILE: block/elevator-fq.c:629:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#778: FILE: block/elevator-fq.c:636:
+	BUG_ON(sd->active_entity == entity);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#833: FILE: block/elevator-fq.c:691:
+	while (node != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#839: FILE: block/elevator-fq.c:697:
+		BUG_ON(bfq_gt(entry->min_start, st->vtime));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->rb_left"
#841: FILE: block/elevator-fq.c:699:
+		if (node->rb_left != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "first"
#849: FILE: block/elevator-fq.c:707:
+		if (first != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#854: FILE: block/elevator-fq.c:712:
+	BUG_ON(first == NULL && !RB_EMPTY_ROOT(&st->active));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first"
#854: FILE: block/elevator-fq.c:712:
+	BUG_ON(first == NULL && !RB_EMPTY_ROOT(&st->active));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#874: FILE: block/elevator-fq.c:732:
+	BUG_ON(bfq_gt(entity->start, st->vtime));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#891: FILE: block/elevator-fq.c:749:
+struct io_entity *bfq_lookup_next_entity(struct io_sched_data *sd,
+						 int extract)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#901: FILE: block/elevator-fq.c:759:
+	BUG_ON(extract && sd->active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->active_entity"
#901: FILE: block/elevator-fq.c:759:
+	BUG_ON(extract && sd->active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#905: FILE: block/elevator-fq.c:763:
+		if (entity != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#923: FILE: block/elevator-fq.c:781:
+	BUG_ON(st->wsum == 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#993: FILE: block/elevator-fq.c:851:
+static inline int is_root_group_ioq(struct request_queue *q,
+					struct io_queue *ioq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: block/elevator-fq.c:873:
+ssize_t elv_slice_idle_store(struct request_queue *q, const char *name,
+			  size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1023: FILE: block/elevator-fq.c:881:
+	data = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1055: FILE: block/elevator-fq.c:913:
+ssize_t elv_slice_sync_store(struct request_queue *q, const char *name,
+			  size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1063: FILE: block/elevator-fq.c:921:
+	data = simple_strtoul(p, &p, 10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1094: FILE: block/elevator-fq.c:952:
+ssize_t elv_slice_async_store(struct request_queue *q, const char *name,
+			  size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1102: FILE: block/elevator-fq.c:960:
+	data = simple_strtoul(p, &p, 10);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1162: FILE: block/elevator-fq.c:1020:
+	ioq->ttime_samples = (7*ioq->ttime_samples + 256) / 8;
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1163: FILE: block/elevator-fq.c:1021:
+	ioq->ttime_total = (7*ioq->ttime_total + 256*ttime) / 8;
 	                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1163: FILE: block/elevator-fq.c:1021:
+	ioq->ttime_total = (7*ioq->ttime_total + 256*ttime) / 8;
 	                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: block/elevator-fq.c:1030:
+static void elv_ioq_update_idle_window(struct elevator_queue *eq,
+				struct io_queue *ioq, struct request *rq)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1183: FILE: block/elevator-fq.c:1041:
+	enable_idle = old_idle = elv_ioq_idle_window(ioq);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1185: FILE: block/elevator-fq.c:1043:
+	if (!efqd->elv_slice_idle)
[...]
+	else if (ioq_sample_valid(ioq->ttime_samples)) {
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1201: FILE: block/elevator-fq.c:1059:
+			enable_idle = eq->ops->elevator_update_idle_window_fn(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1232: FILE: block/elevator-fq.c:1090:
+int elv_init_ioq(struct elevator_queue *eq, struct io_queue *ioq,
+			void *sched_queue, int ioprio_class, int ioprio,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1259: FILE: block/elevator-fq.c:1117:
+	BUG_ON(atomic_read(&ioq->ref) <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1262: FILE: block/elevator-fq.c:1120:
+	BUG_ON(ioq->nr_queued);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1263: FILE: block/elevator-fq.c:1121:
+	BUG_ON(ioq->entity.tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioq->entity.tree"
#1263: FILE: block/elevator-fq.c:1121:
+	BUG_ON(ioq->entity.tree != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1264: FILE: block/elevator-fq.c:1122:
+	BUG_ON(elv_ioq_busy(ioq));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1265: FILE: block/elevator-fq.c:1123:
+	BUG_ON(efqd->active_queue == ioq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1268: FILE: block/elevator-fq.c:1126:
+	BUG_ON(!e->ops->elevator_free_sched_queue_fn);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioq"
#1280: FILE: block/elevator-fq.c:1138:
+	if (ioq != NULL) {

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#1290: FILE: block/elevator-fq.c:1148:
+ * out of order. This is primarily to accomodate the close_cooperator
                                       ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1304: FILE: block/elevator-fq.c:1162:
+	BUG_ON(efqd->active_queue != NULL || sd->active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "efqd->active_queue"
#1304: FILE: block/elevator-fq.c:1162:
+	BUG_ON(efqd->active_queue != NULL || sd->active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->active_entity"
#1304: FILE: block/elevator-fq.c:1162:
+	BUG_ON(efqd->active_queue != NULL || sd->active_entity != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1305: FILE: block/elevator-fq.c:1163:
+	BUG_ON(!efqd->busy_queues);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1306: FILE: block/elevator-fq.c:1164:
+	BUG_ON(sd != entity->sched_data);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1307: FILE: block/elevator-fq.c:1165:
+	BUG_ON(!st);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1328: FILE: block/elevator-fq.c:1186:
+	BUG_ON(extract && efqd->active_queue != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "efqd->active_queue"
#1328: FILE: block/elevator-fq.c:1186:
+	BUG_ON(extract && efqd->active_queue != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1339: FILE: block/elevator-fq.c:1197:
+	BUG_ON(!entity);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1352: FILE: block/elevator-fq.c:1210:
+static void __elv_set_active_ioq(struct elv_fq_data *efqd, struct io_queue *ioq,
+					int coop)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1358: FILE: block/elevator-fq.c:1216:
+		elv_log_ioq(efqd, ioq, "set_active, busy=%d",
+							efqd->busy_queues);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1380: FILE: block/elevator-fq.c:1238:
+struct io_queue *elv_set_active_ioq(struct request_queue *q,
+						struct io_queue *ioq)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1385: FILE: block/elevator-fq.c:1243:
+	if (!ioq)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1387: FILE: block/elevator-fq.c:1245:
+	else {

WARNING:REPEATED_WORD: Possible repeated word: 'this'
#1391: FILE: block/elevator-fq.c:1249:
+		 * io scheduler selected the next queue for us. Pass this
+		 * this info back to io scheudler. cfq currently uses it

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1418: FILE: block/elevator-fq.c:1276:
+void elv_deactivate_ioq(struct elv_fq_data *efqd, struct io_queue *ioq,
+					int requeue)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1429: FILE: block/elevator-fq.c:1287:
+	BUG_ON(elv_ioq_busy(ioq));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1430: FILE: block/elevator-fq.c:1288:
+	BUG_ON(ioq == efqd->active_queue);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1440: FILE: block/elevator-fq.c:1298:
+void elv_del_ioq_busy(struct elevator_queue *e, struct io_queue *ioq,
+					int requeue)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1444: FILE: block/elevator-fq.c:1302:
+	BUG_ON(!elv_ioq_busy(ioq));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1445: FILE: block/elevator-fq.c:1303:
+	BUG_ON(ioq->nr_queued);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1448: FILE: block/elevator-fq.c:1306:
+	BUG_ON(efqd->busy_queues == 0);

WARNING:TYPO_SPELLING: 'reuqest' may be misspelled - perhaps 'request'?
#1493: FILE: block/elevator-fq.c:1351:
+	 * reuqest from the queue got completed. Of course we are not planning
 	   ^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1507: FILE: block/elevator-fq.c:1365:
+	if (!ioq->slice_end)
[...]
+	else {
[...]

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1508: FILE: block/elevator-fq.c:1366:
+		slice_used = entity->budget/4;
 		                           ^

CHECK:BRACES: Unbalanced braces around else statement
#1509: FILE: block/elevator-fq.c:1367:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1512: FILE: block/elevator-fq.c:1370:
+			if (slice_unused == entity->budget) {
[...]
+			} else
[...]

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1518: FILE: block/elevator-fq.c:1376:
+				slice_used = entity->budget/4;
 				                           ^

CHECK:BRACES: Unbalanced braces around else statement
#1519: FILE: block/elevator-fq.c:1377:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1528: FILE: block/elevator-fq.c:1386:
+	elv_log_ioq(efqd, ioq, "sl_end=%lx, jiffies=%lx", ioq->slice_end,
+			jiffies);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1530: FILE: block/elevator-fq.c:1388:
+	elv_log_ioq(efqd, ioq, "sl_used=%ld, budget=%ld overshoot=%ld",
+				slice_used, entity->budget, slice_overshoot);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1533: FILE: block/elevator-fq.c:1391:
+	BUG_ON(ioq != efqd->active_queue);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1559: FILE: block/elevator-fq.c:1417:
+int elv_should_preempt(struct request_queue *q, struct io_queue *new_ioq,
+			struct request *rq)

WARNING:TYPO_SPELLING: 'pre-empt' may be misspelled - perhaps 'preempt'?
#1579: FILE: block/elevator-fq.c:1437:
+	 * Allow an RT request to pre-empt an ongoing non-RT cfqq timeslice.
 	                          ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1617: FILE: block/elevator-fq.c:1475:
+	BUG_ON(!efqd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1618: FILE: block/elevator-fq.c:1476:
+	BUG_ON(!ioq);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1673: FILE: block/elevator-fq.c:1531:
+	if (ioq) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1713: FILE: block/elevator-fq.c:1571:
+	BUG_ON(!ioq);

WARNING:TYPO_SPELLING: 'schduler' may be misspelled - perhaps 'scheduler'?
#1737: FILE: block/elevator-fq.c:1595:
+	 * schduler will take care of arming the timer, if need be.
 	   ^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ioq"
#1768: FILE: block/elevator-fq.c:1626:
+	if (ioq == NULL)

WARNING:TYPO_SPELLING: 'pre-empt' may be misspelled - perhaps 'preempt'?
#1789: FILE: block/elevator-fq.c:1647:
+	 * If we have a RT cfqq waiting, then we pre-empt the current non-rt
 	                                         ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1849: FILE: block/elevator-fq.c:1707:
+	BUG_ON(!ioq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1853: FILE: block/elevator-fq.c:1711:
+	BUG_ON(!efqd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1868: FILE: block/elevator-fq.c:1726:
+	BUG_ON(!ioq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1883: FILE: block/elevator-fq.c:1741:
+	elv_log_ioq(efqd, rq_ioq(rq), "activate rq, drv=%d",
+						efqd->rq_in_driver);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1896: FILE: block/elevator-fq.c:1754:
+	elv_log_ioq(efqd, rq_ioq(rq), "deactivate rq, drv=%d",
+						efqd->rq_in_driver);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1929: FILE: block/elevator-fq.c:1787:
+static inline struct io_queue *elv_close_cooperator(struct request_queue *q,
+					struct io_queue *ioq, int probe)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1996: FILE: block/elevator-fq.c:1854:
+		else if (!ioq->nr_queued && !elv_close_cooperator(q, ioq, 1)
+			 && sync && !rq_noidle(rq))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2013: FILE: block/elevator-fq.c:1871:
+void *io_group_async_queue_prio(struct io_group *iog, int ioprio_class,
+					int ioprio)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2028: FILE: block/elevator-fq.c:1886:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2038: FILE: block/elevator-fq.c:1896:
+void io_group_set_async_queue(struct io_group *iog, int ioprio_class,
+					int ioprio, struct io_queue *ioq)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2051: FILE: block/elevator-fq.c:1909:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2078: FILE: block/elevator-fq.c:1936:
+struct io_group *io_alloc_root_group(struct request_queue *q,
+					struct elevator_queue *e, void *key)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#2084: FILE: block/elevator-fq.c:1942:
+	if (iog == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2096: FILE: block/elevator-fq.c:1954:
+	struct io_group *iog = e->efqd.root_group;
+	io_put_io_group_queues(e, iog);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#2107: FILE: block/elevator-fq.c:1965:
+	if (elv_ioq_pool)
+		kmem_cache_destroy(elv_ioq_pool);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iog"
#2132: FILE: block/elevator-fq.c:1990:
+	if (iog == NULL)

CHECK:SPACING: No space is necessary after a cast
#2140: FILE: block/elevator-fq.c:1998:
+	efqd->idle_slice_timer.data = (unsigned long) efqd;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2178: FILE: block/elevator-fq.c:2036:
+	BUG_ON(timer_pending(&efqd->idle_slice_timer));

WARNING:TYPO_SPELLING: 'structres' may be misspelled - perhaps 'structures'?
#2183: FILE: block/elevator-fq.c:2041:
+ * This is called after the io scheduler has cleaned up its data structres.
                                                                  ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2200: FILE: block/elevator-fq.c:2058:
+	BUG_ON(timer_pending(&efqd->idle_slice_timer));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2203: FILE: block/elevator-fq.c:2061:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2227: FILE: block/elevator-fq.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2245: FILE: block/elevator-fq.h:19:
+typedef unsigned long bfq_weight_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2246: FILE: block/elevator-fq.h:20:
+typedef unsigned long bfq_service_t;

WARNING:TYPO_SPELLING: 'pre-empt' may be misspelled - perhaps 'preempt'?
#2423: FILE: block/elevator-fq.h:197:
+	 * Used to track any pending rt requests so we can pre-empt current
 	                                                   ^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ioq' - possible side-effects?
#2458: FILE: block/elevator-fq.h:232:
+#define elv_log_ioq(efqd, ioq, fmt, args...) \
+	blk_add_trace_msg((efqd)->queue, "elv%d%c " fmt, (ioq)->pid,	\
+				elv_ioq_sync(ioq) ? 'S' : 'A', ##args)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2488: FILE: block/elevator-fq.h:262:
+static inline int elv_ioq_##name(struct io_queue *ioq)         ^I^I\$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2506: FILE: block/elevator-fq.h:280:
+	BUG_ON(idx >= IO_IOPRIO_CLASSES);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2507: FILE: block/elevator-fq.h:281:
+	BUG_ON(sched_data == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sched_data"
#2507: FILE: block/elevator-fq.h:281:
+	BUG_ON(sched_data == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2561: FILE: block/elevator-fq.h:335:
+static inline void elv_ioq_set_slice_end(struct io_queue *ioq,
+						unsigned long slice_end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2587: FILE: block/elevator-fq.h:361:
+static inline void elv_ioq_set_ioprio_class(struct io_queue *ioq,
+						int ioprio_class)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2613: FILE: block/elevator-fq.h:387:
+extern ssize_t elv_slice_idle_show(struct request_queue *q, char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2614: FILE: block/elevator-fq.h:388:
+extern ssize_t elv_slice_idle_store(struct request_queue *q, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2615: FILE: block/elevator-fq.h:389:
+extern ssize_t elv_slice_idle_store(struct request_queue *q, const char *name,
+						size_t count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2616: FILE: block/elevator-fq.h:390:
+extern ssize_t elv_slice_sync_show(struct request_queue *q, char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2617: FILE: block/elevator-fq.h:391:
+extern ssize_t elv_slice_sync_store(struct request_queue *q, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2618: FILE: block/elevator-fq.h:392:
+extern ssize_t elv_slice_sync_store(struct request_queue *q, const char *name,
+						size_t count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2619: FILE: block/elevator-fq.h:393:
+extern ssize_t elv_slice_async_show(struct request_queue *q, char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2620: FILE: block/elevator-fq.h:394:
+extern ssize_t elv_slice_async_store(struct request_queue *q, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2621: FILE: block/elevator-fq.h:395:
+extern ssize_t elv_slice_async_store(struct request_queue *q, const char *name,
+						size_t count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2624: FILE: block/elevator-fq.h:398:
+extern int elv_init_fq_data(struct request_queue *q, struct elevator_queue *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2625: FILE: block/elevator-fq.h:399:
+extern void elv_exit_fq_data(struct elevator_queue *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2626: FILE: block/elevator-fq.h:400:
+extern void elv_exit_fq_data_post(struct elevator_queue *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2628: FILE: block/elevator-fq.h:402:
+extern void elv_ioq_request_add(struct request_queue *q, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2629: FILE: block/elevator-fq.h:403:
+extern void elv_ioq_request_removed(struct elevator_queue *e,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2630: FILE: block/elevator-fq.h:404:
+extern void elv_ioq_request_removed(struct elevator_queue *e,
+					struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2631: FILE: block/elevator-fq.h:405:
+extern void elv_fq_dispatched_request(struct elevator_queue *e,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2632: FILE: block/elevator-fq.h:406:
+extern void elv_fq_dispatched_request(struct elevator_queue *e,
+					struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2634: FILE: block/elevator-fq.h:408:
+extern void elv_fq_activate_rq(struct request_queue *q, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2635: FILE: block/elevator-fq.h:409:
+extern void elv_fq_deactivate_rq(struct request_queue *q, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2637: FILE: block/elevator-fq.h:411:
+extern void elv_ioq_completed_request(struct request_queue *q,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2638: FILE: block/elevator-fq.h:412:
+extern void elv_ioq_completed_request(struct request_queue *q,
+				struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2640: FILE: block/elevator-fq.h:414:
+extern void *elv_fq_select_ioq(struct request_queue *q, int force);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2641: FILE: block/elevator-fq.h:415:
+extern struct io_queue *rq_ioq(struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2644: FILE: block/elevator-fq.h:418:
+extern void elv_put_ioq(struct io_queue *ioq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2645: FILE: block/elevator-fq.h:419:
+extern void __elv_ioq_slice_expired(struct request_queue *q,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2646: FILE: block/elevator-fq.h:420:
+extern void __elv_ioq_slice_expired(struct request_queue *q,
+					struct io_queue *ioq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2647: FILE: block/elevator-fq.h:421:
+extern int elv_init_ioq(struct elevator_queue *eq, struct io_queue *ioq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2648: FILE: block/elevator-fq.h:422:
+extern int elv_init_ioq(struct elevator_queue *eq, struct io_queue *ioq,
+		void *sched_queue, int ioprio_class, int ioprio, int is_sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2649: FILE: block/elevator-fq.h:423:
+extern void elv_schedule_dispatch(struct request_queue *q);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2650: FILE: block/elevator-fq.h:424:
+extern int elv_hw_tag(struct elevator_queue *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2651: FILE: block/elevator-fq.h:425:
+extern void *elv_active_sched_queue(struct elevator_queue *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2652: FILE: block/elevator-fq.h:426:
+extern int elv_mod_idle_slice_timer(struct elevator_queue *eq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2653: FILE: block/elevator-fq.h:427:
+extern int elv_mod_idle_slice_timer(struct elevator_queue *eq,
+					unsigned long expires);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2654: FILE: block/elevator-fq.h:428:
+extern int elv_del_idle_slice_timer(struct elevator_queue *eq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2655: FILE: block/elevator-fq.h:429:
+extern unsigned int elv_get_slice_idle(struct elevator_queue *eq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2656: FILE: block/elevator-fq.h:430:
+extern void *io_group_async_queue_prio(struct io_group *iog, int ioprio_class,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2657: FILE: block/elevator-fq.h:431:
+extern void *io_group_async_queue_prio(struct io_group *iog, int ioprio_class,
+					int ioprio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2658: FILE: block/elevator-fq.h:432:
+extern void io_group_set_async_queue(struct io_group *iog, int ioprio_class,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2659: FILE: block/elevator-fq.h:433:
+extern void io_group_set_async_queue(struct io_group *iog, int ioprio_class,
+					int ioprio, struct io_queue *ioq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2660: FILE: block/elevator-fq.h:434:
+extern struct io_group *io_lookup_io_group_current(struct request_queue *q);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2661: FILE: block/elevator-fq.h:435:
+extern int elv_nr_busy_ioq(struct elevator_queue *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2662: FILE: block/elevator-fq.h:436:
+extern int elv_nr_busy_rt_ioq(struct elevator_queue *e);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2663: FILE: block/elevator-fq.h:437:
+extern struct io_queue *elv_alloc_ioq(struct request_queue *q, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2664: FILE: block/elevator-fq.h:438:
+extern void elv_free_ioq(struct io_queue *ioq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2669: FILE: block/elevator-fq.h:443:
+static inline int elv_init_fq_data(struct request_queue *q,
+					struct elevator_queue *e)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2678: FILE: block/elevator-fq.h:452:
+static inline void elv_fq_activate_rq(struct request_queue *q,
+					struct request *rq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2688: FILE: block/elevator-fq.h:462:
+static inline void elv_fq_dispatched_request(struct elevator_queue *e,
+						struct request *rq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2693: FILE: block/elevator-fq.h:467:
+static inline void elv_ioq_request_removed(struct elevator_queue *e,
+						struct request *rq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2698: FILE: block/elevator-fq.h:472:
+static inline void elv_ioq_request_add(struct request_queue *q,
+					struct request *rq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2703: FILE: block/elevator-fq.h:477:
+static inline void elv_ioq_completed_request(struct request_queue *q,
+						struct request *rq)

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#2899: FILE: include/linux/elevator.h:74:
+	elevator_free_sched_queue_fn *elevator_free_sched_queue_fn;
 	                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2954: FILE: include/linux/elevator.h:261:
+extern void *elv_get_sched_queue(struct request_queue *q, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2955: FILE: include/linux/elevator.h:262:
+extern void *elv_select_sched_queue(struct request_queue *q, int force);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120121.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 72 warnings, 150 checks, 2839 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120121.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
