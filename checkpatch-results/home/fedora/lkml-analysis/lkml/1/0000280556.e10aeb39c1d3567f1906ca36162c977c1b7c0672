CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: include/linux/acct.h:129:
+extern void acct_exit_ns(struct pid_namespace *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pid_namespace *' should also have an identifier name
#62: FILE: include/linux/acct.h:129:
+extern void acct_exit_ns(struct pid_namespace *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: kernel/acct.c:178:
+static void acct_file_reopen(struct bsd_acct_struct *acct, struct file *file,
+		struct pid_namespace *ns)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ns->bacct"
#131: FILE: kernel/acct.c:234:
+	if (ns->bacct == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*acct)...) over kzalloc(sizeof(struct bsd_acct_struct)...)
#132: FILE: kernel/acct.c:235:
+		acct = kzalloc(sizeof(struct bsd_acct_struct), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!acct"
#133: FILE: kernel/acct.c:236:
+		if (acct == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ns->bacct"
#147: FILE: kernel/acct.c:250:
+	if (ns->bacct == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!acct"
#169: FILE: kernel/acct.c:293:
+		if (acct == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!acct"
#187: FILE: kernel/acct.c:318:
+	if (acct == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!acct"
#205: FILE: kernel/acct.c:339:
+	if (acct == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "acct"
#223: FILE: kernel/acct.c:354:
+	if (acct != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "acct->file"
#224: FILE: kernel/acct.c:355:
+		if (acct->file != NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000280556.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 11 checks, 210 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000280556.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
