WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
radix trees by inserting into the slot corresponding to the end of the range,

WARNING:REPEATED_WORD: Possible repeated word: 'very'
#55: 
very very light, I'm mostly sending this out for comments and to continue

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#59: 
--- a/fs/Makefile	Mon Jul 09 10:53:57 2007 -0400

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:LINE_SPACING: Missing a blank line after declarations
#171: FILE: fs/ext2/inode.c:696:
+	struct extent_map_tree *tree;
+	tree = &EXT2_I(page->mapping->host)->extent_tree;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: fs/ext2/inode.c:713:
+	struct extent_map_tree *tree;
+	tree = &EXT2_I(page->mapping->host)->extent_tree;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#206: FILE: fs/ext2/inode.c:732:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: fs/ext2/inode.c:752:
+ext2_extent_map_prepare_write(struct file *file, struct page *page,
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#223: FILE: fs/ext2/inode.c:752:
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#223: FILE: fs/ext2/inode.c:752:
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#235: FILE: fs/ext2/inode.c:763:
+		   unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#235: FILE: fs/ext2/inode.c:763:
+		   unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#241: FILE: fs/ext2/inode.c:769:
+				 unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#241: FILE: fs/ext2/inode.c:769:
+				 unsigned from, unsigned to)

CHECK:CAMELCASE: Avoid CamelCase: <Opt_oldalloc>
#311: FILE: fs/ext2/super.c:322:
+	Opt_oldalloc, Opt_orlov, Opt_nobh, Opt_extent_map,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_orlov>
#311: FILE: fs/ext2/super.c:322:
+	Opt_oldalloc, Opt_orlov, Opt_nobh, Opt_extent_map,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nobh>
#311: FILE: fs/ext2/super.c:322:
+	Opt_oldalloc, Opt_orlov, Opt_nobh, Opt_extent_map,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_extent_map>
#311: FILE: fs/ext2/super.c:322:
+	Opt_oldalloc, Opt_orlov, Opt_nobh, Opt_extent_map,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_user_xattr>
#312: FILE: fs/ext2/super.c:323:
+	Opt_user_xattr, Opt_nouser_xattr,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nouser_xattr>
#312: FILE: fs/ext2/super.c:323:
+	Opt_user_xattr, Opt_nouser_xattr,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#330: FILE: fs/ext2/super.c:438:
+			set_opt (sbi->s_mount_opt, EXTENTMAP);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#338: FILE: fs/extent_map.c:1:
+#include <linux/bitops.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#355: FILE: fs/extent_map.c:18:
+#define EXTENT_WRITEBACK (1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#356: FILE: fs/extent_map.c:19:
+#define EXTENT_UPTODATE (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#357: FILE: fs/extent_map.c:20:
+#define EXTENT_LOCKED (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#358: FILE: fs/extent_map.c:21:
+#define EXTENT_NEW (1 << 4)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: fs/extent_map.c:28:
+	extent_map_cache = kmem_cache_create("extent_map",
+					    sizeof(struct extent_map), 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: fs/extent_map.c:33:
+	extent_state_cache = kmem_cache_create("extent_state",
+					    sizeof(struct extent_state), 0,

WARNING:LINE_SPACING: Missing a blank line after declarations
#389: FILE: fs/extent_map.c:52:
+	struct extent_map *em;
+	em = kmem_cache_alloc(extent_map_cache, mask);

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: fs/extent_map.c:70:
+	struct extent_state *state;
+	state = kmem_cache_alloc(extent_state_cache, mask);

WARNING:TABSTOP: Statements should start on a tabstop
#448: FILE: fs/extent_map.c:111:
+	 }

WARNING:LINE_SPACING: Missing a blank line after declarations
#551: FILE: fs/extent_map.c:214:
+	int ret;
+	prealloc->start = orig->start;

ERROR:SPACING: space required before the open parenthesis '('
#582: FILE: fs/extent_map.c:245:
+	while(start < end) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#607: FILE: fs/extent_map.c:270:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: fs/extent_map.c:280:
+static int clear_state_bit(struct extent_map_tree *tree,
+			    struct extent_state *state, int bits, int wake,

WARNING:LINE_SPACING: Missing a blank line after declarations
#621: FILE: fs/extent_map.c:284:
+	int ret = state->state & bits;
+	state->state &= ~bits;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#707: FILE: fs/extent_map.c:370:
+			BUG_ON(err == -EEXIST);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#728: FILE: fs/extent_map.c:391:
+			BUG_ON(err == -EEXIST);

WARNING:LINE_SPACING: Missing a blank line after declarations
#766: FILE: fs/extent_map.c:429:
+	DEFINE_WAIT(wait);
+	prepare_to_wait(&state->wq, &wait, TASK_UNINTERRUPTIBLE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#893: FILE: fs/extent_map.c:556:
+		BUG_ON(err == -EEXIST);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#948: FILE: fs/extent_map.c:611:
+			BUG_ON(err == -EEXIST);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#975: FILE: fs/extent_map.c:638:
+			BUG_ON(err == -EEXIST);

WARNING:LINE_SPACING: Missing a blank line after declarations
#991: FILE: fs/extent_map.c:654:
+			u64 this_end = min(end, last_start);
+			err = insert_state(tree, prealloc, start, this_end,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#994: FILE: fs/extent_map.c:657:
+			BUG_ON(err == -EEXIST);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1041: FILE: fs/extent_map.c:704:
+int set_extent_new(struct extent_map_tree *tree, u64 start, u64 end,
+		     gfp_t mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: fs/extent_map.c:712:
+int clear_extent_new(struct extent_map_tree *tree, u64 start, u64 end,
+		       gfp_t mask)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1099: FILE: fs/extent_map.c:762:
+	u64 failed_start;
+	while (1) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1132: FILE: fs/extent_map.c:795:
+		BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1153: FILE: fs/extent_map.c:816:
+		BUG_ON(!page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1291: FILE: fs/extent_map.c:954:
+	u64 end = start + PAGE_CACHE_SIZE - 1;
+	if (test_range_bit(tree, start, end, EXTENT_UPTODATE, 1))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1305: FILE: fs/extent_map.c:968:
+	u64 end = start + PAGE_CACHE_SIZE - 1;
+	if (!test_range_bit(tree, start, end, EXTENT_LOCKED, 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1315: FILE: fs/extent_map.c:978:
+static int check_page_writeback(struct extent_map_tree *tree,
+			     struct page *page)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1319: FILE: fs/extent_map.c:982:
+	u64 end = start + PAGE_CACHE_SIZE - 1;
+	if (!test_range_bit(tree, start, end, EXTENT_WRITEBACK, 0))

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1328: FILE: fs/extent_map.c:991:
+ * clear the uptodate bits on error
              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1336: FILE: fs/extent_map.c:999:
+static int end_bio_extent_writepage(struct bio *bio,
+				   unsigned int bytes_done, int err)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1338: FILE: fs/extent_map.c:1001:
+	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	          ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1350: FILE: fs/extent_map.c:1013:
+		struct page *page = bvec->bv_page;
+		start = (page->index << PAGE_CACHE_SHIFT) + bvec->bv_offset;

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1361: FILE: fs/extent_map.c:1024:
+		if (!uptodate) {
 		     ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1380: FILE: fs/extent_map.c:1043:
+ * clear the uptodate bits on error
              ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1381: FILE: fs/extent_map.c:1044:
+ * set the uptodate bits if things worked
            ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1382: FILE: fs/extent_map.c:1045:
+ * set the page up to date if all extents in the tree are uptodate
                                                           ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1392: FILE: fs/extent_map.c:1055:
+	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	          ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1404: FILE: fs/extent_map.c:1067:
+		struct page *page = bvec->bv_page;
+		start = (page->index << PAGE_CACHE_SHIFT) + bvec->bv_offset;

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1415: FILE: fs/extent_map.c:1078:
+		if (uptodate) {
 		    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1440: FILE: fs/extent_map.c:1103:
+ * the structs in the extent tree when done, and set the uptodate bits
                                                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1446: FILE: fs/extent_map.c:1109:
+	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	          ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1457: FILE: fs/extent_map.c:1120:
+		struct page *page = bvec->bv_page;
+		start = (page->index << PAGE_CACHE_SHIFT) + bvec->bv_offset;

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1463: FILE: fs/extent_map.c:1126:
+		if (uptodate) {
 		    ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1558: FILE: fs/extent_map.c:1221:
+		BUG_ON(em->end < cur);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1559: FILE: fs/extent_map.c:1222:
+		BUG_ON(end < cur);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1600: FILE: fs/extent_map.c:1263:
+		size_t last_off = last_byte & (PAGE_CACHE_SIZE - 1);
+		zero_user_page(page, last_off, PAGE_CACHE_SIZE - last_off,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1602: FILE: fs/extent_map.c:1265:
+       }$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1620: FILE: fs/extent_map.c:1283:
+int extent_write_full_page(struct extent_map_tree *tree, struct page *page,
+			  get_extent_t *get_extent,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1649: FILE: fs/extent_map.c:1312:
+		size_t offset = i_size & (PAGE_CACHE_SIZE - 1);
+		zero_user_page(page, offset,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1676: FILE: fs/extent_map.c:1339:
+		BUG_ON(em->end < cur);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1677: FILE: fs/extent_map.c:1340:
+		BUG_ON(end < cur);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1694: FILE: fs/extent_map.c:1357:
+		if (!test_range_bit(tree, cur, cur + iosize - 1,
+				   EXTENT_DIRTY, 0)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1732: FILE: fs/extent_map.c:1395:
+	u64 end = start + PAGE_CACHE_SIZE - 1 - offset;
+	lock_extent(tree, start, end, GFP_NOFS);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1745: FILE: fs/extent_map.c:1408:
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1745: FILE: fs/extent_map.c:1408:
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1749: FILE: fs/extent_map.c:1412:
+	unsigned blocksize = 1 << inode->i_blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1772: FILE: fs/extent_map.c:1435:
+			 unsigned from, unsigned to, get_extent_t *get_extent)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1772: FILE: fs/extent_map.c:1435:
+			 unsigned from, unsigned to, get_extent_t *get_extent)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1781: FILE: fs/extent_map.c:1444:
+	unsigned blocksize = 1 << inode->i_blkbits;

ERROR:SPACING: space required before the open parenthesis '('
#1801: FILE: fs/extent_map.c:1464:
+	while(block_start <= block_end) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1804: FILE: fs/extent_map.c:1467:
+		if (IS_ERR(em) || !em) {
+			goto err;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1827: FILE: fs/extent_map.c:1490:
+
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1835: FILE: fs/extent_map.c:1498:
+			size_t iosize;
+			sector = (em->block_start + extent_offset) >> 9;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1847: FILE: fs/extent_map.c:1510:
+			ret = submit_extent_page(READ, tree, page,
+					 sector, iosize, page_offset, em->bdev,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1916: FILE: include/linux/extent_map.h:1:
+#ifndef __EXTENTMAP__

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1981: FILE: include/linux/extent_map.h:66:
+int extent_write_full_page(struct extent_map_tree *tree, struct page *page,
+			  get_extent_t *get_extent,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1985: FILE: include/linux/extent_map.h:70:
+			 unsigned from, unsigned to, get_extent_t *get_extent);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1985: FILE: include/linux/extent_map.h:70:
+			 unsigned from, unsigned to, get_extent_t *get_extent);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1988: FILE: include/linux/extent_map.h:73:
+			unsigned from, unsigned to);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1988: FILE: include/linux/extent_map.h:73:
+			unsigned from, unsigned to);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1997: FILE: init/main.c:97:
+extern void extent_map_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408188.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 67 warnings, 25 checks, 1906 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408188.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
