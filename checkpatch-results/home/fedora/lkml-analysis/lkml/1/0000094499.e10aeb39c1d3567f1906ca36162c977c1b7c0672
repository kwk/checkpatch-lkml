CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#50: FILE: include/linux/device.h:558:
+#define dev_printk_section(section, level, dev, format, arg...)		\
+	printk_section(section, level "%s %s: " format,			\
+		       dev_driver_string(dev), dev_name(dev), ##arg)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'section' - possible side-effects?
#64: FILE: include/linux/dynamic_debug.h:77:
+#define dynamic_pr_debug_section(section, fmt, ...) do {		\
+	static struct _ddebug descriptor				\
+	__used								\
+	__attribute__((section("__verbose"), aligned(8))) =		\
+	{ KBUILD_MODNAME, __func__, __FILE__, fmt, DEBUG_HASH,		\
+		DEBUG_HASH2, __LINE__, _DPRINTK_FLAGS_DEFAULT };	\
+	if (__dynamic_dbg_enabled(descriptor))				\
+		printk_section(section,					\
+			       KERN_DEBUG KBUILD_MODNAME ":" pr_fmt(fmt), \
+			       ##__VA_ARGS__);				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#64: FILE: include/linux/dynamic_debug.h:77:
+#define dynamic_pr_debug_section(section, fmt, ...) do {		\
+	static struct _ddebug descriptor				\
+	__used								\
+	__attribute__((section("__verbose"), aligned(8))) =		\
+	{ KBUILD_MODNAME, __func__, __FILE__, fmt, DEBUG_HASH,		\
+		DEBUG_HASH2, __LINE__, _DPRINTK_FLAGS_DEFAULT };	\
+	if (__dynamic_dbg_enabled(descriptor))				\
+		printk_section(section,					\
+			       KERN_DEBUG KBUILD_MODNAME ":" pr_fmt(fmt), \
+			       ##__VA_ARGS__);				\
+	} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose") over __attribute__((section("__verbose")))
#67: FILE: include/linux/dynamic_debug.h:80:
+	__attribute__((section("__verbose"), aligned(8))) =		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#67: FILE: include/linux/dynamic_debug.h:80:
+	__attribute__((section("__verbose"), aligned(8))) =		\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#76: FILE: include/linux/dynamic_debug.h:89:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'section' - possible side-effects?
#77: FILE: include/linux/dynamic_debug.h:90:
+#define dynamic_dev_dbg_section(section, dev, fmt, ...) do {		\
+	static struct _ddebug descriptor				\
+	__used								\
+	__attribute__((section("__verbose"), aligned(8))) =		\
+	{ KBUILD_MODNAME, __func__, __FILE__, fmt, DEBUG_HASH,		\
+		DEBUG_HASH2, __LINE__, _DPRINTK_FLAGS_DEFAULT };	\
+	if (__dynamic_dbg_enabled(descriptor))				\
+		dev_printk_section(section, KERN_DEBUG, dev,		\
+				   KBUILD_MODNAME ": " fmt, ##__VA_ARGS__); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#77: FILE: include/linux/dynamic_debug.h:90:
+#define dynamic_dev_dbg_section(section, dev, fmt, ...) do {		\
+	static struct _ddebug descriptor				\
+	__used								\
+	__attribute__((section("__verbose"), aligned(8))) =		\
+	{ KBUILD_MODNAME, __func__, __FILE__, fmt, DEBUG_HASH,		\
+		DEBUG_HASH2, __LINE__, _DPRINTK_FLAGS_DEFAULT };	\
+	if (__dynamic_dbg_enabled(descriptor))				\
+		dev_printk_section(section, KERN_DEBUG, dev,		\
+				   KBUILD_MODNAME ": " fmt, ##__VA_ARGS__); \
+	} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose") over __attribute__((section("__verbose")))
#80: FILE: include/linux/dynamic_debug.h:93:
+	__attribute__((section("__verbose"), aligned(8))) =		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#80: FILE: include/linux/dynamic_debug.h:93:
+	__attribute__((section("__verbose"), aligned(8))) =		\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#98: FILE: include/linux/dynamic_debug.h:109:
+	({ if (0) printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__); 0; })

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#100: FILE: include/linux/dynamic_debug.h:111:
+	({ if (0) dev_printk(KERN_DEBUG, dev, format, ##__VA_ARGS__); 0; })

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#120: FILE: include/linux/kernel.h:411:
+		printk(__fmt, ##__VA_ARGS__); })

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: include/linux/kernel.h:416:
+        printk_section(section, KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: include/linux/kernel.h:416:
+        printk_section(section, KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: include/linux/kernel.h:418:
+        printk_section(section, KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: include/linux/kernel.h:418:
+        printk_section(section, KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: include/linux/kernel.h:420:
+        printk_section(section, KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: include/linux/kernel.h:420:
+        printk_section(section, KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: include/linux/kernel.h:422:
+        printk_section(section, KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: include/linux/kernel.h:422:
+        printk_section(section, KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: include/linux/kernel.h:424:
+        printk_section(section, KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: include/linux/kernel.h:424:
+        printk_section(section, KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: include/linux/kernel.h:426:
+        printk_section(section, KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: include/linux/kernel.h:426:
+        printk_section(section, KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#156: FILE: include/linux/kernel.h:447:
+#define pr_debug_section(section, fmt, ...) do {	\
+		dynamic_pr_debug(fmt, ##__VA_ARGS__);	\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094499.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 14 warnings, 6 checks, 113 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000094499.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
