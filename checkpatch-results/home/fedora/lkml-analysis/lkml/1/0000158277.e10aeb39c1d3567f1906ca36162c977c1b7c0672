ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Vishak G <vishak.g at samsung.com>'
#37: 
Signed-off-by: Vishak G <vishak.g at samsung.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Kyungmin Park <kyungmin.park at samsung.com>'
#38: 
Signed-off-by: Kyungmin Park <kyungmin.park at samsung.com>

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Rohit Hagargundgi <h.rohit at samsung.com>'
#39: 
Signed-off-by: Rohit Hagargundgi <h.rohit at samsung.com>

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#139: FILE: drivers/mtd/onenand/onenand_base.c:214:
+static unsigned flexonenand_block(struct onenand_chip *this, loff_t addr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#141: FILE: drivers/mtd/onenand/onenand_base.c:216:
+	unsigned boundary, blk, die = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#158: FILE: drivers/mtd/onenand/onenand_base.c:233:
+inline unsigned onenand_block(struct onenand_chip *this, loff_t addr)

CHECK:SPACING: No space is necessary after a cast
#251: FILE: drivers/mtd/onenand/onenand_base.c:345:
+		page = (int) (addr - onenand_addr(this, block)) >> this->page_shift;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#305: FILE: drivers/mtd/onenand/onenand_base.c:443:
+			return ONENAND_ECC_2BIT_ALL;
+		else

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#329: FILE: drivers/mtd/onenand/onenand_base.c:496:
+				printk(KERN_DEBUG "onenand_wait: correctable ECC error = 0x%04x\n", ecc);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#329: FILE: drivers/mtd/onenand/onenand_base.c:496:
+				printk(KERN_DEBUG "onenand_wait: correctable ECC error = 0x%04x\n", ecc);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_wait', this function's name, in a string
#329: FILE: drivers/mtd/onenand/onenand_base.c:496:
+				printk(KERN_DEBUG "onenand_wait: correctable ECC error = 0x%04x\n", ecc);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#379: FILE: drivers/mtd/onenand/onenand_base.c:1007:
+	printk(KERN_INFO "onenand_recover_lsb: Attempting to recover from uncorrectable read\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_recover_lsb', this function's name, in a string
#379: FILE: drivers/mtd/onenand/onenand_base.c:1007:
+	printk(KERN_INFO "onenand_recover_lsb: Attempting to recover from uncorrectable read\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: drivers/mtd/onenand/onenand_base.c:1025:
+static int onenand_mlc_read_ops_nolock(struct mtd_info *mtd, loff_t from,
+				struct mtd_oob_ops *ops)

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#410: FILE: drivers/mtd/onenand/onenand_base.c:1038:
+	DEBUG(MTD_DEBUG_LEVEL3, "onenand_mlc_read_ops_nolock: from = 0x%08x, len = %i\n", (unsigned int) from, (int) len);

CHECK:SPACING: No space is necessary after a cast
#410: FILE: drivers/mtd/onenand/onenand_base.c:1038:
+	DEBUG(MTD_DEBUG_LEVEL3, "onenand_mlc_read_ops_nolock: from = 0x%08x, len = %i\n", (unsigned int) from, (int) len);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_mlc_read_ops_nolock', this function's name, in a string
#410: FILE: drivers/mtd/onenand/onenand_base.c:1038:
+	DEBUG(MTD_DEBUG_LEVEL3, "onenand_mlc_read_ops_nolock: from = 0x%08x, len = %i\n", (unsigned int) from, (int) len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#421: FILE: drivers/mtd/onenand/onenand_base.c:1049:
+		printk(KERN_ERR "onenand_mlc_read_ops_nolock: Attempt read beyond end of device\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_mlc_read_ops_nolock', this function's name, in a string
#421: FILE: drivers/mtd/onenand/onenand_base.c:1049:
+		printk(KERN_ERR "onenand_mlc_read_ops_nolock: Attempt read beyond end of device\n");

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#457: FILE: drivers/mtd/onenand/onenand_base.c:1085:
+				this->read_bufferram(mtd, ONENAND_SPARERAM, oobbuf, oobcolumn, thisooblen);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#680: FILE: drivers/mtd/onenand/onenand_base.c:2106:
+		printk(KERN_ERR "onenand_erase: Erase past end of device\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_erase', this function's name, in a string
#680: FILE: drivers/mtd/onenand/onenand_base.c:2106:
+		printk(KERN_ERR "onenand_erase: Erase past end of device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#700: FILE: drivers/mtd/onenand/onenand_base.c:2122:
+			printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_erase', this function's name, in a string
#700: FILE: drivers/mtd/onenand/onenand_base.c:2122:
+			printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#708: FILE: drivers/mtd/onenand/onenand_base.c:2130:
+			printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_erase', this function's name, in a string
#708: FILE: drivers/mtd/onenand/onenand_base.c:2130:
+			printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#718: FILE: drivers/mtd/onenand/onenand_base.c:2137:
+		printk(KERN_ERR "onenand_erase: Length not block aligned\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_erase', this function's name, in a string
#718: FILE: drivers/mtd/onenand/onenand_base.c:2137:
+		printk(KERN_ERR "onenand_erase: Length not block aligned\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#737: FILE: drivers/mtd/onenand/onenand_base.c:2166:
+			printk(KERN_ERR "onenand_erase: Failed erase, block %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_erase', this function's name, in a string
#737: FILE: drivers/mtd/onenand/onenand_base.c:2166:
+			printk(KERN_ERR "onenand_erase: Failed erase, block %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: drivers/mtd/onenand/onenand_base.c:2167:
+			printk(KERN_ERR "onenand_erase: Failed erase, block %d\n",
+						 onenand_block(this, addr));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#757: FILE: drivers/mtd/onenand/onenand_base.c:2186:
+				printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_erase', this function's name, in a string
#757: FILE: drivers/mtd/onenand/onenand_base.c:2186:
+				printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#778: FILE: drivers/mtd/onenand/onenand_base.c:2276:
+^I * ^I   with MLC erasesize? For now, it is not advisable to$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#954: FILE: drivers/mtd/onenand/onenand_base.c:2912:
+	printk(KERN_INFO "%s%sOneNAND%s %dMB %sV 16-bit (0x%02x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#955: FILE: drivers/mtd/onenand/onenand_base.c:2913:
+	printk(KERN_INFO "%s%sOneNAND%s %dMB %sV 16-bit (0x%02x)\n",
+		demuxed ? "" : "Muxed ",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#970: FILE: drivers/mtd/onenand/onenand_base.c:2959:
+	unsigned die, bdry;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#994: FILE: drivers/mtd/onenand/onenand_base.c:2983:
+		printk(KERN_INFO "Die %d boundary: %d%s\n", die,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1005: FILE: drivers/mtd/onenand/onenand_base.c:2994:
+ * ^I^I^I  boundary[], diesize[], mtd->size, mtd->erasesize$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1025: FILE: drivers/mtd/onenand/onenand_base.c:3014:
+	die = ofs = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1028: FILE: drivers/mtd/onenand/onenand_base.c:3017:
+		if (!die || this->boundary[die-1] != maxbdry) {
 		                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1042: FILE: drivers/mtd/onenand/onenand_base.c:3031:
+		if (this->boundary[die] != maxbdry) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1050: FILE: drivers/mtd/onenand/onenand_base.c:3039:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1059: FILE: drivers/mtd/onenand/onenand_base.c:3048:
+	printk(KERN_INFO "Device has %d eraseregions\n", mtd->numeraseregions);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1061: FILE: drivers/mtd/onenand/onenand_base.c:3050:
+		printk(KERN_INFO "[offset: 0x%08x, erasesize: 0x%05x,"

WARNING:SPLIT_STRING: quoted string split across lines
#1062: FILE: drivers/mtd/onenand/onenand_base.c:3051:
+		printk(KERN_INFO "[offset: 0x%08x, erasesize: 0x%05x,"
+			" numblocks: %04u]\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#1063: FILE: drivers/mtd/onenand/onenand_base.c:3052:
+			(unsigned int) mtd->eraseregions[i].offset,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1103: FILE: drivers/mtd/onenand/onenand_base.c:3092:
+	printk(KERN_DEBUG "Check blocks from %d to %d\n", start, end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1123: FILE: drivers/mtd/onenand/onenand_base.c:3112:
+			printk(KERN_WARNING "Block %d not erased.\n", block);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1136: FILE: drivers/mtd/onenand/onenand_base.c:3125:
+int flexonenand_set_boundary(struct mtd_info *mtd, int die,
+				    int boundary, int lock)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1155: FILE: drivers/mtd/onenand/onenand_base.c:3144:
+		printk(KERN_ERR "flexonenand_set_boundary: Invalid boundary value. "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flexonenand_set_boundary', this function's name, in a string
#1155: FILE: drivers/mtd/onenand/onenand_base.c:3144:
+		printk(KERN_ERR "flexonenand_set_boundary: Invalid boundary value. "

WARNING:SPLIT_STRING: quoted string split across lines
#1156: FILE: drivers/mtd/onenand/onenand_base.c:3145:
+		printk(KERN_ERR "flexonenand_set_boundary: Invalid boundary value. "
+				"Boundary not changed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1165: FILE: drivers/mtd/onenand/onenand_base.c:3154:
+		printk(KERN_ERR "flexonenand_set_boundary: Please erase blocks before boundary change\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flexonenand_set_boundary', this function's name, in a string
#1165: FILE: drivers/mtd/onenand/onenand_base.c:3154:
+		printk(KERN_ERR "flexonenand_set_boundary: Please erase blocks before boundary change\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1178: FILE: drivers/mtd/onenand/onenand_base.c:3167:
+		printk(KERN_ERR "flexonenand_set_boundary: boundary locked\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flexonenand_set_boundary', this function's name, in a string
#1178: FILE: drivers/mtd/onenand/onenand_base.c:3167:
+		printk(KERN_ERR "flexonenand_set_boundary: boundary locked\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1183: FILE: drivers/mtd/onenand/onenand_base.c:3172:
+	printk(KERN_INFO "flexonenand_set_boundary: Changing die %d boundary: %d%s\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flexonenand_set_boundary', this function's name, in a string
#1183: FILE: drivers/mtd/onenand/onenand_base.c:3172:
+	printk(KERN_INFO "flexonenand_set_boundary: Changing die %d boundary: %d%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1184: FILE: drivers/mtd/onenand/onenand_base.c:3173:
+	printk(KERN_INFO "flexonenand_set_boundary: Changing die %d boundary: %d%s\n",
+			die, boundary, lock ? "(Locked)" : "(Unlocked)");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1194: FILE: drivers/mtd/onenand/onenand_base.c:3183:
+		printk(KERN_ERR "flexonenand_set_boundary: Failed PI erase for Die %d\n", die);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flexonenand_set_boundary', this function's name, in a string
#1194: FILE: drivers/mtd/onenand/onenand_base.c:3183:
+		printk(KERN_ERR "flexonenand_set_boundary: Failed PI erase for Die %d\n", die);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1202: FILE: drivers/mtd/onenand/onenand_base.c:3191:
+		printk(KERN_ERR "flexonenand_set_boundary: Failed PI write for Die %d\n", die);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flexonenand_set_boundary', this function's name, in a string
#1202: FILE: drivers/mtd/onenand/onenand_base.c:3191:
+		printk(KERN_ERR "flexonenand_set_boundary: Failed PI write for Die %d\n", die);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1219: FILE: drivers/mtd/onenand/onenand_base.c:3208:
+ * flexonenand_setup - ^Icapture Flex-OneNAND boundary and lock$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1220: FILE: drivers/mtd/onenand/onenand_base.c:3209:
+ * ^I^I^Ivalues  passed as kernel parameters$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1235: FILE: drivers/mtd/onenand/onenand_base.c:3224:
+__setup("onenand.bdry=", flexonenand_setup);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mtd->eraseregions)...) over kzalloc(sizeof(struct mtd_erase_region_info)...)
#1257: FILE: drivers/mtd/onenand/onenand_base.c:3284:
+		mtd->eraseregions = kzalloc(sizeof(struct mtd_erase_region_info)

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1343: FILE: drivers/mtd/onenand/onenand_base.c:3521:
+		flexonenand_set_boundary(mtd, i, flex_bdry[2 * i],
+						 flex_bdry[(2 * i) + 1]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1384: FILE: drivers/mtd/onenand/onenand_bbt.c:111:
+		if (FLEXONENAND(this)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1387: FILE: drivers/mtd/onenand/onenand_bbt.c:114:
+		} else

CHECK:SPACING: No space is necessary after a cast
#1397: FILE: drivers/mtd/onenand/onenand_bbt.c:152:
+	block = (int) (onenand_block(this, offs) << 1);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1554: FILE: drivers/mtd/onenand/onenand_sim.c:346:
+		if (FLEXONENAND(this)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1557: FILE: drivers/mtd/onenand/onenand_sim.c:349:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!CONFIG_FLEXONENAND'
#1591: FILE: drivers/mtd/onenand/onenand_sim.c:476:
+	if (density < 2 && (!CONFIG_FLEXONENAND))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1624: FILE: include/linux/mtd/onenand.h:101:
+	unsigned		dies;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1625: FILE: include/linux/mtd/onenand.h:102:
+	unsigned		boundary[MAX_DIES];

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'this' may be better as '(this)' to avoid precedence issues
#1638: FILE: include/linux/mtd/onenand.h:158:
+#define FLEXONENAND(this)						\
+	(this->device_id & DEVICE_IS_FLEXONENAND)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'this' may be better as '(this)' to avoid precedence issues
#1647: FILE: include/linux/mtd/onenand.h:168:
+#define ONENAND_IS_MLC(this)						\
+	(this->technology & ONENAND_TECHNOLOGY_IS_MLC)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1657: FILE: include/linux/mtd/onenand.h:207:
+unsigned onenand_block(struct onenand_chip *this, loff_t addr);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1670: FILE: include/linux/mtd/onenand_regs.h:70:
+#define DEVICE_IS_FLEXONENAND		(1 << 9)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1682: FILE: include/linux/mtd/onenand_regs.h:92:
+#define ONENAND_TECHNOLOGY_IS_MLC	(1 << 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158277.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 54 warnings, 25 checks, 1586 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158277.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
