WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#95: FILE: drivers/dma/dmaengine.c:179:
+			printk(KERN_ERR "dma_sync_wait_timeout!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#112: FILE: drivers/dma/dmaengine.c:346:
+	BUG_ON(dma_has_cap(DMA_MEMCPY, device->cap_mask) &&

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: drivers/dma/dmaengine.c:347:
+	BUG_ON(dma_has_cap(DMA_MEMCPY, device->cap_mask) &&
+		!device->device_prep_dma_memcpy);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#114: FILE: drivers/dma/dmaengine.c:348:
+	BUG_ON(dma_has_cap(DMA_XOR, device->cap_mask) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: drivers/dma/dmaengine.c:349:
+	BUG_ON(dma_has_cap(DMA_XOR, device->cap_mask) &&
+		!device->device_prep_dma_xor);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#116: FILE: drivers/dma/dmaengine.c:350:
+	BUG_ON(dma_has_cap(DMA_ZERO_SUM, device->cap_mask) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: drivers/dma/dmaengine.c:351:
+	BUG_ON(dma_has_cap(DMA_ZERO_SUM, device->cap_mask) &&
+		!device->device_prep_dma_zero_sum);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#118: FILE: drivers/dma/dmaengine.c:352:
+	BUG_ON(dma_has_cap(DMA_MEMSET, device->cap_mask) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: drivers/dma/dmaengine.c:353:
+	BUG_ON(dma_has_cap(DMA_MEMSET, device->cap_mask) &&
+		!device->device_prep_dma_memset);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#120: FILE: drivers/dma/dmaengine.c:354:
+	BUG_ON(dma_has_cap(DMA_ZERO_SUM, device->cap_mask) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: drivers/dma/dmaengine.c:355:
+	BUG_ON(dma_has_cap(DMA_ZERO_SUM, device->cap_mask) &&
+		!device->device_prep_dma_interrupt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#123: FILE: drivers/dma/dmaengine.c:357:
+	BUG_ON(!device->device_alloc_chan_resources);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#124: FILE: drivers/dma/dmaengine.c:358:
+	BUG_ON(!device->device_free_chan_resources);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#125: FILE: drivers/dma/dmaengine.c:359:
+	BUG_ON(!device->device_tx_submit);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#126: FILE: drivers/dma/dmaengine.c:360:
+	BUG_ON(!device->device_set_dest);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#127: FILE: drivers/dma/dmaengine.c:361:
+	BUG_ON(!device->device_set_src);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#128: FILE: drivers/dma/dmaengine.c:362:
+	BUG_ON(!device->device_dependency_added);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#129: FILE: drivers/dma/dmaengine.c:363:
+	BUG_ON(!device->device_is_tx_complete);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#130: FILE: drivers/dma/dmaengine.c:364:
+	BUG_ON(!device->device_issue_pending);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#131: FILE: drivers/dma/dmaengine.c:365:
+	BUG_ON(!device->dev);

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: drivers/dma/dmaengine.c:455:
+        void *dest, void *src, size_t len)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: drivers/dma/dmaengine.c:455:
+dma_cookie_t dma_async_memcpy_buf_to_buf(struct dma_chan *chan,
+        void *dest, void *src, size_t len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: drivers/dma/dmaengine.c:455:
+        void *dest, void *src, size_t len)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: drivers/dma/dmaengine.c:498:
+        struct page *page, unsigned int offset, void *kdata, size_t len)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: drivers/dma/dmaengine.c:498:
+dma_cookie_t dma_async_memcpy_buf_to_pg(struct dma_chan *chan,
+        struct page *page, unsigned int offset, void *kdata, size_t len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: drivers/dma/dmaengine.c:498:
+        struct page *page, unsigned int offset, void *kdata, size_t len)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: drivers/dma/dmaengine.c:542:
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: drivers/dma/dmaengine.c:542:
+dma_cookie_t dma_async_memcpy_pg_to_pg(struct dma_chan *chan,
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: drivers/dma/dmaengine.c:542:
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: drivers/dma/dmaengine.c:543:
+        unsigned int src_off, size_t len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: drivers/dma/dmaengine.c:543:
+        unsigned int src_off, size_t len)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: drivers/dma/dmaengine.c:573:
+void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *tx,
+	struct dma_chan *chan)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#294: FILE: drivers/dma/ioatdma.c:45:
 static int __devinit ioat_probe(struct pci_dev *pdev, const struct pci_device_id *ent);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#465: FILE: drivers/dma/ioatdma.c:300:
 
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#530: FILE: drivers/dma/ioatdma.c:332:
+	ioat_chan->common.cookie = desc->async_tx.cookie = cookie;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#550: FILE: drivers/dma/ioatdma.c:347:
+^I^I                    IOAT_CHANCMD_OFFSET,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: drivers/dma/ioatdma.c:348:
+^I^I                    IOAT_CHANCMD_APPEND);$

CHECK:BRACES: Unbalanced braces around else statement
#580: FILE: drivers/dma/ioatdma.c:436:
+			} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#597: FILE: drivers/dma/ioatdma.c:460:
+	struct ioat_dma_chan *ioat_chan = to_ioat_chan(chan);
+	spin_lock_bh(&ioat_chan->desc_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#598: FILE: drivers/dma/ioatdma.c:461:
+	if (ioat_chan->pending == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#601: FILE: drivers/dma/ioatdma.c:464:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#729: FILE: include/linux/dmaengine.h:79:
+^IDMA_INTERRUPT, /* when updating, make this the last entry and $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#738: FILE: include/linux/dmaengine.h:88:
+#define DMA_TX_ARRAY_INIT(x)	\
+	[DMA_MEMCPY] = x,	\
+	[DMA_XOR] = x,		\
+	[DMA_PQ_XOR] = x,	\
+	[DMA_DUAL_XOR] = x,	\
+	[DMA_PQ_UPDATE] = x,	\
+	[DMA_ZERO_SUM] = x,	\
+	[DMA_PQ_ZERO_SUM] = x,	\
+	[DMA_MEMSET] = x,	\
+	[DMA_MEMCPY_CRC32C] = x,\
+	[DMA_INTERRUPT] = x,

WARNING:NEW_TYPEDEFS: do not add new typedefs
#754: FILE: include/linux/dmaengine.h:104:
+typedef struct { DECLARE_BITMAP(bits, DMA_TX_TYPE_END); } dma_cap_mask_t;

WARNING:REPEATED_WORD: Possible repeated word: 'has'
#770: FILE: include/linux/dmaengine.h:205:
+ *	receipt, i.e. has has a chance to establish any dependency chains

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#791: FILE: include/linux/dmaengine.h:226:
+	spinlock_t lock;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#850: FILE: include/linux/dmaengine.h:271:
+	struct dma_async_tx_descriptor *(*device_prep_dma_memcpy)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#852: FILE: include/linux/dmaengine.h:273:
+	struct dma_async_tx_descriptor *(*device_prep_dma_xor)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#855: FILE: include/linux/dmaengine.h:276:
+	struct dma_async_tx_descriptor *(*device_prep_dma_zero_sum)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#858: FILE: include/linux/dmaengine.h:279:
+	struct dma_async_tx_descriptor *(*device_prep_dma_memset)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#860: FILE: include/linux/dmaengine.h:281:
+	struct dma_async_tx_descriptor *(*device_prep_dma_interrupt)(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: include/linux/dmaengine.h:286:
+	void (*device_set_dest)(dma_addr_t addr,
+		struct dma_async_tx_descriptor *tx, int index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#867: FILE: include/linux/dmaengine.h:288:
+	void (*device_set_src)(dma_addr_t addr,
+		struct dma_async_tx_descriptor *tx, int index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: include/linux/dmaengine.h:291:
+	enum dma_status (*device_is_tx_complete)(struct dma_chan *chan,
 			dma_cookie_t cookie, dma_cookie_t *last,

ERROR:CODE_INDENT: code indent should use tabs where possible
#897: FILE: include/linux/dmaengine.h:303:
+        void *dest, void *src, size_t len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: include/linux/dmaengine.h:303:
+dma_cookie_t dma_async_memcpy_buf_to_buf(struct dma_chan *chan,
+        void *dest, void *src, size_t len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: include/linux/dmaengine.h:303:
+        void *dest, void *src, size_t len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#899: FILE: include/linux/dmaengine.h:305:
+        struct page *page, unsigned int offset, void *kdata, size_t len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: include/linux/dmaengine.h:305:
+dma_cookie_t dma_async_memcpy_buf_to_pg(struct dma_chan *chan,
+        struct page *page, unsigned int offset, void *kdata, size_t len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#899: FILE: include/linux/dmaengine.h:305:
+        struct page *page, unsigned int offset, void *kdata, size_t len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#901: FILE: include/linux/dmaengine.h:307:
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: include/linux/dmaengine.h:307:
+dma_cookie_t dma_async_memcpy_pg_to_pg(struct dma_chan *chan,
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#901: FILE: include/linux/dmaengine.h:307:
+        struct page *dest_pg, unsigned int dest_off, struct page *src_pg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#902: FILE: include/linux/dmaengine.h:308:
+        unsigned int src_off, size_t len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: include/linux/dmaengine.h:308:
+        unsigned int src_off, size_t len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: include/linux/dmaengine.h:310:
+void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *tx,
+	struct dma_chan *chan);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#906: FILE: include/linux/dmaengine.h:312:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#949: FILE: include/linux/dmaengine.h:328:
+	return min_t(int, DMA_TX_TYPE_END, find_next_bit(srcp->bits, DMA_TX_TYPE_END, n+1));
 	                                                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cap' - possible side-effects?
#987: FILE: include/linux/dmaengine.h:343:
+#define for_each_dma_cap_mask(cap, mask) \
+	for ((cap) = first_dma_cap(mask);	\
+		(cap) < DMA_TX_TYPE_END;	\
+		(cap) = next_dma_cap((cap), (mask)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#987: FILE: include/linux/dmaengine.h:343:
+#define for_each_dma_cap_mask(cap, mask) \
+	for ((cap) = first_dma_cap(mask);	\
+		(cap) < DMA_TX_TYPE_END;	\
+		(cap) = next_dma_cap((cap), (mask)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1021: FILE: include/linux/dmaengine.h:374:
+static inline enum dma_status dma_async_is_tx_complete(struct dma_chan *chan,
 	dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437228.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 27 warnings, 33 checks, 942 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437228.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
