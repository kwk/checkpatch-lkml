WARNING:MEMORY_BARRIER: memory barrier without comment
#71: FILE: mm/vmscan.c:602:
+		smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: mm/memory.c:906:
+void anon_add(struct vm_area_struct *vma, struct page *page,
+				unsigned long address)

CHECK:BRACES: braces {} should be used on all arms of this statement
#101: FILE: mm/memory.c:909:
+	if (vma->vm_flags & VM_LOCKED) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#108: FILE: mm/memory.c:916:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#139: FILE: mm/memory.c:2271:
+		else {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#256: FILE: include/linux/swap.h:184:
+extern void FASTCALL(lru_cache_add_mlock(struct page *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#256: FILE: include/linux/swap.h:184:
+extern void FASTCALL(lru_cache_add_mlock(struct page *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#372: FILE: mm/swap.c:466:
+		BUG_ON(PageLRU(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:MEMORY_BARRIER: memory barrier without comment
#376: FILE: mm/swap.c:470:
+		smp_wmb();

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#398: FILE: mm/migrate.c:61:
+		} else
+		if (PageMlocked(page)) {

CHECK:BRACES: Unbalanced braces around else statement
#398: FILE: mm/migrate.c:61:
+		} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471230.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 6 checks, 287 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471230.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
