WARNING:SPACING: space prohibited between function name and open parenthesis '('
#78: FILE: fs/ext4/balloc.c:1383:
+		 !in_group_p (cred, sbi->s_resgid))) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: fs/ext4/dir.c:37:
+			   void * dirent, filldir_t filldir, struct cred *cred);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#170: FILE: fs/ext4/dir.c:116:
+		err = ext4_dx_readdir(filp, dirent, filldir, cred);
 		                      ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#198: FILE: fs/ext4/dir.c:435:
+			 void * dirent, filldir_t filldir,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#635: FILE: fs/ext4/extents.c:2441:
+void ext4_ext_truncate(struct inode * inode, struct page *page,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#716: FILE: fs/ext4/ialloc.c:427:
+struct inode *ext4_new_inode(handle_t *handle, struct inode * dir, int mode,

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#787: FILE: fs/ext4/inode.c:596:
+			int *offsets, Indirect *branch, struct cred *cred)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1080: FILE: fs/ext4/inode.c:2338:
+					   &nr, &nr+1, (chain+n-1) - partial,
 					           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1080: FILE: fs/ext4/inode.c:2338:
+					   &nr, &nr+1, (chain+n-1) - partial,
 					                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1080: FILE: fs/ext4/inode.c:2338:
+					   &nr, &nr+1, (chain+n-1) - partial,
 					                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1090: FILE: fs/ext4/inode.c:2350:
+					partial->p+1, (chain+n-1) - partial,
 					          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1090: FILE: fs/ext4/inode.c:2350:
+					partial->p+1, (chain+n-1) - partial,
 					                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1090: FILE: fs/ext4/inode.c:2350:
+					partial->p+1, (chain+n-1) - partial,
 					                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1099: FILE: fs/ext4/inode.c:2358:
+				   (chain+n-1) - partial, cred);
 				         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1099: FILE: fs/ext4/inode.c:2358:
+				   (chain+n-1) - partial, cred);
 				           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1108: FILE: fs/ext4/inode.c:2369:
+			ext4_free_branches(handle, inode, NULL, &nr, &nr+1, 1,
 			                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1116: FILE: fs/ext4/inode.c:2376:
+			ext4_free_branches(handle, inode, NULL, &nr, &nr+1, 2,
 			                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1124: FILE: fs/ext4/inode.c:2383:
+			ext4_free_branches(handle, inode, NULL, &nr, &nr+1, 3,
 			                                                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1277: FILE: fs/ext4/namei.c:61:
+	if ((bh = ext4_bread(handle, inode, *block, 1, err, cred))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1323: FILE: fs/ext4/namei.c:349:
+	if (!(bh = ext4_bread (NULL,dir, 0, 0, err, cred)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1323: FILE: fs/ext4/namei.c:349:
+	if (!(bh = ext4_bread (NULL,dir, 0, 0, err, cred)))
 	                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1323: FILE: fs/ext4/namei.c:349:
+	if (!(bh = ext4_bread (NULL,dir, 0, 0, err, cred)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1332: FILE: fs/ext4/namei.c:444:
+		if (!(bh = ext4_bread (NULL,dir, dx_get_block(at), 0, err, cred)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1332: FILE: fs/ext4/namei.c:444:
+		if (!(bh = ext4_bread (NULL,dir, dx_get_block(at), 0, err, cred)))
 		                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1332: FILE: fs/ext4/namei.c:444:
+		if (!(bh = ext4_bread (NULL,dir, dx_get_block(at), 0, err, cred)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1369: FILE: fs/ext4/namei.c:580:
+	if (!(bh = ext4_bread (NULL, dir, block, 0, &err, cred)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1369: FILE: fs/ext4/namei.c:580:
+	if (!(bh = ext4_bread (NULL, dir, block, 0, &err, cred)))

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1425: FILE: fs/ext4/namei.c:859:
+					struct ext4_dir_entry_2 ** res_dir,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1463: FILE: fs/ext4/namei.c:992:
+		if (!(frame = dx_probe(dentry, NULL, &hinfo, frames, err,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1473: FILE: fs/ext4/namei.c:1004:
+		if (!(bh = ext4_bread (NULL,dir, block, 0, err, cred)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1473: FILE: fs/ext4/namei.c:1004:
+		if (!(bh = ext4_bread (NULL,dir, block, 0, err, cred)))
 		                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1473: FILE: fs/ext4/namei.c:1004:
+		if (!(bh = ext4_bread (NULL,dir, block, 0, err, cred)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1535: FILE: fs/ext4/namei.c:1199:
+	bh2 = ext4_append (handle, dir, &newblock, &err, cred);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1544: FILE: fs/ext4/namei.c:1291:
+			     struct buffer_head * bh, struct cred *cred)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1572: FILE: fs/ext4/namei.c:1408:
+	bh2 = ext4_append (handle, dir, &block, &retval, cred);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1581: FILE: fs/ext4/namei.c:1446:
+	de = do_split(handle,dir, &bh, frame, &hinfo, &retval, cred);
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1668: FILE: fs/ext4/namei.c:1543:
+	if (!(bh = ext4_bread(handle,dir, dx_get_block(frame->at), 0, &err,
 	                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1668: FILE: fs/ext4/namei.c:1543:
+	if (!(bh = ext4_bread(handle,dir, dx_get_block(frame->at), 0, &err,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1687: FILE: fs/ext4/namei.c:1577:
+		bh2 = ext4_append (handle, dir, &newblock, &err, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1732: FILE: fs/ext4/namei.c:1768:
+	inode = ext4_new_inode (handle, dir, mode, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1761: FILE: fs/ext4/namei.c:1804:
+	inode = ext4_new_inode (handle, dir, mode, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1790: FILE: fs/ext4/namei.c:1842:
+	inode = ext4_new_inode (handle, dir, S_IFDIR | mode, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1799: FILE: fs/ext4/namei.c:1850:
+	dir_block = ext4_bread (handle, inode, 0, 1, &err, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1814: FILE: fs/ext4/namei.c:1877:
+	err = ext4_add_entry (handle, dentry, inode, cred);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1840: FILE: fs/ext4/namei.c:1899:
+static int empty_dir (struct inode * inode, struct cred *cred)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1840: FILE: fs/ext4/namei.c:1899:
+static int empty_dir (struct inode * inode, struct cred *cred)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1849: FILE: fs/ext4/namei.c:1909:
+	    !(bh = ext4_bread (NULL, inode, 0, 0, &err, cred))) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1876: FILE: fs/ext4/namei.c:2132:
+	bh = ext4_find_entry (dentry, &de, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1885: FILE: fs/ext4/namei.c:2146:
+	if (!empty_dir (inode, cred))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1915: FILE: fs/ext4/namei.c:2195:
+	bh = ext4_find_entry (dentry, &de, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1947: FILE: fs/ext4/namei.c:2252:
+	inode = ext4_new_inode (handle, dir, S_IFLNK|S_IRWXUGO, cred);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1947: FILE: fs/ext4/namei.c:2252:
+	inode = ext4_new_inode (handle, dir, S_IFLNK|S_IRWXUGO, cred);
 	                                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1947: FILE: fs/ext4/namei.c:2252:
+	inode = ext4_new_inode (handle, dir, S_IFLNK|S_IRWXUGO, cred);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2008: FILE: fs/ext4/namei.c:2360:
+	old_bh = ext4_find_entry (old_dentry, &old_de, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2017: FILE: fs/ext4/namei.c:2373:
+	new_bh = ext4_find_entry (new_dentry, &new_de, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2026: FILE: fs/ext4/namei.c:2383:
+			if (!empty_dir (new_inode, cred))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2031: FILE: fs/ext4/namei.c:2387:
+		dir_bh = ext4_bread (handle, old_inode, 0, 0, &retval, cred);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2040: FILE: fs/ext4/namei.c:2398:
+		retval = ext4_add_entry (handle, new_dentry, old_inode, cred);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#2227: FILE: fs/ext4/xattr.h:78:
+extern int ext4_xattr_set(struct inode *, int, const char *, const void *, size_t, int, struct cred *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2227: FILE: fs/ext4/xattr.h:78:
+extern int ext4_xattr_set(struct inode *, int, const char *, const void *, size_t, int, struct cred *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2227: FILE: fs/ext4/xattr.h:78:
+extern int ext4_xattr_set(struct inode *, int, const char *, const void *, size_t, int, struct cred *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2227: FILE: fs/ext4/xattr.h:78:
+extern int ext4_xattr_set(struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2227: FILE: fs/ext4/xattr.h:78:
+extern int ext4_xattr_set(struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#2227: FILE: fs/ext4/xattr.h:78:
+extern int ext4_xattr_set(struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2227: FILE: fs/ext4/xattr.h:78:
+extern int ext4_xattr_set(struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2227: FILE: fs/ext4/xattr.h:78:
+extern int ext4_xattr_set(struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#2227: FILE: fs/ext4/xattr.h:78:
+extern int ext4_xattr_set(struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#2228: FILE: fs/ext4/xattr.h:79:
+extern int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int, struct cred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2228: FILE: fs/ext4/xattr.h:79:
+extern int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#2228: FILE: fs/ext4/xattr.h:79:
+extern int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2228: FILE: fs/ext4/xattr.h:79:
+extern int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2228: FILE: fs/ext4/xattr.h:79:
+extern int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2228: FILE: fs/ext4/xattr.h:79:
+extern int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#2228: FILE: fs/ext4/xattr.h:79:
+extern int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2228: FILE: fs/ext4/xattr.h:79:
+extern int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2228: FILE: fs/ext4/xattr.h:79:
+extern int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#2228: FILE: fs/ext4/xattr.h:79:
+extern int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int, struct cred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2300: FILE: include/linux/ext4_fs.h:909:
+extern int ext4_should_retry_alloc(struct super_block *sb, int *retries,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2310: FILE: include/linux/ext4_fs.h:931:
+extern struct inode * ext4_new_inode (handle_t *, struct inode *, int,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2310: FILE: include/linux/ext4_fs.h:931:
+extern struct inode * ext4_new_inode (handle_t *, struct inode *, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2310: FILE: include/linux/ext4_fs.h:931:
+extern struct inode * ext4_new_inode (handle_t *, struct inode *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#2310: FILE: include/linux/ext4_fs.h:931:
+extern struct inode * ext4_new_inode (handle_t *, struct inode *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2310: FILE: include/linux/ext4_fs.h:931:
+extern struct inode * ext4_new_inode (handle_t *, struct inode *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2310: FILE: include/linux/ext4_fs.h:931:
+extern struct inode * ext4_new_inode (handle_t *, struct inode *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#2310: FILE: include/linux/ext4_fs.h:931:
+extern struct inode * ext4_new_inode (handle_t *, struct inode *, int,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2321: FILE: include/linux/ext4_fs.h:944:
+struct buffer_head * ext4_getblk (handle_t *, struct inode *, long, int, int *,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2321: FILE: include/linux/ext4_fs.h:944:
+struct buffer_head * ext4_getblk (handle_t *, struct inode *, long, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#2321: FILE: include/linux/ext4_fs.h:944:
+struct buffer_head * ext4_getblk (handle_t *, struct inode *, long, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2321: FILE: include/linux/ext4_fs.h:944:
+struct buffer_head * ext4_getblk (handle_t *, struct inode *, long, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#2321: FILE: include/linux/ext4_fs.h:944:
+struct buffer_head * ext4_getblk (handle_t *, struct inode *, long, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2321: FILE: include/linux/ext4_fs.h:944:
+struct buffer_head * ext4_getblk (handle_t *, struct inode *, long, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#2321: FILE: include/linux/ext4_fs.h:944:
+struct buffer_head * ext4_getblk (handle_t *, struct inode *, long, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#2321: FILE: include/linux/ext4_fs.h:944:
+struct buffer_head * ext4_getblk (handle_t *, struct inode *, long, int, int *,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2323: FILE: include/linux/ext4_fs.h:946:
+struct buffer_head * ext4_bread (handle_t *, struct inode *, int, int, int *,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2323: FILE: include/linux/ext4_fs.h:946:
+struct buffer_head * ext4_bread (handle_t *, struct inode *, int, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#2323: FILE: include/linux/ext4_fs.h:946:
+struct buffer_head * ext4_bread (handle_t *, struct inode *, int, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2323: FILE: include/linux/ext4_fs.h:946:
+struct buffer_head * ext4_bread (handle_t *, struct inode *, int, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2323: FILE: include/linux/ext4_fs.h:946:
+struct buffer_head * ext4_bread (handle_t *, struct inode *, int, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2323: FILE: include/linux/ext4_fs.h:946:
+struct buffer_head * ext4_bread (handle_t *, struct inode *, int, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#2323: FILE: include/linux/ext4_fs.h:946:
+struct buffer_head * ext4_bread (handle_t *, struct inode *, int, int, int *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#2323: FILE: include/linux/ext4_fs.h:946:
+struct buffer_head * ext4_bread (handle_t *, struct inode *, int, int, int *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2337: FILE: include/linux/ext4_fs.h:959:
+extern int ext4_change_inode_journal_flag(struct inode *, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2337: FILE: include/linux/ext4_fs.h:959:
+extern int ext4_change_inode_journal_flag(struct inode *, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2337: FILE: include/linux/ext4_fs.h:959:
+extern int ext4_change_inode_journal_flag(struct inode *, int, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#2337: FILE: include/linux/ext4_fs.h:959:
+extern int ext4_change_inode_journal_flag(struct inode *, int, struct cred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2356: FILE: include/linux/ext4_fs.h:1077:
+extern int ext4_ext_tree_init(handle_t *handle, struct inode *, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2356: FILE: include/linux/ext4_fs.h:1077:
+extern int ext4_ext_tree_init(handle_t *handle, struct inode *, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#2356: FILE: include/linux/ext4_fs.h:1077:
+extern int ext4_ext_tree_init(handle_t *handle, struct inode *, struct cred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2364: FILE: include/linux/ext4_fs.h:1083:
+extern void ext4_ext_truncate(struct inode *, struct page *, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2364: FILE: include/linux/ext4_fs.h:1083:
+extern void ext4_ext_truncate(struct inode *, struct page *, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#2364: FILE: include/linux/ext4_fs.h:1083:
+extern void ext4_ext_truncate(struct inode *, struct page *, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#2364: FILE: include/linux/ext4_fs.h:1083:
+extern void ext4_ext_truncate(struct inode *, struct page *, struct cred *);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#2394: FILE: include/linux/ext4_fs_extents.h:235:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, struct cred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2394: FILE: include/linux/ext4_fs_extents.h:235:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#2394: FILE: include/linux/ext4_fs_extents.h:235:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2394: FILE: include/linux/ext4_fs_extents.h:235:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_ext_path *' should also have an identifier name
#2394: FILE: include/linux/ext4_fs_extents.h:235:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_extent *' should also have an identifier name
#2394: FILE: include/linux/ext4_fs_extents.h:235:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#2394: FILE: include/linux/ext4_fs_extents.h:235:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, struct cred *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371090.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 22 errors, 76 warnings, 21 checks, 2086 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371090.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
