CHECK:CAMELCASE: Avoid CamelCase: <Dprintk>
#261: FILE: arch/x86/kernel/setup.c:162:
+		Dprintk(KERN_INFO "Setting node for non-present cpu %d\n", cpu);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#275: FILE: arch/x86/kernel/setup.c:176:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpu_to_node', this function's name, in a string
#276: FILE: arch/x86/kernel/setup.c:177:
+			"cpu_to_node(%d): usage too early!\n", cpu);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#290: FILE: arch/x86/kernel/setup.c:191:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'early_cpu_to_node', this function's name, in a string
#291: FILE: arch/x86/kernel/setup.c:192:
+			"early_cpu_to_node(%d): no per_cpu area!\n", cpu);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#520: FILE: arch/x86/mm/numa_64.c:637:
+	BUG_ON(cpu_to_apicid == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cpu_to_apicid"
#520: FILE: arch/x86/mm/numa_64.c:637:
+	BUG_ON(cpu_to_apicid == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#543: FILE: include/asm-x86/numa.h:1:
+#ifndef _ASM_X86_NUMA_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#553: FILE: include/asm-x86/numa.h:11:
+static void inline init_cpu_to_node(void)		{ }

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#554: FILE: include/asm-x86/numa.h:12:
+static void inline numa_set_node(int cpu, int node)	{ }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#555: FILE: include/asm-x86/numa.h:13:
+static void inline numa_clear_node(int cpu)		{ }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#556: FILE: include/asm-x86/numa.h:14:
+static void inline numa_add_cpu(int cpu, int node)	{ }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#557: FILE: include/asm-x86/numa.h:15:
+static void inline numa_remove_cpu(int cpu)		{ }

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#560: FILE: include/asm-x86/numa.h:18:
+extern void __init init_cpu_to_node(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#561: FILE: include/asm-x86/numa.h:19:
+extern void __cpuinit numa_set_node(int cpu, int node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#562: FILE: include/asm-x86/numa.h:20:
+extern void __cpuinit numa_add_cpu(int cpu);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_initvalue' - possible side-effects?
#623: FILE: include/asm-x86/percpu.h:155:
+#define	DEFINE_EARLY_PER_CPU(_type, _name, _initvalue)			\
+	DEFINE_PER_CPU(_type, _name) = _initvalue;			\
+	__typeof__(_type) _name##_early_map[NR_CPUS] __initdata =	\
+				{ [0 ... NR_CPUS-1] = _initvalue };	\
+	__typeof__(_type) *_name##_early_ptr = _name##_early_map

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#626: FILE: include/asm-x86/percpu.h:158:
+				{ [0 ... NR_CPUS-1] = _initvalue };	\
 				                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#639: FILE: include/asm-x86/percpu.h:171:
+#define^Iearly_per_cpu(_name, _cpu) ^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#639: FILE: include/asm-x86/percpu.h:171:
+#define	early_per_cpu(_name, _cpu) 				\
+	(early_per_cpu_ptr(_name) ?				\
+		early_per_cpu_ptr(_name)[_cpu] :		\
+		per_cpu(_name, _cpu))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_cpu' - possible side-effects?
#639: FILE: include/asm-x86/percpu.h:171:
+#define	early_per_cpu(_name, _cpu) 				\
+	(early_per_cpu_ptr(_name) ?				\
+		early_per_cpu_ptr(_name)[_cpu] :		\
+		per_cpu(_name, _cpu))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#728: FILE: include/asm-x86/topology.h:48:
+extern int cpu_to_node(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#729: FILE: include/asm-x86/topology.h:49:
+extern int early_cpu_to_node(int cpu);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#832: FILE: include/asm-x86/topology.h:162:
+#define node_to_cpumask_ptr(v, node)		\
+		cpumask_t *v = &cpu_online_map

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#834: FILE: include/asm-x86/topology.h:164:
+#define node_to_cpumask_ptr_next(v, node)	\
+			   v = &cpu_online_map

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#840: FILE: include/asm-x86/topology.h:170:
+}
+static inline int node_to_first_cpu(int node)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000295066.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 7 warnings, 13 checks, 678 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000295066.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
