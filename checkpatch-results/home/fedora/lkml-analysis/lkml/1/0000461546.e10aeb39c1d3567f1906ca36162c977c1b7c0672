WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
I have incorporated all the changes you mentioned, except for one. Thank you very much for taking the time to 

WARNING:TYPO_SPELLING: 'retreive' may be misspelled - perhaps 'retrieve'?
#29: 
review the code. I still retreive def_blk_fops as I did before, but I have put this in a separate function for now.
                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#include <stdio.h>

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
#include <stdlib.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
#include <sys/types.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
#include <unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
#include <sys/wait.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
#include <sys/stat.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#include <sys/mman.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
#include <fcntl.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#include <string.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#include <assert.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#include <signal.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#include <errno.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#include <linux/loop.h>

WARNING:REPEATED_WORD: Possible repeated word: 'have'
#171: 
The query process can update its memory periodically by obtaining the changes that have have happened to the loop device.

WARNING:TYPO_SPELLING: 'infact' may be misspelled - perhaps 'in fact'?
#173: 
query process's copy of memory. We can infact have multiple processes to handle queries sharing the same memory.
                                       ^^^^^^

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Kandan Venkataraman kandan.venkataraman@omxgroup.com'
#183: 
Signed-off-by: Kandan Venkataraman kandan.venkataraman@omxgroup.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#201: FILE: drivers/block/loop.c:85:
+static char* cache_name = "loop_pgoff_elem_cache";

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#202: FILE: drivers/block/loop.c:86:
+static struct file_operations loop_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rb_node"
#214: FILE: drivers/block/loop.c:657:
+	while (rb_node != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#215: FILE: drivers/block/loop.c:658:
+	while (rb_node != NULL) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: drivers/block/loop.c:664:
+  *rb_root = RB_ROOT;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#224: FILE: drivers/block/loop.c:667:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#227: FILE: drivers/block/loop.c:670:
+	struct file *filp = lo->lo_backing_file;
 	             ^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Lo_bound>
#229: FILE: drivers/block/loop.c:672:
+	if (lo->lo_state != Lo_bound)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#232: FILE: drivers/block/loop.c:675:
+	if (filp == NULL || !lo->lo_track_pgwrite)
 	    ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!filp"
#232: FILE: drivers/block/loop.c:675:
+	if (filp == NULL || !lo->lo_track_pgwrite)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#242: FILE: drivers/block/loop.c:685:
+	struct file *filp = lo->lo_backing_file;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#250: FILE: drivers/block/loop.c:693:
+	if (filp == NULL || !lo->lo_track_pgwrite)
 	    ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!filp"
#250: FILE: drivers/block/loop.c:693:
+	if (filp == NULL || !lo->lo_track_pgwrite)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#253: FILE: drivers/block/loop.c:696:
+	if (copy_from_user(&array, arg, sizeof (struct loop_pgoff_array)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rb_node"
#256: FILE: drivers/block/loop.c:699:
+	while (i < array.max && rb_node != NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#257: FILE: drivers/block/loop.c:700:
+	while (i < array.max && rb_node != NULL) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#305: FILE: drivers/block/loop.c:1043:
+	if (info->lo_track_pgwrite)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#307: FILE: drivers/block/loop.c:1045:
+	else {

CHECK:SPACING: No space is necessary after a cast
#337: FILE: drivers/block/loop.c:1244:
+		err = loop_get_pgwrites(lo, (struct loop_pgoff_array __user *) arg);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#406: FILE: drivers/block/loop.c:1455:
+struct vm_operations_struct loop_file_vm_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#412: FILE: drivers/block/loop.c:1461:
+static int loop_file_mmap(struct file * file, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#412: FILE: drivers/block/loop.c:1461:
+static int loop_file_mmap(struct file * file, struct vm_area_struct * vma)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#417: FILE: drivers/block/loop.c:1466:
+	if (err)
+	return err;

ERROR:CODE_INDENT: code indent should use tabs where possible
#511: FILE: include/linux/loop.h:74:
+ ^Iunsigned long^I^Ioffset;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#511: FILE: include/linux/loop.h:74:
+ ^Iunsigned long^I^Ioffset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: include/linux/loop.h:74:
+ ^Iunsigned long^I^Ioffset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: include/linux/loop.h:124:
+  __u64 max; /* size of array passed by user */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: include/linux/loop.h:125:
+  __u64 num; /* number of entries filled in by driver */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: include/linux/loop.h:126:
+  __u64 *pgoff; /* array of page offsets of pages written to by mmap */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#534: FILE: include/linux/loop.h:129:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000461546.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 31 warnings, 12 checks, 333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000461546.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
