WARNING:TYPO_SPELLING: 'coelesce' may be misspelled - perhaps 'coalesce'?
#41: 
considered, where they coelesce with a page already under capture they
                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'appropriatly' may be misspelled - perhaps 'appropriately'?
#43: 
a zone we then consult the capture list and if there is an appropriatly
                                                           ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'immediatly' may be misspelled - perhaps 'immediately'?
#44: 
sized page available it is taken immediatly and the remainder returned to
                                 ^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <BuddyCapture>
#91: FILE: include/linux/page-flags.h:193:
+PAGEFLAG(BuddyCapture, buddy_capture)	/* A buddy page, but reserved. */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: mm/internal.h:62:
+extern struct page *capture_alloc_or_return(struct zone *, struct zone *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#105: FILE: mm/internal.h:62:
+extern struct page *capture_alloc_or_return(struct zone *, struct zone *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#105: FILE: mm/internal.h:62:
+extern struct page *capture_alloc_or_return(struct zone *, struct zone *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#105: FILE: mm/internal.h:62:
+extern struct page *capture_alloc_or_return(struct zone *, struct zone *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#105: FILE: mm/internal.h:62:
+extern struct page *capture_alloc_or_return(struct zone *, struct zone *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#105: FILE: mm/internal.h:62:
+extern struct page *capture_alloc_or_return(struct zone *, struct zone *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#105: FILE: mm/internal.h:62:
+extern struct page *capture_alloc_or_return(struct zone *, struct zone *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: mm/internal.h:63:
+extern struct page *capture_alloc_or_return(struct zone *, struct zone *,
+					struct list_head *, int, int, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#107: FILE: mm/internal.h:64:
+void capture_one_page(struct list_head *, struct zone *, struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#107: FILE: mm/internal.h:64:
+void capture_one_page(struct list_head *, struct zone *, struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#107: FILE: mm/internal.h:64:
+void capture_one_page(struct list_head *, struct zone *, struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#107: FILE: mm/internal.h:64:
+void capture_one_page(struct list_head *, struct zone *, struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#108: FILE: mm/internal.h:65:
+unsigned long try_to_free_pages_alloc(struct page **, struct zonelist *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zonelist *' should also have an identifier name
#108: FILE: mm/internal.h:65:
+unsigned long try_to_free_pages_alloc(struct page **, struct zonelist *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'nodemask_t *' should also have an identifier name
#108: FILE: mm/internal.h:65:
+unsigned long try_to_free_pages_alloc(struct page **, struct zonelist *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#108: FILE: mm/internal.h:65:
+unsigned long try_to_free_pages_alloc(struct page **, struct zonelist *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#108: FILE: mm/internal.h:65:
+unsigned long try_to_free_pages_alloc(struct page **, struct zonelist *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#108: FILE: mm/internal.h:65:
+unsigned long try_to_free_pages_alloc(struct page **, struct zonelist *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#109: FILE: mm/internal.h:66:
+unsigned long try_to_free_pages_alloc(struct page **, struct zonelist *,
+					nodemask_t *, int, gfp_t, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: mm/page_alloc.c:414:
+static inline void __capture_one_page(struct list_head *capture_list,
+		struct page *page, struct zone *zone, unsigned int order)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#134: FILE: mm/page_alloc.c:427:
+	while (order < MAX_ORDER-1) {
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageBuddyCapture>
#146: FILE: mm/page_alloc.c:439:
+			__ClearPageBuddyCapture(buddy);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: mm/page_alloc.c:443:
+			__mod_zone_page_state(zone,
+					NR_FREE_PAGES, -(1UL << order));

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageBuddyCapture>
#159: FILE: mm/page_alloc.c:452:
+	__SetPageBuddyCapture(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: mm/page_alloc.c:483:
+			__mod_zone_page_state(zone,
+					NR_FREE_PAGES, -(1UL << order));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: mm/page_alloc.c:589:
+void capture_one_page(struct list_head *free_list,
+			struct zone *zone, struct page *page, int order)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: mm/page_alloc.c:675:
+void __carve_off(struct page *page, unsigned long actual_order,
+					unsigned long desired_order)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[actual_order]
#210: FILE: mm/page_alloc.c:679:
+	struct free_area *area = &(zone->free_area[actual_order]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: mm/page_alloc.c:682:
+	__mod_zone_page_state(zone, NR_FREE_PAGES,
+				(1UL << actual_order) - (1UL << desired_order));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: mm/page_alloc.c:1665:
+	did_some_progress = try_to_free_pages_alloc(&page, zonelist, nodemask,
+						order, gfp_mask, alloc_flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: mm/page_alloc.c:4652:
+struct page *capture_alloc_or_return(struct zone *zone,
+		struct zone *preferred_zone, struct list_head *capture_list,

CHECK:BRACES: braces {} should be used on all arms of this statement
#271: FILE: mm/page_alloc.c:4674:
+		if (!capture_page && pg_order >= order) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#274: FILE: mm/page_alloc.c:4677:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: mm/vmscan.c:86:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: mm/vmscan.c:466:
+static unsigned long shrink_page_list(struct list_head *free_list,
+					struct list_head *page_list,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: mm/vmscan.c:622:
+				capture_one_page(free_list,
+						page_zone(page), page, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: mm/vmscan.c:833:
+static unsigned long shrink_inactive_list(struct list_head *free_list,
+	unsigned long max_scan, struct zone *zone, struct scan_control *sc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: mm/vmscan.c:868:
+		nr_freed = shrink_page_list(free_list, &page_list,
+							sc, PAGEOUT_IO_ASYNC);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sc->capture'
#412: FILE: mm/vmscan.c:1205:
+	if (sc->order > PAGE_ALLOC_COSTLY_ORDER &&
+	    sc->capture && !*(sc->capture) && (sc->nodemask == NULL ||
+	    node_isset(zone_to_nid(zone), *sc->nodemask))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sc->capture
#413: FILE: mm/vmscan.c:1206:
+	    sc->capture && !*(sc->capture) && (sc->nodemask == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sc->nodemask"
#413: FILE: mm/vmscan.c:1206:
+	    sc->capture && !*(sc->capture) && (sc->nodemask == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: mm/vmscan.c:1265:
+			capture_page = capture_alloc_or_return(zone,
+				preferred_zone, capture_list, sc->order,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sc->capture
#450: FILE: mm/vmscan.c:1273:
+		*(sc->capture) = capture_page;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#483: FILE: mm/vmscan.c:1369:
+	BUG_ON(!preferred_zone);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: mm/vmscan.c:1456:
+unsigned long try_to_free_pages_alloc(struct page **capture_pagep,
+		struct zonelist *zonelist, nodemask_t *nodemask,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: mm/vmscan.c:1477:
+unsigned long try_to_free_pages(struct zonelist *zonelist,
+						int order, gfp_t gfp_mask)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000260333.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 20 warnings, 29 checks, 498 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000260333.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
