WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: arch/cris/arch-v10/drivers/eeprom.c:442:
+  return eeprom_read(NULL, buf, count, &addr);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#64: FILE: arch/cris/arch-v10/drivers/eeprom.c:449:
+static ssize_t eeprom_read(struct file * file, char * buf, size_t count,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#64: FILE: arch/cris/arch-v10/drivers/eeprom.c:449:
+static ssize_t eeprom_read(struct file * file, char * buf, size_t count,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: arch/cris/arch-v10/drivers/eeprom.c:453:
+  loff_t p = *ppos;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#79: FILE: arch/cris/arch-v10/drivers/eeprom.c:500:
   if(read > 0)
+    *ppos += read;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: arch/cris/arch-v10/drivers/eeprom.c:501:
+    *ppos += read;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: arch/cris/arch-v10/drivers/eeprom.c:512:
+  return eeprom_write(NULL, buf, count, &addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: arch/cris/arch-v10/drivers/eeprom.c:538:
+    p = *ppos;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#117: FILE: arch/cris/arch-v10/drivers/eeprom.c:540:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: arch/cris/arch-v10/drivers/eeprom.c:666:
+  if (written == 0 && *ppos >= eeprom.size){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#126: FILE: arch/cris/arch-v10/drivers/eeprom.c:666:
+  if (written == 0 && *ppos >= eeprom.size){
     return -ENOSPC;

ERROR:SPACING: space required before the open brace '{'
#126: FILE: arch/cris/arch-v10/drivers/eeprom.c:666:
+  if (written == 0 && *ppos >= eeprom.size){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#126: FILE: arch/cris/arch-v10/drivers/eeprom.c:666:
+  if (written == 0 && *ppos >= eeprom.size){
     return -ENOSPC;
   }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: arch/cris/arch-v10/drivers/eeprom.c:669:
+  *ppos += written;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045376.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 10 warnings, 1 checks, 81 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045376.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
