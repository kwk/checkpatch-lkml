WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
2. Ensure the calling of initcalls in the same layer would be completed before 

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#84: 
The downside of this patch is every driver must explictly indicate its 
                                                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#100: 
--- a/arch/x86_64/kernel/vmlinux.lds.S

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:NEW_TYPEDEFS: do not add new typedefs
#126: FILE: include/linux/init.h:79:
+typedef struct {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#130: FILE: include/linux/init.h:83:
+		initcall_t* addr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".initcall.depend") over __attribute__((__section__(".initcall.depend")))
#143: FILE: include/linux/init.h:123:
+	__attribute_used__ __attribute__((__section__(".initcall.depend"))) = { \

WARNING:MISPLACED_INIT: __initdata should be placed after original_count
#159: FILE: init/main.c:648:
+static int __initdata original_count;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#162: FILE: init/main.c:650:
+static int __init initcall_run(initcall_t* call)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#186: FILE: init/main.c:658:
+		printk("Calling initcall 0x%p", *call);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: init/main.c:660:
+		print_fn_descriptor_symbol(": %s()",
+				(unsigned long) *call);

CHECK:SPACING: No space is necessary after a cast
#188: FILE: init/main.c:660:
+				(unsigned long) *call);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#189: FILE: init/main.c:661:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#207: FILE: init/main.c:671:
+		printk("initcall 0x%p", *call);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: init/main.c:673:
+		print_fn_descriptor_symbol(": %s()",
+				(unsigned long) *call);

CHECK:SPACING: No space is necessary after a cast
#209: FILE: init/main.c:673:
+				(unsigned long) *call);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#210: FILE: init/main.c:674:
+		printk(" returned %d.\n", result);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#213: FILE: init/main.c:676:
+		printk("initcall 0x%p ran for %Ld msecs: ",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#213: FILE: init/main.c:676:
+		printk("initcall 0x%p ran for %Ld msecs: ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: init/main.c:677:
+		printk("initcall 0x%p ran for %Ld msecs: ",
 				*call, (unsigned long long)delta.tv64 >> 20);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: init/main.c:679:
+		print_fn_descriptor_symbol("%s()\n",
 				(unsigned long) *call);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: init/main.c:688:
+^I^Ipreempt_count() = original_count; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#233: FILE: init/main.c:695:
+		printk(KERN_WARNING "initcall at 0x%p", *call);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: init/main.c:697:
+		print_fn_descriptor_symbol(": %s()",
+				(unsigned long) *call);

CHECK:SPACING: No space is necessary after a cast
#235: FILE: init/main.c:697:
+				(unsigned long) *call);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#236: FILE: init/main.c:698:
+		printk(": returned with %s\n", msg);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#247: FILE: init/main.c:709:
+extern initcall_depend_t __initcall_depend_start[], __initcall_depend_end[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo* __initdata bar" should be "foo * __initdata bar"
#249: FILE: init/main.c:711:
+static initcall_t* __initdata initcall_pt;

ERROR:POINTER_LOCATION: "foo* __initdata bar" should be "foo * __initdata bar"
#250: FILE: init/main.c:712:
+static initcall_depend_t* __initdata initcall_depend_pt;

WARNING:MISPLACED_INIT: __initdata should be placed after initcall_pt_mutex
#251: FILE: init/main.c:713:
+static struct mutex __initdata initcall_pt_mutex;

WARNING:MISPLACED_INIT: __initdata should be placed after initcall_depend_pt_mutex
#252: FILE: init/main.c:714:
+static struct mutex __initdata initcall_depend_pt_mutex;

ERROR:POINTER_LOCATION: "foo* __initdata bar" should be "foo * __initdata bar"
#256: FILE: init/main.c:718:
+static initcall_t* __initdata thread_pt[NR_INIT_THREADS];

WARNING:MISPLACED_INIT: __initdata should be placed after thread_mutex[NR_INIT_THREADS]
#257: FILE: init/main.c:719:
+static struct mutex __initdata thread_mutex[NR_INIT_THREADS];

WARNING:MISPLACED_INIT: __initdata should be placed after threading_count
#258: FILE: init/main.c:720:
+static atomic_t __initdata threading_count = ATOMIC_INIT(NR_INIT_THREADS);

WARNING:MISPLACED_INIT: __initdata should be placed after initcall_completion
#259: FILE: init/main.c:721:
+static struct completion __initdata initcall_completion;

WARNING:MISPLACED_INIT: __initdata should be placed after initcall_executing_count
#261: FILE: init/main.c:723:
+static atomic_t __initdata initcall_executing_count = ATOMIC_INIT(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: init/main.c:725:
+static void __init wait_for_depend(initcall_depend_t* call_depend, int $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#263: FILE: init/main.c:725:
+static void __init wait_for_depend(initcall_depend_t* call_depend, int 

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#264: FILE: init/main.c:725:
thread_no)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#269: FILE: init/main.c:730:
+		for (i = 0; i < NR_INIT_THREADS; i++)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#271: FILE: init/main.c:732:
+			if (i == thread_no) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#277: FILE: init/main.c:738:
+				yield();

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#291: FILE: init/main.c:752:
+	initcall_depend_t* call_depend;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: init/main.c:762:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#315: FILE: init/main.c:770:
+		if (*thread_pt[thread_no] == wait_for_initcall) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: init/main.c:772:
+^I^I^I^Iprintk("Wait for %d initcalls to complete.\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#317: FILE: init/main.c:772:
+				printk("Wait for %d initcalls to complete.\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: init/main.c:773:
+				printk("Wait for %d initcalls to complete.\n", 
+						atomic_read(&initcall_executing_count) - 1);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#321: FILE: init/main.c:776:
+			while (atomic_read(&initcall_executing_count) != 1) {
+				yield();
+			}

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#322: FILE: init/main.c:777:
+				yield();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: init/main.c:787:
+^I^Iif ((initcall_depend_pt < __initcall_depend_end) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'initcall_depend_pt < __initcall_depend_end'
#335: FILE: init/main.c:787:
+		if ((initcall_depend_pt < __initcall_depend_end) && 
+				(*thread_pt[thread_no] == *initcall_depend_pt->call)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: init/main.c:788:
+		if ((initcall_depend_pt < __initcall_depend_end) && 
+				(*thread_pt[thread_no] == *initcall_depend_pt->call)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: init/main.c:793:
+^I^I^I^I^I(*initcall_depend_pt->call == *call_depend->call)) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: init/main.c:793:
+			while ((initcall_depend_pt < __initcall_depend_end) &&
+					(*initcall_depend_pt->call == *call_depend->call)) 

WARNING:BRACES: braces {} are not necessary for single statement blocks
#360: FILE: init/main.c:807:
+	if (initcall_debug) {
+		printk("Initcall thread %ld is completed!\n", thread_no);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#361: FILE: init/main.c:808:
+		printk("Initcall thread %ld is completed!\n", thread_no);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#364: FILE: init/main.c:811:
+	if (atomic_dec_and_test(&threading_count)) {
+		complete(&initcall_completion);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: init/main.c:818:
+ * Map the initcall_depend_t.prev.addr from prev.func. $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#376: FILE: init/main.c:823:
+	initcall_t* pt;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#377: FILE: init/main.c:824:
+	initcall_depend_t* dpt;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: init/main.c:826:
+^Ifor (dpt = __initcall_depend_start; $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#379: FILE: init/main.c:826:
+	for (dpt = __initcall_depend_start; 
+			dpt < __initcall_depend_end; ++dpt) 
+	{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: init/main.c:827:
+^I^I^Idpt < __initcall_depend_end; ++dpt) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: init/main.c:829:
+^I^Ifor (pt = __initcall_start; $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#384: FILE: init/main.c:831:
+			if (*dpt->prev.func == *pt ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: init/main.c:836:
+^I^Iif (pt >= __initcall_end) $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#397: FILE: init/main.c:844:
+	struct task_struct* initcall_task[NR_INIT_THREADS];

WARNING:BRACES: braces {} are not necessary for single statement blocks
#410: FILE: init/main.c:857:
+	for (i = 0; i < NR_INIT_THREADS; ++i) {
+		mutex_init(&thread_mutex[i]);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: init/main.c:863:
+		initcall_task[i] = kthread_run(initcall_process, (long *)i,
+				"initcallthread-%d", i);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#417: FILE: init/main.c:864:
+		if (IS_ERR(initcall_task[i])) {
+			panic("Fail to set up initcall process thread...\n");
 		}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425936.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 27 errors, 29 warnings, 14 checks, 325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425936.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
