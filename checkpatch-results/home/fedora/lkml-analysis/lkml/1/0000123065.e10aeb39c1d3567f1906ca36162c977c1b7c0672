WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#77: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: include/asm-generic/dma-mapping-linear.h:1:
+#ifndef __ASM_GENERIC_DMA_MAPPING_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#89: FILE: include/asm-generic/dma-mapping-linear.h:8:
+#include <asm/cacheflush.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#90: FILE: include/asm-generic/dma-mapping-linear.h:9:
+#include <asm/io.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: include/asm-generic/dma-mapping-linear.h:45:
+void *dma_alloc_coherent(struct device *dev, size_t size,
+				dma_addr_t *dma_handle, gfp_t flag)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#136: FILE: include/asm-generic/dma-mapping-linear.h:55:
+	if (page == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: include/asm-generic/dma-mapping-linear.h:78:
+void dma_free_coherent(struct device *dev, size_t size,
+			      void *vaddr, dma_addr_t dma_handle)

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: include/asm-generic/dma-mapping-linear.h:113:
+	dma_addr_t dma_addr = virt_to_bus(ptr);
+	BUG_ON(!valid_dma_direction(direction));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#194: FILE: include/asm-generic/dma-mapping-linear.h:113:
+	BUG_ON(!valid_dma_direction(direction));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#256: FILE: include/asm-generic/dma-mapping-linear.h:175:
+	BUG_ON(!valid_dma_direction(direction));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#262: FILE: include/asm-generic/dma-mapping-linear.h:181:
+		BUG_ON(!sg_page(sg));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#828: FILE: arch/avr32/include/asm/dma-mapping.h:1:
+#ifndef __ASM_AVR32_DMA_MAPPING_H

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#834: FILE: arch/avr32/include/asm/dma-mapping.h:7:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#835: FILE: arch/avr32/include/asm/dma-mapping.h:8:
+#include <asm/cacheflush.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#836: FILE: arch/avr32/include/asm/dma-mapping.h:9:
+#include <asm/io.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#865: FILE: arch/avr32/include/asm/dma-mapping.h:38:
+extern void *dma_alloc_writecombine(struct device *dev, size_t size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#881: FILE: arch/avr32/include/asm/dma-mapping.h:54:
+extern void dma_free_writecombine(struct device *dev, size_t size,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#991: FILE: arch/blackfin/include/asm/dma-mapping.h:1:
+#ifndef _BLACKFIN_DMA_MAPPING_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1006: FILE: arch/blackfin/include/asm/dma-mapping.h:16:
+extern void dma_alloc_init(unsigned long start, unsigned long end);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1187: FILE: arch/cris/include/asm/dma-mapping.h:1:
+#ifndef _ASM_CRIS_DMA_MAPPING_H

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cache.h> instead of <asm/cache.h>
#1193: FILE: arch/cris/include/asm/dma-mapping.h:7:
+#include <asm/cache.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1194: FILE: arch/cris/include/asm/dma-mapping.h:8:
+#include <asm/io.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1451: FILE: arch/mn10300/include/asm/dma-mapping.h:1:
+/* DMA mapping routines for the MN10300 arch

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cache.h> instead of <asm/cache.h>
#1465: FILE: arch/mn10300/include/asm/dma-mapping.h:15:
+#include <asm/cache.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1466: FILE: arch/mn10300/include/asm/dma-mapping.h:16:
+#include <asm/io.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1708: FILE: arch/sh/include/asm/dma-mapping.h:1:
+#ifndef __ASM_SH_DMA_MAPPING_H

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1714: FILE: arch/sh/include/asm/dma-mapping.h:7:
+#include <asm/cacheflush.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1715: FILE: arch/sh/include/asm/dma-mapping.h:8:
+#include <asm/io.h>

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_DMA_DECLARE_COHERENT_MEMORY' is wrong - use Kconfig variables or standard guards instead
#1740: FILE: arch/sh/include/asm/dma-mapping.h:33:
+#define ARCH_HAS_DMA_DECLARE_COHERENT_MEMORY

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1932: FILE: arch/xtensa/include/asm/dma-mapping.h:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cache.h> instead of <asm/cache.h>
#1945: FILE: arch/xtensa/include/asm/dma-mapping.h:14:
+#include <asm/cache.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1946: FILE: arch/xtensa/include/asm/dma-mapping.h:15:
+#include <asm/io.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1953: FILE: arch/xtensa/include/asm/dma-mapping.h:22:
+extern void *consistent_alloc(int, size_t, dma_addr_t, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1954: FILE: arch/xtensa/include/asm/dma-mapping.h:23:
+extern void consistent_free(void*, size_t, dma_addr_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1954: FILE: arch/xtensa/include/asm/dma-mapping.h:23:
+extern void consistent_free(void*, size_t, dma_addr_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1954: FILE: arch/xtensa/include/asm/dma-mapping.h:23:
+extern void consistent_free(void*, size_t, dma_addr_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dma_addr_t' should also have an identifier name
#1954: FILE: arch/xtensa/include/asm/dma-mapping.h:23:
+extern void consistent_free(void*, size_t, dma_addr_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1955: FILE: arch/xtensa/include/asm/dma-mapping.h:24:
+extern void consistent_sync(void*, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1955: FILE: arch/xtensa/include/asm/dma-mapping.h:24:
+extern void consistent_sync(void*, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1955: FILE: arch/xtensa/include/asm/dma-mapping.h:24:
+extern void consistent_sync(void*, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1955: FILE: arch/xtensa/include/asm/dma-mapping.h:24:
+extern void consistent_sync(void*, size_t, int);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123065.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 20 warnings, 20 checks, 1855 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123065.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
