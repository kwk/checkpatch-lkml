WARNING:TYPO_SPELLING: 'convinience' may be misspelled - perhaps 'convenience'?
#36: 
so include trace.h in kernel.h for convinience.
                                   ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: include/linux/trace.h:1:
+#ifndef _LINUX_TRACE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/linux/trace.h:37:
+extern void tracing_start(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/trace.h:38:
+extern void tracing_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: include/linux/trace.h:39:
+extern void ftrace_off_permanent(void);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#90: FILE: include/linux/trace.h:44:
+static inline void __attribute__ ((format (printf, 1, 2)))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#94: FILE: include/linux/trace.h:48:
+}
+#define __trace_printk_check_format(fmt, args...)			\

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#117: FILE: include/linux/trace.h:71:
+#define trace_printk(fmt, args...)					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#117: FILE: include/linux/trace.h:71:
+#define trace_printk(fmt, args...)					\
+do {									\
+	__trace_printk_check_format(fmt, ##args);			\
+	if (__builtin_constant_p(fmt)) {				\
+		static const char *trace_printk_fmt			\
+		  __attribute__((section("__trace_printk_fmt"))) =	\
+			__builtin_constant_p(fmt) ? fmt : NULL;		\
+									\
+		__trace_bprintk(_THIS_IP_, trace_printk_fmt, ##args);	\
+	} else								\
+		__trace_printk(_THIS_IP_, fmt, ##args);		\
+} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__trace_printk_fmt") over __attribute__((section("__trace_printk_fmt")))
#122: FILE: include/linux/trace.h:76:
+		  __attribute__((section("__trace_printk_fmt"))) =	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#132: FILE: include/linux/trace.h:86:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#136: FILE: include/linux/trace.h:90:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/trace.h:92:
+extern void trace_dump_stack(void);

WARNING:TRACE_PRINTK: Do not use ftrace_vprintk() in production code (this can be ignored if built only with a debug config option)
#145: FILE: include/linux/trace.h:99:
+#define ftrace_vprintk(fmt, vargs)					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#145: FILE: include/linux/trace.h:99:
+#define ftrace_vprintk(fmt, vargs)					\
+do {									\
+	if (__builtin_constant_p(fmt)) {				\
+		static const char *trace_printk_fmt			\
+		  __attribute__((section("__trace_printk_fmt"))) =	\
+			__builtin_constant_p(fmt) ? fmt : NULL;		\
+									\
+		__ftrace_vbprintk(_THIS_IP_, trace_printk_fmt, vargs);	\
+	} else								\
+		__ftrace_vprintk(_THIS_IP_, fmt, vargs);		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vargs' - possible side-effects?
#145: FILE: include/linux/trace.h:99:
+#define ftrace_vprintk(fmt, vargs)					\
+do {									\
+	if (__builtin_constant_p(fmt)) {				\
+		static const char *trace_printk_fmt			\
+		  __attribute__((section("__trace_printk_fmt"))) =	\
+			__builtin_constant_p(fmt) ? fmt : NULL;		\
+									\
+		__ftrace_vbprintk(_THIS_IP_, trace_printk_fmt, vargs);	\
+	} else								\
+		__ftrace_vprintk(_THIS_IP_, fmt, vargs);		\
+} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__trace_printk_fmt") over __attribute__((section("__trace_printk_fmt")))
#149: FILE: include/linux/trace.h:103:
+		  __attribute__((section("__trace_printk_fmt"))) =	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/linux/trace.h:117:
+extern void ftrace_dump(void);

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#168: FILE: include/linux/trace.h:122:
+trace_printk(const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#168: FILE: include/linux/trace.h:122:
+trace_printk(const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#175: FILE: include/linux/trace.h:129:
+trace_printk(const char *fmt, ...)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#179: FILE: include/linux/trace.h:133:
+}
+static inline int

WARNING:TRACE_PRINTK: Do not use ftrace_vprintk() in production code (this can be ignored if built only with a debug config option)
#180: FILE: include/linux/trace.h:134:
+ftrace_vprintk(const char *fmt, va_list ap)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#184: FILE: include/linux/trace.h:138:
+}
+static inline void ftrace_dump(void) { }

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000007530.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 11 checks, 290 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000007530.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
