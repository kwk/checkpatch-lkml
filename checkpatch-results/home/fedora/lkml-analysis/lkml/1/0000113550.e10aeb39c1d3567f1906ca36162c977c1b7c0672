WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#51: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: arch/score/include/asm/uaccess.h:1:
+#ifndef _ASM_SCORE_UACCESS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: arch/score/include/asm/uaccess.h:6:
+ * This file is subject to the terms and conditions of the GNU General $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#62: FILE: arch/score/include/asm/uaccess.h:6:
Public

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: arch/score/include/asm/uaccess.h:11:
+extern int fixup_exception(struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#71: FILE: arch/score/include/asm/uaccess.h:15:
+#define __range_ok(addr, size)                                 \
+       ((((unsigned long)(addr) >= 0x80000000)                 \
+       || ((unsigned long)(size) > 0x80000000)                 \
+       || (((unsigned long)(addr) + (unsigned long)(size)) > 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#71: FILE: arch/score/include/asm/uaccess.h:15:
+#define __range_ok(addr, size)                                 \
+       ((((unsigned long)(addr) >= 0x80000000)                 \
+       || ((unsigned long)(size) > 0x80000000)                 \
+       || (((unsigned long)(addr) + (unsigned long)(size)) > 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#71: FILE: arch/score/include/asm/uaccess.h:15:
+#define __range_ok(addr, size)                                 \
+       ((((unsigned long)(addr) >= 0x80000000)                 \
+       || ((unsigned long)(size) > 0x80000000)                 \
+       || (((unsigned long)(addr) + (unsigned long)(size)) > 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: arch/score/include/asm/uaccess.h:16:
+       ((((unsigned long)(addr) >= 0x80000000)                 \$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#73: FILE: arch/score/include/asm/uaccess.h:17:
+       ((((unsigned long)(addr) >= 0x80000000)                 \
+       || ((unsigned long)(size) > 0x80000000)                 \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: arch/score/include/asm/uaccess.h:17:
+       || ((unsigned long)(size) > 0x80000000)                 \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: arch/score/include/asm/uaccess.h:18:
+       || (((unsigned long)(addr) + (unsigned long)(size)) > $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#74: FILE: arch/score/include/asm/uaccess.h:18:
+       || ((unsigned long)(size) > 0x80000000)                 \
+       || (((unsigned long)(addr) + (unsigned long)(size)) > 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: arch/score/include/asm/uaccess.h:18:
+       || (((unsigned long)(addr) + (unsigned long)(size)) > $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: arch/score/include/asm/uaccess.h:21:
+       (__range_ok((addr), (size)) == 0)$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#92: FILE: arch/score/include/asm/unaligned.h:1:
+#ifndef _ASM_SCORE_UNALIGNED_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#110: FILE: arch/score/include/asm/unistd.h:1:
+#ifndef _ASM_SCORE_UNISTD_H

ERROR:DEFINE_ARCH_HAS: #define of '__ARCH_HAVE_MMU' is wrong - use Kconfig variables or standard guards instead
#113: FILE: arch/score/include/asm/unistd.h:4:
+#define __ARCH_HAVE_MMU

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#128: FILE: arch/score/include/asm/user.h:1:
+#ifndef _ASM_SCORE_USER_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113550.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 9 warnings, 5 checks, 56 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113550.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
