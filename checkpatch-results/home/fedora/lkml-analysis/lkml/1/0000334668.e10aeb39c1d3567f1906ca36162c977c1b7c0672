WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/linux/latencytop.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#72: FILE: include/linux/latencytop.h:21:
+	int	maxtime;         /* ignore latencies above this time as
+				    "user requested" to deal with select() */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#72: FILE: include/linux/latencytop.h:21:
+				    "user requested" to deal with select() */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#76: FILE: include/linux/latencytop.h:25:
+^Ichar ^I*reason;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#83: FILE: include/linux/latencytop.h:32:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: include/linux/latencytop.h:36:
+struct latency_entry *set_latency_reason(char *reason,
+			struct latency_entry *entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: include/linux/latencytop.h:38:
+struct latency_entry *set_latency_reason_user(char *reason,
+			struct latency_entry *entry, unsigned int max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: include/linux/latencytop.h:40:
+struct latency_entry *set_latency_reason_param(char *reason,
+			const char *param, struct latency_entry *entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: include/linux/latencytop.h:48:
+static inline struct latency_entry *set_latency_reason(char *reason,
+			struct latency_entry *entry) { return NULL; }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: include/linux/latencytop.h:50:
+static inline struct latency_entry *set_latency_reason_user(char *reason,
+			struct latency_entry *entry, unsigned int max)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: include/linux/latencytop.h:53:
+static inline struct latency_entry *set_latency_reason_param(char *reason,
+			const char *param, struct latency_entry *entry)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: include/linux/latencytop.h:57:
+static inline void account_scheduler_latency(struct task_struct *task,
+		int usecs, int inter) {};

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#155: FILE: kernel/latencytop.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: kernel/latencytop.c:30:
+struct latency_entry *set_latency_reason(char *reason,
+				struct latency_entry *entry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: kernel/latencytop.c:33:
+	unsigned long flags;
+	spin_lock_irqsave(&latency_lock, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: kernel/latencytop.c:49:
+struct latency_entry *set_latency_reason_user(char *reason,
+			struct latency_entry *entry, unsigned int max)

WARNING:LINE_SPACING: Missing a blank line after declarations
#206: FILE: kernel/latencytop.c:52:
+	unsigned long flags;
+	spin_lock_irqsave(&latency_lock, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: kernel/latencytop.c:68:
+struct latency_entry *set_latency_reason_param(char *reason,
+			char const *param, struct latency_entry *entry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#225: FILE: kernel/latencytop.c:71:
+	unsigned long flags;
+	spin_lock_irqsave(&latency_lock, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#247: FILE: kernel/latencytop.c:93:
+	unsigned long flags;
+	spin_lock_irqsave(&latency_lock, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#256: FILE: kernel/latencytop.c:102:
+	unsigned long flags;
+	spin_lock_irqsave(&latency_lock, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: kernel/latencytop.c:112:
+	unsigned long flags;
+	spin_lock_irqsave(&latency_lock, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: kernel/latencytop.c:139:
+		if (strcmp(latency_record[i].reason,
+				tsk->latency_reason.reason))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: kernel/latencytop.c:143:
+		if (strcmp(latency_record[i].argument,
+				tsk->latency_reason.argument))

WARNING:TYPO_SPELLING: 'allocted' may be misspelled - perhaps 'allocated'?
#310: FILE: kernel/latencytop.c:156:
+	/* allocted a new one */
 	   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: kernel/latencytop.c:165:
+void __sched account_scheduler_latency(struct task_struct *tsk,
+						int usecs, int inter)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#335: FILE: kernel/latencytop.c:181:
+	/* if we have a maxtime set (as is the case for select and such),
+	   and we're waiting longer than that, assume it's a user requested

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#336: FILE: kernel/latencytop.c:182:
+	   delay and don't log it */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: kernel/latencytop.c:184:
+	if (tsk->latency_reason.maxtime &&
+		usecs > tsk->latency_reason.maxtime)

WARNING:LINE_SPACING: Missing a blank line after declarations
#345: FILE: kernel/latencytop.c:191:
+		unsigned long EIPV = get_wchan(tsk);
+		sprint_symbol(str, EIPV);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: kernel/latencytop.c:205:
+		if (strcmp(tsk->latency_record[i].reason,
+				tsk->latency_reason.reason))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: kernel/latencytop.c:209:
+		if (strcmp(tsk->latency_record[i].argument,
+				tsk->latency_reason.argument))

WARNING:TYPO_SPELLING: 'allocted' may be misspelled - perhaps 'allocated'?
#378: FILE: kernel/latencytop.c:224:
+	/* allocted a new one */
 	   ^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#387: FILE: kernel/latencytop.c:233:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#389: FILE: kernel/latencytop.c:235:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#394: FILE: kernel/latencytop.c:240:
+	int i;
+	seq_puts(m, "Latency Top version : v0.1\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: kernel/latencytop.c:245:
+			seq_printf(m, "%i %li %li %s (%s)\n",
+				latency_record[i].count,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#405: FILE: kernel/latencytop.c:251:
+
+	}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#416: FILE: kernel/latencytop.c:262:
+static int lstats_open(struct inode *inode, struct file *filp)
                                                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#418: FILE: kernel/latencytop.c:264:
+	return single_open(filp, lstats_show, NULL);
 	                   ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#421: FILE: kernel/latencytop.c:267:
+static struct file_operations lstats_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#441: FILE: kernel/latencytop.c:287:
+__initcall(init_lstats_procfs);

WARNING:LINE_SPACING: Missing a blank line after declarations
#514: FILE: fs/proc/base.c:318:
+	struct task_struct *task = m->private;
+	seq_puts(m, "Latency Top version : v0.1\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: fs/proc/base.c:323:
+			seq_printf(m, "%i %li %li %s (%s)\n",
+				task->latency_record[i].count,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#525: FILE: fs/proc/base.c:329:
+
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#534: FILE: fs/proc/base.c:338:
+	struct task_struct *task = get_proc_task(inode);
+	ret = single_open(file, lstats_show_proc, NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#547: FILE: fs/proc/base.c:351:
+	struct task_struct *task;
+	m = file->private_data;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#570: FILE: fs/proc/base.c:1077:
 
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#579: FILE: fs/proc/base.c:2289:
+	REG("latency",  S_IRUGO, lstats),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#589: FILE: fs/proc/base.c:2617:
+	REG("latency",  S_IRUGO, lstats),

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#602: FILE: lib/Kconfig.debug:520:
+config LATENCYTOP
+	bool "Latency measuring infrastructure"
+	select FRAME_POINTER if !X86 && !MIPS
+	select KALLSYMS
+	select KALLSYMS_ALL
+	depends on SCHEDSTATS
+	help
+	  Enable this option if you want to use the LatencyTOP tool
+	  to find out which userspace is blocking on what kernel operations.
+
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000334668.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 27 warnings, 24 checks, 520 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000334668.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
