WARNING:TYPO_SPELLING: 'unecessary' may be misspelled - perhaps 'unnecessary'?
#46: 
experience unecessary overhead/latencies regardless as they
           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#121: FILE: kernel/sched.c:5375:
+	if (p->sched_class->set_cpus_allowed)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#123: FILE: kernel/sched.c:5377:
+	else {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#139: FILE: kernel/sched_rt.c:53:
 }
+#ifdef CONFIG_SMP

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->rt.rt_nr_running < 2'
#153: FILE: kernel/sched_rt.c:67:
+	if ((rq->rt.rt_nr_running < 2) || !rq->rt.rt_nr_migratory)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: kernel/sched_rt.c:323:
+^I}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: kernel/sched_rt.c:324:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: kernel/sched_rt.c:337:
+ ^I/*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: kernel/sched_rt.c:337:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: kernel/sched_rt.c:337:
+ ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: kernel/sched_rt.c:338:
+ ^I * We can optimize if the hamming weight of the cpus_allowed mask$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: kernel/sched_rt.c:338:
+ ^I * We can optimize if the hamming weight of the cpus_allowed mask$

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: kernel/sched_rt.c:339:
+ ^I * is 1 because the task has nowhere to go but one CPU.  So don't$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: kernel/sched_rt.c:339:
+ ^I * is 1 because the task has nowhere to go but one CPU.  So don't$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: kernel/sched_rt.c:340:
+ ^I * waste the time trying to find the lowest RQ in this case.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#217: FILE: kernel/sched_rt.c:340:
+ ^I * waste the time trying to find the lowest RQ in this case.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: kernel/sched_rt.c:341:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: kernel/sched_rt.c:341:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: kernel/sched_rt.c:342:
+ ^Iif (task->nr_cpus_allowed == 1) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#219: FILE: kernel/sched_rt.c:342:
+ ^Iif (task->nr_cpus_allowed == 1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: kernel/sched_rt.c:342:
+ ^Iif (task->nr_cpus_allowed == 1) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: kernel/sched_rt.c:343:
+ ^I^I/* If the task is already on the RQ, we are done */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#220: FILE: kernel/sched_rt.c:343:
+ ^I^I/* If the task is already on the RQ, we are done */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: kernel/sched_rt.c:343:
+ ^I^I/* If the task is already on the RQ, we are done */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: kernel/sched_rt.c:344:
+ ^I^Iif (cpu_isset(this_rq->cpu, task->cpus_allowed))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#221: FILE: kernel/sched_rt.c:344:
+ ^I^Iif (cpu_isset(this_rq->cpu, task->cpus_allowed))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: kernel/sched_rt.c:344:
+ ^I^Iif (cpu_isset(this_rq->cpu, task->cpus_allowed))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: kernel/sched_rt.c:345:
+ ^I^I^Ireturn NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#222: FILE: kernel/sched_rt.c:345:
+ ^I^I^Ireturn NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: kernel/sched_rt.c:345:
+ ^I^I^Ireturn NULL;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: kernel/sched_rt.c:346:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: kernel/sched_rt.c:346:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: kernel/sched_rt.c:347:
+ ^I^Icpu = first_cpu(task->cpus_allowed);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: kernel/sched_rt.c:347:
+ ^I^Icpu = first_cpu(task->cpus_allowed);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: kernel/sched_rt.c:347:
+ ^I^Icpu = first_cpu(task->cpus_allowed);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: kernel/sched_rt.c:348:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: kernel/sched_rt.c:348:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: kernel/sched_rt.c:349:
+ ^I^Ilowest_rq = cpu_rq(cpu);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: kernel/sched_rt.c:349:
+ ^I^Ilowest_rq = cpu_rq(cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: kernel/sched_rt.c:349:
+ ^I^Ilowest_rq = cpu_rq(cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: kernel/sched_rt.c:350:
+ ^I^IBUG_ON(this_rq == lowest_rq);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#227: FILE: kernel/sched_rt.c:350:
+ ^I^IBUG_ON(this_rq == lowest_rq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: kernel/sched_rt.c:350:
+ ^I^IBUG_ON(this_rq == lowest_rq);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#227: FILE: kernel/sched_rt.c:350:
+ 		BUG_ON(this_rq == lowest_rq);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: kernel/sched_rt.c:351:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: kernel/sched_rt.c:351:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: kernel/sched_rt.c:352:
+ ^I^I/* Otherwise, we can simply grab the new RQ */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: kernel/sched_rt.c:352:
+ ^I^I/* Otherwise, we can simply grab the new RQ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: kernel/sched_rt.c:352:
+ ^I^I/* Otherwise, we can simply grab the new RQ */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: kernel/sched_rt.c:353:
+ ^I^Iif (lock_migration_target(task, lowest_rq))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: kernel/sched_rt.c:353:
+ ^I^Iif (lock_migration_target(task, lowest_rq))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: kernel/sched_rt.c:353:
+ ^I^Iif (lock_migration_target(task, lowest_rq))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: kernel/sched_rt.c:354:
+ ^I^I^Ireturn lowest_rq;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#231: FILE: kernel/sched_rt.c:354:
+ ^I^I^Ireturn lowest_rq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: kernel/sched_rt.c:354:
+ ^I^I^Ireturn lowest_rq;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: kernel/sched_rt.c:355:
+ ^I^Ielse$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: kernel/sched_rt.c:355:
+ ^I^Ielse$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: kernel/sched_rt.c:355:
+ ^I^Ielse$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: kernel/sched_rt.c:356:
+ ^I^I^Ireturn NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#233: FILE: kernel/sched_rt.c:356:
+ ^I^I^Ireturn NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: kernel/sched_rt.c:356:
+ ^I^I^Ireturn NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: kernel/sched_rt.c:357:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#234: FILE: kernel/sched_rt.c:357:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: kernel/sched_rt.c:357:
+ ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: kernel/sched_rt.c:388:
+ ^I^Iif (!lock_migration_target(task, lowest_rq))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#259: FILE: kernel/sched_rt.c:388:
+ ^I^Iif (!lock_migration_target(task, lowest_rq))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: kernel/sched_rt.c:388:
+ ^I^Iif (!lock_migration_target(task, lowest_rq))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: kernel/sched_rt.c:389:
+ ^I^I^Ireturn NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#260: FILE: kernel/sched_rt.c:389:
+ ^I^I^Ireturn NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: kernel/sched_rt.c:389:
+ ^I^I^Ireturn NULL;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#273: FILE: kernel/sched_rt.c:713:
+	BUG_ON(!rt_task(p));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'weight != p->nr_cpus_allowed'
#279: FILE: kernel/sched_rt.c:719:
+	if (p->se.on_rq && (weight != p->nr_cpus_allowed)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->nr_cpus_allowed <= 1'
#282: FILE: kernel/sched_rt.c:722:
+		if ((p->nr_cpus_allowed <= 1) && (weight > 1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'weight > 1'
#282: FILE: kernel/sched_rt.c:722:
+		if ((p->nr_cpus_allowed <= 1) && (weight > 1))

ERROR:SPACING: space required before the open parenthesis '('
#284: FILE: kernel/sched_rt.c:724:
+		else if((p->nr_cpus_allowed > 1) && (weight <= 1))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000365475.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 26 errors, 42 warnings, 7 checks, 204 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000365475.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
