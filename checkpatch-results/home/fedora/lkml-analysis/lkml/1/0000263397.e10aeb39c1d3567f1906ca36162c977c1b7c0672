WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#66: FILE: drivers/dma/Kconfig:64:
+config DMATEST
+	tristate "DMA Test client"
+	depends on DMA_ENGINE
+	help
+	  Simple DMA test client. Say N unless you're debugging a
+	  DMA Device driver.
+
 endif

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#84: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#89: FILE: drivers/dma/dmatest.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#108: FILE: drivers/dma/dmatest.c:20:
+module_param(test_buf_size, uint, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#112: FILE: drivers/dma/dmatest.c:24:
+module_param_string(channel, test_channel, sizeof(test_channel), S_IRUGO);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#116: FILE: drivers/dma/dmatest.c:28:
+module_param_string(device, test_device, sizeof(test_device), S_IRUGO);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#120: FILE: drivers/dma/dmatest.c:32:
+module_param(threads_per_chan, uint, S_IRUGO);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: drivers/dma/dmatest.c:34:
+MODULE_PARM_DESC(threads_per_chan,
+		"Number of threads to start per channel (default: 1)");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#125: FILE: drivers/dma/dmatest.c:37:
+module_param(max_channels, uint, S_IRUGO);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: drivers/dma/dmatest.c:39:
+MODULE_PARM_DESC(nr_channels,
+		"Maximum number of channels to use (default: all)");

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#197: FILE: drivers/dma/dmatest.c:109:
+			| (~i & PATTERN_COUNT_MASK);;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: drivers/dma/dmatest.c:128:
+static void dmatest_mismatch(u8 actual, u8 pattern, unsigned int index,
+		unsigned int counter, bool is_srcbuf)

WARNING:SPLIT_STRING: quoted string split across lines
#224: FILE: drivers/dma/dmatest.c:136:
+		pr_warning("%s: srcbuf[0x%x] overwritten!"
+				" Expected %02x, got %02x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#227: FILE: drivers/dma/dmatest.c:139:
+	else if ((pattern & PATTERN_COPY)
+			&& (diff & (PATTERN_COPY | PATTERN_OVERWRITE)))

WARNING:SPLIT_STRING: quoted string split across lines
#229: FILE: drivers/dma/dmatest.c:141:
+		pr_warning("%s: dstbuf[0x%x] not copied!"
+				" Expected %02x, got %02x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#233: FILE: drivers/dma/dmatest.c:145:
+		pr_warning("%s: dstbuf[0x%x] was copied!"
+				" Expected %02x, got %02x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#237: FILE: drivers/dma/dmatest.c:149:
+		pr_warning("%s: dstbuf[0x%x] mismatch!"
+				" Expected %02x, got %02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: drivers/dma/dmatest.c:154:
+static unsigned int dmatest_verify(u8 *buf, unsigned int start,
+		unsigned int end, unsigned int counter, u8 pattern,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: drivers/dma/dmatest.c:166:
+				dmatest_mismatch(actual, pattern, i, counter,
+						is_srcbuf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: drivers/dma/dmatest.c:174:
+		pr_warning("%s: %u errors suppressed\n",
+			current->comm, error_count - 32);

WARNING:MEMORY_BARRIER: memory barrier without comment
#304: FILE: drivers/dma/dmatest.c:216:
+	smp_rmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: drivers/dma/dmatest.c:231:
+		cookie = dma_async_memcpy_buf_to_buf(chan,
+				thread->dstbuf + dst_off,

WARNING:SPLIT_STRING: quoted string split across lines
#324: FILE: drivers/dma/dmatest.c:236:
+			pr_warning("%s: #%u: submit error %d with src_off=0x%x "
+					"dst_off=0x%x len=0x%x\n",

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#334: FILE: drivers/dma/dmatest.c:246:
+			msleep(1);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#335: FILE: drivers/dma/dmatest.c:247:
+			status = dma_async_memcpy_complete(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: drivers/dma/dmatest.c:253:
+			pr_warning("%s: #%u: error during copy\n",
+					thread_name, total_tests - 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: drivers/dma/dmatest.c:271:
+		pr_debug("%s: verifying dest buffer...\n",
+				thread->task->comm);

WARNING:SPLIT_STRING: quoted string split across lines
#371: FILE: drivers/dma/dmatest.c:283:
+			pr_warning("%s: #%u: %u errors with "
+				"src_off=0x%x dst_off=0x%x len=0x%x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#377: FILE: drivers/dma/dmatest.c:289:
+			pr_debug("%s: #%u: No errors with "
+				"src_off=0x%x dst_off=0x%x len=0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: drivers/dma/dmatest.c:302:
+	pr_notice("%s: terminating after %u tests, %u failures (status %d)\n",
+			thread_name, total_tests, failed_tests, ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: drivers/dma/dmatest.c:315:
+		pr_debug("dmatest: thread %s exited with status %d\n",
+				thread->task->comm, ret);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dtc)...) over kmalloc(sizeof(struct dmatest_chan)...)
#416: FILE: drivers/dma/dmatest.c:328:
+	dtc = kmalloc(sizeof(struct dmatest_chan), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#418: FILE: drivers/dma/dmatest.c:330:
+	if (!dtc) {
+		pr_warning("dmatest: No memory for %s\n", chan->dev.bus_id);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*thread)...) over kzalloc(sizeof(struct dmatest_thread)...)
#426: FILE: drivers/dma/dmatest.c:338:
+		thread = kzalloc(sizeof(struct dmatest_thread), GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#428: FILE: drivers/dma/dmatest.c:340:
+		if (!thread) {
+			pr_warning("dmatest: No memory for %s-test%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: drivers/dma/dmatest.c:341:
+			pr_warning("dmatest: No memory for %s-test%u\n",
+					chan->dev.bus_id, i);

WARNING:MEMORY_BARRIER: memory barrier without comment
#433: FILE: drivers/dma/dmatest.c:345:
+		smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: drivers/dma/dmatest.c:347:
+		thread->task = kthread_run(dmatest_func, thread, "%s-test%u",
+				chan->dev.bus_id, i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: drivers/dma/dmatest.c:350:
+			pr_warning("dmatest: Failed to run thread %s-test%u\n",
+					chan->dev.bus_id, i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: drivers/dma/dmatest.c:377:
+			pr_debug("dmatest: lost channel %s\n",
+					chan->dev.bus_id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: drivers/dma/dmatest.c:395:
+dmatest_event(struct dma_client *client, struct dma_chan *chan,
+		enum dma_state state)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#490: FILE: drivers/dma/dmatest.c:402:
+		if (dmatest_match_channel(chan)
+				&& dmatest_match_device(chan->device)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#491: FILE: drivers/dma/dmatest.c:403:
+				&& dmatest_match_device(chan->device)
+				&& (!max_channels

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#492: FILE: drivers/dma/dmatest.c:404:
+				&& (!max_channels
+					|| nr_channels < max_channels))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: drivers/dma/dmatest.c:416:
+		pr_info("dmatest: Unhandled event %u (%s)\n",
+				state, chan->dev.bus_id);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000263397.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 21 warnings, 24 checks, 459 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000263397.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
