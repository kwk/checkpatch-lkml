WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-fixes-for-linus

WARNING:TYPO_SPELLING: 'paramter' may be misspelled - perhaps 'parameter'?
#83: 
      Revert "x86: signal: change type of paramter for sys_rt_sigreturn()"
                                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#172: FILE: arch/x86/include/asm/bitops.h:60:
+set_bit(unsigned int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#182: FILE: arch/x86/include/asm/bitops.h:98:
+clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#192: FILE: arch/x86/include/asm/bitops.h:213:
+test_and_set_bit_lock(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#201: FILE: arch/x86/include/asm/bitops.h:309:
+static __always_inline int constant_test_bit(unsigned int nr, const volatile unsigned long *addr)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#226: FILE: arch/x86/include/asm/msr-index.h:206:
+#define MSR_IA32_MISC_ENABLE_FAST_STRING	(1ULL << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#227: FILE: arch/x86/include/asm/msr-index.h:207:
+#define MSR_IA32_MISC_ENABLE_TCC		(1ULL << 1)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#228: FILE: arch/x86/include/asm/msr-index.h:208:
+#define MSR_IA32_MISC_ENABLE_EMON		(1ULL << 7)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#229: FILE: arch/x86/include/asm/msr-index.h:209:
+#define MSR_IA32_MISC_ENABLE_BTS_UNAVAIL	(1ULL << 11)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#230: FILE: arch/x86/include/asm/msr-index.h:210:
+#define MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL	(1ULL << 12)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#231: FILE: arch/x86/include/asm/msr-index.h:211:
+#define MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP	(1ULL << 16)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#232: FILE: arch/x86/include/asm/msr-index.h:212:
+#define MSR_IA32_MISC_ENABLE_MWAIT		(1ULL << 18)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#233: FILE: arch/x86/include/asm/msr-index.h:213:
+#define MSR_IA32_MISC_ENABLE_LIMIT_CPUID	(1ULL << 22)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#234: FILE: arch/x86/include/asm/msr-index.h:214:
+#define MSR_IA32_MISC_ENABLE_XTPR_DISABLE	(1ULL << 23)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#235: FILE: arch/x86/include/asm/msr-index.h:215:
+#define MSR_IA32_MISC_ENABLE_XD_DISABLE		(1ULL << 34)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#238: FILE: arch/x86/include/asm/msr-index.h:218:
+#define MSR_IA32_MISC_ENABLE_X87_COMPAT		(1ULL << 2)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#239: FILE: arch/x86/include/asm/msr-index.h:219:
+#define MSR_IA32_MISC_ENABLE_TM1		(1ULL << 3)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#240: FILE: arch/x86/include/asm/msr-index.h:220:
+#define MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE	(1ULL << 4)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#241: FILE: arch/x86/include/asm/msr-index.h:221:
+#define MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE	(1ULL << 6)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#242: FILE: arch/x86/include/asm/msr-index.h:222:
+#define MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK	(1ULL << 8)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#243: FILE: arch/x86/include/asm/msr-index.h:223:
+#define MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE	(1ULL << 9)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#244: FILE: arch/x86/include/asm/msr-index.h:224:
+#define MSR_IA32_MISC_ENABLE_FERR		(1ULL << 10)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#245: FILE: arch/x86/include/asm/msr-index.h:225:
+#define MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX	(1ULL << 10)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#246: FILE: arch/x86/include/asm/msr-index.h:226:
+#define MSR_IA32_MISC_ENABLE_TM2		(1ULL << 13)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#247: FILE: arch/x86/include/asm/msr-index.h:227:
+#define MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE	(1ULL << 19)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#248: FILE: arch/x86/include/asm/msr-index.h:228:
+#define MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK	(1ULL << 20)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#249: FILE: arch/x86/include/asm/msr-index.h:229:
+#define MSR_IA32_MISC_ENABLE_L1D_CONTEXT	(1ULL << 24)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#250: FILE: arch/x86/include/asm/msr-index.h:230:
+#define MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE	(1ULL << 37)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#251: FILE: arch/x86/include/asm/msr-index.h:231:
+#define MSR_IA32_MISC_ENABLE_TURBO_DISABLE	(1ULL << 38)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#252: FILE: arch/x86/include/asm/msr-index.h:232:
+#define MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE	(1ULL << 39)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: arch/x86/kernel/apic.c:1842:
+		WARN_ONCE(1,
+			"ACPI: apic version mismatch, bootcpu: %x cpu %d: %x\n",

WARNING:MISPLACED_INIT: __initdata should be placed after mtrr_show
#491: FILE: arch/x86/kernel/cpu/mtrr/generic.c:36:
+static int __initdata mtrr_show;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#497: FILE: arch/x86/kernel/cpu/mtrr/generic.c:42:
+}
+early_param("mtrr.show", mtrr_debug);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#580: FILE: arch/x86/lib/usercopy_32.c:221:
+		:"=&r" (n), "=&D" (s), "=&a" (res), "=&c" (tmp)
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#628: FILE: arch/x86/mm/init_32.c:155:
+	if (pmd_idx_kmap_begin != pmd_idx_kmap_end
+	    && (vaddr >> PMD_SHIFT) >= pmd_idx_kmap_begin

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#629: FILE: arch/x86/mm/init_32.c:156:
+	    && (vaddr >> PMD_SHIFT) >= pmd_idx_kmap_begin
+	    && (vaddr >> PMD_SHIFT) <= pmd_idx_kmap_end

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#630: FILE: arch/x86/mm/init_32.c:157:
+	    && (vaddr >> PMD_SHIFT) <= pmd_idx_kmap_end
+	    && ((__pa(pte) >> PAGE_SHIFT) < table_start

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#631: FILE: arch/x86/mm/init_32.c:158:
+	    && ((__pa(pte) >> PAGE_SHIFT) < table_start
+		|| (__pa(pte) >> PAGE_SHIFT) >= table_end)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#635: FILE: arch/x86/mm/init_32.c:162:
+		BUG_ON(after_init_bootmem);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#641: FILE: arch/x86/mm/init_32.c:168:
+		set_pmd(pmd, __pmd(__pa(newpte)|_PAGE_TABLE));
 		                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#642: FILE: arch/x86/mm/init_32.c:169:
+		BUG_ON(newpte != pte_offset_kernel(pmd, 0));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#648: FILE: arch/x86/mm/init_32.c:175:
+	BUG_ON(vaddr < fix_to_virt(FIX_KMAP_BEGIN - 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#649: FILE: arch/x86/mm/init_32.c:176:
+	BUG_ON(vaddr < fix_to_virt(FIX_KMAP_BEGIN - 1)
+	       && vaddr > fix_to_virt(FIX_KMAP_END)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#650: FILE: arch/x86/mm/init_32.c:177:
+	       && vaddr > fix_to_virt(FIX_KMAP_END)
+	       && lastpte && lastpte + PTRS_PER_PTE != pte);

ERROR:CODE_INDENT: code indent should use tabs where possible
#672: FILE: arch/x86/mm/init_32.c:211:
+^I^I^I                            pmd, vaddr, pte);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: arch/x86/mm/init_64.c:600:
+static unsigned long __meminit kernel_physical_mapping_init(unsigned long start,
 						unsigned long end,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#802: FILE: arch/x86/mm/pageattr.c:558:
+		return 0;
+	} else {

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_WARNING
#803: FILE: arch/x86/mm/pageattr.c:559:
+		WARN(1, KERN_WARNING "CPA: called for zero pte. "

WARNING:SPLIT_STRING: quoted string split across lines
#804: FILE: arch/x86/mm/pageattr.c:560:
+		WARN(1, KERN_WARNING "CPA: called for zero pte. "
+			"vaddr = %lx cpa->vaddr = %lx\n", vaddr,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#927: FILE: drivers/xen/balloon.c:303:
+			ret = HYPERVISOR_update_va_mapping(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#930: FILE: drivers/xen/balloon.c:306:
+			BUG_ON(ret);

ERROR:CODE_INDENT: code indent should use tabs where possible
#931: FILE: drivers/xen/balloon.c:307:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: drivers/xen/balloon.c:307:
+                }$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1077: FILE: kernel/workqueue.c:1026:
+	BUG_ON(!work_on_cpu_wq);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000176028.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 16 warnings, 36 checks, 770 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000176028.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
