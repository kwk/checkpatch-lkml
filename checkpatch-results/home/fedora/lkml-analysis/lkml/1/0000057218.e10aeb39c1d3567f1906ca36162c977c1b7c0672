ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: fs/binfmt_elf.c:40:
+static unsigned long $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: fs/binfmt_elf.c:42:
+elf_map(struct file *, unsigned long, struct elf_phdr *,
+				int, int, unsigned long, unsigned long);

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: fs/binfmt_elf.c:348:
+^I^I                   off + base_offset);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: fs/binfmt_elf.c:353:
+^I^I                   off + base_offset);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: fs/binfmt_elf.c:577:
+static int examine_fatelf(struct file *file, const char *filename, char *buf,
+		int buflen, unsigned long *offset, struct elfhdr *elf)

CHECK:CAMELCASE: Avoid CamelCase: <Fatelf_hdr>
#159: FILE: fs/binfmt_elf.c:580:
+	const Fatelf_hdr *fatelf = (Fatelf_hdr *) buf;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#176: FILE: fs/binfmt_elf.c:597:
+	records = (int) fatelf->num_records;  /* uint8, no byteswap needed */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Fatelf_record>
#181: FILE: fs/binfmt_elf.c:602:
+		const Fatelf_record *record = &fatelf->records[i];

ERROR:SPACING: space prohibited after that open parenthesis '('
#183: FILE: fs/binfmt_elf.c:604:
+		const int abiok = likely( likely(osabi == ELFOSABI_NONE) ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: fs/binfmt_elf.c:605:
+^I^I                          unlikely(osabi == ELFOSABI_LINUX) );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#184: FILE: fs/binfmt_elf.c:605:
+		                          unlikely(osabi == ELFOSABI_LINUX) );

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#193: FILE: fs/binfmt_elf.c:614:
+		if (unlikely(elf_check_arch(elf))
+		    && likely(abiok)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#194: FILE: fs/binfmt_elf.c:615:
+		    && likely(abiok)
+		    && likely(record->osabi_version == 0)) {

CHECK:SPACING: No space is necessary after a cast
#199: FILE: fs/binfmt_elf.c:620:
+			const unsigned long uloff = (unsigned long) rec_offset;

CHECK:SPACING: No space is necessary after a cast
#212: FILE: fs/binfmt_elf.c:633:
+			rc = kernel_read(file, uloff, (char*) elf, sizeof(*elf));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#212: FILE: fs/binfmt_elf.c:633:
+			rc = kernel_read(file, uloff, (char*) elf, sizeof(*elf));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc != sizeof(*elf)'
#213: FILE: fs/binfmt_elf.c:634:
+			if (unlikely((rc != sizeof(*elf)) && (rc >= 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc >= 0'
#213: FILE: fs/binfmt_elf.c:634:
+			if (unlikely((rc != sizeof(*elf)) && (rc >= 0)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#213: FILE: fs/binfmt_elf.c:634:
+			if (unlikely((rc != sizeof(*elf)) && (rc >= 0)))
[...]
+			else if (likely(rc == sizeof(*elf))) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#227: FILE: fs/binfmt_elf.c:648:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: fs/binfmt_elf.c:680:
+^I                        BINPRM_BUF_SIZE, &base_offset, &loc->elf_ex);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: fs/binfmt_elf.c:799:
+^I^I^I                        bprm->buf, BINPRM_BUF_SIZE,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: fs/binfmt_elf.c:800:
+^I^I^I                        &interp_base_offset,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: fs/binfmt_elf.c:801:
+^I^I^I                        &loc->interp_elf_ex);$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#289: FILE: fs/binfmt_elf.c:802:
+			if (unlikely(retval < 0)) {
+				goto out_free_dentry;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#329: FILE: fs/binfmt_elf.c:1134:
+	if (unlikely(retval < 0)) {
+		goto out;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: fs/binfmt_elf.c:1160:
+^I                     (char *)eppnt, j);$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#366: FILE: include/linux/elf.h:39:
+typedef struct Fatelf_record {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: include/linux/elf.h:40:
+  __le16 machine;      /* maps to e_machine */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: include/linux/elf.h:41:
+  __u8 osabi;          /* maps to e_ident[EI_OSABI] */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: include/linux/elf.h:42:
+  __u8 osabi_version;  /* maps to e_ident[EI_ABIVERSION] */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: include/linux/elf.h:43:
+  __u8 word_size;      /* maps to e_ident[EI_CLASS] */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: include/linux/elf.h:44:
+  __u8 byte_order;     /* maps to e_ident[EI_DATA] */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: include/linux/elf.h:45:
+  __u8 reserved0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: include/linux/elf.h:46:
+  __u8 reserved1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: include/linux/elf.h:47:
+  __le64 offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: include/linux/elf.h:48:
+  __le64 size;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#378: FILE: include/linux/elf.h:51:
+typedef struct Fatelf_hdr {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: include/linux/elf.h:52:
+  __le32 magic;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: include/linux/elf.h:53:
+  __le16 version;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: include/linux/elf.h:54:
+  __u8 num_records;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: include/linux/elf.h:55:
+  __u8 reserved0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: include/linux/elf.h:56:
+  Fatelf_record records[];$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057218.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 18 warnings, 13 checks, 305 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057218.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
