WARNING:TYPO_SPELLING: 'wich' may be misspelled - perhaps 'which'?
#45: 
All time wich I turn-on my laptopt I need kill find daemon in my Debian 
         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'patchs' may be misspelled - perhaps 'patches'?
#66: 
I attached all patchs used in my 2.6.23.16.
               ^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#128: FILE: block/cfq-iosched.c:22:
+#define CFQ_FIFO_EXPIRE_ASYNC	HZ / 4

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#129: FILE: block/cfq-iosched.c:23:
+#define CFQ_FIFO_EXPIRE_SYNC	HZ / 8

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#130: FILE: block/cfq-iosched.c:24:
+#define CFQ_BACK_MAX		16 * 1024

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#133: FILE: block/cfq-iosched.c:27:
+#define CFQ_SLICE_SYNC		HZ / 10

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#134: FILE: block/cfq-iosched.c:28:
+#define CFQ_SLICE_ASYNC		HZ / 25

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#136: FILE: block/cfq-iosched.c:30:
+#define CFQ_SLICE_IDLE		HZ / 125

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#141: FILE: block/cfq-iosched.c:35:
+static int cfq_fifo_expire[2]	=
+		{ CFQ_FIFO_EXPIRE_ASYNC, CFQ_FIFO_EXPIRE_SYNC };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#181: FILE: block/cfq-iosched.c:224:
+extern void disk_stats_snapshot(phenotype_t *pt);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#184: FILE: block/cfq-iosched.c:227:
+extern void disk_update_fingerprint(phenotype_t *pt);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#185: FILE: block/cfq-iosched.c:228:
+extern void *cfq_create_genes(phenotype_t *pt);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#269: FILE: block/cfq-iosched.c:312:
+		CFQ_FIFO_EXPIRE_ASYNC / 2, 3 * CFQ_FIFO_EXPIRE_ASYNC / 2, CFQ_FIFO_EXPIRE_ASYNC, 0 },

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#287: FILE: block/cfq-iosched.c:330:
+		BLKDEV_MIN_RQ, BLKDEV_MAX_RQ * 30, BLKDEV_MAX_RQ, genetic_generic_iterative_mutate_gene }

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#290: FILE: block/cfq-iosched.c:333:
+extern long long disk_num_ops_calc_fitness(genetic_child_t *child);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#291: FILE: block/cfq-iosched.c:334:
+extern long long disk_throughput_calc_fitness(genetic_child_t *child);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#292: FILE: block/cfq-iosched.c:335:
+extern long long disk_latency_calc_fitness(genetic_child_t *child);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: block/cfq-iosched.c:2424:
+	ret = genetic_init(&genetic, CFQ_NUM_CHILDREN, 2 * HZ,
+			    1, "cfq-ioscheduler");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#375: FILE: block/cfq-iosched.c:2446:
+	if (genetic_register_phenotype(genetic, &cfq_general_genetic_ops,
[...]
+	panic("cfq: failed to register general phenotype");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#395: FILE: block/cfq-iosched.c:2480:
+	BUG_ON(!child);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#405: FILE: block/cfq-iosched.c:2490:
+	BUG_ON(!child);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#415: FILE: block/cfq-iosched.c:2500:
+	BUG_ON(!child);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#426: FILE: block/cfq-iosched.c:2511:
+	BUG_ON(!child);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*child->genes)...) over kmalloc(sizeof(struct cfq_genes)...)
#428: FILE: block/cfq-iosched.c:2513:
+	child->genes = kmalloc(sizeof(struct cfq_genes), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#429: FILE: block/cfq-iosched.c:2514:
+	if (!child->genes)
+	panic("cfq_general_create_child: error mallocing space");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cfq_general_create_child', this function's name, in a string
#430: FILE: block/cfq-iosched.c:2515:
+	panic("cfq_general_create_child: error mallocing space");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#430: FILE: block/cfq-iosched.c:2515:
+	if (!child->genes)
+	panic("cfq_general_create_child: error mallocing space");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#436: FILE: block/cfq-iosched.c:2521:
+	genetic_create_child_spread(child, CFQ_NUM_CHILDREN-1);
 	                                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#452: FILE: block/cfq-iosched.c:2537:
+		/* Look at everyone else that contributes to this
+		   phenotype */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#452: FILE: block/cfq-iosched.c:2537:
+		   phenotype */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#454: FILE: block/cfq-iosched.c:2539:
+		if (pt->uid & CFQ_GENERAL_UID && pt->uid != CFQ_GENERAL_UID) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#463: FILE: block/cfq-iosched.c:2548:
+				BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#469: FILE: block/cfq-iosched.c:2554:
+	/* If we are a general phenotype that is made up of other
+	   phenotypes then we take the average */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#469: FILE: block/cfq-iosched.c:2554:
+	   phenotypes then we take the average */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#473: FILE: block/cfq-iosched.c:2558:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#531: FILE: block/cfq-iosched.c:2616:
+		/* Look at everyone else that contributes to this
+		   phenotype */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#531: FILE: block/cfq-iosched.c:2616:
+		   phenotype */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#533: FILE: block/cfq-iosched.c:2618:
+		if (pt->uid & CFQ_GENERAL_UID && pt->uid != CFQ_GENERAL_UID) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#545: FILE: block/cfq-iosched.c:2630:
+				BUG();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#556: FILE: block/cfq-iosched.c:2641:
+
+}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*genes)...) over kmalloc(sizeof(struct cfq_genes)...)
#561: FILE: block/cfq-iosched.c:2646:
+	struct cfq_genes *genes = kmalloc(sizeof(struct cfq_genes), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#564: FILE: block/cfq-iosched.c:2649:
+		printk(KERN_ERR "cfq_create_genes: unable to alloc space\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cfq_create_genes', this function's name, in a string
#564: FILE: block/cfq-iosched.c:2649:
+		printk(KERN_ERR "cfq_create_genes: unable to alloc space\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#564: FILE: block/cfq-iosched.c:2649:
+	if (!genes) {
+		printk(KERN_ERR "cfq_create_genes: unable to alloc space\n");

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#597: FILE: block/Kconfig.iosched:80:
+config GENETIC_IOSCHED_CFQ
+        bool "Genetic CFQ I/O scheduler (EXPERIMENTAL)"
+        depends on IOSCHED_CFQ && GENETIC_LIB && EXPERIMENTAL
+        default n
+        ---help---
+        This will use a genetic algorithm to tweak the tunables of the
+        CFQ scheduler autonomically and will adapt tunables
+        depending on the present workload.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:CODE_INDENT: code indent should use tabs where possible
#678: FILE: block/genhd.c:488:
+        &disk_attr_fp.attr,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#678: FILE: block/genhd.c:488:
+        &disk_attr_fp.attr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: block/ll_rw_blk.c:2699:
+    defined(CONFIG_GENETIC_IOSCHED_DEADLINE) || \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: block/ll_rw_blk.c:2700:
+    defined(CONFIG_GENETIC_IOSCHED_CFQ)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#722: FILE: block/ll_rw_blk.c:2703:
+void disk_stats_snapshot(phenotype_t * pt)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#724: FILE: block/ll_rw_blk.c:2705:
+	struct list_head * d;

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#726: FILE: block/ll_rw_blk.c:2707:
+	struct disk_stats_snapshot * ss = (struct disk_stats_snapshot *)pt->child_ranking[0]->stats_snapshot;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#726: FILE: block/ll_rw_blk.c:2707:
+	struct disk_stats_snapshot * ss = (struct disk_stats_snapshot *)pt->child_ranking[0]->stats_snapshot;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#743: FILE: block/ll_rw_blk.c:2724:
+long long disk_num_ops_calc_fitness(genetic_child_t * child)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#745: FILE: block/ll_rw_blk.c:2726:
+	struct list_head * d;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#747: FILE: block/ll_rw_blk.c:2728:
+	struct disk_stats_snapshot * ss = (struct disk_stats_snapshot *)child->stats_snapshot;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#766: FILE: block/ll_rw_blk.c:2747:
+long long disk_throughput_calc_fitness(genetic_child_t * child)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#768: FILE: block/ll_rw_blk.c:2749:
+	struct list_head * d;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#770: FILE: block/ll_rw_blk.c:2751:
+	struct disk_stats_snapshot * ss = (struct disk_stats_snapshot *)child->stats_snapshot;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#789: FILE: block/ll_rw_blk.c:2770:
+long long disk_latency_calc_fitness(genetic_child_t * child)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#791: FILE: block/ll_rw_blk.c:2772:
+	struct list_head * d;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#793: FILE: block/ll_rw_blk.c:2774:
+	struct disk_stats_snapshot * ss = (struct disk_stats_snapshot *)child->stats_snapshot;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#811: FILE: block/ll_rw_blk.c:2792:
+void disk_update_fingerprint(phenotype_t * pt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#813: FILE: block/ll_rw_blk.c:2794:
+	struct list_head * d;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#816: FILE: block/ll_rw_blk.c:2797:
+	BUG_ON(!pt->fp_ss);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#828: FILE: block/ll_rw_blk.c:2809:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#830: FILE: block/ll_rw_blk.c:2811:
+void disk_get_fingerprint(phenotype_t * pt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#832: FILE: block/ll_rw_blk.c:2813:
+	struct list_head * d;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#835: FILE: block/ll_rw_blk.c:2816:
+	BUG_ON(!pt->fp_ss);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#878: FILE: include/linux/blkdev.h:865:
+    defined(CONFIG_GENETIC_IOSCHED_DEADLINE) || \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: include/linux/blkdev.h:866:
+    defined(CONFIG_GENETIC_IOSCHED_CFQ)$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#882: FILE: include/linux/blkdev.h:869:
+struct disk_stats_snapshot
+{

ERROR:CODE_INDENT: code indent should use tabs where possible
#883: FILE: include/linux/blkdev.h:870:
+        unsigned long reads;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#883: FILE: include/linux/blkdev.h:870:
+        unsigned long reads;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#884: FILE: include/linux/blkdev.h:871:
+        unsigned long writes;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#884: FILE: include/linux/blkdev.h:871:
+        unsigned long writes;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#885: FILE: include/linux/blkdev.h:872:
+        unsigned long read_sectors;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#885: FILE: include/linux/blkdev.h:872:
+        unsigned long read_sectors;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#886: FILE: include/linux/blkdev.h:873:
+        unsigned long write_sectors;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#886: FILE: include/linux/blkdev.h:873:
+        unsigned long write_sectors;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#887: FILE: include/linux/blkdev.h:874:
+        unsigned long time_in_queue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#887: FILE: include/linux/blkdev.h:874:
+        unsigned long time_in_queue;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#908: FILE: include/linux/genetic.h:1:
+#ifndef __LINUX_GENETIC_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#911: FILE: include/linux/genetic.h:4:
+ * include/linux/genetic.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#920: FILE: include/linux/genetic.h:13:
+ * by the Free Software Foundation. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#928: FILE: include/linux/genetic.h:21:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#954: FILE: include/linux/genetic.h:47:
+#define gen_dbg(format, arg...) do { if (GENETIC_PRINT_DEBUG) printk(KERN_EMERG __FILE__ ": " format "\n" , ## arg); } while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#954: FILE: include/linux/genetic.h:47:
+#define gen_dbg(format, arg...) do { if (GENETIC_PRINT_DEBUG) printk(KERN_EMERG __FILE__ ": " format "\n" , ## arg); } while (0)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#954: FILE: include/linux/genetic.h:47:
+#define gen_dbg(format, arg...) do { if (GENETIC_PRINT_DEBUG) printk(KERN_EMERG __FILE__ ": " format "\n" , ## arg); } while (0)
                                                                                                           ^

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#955: FILE: include/linux/genetic.h:48:
+#define gen_trc(format, arg...) do { if (GENETIC_PRINT_DEBUG) printk(KERN_EMERG __FILE__ ":%s:%d\n" , __FUNCTION__, __LINE__); } while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#955: FILE: include/linux/genetic.h:48:
+#define gen_trc(format, arg...) do { if (GENETIC_PRINT_DEBUG) printk(KERN_EMERG __FILE__ ":%s:%d\n" , __FUNCTION__, __LINE__); } while (0)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#955: FILE: include/linux/genetic.h:48:
+#define gen_trc(format, arg...) do { if (GENETIC_PRINT_DEBUG) printk(KERN_EMERG __FILE__ ":%s:%d\n" , __FUNCTION__, __LINE__); } while (0)
                                                                                                     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#955: FILE: include/linux/genetic.h:48:
+#define gen_trc(format, arg...) do { if (GENETIC_PRINT_DEBUG) printk(KERN_EMERG __FILE__ ":%s:%d\n" , __FUNCTION__, __LINE__); } while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#971: FILE: include/linux/genetic.h:64:
+typedef struct genetic_child_s genetic_child_t;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#975: FILE: include/linux/genetic.h:68:
+^Ichar ^I^I*name;$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'genetic_child_t *' should also have an identifier name
#979: FILE: include/linux/genetic.h:72:
+	void		(*mutate_gene)(genetic_child_t *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#979: FILE: include/linux/genetic.h:72:
+	void		(*mutate_gene)(genetic_child_t *, unsigned long);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#982: FILE: include/linux/genetic.h:75:
+typedef struct gene_param_s gene_param_t;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct phenotype_s *' should also have an identifier name
#1013: FILE: include/linux/genetic.h:106:
+	void			(*natural_selection)(struct phenotype_s *);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1016: FILE: include/linux/genetic.h:109:
+	/* This UID is bitmap comprised of other phenotypes that contribute
+	   to the genes */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1016: FILE: include/linux/genetic.h:109:
+	   to the genes */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1028: FILE: include/linux/genetic.h:121:
+	unsigned long		debug_size;	/* number of longs in
+						   debug history */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1028: FILE: include/linux/genetic.h:121:
+						   debug history */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1033: FILE: include/linux/genetic.h:126:
+^Istruct dentry ^I^I*fp_dir;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1047: FILE: include/linux/genetic.h:140:
+typedef struct phenotype_s phenotype_t;

WARNING:TYPO_SPELLING: 'wil' may be misspelled - perhaps 'will'?
#1058: FILE: include/linux/genetic.h:151:
+ * @fingerprinting: when 1 the genetic library wil use gene fingerprinting if CONFIG_FINGERPRINTING
                                                ^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1071: FILE: include/linux/genetic.h:164:
+^Iint ^I^I^Idefaults;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1075: FILE: include/linux/genetic.h:168:
+^Istruct dentry ^I^I*phenotypes_dir;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1076: FILE: include/linux/genetic.h:169:
+^Istruct dentry ^I^I*fingerprinting_dir;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1082: FILE: include/linux/genetic.h:175:
+typedef struct genetic_s genetic_t;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'genetic_child_t *' should also have an identifier name
#1085: FILE: include/linux/genetic.h:178:
+	void			(*create_child)(genetic_child_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1086: FILE: include/linux/genetic.h:179:
+	void			(*set_child_genes)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'genetic_child_t *' should also have an identifier name
#1087: FILE: include/linux/genetic.h:180:
+	void			(*calc_fitness)(genetic_child_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'genetic_child_t *' should also have an identifier name
#1088: FILE: include/linux/genetic.h:181:
+	void			(*combine_genes)(genetic_child_t *, genetic_child_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'genetic_child_t *' should also have an identifier name
#1088: FILE: include/linux/genetic.h:181:
+	void			(*combine_genes)(genetic_child_t *, genetic_child_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'genetic_child_t *' should also have an identifier name
#1088: FILE: include/linux/genetic.h:181:
+	void			(*combine_genes)(genetic_child_t *, genetic_child_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'genetic_child_t *' should also have an identifier name
#1090: FILE: include/linux/genetic.h:183:
+	void			(*mutate_child)(genetic_child_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phenotype_t *' should also have an identifier name
#1091: FILE: include/linux/genetic.h:184:
+	void			(*calc_post_fitness)(phenotype_t *); /* Fitness routine used when

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phenotype_t *' should also have an identifier name
#1096: FILE: include/linux/genetic.h:189:
+	void			(*take_snapshot)(phenotype_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phenotype_t *' should also have an identifier name
#1097: FILE: include/linux/genetic.h:190:
+	void			(*shift_mutation_rate)(phenotype_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#1098: FILE: include/linux/genetic.h:191:
+	int			(*gene_show)(struct seq_file *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1098: FILE: include/linux/genetic.h:191:
+	int			(*gene_show)(struct seq_file *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phenotype_t *' should also have an identifier name
#1101: FILE: include/linux/genetic.h:194:
+	void			(*update_fingerprint)(phenotype_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phenotype_t *' should also have an identifier name
#1102: FILE: include/linux/genetic.h:195:
+	void *			(*create_top_genes)(phenotype_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#1103: FILE: include/linux/genetic.h:196:
+	int			(*top_fitness_show)(struct seq_file *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1103: FILE: include/linux/genetic.h:196:
+	int			(*top_fitness_show)(struct seq_file *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#1104: FILE: include/linux/genetic.h:197:
+	int			(*snapshot_show)(struct seq_file *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1104: FILE: include/linux/genetic.h:197:
+	int			(*snapshot_show)(struct seq_file *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#1105: FILE: include/linux/genetic.h:198:
+	int			(*state_show)(struct seq_file *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1105: FILE: include/linux/genetic.h:198:
+	int			(*state_show)(struct seq_file *, void *);

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1110: FILE: include/linux/genetic.h:203:
+int __init genetic_init(genetic_t ** in_genetic, unsigned long num_children,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1112: FILE: include/linux/genetic.h:205:
+			char * name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1113: FILE: include/linux/genetic.h:206:
+int __init genetic_register_phenotype(genetic_t * genetic, struct genetic_ops * ops,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1113: FILE: include/linux/genetic.h:206:
+int __init genetic_register_phenotype(genetic_t * genetic, struct genetic_ops * ops,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1114: FILE: include/linux/genetic.h:207:
+				      unsigned long num_children, char * name,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1116: FILE: include/linux/genetic.h:209:
+void __init genetic_start(genetic_t * genetic);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1119: FILE: include/linux/genetic.h:212:
+void genetic_generic_mutate_child(genetic_child_t * child);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1120: FILE: include/linux/genetic.h:213:
+void genetic_generic_iterative_mutate_gene(genetic_child_t * child, unsigned long gene_num);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1121: FILE: include/linux/genetic.h:214:
+void genetic_generic_combine_genes(genetic_child_t * parent_a,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1122: FILE: include/linux/genetic.h:215:
+				   genetic_child_t * parent_b,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1123: FILE: include/linux/genetic.h:216:
+				   genetic_child_t * child);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1124: FILE: include/linux/genetic.h:217:
+void genetic_create_child_spread(genetic_child_t * child, unsigned long num_children);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1125: FILE: include/linux/genetic.h:218:
+void genetic_create_child_defaults(genetic_child_t * child);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1126: FILE: include/linux/genetic.h:219:
+void genetic_general_shift_mutation_rate(phenotype_t * in_pt);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1129: FILE: include/linux/genetic.h:222:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1137: FILE: include/linux/genetic.h:230:
+        *rem = *n % div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1137: FILE: include/linux/genetic.h:230:
+        *rem = *n % div;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1138: FILE: include/linux/genetic.h:231:
+        *n /= div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1138: FILE: include/linux/genetic.h:231:
+        *n /= div;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1143: FILE: include/linux/genetic.h:236:
+static inline void divl(int32_t high, int32_t low,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1144: FILE: include/linux/genetic.h:237:
+                        int32_t div,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1144: FILE: include/linux/genetic.h:237:
+                        int32_t div,$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1144: FILE: include/linux/genetic.h:237:
+                        int32_t div,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1145: FILE: include/linux/genetic.h:238:
+                        int32_t *q, int32_t *r)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1145: FILE: include/linux/genetic.h:238:
+                        int32_t *q, int32_t *r)$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1145: FILE: include/linux/genetic.h:238:
+                        int32_t *q, int32_t *r)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1147: FILE: include/linux/genetic.h:240:
+        int64_t n = (u_int64_t)high << 32 | low;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1147: FILE: include/linux/genetic.h:240:
+        int64_t n = (u_int64_t)high << 32 | low;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1147: FILE: include/linux/genetic.h:240:
+        int64_t n = (u_int64_t)high << 32 | low;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1148: FILE: include/linux/genetic.h:241:
+        int64_t d = (u_int64_t)div << 31;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1148: FILE: include/linux/genetic.h:241:
+        int64_t d = (u_int64_t)div << 31;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1148: FILE: include/linux/genetic.h:241:
+        int64_t d = (u_int64_t)div << 31;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1149: FILE: include/linux/genetic.h:242:
+        int32_t q1 = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1149: FILE: include/linux/genetic.h:242:
+        int32_t q1 = 0;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1149: FILE: include/linux/genetic.h:242:
+        int32_t q1 = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1150: FILE: include/linux/genetic.h:243:
+        int c = 32;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1150: FILE: include/linux/genetic.h:243:
+        int c = 32;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1151: FILE: include/linux/genetic.h:244:
+        while (n > 0xffffffff) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1151: FILE: include/linux/genetic.h:244:
+        int c = 32;
+        while (n > 0xffffffff) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1151: FILE: include/linux/genetic.h:244:
+        while (n > 0xffffffff) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1152: FILE: include/linux/genetic.h:245:
+                q1 <<= 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1152: FILE: include/linux/genetic.h:245:
+                q1 <<= 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1153: FILE: include/linux/genetic.h:246:
+                if (n >= d) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1153: FILE: include/linux/genetic.h:246:
+                if (n >= d) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1154: FILE: include/linux/genetic.h:247:
+                        n -= d;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1154: FILE: include/linux/genetic.h:247:
+                        n -= d;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1155: FILE: include/linux/genetic.h:248:
+                        q1 |= 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1155: FILE: include/linux/genetic.h:248:
+                        q1 |= 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1156: FILE: include/linux/genetic.h:249:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1156: FILE: include/linux/genetic.h:249:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1157: FILE: include/linux/genetic.h:250:
+                d >>= 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1157: FILE: include/linux/genetic.h:250:
+                d >>= 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1158: FILE: include/linux/genetic.h:251:
+                c--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1158: FILE: include/linux/genetic.h:251:
+                c--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1159: FILE: include/linux/genetic.h:252:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1159: FILE: include/linux/genetic.h:252:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1160: FILE: include/linux/genetic.h:253:
+        q1 <<= c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1160: FILE: include/linux/genetic.h:253:
+        q1 <<= c;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1161: FILE: include/linux/genetic.h:254:
+        if (n) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1161: FILE: include/linux/genetic.h:254:
+        if (n) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1162: FILE: include/linux/genetic.h:255:
+                low = n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1162: FILE: include/linux/genetic.h:255:
+                low = n;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1163: FILE: include/linux/genetic.h:256:
+                *q = q1 | (low / div);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1163: FILE: include/linux/genetic.h:256:
+                *q = q1 | (low / div);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1164: FILE: include/linux/genetic.h:257:
+                *r = low % div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: include/linux/genetic.h:257:
+                *r = low % div;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1165: FILE: include/linux/genetic.h:258:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1165: FILE: include/linux/genetic.h:258:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1166: FILE: include/linux/genetic.h:259:
+                *r = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1166: FILE: include/linux/genetic.h:259:
+                *r = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1167: FILE: include/linux/genetic.h:260:
+                *q = q1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1167: FILE: include/linux/genetic.h:260:
+                *q = q1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1168: FILE: include/linux/genetic.h:261:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1168: FILE: include/linux/genetic.h:261:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1169: FILE: include/linux/genetic.h:262:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1169: FILE: include/linux/genetic.h:262:
+        return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1174: FILE: include/linux/genetic.h:267:
+        int32_t low, high;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1174: FILE: include/linux/genetic.h:267:
+        int32_t low, high;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1174: FILE: include/linux/genetic.h:267:
+        int32_t low, high;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1175: FILE: include/linux/genetic.h:268:
+        low = *n & 0xffffffff;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1175: FILE: include/linux/genetic.h:268:
+        int32_t low, high;
+        low = *n & 0xffffffff;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1175: FILE: include/linux/genetic.h:268:
+        low = *n & 0xffffffff;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1176: FILE: include/linux/genetic.h:269:
+        high = *n >> 32;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1176: FILE: include/linux/genetic.h:269:
+        high = *n >> 32;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1177: FILE: include/linux/genetic.h:270:
+        if (high) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1177: FILE: include/linux/genetic.h:270:
+        if (high) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1178: FILE: include/linux/genetic.h:271:
+                int32_t high1 = high % div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1178: FILE: include/linux/genetic.h:271:
+                int32_t high1 = high % div;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1178: FILE: include/linux/genetic.h:271:
+                int32_t high1 = high % div;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1179: FILE: include/linux/genetic.h:272:
+                int32_t low1 = low;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1179: FILE: include/linux/genetic.h:272:
+                int32_t low1 = low;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1179: FILE: include/linux/genetic.h:272:
+                int32_t low1 = low;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1180: FILE: include/linux/genetic.h:273:
+                high /= div;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1180: FILE: include/linux/genetic.h:273:
+                int32_t low1 = low;
+                high /= div;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1180: FILE: include/linux/genetic.h:273:
+                high /= div;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1181: FILE: include/linux/genetic.h:274:
+                divl(high1, low1, div, &low, (int32_t *)rem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1181: FILE: include/linux/genetic.h:274:
+                divl(high1, low1, div, &low, (int32_t *)rem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1182: FILE: include/linux/genetic.h:275:
+                *n = (int64_t)high << 32 | low;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1182: FILE: include/linux/genetic.h:275:
+                *n = (int64_t)high << 32 | low;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1183: FILE: include/linux/genetic.h:276:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1183: FILE: include/linux/genetic.h:276:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1184: FILE: include/linux/genetic.h:277:
+                *n = low / div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1184: FILE: include/linux/genetic.h:277:
+                *n = low / div;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1185: FILE: include/linux/genetic.h:278:
+                *rem = low % div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1185: FILE: include/linux/genetic.h:278:
+                *rem = low % div;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1186: FILE: include/linux/genetic.h:279:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1186: FILE: include/linux/genetic.h:279:
+        }$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1201: FILE: lib/Kconfig:66:
+config GENETIC_LIB
+	bool "Genetic Library"
+	help
+	  This option will build in a genetic library that will tweak
+	  kernel parameters autonomically to improve performance.
+
 #
 # compression support is select'ed if needed
 #

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1227: FILE: lib/genetic.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1235: FILE: lib/genetic.c:9:
+ * by the Free Software Foundation. $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1264: FILE: lib/genetic.c:38:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/string.h> instead of <asm/string.h>
#1265: FILE: lib/genetic.c:39:
+#include <asm/string.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#1266: FILE: lib/genetic.c:40:
+#include <asm/bug.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1285: FILE: lib/genetic.c:59:
+static void genetic_run_child(genetic_t * genetic);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1286: FILE: lib/genetic.c:60:
+static void genetic_new_generation(genetic_t * genetic);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1288: FILE: lib/genetic.c:62:
+void genetic_switch_child(unsigned long data);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1290: FILE: lib/genetic.c:64:
+
+

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1291: FILE: lib/genetic.c:65:
+int __init genetic_init(genetic_t ** in_genetic, unsigned long num_children,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1293: FILE: lib/genetic.c:67:
+			char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1295: FILE: lib/genetic.c:69:
+	genetic_t * genetic;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1300: FILE: lib/genetic.c:74:
+	printk(KERN_INFO "Initializing Genetic Library - version %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1301: FILE: lib/genetic.c:75:
+	printk(KERN_INFO "Initializing Genetic Library - version %s\n",
+			genetic_lib_version);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1303: FILE: lib/genetic.c:77:
+	genetic = (genetic_t *)kmalloc(sizeof(genetic_t), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1305: FILE: lib/genetic.c:79:
+		printk(KERN_ERR "genetic_init: not enough memory\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'genetic_init', this function's name, in a string
#1305: FILE: lib/genetic.c:79:
+		printk(KERN_ERR "genetic_init: not enough memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1305: FILE: lib/genetic.c:79:
+	if (!genetic) {
+		printk(KERN_ERR "genetic_init: not enough memory\n");

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1311: FILE: lib/genetic.c:85:
+	genetic->name = (char *)kmalloc(strlen(name), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1313: FILE: lib/genetic.c:87:
+		printk(KERN_ERR "genetic_init: not enough memory\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'genetic_init', this function's name, in a string
#1313: FILE: lib/genetic.c:87:
+		printk(KERN_ERR "genetic_init: not enough memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1313: FILE: lib/genetic.c:87:
+	if (!genetic->name) {
+		printk(KERN_ERR "genetic_init: not enough memory\n");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1348: FILE: lib/genetic.c:122:
+	debugfs_create_file("stats", S_IFREG|S_IRUGO, genetic->dir,
 	                                    ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1348: FILE: lib/genetic.c:122:
+	debugfs_create_file("stats", S_IFREG|S_IRUGO, genetic->dir,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1349: FILE: lib/genetic.c:123:
+	debugfs_create_file("stats", S_IFREG|S_IRUGO, genetic->dir,
+			genetic, &genetic_stat_operations);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1351: FILE: lib/genetic.c:125:
+	debugfs_create_file("phenotype_average", S_IFREG|S_IRUGO, genetic->dir,
 	                                                ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1351: FILE: lib/genetic.c:125:
+	debugfs_create_file("phenotype_average", S_IFREG|S_IRUGO, genetic->dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1352: FILE: lib/genetic.c:126:
+	debugfs_create_file("phenotype_average", S_IFREG|S_IRUGO, genetic->dir,
+			genetic, &genetic_phenotype_average_operations);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1354: FILE: lib/genetic.c:128:
+	debugfs_create_bool("defaults", S_IWUSR|S_IFREG|S_IRUGO, genetic->dir,
 	                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1354: FILE: lib/genetic.c:128:
+	debugfs_create_bool("defaults", S_IWUSR|S_IFREG|S_IRUGO, genetic->dir,
 	                                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#1354: FILE: lib/genetic.c:128:
+	debugfs_create_bool("defaults", S_IWUSR|S_IFREG|S_IRUGO, genetic->dir,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1354: FILE: lib/genetic.c:128:
+	debugfs_create_bool("defaults", S_IWUSR|S_IFREG|S_IRUGO, genetic->dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1355: FILE: lib/genetic.c:129:
+	debugfs_create_bool("defaults", S_IWUSR|S_IFREG|S_IRUGO, genetic->dir,
+				&genetic->defaults);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1360: FILE: lib/genetic.c:134:
+int __init genetic_register_phenotype(genetic_t * genetic,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1361: FILE: lib/genetic.c:135:
+int __init genetic_register_phenotype(genetic_t * genetic,
+		struct genetic_ops * ops, unsigned long num_children,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1361: FILE: lib/genetic.c:135:
+		struct genetic_ops * ops, unsigned long num_children,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1362: FILE: lib/genetic.c:136:
+		char * name, unsigned long num_genes, unsigned long uid)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1364: FILE: lib/genetic.c:138:
+	phenotype_t * pt;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1370: FILE: lib/genetic.c:144:
+	printk(KERN_INFO "Initializing %s's phenotype %s\n", genetic->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1371: FILE: lib/genetic.c:145:
+	printk(KERN_INFO "Initializing %s's phenotype %s\n", genetic->name,
+			name);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1373: FILE: lib/genetic.c:147:
+	pt = (phenotype_t *)kmalloc(sizeof(phenotype_t), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1375: FILE: lib/genetic.c:149:
+		printk(KERN_ERR "genetic_register_phenotype: not enough\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#1375: FILE: lib/genetic.c:149:
+		printk(KERN_ERR "genetic_register_phenotype: not enough\

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1380: FILE: lib/genetic.c:154:
+	pt->name = (char *)kmalloc(strlen(name), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1382: FILE: lib/genetic.c:156:
+		printk(KERN_ERR "genetic_register_phenotype: not enough\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#1382: FILE: lib/genetic.c:156:
+		printk(KERN_ERR "genetic_register_phenotype: not enough\

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1382: FILE: lib/genetic.c:156:
+	if (!pt->name) {
+		printk(KERN_ERR "genetic_register_phenotype: not enough\

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1388: FILE: lib/genetic.c:162:
+	pt->child_ranking = (genetic_child_t **)kmalloc(num_children * sizeof(genetic_child_t *), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1388: FILE: lib/genetic.c:162:
+	pt->child_ranking = (genetic_child_t **)kmalloc(num_children * sizeof(genetic_child_t *), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1390: FILE: lib/genetic.c:164:
+		printk(KERN_ERR "genetic_register_phenotype: not enough\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#1390: FILE: lib/genetic.c:164:
+		printk(KERN_ERR "genetic_register_phenotype: not enough\

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1390: FILE: lib/genetic.c:164:
+	if (!pt->child_ranking) {
+		printk(KERN_ERR "genetic_register_phenotype: not enough\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1397: FILE: lib/genetic.c:171:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1424: FILE: lib/genetic.c:198:
+		if ((rc = genetic_init_fingerprinting(pt)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1437: FILE: lib/genetic.c:211:
+		debugfs_create_file(name, S_IFREG|S_IRUGO,
 		                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1437: FILE: lib/genetic.c:211:
+		debugfs_create_file(name, S_IFREG|S_IRUGO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1438: FILE: lib/genetic.c:212:
+		debugfs_create_file(name, S_IFREG|S_IRUGO,
+			genetic->phenotypes_dir, pt, &genetic_gene_operations);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1444: FILE: lib/genetic.c:218:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1446: FILE: lib/genetic.c:220:
+void __init genetic_start(genetic_t * genetic)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1452: FILE: lib/genetic.c:226:
+	printk(KERN_INFO "%ld children started in %s genetic library\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1453: FILE: lib/genetic.c:227:
+	printk(KERN_INFO "%ld children started in %s genetic library\n",
+			genetic->num_children, genetic->name);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1456: FILE: lib/genetic.c:230:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1459: FILE: lib/genetic.c:233:
+/* create some children, it is up to the lib user to come up w/ a good
+   distro of genes for it's children */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1459: FILE: lib/genetic.c:233:
+   distro of genes for it's children */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1460: FILE: lib/genetic.c:234:
+static int genetic_create_children(phenotype_t * pt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1463: FILE: lib/genetic.c:237:
+	genetic_child_t * child;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1466: FILE: lib/genetic.c:240:
+		pt->child_ranking[i] = (genetic_child_t *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1466: FILE: lib/genetic.c:240:
+		pt->child_ranking[i] = (genetic_child_t *)kmalloc(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1470: FILE: lib/genetic.c:244:
+			printk(KERN_ERR "genetic_create_child: not enough\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#1470: FILE: lib/genetic.c:244:
+			printk(KERN_ERR "genetic_create_child: not enough\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1491: FILE: lib/genetic.c:265:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1495: FILE: lib/genetic.c:269:
+	genetic_t * genetic = (genetic_t *)data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1496: FILE: lib/genetic.c:270:
+	genetic_child_t * child;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1498: FILE: lib/genetic.c:272:
+	struct list_head * p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1499: FILE: lib/genetic.c:273:
+	phenotype_t * pt;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1503: FILE: lib/genetic.c:277:
+	printk(KERN_INFO "genetic_switch_child() for %s\n", genetic->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'genetic_switch_child', this function's name, in a string
#1503: FILE: lib/genetic.c:277:
+	printk(KERN_INFO "genetic_switch_child() for %s\n", genetic->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1511: FILE: lib/genetic.c:285:
+		printk(KERN_INFO "  phenotype %s\n", pt->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1522: FILE: lib/genetic.c:296:
+		printk(KERN_INFO "  finished calc_fitness\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1531: FILE: lib/genetic.c:305:
+
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1541: FILE: lib/genetic.c:315:
+	printk("exiting genetic_switch_child()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'genetic_switch_child', this function's name, in a string
#1541: FILE: lib/genetic.c:315:
+	printk("exiting genetic_switch_child()\n");

WARNING:TYPO_SPELLING: 'childs' may be misspelled - perhaps 'children'?
#1545: FILE: lib/genetic.c:319:
+/* Set the childs genes for run */
            ^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1546: FILE: lib/genetic.c:320:
+void genetic_run_child(genetic_t * genetic)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1548: FILE: lib/genetic.c:322:
+	struct list_head * p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1549: FILE: lib/genetic.c:323:
+	phenotype_t * pt;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1551: FILE: lib/genetic.c:325:
+	genetic_child_t * child;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1552: FILE: lib/genetic.c:326:
+	void * genes;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1571: FILE: lib/genetic.c:345:
+
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1577: FILE: lib/genetic.c:351:
+
+}

WARNING:TYPO_SPELLING: 'perfomers' may be misspelled - perhaps 'performers'?
#1581: FILE: lib/genetic.c:355:
+ * generation and keep the top half perfomers
                                     ^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1586: FILE: lib/genetic.c:360:
+static void genetic_ns_top_parents(phenotype_t * pt)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1588: FILE: lib/genetic.c:362:
+	unsigned long i,j,k = 0;
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1588: FILE: lib/genetic.c:362:
+	unsigned long i,j,k = 0;
 	                 ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1592: FILE: lib/genetic.c:366:
+	for (i = cutoff, j = num_children - 1; i < j; i++, j--, k += 2) {
[...]
+	pt->ops->combine_genes(pt->child_ranking[i],

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1601: FILE: lib/genetic.c:375:
+					pt->child_ranking[k+1]);
 					                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1605: FILE: lib/genetic.c:379:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1607: FILE: lib/genetic.c:381:
+/* This natural selection routine just has top parents populating
+   bottom performers. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1607: FILE: lib/genetic.c:381:
+   bottom performers. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1608: FILE: lib/genetic.c:382:
+static void genetic_ns_award_top_parents(phenotype_t * pt)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1621: FILE: lib/genetic.c:395:
+					pt->child_ranking[i+1]);
 					                   ^

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1625: FILE: lib/genetic.c:399:
+static inline void genetic_swap(genetic_child_t ** a, genetic_child_t ** b)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1625: FILE: lib/genetic.c:399:
+static inline void genetic_swap(genetic_child_t ** a, genetic_child_t ** b)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1627: FILE: lib/genetic.c:401:
+	genetic_child_t * tmp = *a;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1635: FILE: lib/genetic.c:409:
+static void genetic_split_performers(phenotype_t * pt)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1639: FILE: lib/genetic.c:413:
+	for (i = pt->num_children; i > 1; i--)
+	for (j = 0; j < i - 1; j++)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1641: FILE: lib/genetic.c:415:
+		if (pt->child_ranking[j]->fitness > pt->child_ranking[j+1]->fitness)
+		genetic_swap(&pt->child_ranking[j], &pt->child_ranking[j+1]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1641: FILE: lib/genetic.c:415:
+		if (pt->child_ranking[j]->fitness > pt->child_ranking[j+1]->fitness)
 		                                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1642: FILE: lib/genetic.c:416:
+		genetic_swap(&pt->child_ranking[j], &pt->child_ranking[j+1]);
 		                                                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1645: FILE: lib/genetic.c:419:
+static void genetic_mutate(phenotype_t * pt)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1653: FILE: lib/genetic.c:427:
+	for (i = 0; i < pt->num_mutations; i++) {
+	get_random_bytes(&child_entry, sizeof(child_entry));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1662: FILE: lib/genetic.c:436:
+/* XXX This will either aid in handling new workloads, or send us on a
+   downward spiral */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1662: FILE: lib/genetic.c:436:
+   downward spiral */

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1663: FILE: lib/genetic.c:437:
+static void genetic_shift_mutation_rate(phenotype_t * pt, long long prev_gen_avg_fitness, long long avg_fitness)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1663: FILE: lib/genetic.c:437:
+static void genetic_shift_mutation_rate(phenotype_t * pt, long long prev_gen_avg_fitness, long long avg_fitness)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1665: FILE: lib/genetic.c:439:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1671: FILE: lib/genetic.c:445:
+	if (mutation_rate_change && pt->genetic->generation_number > 1) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1675: FILE: lib/genetic.c:449:
+		} else {
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1695: FILE: lib/genetic.c:469:
+void genetic_general_shift_mutation_rate(phenotype_t * in_pt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1697: FILE: lib/genetic.c:471:
+	struct list_head * p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1698: FILE: lib/genetic.c:472:
+	phenotype_t * pt;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1712: FILE: lib/genetic.c:486:
+	/* If we are a general phenotype that is made up of other
+	   phenotypes then we take the average */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1712: FILE: lib/genetic.c:486:
+	   phenotypes then we take the average */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1719: FILE: lib/genetic.c:493:
+static void genetic_calc_stats(phenotype_t * in_pt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1721: FILE: lib/genetic.c:495:
+	struct list_head * p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1722: FILE: lib/genetic.c:496:
+	phenotype_t * pt;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1738: FILE: lib/genetic.c:512:
+	if (in_pt->ops->calc_post_fitness) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'in_pt->last_fingerprint == numerical_fp'
#1744: FILE: lib/genetic.c:518:
+		if ((fp && (in_pt->last_fingerprint == numerical_fp)) || !fp) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1750: FILE: lib/genetic.c:524:
+			printk(KERN_INFO "genetic_calc_stats() for %s\n", in_pt->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'genetic_calc_stats', this function's name, in a string
#1750: FILE: lib/genetic.c:524:
+			printk(KERN_INFO "genetic_calc_stats() for %s\n", in_pt->name);

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#1758: FILE: lib/genetic.c:532:
+						/* measure how far percentage-wise that we are from the top */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1759: FILE: lib/genetic.c:533:
+						pt->from_top = (pt->last_gen_avg_fitness - pt->avg_fitness) * 100;

WARNING:LONG_LINE: line length of 145 exceeds 100 columns
#1761: FILE: lib/genetic.c:535:
+						printk("  name: %s from_top: %lld avg_fitness: %lld\n", pt->name, pt->from_top, pt->avg_fitness);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1761: FILE: lib/genetic.c:535:
+						printk("  name: %s from_top: %lld avg_fitness: %lld\n", pt->name, pt->from_top, pt->avg_fitness);

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#1763: FILE: lib/genetic.c:537:
+						divll(&pt->from_top, (pt->avg_fitness > 0) ? pt->avg_fitness : -pt->avg_fitness, &dummy);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1767: FILE: lib/genetic.c:541:
+						printk("  total_fitness: %lld\n", total_fitness);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1774: FILE: lib/genetic.c:548:
+
+			}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1776: FILE: lib/genetic.c:550:
+		} else {
[...]
+				total_fitness = 0;

WARNING:REPEATED_WORD: Possible repeated word: 'horrible'
#1777: FILE: lib/genetic.c:551:
+				/* XXX horrible horrible hack...but

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1778: FILE: lib/genetic.c:552:
+				 * testing viability */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1783: FILE: lib/genetic.c:557:
+		BUG_ON(!i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1789: FILE: lib/genetic.c:563:
+		printk("  in_pt->last_gent_avg_fitness: %lld\n", in_pt->last_gen_avg_fitness);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1793: FILE: lib/genetic.c:567:
+		 * so far */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1802: FILE: lib/genetic.c:576:
+	genetic_shift_mutation_rate(in_pt, prev_gen_avg_fitness,
+			in_pt->last_gen_avg_fitness);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1804: FILE: lib/genetic.c:578:
+	in_pt->num_mutations = ((in_pt->num_children * in_pt->num_genes) * in_pt->mutation_rate) / 100;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1815: FILE: lib/genetic.c:589:
+	printk("finished genetic_calc_stats()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'genetic_calc_stats', this function's name, in a string
#1815: FILE: lib/genetic.c:589:
+	printk("finished genetic_calc_stats()\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1819: FILE: lib/genetic.c:593:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1820: FILE: lib/genetic.c:594:
+void genetic_new_generation(genetic_t * genetic)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1822: FILE: lib/genetic.c:596:
+	struct list_head * tmp;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1824: FILE: lib/genetic.c:598:
+	struct list_head * p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1825: FILE: lib/genetic.c:599:
+	phenotype_t * pt;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1831: FILE: lib/genetic.c:605:
+		/* Check to see if need to recalibrate fitness to take
+		   other phenotypes' rankings into account.  This

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1833: FILE: lib/genetic.c:607:
+		   have been ran. */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1855: FILE: lib/genetic.c:629:
+		if (pt->ops->get_fingerprint) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1867: FILE: lib/genetic.c:641:
+			/* We know the workload, lets put some known
+			   good genes back in */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1867: FILE: lib/genetic.c:641:
+			   good genes back in */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1882: FILE: lib/genetic.c:656:
+		/* Move the new children still sitting in the finished queue to
+		   the run queue */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1882: FILE: lib/genetic.c:656:
+		   the run queue */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1892: FILE: lib/genetic.c:666:
+
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1897: FILE: lib/genetic.c:671:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1907: FILE: lib/genetic.c:681:
+void genetic_generic_random_mutate_gene(genetic_child_t * child,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1908: FILE: lib/genetic.c:682:
+void genetic_generic_random_mutate_gene(genetic_child_t * child,
+		unsigned long gene_num)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1929: FILE: lib/genetic.c:703:
+void genetic_generic_iterative_mutate_gene(genetic_child_t * child,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1930: FILE: lib/genetic.c:704:
+void genetic_generic_iterative_mutate_gene(genetic_child_t * child,
+		unsigned long gene_num)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long)100' could be '100L'
#1949: FILE: lib/genetic.c:723:
+	new_value = ((long)(change * range) / (long)100) + old_value;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1967: FILE: lib/genetic.c:741:
+void genetic_generic_mutate_child(genetic_child_t * child)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1988: FILE: lib/genetic.c:762:
+void genetic_create_child_defaults(genetic_child_t * child)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1991: FILE: lib/genetic.c:765:
+	unsigned long * genes = child->genes;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1993: FILE: lib/genetic.c:767:
+	for (i = 0; i < child->num_genes; i++) {
+		genes[i] = child->gene_param[i].initial;
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1998: FILE: lib/genetic.c:772:
+void genetic_create_child_spread(genetic_child_t * child,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1999: FILE: lib/genetic.c:773:
+void genetic_create_child_spread(genetic_child_t * child,
+		unsigned long num_children)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2006: FILE: lib/genetic.c:780:
+	unsigned long * genes = child->genes;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2019: FILE: lib/genetic.c:793:
+
+}

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2021: FILE: lib/genetic.c:795:
+#if 0

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2023: FILE: lib/genetic.c:797:
+void genetic_generic_combine_genes(genetic_child_t * parent_a,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2024: FILE: lib/genetic.c:798:
+				   genetic_child_t * parent_b,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2025: FILE: lib/genetic.c:799:
+				   genetic_child_t * child)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2027: FILE: lib/genetic.c:801:
+	unsigned long * genes_a = (unsigned long *)parent_a->genes;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2028: FILE: lib/genetic.c:802:
+	unsigned long * genes_b = (unsigned long *)parent_b->genes;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2029: FILE: lib/genetic.c:803:
+	unsigned long * child_genes = (unsigned long *)child->genes;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2039: FILE: lib/genetic.c:813:
+		BUG();

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2043: FILE: lib/genetic.c:817:
+		if (parent_selector & 1) {
[...]
+		} else {
[...]

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2059: FILE: lib/genetic.c:833:
+void genetic_generic_combine_genes(genetic_child_t * parent_a,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2060: FILE: lib/genetic.c:834:
+				   genetic_child_t * parent_b,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2061: FILE: lib/genetic.c:835:
+				   genetic_child_t * child)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2063: FILE: lib/genetic.c:837:
+	unsigned long * genes_a = (unsigned long *)parent_a->genes;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2064: FILE: lib/genetic.c:838:
+	unsigned long * genes_b = (unsigned long *)parent_b->genes;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2065: FILE: lib/genetic.c:839:
+	unsigned long * child_genes = (unsigned long *)child->genes;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2082: FILE: lib/genetic.c:856:
+		/* Give child x% of parent A's genes value, plus
+		   100-x% of parent B's genes value */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2082: FILE: lib/genetic.c:856:
+		   100-x% of parent B's genes value */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2083: FILE: lib/genetic.c:857:
+		child_genes[i] = (((genes_a[i]+1) * percentage) +
 		                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2099: FILE: lib/genetic.c:873:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2104: FILE: lib/genetic.c:878:
+	if (get_option(&str,&i)) {
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2104: FILE: lib/genetic.c:878:
+	if (get_option(&str,&i)) {
 	                    ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2105: FILE: lib/genetic.c:879:
+	if (get_option(&str,&i)) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2116: FILE: lib/genetic.c:890:
+
+}

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2117: FILE: lib/genetic.c:891:
+__setup("genetic=", genetic_boot_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2118: FILE: lib/genetic.c:892:
+__setup("genetic_mutate_rate=", genetic_mutation_rate_change_setup);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2124: FILE: lib/genetic-debug.c:1:
+/*

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#2139: FILE: lib/genetic-debug.c:16:
+struct dentry * genetic_tree_root = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2139: FILE: lib/genetic-debug.c:16:
+struct dentry * genetic_tree_root = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2146: FILE: lib/genetic-debug.c:23:
+	genetic_t * genetic = (genetic_t *)s->private;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2162: FILE: lib/genetic-debug.c:39:
+static struct file_operations genetic_stat_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2174: FILE: lib/genetic-debug.c:51:
+	genetic_t * genetic = (genetic_t *)s->private;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2175: FILE: lib/genetic-debug.c:52:
+	struct list_head * p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2176: FILE: lib/genetic-debug.c:53:
+	phenotype_t * pt;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2191: FILE: lib/genetic-debug.c:68:
+static struct file_operations genetic_phenotype_average_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2198: FILE: lib/genetic-debug.c:75:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2205: FILE: lib/genetic-debug.c:82:
+	phenotype_t * pt = (phenotype_t *)s->private;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2207: FILE: lib/genetic-debug.c:84:
+	genetic_child_t * child = list_entry(pt->run_queue->next,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2210: FILE: lib/genetic-debug.c:87:
+	unsigned long * genes = (unsigned long *)child->genes;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2220: FILE: lib/genetic-debug.c:97:
+	phenotype_t * pt = (phenotype_t *)inode->i_private;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2225: FILE: lib/genetic-debug.c:102:
+static struct file_operations genetic_gene_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2232: FILE: lib/genetic-debug.c:109:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2243: FILE: lib/genetic-debug.c:120:
+	if (!parent) parent = genetic_tree_root;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2257: FILE: lib/genetic-debug.c:134:
+void dump_children(phenotype_t * pt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2260: FILE: lib/genetic-debug.c:137:
+	long * genes;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2269: FILE: lib/genetic-debug.c:146:
+		for (j = 0; j < pt->child_ranking[i]->num_genes; j++) {
+			pt->debug_history[pt->debug_index++ % debug_size] = genes[j];
+		}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2275: FILE: lib/genetic-debug.c:152:
+void dump_children(phenotype_t * pt) {}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2282: FILE: lib/fingerprinting.c:1:
+static int create_fingerprint(struct fingerprint * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2282: FILE: lib/fingerprinting.c:1:
+static int create_fingerprint(struct fingerprint * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2297: FILE: lib/fingerprinting.c:16:
+static long long get_top_fitness(phenotype_t * pt, struct fingerprint * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2297: FILE: lib/fingerprinting.c:16:
+static long long get_top_fitness(phenotype_t * pt, struct fingerprint * fp)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2302: FILE: lib/fingerprinting.c:21:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2305: FILE: lib/fingerprinting.c:24:
+	phenotype_t * pt = (phenotype_t *)inode->i_private;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2310: FILE: lib/fingerprinting.c:29:
+static struct file_operations top_fitness_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2319: FILE: lib/fingerprinting.c:38:
+	phenotype_t * pt = (phenotype_t *)inode->i_private;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2324: FILE: lib/fingerprinting.c:43:
+static struct file_operations snapshot_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2333: FILE: lib/fingerprinting.c:52:
+	phenotype_t * pt = (phenotype_t *)inode->i_private;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2338: FILE: lib/fingerprinting.c:57:
+static struct file_operations state_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2345: FILE: lib/fingerprinting.c:64:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2346: FILE: lib/fingerprinting.c:65:
+int genetic_init_fingerprinting(phenotype_t * pt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2349: FILE: lib/fingerprinting.c:68:
+	struct genetic_ops * ops = pt->ops;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2353: FILE: lib/fingerprinting.c:72:
+	if (num_genes) {
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2354: FILE: lib/fingerprinting.c:73:
+		pt->fp = (struct fingerprint *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2354: FILE: lib/fingerprinting.c:73:
+		pt->fp = (struct fingerprint *)kmalloc(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2358: FILE: lib/fingerprinting.c:77:
+			printk(KERN_ERR "genetic_register_phenotype: not enough"

ERROR:CODE_INDENT: code indent should use tabs where possible
#2359: FILE: lib/fingerprinting.c:78:
+^I^I^I^I       ^I"memory\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2359: FILE: lib/fingerprinting.c:78:
+^I^I^I^I       ^I"memory\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#2359: FILE: lib/fingerprinting.c:78:
+			printk(KERN_ERR "genetic_register_phenotype: not enough"
+				       	"memory\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#2359: FILE: lib/fingerprinting.c:78:
+			printk(KERN_ERR "genetic_register_phenotype: not enough"
+				       	"memory\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2365: FILE: lib/fingerprinting.c:84:
+		pt->fp_ss = (struct fp_snapshot *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2365: FILE: lib/fingerprinting.c:84:
+		pt->fp_ss = (struct fp_snapshot *)kmalloc(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2369: FILE: lib/fingerprinting.c:88:
+			printk(KERN_ERR "genetic_register_phenotype: not enough"

ERROR:CODE_INDENT: code indent should use tabs where possible
#2370: FILE: lib/fingerprinting.c:89:
+^I^I^I^I       ^I"memory\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2370: FILE: lib/fingerprinting.c:89:
+^I^I^I^I       ^I"memory\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#2370: FILE: lib/fingerprinting.c:89:
+			printk(KERN_ERR "genetic_register_phenotype: not enough"
+				       	"memory\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#2370: FILE: lib/fingerprinting.c:89:
+			printk(KERN_ERR "genetic_register_phenotype: not enough"
+				       	"memory\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2376: FILE: lib/fingerprinting.c:95:
+		pt->top_child = (unsigned long ***)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2376: FILE: lib/fingerprinting.c:95:
+		pt->top_child = (unsigned long ***)kmalloc(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2380: FILE: lib/fingerprinting.c:99:
+			printk(KERN_ERR "genetic_register_phenotype: not enough"

ERROR:CODE_INDENT: code indent should use tabs where possible
#2381: FILE: lib/fingerprinting.c:100:
+^I^I^I^I       ^I"memory\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2381: FILE: lib/fingerprinting.c:100:
+^I^I^I^I       ^I"memory\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#2381: FILE: lib/fingerprinting.c:100:
+			printk(KERN_ERR "genetic_register_phenotype: not enough"
+				       	"memory\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#2381: FILE: lib/fingerprinting.c:100:
+			printk(KERN_ERR "genetic_register_phenotype: not enough"
+				       	"memory\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2386: FILE: lib/fingerprinting.c:105:
+			pt->top_child[i] = (unsigned long **)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2386: FILE: lib/fingerprinting.c:105:
+			pt->top_child[i] = (unsigned long **)kmalloc(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2391: FILE: lib/fingerprinting.c:110:
+				printk(KERN_ERR "genetic_register_phenotype:\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#2391: FILE: lib/fingerprinting.c:110:
+				printk(KERN_ERR "genetic_register_phenotype:\

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2397: FILE: lib/fingerprinting.c:116:
+				pt->top_child[i][j] = (unsigned long *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2397: FILE: lib/fingerprinting.c:116:
+				pt->top_child[i][j] = (unsigned long *)kmalloc(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2402: FILE: lib/fingerprinting.c:121:
+					printk(KERN_ERR "genetic_register_phenotype: not enough memory\n");

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2407: FILE: lib/fingerprinting.c:126:
+					pt->top_child[i][j][k] = (unsigned long)ops->create_top_genes(pt);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2415: FILE: lib/fingerprinting.c:134:
+	pt->top_fitness = (long long ***)kmalloc(sizeof(long long ***) * 2, GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2417: FILE: lib/fingerprinting.c:136:
+		printk(KERN_ERR "genetic_register_phenotype: not enough"

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2417: FILE: lib/fingerprinting.c:136:
+	if (!pt->top_fitness) {
+		printk(KERN_ERR "genetic_register_phenotype: not enough"

WARNING:SPLIT_STRING: quoted string split across lines
#2418: FILE: lib/fingerprinting.c:137:
+		printk(KERN_ERR "genetic_register_phenotype: not enough"
+				"memory\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#2418: FILE: lib/fingerprinting.c:137:
+		printk(KERN_ERR "genetic_register_phenotype: not enough"
+				"memory\n");

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2423: FILE: lib/fingerprinting.c:142:
+		pt->top_fitness[i] = (long long **)kmalloc(sizeof(long long **) * 2, GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2425: FILE: lib/fingerprinting.c:144:
+			printk(KERN_ERR "genetic_register_phenotype: not"

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2425: FILE: lib/fingerprinting.c:144:
+		if (!pt->top_fitness[i]) {
+			printk(KERN_ERR "genetic_register_phenotype: not"

WARNING:SPLIT_STRING: quoted string split across lines
#2426: FILE: lib/fingerprinting.c:145:
+			printk(KERN_ERR "genetic_register_phenotype: not"
+					"enough memory\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#2426: FILE: lib/fingerprinting.c:145:
+			printk(KERN_ERR "genetic_register_phenotype: not"
+					"enough memory\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2431: FILE: lib/fingerprinting.c:150:
+			pt->top_fitness[i][j] = (long long *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2431: FILE: lib/fingerprinting.c:150:
+			pt->top_fitness[i][j] = (long long *)kmalloc(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2436: FILE: lib/fingerprinting.c:155:
+				printk(KERN_ERR "genetic_register_phenotype: "

WARNING:SPLIT_STRING: quoted string split across lines
#2437: FILE: lib/fingerprinting.c:156:
+				printk(KERN_ERR "genetic_register_phenotype: "
+						"not enough memory\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2441: FILE: lib/fingerprinting.c:160:
+			for (k = 0; k < 2; k++) {
+				pt->top_fitness[i][j][k] = 0;
+			}

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2454: FILE: lib/fingerprinting.c:173:
+			debugfs_create_file("top_fitness", S_IFREG|S_IRUGO,
 			                                          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2454: FILE: lib/fingerprinting.c:173:
+			debugfs_create_file("top_fitness", S_IFREG|S_IRUGO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2455: FILE: lib/fingerprinting.c:174:
+			debugfs_create_file("top_fitness", S_IFREG|S_IRUGO,
+				pt->fp_dir, pt, &top_fitness_ops);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2458: FILE: lib/fingerprinting.c:177:
+			debugfs_create_file("snapshot", S_IFREG|S_IRUGO,
 			                                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2458: FILE: lib/fingerprinting.c:177:
+			debugfs_create_file("snapshot", S_IFREG|S_IRUGO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2459: FILE: lib/fingerprinting.c:178:
+			debugfs_create_file("snapshot", S_IFREG|S_IRUGO,
+				pt->fp_dir, pt, &snapshot_ops);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2462: FILE: lib/fingerprinting.c:181:
+			debugfs_create_file("state", S_IFREG|S_IRUGO,
 			                                    ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2462: FILE: lib/fingerprinting.c:181:
+			debugfs_create_file("state", S_IFREG|S_IRUGO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2463: FILE: lib/fingerprinting.c:182:
+			debugfs_create_file("state", S_IFREG|S_IRUGO,
+				pt->fp_dir, pt, &state_ops);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2469: FILE: lib/fingerprinting.c:188:
+static void decay_fitness(phenotype_t * pt, struct fingerprint * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2469: FILE: lib/fingerprinting.c:188:
+static void decay_fitness(phenotype_t * pt, struct fingerprint * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2483: FILE: lib/fingerprinting.c:202:
+static void update_phenotype_top_performer(phenotype_t * pt, struct fingerprint * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2483: FILE: lib/fingerprinting.c:202:
+static void update_phenotype_top_performer(phenotype_t * pt, struct fingerprint * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2486: FILE: lib/fingerprinting.c:205:
+	unsigned long * genes;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2487: FILE: lib/fingerprinting.c:206:
+	long long * avg_genes;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2491: FILE: lib/fingerprinting.c:210:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2501: FILE: lib/fingerprinting.c:220:
+	if (pt->last_gen_avg_fitness >= top_fitness) {
+

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2508: FILE: lib/fingerprinting.c:227:
+		avg_genes = (long long *)kmalloc(sizeof(long long) * pt->num_genes, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#2508: FILE: lib/fingerprinting.c:227:
+		avg_genes = (long long *)kmalloc(sizeof(long long) * pt->num_genes, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2510: FILE: lib/fingerprinting.c:229:
+			printk(KERN_ERR "update_top_performers: unable to alloc space\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2510: FILE: lib/fingerprinting.c:229:
+		if (!avg_genes) {
+			printk(KERN_ERR "update_top_performers: unable to alloc space\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2534: FILE: lib/fingerprinting.c:253:
+static void update_top_performers(phenotype_t * master)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2536: FILE: lib/fingerprinting.c:255:
+	phenotype_t * pt;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2537: FILE: lib/fingerprinting.c:256:
+	struct list_head * p;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2542: FILE: lib/fingerprinting.c:261:
+		if (master->uid & pt->uid && master->uid != pt->uid) {
+			update_phenotype_top_performer(pt, master->fp);
+		}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2549: FILE: lib/fingerprinting.c:268:
+static void reintroduce_genes(phenotype_t * master)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2551: FILE: lib/fingerprinting.c:270:
+	struct fingerprint * fp = master->fp;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2552: FILE: lib/fingerprinting.c:271:
+	phenotype_t * pt;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2553: FILE: lib/fingerprinting.c:272:
+	unsigned long * top_genes;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2554: FILE: lib/fingerprinting.c:273:
+	unsigned long * genes;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2555: FILE: lib/fingerprinting.c:274:
+	struct list_head * p;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2562: FILE: lib/fingerprinting.c:281:
+		if (pt->num_genes) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2564: FILE: lib/fingerprinting.c:283:
+			/* Do this more intelligently, so can have n-points on
+			   the fingerprint */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2564: FILE: lib/fingerprinting.c:283:
+			   the fingerprint */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2578: FILE: include/linux/fingerprinting.h:1:
+#ifndef __LINUX_FINGERPRINTING_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2582: FILE: include/linux/fingerprinting.h:5:
+ * include/linux/fingerprinting.h

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2592: FILE: include/linux/fingerprinting.h:15:
+ * by the Free Software Foundation.
+*/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2631: FILE: include/linux/fingerprinting.h:54:
+extern void update_fp_snapshot(struct bio * bio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2631: FILE: include/linux/fingerprinting.h:54:
+extern void update_fp_snapshot(struct bio * bio);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2632: FILE: include/linux/fingerprinting.h:55:
+extern void calc_fp(struct fingerprint * fp, struct fp_snapshot * fp_ss);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2632: FILE: include/linux/fingerprinting.h:55:
+extern void calc_fp(struct fingerprint * fp, struct fp_snapshot * fp_ss);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2632: FILE: include/linux/fingerprinting.h:55:
+extern void calc_fp(struct fingerprint * fp, struct fp_snapshot * fp_ss);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2633: FILE: include/linux/fingerprinting.h:56:
+extern void reset_fp_snapshot(struct fp_snapshot * ss);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2633: FILE: include/linux/fingerprinting.h:56:
+extern void reset_fp_snapshot(struct fp_snapshot * ss);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2634: FILE: include/linux/fingerprinting.h:57:
+extern void reset_fp(struct fingerprint * fp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2634: FILE: include/linux/fingerprinting.h:57:
+extern void reset_fp(struct fingerprint * fp);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2635: FILE: include/linux/fingerprinting.h:58:
+extern void consolidate_fp_snapshot(struct fp_snapshot * master, struct fp_snapshot * instance);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2635: FILE: include/linux/fingerprinting.h:58:
+extern void consolidate_fp_snapshot(struct fp_snapshot * master, struct fp_snapshot * instance);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2635: FILE: include/linux/fingerprinting.h:58:
+extern void consolidate_fp_snapshot(struct fp_snapshot * master, struct fp_snapshot * instance);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2636: FILE: include/linux/fingerprinting.h:59:
+extern int fingerprint_state_show(struct seq_file *s, void *unused);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2637: FILE: include/linux/fingerprinting.h:60:
+extern int fingerprint_snapshot_show(struct seq_file *s, void *unused);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2638: FILE: include/linux/fingerprinting.h:61:
+extern int fingerprint_top_fitness_show(struct seq_file *s, void *unused);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2647: FILE: include/linux/fingerprinting.h:70:
+        *rem = *n % div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2647: FILE: include/linux/fingerprinting.h:70:
+        *rem = *n % div;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2648: FILE: include/linux/fingerprinting.h:71:
+        *n /= div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2648: FILE: include/linux/fingerprinting.h:71:
+        *n /= div;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2653: FILE: include/linux/fingerprinting.h:76:
+static inline void divl(int32_t high, int32_t low,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2654: FILE: include/linux/fingerprinting.h:77:
+                        int32_t div,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2654: FILE: include/linux/fingerprinting.h:77:
+                        int32_t div,$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2654: FILE: include/linux/fingerprinting.h:77:
+                        int32_t div,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2655: FILE: include/linux/fingerprinting.h:78:
+                        int32_t *q, int32_t *r)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2655: FILE: include/linux/fingerprinting.h:78:
+                        int32_t *q, int32_t *r)$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2655: FILE: include/linux/fingerprinting.h:78:
+                        int32_t *q, int32_t *r)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2657: FILE: include/linux/fingerprinting.h:80:
+        int64_t n = (u_int64_t)high << 32 | low;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2657: FILE: include/linux/fingerprinting.h:80:
+        int64_t n = (u_int64_t)high << 32 | low;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#2657: FILE: include/linux/fingerprinting.h:80:
+        int64_t n = (u_int64_t)high << 32 | low;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2658: FILE: include/linux/fingerprinting.h:81:
+        int64_t d = (u_int64_t)div << 31;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2658: FILE: include/linux/fingerprinting.h:81:
+        int64_t d = (u_int64_t)div << 31;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#2658: FILE: include/linux/fingerprinting.h:81:
+        int64_t d = (u_int64_t)div << 31;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2659: FILE: include/linux/fingerprinting.h:82:
+        int32_t q1 = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2659: FILE: include/linux/fingerprinting.h:82:
+        int32_t q1 = 0;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2659: FILE: include/linux/fingerprinting.h:82:
+        int32_t q1 = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2660: FILE: include/linux/fingerprinting.h:83:
+        int c = 32;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2660: FILE: include/linux/fingerprinting.h:83:
+        int c = 32;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2661: FILE: include/linux/fingerprinting.h:84:
+        while (n > 0xffffffff) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2661: FILE: include/linux/fingerprinting.h:84:
+        int c = 32;
+        while (n > 0xffffffff) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2661: FILE: include/linux/fingerprinting.h:84:
+        while (n > 0xffffffff) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2662: FILE: include/linux/fingerprinting.h:85:
+                q1 <<= 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2662: FILE: include/linux/fingerprinting.h:85:
+                q1 <<= 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2663: FILE: include/linux/fingerprinting.h:86:
+                if (n >= d) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2663: FILE: include/linux/fingerprinting.h:86:
+                if (n >= d) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2664: FILE: include/linux/fingerprinting.h:87:
+                        n -= d;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2664: FILE: include/linux/fingerprinting.h:87:
+                        n -= d;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2665: FILE: include/linux/fingerprinting.h:88:
+                        q1 |= 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2665: FILE: include/linux/fingerprinting.h:88:
+                        q1 |= 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2666: FILE: include/linux/fingerprinting.h:89:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2666: FILE: include/linux/fingerprinting.h:89:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2667: FILE: include/linux/fingerprinting.h:90:
+                d >>= 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2667: FILE: include/linux/fingerprinting.h:90:
+                d >>= 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2668: FILE: include/linux/fingerprinting.h:91:
+                c--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2668: FILE: include/linux/fingerprinting.h:91:
+                c--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2669: FILE: include/linux/fingerprinting.h:92:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2669: FILE: include/linux/fingerprinting.h:92:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2670: FILE: include/linux/fingerprinting.h:93:
+        q1 <<= c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2670: FILE: include/linux/fingerprinting.h:93:
+        q1 <<= c;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2671: FILE: include/linux/fingerprinting.h:94:
+        if (n) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2671: FILE: include/linux/fingerprinting.h:94:
+        if (n) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2672: FILE: include/linux/fingerprinting.h:95:
+                low = n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2672: FILE: include/linux/fingerprinting.h:95:
+                low = n;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2673: FILE: include/linux/fingerprinting.h:96:
+                *q = q1 | (low / div);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2673: FILE: include/linux/fingerprinting.h:96:
+                *q = q1 | (low / div);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2674: FILE: include/linux/fingerprinting.h:97:
+                *r = low % div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2674: FILE: include/linux/fingerprinting.h:97:
+                *r = low % div;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2675: FILE: include/linux/fingerprinting.h:98:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2675: FILE: include/linux/fingerprinting.h:98:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2676: FILE: include/linux/fingerprinting.h:99:
+                *r = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2676: FILE: include/linux/fingerprinting.h:99:
+                *r = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2677: FILE: include/linux/fingerprinting.h:100:
+                *q = q1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2677: FILE: include/linux/fingerprinting.h:100:
+                *q = q1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2678: FILE: include/linux/fingerprinting.h:101:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2678: FILE: include/linux/fingerprinting.h:101:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2679: FILE: include/linux/fingerprinting.h:102:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2679: FILE: include/linux/fingerprinting.h:102:
+        return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2684: FILE: include/linux/fingerprinting.h:107:
+        int32_t low, high;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2684: FILE: include/linux/fingerprinting.h:107:
+        int32_t low, high;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2684: FILE: include/linux/fingerprinting.h:107:
+        int32_t low, high;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2685: FILE: include/linux/fingerprinting.h:108:
+        low = *n & 0xffffffff;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2685: FILE: include/linux/fingerprinting.h:108:
+        int32_t low, high;
+        low = *n & 0xffffffff;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2685: FILE: include/linux/fingerprinting.h:108:
+        low = *n & 0xffffffff;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2686: FILE: include/linux/fingerprinting.h:109:
+        high = *n >> 32;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2686: FILE: include/linux/fingerprinting.h:109:
+        high = *n >> 32;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2687: FILE: include/linux/fingerprinting.h:110:
+        if (high) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2687: FILE: include/linux/fingerprinting.h:110:
+        if (high) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2688: FILE: include/linux/fingerprinting.h:111:
+                int32_t high1 = high % div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2688: FILE: include/linux/fingerprinting.h:111:
+                int32_t high1 = high % div;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2688: FILE: include/linux/fingerprinting.h:111:
+                int32_t high1 = high % div;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2689: FILE: include/linux/fingerprinting.h:112:
+                int32_t low1 = low;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2689: FILE: include/linux/fingerprinting.h:112:
+                int32_t low1 = low;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#2689: FILE: include/linux/fingerprinting.h:112:
+                int32_t low1 = low;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2690: FILE: include/linux/fingerprinting.h:113:
+                high /= div;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2690: FILE: include/linux/fingerprinting.h:113:
+                int32_t low1 = low;
+                high /= div;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2690: FILE: include/linux/fingerprinting.h:113:
+                high /= div;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2691: FILE: include/linux/fingerprinting.h:114:
+                divl(high1, low1, div, &low, (int32_t *)rem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2691: FILE: include/linux/fingerprinting.h:114:
+                divl(high1, low1, div, &low, (int32_t *)rem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2692: FILE: include/linux/fingerprinting.h:115:
+                *n = (int64_t)high << 32 | low;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2692: FILE: include/linux/fingerprinting.h:115:
+                *n = (int64_t)high << 32 | low;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2693: FILE: include/linux/fingerprinting.h:116:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2693: FILE: include/linux/fingerprinting.h:116:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2694: FILE: include/linux/fingerprinting.h:117:
+                *n = low / div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2694: FILE: include/linux/fingerprinting.h:117:
+                *n = low / div;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2695: FILE: include/linux/fingerprinting.h:118:
+                *rem = low % div;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2695: FILE: include/linux/fingerprinting.h:118:
+                *rem = low % div;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2696: FILE: include/linux/fingerprinting.h:119:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2696: FILE: include/linux/fingerprinting.h:119:
+        }$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2708: FILE: block/fingerprinting.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2709: FILE: block/fingerprinting.c:2:
+ * block/fingerprinting.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2718: FILE: block/fingerprinting.c:11:
+ * by the Free Software Foundation. $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2719: FILE: block/fingerprinting.c:12:
+ * by the Free Software Foundation. 
+*/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2732: FILE: block/fingerprinting.c:25:
+	phenotype_t * pt = (phenotype_t *)s->private;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2733: FILE: block/fingerprinting.c:26:
+	struct fingerprint * fp = pt->fp;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2755: FILE: block/fingerprinting.c:48:
+	phenotype_t * pt = (phenotype_t *)s->private;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2756: FILE: block/fingerprinting.c:49:
+	struct fp_snapshot * ss = pt->fp_ss;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2767: FILE: block/fingerprinting.c:60:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2771: FILE: block/fingerprinting.c:64:
+	phenotype_t * pt = (phenotype_t *)s->private;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2777: FILE: block/fingerprinting.c:70:
+				seq_printf(s, "top_fitness[%d][%d][%d]: %lld\n",
+					     i, j, k, pt->top_fitness[i][j][k]);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2782: FILE: block/fingerprinting.c:75:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2784: FILE: block/fingerprinting.c:77:
+static void update_avg_dist(struct fp_snapshot * ss, long head_pos)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2806: FILE: block/fingerprinting.c:99:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2808: FILE: block/fingerprinting.c:101:
+static void update_avg_size(struct fp_snapshot * ss, unsigned long size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2820: FILE: block/fingerprinting.c:113:
+void update_fp_snapshot(struct bio * bio)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2822: FILE: block/fingerprinting.c:115:
+	struct fp_snapshot * ss = bio->bi_bdev->bd_disk->fp_ss;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2838: FILE: block/fingerprinting.c:131:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2843: FILE: block/fingerprinting.c:136:
+void consolidate_fp_snapshot(struct fp_snapshot * master, struct fp_snapshot * instance)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2843: FILE: block/fingerprinting.c:136:
+void consolidate_fp_snapshot(struct fp_snapshot * master, struct fp_snapshot * instance)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2850: FILE: block/fingerprinting.c:143:
+	BUG_ON(!master);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2851: FILE: block/fingerprinting.c:144:
+	BUG_ON(!instance);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2863: FILE: block/fingerprinting.c:156:
+	if (total_ops) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2866: FILE: block/fingerprinting.c:159:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2871: FILE: block/fingerprinting.c:164:
+	if (total_ops) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2874: FILE: block/fingerprinting.c:167:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2878: FILE: block/fingerprinting.c:171:
+void reset_fp_snapshot(struct fp_snapshot * ss)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2883: FILE: block/fingerprinting.c:176:
+void reset_fp(struct fingerprint * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2889: FILE: block/fingerprinting.c:182:
+void calc_fp(struct fingerprint * fp, struct fp_snapshot * fp_ss)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2889: FILE: block/fingerprinting.c:182:
+void calc_fp(struct fingerprint * fp, struct fp_snapshot * fp_ss)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2911: FILE: block/fingerprinting.c:204:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2951: FILE: include/linux/genhd.h:95:
+	struct fp_snapshot * fp_ss;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2963: FILE: block/genhd.c:448:
 }
+static ssize_t disk_fp_read(struct gendisk * disk, char *page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2963: FILE: block/genhd.c:448:
+static ssize_t disk_fp_read(struct gendisk * disk, char *page)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2984: FILE: block/genhd.c:490:
 };
+static struct disk_attribute disk_attr_fp = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2985: FILE: block/genhd.c:491:
+	.attr = {.name = "fp", .mode = S_IRUGO },

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*disk->fp_ss)...) over kmalloc(sizeof(struct fp_snapshot)...)
#3004: FILE: block/genhd.c:768:
+	disk->fp_ss = kmalloc(sizeof(struct fp_snapshot), GFP_KERNEL);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3019: FILE: block/Kconfig:69:
+config FINGERPRINTING
+       bool "I/O Workload Fingerprinting"
+       help
+         Say Y here if you want workload data to be classified and
+         used to tune the I/O schedulers.  Otherwise say N.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3150: FILE: fs/inode.c:1168:
+int relatime_interval __read_mostly = 24*60*60;
                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3150: FILE: fs/inode.c:1168:
+int relatime_interval __read_mostly = 24*60*60;
                                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3238: FILE: fs/namespace.c:1375:
+	printk(KERN_INFO "Mount all filesystems with"

WARNING:SPLIT_STRING: quoted string split across lines
#3239: FILE: fs/namespace.c:1376:
+	printk(KERN_INFO "Mount all filesystems with"
+		"default relative atime updates: %s.\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#3239: FILE: fs/namespace.c:1376:
+	printk(KERN_INFO "Mount all filesystems with"
+		"default relative atime updates: %s.\n",

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#3244: FILE: fs/namespace.c:1381:
+__setup("default_relatime=", set_default_relatime);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3255: FILE: fs/namespace.c:1432:
+	else if (default_relatime &&
+				!(flags & (MNT_NOATIME | MNT_NODIRATIME))) {

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#3402: FILE: drivers/block/loop.c:579:
	set_user_nice(current, -20);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3403: FILE: drivers/block/loop.c:580:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3422: FILE: include/linux/sched.h:1342:
+extern void sched_privileged_task(struct task_struct *p);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#3469: FILE: kernel/sched.c:3618:
+	sysctl_sched_privileged_nice_level = simple_strtol(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#3472: FILE: kernel/sched.c:3621:
+__setup("privileged_nice_level=", privileged_nice_level_setup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#3506: FILE: kernel/sched.c:3655:
+EXPORT_SYMBOL(sched_privileged_task);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#3566: FILE: init/Kconfig:1:
+source "init/Kconfig.cfs"

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3578: FILE: init/Kconfig.cfs:3:
+choice
+	prompt "CFS predefined setups"
+	default INTERACTIVE_DESKTOP
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3601: FILE: init/Kconfig.cfs:26:
+config HIGHLY_INTERACTIVE_DESKTOP^I$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3613: FILE: init/Kconfig.cfs:38:
+config CUSTOM_SCHED_SETUP
+	bool "Custom scheduler Setup"
+	select BOOST_PRIVILEGED_TASKS
+	help
+	  Custom setup.
+	  Manual setup of "Completely Fair Scheduler" by the user.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3662: FILE: init/Kconfig.cfs:87:
+config SYSCTL_PRIVILEGED_NICE_LEVEL
+	bool "Change privileged tasks nice level through sysctl"
+	default n
+	help
+	  If this option is enabled, a file called "sched_privileged_nice_level" will be created
+	  on /proc/sys/kernel that will allow to modify the privileged tasks priority.
+
+	  This *ONLY* will take effect on tasks that are executed after the change.
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308752.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 258 errors, 335 warnings, 124 checks, 3388 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308752.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
