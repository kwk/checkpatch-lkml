WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perfcounters-core-for-linus

WARNING:TYPO_SPELLING: 'Substract' may be misspelled - perhaps 'Subtract'?
#68: 
      perf tools: Substract -Wformat-nonliteral from Wformat=2 in extra flags
                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#299: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#304: FILE: arch/powerpc/kernel/perf_callchain.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#321: FILE: arch/powerpc/kernel/perf_callchain.c:18:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:SPACING: No space is necessary after a cast
#382: FILE: arch/powerpc/kernel/perf_callchain.c:79:
+		fp = (unsigned long *) sp;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#442: FILE: arch/powerpc/kernel/perf_callchain.c:139:
+	unsigned long addr = (unsigned long) ptr;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptep"
#462: FILE: arch/powerpc/kernel/perf_callchain.c:159:
+	if (ptep == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#541: FILE: arch/powerpc/kernel/perf_callchain.c:238:
+	sf = (struct signal_frame_64 __user *) sp;

CHECK:SPACING: No space is necessary after a cast
#542: FILE: arch/powerpc/kernel/perf_callchain.c:239:
+	if (read_user_stack_64((unsigned long __user *) &sf->pinfo, &pinfo) ||

CHECK:SPACING: No space is necessary after a cast
#543: FILE: arch/powerpc/kernel/perf_callchain.c:240:
+	    read_user_stack_64((unsigned long __user *) &sf->puc, &puc))

CHECK:SPACING: No space is necessary after a cast
#545: FILE: arch/powerpc/kernel/perf_callchain.c:242:
+	return pinfo == (unsigned long) &sf->info &&

CHECK:SPACING: No space is necessary after a cast
#546: FILE: arch/powerpc/kernel/perf_callchain.c:243:
+		puc == (unsigned long) &sf->uc;

CHECK:SPACING: No space is necessary after a cast
#566: FILE: arch/powerpc/kernel/perf_callchain.c:263:
+		fp = (unsigned long __user *) sp;

CHECK:SPACING: No space is necessary after a cast
#585: FILE: arch/powerpc/kernel/perf_callchain.c:282:
+			sigframe = (struct signal_frame_64 __user *) sp;

CHECK:SPACING: No space is necessary after a cast
#702: FILE: arch/powerpc/kernel/perf_callchain.c:399:
+	sf = (struct signal_frame_32 __user *) (unsigned long) sp;

CHECK:SPACING: No space is necessary after a cast
#703: FILE: arch/powerpc/kernel/perf_callchain.c:400:
+	if (read_user_stack_32((unsigned int __user *) &sf->sctx.regs, &regs))

CHECK:SPACING: No space is necessary after a cast
#705: FILE: arch/powerpc/kernel/perf_callchain.c:402:
+	return regs == (unsigned long) &sf->mctx;

CHECK:SPACING: No space is necessary after a cast
#713: FILE: arch/powerpc/kernel/perf_callchain.c:410:
+	sf = (struct rt_signal_frame_32 __user *) (unsigned long) sp;

CHECK:SPACING: No space is necessary after a cast
#714: FILE: arch/powerpc/kernel/perf_callchain.c:411:
+	if (read_user_stack_32((unsigned int __user *) &sf->uc.uc_regs, &regs))

CHECK:SPACING: No space is necessary after a cast
#716: FILE: arch/powerpc/kernel/perf_callchain.c:413:
+	return regs == (unsigned long) &sf->uc.uc_mcontext;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: arch/powerpc/kernel/perf_callchain.c:417:
+static unsigned int __user *signal_frame_32_regs(unsigned int sp,
+				unsigned int next_sp, unsigned int next_ip)

CHECK:SPACING: No space is necessary after a cast
#735: FILE: arch/powerpc/kernel/perf_callchain.c:432:
+		sf = (struct signal_frame_32 __user *) (unsigned long) sp;

CHECK:SPACING: No space is necessary after a cast
#742: FILE: arch/powerpc/kernel/perf_callchain.c:439:
+		rt_sf = (struct rt_signal_frame_32 __user *) (unsigned long) sp;

CHECK:SPACING: No space is necessary after a cast
#767: FILE: arch/powerpc/kernel/perf_callchain.c:464:
+		fp = (unsigned int __user *) (unsigned long) sp;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#871: FILE: arch/powerpc/mm/slb.c:136:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#964: FILE: arch/x86/include/asm/perf_counter.h:96:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1004: FILE: arch/x86/kernel/cpu/perf_counter.c:44:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#1008: FILE: arch/x86/kernel/cpu/perf_counter.c:48:
+#define X86_DEBUGCTL_TR			(1 << 6)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1009: FILE: arch/x86/kernel/cpu/perf_counter.c:49:
+#define X86_DEBUGCTL_BTS		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1010: FILE: arch/x86/kernel/cpu/perf_counter.c:50:
+#define X86_DEBUGCTL_BTINT		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1011: FILE: arch/x86/kernel/cpu/perf_counter.c:51:
+#define X86_DEBUGCTL_BTS_OFF_OS		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1012: FILE: arch/x86/kernel/cpu/perf_counter.c:52:
+#define X86_DEBUGCTL_BTS_OFF_USR	(1 << 10)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "x86_pmu.enable_bts"
#1066: FILE: arch/x86/kernel/cpu/perf_counter.c:718:
+	return x86_pmu.enable_bts != NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1151: FILE: arch/x86/kernel/cpu/perf_counter.c:803:
+	if (err)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1153: FILE: arch/x86/kernel/cpu/perf_counter.c:805:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'attr->config == PERF_COUNT_HW_BRANCH_INSTRUCTIONS'
#1238: FILE: arch/x86/kernel/cpu/perf_counter.c:986:
+	if ((attr->config == PERF_COUNT_HW_BRANCH_INSTRUCTIONS) &&
+	    (hwc->sample_period == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hwc->sample_period == 1'
#1238: FILE: arch/x86/kernel/cpu/perf_counter.c:986:
+	if ((attr->config == PERF_COUNT_HW_BRANCH_INSTRUCTIONS) &&
+	    (hwc->sample_period == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event ==
 		      x86_pmu.event_map(PERF_COUNT_HW_BRANCH_INSTRUCTIONS)'
#1340: FILE: arch/x86/kernel/cpu/perf_counter.c:1344:
+	if (unlikely((event ==
+		      x86_pmu.event_map(PERF_COUNT_HW_BRANCH_INSTRUCTIONS)) &&
+		     (hwc->sample_period == 1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hwc->sample_period == 1'
#1340: FILE: arch/x86/kernel/cpu/perf_counter.c:1344:
+	if (unlikely((event ==
+		      x86_pmu.event_map(PERF_COUNT_HW_BRANCH_INSTRUCTIONS)) &&
+		     (hwc->sample_period == 1)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1482: FILE: include/linux/perf_counter.h:219:
+#define PERF_COUNTER_IOC_SET_OUTPUT	_IO ('$', 5)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1482: FILE: include/linux/perf_counter.h:219:
+#define PERF_COUNTER_IOC_SET_OUTPUT	_IO ('$', 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1490: FILE: include/linux/perf_counter.h:419:
+#define PERF_FLAG_FD_NO_GROUP	(1U << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1491: FILE: include/linux/perf_counter.h:420:
+#define PERF_FLAG_FD_OUTPUT	(1U << 1)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1627: FILE: kernel/perf_counter.c:1702:
+		fput(counter->output->filp);
 		                      ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1746: FILE: kernel/perf_counter.c:4291:
+		fput(old_output->filp);
 		                 ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2417: FILE: tools/perf/builtin-annotate.c:494:
+	dump_printf("%p [%p]: PERF_EVENT (IP, %d): %d: %p\n",
 		(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2465: FILE: tools/perf/builtin-annotate.c:569:
+	dump_printf("%p [%p]: PERF_EVENT_MMAP %d: [%p(%p) @ %p]: %s\n",
 		(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2487: FILE: tools/perf/builtin-annotate.c:595:
+	dump_printf("%p [%p]: PERF_EVENT_COMM: %s:%d\n",
 		(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2511: FILE: tools/perf/builtin-annotate.c:618:
+	dump_printf("%p [%p]: PERF_EVENT_FORK: %d:%d\n",
 		(void *)(offset + head),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'input_stat.st_uid != geteuid()'
#2605: FILE: tools/perf/builtin-annotate.c:976:
+	if (!force && input_stat.st_uid && (input_stat.st_uid != geteuid())) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2635: FILE: tools/perf/builtin-annotate.c:1021:
+	dump_printf("%p [%p]: event: %d\n",
 			(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2643: FILE: tools/perf/builtin-annotate.c:1028:
+		dump_printf("%p [%p]: skipping unknown header type: %d\n",
 			(void *)(offset + head),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2762: FILE: tools/perf/builtin-record.c:553:
 
+

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#2822: FILE: tools/perf/builtin-report.c:50:
+static char		default_pretty_printing_style[] = "normal";

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3375: FILE: tools/perf/builtin-report.c:696:
+
+

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#3386: FILE: tools/perf/builtin-report.c:741:
+	dump_printf(" ...... map: %Lx -> %Lx\n", *ipp, ip);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#3444: FILE: tools/perf/builtin-report.c:1124:
+	dump_printf("%p [%p]: PERF_EVENT_SAMPLE (IP, %d): %d/%d: %p period: %Ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3445: FILE: tools/perf/builtin-report.c:1125:
+	dump_printf("%p [%p]: PERF_EVENT_SAMPLE (IP, %d): %d/%d: %p period: %Ld\n",
 		(void *)(offset + head),

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#3453: FILE: tools/perf/builtin-report.c:1137:
+		dump_printf("... chain: nr:%Lu\n", chain->nr);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#3462: FILE: tools/perf/builtin-report.c:1146:
+				dump_printf("..... %2d: %016Lx\n", i, chain->ips[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3502: FILE: tools/perf/builtin-report.c:1214:
+	dump_printf("%p [%p]: PERF_EVENT_MMAP %d/%d: [%p(%p) @ %p]: %s\n",
 		(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3525: FILE: tools/perf/builtin-report.c:1242:
+	dump_printf("%p [%p]: PERF_EVENT_COMM: %s:%d\n",
 		(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3551: FILE: tools/perf/builtin-report.c:1266:
+	dump_printf("%p [%p]: PERF_EVENT_%s: (%d:%d):(%d:%d)\n",
 		(void *)(offset + head),

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#3568: FILE: tools/perf/builtin-report.c:1294:
+	dump_printf("%p [%p]: PERF_EVENT_LOST: id:%Ld: lost:%Ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3569: FILE: tools/perf/builtin-report.c:1295:
+	dump_printf("%p [%p]: PERF_EVENT_LOST: id:%Ld: lost:%Ld\n",
 		(void *)(offset + head),

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#3649: FILE: tools/perf/builtin-report.c:1322:
+	dump_printf("%p [%p]: PERF_EVENT_READ: %d %d %s %Lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3650: FILE: tools/perf/builtin-report.c:1323:
+	dump_printf("%p [%p]: PERF_EVENT_READ: %d %d %s %Lu\n",
 			(void *)(offset + head),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'input_stat.st_uid != geteuid()'
#3708: FILE: tools/perf/builtin-report.c:1406:
+	if (!force && input_stat.st_uid && (input_stat.st_uid != geteuid())) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3758: FILE: tools/perf/builtin-report.c:1494:
+	dump_printf("\n%p [%p]: event: %d\n",
 			(void *)(offset + head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3766: FILE: tools/perf/builtin-report.c:1501:
+		dump_printf("%p [%p]: skipping unknown header type: %d\n",
 			(void *)(offset + head),

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#3867: FILE: tools/perf/builtin-stat.c:80:
+struct stats
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3881: FILE: tools/perf/builtin-stat.c:91:
+	stats->M2 += delta*(val - stats->mean);
 	                  ^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#3963: FILE: tools/perf/builtin-stat.c:226:
+		fprintf(stderr, "%s: %Ld %Ld %Ld\n", event_name(counter),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3964: FILE: tools/perf/builtin-stat.c:227:
+		fprintf(stderr, "%s: %Ld %Ld %Ld\n", event_name(counter),
+				count[0], count[1], count[2]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4002: FILE: tools/perf/builtin-stat.c:324:
+	fprintf(stderr, "   ( +- %7.3f%% )",
+			100 * stddev_stats(&event_res_stats[counter][0]) / avg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4018: FILE: tools/perf/builtin-stat.c:335:
+		fprintf(stderr, " # %10.3f CPUs ",
+				avg / avg_stats(&walltime_nsecs_stats));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4041: FILE: tools/perf/builtin-stat.c:348:
+		fprintf(stderr, " # %10.3f M/sec",
+				1000.0 * avg / avg_stats(&runtime_nsecs_stats));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4159: FILE: tools/perf/builtin-stat.c:380:
+		fprintf(stderr, "  (scaled from %.2f%%)",
+				100 * avg_running / avg_enabled);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4188: FILE: tools/perf/builtin-stat.c:408:
+			avg_stats(&walltime_nsecs_stats)/1e9);
 			                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4192: FILE: tools/perf/builtin-stat.c:411:
+				100*stddev_stats(&walltime_nsecs_stats) /
 				   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4233: FILE: tools/perf/builtin-top.c:125:
+	char command[PATH_MAX*2];
 	                     ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4272: FILE: tools/perf/builtin-top.c:501:
+		syme = rb_entry(nd, struct sym_entry, rb_node);
 		                ^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4376: FILE: tools/perf/builtin-trace.c:1:
+#include "builtin.h"

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#4391: FILE: tools/perf/builtin-trace.c:16:
+static char		const *input_name = "perf.data";

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#4396: FILE: tools/perf/builtin-trace.c:21:
+static unsigned long	total = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#4397: FILE: tools/perf/builtin-trace.c:22:
+static unsigned long	total_comm = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4405: FILE: tools/perf/builtin-trace.c:30:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4414: FILE: tools/perf/builtin-trace.c:39:
+	dump_printf("%p [%p]: PERF_EVENT_COMM: %s:%d\n",
+		(void *)(offset + head),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#4418: FILE: tools/perf/builtin-trace.c:43:
+	if (thread == NULL ||

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#4460: FILE: tools/perf/builtin-trace.c:85:
+	dump_printf("%p [%p]: PERF_EVENT_SAMPLE (IP, %d): %d/%d: %p period: %Ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4461: FILE: tools/perf/builtin-trace.c:86:
+	dump_printf("%p [%p]: PERF_EVENT_SAMPLE (IP, %d): %d/%d: %p period: %Ld\n",
+		(void *)(offset + head),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#4470: FILE: tools/perf/builtin-trace.c:95:
+	if (thread == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4487: FILE: tools/perf/builtin-trace.c:112:
+	} else if (cpumode == PERF_EVENT_MISC_USER) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#4579: FILE: tools/perf/builtin-trace.c:204:
+		die("No trace sample to read. Did you call perf record "
+		    "without -R?");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4615: FILE: tools/perf/builtin-trace.c:240:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4617: FILE: tools/perf/builtin-trace.c:242:
+	if (!size || process_event(event, offset, head) < 0) {
+

WARNING:TYPO_SPELLING: 'tha' may be misspelled - perhaps 'than'?
#4661: FILE: tools/perf/builtin-trace.c:286:
+		 * Special case: if there's an argument left then assume tha
 		                                                         ^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4668: FILE: tools/perf/builtin-trace.c:293:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4681: FILE: tools/perf/builtin.h:25:
+extern int cmd_trace(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4764: FILE: tools/perf/util/color.c:170:
+static int __color_vfprintf(FILE *fp, const char *color, const char *fmt,
 		va_list args, const char *trail)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#4874: FILE: tools/perf/util/config.c:622:
 		switch (contents[offset]) {
[...]
+			default: break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4877: FILE: tools/perf/util/config.c:625:
+			default: break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4899: FILE: tools/perf/util/debug.c:1:
+/* For general debugging purposes */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#4911: FILE: tools/perf/util/debug.c:13:
+int verbose = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#4912: FILE: tools/perf/util/debug.c:14:
+int dump_trace = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4956: FILE: tools/perf/util/debug.c:58:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4978: FILE: tools/perf/util/debug.c:80:
+		if (((i & 15) == 15) || i == event->header.size-1) {
 		                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4980: FILE: tools/perf/util/debug.c:82:
+			for (j = 0; j < 15-(i & 15); j++)
 			                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4983: FILE: tools/perf/util/debug.c:85:
+				if (isprint(raw_event[i-15+j]))
 				                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4983: FILE: tools/perf/util/debug.c:85:
+				if (isprint(raw_event[i-15+j]))
 				                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4985: FILE: tools/perf/util/debug.c:87:
+							  raw_event[i-15+j]);
 							             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4985: FILE: tools/perf/util/debug.c:87:
+							  raw_event[i-15+j]);
 							                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5000: FILE: tools/perf/util/debug.h:1:
+/* For debugging general purposes */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#5005: FILE: tools/perf/util/debug.h:6:
+int eprintf(const char *fmt, ...) __attribute__((format(printf, 1, 2)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#5006: FILE: tools/perf/util/debug.h:7:
+int dump_printf(const char *fmt, ...) __attribute__((format(printf, 1, 2)));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5014: FILE: tools/perf/util/event.h:1:
+#ifndef __PERF_EVENT_H

ERROR:SPACING: space required after that ',' (ctx:VxV)
#5068: FILE: tools/perf/util/event.h:55:
+	u32 pid,tid;
 	       ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5075: FILE: tools/perf/util/event.h:62:
+typedef union event_union {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct map *' should also have an identifier name
#5090: FILE: tools/perf/util/event.h:77:
+	u64			(*map_ip)(struct map *, u64);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#5090: FILE: tools/perf/util/event.h:77:
+	u64			(*map_ip)(struct map *, u64);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5193: FILE: tools/perf/util/map.c:1:
+#include "event.h"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5214: FILE: tools/perf/util/map.c:22:
+ struct map *map__new(struct mmap_event *event, char *cwd, int cwdlen)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#5218: FILE: tools/perf/util/map.c:26:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self->dso"
#5245: FILE: tools/perf/util/map.c:53:
+		if (self->dso == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#5275: FILE: tools/perf/util/map.c:83:
+		struct map *t = l;
+		l = r;

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#5287: FILE: tools/perf/util/map.c:95:
+	return fprintf(fp, " %Lx-%Lx %Lx %s\n",

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#5344: FILE: tools/perf/util/parse-events.c:52:
+static const char *hw_event_names[] = {

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#5353: FILE: tools/perf/util/parse-events.c:62:
+static const char *sw_event_names[] = {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5387: FILE: tools/perf/util/parse-events.c:114:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next)	       \
 	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sys_dirent.d_type == DT_DIR &&				       \
 	   (strcmp(sys_dirent.d_name, ".")) &&				       \
 	   (strcmp(sys_dirent.d_name, "..")))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sys_dirent' - possible side-effects?
#5387: FILE: tools/perf/util/parse-events.c:114:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next)	       \
 	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sys_dirent.d_type == DT_DIR &&				       \
 	   (strcmp(sys_dirent.d_name, ".")) &&				       \
 	   (strcmp(sys_dirent.d_name, "..")))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sys_dirent' may be better as '(sys_dirent)' to avoid precedence issues
#5387: FILE: tools/perf/util/parse-events.c:114:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next)	       \
 	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sys_dirent.d_type == DT_DIR &&				       \
 	   (strcmp(sys_dirent.d_name, ".")) &&				       \
 	   (strcmp(sys_dirent.d_name, "..")))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sys_next' - possible side-effects?
#5387: FILE: tools/perf/util/parse-events.c:114:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next)	       \
 	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sys_dirent.d_type == DT_DIR &&				       \
 	   (strcmp(sys_dirent.d_name, ".")) &&				       \
 	   (strcmp(sys_dirent.d_name, "..")))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sys_next' may be better as '(sys_next)' to avoid precedence issues
#5387: FILE: tools/perf/util/parse-events.c:114:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next)	       \
 	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sys_dirent.d_type == DT_DIR &&				       \
 	   (strcmp(sys_dirent.d_name, ".")) &&				       \
 	   (strcmp(sys_dirent.d_name, "..")))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#5388: FILE: tools/perf/util/parse-events.c:115:
 	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	       \
+	if (sys_dirent.d_type == DT_DIR &&				       \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5401: FILE: tools/perf/util/parse-events.c:135:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next)	       \
 	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (evt_dirent.d_type == DT_DIR &&				       \
 	   (strcmp(evt_dirent.d_name, ".")) &&				       \
 	   (strcmp(evt_dirent.d_name, "..")) &&				       \
 	   (!tp_event_has_id(&sys_dirent, &evt_dirent)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sys_dirent' may be better as '(sys_dirent)' to avoid precedence issues
#5401: FILE: tools/perf/util/parse-events.c:135:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next)	       \
 	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (evt_dirent.d_type == DT_DIR &&				       \
 	   (strcmp(evt_dirent.d_name, ".")) &&				       \
 	   (strcmp(evt_dirent.d_name, "..")) &&				       \
 	   (!tp_event_has_id(&sys_dirent, &evt_dirent)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'evt_dirent' - possible side-effects?
#5401: FILE: tools/perf/util/parse-events.c:135:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next)	       \
 	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (evt_dirent.d_type == DT_DIR &&				       \
 	   (strcmp(evt_dirent.d_name, ".")) &&				       \
 	   (strcmp(evt_dirent.d_name, "..")) &&				       \
 	   (!tp_event_has_id(&sys_dirent, &evt_dirent)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'evt_dirent' may be better as '(evt_dirent)' to avoid precedence issues
#5401: FILE: tools/perf/util/parse-events.c:135:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next)	       \
 	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (evt_dirent.d_type == DT_DIR &&				       \
 	   (strcmp(evt_dirent.d_name, ".")) &&				       \
 	   (strcmp(evt_dirent.d_name, "..")) &&				       \
 	   (!tp_event_has_id(&sys_dirent, &evt_dirent)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'evt_next' - possible side-effects?
#5401: FILE: tools/perf/util/parse-events.c:135:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next)	       \
 	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (evt_dirent.d_type == DT_DIR &&				       \
 	   (strcmp(evt_dirent.d_name, ".")) &&				       \
 	   (strcmp(evt_dirent.d_name, "..")) &&				       \
 	   (!tp_event_has_id(&sys_dirent, &evt_dirent)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'evt_next' may be better as '(evt_next)' to avoid precedence issues
#5401: FILE: tools/perf/util/parse-events.c:135:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next)	       \
 	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (evt_dirent.d_type == DT_DIR &&				       \
 	   (strcmp(evt_dirent.d_name, ".")) &&				       \
 	   (strcmp(evt_dirent.d_name, "..")) &&				       \
 	   (!tp_event_has_id(&sys_dirent, &evt_dirent)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#5402: FILE: tools/perf/util/parse-events.c:136:
 	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)        \
+	if (evt_dirent.d_type == DT_DIR &&				       \

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5448: FILE: tools/perf/util/parse-events.c:175:
+				 O_RDONLY|O_DIRECTORY), evt_dir_fd;
 				         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#5508: FILE: tools/perf/util/parse-events.c:233:
+	if (path) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5513: FILE: tools/perf/util/parse-events.c:238:
+	} else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5571: FILE: tools/perf/util/parse-events.c:644:
+				 O_RDONLY|O_DIRECTORY), evt_dir_fd;
 				         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5590: FILE: tools/perf/util/parse-events.h:1:
+#ifndef _PARSE_EVENTS_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5604: FILE: tools/perf/util/parse-events.h:15:
+extern struct tracepoint_path *tracepoint_id_to_path(u64 config);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5612: FILE: tools/perf/util/parse-events.h:21:
+extern const char *event_name(int ctr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5613: FILE: tools/perf/util/parse-events.h:22:
+extern const char *__event_name(int type, u64 config);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5621: FILE: tools/perf/util/parse-events.h:33:
 
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'syms' - possible side-effects?
#5851: FILE: tools/perf/util/symbol.c:313:
+#define elf_symtab__for_each_symbol(syms, nr_syms, idx, sym) \
+	for (idx = 0, gelf_getsym(syms, idx, &sym);\
+	     idx < nr_syms; \
+	     idx++, gelf_getsym(syms, idx, &sym))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nr_syms' may be better as '(nr_syms)' to avoid precedence issues
#5851: FILE: tools/perf/util/symbol.c:313:
+#define elf_symtab__for_each_symbol(syms, nr_syms, idx, sym) \
+	for (idx = 0, gelf_getsym(syms, idx, &sym);\
+	     idx < nr_syms; \
+	     idx++, gelf_getsym(syms, idx, &sym))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#5851: FILE: tools/perf/util/symbol.c:313:
+#define elf_symtab__for_each_symbol(syms, nr_syms, idx, sym) \
+	for (idx = 0, gelf_getsym(syms, idx, &sym);\
+	     idx < nr_syms; \
+	     idx++, gelf_getsym(syms, idx, &sym))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sym' - possible side-effects?
#5851: FILE: tools/perf/util/symbol.c:313:
+#define elf_symtab__for_each_symbol(syms, nr_syms, idx, sym) \
+	for (idx = 0, gelf_getsym(syms, idx, &sym);\
+	     idx < nr_syms; \
+	     idx++, gelf_getsym(syms, idx, &sym))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sym' may be better as '(sym)' to avoid precedence issues
#5851: FILE: tools/perf/util/symbol.c:313:
+#define elf_symtab__for_each_symbol(syms, nr_syms, idx, sym) \
+	for (idx = 0, gelf_getsym(syms, idx, &sym);\
+	     idx < nr_syms; \
+	     idx++, gelf_getsym(syms, idx, &sym))

CHECK:BRACES: braces {} should be used on all arms of this statement
#6219: FILE: tools/perf/util/symbol.c:1003:
+	if (err <= 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6222: FILE: tools/perf/util/symbol.c:1006:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6241: FILE: tools/perf/util/symbol.c:1025:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6293: FILE: tools/perf/util/thread.c:1:
+#include "../perf.h"

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#6305: FILE: tools/perf/util/thread.c:13:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#6350: FILE: tools/perf/util/thread.c:58:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "th"
#6366: FILE: tools/perf/util/thread.c:74:
+	if (th != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#6433: FILE: tools/perf/util/thread.c:141:
+		struct map *new = map__clone(map);
+		if (!new)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#6445: FILE: tools/perf/util/thread.c:153:
+	if (self == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#6458: FILE: tools/perf/util/thread.c:166:
+	struct rb_node *nd;
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#6460: FILE: tools/perf/util/thread.c:168:
+	for (nd = rb_first(threads); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#6460: FILE: tools/perf/util/thread.c:168:
+	for (nd = rb_first(threads); nd; nd = rb_next(nd)) {
 	                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#6460: FILE: tools/perf/util/thread.c:168:
+	for (nd = rb_first(threads); nd; nd = rb_next(nd)) {
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#6460: FILE: tools/perf/util/thread.c:168:
+	for (nd = rb_first(threads); nd; nd = rb_next(nd)) {
 	                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#6461: FILE: tools/perf/util/thread.c:169:
+		struct thread *pos = rb_entry(nd, struct thread, rb_node);
 		                              ^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6474: FILE: tools/perf/util/thread.h:1:
+#include <linux/rbtree.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6501: FILE: tools/perf/util/trace-event-info.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#6516: FILE: tools/perf/util/trace-event-info.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#6517: FILE: tools/perf/util/trace-event-info.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6540: FILE: tools/perf/util/trace-event-info.c:40:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6571: FILE: tools/perf/util/trace-event-info.c:71:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6604: FILE: tools/perf/util/trace-event-info.c:104:
+	static char debugfs[MAX_PATH+1];
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6612: FILE: tools/perf/util/trace-event-info.c:112:
+	if ((fp = fopen("/proc/mounts","r")) == NULL)
 	                              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6612: FILE: tools/perf/util/trace-event-info.c:112:
+	if ((fp = fopen("/proc/mounts","r")) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#6956: FILE: tools/perf/util/trace-event-info.c:456:
+
+}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#6979: FILE: tools/perf/util/trace-event-info.c:479:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6998: FILE: tools/perf/util/trace-event-info.c:498:
+}
+void read_tracing_data(struct perf_counter_attr *pattrs, int nb_counters)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7046: FILE: tools/perf/util/trace-event-parse.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#7061: FILE: tools/perf/util/trace-event-parse.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#7062: FILE: tools/perf/util/trace-event-parse.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#7137: FILE: tools/perf/util/trace-event-parse.c:92:
+		sscanf(line, "%d %as", &item->pid,
+		       (float *)(void *)&item->comm); /* workaround gcc warning */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7211: FILE: tools/perf/util/trace-event-parse.c:166:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fa->addr == fb->addr'
#7250: FILE: tools/perf/util/trace-event-parse.c:205:
+	if ((fa->addr == fb->addr) ||
+
+	    (fa->addr > fb->addr &&
+	     fa->addr < (fb+1)->addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7251: FILE: tools/perf/util/trace-event-parse.c:206:
+	if ((fa->addr == fb->addr) ||
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7253: FILE: tools/perf/util/trace-event-parse.c:208:
+	     fa->addr < (fb+1)->addr))
 	                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7483: FILE: tools/perf/util/trace-event-parse.c:438:
+
+

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#7510: FILE: tools/perf/util/trace-event-parse.c:465:
+			/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:BRACES: braces {} should be used on all arms of this statement
#7554: FILE: tools/perf/util/trace-event-parse.c:509:
+				if (*tok) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#7559: FILE: tools/perf/util/trace-event-parse.c:514:
+				} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#7584: FILE: tools/perf/util/trace-event-parse.c:539:
+			if (*tok) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#7589: FILE: tools/perf/util/trace-event-parse.c:544:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#7603: FILE: tools/perf/util/trace-event-parse.c:558:
+	if (*tok) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#7608: FILE: tools/perf/util/trace-event-parse.c:563:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7666: FILE: tools/perf/util/trace-event-parse.c:621:
+static int test_type_token(enum event_type type, char *token,
+		    enum event_type expect, char *expect_tok)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#7823: FILE: tools/perf/util/trace-event-parse.c:778:
+			     type == EVENT_OP && strcmp(token, ".") == 0)) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#7827: FILE: tools/perf/util/trace-event-parse.c:782:
+				if (field->type) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#7833: FILE: tools/perf/util/trace-event-parse.c:788:
+				} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#7859: FILE: tools/perf/util/trace-event-parse.c:814:
+^I^I        while (strcmp(token, "]") != 0) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#8097: FILE: tools/perf/util/trace-event-parse.c:1052:
+			return 15;
+		} else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#8106: FILE: tools/perf/util/trace-event-parse.c:1061:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#8153: FILE: tools/perf/util/trace-event-parse.c:1108:
+	} else if (strcmp(token, "?") == 0) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#8178: FILE: tools/perf/util/trace-event-parse.c:1133:
+		   strcmp(token, "!=") == 0) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#8202: FILE: tools/perf/util/trace-event-parse.c:1157:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#8246: FILE: tools/perf/util/trace-event-parse.c:1201:
+static char *arg_eval (struct print_arg *arg);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#8344: FILE: tools/perf/util/trace-event-parse.c:1299:
+
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#8348: FILE: tools/perf/util/trace-event-parse.c:1303:
+static char *arg_eval (struct print_arg *arg)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#8554: FILE: tools/perf/util/trace-event-parse.c:1509:
+	    (type == EVENT_DELIM && strcmp(token, "(") == 0)) {
+

WARNING:TYPO_SPELLING: 'contine' may be misspelled - perhaps 'continue'?
#8555: FILE: tools/perf/util/trace-event-parse.c:1510:
+		/* make this a typecast and contine */
 		                            ^^^^^^^

WARNING:TYPO_SPELLING: 'prevous' may be misspelled - perhaps 'previous'?
#8557: FILE: tools/perf/util/trace-event-parse.c:1512:
+		/* prevous must be an atom */
 		   ^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#8575: FILE: tools/perf/util/trace-event-parse.c:1530:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#8581: FILE: tools/perf/util/trace-event-parse.c:1536:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8892: FILE: tools/perf/util/trace-event-parse.c:1847:
+static unsigned long long eval_num_arg(void *data, int size,
+				   struct event *event, struct print_arg *arg)

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#8920: FILE: tools/perf/util/trace-event-parse.c:1875:
+		return 0;
+		break;

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(flags)
#9014: FILE: tools/perf/util/trace-event-parse.c:1969:
+	for (i = 0; i < (int)(sizeof(flags)/sizeof(flags[0])); i++)

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#9014: FILE: tools/perf/util/trace-event-parse.c:1969:
+	for (i = 0; i < (int)(sizeof(flags)/sizeof(flags[0])); i++)
 	                                   ^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#9164: FILE: tools/perf/util/trace-event-parse.c:2119:
+				/* fall through */

CHECK:BRACES: braces {} should be used on all arms of this statement
#9294: FILE: tools/perf/util/trace-event-parse.c:2249:
+		if (*ptr == '%') {
[...]
+		} else
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#9319: FILE: tools/perf/util/trace-event-parse.c:2274:
+				if (*(ptr+1) == 'F' ||
 				         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#9320: FILE: tools/perf/util/trace-event-parse.c:2275:
+				    *(ptr+1) == 'f') {
 				         ^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#9325: FILE: tools/perf/util/trace-event-parse.c:2280:
+				/* fall through */

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#9351: FILE: tools/perf/util/trace-event-parse.c:2306:
+						if (show_func == 'F')

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#9381: FILE: tools/perf/util/trace-event-parse.c:2336:
+
+			}

CHECK:BRACES: Unbalanced braces around else statement
#9382: FILE: tools/perf/util/trace-event-parse.c:2337:
+		} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#9408: FILE: tools/perf/util/trace-event-parse.c:2363:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9732: FILE: tools/perf/util/trace-event-parse.c:2687:
+void print_event(int cpu, void *data, int size, unsigned long long nsecs,
+		  char *comm)

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#9756: FILE: tools/perf/util/trace-event-parse.c:2711:
+	printf("%16s-%-5d [%03d] %5lu.%09Lu: %s: ",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#9994: FILE: tools/perf/util/trace-event-read.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#10009: FILE: tools/perf/util/trace-event-read.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#10010: FILE: tools/perf/util/trace-event-read.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#10240: FILE: tools/perf/util/trace-event-read.c:247:
+	int i,x;
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#10248: FILE: tools/perf/util/trace-event-read.c:255:
+		for (x=0; x < count; x++) {
 		      ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#10454: FILE: tools/perf/util/trace-event-read.c:461:
+void trace_report (void)

WARNING:RETURN_VOID: void function return statements are not generally useful
#10505: FILE: tools/perf/util/trace-event-read.c:512:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10512: FILE: tools/perf/util/trace-event.h:1:
+#ifndef _TRACE_EVENTS_H

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#10517: FILE: tools/perf/util/trace-event.h:6:
+#define __unused __attribute__((unused))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#10519: FILE: tools/perf/util/trace-event.h:8:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#10579: FILE: tools/perf/util/trace-event.h:68:
+^Ichar ^I^I^I*type;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10682: FILE: tools/perf/util/trace-event.h:171:
+void print_event(int cpu, void *data, int size, unsigned long long nsecs,
+		  char *comm);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#10771: FILE: tools/perf/util/util.h:82:
 
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10789: FILE: tools/perf/util/values.c:1:
+#include <stdlib.h>

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#10941: FILE: tools/perf/util/values.c:153:
+			width = snprintf(NULL, 0, "%Lu", values->value[i][j]);

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#10956: FILE: tools/perf/util/values.c:168:
+			fprintf(fp, "  %*Lu",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#10992: FILE: tools/perf/util/values.c:204:
+			width = snprintf(NULL, 0, "%Lu", values->value[i][j]);

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#11004: FILE: tools/perf/util/values.c:216:
+			fprintf(fp, "  %*d  %*d  %*s  %*llx  %*Lu\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#11025: FILE: tools/perf/util/values.h:1:
+#ifndef _PERF_VALUES_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073556.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 22 errors, 74 warnings, 155 checks, 10349 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073556.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
