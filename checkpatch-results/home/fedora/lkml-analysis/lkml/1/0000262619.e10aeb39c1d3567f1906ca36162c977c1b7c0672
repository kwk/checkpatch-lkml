WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
hopefully the driver for this chip gives enough of an idea of how I envision

WARNING:TYPO_SPELLING: 'peroidic' may be misspelled - perhaps 'periodic'?
#93: 
    Polled based capture (use a peroidic timer if available)
                                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Documenation' may be misspelled - perhaps 'Documentation'?
#104: 
    Documenation ;)
    ^^^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'Lots'
#110: 
    Lots lots more....

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#131: 
--- a/drivers/industrialio/Kconfig	1970-01-01 01:00:00.000000000 +0100

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#135: FILE: drivers/industrialio/Kconfig:2:
+# Industrial I/O subsytem configuration
                  ^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#138: FILE: drivers/industrialio/Kconfig:5:
+menuconfig INDUSTRIALIO
+	tristate "Industrial I/O support"
+	---help---
+	  The industrial IO subsystem provides a unified framework for drivers
+	  for many different types of embedded sensors using a number of
+	  different phyiscal interfaces (i2c, spi etc).
+
+	  This documentation will need some work!
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'phyiscal' may be misspelled - perhaps 'physical'?
#143: FILE: drivers/industrialio/Kconfig:10:
+	  different phyiscal interfaces (i2c, spi etc).
 	            ^^^^^^^^

WARNING:TYPO_SPELLING: 'mor' may be misspelled - perhaps 'more'?
#158: FILE: drivers/industrialio/Kconfig:25:
+	  problem with industrial io support and want to see mor eof what is
 	                                                     ^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: drivers/industrialio/Makefile:7:
+obj-y^I^I^I^I+= accelerometer/ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#174: FILE: drivers/industrialio/Makefile:10:
+EXTRA_CFLAGS += -DDEBUG

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#185: FILE: drivers/industrialio/accelerometer/Kconfig:5:
+config LIS3L02DQ
+	tristate "ST Microelectronics LIS3L02DQ Accelerometer Driver"
+	help
+	  Say yes here to build generic support for the ST microelectronics
+	  accelerometer. You will also need to one or more of the bus specific
+	  elements below.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#192: FILE: drivers/industrialio/accelerometer/Kconfig:12:
+config LIS3L02DQ_SPI
+	depends on LIS3L02DQ && SPI
+	tristate "SPI support"
+	help
+	  Say yes here to build support for the ST LIS3L02DQ accelerometer via
+	  an SPI bus.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#199: FILE: drivers/industrialio/accelerometer/Kconfig:19:
+config LIS3L02DQ_I2C
+	depends on LIS3L02DQ && I2C
+	tristate "I2C support"
+	help
+	  Say yes here to build support for the ST LIS3L02DQ accelerometer via
+	  an I2C bus.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#219: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#234: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:16:
+ * Latch on interrupt generation enabled as it simplifies when to reenable
                                                                   ^^^^^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#259: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:41:
+static const char read_all_tx_array[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#273: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:55:
+	 * convoluted nature of this transfer */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#285: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:67:
+			.tx_buf = read_all_tx_array+2,
 			                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#293: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:75:
+			.tx_buf = read_all_tx_array+4,
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#301: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:83:
+			.tx_buf = read_all_tx_array+6,
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#309: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:91:
+			.tx_buf = read_all_tx_array+8,
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#317: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:99:
+			.tx_buf = read_all_tx_array+10,
 			                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#327: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:109:
+	 * values in alternate bytes */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:128:
+static int lis3l02dq_spi_read_reg_int8_t(struct device *dev,
+					  uint8_t reg_address,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#346: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:128:
+					  uint8_t reg_address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:163:
+static int lis3l02dq_spi_read_reg_uint8_t(struct device *dev,
+					       uint8_t reg_address)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#383: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:165:
+	uint8_t val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#384: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:166:
+	int8_t ret;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:201:
+static int lis3l02dq_spi_write_reg_int8_t(struct device *dev,
+					   uint8_t reg_address,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#419: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:201:
+					   uint8_t reg_address,

WARNING:TYPO_SPELLING: 'adress' may be misspelled - perhaps 'address'?
#450: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:232:
+/* Relies on the MSB being one higher adress than the LSB */
                                       ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:234:
+static int lis3l02dq_spi_write_reg_int16_t(struct device *dev,
+						uint8_t lower_reg_address,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#452: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:234:
+						uint8_t lower_reg_address,

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#460: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:242:
+	struct spi_transfer xfers [] = { {

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#478: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:260:
+	local_tx_buf[3] = LIS3L02DQ_WRITE_REG(lower_reg_address+1);
 	                                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:277:
+static int lis3l02dq_spi_read_reg_int16_t(struct device *dev,
+					       uint8_t lower_reg_address,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#495: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:277:
+					       uint8_t lower_reg_address,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#504: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:286:
+	uint16_t temp;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#505: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:287:
+	struct spi_transfer xfers [] = { {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#526: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:308:
+	local_tx_buf[3] = LIS3L02DQ_READ_REG(lower_reg_address+1);
 	                                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#544: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:326:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#551: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:333:
+	int8_t val;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#553: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:335:
+	struct industrialio_dev_attr *this_attr
+		= to_industrialio_dev_attr(attr);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#574: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:356:
+	struct industrialio_dev_attr *this_attr
+		= to_industrialio_dev_attr(attr);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#597: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:379:
+	struct industrialio_dev_attr *this_attr
+		= to_industrialio_dev_attr(attr);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#599: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:381:
+	ret = strict_strtol(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#623: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:405:
+	struct industrialio_dev_attr *this_attr
+		= to_industrialio_dev_attr(attr);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#625: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:407:
+	ret = strict_strtoul(buf, 10, &val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:412:
+	ret = lis3l02dq_spi_write_reg_int8_t(dev,
+					      this_attr->address,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#640: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:422:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#646: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:428:
+	int16_t val;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#648: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:430:
+	struct industrialio_dev_attr *this_attr
+		= to_industrialio_dev_attr(attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:432:
+	ret = lis3l02dq_spi_read_reg_int16_t(dev,
+						  this_attr->address,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#661: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:443:
+ * must remain part of the driver and not the ring buffer subsystem */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#667: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:449:
+	uint16_t temp;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#671: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:453:
+	if (data == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#676: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:458:
+	datalock = data + 2*element;
 	                   ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#693: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:475:
+	struct industrialio_dev_attr *this_attr
+		= to_industrialio_dev_attr(attr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#697: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:479:
+	if (dev_info->currentmode == INDIO_RING_DATA_RDY) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#713: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:495:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#718: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:500:
+ * generation */

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#727: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:509:
+	struct industrialio_dev_attr *this_attr
+		= to_industrialio_dev_attr(attr);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#729: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:511:
+	ret = strict_strtol(buf, 10, &val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:515:
+	ret = lis3l02dq_spi_write_reg_int16_t(dev,
+						   this_attr->address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:523:
+static ssize_t lis3l02dq_read_av_freq(struct device *dev,
+				       struct device_attribute *attr,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#752: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:534:
+	int8_t t;

WARNING:LINE_SPACING: Missing a blank line after declarations
#753: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:535:
+	int8_t t;
+	ret = lis3l02dq_spi_read_reg_int8_t(dev,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#767: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:549:
+	len += sprintf(buf+len, "\n");
 	                  ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#782: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:564:
+	int8_t t;

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#784: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:566:
+	ret = strict_strtol(buf, 10, &val);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#824: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:606:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#835: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:617:
+	ret = lis3l02dq_spi_write_reg_int8_t(&st->us->dev,
+					      LIS3L02DQ_REG_CTRL_1_ADDRESS,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:624:
+	ret = lis3l02dq_spi_write_reg_int8_t(&st->us->dev,
+					      LIS3L02DQ_REG_CTRL_2_ADDRESS,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#860: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:642:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#864: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:646:
+static INDUSTRIALIO_DEV_ATTR_ACCEL_X_OFFSET(S_IWUSR | S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#869: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:651:
+static INDUSTRIALIO_DEV_ATTR_ACCEL_Y_OFFSET(S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#874: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:656:
+static INDUSTRIALIO_DEV_ATTR_ACCEL_Z_OFFSET(S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#879: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:661:
+static INDUSTRIALIO_DEV_ATTR_ACCEL_X_GAIN(S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#884: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:666:
+static INDUSTRIALIO_DEV_ATTR_ACCEL_Y_GAIN(S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#889: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:671:
+static INDUSTRIALIO_DEV_ATTR_ACCEL_Z_GAIN(S_IWUSR | S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#894: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:676:
+static INDUSTRIALIO_DEV_ATTR_ACCEL_THRESH(S_IWUSR | S_IRUGO,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#900: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:682:
+/* Obviously the reading method for these will change depending on whether
+   ring buffer capture is in use. Allow specification here of alternate

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#902: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:684:
+   rather than part of industrialio */

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#912: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:694:
+static INDUSTRIALIO_DEV_ATTR_SAMP_FREQ(S_IWUSR | S_IRUGO,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#924: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:706:
+	int8_t val;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#926: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:708:
+	struct industrialio_event_attr *this_attr
+		= to_industrialio_event_attr(attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#929: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:711:
+	ret = lis3l02dq_spi_read_reg_int8_t(dev,
+					     LIS3L02DQ_REG_WAKE_UP_CFG_ADDRESS,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#946: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:728:
+	int8_t valold;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#947: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:729:
+	int8_t controlold;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#950: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:732:
+	struct industrialio_event_attr *this_attr
+		= to_industrialio_event_attr(attr);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#954: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:736:
+	ret = strict_strtol(buf, 10, &val);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#998: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:780:
+		 * wants the interrupt */

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1000: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:782:
+			(controlold | LIS3L02DQ_REG_CTRL_2_ENABLE_INTERRUPT):
 			                                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1003: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:785:
+		ret = lis3l02dq_spi_write_reg_int8_t(dev,
+							  LIS3L02DQ_REG_CTRL_2_ADDRESS,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#1017: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:799:
+	int8_t val;

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#1031: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:813:
+   a ring buffer or directly generating events is dependant on the value input.
                                                   ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1031: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:813:
+/* This function must enable data ready generation - whether this is going into
+   a ring buffer or directly generating events is dependant on the value input.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#1042: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:824:
+	int8_t valold;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1045: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:827:
+	struct industrialio_event_attr *this_attr
+		= to_industrialio_event_attr(attr);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#1049: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:831:
+	ret = strict_strtol(buf, 10, &val);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1062: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:844:
+	currentlyset
+		= valold

CHECK:BRACES: braces {} should be used on all arms of this statement
#1077: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:859:
+	if (val == 1)
[...]
+	else if (val == 2) {
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1090: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:872:
+		/* Clear the other sources of interrupts - whilst not strictly
+		   necessary, this does avoid the need for maintaining state

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1091: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:873:
+		   in software */

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1108: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:890:
+	struct lis3l02dq_state *st
+		= container_of(work_s, struct lis3l02dq_state,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1122: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:904:
+			ring_data[i] = rx_array[i*2];
 			                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1132: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:914:
+				ring_data[i] = rx_array[i*2];
 				                         ^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1134: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:916:
+			 * we don't actually know when this occured! */
 			                                    ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1134: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:916:
+			 * we don't actually know when this occured! */

WARNING:RETURN_VOID: void function return statements are not generally useful
#1149: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:931:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1153: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:935:
+ * as payload of an event? */

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1158: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:940:
+	struct lis3l02dq_state *st
+		= container_of(work_s, struct lis3l02dq_state,

WARNING:RETURN_VOID: void function return statements are not generally useful
#1167: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:949:
+	return;
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#1179: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:961:
+	if (dev_info->currentmode == INDIO_RING_DATA_RDY) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1182: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:964:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1189: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:971:
+static inline int lis3l02dq_thresh_th_impl(struct industrialio_dev *dev_info,
+					  int index,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1203: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:985:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1204: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:986:
+}
+static int lis3l02dq_thresh_handler_th(struct industrialio_dev *dev_info,

WARNING:TYPO_SPELLING: 'missleading' may be misspelled - perhaps 'misleading'?
#1212: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:994:
+	/* This is somewhat missleading as for this chip these are actually
 	                    ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1213: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:995:
+	/* This is somewhat missleading as for this chip these are actually
+	   the same function */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1213: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:995:
+	   the same function */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1221: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1003:
+
+

WARNING:TYPO_SPELLING: 'Unforunately' may be misspelled - perhaps 'Unfortunately'?
#1222: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1004:
+/* Unforunately it appears the interrupt won't clear unless you read from the
    ^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1223: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1005:
+/* Unforunately it appears the interrupt won't clear unless you read from the
+   src register */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1223: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1005:
+   src register */

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1225: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1007:
+   stuff necessary to reenable the interrupt in here? */
                       ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1225: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1007:
+/* Could move the event list adding stuff into the interrupt, and just do the
+   stuff necessary to reenable the interrupt in here? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1225: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1007:
+   stuff necessary to reenable the interrupt in here? */

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1229: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1011:
+	struct lis3l02dq_work_cont *wc
+		= container_of(work_s, struct lis3l02dq_work_cont,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#1233: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1015:
+	int8_t t;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1236: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1018:
+	lis3l02dq_spi_read_reg_int8_t(st->indio_dev->dev,
+					   LIS3L02DQ_REG_WAKE_UP_SRC_ADDRESS,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1270: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1052:
+	/* For this chip, if this handler is running no other interrupts can
+	   occur so this will actually enable the irq  - in others it will

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1271: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1053:
+	   effectively reference count */

WARNING:RETURN_VOID: void function return statements are not generally useful
#1279: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1061:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1315: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1097:
+INDUSTRIALIO_EVENT_ATTR_DATA_RDY(lis3l02dq_read_data_ready_config,
+				lis3l02dq_write_data_ready_config,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1319: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1101:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1359: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1141:
+static int __devinit lis3l02dq_probe(struct spi_device *spi)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1363: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1145:
+	int ret;
+	st = kzalloc(sizeof(struct lis3l02dq_state), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*st)...) over kzalloc(sizeof(struct lis3l02dq_state)...)
#1363: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1145:
+	st = kzalloc(sizeof(struct lis3l02dq_state), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!st"
#1364: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1146:
+	if (st == NULL) {

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1365: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1147:
+		dev_err(&spi->dev, "Memory allocation error \n");

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1372: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1154:
+	st->indio_dev
+		= (struct industrialio_dev *)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!st->indio_dev"
#1374: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1156:
+	if (st->indio_dev == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1393: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1175:
+
+

WARNING:TYPO_SPELLING: 'intialization' may be misspelled - perhaps 'initialization'?
#1397: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1179:
+	/* FIXME: Due to intialization order the ring is created even if the irq
 	                 ^^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1398: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1180:
+	/* FIXME: Due to intialization order the ring is created even if the irq
+	   is no good. Valid when polling is implemented */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1398: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1180:
+	   is no good. Valid when polling is implemented */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1399: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1181:
+	if (spi->irq && gpio_is_valid(irq_to_gpio(spi->irq)) > 0) {
[...]
+	} else
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1406: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1188:
+		/* This is a little unusual, in that the device seems
+		   to need a full read of the interrupt source reg before

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1408: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1190:
+		   Hence the two handlers are the same */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around st->work_cont_thresh
#1410: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1192:
+		INIT_WORK_CONT(&(st->work_cont_thresh),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Unbalanced braces around else statement
#1424: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1206:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1452: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1234:
+	ret = lis3l02dq_spi_write_reg_int8_t(&st->us->dev,
+					      LIS3L02DQ_REG_CTRL_1_ADDRESS,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1460: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1242:
+	ret = lis3l02dq_spi_write_reg_int8_t(&st->us->dev,
+					      LIS3L02DQ_REG_CTRL_2_ADDRESS,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1483: FILE: drivers/industrialio/accelerometer/lis3l02dq.c:1265:
+	 * by the device */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1640: FILE: drivers/industrialio/accelerometer/lis3l02dq.c_oldfuncs:113:
+^Itmp =  LIS3L02DQ_DEFAULT_CTRL2^I       $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1798: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:1:
+/*

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#1858: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:61:
+/* Interupt Enable - applies data ready to the RDY pad */
    ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1868: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:71:
+ * - option for 16 bit left justified */

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#1871: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:74:
+/* Interupt related stuff */
    ^^^^^^^^

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#1874: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:77:
+/* Switch from or combination fo conditions to and */
                               ^^

WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#1877: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:80:
+/* Latch interupt request,
          ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1878: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:81:
+ * if on ack must be given by reading the ack register */

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#1881: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:84:
+/* Z Interupt on High (above threshold)*/
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#1883: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:86:
+/* Z Interupt on Low */
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#1885: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:88:
+/* Y Interupt on High */
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#1887: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:90:
+/* Y Interupt on Low */
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#1889: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:92:
+/* X Interupt on High */
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#1891: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:94:
+/* X Interupt on Low */
      ^^^^^^^^

WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#1894: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:97:
+/* Register that gives description of what caused interupt
                                                   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1895: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:98:
+ * - latched if set in CFG_ADDRES */

WARNING:TYPO_SPELLING: 'Interupt' may be misspelled - perhaps 'Interrupt'?
#1898: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:101:
+/* Interupt Active */
    ^^^^^^^^

WARNING:TYPO_SPELLING: 'Interupts' may be misspelled - perhaps 'Interrupts'?
#1900: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:103:
+/* Interupts that have been triggered */
    ^^^^^^^^^

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#1924: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:127:
+Form of high byte dependant on justification set in ctrl reg */
                   ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1924: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:127:
+/* The accelerometer readings - low and high bytes.
+Form of high byte dependant on justification set in ctrl reg */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1924: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:127:
+Form of high byte dependant on justification set in ctrl reg */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1933: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:136:
+ * - i.e. there is only one value */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cont' - possible side-effects?
#1959: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:162:
+#define INIT_WORK_CONT(cont, _checkfunc, _nocheckfunc, _add, _mask, _st)\
+	do {								\
+	INIT_WORK(&(cont)->ws, _checkfunc);				\
+	INIT_WORK(&(cont)->ws_nocheck, _nocheckfunc);			\
+	(cont)->address = _add;						\
+	(cont)->mask = _mask;						\
+	(cont)->st = _st;						\
+	} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1960: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:163:
+	do {								\
+	INIT_WORK(&(cont)->ws, _checkfunc);				\

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1975: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:178:
+	/* Interrupt caught event - used as part of the datardy to ring bh
+	   in ensuring interrupt line does not become locked high */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1975: FILE: drivers/industrialio/accelerometer/lis3l02dq.h:178:
+	   in ensuring interrupt line does not become locked high */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1992: FILE: drivers/industrialio/industrial.c:1:
+/* The industrial I/O core

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2047: FILE: drivers/industrialio/industrial.c:56:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2051: FILE: drivers/industrialio/industrial.c:60:
+ * currently this only used with ring buffer events */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ev"
#2080: FILE: drivers/industrialio/industrial.c:89:
+		if (ev == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2088: FILE: drivers/industrialio/industrial.c:97:
+		if (shared_pointer_p != NULL) {
[...]
+		} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "shared_pointer_p"
#2088: FILE: drivers/industrialio/industrial.c:97:
+		if (shared_pointer_p != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#2091: FILE: drivers/industrialio/industrial.c:100:
+		} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2102: FILE: drivers/industrialio/industrial.c:111:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2105: FILE: drivers/industrialio/industrial.c:114:
+int industrialio_put_event(struct industrialio_dev *dev_info,
+			    int ev_line,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info->interrupts[line_number]"
#2126: FILE: drivers/industrialio/industrial.c:135:
+	if (dev_info->interrupts[line_number] == NULL) {

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#2139: FILE: drivers/industrialio/industrial.c:148:
+	 * events noone cares about.*/
 	          ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2139: FILE: drivers/industrialio/industrial.c:148:
+	 * events noone cares about.*/

CHECK:BRACES: Unbalanced braces around else statement
#2186: FILE: drivers/industrialio/industrial.c:195:
+	} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2187: FILE: drivers/industrialio/industrial.c:196:
+		list_for_each_entry(p, &int_info->ev_list.list, list)
+		{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2216: FILE: drivers/industrialio/industrial.c:225:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2220: FILE: drivers/industrialio/industrial.c:229:
+	int id;
+	spin_lock(industrialio_state_lock);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!industrialio_state.fhs[id]"
#2223: FILE: drivers/industrialio/industrial.c:232:
+		if (industrialio_state.fhs[id] == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2236: FILE: drivers/industrialio/industrial.c:245:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2245: FILE: drivers/industrialio/industrial.c:254:
+ * lifted directly from input subsystem */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2252: FILE: drivers/industrialio/industrial.c:261:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2254: FILE: drivers/industrialio/industrial.c:263:
+	 * chrdevs */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2261: FILE: drivers/industrialio/industrial.c:270:
+	 * necessary */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2275: FILE: drivers/industrialio/industrial.c:284:
+	 * specific stuff */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2288: FILE: drivers/industrialio/industrial.c:297:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2291: FILE: drivers/industrialio/industrial.c:300:
+ * switching function above */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2297: FILE: drivers/industrialio/industrial.c:306:
+};
+static int count;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2311: FILE: drivers/industrialio/industrial.c:320:
+		 * FIXME deal with odd ring length */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2312: FILE: drivers/industrialio/industrial.c:321:
+		ring->half_p = ring->data - ring->length*ring->skip / 2;
 		                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2322: FILE: drivers/industrialio/industrial.c:331:
+	if (ring->write_p == ring->data + ring->length*ring->skip) {
 	                                              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2329: FILE: drivers/industrialio/industrial.c:338:
+	 * ring event */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2332: FILE: drivers/industrialio/industrial.c:341:
+		if (ring->read_p == ring->data + ring->length*ring->skip)
 		                                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2338: FILE: drivers/industrialio/industrial.c:347:
+			/* Event escalation - probably quicker to let this
+			   keep running than check if it is necessary */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2338: FILE: drivers/industrialio/industrial.c:347:
+			   keep running than check if it is necessary */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2358: FILE: drivers/industrialio/industrial.c:367:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2360: FILE: drivers/industrialio/industrial.c:369:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2363: FILE: drivers/industrialio/industrial.c:372:
+	 * simultaneous read */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2366: FILE: drivers/industrialio/industrial.c:375:
+	if (ring->half_p == ring->data + ring->length*ring->skip)
 	                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2386: FILE: drivers/industrialio/industrial.c:395:
+int industrialio_read_last_from_ring(struct industrialio_ring_buffer *ring,
+					    unsigned char *data)

WARNING:TYPO_SPELLING: 'unnessecary' may be misspelled - perhaps 'unnecessary'?
#2394: FILE: drivers/industrialio/industrial.c:403:
+	barrier(); /*unnessecary? */
 	             ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2415: FILE: drivers/industrialio/industrial.c:424:
+	 * - if empty and blocking, block */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2422: FILE: drivers/industrialio/industrial.c:431:
+		 * to be there */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2424: FILE: drivers/industrialio/industrial.c:433:
+		 * disappeared in meantime!*/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around el->ev
#2436: FILE: drivers/industrialio/industrial.c:445:
+	if (copy_to_user(buf, &(el->ev),

WARNING:LINE_SPACING: Missing a blank line after declarations
#2465: FILE: drivers/industrialio/industrial.c:474:
+	struct industrialio_event_interface *ev_int = filep->private_data;
+	try_module_get(ev_int->owner);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2469: FILE: drivers/industrialio/industrial.c:478:
+}
+static const struct file_operations industrialio_interrupt_fileops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2476: FILE: drivers/industrialio/industrial.c:485:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2478: FILE: drivers/industrialio/industrial.c:487:
+static ssize_t industrialio_show_attr_minor(struct device *dev,
+					   struct device_attribute *attr,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2484: FILE: drivers/industrialio/industrial.c:493:
+	struct industrialio_chrdev_minor_attr *_attr
+		= to_industrialio_chrdev_minor_attr(attr);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2489: FILE: drivers/industrialio/industrial.c:498:
+}
+static inline int

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2511: FILE: drivers/industrialio/industrial.c:520:
+	ev_int->attr.dev_attr.attr.mode = S_IRUGO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2526: FILE: drivers/industrialio/industrial.c:535:
+industrialio_free_ev_int(struct industrialio_event_interface *ev_int,
+						     struct device *dev)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2532: FILE: drivers/industrialio/industrial.c:541:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2534: FILE: drivers/industrialio/industrial.c:543:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2543: FILE: drivers/industrialio/industrial.c:552:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2544: FILE: drivers/industrialio/industrial.c:553:
+int industrialio_ring_open(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2554: FILE: drivers/industrialio/industrial.c:563:
+int industrialio_ring_release(struct inode *inode, struct file *filp)
                                                                 ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2566: FILE: drivers/industrialio/industrial.c:575:
+ * less than count*/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2569: FILE: drivers/industrialio/industrial.c:578:
+ssize_t industrialio_ring_rip(struct file *filp,
                                            ^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2585: FILE: drivers/industrialio/industrial.c:594:
+	if (bytes_to_rip > ring->skip*ring->length)
 	                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2586: FILE: drivers/industrialio/industrial.c:595:
+		bytes_to_rip = ring->skip*ring->length;
 		                         ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2597: FILE: drivers/industrialio/industrial.c:606:
+	while (initial_read_p != ring->read_p
+	      || initial_write_p != ring->write_p) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2617: FILE: drivers/industrialio/industrial.c:626:
+			+ ring->length*ring->skip - initial_read_p;
 			              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2632: FILE: drivers/industrialio/industrial.c:641:
+	 * read pointer has been pushed */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2638: FILE: drivers/industrialio/industrial.c:647:
+		dead_offset = ring->length*ring->skip - (initial_read_p
 		                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2643: FILE: drivers/industrialio/industrial.c:652:
+	 * the point we were reading to has been passed */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ring"
#2693: FILE: drivers/industrialio/industrial.c:702:
+	if (*ring == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#2701: FILE: drivers/industrialio/industrial.c:710:
+	if ((*ring)->data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!event_minor_name"
#2708: FILE: drivers/industrialio/industrial.c:717:
+	if ((*ring)->event_minor_name == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!access_minor_name"
#2724: FILE: drivers/industrialio/industrial.c:733:
+	if ((*ring)->access_minor_name == NULL) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2736: FILE: drivers/industrialio/industrial.c:745:
+	(*ring)->access_minor_attr.dev_attr.attr.name
+		= (const char *)((*ring)->access_minor_name);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2738: FILE: drivers/industrialio/industrial.c:747:
+	(*ring)->access_minor_attr.dev_attr.attr.mode = S_IRUGO;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2741: FILE: drivers/industrialio/industrial.c:750:
+	(*ring)->access_minor_attr.dev_attr.show
+		= &industrialio_show_attr_minor;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2754: FILE: drivers/industrialio/industrial.c:763:
+	industrialio_free_ev_int(&(*ring)->ev_int,
+					  dev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2766: FILE: drivers/industrialio/industrial.c:775:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2772: FILE: drivers/industrialio/industrial.c:781:
+	       sizeof(struct industrialio_handler *)*256,
 	                                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2778: FILE: drivers/industrialio/industrial.c:787:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2792: FILE: drivers/industrialio/industrial.c:801:
+		printk(KERN_ERR

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2798: FILE: drivers/industrialio/industrial.c:807:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2811: FILE: drivers/industrialio/industrial.c:820:
+}
+/* A series of functions that are effectively parts of

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2814: FILE: drivers/industrialio/industrial.c:823:
+ * Each has corresponding unregister function*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2816: FILE: drivers/industrialio/industrial.c:825:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2871: FILE: drivers/industrialio/industrial.c:880:
+}
+void industrialio_device_unregister_id(struct industrialio_dev *dev_info)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2875: FILE: drivers/industrialio/industrial.c:884:
+	int id;
+	if (likely(sscanf(dev_info->sysfs_dev->bus_id,

CHECK:BRACES: Unbalanced braces around else statement
#2880: FILE: drivers/industrialio/industrial.c:889:
+	} else

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#2896: FILE: drivers/industrialio/industrial.c:905:
+			 *dev_info->num_interrupt_lines,
 			 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info->event_interfaces"
#2898: FILE: drivers/industrialio/industrial.c:907:
+	if (dev_info->event_interfaces == NULL) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2909: FILE: drivers/industrialio/industrial.c:918:
+	dev_info->interrupts
+		= (struct industrialio_interrupt **)

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#2911: FILE: drivers/industrialio/industrial.c:920:
+			*dev_info->num_interrupt_lines,
 			^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info->interrupts"
#2913: FILE: drivers/industrialio/industrial.c:922:
+	if (dev_info->interrupts == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#2922: FILE: drivers/industrialio/industrial.c:931:
+		if (name == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2943: FILE: drivers/industrialio/industrial.c:952:
+	/* May double initialize lists in case of shared handlers,
+	   but other than slight overhead that isn't a problem */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2943: FILE: drivers/industrialio/industrial.c:952:
+	   but other than slight overhead that isn't a problem */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info->event_attrs->attrs[i]"
#2946: FILE: drivers/industrialio/industrial.c:955:
+		if (dev_info->event_attrs->attrs[i] == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2967: FILE: drivers/industrialio/industrial.c:976:
+	int i;
+	for (i = 0; i < dev_info->num_interrupt_lines; i++)

WARNING:TYPO_SPELLING: 'paramater' may be misspelled - perhaps 'parameter'?
#2974: FILE: drivers/industrialio/industrial.c:983:
+/*Simple paramater read and set for ring buffer */
          ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2993: FILE: drivers/industrialio/industrial.c:1002:
+	/* FIXME: move to dynamically adjustable as and when ring is dynamically
+	   allocated */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2993: FILE: drivers/industrialio/industrial.c:1002:
+	   allocated */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3017: FILE: drivers/industrialio/industrial.c:1026:
+	/* FIXME: move to user adjustable as and when ring is dynamically
+	   activated */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3017: FILE: drivers/industrialio/industrial.c:1026:
+	   activated */

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'industrialio_read_ring_dim' to 'dimension_show' 'industrialio_write_ring_dim' to 'dimension_store'
#3040: FILE: drivers/industrialio/industrial.c:1049:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#3042: FILE: drivers/industrialio/industrial.c:1051:
+DEVICE_ATTR(dimension, S_IRUGO | S_IWUSR,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'industrialio_read_ring_length' to 'length_show' 'industrialio_write_ring_length' to 'length_store'
#3045: FILE: drivers/industrialio/industrial.c:1054:
+DEVICE_ATTR(length, S_IRUGO | S_IWUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#3045: FILE: drivers/industrialio/industrial.c:1054:
+DEVICE_ATTR(length, S_IRUGO | S_IWUSR,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'industrialio_read_ring_bps' to 'bps_show' 'industrialio_write_ring_bps' to 'bps_store'
#3048: FILE: drivers/industrialio/industrial.c:1057:
+DEVICE_ATTR(bps, S_IRUGO | S_IWUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#3048: FILE: drivers/industrialio/industrial.c:1057:
+DEVICE_ATTR(bps, S_IRUGO | S_IWUSR,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3052: FILE: drivers/industrialio/industrial.c:1061:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3066: FILE: drivers/industrialio/industrial.c:1075:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3073: FILE: drivers/industrialio/industrial.c:1082:
+	* For now I'm simply ignoring any ring buffer parameter changes!*/

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3073: FILE: drivers/industrialio/industrial.c:1082:
+	/* FIXME: actual ring alloc should be on demand, not here
+	* For now I'm simply ignoring any ring buffer parameter changes!*/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3104: FILE: drivers/industrialio/industrial.c:1113:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#3109: FILE: drivers/industrialio/industrial.c:1118:
+	int ret;
+	dev_set_drvdata(dev_info->dev, (void *)(dev_info));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3159: FILE: drivers/industrialio/industrial.c:1168:
+
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000262619.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 140 warnings, 146 checks, 2998 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000262619.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
