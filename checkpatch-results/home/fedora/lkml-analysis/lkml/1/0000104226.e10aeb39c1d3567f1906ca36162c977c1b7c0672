WARNING:TYPO_SPELLING: 'availlable' may be misspelled - perhaps 'available'?
#25: 
This AHB DMA Controller (aka HDMA or DMAC on AT91 systems) is availlable on
                                                              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This first release covers only the memory-to-memory tranfer type. This is the

WARNING:TYPO_SPELLING: 'tranfer' may be misspelled - perhaps 'transfer'?
#28: 
This first release covers only the memory-to-memory tranfer type. This is the
                                                    ^^^^^^^

WARNING:TYPO_SPELLING: 'tranfer' may be misspelled - perhaps 'transfer'?
#29: 
only tranfer type supported by this chip.  On other products, it will be used
     ^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#59: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: arch/arm/mach-at91/include/mach/at_hdmac.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#98: FILE: drivers/dma/Kconfig:49:
+config AT_HDMAC
+	tristate "Atmel AHB DMA support"
+	depends on ARCH_AT91SAM9RL
+	select DMA_ENGINE
+	help
+	  Support the Atmel AHB DMA controller.  This can be integrated in
+	  chips such as the Atmel AT91SAM9RL.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#125: FILE: drivers/dma/at_hdmac.c:1:
+/*

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#164: FILE: drivers/dma/at_hdmac.c:40:
+				|ATC_DIF(1))
 				^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#175: FILE: drivers/dma/at_hdmac.c:51:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'initilized' may be misspelled - perhaps 'initialized'?
#191: FILE: drivers/dma/at_hdmac.c:67:
+ * atc_alloc_descriptor - allocate and return an initilized descriptor
                                                  ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'positionned' may be misspelled - perhaps 'positioned'?
#195: FILE: drivers/dma/at_hdmac.c:71:
+ * Note: The ack-bit is positionned in the descriptor flag at creation time
                         ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'unsused' may be misspelled - perhaps 'unused'?
#220: FILE: drivers/dma/at_hdmac.c:96:
+ * atc_desc_get - get a unsused descriptor from free_list
                         ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: drivers/dma/at_hdmac.c:115:
+		dev_dbg(chan2dev(&atchan->chan_common),
+				"desc %p not ACKed\n", desc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: drivers/dma/at_hdmac.c:119:
+	dev_vdbg(chan2dev(&atchan->chan_common),
+		"scanned %u descriptors on freelist\n", i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: drivers/dma/at_hdmac.c:157:
+			dev_vdbg(chan2dev(&atchan->chan_common),
+					"moving child desc %p to freelist\n",

WARNING:TYPO_SPELLING: 'asign' may be misspelled - perhaps 'assign'?
#294: FILE: drivers/dma/at_hdmac.c:170:
+ * @desc: descriptor to asign cookie for
                         ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#360: FILE: drivers/dma/at_hdmac.c:236:
+ * Called with atchan->lock held and bh disabled */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/dma/at_hdmac.c:245:
+	dev_vdbg(chan2dev(&atchan->chan_common),
+		"descriptor %u complete\n", txd->cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: drivers/dma/at_hdmac.c:262:
+		dma_unmap_page(chan2parent(&atchan->chan_common), desc->lli.daddr,
+				desc->len, DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: drivers/dma/at_hdmac.c:265:
+		dma_unmap_page(chan2parent(&atchan->chan_common), desc->lli.saddr,
+				desc->len, DMA_TO_DEVICE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#415: FILE: drivers/dma/at_hdmac.c:291:
+	BUG_ON(atc_chan_is_enabled(atchan));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space prohibited after that open parenthesis '('
#473: FILE: drivers/dma/at_hdmac.c:349:
+	if (   list_empty(&atchan->active_list)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#474: FILE: drivers/dma/at_hdmac.c:350:
+	if (   list_empty(&atchan->active_list)
+	    || list_is_singular(&atchan->active_list)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#483: FILE: drivers/dma/at_hdmac.c:359:
+
+

WARNING:TYPO_SPELLING: 'broked' may be misspelled - perhaps 'broken'?
#497: FILE: drivers/dma/at_hdmac.c:373:
+	 * broked. Since we don't have any way to report errors, we'll
 	   ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#504: FILE: drivers/dma/at_hdmac.c:380:
+	 * in active_list */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: drivers/dma/at_hdmac.c:395:
+	dev_crit(chan2dev(&atchan->chan_common),
+			"Bad descriptor submitted for DMA!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/dma/at_hdmac.c:397:
+	dev_crit(chan2dev(&atchan->chan_common),
+			"  cookie: %d\n", bad_desc->txd.cookie);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#530: FILE: drivers/dma/at_hdmac.c:406:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: drivers/dma/at_hdmac.c:446:
+		dev_vdbg(atdma->dma_common.dev,
+			"interrupt: status = 0x%08x, 0x%08x, 0x%08x\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#592: FILE: drivers/dma/at_hdmac.c:468:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: drivers/dma/at_hdmac.c:490:
+		dev_vdbg(chan2dev(tx->chan), "tx_submit: started %u\n",
+				desc->txd.cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#619: FILE: drivers/dma/at_hdmac.c:495:
+		dev_vdbg(chan2dev(tx->chan), "tx_submit: queued %u\n",
+				desc->txd.cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: drivers/dma/at_hdmac.c:514:
+atc_prep_dma_memcpy(struct dma_chan *chan, dma_addr_t dest, dma_addr_t src,
+		size_t len, unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: drivers/dma/at_hdmac.c:528:
+	dev_vdbg(chan2dev(chan), "prep_dma_memcpy: d0x%x s0x%x l0x%zx f0x%lx\n",
+			dest, src, len, flags);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#671: FILE: drivers/dma/at_hdmac.c:547:
+		src_width = dst_width = 2;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#674: FILE: drivers/dma/at_hdmac.c:550:
+		src_width = dst_width = 1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#677: FILE: drivers/dma/at_hdmac.c:553:
+		src_width = dst_width = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: drivers/dma/at_hdmac.c:558:
+		xfer_count = min_t(size_t, (len - offset) >> src_width,
+				ATC_BTSIZE_MAX);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: drivers/dma/at_hdmac.c:579:
+			list_add_tail(&desc->desc_node,
+					&first->txd.tx_list);

WARNING:TYPO_SPELLING: 'embedds' may be misspelled - perhaps 'embeds'?
#708: FILE: drivers/dma/at_hdmac.c:584:
+	/* First descriptor of the chain embedds additional information */
 	                                 ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: drivers/dma/at_hdmac.c:613:
+atc_is_tx_complete(struct dma_chan *chan,
+		dma_cookie_t cookie,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: drivers/dma/at_hdmac.c:622:
+	dev_vdbg(chan2dev(chan), "is_tx_complete: %d (d%d, u%d)\n",
+			cookie, done ? *done : 0, used ? *used : 0);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#831: FILE: drivers/dma/at_hdmac.c:707:
+	atchan->completed_cookie = chan->cookie = 1;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#859: FILE: drivers/dma/at_hdmac.c:735:
+	BUG_ON(!list_empty(&atchan->active_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#860: FILE: drivers/dma/at_hdmac.c:736:
+	BUG_ON(!list_empty(&atchan->queue));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#861: FILE: drivers/dma/at_hdmac.c:737:
+	BUG_ON(atc_chan_is_enabled(atchan));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#875: FILE: drivers/dma/at_hdmac.c:751:
+
+

WARNING:TYPO_SPELLING: 'capabilites' may be misspelled - perhaps 'capabilities'?
#923: FILE: drivers/dma/at_hdmac.c:799:
+	/* discover transaction capabilites from the platform data */
 	                        ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#957: FILE: drivers/dma/at_hdmac.c:833:
+	atdma->dma_desc_pool = dma_pool_create("at_hdmac_desc_pool",
+			&pdev->dev, sizeof(struct at_desc),

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#975: FILE: drivers/dma/at_hdmac.c:851:
+		atchan->chan_common.cookie = atchan->completed_cookie = 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#978: FILE: drivers/dma/at_hdmac.c:854:
+		list_add_tail(&atchan->chan_common.device_node,
+				&atdma->dma_common.channels);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#989: FILE: drivers/dma/at_hdmac.c:865:
+		tasklet_init(&atchan->tasklet, atc_tasklet,
+				(unsigned long)atchan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1007: FILE: drivers/dma/at_hdmac.c:883:
+	dev_info(&pdev->dev, "Atmel AHB DMA Controller ( %s%s), %d channels\n",
+	  dma_has_cap(DMA_MEMCPY, atdma->dma_common.cap_mask) ? "cpy " : "",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1045: FILE: drivers/dma/at_hdmac.c:921:
+	list_for_each_entry_safe(chan, _chan, &atdma->dma_common.channels,
+			device_node) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1095: FILE: drivers/dma/at_hdmac.c:971:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1129: FILE: drivers/dma/at_hdmac_regs.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1146: FILE: drivers/dma/at_hdmac_regs.h:18:
+
+

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1148: FILE: drivers/dma/at_hdmac_regs.h:20:
+#define		AT_DMA_IF_BIGEND(i)	(0x1 << (i))	/* AHB-Lite Interface i in Big-endian mode */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#1157: FILE: drivers/dma/at_hdmac_regs.h:29:
+#define		AT_DMA_SSREQ(x)	(0x1 << ((x) << 1))		/* Request a source single transfer on channel x */

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#1158: FILE: drivers/dma/at_hdmac_regs.h:30:
+#define		AT_DMA_DSREQ(x)	(0x1 << (1 + ((x) << 1)))	/* Request a destination single transfer on channel x */

WARNING:LONG_LINE_COMMENT: line length of 114 exceeds 100 columns
#1161: FILE: drivers/dma/at_hdmac_regs.h:33:
+#define		AT_DMA_SCREQ(x)	(0x1 << ((x) << 1))		/* Request a source chunk transfer on channel x */

WARNING:LONG_LINE_COMMENT: line length of 119 exceeds 100 columns
#1162: FILE: drivers/dma/at_hdmac_regs.h:34:
+#define		AT_DMA_DCREQ(x)	(0x1 << (1 + ((x) << 1)))	/* Request a destination chunk transfer on channel x */

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#1165: FILE: drivers/dma/at_hdmac_regs.h:37:
+#define		AT_DMA_SLAST(x)	(0x1 << ((x) << 1))		/* This src rq is last tx of buffer on channel x */

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#1166: FILE: drivers/dma/at_hdmac_regs.h:38:
+#define		AT_DMA_DLAST(x)	(0x1 << (1 + ((x) << 1)))	/* This dst rq is last tx of buffer on channel x */

ERROR:SPACING: space prohibited after that open parenthesis '('
#1184: FILE: drivers/dma/at_hdmac_regs.h:56:
+#define		AT_DMA_SUSP(x)	(0x1 << ( 8 + (x)))

ERROR:SPACING: space prohibited after that open parenthesis '('
#1189: FILE: drivers/dma/at_hdmac_regs.h:61:
+#define		AT_DMA_RES(x)	(0x1 << ( 8 + (x)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1195: FILE: drivers/dma/at_hdmac_regs.h:67:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1209: FILE: drivers/dma/at_hdmac_regs.h:81:
+
+

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#1273: FILE: drivers/dma/at_hdmac_regs.h:145:
+#define	ATC_SRC_PER(h)		(0xFU & (h))	/* Channel src rq associated with periph handshaking ifc h */

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#1274: FILE: drivers/dma/at_hdmac_regs.h:146:
+#define	ATC_DST_PER(h)		((0xFU & (h)) <<  4)	/* Channel dst rq associated with periph handshaking ifc h */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1303: FILE: drivers/dma/at_hdmac_regs.h:175:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1341: FILE: drivers/dma/at_hdmac_regs.h:213:
+
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1368: FILE: drivers/dma/at_hdmac_regs.h:240:
+	spinlock_t		lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1389: FILE: drivers/dma/at_hdmac_regs.h:261:
+
+

WARNING:TYPO_SPELLING: 'availlable' may be misspelled - perhaps 'available'?
#1397: FILE: drivers/dma/at_hdmac_regs.h:269:
+ * @all_chan_mask: all channels availlable in a mask
                                 ^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1423: FILE: drivers/dma/at_hdmac_regs.h:295:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1430: FILE: drivers/dma/at_hdmac_regs.h:302:
+}
+static struct device *chan2parent(struct dma_chan *chan)

WARNING:PREFER_DEV_LEVEL: Prefer dev_crit(... to dev_printk(KERN_CRIT, ...
#1460: FILE: drivers/dma/at_hdmac_regs.h:332:
+	dev_printk(KERN_CRIT, chan2dev(&atchan->chan_common),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1461: FILE: drivers/dma/at_hdmac_regs.h:333:
+	dev_printk(KERN_CRIT, chan2dev(&atchan->chan_common),
+			"  desc: s0x%x d0x%x ctrl0x%x:0x%x l0x%x\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1466: FILE: drivers/dma/at_hdmac_regs.h:338:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1491: FILE: drivers/dma/at_hdmac_regs.h:363:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1503: FILE: drivers/dma/at_hdmac_regs.h:375:
+
+

WARNING:TYPO_SPELLING: 'signle' may be misspelled - perhaps 'single'?
#1506: FILE: drivers/dma/at_hdmac_regs.h:378:
+ * @desc: descriptor, signle or at the end of a chain, to end chain on
                       ^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104226.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 34 warnings, 48 checks, 1429 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104226.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
