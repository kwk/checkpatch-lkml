WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#51: FILE: drivers/staging/vme/bridges/Kconfig:3:
+config VME_CA91CX42
+	tristate "Universe I/II"
+	depends on BROKEN
+	help
+	 If you say Y here you get support for the Tundra CA91C042 (Universe I)
+	 and CA91C142 (Universe II) VME bridge chips.
+++ b/drivers/staging/vme/bridges/Makefile
+++ b/drivers/staging/vme/bridges/Makefile

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#93: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:30:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#94: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:31:
+#include <asm/uaccess.h>

CHECK:CAMELCASE: Avoid CamelCase: <vmeSharedData>
#100: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:37:
+extern struct vmeSharedData *vmechip_interboard_data;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#101: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:38:
+extern dma_addr_t vmechip_interboard_datap;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#102: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:39:
+extern const int vmechip_revision;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#103: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:40:
+extern const int vmechip_devid;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#104: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:41:
+extern const int vmechip_irq;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#105: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:42:
+extern int vmechip_irq_overhead_ticks;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#106: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:43:
+extern char *vmechip_baseaddr;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#107: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:44:
+extern const int vme_slotnum;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#108: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:45:
+extern int vme_syscon;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#109: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:46:
+extern unsigned int out_image_va[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#110: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:47:
+extern unsigned int vme_irqlog[8][0x100];

CHECK:CAMELCASE: Avoid CamelCase: <outCTL>
#112: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:49:
+static int outCTL[] = { LSI0_CTL, LSI1_CTL, LSI2_CTL, LSI3_CTL,

CHECK:CAMELCASE: Avoid CamelCase: <outBS>
#116: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:53:
+static int outBS[] = { LSI0_BS, LSI1_BS, LSI2_BS, LSI3_BS,

CHECK:CAMELCASE: Avoid CamelCase: <outBD>
#120: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:57:
+static int outBD[] = { LSI0_BD, LSI1_BD, LSI2_BD, LSI3_BD,

CHECK:CAMELCASE: Avoid CamelCase: <outTO>
#124: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:61:
+static int outTO[] = { LSI0_TO, LSI1_TO, LSI2_TO, LSI3_TO,

CHECK:CAMELCASE: Avoid CamelCase: <inCTL>
#128: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:65:
+static int inCTL[] = { VSI0_CTL, VSI1_CTL, VSI2_CTL, VSI3_CTL,

CHECK:CAMELCASE: Avoid CamelCase: <inBS>
#132: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:69:
+static int inBS[] = { VSI0_BS, VSI1_BS, VSI2_BS, VSI3_BS,

CHECK:CAMELCASE: Avoid CamelCase: <inBD>
#136: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:73:
+static int inBD[] = { VSI0_BD, VSI1_BD, VSI2_BD, VSI3_BD,

CHECK:CAMELCASE: Avoid CamelCase: <inTO>
#140: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:77:
+static int inTO[] = { VSI0_TO, VSI1_TO, VSI2_TO, VSI3_TO,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#143: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:80:
+};
+static int vmevec[7] = { V1_STATID, V2_STATID, V3_STATID, V4_STATID,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#161: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:98:
+extern wait_queue_head_t dma_queue[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#162: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:99:
+extern wait_queue_head_t lm_queue;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#163: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:100:
+extern wait_queue_head_t mbox_queue;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#165: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:102:
+extern int tb_speed;

CHECK:CAMELCASE: Avoid CamelCase: <Interrupt_counters>
#173: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:110:
+static struct interrupt_counters Interrupt_counters = { 0, 0,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#180: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:117:
+#define read_register(offset) readl(vmechip_baseaddr + offset)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:118:
+#define write_register(value,offset) writel(value, vmechip_baseaddr + offset)
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#181: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:118:
+#define write_register(value,offset) writel(value, vmechip_baseaddr + offset)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#182: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:119:
+#define read_register_word(offset) readw(vmechip_baseaddr + offset)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#183: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:120:
+#define write_register_word(value,offset) writew(value, vmechip_baseaddr + offset)
                                  ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#183: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:120:
+#define write_register_word(value,offset) writew(value, vmechip_baseaddr + offset)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:359:
+#define REPORT_IRQ(name,field)     \
                        ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#422: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:359:
+#define REPORT_IRQ(name,field)     \
+    p += sprintf(p, (lint_en & UNIV_BM_LINT_##name) ? "Enabled" : "Masked"); \
+    p += sprintf(p, ", triggered %d times", Interrupt_counters.field); \
+    p += sprintf(p, (lint_stat & UNIV_BM_LINT_##name) ? ", irq now active\n" : "\n");

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#422: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:359:
+#define REPORT_IRQ(name,field)     \
+    p += sprintf(p, (lint_en & UNIV_BM_LINT_##name) ? "Enabled" : "Masked"); \
+    p += sprintf(p, ", triggered %d times", Interrupt_counters.field); \
+    p += sprintf(p, (lint_stat & UNIV_BM_LINT_##name) ? ", irq now active\n" : "\n");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:360:
+    p += sprintf(p, (lint_en & UNIV_BM_LINT_##name) ? "Enabled" : "Masked"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:361:
+    p += sprintf(p, ", triggered %d times", Interrupt_counters.field); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:362:
+    p += sprintf(p, (lint_stat & UNIV_BM_LINT_##name) ? ", irq now active\n" : "\n");$

CHECK:BRACES: braces {} should be used on all arms of this statement
#467: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:404:
+		if (vrai_ctl & UNIV_BM_VRAI_CTL_EN) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#474: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:411:
+		} else

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#481: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:418:
+		if (slsi & UNIV_BM_SLSI_EN) {
[...]
+		} else {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#502: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:439:
+			if (ctl & UNIV_BM_LSI_CTL_EN) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#515: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:452:
+			} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#522: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:459:
+		int i;
+		for (i = 0; i < (vmechip_revision > 0 ? 8 : 4); i++) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#532: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:469:
+			if (ctl & UNIV_BM_LSI_CTL_EN) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#545: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:482:
+			} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#559: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:496:
+	int tmp;
+	tmp = readl(vmechip_baseaddr + PCI_COMMAND);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#564: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:501:
+		return (1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#594: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:531:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'LERR_uni_irqhandler', this function's name, in a string
#595: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:532:
+		       "ca91c042: LERR_uni_irqhandler DMA Read Error DGCS=%08X\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#598: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:535:
+
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#614: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:551:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'VERR_uni_irqhandler', this function's name, in a string
#615: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:552:
+		       "ca91c042: VERR_uni_irqhandler DMA Read Error DGCS=%08X\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#619: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:556:
+
+}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#629: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:566:
+	if (vmechip_irq_overhead_ticks != 0) {
+		wake_up(&mbox_queue);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#704: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:641:
+	if (stat & 0x0000FE) {
+		VIRQ_uni_irqhandler(stat & 0x0000FE);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#707: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:644:
+	if (stat & UNIV_BM_LINT_ACFAIL) {
+		Interrupt_counters.acfail++;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#710: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:647:
+	if (stat & UNIV_BM_LINT_SYSFAIL) {
+		Interrupt_counters.sysfail++;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#713: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:650:
+	if (stat & UNIV_BM_LINT_SW_INT) {
+		Interrupt_counters.sw_int++;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#716: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:653:
+	if (stat & UNIV_BM_LINT_SW_IACK) {
+		Interrupt_counters.sw_iack++;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#719: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:656:
+	if (stat & UNIV_BM_LINT_VOWN) {
+		Interrupt_counters.vown++;
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#730: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:667:
+int uni_generate_irq(virqInfo_t * vmeIrq)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <virqInfo_t>
#730: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:667:
+int uni_generate_irq(virqInfo_t * vmeIrq)

CHECK:CAMELCASE: Avoid CamelCase: <vmeIrq>
#730: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:667:
+int uni_generate_irq(virqInfo_t * vmeIrq)

CHECK:CAMELCASE: Avoid CamelCase: <waitTime>
#735: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:672:
+	timeout = vmeIrq->waitTime;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#736: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:673:
+	if (timeout == 0) {
+		timeout++;	// Wait at least 1 tick...
+	}

CHECK:CAMELCASE: Avoid CamelCase: <timeOutFlag>
#741: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:678:
+	vmeIrq->timeOutFlag = 0;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#767: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:704:
+	return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#774: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:711:
+int uni_set_arbiter(vmeArbiterCfg_t * vmeArb)

CHECK:CAMELCASE: Avoid CamelCase: <vmeArbiterCfg_t>
#774: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:711:
+int uni_set_arbiter(vmeArbiterCfg_t * vmeArb)

CHECK:CAMELCASE: Avoid CamelCase: <vmeArb>
#774: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:711:
+int uni_set_arbiter(vmeArbiterCfg_t * vmeArb)

CHECK:CAMELCASE: Avoid CamelCase: <globalTimeoutTimer>
#782: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:719:
+	if (vmeArb->globalTimeoutTimer == 0xFFFFFFFF) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#790: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:727:
+		while ((16 * (1 << (vbto - 1))) < vmeArb->globalTimeoutTimer) {
+			vbto += 1;
+		}

CHECK:CAMELCASE: Avoid CamelCase: <arbiterMode>
#796: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:733:
+	if (vmeArb->arbiterMode == VME_PRIORITY_MODE) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#796: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:733:
+	if (vmeArb->arbiterMode == VME_PRIORITY_MODE) {
+		temp_ctl |= 1 << 26;
+	}

CHECK:CAMELCASE: Avoid CamelCase: <arbiterTimeoutFlag>
#800: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:737:
+	if (vmeArb->arbiterTimeoutFlag) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#800: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:737:
+	if (vmeArb->arbiterTimeoutFlag) {
+		temp_ctl |= 2 << 24;
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#805: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:742:
+	return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#812: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:749:
+int uni_get_arbiter(vmeArbiterCfg_t * vmeArb)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#820: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:757:
+	if (vbto != 0) {
+		vmeArb->globalTimeoutTimer = (16 * (1 << (vbto - 1)));
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#824: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:761:
+	if (temp_ctl & (1 << 26)) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#830: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:767:
+	if (temp_ctl & (3 << 24)) {
+		vmeArb->arbiterTimeoutFlag = 1;
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#840: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:777:
+int uni_set_requestor(vmeRequesterCfg_t * vmeReq)

CHECK:CAMELCASE: Avoid CamelCase: <vmeRequesterCfg_t>
#840: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:777:
+int uni_set_requestor(vmeRequesterCfg_t * vmeReq)

CHECK:CAMELCASE: Avoid CamelCase: <vmeReq>
#840: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:777:
+int uni_set_requestor(vmeRequesterCfg_t * vmeReq)

CHECK:CAMELCASE: Avoid CamelCase: <releaseMode>
#847: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:784:
+	if (vmeReq->releaseMode == 1) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#847: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:784:
+	if (vmeReq->releaseMode == 1) {
+		temp_ctl |= (1 << 20);
+	}

CHECK:CAMELCASE: Avoid CamelCase: <fairMode>
#851: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:788:
+	if (vmeReq->fairMode == 1) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#851: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:788:
+	if (vmeReq->fairMode == 1) {
+		temp_ctl |= (1 << 21);
+	}

CHECK:CAMELCASE: Avoid CamelCase: <requestLevel>
#855: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:792:
+	temp_ctl |= (vmeReq->requestLevel << 22);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#858: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:795:
+	return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#865: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:802:
+int uni_get_requestor(vmeRequesterCfg_t * vmeReq)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#871: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:808:
+	if (temp_ctl & (1 << 20)) {
+		vmeReq->releaseMode = 1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#875: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:812:
+	if (temp_ctl & (1 << 21)) {
+		vmeReq->fairMode = 1;
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#881: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:818:
+	return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#888: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:825:
+int uni_set_in_bound(vmeInWindowCfg_t * vmeIn)

CHECK:CAMELCASE: Avoid CamelCase: <vmeInWindowCfg_t>
#888: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:825:
+int uni_set_in_bound(vmeInWindowCfg_t * vmeIn)

CHECK:CAMELCASE: Avoid CamelCase: <vmeIn>
#888: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:825:
+int uni_set_in_bound(vmeInWindowCfg_t * vmeIn)

CHECK:CAMELCASE: Avoid CamelCase: <windowNbr>
#893: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:830:
+	if (vmeIn->windowNbr > 7) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#893: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:830:
+	if (vmeIn->windowNbr > 7) {
+		return (-EINVAL);
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vmeIn->vmeAddrU'
#896: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:833:
+	if ((vmeIn->vmeAddrU) || (vmeIn->windowSizeU) || (vmeIn->pciAddrU)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vmeIn->windowSizeU'
#896: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:833:
+	if ((vmeIn->vmeAddrU) || (vmeIn->windowSizeU) || (vmeIn->pciAddrU)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vmeIn->pciAddrU'
#896: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:833:
+	if ((vmeIn->vmeAddrU) || (vmeIn->windowSizeU) || (vmeIn->pciAddrU)) {

CHECK:CAMELCASE: Avoid CamelCase: <vmeAddrU>
#896: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:833:
+	if ((vmeIn->vmeAddrU) || (vmeIn->windowSizeU) || (vmeIn->pciAddrU)) {

CHECK:CAMELCASE: Avoid CamelCase: <windowSizeU>
#896: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:833:
+	if ((vmeIn->vmeAddrU) || (vmeIn->windowSizeU) || (vmeIn->pciAddrU)) {

CHECK:CAMELCASE: Avoid CamelCase: <pciAddrU>
#896: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:833:
+	if ((vmeIn->vmeAddrU) || (vmeIn->windowSizeU) || (vmeIn->pciAddrU)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#896: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:833:
+	if ((vmeIn->vmeAddrU) || (vmeIn->windowSizeU) || (vmeIn->pciAddrU)) {
+		return (-EINVAL);
+	}

CHECK:CAMELCASE: Avoid CamelCase: <vmeAddrL>
#899: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:836:
+	if ((vmeIn->vmeAddrL & 0xFFF) ||

CHECK:CAMELCASE: Avoid CamelCase: <windowSizeL>
#900: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:837:
+	    (vmeIn->windowSizeL & 0xFFF) || (vmeIn->pciAddrL & 0xFFF)) {

CHECK:CAMELCASE: Avoid CamelCase: <pciAddrL>
#900: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:837:
+	    (vmeIn->windowSizeL & 0xFFF) || (vmeIn->pciAddrL & 0xFFF)) {

CHECK:CAMELCASE: Avoid CamelCase: <bcastRespond2esst>
#904: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:841:
+	if (vmeIn->bcastRespond2esst) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#904: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:841:
+	if (vmeIn->bcastRespond2esst) {
+		return (-EINVAL);
+	}

CHECK:CAMELCASE: Avoid CamelCase: <addrSpace>
#907: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:844:
+	switch (vmeIn->addrSpace) {

CHECK:CAMELCASE: Avoid CamelCase: <wrPostEnable>
#939: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:876:
+	if (vmeIn->wrPostEnable)

CHECK:CAMELCASE: Avoid CamelCase: <prefetchEnable>
#941: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:878:
+	if (vmeIn->prefetchEnable)

CHECK:CAMELCASE: Avoid CamelCase: <rmwLock>
#943: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:880:
+	if (vmeIn->rmwLock)

CHECK:CAMELCASE: Avoid CamelCase: <data64BitCapable>
#945: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:882:
+	if (vmeIn->data64BitCapable)

CHECK:CAMELCASE: Avoid CamelCase: <userAccessType>
#947: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:884:
+	if (vmeIn->userAccessType & VME_USER)

CHECK:CAMELCASE: Avoid CamelCase: <dataAccessType>
#951: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:888:
+	if (vmeIn->dataAccessType & VME_DATA)

CHECK:CAMELCASE: Avoid CamelCase: <windowEnable>
#959: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:896:
+	if (vmeIn->windowEnable)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#963: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:900:
+	return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#970: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:907:
+int uni_get_in_bound(vmeInWindowCfg_t * vmeIn)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#975: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:912:
+	if (vmeIn->windowNbr > 7) {
+		return (-EINVAL);
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1032: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:969:
+int uni_set_out_bound(vmeOutWindowCfg_t * vmeOut)

CHECK:CAMELCASE: Avoid CamelCase: <vmeOutWindowCfg_t>
#1032: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:969:
+int uni_set_out_bound(vmeOutWindowCfg_t * vmeOut)

CHECK:CAMELCASE: Avoid CamelCase: <vmeOut>
#1032: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:969:
+int uni_set_out_bound(vmeOutWindowCfg_t * vmeOut)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1037: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:974:
+	if (vmeOut->windowNbr > 7) {
+		return (-EINVAL);
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vmeOut->xlatedAddrU'
#1040: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:977:
+	if ((vmeOut->xlatedAddrU) || (vmeOut->windowSizeU)
+	    || (vmeOut->pciBusAddrU)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vmeOut->windowSizeU'
#1040: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:977:
+	if ((vmeOut->xlatedAddrU) || (vmeOut->windowSizeU)
+	    || (vmeOut->pciBusAddrU)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vmeOut->pciBusAddrU'
#1040: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:977:
+	if ((vmeOut->xlatedAddrU) || (vmeOut->windowSizeU)
+	    || (vmeOut->pciBusAddrU)) {

CHECK:CAMELCASE: Avoid CamelCase: <xlatedAddrU>
#1040: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:977:
+	if ((vmeOut->xlatedAddrU) || (vmeOut->windowSizeU)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1041: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:978:
+	if ((vmeOut->xlatedAddrU) || (vmeOut->windowSizeU)
+	    || (vmeOut->pciBusAddrU)) {

CHECK:CAMELCASE: Avoid CamelCase: <pciBusAddrU>
#1041: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:978:
+	    || (vmeOut->pciBusAddrU)) {

CHECK:CAMELCASE: Avoid CamelCase: <xlatedAddrL>
#1044: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:981:
+	if ((vmeOut->xlatedAddrL & 0xFFF) ||

CHECK:CAMELCASE: Avoid CamelCase: <pciBusAddrL>
#1045: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:982:
+	    (vmeOut->windowSizeL & 0xFFF) || (vmeOut->pciBusAddrL & 0xFFF)) {

CHECK:CAMELCASE: Avoid CamelCase: <bcastSelect2esst>
#1048: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:985:
+	if (vmeOut->bcastSelect2esst) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1048: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:985:
+	if (vmeOut->bcastSelect2esst) {
+		return (-EINVAL);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1088: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1025:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1096: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1033:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1104: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1041:
+		printk(KERN_ERR

CHECK:CAMELCASE: Avoid CamelCase: <maxDataWidth>
#1116: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1053:
+	if (vmeOut->maxDataWidth == VME_D16)

CHECK:CAMELCASE: Avoid CamelCase: <xferProtocol>
#1122: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1059:
+	if (vmeOut->xferProtocol & (VME_BLT | VME_MBLT))

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1132: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1069:
+	return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1139: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1076:
+int uni_get_out_bound(vmeOutWindowCfg_t * vmeOut)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1144: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1081:
+	if (vmeOut->windowNbr > 7) {
+		return (-EINVAL);
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1220: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1157:
+int uni_setup_lm(vmeLmCfg_t * vmeLm)

CHECK:CAMELCASE: Avoid CamelCase: <vmeLmCfg_t>
#1220: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1157:
+int uni_setup_lm(vmeLmCfg_t * vmeLm)

CHECK:CAMELCASE: Avoid CamelCase: <vmeLm>
#1220: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1157:
+int uni_setup_lm(vmeLmCfg_t * vmeLm)

CHECK:CAMELCASE: Avoid CamelCase: <addrU>
#1224: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1161:
+	if (vmeLm->addrU) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1224: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1161:
+	if (vmeLm->addrU) {
+		return (-EINVAL);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1273: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1210:
+	return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1280: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1217:
+int uni_wait_lm(vmeLmCfg_t * vmeLm)

CHECK:CAMELCASE: Avoid CamelCase: <lmWait>
#1289: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1226:
+		if (vmeLm->lmWait < 10)

CHECK:CAMELCASE: Avoid CamelCase: <lmEvents>
#1294: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1231:
+	vmeLm->lmEvents = uni_lm_event;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1296: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1233:
+	return (0);

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#1299: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1236:
+#define	SWIZZLE(X) ( ((X & 0xFF000000) >> 24) | ((X & 0x00FF0000) >>  8) | ((X & 0x0000FF00) <<  8) | ((X & 0x000000FF) << 24))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#1299: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1236:
+#define	SWIZZLE(X) ( ((X & 0xFF000000) >> 24) | ((X & 0x00FF0000) >>  8) | ((X & 0x0000FF00) <<  8) | ((X & 0x000000FF) << 24))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#1299: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1236:
+#define	SWIZZLE(X) ( ((X & 0xFF000000) >> 24) | ((X & 0x00FF0000) >>  8) | ((X & 0x0000FF00) <<  8) | ((X & 0x000000FF) << 24))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'X' may be better as '(X)' to avoid precedence issues
#1299: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1236:
+#define	SWIZZLE(X) ( ((X & 0xFF000000) >> 24) | ((X & 0x00FF0000) >>  8) | ((X & 0x0000FF00) <<  8) | ((X & 0x000000FF) << 24))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1305: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1242:
+int uni_do_rmw(vmeRmwCfg_t * vmeRmw)

CHECK:CAMELCASE: Avoid CamelCase: <vmeRmwCfg_t>
#1305: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1242:
+int uni_do_rmw(vmeRmwCfg_t * vmeRmw)

CHECK:CAMELCASE: Avoid CamelCase: <vmeRmw>
#1305: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1242:
+int uni_do_rmw(vmeRmwCfg_t * vmeRmw)

CHECK:CAMELCASE: Avoid CamelCase: <tempBS>
#1308: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1245:
+	int tempBS = 0;

CHECK:CAMELCASE: Avoid CamelCase: <tempBD>
#1309: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1246:
+	int tempBD = 0;

CHECK:CAMELCASE: Avoid CamelCase: <tempTO>
#1310: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1247:
+	int tempTO = 0;

CHECK:CAMELCASE: Avoid CamelCase: <vmeBS>
#1311: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1248:
+	int vmeBS = 0;

CHECK:CAMELCASE: Avoid CamelCase: <vmeBD>
#1312: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1249:
+	int vmeBD = 0;

CHECK:CAMELCASE: Avoid CamelCase: <vaDataPtr>
#1314: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1251:
+	int *vaDataPtr = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1317: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1254:
+	vmeOutWindowCfg_t vmeOut;
+	if (vmeRmw->maxAttempts < 1) {

CHECK:CAMELCASE: Avoid CamelCase: <maxAttempts>
#1317: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1254:
+	if (vmeRmw->maxAttempts < 1) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1317: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1254:
+	if (vmeRmw->maxAttempts < 1) {
+		return (-EINVAL);
+	}

CHECK:CAMELCASE: Avoid CamelCase: <targetAddrU>
#1320: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1257:
+	if (vmeRmw->targetAddrU) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1320: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1257:
+	if (vmeRmw->targetAddrU) {
+		return (-EINVAL);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1326: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1263:
+		if ((temp_ctl & 0x80000000) == 0) {
+			continue;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1332: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1269:
+		if (vmeOut.addrSpace != vmeRmw->addrSpace) {
+			continue;
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vmeRmw->targetAddr >= vmeBS'
#1340: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1277:
+		if ((vmeRmw->targetAddr >= vmeBS) &&
+		    (vmeRmw->targetAddr < vmeBD)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vmeRmw->targetAddr < vmeBD'
#1340: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1277:
+		if ((vmeRmw->targetAddr >= vmeBS) &&
+		    (vmeRmw->targetAddr < vmeBD)) {

CHECK:CAMELCASE: Avoid CamelCase: <targetAddr>
#1340: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1277:
+		if ((vmeRmw->targetAddr >= vmeBS) &&

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1352: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1289:
+	if (rmw_pci_data_ptr == NULL) {
+		return (-EINVAL);
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rmw_pci_data_ptr"
#1352: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1289:
+	if (rmw_pci_data_ptr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <enableMask>
#1357: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1294:
+	writel(SWIZZLE(vmeRmw->enableMask), vmechip_baseaddr + SCYC_EN);

CHECK:CAMELCASE: Avoid CamelCase: <compareData>
#1358: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1295:
+	writel(SWIZZLE(vmeRmw->compareData), vmechip_baseaddr + SCYC_CMP);

CHECK:CAMELCASE: Avoid CamelCase: <swapData>
#1359: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1296:
+	writel(SWIZZLE(vmeRmw->swapData), vmechip_baseaddr + SCYC_SWP);

CHECK:CAMELCASE: Avoid CamelCase: <numAttempts>
#1364: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1301:
+	vmeRmw->numAttempts = 1;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1366: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1303:
+	while (vmeRmw->numAttempts <= vmeRmw->maxAttempts) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1369: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1306:
+		    (vmeRmw->swapData & vmeRmw->enableMask)) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1373: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1310:
+
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1378: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1315:
+	if (vmeRmw->numAttempts > vmeRmw->maxAttempts) {
+		vmeRmw->numAttempts = vmeRmw->maxAttempts + 1;
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1389: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1326:
+int uniSetupDctlReg(vmeDmaPacket_t * vmeDma, int *dctlregreturn)

CHECK:CAMELCASE: Avoid CamelCase: <uniSetupDctlReg>
#1389: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1326:
+int uniSetupDctlReg(vmeDmaPacket_t * vmeDma, int *dctlregreturn)

CHECK:CAMELCASE: Avoid CamelCase: <vmeDmaPacket_t>
#1389: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1326:
+int uniSetupDctlReg(vmeDmaPacket_t * vmeDma, int *dctlregreturn)

CHECK:CAMELCASE: Avoid CamelCase: <vmeDma>
#1389: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1326:
+int uniSetupDctlReg(vmeDmaPacket_t * vmeDma, int *dctlregreturn)

CHECK:CAMELCASE: Avoid CamelCase: <vmeAttr>
#1392: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1329:
+	struct vmeAttr *vmeAttr;

CHECK:CAMELCASE: Avoid CamelCase: <srcBus>
#1394: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1331:
+	if (vmeDma->srcBus == VME_DMA_VME) {

CHECK:CAMELCASE: Avoid CamelCase: <srcVmeAttr>
#1396: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1333:
+		vmeAttr = &vmeDma->srcVmeAttr;

CHECK:CAMELCASE: Avoid CamelCase: <dstVmeAttr>
#1399: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1336:
+		vmeAttr = &vmeDma->dstVmeAttr;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1437: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1374:
+		return (-EINVAL);
+		break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1439: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1376:
+	if (vmeAttr->userAccessType == VME_PROG) {
+		dctlreg |= 0x00004000;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1442: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1379:
+	if (vmeAttr->dataAccessType == VME_SUPER) {
+		dctlreg |= 0x00001000;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1445: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1382:
+	if (vmeAttr->xferProtocol != VME_SCT) {
+		dctlreg |= 0x00000100;
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1449: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1386:
+	return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1457: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1394:
+uni_start_dma(int channel, unsigned int dgcsreg, TDMA_Cmd_Packet * vmeLL)

CHECK:CAMELCASE: Avoid CamelCase: <vmeLL>
#1457: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1394:
+uni_start_dma(int channel, unsigned int dgcsreg, TDMA_Cmd_Packet * vmeLL)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1466: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1403:
+#if	0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1467: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1404:
+		printk("Starting: DGCS = %08x\n", dgcsreg);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1468: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1405:
+		printk("Starting: DVA  = %08x\n", readl(&vmeLL->dva));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1469: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1406:
+		printk("Starting: DLV  = %08x\n", readl(&vmeLL->dlv));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1470: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1407:
+		printk("Starting: DTBC = %08x\n", readl(&vmeLL->dtbc));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1471: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1408:
+		printk("Starting: DCTL = %08x\n", readl(&vmeLL->dctl));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1485: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1422:
+	return (val);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1492: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1429:
+TDMA_Cmd_Packet *uni_setup_dma(vmeDmaPacket_t * vmeDma)

CHECK:CAMELCASE: Avoid CamelCase: <vmeCur>
#1494: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1431:
+	vmeDmaPacket_t *vmeCur;

CHECK:CAMELCASE: Avoid CamelCase: <maxPerPage>
#1495: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1432:
+	int maxPerPage;

CHECK:CAMELCASE: Avoid CamelCase: <currentLLcount>
#1496: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1433:
+	int currentLLcount;

CHECK:CAMELCASE: Avoid CamelCase: <startLL>
#1497: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1434:
+	TDMA_Cmd_Packet *startLL;

CHECK:CAMELCASE: Avoid CamelCase: <currentLL>
#1498: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1435:
+	TDMA_Cmd_Packet *currentLL;

CHECK:CAMELCASE: Avoid CamelCase: <nextLL>
#1499: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1436:
+	TDMA_Cmd_Packet *nextLL;

CHECK:SPACING: No space is necessary after a cast
#1503: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1440:
+	startLL = (TDMA_Cmd_Packet *) __get_free_pages(GFP_KERNEL, 0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1504: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1441:
+	if (startLL == 0) {
+		return (startLL);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1505: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1442:
+		return (startLL);

CHECK:CAMELCASE: Avoid CamelCase: <pNextPacket>
#1512: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1449:
+		if (vmeCur->pNextPacket != 0) {

CHECK:SPACING: No space is necessary after a cast
#1520: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1457:
+			currentLL = (TDMA_Cmd_Packet *) currentLL->dcpp;

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)0' could be '0U'
#1522: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1459:
+			currentLL->dcpp = (unsigned int)0;

CHECK:CAMELCASE: Avoid CamelCase: <srcAddr>
#1532: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1469:
+			writel(vmeCur->srcAddr, &currentLL->dva);

CHECK:CAMELCASE: Avoid CamelCase: <dstAddr>
#1533: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1470:
+			writel(vmeCur->dstAddr, &currentLL->dlv);

CHECK:CAMELCASE: Avoid CamelCase: <byteCount>
#1540: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1477:
+		writel(vmeCur->byteCount, &currentLL->dtbc);

CHECK:SPACING: No space is necessary after a cast
#1542: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1479:
+		currentLL = (TDMA_Cmd_Packet *) currentLL->dcpp;

CHECK:SPACING: No space is necessary after a cast
#1549: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1486:
+		nextLL = (TDMA_Cmd_Packet *) currentLL->dcpp;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1567: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1504:
+int uni_free_dma(TDMA_Cmd_Packet * startLL)

CHECK:CAMELCASE: Avoid CamelCase: <prevLL>
#1570: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1507:
+	TDMA_Cmd_Packet *prevLL;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1579: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1516:
+		if (dcppreg & 1) {
[...]
+		} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#1584: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1521:
+		currentLL = (TDMA_Cmd_Packet *) currentLL->dcpp;

CHECK:SPACING: No space is necessary after a cast
#1591: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1528:
+		nextLL = (TDMA_Cmd_Packet *) currentLL->dcpp;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1607: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1544:
+int uni_do_dma(vmeDmaPacket_t * vmeDma)

CHECK:CAMELCASE: Avoid CamelCase: <curDma>
#1613: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1550:
+	vmeDmaPacket_t *curDma;

CHECK:CAMELCASE: Avoid CamelCase: <dmaLL>
#1614: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1551:
+	TDMA_Cmd_Packet *dmaLL;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1618: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1555:
+	if (channel > 0) {
+		return (-EINVAL);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1623: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1560:
+		if (curDma->byteCount == 0) {
+			return (-EINVAL);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1626: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1563:
+		if (curDma->byteCount >= 0x1000000) {
+			return (-EINVAL);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1629: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1566:
+		if ((curDma->srcAddr & 7) != (curDma->dstAddr & 7)) {
+			return (-EINVAL);
+		}

CHECK:CAMELCASE: Avoid CamelCase: <dstBus>
#1634: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1571:
+			if (curDma->dstBus != VME_DMA_VME) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1634: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1571:
+			if (curDma->dstBus != VME_DMA_VME) {
+				return (-EINVAL);
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1639: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1576:
+			if (curDma->dstBus != VME_DMA_PCI) {
+				return (-EINVAL);
+			}

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1645: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1582:
+			return (-EINVAL);
+			break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1647: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1584:
+		if (uniSetupDctlReg(curDma, &dctlreg) < 0) {
+			return (-EINVAL);
+		}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1658: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1595:
+	if (vmeDma->pNextPacket != 0) {
[...]
+	} else {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <maxVmeBlockSize>
#1665: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1602:
+		if ((256 << x) >= vmeDma->maxVmeBlockSize) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1665: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1602:
+		if ((256 << x) >= vmeDma->maxVmeBlockSize) {
+			break;
+		}

CHECK:CAMELCASE: Avoid CamelCase: <vmeBackOffTimer>
#1673: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1610:
+	if (vmeDma->vmeBackOffTimer) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1675: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1612:
+			if ((16 << (x - 1)) >= vmeDma->vmeBackOffTimer) {
+				break;
+			}

CHECK:CAMELCASE: Avoid CamelCase: <vmeDmaStartTick>
#1688: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1625:
+		vmeDma->vmeDmaStartTick =

CHECK:SPACING: No space is necessary after a cast
#1690: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1627:
+				  (TDMA_Cmd_Packet *) virt_to_phys(dmaLL));

CHECK:CAMELCASE: Avoid CamelCase: <vmeDmaStatus>
#1702: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1639:
+	vmeDma->vmeDmaStatus = 0;

CHECK:CAMELCASE: Avoid CamelCase: <vmeDmaStopTick>
#1703: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1640:
+	vmeDma->vmeDmaStopTick = uni_dma_irq_time;

CHECK:CAMELCASE: Avoid CamelCase: <vmeDmaElapsedTime>
#1705: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1642:
+		vmeDma->vmeDmaElapsedTime =

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1717: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1654:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1721: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1658:
+		printk(KERN_ERR "ca91c042: DCPP=%08X\n", val);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1723: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1660:
+		printk(KERN_ERR "ca91c042: DCTL=%08X\n", val);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1725: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1662:
+		printk(KERN_ERR "ca91c042: DTBC=%08X\n", val);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1727: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1664:
+		printk(KERN_ERR "ca91c042: DLA=%08X\n", val);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1729: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1666:
+		printk(KERN_ERR "ca91c042: DVA=%08X\n", val);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1731: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1668:
+
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1735: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1672:
+	return (0);

CHECK:CAMELCASE: Avoid CamelCase: <irqOverHeadStart>
#1776: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1713:
+	unsigned int irqOverHeadStart;

CHECK:CAMELCASE: Avoid CamelCase: <overHeadTicks>
#1777: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1714:
+	int overHeadTicks;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1788: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1725:
+	if (tmp & 0x20000) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1802: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1739:
+	if (vme_slotnum != -1) {
+		writel(vme_slotnum << 27, vmechip_baseaddr + VCSR_BS);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1808: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1745:
+	if (vme_slotnum != -1) {
+		writel(0x80000000, vmechip_baseaddr + VCSR_CTL);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1820: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1757:
+		printk(KERN_ERR

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1823: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1760:
+		return (0);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1824: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1761:
+		return (0);
+	} else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1838: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1775:
+	if (readl(vmechip_baseaddr + LINT_EN) != tmp) {
+		return (0);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1839: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1776:
+		return (0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1841: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1778:
+	if (readl(vmechip_baseaddr + PCI_CLASS_REVISION) != 0x06800002) {
+		return (0);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1842: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1779:
+		return (0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1847: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1784:
+		if (readl(vmechip_baseaddr + SCYC_EN) != tmp) {
+			return (0);
+		}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1848: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1785:
+			return (0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1850: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1787:
+		if (readl(vmechip_baseaddr + SCYC_CMP) != ~tmp) {
+			return (0);
+		}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1851: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1788:
+			return (0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1859: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1796:
+	for (tmp = 0; tmp < 10; tmp++) {
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1864: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1801:
+	for (tmp = 0; tmp < 10; tmp++) {
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1868: FILE: drivers/staging/vme/bridges/vme_ca91cx42.c:1805:
+	if (overHeadTicks > 0) {
[...]
+	} else {
[...]

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1878: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <TirqHandler>
#1910: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:33:
+typedef void (*TirqHandler) (int vmeirq, int vector, void *dev_id,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1911: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:34:
+			     struct pt_regs * regs);

CHECK:CAMELCASE: Avoid CamelCase: <TDMAcallback>
#1913: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:36:
+typedef void (*TDMAcallback) (int status);

CHECK:CAMELCASE: Avoid CamelCase: <Universe_BaseAddr>
#1916: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:39:
+char *Universe_BaseAddr(void);

CHECK:CAMELCASE: Avoid CamelCase: <Universe_IRQ>
#1918: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:41:
+int Universe_IRQ(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'TirqHandler' should also have an identifier name
#1927: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:50:
+int request_vmeirq(unsigned int irq, TirqHandler);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1933: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:56:
+int uni_procinfo(char *);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1953: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:76:
+typedef struct {

WARNING:TYPO_SPELLING: 'normaly' may be misspelled - perhaps 'normally'?
#1965: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:88:
+ * Below here is normaly not used by a user module
                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1967: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:90:
+#define  DMATIMEOUT 2*HZ;
                      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1967: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:90:
+#define  DMATIMEOUT 2*HZ;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1967: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:90:
+#define  DMATIMEOUT 2*HZ;

WARNING:LONG_LINE: line length of 214 exceeds 100 columns
#2016: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:139:
+#define UNIV_BM_LSI_CTL_RESERVED (~ (UNIV_BM_LSI_CTL_EN | UNIV_BM_LSI_CTL_PWEN | UNIV_BM_LSI_CTL_VDW | UNIV_BM_LSI_CTL_VAS | UNIV_BM_LSI_CTL_PGM | UNIV_BM_LSI_CTL_SUPER | UNIV_BM_LSI_CTL_VCT | UNIV_BM_LSI_CTL_LAS))

ERROR:SPACING: space prohibited after that '~' (ctx:BxW)
#2016: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:139:
+#define UNIV_BM_LSI_CTL_RESERVED (~ (UNIV_BM_LSI_CTL_EN | UNIV_BM_LSI_CTL_PWEN | UNIV_BM_LSI_CTL_VDW | UNIV_BM_LSI_CTL_VAS | UNIV_BM_LSI_CTL_PGM | UNIV_BM_LSI_CTL_SUPER | UNIV_BM_LSI_CTL_VCT | UNIV_BM_LSI_CTL_LAS))
                                   ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2022: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:145:
+#define IOCTL_SET_CTL ^I0xF001$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2027: FILE: drivers/staging/vme/bridges/vme_ca91cx42.h:150:
+#define IOCTL_SET_MODE ^I0xF006$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000089197.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 43 errors, 117 warnings, 142 checks, 2237 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000089197.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
