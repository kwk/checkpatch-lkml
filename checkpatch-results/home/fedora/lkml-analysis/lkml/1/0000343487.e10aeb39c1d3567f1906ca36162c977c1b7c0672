CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#75: FILE: arch/x86/mm/fault_32.c:39:
+#define PF_PROT	(1<<0)
                	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#75: FILE: arch/x86/mm/fault_32.c:39:
+#define PF_PROT	(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#76: FILE: arch/x86/mm/fault_32.c:40:
+#define PF_WRITE	(1<<1)
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#76: FILE: arch/x86/mm/fault_32.c:40:
+#define PF_WRITE	(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#77: FILE: arch/x86/mm/fault_32.c:41:
+#define PF_USER	(1<<2)
                	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#77: FILE: arch/x86/mm/fault_32.c:41:
+#define PF_USER	(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#78: FILE: arch/x86/mm/fault_32.c:42:
+#define PF_RSVD	(1<<3)
                	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#78: FILE: arch/x86/mm/fault_32.c:42:
+#define PF_RSVD	(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#79: FILE: arch/x86/mm/fault_32.c:43:
+#define PF_INSTR	(1<<4)
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#79: FILE: arch/x86/mm/fault_32.c:43:
+#define PF_INSTR	(1<<4)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#81: FILE: arch/x86/mm/fault_32.c:45:
+extern void die(const char *, struct pt_regs *, long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#81: FILE: arch/x86/mm/fault_32.c:45:
+extern void die(const char *, struct pt_regs *, long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#81: FILE: arch/x86/mm/fault_32.c:45:
+extern void die(const char *, struct pt_regs *, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#81: FILE: arch/x86/mm/fault_32.c:45:
+extern void die(const char *, struct pt_regs *, long);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#145: FILE: arch/x86/mm/fault_32.c:128:
+	if (seg & (1<<2))
 	            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#323: FILE: arch/x86/mm/fault_32.c:424:
+	switch (error_code & (PF_PROT|PF_WRITE)) {
 	                             ^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#325: FILE: arch/x86/mm/fault_32.c:426:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#392: FILE: arch/x86/mm/fault_32.c:562:
+		printk(" at virtual address %08lx\n", address);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#430: FILE: arch/x86/mm/fault_64.c:42:
+#define PF_PROT	(1<<0)
                	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#430: FILE: arch/x86/mm/fault_64.c:42:
+#define PF_PROT	(1<<0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#581: FILE: arch/x86/mm/fault_64.c:166:
+	if (!pgd_present(*pgd)) goto ret;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#590: FILE: arch/x86/mm/fault_64.c:180:
+	printk("PTE %lx", pte_val(*pte));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#631: FILE: arch/x86/mm/fault_64.c:213:
+			printk(errata93_warning);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#685: FILE: arch/x86/mm/fault_64.c:429:
+		/* fall through */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#743: FILE: arch/x86/mm/fault_64.c:538:
+	printk(" at %016lx RIP: \n" KERN_ALERT, address);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#743: FILE: arch/x86/mm/fault_64.c:538:
+	printk(" at %016lx RIP: \n" KERN_ALERT, address);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000343487.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 14 checks, 666 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000343487.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
