WARNING:TYPO_SPELLING: 'somethig' may be misspelled - perhaps 'something'?
#36: 
> yeah, somethig like that. I'd suggest to print out the actual 
        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#68: 
[RFC][PATCH] perf_counter tools: introduce perf test to test event for ticks

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#142: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#209: FILE: tools/perf/builtin-test.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'performace' may be misspelled - perhaps 'performance'?
#212: FILE: tools/perf/builtin-test.c:4:
+ * Builtin test command: Test performace counter events
                               ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: tools/perf/builtin-test.c:8:
+ $ perf test -a -- ls -lR > /dev/null $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: tools/perf/builtin-test.c:87:
+^I   (PERF_COUNT_HW_CACHE_RESULT_##z << 16))^I^I^I^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: tools/perf/builtin-test.c:91:
+  { CHW(CPU_CYCLES)^I^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: tools/perf/builtin-test.c:92:
+  { CHW(INSTRUCTIONS)^I^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: tools/perf/builtin-test.c:93:
+  { CHW(CACHE_REFERENCES)^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: tools/perf/builtin-test.c:94:
+  { CHW(CACHE_MISSES)^I^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: tools/perf/builtin-test.c:95:
+  { CHW(BRANCH_INSTRUCTIONS)^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: tools/perf/builtin-test.c:96:
+  { CHW(BRANCH_MISSES)^I^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: tools/perf/builtin-test.c:97:
+  { CHW(BUS_CYCLES)^I^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: tools/perf/builtin-test.c:100:
+  { CSW(CPU_CLOCK)^I^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: tools/perf/builtin-test.c:101:
+  { CSW(TASK_CLOCK)^I^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: tools/perf/builtin-test.c:102:
+  { CSW(PAGE_FAULTS)^I^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: tools/perf/builtin-test.c:103:
+  { CSW(PAGE_FAULTS_MIN)^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: tools/perf/builtin-test.c:104:
+  { CSW(PAGE_FAULTS_MAJ)^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: tools/perf/builtin-test.c:105:
+  { CSW(CONTEXT_SWITCHES)^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: tools/perf/builtin-test.c:106:
+  { CSW(CPU_MIGRATIONS)^I^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: tools/perf/builtin-test.c:109:
+  { CHCACHE(L1D,^IREAD,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: tools/perf/builtin-test.c:110:
+  { CHCACHE(L1D,^IREAD,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: tools/perf/builtin-test.c:111:
+  { CHCACHE(L1D,^IWRITE,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: tools/perf/builtin-test.c:112:
+  { CHCACHE(L1D,^IWRITE,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: tools/perf/builtin-test.c:113:
+  { CHCACHE(L1D,^IPREFETCH,^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: tools/perf/builtin-test.c:114:
+  { CHCACHE(L1D,^IPREFETCH,^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: tools/perf/builtin-test.c:116:
+  { CHCACHE(L1I,^IREAD,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: tools/perf/builtin-test.c:117:
+  { CHCACHE(L1I,^IREAD,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: tools/perf/builtin-test.c:118:
+  { CHCACHE(L1I,^IWRITE,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: tools/perf/builtin-test.c:119:
+  { CHCACHE(L1I,^IWRITE,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: tools/perf/builtin-test.c:120:
+  { CHCACHE(L1I,^IPREFETCH,^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: tools/perf/builtin-test.c:121:
+  { CHCACHE(L1I,^IPREFETCH,^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: tools/perf/builtin-test.c:123:
+  { CHCACHE(LL,^I^IREAD,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: tools/perf/builtin-test.c:124:
+  { CHCACHE(LL,^I^IREAD,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: tools/perf/builtin-test.c:125:
+  { CHCACHE(LL,^I^IWRITE,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: tools/perf/builtin-test.c:126:
+  { CHCACHE(LL,^I^IWRITE,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: tools/perf/builtin-test.c:127:
+  { CHCACHE(LL,^I^IPREFETCH,^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: tools/perf/builtin-test.c:128:
+  { CHCACHE(LL,^I^IPREFETCH,^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: tools/perf/builtin-test.c:130:
+  { CHCACHE(DTLB,^IREAD,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: tools/perf/builtin-test.c:131:
+  { CHCACHE(DTLB,^IREAD,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: tools/perf/builtin-test.c:132:
+  { CHCACHE(DTLB,^IWRITE,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: tools/perf/builtin-test.c:133:
+  { CHCACHE(DTLB,^IWRITE,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: tools/perf/builtin-test.c:134:
+  { CHCACHE(DTLB,^IPREFETCH,^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: tools/perf/builtin-test.c:135:
+  { CHCACHE(DTLB,^IPREFETCH,^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: tools/perf/builtin-test.c:137:
+  { CHCACHE(ITLB,^IREAD,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: tools/perf/builtin-test.c:138:
+  { CHCACHE(ITLB,^IREAD,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: tools/perf/builtin-test.c:139:
+  { CHCACHE(ITLB,^IWRITE,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: tools/perf/builtin-test.c:140:
+  { CHCACHE(ITLB,^IWRITE,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: tools/perf/builtin-test.c:141:
+  { CHCACHE(ITLB,^IPREFETCH,^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: tools/perf/builtin-test.c:142:
+  { CHCACHE(ITLB,^IPREFETCH,^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: tools/perf/builtin-test.c:144:
+  { CHCACHE(BPU,^IREAD,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: tools/perf/builtin-test.c:145:
+  { CHCACHE(BPU,^IREAD,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: tools/perf/builtin-test.c:146:
+  { CHCACHE(BPU,^IWRITE,^I^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: tools/perf/builtin-test.c:147:
+  { CHCACHE(BPU,^IWRITE,^I^IMISS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: tools/perf/builtin-test.c:148:
+  { CHCACHE(BPU,^IPREFETCH,^IACCESS)^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: tools/perf/builtin-test.c:149:
+  { CHCACHE(BPU,^IPREFETCH,^IMISS)^I^I},$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#363: FILE: tools/perf/builtin-test.c:155:
+static int			system_wide		=  0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#364: FILE: tools/perf/builtin-test.c:156:
+static int			verbose			=  0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#366: FILE: tools/perf/builtin-test.c:158:
+static int			nr_cpus			=  0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#369: FILE: tools/perf/builtin-test.c:161:
+static int			run_idx			=  0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#392: FILE: tools/perf/builtin-test.c:184:
+		int cpu;
+		for (cpu = 0; cpu < nr_cpus; cpu ++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#392: FILE: tools/perf/builtin-test.c:184:
+		for (cpu = 0; cpu < nr_cpus; cpu ++) {
 		                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#394: FILE: tools/perf/builtin-test.c:186:
+			if (fd[cpu][counter] < 0 && verbose) {
+				printf("Error: counter %d, sys_perf_counter_open() syscall returned with %d (%s)\n", counter, fd[cpu][counter], strerror(errno));
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 161 exceeds 100 columns
#395: FILE: tools/perf/builtin-test.c:187:
+				printf("Error: counter %d, sys_perf_counter_open() syscall returned with %d (%s)\n", counter, fd[cpu][counter], strerror(errno));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BRACES: braces {} are not necessary for single statement blocks
#402: FILE: tools/perf/builtin-test.c:194:
+		if (fd[0][counter] < 0 && verbose) {
+			printf("Error: counter %d, sys_perf_counter_open() syscall returned with %d (%s)\n", counter, fd[0][counter], strerror(errno));
+		}

WARNING:LONG_LINE: line length of 151 exceeds 100 columns
#403: FILE: tools/perf/builtin-test.c:195:
+			printf("Error: counter %d, sys_perf_counter_open() syscall returned with %d (%s)\n", counter, fd[0][counter], strerror(errno));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#419: FILE: tools/perf/builtin-test.c:211:
+	count[0] = count[1] = count[2] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#422: FILE: tools/perf/builtin-test.c:214:
+	for (cpu = 0; cpu < nr_cpus; cpu ++) {
 	                                 ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#459: FILE: tools/perf/builtin-test.c:251:
+	if ((pid = fork()) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#487: FILE: tools/perf/builtin-test.c:279:
+		fprintf(stderr, "  %14Ld", count[0]);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#511: FILE: tools/perf/builtin-test.c:303:
+		fprintf(stderr, "debug: %20s[%d]: %Ld\n", name, idx, *val);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#513: FILE: tools/perf/builtin-test.c:305:
+}
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: tools/perf/builtin-test.c:320:
+			update_avg("counter/0", j,
+				event_res_avg[j]+0, event_res[i][j]+0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#528: FILE: tools/perf/builtin-test.c:320:
+				event_res_avg[j]+0, event_res[i][j]+0);
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#528: FILE: tools/perf/builtin-test.c:320:
+				event_res_avg[j]+0, event_res[i][j]+0);
 				                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: tools/perf/builtin-test.c:322:
+			update_avg("counter/1", j,
+				event_res_avg[j]+1, event_res[i][j]+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#530: FILE: tools/perf/builtin-test.c:322:
+				event_res_avg[j]+1, event_res[i][j]+1);
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#530: FILE: tools/perf/builtin-test.c:322:
+				event_res_avg[j]+1, event_res[i][j]+1);
 				                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#532: FILE: tools/perf/builtin-test.c:324:
+			update_avg("counter/2", j,
+				event_res_avg[j]+2, event_res[i][j]+2);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#532: FILE: tools/perf/builtin-test.c:324:
+				event_res_avg[j]+2, event_res[i][j]+2);
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#532: FILE: tools/perf/builtin-test.c:324:
+				event_res_avg[j]+2, event_res[i][j]+2);
 				                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: tools/perf/builtin-test.c:358:
+	fprintf(stderr, " %14.9f  seconds time elapsed.\n",
+			(double)walltime_nsecs_avg/1e9);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#566: FILE: tools/perf/builtin-test.c:358:
+			(double)walltime_nsecs_avg/1e9);
 			                          ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#570: FILE: tools/perf/builtin-test.c:362:
+static volatile int signr = -1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#595: FILE: tools/perf/builtin-test.c:387:
+        OPT_BOOLEAN('a', "all-cpus", &system_wide,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: tools/perf/builtin-test.c:387:
+        OPT_BOOLEAN('a', "all-cpus", &system_wide,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#596: FILE: tools/perf/builtin-test.c:388:
+                            "system-wide collection from all CPUs"),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: tools/perf/builtin-test.c:388:
+        OPT_BOOLEAN('a', "all-cpus", &system_wide,
+                            "system-wide collection from all CPUs"),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: tools/perf/builtin-test.c:388:
+                            "system-wide collection from all CPUs"),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#597: FILE: tools/perf/builtin-test.c:389:
+        OPT_BOOLEAN('v', "verbose", &verbose,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: tools/perf/builtin-test.c:389:
+        OPT_BOOLEAN('v', "verbose", &verbose,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#598: FILE: tools/perf/builtin-test.c:390:
+                    "be more verbose (show counter open errors, etc)"),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: tools/perf/builtin-test.c:390:
+                    "be more verbose (show counter open errors, etc)"),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#599: FILE: tools/perf/builtin-test.c:391:
+        OPT_END()$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: tools/perf/builtin-test.c:391:
+        OPT_END()$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#637: FILE: tools/perf/builtin-test.c:429:
+			fprintf(stderr, "[ perf test: executing run #%d ... ]\n", run_idx+1);
 			                                                                 ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#653: FILE: tools/perf/builtin.h:25:
+extern int cmd_test(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000106447.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 68 warnings, 16 checks, 505 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000106447.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
