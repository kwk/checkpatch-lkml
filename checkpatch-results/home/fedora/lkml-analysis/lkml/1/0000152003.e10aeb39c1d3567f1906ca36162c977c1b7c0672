WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
  - Very low fragmentation: In all tests, xvMalloc memory usage is within 12%

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#89: FILE: init/Kconfig:933:
+config XVMALLOC
+	tristate "xvMalloc memory allocator"
+	help
+	   This is a simple, low fragmentation, O(1) allocator.
+	   Details: http://code.google.com/p/compcache/wiki/xvMalloc
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#111: FILE: mm/xvmalloc.c

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#111: 
new file mode 100755

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#116: FILE: mm/xvmalloc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'derefrencable' may be misspelled - perhaps 'dereferenceable'?
#212: FILE: mm/xvmalloc.c:97:
+ * Given <pagenum, offset> pair, provide a derefrencable pointer.
                                            ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: mm/xvmalloc.c:150:
+static u32 find_block(struct xv_pool *pool, u32 size,
+			u32 *pagenum, u32 *offset)

WARNING:TYPO_SPELLING: 'correspoding' may be misspelled - perhaps 'corresponding'?
#277: FILE: mm/xvmalloc.c:162:
+	/* Get freelist index correspoding to this size */
 	                      ^^^^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'slbitstart != BITMAP_BITS'
#302: FILE: mm/xvmalloc.c:187:
+	if ((slbitstart != BITMAP_BITS) && slbitmap) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: mm/xvmalloc.c:215:
+static void insert_block(struct xv_pool *pool, u32 pagenum, u32 offset,
+			struct block_header *block)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: mm/xvmalloc.c:232:
+		nextblock = get_ptr_atomic(block->link.next_pagenum,
+					block->link.next_offset, KM_USER1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: mm/xvmalloc.c:246:
+static void remove_block_head(struct xv_pool *pool,
+			struct block_header *block, u32 slindex)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: mm/xvmalloc.c:267:
+		tmpblock = get_ptr_atomic(pool->freelist[slindex].pagenum,
+				pool->freelist[slindex].offset, KM_USER1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: mm/xvmalloc.c:278:
+static void remove_block(struct xv_pool *pool, u32 pagenum, u32 offset,
+			struct block_header *block, u32 slindex)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#399: FILE: mm/xvmalloc.c:284:
+	if (pool->freelist[slindex].pagenum == pagenum
+	   && pool->freelist[slindex].offset == offset) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: mm/xvmalloc.c:293:
+		tmpblock = get_ptr_atomic(block->link.prev_pagenum,
+				block->link.prev_offset, KM_USER1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: mm/xvmalloc.c:301:
+		tmpblock = get_ptr_atomic(block->link.next_pagenum,
+				block->link.next_offset, KM_USER1);

WARNING:RETURN_VOID: void function return statements are not generally useful
#423: FILE: mm/xvmalloc.c:308:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: mm/xvmalloc.c:493:
+			remove_block(pool, pagenum,
+				    offset + block->size + XV_ALIGN, tmpblock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: mm/xvmalloc.c:507:
+			remove_block(pool, pagenum, offset, tmpblock,
+				    get_index_for_insert(tmpblock->size));

WARNING:RETURN_VOID: void function return statements are not generally useful
#651: FILE: mm/xvmalloc.c:536:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#680: FILE: mm/xvmalloc.c:565:
+	return;
+}

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#689: FILE: mm/xvmalloc_int.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#694: FILE: mm/xvmalloc_int.h:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#713: FILE: mm/xvmalloc_int.h:20:
+#define ROUNDUP(x, y)	(((x) + (y) - 1) / (y) * (y))

CHECK:BIT_MACRO: Prefer using the BIT macro
#727: FILE: mm/xvmalloc_int.h:34:
+#define XV_ALIGN	(1 << XV_ALIGN_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#732: FILE: mm/xvmalloc_int.h:39:
+#define FL_DELTA	(1 << FL_DELTA_SHIFT)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#780: FILE: mm/xvmalloc_int.h:87:
+	spinlock_t lock;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152003.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 10 warnings, 16 checks, 686 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152003.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
