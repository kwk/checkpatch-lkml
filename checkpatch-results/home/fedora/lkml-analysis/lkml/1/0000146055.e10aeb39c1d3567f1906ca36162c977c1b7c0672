WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#52: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: include/linux/decompress/unlzo.h:1:
+#ifndef DECOMPRESS_UNLZO_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: missing space after return type
#61: FILE: include/linux/decompress/unlzo.h:5:
+	  int(*fill)(void*, unsigned int),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: missing space after return type
#62: FILE: include/linux/decompress/unlzo.h:6:
+	  int(*flush)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#64: FILE: include/linux/decompress/unlzo.h:8:
+	  void(*error)(char *x)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#127: FILE: lib/decompress_unlzo.c:1:
+/* Simple LZO file format decompressor for Linux.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#172: FILE: lib/decompress_unlzo.c:46:
+#define LZO_BLOCK_SIZE	(256*1024l)
                       	    ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#179: FILE: lib/decompress_unlzo.c:53:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#180: FILE: lib/decompress_unlzo.c:54:
+#define DPRINTK(fmt, args...) printk(KERN_DEBUG "%s " fmt, __func__, ## args)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#185: FILE: lib/decompress_unlzo.c:59:
+#define THROW(errno)					\
+	do {						\
+		DPRINTK("line %d: throws %s\n",		\
+			__LINE__, #errno);		\
+		ret = (errno);				\
+		goto error_exit;			\
+	} while (0)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#212: FILE: lib/decompress_unlzo.c:86:
+struct lzo_source {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#236: FILE: lib/decompress_unlzo.c:110:
+	if (dst) {
[...]
+	} else
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around src->p
#238: FILE: lib/decompress_unlzo.c:112:
+			b = (b << 8) | *(src->p)++;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Unbalanced braces around else statement
#240: FILE: lib/decompress_unlzo.c:114:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#254: FILE: lib/decompress_unlzo.c:128:
+		u32 chk = zlib_adler32(1, src->p, c_len);
+		if (chk != c_chk)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#267: FILE: lib/decompress_unlzo.c:141:
+		u32 chk = zlib_adler32(1, dst, d_len);
+		if (chk != d_chk)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#317: FILE: lib/decompress_unlzo.c:191:
+static const unsigned char lzop_magic[9] =
+	{0x89, 0x4c, 0x5a, 0x4f, 0x00, 0x0d, 0x0a, 0x1a, 0x0a};

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'method != M_LZO1X_1'
#358: FILE: lib/decompress_unlzo.c:232:
+	if ((method != M_LZO1X_1) && (method != M_LZO1X_1_15) &&
+			(method != M_LZO1X_999) && (level > 9))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'method != M_LZO1X_1_15'
#358: FILE: lib/decompress_unlzo.c:232:
+	if ((method != M_LZO1X_1) && (method != M_LZO1X_1_15) &&
+			(method != M_LZO1X_999) && (level > 9))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'method != M_LZO1X_999'
#358: FILE: lib/decompress_unlzo.c:232:
+	if ((method != M_LZO1X_1) && (method != M_LZO1X_1_15) &&
+			(method != M_LZO1X_999) && (level > 9))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level > 9'
#358: FILE: lib/decompress_unlzo.c:232:
+	if ((method != M_LZO1X_1) && (method != M_LZO1X_1_15) &&
+			(method != M_LZO1X_999) && (level > 9))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: lib/decompress_unlzo.c:233:
+	if ((method != M_LZO1X_1) && (method != M_LZO1X_1_15) &&
+			(method != M_LZO1X_999) && (level > 9))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around src->flags
#364: FILE: lib/decompress_unlzo.c:238:
+	READ32(src, &(src->flags));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: lib/decompress_unlzo.c:285:
+int INIT unlzo(unsigned char *in, int in_len,
+		int(*fill)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#411: FILE: lib/decompress_unlzo.c:285:
+		int(*fill)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#412: FILE: lib/decompress_unlzo.c:286:
+		int(*flush)(void*, unsigned int),

WARNING:SPACING: missing space after return type
#414: FILE: lib/decompress_unlzo.c:288:
+		void(*error)(char *x))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fill"
#427: FILE: lib/decompress_unlzo.c:301:
+	if (in_len == 0 || fill != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#438: FILE: lib/decompress_unlzo.c:312:
+	if (flush) {
[...]
+	} else if (!out)
[...]

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#510: FILE: usr/Kconfig:48:
+config RD_LZO
+	bool "Support initial ramdisks compressed using lzop" if EMBEDDED
+	default !EMBEDDED
+	depends on BLK_DEV_INITRD
+	select DECOMPRESS_LZO
+	help
+	  Support loading of a lzo encoded initial ramdisk or cpio buffer.
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#598: FILE: usr/initramfs_data.lzo.S:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000146055.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 16 warnings, 14 checks, 524 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000146055.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
