WARNING:TYPO_SPELLING: 'seperation' may be misspelled - perhaps 'separation'?
#30: 
- seperation of thin interrupt code
  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: drivers/s390/cio/qdio_debug.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#74: FILE: drivers/s390/cio/qdio_debug.c:2:
+ *  drivers/s390/cio/qdio_debug.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#165: FILE: drivers/s390/cio/qdio_debug.c:93:
+	seq_printf(m, "slsb buffer states:\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#173: FILE: drivers/s390/cio/qdio_debug.c:101:
+			seq_printf(m, "N");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#177: FILE: drivers/s390/cio/qdio_debug.c:105:
+			seq_printf(m, "+");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#180: FILE: drivers/s390/cio/qdio_debug.c:108:
+			seq_printf(m, "A");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#184: FILE: drivers/s390/cio/qdio_debug.c:112:
+			seq_printf(m, "x");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#188: FILE: drivers/s390/cio/qdio_debug.c:116:
+			seq_printf(m, "-");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#192: FILE: drivers/s390/cio/qdio_debug.c:120:
+			seq_printf(m, ".");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#195: FILE: drivers/s390/cio/qdio_debug.c:123:
+			seq_printf(m, "?");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#198: FILE: drivers/s390/cio/qdio_debug.c:126:
+			seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#200: FILE: drivers/s390/cio/qdio_debug.c:128:
+	seq_printf(m, "\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#219: FILE: drivers/s390/cio/qdio_debug.c:147:
+static int qstat_seq_open(struct inode *inode, struct file *filp)
                                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#221: FILE: drivers/s390/cio/qdio_debug.c:149:
+	return single_open(filp, qstat_show,
 	                   ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#250: FILE: drivers/s390/cio/qdio_debug.c:178:
+static struct file_operations debugfs_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "debugfs_queues[i]"
#264: FILE: drivers/s390/cio/qdio_debug.c:192:
+	while (debugfs_queues[i] != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#270: FILE: drivers/s390/cio/qdio_debug.c:198:
+	debugfs_queues[i] = debugfs_create_file(name, S_IFREG | S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#316: FILE: drivers/s390/cio/qdio_debug.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#317: FILE: drivers/s390/cio/qdio_debug.h:2:
+ *  drivers/s390/cio/qdio_debug.h

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'level' - possible side-effects?
#330: FILE: drivers/s390/cio/qdio_debug.h:15:
+#define QDIO_DBF_HEX(ex, name, level, addr, len) \
+	do { \
+	if (ex) \
+		debug_exception(qdio_dbf_##name, level, (void *)(addr), len); \
+	else \
+		debug_event(qdio_dbf_##name, level, (void *)(addr), len); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#330: FILE: drivers/s390/cio/qdio_debug.h:15:
+#define QDIO_DBF_HEX(ex, name, level, addr, len) \
+	do { \
+	if (ex) \
+		debug_exception(qdio_dbf_##name, level, (void *)(addr), len); \
+	else \
+		debug_event(qdio_dbf_##name, level, (void *)(addr), len); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#330: FILE: drivers/s390/cio/qdio_debug.h:15:
+#define QDIO_DBF_HEX(ex, name, level, addr, len) \
+	do { \
+	if (ex) \
+		debug_exception(qdio_dbf_##name, level, (void *)(addr), len); \
+	else \
+		debug_event(qdio_dbf_##name, level, (void *)(addr), len); \
+	} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#331: FILE: drivers/s390/cio/qdio_debug.h:16:
+	do { \
+	if (ex) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'level' - possible side-effects?
#337: FILE: drivers/s390/cio/qdio_debug.h:22:
+#define QDIO_DBF_TEXT(ex, name, level, text) \
+	do { \
+	if (ex) \
+		debug_text_exception(qdio_dbf_##name, level, text); \
+	else \
+		debug_text_event(qdio_dbf_##name, level, text); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'text' - possible side-effects?
#337: FILE: drivers/s390/cio/qdio_debug.h:22:
+#define QDIO_DBF_TEXT(ex, name, level, text) \
+	do { \
+	if (ex) \
+		debug_text_exception(qdio_dbf_##name, level, text); \
+	else \
+		debug_text_event(qdio_dbf_##name, level, text); \
+	} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#338: FILE: drivers/s390/cio/qdio_debug.h:23:
+	do { \
+	if (ex) \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#414: FILE: drivers/s390/cio/qdio.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#415: FILE: drivers/s390/cio/qdio.h:2:
+ * linux/drivers/s390/cio/qdio.h

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#766: FILE: drivers/s390/cio/qdio.h:94:
+	asm volatile(

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#907: FILE: drivers/s390/cio/qdio.h:141:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#950: FILE: drivers/s390/cio/qdio.h:155:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1004: FILE: drivers/s390/cio/qdio.h:175:
+} __attribute__ ((packed));

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#1011: FILE: drivers/s390/cio/qdio.h:178:
+	/* input buffer acknowledgement flag */
 	                ^^^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#1030: FILE: drivers/s390/cio/qdio.h:184:
+	/* lock for clearing the acknowledgement */
 	                         ^^^^^^^^^^^^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#1228: FILE: drivers/s390/cio/qdio.h:280:
+	void (*orig_handler) (struct ccw_device *, unsigned long, struct irb *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccw_device *' should also have an identifier name
#1228: FILE: drivers/s390/cio/qdio.h:280:
+	void (*orig_handler) (struct ccw_device *, unsigned long, struct irb *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1228: FILE: drivers/s390/cio/qdio.h:280:
+	void (*orig_handler) (struct ccw_device *, unsigned long, struct irb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct irb *' should also have an identifier name
#1228: FILE: drivers/s390/cio/qdio.h:280:
+	void (*orig_handler) (struct ccw_device *, unsigned long, struct irb *);

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1242: FILE: drivers/s390/cio/qdio.h:292:
+	struct mutex setup_mutex;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'q' may be better as '(q)' to avoid precedence issues
#1247: FILE: drivers/s390/cio/qdio.h:296:
+#define queue_type(q)	q->irq_ptr->qib.qfmt

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'irq' may be better as '(irq)' to avoid precedence issues
#1249: FILE: drivers/s390/cio/qdio.h:298:
+#define is_thinint_irq(irq) \
+	(irq->qib.qfmt == QDIO_IQDIO_QFMT || \
+	 css_general_characteristics.aif_osa)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'q' may be better as '(q)' to avoid precedence issues
#1265: FILE: drivers/s390/cio/qdio.h:314:
+#define pci_out_supported(q) \
+	(q->irq_ptr->qib.ac & QIB_AC_OUTBOUND_PCI_SUPPORTED)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'q' may be better as '(q)' to avoid precedence issues
#1267: FILE: drivers/s390/cio/qdio.h:316:
+#define is_qebsm(q)			(q->irq_ptr->sch_token != 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'q' may be better as '(q)' to avoid precedence issues
#1269: FILE: drivers/s390/cio/qdio.h:318:
+#define need_siga_sync_thinint(q)	(!q->irq_ptr->siga_flag.no_sync_ti)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'q' may be better as '(q)' to avoid precedence issues
#1270: FILE: drivers/s390/cio/qdio.h:319:
+#define need_siga_sync_out_thinint(q)	(!q->irq_ptr->siga_flag.no_sync_out_ti)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'q' may be better as '(q)' to avoid precedence issues
#1271: FILE: drivers/s390/cio/qdio.h:320:
+#define need_siga_in(q)			(q->irq_ptr->siga_flag.input)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'q' may be better as '(q)' to avoid precedence issues
#1272: FILE: drivers/s390/cio/qdio.h:321:
+#define need_siga_out(q)		(q->irq_ptr->siga_flag.output)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'q' may be better as '(q)' to avoid precedence issues
#1273: FILE: drivers/s390/cio/qdio.h:322:
+#define need_siga_sync(q)		(q->irq_ptr->siga_flag.sync)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'q' may be better as '(q)' to avoid precedence issues
#1274: FILE: drivers/s390/cio/qdio.h:323:
+#define siga_syncs_out_pci(q)		(q->irq_ptr->siga_flag.no_sync_out_pci)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq_ptr' - possible side-effects?
#1276: FILE: drivers/s390/cio/qdio.h:325:
+#define for_each_input_queue(irq_ptr, q, i)	\
+	for (i = 0, q = irq_ptr->input_qs[0];	\
+		i < irq_ptr->nr_input_qs;	\
+		q = irq_ptr->input_qs[++i])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'irq_ptr' may be better as '(irq_ptr)' to avoid precedence issues
#1276: FILE: drivers/s390/cio/qdio.h:325:
+#define for_each_input_queue(irq_ptr, q, i)	\
+	for (i = 0, q = irq_ptr->input_qs[0];	\
+		i < irq_ptr->nr_input_qs;	\
+		q = irq_ptr->input_qs[++i])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'q' - possible side-effects?
#1276: FILE: drivers/s390/cio/qdio.h:325:
+#define for_each_input_queue(irq_ptr, q, i)	\
+	for (i = 0, q = irq_ptr->input_qs[0];	\
+		i < irq_ptr->nr_input_qs;	\
+		q = irq_ptr->input_qs[++i])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#1276: FILE: drivers/s390/cio/qdio.h:325:
+#define for_each_input_queue(irq_ptr, q, i)	\
+	for (i = 0, q = irq_ptr->input_qs[0];	\
+		i < irq_ptr->nr_input_qs;	\
+		q = irq_ptr->input_qs[++i])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq_ptr' - possible side-effects?
#1280: FILE: drivers/s390/cio/qdio.h:329:
+#define for_each_output_queue(irq_ptr, q, i)	\
+	for (i = 0, q = irq_ptr->output_qs[0];	\
+		i < irq_ptr->nr_output_qs;	\
+		q = irq_ptr->output_qs[++i])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'irq_ptr' may be better as '(irq_ptr)' to avoid precedence issues
#1280: FILE: drivers/s390/cio/qdio.h:329:
+#define for_each_output_queue(irq_ptr, q, i)	\
+	for (i = 0, q = irq_ptr->output_qs[0];	\
+		i < irq_ptr->nr_output_qs;	\
+		q = irq_ptr->output_qs[++i])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'q' - possible side-effects?
#1280: FILE: drivers/s390/cio/qdio.h:329:
+#define for_each_output_queue(irq_ptr, q, i)	\
+	for (i = 0, q = irq_ptr->output_qs[0];	\
+		i < irq_ptr->nr_output_qs;	\
+		q = irq_ptr->output_qs[++i])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#1280: FILE: drivers/s390/cio/qdio.h:329:
+#define for_each_output_queue(irq_ptr, q, i)	\
+	for (i = 0, q = irq_ptr->output_qs[0];	\
+		i < irq_ptr->nr_output_qs;	\
+		q = irq_ptr->output_qs[++i])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bufnr' may be better as '(bufnr)' to avoid precedence issues
#1285: FILE: drivers/s390/cio/qdio.h:334:
+#define prev_buf(bufnr)	\
+	((bufnr + QDIO_MAX_BUFFERS_MASK) & QDIO_MAX_BUFFERS_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bufnr' may be better as '(bufnr)' to avoid precedence issues
#1287: FILE: drivers/s390/cio/qdio.h:336:
+#define next_buf(bufnr)	\
+	((bufnr + 1) & QDIO_MAX_BUFFERS_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bufnr' may be better as '(bufnr)' to avoid precedence issues
#1289: FILE: drivers/s390/cio/qdio.h:338:
+#define add_buf(bufnr, inc) \
+	((bufnr + inc) & QDIO_MAX_BUFFERS_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'inc' may be better as '(inc)' to avoid precedence issues
#1289: FILE: drivers/s390/cio/qdio.h:338:
+#define add_buf(bufnr, inc) \
+	((bufnr + inc) & QDIO_MAX_BUFFERS_MASK)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1335: FILE: drivers/s390/cio/qdio_perf.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1336: FILE: drivers/s390/cio/qdio_perf.c:2:
+ *  drivers/s390/cio/qdio_perf.c

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1385: FILE: drivers/s390/cio/qdio_perf.c:51:
+	seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1396: FILE: drivers/s390/cio/qdio_perf.c:62:
+	seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1403: FILE: drivers/s390/cio/qdio_perf.c:69:
+	seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1408: FILE: drivers/s390/cio/qdio_perf.c:74:
+	seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1417: FILE: drivers/s390/cio/qdio_perf.c:83:
+	seq_printf(m, "\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1420: FILE: drivers/s390/cio/qdio_perf.c:86:
+static int qdio_perf_seq_open(struct inode *inode, struct file *filp)
                                                                 ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1420: FILE: drivers/s390/cio/qdio_perf.c:86:
+}
+static int qdio_perf_seq_open(struct inode *inode, struct file *filp)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1422: FILE: drivers/s390/cio/qdio_perf.c:88:
+	return single_open(filp, qdio_perf_proc_show, NULL);
 	                   ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1425: FILE: drivers/s390/cio/qdio_perf.c:91:
+static struct file_operations qdio_perf_proc_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1442: FILE: drivers/s390/cio/qdio_perf.c:108:
+static ssize_t qdio_perf_stats_store(struct bus_type *bus,
+			      const char *buf, size_t count)

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1446: FILE: drivers/s390/cio/qdio_perf.c:112:
+	if (strict_strtoul(buf, 16, &i) != 0)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i != 0'
#1448: FILE: drivers/s390/cio/qdio_perf.c:114:
+	if ((i != 0) && (i != 1))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i != 1'
#1448: FILE: drivers/s390/cio/qdio_perf.c:114:
+	if ((i != 0) && (i != 1))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1473: FILE: drivers/s390/cio/qdio_perf.c:139:
+	qdio_perf_pde = proc_create("qdio_perf", S_IFREG | S_IRUGO,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1491: FILE: drivers/s390/cio/qdio_perf.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1492: FILE: drivers/s390/cio/qdio_perf.h:2:
+ *  drivers/s390/cio/qdio_perf.h

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1503: FILE: drivers/s390/cio/qdio_perf.h:13:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1541: FILE: drivers/s390/cio/qdio_perf.h:51:
+extern void qdio_perf_stat_inc(atomic_long_t *count);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1542: FILE: drivers/s390/cio/qdio_perf.h:52:
+extern void qdio_perf_stat_dec(atomic_long_t *count);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1550: FILE: drivers/s390/cio/qdio_setup.c:1:
+/*

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#1591: FILE: drivers/s390/cio/qdio_setup.c:42:
+		memcpy(irq_ptr->qib.parm, qib_param_field,
 		                    ^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#1599: FILE: drivers/s390/cio/qdio_setup.c:50:
+			q->slib->slibe[j].parms =
 			                  ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#1608: FILE: drivers/s390/cio/qdio_setup.c:59:
+			q->slib->slibe[j].parms =
 			                  ^^^^^

CHECK:SPACING: No space is necessary after a cast
#1624: FILE: drivers/s390/cio/qdio_setup.c:75:
+		q->slib = (struct slib *) __get_free_page(GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#1721: FILE: drivers/s390/cio/qdio_setup.c:172:
+				     (unsigned long) q);

CHECK:SPACING: No space is necessary after a cast
#1724: FILE: drivers/s390/cio/qdio_setup.c:175:
+				     (unsigned long) q);

CHECK:SPACING: No space is necessary after a cast
#1737: FILE: drivers/s390/cio/qdio_setup.c:188:
+			     (unsigned long) q);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ssqd->qdio_ssqd.sch != irq_ptr->schid.sch_no'
#1808: FILE: drivers/s390/cio/qdio_setup.c:259:
+	if (!(ssqd->qdio_ssqd.flags & CHSC_FLAG_QDIO_CAPABILITY) ||
+	    !(ssqd->qdio_ssqd.flags & CHSC_FLAG_VALIDITY) ||
+	    (ssqd->qdio_ssqd.sch != irq_ptr->schid.sch_no))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1825: FILE: drivers/s390/cio/qdio_setup.c:276:
+	if (rc) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1834: FILE: drivers/s390/cio/qdio_setup.c:285:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1856: FILE: drivers/s390/cio/qdio_setup.c:307:
+			free_page((unsigned long) q->slib);

CHECK:SPACING: No space is necessary after a cast
#1863: FILE: drivers/s390/cio/qdio_setup.c:314:
+			free_page((unsigned long) q->slib);

CHECK:SPACING: No space is necessary after a cast
#1869: FILE: drivers/s390/cio/qdio_setup.c:320:
+	free_page((unsigned long) irq_ptr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2021: FILE: drivers/s390/cio/qdio_setup.c:472:
+	printk(KERN_INFO "qdio: %s", s);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2038: FILE: drivers/s390/cio/qdio_setup.c:489:
+	printk(KERN_INFO "qdio: %s", s);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2071: FILE: drivers/s390/cio/qdio_thinint.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#2082: FILE: drivers/s390/cio/qdio_thinint.c:12:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2113: FILE: drivers/s390/cio/qdio_thinint.c:43:
+};
+static struct indicator_t *indicators;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2126: FILE: drivers/s390/cio/qdio_thinint.c:56:
+	asm volatile(

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2267: FILE: drivers/s390/cio/qdio_thinint.c:197:
+		if (*q->irq_ptr->dsci) {
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*indicators)...) over kzalloc(sizeof(struct indicator_t)...)
#2382: FILE: drivers/s390/cio/qdio_thinint.c:312:
+	indicators = kzalloc(sizeof(struct indicator_t) * TIQDIO_NR_INDICATORS,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2644: FILE: include/asm-s390/qdio.h:40:
+	u32	 : 32;
 	   	 ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2649: FILE: include/asm-s390/qdio.h:45:
+	u32	 : 16;
 	   	 ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2695: FILE: include/asm-s390/qdio.h:64:
+	u32	   : 8;
 	   	   ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2697: FILE: include/asm-s390/qdio.h:66:
+	u32	   : 8;
 	   	   ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2699: FILE: include/asm-s390/qdio.h:68:
+	u32	   : 8;
 	   	   ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2701: FILE: include/asm-s390/qdio.h:70:
+	u32	   : 8;
 	   	   ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2703: FILE: include/asm-s390/qdio.h:72:
+	u32	   : 8;
 	   	   ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2709: FILE: include/asm-s390/qdio.h:78:
+	u32	   : 32;
 	   	   ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2711: FILE: include/asm-s390/qdio.h:80:
+	u32	   : 28;
 	   	   ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2713: FILE: include/asm-s390/qdio.h:82:
+} __attribute__ ((packed, aligned(4096)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4096) over __attribute__((aligned(4096)))
#2713: FILE: include/asm-s390/qdio.h:82:
+} __attribute__ ((packed, aligned(4096)));

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#2732: FILE: include/asm-s390/qdio.h:96:
+ * @parm: implementation dependent parameters
     ^^^^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2766: FILE: include/asm-s390/qdio.h:103:
+	u32	   : 32;
 	   	   ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2769: FILE: include/asm-s390/qdio.h:106:
+	u32	   : 32;
 	   	   ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2770: FILE: include/asm-s390/qdio.h:107:
+	u32	   : 32;
 	   	   ^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#2775: FILE: include/asm-s390/qdio.h:112:
+	u8 parm[QDIO_MAX_BUFFERS_PER_Q];
 	   ^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2776: FILE: include/asm-s390/qdio.h:113:
+} __attribute__ ((packed, aligned(256)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(256) over __attribute__((aligned(256)))
#2776: FILE: include/asm-s390/qdio.h:113:
+} __attribute__ ((packed, aligned(256)));

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#2780: FILE: include/asm-s390/qdio.h:117:
+ * @parms: implementation dependent parameters
     ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#2788: FILE: include/asm-s390/qdio.h:120:
+	u64 parms;
 	    ^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2824: FILE: include/asm-s390/qdio.h:138:
+} __attribute__ ((packed, aligned(2048)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(2048) over __attribute__((aligned(2048)))
#2824: FILE: include/asm-s390/qdio.h:138:
+} __attribute__ ((packed, aligned(2048)));

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2839: FILE: include/asm-s390/qdio.h:147:
+	u8	: 1;
 	  	^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2842: FILE: include/asm-s390/qdio.h:150:
+	u8	: 1;
 	  	^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2844: FILE: include/asm-s390/qdio.h:152:
+	u8	: 2;
 	  	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2884: FILE: include/asm-s390/qdio.h:173:
+#define SBAL_FLAGS0_FIRST_SBAL SBAL_FLAGS0_MORE_SBALS | SBAL_FLAGS0_COMMAND

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2899: FILE: include/asm-s390/qdio.h:183:
+	u8	  : 1;
 	  	  ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2903: FILE: include/asm-s390/qdio.h:187:
+	u8	  : 3;
 	  	  ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2913: FILE: include/asm-s390/qdio.h:195:
+	u8     : 4;
 	       ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2924: FILE: include/asm-s390/qdio.h:204:
+	u8	  : 4;
 	  	  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2973: FILE: include/asm-s390/qdio.h:237:
+ * @addr: address
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2983: FILE: include/asm-s390/qdio.h:247:
+} __attribute__ ((packed, aligned(16)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#2983: FILE: include/asm-s390/qdio.h:247:
+} __attribute__ ((packed, aligned(16)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2999: FILE: include/asm-s390/qdio.h:255:
+} __attribute__ ((packed, aligned(256)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(256) over __attribute__((aligned(256)))
#2999: FILE: include/asm-s390/qdio.h:255:
+} __attribute__ ((packed, aligned(256)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3025: FILE: include/asm-s390/qdio.h:276:
+} __attribute__ ((packed, aligned(1024)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(1024) over __attribute__((aligned(1024)))
#3025: FILE: include/asm-s390/qdio.h:276:
+} __attribute__ ((packed, aligned(1024)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3039: FILE: include/asm-s390/qdio.h:284:
+} __attribute__ ((packed, aligned(256)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(256) over __attribute__((aligned(256)))
#3039: FILE: include/asm-s390/qdio.h:284:
+} __attribute__ ((packed, aligned(256)));

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#3046: FILE: include/asm-s390/qdio.h:291:
+	u8 parm;
 	   ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3061: FILE: include/asm-s390/qdio.h:306:
+/* params are: ccw_device, qdio_error, queue_number,
+   first element processed, number of elements processed, int_parm */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3061: FILE: include/asm-s390/qdio.h:306:
+   first element processed, number of elements processed, int_parm */

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#3089: FILE: include/asm-s390/qdio.h:326:
+ * struct qdio_initialize - qdio initalization data
                                  ^^^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3155: FILE: include/asm-s390/qdio.h:370:
+extern int qdio_initialize(struct qdio_initialize *init_data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3156: FILE: include/asm-s390/qdio.h:371:
+extern int qdio_allocate(struct qdio_initialize *init_data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3157: FILE: include/asm-s390/qdio.h:372:
+extern int qdio_establish(struct qdio_initialize *init_data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3158: FILE: include/asm-s390/qdio.h:373:
+extern int qdio_activate(struct ccw_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccw_device *' should also have an identifier name
#3158: FILE: include/asm-s390/qdio.h:373:
+extern int qdio_activate(struct ccw_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3161: FILE: include/asm-s390/qdio.h:375:
+extern int do_QDIO(struct ccw_device*, unsigned int flags,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccw_device*' should also have an identifier name
#3161: FILE: include/asm-s390/qdio.h:375:
+extern int do_QDIO(struct ccw_device*, unsigned int flags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3163: FILE: include/asm-s390/qdio.h:377:
+extern int qdio_cleanup(struct ccw_device*, int how);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccw_device*' should also have an identifier name
#3163: FILE: include/asm-s390/qdio.h:377:
+extern int qdio_cleanup(struct ccw_device*, int how);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3164: FILE: include/asm-s390/qdio.h:378:
+extern int qdio_shutdown(struct ccw_device*, int how);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccw_device*' should also have an identifier name
#3164: FILE: include/asm-s390/qdio.h:378:
+extern int qdio_shutdown(struct ccw_device*, int how);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3165: FILE: include/asm-s390/qdio.h:379:
+extern int qdio_free(struct ccw_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccw_device *' should also have an identifier name
#3165: FILE: include/asm-s390/qdio.h:379:
+extern int qdio_free(struct ccw_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3166: FILE: include/asm-s390/qdio.h:380:
+extern struct qdio_ssqd_desc *qdio_get_ssqd_desc(struct ccw_device *cdev);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000260447.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 20 errors, 83 warnings, 59 checks, 3065 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000260447.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
