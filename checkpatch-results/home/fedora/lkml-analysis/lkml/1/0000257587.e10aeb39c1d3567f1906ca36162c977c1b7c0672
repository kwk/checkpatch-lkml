WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#77: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: include/asm-microblaze/io.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#96: FILE: include/asm-microblaze/io.h:15:
+static inline unsigned char __raw_readb(const volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#98: FILE: include/asm-microblaze/io.h:17:
+	return *(volatile unsigned char __force *)addr;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#100: FILE: include/asm-microblaze/io.h:19:
+}
+static inline unsigned short __raw_readw(const volatile void *addr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#100: FILE: include/asm-microblaze/io.h:19:
+static inline unsigned short __raw_readw(const volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#102: FILE: include/asm-microblaze/io.h:21:
+	return *(volatile unsigned short __force *)addr;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#104: FILE: include/asm-microblaze/io.h:23:
+}
+static inline unsigned int __raw_readl(const volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#104: FILE: include/asm-microblaze/io.h:23:
+static inline unsigned int __raw_readl(const volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#106: FILE: include/asm-microblaze/io.h:25:
+	return *(volatile unsigned int __force *)addr;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#108: FILE: include/asm-microblaze/io.h:27:
+}
+static inline unsigned long __raw_readq(const volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#108: FILE: include/asm-microblaze/io.h:27:
+static inline unsigned long __raw_readq(const volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#110: FILE: include/asm-microblaze/io.h:29:
+	return *(volatile unsigned long __force *)addr;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#112: FILE: include/asm-microblaze/io.h:31:
+}
+static inline void __raw_writeb(unsigned char v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#112: FILE: include/asm-microblaze/io.h:31:
+static inline void __raw_writeb(unsigned char v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#114: FILE: include/asm-microblaze/io.h:33:
+	*(volatile unsigned char __force *)addr = v;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#116: FILE: include/asm-microblaze/io.h:35:
+}
+static inline void __raw_writew(unsigned short v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#116: FILE: include/asm-microblaze/io.h:35:
+static inline void __raw_writew(unsigned short v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#118: FILE: include/asm-microblaze/io.h:37:
+	*(volatile unsigned short __force *)addr = v;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#120: FILE: include/asm-microblaze/io.h:39:
+}
+static inline void __raw_writel(unsigned int v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#120: FILE: include/asm-microblaze/io.h:39:
+static inline void __raw_writel(unsigned int v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#122: FILE: include/asm-microblaze/io.h:41:
+	*(volatile unsigned int __force *)addr = v;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#124: FILE: include/asm-microblaze/io.h:43:
+}
+static inline void __raw_writeq(unsigned long v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#124: FILE: include/asm-microblaze/io.h:43:
+static inline void __raw_writeq(unsigned long v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#126: FILE: include/asm-microblaze/io.h:45:
+	*(volatile unsigned long __force *)addr = v;

WARNING:TYPO_SPELLING: 'littel' may be misspelled - perhaps 'little'?
#131: FILE: include/asm-microblaze/io.h:50:
+ * writel, writeq) accessors are for PCI and thus littel endian.
                                                   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#134: FILE: include/asm-microblaze/io.h:53:
+static inline unsigned char readb(const volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#136: FILE: include/asm-microblaze/io.h:55:
+	return *(volatile unsigned char __force *)addr;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#138: FILE: include/asm-microblaze/io.h:57:
+}
+static inline unsigned short readw(const volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#138: FILE: include/asm-microblaze/io.h:57:
+static inline unsigned short readw(const volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#140: FILE: include/asm-microblaze/io.h:59:
+	return le16_to_cpu(*(volatile unsigned short __force *)addr);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#142: FILE: include/asm-microblaze/io.h:61:
+}
+static inline unsigned int readl(const volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#142: FILE: include/asm-microblaze/io.h:61:
+static inline unsigned int readl(const volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#144: FILE: include/asm-microblaze/io.h:63:
+	return le32_to_cpu(*(volatile unsigned int __force *)addr);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#146: FILE: include/asm-microblaze/io.h:65:
+}
+static inline void writeb(unsigned char v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#146: FILE: include/asm-microblaze/io.h:65:
+static inline void writeb(unsigned char v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#148: FILE: include/asm-microblaze/io.h:67:
+	*(volatile unsigned char __force *)addr = v;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#150: FILE: include/asm-microblaze/io.h:69:
+}
+static inline void writew(unsigned short v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#150: FILE: include/asm-microblaze/io.h:69:
+static inline void writew(unsigned short v, volatile void *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#152: FILE: include/asm-microblaze/io.h:71:
+	*(volatile unsigned short __force *)addr = cpu_to_le16(v);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#154: FILE: include/asm-microblaze/io.h:73:
+}
+static inline void writel(unsigned int v, volatile void __iomem *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#154: FILE: include/asm-microblaze/io.h:73:
+static inline void writel(unsigned int v, volatile void __iomem *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#156: FILE: include/asm-microblaze/io.h:75:
+	*(volatile unsigned int __force *)addr = cpu_to_le32(v);

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#160: FILE: include/asm-microblaze/io.h:79:
+ * variants of accessors. we might check for endianess in the feature
                                              ^^^^^^^^^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#205: FILE: include/asm-microblaze/io.h:124:
+static inline unsigned long __iomem virt_to_phys(volatile void *address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: include/asm-microblaze/io.h:151:
+static inline void *__ioremap(unsigned long address, unsigned long size,
+			unsigned long flags)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: include/asm-microblaze/io.h:156:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#268: FILE: include/asm-microblaze/io.h:187:
+#define out_le32(a, v) __raw_writel(__cpu_to_le32(v), (a));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#281: FILE: include/asm-microblaze/io.h:200:
+	return (void __iomem *) (port);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257587.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 34 warnings, 15 checks, 208 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257587.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
