WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#84: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#89: FILE: include/asm-microblaze/processor.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#90: FILE: include/asm-microblaze/processor.h:2:
+ * include/asm-microblaze/processor.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/asm-microblaze/processor.h:66:
+extern unsigned long thread_saved_pc(struct task_struct *t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/asm-microblaze/processor.h:68:
+extern unsigned long get_wchan(struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/asm-microblaze/processor.h:77:
+extern int kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: include/asm-microblaze/processor.h:85:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#184: FILE: include/asm-microblaze/pvr.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#185: FILE: include/asm-microblaze/pvr.h:2:
+ * include/asm-microblaze/pvr.h

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#203: FILE: include/asm-microblaze/pvr.h:20:
+	unsigned pvr[16];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#287: FILE: include/asm-microblaze/pvr.h:104:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#289: FILE: include/asm-microblaze/pvr.h:106:
+#define PVR_IS_FULL(pvr)		(pvr.pvr[0] & PVR0_PVR_FULL_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#290: FILE: include/asm-microblaze/pvr.h:107:
+#define PVR_USE_BARREL(pvr)		(pvr.pvr[0] & PVR0_USE_BARREL_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#291: FILE: include/asm-microblaze/pvr.h:108:
+#define PVR_USE_DIV(pvr)		(pvr.pvr[0] & PVR0_USE_DIV_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#292: FILE: include/asm-microblaze/pvr.h:109:
+#define PVR_USE_HW_MUL(pvr)		(pvr.pvr[0] & PVR0_USE_HW_MUL_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#293: FILE: include/asm-microblaze/pvr.h:110:
+#define PVR_USE_FPU(pvr)		(pvr.pvr[0] & PVR0_USE_FPU_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#294: FILE: include/asm-microblaze/pvr.h:111:
+#define PVR_USE_ICACHE(pvr)		(pvr.pvr[0] & PVR0_USE_ICACHE_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#295: FILE: include/asm-microblaze/pvr.h:112:
+#define PVR_USE_DCACHE(pvr)		(pvr.pvr[0] & PVR0_USE_DCACHE_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#296: FILE: include/asm-microblaze/pvr.h:113:
+#define PVR_VERSION(pvr)	((pvr.pvr[0] & PVR0_VERSION_MASK) >> 8)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#297: FILE: include/asm-microblaze/pvr.h:114:
+#define PVR_USER1(pvr)			(pvr.pvr[0] & PVR0_USER1_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#298: FILE: include/asm-microblaze/pvr.h:115:
+#define PVR_USER2(pvr)			(pvr.pvr[1] & PVR1_USER2_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#300: FILE: include/asm-microblaze/pvr.h:117:
+#define PVR_D_OPB(pvr)			(pvr.pvr[2] & PVR2_D_OPB_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#301: FILE: include/asm-microblaze/pvr.h:118:
+#define PVR_D_LMB(pvr)			(pvr.pvr[2] & PVR2_D_LMB_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#302: FILE: include/asm-microblaze/pvr.h:119:
+#define PVR_I_OPB(pvr)			(pvr.pvr[2] & PVR2_I_OPB_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#303: FILE: include/asm-microblaze/pvr.h:120:
+#define PVR_I_LMB(pvr)			(pvr.pvr[2] & PVR2_I_LMB_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#304: FILE: include/asm-microblaze/pvr.h:121:
+#define PVR_INTERRUPT_IS_EDGE(pvr) \
+			(pvr.pvr[2] & PVR2_INTERRUPT_IS_EDGE_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#306: FILE: include/asm-microblaze/pvr.h:123:
+#define PVR_EDGE_IS_POSITIVE(pvr) \
+			(pvr.pvr[2] & PVR2_EDGE_IS_POSITIVE_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#308: FILE: include/asm-microblaze/pvr.h:125:
+#define PVR_USE_MSR_INSTR(pvr)		(pvr.pvr[2] & PVR2_USE_MSR_INSTR)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#309: FILE: include/asm-microblaze/pvr.h:126:
+#define PVR_USE_PCMP_INSTR(pvr)		(pvr.pvr[2] & PVR2_USE_PCMP_INSTR)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#310: FILE: include/asm-microblaze/pvr.h:127:
+#define PVR_AREA_OPTIMISED(pvr)		(pvr.pvr[2] & PVR2_AREA_OPTIMISED)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#311: FILE: include/asm-microblaze/pvr.h:128:
+#define PVR_USE_MUL64(pvr)		(pvr.pvr[2] & PVR2_USE_MUL64_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#312: FILE: include/asm-microblaze/pvr.h:129:
+#define PVR_OPCODE_0x0_ILLEGAL(pvr) \
+			(pvr.pvr[2] & PVR2_OPCODE_0x0_ILLEGAL_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#314: FILE: include/asm-microblaze/pvr.h:131:
+#define PVR_UNALIGNED_EXCEPTION(pvr) \
+			(pvr.pvr[2] & PVR2_UNALIGNED_EXCEPTION_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#316: FILE: include/asm-microblaze/pvr.h:133:
+#define PVR_ILL_OPCODE_EXCEPTION(pvr) \
+			(pvr.pvr[2] & PVR2_ILL_OPCODE_EXCEPTION_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#318: FILE: include/asm-microblaze/pvr.h:135:
+#define PVR_IOPB_BUS_EXCEPTION(pvr) \
+			(pvr.pvr[2] & PVR2_IOPB_BUS_EXCEPTION_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#320: FILE: include/asm-microblaze/pvr.h:137:
+#define PVR_DOPB_BUS_EXCEPTION(pvr) \
+			(pvr.pvr[2] & PVR2_DOPB_BUS_EXCEPTION_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#322: FILE: include/asm-microblaze/pvr.h:139:
+#define PVR_DIV_ZERO_EXCEPTION(pvr) \
+			(pvr.pvr[2] & PVR2_DIV_ZERO_EXCEPTION_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#324: FILE: include/asm-microblaze/pvr.h:141:
+#define PVR_FPU_EXCEPTION(pvr)		(pvr.pvr[2] & PVR2_FPU_EXCEPTION_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#326: FILE: include/asm-microblaze/pvr.h:143:
+#define PVR_DEBUG_ENABLED(pvr)		(pvr.pvr[3] & PVR3_DEBUG_ENABLED_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#327: FILE: include/asm-microblaze/pvr.h:144:
+#define PVR_NUMBER_OF_PC_BRK(pvr) \
+			((pvr.pvr[3] & PVR3_NUMBER_OF_PC_BRK_MASK) >> 25)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#329: FILE: include/asm-microblaze/pvr.h:146:
+#define PVR_NUMBER_OF_RD_ADDR_BRK(pvr) \
+			((pvr.pvr[3] & PVR3_NUMBER_OF_RD_ADDR_BRK_MASK) >> 19)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#331: FILE: include/asm-microblaze/pvr.h:148:
+#define PVR_NUMBER_OF_WR_ADDR_BRK(pvr) \
+			((pvr.pvr[3] & PVR3_NUMBER_OF_WR_ADDR_BRK_MASK) >> 13)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#333: FILE: include/asm-microblaze/pvr.h:150:
+#define PVR_FSL_LINKS(pvr)	((pvr.pvr[3] & PVR3_FSL_LINKS_MASK) >> 7)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#335: FILE: include/asm-microblaze/pvr.h:152:
+#define PVR_ICACHE_ADDR_TAG_BITS(pvr) \
+			((pvr.pvr[4] & PVR4_ICACHE_ADDR_TAG_BITS_MASK) >> 26)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#337: FILE: include/asm-microblaze/pvr.h:154:
+#define PVR_ICACHE_USE_FSL(pvr)		(pvr.pvr[4] & PVR4_ICACHE_USE_FSL_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#338: FILE: include/asm-microblaze/pvr.h:155:
+#define PVR_ICACHE_ALLOW_WR(pvr)	(pvr.pvr[4] & PVR4_ICACHE_ALLOW_WR_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#339: FILE: include/asm-microblaze/pvr.h:156:
+#define PVR_ICACHE_LINE_LEN(pvr) \
+			(1 << ((pvr.pvr[4] & PVR4_ICACHE_LINE_LEN_MASK) >> 21))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#341: FILE: include/asm-microblaze/pvr.h:158:
+#define PVR_ICACHE_BYTE_SIZE(pvr) \
+			(1 << ((pvr.pvr[4] & PVR4_ICACHE_BYTE_SIZE_MASK) >> 16))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#344: FILE: include/asm-microblaze/pvr.h:161:
+#define PVR_DCACHE_ADDR_TAG_BITS(pvr) \
+			((pvr.pvr[5] & PVR5_DCACHE_ADDR_TAG_BITS_MASK) >> 26)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#346: FILE: include/asm-microblaze/pvr.h:163:
+#define PVR_DCACHE_USE_FSL(pvr)		(pvr.pvr[5] & PVR5_DCACHE_USE_FSL_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#347: FILE: include/asm-microblaze/pvr.h:164:
+#define PVR_DCACHE_ALLOW_WR(pvr)	(pvr.pvr[5] & PVR5_DCACHE_ALLOW_WR_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#348: FILE: include/asm-microblaze/pvr.h:165:
+#define PVR_DCACHE_LINE_LEN(pvr) \
+			(1 << ((pvr.pvr[5] & PVR5_DCACHE_LINE_LEN_MASK) >> 21))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#350: FILE: include/asm-microblaze/pvr.h:167:
+#define PVR_DCACHE_BYTE_SIZE(pvr) \
+			(1 << ((pvr.pvr[5] & PVR5_DCACHE_BYTE_SIZE_MASK) >> 16))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#353: FILE: include/asm-microblaze/pvr.h:170:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#354: FILE: include/asm-microblaze/pvr.h:171:
+#define PVR_ICACHE_BASEADDR(pvr)	(pvr.pvr[6] & PVR6_ICACHE_BASEADDR_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#355: FILE: include/asm-microblaze/pvr.h:172:
+#define PVR_ICACHE_HIGHADDR(pvr)	(pvr.pvr[7] & PVR7_ICACHE_HIGHADDR_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#357: FILE: include/asm-microblaze/pvr.h:174:
+#define PVR_DCACHE_BASEADDR(pvr)	(pvr.pvr[8] & PVR8_DCACHE_BASEADDR_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#358: FILE: include/asm-microblaze/pvr.h:175:
+#define PVR_DCACHE_HIGHADDR(pvr)	(pvr.pvr[9] & PVR9_DCACHE_HIGHADDR_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#360: FILE: include/asm-microblaze/pvr.h:177:
+#define PVR_TARGET_FAMILY(pvr)	((pvr.pvr[10] & PVR10_TARGET_FAMILY_MASK) >> 24)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pvr' - possible side-effects?
#362: FILE: include/asm-microblaze/pvr.h:179:
+#define PVR_MSR_RESET_VALUE(pvr) \
+				(pvr.pvr[11] & PVR11_MSR_RESET_VALUE_MASK)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#375: FILE: include/asm-microblaze/system.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#376: FILE: include/asm-microblaze/system.h:2:
+ * include/asm-microblaze/system.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#395: FILE: include/asm-microblaze/system.h:21:
+extern struct task_struct *_switch_to(struct thread_info *prev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: include/asm-microblaze/system.h:22:
+extern struct task_struct *_switch_to(struct thread_info *prev,
+					struct thread_info *next);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#398: FILE: include/asm-microblaze/system.h:24:
+#define switch_to(prev, next, last)					\
+	do {								\
+		(last) = _switch_to(task_thread_info(prev),		\
+					task_thread_info(next));	\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#406: FILE: include/asm-microblaze/system.h:32:
+#define local_irq_save(flags)				\
+	do {						\
+		asm volatile ("# local_irq_save	\n\t"	\
+				"msrclr %0, %1	\n\t"	\
+				: "=r"(flags)		\
+				: "i"(MSR_IE)		\
+				: "memory");		\
+	} while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#408: FILE: include/asm-microblaze/system.h:34:
+		asm volatile ("# local_irq_save	\n\t"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#409: FILE: include/asm-microblaze/system.h:35:
+				"msrclr %0, %1	\n\t"	\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#415: FILE: include/asm-microblaze/system.h:41:
+#define local_irq_disable()					\
+	do {							\
+		asm volatile ("# local_irq_disable \n\t"	\
+				"msrclr r0, %0 \n\t"		\
+				:				\
+				: "i"(MSR_IE)			\
+				: "memory");			\
+	} while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#417: FILE: include/asm-microblaze/system.h:43:
+		asm volatile ("# local_irq_disable \n\t"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#418: FILE: include/asm-microblaze/system.h:44:
+				"msrclr r0, %0 \n\t"		\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#424: FILE: include/asm-microblaze/system.h:50:
+#define local_irq_enable()					\
+	do {							\
+		asm volatile ("# local_irq_enable \n\t"		\
+				"msrset	r0, %0 \n\t"		\
+				:				\
+				: "i"(MSR_IE)			\
+				: "memory");			\
+	} while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#426: FILE: include/asm-microblaze/system.h:52:
+		asm volatile ("# local_irq_enable \n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#427: FILE: include/asm-microblaze/system.h:53:
+				"msrset	r0, %0 \n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#438: FILE: include/asm-microblaze/system.h:64:
+		asm volatile ("# local_irq_save	\n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#439: FILE: include/asm-microblaze/system.h:65:
+				"mfs	%0, rmsr \n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#440: FILE: include/asm-microblaze/system.h:66:
+				"andi	%1, %0, %2 \n\t"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#441: FILE: include/asm-microblaze/system.h:67:
+				"mts	rmsr, %1 \n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#442: FILE: include/asm-microblaze/system.h:68:
+				"nop \n\t"			\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#451: FILE: include/asm-microblaze/system.h:77:
+		asm volatile ("# local_irq_disable \n\t"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#452: FILE: include/asm-microblaze/system.h:78:
+				"mfs	%0, rmsr \n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#453: FILE: include/asm-microblaze/system.h:79:
+				"andi	%0, %0, %1 \n\t"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#454: FILE: include/asm-microblaze/system.h:80:
+				"mts	rmsr, %0 \n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#455: FILE: include/asm-microblaze/system.h:81:
+				"nop \n\t"			\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#464: FILE: include/asm-microblaze/system.h:90:
+		asm volatile ("# local_irq_enable \n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#465: FILE: include/asm-microblaze/system.h:91:
+				"mfs	%0, rmsr \n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#466: FILE: include/asm-microblaze/system.h:92:
+				"ori	%0, %0, %1 \n\t"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#467: FILE: include/asm-microblaze/system.h:93:
+				"mts	rmsr, %0 \n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#468: FILE: include/asm-microblaze/system.h:94:
+				"nop \n\t"			\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#476: FILE: include/asm-microblaze/system.h:102:
+#define local_save_flags(flags)					\
+	do {							\
+		asm volatile ("# local_save_flags \n\t"		\
+				"mfs	%0, rmsr \n\t"		\
+				: "=r"(flags)			\
+				:				\
+				: "memory");			\
+	} while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#478: FILE: include/asm-microblaze/system.h:104:
+		asm volatile ("# local_save_flags \n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#479: FILE: include/asm-microblaze/system.h:105:
+				"mfs	%0, rmsr \n\t"		\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#485: FILE: include/asm-microblaze/system.h:111:
+#define local_irq_restore(flags)			\
+	do {						\
+		asm volatile ("# local_irq_restore \n\t"\
+				"mts	rmsr, %0 \n\t"	\
+				:			\
+				:"r"(flags)		\
+				: "memory");		\
+	} while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#487: FILE: include/asm-microblaze/system.h:113:
+		asm volatile ("# local_irq_restore \n\t"\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#488: FILE: include/asm-microblaze/system.h:114:
+				"mts	rmsr, %0 \n\t"	\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#490: FILE: include/asm-microblaze/system.h:116:
+				:"r"(flags)		\
 				^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#505: FILE: include/asm-microblaze/system.h:131:
+#define nop()			asm volatile ("nop")

WARNING:MEMORY_BARRIER: memory barrier without comment
#506: FILE: include/asm-microblaze/system.h:132:
+#define mb()			barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#507: FILE: include/asm-microblaze/system.h:133:
+#define rmb()			mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#508: FILE: include/asm-microblaze/system.h:134:
+#define wmb()			mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#509: FILE: include/asm-microblaze/system.h:135:
+#define set_mb(var, value)	do { var = value; mb(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#510: FILE: include/asm-microblaze/system.h:136:
+#define set_wmb(var, value)	do { var = value; wmb(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#512: FILE: include/asm-microblaze/system.h:138:
+#define smp_mb()		mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#513: FILE: include/asm-microblaze/system.h:139:
+#define smp_rmb()		rmb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#514: FILE: include/asm-microblaze/system.h:140:
+#define smp_wmb()		wmb()

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#517: FILE: include/asm-microblaze/system.h:143:
+void __bad_xchg(volatile void *ptr, int size);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#519: FILE: include/asm-microblaze/system.h:145:
+static inline unsigned long __xchg(unsigned long x, volatile void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: include/asm-microblaze/system.h:146:
+static inline unsigned long __xchg(unsigned long x, volatile void *ptr,
+								int size)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#528: FILE: include/asm-microblaze/system.h:154:
+		ret = *(volatile unsigned char *)ptr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#529: FILE: include/asm-microblaze/system.h:155:
+		*(volatile unsigned char *)ptr = x;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#535: FILE: include/asm-microblaze/system.h:161:
+		ret = *(volatile unsigned long *)ptr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#536: FILE: include/asm-microblaze/system.h:162:
+		*(volatile unsigned long *)ptr = x;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#547: FILE: include/asm-microblaze/system.h:173:
+#define xchg(ptr,x) \
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#547: FILE: include/asm-microblaze/system.h:173:
+#define xchg(ptr,x) \
+	((__typeof__(*(ptr))) __xchg((unsigned long)(x), (ptr), sizeof(*(ptr))))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#550: FILE: include/asm-microblaze/system.h:176:
+extern void *cacheable_memcpy(void *, const void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#550: FILE: include/asm-microblaze/system.h:176:
+extern void *cacheable_memcpy(void *, const void *, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#550: FILE: include/asm-microblaze/system.h:176:
+extern void *cacheable_memcpy(void *, const void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#550: FILE: include/asm-microblaze/system.h:176:
+extern void *cacheable_memcpy(void *, const void *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#554: FILE: include/asm-microblaze/system.h:180:
+extern void ret_from_fork(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 56 warnings, 60 checks, 464 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000285422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
