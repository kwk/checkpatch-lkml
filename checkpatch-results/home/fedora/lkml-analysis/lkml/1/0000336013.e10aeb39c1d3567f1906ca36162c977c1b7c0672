ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#130: FILE: mount/fstab.c:50:
+int
 mtab_is_a_symlink(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#173: FILE: mount/mount.c:119:
+#define MS_SECURE	(MS_NOEXEC|MS_NOSUID|MS_NODEV|MS_NOSUBMNT)
                  	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#173: FILE: mount/mount.c:119:
+#define MS_SECURE	(MS_NOEXEC|MS_NOSUID|MS_NODEV|MS_NOSUBMNT)
                  	                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#173: FILE: mount/mount.c:119:
+#define MS_SECURE	(MS_NOEXEC|MS_NOSUID|MS_NODEV|MS_NOSUBMNT)
                  	                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#177: FILE: mount/mount.c:122:
+#define MS_OWNERSECURE	(MS_NOSUID|MS_NODEV|MS_NOSUBMNT)
                       	          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#177: FILE: mount/mount.c:122:
+#define MS_OWNERSECURE	(MS_NOSUID|MS_NODEV|MS_NOSUBMNT)
                       	                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: mount/mount.c:182:
+  { "submnt",^I0, 1, MS_NOSUBMNT},^I/* permit unprivileged submounts */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: mount/mount.c:183:
+  { "nosubmnt",0, 0, MS_NOSUBMNT},^I/* no unprivileged submounts */$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#186: FILE: mount/mount.c:183:
+  { "nosubmnt",0, 0, MS_NOSUBMNT},	/* no unprivileged submounts */
               ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#216: FILE: mount/mount.c:443:
+parse_opts (const char *options, int *flags, char **extra_opts, char **user) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#242: FILE: mount/mount.c:551:
+		parse_opts (fstab->m.mnt_opts, &flags, &extra_opts, &user);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#247: FILE: mount/mount.c:555:
+		mnt.mnt_opts = fix_opts_string (flags, extra_opts, user);

CHECK:SPACING: No space is necessary after a cast
#341: FILE: mount/mount.c:780:
+		if (val < 0 || (long) (uid_t) val != val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#347: FILE: mount/mount.c:786:
+		struct passwd *pw = getpwnam(user);
+		if (pw == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pw"
#347: FILE: mount/mount.c:786:
+		if (pw == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: mount/mount.c:805:
+   struct mountargs args = { spec, node, NULL, flags & ~MS_NOSYS, mount_opts};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: mount/mount.c:812:
+   args.flags &= ~MS_SETUSER;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: mount/mount.c:813:
+   if (user != NULL && mtab_is_a_symlink()) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 11)
#374: FILE: mount/mount.c:813:
+   if (user != NULL && mtab_is_a_symlink()) {
+	   if (get_user(user, &args.uid) != 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "user"
#374: FILE: mount/mount.c:813:
+   if (user != NULL && mtab_is_a_symlink()) {

WARNING:TABSTOP: Statements should start on a tabstop
#375: FILE: mount/mount.c:814:
+	   if (get_user(user, &args.uid) != 0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 19)
#375: FILE: mount/mount.c:814:
+	   if (get_user(user, &args.uid) != 0)
+		   return 1;

WARNING:TABSTOP: Statements should start on a tabstop
#376: FILE: mount/mount.c:815:
+		   return 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: mount/mount.c:818:
+   }$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#386: FILE: mount/mount.c:871:
   if (suid) {
+      if (*user != NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: mount/mount.c:872:
+      if (*user != NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 14)
#387: FILE: mount/mount.c:872:
+      if (*user != NULL)
+	      die (EX_USAGE, _("mount: only root can set user"));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "user"
#387: FILE: mount/mount.c:872:
+      if (*user != NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#388: FILE: mount/mount.c:873:
+	      die (EX_USAGE, _("mount: only root can set user"));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: mount/mount.c:1162:
+  char *user = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: mount/mount.c:1182:
+  parse_opts (opts, &flags, &extra_opts, &user);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#407: FILE: mount/mount.c:1182:
+  parse_opts (opts, &flags, &extra_opts, &user);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: mount/mount.c:1371:
+      error (_("maximum number of user mounts exceeded,\n"$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#425: FILE: mount/mount.c:1371:
+      error (_("maximum number of user mounts exceeded,\n"

ERROR:SPACING: space required before the open parenthesis '('
#455: FILE: mount/mount.c:2134:
+			if(setgid(getgid()) == -1 ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#471: FILE: mount/mount.c:2150:
+				die (EX_USAGE, _("mount: only root can do that"));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#487: FILE: mount/mount_constants.h:60:
+#define MS_SETUSER	(1<<24)
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#487: FILE: mount/mount_constants.h:60:
+#define MS_SETUSER	(1<<24)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#490: FILE: mount/mount_constants.h:63:
+#define MS_NOSUBMNT	(1<<25)
                    	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#490: FILE: mount/mount_constants.h:63:
+#define MS_NOSUBMNT	(1<<25)

ERROR:SPACING: space required before the open parenthesis '('
#523: FILE: mount/umount.c:639:
+			if(setgid(getgid()) == -1 ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#537: FILE: mount/umount.c:653:
+				die (2, _("umount: only root can do that"));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000336013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 25 warnings, 13 checks, 408 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000336013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
