WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#104: FILE: arch/x86/include/asm/checkpoint_hdr.h:103:
+} __attribute__((aligned(8)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#186: FILE: checkpoint/checkpoint.c:92:
+	BUG_ON(!buf);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#221: FILE: checkpoint/checkpoint.c:127:
+	if (!IS_ERR(fname)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#226: FILE: checkpoint/checkpoint.c:132:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: checkpoint/checkpoint_arch.h:6:
+extern int cr_write_mm_context(struct cr_ctx *ctx,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#295: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#300: FILE: checkpoint/checkpoint_mem.h:1:
+#ifndef _CHECKPOINT_CKPT_MEM_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: checkpoint/checkpoint_mem.h:32:
+extern void cr_pgarr_free(struct cr_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: checkpoint/checkpoint_mem.h:33:
+extern struct cr_pgarr *cr_pgarr_current(struct cr_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: checkpoint/checkpoint_mem.h:34:
+extern void cr_pgarr_reset_all(struct cr_ctx *ctx);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#347: FILE: checkpoint/ckpt_mem.c:1:
+/*

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#465: FILE: checkpoint/ckpt_mem.c:119:
+	pgarr->vaddrs = kmalloc(CR_PGARR_TOTAL * sizeof(unsigned long),
+				GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#472: FILE: checkpoint/ckpt_mem.c:126:
+		pgarr->pages = kmalloc(CR_PGARR_TOTAL * sizeof(struct page *),
+				       GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#529: FILE: checkpoint/ckpt_mem.c:183:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#568: FILE: checkpoint/ckpt_mem.c:222:
+				return ERR_PTR(-EFAULT);
+			else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#569: FILE: checkpoint/ckpt_mem.c:223:
+				BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#591: FILE: checkpoint/ckpt_mem.c:245:
+	} else if (vma->vm_file && (page_mapping(page) != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#619: FILE: checkpoint/ckpt_mem.c:273:
+	BUG_ON(vma->vm_flags & (VM_SHARED | VM_MAYSHARE));

CHECK:SPACING: No space is necessary after a cast
#690: FILE: checkpoint/ckpt_mem.c:344:
+	buf = (void *) __get_free_page(GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#703: FILE: checkpoint/ckpt_mem.c:357:
+	free_page((unsigned long) buf);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#803: FILE: checkpoint/ckpt_mem.c:457:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#955: FILE: include/linux/checkpoint.h:53:
+extern int cr_write_fname(struct cr_ctx *ctx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#964: FILE: include/linux/checkpoint.h:63:
+extern int cr_write_mm(struct cr_ctx *ctx, struct task_struct *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#967: FILE: include/linux/checkpoint.h:66:
+extern int cr_read_mm(struct cr_ctx *ctx);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1002: FILE: include/linux/checkpoint_hdr.h:96:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1019: FILE: include/linux/checkpoint_hdr.h:113:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1023: FILE: include/linux/checkpoint_hdr.h:117:
+} __attribute__((aligned(8)));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189371.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 13 checks, 871 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189371.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
