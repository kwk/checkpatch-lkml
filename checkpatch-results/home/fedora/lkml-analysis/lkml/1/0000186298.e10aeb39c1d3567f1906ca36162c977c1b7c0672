WARNING:TYPO_SPELLING: 'desciption' may be misspelled - perhaps 'description'?
#38: 
Brief desciption of mflash is following.
      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'eletronic' may be misspelled - perhaps 'electronic'?
#40: 
mflash is fusion memory device mainly targeted consumer eletronic and
                                                        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'Followings' may be misspelled - perhaps 'Following'?
#53: 
Followings are brief descriptions about IO mode.
^^^^^^^^^^

WARNING:TYPO_SPELLING: 'modifing' may be misspelled - perhaps 'modifying'?
#60: 
I think modifing IDE subsystem isn't a good thing, because that is
        ^^^^^^^^

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#63: 
So, I seperate this driver.
      ^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#89: FILE: drivers/block/Kconfig:406:
+config MG_DISK
+	tristate "mGine mflash, gflash support"
+	depends on ARM
+	help
+	  mGine mFlash(gFlash) block device driver
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#109: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#114: FILE: drivers/block/mg_disk.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#115: FILE: drivers/block/mg_disk.c:2:
+ *  drivers/block/mg_disk.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#140: FILE: drivers/block/mg_disk.c:26:
mg_host *host)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#142: FILE: drivers/block/mg_disk.c:28:
+	char *name = MG_DISK_NAME"?";

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#151: FILE: drivers/block/mg_disk.c:37:
+	printk("%s: %s: status=0x%02x { ", name, msg, stat & 0xff);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#153: FILE: drivers/block/mg_disk.c:39:
+		printk("Busy ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#155: FILE: drivers/block/mg_disk.c:41:
+		printk("DriveReady ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#157: FILE: drivers/block/mg_disk.c:43:
+		printk("WriteFault ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#159: FILE: drivers/block/mg_disk.c:45:
+		printk("SeekComplete ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#161: FILE: drivers/block/mg_disk.c:47:
+		printk("DataRequest ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#163: FILE: drivers/block/mg_disk.c:49:
+		printk("CorrectedError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#165: FILE: drivers/block/mg_disk.c:51:
+		printk("Error ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#166: FILE: drivers/block/mg_disk.c:52:
+	printk("}\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#171: FILE: drivers/block/mg_disk.c:57:
+		printk("%s: %s: error=0x%02x { ", name, msg, host->error & 0xff);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#173: FILE: drivers/block/mg_disk.c:59:
+			printk("BadSector ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#175: FILE: drivers/block/mg_disk.c:61:
+			printk("UncorrectableError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#177: FILE: drivers/block/mg_disk.c:63:
+			printk("SectorIdNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: drivers/block/mg_disk.c:65:
+			printk("DriveStatusError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#181: FILE: drivers/block/mg_disk.c:67:
+			printk("AddrMarkNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#182: FILE: drivers/block/mg_disk.c:68:
+		printk("}");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#188: FILE: drivers/block/mg_disk.c:74:
+					printk(", sector=%ld", req->sector);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#191: FILE: drivers/block/mg_disk.c:77:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#192: FILE: drivers/block/mg_disk.c:78:
+		printk("\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#223: FILE: drivers/block/mg_disk.c:109:
+				if (status & MG_REG_STATUS_BIT_DATA_REQ) {
+					break;
+				}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#231: FILE: drivers/block/mg_disk.c:117:
+	if (cur_jiffies >= expire) {
+		host->error = MG_ERR_TIMEOUT;
+	}

CHECK:SPACING: No space is necessary after a cast
#279: FILE: drivers/block/mg_disk.c:165:
+			be16_to_cpus((u16 *) p);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#289: FILE: drivers/block/mg_disk.c:175:
+			*p++ = *(s-1);
 			          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#303: FILE: drivers/block/mg_disk.c:189:
+	if (!prv_data->use_polling) {
+		outb(MG_REG_CTRL_INTR_DISABLE, host->dev_base + MG_REG_DRV_CTRL);
+	}

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#325: FILE: drivers/block/mg_disk.c:210:
+				mg_ide_fixstring(host->id_data.model, sizeof(host->id_data.model), 1);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#328: FILE: drivers/block/mg_disk.c:212:
+				mg_ide_fixstring(host->id_data.fw_rev, sizeof(host->id_data.fw_rev), 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: drivers/block/mg_disk.c:212:
+				mg_ide_fixstring(host->id_data.serial_no,
+				mg_ide_fixstring(host->id_data.fw_rev, sizeof(host->id_data.fw_rev), 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#329: FILE: drivers/block/mg_disk.c:213:
+				printk(KERN_INFO "mg_disk: model: %s\n", host->id_data.model);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#330: FILE: drivers/block/mg_disk.c:214:
+				printk(KERN_INFO "mg_disk: firm: %.8s\n", host->id_data.fw_rev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#331: FILE: drivers/block/mg_disk.c:215:
+				printk(KERN_INFO "mg_disk: serial: %s\n", host->id_data.serial_no);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#332: FILE: drivers/block/mg_disk.c:216:
+				printk(KERN_INFO "mg_disk: %d sectors\n", host->tot_sectors);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#337: FILE: drivers/block/mg_disk.c:221:
+	if (!prv_data->use_polling) {
+		outb(MG_REG_CTRL_INTR_ENABLE, host->dev_base + MG_REG_DRV_CTRL);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#344: FILE: drivers/block/mg_disk.c:228:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: drivers/block/mg_disk.c:284:
+	struct request *req = elv_next_request(host->breq);
+	if (req != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "req"
#402: FILE: drivers/block/mg_disk.c:284:
+	if (req != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: drivers/block/mg_disk.c:295:
+static unsigned int mg_out(struct mg_host *host,
+			unsigned int sect_num,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#421: FILE: drivers/block/mg_disk.c:302:
+	if (mg_wait(host, MG_STAT_READY, 3000)) {
+		return host->error;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#454: FILE: drivers/block/mg_disk.c:334:
+	if (mg_out(host, req->sector, req->nr_sectors, MG_CMD_RD, 0) != MG_ERR_NONE) {
+		mg_bad_rw_intr(host);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: drivers/block/mg_disk.c:339:
+	MG_DBG("requested %d sects (from %ld), buffer=0x%p\n", remains,
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#479: FILE: drivers/block/mg_disk.c:358:
+			if (remains > 0) {
+				req = elv_next_request(host->breq);
+			}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#508: FILE: drivers/block/mg_disk.c:387:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: drivers/block/mg_disk.c:389:
+	MG_DBG("requested %d sects (from %ld), buffer=0x%p\n", remains,
+	while (remains) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#527: FILE: drivers/block/mg_disk.c:405:
+			if (remains > 0) {
+				req = elv_next_request(host->breq);
+			}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: drivers/block/mg_disk.c:446:
+	MG_DBG("sector %ld, remaining=%ld, buffer=0x%p\n", req->sector,
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#589: FILE: drivers/block/mg_disk.c:466:
+	if (!i) {
+		mg_request(host->breq);
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'req->nr_sectors <= 1'
#610: FILE: drivers/block/mg_disk.c:487:
+		if ((req->nr_sectors <= 1) || (i & MG_REG_STATUS_BIT_DATA_REQ))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: drivers/block/mg_disk.c:514:
+		MG_DBG("sector %ld, remaining=%ld, buffer=0x%p\n", req->sector,
+		host->mg_do_intr = mg_write_intr;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#645: FILE: drivers/block/mg_disk.c:521:
+	if (!i) {
+		mg_request(host->breq);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#663: FILE: drivers/block/mg_disk.c:539:
+	printk("%s: timeout\n", name);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#677: FILE: drivers/block/mg_disk.c:553:
+	while ((req = elv_next_request(q)) != NULL) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#689: FILE: drivers/block/mg_disk.c:565:
+				printk(KERN_WARNING "%s:%d unknown command\n", __func__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#733: FILE: drivers/block/mg_disk.c:609:
+		printk(KERN_WARNING "%s: bad access: sector=%d, count=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#734: FILE: drivers/block/mg_disk.c:610:
+		printk(KERN_WARNING "%s: bad access: sector=%d, count=%d\n",
+			 req->rq_disk->disk_name, sect_num, sect_cnt);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#772: FILE: drivers/block/mg_disk.c:646:
+			printk(KERN_WARNING "%s:%d unknown command\n", __func__, __LINE__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: drivers/block/mg_disk.c:654:
+static int mg_ioctl(struct block_device *bdev, fmode_t fmode,
+{

WARNING:BRACES: braces {} are not necessary for single statement blocks
#787: FILE: drivers/block/mg_disk.c:660:
+		if (!access_ok(VERIFY_WRITE, arg, sizeof(geo))) {
+			return -EFAULT;
+		}

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#815: FILE: drivers/block/mg_disk.c:688:
+static struct block_device_operations mg_disk_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#830: FILE: drivers/block/mg_disk.c:703:
+		printk(KERN_ERR "%s:%d fail (no driver_data)\n", __func__, __LINE__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*host)...) over kmalloc(sizeof(struct mg_host)...)
#836: FILE: drivers/block/mg_disk.c:709:
+	host = kmalloc(sizeof(struct mg_host), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#838: FILE: drivers/block/mg_disk.c:711:
+		printk(KERN_ERR "%s:%d fail (no memory for mg_host)\n", __func__, __LINE__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#838: FILE: drivers/block/mg_disk.c:711:
+	if (!host) {
+		printk(KERN_ERR "%s:%d fail (no memory for mg_host)\n", __func__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#852: FILE: drivers/block/mg_disk.c:725:
+		printk(KERN_ERR "%s:%d platform_get_resource fail\n", __func__, __LINE__);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#856: FILE: drivers/block/mg_disk.c:729:
+	host->dev_base = ioremap(rsc->start , rsc->end + 1);
 	                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#858: FILE: drivers/block/mg_disk.c:731:
+		printk(KERN_ERR "%s:%d ioremap fail\n", __func__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#867: FILE: drivers/block/mg_disk.c:740:
+		printk(KERN_ERR "%s:%d fail (err code : %d)\n", __func__, __LINE__, err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#882: FILE: drivers/block/mg_disk.c:754:
+			printk(KERN_ERR "%s:%d fail (request_irq err=%d)\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: drivers/block/mg_disk.c:755:
+			printk(KERN_ERR "%s:%d fail (request_irq err=%d)\n", __func__,
+			goto probe_err_3;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#887: FILE: drivers/block/mg_disk.c:758:
+
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#892: FILE: drivers/block/mg_disk.c:763:
+		printk(KERN_ERR "%s:%d fail (err code : %d)\n", __func__, __LINE__, err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#899: FILE: drivers/block/mg_disk.c:770:
+		printk(KERN_ERR "%s:%d (register_blkdev) fail (err code : %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: drivers/block/mg_disk.c:771:
+		printk(KERN_ERR "%s:%d (register_blkdev) fail (err code : %d)\n",
+		goto probe_err_4;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#909: FILE: drivers/block/mg_disk.c:779:
+	if (prv_data->use_polling) {
[...]
+	} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#917: FILE: drivers/block/mg_disk.c:787:
+		printk(KERN_ERR "%s:%d (blk_init_queue) fail\n", __func__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#925: FILE: drivers/block/mg_disk.c:795:
+		printk(KERN_ERR "%s:%d (elevator_init) fail\n", __func__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#937: FILE: drivers/block/mg_disk.c:807:
+		printk(KERN_ERR "%s:%d (alloc_disk) fail\n", __func__, __LINE__);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#946: FILE: drivers/block/mg_disk.c:816:
+	sprintf(host->gd->disk_name, MG_DISK_NAME"a");

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1002: FILE: drivers/block/mg_disk.c:872:
+	if (host)
+		kfree(host);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1024: FILE: drivers/block/mg_disk.c:894:
+	printk(KERN_INFO "mGine mflash driver, (c) 2008 mGine Co.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1030: FILE: drivers/block/mg_disk.c:900:
+	printk(KERN_INFO "mflash driver : bye bye\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1046: FILE: include/linux/mg_disk.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1098: FILE: include/linux/mg_disk.h:53:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1101: FILE: include/linux/mg_disk.h:56:
+#define MG_REG_CTRL_INTR_DISABLE		(0x1<<1)
                                 		    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1102: FILE: include/linux/mg_disk.h:57:
+#define MG_REG_CTRL_RESET			(0x1<<2)
                          			    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1104: FILE: include/linux/mg_disk.h:59:
+#define MG_REG_CTRL_INTR_POLA_ACTIVE_LOW	(0x1<<4)
                                         	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1106: FILE: include/linux/mg_disk.h:61:
+#define MG_REG_CTRL_DPD_POLA_ACTIVE_HIGH	(0x1<<5)
                                         	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1108: FILE: include/linux/mg_disk.h:63:
+#define MG_REG_CTRL_DPD_ENABLE		(0x1<<6)
                               		    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1114: FILE: include/linux/mg_disk.h:68:
+#define MG_REG_STATUS_BIT_CORRECTED_ERROR		0x04 /* corrected error in
+#define MG_REG_STATUS_BIT_DATA_REQ			0x08 /* data request bit in

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1116: FILE: include/linux/mg_disk.h:69:
+#define MG_REG_STATUS_BIT_DATA_REQ			0x08 /* data request bit in
+#define MG_REG_STATUS_BIT_SEEK_DONE			0x10 /* DSC - Drive Seek Complete */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1123: FILE: include/linux/mg_disk.h:76:
+#define MG_READY_OK(s)		(((s) & (MG_STAT_READY | \
+					(MG_REG_STATUS_BIT_BUSY | MG_REG_STATUS_BIT_WRITE_FAULT |

CHECK:BIT_MACRO: Prefer using the BIT macro
#1159: FILE: include/linux/mg_disk.h:111:
+#define MG_OP_CASCADE (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1160: FILE: include/linux/mg_disk.h:112:
+#define MG_OP_CASCADE_SYNC_RD (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1161: FILE: include/linux/mg_disk.h:113:
+#define MG_OP_CASCADE_SYNC_WR (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1162: FILE: include/linux/mg_disk.h:114:
+#define MG_OP_INTERLEAVE (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1174: FILE: include/linux/mg_disk.h:126:
+#define MG_BURST_LEN_4 (1 << 1)

WARNING:SPACING: Unnecessary space before function pointer arguments
#1181: FILE: include/linux/mg_disk.h:133:
+	int (*mg_ctrl_pin_init) (void); /* initialize hdrst, wd, dpd pin to

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1183: FILE: include/linux/mg_disk.h:134:
+	int (*mg_ctrl_pin_init) (void); /* initialize hdrst, wd, dpd pin to
+	void (*mg_hdrst_pin) (u8 level);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1196: FILE: include/linux/mg_disk.h:147:
+	spinlock_t lock;

WARNING:SPACING: Unnecessary space before function pointer arguments
#1200: FILE: include/linux/mg_disk.h:151:
+	void (*mg_do_intr) (struct mg_host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mg_host *' should also have an identifier name
#1200: FILE: include/linux/mg_disk.h:151:
+	void (*mg_do_intr) (struct mg_host *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1218: FILE: include/linux/mg_disk.h:169:
+#  define MG_DBG(fmt, args...) printk(KERN_DEBUG "%s:%d "fmt,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1218: FILE: include/linux/mg_disk.h:169:
+#  define MG_DBG(fmt, args...) printk(KERN_DEBUG "%s:%d "fmt,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000186298.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 74 warnings, 34 checks, 1122 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000186298.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
