WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#72: 
I'm not so sure about this.  In my testing, it was clear that I needed to do a

WARNING:TYPO_SPELLING: 'origional' may be misspelled - perhaps 'original'?
#74: 
The origional code had to do the same thing with the class field, which is
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'incoporates' may be misspelled - perhaps 'incorporates'?
#80: 
incoporates your comments above Eric, as well as yours Yinghai.
^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: arch/x86/kernel/early-quirks.c:58:
+^Iif (htcfg & (1 << 18)) {^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#130: FILE: arch/x86/kernel/early-quirks.c:59:
+		printk(KERN_INFO "Detected use of extended apic ids on hypertransport bus\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#132: FILE: arch/x86/kernel/early-quirks.c:61:
+			printk(KERN_INFO "Enabling hypertransport extended apic interrupt broadcast\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#133: FILE: arch/x86/kernel/early-quirks.c:62:
+			printk(KERN_INFO "Note this is a bios bug, please contact your hw vendor\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: arch/x86/kernel/early-quirks.c:69:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#141: FILE: arch/x86/kernel/early-quirks.c:70:
+	
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#192: FILE: arch/x86/kernel/early-quirks.c:125:
+	{ PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_K8_NB, PCI_CLASS_BRIDGE_HOST, PCI_ANY_ID, fix_hypertransport_config },

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: arch/x86/kernel/early-quirks.c:159:
+				device = read_pci_config(num, slot, func,
+							PCI_DEVICE_ID);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#226: FILE: arch/x86/kernel/early-quirks.c:162:
+				for(i=0;early_qrk[i].f != NULL;i++) {
 				     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#226: FILE: arch/x86/kernel/early-quirks.c:162:
+				for(i=0;early_qrk[i].f != NULL;i++) {
 				       ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#226: FILE: arch/x86/kernel/early-quirks.c:162:
+				for(i=0;early_qrk[i].f != NULL;i++) {
 				                              ^

ERROR:SPACING: space required before the open parenthesis '('
#226: FILE: arch/x86/kernel/early-quirks.c:162:
+				for(i=0;early_qrk[i].f != NULL;i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "early_qrk[i].f"
#226: FILE: arch/x86/kernel/early-quirks.c:162:
+				for(i=0;early_qrk[i].f != NULL;i++) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'early_qrk[i].vendor == PCI_ANY_ID'
#227: FILE: arch/x86/kernel/early-quirks.c:163:
+					if (((early_qrk[i].vendor == PCI_ANY_ID) ||
+					    (early_qrk[i].vendor == vendor)) &&
+					   ((early_qrk[i].device == PCI_ANY_ID) ||
+					    (early_qrk[i].device == device)) &&
+					   (!((early_qrk[i].class ^ class) & 
+					     early_qrk[i].class_mask))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'early_qrk[i].vendor == vendor'
#227: FILE: arch/x86/kernel/early-quirks.c:163:
+					if (((early_qrk[i].vendor == PCI_ANY_ID) ||
+					    (early_qrk[i].vendor == vendor)) &&
+					   ((early_qrk[i].device == PCI_ANY_ID) ||
+					    (early_qrk[i].device == device)) &&
+					   (!((early_qrk[i].class ^ class) & 
+					     early_qrk[i].class_mask))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'early_qrk[i].device == PCI_ANY_ID'
#227: FILE: arch/x86/kernel/early-quirks.c:163:
+					if (((early_qrk[i].vendor == PCI_ANY_ID) ||
+					    (early_qrk[i].vendor == vendor)) &&
+					   ((early_qrk[i].device == PCI_ANY_ID) ||
+					    (early_qrk[i].device == device)) &&
+					   (!((early_qrk[i].class ^ class) & 
+					     early_qrk[i].class_mask))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'early_qrk[i].device == device'
#227: FILE: arch/x86/kernel/early-quirks.c:163:
+					if (((early_qrk[i].vendor == PCI_ANY_ID) ||
+					    (early_qrk[i].vendor == vendor)) &&
+					   ((early_qrk[i].device == PCI_ANY_ID) ||
+					    (early_qrk[i].device == device)) &&
+					   (!((early_qrk[i].class ^ class) & 
+					     early_qrk[i].class_mask))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: arch/x86/kernel/early-quirks.c:164:
+					if (((early_qrk[i].vendor == PCI_ANY_ID) ||
+					    (early_qrk[i].vendor == vendor)) &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: arch/x86/kernel/early-quirks.c:167:
+^I^I^I^I^I   (!((early_qrk[i].class ^ class) & $

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#234: FILE: arch/x86/kernel/early-quirks.c:170:
+						if (ret == 1)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#236: FILE: arch/x86/kernel/early-quirks.c:172:
+						if (ret == 2)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000348720.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 9 warnings, 8 checks, 139 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000348720.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
