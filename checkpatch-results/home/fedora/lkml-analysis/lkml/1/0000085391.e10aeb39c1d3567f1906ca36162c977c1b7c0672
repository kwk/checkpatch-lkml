WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
a kernel-originated SG vector to a block request. It is necessary to execute

WARNING:RETURN_VOID: void function return statements are not generally useful
#120: FILE: block/blk-map.c:287:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bw"
#126: FILE: block/blk-map.c:293:
+	if (bw != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#128: FILE: block/blk-map.c:295:
+		BUG_ON(atomic_read(&bw->bios_inflight) <= 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err == 0'
#130: FILE: block/blk-map.c:297:
+			if ((bio_data_dir(bio) == READ) && (err == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:RETURN_VOID: void function return statements are not generally useful
#144: FILE: block/blk-map.c:311:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bw"
#158: FILE: block/blk-map.c:325:
+	if (bw == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pg"
#179: FILE: block/blk-map.c:346:
+		if (pg == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#211: FILE: block/blk-map.c:378:
+		struct page *pg = sg_page(sg);
+		if (pg == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pg"
#211: FILE: block/blk-map.c:378:
+		if (pg == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: block/blk-map.c:391:
+static int __blk_rq_map_kern_sg(struct request *rq, struct scatterlist *sgl,
+	int nents, struct blk_kern_sg_work *bw, gfp_t gfp)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgl == NULL'
#236: FILE: block/blk-map.c:403:
+	if (unlikely((sgl == NULL) || (sgl->length == 0) || (nents <= 0))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgl->length == 0'
#236: FILE: block/blk-map.c:403:
+	if (unlikely((sgl == NULL) || (sgl->length == 0) || (nents <= 0))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nents <= 0'
#236: FILE: block/blk-map.c:403:
+	if (unlikely((sgl == NULL) || (sgl->length == 0) || (nents <= 0))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sgl"
#236: FILE: block/blk-map.c:403:
+	if (unlikely((sgl == NULL) || (sgl->length == 0) || (nents <= 0))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: block/blk-map.c:414:
+	max_nr_vecs =  min_t(size_t,
+		((PAGE_SIZE - sizeof(struct bio)) / sizeof(struct bio_vec)),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#284: FILE: block/blk-map.c:451:
+				if (bio == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hbio"
#296: FILE: block/blk-map.c:463:
+				if (hbio == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#297: FILE: block/blk-map.c:464:
+					hbio = tbio = bio;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#299: FILE: block/blk-map.c:466:
+					tbio = tbio->bi_next = bio;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc < 0'
#306: FILE: block/blk-map.c:473:
+				if (unlikely(need_new_bio || (rc < 0))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hbio"
#327: FILE: block/blk-map.c:494:
+	if (hbio == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bw"
#339: FILE: block/blk-map.c:506:
+	if (bw != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hbio"
#342: FILE: block/blk-map.c:509:
+	while (hbio != NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#358: FILE: block/blk-map.c:525:
+	rq->buffer = rq->data = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hbio"
#363: FILE: block/blk-map.c:530:
+	while (hbio != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: block/blk-map.c:563:
+		res = blk_rq_copy_kern_sg(rq, sgl, nents, &bw,
+				gfp, rq->q->bounce_gfp | gfp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: block/blk-map.c:568:
+		res = __blk_rq_map_kern_sg(rq, bw->sg_table.sgl,
+				bw->sg_table.nents, bw, gfp);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#408: FILE: block/blk-map.c:575:
+	rq->buffer = rq->data = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#430: FILE: block/blk-map.c:597:
+		struct bio *b = bio;
+		bio = bio->bi_next;

WARNING:RETURN_VOID: void function return statements are not generally useful
#436: FILE: block/blk-map.c:603:
+	return;
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#449: FILE: include/linux/blkdev.h:812:
+extern int blk_rq_map_kern_sg(struct request *rq, struct scatterlist *sgl,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#451: FILE: include/linux/blkdev.h:814:
+extern void blk_rq_unmap_kern_sg(struct request *rq, int err);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'src_len >= PAGE_SIZE'
#520: FILE: lib/scatterlist.c:524:
+		if (((src_offs & ~PAGE_MASK) == 0) &&
+		    ((dst_offs & ~PAGE_MASK) == 0) &&
+		    (src_len >= PAGE_SIZE) && (dst_len >= PAGE_SIZE) &&
+		    (copy_len >= PAGE_SIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dst_len >= PAGE_SIZE'
#520: FILE: lib/scatterlist.c:524:
+		if (((src_offs & ~PAGE_MASK) == 0) &&
+		    ((dst_offs & ~PAGE_MASK) == 0) &&
+		    (src_len >= PAGE_SIZE) && (dst_len >= PAGE_SIZE) &&
+		    (copy_len >= PAGE_SIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'copy_len >= PAGE_SIZE'
#520: FILE: lib/scatterlist.c:524:
+		if (((src_offs & ~PAGE_MASK) == 0) &&
+		    ((dst_offs & ~PAGE_MASK) == 0) &&
+		    (src_len >= PAGE_SIZE) && (dst_len >= PAGE_SIZE) &&
+		    (copy_len >= PAGE_SIZE)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: lib/scatterlist.c:532:
+			n = min_t(size_t, PAGE_SIZE - (dst_offs & ~PAGE_MASK),
+					  PAGE_SIZE - (src_offs & ~PAGE_MASK));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dst_sg"
#549: FILE: lib/scatterlist.c:553:
+			if (dst_sg == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'copy_len == 0'
#599: FILE: lib/scatterlist.c:603:
+		if ((copy_len == 0) || (dst_sg == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dst_sg == NULL'
#599: FILE: lib/scatterlist.c:603:
+		if ((copy_len == 0) || (dst_sg == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dst_sg"
#599: FILE: lib/scatterlist.c:603:
+		if ((copy_len == 0) || (dst_sg == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "src_sg"
#607: FILE: lib/scatterlist.c:611:
+	} while (src_sg != NULL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000085391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 35 checks, 501 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000085391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
