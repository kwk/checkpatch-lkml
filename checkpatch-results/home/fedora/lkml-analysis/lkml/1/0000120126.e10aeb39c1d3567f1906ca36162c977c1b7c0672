WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
o So far we were assuming that a bio/rq belongs to the task who is submitting

WARNING:TYPO_SPELLING: 'aysnc' may be misspelled - perhaps 'async'?
#34: 
  blkio_cgroup pataches to attribute the aysnc writes to right group instead
                                         ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#73: FILE: block/Kconfig.iosched:127:
+config TRACK_ASYNC_CONTEXT
+	bool "Determine async request context from bio"
+	depends on GROUP_IOSCHED
+	select CGROUP_BLKIO
+	default n
+	---help---
+	  Normally async request is attributed to the task submitting the
+	  request. With group ioscheduling, for accurate accounting of
+	  async writes, one needs to map the request to original task/cgroup
+	  which originated the request and not the submitter of the request.
+
+	  Currently there are generic io tracking patches to provide facility
+	  to map bio to original owner. If this option is set, for async
+	  request, original owner of the bio is decided by using io tracking
+	  patches otherwise we continue to attribute the request to the
+	  submitting thread.

Kconfig symbols should have a help text which fully describes
it.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: block/blk-core.c:647:
+blk_alloc_request(struct request_queue *q, struct bio *bio, int flags, int priv,
+					gfp_t gfp_mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: block/cfq-iosched.c:165:
+static struct cfq_queue *cfq_get_queue(struct cfq_data *, struct bio *bio,
+					int, struct io_context *, gfp_t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: block/cfq-iosched.c:184:
+static struct cfq_queue *cic_bio_to_cfqq(struct cfq_data *cfqd,
+		struct cfq_io_context *cic, struct bio *bio, int is_sync)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: block/cfq-iosched.c:1262:
+		new_cfqq = cfq_get_queue(cfqd, NULL, BLK_RW_ASYNC, cic->ioc,
 						GFP_ATOMIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: block/cfq-iosched.c:1326:
+cfq_find_alloc_queue(struct cfq_data *cfqd, struct bio *bio, int is_sync,
 				struct io_context *ioc, gfp_t gfp_mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: block/cfq-iosched.c:1444:
+cfq_get_queue(struct cfq_data *cfqd, struct bio *bio, int is_sync,
+		struct io_context *ioc, gfp_t gfp_mask)

WARNING:TYPO_SPELLING: 'everytime' may be misspelled - perhaps 'every time'?
#366: FILE: block/cfq-iosched.c:1471:
+	 * not cache the pointer to async queue and everytime a request comes,
 	                                            ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: block/cfq-iosched.c:1885:
+cfq_set_request(struct request_queue *q, struct request *rq, struct bio *bio,
+				gfp_t gfp_mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: block/cfq-iosched.c:1906:
+		cfqq = cfq_get_queue(cfqd, bio, is_sync, cic->ioc,
+						gfp_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: block/elevator-fq.c:1349:
+struct io_group *io_get_io_group(struct request_queue *q, struct bio *bio,
+					int create)

CHECK:BRACES: Unbalanced braces around else statement
#514: FILE: block/elevator-fq.c:1365:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: block/elevator-fq.c:1914:
+struct io_group *io_get_io_group(struct request_queue *q, struct bio *bio,
+						int create)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: block/elevator-fq.c:3082:
+		elv_log_ioq(efqd, ioq, "select busy=%d qued=%d disp=%d",
+				elv_nr_busy_ioq(q->elevator), ioq->nr_queued,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: block/elevator-fq.c:3220:
+	elv_log_ioq(efqd, ioq, "complete drv=%d disp=%d", efqd->rq_in_driver,
+						elv_ioq_nr_dispatched(ioq));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#633: FILE: block/elevator-fq.h:523:
+extern struct io_queue *elv_lookup_ioq_bio(struct request_queue *q,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: block/elevator-fq.h:524:
+extern struct io_queue *elv_lookup_ioq_bio(struct request_queue *q,
+						struct bio *bio);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: block/elevator-fq.h:595:
+static inline struct io_queue *elv_lookup_ioq_bio(struct request_queue *q,
+						struct bio *bio)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#665: FILE: block/elevator-fq.h:654:
+extern struct io_group *io_get_io_group(struct request_queue *q,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: block/elevator-fq.h:731:
+static inline struct io_queue *elv_lookup_ioq_bio(struct request_queue *q,
+						struct bio *bio)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#701: FILE: block/elevator.c:971:
+int elv_set_request(struct request_queue *q, struct request *rq,
+			struct bio *bio, gfp_t gfp_mask)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#751: FILE: include/linux/elevator.h:26:
+typedef int (elevator_set_req_fn) (struct request_queue *, struct request *, struct bio *bio, gfp_t);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#760: FILE: include/linux/elevator.h:153:
+extern int elv_set_request(struct request_queue *, struct request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request_queue *' should also have an identifier name
#760: FILE: include/linux/elevator.h:153:
+extern int elv_set_request(struct request_queue *, struct request *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#760: FILE: include/linux/elevator.h:153:
+extern int elv_set_request(struct request_queue *, struct request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#760: FILE: include/linux/elevator.h:153:
+extern int elv_set_request(struct request_queue *, struct request *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: include/linux/elevator.h:154:
+extern int elv_set_request(struct request_queue *, struct request *,
+					struct bio *bio, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#770: FILE: include/linux/elevator.h:297:
+extern void *elv_get_sched_queue_bio(struct request_queue *q, struct bio *bio);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120126.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 22 checks, 644 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120126.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
