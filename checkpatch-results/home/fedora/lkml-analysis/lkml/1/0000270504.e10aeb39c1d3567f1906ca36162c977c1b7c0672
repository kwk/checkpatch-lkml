WARNING:SPACING: Unnecessary space before function pointer arguments
#109: FILE: drivers/misc/sgi-xp/xpc.h:632:
+extern enum xp_retval (*xpc_make_first_contact) (struct xpc_partition *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_partition *' should also have an identifier name
#109: FILE: drivers/misc/sgi-xp/xpc.h:632:
+extern enum xp_retval (*xpc_make_first_contact) (struct xpc_partition *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#110: FILE: drivers/misc/sgi-xp/xpc.h:633:
+extern u64 (*xpc_get_IPI_flags) (struct xpc_partition *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_partition *' should also have an identifier name
#110: FILE: drivers/misc/sgi-xp/xpc.h:633:
+extern u64 (*xpc_get_IPI_flags) (struct xpc_partition *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#111: FILE: drivers/misc/sgi-xp/xpc.h:634:
+extern struct xpc_msg *(*xpc_get_deliverable_msg) (struct xpc_channel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_channel *' should also have an identifier name
#111: FILE: drivers/misc/sgi-xp/xpc.h:634:
+extern struct xpc_msg *(*xpc_get_deliverable_msg) (struct xpc_channel *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#112: FILE: drivers/misc/sgi-xp/xpc.h:635:
+extern enum xp_retval (*xpc_setup_infrastructure) (struct xpc_partition *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_partition *' should also have an identifier name
#112: FILE: drivers/misc/sgi-xp/xpc.h:635:
+extern enum xp_retval (*xpc_setup_infrastructure) (struct xpc_partition *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#113: FILE: drivers/misc/sgi-xp/xpc.h:636:
+extern void (*xpc_teardown_infrastructure) (struct xpc_partition *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_partition *' should also have an identifier name
#113: FILE: drivers/misc/sgi-xp/xpc.h:636:
+extern void (*xpc_teardown_infrastructure) (struct xpc_partition *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: drivers/misc/sgi-xp/xpc.h:667:
+extern void *xpc_kzalloc_cacheline_aligned(size_t, gfp_t, void **);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#126: FILE: drivers/misc/sgi-xp/xpc.h:667:
+extern void *xpc_kzalloc_cacheline_aligned(size_t, gfp_t, void **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#126: FILE: drivers/misc/sgi-xp/xpc.h:667:
+extern void *xpc_kzalloc_cacheline_aligned(size_t, gfp_t, void **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#126: FILE: drivers/misc/sgi-xp/xpc.h:667:
+extern void *xpc_kzalloc_cacheline_aligned(size_t, gfp_t, void **);

WARNING:SPACING: Unnecessary space before function pointer arguments
#725: FILE: drivers/misc/sgi-xp/xpc_main.c:179:
+enum xp_retval (*xpc_make_first_contact) (struct xpc_partition *part);

WARNING:SPACING: Unnecessary space before function pointer arguments
#726: FILE: drivers/misc/sgi-xp/xpc_main.c:180:
+u64 (*xpc_get_IPI_flags) (struct xpc_partition *part);

WARNING:SPACING: Unnecessary space before function pointer arguments
#727: FILE: drivers/misc/sgi-xp/xpc_main.c:181:
+struct xpc_msg *(*xpc_get_deliverable_msg) (struct xpc_channel *ch);

WARNING:SPACING: Unnecessary space before function pointer arguments
#728: FILE: drivers/misc/sgi-xp/xpc_main.c:182:
+enum xp_retval (*xpc_setup_infrastructure) (struct xpc_partition *part);

WARNING:SPACING: Unnecessary space before function pointer arguments
#729: FILE: drivers/misc/sgi-xp/xpc_main.c:183:
+void (*xpc_teardown_infrastructure) (struct xpc_partition *part);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'xpc_activating', this function's name, in a string
#832: FILE: drivers/misc/sgi-xp/xpc_main.c:416:
+		dev_warn(xpc_part, "xpc_activating(%d) failed to register "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <xpSuccess>
#845: FILE: drivers/misc/sgi-xp/xpc_main.c:430:
+	if (xpc_setup_infrastructure(part) == xpSuccess) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "part->channels"
#932: FILE: drivers/misc/sgi-xp/xpc_sn2.c:125:
+	DBUG_ON(part->channels != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*part->channels)...) over kzalloc(sizeof(struct xpc_channel)...)
#933: FILE: drivers/misc/sgi-xp/xpc_sn2.c:126:
+	part->channels = kzalloc(sizeof(struct xpc_channel) * XPC_MAX_NCHANNELS,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!part->channels"
#935: FILE: drivers/misc/sgi-xp/xpc_sn2.c:128:
+	if (part->channels == NULL) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#936: FILE: drivers/misc/sgi-xp/xpc_sn2.c:129:
+	if (part->channels == NULL) {
+		dev_err(xpc_chan, "can't get memory for channels\n");

CHECK:CAMELCASE: Avoid CamelCase: <xpNoMemory>
#937: FILE: drivers/misc/sgi-xp/xpc_sn2.c:130:
+		return xpNoMemory;

CHECK:CAMELCASE: Avoid CamelCase: <local_GPs>
#942: FILE: drivers/misc/sgi-xp/xpc_sn2.c:135:
+	part->local_GPs = xpc_kzalloc_cacheline_aligned(XPC_GP_SIZE,

CHECK:CAMELCASE: Avoid CamelCase: <local_GPs_base>
#944: FILE: drivers/misc/sgi-xp/xpc_sn2.c:137:
+							&part->local_GPs_base);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!part->local_GPs"
#945: FILE: drivers/misc/sgi-xp/xpc_sn2.c:138:
+	if (part->local_GPs == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#947: FILE: drivers/misc/sgi-xp/xpc_sn2.c:140:
+		dev_err(xpc_chan, "can't get memory for local get/put "
+			"values\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CAMELCASE: Avoid CamelCase: <remote_GPs>
#952: FILE: drivers/misc/sgi-xp/xpc_sn2.c:145:
+	part->remote_GPs = xpc_kzalloc_cacheline_aligned(XPC_GP_SIZE,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'part->remote_GPs_base'
#955: FILE: drivers/misc/sgi-xp/xpc_sn2.c:148:
+							 &part->
+							 remote_GPs_base);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:CAMELCASE: Avoid CamelCase: <remote_GPs_base>
#955: FILE: drivers/misc/sgi-xp/xpc_sn2.c:148:
+							 remote_GPs_base);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!part->remote_GPs"
#956: FILE: drivers/misc/sgi-xp/xpc_sn2.c:149:
+	if (part->remote_GPs == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#958: FILE: drivers/misc/sgi-xp/xpc_sn2.c:151:
+		dev_err(xpc_chan, "can't get memory for remote get/put "
+			"values\n");

CHECK:CAMELCASE: Avoid CamelCase: <remote_GPs_pa>
#963: FILE: drivers/misc/sgi-xp/xpc_sn2.c:156:
+	part->remote_GPs_pa = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!part->local_openclose_args"
#970: FILE: drivers/misc/sgi-xp/xpc_sn2.c:163:
+	if (part->local_openclose_args == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!part->remote_openclose_args"
#979: FILE: drivers/misc/sgi-xp/xpc_sn2.c:172:
+	if (part->remote_openclose_args == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#1003: FILE: drivers/misc/sgi-xp/xpc_sn2.c:196:
+		dev_err(xpc_chan, "can't register NOTIFY IRQ handler, "
+			"errno=%d\n", -ret);

CHECK:CAMELCASE: Avoid CamelCase: <xpLackOfResources>
#1004: FILE: drivers/misc/sgi-xp/xpc_sn2.c:197:
+		retval = xpLackOfResources;

CHECK:CAMELCASE: Avoid CamelCase: <GPs_pa>
#1061: FILE: drivers/misc/sgi-xp/xpc_sn2.c:254:
+	xpc_vars_part[partid].GPs_pa = __pa(part->local_GPs);

WARNING:SPLIT_STRING: quoted string split across lines
#1170: FILE: drivers/misc/sgi-xp/xpc_sn2.c:363:
+		dev_dbg(xpc_chan, "xp_remote_memcpy() from partition %d failed,"
+			" ret=%d\n", XPC_PARTID(part), ret);

WARNING:SPLIT_STRING: quoted string split across lines
#1210: FILE: drivers/misc/sgi-xp/xpc_sn2.c:403:
+		dev_dbg(xpc_chan, "failed to pull XPC vars_part from "
+			"partition %d, ret=%d\n", partid, ret);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1218: FILE: drivers/misc/sgi-xp/xpc_sn2.c:411:
+	    pulled_entry->magic != XPC_VP_MAGIC2) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#1221: FILE: drivers/misc/sgi-xp/xpc_sn2.c:414:
+			dev_dbg(xpc_chan, "partition %d's XPC vars_part for "
+				"partition %d has bad magic value (=0x%lx)\n",

CHECK:CAMELCASE: Avoid CamelCase: <xpBadMagic>
#1223: FILE: drivers/misc/sgi-xp/xpc_sn2.c:416:
+			return xpBadMagic;

CHECK:CAMELCASE: Avoid CamelCase: <xpRetry>
#1227: FILE: drivers/misc/sgi-xp/xpc_sn2.c:420:
+		return xpRetry;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1231: FILE: drivers/misc/sgi-xp/xpc_sn2.c:424:
+	if (xpc_vars_part[partid].magic == XPC_VP_MAGIC1) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1237: FILE: drivers/misc/sgi-xp/xpc_sn2.c:430:
+		    pulled_entry->IPI_amo_pa == 0) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#1239: FILE: drivers/misc/sgi-xp/xpc_sn2.c:432:
+			dev_err(xpc_chan, "partition %d's XPC vars_part for "
+				"partition %d are not valid\n", partid,

CHECK:CAMELCASE: Avoid CamelCase: <xpInvalidAddress>
#1241: FILE: drivers/misc/sgi-xp/xpc_sn2.c:434:
+			return xpInvalidAddress;

WARNING:SPLIT_STRING: quoted string split across lines
#1285: FILE: drivers/misc/sgi-xp/xpc_sn2.c:478:
+		dev_dbg(xpc_part, "waiting to make first contact with "
+			"partition %d\n", XPC_PARTID(part));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1320: FILE: drivers/misc/sgi-xp/xpc_sn2.c:513:
+		ret = xpc_pull_remote_cachelines_sn2(part,
+						    part->remote_openclose_args,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'part->remote_openclose_args_pa'
#1322: FILE: drivers/misc/sgi-xp/xpc_sn2.c:515:
+						     (void *)part->
+						     remote_openclose_args_pa,

WARNING:SPLIT_STRING: quoted string split across lines
#1328: FILE: drivers/misc/sgi-xp/xpc_sn2.c:521:
+			dev_dbg(xpc_chan, "failed to pull openclose args from "
+				"partition %d, ret=%d\n", XPC_PARTID(part),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: drivers/misc/sgi-xp/xpc_sn2.c:531:
+		ret = xpc_pull_remote_cachelines_sn2(part, part->remote_GPs,
+						    (void *)part->remote_GPs_pa,

WARNING:SPLIT_STRING: quoted string split across lines
#1344: FILE: drivers/misc/sgi-xp/xpc_sn2.c:537:
+			dev_dbg(xpc_chan, "failed to pull GPs from partition "
+				"%d, ret=%d\n", XPC_PARTID(part), ret);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1369: FILE: drivers/misc/sgi-xp/xpc_sn2.c:562:
+	while (get >= ch->next_msg_to_pull) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1389: FILE: drivers/misc/sgi-xp/xpc_sn2.c:582:
+		if (ret != xpSuccess) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#1391: FILE: drivers/misc/sgi-xp/xpc_sn2.c:584:
+			dev_dbg(xpc_chan, "failed to pull %d msgs starting with"
+				" msg %ld from partition %d, channel=%d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1392: FILE: drivers/misc/sgi-xp/xpc_sn2.c:585:
+				" msg %ld from partition %d, channel=%d, "
+				"ret=%d\n", nmsgs, ch->next_msg_to_pull,

WARNING:SPLIT_STRING: quoted string split across lines
#1442: FILE: drivers/misc/sgi-xp/xpc_sn2.c:635:
+			dev_dbg(xpc_chan, "w_local_GP.get changed to %ld, "
+				"partid=%d, channel=%d\n", get + 1,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msg"
#1449: FILE: drivers/misc/sgi-xp/xpc_sn2.c:642:
+			DBUG_ON(msg != NULL && msg->number != get);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msg"
#1450: FILE: drivers/misc/sgi-xp/xpc_sn2.c:643:
+			DBUG_ON(msg != NULL && (msg->flags & XPC_M_DONE));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msg"
#1451: FILE: drivers/misc/sgi-xp/xpc_sn2.c:644:
+			DBUG_ON(msg != NULL && !(msg->flags & XPC_M_READY));

CHECK:CAMELCASE: Avoid CamelCase: <xpUnsupported>
#1489: FILE: drivers/misc/sgi-xp/xpc_uv.c:47:
+	return xpUnsupported;

WARNING:RETURN_VOID: void function return statements are not generally useful
#1501: FILE: drivers/misc/sgi-xp/xpc_uv.c:59:
+	return;
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270504.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 36 warnings, 31 checks, 1444 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270504.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
