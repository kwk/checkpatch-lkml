CHECK:CAMELCASE: Avoid CamelCase: <Pcg_CACHE>
#73: FILE: mm/memcontrol.c:166:
+	Pcg_CACHE, /* charged as cache */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Pcg_ACTIVE>
#75: FILE: mm/memcontrol.c:168:
+	Pcg_ACTIVE, /* page is active in this cgroup */

CHECK:CAMELCASE: Avoid CamelCase: <Pcg_FILE>
#76: FILE: mm/memcontrol.c:169:
+	Pcg_FILE, /* page is file system backed */

CHECK:CAMELCASE: Avoid CamelCase: <Pcg_UNEVICTABLE>
#77: FILE: mm/memcontrol.c:170:
+	Pcg_UNEVICTABLE, /* page is unevictableable */

CHECK:CAMELCASE: Avoid CamelCase: <Pcg##uname>
#81: FILE: mm/memcontrol.c:174:
+static inline int Pcg##uname(struct page_cgroup *pc)	\

CHECK:CAMELCASE: Avoid CamelCase: <Pcg_##lname>
#82: FILE: mm/memcontrol.c:175:
+	{ return test_bit(Pcg_##lname, &pc->flags); }

CHECK:CAMELCASE: Avoid CamelCase: <SetPcg##uname>
#85: FILE: mm/memcontrol.c:178:
+static inline void SetPcg##uname(struct page_cgroup *pc)\

CHECK:CAMELCASE: Avoid CamelCase: <ClearPcg##uname>
#89: FILE: mm/memcontrol.c:182:
+static inline void ClearPcg##uname(struct page_cgroup *pc)	\

CHECK:CAMELCASE: Avoid CamelCase: <__SetPcg##uname>
#93: FILE: mm/memcontrol.c:186:
+static inline void __SetPcg##uname(struct page_cgroup *pc)\

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPcg##uname>
#97: FILE: mm/memcontrol.c:190:
+static inline void __ClearPcg##uname(struct page_cgroup *pc)	\

CHECK:CAMELCASE: Avoid CamelCase: <Cache>
#101: FILE: mm/memcontrol.c:194:
+TESTPCGFLAG(Cache, CACHE)

CHECK:CAMELCASE: Avoid CamelCase: <File>
#105: FILE: mm/memcontrol.c:198:
+TESTPCGFLAG(File, FILE)

CHECK:CAMELCASE: Avoid CamelCase: <Active>
#110: FILE: mm/memcontrol.c:203:
+TESTPCGFLAG(Active, ACTIVE)

CHECK:CAMELCASE: Avoid CamelCase: <Unevictable>
#115: FILE: mm/memcontrol.c:208:
+TESTPCGFLAG(Unevictable, UNEVICTABLE)

CHECK:CAMELCASE: Avoid CamelCase: <PcgCache>
#137: FILE: mm/memcontrol.c:240:
+	if (PcgCache(pc))

CHECK:CAMELCASE: Avoid CamelCase: <PcgUnevictable>
#146: FILE: mm/memcontrol.c:333:
+	if (PcgUnevictable(pc))

CHECK:BRACES: braces {} should be used on all arms of this statement
#146: FILE: mm/memcontrol.c:333:
+	if (PcgUnevictable(pc))
[...]
 	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <PcgActive>
#150: FILE: mm/memcontrol.c:336:
+		if (PcgActive(pc))

CHECK:CAMELCASE: Avoid CamelCase: <PcgFile>
#153: FILE: mm/memcontrol.c:338:
+		if (PcgFile(pc))

CHECK:BRACES: braces {} should be used on all arms of this statement
#169: FILE: mm/memcontrol.c:353:
+	if (PcgUnevictable(pc))
[...]
 	else {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <ClearPcgActive>
#205: FILE: mm/memcontrol.c:383:
+		ClearPcgActive(pc);

CHECK:CAMELCASE: Avoid CamelCase: <SetPcgUnevictable>
#206: FILE: mm/memcontrol.c:384:
+		SetPcgUnevictable(pc);

CHECK:CAMELCASE: Avoid CamelCase: <SetPcgActive>
#210: FILE: mm/memcontrol.c:387:
+			SetPcgActive(pc);

CHECK:CAMELCASE: Avoid CamelCase: <ClearPcgUnevictable>
#215: FILE: mm/memcontrol.c:390:
+		ClearPcgUnevictable(pc);

CHECK:CAMELCASE: Avoid CamelCase: <__SetPcgCache>
#230: FILE: mm/memcontrol.c:624:
+		__SetPcgCache(pc);

CHECK:CAMELCASE: Avoid CamelCase: <__SetPcgFile>
#233: FILE: mm/memcontrol.c:626:
+			__SetPcgFile(pc);

CHECK:CAMELCASE: Avoid CamelCase: <__SetPcgActive>
#236: FILE: mm/memcontrol.c:628:
+			__SetPcgActive(pc);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#249: FILE: mm/memcontrol.c:738:
 	if ((ctype == MEM_CGROUP_CHARGE_TYPE_MAPPED)
+	    && ((PcgCache(pc) || page_mapped(page))))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237693.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 28 checks, 195 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237693.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
