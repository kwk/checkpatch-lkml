CHECK:SPACING: No space is necessary after a cast
#57: FILE: arch/um/kernel/ptrace.c:146:
+		ret = get_fpregs((struct user_i387_struct __user *) data,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: arch/um/kernel/ptrace.c:152:
+^I        ret = set_fpregs((struct user_i387_struct __user *) data,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#74: FILE: arch/um/kernel/ptrace.c:152:
+	        ret = set_fpregs((struct user_i387_struct __user *) data,

CHECK:SPACING: No space is necessary after a cast
#102: FILE: arch/um/sys-x86_64/ptrace.c:161:
+	int err, n, cpu = ((struct thread_info *) child->stack)->cpu;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#109: FILE: arch/um/sys-x86_64/ptrace.c:164:
+	BUG_ON(sizeof(*buf) != sizeof(fpregs));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#114: FILE: arch/um/sys-x86_64/ptrace.c:169:
+	n = copy_to_user((void *) buf, fpregs, sizeof(fpregs));

ERROR:SPACING: space required before the open parenthesis '('
#115: FILE: arch/um/sys-x86_64/ptrace.c:170:
+	if(n > 0)

CHECK:SPACING: No space is necessary after a cast
#126: FILE: arch/um/sys-x86_64/ptrace.c:178:
+	int n, cpu = ((struct thread_info *) child->stack)->cpu;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#129: FILE: arch/um/sys-x86_64/ptrace.c:181:
+	BUG_ON(sizeof(*buf) != sizeof(fpregs));

CHECK:SPACING: No space is necessary after a cast
#130: FILE: arch/um/sys-x86_64/ptrace.c:182:
+	n = copy_from_user(fpregs, (void *) buf, sizeof(fpregs));

CHECK:SPACING: No space is necessary after a cast
#147: FILE: arch/um/sys-x86_64/ptrace.c:196:
+		ret = get_fpregs((struct user_i387_struct __user *) data,

CHECK:SPACING: No space is necessary after a cast
#151: FILE: arch/um/sys-x86_64/ptrace.c:200:
+		ret = set_fpregs((struct user_i387_struct __user *) data,

WARNING:INCLUDE_LINUX: Use #include <linux/user.h> instead of <asm/user.h>
#168: FILE: include/asm-um/ptrace-generic.h:12:
+#include <asm/user.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/asm-um/ptrace-generic.h:39:
+extern long subarch_ptrace(struct task_struct *child, long request, long addr,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: include/asm-um/ptrace-generic.h:43:
+extern int get_fpregs(struct user_i387_struct __user *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#186: FILE: include/asm-um/ptrace-generic.h:45:
+extern int set_fpregs(struct user_i387_struct __user *buf,

WARNING:INCLUDE_LINUX: Use #include <linux/user.h> instead of <asm/user.h>
#199: FILE: include/asm-um/ptrace-i386.h:13:
+#include <asm/user.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#207: FILE: include/asm-um/ptrace-i386.h:49:
+extern int get_fpxregs(struct user_fxsr_struct __user *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: include/asm-um/ptrace-i386.h:51:
+extern int set_fpxregs(struct user_fxsr_struct __user *buf,

CHECK:SPACING: No space is necessary after a cast
#237: FILE: arch/um/sys-i386/ptrace.c:150:
+	int err, n, cpu = ((struct thread_info *) child->stack)->cpu;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#244: FILE: arch/um/sys-i386/ptrace.c:153:
+	BUG_ON(sizeof(*buf) != sizeof(fpregs));

CHECK:SPACING: No space is necessary after a cast
#249: FILE: arch/um/sys-i386/ptrace.c:158:
+	n = copy_to_user((void *) buf, fpregs, sizeof(fpregs));

ERROR:SPACING: space required before the open parenthesis '('
#250: FILE: arch/um/sys-i386/ptrace.c:159:
+	if(n > 0)

CHECK:SPACING: No space is necessary after a cast
#260: FILE: arch/um/sys-i386/ptrace.c:167:
+	int n, cpu = ((struct thread_info *) child->stack)->cpu;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#266: FILE: arch/um/sys-i386/ptrace.c:170:
+	BUG_ON(sizeof(*buf) != sizeof(fpregs));

CHECK:SPACING: No space is necessary after a cast
#267: FILE: arch/um/sys-i386/ptrace.c:171:
+	n = copy_from_user(fpregs, (void *) buf, sizeof(fpregs));

CHECK:SPACING: No space is necessary after a cast
#279: FILE: arch/um/sys-i386/ptrace.c:180:
+	int err, n, cpu = ((struct thread_info *) child->stack)->cpu;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#284: FILE: arch/um/sys-i386/ptrace.c:183:
+	BUG_ON(sizeof(*buf) != sizeof(fpregs));

CHECK:SPACING: No space is necessary after a cast
#289: FILE: arch/um/sys-i386/ptrace.c:188:
+	n = copy_to_user((void *) buf, fpregs, sizeof(fpregs));

ERROR:SPACING: space required before the open parenthesis '('
#290: FILE: arch/um/sys-i386/ptrace.c:189:
+	if(n > 0)

CHECK:SPACING: No space is necessary after a cast
#305: FILE: arch/um/sys-i386/ptrace.c:197:
+	int n, cpu = ((struct thread_info *) child->stack)->cpu;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#308: FILE: arch/um/sys-i386/ptrace.c:200:
+	BUG_ON(sizeof(*buf) != sizeof(fpregs));

CHECK:SPACING: No space is necessary after a cast
#309: FILE: arch/um/sys-i386/ptrace.c:201:
+	n = copy_from_user(fpregs, (void *) buf, sizeof(fpregs));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000387539.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 8 warnings, 21 checks, 256 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000387539.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
