WARNING:NAKED_SSCANF: unchecked sscanf return value
#70: FILE: arch/um/kernel/um_arch.c:216:
+	if (!sscanf(line, "%d", &ncpus)) {
+		printf("Couldn't parse [%s]\n", line);
+		return -1;
+	}

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#70: FILE: arch/um/kernel/um_arch.c:216:
+	if (!sscanf(line, "%d", &ncpus)) {
+		printf("Couldn't parse [%s]\n", line);
+		return -1;
+	}

ERROR:SPACING: space required before the open parenthesis '('
#226: FILE: arch/um/os-Linux/main.c:252:
+	if(ptr == NULL)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptr"
#226: FILE: arch/um/os-Linux/main.c:252:
+	if(ptr == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#240: FILE: arch/um/sys-i386/bugs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required before the open parenthesis '('
#249: FILE: arch/um/sys-i386/bugs.c:35:
+			if(n == 0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#257: FILE: arch/um/sys-i386/bugs.c:40:
+			else return -EIO;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#308: FILE: arch/um/sys-i386/bugs.c:99:
+	if(c < 0)

ERROR:SPACING: space required before the open parenthesis '('
#318: FILE: arch/um/sys-i386/bugs.c:108:
+		if(c < 0)

ERROR:SPACING: space required before the open parenthesis '('
#329: FILE: arch/um/sys-i386/bugs.c:118:
+	if(*have_it == 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#330: FILE: arch/um/sys-i386/bugs.c:119:
+		printk("No\n");

ERROR:SPACING: space required before the open parenthesis '('
#331: FILE: arch/um/sys-i386/bugs.c:120:
+	else if(*have_it == 1)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#332: FILE: arch/um/sys-i386/bugs.c:121:
+		printk("Yes\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig != SIGILL'
#341: FILE: arch/um/sys-i386/bugs.c:173:
+	if((sig != SIGILL) || (TASK_PID(get_current()) != 1))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#341: FILE: arch/um/sys-i386/bugs.c:173:
+	if((sig != SIGILL) || (TASK_PID(get_current()) != 1))

ERROR:SPACING: space required before the open parenthesis '('
#388: FILE: arch/um/sys-x86_64/bugs.c:44:
+			if(n == 0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#396: FILE: arch/um/sys-x86_64/bugs.c:49:
+			else return -EIO;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464671.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 5 warnings, 2 checks, 349 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000464671.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
