WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#50: FILE: drivers/char/tty_io.c:98:
+#include <asm/io.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tty' - possible side-effects?
#58: FILE: drivers/char/tty_io.c:445:
+#define __tty_insert_flip_string(tty, chars, flags, size, chrfun, flfun) ({ \
+	int copied = 0;							\
+	do {								\
+		int space = tty_buffer_request_room(tty, size - copied);\
+		struct tty_buffer *tb = tty->buf.tail;			\
+		/* If there is no space then tb may be NULL */		\
+		if (unlikely(space == 0))				\
+			break;						\
+		chrfun(tb->char_buf_ptr + tb->used, chars, space);	\
+		flfun(tb->flag_buf_ptr + tb->used, flags, space);	\
+		tb->used += space;					\
+		copied += space;					\
+		chars += space;						\
+		/* There is a small chance that we need to split the data over \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chars' - possible side-effects?
#58: FILE: drivers/char/tty_io.c:445:
+#define __tty_insert_flip_string(tty, chars, flags, size, chrfun, flfun) ({ \
+	int copied = 0;							\
+	do {								\
+		int space = tty_buffer_request_room(tty, size - copied);\
+		struct tty_buffer *tb = tty->buf.tail;			\
+		/* If there is no space then tb may be NULL */		\
+		if (unlikely(space == 0))				\
+			break;						\
+		chrfun(tb->char_buf_ptr + tb->used, chars, space);	\
+		flfun(tb->flag_buf_ptr + tb->used, flags, space);	\
+		tb->used += space;					\
+		copied += space;					\
+		chars += space;						\
+		/* There is a small chance that we need to split the data over \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#58: FILE: drivers/char/tty_io.c:445:
+#define __tty_insert_flip_string(tty, chars, flags, size, chrfun, flfun) ({ \
+	int copied = 0;							\
+	do {								\
+		int space = tty_buffer_request_room(tty, size - copied);\
+		struct tty_buffer *tb = tty->buf.tail;			\
+		/* If there is no space then tb may be NULL */		\
+		if (unlikely(space == 0))				\
+			break;						\
+		chrfun(tb->char_buf_ptr + tb->used, chars, space);	\
+		flfun(tb->flag_buf_ptr + tb->used, flags, space);	\
+		tb->used += space;					\
+		copied += space;					\
+		chars += space;						\
+		/* There is a small chance that we need to split the data over \

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#58: FILE: drivers/char/tty_io.c:445:
+#define __tty_insert_flip_string(tty, chars, flags, size, chrfun, flfun) ({ \
+	int copied = 0;							\
+	do {								\
+		int space = tty_buffer_request_room(tty, size - copied);\
+		struct tty_buffer *tb = tty->buf.tail;			\
+		/* If there is no space then tb may be NULL */		\
+		if (unlikely(space == 0))				\
+			break;						\
+		chrfun(tb->char_buf_ptr + tb->used, chars, space);	\
+		flfun(tb->flag_buf_ptr + tb->used, flags, space);	\
+		tb->used += space;					\
+		copied += space;					\
+		chars += space;						\
+		/* There is a small chance that we need to split the data over \

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#72: FILE: drivers/char/tty_io.c:459:
+		/* There is a small chance that we need to split the data over \
+		   several buffers. If this is the case we must loop */	\

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#72: FILE: drivers/char/tty_io.c:459:
+		   several buffers. If this is the case we must loop */	\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: drivers/char/tty_io.c:498:
+int tty_insert_flip_stringio(struct tty_struct *tty,
+		const unsigned char __iomem *chars, size_t size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: drivers/char/tty_io.c:542:
+int tty_insert_flip_string_flagsio(struct tty_struct *tty,
+		const unsigned char __iomem *chars, const char *flags,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000443804.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 5 checks, 133 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000443804.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
