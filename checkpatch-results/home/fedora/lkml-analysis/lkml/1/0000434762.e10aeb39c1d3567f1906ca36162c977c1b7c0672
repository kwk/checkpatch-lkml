WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
>  fs/logfs/readwrite.c  | 1125 ++++++++++++++++++++++++++++++++++++++++++++++++++

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: fs/logfs/readwrite.c:1:
+/**

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#61: FILE: fs/logfs/readwrite.c:2:
+ * fs/logfs/readwrite.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#72: FILE: fs/logfs/readwrite.c:13:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#82: FILE: fs/logfs/readwrite.c:23:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#91: FILE: fs/logfs/readwrite.c:32:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: fs/logfs/readwrite.c:34:
+static int logfs_read_direct(struct inode *inode, pgoff_t index, void *buf,
+		int read_zero)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#106: FILE: fs/logfs/readwrite.c:47:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#113: FILE: fs/logfs/readwrite.c:54:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#119: FILE: fs/logfs/readwrite.c:60:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#129: FILE: fs/logfs/readwrite.c:70:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#135: FILE: fs/logfs/readwrite.c:76:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#143: FILE: fs/logfs/readwrite.c:84:
+	BUG_ON((unsigned long)ret != ret);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#147: FILE: fs/logfs/readwrite.c:88:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: fs/logfs/readwrite.c:90:
+static int logfs_read_loop(struct inode *inode, pgoff_t index, void *buf,
+		int read_zero, int count)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#163: FILE: fs/logfs/readwrite.c:104:
+	for (i=count; i>=0; i--) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#163: FILE: fs/logfs/readwrite.c:104:
+	for (i=count; i>=0; i--) {
 	               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#181: FILE: fs/logfs/readwrite.c:122:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: fs/logfs/readwrite.c:124:
+static int logfs_read_block(struct inode *inode, pgoff_t index, void *buf,
+		int read_zero)

CHECK:BRACES: braces {} should be used on all arms of this statement
#187: FILE: fs/logfs/readwrite.c:128:
+	if (li->li_flags & LOGFS_IF_EMBEDDED) {
[...]
+	} else if (index < I0_BLOCKS)
[...]
+	else if (index < I1_BLOCKS)
[...]
+	else if (index < I2_BLOCKS)
[...]
+	else if (index < I3_BLOCKS)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#201: FILE: fs/logfs/readwrite.c:142:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#205: FILE: fs/logfs/readwrite.c:146:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#216: FILE: fs/logfs/readwrite.c:157:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#226: FILE: fs/logfs/readwrite.c:167:
+	BUG_ON(!bofs);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#230: FILE: fs/logfs/readwrite.c:171:
+	for (i=count; i>=0; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#230: FILE: fs/logfs/readwrite.c:171:
+	for (i=count; i>=0; i--) {
 	               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#248: FILE: fs/logfs/readwrite.c:189:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#281: FILE: fs/logfs/readwrite.c:222:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#294: FILE: fs/logfs/readwrite.c:235:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#300: FILE: fs/logfs/readwrite.c:241:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: fs/logfs/readwrite.c:243:
+static int logfs_is_valid_loop(struct inode *inode, pgoff_t index,
+		int count, u64 ofs)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#319: FILE: fs/logfs/readwrite.c:260:
+	for (i=count; i>=0; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#319: FILE: fs/logfs/readwrite.c:260:
+	for (i=count; i>=0; i--) {
 	               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#341: FILE: fs/logfs/readwrite.c:282:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_nlink == 0'
#347: FILE: fs/logfs/readwrite.c:288:
+	if ((inode->i_nlink == 0) && atomic_read(&inode->i_count) == 1)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#362: FILE: fs/logfs/readwrite.c:303:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#366: FILE: fs/logfs/readwrite.c:307:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#373: FILE: fs/logfs/readwrite.c:314:
+	 * blocks are by definition invalid. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#378: FILE: fs/logfs/readwrite.c:319:
+		printk("%llx, %llx, %llx\n", ofs, ino, pos);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#385: FILE: fs/logfs/readwrite.c:326:
+#if 0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#400: FILE: fs/logfs/readwrite.c:341:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#423: FILE: fs/logfs/readwrite.c:364:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: fs/logfs/readwrite.c:369:
+static ssize_t __logfs_inode_read(struct inode *inode, char *buf, size_t count,
+		loff_t *ppos, int read_zero)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#441: FILE: fs/logfs/readwrite.c:382:
+	BUG_ON(logfs_index(*ppos) != logfs_index(*ppos + count - 1));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: fs/logfs/readwrite.c:389:
+	err = logfs_read_block(inode, logfs_index(*ppos), block_data,
+			read_zero);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#461: FILE: fs/logfs/readwrite.c:402:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: fs/logfs/readwrite.c:404:
+static s64 logfs_segment_write_pos(struct inode *inode, void *buf, u64 pos,
+		int level, int alloc)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#468: FILE: fs/logfs/readwrite.c:409:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#482: FILE: fs/logfs/readwrite.c:423:
+	 * lock before then! */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#487: FILE: fs/logfs/readwrite.c:428:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:WxV)
#490: FILE: fs/logfs/readwrite.c:431:
+	return logfs_alloc_bytes(inode, blocks <<inode->i_sb->s_blocksize_bits);
 	                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#493: FILE: fs/logfs/readwrite.c:434:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#503: FILE: fs/logfs/readwrite.c:444:
+
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#515: FILE: fs/logfs/readwrite.c:456:
+	if (! (li->li_flags & LOGFS_IF_EMBEDDED))
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#533: FILE: fs/logfs/readwrite.c:474:
+	for (i=1; i<LOGFS_EMBEDDED_FIELDS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#533: FILE: fs/logfs/readwrite.c:474:
+	for (i=1; i<LOGFS_EMBEDDED_FIELDS; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#539: FILE: fs/logfs/readwrite.c:480:
+
+

WARNING:MINMAX: max() should probably be max_t(long long, LOGFS_EMBEDDED_SIZE, i_size_read(inode))
#545: FILE: fs/logfs/readwrite.c:486:
+	memcpy(dst, buf, max((long long)LOGFS_EMBEDDED_SIZE, i_size_read(inode)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#553: FILE: fs/logfs/readwrite.c:494:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#576: FILE: fs/logfs/readwrite.c:517:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: fs/logfs/readwrite.c:519:
+static int logfs_write_loop(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks, int count)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#587: FILE: fs/logfs/readwrite.c:528:
+	for (i=count; i>=0; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#587: FILE: fs/logfs/readwrite.c:528:
+	for (i=count; i>=0; i--) {
 	               ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#599: FILE: fs/logfs/readwrite.c:540:
+	if (! wblocks[0][get_bits(index, 0, bits)])
 	    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#607: FILE: fs/logfs/readwrite.c:548:
+	allocs = allocs ? allocs-1 : 0;
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#611: FILE: fs/logfs/readwrite.c:552:
+	for (i=0; i<=count; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#611: FILE: fs/logfs/readwrite.c:552:
+	for (i=0; i<=count; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#613: FILE: fs/logfs/readwrite.c:554:
+		block = logfs_segment_write(inode, wblocks[i], index, i+1,
 		                                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: fs/logfs/readwrite.c:555:
+		block = logfs_segment_write(inode, wblocks[i], index, i+1,
+				allocs);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#615: FILE: fs/logfs/readwrite.c:556:
+		allocs = allocs ? allocs-1 : 0;
 		                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#625: FILE: fs/logfs/readwrite.c:566:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: fs/logfs/readwrite.c:568:
+static int __logfs_write_buf(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#632: FILE: fs/logfs/readwrite.c:573:
+	inode->i_ctime.tv_sec = inode->i_mtime.tv_sec = get_seconds();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#650: FILE: fs/logfs/readwrite.c:591:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#654: FILE: fs/logfs/readwrite.c:595:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#667: FILE: fs/logfs/readwrite.c:608:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#678: FILE: fs/logfs/readwrite.c:619:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#691: FILE: fs/logfs/readwrite.c:632:
+	cmap = (void*)lmap;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#701: FILE: fs/logfs/readwrite.c:642:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: fs/logfs/readwrite.c:644:
+static int logfs_delete_loop(struct inode *inode, pgoff_t index, be64 **wblocks,
+		int count)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#716: FILE: fs/logfs/readwrite.c:657:
+	for (i=count; i>=0; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#716: FILE: fs/logfs/readwrite.c:657:
+	for (i=count; i>=0; i--) {
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#722: FILE: fs/logfs/readwrite.c:663:
+		ofs_array[i+1] = bofs;
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#729: FILE: fs/logfs/readwrite.c:670:
+	for (i=0; i<=count; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#729: FILE: fs/logfs/readwrite.c:670:
+	for (i=0; i<=count; i++) {
 	           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'block == 0'
#731: FILE: fs/logfs/readwrite.c:672:
+		if ((block == 0) && mem_zero(wblocks[i], sb->s_blocksize)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#732: FILE: fs/logfs/readwrite.c:673:
+			logfs_segment_delete(inode, ofs_array[i+1], index, i+1);
 			                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#732: FILE: fs/logfs/readwrite.c:673:
+			logfs_segment_delete(inode, ofs_array[i+1], index, i+1);
 			                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#735: FILE: fs/logfs/readwrite.c:676:
+		block = logfs_segment_write(inode, wblocks[i], index, i+1, 0);
 		                                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#745: FILE: fs/logfs/readwrite.c:686:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#750: FILE: fs/logfs/readwrite.c:691:
+	inode->i_ctime.tv_sec = inode->i_mtime.tv_sec = get_seconds();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#769: FILE: fs/logfs/readwrite.c:710:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#782: FILE: fs/logfs/readwrite.c:723:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#784: FILE: fs/logfs/readwrite.c:725:
+static int logfs_rewrite_direct(struct inode *inode, int index, pgoff_t pos,
+		void *buf, int level)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#791: FILE: fs/logfs/readwrite.c:732:
+	BUG_ON(block == 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#806: FILE: fs/logfs/readwrite.c:747:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#808: FILE: fs/logfs/readwrite.c:749:
+static int logfs_rewrite_loop(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks, int count, int level)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#820: FILE: fs/logfs/readwrite.c:761:
+	for (i=count; i>=level; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#820: FILE: fs/logfs/readwrite.c:761:
+	for (i=count; i>=level; i--) {
 	               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#826: FILE: fs/logfs/readwrite.c:767:
+			BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#833: FILE: fs/logfs/readwrite.c:774:
+		printk("(%lx, %lx, %x, %x, %lx)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#834: FILE: fs/logfs/readwrite.c:775:
+		printk("(%lx, %lx, %x, %x, %lx)\n",
+				inode->i_ino, index, count, level,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#847: FILE: fs/logfs/readwrite.c:788:
+	for (i=level; i<=count; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#847: FILE: fs/logfs/readwrite.c:788:
+	for (i=level; i<=count; i++) {
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#849: FILE: fs/logfs/readwrite.c:790:
+		block = logfs_segment_write(inode, wblocks[i], index, i+1, 0);
 		                                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#859: FILE: fs/logfs/readwrite.c:800:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#861: FILE: fs/logfs/readwrite.c:802:
+static int __logfs_rewrite_block(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks, int level)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#865: FILE: fs/logfs/readwrite.c:806:
+	BUG_ON(level >= LOGFS_MAX_LEVELS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#876: FILE: fs/logfs/readwrite.c:817:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#880: FILE: fs/logfs/readwrite.c:821:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#895: FILE: fs/logfs/readwrite.c:836:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: fs/logfs/readwrite.c:844:
+static s64 __logfs_truncate_i0(struct inode *inode, u64 size, u64 bofs,
+		u64 pos, be64 **wblocks)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#911: FILE: fs/logfs/readwrite.c:852:
+		logfs_segment_delete(inode, bofs,
+				pos >> inode->i_sb->s_blocksize_bits, 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#924: FILE: fs/logfs/readwrite.c:865:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#933: FILE: fs/logfs/readwrite.c:874:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#941: FILE: fs/logfs/readwrite.c:882:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: fs/logfs/readwrite.c:887:
+static s64 __logfs_truncate_loop(struct inode *inode, u64 size, u64 old_bofs,
+		u64 pos, be64 **wblocks, int i)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#956: FILE: fs/logfs/readwrite.c:897:
+	for (e = LOGFS_BLOCK_FACTOR-1; e>=0; e--) {
 	                           ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#956: FILE: fs/logfs/readwrite.c:897:
+	for (e = LOGFS_BLOCK_FACTOR-1; e>=0; e--) {
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#958: FILE: fs/logfs/readwrite.c:899:
+		u64 new_pos = pos + e*logfs_factor[i];
 		                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: fs/logfs/readwrite.c:912:
+			ofs = __logfs_truncate_loop(inode, size, bofs, new_pos,
+					wblocks, i-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#971: FILE: fs/logfs/readwrite.c:912:
+					wblocks, i-1);
 					          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#974: FILE: fs/logfs/readwrite.c:915:
+			ofs = __logfs_truncate_i0(inode, size, bofs, new_pos,
+					wblocks);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#983: FILE: fs/logfs/readwrite.c:924:
+		logfs_segment_delete(inode, old_bofs, logfs_index(pos), i+1);
 		                                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#991: FILE: fs/logfs/readwrite.c:932:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#998: FILE: fs/logfs/readwrite.c:939:
+	for (e = I1_INDEX-1; e>=0; e--) {
 	                 ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#998: FILE: fs/logfs/readwrite.c:939:
+	for (e = I1_INDEX-1; e>=0; e--) {
 	                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#999: FILE: fs/logfs/readwrite.c:940:
+		u64 new_pos = e*logfs_factor[0];
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1001: FILE: fs/logfs/readwrite.c:942:
+		if (size > e*logfs_factor[0])
 		            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1017: FILE: fs/logfs/readwrite.c:958:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1019: FILE: fs/logfs/readwrite.c:960:
+static int logfs_truncate_loop(struct inode *inode, u64 size, be64 **wblocks,
+		int i)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1036: FILE: fs/logfs/readwrite.c:977:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1040: FILE: fs/logfs/readwrite.c:981:
+	void *buf = (void*)li->li_data + size;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1048: FILE: fs/logfs/readwrite.c:989:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1062: FILE: fs/logfs/readwrite.c:1003:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1067: FILE: fs/logfs/readwrite.c:1008:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1072: FILE: fs/logfs/readwrite.c:1013:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1075: FILE: fs/logfs/readwrite.c:1016:
+	BUG_ON(ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1078: FILE: fs/logfs/readwrite.c:1019:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1090: FILE: fs/logfs/readwrite.c:1031:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1092: FILE: fs/logfs/readwrite.c:1033:
+static ssize_t __logfs_inode_write(struct inode *inode, const char *buf,
+		size_t count, loff_t *ppos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1099: FILE: fs/logfs/readwrite.c:1040:
+	BUG_ON(logfs_index(*ppos) != logfs_index(*ppos + count - 1));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1127: FILE: fs/logfs/readwrite.c:1068:
+
+

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1138: FILE: fs/logfs/readwrite.c:1079:
+	ret = ret==n ? 0 : -EIO;
 	         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1142: FILE: fs/logfs/readwrite.c:1083:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1144: FILE: fs/logfs/readwrite.c:1085:
+int logfs_inode_write(struct inode *inode, const void *buf, size_t n,
+		loff_t _pos)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1152: FILE: fs/logfs/readwrite.c:1093:
+	return ret==n ? 0 : -EIO;
 	          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1155: FILE: fs/logfs/readwrite.c:1096:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1165: FILE: fs/logfs/readwrite.c:1106:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#1165: FILE: fs/logfs/readwrite.c:1106:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1176: FILE: fs/logfs/readwrite.c:1117:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1181: FILE: fs/logfs/readwrite.c:1122:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++)
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#1181: FILE: fs/logfs/readwrite.c:1122:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++)
 	           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1188: FILE: fs/logfs/super.c:1:
+#include "logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1190: FILE: fs/logfs/super.c:3:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#1191: FILE: fs/logfs/super.c:4:
+#define FAIL_ON(cond) do { if (unlikely((cond))) return -EINVAL; } while(0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1191: FILE: fs/logfs/super.c:4:
+#define FAIL_ON(cond) do { if (unlikely((cond))) return -EINVAL; } while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retlen != len'
#1200: FILE: fs/logfs/super.c:13:
+	if (ret || (retlen != len)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1201: FILE: fs/logfs/super.c:14:
+		printk("ret: %x\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1202: FILE: fs/logfs/super.c:15:
+		printk("retlen: %x, len: %x\n", retlen, len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1203: FILE: fs/logfs/super.c:16:
+		printk("ofs: %llx, mtd->size: %x\n", ofs, mtd->size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1211: FILE: fs/logfs/super.c:24:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1218: FILE: fs/logfs/super.c:31:
+		poison = memchr(poison, value[0], end-poison);
 		                                     ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1221: FILE: fs/logfs/super.c:34:
+		if (! memcmp(poison, value, 8)) {
 		    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1222: FILE: fs/logfs/super.c:35:
+			printk("%p %p %p\n", buf, poison, end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1223: FILE: fs/logfs/super.c:36:
+			BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1229: FILE: fs/logfs/super.c:42:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1243: FILE: fs/logfs/super.c:56:
+	BUG_ON((ofs >= mtd->size) || (len > mtd->size - ofs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1244: FILE: fs/logfs/super.c:57:
+	BUG_ON(ofs != (ofs >> super->s_writeshift) << super->s_writeshift);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1247: FILE: fs/logfs/super.c:60:
+	BUG_ON(len > PAGE_CACHE_SIZE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retlen != len'
#1252: FILE: fs/logfs/super.c:65:
+	if (ret || (retlen != len))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1258: FILE: fs/logfs/super.c:71:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1264: FILE: fs/logfs/super.c:77:
+}
+int mtderase(struct super_block *sb, loff_t ofs, size_t len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1271: FILE: fs/logfs/super.c:84:
+	BUG_ON(len % mtd->erasesize);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1273: FILE: fs/logfs/super.c:86:
+	truncate_inode_pages_range(&inode->i_data, ofs, ofs+len-1);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1273: FILE: fs/logfs/super.c:86:
+	truncate_inode_pages_range(&inode->i_data, ofs, ofs+len-1);
 	                                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1292: FILE: fs/logfs/super.c:105:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1302: FILE: fs/logfs/super.c:115:
+
+

CHECK:SPACING: No space is necessary after a cast
#1314: FILE: fs/logfs/super.c:127:
+	void *stack = (void *) ((ulong)current & ~0x1fffUL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1317: FILE: fs/logfs/super.c:130:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1317: FILE: fs/logfs/super.c:130:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1319: FILE: fs/logfs/super.c:132:
+		u64 ofs = sb->s_blocksize + i*super->s_writesize;
 		                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1320: FILE: fs/logfs/super.c:133:
+		u64 ofs = sb->s_blocksize + i*super->s_writesize;
+		mtdwrite(sb, ofs, super->s_writesize, wbuf);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1331: FILE: fs/logfs/super.c:144:
+	for (i=0; i<LOGFS_MAX_LEVELS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1331: FILE: fs/logfs/super.c:144:
+	for (i=0; i<LOGFS_MAX_LEVELS; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1335: FILE: fs/logfs/super.c:148:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1350: FILE: fs/logfs/super.c:163:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1352: FILE: fs/logfs/super.c:165:
+void *logfs_device_getpage(struct super_block *sb, u64 offset,
+		struct page **page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1357: FILE: fs/logfs/super.c:170:
+	*page = read_cache_page(inode->i_mapping, offset >> PAGE_CACHE_SHIFT,
+			logfs_readdevice, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1358: FILE: fs/logfs/super.c:171:
+	BUG_ON(IS_ERR(*page));	/* TODO: use mempool here */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1362: FILE: fs/logfs/super.c:175:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1369: FILE: fs/logfs/super.c:182:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1399: FILE: fs/logfs/super.c:212:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1405: FILE: fs/logfs/super.c:218:
+	for (i=0; i<len; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1405: FILE: fs/logfs/super.c:218:
+	for (i=0; i<len; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1411: FILE: fs/logfs/super.c:224:
+
+

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1421: FILE: fs/logfs/super.c:234:
+	stats->f_bavail	= super->s_free_bytes >> sb->s_blocksize_bits; /* FIXME: leave some for root */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1424: FILE: fs/logfs/super.c:237:
+	stats->f_namelen= LOGFS_MAX_NAMELEN;
 	                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1428: FILE: fs/logfs/super.c:241:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1439: FILE: fs/logfs/super.c:252:
+
+

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1454: FILE: fs/logfs/super.c:267:
+#if 1

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1460: FILE: fs/logfs/super.c:273:
+		printk(KERN_ERR "LOGFS: fsck failed, refusing to mount\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1467: FILE: fs/logfs/super.c:280:
+	iput(LOGFS_SUPER(sb)->s_master_inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1471: FILE: fs/logfs/super.c:284:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1510: FILE: fs/logfs/super.c:323:
+	super->s_gc_reserve = super->s_total_levels * (2*super->s_no_blocks -1);
 	                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1510: FILE: fs/logfs/super.c:323:
+	super->s_gc_reserve = super->s_total_levels * (2*super->s_no_blocks -1);
 	                                                                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1535: FILE: fs/logfs/super.c:348:
+	 * for rw-mounts, if necessary */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1554: FILE: fs/logfs/super.c:367:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1569: FILE: fs/logfs/super.c:382:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1571: FILE: fs/logfs/super.c:384:
+static int logfs_get_sb_mtd(struct file_system_type *type, int flags,
+		struct mtd_info *mtd, struct vfsmount *mnt)

ERROR:SPACING: space required before that '*' (ctx:VxV)
#1577: FILE: fs/logfs/super.c:390:
+	super = kzalloc(sizeof*super, GFP_KERNEL);
 	                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1611: FILE: fs/logfs/super.c:424:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1613: FILE: fs/logfs/super.c:426:
+static int logfs_get_sb(struct file_system_type *type, int flags,
+		const char *devname, void *data, struct vfsmount *mnt)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1618: FILE: fs/logfs/super.c:431:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#1626: FILE: fs/logfs/super.c:439:
+		char *garbage;
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1626: FILE: fs/logfs/super.c:439:
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);
 		                              ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1626: FILE: fs/logfs/super.c:439:
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1641: FILE: fs/logfs/super.c:454:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1649: FILE: fs/logfs/super.c:462:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1667: FILE: fs/logfs/super.c:480:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1675: FILE: fs/logfs/super.c:488:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1681: FILE: fs/logfs/progs/mkfs.c:1:
+#include "../logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1707: FILE: fs/logfs/progs/mkfs.c:27:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1708: FILE: fs/logfs/progs/mkfs.c:28:
+#if 0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1727: FILE: fs/logfs/progs/mkfs.c:47:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1751: FILE: fs/logfs/progs/mkfs.c:71:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1754: FILE: fs/logfs/progs/mkfs.c:74:
+static size_t __write_header(struct logfs_journal_header *h, size_t len,
+		size_t datalen, u16 type, u8 compr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1767: FILE: fs/logfs/progs/mkfs.c:87:
+}
+static size_t write_header(struct logfs_journal_header *h, size_t datalen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1768: FILE: fs/logfs/progs/mkfs.c:88:
+static size_t write_header(struct logfs_journal_header *h, size_t datalen,
+		u16 type)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1771: FILE: fs/logfs/progs/mkfs.c:91:
+	size_t len = datalen + sizeof(*h);
+	return __write_header(h, len, datalen, type, COMPR_NONE);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1773: FILE: fs/logfs/progs/mkfs.c:93:
+}
+static size_t je_badsegments(void *data, u16 *type)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1779: FILE: fs/logfs/progs/mkfs.c:99:
+}
+static size_t je_anchor(void *_da, u16 *type)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1785: FILE: fs/logfs/progs/mkfs.c:105:
+	da->da_size	= cpu_to_be64((LOGFS_INO_ROOT+1) * blocksize);
 	           	                             ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1786: FILE: fs/logfs/progs/mkfs.c:106:
+#if 0

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1788: FILE: fs/logfs/progs/mkfs.c:108:
+	da->da_data[LOGFS_INO_ROOT] = cpu_to_be64(3*segsize);
 	                                           ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1795: FILE: fs/logfs/progs/mkfs.c:115:
+}
+static size_t je_dynsb(void *_dynsb, u16 *type)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1804: FILE: fs/logfs/progs/mkfs.c:124:
+}
+static size_t je_commit(void *h, u16 *type)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1809: FILE: fs/logfs/progs/mkfs.c:129:
+}
+static size_t write_je(size_t jpos, void *scratch, void *header,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1810: FILE: fs/logfs/progs/mkfs.c:130:
+static size_t write_je(size_t jpos, void *scratch, void *header,
+		size_t (*write)(void *scratch, u16 *type))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'compr_len < 0'
#1826: FILE: fs/logfs/progs/mkfs.c:146:
+	if ((compr_len < 0) || (type == JE_ANCHOR)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == JE_ANCHOR'
#1826: FILE: fs/logfs/progs/mkfs.c:146:
+	if ((compr_len < 0) || (type == JE_ANCHOR)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1830: FILE: fs/logfs/progs/mkfs.c:150:
+	BUG_ON(compr_len < 0);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1838: FILE: fs/logfs/progs/mkfs.c:158:
+}
+static int make_journal(struct super_block *sb)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1844: FILE: fs/logfs/progs/mkfs.c:164:
+	journal = kzalloc(2*blocksize, GFP_KERNEL);
 	                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1862: FILE: fs/logfs/progs/mkfs.c:182:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1876: FILE: fs/logfs/progs/mkfs.c:196:
+#if 0	/* sane defaults */

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1887: FILE: fs/logfs/progs/mkfs.c:207:
+	ds->ds_feature_ro_compat= 0;
 	                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1912: FILE: fs/logfs/progs/mkfs.c:232:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1915: FILE: fs/logfs/progs/mkfs.c:235:
+static void getsize(struct super_block *sb, u64 *size,
+		u64 *no_segs)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1921: FILE: fs/logfs/progs/mkfs.c:241:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1926: FILE: fs/logfs/progs/mkfs.c:246:
+	int k, seg=0;
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1930: FILE: fs/logfs/progs/mkfs.c:250:
+	for (ofs=0; ofs<fssize; ofs+=segsize) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1930: FILE: fs/logfs/progs/mkfs.c:250:
+	for (ofs=0; ofs<fssize; ofs+=segsize) {
 	               ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#1930: FILE: fs/logfs/progs/mkfs.c:250:
+	for (ofs=0; ofs<fssize; ofs+=segsize) {
 	                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1933: FILE: fs/logfs/progs/mkfs.c:253:
+		for (k=0; k<segsize; k+=mtd->erasesize) /* iterate subblocks */
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1933: FILE: fs/logfs/progs/mkfs.c:253:
+		for (k=0; k<segsize; k+=mtd->erasesize) /* iterate subblocks */
 		           ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#1933: FILE: fs/logfs/progs/mkfs.c:253:
+		for (k=0; k<segsize; k+=mtd->erasesize) /* iterate subblocks */
 		                      ^

CHECK:SPACING: spaces required around that '?:' (ctx:VxV)
#1934: FILE: fs/logfs/progs/mkfs.c:254:
+			bad = bad?:mtd->block_isbad(mtd, ofs+k);
 			         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1934: FILE: fs/logfs/progs/mkfs.c:254:
+			bad = bad?:mtd->block_isbad(mtd, ofs+k);
 			                                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1948: FILE: fs/logfs/progs/mkfs.c:268:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1976: FILE: fs/logfs/progs/mkfs.c:296:
+		int i;
+		for (i=0; i<OFS_COUNT; i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1976: FILE: fs/logfs/progs/mkfs.c:296:
+		for (i=0; i<OFS_COUNT; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1976: FILE: fs/logfs/progs/mkfs.c:296:
+		for (i=0; i<OFS_COUNT; i++)
 		           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1977: FILE: fs/logfs/progs/mkfs.c:297:
+			printk("%x->%llx\n", i, segment_offset[i]);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1980: FILE: fs/logfs/progs/mkfs.c:300:
+#if 0

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2003: FILE: fs/logfs/progs/fsck.c:1:
+#include "../logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2011: FILE: fs/logfs/progs/fsck.c:9:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2016: FILE: fs/logfs/progs/fsck.c:14:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2018: FILE: fs/logfs/progs/fsck.c:16:
+static void safe_read(struct super_block *sb, u32 segno, u32 ofs,
+		size_t len, void *buf)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2020: FILE: fs/logfs/progs/fsck.c:18:
+	BUG_ON(wbuf_read(sb, dev_ofs(sb, segno, ofs), len, buf));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2022: FILE: fs/logfs/progs/fsck.c:20:
+}
+static u32 logfs_free_bytes(struct super_block *sb, u32 segno)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2063: FILE: fs/logfs/progs/fsck.c:61:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2070: FILE: fs/logfs/progs/fsck.c:68:
+	for (i=0; i<super->s_no_segs; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2070: FILE: fs/logfs/progs/fsck.c:68:
+	for (i=0; i<super->s_no_segs; i++) {
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2073: FILE: fs/logfs/progs/fsck.c:71:
+		printk(" %3x", free);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2075: FILE: fs/logfs/progs/fsck.c:73:
+			printk(" : ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2077: FILE: fs/logfs/progs/fsck.c:75:
+			printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2079: FILE: fs/logfs/progs/fsck.c:77:
+	printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2082: FILE: fs/logfs/progs/fsck.c:80:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2087: FILE: fs/logfs/progs/fsck.c:85:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2089: FILE: fs/logfs/progs/fsck.c:87:
+static noinline int read_one_dd(struct inode *dir, loff_t pos, u64 *ino,
+		u8 *type)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2102: FILE: fs/logfs/progs/fsck.c:100:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2106: FILE: fs/logfs/progs/fsck.c:104:
+	s64 new_pos = logfs_seek_data(inode, pos);
+	return max((s64)pos, new_pos - 1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2109: FILE: fs/logfs/progs/fsck.c:107:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2118: FILE: fs/logfs/progs/fsck.c:116:
+	for (pos=0; ; pos++) {
 	        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2132: FILE: fs/logfs/progs/fsck.c:130:
+			printk("ino %llx > last_ino %llx\n", ino, last_ino);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2137: FILE: fs/logfs/progs/fsck.c:135:
+			printk("Could not find inode #%llx\n", ino);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2141: FILE: fs/logfs/progs/fsck.c:139:
+			printk("dd type %x != inode type %x\n", type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2142: FILE: fs/logfs/progs/fsck.c:140:
+			printk("dd type %x != inode type %x\n", type,
+					logfs_type(inode));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2162: FILE: fs/logfs/progs/fsck.c:160:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2180: FILE: fs/logfs/progs/fsck.c:178:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2185: FILE: fs/logfs/progs/fsck.c:183:
+
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2195: FILE: fs/logfs/progs/fsck.c:193:
+	if (bytes0 || bytes1 || links0 || links1
+			|| inode->i_ino == LOGFS_SUPER(inode->i_sb)->s_last_ino)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2196: FILE: fs/logfs/progs/fsck.c:194:
+		printk("%lx: %llx(%llx) bytes, %llx(%llx) links\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2197: FILE: fs/logfs/progs/fsck.c:195:
+		printk("%lx: %llx(%llx) bytes, %llx(%llx) links\n",
+				inode->i_ino, bytes0, bytes1, links0, links1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2202: FILE: fs/logfs/progs/fsck.c:200:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2217: FILE: fs/logfs/progs/fsck.c:215:
+
+

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#2225: FILE: fs/logfs/progs/fsck.c:223:
+		ret = 0;;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2228: FILE: fs/logfs/progs/fsck.c:226:
+	for (i=16; i<super->s_last_ino; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2228: FILE: fs/logfs/progs/fsck.c:226:
+	for (i=16; i<super->s_last_ino; i++) {
 	            ^

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#2231: FILE: fs/logfs/progs/fsck.c:229:
+			ret = 0;;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2236: FILE: fs/logfs/progs/fsck.c:234:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2241: FILE: fs/logfs/progs/fsck.c:239:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2258: FILE: fs/logfs/progs/fsck.c:256:
+	printk("free:%8llx, used:%8llx, total:%8llx",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2259: FILE: fs/logfs/progs/fsck.c:257:
+	printk("free:%8llx, used:%8llx, total:%8llx",
+			free_bytes, used_bytes, expected);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2261: FILE: fs/logfs/progs/fsck.c:259:
+		printk(" + %llx\n", total - expected);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2263: FILE: fs/logfs/progs/fsck.c:261:
+		printk(" - %llx\n", expected - total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2265: FILE: fs/logfs/progs/fsck.c:263:
+		printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2270: FILE: fs/logfs/progs/fsck.c:268:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2281: FILE: fs/logfs/progs/fsck.c:279:
+		printk("Pass 2: directory check failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2287: FILE: fs/logfs/progs/fsck.c:285:
+		printk("Pass 3: inode check failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2293: FILE: fs/logfs/progs/fsck.c:291:
+		printk("Pass 4: statistic check failed\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2300: FILE: fs/logfs/progs/fsck.c:298:
+
+

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#2309: FILE: fs/logfs/progs/fsck.c:307:
+	inode_bytes = kzalloc(last_ino * sizeof(be64), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#2312: FILE: fs/logfs/progs/fsck.c:310:
+	inode_links = kzalloc(last_ino * sizeof(be64), GFP_KERNEL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2377: FILE: fs/logfs/compr.c:1:
+#include "logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2386: FILE: fs/logfs/compr.c:10:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2395: FILE: fs/logfs/compr.c:19:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <zlib_deflateInit>
#2401: FILE: fs/logfs/compr.c:25:
+	ret = zlib_deflateInit(&stream, COMPR_LEVEL);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2408: FILE: fs/logfs/compr.c:32:
+	for (i=0; i<count-1; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2408: FILE: fs/logfs/compr.c:32:
+	for (i=0; i<count-1; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2408: FILE: fs/logfs/compr.c:32:
+	for (i=0; i<count-1; i++) {
 	                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2418: FILE: fs/logfs/compr.c:42:
+		/* if (stream.total_out >= outlen)
+			goto error; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2418: FILE: fs/logfs/compr.c:42:
+			goto error; */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2421: FILE: fs/logfs/compr.c:45:
+	stream.next_in = vec[count-1].iov_base;
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2422: FILE: fs/logfs/compr.c:46:
+	stream.avail_in = vec[count-1].iov_len;
 	                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2430: FILE: fs/logfs/compr.c:54:
+	/* if (stream.total_out >= outlen)
+		goto error; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2430: FILE: fs/logfs/compr.c:54:
+		goto error; */

CHECK:CAMELCASE: Avoid CamelCase: <zlib_deflateEnd>
#2432: FILE: fs/logfs/compr.c:56:
+	ret = zlib_deflateEnd(&stream);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2447: FILE: fs/logfs/compr.c:71:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2483: FILE: fs/logfs/compr.c:107:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <zlib_inflateInit>
#2489: FILE: fs/logfs/compr.c:113:
+	ret = zlib_inflateInit(&stream);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2496: FILE: fs/logfs/compr.c:120:
+	for (i=0; i<count-1; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2496: FILE: fs/logfs/compr.c:120:
+	for (i=0; i<count-1; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2496: FILE: fs/logfs/compr.c:120:
+	for (i=0; i<count-1; i++) {
 	                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2508: FILE: fs/logfs/compr.c:132:
+	stream.next_out = vec[count-1].iov_base;
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2509: FILE: fs/logfs/compr.c:133:
+	stream.avail_out = vec[count-1].iov_len;
 	                            ^

CHECK:CAMELCASE: Avoid CamelCase: <zlib_inflateEnd>
#2515: FILE: fs/logfs/compr.c:139:
+	ret = zlib_inflateEnd(&stream);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2526: FILE: fs/logfs/compr.c:150:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2558: FILE: fs/logfs/compr.c:182:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2563: FILE: fs/logfs/compr.c:187:
+	printk("deflate size: %x\n", zlib_deflate_workspacesize());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2564: FILE: fs/logfs/compr.c:188:
+	printk("inflate size: %x\n", zlib_inflate_workspacesize());

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2578: FILE: fs/logfs/segment.c:1:
+#include "logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2584: FILE: fs/logfs/segment.c:7:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2594: FILE: fs/logfs/segment.c:17:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2596: FILE: fs/logfs/segment.c:19:
+static s32 __logfs_get_free_bytes(struct logfs_area *area, u64 ino, u64 pos,
+		size_t bytes)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2602: FILE: fs/logfs/segment.c:25:
+	BUG_ON(ret>0);

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2602: FILE: fs/logfs/segment.c:25:
+	BUG_ON(ret>0);
 	          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2608: FILE: fs/logfs/segment.c:31:
+	BUG_ON(area->a_used_bytes >= LOGFS_SUPER(area->a_sb)->s_segsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2613: FILE: fs/logfs/segment.c:36:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2624: FILE: fs/logfs/segment.c:47:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2633: FILE: fs/logfs/segment.c:56:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2639: FILE: fs/logfs/segment.c:62:
+	BUG_ON(li->li_used_bytes + bytes < bytes); /* wraps are bad, mkay */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2646: FILE: fs/logfs/segment.c:69:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2652: FILE: fs/logfs/segment.c:75:
+	BUG_ON(li->li_used_bytes < bytes);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2659: FILE: fs/logfs/segment.c:82:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2704: FILE: fs/logfs/segment.c:127:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2707: FILE: fs/logfs/segment.c:130:
+	BUG_ON(level >= LOGFS_MAX_LEVELS);

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#2709: FILE: fs/logfs/segment.c:132:
+	if (ino == LOGFS_INO_MASTER)	/* ifile has seperate areas */
 	                            	             ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2714: FILE: fs/logfs/segment.c:137:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2720: FILE: fs/logfs/segment.c:143:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2723: FILE: fs/logfs/segment.c:146:
+s64 __logfs_segment_write(struct inode *inode, void *buf, u64 pos, int level,
+		int alloc, int len, int compr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2748: FILE: fs/logfs/segment.c:171:
+	BUG_ON(err);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#2752: FILE: fs/logfs/segment.c:175:
+		int acc_len = (level==0) ? len : sb->s_blocksize;
 		                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2753: FILE: fs/logfs/segment.c:176:
+		int acc_len = (level==0) ? len : sb->s_blocksize;
+		logfs_consume_bytes(inode, acc_len + HEADER_SIZE);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2763: FILE: fs/logfs/segment.c:186:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2765: FILE: fs/logfs/segment.c:188:
+s64 logfs_segment_write(struct inode *inode, void *buf, u64 pos, int level,
+		int alloc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2780: FILE: fs/logfs/segment.c:203:
+		ofs = __logfs_segment_write(inode, compressor_buf, pos, level,
+				alloc, compr_len, COMPR_ZLIB);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2783: FILE: fs/logfs/segment.c:206:
+		ofs = __logfs_segment_write(inode, buf, pos, level, alloc, bs,
+				COMPR_NONE);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2789: FILE: fs/logfs/segment.c:212:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2792: FILE: fs/logfs/segment.c:215:
+static void fixup_from_wbuf(struct super_block *sb, struct logfs_area *area,
+		void *read, u64 ofs, size_t readlen)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2822: FILE: fs/logfs/segment.c:245:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2834: FILE: fs/logfs/segment.c:257:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2834: FILE: fs/logfs/segment.c:257:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2844: FILE: fs/logfs/segment.c:267:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2852: FILE: fs/logfs/segment.c:275:
+	err = wbuf_read(sb, ofs, bs+24, compressor_buf);
 	                           ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2855: FILE: fs/logfs/segment.c:278:
+	h = (void*)compressor_buf;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2860: FILE: fs/logfs/segment.c:283:
+		logfs_memcpy(compressor_buf+24, buf, bs, bs);
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2863: FILE: fs/logfs/segment.c:286:
+		err = logfs_uncompress(compressor_buf+24, buf, len, bs);
 		                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2864: FILE: fs/logfs/segment.c:287:
+		BUG_ON(err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2874: FILE: fs/logfs/segment.c:297:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2877: FILE: fs/logfs/segment.c:300:
+	~(I1_BLOCKS-1),
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2878: FILE: fs/logfs/segment.c:301:
+	~(I2_BLOCKS-1),
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2879: FILE: fs/logfs/segment.c:302:
+	~(I3_BLOCKS-1)
 	           ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2881: FILE: fs/logfs/segment.c:304:
+};
+static int check_pos(struct super_block *sb, u64 pos1, u64 pos2, int level)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2883: FILE: fs/logfs/segment.c:306:
+	LOGFS_BUG_ON(	(pos1 & logfs_block_mask[level]) !=

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2886: FILE: fs/logfs/segment.c:309:
+}
+int logfs_segment_delete(struct inode *inode, u64 ofs, u64 pos, int level)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2893: FILE: fs/logfs/segment.c:316:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2895: FILE: fs/logfs/segment.c:318:
+	err = wbuf_read(sb, ofs, 4096+24, compressor_buf);
 	                             ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2897: FILE: fs/logfs/segment.c:320:
+	h = (void*)compressor_buf;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#2903: FILE: fs/logfs/segment.c:326:
+	len = (level==0) ? len : sb->s_blocksize;
 	            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2908: FILE: fs/logfs/segment.c:331:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2925: FILE: fs/logfs/segment.c:348:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2934: FILE: fs/logfs/segment.c:357:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2940: FILE: fs/logfs/segment.c:363:
+	BUG_ON(list_empty(&super->s_free_list));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2949: FILE: fs/logfs/segment.c:372:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2958: FILE: fs/logfs/segment.c:381:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2967: FILE: fs/logfs/segment.c:390:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2992: FILE: fs/logfs/segment.c:415:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3017: FILE: fs/logfs/segment.c:440:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3034: FILE: fs/logfs/segment.c:457:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3043: FILE: fs/logfs/segment.c:466:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3050: FILE: fs/logfs/segment.c:473:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3077: FILE: fs/logfs/segment.c:500:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*super->s_journal_area)...) over kzalloc(sizeof(struct logfs_area)...)
#3083: FILE: fs/logfs/segment.c:506:
+	super->s_journal_area = kzalloc(sizeof(struct logfs_area), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3088: FILE: fs/logfs/segment.c:511:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3088: FILE: fs/logfs/segment.c:511:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3096: FILE: fs/logfs/segment.c:519:
+	for (i--; i>=0; i--)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3102: FILE: fs/logfs/segment.c:525:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3107: FILE: fs/logfs/segment.c:530:
+	for (i=0; i<LOGFS_NO_AREAS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3107: FILE: fs/logfs/segment.c:530:
+	for (i=0; i<LOGFS_NO_AREAS; i++)
 	           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3114: FILE: fs/logfs/memtree.c:1:
+/* In-memory B+Tree. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3125: FILE: fs/logfs/memtree.c:12:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3133: FILE: fs/logfs/memtree.c:20:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3146: FILE: fs/logfs/memtree.c:33:
+		for (i=0; i<BTREE_NODES; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3146: FILE: fs/logfs/memtree.c:33:
+		for (i=0; i<BTREE_NODES; i++)
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3152: FILE: fs/logfs/memtree.c:39:
+	for (i=0; i<BTREE_NODES; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3152: FILE: fs/logfs/memtree.c:39:
+	for (i=0; i<BTREE_NODES; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3159: FILE: fs/logfs/memtree.c:46:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3164: FILE: fs/logfs/memtree.c:51:
+	for (i=0; i<BTREE_NODES; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3164: FILE: fs/logfs/memtree.c:51:
+	for (i=0; i<BTREE_NODES; i++)
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#3168: FILE: fs/logfs/memtree.c:55:
+	for (i=*pos; i<BTREE_NODES; i++)
 	      ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#3168: FILE: fs/logfs/memtree.c:55:
+	for (i=*pos; i<BTREE_NODES; i++)
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3168: FILE: fs/logfs/memtree.c:55:
+	for (i=*pos; i<BTREE_NODES; i++)
 	              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3174: FILE: fs/logfs/memtree.c:61:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3176: FILE: fs/logfs/memtree.c:63:
+static struct btree_node *find_level(struct btree_head *head, long val,
+		int level)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3182: FILE: fs/logfs/memtree.c:69:
+		for (i=0; i<BTREE_NODES; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3182: FILE: fs/logfs/memtree.c:69:
+		for (i=0; i<BTREE_NODES; i++)
 		           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3190: FILE: fs/logfs/memtree.c:77:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3199: FILE: fs/logfs/memtree.c:86:
+		node->val = head->node[BTREE_NODES-1].val;
 		                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3207: FILE: fs/logfs/memtree.c:94:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3209: FILE: fs/logfs/memtree.c:96:
+static int btree_insert_level(struct btree_head *head, long val, void *ptr,
+		int level)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3215: FILE: fs/logfs/memtree.c:102:
+		BUG_ON(level != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3229: FILE: fs/logfs/memtree.c:116:
+	BUG_ON(node[pos].val == val);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3237: FILE: fs/logfs/memtree.c:124:
+		err = btree_insert_level(head, node[BTREE_NODES/2 - 1].val, new,
 		                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3238: FILE: fs/logfs/memtree.c:125:
+		err = btree_insert_level(head, node[BTREE_NODES/2 - 1].val, new,
+				level+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3238: FILE: fs/logfs/memtree.c:125:
+				level+1);
 				     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3243: FILE: fs/logfs/memtree.c:130:
+		for (i=0; i<BTREE_NODES/2; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3243: FILE: fs/logfs/memtree.c:130:
+		for (i=0; i<BTREE_NODES/2; i++) {
 		           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3243: FILE: fs/logfs/memtree.c:130:
+		for (i=0; i<BTREE_NODES/2; i++) {
 		                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3246: FILE: fs/logfs/memtree.c:133:
+			node[i].val = node[i + BTREE_NODES/2].val;
 			                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3247: FILE: fs/logfs/memtree.c:134:
+			node[i].node = node[i + BTREE_NODES/2].node;
 			                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3248: FILE: fs/logfs/memtree.c:135:
+			node[i + BTREE_NODES/2].val = 0;
 			                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3249: FILE: fs/logfs/memtree.c:136:
+			node[i + BTREE_NODES/2].node = NULL;
 			                    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3253: FILE: fs/logfs/memtree.c:140:
+	BUG_ON(fill >= BTREE_NODES);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3256: FILE: fs/logfs/memtree.c:143:
+	for (i=fill; i>pos; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#3256: FILE: fs/logfs/memtree.c:143:
+	for (i=fill; i>pos; i--) {
 	              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3257: FILE: fs/logfs/memtree.c:144:
+		node[i].val = node[i-1].val;
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3258: FILE: fs/logfs/memtree.c:145:
+		node[i].node = node[i-1].node;
 		                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3266: FILE: fs/logfs/memtree.c:153:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3272: FILE: fs/logfs/memtree.c:159:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3286: FILE: fs/logfs/memtree.c:173:
+		BUG_ON(node[pos].val != val);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3289: FILE: fs/logfs/memtree.c:176:
+	for (i=pos; i<fill-1; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3289: FILE: fs/logfs/memtree.c:176:
+	for (i=pos; i<fill-1; i++) {
 	             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3289: FILE: fs/logfs/memtree.c:176:
+	for (i=pos; i<fill-1; i++) {
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3290: FILE: fs/logfs/memtree.c:177:
+		node[i].val = node[i+1].val;
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3291: FILE: fs/logfs/memtree.c:178:
+		node[i].node = node[i+1].node;
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3293: FILE: fs/logfs/memtree.c:180:
+	node[fill-1].val = 0;
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3294: FILE: fs/logfs/memtree.c:181:
+	node[fill-1].node = NULL;
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3296: FILE: fs/logfs/memtree.c:183:
+	if (fill-1 < BTREE_NODES/2) {
 	        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3296: FILE: fs/logfs/memtree.c:183:
+	if (fill-1 < BTREE_NODES/2) {
 	                        ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3296: FILE: fs/logfs/memtree.c:183:
+	if (fill-1 < BTREE_NODES/2) {
+		/* XXX */
+	}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3299: FILE: fs/logfs/memtree.c:186:
+	if (fill-1 == 0) {
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3300: FILE: fs/logfs/memtree.c:187:
+		btree_remove_level(head, val, level+1);
 		                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3308: FILE: fs/logfs/memtree.c:195:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434762.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 91 errors, 100 warnings, 274 checks, 3232 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434762.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
