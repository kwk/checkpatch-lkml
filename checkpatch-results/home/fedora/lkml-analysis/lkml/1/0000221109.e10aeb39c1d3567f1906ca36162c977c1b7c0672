WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#76: FILE: kernel/trace/ring_buffer.c:120:
+	local_t		 commit;	/* write commited index */
 	       		        	         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#84: FILE: kernel/trace/ring_buffer.c:160:
+	struct buffer_page		*commit_page;	/* commited pages */
 	                  		             	   ^^^^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buffer' may be better as '(buffer)' to avoid precedence issues
#98: FILE: kernel/trace/ring_buffer.c:189:
+#define RB_WARN_ON(buffer, cond)				\
+	do {							\
+		if (unlikely(cond)) {				\
+			atomic_inc(&buffer->record_disabled);	\
+			WARN_ON(1);				\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buffer' may be better as '(buffer)' to avoid precedence issues
#106: FILE: kernel/trace/ring_buffer.c:197:
+#define RB_WARN_ON_RET(buffer, cond)				\
+	do {							\
+		if (unlikely(cond)) {				\
+			atomic_inc(&buffer->record_disabled);	\
+			WARN_ON(1);				\
+			return -1;				\
+		}						\
+	} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#106: FILE: kernel/trace/ring_buffer.c:197:
+#define RB_WARN_ON_RET(buffer, cond)				\
+	do {							\
+		if (unlikely(cond)) {				\
+			atomic_inc(&buffer->record_disabled);	\
+			WARN_ON(1);				\
+			return -1;				\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buffer' may be better as '(buffer)' to avoid precedence issues
#115: FILE: kernel/trace/ring_buffer.c:206:
+#define RB_WARN_ON_ONCE(buffer, cond)				\
+	do {							\
+		static int once;				\
+		if (unlikely(cond) && !once) {			\
+			once++;					\
+			atomic_inc(&buffer->record_disabled);	\
+			WARN_ON(1);				\
+		}						\
+	} while (0)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#170: FILE: kernel/trace/ring_buffer.c:314:
+	cpu_buffer->tail_page = cpu_buffer->commit_page = cpu_buffer->head_page;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#194: FILE: kernel/trace/ring_buffer.c:612:
+static inline unsigned rb_page_write(struct buffer_page *bpage)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#199: FILE: kernel/trace/ring_buffer.c:617:
+static inline unsigned rb_page_commit(struct buffer_page *bpage)

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#204: FILE: kernel/trace/ring_buffer.c:622:
+/* Size is determined by what has been commited */
                                        ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#205: FILE: kernel/trace/ring_buffer.c:623:
+static inline unsigned rb_page_size(struct buffer_page *bpage)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#216: FILE: kernel/trace/ring_buffer.c:634:
+static inline unsigned rb_head_size(struct ring_buffer_per_cpu *cpu_buffer)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#430: FILE: kernel/trace/ring_buffer.c:939:
+	BUG_ON(write > BUF_PAGE_SIZE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#476: FILE: kernel/trace/ring_buffer.c:987:
+	/* Only a commited time event can update the write stamp */
 	          ^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#529: FILE: kernel/trace/ring_buffer.c:1038:
+	    rb_commit_index(cpu_buffer)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#558: FILE: kernel/trace/ring_buffer.c:1060:
+	} else

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#571: FILE: kernel/trace/ring_buffer.c:1071:
+			 * Ouch! We needed a timestamp and it was commited. But
 			                                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#581: FILE: kernel/trace/ring_buffer.c:1079:
+	 * If the timestamp was commited, make the commit our entry
 	                        ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#673: FILE: kernel/trace/ring_buffer.c:1200:
+	if (preempt_count() == 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#678: FILE: kernel/trace/ring_buffer.c:1205:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#790: FILE: kernel/trace/ring_buffer.c:1625:
+		BUG_ON(iter->head_page == cpu_buffer->commit_page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#800: FILE: kernel/trace/ring_buffer.c:1638:
+	BUG_ON((iter->head_page == cpu_buffer->commit_page) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iter->head >= rb_page_size(iter->head_page)'
#810: FILE: kernel/trace/ring_buffer.c:1646:
+	if ((iter->head >= rb_page_size(iter->head_page)) &&
+	    (iter->head_page != cpu_buffer->commit_page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iter->head_page != cpu_buffer->commit_page'
#810: FILE: kernel/trace/ring_buffer.c:1646:
+	if ((iter->head >= rb_page_size(iter->head_page)) &&
+	    (iter->head_page != cpu_buffer->commit_page))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000221109.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 10 checks, 752 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000221109.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
