WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: Documentation/mmu_notifier/skeleton.c:1:
+#include <linux/mm.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#68: FILE: Documentation/mmu_notifier/skeleton.c:12:
+ * ^I^IChristoph Lameter <clameter@sgi.com>$

WARNING:TYPO_SPELLING: 'invidual' may be misspelled - perhaps 'individual'?
#81: FILE: Documentation/mmu_notifier/skeleton.c:25:
+	spinlock_t lock;	/* Protects counter and invidual zaps */
 	                	                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: Documentation/mmu_notifier/skeleton.c:33:
+static void my_mmu_insert_page(struct my_mmu *m,
+		unsigned long address, unsigned long pfn)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#92: FILE: Documentation/mmu_notifier/skeleton.c:36:
+	printk(KERN_INFO "insert page %p address=%lx pfn=%ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: Documentation/mmu_notifier/skeleton.c:37:
+	printk(KERN_INFO "insert page %p address=%lx pfn=%ld\n",
+							m, address, pfn);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#103: FILE: Documentation/mmu_notifier/skeleton.c:47:
+	printk(KERN_INFO "zap page %p address=%lx\n", m, address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: Documentation/mmu_notifier/skeleton.c:54:
+static void my_mmu_zap_range(struct my_mmu *m,
+	unsigned long start, unsigned long end, int atomic)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#113: FILE: Documentation/mmu_notifier/skeleton.c:57:
+	printk(KERN_INFO "zap range %p address=%lx-%lx atomic=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: Documentation/mmu_notifier/skeleton.c:58:
+	printk(KERN_INFO "zap range %p address=%lx-%lx atomic=%d\n",
+						m, start, end, atomic);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: Documentation/mmu_notifier/skeleton.c:70:
+static void my_mmu_invalidate_page(struct mmu_notifier *mn,
+	struct mm_struct *mm, unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: Documentation/mmu_notifier/skeleton.c:97:
+static void my_mmu_invalidate_range_begin(struct mmu_notifier *mn,
+	struct mm_struct *mm, unsigned long start, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: Documentation/mmu_notifier/skeleton.c:107:
+static void my_mmu_invalidate_range_end(struct mmu_notifier *mn,
+	struct mm_struct *mm, unsigned long start, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: Documentation/mmu_notifier/skeleton.c:124:
+struct page *my_mmu_populate_page(struct my_mmu *m,
+	struct vm_area_struct *vma,

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#191: FILE: Documentation/mmu_notifier/skeleton.c:135:
+	spinlock_t *ptl;

CHECK:BRACES: braces {} should be used on all arms of this statement
#197: FILE: Documentation/mmu_notifier/skeleton.c:141:
+	if (atomic) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#200: FILE: Documentation/mmu_notifier/skeleton.c:144:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: Documentation/mmu_notifier/skeleton.c:204:
+		err = get_user_pages(current, vma->vm_mm, address, 1,
+					write, 1, NULL, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#282: FILE: Documentation/mmu_notifier/skeleton.c:226:
+	printk(KERN_INFO "MMU Notifier detaching\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*m)...) over kzalloc(sizeof(struct my_mmu)...)
#298: FILE: Documentation/mmu_notifier/skeleton.c:242:
+	struct my_mmu *m = kzalloc(sizeof(struct my_mmu), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000320997.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 13 checks, 267 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000320997.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
