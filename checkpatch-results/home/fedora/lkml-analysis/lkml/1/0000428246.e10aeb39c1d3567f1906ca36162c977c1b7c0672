WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
This is LZO1X-1 compressor and LZO1X decompressor (safe and standard version).

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#60: FILE: Makefile:825:
include/config/auto.conf FORCE

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#81: FILE: include/linux/lzo1x.h

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
new file mode 100755

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: include/linux/lzo1x.h:1:
+/* lzo1x.h -- public interface of the LZO1X compression algorithm

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#87: FILE: include/linux/lzo1x.h:2:
+/* lzo1x.h -- public interface of the LZO1X compression algorithm
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#104: FILE: include/linux/lzo1x.h:19:
+   If not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#105: FILE: include/linux/lzo1x.h:20:
+   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#111: FILE: include/linux/lzo1x.h:26:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#136: FILE: include/linux/lzo1x.h:51:
+#define LZO1X_WORKMEM_SIZE	((size_t) (16384L * sizeof(unsigned char *)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: include/linux/lzo1x.h:57:
+int lzo1x_compress(const unsigned char *src, size_t src_len,
+		unsigned char *dst, size_t *dst_len,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#145: FILE: include/linux/lzo1x.h:60:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: include/linux/lzo1x.h:69:
+int lzo1x_decompress(const unsigned char *src, size_t src_len,
+		unsigned char *dst, size_t *dst_len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#156: FILE: include/linux/lzo1x.h:71:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: include/linux/lzo1x.h:79:
+int lzo1x_decompress_safe(const unsigned char *src, size_t src_len,
+		unsigned char *dst, size_t *dst_len);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#174: FILE: lib/Kconfig:67:
+config LZO1X
+	tristate "LZO1X Compression/Decompression"
+	help
+	  Compression: LZO1X-1
+	  Decompression: LZO1X
+
 #
 # Generic allocator support is selected if needed
 #

Kconfig symbols should have a help text which fully describes
it.

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#213: FILE: lib/lzo1x/lzo1x_compress.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#218: FILE: lib/lzo1x/lzo1x_compress.c:1:
+/* lzo1x_compress.c -- LZO1X-1 compression

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#219: FILE: lib/lzo1x/lzo1x_compress.c:2:
+/* lzo1x_compress.c -- LZO1X-1 compression
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#236: FILE: lib/lzo1x/lzo1x_compress.c:19:
+   If not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#237: FILE: lib/lzo1x/lzo1x_compress.c:20:
+   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#243: FILE: lib/lzo1x/lzo1x_compress.c:26:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: lib/lzo1x/lzo1x_compress.c:47:
+lzo1x_compress_worker(const unsigned char *in, size_t in_len,
+			unsigned char *out, size_t *out_len,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: lib/lzo1x/lzo1x_compress.c:68:
+		DINDEX1(dindex,ip);
 		              ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#288: FILE: lib/lzo1x/lzo1x_compress.c:71:
+#if 0

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: lib/lzo1x/lzo1x_compress.c:72:
+		if (LZO_CHECK_MPOS_NON_DET(m_pos,m_off,in,ip,M4_MAX_OFFSET))
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: lib/lzo1x/lzo1x_compress.c:72:
+		if (LZO_CHECK_MPOS_NON_DET(m_pos,m_off,in,ip,M4_MAX_OFFSET))
 		                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: lib/lzo1x/lzo1x_compress.c:72:
+		if (LZO_CHECK_MPOS_NON_DET(m_pos,m_off,in,ip,M4_MAX_OFFSET))
 		                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: lib/lzo1x/lzo1x_compress.c:72:
+		if (LZO_CHECK_MPOS_NON_DET(m_pos,m_off,in,ip,M4_MAX_OFFSET))
 		                                            ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#292: FILE: lib/lzo1x/lzo1x_compress.c:75:
+#if 1

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm_pos < in'
#293: FILE: lib/lzo1x/lzo1x_compress.c:76:
+		if ((m_pos < in) || (m_off = (size_t)(ip - m_pos)) <= 0
+				 || m_off > M4_MAX_OFFSET)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#293: FILE: lib/lzo1x/lzo1x_compress.c:76:
+		if ((m_pos < in) || (m_off = (size_t)(ip - m_pos)) <= 0

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#294: FILE: lib/lzo1x/lzo1x_compress.c:77:
+		if ((m_pos < in) || (m_off = (size_t)(ip - m_pos)) <= 0
+				 || m_off > M4_MAX_OFFSET)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#300: FILE: lib/lzo1x/lzo1x_compress.c:83:
+		DINDEX2(dindex,ip);
 		              ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#303: FILE: lib/lzo1x/lzo1x_compress.c:86:
+#if 0

ERROR:SPACING: space required after that ',' (ctx:VxV)
#304: FILE: lib/lzo1x/lzo1x_compress.c:87:
+		if (LZO_CHECK_MPOS_NON_DET(m_pos,m_off,in,ip,M4_MAX_OFFSET))
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#304: FILE: lib/lzo1x/lzo1x_compress.c:87:
+		if (LZO_CHECK_MPOS_NON_DET(m_pos,m_off,in,ip,M4_MAX_OFFSET))
 		                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#304: FILE: lib/lzo1x/lzo1x_compress.c:87:
+		if (LZO_CHECK_MPOS_NON_DET(m_pos,m_off,in,ip,M4_MAX_OFFSET))
 		                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#304: FILE: lib/lzo1x/lzo1x_compress.c:87:
+		if (LZO_CHECK_MPOS_NON_DET(m_pos,m_off,in,ip,M4_MAX_OFFSET))
 		                                            ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#307: FILE: lib/lzo1x/lzo1x_compress.c:90:
+#if 1

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm_pos < in'
#308: FILE: lib/lzo1x/lzo1x_compress.c:91:
+		if ((m_pos < in) || (m_off = (size_t)(ip - m_pos)) <= 0
+				 || m_off > M4_MAX_OFFSET)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#308: FILE: lib/lzo1x/lzo1x_compress.c:91:
+		if ((m_pos < in) || (m_off = (size_t)(ip - m_pos)) <= 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#309: FILE: lib/lzo1x/lzo1x_compress.c:92:
+		if ((m_pos < in) || (m_off = (size_t)(ip - m_pos)) <= 0
+				 || m_off > M4_MAX_OFFSET)

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: lib/lzo1x/lzo1x_compress.c:121:
+			register size_t t = (size_t)(ip - ii);
+			if (t <= 3)

CHECK:BRACES: braces {} should be used on all arms of this statement
#338: FILE: lib/lzo1x/lzo1x_compress.c:121:
+			if (t <= 3)
[...]
+			else if (t <= 18)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#342: FILE: lib/lzo1x/lzo1x_compress.c:125:
+			else {

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#351: FILE: lib/lzo1x/lzo1x_compress.c:134:
+			do *op++ = *ii++; while (--t > 0);
 			   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#353: FILE: lib/lzo1x/lzo1x_compress.c:136:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: lib/lzo1x/lzo1x_compress.c:140:
+		if (m_pos[3] != *ip++ || m_pos[4] != *ip++ ||
+				m_pos[5] != *ip++ || m_pos[6] != *ip++ ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: lib/lzo1x/lzo1x_compress.c:144:
+^I$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#368: FILE: lib/lzo1x/lzo1x_compress.c:151:
+			}
+			else if (m_off <= M3_MAX_OFFSET) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#383: FILE: lib/lzo1x/lzo1x_compress.c:166:
+			const unsigned char *m = m_pos + M2_MAX_LEN + 1;
+			while (ip < end && *m == *ip)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: lib/lzo1x/lzo1x_compress.c:169:
+^I$

CHECK:BRACES: Unbalanced braces around else statement
#392: FILE: lib/lzo1x/lzo1x_compress.c:175:
+				else {

CHECK:BRACES: Unbalanced braces around else statement
#403: FILE: lib/lzo1x/lzo1x_compress.c:186:
+				else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: lib/lzo1x/lzo1x_compress.c:198:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: lib/lzo1x/lzo1x_compress.c:203:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#430: FILE: lib/lzo1x/lzo1x_compress.c:213:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: lib/lzo1x/lzo1x_compress.c:220:
+lzo1x_compress(const unsigned char *in, size_t  in_len,
+		unsigned char *out, size_t *out_len,

CHECK:BRACES: braces {} should be used on all arms of this statement
#446: FILE: lib/lzo1x/lzo1x_compress.c:229:
+	if (unlikely(in_len <= M2_MAX_LEN + 5))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#448: FILE: lib/lzo1x/lzo1x_compress.c:231:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: lib/lzo1x/lzo1x_compress.c:233:
+        ^Iop += *out_len;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#450: FILE: lib/lzo1x/lzo1x_compress.c:233:
+        ^Iop += *out_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: lib/lzo1x/lzo1x_compress.c:233:
+        ^Iop += *out_len;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#456: FILE: lib/lzo1x/lzo1x_compress.c:239:
+		if (op == out && t <= 238)
[...]
+		else if (t <= 3)
[...]
+		else if (t <= 18)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#462: FILE: lib/lzo1x/lzo1x_compress.c:245:
+		else {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#483: FILE: lib/lzo1x/lzo1x_compress.c:266:
+EXPORT_SYMBOL(lzo1x_compress);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#485: FILE: lib/lzo1x/lzo1x_decompress.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#490: FILE: lib/lzo1x/lzo1x_decompress.c:1:
+/* lzo1x_decompress.c -- LZO1X decompression

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#491: FILE: lib/lzo1x/lzo1x_decompress.c:2:
+/* lzo1x_decompress.c -- LZO1X decompression
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#508: FILE: lib/lzo1x/lzo1x_decompress.c:19:
+   If not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#509: FILE: lib/lzo1x/lzo1x_decompress.c:20:
+   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#515: FILE: lib/lzo1x/lzo1x_decompress.c:26:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: lib/lzo1x/lzo1x_decompress.c:47:
+lzo1x_decompress(const unsigned char *in, size_t in_len,
+			unsigned char *out, size_t *out_len)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#593: FILE: lib/lzo1x/lzo1x_decompress.c:104:
+^I$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#616: FILE: lib/lzo1x/lzo1x_decompress.c:127:
+#if 0

WARNING:IF_1: Consider removing the #if 1 and its #endif
#625: FILE: lib/lzo1x/lzo1x_decompress.c:136:
+#if 1

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#626: FILE: lib/lzo1x/lzo1x_decompress.c:137:
+				m_pos = op - 1 - (cpu_to_le16(

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#644: FILE: lib/lzo1x/lzo1x_decompress.c:155:
+#if 0

WARNING:IF_1: Consider removing the #if 1 and its #endif
#651: FILE: lib/lzo1x/lzo1x_decompress.c:162:
+#if 1

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#652: FILE: lib/lzo1x/lzo1x_decompress.c:163:
+				m_pos -= cpu_to_le16(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#669: FILE: lib/lzo1x/lzo1x_decompress.c:180:
+^I$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#674: FILE: lib/lzo1x/lzo1x_decompress.c:185:
+#if 0	// RFC!

ERROR:SPACING: space required after that ',' (ctx:VxV)
#676: FILE: lib/lzo1x/lzo1x_decompress.c:187:
+				COPY4(op,m_pos);
 				        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#679: FILE: lib/lzo1x/lzo1x_decompress.c:190:
+					COPY4(op,m_pos);
 					        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#684: FILE: lib/lzo1x/lzo1x_decompress.c:195:
+						*op++ = *m_pos++;
 						^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#691: FILE: lib/lzo1x/lzo1x_decompress.c:202:
+					*op++ = *m_pos++;
 					^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#695: FILE: lib/lzo1x/lzo1x_decompress.c:206:
+#if 1

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#705: FILE: lib/lzo1x/lzo1x_decompress.c:216:
+					*op++ = *m_pos++;
 					^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#714: FILE: lib/lzo1x/lzo1x_decompress.c:225:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#718: FILE: lib/lzo1x/lzo1x_decompress.c:229:
+			NEED_IP(t+1);
 			         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: lib/lzo1x/lzo1x_decompress.c:242:
+    *out_len = (size_t)(op - out);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: lib/lzo1x/lzo1x_decompress.c:243:
+    return LZO_E_EOF_NOT_FOUND;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#742: FILE: lib/lzo1x/lzo1x_decompress.c:253:
+    *out_len = (size_t)(op - out);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: lib/lzo1x/lzo1x_decompress.c:254:
+    return LZO_E_INPUT_OVERRUN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: lib/lzo1x/lzo1x_decompress.c:257:
+    *out_len = (size_t)(op - out);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: lib/lzo1x/lzo1x_decompress.c:258:
+    return LZO_E_OUTPUT_OVERRUN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: lib/lzo1x/lzo1x_decompress.c:261:
+    *out_len = (size_t)(op - out);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: lib/lzo1x/lzo1x_decompress.c:262:
+    return LZO_E_LOOKBEHIND_OVERRUN;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#755: FILE: lib/lzo1x/lzo1x_decompress.c:266:
+EXPORT_SYMBOL(lzo1x_decompress);

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#757: FILE: lib/lzo1x/lzo1x_int.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#762: FILE: lib/lzo1x/lzo1x_int.h:1:
+/* lzo1x_int.h -- to be used internally by LZO de/compression algorithms

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#763: FILE: lib/lzo1x/lzo1x_int.h:2:
+/* lzo1x_int.h -- to be used internally by LZO de/compression algorithms
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#780: FILE: lib/lzo1x/lzo1x_int.h:19:
+   If not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#781: FILE: lib/lzo1x/lzo1x_int.h:20:
+   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#787: FILE: lib/lzo1x/lzo1x_int.h:26:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#801: FILE: lib/lzo1x/lzo1x_int.h:40:
+#define D_SIZE		(1u << D_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#805: FILE: lib/lzo1x/lzo1x_int.h:44:
+#define DX2(p,s1,s2) \
              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#805: FILE: lib/lzo1x/lzo1x_int.h:44:
+#define DX2(p,s1,s2) \
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#805: FILE: lib/lzo1x/lzo1x_int.h:44:
+#define DX2(p,s1,s2) \
+	(((((size_t)((p)[2]) << (s2)) ^ (p)[1]) << (s1)) ^ (p)[0])

ERROR:SPACING: space required after that ',' (ctx:VxV)
#807: FILE: lib/lzo1x/lzo1x_int.h:46:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#807: FILE: lib/lzo1x/lzo1x_int.h:46:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#807: FILE: lib/lzo1x/lzo1x_int.h:46:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#807: FILE: lib/lzo1x/lzo1x_int.h:46:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#807: FILE: lib/lzo1x/lzo1x_int.h:46:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#807: FILE: lib/lzo1x/lzo1x_int.h:46:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#807: FILE: lib/lzo1x/lzo1x_int.h:46:
+#define DX3(p,s1,s2,s3) ((DX2((p)+1,s2,s3) << (s1)) ^ (p)[0])

CHECK:SPACING: No space is necessary after a cast
#808: FILE: lib/lzo1x/lzo1x_int.h:47:
+#define DMUL(a,b)	((size_t) ((a) * (b)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#808: FILE: lib/lzo1x/lzo1x_int.h:47:
+#define DMUL(a,b)	((size_t) ((a) * (b)))
               ^

CHECK:SPACING: No space is necessary after a cast
#809: FILE: lib/lzo1x/lzo1x_int.h:48:
+#define DMS(v,s)	((size_t) (((v) & (D_MASK >> (s))) << (s)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#809: FILE: lib/lzo1x/lzo1x_int.h:48:
+#define DMS(v,s)	((size_t) (((v) & (D_MASK >> (s))) << (s)))
              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#809: FILE: lib/lzo1x/lzo1x_int.h:48:
+#define DMS(v,s)	((size_t) (((v) & (D_MASK >> (s))) << (s)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#810: FILE: lib/lzo1x/lzo1x_int.h:49:
+#define DM(v)		DMS(v,0)
              		     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#813: FILE: lib/lzo1x/lzo1x_int.h:52:
+#define DINDEX1(d,p)	d = DM(DMUL(0x21,DX3(p,5,5,6)) >> 5)
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#813: FILE: lib/lzo1x/lzo1x_int.h:52:
+#define DINDEX1(d,p)	d = DM(DMUL(0x21,DX3(p,5,5,6)) >> 5)
                     	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#813: FILE: lib/lzo1x/lzo1x_int.h:52:
+#define DINDEX1(d,p)	d = DM(DMUL(0x21,DX3(p,5,5,6)) >> 5)
                     	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#813: FILE: lib/lzo1x/lzo1x_int.h:52:
+#define DINDEX1(d,p)	d = DM(DMUL(0x21,DX3(p,5,5,6)) >> 5)
                     	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#813: FILE: lib/lzo1x/lzo1x_int.h:52:
+#define DINDEX1(d,p)	d = DM(DMUL(0x21,DX3(p,5,5,6)) >> 5)
                     	                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#813: FILE: lib/lzo1x/lzo1x_int.h:52:
+#define DINDEX1(d,p)	d = DM(DMUL(0x21,DX3(p,5,5,6)) >> 5)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#814: FILE: lib/lzo1x/lzo1x_int.h:53:
+#define DINDEX2(d,p)	d = (d & (D_MASK & 0x7ff)) ^ (D_HIGH | 0x1f)
                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#814: FILE: lib/lzo1x/lzo1x_int.h:53:
+#define DINDEX2(d,p)	d = (d & (D_MASK & 0x7ff)) ^ (D_HIGH | 0x1f)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#814: FILE: lib/lzo1x/lzo1x_int.h:53:
+#define DINDEX2(d,p)	d = (d & (D_MASK & 0x7ff)) ^ (D_HIGH | 0x1f)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#817: FILE: lib/lzo1x/lzo1x_int.h:56:
+/*
+--------------------- Will Disappear --------------------------

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#874: FILE: lib/lzo1x/lzo1x_int.h:113:
+#define NEED_IP(x) \
+	if ((size_t)(ip_end - ip) < (size_t)(x)) goto input_overrun

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#874: FILE: lib/lzo1x/lzo1x_int.h:113:
+#define NEED_IP(x) \
+	if ((size_t)(ip_end - ip) < (size_t)(x)) goto input_overrun

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#875: FILE: lib/lzo1x/lzo1x_int.h:114:
+	if ((size_t)(ip_end - ip) < (size_t)(x)) goto input_overrun

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#876: FILE: lib/lzo1x/lzo1x_int.h:115:
+#define NEED_OP(x) \
+	if ((size_t)(op_end - op) < (size_t)(x)) goto output_overrun

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#876: FILE: lib/lzo1x/lzo1x_int.h:115:
+#define NEED_OP(x) \
+	if ((size_t)(op_end - op) < (size_t)(x)) goto output_overrun

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#877: FILE: lib/lzo1x/lzo1x_int.h:116:
+	if ((size_t)(op_end - op) < (size_t)(x)) goto output_overrun

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#878: FILE: lib/lzo1x/lzo1x_int.h:117:
+#define TEST_LB(m_pos)        if (m_pos < out || m_pos >= op) goto

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm_pos' - possible side-effects?
#878: FILE: lib/lzo1x/lzo1x_int.h:117:
+#define TEST_LB(m_pos)        if (m_pos < out || m_pos >= op) goto

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm_pos' may be better as '(m_pos)' to avoid precedence issues
#878: FILE: lib/lzo1x/lzo1x_int.h:117:
+#define TEST_LB(m_pos)        if (m_pos < out || m_pos >= op) goto

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#878: FILE: lib/lzo1x/lzo1x_int.h:117:
+#define TEST_LB(m_pos)        if (m_pos < out || m_pos >= op) goto

CHECK:SPACING: No space is necessary after a cast
#886: FILE: lib/lzo1x/lzo1x_int.h:124:
+#define	TEST_LB(x)	((void) 0)

CHECK:SPACING: No space is necessary after a cast
#887: FILE: lib/lzo1x/lzo1x_int.h:125:
+#define	NEED_IP(x)	((void) 0)

CHECK:SPACING: No space is necessary after a cast
#888: FILE: lib/lzo1x/lzo1x_int.h:126:
+#define	NEED_OP(x)	((void) 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000428246.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 60 errors, 39 warnings, 47 checks, 795 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000428246.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
