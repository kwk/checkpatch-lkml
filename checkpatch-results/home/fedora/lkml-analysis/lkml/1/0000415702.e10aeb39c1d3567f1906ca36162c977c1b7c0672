CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: fs/readdir.c:331:
+static int rdcache_add_entry(struct list_head *list,
+				 const char *name, int namelen)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#110: FILE: fs/readdir.c:338:
+		printk(KERN_CRIT "rdcache_add_entry(): out of kernel memory\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rdcache_add_entry', this function's name, in a string
#110: FILE: fs/readdir.c:338:
+		printk(KERN_CRIT "rdcache_add_entry(): out of kernel memory\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#110: FILE: fs/readdir.c:338:
+	if (!this) {
+		printk(KERN_CRIT "rdcache_add_entry(): out of kernel memory\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#116: FILE: fs/readdir.c:344:
+		printk(KERN_CRIT "rdcache_add_entry(): out of kernel memory\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rdcache_add_entry', this function's name, in a string
#116: FILE: fs/readdir.c:344:
+		printk(KERN_CRIT "rdcache_add_entry(): out of kernel memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#116: FILE: fs/readdir.c:344:
+	if (!tmp_name) {
+		printk(KERN_CRIT "rdcache_add_entry(): out of kernel memory\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#147: FILE: fs/readdir.c:375:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: fs/readdir.c:378:
+static int rdcache_find_entry(struct list_head *uc_list,
+				  const char *name, int namelen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: fs/readdir.c:401:
+static int filldir_union(void *buf, const char *name, int namlen,
+			   loff_t offset, u64 ino, unsigned int d_type)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*file->f_rdstate)...) over kmalloc(sizeof(struct rdstate)...)
#212: FILE: fs/readdir.c:440:
+	file->f_rdstate = kmalloc(sizeof(struct rdstate), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#227: FILE: fs/readdir.c:455:
+	struct nameidata nd;
 	                 ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#236: FILE: fs/readdir.c:464:
+	nd.mnt = file->f_path.mnt;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#237: FILE: fs/readdir.c:465:
+	nd.dentry = file->f_path.dentry;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#238: FILE: fs/readdir.c:466:
+	if (!next_union_mount_exists(nd.mnt, nd.dentry))
 	                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#238: FILE: fs/readdir.c:466:
+	if (!next_union_mount_exists(nd.mnt, nd.dentry))
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#267: FILE: fs/readdir.c:495:
+		nd.mnt = rdstate->mnt;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#268: FILE: fs/readdir.c:496:
+		nd.dentry = rdstate->dentry;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#272: FILE: fs/readdir.c:500:
+	if (!next_union_mount(&nd))
 	                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#277: FILE: fs/readdir.c:505:
+		struct vfsmount *mnt_tmp = mntget(nd.mnt);
 		                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#278: FILE: fs/readdir.c:506:
+		struct dentry *dentry_tmp = dget(nd.dentry);
 		                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#279: FILE: fs/readdir.c:507:
+		struct file *ftmp = dentry_open(nd.dentry, nd.mnt,
 		                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#279: FILE: fs/readdir.c:507:
+		struct file *ftmp = dentry_open(nd.dentry, nd.mnt,
 		                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#288: FILE: fs/readdir.c:516:
+		mutex_lock(&nd.dentry->d_inode->i_mutex);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#294: FILE: fs/readdir.c:522:
+		mutex_unlock(&nd.dentry->d_inode->i_mutex);
 		              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#295: FILE: fs/readdir.c:523:
+		if (nd.mnt != rdstate->mnt) {
 		    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#297: FILE: fs/readdir.c:525:
+			rdstate->mnt = mntget(nd.mnt);
 			                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#299: FILE: fs/readdir.c:527:
+		if (nd.dentry != rdstate->dentry) {
 		    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#301: FILE: fs/readdir.c:529:
+			rdstate->dentry = dget(nd.dentry);
 			                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#312: FILE: fs/readdir.c:540:
+	} while (next_union_mount(&nd));
 	                           ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000415702.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 26 warnings, 4 checks, 293 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000415702.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
