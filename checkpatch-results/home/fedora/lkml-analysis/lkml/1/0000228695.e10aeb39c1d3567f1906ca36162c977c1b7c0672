WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
Use per-cgroup memory statistics to evaluate dirty limits, dirtyable memory and

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/writeback.h:110:
+extern unsigned long determine_dirtyable_memory(struct mem_cgroup *mem);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: include/linux/writeback.h:122:
+void get_dirty_limits(struct mem_cgroup *mem, long *pbackground,
+		long *pdirty, long *pbdi_dirty,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: include/linux/writeback.h:139:
+int pdflush_operation(void (*fn)(struct mem_cgroup *, unsigned long),
+			struct mem_cgroup *mem, unsigned long arg0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: mm/backing-dev.c:32:
+	get_dirty_limits(NULL, &background_thresh, &dirty_thresh,
+			&bdi_thresh, bdi);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'memcg_memory < mem_memory'
#226: FILE: mm/page-writeback.c:363:
+	if (memcg_memory && (memcg_memory < mem_memory))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: mm/page-writeback.c:374:
+get_dirty_limits(struct mem_cgroup *mem, long *pbackground,
+		long *pdirty, long *pbdi_dirty,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#264: FILE: mm/page-writeback.c:394:
+	if (mem == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#278: FILE: mm/page-writeback.c:422:
+		if (mem == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: mm/page-writeback.c:456:
+		get_dirty_limits(NULL, &background_thresh, &dirty_thresh,
 				&bdi_thresh, bdi);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: mm/page-writeback.c:489:
+			get_dirty_limits(NULL,
+					&background_thresh, &dirty_thresh,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: mm/page-writeback.c:603:
+		get_dirty_limits(NULL, &background_thresh, &dirty_thresh,
+				NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: mm/page-writeback.c:647:
+		get_dirty_limits(mem, &background_thresh, &dirty_thresh,
+				NULL, NULL);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mem_cgroup *' should also have an identifier name
#464: FILE: mm/pdflush.c:86:
+	void (*fn)(struct mem_cgroup *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#464: FILE: mm/pdflush.c:86:
+	void (*fn)(struct mem_cgroup *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: mm/pdflush.c:87:
+	void (*fn)(struct mem_cgroup *,
+			unsigned long);	/* A callback function */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: mm/pdflush.c:204:
+int pdflush_operation(void (*fn)(struct mem_cgroup *, unsigned long),
+		struct mem_cgroup *mem, unsigned long arg0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228695.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 14 checks, 375 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228695.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
