WARNING:REPEATED_WORD: Possible repeated word: 'major'
#27: 
I experienced major major data loss on a PL-2303 USB-serial converter

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#56: FILE: pl2303.c:15:
+ *	Back-port pl2303.c from linux-2.6.23.14 - corrects major loss of

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#67: FILE: pl2303.c:40:
+ * TODO suggests this might be on all even opens of device. dn. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#79: FILE: pl2303.c:70:
+#define PL2303_CLOSING_WAIT	(30*HZ)
                            	   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pb)...) over kmalloc(sizeof(struct pl2303_buf)...)
#160: FILE: pl2303.c:223:
+	pb = kmalloc(sizeof(struct pl2303_buf), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#161: FILE: pl2303.c:224:
+	if (pb == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb->buf_buf"
#165: FILE: pl2303.c:228:
+	if (pb->buf_buf == NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#171: FILE: pl2303.c:234:
+	pb->buf_get = pb->buf_put = pb->buf_buf;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pb"
#196: FILE: pl2303.c:259:
+	if (pb != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#209: FILE: pl2303.c:272:
+	if (pb == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#223: FILE: pl2303.c:286:
+	if (pb == NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#229: FILE: pl2303.c:292:
+static int copy_in(char *dest, int from_user, const char *source, unsigned count)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#232: FILE: pl2303.c:295:
+		memcpy (dest, source, count);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#233: FILE: pl2303.c:296:
+	else if (copy_from_user (dest, source, count))

WARNING:REPEATED_WORD: Possible repeated word: 'data'
#241: FILE: pl2303.c:304:
+ * Copy data data from a user buffer and put it into the circular buffer.

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#246: FILE: pl2303.c:309:
+static unsigned int pl2303_buf_put(struct pl2303_buf *pb, int from_user, const char *buf, unsigned int count)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#250: FILE: pl2303.c:313:
+	if (pb == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: pl2303.c:327:
+ ^I^Iif (copy_in(pb->buf_buf, from_user, buf+len, count - len) < 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: pl2303.c:327:
+ ^I^Iif (copy_in(pb->buf_buf, from_user, buf+len, count - len) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: pl2303.c:327:
+ ^I^Iif (copy_in(pb->buf_buf, from_user, buf+len, count - len) < 0)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#264: FILE: pl2303.c:327:
+ 		if (copy_in(pb->buf_buf, from_user, buf+len, count - len) < 0)
  		                                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#292: FILE: pl2303.c:355:
+	if (pb == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#305: FILE: pl2303.c:368:
+		memcpy(buf+len, pb->buf_buf, count - len);
 		          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv->buf"
#329: FILE: pl2303.c:404:
+		if (priv->buf == NULL) {

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#340: FILE: pl2303.c:415:
+	for (--i; i>=0; --i) {
 	           ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#363: FILE: pl2303.c:441:
+	dbg("%s - port %d", __FUNCTION__, port->number);

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#410: FILE: pl2303.c:473:
+	wake_up_interruptible(&port->tty->write_wait);	/* this, at very least, wakes up pl2303_close */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: pl2303.c:475:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: pl2303.c:475:
+ $

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#413: FILE: pl2303.c:476:
+static int pl2303_write (struct usb_serial_port *port, int from_user, const unsigned char *buf, int count)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#413: FILE: pl2303.c:476:
+static int pl2303_write (struct usb_serial_port *port, int from_user, const unsigned char *buf, int count)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#418: FILE: pl2303.c:481:
+	dbg("%s - port %d, %d bytes", __FUNCTION__, port->number, count);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#490: FILE: pl2303.c:641:
+		dbg ("0x40:0x1:0x0:0x0  %d", i);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#542: FILE: pl2303.c:756:
+		    __FUNCTION__, pl2303_buf_data_avail(priv->buf));

WARNING:LINE_SPACING: Missing a blank line after declarations
#565: FILE: pl2303.c:779:
+	int bps = tty_get_baud_rate(port->tty);
+	if (bps > 1200)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#566: FILE: pl2303.c:780:
+		timeout = max((HZ*2560)/bps,HZ/10);
 		                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#566: FILE: pl2303.c:780:
+		timeout = max((HZ*2560)/bps,HZ/10);
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#566: FILE: pl2303.c:780:
+		timeout = max((HZ*2560)/bps,HZ/10);
 		                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#566: FILE: pl2303.c:780:
+		timeout = max((HZ*2560)/bps,HZ/10);
 		                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#568: FILE: pl2303.c:782:
+		timeout = 2*HZ;
 		           ^

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#610: FILE: pl2303.c:1000:
+	idv = le16_to_cpu(port->serial->dev->descriptor.idVendor);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#611: FILE: pl2303.c:1001:
+	idp = le16_to_cpu(port->serial->dev->descriptor.idProduct);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#613: FILE: pl2303.c:1003:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#618: FILE: pl2303.c:1008:
+		    idp == SIEMENS_PRODUCT_ID_X75) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#627: FILE: pl2303.c:1017:
+        /* Save off the uart status for others to look at */$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#658: FILE: pl2303.c:1042:
+		dbg("%s - urb shutting down with status: %d", __FUNCTION__, status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#667: FILE: pl2303.c:1045:
+		dbg("%s - nonzero urb status received: %d", __FUNCTION__, status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#688: FILE: pl2303.c:1056:
+		err("%s - usb_submit_urb failed with result %d\n", __FUNCTION__, status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#690: FILE: pl2303.c:1058:
+		dbg("%s - usb_submit_urb succeeded.  peaches.", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#720: FILE: pl2303.c:1084:
+		dbg("%s - status = %d", __FUNCTION__, status);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#744: FILE: pl2303.c:1111:
+	wake_up_interruptible (&priv->delta_msr_wait);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#749: FILE: pl2303.c:1115:
+	if (line_status & UART_BREAK_ERROR )

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#803: FILE: pl2303.c:1169:
+		dbg("%s - urb shutting down with status: %d", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#814: FILE: pl2303.c:1179:
+		dbg("%s - nonzero write bulk status received: %d", __FUNCTION__, status);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331474.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 27 warnings, 21 checks, 798 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331474.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
