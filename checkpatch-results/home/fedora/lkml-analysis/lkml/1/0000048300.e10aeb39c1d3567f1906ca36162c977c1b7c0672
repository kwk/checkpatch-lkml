CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#54: FILE: arch/s390/include/asm/uaccess.h:96:
+extern int __handle_fault(unsigned long, unsigned long, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#54: FILE: arch/s390/include/asm/uaccess.h:96:
+extern int __handle_fault(unsigned long, unsigned long, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#54: FILE: arch/s390/include/asm/uaccess.h:96:
+extern int __handle_fault(unsigned long, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#54: FILE: arch/s390/include/asm/uaccess.h:96:
+extern int __handle_fault(unsigned long, unsigned long, int);

CHECK:SPACING: No space is necessary after a cast
#68: FILE: arch/s390/lib/uaccess_pt.c:26:
+		return (pte_t *) 0x3a;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#73: FILE: arch/s390/lib/uaccess_pt.c:30:
+		return (pte_t *) 0x3b;

CHECK:SPACING: No space is necessary after a cast
#78: FILE: arch/s390/lib/uaccess_pt.c:34:
+		return (pte_t *) 0x10;

CHECK:SPACING: No space is necessary after a cast
#161: FILE: arch/s390/lib/uaccess_pt.c:52:
+		if ((unsigned long) pte < 0x1000)

CHECK:SPACING: No space is necessary after a cast
#164: FILE: arch/s390/lib/uaccess_pt.c:55:
+			pte = (pte_t *) 0x11;

CHECK:SPACING: No space is necessary after a cast
#167: FILE: arch/s390/lib/uaccess_pt.c:58:
+			pte = (pte_t *) 0x04;

CHECK:SPACING: No space is necessary after a cast
#181: FILE: arch/s390/lib/uaccess_pt.c:80:
+	if (__handle_fault(uaddr, (unsigned long) pte, write_user))

CHECK:SPACING: No space is necessary after a cast
#202: FILE: arch/s390/lib/uaccess_pt.c:98:
+	if ((unsigned long) pte < 0x1000)

CHECK:SPACING: No space is necessary after a cast
#205: FILE: arch/s390/lib/uaccess_pt.c:101:
+		pte = (pte_t *) 0x11;

CHECK:SPACING: No space is necessary after a cast
#217: FILE: arch/s390/lib/uaccess_pt.c:109:
+	rc = __handle_fault(uaddr, (unsigned long) pte, 0);

CHECK:SPACING: No space is necessary after a cast
#233: FILE: arch/s390/lib/uaccess_pt.c:178:
+		if ((unsigned long) pte < 0x1000)

CHECK:SPACING: No space is necessary after a cast
#236: FILE: arch/s390/lib/uaccess_pt.c:181:
+			pte = (pte_t *) 0x11;

CHECK:SPACING: No space is necessary after a cast
#247: FILE: arch/s390/lib/uaccess_pt.c:197:
+	if (__handle_fault(uaddr, (unsigned long) pte, 0))

CHECK:SPACING: No space is necessary after a cast
#272: FILE: arch/s390/lib/uaccess_pt.c:248:
+		error_code = (unsigned long) pte_from;

CHECK:SPACING: No space is necessary after a cast
#286: FILE: arch/s390/lib/uaccess_pt.c:259:
+		error_code = (unsigned long) pte_to;

CHECK:SPACING: No space is necessary after a cast
#322: FILE: arch/s390/mm/fault.c:453:
+	regs.psw.addr = (unsigned long) __builtin_return_address(0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#328: FILE: arch/s390/mm/fault.c:459:
+		if (fault & VM_FAULT_OOM) {
[...]
+		} else if (fault & VM_FAULT_SIGBUS)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000048300.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 18 checks, 271 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000048300.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
