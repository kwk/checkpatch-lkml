WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#44: 
Nearly everything of the "receiver" and the "asender" is in this file. The
                                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#47: 
  The asender on the other hand is used to send out acknowledgements and
      ^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#55: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: drivers/block/drbd/drbd_receiver.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#61: FILE: drivers/block/drbd/drbd_receiver.c:2:
+/*
+   drbd_receiver.c

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#81: FILE: drivers/block/drbd/drbd_receiver.c:22:
+   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#84: FILE: drivers/block/drbd/drbd_receiver.c:25:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#88: FILE: drivers/block/drbd/drbd_receiver.c:29:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#127: FILE: drivers/block/drbd/drbd_receiver.c:68:
+STATIC int drbd_do_handshake(struct drbd_conf *mdev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#128: FILE: drivers/block/drbd/drbd_receiver.c:69:
+STATIC int drbd_do_auth(struct drbd_conf *mdev);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#130: FILE: drivers/block/drbd/drbd_receiver.c:71:
+STATIC enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *, struct drbd_epoch *, enum epoch_event);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#130: FILE: drivers/block/drbd/drbd_receiver.c:71:
+STATIC enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *, struct drbd_epoch *, enum epoch_event);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#130: FILE: drivers/block/drbd/drbd_receiver.c:71:
+STATIC enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *, struct drbd_epoch *, enum epoch_event);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_epoch *' should also have an identifier name
#130: FILE: drivers/block/drbd/drbd_receiver.c:71:
+STATIC enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *, struct drbd_epoch *, enum epoch_event);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#131: FILE: drivers/block/drbd/drbd_receiver.c:72:
+STATIC int e_end_block(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_conf *' should also have an identifier name
#131: FILE: drivers/block/drbd/drbd_receiver.c:72:
+STATIC int e_end_block(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drbd_work *' should also have an identifier name
#131: FILE: drivers/block/drbd/drbd_receiver.c:72:
+STATIC int e_end_block(struct drbd_conf *, struct drbd_work *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#131: FILE: drivers/block/drbd/drbd_receiver.c:72:
+STATIC int e_end_block(struct drbd_conf *, struct drbd_work *, int);

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: drivers/block/drbd/drbd_receiver.c:76:
+	struct drbd_epoch *prev;
+	spin_lock(&mdev->epoch_lock);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'drbd_pp_alloc', this function's name, in a string
#199: FILE: drivers/block/drbd/drbd_receiver.c:140:
+			dev_warn(DEV, "drbd_pp_alloc interrupted!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#223: FILE: drivers/block/drbd/drbd_receiver.c:164:
+	if (drbd_pp_vacant > (DRBD_MAX_SEGMENT_SIZE/PAGE_SIZE)*minor_count) {
 	                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#223: FILE: drivers/block/drbd/drbd_receiver.c:164:
+	if (drbd_pp_vacant > (DRBD_MAX_SEGMENT_SIZE/PAGE_SIZE)*minor_count) {
 	                                                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#242: FILE: drivers/block/drbd/drbd_receiver.c:183:
+/*
+You need to hold the req_lock:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: drivers/block/drbd/drbd_receiver.c:198:
+struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev,
+				     u64 id,

WARNING:SPLIT_STRING: quoted string split across lines
#298: FILE: drivers/block/drbd/drbd_receiver.c:239:
+			dev_err(DEV, "alloc_ee: bio_add_page(s=%llu,"
+			    "data_size=%u,ds=%u) failed\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:UNNECESSARY_BREAK: break is not useful after a goto
#321: FILE: drivers/block/drbd/drbd_receiver.c:262:
+			goto fail2;
+			break;

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#335: FILE: drivers/block/drbd/drbd_receiver.c:276:
+	INIT_HLIST_NODE(&e->colision);
 	                    ^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#368: FILE: drivers/block/drbd/drbd_receiver.c:309:
+	D_ASSERT(hlist_unhashed(&e->colision));
 	                            ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#393: FILE: drivers/block/drbd/drbd_receiver.c:334:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#400: FILE: drivers/block/drbd/drbd_receiver.c:341:
+	/* The EEs are always appended to the end of the list. Since
+	   they are sent in order over the wire, they have to finish

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#402: FILE: drivers/block/drbd/drbd_receiver.c:343:
+	   stop to examine the list... */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#413: FILE: drivers/block/drbd/drbd_receiver.c:354:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#450: FILE: drivers/block/drbd/drbd_receiver.c:391:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#460: FILE: drivers/block/drbd/drbd_receiver.c:401:
+
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#468: FILE: drivers/block/drbd/drbd_receiver.c:409:
+		if (mdev->net_conf->wire_protocol == DRBD_PROT_C
+		|| is_syncer_block_id(e->block_id))

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#471: FILE: drivers/block/drbd/drbd_receiver.c:412:
+		if (!hlist_unhashed(&e->colision))
 		                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#472: FILE: drivers/block/drbd/drbd_receiver.c:413:
+			hlist_del_init(&e->colision);
 			                   ^^^^^^^^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#478: FILE: drivers/block/drbd/drbd_receiver.c:419:
+					drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE + EV_CLEANUP);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#493: FILE: drivers/block/drbd/drbd_receiver.c:434:
+	 * and calling prepare_to_wait in the fast path */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#512: FILE: drivers/block/drbd/drbd_receiver.c:453:
+ * also we want to log which part of it failed, exactly */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: drivers/block/drbd/drbd_receiver.c:455:
+STATIC int drbd_accept(struct drbd_conf *mdev, const char **what,
+		struct socket *sock, struct socket **newsock)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: drivers/block/drbd/drbd_receiver.c:485:
+STATIC int drbd_recv_short(struct drbd_conf *mdev, struct socket *sock,
+		    void *buf, size_t size, int flags)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#602: FILE: drivers/block/drbd/drbd_receiver.c:543:
+			break;
+		} else	{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: drivers/block/drbd/drbd_receiver.c:573:
+	err = sock_create_kern(((struct sockaddr *)mdev->net_conf->my_addr)->sa_family,
+		SOCK_STREAM, IPPROTO_TCP, &sock);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#639: FILE: drivers/block/drbd/drbd_receiver.c:580:
+	sock->sk->sk_sndtimeo =  mdev->net_conf->try_connect_int*HZ;
 	                                                        ^

CHECK:SPACING: No space is necessary after a cast
#657: FILE: drivers/block/drbd/drbd_receiver.c:598:
+			      (struct sockaddr *) &src_in6,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#663: FILE: drivers/block/drbd/drbd_receiver.c:604:
+	 * stay C_WF_CONNECTION, don't go Disconnecting! */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: drivers/block/drbd/drbd_receiver.c:647:
+	err = sock_create_kern(((struct sockaddr *)mdev->net_conf->my_addr)->sa_family,
+		SOCK_STREAM, IPPROTO_TCP, &s_listen);

CHECK:SPACING: No space is necessary after a cast
#721: FILE: drivers/block/drbd/drbd_receiver.c:662:
+			      (struct sockaddr *) mdev->net_conf->my_addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: drivers/block/drbd/drbd_receiver.c:684:
+STATIC int drbd_send_fp(struct drbd_conf *mdev,
+	struct socket *sock, enum drbd_packets cmd)

CHECK:SPACING: No space is necessary after a cast
#745: FILE: drivers/block/drbd/drbd_receiver.c:686:
+	struct p_header *h = (struct p_header *) &mdev->data.sbuf.header;

CHECK:SPACING: No space is necessary after a cast
#752: FILE: drivers/block/drbd/drbd_receiver.c:693:
+	struct p_header *h = (struct p_header *) &mdev->data.sbuf.header;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#780: FILE: drivers/block/drbd/drbd_receiver.c:721:
+		return TRUE;
+	} else {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'drbd_connect', this function's name, in a string
#803: FILE: drivers/block/drbd/drbd_receiver.c:744:
+		dev_err(DEV, "CREATE_BARRIER flag was set in drbd_connect - now cleared!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'drbd_connect', this function's name, in a string
#834: FILE: drivers/block/drbd/drbd_receiver.c:775:
+				dev_err(DEV, "Logic error in drbd_connect()\n");

WARNING:MEMORY_BARRIER: memory barrier without comment
#882: FILE: drivers/block/drbd/drbd_receiver.c:823:
+			smp_rmb();

CHECK:CAMELCASE: Avoid CamelCase: <Exiting>
#883: FILE: drivers/block/drbd/drbd_receiver.c:824:
+			if (get_t_state(&mdev->receiver) == Exiting) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'wich' may be misspelled - perhaps 'which'?
#918: FILE: drivers/block/drbd/drbd_receiver.c:859:
+	 * first set it to the P_HAND_SHAKE timeout, wich is hardcoded for now: */
 	                                             ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#918: FILE: drivers/block/drbd/drbd_receiver.c:859:
+	 * first set it to the P_HAND_SHAKE timeout, wich is hardcoded for now: */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#920: FILE: drivers/block/drbd/drbd_receiver.c:861:
+	sock->sk->sk_rcvtimeo = 2*HZ;
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#922: FILE: drivers/block/drbd/drbd_receiver.c:863:
+	msock->sk->sk_sndtimeo = mdev->net_conf->timeout*HZ/10;
 	                                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#922: FILE: drivers/block/drbd/drbd_receiver.c:863:
+	msock->sk->sk_sndtimeo = mdev->net_conf->timeout*HZ/10;
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#923: FILE: drivers/block/drbd/drbd_receiver.c:864:
+	msock->sk->sk_rcvtimeo = mdev->net_conf->ping_int*HZ;
 	                                                 ^

WARNING:TYPO_SPELLING: 'apropriate' may be misspelled - perhaps 'appropriate'?
#926: FILE: drivers/block/drbd/drbd_receiver.c:867:
+	 * we use TCP_CORK where apropriate, though */
 	                         ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#926: FILE: drivers/block/drbd/drbd_receiver.c:867:
+	 * we use TCP_CORK where apropriate, though */

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#934: FILE: drivers/block/drbd/drbd_receiver.c:875:
+	D_ASSERT(mdev->asender.task == NULL);
 	               ^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mdev->asender.task"
#934: FILE: drivers/block/drbd/drbd_receiver.c:875:
+	D_ASSERT(mdev->asender.task == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#951: FILE: drivers/block/drbd/drbd_receiver.c:892:
+	sock->sk->sk_sndtimeo = mdev->net_conf->timeout*HZ/10;
 	                                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#951: FILE: drivers/block/drbd/drbd_receiver.c:892:
+	sock->sk->sk_sndtimeo = mdev->net_conf->timeout*HZ/10;
 	                                                  ^

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#957: FILE: drivers/block/drbd/drbd_receiver.c:898:
+	drbd_thread_start(&mdev->asender);
 	                         ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: drivers/block/drbd/drbd_receiver.c:924:
+		dev_err(DEV, "magic?? on data m: 0x%lx c: %d l: %d\n",
+		    (long)be32_to_cpu(h->magic),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1002: FILE: drivers/block/drbd/drbd_receiver.c:943:
+			 * if (rv == -EOPNOTSUPP) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1059: FILE: drivers/block/drbd/drbd_receiver.c:1000:
+			/* Special case: If we just switched from WO_bio_barrier to
+			   WO_bdev_flush we should not finish the current epoch */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1059: FILE: drivers/block/drbd/drbd_receiver.c:1000:
+			   WO_bdev_flush we should not finish the current epoch */

WARNING:TYPO_SPELLING: 'alrady' may be misspelled - perhaps 'already'?
#1114: FILE: drivers/block/drbd/drbd_receiver.c:1055:
+				/* atomic_set(&epoch->active, 0); is alrady zero */
 				                                     ^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1130: FILE: drivers/block/drbd/drbd_receiver.c:1071:
+		struct flush_work *fw;
+		fw = kmalloc(sizeof(*fw), GFP_ATOMIC);

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#1155: FILE: drivers/block/drbd/drbd_receiver.c:1096:
+	static char *write_ordering_str[] = {

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1172: FILE: drivers/block/drbd/drbd_receiver.c:1113:
+		dev_info(DEV, "Method to ensure write ordering: %s\n", write_ordering_str[mdev->write_ordering]);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1185: FILE: drivers/block/drbd/drbd_receiver.c:1126:
+	/* We leave DE_CONTAINS_A_BARRIER and EE_IS_BARRIER in place,
+	   (and DE_BARRIER_IN_NEXT_EPOCH_ISSUED in the previous Epoch)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1188: FILE: drivers/block/drbd/drbd_receiver.c:1129:
+	   we realize that BIO_RW_BARRIER is actually not supported */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1191: FILE: drivers/block/drbd/drbd_receiver.c:1132:
+	/* As long as the -ENOTSUPP on the barrier is reported immediately
+	   that will never trigger. It it is reported late, we will just

WARNING:TYPO_SPELLING: 'corretly' may be misspelled - perhaps 'correctly'?
#1192: FILE: drivers/block/drbd/drbd_receiver.c:1133:
+	   print that warning an continue corretly for all future requests
 	                                  ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1193: FILE: drivers/block/drbd/drbd_receiver.c:1134:
+	   with WO_bdev_flush */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1198: FILE: drivers/block/drbd/drbd_receiver.c:1139:
+	 * re-init volatile members */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1200: FILE: drivers/block/drbd/drbd_receiver.c:1141:
+	 * inc_local was done in receive_Data. */

CHECK:CAMELCASE: Avoid CamelCase: <receive_Barrier>
#1227: FILE: drivers/block/drbd/drbd_receiver.c:1168:
+STATIC int receive_Barrier(struct drbd_conf *mdev, struct p_header *h)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1233: FILE: drivers/block/drbd/drbd_receiver.c:1174:
+	ERR_IF(h->length != (sizeof(*p)-sizeof(*h))) return FALSE;
 	                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1250: FILE: drivers/block/drbd/drbd_receiver.c:1191:
+	 * completed. */

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#1267: FILE: drivers/block/drbd/drbd_receiver.c:1208:
+		/* The asender will send all the ACKs and barrier ACKs out, since
 		       ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1268: FILE: drivers/block/drbd/drbd_receiver.c:1209:
+		/* The asender will send all the ACKs and barrier ACKs out, since
+		   all EEs moved from the active_ee to the done_ee. We need to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1269: FILE: drivers/block/drbd/drbd_receiver.c:1210:
+		   provide a new epoch object for the EEs that come in soon */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*epoch)...) over kmalloc(sizeof(struct drbd_epoch)...)
#1273: FILE: drivers/block/drbd/drbd_receiver.c:1214:
+	epoch = kmalloc(sizeof(struct drbd_epoch), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1275: FILE: drivers/block/drbd/drbd_receiver.c:1216:
+	if (!epoch) {
+		dev_warn(DEV, "Allocation of an epoch failed, slowing down\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1309: FILE: drivers/block/drbd/drbd_receiver.c:1250:
+ * and from receive_Data */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1328: FILE: drivers/block/drbd/drbd_receiver.c:1269:
+			dev_warn(DEV, "short read receiving data digest: read %d expected %d\n",
+			     rr, dgs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1350: FILE: drivers/block/drbd/drbd_receiver.c:1291:
+			dev_warn(DEV, "short read receiving data: read %d expected %d\n",
+			     rr, min_t(int, ds, PAGE_SIZE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1361: FILE: drivers/block/drbd/drbd_receiver.c:1302:
+			drbd_bcast_ee(mdev, "digest failed",
+					dgs, dig_in, dig_vv, e);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1366: FILE: drivers/block/drbd/drbd_receiver.c:1307:
+	mdev->recv_cnt += data_size>>9;
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1387: FILE: drivers/block/drbd/drbd_receiver.c:1328:
+			dev_warn(DEV, "short read receiving data: read %d expected %d\n",
+			     rr, min_t(int, data_size, PAGE_SIZE));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1399: FILE: drivers/block/drbd/drbd_receiver.c:1340:
+ * requests.  don't use unacked_cnt, so we speed up proto A and B, too. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1422: FILE: drivers/block/drbd/drbd_receiver.c:1363:
+			dev_warn(DEV, "short read receiving data reply digest: read %d expected %d\n",
+			     rr, dgs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1435: FILE: drivers/block/drbd/drbd_receiver.c:1376:
+		rr = drbd_recv(mdev,
+			     kmap(bvec->bv_page)+bvec->bv_offset,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1435: FILE: drivers/block/drbd/drbd_receiver.c:1376:
+			     kmap(bvec->bv_page)+bvec->bv_offset,
 			                        ^

WARNING:SPLIT_STRING: quoted string split across lines
#1440: FILE: drivers/block/drbd/drbd_receiver.c:1381:
+			dev_warn(DEV, "short read receiving data reply: "
+			     "read %d expected %d\n",

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#1460: FILE: drivers/block/drbd/drbd_receiver.c:1401:
+ * drbd_process_done_ee() by asender only */
                              ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1460: FILE: drivers/block/drbd/drbd_receiver.c:1401:
+ * drbd_process_done_ee() by asender only */

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#1467: FILE: drivers/block/drbd/drbd_receiver.c:1408:
+	D_ASSERT(hlist_unhashed(&e->colision));
 	                            ^^^^^^^^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1484: FILE: drivers/block/drbd/drbd_receiver.c:1425:
+STATIC int recv_resync_read(struct drbd_conf *mdev, sector_t sector, int data_size) __releases(local)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1502: FILE: drivers/block/drbd/drbd_receiver.c:1443:
+	 * respective _drbd_clear_done_ee */

CHECK:CAMELCASE: Avoid CamelCase: <receive_DataReply>
#1517: FILE: drivers/block/drbd/drbd_receiver.c:1458:
+STATIC int receive_DataReply(struct drbd_conf *mdev, struct p_header *h)

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#1543: FILE: drivers/block/drbd/drbd_receiver.c:1484:
+	/* hlist_del(&req->colision) is done in _req_may_be_done, to avoid
 	                   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1545: FILE: drivers/block/drbd/drbd_receiver.c:1486:
+	 * still no race with drbd_fail_pending_reads */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1552: FILE: drivers/block/drbd/drbd_receiver.c:1493:
+	 * in case we are "on-disconnect: freeze" */

CHECK:CAMELCASE: Avoid CamelCase: <receive_RSDataReply>
#1557: FILE: drivers/block/drbd/drbd_receiver.c:1498:
+STATIC int receive_RSDataReply(struct drbd_conf *mdev, struct p_header *h)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1578: FILE: drivers/block/drbd/drbd_receiver.c:1519:
+		 * or in drbd_endio_write_sec. */

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#1593: FILE: drivers/block/drbd/drbd_receiver.c:1534:
+ * this means this function only runs in the asender thread
                                              ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1621: FILE: drivers/block/drbd/drbd_receiver.c:1562:
+			 * maybe assert this?  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1629: FILE: drivers/block/drbd/drbd_receiver.c:1570:
+	 * P_WRITE_ACK / P_NEG_ACK, to get the sequence number right.  */

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#1632: FILE: drivers/block/drbd/drbd_receiver.c:1573:
+		D_ASSERT(!hlist_unhashed(&e->colision));
 		                             ^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#1633: FILE: drivers/block/drbd/drbd_receiver.c:1574:
+		hlist_del_init(&e->colision);
 		                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#1636: FILE: drivers/block/drbd/drbd_receiver.c:1577:
+		D_ASSERT(hlist_unhashed(&e->colision));
 		                            ^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#1653: FILE: drivers/block/drbd/drbd_receiver.c:1594:
+	D_ASSERT(!hlist_unhashed(&e->colision));
 	                             ^^^^^^^^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#1654: FILE: drivers/block/drbd/drbd_receiver.c:1595:
+	hlist_del_init(&e->colision);
 	                   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1682: FILE: drivers/block/drbd/drbd_receiver.c:1623:
+ * -ERESTARTSYS if we were interrupted (by disconnect signal). */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1689: FILE: drivers/block/drbd/drbd_receiver.c:1630:
+	int ret = 0;
+	spin_lock(&mdev->peer_seq_lock);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1692: FILE: drivers/block/drbd/drbd_receiver.c:1633:
+		if (seq_le(packet_seq, mdev->peer_seq+1))
 		                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1700: FILE: drivers/block/drbd/drbd_receiver.c:1641:
+		timeout = schedule_timeout(30*HZ);
 		                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1709: FILE: drivers/block/drbd/drbd_receiver.c:1650:
+	if (mdev->peer_seq+1 == packet_seq)
 	                  ^

CHECK:CAMELCASE: Avoid CamelCase: <receive_Data>
#1716: FILE: drivers/block/drbd/drbd_receiver.c:1657:
+STATIC int receive_Data(struct drbd_conf *mdev, struct p_header *h)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1736: FILE: drivers/block/drbd/drbd_receiver.c:1677:
+		 * or in drbd_endio_write_sec. */

WARNING:SPLIT_STRING: quoted string split across lines
#1739: FILE: drivers/block/drbd/drbd_receiver.c:1680:
+			dev_err(DEV, "Can not write mirrored data block "
+			    "to local disk.\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1741: FILE: drivers/block/drbd/drbd_receiver.c:1682:
+		if (mdev->peer_seq+1 == be32_to_cpu(p->seq_num))
 		                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1768: FILE: drivers/block/drbd/drbd_receiver.c:1709:
+		/* Issue a barrier if we start a new epoch, and the previous epoch
+		   was not a epoch containing a single request which already was

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1769: FILE: drivers/block/drbd/drbd_receiver.c:1710:
+		   a Barrier. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1774: FILE: drivers/block/drbd/drbd_receiver.c:1715:
+			rw |= (1<<BIO_RW_BARRIER);
 			        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1783: FILE: drivers/block/drbd/drbd_receiver.c:1724:
+				rw |= (1<<BIO_RW_BARRIER);
 				        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1792: FILE: drivers/block/drbd/drbd_receiver.c:1733:
+		rw |= (1<<BIO_RW_BARRIER);
 		        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1794: FILE: drivers/block/drbd/drbd_receiver.c:1735:
+		rw |= (1<<BIO_RW_SYNCIO) | (1<<BIO_RW_UNPLUG);
 		        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1794: FILE: drivers/block/drbd/drbd_receiver.c:1735:
+		rw |= (1<<BIO_RW_SYNCIO) | (1<<BIO_RW_UNPLUG);
 		                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1803: FILE: drivers/block/drbd/drbd_receiver.c:1744:
+		 * we may sleep in drbd_wait_peer_seq */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1813: FILE: drivers/block/drbd/drbd_receiver.c:1754:
+		BUG_ON(mdev->ee_hash == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mdev->ee_hash"
#1813: FILE: drivers/block/drbd/drbd_receiver.c:1754:
+		BUG_ON(mdev->ee_hash == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1814: FILE: drivers/block/drbd/drbd_receiver.c:1755:
+		BUG_ON(mdev->tl_hash == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mdev->tl_hash"
#1814: FILE: drivers/block/drbd/drbd_receiver.c:1755:
+		BUG_ON(mdev->tl_hash == NULL);

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#1855: FILE: drivers/block/drbd/drbd_receiver.c:1796:
+		hlist_add_head(&e->colision, ee_hash_slot(mdev, sector));
 		                   ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1863: FILE: drivers/block/drbd/drbd_receiver.c:1804:
+			int have_conflict = 0;
+			prepare_to_wait(&mdev->misc_wait, &wait,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1864: FILE: drivers/block/drbd/drbd_receiver.c:1805:
+			prepare_to_wait(&mdev->misc_wait, &wait,
+				TASK_INTERRUPTIBLE);

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#1865: FILE: drivers/block/drbd/drbd_receiver.c:1806:
+			hlist_for_each_entry(i, n, slot, colision) {
 			                                 ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1868: FILE: drivers/block/drbd/drbd_receiver.c:1809:
+					 * we may be woken up early... */

WARNING:SPLIT_STRING: quoted string split across lines
#1871: FILE: drivers/block/drbd/drbd_receiver.c:1812:
+						dev_alert(DEV, "%s[%u] Concurrent local write detected!"
+						      "	new: %llus +%u; pending: %llus +%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1887: FILE: drivers/block/drbd/drbd_receiver.c:1828:
+				dev_alert(DEV, "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
+				     (unsigned long long)sector);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1895: FILE: drivers/block/drbd/drbd_receiver.c:1836:
+				 * but I don't like the receiver using the msock */

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#1904: FILE: drivers/block/drbd/drbd_receiver.c:1845:
+				hlist_del_init(&e->colision);
 				                   ^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1916: FILE: drivers/block/drbd/drbd_receiver.c:1857:
+				dev_alert(DEV, "Concurrent write! [W AFTERWARDS] "
+				     "sec=%llus\n", (unsigned long long)sector);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1919: FILE: drivers/block/drbd/drbd_receiver.c:1860:
+				 * there must be none now. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1935: FILE: drivers/block/drbd/drbd_receiver.c:1876:
+		 * respective _drbd_clear_done_ee */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1939: FILE: drivers/block/drbd/drbd_receiver.c:1880:
+		 * sends on the msock, but anyways */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1966: FILE: drivers/block/drbd/drbd_receiver.c:1907:
+	 * receive a barrier... atomic_inc(&mdev->epoch_size); */

CHECK:CAMELCASE: Avoid CamelCase: <receive_DataRequest>
#1972: FILE: drivers/block/drbd/drbd_receiver.c:1913:
+STATIC int receive_DataRequest(struct drbd_conf *mdev, struct p_header *h)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1982: FILE: drivers/block/drbd/drbd_receiver.c:1923:
+	const int brps = sizeof(*p)-sizeof(*h);
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1992: FILE: drivers/block/drbd/drbd_receiver.c:1933:
+		dev_err(DEV, "%s:%d: sector: %llus, size: %u\n", __FILE__, __LINE__,
+				(unsigned long long)sector, size);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1995: FILE: drivers/block/drbd/drbd_receiver.c:1936:
+	if (sector + (size>>9) > capacity) {
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1997: FILE: drivers/block/drbd/drbd_receiver.c:1938:
+		dev_err(DEV, "%s:%d: sector: %llus, size: %u\n", __FILE__, __LINE__,
+				(unsigned long long)sector, size);

WARNING:SPLIT_STRING: quoted string split across lines
#2004: FILE: drivers/block/drbd/drbd_receiver.c:1945:
+			dev_err(DEV, "Can not satisfy peer's read request, "
+			    "no local data.\n");

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2006: FILE: drivers/block/drbd/drbd_receiver.c:1947:
+				 P_NEG_RS_DREPLY , p);
 				                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2034: FILE: drivers/block/drbd/drbd_receiver.c:1975:
+			 * probably connection lost! */

WARNING:SPACING: space prohibited before semicolon
#2045: FILE: drivers/block/drbd/drbd_receiver.c:1986:
+		digest_size = h->length - brps ;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2054: FILE: drivers/block/drbd/drbd_receiver.c:1995:
+		di->digest = (((char *)di)+sizeof(struct digest_info));
 		                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2093: FILE: drivers/block/drbd/drbd_receiver.c:2034:
+			 * probably connection lost! */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2101: FILE: drivers/block/drbd/drbd_receiver.c:2042:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_DataRequest', this function's name, in a string
#2103: FILE: drivers/block/drbd/drbd_receiver.c:2044:
+		dev_err(DEV, "unexpected command (%s) in receive_DataRequest\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2104: FILE: drivers/block/drbd/drbd_receiver.c:2045:
+		dev_err(DEV, "unexpected command (%s) in receive_DataRequest\n",
+		    cmdname(h->command));

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2150: FILE: drivers/block/drbd/drbd_receiver.c:2091:
+		/* Else fall through to one of the other strategies... */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2160: FILE: drivers/block/drbd/drbd_receiver.c:2101:
+		/* Else fall through to one of the other strategies... */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2168: FILE: drivers/block/drbd/drbd_receiver.c:2109:
+			break;
+		} else {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2169: FILE: drivers/block/drbd/drbd_receiver.c:2110:
+			if (ch_peer == 0) { rv =  1; break; }

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2170: FILE: drivers/block/drbd/drbd_receiver.c:2111:
+			if (ch_self == 0) { rv = -1; break; }

CHECK:BRACES: braces {} should be used on all arms of this statement
#2225: FILE: drivers/block/drbd/drbd_receiver.c:2166:
+		if (hg == -1 && mdev->state.role == R_PRIMARY) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'Sucessfully' may be misspelled - perhaps 'Successfully'?
#2230: FILE: drivers/block/drbd/drbd_receiver.c:2171:
+				dev_warn(DEV, "Sucessfully gave up primary role.\n");
 				               ^^^^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#2233: FILE: drivers/block/drbd/drbd_receiver.c:2174:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2264: FILE: drivers/block/drbd/drbd_receiver.c:2205:
+		if (hg == -1) {
[...]
+		} else
[...]

WARNING:TYPO_SPELLING: 'Sucessfully' may be misspelled - perhaps 'Successfully'?
#2269: FILE: drivers/block/drbd/drbd_receiver.c:2210:
+				dev_warn(DEV, "Sucessfully gave up primary role.\n");
 				               ^^^^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#2272: FILE: drivers/block/drbd/drbd_receiver.c:2213:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2287: FILE: drivers/block/drbd/drbd_receiver.c:2228:
+	dev_info(DEV, "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
+	     text,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2297: FILE: drivers/block/drbd/drbd_receiver.c:2238:
+/*
+  100	after split brain try auto recover

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2320: FILE: drivers/block/drbd/drbd_receiver.c:2261:
+	if ((self == UUID_JUST_CREATED || self == (u64)0) &&
+	     peer != UUID_JUST_CREATED)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2335: FILE: drivers/block/drbd/drbd_receiver.c:2276:
+		 * next bit (weight 2) is set when peer was primary */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2338: FILE: drivers/block/drbd/drbd_receiver.c:2279:
+		case 0: /* !self_pri && !peer_pri */ return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2339: FILE: drivers/block/drbd/drbd_receiver.c:2280:
+		case 1: /*  self_pri && !peer_pri */ return 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2340: FILE: drivers/block/drbd/drbd_receiver.c:2281:
+		case 2: /* !self_pri &&  peer_pri */ return -1;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2392: FILE: drivers/block/drbd/drbd_receiver.c:2333:
+/* drbd_sync_handshake() returns the new conn state on success, or
+   CONN_MASK (-1) on failure.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2420: FILE: drivers/block/drbd/drbd_receiver.c:2361:
+	if    ((mydisk == D_INCONSISTENT && peer_disk > D_INCONSISTENT) ||
+	    (peer_disk == D_INCONSISTENT && mydisk    > D_INCONSISTENT)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2422: FILE: drivers/block/drbd/drbd_receiver.c:2363:
+		int f = (hg == -100) || abs(hg) == 2;
+		hg = mydisk > D_INCONSISTENT ? 1 : -1;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2424: FILE: drivers/block/drbd/drbd_receiver.c:2365:
+			hg = hg*2;
 			       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2426: FILE: drivers/block/drbd/drbd_receiver.c:2367:
+		dev_info(DEV, "Becoming sync %s due to disk states.\n",
+		     hg > 0 ? "source" : "target");

WARNING:SPLIT_STRING: quoted string split across lines
#2447: FILE: drivers/block/drbd/drbd_receiver.c:2388:
+			dev_warn(DEV, "Split-Brain detected, %d primaries, "
+			     "automatically solved. Sync from %s node\n",

WARNING:SPLIT_STRING: quoted string split across lines
#2451: FILE: drivers/block/drbd/drbd_receiver.c:2392:
+				dev_warn(DEV, "Doing a full sync, since"
+				     " UUIDs where ambiguous.\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2452: FILE: drivers/block/drbd/drbd_receiver.c:2393:
+				hg = hg*2;
 				       ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2458: FILE: drivers/block/drbd/drbd_receiver.c:2399:
+		if (mdev->net_conf->want_lose && !(mdev->p_uuid[UI_FLAGS]&1))
 		                                                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2460: FILE: drivers/block/drbd/drbd_receiver.c:2401:
+		if (!mdev->net_conf->want_lose && (mdev->p_uuid[UI_FLAGS]&1))
 		                                                         ^

WARNING:SPLIT_STRING: quoted string split across lines
#2465: FILE: drivers/block/drbd/drbd_receiver.c:2406:
+			dev_warn(DEV, "Split-Brain detected, manually solved. "
+			     "Sync from %s node\n",

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2485: FILE: drivers/block/drbd/drbd_receiver.c:2426:
+			/* fall through */

WARNING:SPLIT_STRING: quoted string split across lines
#2491: FILE: drivers/block/drbd/drbd_receiver.c:2432:
+			dev_warn(DEV, "Becoming SyncTarget, violating the stable-data"
+			     "assumption\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#2491: FILE: drivers/block/drbd/drbd_receiver.c:2432:
+			dev_warn(DEV, "Becoming SyncTarget, violating the stable-data"
+			     "assumption\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2509: FILE: drivers/block/drbd/drbd_receiver.c:2450:
+			dev_info(DEV, "No resync, but %lu bits in bitmap!\n",
+			     drbd_bm_total_weight(mdev));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2596: FILE: drivers/block/drbd/drbd_receiver.c:2537:
+		p_integrity_alg[SHARED_SECRET_MAX-1] = 0;
 		                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2602: FILE: drivers/block/drbd/drbd_receiver.c:2543:
+		dev_info(DEV, "data-integrity-alg: %s\n",
+		     my_alg[0] ? my_alg : (unsigned char *)"<not-used>");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2616: FILE: drivers/block/drbd/drbd_receiver.c:2557:
+ *         or the crypto hash ptr, if it worked out ok. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2618: FILE: drivers/block/drbd/drbd_receiver.c:2559:
+struct crypto_hash *drbd_crypto_alloc_digest_safe(const struct drbd_conf *mdev,
+		const char *alg, const char *name)

CHECK:CAMELCASE: Avoid CamelCase: <receive_SyncParam>
#2639: FILE: drivers/block/drbd/drbd_receiver.c:2580:
+STATIC int receive_SyncParam(struct drbd_conf *mdev, struct p_header *h)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2655: FILE: drivers/block/drbd/drbd_receiver.c:2596:
+		dev_err(DEV, "SyncParam packet too long: received %u, expected <= %u bytes\n",
+		    h->length, exp_max_sz);

WARNING:SPLIT_STRING: quoted string split across lines
#2680: FILE: drivers/block/drbd/drbd_receiver.c:2621:
+				dev_err(DEV, "verify-alg too long, "
+				    "peer wants %u, accepting only %u byte\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2690: FILE: drivers/block/drbd/drbd_receiver.c:2631:
+			D_ASSERT(p->verify_alg[data_size-1] == 0);
 			                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2691: FILE: drivers/block/drbd/drbd_receiver.c:2632:
+			p->verify_alg[data_size-1] = 0;
 			                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2696: FILE: drivers/block/drbd/drbd_receiver.c:2637:
+			D_ASSERT(p->verify_alg[SHARED_SECRET_MAX-1] == 0);
 			                                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2697: FILE: drivers/block/drbd/drbd_receiver.c:2638:
+			D_ASSERT(p->csums_alg[SHARED_SECRET_MAX-1] == 0);
 			                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2698: FILE: drivers/block/drbd/drbd_receiver.c:2639:
+			p->verify_alg[SHARED_SECRET_MAX-1] = 0;
 			                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2699: FILE: drivers/block/drbd/drbd_receiver.c:2640:
+			p->csums_alg[SHARED_SECRET_MAX-1] = 0;
 			                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2705: FILE: drivers/block/drbd/drbd_receiver.c:2646:
+				dev_err(DEV, "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
+				    mdev->sync_conf.verify_alg, p->verify_alg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2709: FILE: drivers/block/drbd/drbd_receiver.c:2650:
+			verify_tfm = drbd_crypto_alloc_digest_safe(mdev,
+					p->verify_alg, "verify-alg");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2717: FILE: drivers/block/drbd/drbd_receiver.c:2658:
+				dev_err(DEV, "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
+				    mdev->sync_conf.csums_alg, p->csums_alg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2721: FILE: drivers/block/drbd/drbd_receiver.c:2662:
+			csums_tfm = drbd_crypto_alloc_digest_safe(mdev,
+					p->csums_alg, "csums-alg");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2726: FILE: drivers/block/drbd/drbd_receiver.c:2667:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2756: FILE: drivers/block/drbd/drbd_receiver.c:2697:
+	 * of distributed TCQ */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2761: FILE: drivers/block/drbd/drbd_receiver.c:2702:
+static void warn_if_differ_considerably(struct drbd_conf *mdev,
+	const char *s, sector_t a, sector_t b)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2764: FILE: drivers/block/drbd/drbd_receiver.c:2705:
+	sector_t d;
+	if (a == 0 || b == 0)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2767: FILE: drivers/block/drbd/drbd_receiver.c:2708:
+	if (d > (a>>3) || d > (b>>3))
 	          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2767: FILE: drivers/block/drbd/drbd_receiver.c:2708:
+	if (d > (a>>3) || d > (b>>3))
 	                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2769: FILE: drivers/block/drbd/drbd_receiver.c:2710:
+		dev_warn(DEV, "Considerable difference in %s: %llus vs. %llus\n", s,
+		     (unsigned long long)a, (unsigned long long)b);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2781: FILE: drivers/block/drbd/drbd_receiver.c:2722:
+	ERR_IF(h->length != (sizeof(*p)-sizeof(*h))) return FALSE;
 	                               ^

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#2795: FILE: drivers/block/drbd/drbd_receiver.c:2736:
+	 * we still need to figure out wether we accept that. */
 	                               ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2795: FILE: drivers/block/drbd/drbd_receiver.c:2736:
+	 * we still need to figure out wether we accept that. */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2798: FILE: drivers/block/drbd/drbd_receiver.c:2739:
+#define min_not_zero(l, r) (l == 0) ? r : ((r == 0) ? l : min(l, r))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#2798: FILE: drivers/block/drbd/drbd_receiver.c:2739:
+#define min_not_zero(l, r) (l == 0) ? r : ((r == 0) ? l : min(l, r))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'l' may be better as '(l)' to avoid precedence issues
#2798: FILE: drivers/block/drbd/drbd_receiver.c:2739:
+#define min_not_zero(l, r) (l == 0) ? r : ((r == 0) ? l : min(l, r))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#2798: FILE: drivers/block/drbd/drbd_receiver.c:2739:
+#define min_not_zero(l, r) (l == 0) ? r : ((r == 0) ? l : min(l, r))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2801: FILE: drivers/block/drbd/drbd_receiver.c:2742:
+		warn_if_differ_considerably(mdev, "lower level device sizes",
+			   p_size, drbd_get_max_capacity(mdev->bc));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2806: FILE: drivers/block/drbd/drbd_receiver.c:2747:
+		 * param exchange, choose the minimum */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2809: FILE: drivers/block/drbd/drbd_receiver.c:2750:
+			p_usize = min_not_zero((sector_t)mdev->bc->dc.disk_size,
+					     p_usize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2816: FILE: drivers/block/drbd/drbd_receiver.c:2757:
+			dev_info(DEV, "Peer sets u_size to %lu sectors\n",
+			     (unsigned long)mdev->bc->dc.disk_size);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2820: FILE: drivers/block/drbd/drbd_receiver.c:2761:
+		/* Never shrink a device with usable data during connect.
+		   But allow online shrinking if we are connected. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2820: FILE: drivers/block/drbd/drbd_receiver.c:2761:
+		   But allow online shrinking if we are connected. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2848: FILE: drivers/block/drbd/drbd_receiver.c:2789:
+		nconn = drbd_sync_handshake(mdev,
+				mdev->state.peer, mdev->state.pdsk);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2880: FILE: drivers/block/drbd/drbd_receiver.c:2821:
+			 * needs to know my new size... */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2901: FILE: drivers/block/drbd/drbd_receiver.c:2842:
+	ERR_IF(h->length != (sizeof(*p)-sizeof(*h))) return FALSE;
 	                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2905: FILE: drivers/block/drbd/drbd_receiver.c:2846:
+	p_uuid = kmalloc(sizeof(u64)*UI_EXTENDED_SIZE, GFP_KERNEL);
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2918: FILE: drivers/block/drbd/drbd_receiver.c:2859:
+		dev_err(DEV, "Can only connect to data with current UUID=%016llX\n",
+		    (unsigned long long)mdev->ed_uuid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2932: FILE: drivers/block/drbd/drbd_receiver.c:2873:
+			drbd_bitmap_io(mdev, &drbd_bmio_clear_n_write,
+					"clear_n_write from receive_uuids");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_uuids', this function's name, in a string
#2932: FILE: drivers/block/drbd/drbd_receiver.c:2873:
+					"clear_n_write from receive_uuids");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2943: FILE: drivers/block/drbd/drbd_receiver.c:2884:
+	/* Before we test for the disk state, we should wait until an eventually
+	   ongoing cluster wide state change is finished. That is important if

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2945: FILE: drivers/block/drbd/drbd_receiver.c:2886:
+	   new disk state... */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2989: FILE: drivers/block/drbd/drbd_receiver.c:2930:
+	ERR_IF(h->length != (sizeof(*p)-sizeof(*h))) return FALSE;
 	                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3021: FILE: drivers/block/drbd/drbd_receiver.c:2962:
+	ERR_IF(h->length != (sizeof(*p)-sizeof(*h)))
 	                               ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3037: FILE: drivers/block/drbd/drbd_receiver.c:2978:
+	oconn = nconn = mdev->state.conn;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3096: FILE: drivers/block/drbd/drbd_receiver.c:3037:
+		    peer_state.disk != D_NEGOTIATING ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3099: FILE: drivers/block/drbd/drbd_receiver.c:3040:
+			/* Nowadays only used when forcing a node into primary role and
+			   setting its disk to UpTpDate with that */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3099: FILE: drivers/block/drbd/drbd_receiver.c:3040:
+			   setting its disk to UpTpDate with that */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3122: FILE: drivers/block/drbd/drbd_receiver.c:3063:
+	ERR_IF(h->length != (sizeof(*p)-sizeof(*h))) return FALSE;
 	                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3127: FILE: drivers/block/drbd/drbd_receiver.c:3068:
+	/* Here the _drbd_uuid_ functions are right, current should
+	   _not_ be rotated into the history */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3127: FILE: drivers/block/drbd/drbd_receiver.c:3068:
+	   _not_ be rotated into the history */

CHECK:BRACES: braces {} should be used on all arms of this statement
#3128: FILE: drivers/block/drbd/drbd_receiver.c:3069:
+	if (inc_local_if_state(mdev, D_NEGOTIATING)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3135: FILE: drivers/block/drbd/drbd_receiver.c:3076:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3145: FILE: drivers/block/drbd/drbd_receiver.c:3086:
+receive_bitmap_plain(struct drbd_conf *mdev, struct p_header *h,
+	unsigned long *buffer, struct bm_xfer_ctx *c)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3147: FILE: drivers/block/drbd/drbd_receiver.c:3088:
+	unsigned num_words = min_t(size_t, BM_PACKET_WORDS, c->bm_words - c->word_offset);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3148: FILE: drivers/block/drbd/drbd_receiver.c:3089:
+	unsigned want = num_words * sizeof(long);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3171: FILE: drivers/block/drbd/drbd_receiver.c:3112:
+recv_bm_rle_bits(struct drbd_conf *mdev,
+		struct p_compressed_bm *p,

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#3197: FILE: drivers/block/drbd/drbd_receiver.c:3138:
+			e = s + rl -1;
 			           ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#3199: FILE: drivers/block/drbd/drbd_receiver.c:3140:
+				dev_err(DEV, "bitmap overflow (e:%lu) while decoding bm RLE packet\n", e);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3238: FILE: drivers/block/drbd/drbd_receiver.c:3179:
+	 * during all our tests. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3246: FILE: drivers/block/drbd/drbd_receiver.c:3187:
+void INFO_bm_xfer_stats(struct drbd_conf *mdev,
+		const char *direction, struct bm_xfer_ctx *c)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3249: FILE: drivers/block/drbd/drbd_receiver.c:3190:
+	unsigned plain = sizeof(struct p_header) *

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3250: FILE: drivers/block/drbd/drbd_receiver.c:3191:
+		((c->bm_words+BM_PACKET_WORDS-1)/BM_PACKET_WORDS+1)
 		             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3250: FILE: drivers/block/drbd/drbd_receiver.c:3191:
+		((c->bm_words+BM_PACKET_WORDS-1)/BM_PACKET_WORDS+1)
 		                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3250: FILE: drivers/block/drbd/drbd_receiver.c:3191:
+		((c->bm_words+BM_PACKET_WORDS-1)/BM_PACKET_WORDS+1)
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3250: FILE: drivers/block/drbd/drbd_receiver.c:3191:
+		((c->bm_words+BM_PACKET_WORDS-1)/BM_PACKET_WORDS+1)
 		                                                ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3252: FILE: drivers/block/drbd/drbd_receiver.c:3193:
+	unsigned total = c->bytes[0] + c->bytes[1];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3253: FILE: drivers/block/drbd/drbd_receiver.c:3194:
+	unsigned r;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3264: FILE: drivers/block/drbd/drbd_receiver.c:3205:
+	r = (total > UINT_MAX/1000) ? (total / (plain/1000))
 	                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3264: FILE: drivers/block/drbd/drbd_receiver.c:3205:
+	r = (total > UINT_MAX/1000) ? (total / (plain/1000))
 	                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#3265: FILE: drivers/block/drbd/drbd_receiver.c:3206:
+^I^I                    : (1000 * total / plain);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPLIT_STRING: quoted string split across lines
#3272: FILE: drivers/block/drbd/drbd_receiver.c:3213:
+	dev_info(DEV, "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), "
+	     "total %u; compression: %u.%u%%\n",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3276: FILE: drivers/block/drbd/drbd_receiver.c:3217:
+			total, r/10, r % 10);
 			        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3280: FILE: drivers/block/drbd/drbd_receiver.c:3221:
+/* Since we are processing the bitfield from lower addresses to higher,
+   it does not matter if the process it in 32 bit chunks or 64 bit

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3286: FILE: drivers/block/drbd/drbd_receiver.c:3227:
+   returns 0 on failure, 1 if we suceessfully received it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3299: FILE: drivers/block/drbd/drbd_receiver.c:3240:
+	 * and allocate that during initial device creation? */

CHECK:SPACING: No space is necessary after a cast
#3300: FILE: drivers/block/drbd/drbd_receiver.c:3241:
+	buffer	 = (unsigned long *) __get_free_page(GFP_NOIO);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3316: FILE: drivers/block/drbd/drbd_receiver.c:3257:
+			 * and the feature is enabled! */

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#3329: FILE: drivers/block/drbd/drbd_receiver.c:3270:
+				dev_err(DEV, "ReportCBitmap packet too small (l:%u)\n", p->head.length);

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#3334: FILE: drivers/block/drbd/drbd_receiver.c:3275:
+			dev_warn(DEV, "receive_bitmap: h->command neither ReportBitMap nor ReportCBitMap (is 0x%x)", h->command);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_bitmap', this function's name, in a string
#3334: FILE: drivers/block/drbd/drbd_receiver.c:3275:
+			dev_warn(DEV, "receive_bitmap: h->command neither ReportBitMap nor ReportCBitMap (is 0x%x)", h->command);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3361: FILE: drivers/block/drbd/drbd_receiver.c:3302:
+		 * other threads may have noticed network errors */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_bitmap', this function's name, in a string
#3362: FILE: drivers/block/drbd/drbd_receiver.c:3303:
+		dev_info(DEV, "unexpected cstate (%s) in receive_bitmap\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3363: FILE: drivers/block/drbd/drbd_receiver.c:3304:
+		dev_info(DEV, "unexpected cstate (%s) in receive_bitmap\n",
+		    conns_to_name(mdev->state.conn));

CHECK:SPACING: No space is necessary after a cast
#3371: FILE: drivers/block/drbd/drbd_receiver.c:3312:
+	free_page((unsigned long) buffer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3382: FILE: drivers/block/drbd/drbd_receiver.c:3323:
+	dev_warn(DEV, "skipping unknown optional packet type %d, l: %d!\n",
+	     h->command, h->length);

CHECK:CAMELCASE: Avoid CamelCase: <receive_UnplugRemote>
#3394: FILE: drivers/block/drbd/drbd_receiver.c:3335:
+STATIC int receive_UnplugRemote(struct drbd_conf *mdev, struct p_header *h)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3400: FILE: drivers/block/drbd/drbd_receiver.c:3341:
+	 * with the data requests being unplugged */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3430: FILE: drivers/block/drbd/drbd_receiver.c:3371:
+	 * the asender_tbl, see get_asender_cmd */

CHECK:CAMELCASE: Avoid CamelCase: <Running>
#3442: FILE: drivers/block/drbd/drbd_receiver.c:3383:
+	while (get_t_state(&mdev->receiver) == Running) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#3449: FILE: drivers/block/drbd/drbd_receiver.c:3390:
+		else if (P_MAY_IGNORE < header->command

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3450: FILE: drivers/block/drbd/drbd_receiver.c:3391:
+		else if (P_MAY_IGNORE < header->command
+		     && header->command < P_MAX_OPT_CMD)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3451: FILE: drivers/block/drbd/drbd_receiver.c:3392:
+			handler = drbd_opt_cmd_handler[header->command-P_MAY_IGNORE];
 			                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3459: FILE: drivers/block/drbd/drbd_receiver.c:3400:
+			dev_err(DEV, "unknown packet type %d, l: %d!\n",
+			    header->command, header->length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3465: FILE: drivers/block/drbd/drbd_receiver.c:3406:
+			dev_err(DEV, "error receiving %s, l: %d!\n",
+			    cmdname(header->command), header->length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3471: FILE: drivers/block/drbd/drbd_receiver.c:3412:
+		trace_drbd_packet(mdev, mdev->data.socket, 2, &mdev->data.rbuf,
+				__FILE__, __LINE__);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3488: FILE: drivers/block/drbd/drbd_receiver.c:3429:
+		slot = mdev->app_reads_hash+i;
 		                           ^

WARNING:TYPO_SPELLING: 'colision' may be misspelled - perhaps 'collision'?
#3489: FILE: drivers/block/drbd/drbd_receiver.c:3430:
+		hlist_for_each_entry_safe(req, pos, tmp, slot, colision) {
 		                                               ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3494: FILE: drivers/block/drbd/drbd_receiver.c:3435:
+			 * and list_del_init here. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3500: FILE: drivers/block/drbd/drbd_receiver.c:3441:
+		if (!hlist_empty(mdev->app_reads_hash+i))
 		                                     ^

WARNING:SPLIT_STRING: quoted string split across lines
#3502: FILE: drivers/block/drbd/drbd_receiver.c:3443:
+			dev_warn(DEV, "ASSERT FAILED: app_reads_hash[%d].first: "
+				"%p, should be NULL\n", i, mdev->app_reads_hash[i].first);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3504: FILE: drivers/block/drbd/drbd_receiver.c:3445:
+	memset(mdev->app_reads_hash, 0, APP_R_HSIZE*sizeof(void *));
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3520: FILE: drivers/block/drbd/drbd_receiver.c:3461:
+		dev_err(DEV, "ASSERT FAILED cstate = %s, expected < WFConnection\n",
+				conns_to_name(mdev->state.conn));

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#3522: FILE: drivers/block/drbd/drbd_receiver.c:3463:
+	/* asender does not clean up anything. it must not interfere, either */
 	   ^^^^^^^

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#3523: FILE: drivers/block/drbd/drbd_receiver.c:3464:
+	drbd_thread_stop(&mdev->asender);
 	                        ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3546: FILE: drivers/block/drbd/drbd_receiver.c:3487:
+	 *  on the fly. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3560: FILE: drivers/block/drbd/drbd_receiver.c:3501:
+	 * to be "canceled" */

WARNING:LINE_SPACING: Missing a blank line after declarations
#3587: FILE: drivers/block/drbd/drbd_receiver.c:3528:
+			enum drbd_disk_state nps = drbd_try_outdate_peer(mdev);
+			drbd_request_state(mdev, NS(pdsk, nps));

WARNING:LINE_SPACING: Missing a blank line after declarations
#3603: FILE: drivers/block/drbd/drbd_receiver.c:3544:
+		struct hlist_head *h;
+		wait_event(mdev->misc_wait, atomic_read(&mdev->net_cnt) == 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3606: FILE: drivers/block/drbd/drbd_receiver.c:3547:
+		 * while application io is still on the fly */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3614: FILE: drivers/block/drbd/drbd_receiver.c:3555:
+				dev_err(DEV, "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
+						(int)(h - mdev->ee_hash), h->first);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3623: FILE: drivers/block/drbd/drbd_receiver.c:3564:
+				dev_err(DEV, "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
+						(int)(h - mdev->tl_hash), h->first);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3639: FILE: drivers/block/drbd/drbd_receiver.c:3580:
+	 * we already released the socket!? */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mdev->data.socket"
#3676: FILE: drivers/block/drbd/drbd_receiver.c:3617:
+	if (mdev->data.socket == NULL) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#3684: FILE: drivers/block/drbd/drbd_receiver.c:3625:
+	ok = _drbd_send_cmd( mdev, mdev->data.socket, P_HAND_SHAKE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3685: FILE: drivers/block/drbd/drbd_receiver.c:3626:
+	ok = _drbd_send_cmd( mdev, mdev->data.socket, P_HAND_SHAKE,
+			     (struct p_header *)p, sizeof(*p), 0 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3685: FILE: drivers/block/drbd/drbd_receiver.c:3626:
+			     (struct p_header *)p, sizeof(*p), 0 );

CHECK:SPACING: spaces preferred around that '-' (ctx:ExV)
#3702: FILE: drivers/block/drbd/drbd_receiver.c:3643:
+			  -sizeof(struct p_header);
 			  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3715: FILE: drivers/block/drbd/drbd_receiver.c:3656:
+		dev_err(DEV, "expected HandShake packet, received: %s (0x%04x)\n",
+		     cmdname(p->head.command), p->head.command);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3721: FILE: drivers/block/drbd/drbd_receiver.c:3662:
+		dev_err(DEV, "expected HandShake length: %u, received: %u\n",
+		     expect, p->head.length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3733: FILE: drivers/block/drbd/drbd_receiver.c:3674:
+	trace_drbd_packet(mdev, mdev->data.socket, 2, &mdev->data.rbuf,
+			__FILE__, __LINE__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#3740: FILE: drivers/block/drbd/drbd_receiver.c:3681:
+	if (PRO_VERSION_MAX < p->protocol_min ||

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#3741: FILE: drivers/block/drbd/drbd_receiver.c:3682:
+	    PRO_VERSION_MIN > p->protocol_max)

WARNING:SPLIT_STRING: quoted string split across lines
#3747: FILE: drivers/block/drbd/drbd_receiver.c:3688:
+	dev_info(DEV, "Handshake successful: "
+	     "Agreed network protocol version %d\n", mdev->agreed_pro_version);

WARNING:SPLIT_STRING: quoted string split across lines
#3753: FILE: drivers/block/drbd/drbd_receiver.c:3694:
+	dev_err(DEV, "incompatible DRBD dialects: "
+	    "I support %d-%d, peer supports %d-%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3804: FILE: drivers/block/drbd/drbd_receiver.c:3745:
+		dev_err(DEV, "expected AuthChallenge packet, received: %s (0x%04x)\n",
+		    cmdname(p.command), p.command);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3809: FILE: drivers/block/drbd/drbd_receiver.c:3750:
+	if (p.length > CHALLENGE_LEN*2) {
 	                            ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!peers_ch"
#3816: FILE: drivers/block/drbd/drbd_receiver.c:3757:
+	if (peers_ch == NULL) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#3817: FILE: drivers/block/drbd/drbd_receiver.c:3758:
+	if (peers_ch == NULL) {
+		dev_err(DEV, "kmalloc of peers_ch failed\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!response"
#3832: FILE: drivers/block/drbd/drbd_receiver.c:3773:
+	if (response == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3858: FILE: drivers/block/drbd/drbd_receiver.c:3799:
+		dev_err(DEV, "expected AuthResponse packet, received: %s (0x%04x)\n",
+		    cmdname(p.command), p.command);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3869: FILE: drivers/block/drbd/drbd_receiver.c:3810:
+	rv = drbd_recv(mdev, response , resp_size);
 	                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!response"
#3878: FILE: drivers/block/drbd/drbd_receiver.c:3819:
+	if (response == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3897: FILE: drivers/block/drbd/drbd_receiver.c:3838:
+		dev_info(DEV, "Peer authenticated using %d bytes of '%s' HMAC\n",
+		     resp_size, mdev->net_conf->cram_hmac_alg);

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#3908: FILE: drivers/block/drbd/drbd_receiver.c:3849:
+STATIC int drbdd_init(struct drbd_thread *thi)
                                           ^^^

CHECK:CAMELCASE: Avoid CamelCase: <got_RqSReply>
#3946: FILE: drivers/block/drbd/drbd_receiver.c:3887:
+STATIC int got_RqSReply(struct drbd_conf *mdev, struct p_header *h)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3957: FILE: drivers/block/drbd/drbd_receiver.c:3898:
+		dev_err(DEV, "Requested state change failed by peer: %s (%d)\n",
+		    set_st_err_name(retcode), retcode);

CHECK:CAMELCASE: Avoid CamelCase: <got_Ping>
#3964: FILE: drivers/block/drbd/drbd_receiver.c:3905:
+STATIC int got_Ping(struct drbd_conf *mdev, struct p_header *h)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3968: FILE: drivers/block/drbd/drbd_receiver.c:3909:
+
+}

CHECK:CAMELCASE: Avoid CamelCase: <got_PingAck>
#3970: FILE: drivers/block/drbd/drbd_receiver.c:3911:
+STATIC int got_PingAck(struct drbd_conf *mdev, struct p_header *h)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3973: FILE: drivers/block/drbd/drbd_receiver.c:3914:
+	mdev->meta.socket->sk->sk_rcvtimeo = mdev->net_conf->ping_int*HZ;
 	                                                             ^

CHECK:CAMELCASE: Avoid CamelCase: <got_IsInSync>
#3978: FILE: drivers/block/drbd/drbd_receiver.c:3919:
+STATIC int got_IsInSync(struct drbd_conf *mdev, struct p_header *h)

CHECK:CAMELCASE: Avoid CamelCase: <got_BlockAck>
#3997: FILE: drivers/block/drbd/drbd_receiver.c:3938:
+STATIC int got_BlockAck(struct drbd_conf *mdev, struct p_header *h)

WARNING:SPLIT_STRING: quoted string split across lines
#4035: FILE: drivers/block/drbd/drbd_receiver.c:3976:
+			dev_alert(DEV, "Got DiscardAck packet %llus +%u!"
+			      " DRBD is not a random data generator!\n",

CHECK:CAMELCASE: Avoid CamelCase: <got_NegAck>
#4049: FILE: drivers/block/drbd/drbd_receiver.c:3990:
+STATIC int got_NegAck(struct drbd_conf *mdev, struct p_header *h)

CHECK:CAMELCASE: Avoid CamelCase: <got_NegDReply>
#4083: FILE: drivers/block/drbd/drbd_receiver.c:4024:
+STATIC int got_NegDReply(struct drbd_conf *mdev, struct p_header *h)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4103: FILE: drivers/block/drbd/drbd_receiver.c:4044:
+	dev_err(DEV, "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
+	    (unsigned long long)sector, be32_to_cpu(p->blksize));

CHECK:CAMELCASE: Avoid CamelCase: <got_NegRSDReply>
#4108: FILE: drivers/block/drbd/drbd_receiver.c:4049:
+STATIC int got_NegRSDReply(struct drbd_conf *mdev, struct p_header *h)

CHECK:CAMELCASE: Avoid CamelCase: <got_BarrierAck>
#4131: FILE: drivers/block/drbd/drbd_receiver.c:4072:
+STATIC int got_BarrierAck(struct drbd_conf *mdev, struct p_header *h)

CHECK:CAMELCASE: Avoid CamelCase: <got_OVResult>
#4140: FILE: drivers/block/drbd/drbd_receiver.c:4081:
+STATIC int got_OVResult(struct drbd_conf *mdev, struct p_header *h)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4183: FILE: drivers/block/drbd/drbd_receiver.c:4124:
+		 * see the beginning of drbdd() */

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#4202: FILE: drivers/block/drbd/drbd_receiver.c:4143:
+STATIC int drbd_asender(struct drbd_thread *thi)
                                             ^^^

WARNING:TYPO_SPELLING: 'thi' may be misspelled - perhaps 'the'?
#4219: FILE: drivers/block/drbd/drbd_receiver.c:4160:
+	while (get_t_state(thi) == Running) {
 	                   ^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4224: FILE: drivers/block/drbd/drbd_receiver.c:4165:
+				mdev->net_conf->ping_timeo*HZ/10;
 				                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4224: FILE: drivers/block/drbd/drbd_receiver.c:4165:
+				mdev->net_conf->ping_timeo*HZ/10;
 				                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4228: FILE: drivers/block/drbd/drbd_receiver.c:4169:
+		 * it may hurt latency if we cork without much to send */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4230: FILE: drivers/block/drbd/drbd_receiver.c:4171:
+		if (!mdev->net_conf->no_cork &&
+			3 < atomic_read(&mdev->unacked_cnt))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#4230: FILE: drivers/block/drbd/drbd_receiver.c:4171:
+			3 < atomic_read(&mdev->unacked_cnt))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4246: FILE: drivers/block/drbd/drbd_receiver.c:4187:
+			 * and we start over... */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4259: FILE: drivers/block/drbd/drbd_receiver.c:4200:
+				     buf, expect-received, 0);
 				                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4282: FILE: drivers/block/drbd/drbd_receiver.c:4223:
+			    mdev->net_conf->ping_timeo*HZ/10) {
 			                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4282: FILE: drivers/block/drbd/drbd_receiver.c:4223:
+			    mdev->net_conf->ping_timeo*HZ/10) {
 			                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cmd"
#4295: FILE: drivers/block/drbd/drbd_receiver.c:4236:
+		if (received == expect && cmd == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4298: FILE: drivers/block/drbd/drbd_receiver.c:4239:
+				dev_err(DEV, "magic?? on meta m: 0x%lx c: %d l: %d\n",
+				    (long)be32_to_cpu(h->magic),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cmd"
#4304: FILE: drivers/block/drbd/drbd_receiver.c:4245:
+			if (unlikely(cmd == NULL)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4306: FILE: drivers/block/drbd/drbd_receiver.c:4247:
+				dev_err(DEV, "unknown command?? on meta m: 0x%lx c: %d l: %d\n",
+				    (long)be32_to_cpu(h->magic),

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4311: FILE: drivers/block/drbd/drbd_receiver.c:4252:
+			ERR_IF(len != expect-sizeof(struct p_header)) {
 			                    ^

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4312: FILE: drivers/block/drbd/drbd_receiver.c:4253:
+				trace_drbd_packet(mdev, mdev->meta.socket, 1, (void *)h, __FILE__, __LINE__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cmd"
#4318: FILE: drivers/block/drbd/drbd_receiver.c:4259:
+			D_ASSERT(cmd != NULL);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#4319: FILE: drivers/block/drbd/drbd_receiver.c:4260:
+			trace_drbd_packet(mdev, mdev->meta.socket, 1, (void *)h, __FILE__, __LINE__);

WARNING:TYPO_SPELLING: 'asender' may be misspelled - perhaps 'ascender'?
#4341: FILE: drivers/block/drbd/drbd_receiver.c:4282:
+	dev_info(DEV, "asender terminated\n");
 	               ^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131904.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 186 warnings, 181 checks, 4285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131904.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
