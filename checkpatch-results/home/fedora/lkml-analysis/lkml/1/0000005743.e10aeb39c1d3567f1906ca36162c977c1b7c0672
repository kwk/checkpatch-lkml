WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/libata-dev.git upstream-linus

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ahci_show_host_caps' to 'ahci_host_caps_show'
#232: FILE: drivers/ata/ahci.c:378:
+static DEVICE_ATTR(ahci_host_caps, S_IRUGO, ahci_show_host_caps, NULL);

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#232: FILE: drivers/ata/ahci.c:378:
+static DEVICE_ATTR(ahci_host_caps, S_IRUGO, ahci_show_host_caps, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ahci_show_host_cap2' to 'ahci_host_cap2_show'
#233: FILE: drivers/ata/ahci.c:379:
+static DEVICE_ATTR(ahci_host_cap2, S_IRUGO, ahci_show_host_cap2, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#233: FILE: drivers/ata/ahci.c:379:
+static DEVICE_ATTR(ahci_host_cap2, S_IRUGO, ahci_show_host_cap2, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ahci_show_host_version' to 'ahci_host_version_show'
#234: FILE: drivers/ata/ahci.c:380:
+static DEVICE_ATTR(ahci_host_version, S_IRUGO, ahci_show_host_version, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#234: FILE: drivers/ata/ahci.c:380:
+static DEVICE_ATTR(ahci_host_version, S_IRUGO, ahci_show_host_version, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ahci_show_port_cmd' to 'ahci_port_cmd_show'
#235: FILE: drivers/ata/ahci.c:381:
+static DEVICE_ATTR(ahci_port_cmd, S_IRUGO, ahci_show_port_cmd, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#235: FILE: drivers/ata/ahci.c:381:
+static DEVICE_ATTR(ahci_port_cmd, S_IRUGO, ahci_show_port_cmd, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#291: FILE: drivers/ata/ahci.c:2130:
+	BUG_ON(!pp->fbs_enabled);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#304: FILE: drivers/ata/ahci.c:2143:
+		dev_printk(KERN_ERR, ap->host->dev,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmp < ap->nr_pmp_links'
#328: FILE: drivers/ata/ahci.c:2164:
+		if ((fbs & PORT_FBS_SDE) && (pmp < ap->nr_pmp_links) &&
+		    ata_link_online(&ap->pmp_link[pmp])) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Unbalanced braces around else statement
#334: FILE: drivers/ata/ahci.c:2170:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#348: FILE: drivers/ata/ahci.c:2231:
+		if (fbs_need_dec)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#350: FILE: drivers/ata/ahci.c:2233:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#366: FILE: drivers/ata/ahci.c:2255:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#384: FILE: drivers/ata/ahci.c:2313:
+			if (pp->fbs_enabled)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#386: FILE: drivers/ata/ahci.c:2315:
+			else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#389: FILE: drivers/ata/ahci.c:2318:
+				u32 f0 = le32_to_cpu(f[0]);
+				if (f0 & (1 << 15))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: drivers/ata/ahci.c:2417:
+		u32 fbs = readl(port_mmio + PORT_FBS);
+		fbs &= ~(PORT_FBS_DEV_MASK | PORT_FBS_DEC);

CHECK:BRACES: braces {} should be used on all arms of this statement
#448: FILE: drivers/ata/ahci.c:2509:
+	if (fbs & PORT_FBS_EN) {
[...]
+	} else
[...]

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#449: FILE: drivers/ata/ahci.c:2510:
+		dev_printk(KERN_INFO, ap->host->dev, "FBS is enabled.\n");

CHECK:BRACES: Unbalanced braces around else statement
#452: FILE: drivers/ata/ahci.c:2513:
+	} else

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#453: FILE: drivers/ata/ahci.c:2514:
+		dev_printk(KERN_ERR, ap->host->dev, "Failed to enable FBS\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#480: FILE: drivers/ata/ahci.c:2541:
+	if (fbs & PORT_FBS_EN)
[...]
+	else {
[...]

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#481: FILE: drivers/ata/ahci.c:2542:
+		dev_printk(KERN_ERR, ap->host->dev, "Failed to disable FBS\n");

CHECK:BRACES: Unbalanced braces around else statement
#482: FILE: drivers/ata/ahci.c:2543:
+	else {

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#483: FILE: drivers/ata/ahci.c:2544:
+		dev_printk(KERN_INFO, ap->host->dev, "FBS is disabled.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#532: FILE: drivers/ata/ahci.c:2681:
+		u32 cmd = readl(port_mmio + PORT_CMD);
+		if (cmd & PORT_CMD_FBSCP)

WARNING:PREFER_DEV_LEVEL: Prefer dev_warn(... to dev_printk(KERN_WARNING, ...
#535: FILE: drivers/ata/ahci.c:2684:
+			dev_printk(KERN_WARNING, dev,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#674: FILE: drivers/ata/libata-core.c:3237:
+				p.cycle = p.cyc8b = id[ATA_ID_EIDE_PIO];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#677: FILE: drivers/ata/libata-core.c:3240:
+				p.cycle = p.cyc8b = id[ATA_ID_EIDE_PIO_IORDY];

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#739: FILE: drivers/ata/libata-sff.c:1804:
+			if (printk_ratelimit())

WARNING:SPLIT_STRING: quoted string split across lines
#867: FILE: drivers/ata/pata_at91.c:157:
+		dev_warn(ap->dev, "Failed to compute ATA timing %d, "
+			 "set PIO_0 timing\n", ret);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#898: FILE: drivers/ata/pata_atiixp.c:94:
+	unsigned long flags;
+	spin_lock_irqsave(&atiixp_lock, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1004: FILE: drivers/ata/pata_cmd64x.c:129:
+				ata_timing_compute(pair, pair->dma_mode,
+						&tp, T, 0);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1388: FILE: drivers/ata/pata_hpt37x.c:417:
+}
+/**

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1808: FILE: drivers/ata/pata_marvell.c:150:
+#if defined(CONFIG_SATA_AHCI) || defined(CONFIG_SATA_AHCI_MODULE)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2044: FILE: drivers/ata/pata_serverworks.c:331:
+	printk(KERN_WARNING DRV_NAME ": Unable to find bridge.\n");

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2196: FILE: drivers/ata/pata_via.c:95:
+	{ "vx855",	PCI_DEVICE_ID_VIA_VX855,    0x00, 0x2f, ATA_UDMA6, VIA_BAD_AST | VIA_SATA_PATA },

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2197: FILE: drivers/ata/pata_via.c:96:
+	{ "vx800",	PCI_DEVICE_ID_VIA_VX800,    0x00, 0x2f, ATA_UDMA6, VIA_BAD_AST | VIA_SATA_PATA },

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2201: FILE: drivers/ata/pata_via.c:100:
+	{ "cx700",	PCI_DEVICE_ID_VIA_CX700,    0x00, 0x2f, ATA_UDMA6, VIA_BAD_AST | VIA_SATA_PATA },

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2202: FILE: drivers/ata/pata_via.c:101:
+	{ "vt6410",	PCI_DEVICE_ID_VIA_6410,     0x00, 0x2f, ATA_UDMA6, VIA_BAD_AST | VIA_NO_ENABLES },

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2203: FILE: drivers/ata/pata_via.c:102:
+	{ "vt6415",	PCI_DEVICE_ID_VIA_6415,     0x00, 0xff, ATA_UDMA6, VIA_BAD_AST | VIA_NO_ENABLES },

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2217: FILE: drivers/ata/pata_via.c:116:
+	{ "vt82c586b",	PCI_DEVICE_ID_VIA_82C586_0, 0x40, 0x46, ATA_UDMA2, VIA_SET_FIFO | VIA_BAD_PREQ },

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2221: FILE: drivers/ata/pata_via.c:120:
+	{ "vt82c576",	PCI_DEVICE_ID_VIA_82C576,   0x00, 0x2f,      0x00, VIA_SET_FIFO | VIA_NO_UNMASK },

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#2222: FILE: drivers/ata/pata_via.c:121:
+	{ "vt82c576",	PCI_DEVICE_ID_VIA_82C576,   0x00, 0x2f,      0x00, VIA_SET_FIFO | VIA_NO_UNMASK | VIA_BAD_ID },

ERROR:CODE_INDENT: code indent should use tabs where possible
#2408: FILE: drivers/ata/pata_via.c:617:
+ ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2408: FILE: drivers/ata/pata_via.c:617:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2408: FILE: drivers/ata/pata_via.c:617:
+ ^I}$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2472: FILE: drivers/ata/sata_via.c:387:
+	struct ata_port *ap = qc->ap;
+	if ((qc->tf.command == ATA_CMD_PACKET) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qc->tf.command == ATA_CMD_PACKET'
#2472: FILE: drivers/ata/sata_via.c:387:
+	if ((qc->tf.command == ATA_CMD_PACKET) &&
+	    (qc->scsicmd->sc_data_direction == DMA_TO_DEVICE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qc->scsicmd->sc_data_direction == DMA_TO_DEVICE'
#2472: FILE: drivers/ata/sata_via.c:387:
+	if ((qc->tf.command == ATA_CMD_PACKET) &&
+	    (qc->scsicmd->sc_data_direction == DMA_TO_DEVICE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id[ATA_ID_CONFIG] == 0x848A'
#2524: FILE: include/linux/ata.h:844:
+	if ((id[ATA_ID_CONFIG] == 0x848A) ||	/* Traditional CF */
+	    (id[ATA_ID_CONFIG] == 0x844A))	/* Delkin Devices CF */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id[ATA_ID_CONFIG] == 0x844A'
#2524: FILE: include/linux/ata.h:844:
+	if ((id[ATA_ID_CONFIG] == 0x848A) ||	/* Traditional CF */
+	    (id[ATA_ID_CONFIG] == 0x844A))	/* Delkin Devices CF */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#2537: FILE: include/linux/libata.h:860:
+	bool (*sff_irq_check)(struct ata_port *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * const * bar" should be "foo * const *bar"
#2547: FILE: include/linux/libata.h:1646:
+		const struct ata_port_info * const * ppi,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005743.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 36 warnings, 19 checks, 2076 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005743.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
