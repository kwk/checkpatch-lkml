WARNING:CONST_STRUCT: struct seq_operations should normally be const
#52: FILE: fs/proc/proc_misc.c:401:
+extern struct seq_operations slubinfo_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#57: FILE: fs/proc/proc_misc.c:406:
+}
+static const struct file_operations proc_slubinfo_operations = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#65: FILE: fs/proc/proc_misc.c:414:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#74: FILE: fs/proc/proc_misc.c:727:
+	create_seq_entry("slubinfo",S_IWUSR|S_IRUGO,&proc_slubinfo_operations);
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#74: FILE: fs/proc/proc_misc.c:727:
+	create_seq_entry("slubinfo",S_IWUSR|S_IRUGO,&proc_slubinfo_operations);
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#74: FILE: fs/proc/proc_misc.c:727:
+	create_seq_entry("slubinfo",S_IWUSR|S_IRUGO,&proc_slubinfo_operations);
 	                                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#74: FILE: fs/proc/proc_misc.c:727:
+	create_seq_entry("slubinfo",S_IWUSR|S_IRUGO,&proc_slubinfo_operations);
 	                                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#74: FILE: fs/proc/proc_misc.c:727:
+	create_seq_entry("slubinfo",S_IWUSR|S_IRUGO,&proc_slubinfo_operations);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:MISORDERED_TYPE: type 'short unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#94: FILE: include/linux/mm_types.h:28:
+			short unsigned int inuse;

WARNING:MISORDERED_TYPE: type 'short unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#95: FILE: include/linux/mm_types.h:29:
+			short unsigned int offset;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#151: FILE: include/linux/slub_def.h:1:
+#ifndef _LINUX_SLUB_DEF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#181: FILE: include/linux/slub_def.h:31:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#181: FILE: include/linux/slub_def.h:31:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#181: FILE: include/linux/slub_def.h:31:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#182: FILE: include/linux/slub_def.h:32:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#182: FILE: include/linux/slub_def.h:32:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#182: FILE: include/linux/slub_def.h:32:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#190: FILE: include/linux/slub_def.h:40:
+	struct mutex flushing;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#237: FILE: include/linux/slub_def.h:87:
+	if (size <          8) return 3;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#238: FILE: include/linux/slub_def.h:88:
+	if (size <         16) return 4;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#239: FILE: include/linux/slub_def.h:89:
+	if (size <         32) return 5;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#240: FILE: include/linux/slub_def.h:90:
+	if (size <         64) return 6;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#241: FILE: include/linux/slub_def.h:91:
+	if (size <        128) return 7;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#242: FILE: include/linux/slub_def.h:92:
+	if (size <        256) return 8;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#243: FILE: include/linux/slub_def.h:93:
+	if (size <        512) return 9;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#244: FILE: include/linux/slub_def.h:94:
+	if (size <       1024) return 10;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#245: FILE: include/linux/slub_def.h:95:
+	if (size <   2 * 1024) return 11;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#246: FILE: include/linux/slub_def.h:96:
+	if (size <   4 * 1024) return 12;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#247: FILE: include/linux/slub_def.h:97:
+	if (size <   8 * 1024) return 13;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#248: FILE: include/linux/slub_def.h:98:
+	if (size <  16 * 1024) return 14;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#249: FILE: include/linux/slub_def.h:99:
+	if (size <  32 * 1024) return 15;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#250: FILE: include/linux/slub_def.h:100:
+	if (size <  64 * 1024) return 16;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#251: FILE: include/linux/slub_def.h:101:
+	if (size < 128 * 1024) return 17;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#252: FILE: include/linux/slub_def.h:102:
+	if (size < 256 * 1024) return 18;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/linux/slub_def.h:130:
+		extern void __kmalloc_size_too_large(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BRACES: braces {} should be used on all arms of this statement
#295: FILE: include/linux/slub_def.h:145:
+	if (__builtin_constant_p(size) && !(flags & SLUB_DMA)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#299: FILE: include/linux/slub_def.h:149:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#305: FILE: include/linux/slub_def.h:155:
+	if (__builtin_constant_p(size) && !(flags & SLUB_DMA)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#309: FILE: include/linux/slub_def.h:159:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: include/linux/slub_def.h:164:
+extern void *__kmalloc_node(size_t size, gfp_t flags, int node);

CHECK:BRACES: braces {} should be used on all arms of this statement
#318: FILE: include/linux/slub_def.h:168:
+	if (__builtin_constant_p(size) && !(flags & SLUB_DMA)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#322: FILE: include/linux/slub_def.h:172:
+	} else

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#352: FILE: init/Kconfig:486:
+choice
+	prompt "Choose SLAB allocator"
+	default SLAB
+	help
+	   This option allows to select a slab allocator.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'chache' may be misspelled - perhaps 'cache'?
#362: FILE: init/Kconfig:496:
+	  well in all environments. It organizes chache hot objects in
 	                                         ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#423: FILE: mm/slub.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#468: FILE: mm/slub.c:46:
+ * PageActive ^I^IThe slab is used as a cpu cache. Allocations$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#469: FILE: mm/slub.c:47:
+ * ^I^I^Imay be performed from the slab. The slab is not$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#470: FILE: mm/slub.c:48:
+ * ^I^I^Ion a partial list.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#473: FILE: mm/slub.c:51:
+ * ^I^I^Ito push back per cpu slabs if they are unused$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#474: FILE: mm/slub.c:52:
+ * ^I^I^Ifor a longer time period.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#477: FILE: mm/slub.c:55:
+ * ^I^I^Ioptions set or a single page slab. This moves$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#478: FILE: mm/slub.c:56:
+ * ^I^I^Islab handling out of the fast path.$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#517: FILE: mm/slub.c:95:
+int slab_is_available(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#526: FILE: mm/slub.c:104:
+ * ^I^I^ICore slab cache functions$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#553: FILE: mm/slub.c:131:
+			printk(KERN_ERR "%10s %p: ", text, addr + i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#556: FILE: mm/slub.c:134:
+		printk(" %02x", addr[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#560: FILE: mm/slub.c:138:
+			printk(" %s\n",ascii);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#560: FILE: mm/slub.c:138:
+			printk(" %s\n",ascii);
 			              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#567: FILE: mm/slub.c:145:
+			printk("   ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#571: FILE: mm/slub.c:149:
+		printk(" %s\n", ascii);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: mm/slub.c:181:
+static void set_track(struct kmem_cache *s, void *object,
+				int alloc, void *addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: mm/slub.c:210:
+		print_section("Redzone", p + s->objsize,
+			s->inuse - s->objsize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#634: FILE: mm/slub.c:212:
+	printk(KERN_ERR "FreePointer %p: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: mm/slub.c:213:
+	printk(KERN_ERR "FreePointer %p: %p\n",
+			p + s->offset,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#639: FILE: mm/slub.c:217:
+		printk(KERN_ERR "Last Allocate from %p. Last Free from %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: mm/slub.c:218:
+		printk(KERN_ERR "Last Allocate from %p. Last Free from %p\n",
+			get_track(s, p, 0), get_track(s, p, 1));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: mm/slub.c:228:
+static void object_err(struct kmem_cache *s, struct page *page,
+			u8 *object, char *reason)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#654: FILE: mm/slub.c:232:
+	printk(KERN_ERR "*** SLUB: %s in %s@%p Slab %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#655: FILE: mm/slub.c:233:
+	printk(KERN_ERR "*** SLUB: %s in %s@%p Slab %p\n",
+			reason, s->name, object, page);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#656: FILE: mm/slub.c:234:
+	printk(KERN_ERR "    offset=%u flags=%04lx inuse=%u freelist=%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: mm/slub.c:235:
+	printk(KERN_ERR "    offset=%u flags=%04lx inuse=%u freelist=%p\n",
+		(int)(object - addr), page->flags, page->inuse, page->freelist);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#673: FILE: mm/slub.c:251:
+		memset(p, POISON_FREE, s->objsize -1);
 		                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#674: FILE: mm/slub.c:252:
+		p[s->objsize -1] = POISON_END;
 		             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: mm/slub.c:257:
+		memset(p + s->objsize,
+			active ? RED_ACTIVE : RED_INACTIVE,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#694: FILE: mm/slub.c:272:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#696: FILE: mm/slub.c:274:
+static int check_valid_pointer(struct kmem_cache *s, struct page *page,
+					 void *object)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#705: FILE: mm/slub.c:283:
+	if (object < base || object >= base + s->objects * s->size ||
+		(object - base) % s->size) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#716: FILE: mm/slub.c:294:
+ * ^I^IBytes of the object to be managed.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#717: FILE: mm/slub.c:295:
+ * ^I^IIf the freepointer may overlay the object then the free$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#718: FILE: mm/slub.c:296:
+ * ^I^Ipointer is the first word of the object.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#719: FILE: mm/slub.c:297:
+ * ^I^IPoisoning uses 0x6b (POISON_FREE) and the last byte is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#720: FILE: mm/slub.c:298:
+ * ^I^I0xa5 (POISON_END)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#723: FILE: mm/slub.c:301:
+ * ^I^IPadding to reach word boundary. This is also used for Redzoning.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#724: FILE: mm/slub.c:302:
+ * ^I^IPadding is extended to word size if Redzoning is enabled$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#725: FILE: mm/slub.c:303:
+ * ^I^Iand objsize == inuse.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#726: FILE: mm/slub.c:304:
+ * ^I^IWe fill with 0x71 (RED_INACTIVE) for inactive objects and with$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#727: FILE: mm/slub.c:305:
+ * ^I^I0xa5 (RED_ACTIVE) for objects in use.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#730: FILE: mm/slub.c:308:
+ * ^I^IA. Free pointer (if we cannot overwrite object on free)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#731: FILE: mm/slub.c:309:
+ * ^I^IB. Tracking data for SLAB_STORE_USER$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#732: FILE: mm/slub.c:310:
+ * ^I^IC. Padding to reach required alignment boundary$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#733: FILE: mm/slub.c:311:
+ * ^I^I^IPadding is done using 0x5a (POISON_INUSE)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#779: FILE: mm/slub.c:357:
+		printk(KERN_ERR "SLUB: %s slab %p: Padding fails check\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: mm/slub.c:358:
+		printk(KERN_ERR "SLUB: %s slab %p: Padding fails check\n",
+			s->name, p);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#788: FILE: mm/slub.c:366:
+static int check_object(struct kmem_cache *s, struct page *page,
+					void *object, int active)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#798: FILE: mm/slub.c:376:
+		if (!check_bytes(endobject,
[...]
+				object_err(s, page, object,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#799: FILE: mm/slub.c:377:
+		if (!check_bytes(endobject,
+			active ? RED_ACTIVE : RED_INACTIVE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: mm/slub.c:380:
+				object_err(s, page, object,
+				active ? "Redzone Active check fails" :

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#806: FILE: mm/slub.c:384:
+	} else
+	if ((s->flags & SLAB_POISON) &&

CHECK:BRACES: Unbalanced braces around else statement
#806: FILE: mm/slub.c:384:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#807: FILE: mm/slub.c:385:
+	if ((s->flags & SLAB_POISON) &&
[...]
+			object_err(s, page, p, "Alignment padding check fails");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#808: FILE: mm/slub.c:386:
+	if ((s->flags & SLAB_POISON) &&
+		s->objsize < s->inuse &&

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#814: FILE: mm/slub.c:392:
+				p[s->objsize -1] != POISON_END)) {
 				             ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#830: FILE: mm/slub.c:408:
+	if (!check_valid_pointer(s, page, get_freepointer(s, p))) {
+			object_err(s, page, p, "Freepointer corrupt");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#846: FILE: mm/slub.c:424:
+		printk(KERN_CRIT "SLUB: %s Not a valid slab page @%p flags=%lx"

WARNING:SPLIT_STRING: quoted string split across lines
#847: FILE: mm/slub.c:425:
+		printk(KERN_CRIT "SLUB: %s Not a valid slab page @%p flags=%lx"
+			" mapping=%p count=%d \n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#847: FILE: mm/slub.c:425:
+			" mapping=%p count=%d \n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#853: FILE: mm/slub.c:431:
+		printk(KERN_CRIT "SLUB: %s Corrupted offset %lu in slab @%p"

WARNING:SPLIT_STRING: quoted string split across lines
#854: FILE: mm/slub.c:432:
+		printk(KERN_CRIT "SLUB: %s Corrupted offset %lu in slab @%p"
+			" flags=%lx mapping=%p count=%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#864: FILE: mm/slub.c:442:
+		printk(KERN_CRIT "SLUB: %s Inuse %u > max %u in slab page @%p"

WARNING:SPLIT_STRING: quoted string split across lines
#865: FILE: mm/slub.c:443:
+		printk(KERN_CRIT "SLUB: %s Inuse %u > max %u in slab page @%p"
+			" flags=%lx mapping=%p count=%d\n",

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#895: FILE: mm/slub.c:473:
+				break;
+			} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#896: FILE: mm/slub.c:474:
+				printk(KERN_ERR "SLUB: %s slab %p freepointer %p corrupted.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: mm/slub.c:475:
+				printk(KERN_ERR "SLUB: %s slab %p freepointer %p corrupted.\n",
+					s->name, page, fp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#911: FILE: mm/slub.c:489:
+		printk(KERN_CRIT "slab %s: page %p wrong object count."

WARNING:SPLIT_STRING: quoted string split across lines
#912: FILE: mm/slub.c:490:
+		printk(KERN_CRIT "slab %s: page %p wrong object count."
+			" counter is %d but counted were %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#921: FILE: mm/slub.c:499:
+static int alloc_object_checks(struct kmem_cache *s, struct page *page,
+							void *object)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#927: FILE: mm/slub.c:505:
+		printk(KERN_ERR "SLAB: %s Object %p@%p already allocated.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#928: FILE: mm/slub.c:506:
+		printk(KERN_ERR "SLAB: %s Object %p@%p already allocated.\n",
+			s->name, object, page);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#945: FILE: mm/slub.c:523:
+		printk("SLUB-Trace %s alloc object=%p slab=%p inuse=%d"

WARNING:SPLIT_STRING: quoted string split across lines
#946: FILE: mm/slub.c:524:
+		printk("SLUB-Trace %s alloc object=%p slab=%p inuse=%d"
+			" freelist=%p\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#963: FILE: mm/slub.c:541:
+	if (!check_slab(s, page)) {
+		goto fail;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#968: FILE: mm/slub.c:546:
+		printk(KERN_ERR "SLUB: %s slab %p invalid object pointer %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: mm/slub.c:547:
+		printk(KERN_ERR "SLUB: %s slab %p invalid object pointer %p\n",
+			s->name, page, object);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#974: FILE: mm/slub.c:552:
+		printk(KERN_CRIT "SLUB: %s slab %p object %p already free.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#975: FILE: mm/slub.c:553:
+		printk(KERN_CRIT "SLUB: %s slab %p object %p already free.\n",
+					s->name, page, object);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#984: FILE: mm/slub.c:562:
+			printk(KERN_CRIT "slab_free %s size %d: attempt to"

WARNING:SPLIT_STRING: quoted string split across lines
#985: FILE: mm/slub.c:563:
+			printk(KERN_CRIT "slab_free %s size %d: attempt to"
+				"free object(%p) outside of slab.\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#985: FILE: mm/slub.c:563:
+			printk(KERN_CRIT "slab_free %s size %d: attempt to"
+				"free object(%p) outside of slab.\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#987: FILE: mm/slub.c:565:
+		else
+		if (!page->slab)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#989: FILE: mm/slub.c:567:
+			printk(KERN_CRIT

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#992: FILE: mm/slub.c:570:
+		else
+		printk(KERN_CRIT "slab_free %s(%d): object at %p"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#993: FILE: mm/slub.c:571:
+		printk(KERN_CRIT "slab_free %s(%d): object at %p"

WARNING:SPLIT_STRING: quoted string split across lines
#994: FILE: mm/slub.c:572:
+		printk(KERN_CRIT "slab_free %s(%d): object at %p"
+				" belongs to slab %s(%d)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1000: FILE: mm/slub.c:578:
+		printk("SLUB-Trace %s free object=%p slab=%p"

WARNING:SPLIT_STRING: quoted string split across lines
#1001: FILE: mm/slub.c:579:
+		printk("SLUB-Trace %s free object=%p slab=%p"
+			"inuse=%d freelist=%p\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#1001: FILE: mm/slub.c:579:
+		printk("SLUB-Trace %s free object=%p slab=%p"
+			"inuse=%d freelist=%p\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1019: FILE: mm/slub.c:597:
+	struct page * page;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1037: FILE: mm/slub.c:615:
+	mod_zone_page_state(page_zone(page),
+		(s->flags & SLAB_RECLAIM_ACCOUNT) ?

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1045: FILE: mm/slub.c:623:
+static void setup_object(struct kmem_cache *s, struct page *page,
+				void *object)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1067: FILE: mm/slub.c:645:
+	BUG_ON(flags & ~(GFP_DMA | GFP_LEVEL_MASK | __GFP_NO_GROW));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1134: FILE: mm/slub.c:712:
+	mod_zone_page_state(page_zone(page),
+		(s->flags & SLAB_RECLAIM_ACCOUNT) ?

ERROR:SPACING: space prohibited after that '-' (ctx:ExW)
#1136: FILE: mm/slub.c:714:
+		- pages);
 		^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1154: FILE: mm/slub.c:732:
+	if (unlikely(s->flags & SLAB_DESTROY_BY_RCU)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1162: FILE: mm/slub.c:740:
+	} else

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1207: FILE: mm/slub.c:785:
+static void __always_inline add_partial(struct kmem_cache *s, struct page *page)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1217: FILE: mm/slub.c:795:
+static void __always_inline remove_partial(struct kmem_cache *s,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1218: FILE: mm/slub.c:796:
+static void __always_inline remove_partial(struct kmem_cache *s,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1234: FILE: mm/slub.c:812:
+static __always_inline int lock_and_del_slab(struct kmem_cache_node *n,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1287: FILE: mm/slub.c:865:
+		if (n && cpuset_zone_allowed_hardwall(*z, flags) &&
+				n->nr_partial > 2) {

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1319: FILE: mm/slub.c:897:
+static void __always_inline putback_slab(struct kmem_cache *s, struct page *page)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1334: FILE: mm/slub.c:912:
+static void __always_inline deactivate_slab(struct kmem_cache *s,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1335: FILE: mm/slub.c:913:
+static void __always_inline deactivate_slab(struct kmem_cache *s,
+						struct page *page, int cpu)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1466: FILE: mm/slub.c:1044:
+	if (unlikely(!page)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1485: FILE: mm/slub.c:1063:
+			if (node == -1 ||
+				page_to_nid(s->cpu_slab[cpu]) == node) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1528: FILE: mm/slub.c:1106:
+	struct page * page;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1558: FILE: mm/slub.c:1136:
+	prior = object[page->offset] = page->freelist;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'Mininum' may be misspelled - perhaps 'Minimum'?
#1626: FILE: mm/slub.c:1204:
+ * Mininum order of slab pages. This influences locking overhead and slab
    ^^^^^^^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1631: FILE: mm/slub.c:1209:
+static int slub_min_order = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1642: FILE: mm/slub.c:1220:
+static int slub_nomerge = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1647: FILE: mm/slub.c:1225:
+static int slub_debug = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1649: FILE: mm/slub.c:1227:
+static char *slub_debug_slabs = NULL;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1678: FILE: mm/slub.c:1256:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1685: FILE: mm/slub.c:1263:
+static unsigned long calculate_alignment(unsigned long flags,
+		unsigned long align)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1705: FILE: mm/slub.c:1283:
+		struct kmem_cache_node *n = s->node[node];
+		if (n && n != &s->local_node)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1736: FILE: mm/slub.c:1314:
+		else
+		if (slab_state == DOWN) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1747: FILE: mm/slub.c:1325:
+			BUG_ON(s->size < sizeof(struct kmem_cache_node));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1751: FILE: mm/slub.c:1329:
+			BUG_ON(!page);

CHECK:BRACES: Unbalanced braces around else statement
#1756: FILE: mm/slub.c:1334:
+		} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*n)...) over kmalloc_node(sizeof(struct kmem_cache_node)...)
#1757: FILE: mm/slub.c:1335:
+			n = kmalloc_node(sizeof(struct kmem_cache_node),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1758: FILE: mm/slub.c:1336:
+			n = kmalloc_node(sizeof(struct kmem_cache_node),
+				gfpflags, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1778: FILE: mm/slub.c:1356:
+static int kmem_cache_open(struct kmem_cache *s, gfp_t gfpflags,
+		const char *name, size_t size,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1786: FILE: mm/slub.c:1364:
+	BUG_ON(flags & SLUB_UNIMPLEMENTED);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1791: FILE: mm/slub.c:1369:
+	if (slub_debug &&
[...]
+			flags |= slub_debug;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1792: FILE: mm/slub.c:1370:
+	if (slub_debug &&
+		(!slub_debug_slabs ||

ERROR:SPACING: spaces required around that '&&' (ctx:WxV)
#1796: FILE: mm/slub.c:1374:
+	if ((flags & SLAB_POISON) &&((flags & SLAB_DESTROY_BY_RCU) ||
 	                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1797: FILE: mm/slub.c:1375:
+	if ((flags & SLAB_POISON) &&((flags & SLAB_DESTROY_BY_RCU) ||
+			ctor || dtor)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1799: FILE: mm/slub.c:1377:
+			printk(KERN_WARNING "SLUB %s: Clearing SLAB_POISON "

WARNING:SPLIT_STRING: quoted string split across lines
#1800: FILE: mm/slub.c:1378:
+			printk(KERN_WARNING "SLUB %s: Clearing SLAB_POISON "
+				"because de/constructor exists.\n",

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#1813: FILE: mm/slub.c:1391:
+		flags &= ~(SLAB_RED_ZONE| SLAB_DEBUG_FREE | \
 		                        ^

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1813: FILE: mm/slub.c:1391:
+		flags &= ~(SLAB_RED_ZONE| SLAB_DEBUG_FREE | \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1835: FILE: mm/slub.c:1413:
+	if (size * 2 < (PAGE_SIZE << calculate_order(size)) &&
+		((flags & (SLAB_DESTROY_BY_RCU | SLAB_POISON)) ||

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1844: FILE: mm/slub.c:1422:
+		 * destructor or are poisoning the objects.
+		*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1872: FILE: mm/slub.c:1450:
+	if (init_kmem_cache_nodes(s, gfpflags & ~SLUB_DMA)) {
+		return 1;
+	}

WARNING:SPLIT_STRING: quoted string split across lines
#1878: FILE: mm/slub.c:1456:
+		panic("Cannot create slab %s size=%lu realsize=%u "
+			"order=%u offset=%u flags=%lx\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1890: FILE: mm/slub.c:1468:
+	struct page * page;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1934: FILE: mm/slub.c:1512:
+static int free_list(struct kmem_cache *s, struct kmem_cache_node *n,
+			struct list_head *list)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1942: FILE: mm/slub.c:1520:
+		if (!page->inuse) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1945: FILE: mm/slub.c:1523:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1981: FILE: mm/slub.c:1559:
+	if (s->refcount)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1983: FILE: mm/slub.c:1561:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1985: FILE: mm/slub.c:1563:
+		BUG_ON(kmem_cache_close(s));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1993: FILE: mm/slub.c:1571:
+static unsigned long slab_objects(struct kmem_cache *s,
+	unsigned long *p_total, unsigned long *p_cpu_slabs,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2056: FILE: mm/slub.c:1634:
+	get_option (&str, &slub_min_order);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2061: FILE: mm/slub.c:1639:
+__setup("slub_min_order=", setup_slub_min_order);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2065: FILE: mm/slub.c:1643:
+	get_option (&str, &slub_min_objects);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2070: FILE: mm/slub.c:1648:
+__setup("slub_min_objects=", setup_slub_min_objects);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2078: FILE: mm/slub.c:1656:
+__setup("slub_nomerge", setup_slub_nomerge);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2082: FILE: mm/slub.c:1660:
+	if (!str || *str != '=')
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2084: FILE: mm/slub.c:1662:
+	else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#2088: FILE: mm/slub.c:1666:
+		else
+		for( ;*str && *str != ','; str++)

ERROR:SPACING: space required after that ';' (ctx:WxO)
#2089: FILE: mm/slub.c:1667:
+		for( ;*str && *str != ','; str++)
 		     ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#2089: FILE: mm/slub.c:1667:
+		for( ;*str && *str != ','; str++)
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#2089: FILE: mm/slub.c:1667:
+		for( ;*str && *str != ','; str++)

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2091: FILE: mm/slub.c:1669:
+			case 'f' : case 'F' : slub_debug |= SLAB_DEBUG_FREE;break;
 			         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2091: FILE: mm/slub.c:1669:
+			case 'f' : case 'F' : slub_debug |= SLAB_DEBUG_FREE;break;
 			                    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2091: FILE: mm/slub.c:1669:
+			case 'f' : case 'F' : slub_debug |= SLAB_DEBUG_FREE;break;
 			                                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2091: FILE: mm/slub.c:1669:
+			case 'f' : case 'F' : slub_debug |= SLAB_DEBUG_FREE;break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2092: FILE: mm/slub.c:1670:
+			case 'z' : case 'Z' : slub_debug |= SLAB_RED_ZONE;break;
 			         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2092: FILE: mm/slub.c:1670:
+			case 'z' : case 'Z' : slub_debug |= SLAB_RED_ZONE;break;
 			                    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2092: FILE: mm/slub.c:1670:
+			case 'z' : case 'Z' : slub_debug |= SLAB_RED_ZONE;break;
 			                                                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2092: FILE: mm/slub.c:1670:
+			case 'z' : case 'Z' : slub_debug |= SLAB_RED_ZONE;break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2093: FILE: mm/slub.c:1671:
+			case 'p' : case 'P' : slub_debug |= SLAB_POISON;break;
 			         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2093: FILE: mm/slub.c:1671:
+			case 'p' : case 'P' : slub_debug |= SLAB_POISON;break;
 			                    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2093: FILE: mm/slub.c:1671:
+			case 'p' : case 'P' : slub_debug |= SLAB_POISON;break;
 			                                               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2093: FILE: mm/slub.c:1671:
+			case 'p' : case 'P' : slub_debug |= SLAB_POISON;break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2094: FILE: mm/slub.c:1672:
+			case 'u' : case 'U' : slub_debug |= SLAB_STORE_USER;break;
 			         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2094: FILE: mm/slub.c:1672:
+			case 'u' : case 'U' : slub_debug |= SLAB_STORE_USER;break;
 			                    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2094: FILE: mm/slub.c:1672:
+			case 'u' : case 'U' : slub_debug |= SLAB_STORE_USER;break;
 			                                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2094: FILE: mm/slub.c:1672:
+			case 'u' : case 'U' : slub_debug |= SLAB_STORE_USER;break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2095: FILE: mm/slub.c:1673:
+			case 't' : case 'T' : slub_debug |= SLAB_TRACE;break;
 			         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#2095: FILE: mm/slub.c:1673:
+			case 't' : case 'T' : slub_debug |= SLAB_TRACE;break;
 			                    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2095: FILE: mm/slub.c:1673:
+			case 't' : case 'T' : slub_debug |= SLAB_TRACE;break;
 			                                              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2095: FILE: mm/slub.c:1673:
+			case 't' : case 'T' : slub_debug |= SLAB_TRACE;break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2097: FILE: mm/slub.c:1675:
+				printk(KERN_CRIT "slub_debug option '%c' unknown. skipped\n",*str);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2097: FILE: mm/slub.c:1675:
+				printk(KERN_CRIT "slub_debug option '%c' unknown. skipped\n",*str);
 				                                                            ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#2097: FILE: mm/slub.c:1675:
+				printk(KERN_CRIT "slub_debug option '%c' unknown. skipped\n",*str);
 				                                                             ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2106: FILE: mm/slub.c:1684:
+__setup("slub_debug", setup_slub_debug);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2109: FILE: mm/slub.c:1687:
+static struct kmem_cache *create_kmalloc_cache(struct kmem_cache *s,
+		const char *name, int size, gfp_t gfp_flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2118: FILE: mm/slub.c:1696:
+	if (!kmem_cache_open(s, gfp_flags, name, size, ARCH_KMALLOC_MINALIGN,
+			flags, NULL, NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2120: FILE: mm/slub.c:1698:
+		panic("Creation of kmalloc slab %s size=%d failed.\n",
+			name, size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2133: FILE: mm/slub.c:1711:
+	BUG_ON(index < 0);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2149: FILE: mm/slub.c:1727:
+		if (!x)
+			panic("Unable to allocate memory for dma cache\n");

CHECK:BRACES: Unbalanced braces around else statement
#2156: FILE: mm/slub.c:1734:
+		else {

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#2157: FILE: mm/slub.c:1735:
+			index -= KMALLOC_SHIFT_HIGH - KMALLOC_SHIFT_LOW +1;
 			                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2166: FILE: mm/slub.c:1744:
+		text = kasprintf(flags & ~SLUB_DMA, "kmalloc_dma-%d",
+				(unsigned int)realsize);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2195: FILE: mm/slub.c:1773:
+	BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2197: FILE: mm/slub.c:1775:
+	BUG_ON(!s);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2258: FILE: mm/slub.c:1836:
+ ^I * If new size fits in the current cache, bail out.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2258: FILE: mm/slub.c:1836:
+ ^I * If new size fits in the current cache, bail out.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2259: FILE: mm/slub.c:1837:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2259: FILE: mm/slub.c:1837:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2264: FILE: mm/slub.c:1842:
+ ^I * We are on the slow-path here so do not use __cache_alloc$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2264: FILE: mm/slub.c:1842:
+ ^I * We are on the slow-path here so do not use __cache_alloc$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2265: FILE: mm/slub.c:1843:
+ ^I * because it bloats kernel text.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2265: FILE: mm/slub.c:1843:
+ ^I * because it bloats kernel text.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2266: FILE: mm/slub.c:1844:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2266: FILE: mm/slub.c:1844:
+ ^I */$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2286: FILE: mm/slub.c:1864:
+	BUG_ON(kmem_cache_node_cache < 0 ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2287: FILE: mm/slub.c:1865:
+	BUG_ON(kmem_cache_node_cache < 0 ||
+		kmem_cache_node_cache > KMALLOC_SHIFT_HIGH);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2306: FILE: mm/slub.c:1884:
+		create_kmalloc_cache(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2326: FILE: mm/slub.c:1904:
+		BUG_ON(!name);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#2333: FILE: mm/slub.c:1911:
+	if (nr_cpu_ids)	/* Remove when nr_cpu_ids was fixed ! */
+	kmem_size = offsetof(struct kmem_cache, cpu_slab)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2337: FILE: mm/slub.c:1915:
+	printk(KERN_INFO "SLUB V5: General Slabs=%ld, HW alignment=%d, "

WARNING:SPLIT_STRING: quoted string split across lines
#2338: FILE: mm/slub.c:1916:
+	printk(KERN_INFO "SLUB V5: General Slabs=%ld, HW alignment=%d, "
+		"Processors=%d, Nodes=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2350: FILE: mm/slub.c:1928:
+static struct kmem_cache *find_mergeable(size_t size,
+		size_t align, unsigned long flags,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#2379: FILE: mm/slub.c:1957:
+		if (((flags | slub_debug) & SLUB_MERGE_SAME) !=
[...]
+				continue;

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#2386: FILE: mm/slub.c:1964:
+		if ((s->size & ~(align -1)) != s->size)
 		                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2398: FILE: mm/slub.c:1976:
+struct kmem_cache *kmem_cache_create(const char *name, size_t size,
+		size_t align, unsigned long flags,

CHECK:BRACES: braces {} should be used on all arms of this statement
#2408: FILE: mm/slub.c:1986:
+		if (!s->aliases)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2410: FILE: mm/slub.c:1988:
+		else {

WARNING:MINMAX: max() should probably be max_t(int, s->inuse, ALIGN(size, sizeof(void *)))
#2422: FILE: mm/slub.c:2000:
+		s->inuse = max(s->inuse, (int)ALIGN(size, sizeof(void *)));

CHECK:BRACES: braces {} should be used on all arms of this statement
#2425: FILE: mm/slub.c:2003:
+		if (s && kmem_cache_open(s, GFP_KERNEL, name,
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2426: FILE: mm/slub.c:2004:
+		if (s && kmem_cache_open(s, GFP_KERNEL, name,
+				size, align, flags, ctor, dtor)) {

CHECK:BRACES: Unbalanced braces around else statement
#2428: FILE: mm/slub.c:2006:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#2459: FILE: mm/slub.c:2037:
+	seq_puts(m, "# name            <objects> <order> <objsize> <objperslab>"
+		" <slabs>/<partial>/<cpu> <flags>");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2520: FILE: mm/slub.c:2098:
+	objects = slab_objects(s, &total_slabs, &cpu_slabs,
+					&partial_slabs, nodes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2555: FILE: mm/slub.c:2133:
+	x = kasprintf(GFP_KERNEL, "%lu/%lu/%lu", total_slabs, partial_slabs,
+						cpu_slabs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2558: FILE: mm/slub.c:2136:
+	seq_printf(m, "%-21s %6lu %1d %6u %4d %12s %7s",
+		s->name, objects, s->order, s->objsize, s->objects, x, options);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#2573: FILE: mm/slub.c:2151:
+struct seq_operations slubinfo_op = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2600: FILE: mm/slub.c:2178:
+static int __cpuinit slab_cpuup_callback(struct notifier_block *nfb,
+		unsigned long action, void *hcpu)

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after slab_notifier
#2615: FILE: mm/slub.c:2193:
+static struct notifier_block __cpuinitdata slab_notifier =

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2616: FILE: mm/slub.c:2194:
+static struct notifier_block __cpuinitdata slab_notifier =
+	{ &slab_cpuup_callback, NULL, 0 };

CHECK:SPACING: No space is necessary after a cast
#2670: FILE: mm/slub.c:2248:
+#define next_reap_node(void) do { } while (0)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2673: FILE: mm/slub.c:2251:
+#define REAPTIMEOUT_CPUC	(2*HZ)
                         	  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2683: FILE: mm/slub.c:2261:
+	schedule_delayed_work(&__get_cpu_var(reap_work),
+				      REAPTIMEOUT_CPUC);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2686: FILE: mm/slub.c:2264:
+static void __devinit start_cpu_timer(int cpu)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reap_work->work.func"
#2695: FILE: mm/slub.c:2273:
+	if (keventd_up() && reap_work->work.func == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#2713: FILE: mm/slub.c:2291:
+__initcall(cpucache_init);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000457557.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 65 errors, 118 warnings, 95 checks, 2633 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000457557.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
