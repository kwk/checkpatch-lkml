WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:CAMELCASE: Avoid CamelCase: <serverName>
#73: FILE: fs/cifs/cifs_debug.c:139:
+					   "displayed\n\t", i, ses->serverName);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPLIT_STRING: quoted string split across lines
#73: FILE: fs/cifs/cifs_debug.c:139:
+				seq_printf(m, "\n%d) entry for %s not fully "
+					   "displayed\n\t", i, ses->serverName);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#79: FILE: fs/cifs/cifs_debug.c:143:
+				    "\n%d) Name: %s  Domain: %s Uses: %d OS:"
+				    " %s\n\tNOS: %s\tCapability: 0x%x\n\tSMB"

CHECK:CAMELCASE: Avoid CamelCase: <cifsTconInfo>
#92: FILE: fs/cifs/cifs_debug.c:164:
+				tcon = list_entry(tmp3, struct cifsTconInfo,

CHECK:CAMELCASE: Avoid CamelCase: <fsDevInfo>
#95: FILE: fs/cifs/cifs_debug.c:167:
+				dev_type = le32_to_cpu(tcon->fsDevInfo.DeviceType);

CHECK:CAMELCASE: Avoid CamelCase: <DeviceType>
#95: FILE: fs/cifs/cifs_debug.c:167:
+				dev_type = le32_to_cpu(tcon->fsDevInfo.DeviceType);

CHECK:CAMELCASE: Avoid CamelCase: <treeName>
#97: FILE: fs/cifs/cifs_debug.c:169:
+					   tcon->treeName, tcon->refcount);

CHECK:CAMELCASE: Avoid CamelCase: <nativeFileSystem>
#98: FILE: fs/cifs/cifs_debug.c:170:
+				if (tcon->nativeFileSystem) {

WARNING:SPLIT_STRING: quoted string split across lines
#103: FILE: fs/cifs/cifs_debug.c:175:
+				seq_printf(m, "DevInfo: 0x%x Attributes: 0x%x"
+					"\nPathComponentMax: %d Status: %d",

CHECK:CAMELCASE: Avoid CamelCase: <DeviceCharacteristics>
#104: FILE: fs/cifs/cifs_debug.c:176:
+					le32_to_cpu(tcon->fsDevInfo.DeviceCharacteristics),

CHECK:CAMELCASE: Avoid CamelCase: <fsAttrInfo>
#105: FILE: fs/cifs/cifs_debug.c:177:
+					le32_to_cpu(tcon->fsAttrInfo.Attributes),

CHECK:CAMELCASE: Avoid CamelCase: <Attributes>
#105: FILE: fs/cifs/cifs_debug.c:177:
+					le32_to_cpu(tcon->fsAttrInfo.Attributes),

CHECK:CAMELCASE: Avoid CamelCase: <MaxPathNameComponentLength>
#106: FILE: fs/cifs/cifs_debug.c:178:
+					le32_to_cpu(tcon->fsAttrInfo.MaxPathNameComponentLength),

CHECK:CAMELCASE: Avoid CamelCase: <tidStatus>
#107: FILE: fs/cifs/cifs_debug.c:179:
+					tcon->tidStatus);

CHECK:CAMELCASE: Avoid CamelCase: <CifsNeedReconnect>
#115: FILE: fs/cifs/cifs_debug.c:187:
+				if (tcon->tidStatus == CifsNeedReconnect)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/cifs/cifs_debug.c:198:
+				mid_entry = list_entry(tmp3, struct mid_q_entry,
 					qhead);

CHECK:CAMELCASE: Avoid CamelCase: <cifsSesInfo>
#182: FILE: fs/cifs/cifs_debug.c:242:
+	struct cifsSesInfo *ses;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: fs/cifs/cifs_debug.c:347:
+				seq_printf(m, "\nSMBs: %d Oplock Breaks: %d",
+					atomic_read(&tcon->num_smbs_sent),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: fs/cifs/cifs_debug.c:350:
+				seq_printf(m, "\nReads:  %d Bytes: %lld",
+					atomic_read(&tcon->num_reads),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: fs/cifs/cifs_debug.c:353:
+				seq_printf(m, "\nWrites: %d Bytes: %lld",
+					atomic_read(&tcon->num_writes),

WARNING:SPLIT_STRING: quoted string split across lines
#333: FILE: fs/cifs/cifs_debug.c:356:
+				seq_printf(m, "\nLocks: %d HardLinks: %d "
+					      "Symlinks: %d",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: fs/cifs/cifs_debug.c:360:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#339: FILE: fs/cifs/cifs_debug.c:362:
+				seq_printf(m, "\nOpens: %d Closes: %d"
+					      "Deletes: %d",

WARNING:MISSING_SPACE: break quoted strings at a space character
#339: FILE: fs/cifs/cifs_debug.c:362:
+				seq_printf(m, "\nOpens: %d Closes: %d"
+					      "Deletes: %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: fs/cifs/cifs_debug.c:367:
+				seq_printf(m, "\nMkdirs: %d Rmdirs: %d",
+					atomic_read(&tcon->num_mkdirs),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: fs/cifs/cifs_debug.c:370:
+				seq_printf(m, "\nRenames: %d T2 Renames %d",
+					atomic_read(&tcon->num_renames),

WARNING:SPLIT_STRING: quoted string split across lines
#350: FILE: fs/cifs/cifs_debug.c:373:
+				seq_printf(m, "\nFindFirst: %d FNext %d "
+					      "FClose %d",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#375: FILE: fs/cifs/cifsfs.c:524:
+	if (tcon->refcount == 1) {
 		tcon->tidStatus = CifsExiting;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#400: FILE: fs/cifs/cifsglob.h:194:
+	spinlock_t tcon_lock;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->ses == NULL'
#467: FILE: fs/cifs/cifssmb.c:749:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->ses->server == NULL'
#467: FILE: fs/cifs/cifssmb.c:749:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tcon->ses"
#467: FILE: fs/cifs/cifssmb.c:749:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tcon->ses->server"
#467: FILE: fs/cifs/cifssmb.c:749:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#487: FILE: fs/cifs/cifssmb.c:762:
+	   closed on server already e.g. due to tcp session crashing */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <GetXid>
#563: FILE: fs/cifs/connect.c:1486:
+	xid = GetXid();

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBTDis>
#564: FILE: fs/cifs/connect.c:1487:
+	CIFSSMBTDis(xid, tcon);

CHECK:CAMELCASE: Avoid CamelCase: <_FreeXid>
#565: FILE: fs/cifs/connect.c:1488:
+	_FreeXid(xid);

CHECK:CAMELCASE: Avoid CamelCase: <DeleteTconOplockQEntries>
#567: FILE: fs/cifs/connect.c:1490:
+	DeleteTconOplockQEntries(tcon);

CHECK:CAMELCASE: Avoid CamelCase: <tconInfoFree>
#568: FILE: fs/cifs/connect.c:1491:
+	tconInfoFree(tcon);

CHECK:CAMELCASE: Avoid CamelCase: <pSesInfo>
#579: FILE: fs/cifs/connect.c:2249:
+		tcon = cifs_find_tcon(pSesInfo, volume_info.UNC);

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#717: FILE: fs/cifs/misc.c:493:
+	struct cifsInodeInfo *pCifsInode;

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#717: FILE: fs/cifs/misc.c:493:
+	struct cifsInodeInfo *pCifsInode;

CHECK:CAMELCASE: Avoid CamelCase: <Tid>
#735: FILE: fs/cifs/misc.c:554:
+			if (tcon->tid != buf->Tid)

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#741: FILE: fs/cifs/misc.c:558:
+			list_for_each(tmp2, &tcon->openFileList) {

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#742: FILE: fs/cifs/misc.c:559:
+				netfile = list_entry(tmp2, struct cifsFileInfo,

CHECK:CAMELCASE: Avoid CamelCase: <pSMB>
#765: FILE: fs/cifs/misc.c:561:
+				if (pSMB->Fid != netfile->netfid)

CHECK:CAMELCASE: Avoid CamelCase: <Fid>
#765: FILE: fs/cifs/misc.c:561:
+				if (pSMB->Fid != netfile->netfid)

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#770: FILE: fs/cifs/misc.c:566:
+				cFYI(1, ("file id match, oplock break"));

CHECK:CAMELCASE: Avoid CamelCase: <pInode>
#771: FILE: fs/cifs/misc.c:567:
+				pCifsInode = CIFS_I(netfile->pInode);

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheAll>
#772: FILE: fs/cifs/misc.c:568:
+				pCifsInode->clientCanCacheAll = false;

CHECK:CAMELCASE: Avoid CamelCase: <OplockLevel>
#773: FILE: fs/cifs/misc.c:569:
+				if (pSMB->OplockLevel == 0)

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#774: FILE: fs/cifs/misc.c:570:
+					pCifsInode->clientCanCacheRead = false;

CHECK:CAMELCASE: Avoid CamelCase: <oplockPending>
#775: FILE: fs/cifs/misc.c:571:
+				pCifsInode->oplockPending = true;

CHECK:CAMELCASE: Avoid CamelCase: <AllocOplockQEntry>
#776: FILE: fs/cifs/misc.c:572:
+				AllocOplockQEntry(netfile->pInode,

CHECK:CAMELCASE: Avoid CamelCase: <oplockThread>
#779: FILE: fs/cifs/misc.c:575:
+				if (oplockThread)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000210262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 10 warnings, 45 checks, 709 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000210262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
