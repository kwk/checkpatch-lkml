WARNING:MISPLACED_INIT: __initdata should be placed after cam60_nand_data
#320: FILE: arch/arm/mach-at91/board-cam60.c:145:
+static struct atmel_nand_data __initdata cam60_nand_data = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after cap9adk_nand_data
#333: FILE: arch/arm/mach-at91/board-cap9adk.c:178:
+static struct atmel_nand_data __initdata cap9adk_nand_data = {

WARNING:MISPLACED_INIT: __initdata should be placed after dk_nand_data
#346: FILE: arch/arm/mach-at91/board-dk.c:153:
+static struct atmel_nand_data __initdata dk_nand_data = {

WARNING:MISPLACED_INIT: __initdata should be placed after kb9202_nand_data
#359: FILE: arch/arm/mach-at91/board-kb9202.c:105:
+static struct atmel_nand_data __initdata kb9202_nand_data = {

WARNING:MISPLACED_INIT: __initdata should be placed after ek_nand_data
#372: FILE: arch/arm/mach-at91/board-sam9-l9260.c:144:
+static struct atmel_nand_data __initdata ek_nand_data = {

WARNING:MISPLACED_INIT: __initdata should be placed after ek_nand_data
#385: FILE: arch/arm/mach-at91/board-sam9260ek.c:181:
+static struct atmel_nand_data __initdata ek_nand_data = {

WARNING:MISPLACED_INIT: __initdata should be placed after ek_nand_data
#398: FILE: arch/arm/mach-at91/board-sam9261ek.c:186:
+static struct atmel_nand_data __initdata ek_nand_data = {

WARNING:MISPLACED_INIT: __initdata should be placed after ek_nand_data
#411: FILE: arch/arm/mach-at91/board-sam9263ek.c:190:
+static struct atmel_nand_data __initdata ek_nand_data = {

WARNING:MISPLACED_INIT: __initdata should be placed after ek_nand_data
#424: FILE: arch/arm/mach-at91/board-sam9rlek.c:91:
+static struct atmel_nand_data __initdata ek_nand_data = {

WARNING:MISPLACED_INIT: __initdata should be placed after yl_9200_nand_data
#437: FILE: arch/arm/mach-at91/board-yl-9200.c:254:
+static struct atmel_nand_data __initdata yl_9200_nand_data = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: drivers/mtd/nand/atmel_nand.c:148:
+static int atmel_nand_write_oob_512(struct mtd_info *mtd,
 		struct nand_chip *chip, int page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: drivers/mtd/nand/atmel_nand.c:176:
+static int atmel_nand_read_oob_512(struct mtd_info *mtd,
 		struct nand_chip *chip,	int page, int sndcmd)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: drivers/mtd/nand/atmel_nand.c:196:
+static int atmel_nand_calculate(struct mtd_info *mtd,
 		const u_char *dat, unsigned char *ecc_code)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: drivers/mtd/nand/atmel_nand.c:226:
+static int atmel_nand_read_page(struct mtd_info *mtd,
 		struct nand_chip *chip, uint8_t *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: drivers/mtd/nand/atmel_nand.c:285:
+static int atmel_nand_correct(struct mtd_info *mtd, u_char *dat,
 		u_char *read_ecc, u_char *isnull)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ecc_bit == ATMEL_ECC_BITADDR'
#628: FILE: drivers/mtd/nand/atmel_nand.c:309:
+		if ((ecc_bit == ATMEL_ECC_BITADDR)
+				&& (ecc_word == (ATMEL_ECC_WORDADDR >> 4))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#629: FILE: drivers/mtd/nand/atmel_nand.c:310:
+		if ((ecc_bit == ATMEL_ECC_BITADDR)
+				&& (ecc_word == (ATMEL_ECC_WORDADDR >> 4))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*host)...) over kzalloc(sizeof(struct atmel_nand_host)...)
#693: FILE: drivers/mtd/nand/atmel_nand.c:375:
+	host = kzalloc(sizeof(struct atmel_nand_host), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#696: FILE: drivers/mtd/nand/atmel_nand.c:377:
+		printk(KERN_ERR "atmel_nand: failed to allocate device structure.\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#696: FILE: drivers/mtd/nand/atmel_nand.c:377:
 	if (!host) {
+		printk(KERN_ERR "atmel_nand: failed to allocate device structure.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#703: FILE: drivers/mtd/nand/atmel_nand.c:383:
+		printk(KERN_ERR "atmel_nand: can't get I/O resource mem\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#710: FILE: drivers/mtd/nand/atmel_nand.c:389:
+		printk(KERN_ERR "atmel_nand: ioremap failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#728: FILE: drivers/mtd/nand/atmel_nand.c:413:
+		printk(KERN_ERR "atmel_nand: can't get I/O resource "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#737: FILE: drivers/mtd/nand/atmel_nand.c:423:
+			printk(KERN_ERR "atmel_nand: ioremap failed\n");

WARNING:TYPO_SPELLING: 'parititions' may be misspelled - perhaps 'partitions'?
#809: FILE: drivers/mtd/nand/atmel_nand.c:515:
+		printk(KERN_ERR "atmel_nand: No parititions defined, or unsupported device.\n");
 		                                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#809: FILE: drivers/mtd/nand/atmel_nand.c:515:
+		printk(KERN_ERR "atmel_nand: No parititions defined, or unsupported device.\n");

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#827: FILE: drivers/mtd/nand/atmel_nand.c:547:
+static int __devexit atmel_nand_remove(struct platform_device *pdev)

CHECK:BIT_MACRO: Prefer using the BIT macro
#894: FILE: drivers/mtd/nand/atmel_nand_ecc.h:15:
+#define		ATMEL_ECC_RST		(1 << 0)		/* Reset parity */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#914: FILE: drivers/mtd/nand/atmel_nand_ecc.h:25:
+#define		ATMEL_ECC_RECERR		(1 << 0)		/* Recoverable Error */

CHECK:BIT_MACRO: Prefer using the BIT macro
#915: FILE: drivers/mtd/nand/atmel_nand_ecc.h:26:
+#define		ATMEL_ECC_ECCERR		(1 << 1)		/* ECC Single Bit Error */

CHECK:BIT_MACRO: Prefer using the BIT macro
#916: FILE: drivers/mtd/nand/atmel_nand_ecc.h:27:
+#define		ATMEL_ECC_MULERR		(1 << 2)		/* Multiple Errors */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#949: FILE: include/asm-arm/arch-at91/board.h:97:
 };
+extern void __init at91_add_device_nand(struct atmel_nand_data *data);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#949: FILE: include/asm-arm/arch-at91/board.h:97:
+extern void __init at91_add_device_nand(struct atmel_nand_data *data);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270532.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 14 checks, 756 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270532.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
