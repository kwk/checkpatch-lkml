WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#29: 
open/creat/unlink/truncate/ftruncate/mknod/mkdir/
     ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: security/tomoyo/file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#45: FILE: security/tomoyo/file.c:2:
+ * security/tomoyo/file.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#53: FILE: security/tomoyo/file.c:10:
+#define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#166: FILE: security/tomoyo/file.c:123:
+		printk(KERN_INFO "tmy_realpath_dentry = %d\n", error);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: security/tomoyo/file.c:201:
+	tmy_sncatprintf(buf, len - 1, "allow_%s %s %s\n",
+		 operation, filename1->name, filename2 ? filename2->name : "");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#262: FILE: security/tomoyo/file.c:219:
+	if (!tmy_correct_path(filename, 1, -1, -1, __FUNCTION__))

WARNING:SPACING: space prohibited before semicolon
#290: FILE: security/tomoyo/file.c:247:
+out: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#332: FILE: security/tomoyo/file.c:289:
+	struct list_head *pos;
+	list_for_each_cookie(pos, head->read_var2, &globally_readable_list) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: security/tomoyo/file.c:291:
+		struct globally_readable_file_entry *ptr;
+		ptr = list_entry(pos, struct globally_readable_file_entry,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#363: FILE: security/tomoyo/file.c:320:
+	if (!tmy_correct_path(group_name, 0, 0, 0, __FUNCTION__) ||

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#365: FILE: security/tomoyo/file.c:322:
+	    !tmy_correct_path(member_name, 0, 0, 0, __FUNCTION__) ||

WARNING:SPACING: space prohibited before semicolon
#412: FILE: security/tomoyo/file.c:369:
+out: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#465: FILE: security/tomoyo/file.c:422:
+	struct path_group_member *member;
+	list_for_each_entry(member, &group->path_group_member_list, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#491: FILE: security/tomoyo/file.c:448:
+	struct list_head *mpos;
+	list_for_each_cookie(gpos, head->read_var1, &path_group_list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#493: FILE: security/tomoyo/file.c:450:
+		struct path_group_entry *group;
+		group = list_entry(gpos, struct path_group_entry, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: security/tomoyo/file.c:454:
+			struct path_group_member *member;
+			member = list_entry(mpos, struct path_group_member,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#523: FILE: security/tomoyo/file.c:480:
+	if (!tmy_correct_path(pattern, 0, 1, 0, __FUNCTION__))

WARNING:SPACING: space prohibited before semicolon
#552: FILE: security/tomoyo/file.c:509:
+out: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#601: FILE: security/tomoyo/file.c:558:
+	struct list_head *pos;
+	list_for_each_cookie(pos, head->read_var2, &pattern_list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#603: FILE: security/tomoyo/file.c:560:
+		struct pattern_entry *ptr;
+		ptr = list_entry(pos, struct pattern_entry, list);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#625: FILE: security/tomoyo/file.c:582:
+	if (!tmy_correct_path(pattern, 0, 0, 0, __FUNCTION__))

WARNING:SPACING: space prohibited before semicolon
#652: FILE: security/tomoyo/file.c:609:
+out: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#696: FILE: security/tomoyo/file.c:653:
+	struct list_head *pos;
+	list_for_each_cookie(pos, head->read_var2, &no_rewrite_list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#698: FILE: security/tomoyo/file.c:655:
+		struct no_rewrite_entry *ptr;
+		ptr = list_entry(pos, struct no_rewrite_entry, list);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#725: FILE: security/tomoyo/file.c:682:
+		printk(KERN_DEBUG "%s: Invalid permission '%d %s'\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#726: FILE: security/tomoyo/file.c:683:
+		       __FUNCTION__, perm, filename);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#729: FILE: security/tomoyo/file.c:686:
+	if (!tmy_correct_path(filename, 0, 0, 0, __FUNCTION__))

CHECK:SPACING: No space is necessary after a cast
#734: FILE: security/tomoyo/file.c:691:
+		saved = (struct path_info *) tmy_new_path_group(filename + 1);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#739: FILE: security/tomoyo/file.c:696:
+	} else {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#755: FILE: security/tomoyo/file.c:712:
+
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr->type == TMY_TYPE_FILE_ACL'
#764: FILE: security/tomoyo/file.c:721:
+		if ((ptr->type == TMY_TYPE_FILE_ACL) &&
+		    ptr->cond == cond &&
+		    (acl->u.filename == saved)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'acl->u.filename == saved'
#764: FILE: security/tomoyo/file.c:721:
+		if ((ptr->type == TMY_TYPE_FILE_ACL) &&
+		    ptr->cond == cond &&
+		    (acl->u.filename == saved)) {

WARNING:SPACING: space prohibited before semicolon
#791: FILE: security/tomoyo/file.c:748:
+remove: ;

WARNING:SPACING: space prohibited before semicolon
#804: FILE: security/tomoyo/file.c:761:
+ok: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#825: FILE: security/tomoyo/file.c:782:
+		struct file_acl *acl;
+		acl = container_of(ptr, struct file_acl, head);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#938: FILE: security/tomoyo/file.c:895:
+	if (sscanf(data, "%u", &perm) == 1)
+		return tmy_add_file_acl(filename, (u8) perm, domain, cond,
+					is_delete);

CHECK:SPACING: No space is necessary after a cast
#939: FILE: security/tomoyo/file.c:896:
+		return tmy_add_file_acl(filename, (u8) perm, domain, cond,

CHECK:BRACES: Unbalanced braces around else statement
#961: FILE: security/tomoyo/file.c:918:
+		} else

WARNING:SPACING: space prohibited before semicolon
#968: FILE: security/tomoyo/file.c:925:
+out: ;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#986: FILE: security/tomoyo/file.c:943:
+	if (!tmy_correct_path(filename, 0, 0, 0, __FUNCTION__))

CHECK:SPACING: No space is necessary after a cast
#991: FILE: security/tomoyo/file.c:948:
+		saved = (struct path_info *) tmy_new_path_group(filename + 1);

WARNING:SPACING: space prohibited before semicolon
#1027: FILE: security/tomoyo/file.c:984:
+remove: ;

WARNING:SPACING: space prohibited before semicolon
#1039: FILE: security/tomoyo/file.c:996:
+ok: ;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1062: FILE: security/tomoyo/file.c:1019:
+	if (!tmy_correct_path(filename1, 0, 0, 0, __FUNCTION__) ||

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1063: FILE: security/tomoyo/file.c:1020:
+	    !tmy_correct_path(filename2, 0, 0, 0, __FUNCTION__))

CHECK:SPACING: No space is necessary after a cast
#1068: FILE: security/tomoyo/file.c:1025:
+		saved1 = (struct path_info *) tmy_new_path_group(filename1 + 1);

CHECK:SPACING: No space is necessary after a cast
#1080: FILE: security/tomoyo/file.c:1037:
+		saved2 = (struct path_info *) tmy_new_path_group(filename2 + 1);

WARNING:SPACING: space prohibited before semicolon
#1120: FILE: security/tomoyo/file.c:1077:
+remove: ;

WARNING:SPACING: space prohibited before semicolon
#1132: FILE: security/tomoyo/file.c:1089:
+ ok: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1149: FILE: security/tomoyo/file.c:1106:
+		struct single_acl *acl;
+		acl = container_of(ptr, struct single_acl, head);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1181: FILE: security/tomoyo/file.c:1138:
+		struct double_acl *acl;
+		acl = container_of(ptr, struct double_acl, head);

WARNING:SPACING: space prohibited before semicolon
#1252: FILE: security/tomoyo/file.c:1209:
+ok: ;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1264: FILE: security/tomoyo/file.c:1221:
+ * @filp:     pointer to "struct file".
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1269: FILE: security/tomoyo/file.c:1226:
+int tmy_exec_perm(const struct path_info *filename, struct file *filp)
                                                                  ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1272: FILE: security/tomoyo/file.c:1229:
+	struct obj_info obj;
+	if (!tmy_flags(TMY_MAC_FOR_FILE))

WARNING:SPACING: space prohibited before semicolon
#1334: FILE: security/tomoyo/file.c:1291:
+out: ;

CHECK:SPACING: No space is necessary after a cast
#1375: FILE: security/tomoyo/file.c:1332:
+			strcat((char *) buf->name, "/");

WARNING:SPACING: space prohibited before semicolon
#1382: FILE: security/tomoyo/file.c:1339:
+out: ;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1391: FILE: security/tomoyo/file.c:1348:
+ * @filp: pointer to "struct file".
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1396: FILE: security/tomoyo/file.c:1353:
+int tmy_rewrite_perm(struct file *filp)
                                   ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1410: FILE: security/tomoyo/file.c:1367:
+	if (tmy_is_no_rewrite_file(buf)) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1412: FILE: security/tomoyo/file.c:1369:
+		struct obj_info obj;
+		memset(&obj, 0, sizeof(obj));

CHECK:BRACES: Unbalanced braces around else statement
#1417: FILE: security/tomoyo/file.c:1374:
+	} else

WARNING:SPACING: space prohibited before semicolon
#1422: FILE: security/tomoyo/file.c:1379:
+out: ;

CHECK:SPACING: No space is necessary after a cast
#1471: FILE: security/tomoyo/file.c:1428:
+				strcat((char *) buf1->name, "/");

CHECK:SPACING: No space is necessary after a cast
#1475: FILE: security/tomoyo/file.c:1432:
+				strcat((char *) buf2->name, "/");

WARNING:SPACING: space prohibited before semicolon
#1505: FILE: security/tomoyo/file.c:1462:
+out: ;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000339090.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 51 warnings, 17 checks, 1468 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000339090.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
