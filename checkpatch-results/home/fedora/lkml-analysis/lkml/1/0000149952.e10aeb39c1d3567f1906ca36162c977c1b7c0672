WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
The new feature of this patchset is a richer /debugfs control file interface,

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#33: 
control over the the debug output. The output can be controlled by function,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#132: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#137: FILE: include/linux/dynamic_debug.h:1:
+#ifndef _DYNAMIC_DEBUG_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: include/linux/dynamic_debug.h:29:
+ ^I * The flags field controls the behaviour at the callsite.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#165: FILE: include/linux/dynamic_debug.h:29:
+ ^I * The flags field controls the behaviour at the callsite.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: include/linux/dynamic_debug.h:30:
+ ^I * The bits here are changed dynamically when the user$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: include/linux/dynamic_debug.h:30:
+ ^I * The bits here are changed dynamically when the user$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: include/linux/dynamic_debug.h:31:
+ ^I * writes commands to <debugfs>/dynamic_debug/ddebug$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: include/linux/dynamic_debug.h:31:
+ ^I * writes commands to <debugfs>/dynamic_debug/ddebug$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#169: FILE: include/linux/dynamic_debug.h:33:
+#define _DPRINTK_FLAGS_PRINT   (1<<0)  /* printk() a message using the format */
                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#169: FILE: include/linux/dynamic_debug.h:33:
+#define _DPRINTK_FLAGS_PRINT   (1<<0)  /* printk() a message using the format */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#172: FILE: include/linux/dynamic_debug.h:36:
+} __attribute__((aligned(8)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#174: FILE: include/linux/dynamic_debug.h:38:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: include/linux/dynamic_debug.h:40:
+int ddebug_add_module(struct _ddebug *tab, unsigned int n,
+				const char *modname);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: include/linux/dynamic_debug.h:43:
+extern int ddebug_remove_module(char *mod_name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 32)
#183: FILE: include/linux/dynamic_debug.h:47:
+	if (unlikely((dynamic_debug_enabled & (1LL << DEBUG_HASH)) &&	     \
[...]
+				if (unlikely(dd.flags))			     \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#189: FILE: include/linux/dynamic_debug.h:53:
+#define dynamic_pr_debug(fmt, ...) do {					\
+	static struct _ddebug descriptor				\
+	__used								\
+	__attribute__((section("__verbose"), aligned(8))) =		\
+	{ KBUILD_MODNAME, __func__, __FILE__, fmt, DEBUG_HASH,	\
+		DEBUG_HASH2, __LINE__, _DPRINTK_FLAGS_DEFAULT };	\
+	if (__dynamic_dbg_enabled(descriptor))				\
+		printk(KERN_DEBUG KBUILD_MODNAME ":" fmt,		\
+				##__VA_ARGS__);				\
+	} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose") over __attribute__((section("__verbose")))
#192: FILE: include/linux/dynamic_debug.h:56:
+	__attribute__((section("__verbose"), aligned(8))) =		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#192: FILE: include/linux/dynamic_debug.h:56:
+	__attribute__((section("__verbose"), aligned(8))) =		\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#196: FILE: include/linux/dynamic_debug.h:60:
+		printk(KERN_DEBUG KBUILD_MODNAME ":" fmt,		\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#200: FILE: include/linux/dynamic_debug.h:64:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#201: FILE: include/linux/dynamic_debug.h:65:
+#define dynamic_dev_dbg(dev, fmt, ...) do {				\
+	static struct _ddebug descriptor				\
+	__used								\
+	__attribute__((section("__verbose"), aligned(8))) =		\
+	{ KBUILD_MODNAME, __func__, __FILE__, fmt, DEBUG_HASH,	\
+		DEBUG_HASH2, __LINE__, _DPRINTK_FLAGS_DEFAULT };	\
+	if (__dynamic_dbg_enabled(descriptor))				\
+			dev_printk(KERN_DEBUG, dev,			\
+					KBUILD_MODNAME ": " fmt,	\
+					##__VA_ARGS__);			\
+	} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose") over __attribute__((section("__verbose")))
#204: FILE: include/linux/dynamic_debug.h:68:
+	__attribute__((section("__verbose"), aligned(8))) =		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#204: FILE: include/linux/dynamic_debug.h:68:
+	__attribute__((section("__verbose"), aligned(8))) =		\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#207: FILE: include/linux/dynamic_debug.h:71:
+	if (__dynamic_dbg_enabled(descriptor))				\
+			dev_printk(KERN_DEBUG, dev,			\

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#208: FILE: include/linux/dynamic_debug.h:72:
+			dev_printk(KERN_DEBUG, dev,			\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#379: FILE: kernel/module.c:1834:
+		printk(KERN_ERR "dynamic debug error adding module: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: kernel/module.c:1835:
+		printk(KERN_ERR "dynamic debug error adding module: %s\n",
+					debug->modname);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#433: FILE: lib/dynamic_debug.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#434: FILE: lib/dynamic_debug.c:2:
+ * lib/dynamic_debug.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#461: FILE: lib/dynamic_debug.c:29:
+extern struct _ddebug __stop___verbose[];

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#495: FILE: lib/dynamic_debug.c:63:
+static int verbose = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#501: FILE: lib/dynamic_debug.c:69:
+	const char *tail = strrchr(path, '/');
+	return tail ? tail+1 : path;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#501: FILE: lib/dynamic_debug.c:69:
+	return tail ? tail+1 : path;
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: lib/dynamic_debug.c:74:
+static char *ddebug_describe_flags(struct _ddebug *dp, char *buf,
+				    size_t maxlen)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#510: FILE: lib/dynamic_debug.c:78:
+	BUG_ON(maxlen < 4);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hash == table_hash_value'
#534: FILE: lib/dynamic_debug.c:102:
+		if (dt->num_enabled && (hash == table_hash_value))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: lib/dynamic_debug.c:115:
+static void ddebug_change(const struct ddebug_query *query,
+			   unsigned int flags, unsigned int mask)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#558: FILE: lib/dynamic_debug.c:126:
+	list_for_each_entry(dt, &ddebug_tables, link) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "query->module"
#560: FILE: lib/dynamic_debug.c:128:
+		if (query->module != NULL &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "query->filename"
#568: FILE: lib/dynamic_debug.c:136:
+			if (query->filename != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "query->function"
#574: FILE: lib/dynamic_debug.c:142:
+			if (query->function != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "query->format"
#579: FILE: lib/dynamic_debug.c:147:
+			if (query->format != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strstr"
#580: FILE: lib/dynamic_debug.c:148:
+			    strstr(dp->format, query->format) == NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#599: FILE: lib/dynamic_debug.c:167:
+			else if (!dp-flags)
 			            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#616: FILE: lib/dynamic_debug.c:184:
+				printk(KERN_INFO

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#621: FILE: lib/dynamic_debug.c:189:
+					ddebug_describe_flags(dp, flagbuf,
+							sizeof(flagbuf)));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#627: FILE: lib/dynamic_debug.c:195:
+		printk(KERN_INFO "ddebug: no matches for query\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#660: FILE: lib/dynamic_debug.c:228:
+		int i;
+		printk(KERN_INFO "%s: split into words:", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#660: FILE: lib/dynamic_debug.c:228:
+		printk(KERN_INFO "%s: split into words:", __func__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#662: FILE: lib/dynamic_debug.c:230:
+			printk(" \"%s\"", words[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#663: FILE: lib/dynamic_debug.c:231:
+		printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#677: FILE: lib/dynamic_debug.c:245:
+	char *end = NULL;
+	BUG_ON(str == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#677: FILE: lib/dynamic_debug.c:245:
+	BUG_ON(str == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!str"
#677: FILE: lib/dynamic_debug.c:245:
+	BUG_ON(str == NULL);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#682: FILE: lib/dynamic_debug.c:250:
+	*val = simple_strtoul(str, &end, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!end"
#683: FILE: lib/dynamic_debug.c:251:
+	return end == NULL || end == str || *end != '\0' ? -EINVAL : 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#691: FILE: lib/dynamic_debug.c:259:
+#define isodigit(c)		((c) >= '0' && (c) <= '7')

ERROR:CODE_INDENT: code indent should use tabs where possible
#712: FILE: lib/dynamic_debug.c:280:
+^I^I^I         isodigit(in[2]) &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#713: FILE: lib/dynamic_debug.c:281:
+^I^I^I         isodigit(in[3])) {$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#714: FILE: lib/dynamic_debug.c:282:
+				*out++ = ((in[1] - '0')<<6) |
 				                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#715: FILE: lib/dynamic_debug.c:283:
+^I^I^I^I          ((in[2] - '0')<<3) |$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#715: FILE: lib/dynamic_debug.c:283:
+				          ((in[2] - '0')<<3) |
 				                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#716: FILE: lib/dynamic_debug.c:284:
+^I^I^I^I          (in[3] - '0');$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: lib/dynamic_debug.c:309:
+static int ddebug_parse_query(char *words[], int nwords,
+			       struct ddebug_query *query)

CHECK:BRACES: braces {} should be used on all arms of this statement
#751: FILE: lib/dynamic_debug.c:319:
+		if (!strcmp(words[i], "func"))
[...]
+		else if (!strcmp(words[i], "file"))
[...]
+		else if (!strcmp(words[i], "module"))
[...]
+		else if (!strcmp(words[i], "format"))
[...]
+		else if (!strcmp(words[i], "line")) {
[...]
+		} else {
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#752: FILE: lib/dynamic_debug.c:320:
+			query->function = words[i+1];
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#754: FILE: lib/dynamic_debug.c:322:
+			query->filename = words[i+1];
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#756: FILE: lib/dynamic_debug.c:324:
+			query->module = words[i+1];
 			                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#758: FILE: lib/dynamic_debug.c:326:
+			query->format = unescape(words[i+1]);
 			                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#760: FILE: lib/dynamic_debug.c:328:
+			char *first = words[i+1];
 			                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#762: FILE: lib/dynamic_debug.c:330:
+			char *last = strchr(first, '-');
+			if (last)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "last"
#766: FILE: lib/dynamic_debug.c:334:
+			if (last != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#775: FILE: lib/dynamic_debug.c:343:
+				printk(KERN_ERR "%s: unknown keyword \"%s\"\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: lib/dynamic_debug.c:344:
+				printk(KERN_ERR "%s: unknown keyword \"%s\"\n",
+					__func__, words[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#782: FILE: lib/dynamic_debug.c:350:
+		printk(KERN_INFO "%s: q->function=\"%s\" q->filename=\"%s\" "

WARNING:SPLIT_STRING: quoted string split across lines
#783: FILE: lib/dynamic_debug.c:351:
+		printk(KERN_INFO "%s: q->function=\"%s\" q->filename=\"%s\" "
+		       "q->module=\"%s\" q->format=\"%s\" q->lineno=%u-%u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: lib/dynamic_debug.c:366:
+static int ddebug_parse_flags(const char *str, unsigned int *flagsp,
+			       unsigned int *maskp)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#800: FILE: lib/dynamic_debug.c:368:
+	unsigned flags = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#813: FILE: lib/dynamic_debug.c:381:
+		printk(KERN_INFO "%s: op='%c'\n", __func__, op);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#827: FILE: lib/dynamic_debug.c:395:
+		printk(KERN_INFO "%s: flags=0x%x\n", __func__, flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#845: FILE: lib/dynamic_debug.c:413:
+		printk(KERN_INFO "%s: *flagsp=0x%x *maskp=0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#846: FILE: lib/dynamic_debug.c:414:
+		printk(KERN_INFO "%s: *flagsp=0x%x *maskp=0x%x\n",
+			__func__, *flagsp, *maskp);

WARNING:TYPO_SPELLING: 'conrol' may be misspelled - perhaps 'control'?
#851: FILE: lib/dynamic_debug.c:419:
+ * File_ops->write method for <debugfs>/dynamic_debug/conrol.  Gathers the
                                                       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#855: FILE: lib/dynamic_debug.c:423:
+static ssize_t ddebug_proc_write(struct file *file, const char __user *ubuf,
+				  size_t len, loff_t *offp)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#867: FILE: lib/dynamic_debug.c:435:
+	if (len > sizeof(tmpbuf)-1)
 	                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#873: FILE: lib/dynamic_debug.c:441:
+		printk(KERN_INFO "%s: read %d bytes from userspace\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#874: FILE: lib/dynamic_debug.c:442:
+		printk(KERN_INFO "%s: read %d bytes from userspace\n",
+			__func__, (int)len);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#879: FILE: lib/dynamic_debug.c:447:
+	if (ddebug_parse_query(words, nwords-1, &query))
 	                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#881: FILE: lib/dynamic_debug.c:449:
+	if (ddebug_parse_flags(words[nwords-1], &flags, &mask))
 	                                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iter->table"
#917: FILE: lib/dynamic_debug.c:485:
+	if (iter->table == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#944: FILE: lib/dynamic_debug.c:512:
+		printk(KERN_INFO "%s: called m=%p *pos=%lld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#945: FILE: lib/dynamic_debug.c:513:
+		printk(KERN_INFO "%s: called m=%p *pos=%lld\n",
+			__func__, m, (unsigned long long)*pos);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dp"
#954: FILE: lib/dynamic_debug.c:522:
+	while (dp != NULL && --n > 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#970: FILE: lib/dynamic_debug.c:538:
+		printk(KERN_INFO "%s: called m=%p p=%p *pos=%lld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: lib/dynamic_debug.c:539:
+		printk(KERN_INFO "%s: called m=%p p=%p *pos=%lld\n",
+			__func__, m, p, (unsigned long long)*pos);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#994: FILE: lib/dynamic_debug.c:562:
+		printk(KERN_INFO "%s: called m=%p p=%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: lib/dynamic_debug.c:563:
+		printk(KERN_INFO "%s: called m=%p p=%p\n",
+			__func__, m, p);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#999: FILE: lib/dynamic_debug.c:567:
+		seq_puts(m,
+			"# filename:lineno [module]function flags format\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1020: FILE: lib/dynamic_debug.c:588:
+		printk(KERN_INFO "%s: called m=%p p=%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1021: FILE: lib/dynamic_debug.c:589:
+		printk(KERN_INFO "%s: called m=%p p=%p\n",
+			__func__, m, p);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1044: FILE: lib/dynamic_debug.c:612:
+		printk(KERN_INFO "%s: called\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1044: FILE: lib/dynamic_debug.c:612:
+		printk(KERN_INFO "%s: called\n", __func__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iter"
#1047: FILE: lib/dynamic_debug.c:615:
+	if (iter == NULL)

CHECK:SPACING: No space is necessary after a cast
#1055: FILE: lib/dynamic_debug.c:623:
+	((struct seq_file *) file->private_data)->private = iter;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1073: FILE: lib/dynamic_debug.c:641:
+int ddebug_add_module(struct _ddebug *tab, unsigned int n,
+			     const char *name)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dt"
#1079: FILE: lib/dynamic_debug.c:647:
+	if (dt == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_name"
#1082: FILE: lib/dynamic_debug.c:650:
+	if (new_name == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1096: FILE: lib/dynamic_debug.c:664:
+		printk(KERN_INFO "%u debug prints in module %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1097: FILE: lib/dynamic_debug.c:665:
+		printk(KERN_INFO "%u debug prints in module %s\n",
+				 n, dt->mod_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1119: FILE: lib/dynamic_debug.c:687:
+		printk(KERN_INFO "%s: removing module \"%s\"\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1120: FILE: lib/dynamic_debug.c:688:
+		printk(KERN_INFO "%s: removing module \"%s\"\n",
+				__func__, mod_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1158: FILE: lib/dynamic_debug.c:726:
+	file = debugfs_create_file("control", 0644, dir, NULL,
+					&ddebug_proc_fops);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149952.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 49 warnings, 57 checks, 986 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149952.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
