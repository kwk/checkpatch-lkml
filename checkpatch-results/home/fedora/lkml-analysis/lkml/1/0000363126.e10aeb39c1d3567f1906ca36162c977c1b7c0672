WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/netdev-2.6.git upstream-linus

WARNING:TYPO_SPELLING: 'dupliated' may be misspelled - perhaps 'duplicated'?
#62: 
      Blackfin EMAC driver: Fix Ethernet communication bug (dupliated and lost packets)
                                                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: drivers/net/e1000/e1000.h:357:
+extern void e1000_power_up_phy(struct e1000_adapter *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct e1000_adapter *' should also have an identifier name
#107: FILE: drivers/net/e1000/e1000.h:357:
+extern void e1000_power_up_phy(struct e1000_adapter *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: drivers/net/e1000/e1000.h:358:
+extern void e1000_set_ethtool_ops(struct net_device *netdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: drivers/net/e1000/e1000.h:359:
+extern void e1000_check_options(struct e1000_adapter *adapter);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#111: FILE: drivers/net/e1000/e1000.h:361:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#133: FILE: drivers/net/e1000/e1000_ethtool.c:733:
+	uint32_t pat, val;                                                     \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#134: FILE: drivers/net/e1000/e1000_ethtool.c:734:
+^Iconst uint32_t test[] = ^I^I^I^I^I       \$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#134: FILE: drivers/net/e1000/e1000_ethtool.c:734:
+	const uint32_t test[] = 					       \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#137: FILE: drivers/net/e1000/e1000_ethtool.c:736:
+^Ifor (pat = 0; pat < ARRAY_SIZE(test); pat++) {           ^I       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: drivers/net/e1000/e1000_ethtool.c:742:
+^I^I^I        E1000_##R, val, (test[pat] & W & M));          \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#155: FILE: drivers/net/e1000/e1000_ethtool.c:752:
+	uint32_t val;                                                          \

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: drivers/net/e1000/e1000_ethtool.c:757:
+^I^I        "expected 0x%08X\n", E1000_##R, (val & M), (W & M));   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: drivers/net/e1000/e1000_hw.c:8610:
+    if (size < 1  || size > 2 || data == NULL ||$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#196: FILE: drivers/net/e1000/e1000_hw.c:8610:
+    if (size < 1  || size > 2 || data == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'Intel', this function's name, in a string
#220: FILE: drivers/net/e1000/e1000_main.c:41:
+static const char e1000_copyright[] = "Copyright (c) 1999-2006 Intel Corporation.";

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#248: FILE: drivers/net/e1000/e1000_param.c:48:
 	static int __devinitdata X[E1000_MAX_NIC+1] = E1000_PARAM_INIT; \

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#270: FILE: drivers/net/e1000/e1000_param.c:216:
 static int __devinit

CHECK:CAMELCASE: Avoid CamelCase: <XsumRX>
#284: FILE: drivers/net/e1000/e1000_param.c:352:
+			unsigned int rx_csum = XsumRX[bd];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <FlowControl>
#293: FILE: drivers/net/e1000/e1000_param.c:378:
+			unsigned int fc = FlowControl[bd];

CHECK:CAMELCASE: Avoid CamelCase: <SmartPowerDownEnable>
#302: FILE: drivers/net/e1000/e1000_param.c:510:
+			unsigned int spd = SmartPowerDownEnable[bd];

CHECK:CAMELCASE: Avoid CamelCase: <KumeranLockLoss>
#311: FILE: drivers/net/e1000/e1000_param.c:526:
+			unsigned int kmrn_lock_loss = KumeranLockLoss[bd];

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#316: FILE: drivers/net/e1000/e1000_param.c:582:
 static void __devinit

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#364: FILE: drivers/net/e1000e/param.c:55:
+#define E1000_PARAM(X, desc)					\
+	static int __devinitdata X[E1000_MAX_NIC+1]		\
+		= E1000_PARAM_INIT;				\
+	static unsigned int num_##X;				\
+	module_param_array_named(X, X, int, &num_##X, 0);	\
 	MODULE_PARM_DESC(X, desc);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#364: FILE: drivers/net/e1000e/param.c:55:
+#define E1000_PARAM(X, desc)					\
+	static int __devinitdata X[E1000_MAX_NIC+1]		\
+		= E1000_PARAM_INIT;				\
+	static unsigned int num_##X;				\
+	module_param_array_named(X, X, int, &num_##X, 0);	\
 	MODULE_PARM_DESC(X, desc);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#365: FILE: drivers/net/e1000e/param.c:56:
+	static int __devinitdata X[E1000_MAX_NIC+1]		\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#365: FILE: drivers/net/e1000e/param.c:56:
+	static int __devinitdata X[E1000_MAX_NIC+1]		\
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#366: FILE: drivers/net/e1000e/param.c:57:
+	static int __devinitdata X[E1000_MAX_NIC+1]		\
+		= E1000_PARAM_INIT;				\

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#391: FILE: drivers/net/e1000e/param.c:143:
+static int __devinit e1000_validate_option(unsigned int *value,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#478: FILE: drivers/net/ixgb/ixgb.h:201:
+extern void ixgb_check_options(struct ixgb_adapter *adapter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#479: FILE: drivers/net/ixgb/ixgb.h:202:
+extern void ixgb_set_ethtool_ops(struct net_device *netdev);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'Intel', this function's name, in a string
#542: FILE: drivers/net/ixgb/ixgb_main.c:41:
+static const char ixgb_copyright[] = "Copyright (c) 1999-2006 Intel Corporation.";

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#569: FILE: drivers/net/ixgb/ixgb_main.c:1084:
+		uint8_t mta[IXGB_MAX_NUM_MULTICAST_ADDRESSES *

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#581: FILE: drivers/net/ixgb/ixgb_main.c:1325:
+			if (unlikely(mss && (f == (nr_frags - 1))
+				     && size == len && size > 8))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#597: FILE: drivers/net/ixgb/ixgb_param.c:47:
+#define IXGB_PARAM(X, desc)					\
+	static int __devinitdata X[IXGB_MAX_NIC+1]		\
+		= IXGB_PARAM_INIT;				\
+	static unsigned int num_##X = 0;			\
+	module_param_array_named(X, X, int, &num_##X, 0);	\
 	MODULE_PARM_DESC(X, desc);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#597: FILE: drivers/net/ixgb/ixgb_param.c:47:
+#define IXGB_PARAM(X, desc)					\
+	static int __devinitdata X[IXGB_MAX_NIC+1]		\
+		= IXGB_PARAM_INIT;				\
+	static unsigned int num_##X = 0;			\
+	module_param_array_named(X, X, int, &num_##X, 0);	\
 	MODULE_PARM_DESC(X, desc);

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#598: FILE: drivers/net/ixgb/ixgb_param.c:48:
+	static int __devinitdata X[IXGB_MAX_NIC+1]		\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#598: FILE: drivers/net/ixgb/ixgb_param.c:48:
+	static int __devinitdata X[IXGB_MAX_NIC+1]		\
 	                                       ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#599: FILE: drivers/net/ixgb/ixgb_param.c:49:
+	static int __devinitdata X[IXGB_MAX_NIC+1]		\
+		= IXGB_PARAM_INIT;				\

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#600: FILE: drivers/net/ixgb/ixgb_param.c:50:
+	static unsigned int num_##X = 0;			\

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#619: FILE: drivers/net/ixgb/ixgb_param.c:200:
 static int __devinit

CHECK:CAMELCASE: Avoid CamelCase: <FCReqTimeout>
#711: FILE: drivers/net/ixgb/ixgb_param.c:400:
+			unsigned int pause_time = FCReqTimeout[bd];

CHECK:CAMELCASE: Avoid CamelCase: <IntDelayEnable>
#747: FILE: drivers/net/ixgb/ixgb_param.c:466:
+			unsigned int ide = IntDelayEnable[bd];

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363126.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 17 warnings, 24 checks, 614 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363126.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
