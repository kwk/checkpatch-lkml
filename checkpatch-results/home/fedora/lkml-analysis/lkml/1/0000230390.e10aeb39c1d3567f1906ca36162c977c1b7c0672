WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#38: FILE: Makefile:4:
+EXTRAVERSION = .4
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#164: FILE: arch/x86/kernel/cpu/mtrr/generic.c:387:
+		tmp |= ~((1<<(hi - 1)) - 1);
 		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#170: FILE: arch/x86/kernel/cpu/mtrr/generic.c:393:
+				printk(KERN_INFO "mtrr: your BIOS has set up an incorrect mask, fixing it up.\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#308: FILE: drivers/char/random.c:532:
+	if (entropy_count < 0) {
[...]
-	} else if (r->entropy_count > r->poolinfo->POOLBITS)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#542: FILE: drivers/rtc/rtc-lib.c:58:
+	time -= (unsigned int) days * 86400;

WARNING:TYPO_SPELLING: 'THRE' may be misspelled - perhaps 'THREE'?
#599: FILE: drivers/serial/8250.h:52:
+#define UART_BUG_THRE	(1 << 3)	/* UART has buggy THRE reassertion */
                      	        	                  ^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#599: FILE: drivers/serial/8250.h:52:
+#define UART_BUG_THRE	(1 << 3)	/* UART has buggy THRE reassertion */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*bmd->iovecs)...) over kmalloc(sizeof(struct bio_vec)...)
#710: FILE: fs/bio.c:475:
+	bmd->iovecs = kmalloc(sizeof(struct bio_vec) * nr_segs, gfp_mask);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#710: FILE: fs/bio.c:475:
+	bmd->iovecs = kmalloc(sizeof(struct bio_vec) * nr_segs, gfp_mask);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*bmd->sgvecs)...) over kmalloc(sizeof(struct sg_iovec)...)
#717: FILE: fs/bio.c:481:
+	bmd->sgvecs = kmalloc(sizeof(struct sg_iovec) * iov_count, gfp_mask);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#929: FILE: fs/cramfs/inode.c:71:
+		inode->i_mtime = inode->i_atime = inode->i_ctime = zerotime;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#931: FILE: fs/cramfs/inode.c:73:
+		/* inode->i_nlink is left 1 - arguably wrong for directories,
+		   but it's the best we can do without reading the directory

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#933: FILE: fs/cramfs/inode.c:75:
+		   without -noleaf option. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#947: FILE: fs/cramfs/inode.c:89:
+			init_special_inode(inode, inode->i_mode,
+				old_decode_dev(cramfs_inode->size));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#982: FILE: fs/nfsd/nfs4acl.c:446:
+		+ cnt*sizeof(struct posix_user_ace_state);
 		     ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1006: FILE: include/linux/fb.h:976:
+extern void fb_deferred_io_open(struct fb_info *info,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1044: FILE: include/linux/mroute.h:225:
+struct pimreghdr
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1051: FILE: include/linux/mroute.h:232:
+extern int pim_rcv_v1(struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#1051: FILE: include/linux/mroute.h:232:
+extern int pim_rcv_v1(struct sk_buff *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1057: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1116: FILE: include/net/addrconf.h:83:
+extern int			ipv6_dev_get_saddr(struct net *net,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1117: FILE: include/net/addrconf.h:84:
+extern int			ipv6_dev_get_saddr(struct net *net,
+					       struct net_device *dev,

WARNING:TYPO_SPELLING: 'iif' may be misspelled - perhaps 'if'?
#1347: FILE: net/ipv6/route.c:2297:
+	err = rt6_fill_node(net, skb, rt, &fl.fl6_dst, &fl.fl6_src, iif,
 	                                                            ^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1357: FILE: net/ipv6/route.c:2325:
+	err = rt6_fill_node(net, skb, rt, NULL, NULL, 0,
 				event, info->pid, seq, 0, 0, 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1437: FILE: net/sched/sch_htb.c:598:
+	} else if ((ret = cl->un.leaf.q->enqueue(skb, cl->un.leaf.q)) !=

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1455: FILE: net/sched/sch_htb.c:644:
+	} else if ((ret = cl->un.leaf.q->ops->requeue(skb, cl->un.leaf.q)) !=

CHECK:SPACING: No space is necessary after a cast
#1491: FILE: net/sched/sch_prio.c:241:
+				       (struct nlattr *) (qopt + 1), NULL);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1758: FILE: net/sctp/socket.c:5173:
+	if (put_user(len, optlen)) return -EFAULT;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230390.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 10 warnings, 15 checks, 1578 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230390.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
