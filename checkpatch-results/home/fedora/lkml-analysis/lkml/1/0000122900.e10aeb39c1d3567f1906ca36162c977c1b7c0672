WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#82: FILE: Makefile:4:
+EXTRAVERSION = .4
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#250: FILE: drivers/md/bitmap.c:1015:
+			int needed = ((sector_t)(i+1) << (CHUNK_BLOCK_SHIFT(bitmap))
 			                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#302: FILE: drivers/md/md.c:2847:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#324: FILE: drivers/md/raid10.c:1814:
+				for (j=0; j<conf->raid_disks; j++)
 				      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#324: FILE: drivers/md/raid10.c:1814:
+				for (j=0; j<conf->raid_disks; j++)
 				           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conf->mirrors[j].rdev"
#325: FILE: drivers/md/raid10.c:1815:
+					if (conf->mirrors[j].rdev == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <Faulty>
#326: FILE: drivers/md/raid10.c:1816:
+					    test_bit(Faulty, &conf->mirrors[j].rdev->flags)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!icr'
#344: FILE: drivers/net/e1000/e1000_main.c:3715:
+	if (unlikely((!icr) || test_bit(__E1000_DOWN, &adapter->flags)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#630: FILE: fs/buffer.c:2496:
+	if (unlikely(ret)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#636: FILE: fs/buffer.c:2502:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <UniStrnlen>
#675: FILE: fs/cifs/cifssmb.c:97:
+		src_len = UniStrnlen((wchar_t *)src, maxlen);

CHECK:CAMELCASE: Avoid CamelCase: <cifs_strfromUCS_le>
#680: FILE: fs/cifs/cifssmb.c:101:
+		dst_len = cifs_strfromUCS_le(*dst, (__le16 *)src, src_len, nls_codepage);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#690: FILE: fs/cifs/cifssmb.c:108:
+		strlcpy(*dst, src, src_len + 1);

CHECK:CAMELCASE: Avoid CamelCase: <serverDomain>
#813: FILE: fs/cifs/sess.c:345:
+	ses->serverDomain = kzalloc((4 * len) + 2, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ses->serverDomain"
#814: FILE: fs/cifs/sess.c:346:
+	if (ses->serverDomain != NULL)

CHECK:CAMELCASE: Avoid CamelCase: <Flags2>
#828: FILE: fs/cifs/sess.c:701:
+	if (smb_buf->Flags2 & SMBFLG2_UNICODE) {

CHECK:SPACING: No space is necessary after a cast
#830: FILE: fs/cifs/sess.c:703:
+		if (((unsigned long) bcc_ptr - (unsigned long) smb_buf) % 2) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#867: FILE: fs/ext4/ext4.h:1100:
+extern int ext4_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1007: FILE: fs/ioctl.c:300:
+			    blk_to_logical(inode, 0)+i_size_read(inode))
 			                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1084: FILE: fs/ioctl.c:367:
+			    logical+size >=
 			           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1085: FILE: fs/ioctl.c:368:
+			    blk_to_logical(inode, 0)+i_size_read(inode))
 			                            ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_inode"
#1142: FILE: fs/nfs/dir.c:1640:
+	if (new_inode != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_inode"
#1153: FILE: fs/nfs/dir.c:1650:
+		if (new_inode != NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1312: FILE: fs/ocfs2/file.c:1963:
+		if (ret < 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1314: FILE: fs/ocfs2/file.c:1965:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1354: FILE: fs/ocfs2/file.c:1998:
+				err = generic_osync_inode(inode, mapping,
+						  OSYNC_METADATA|OSYNC_DATA);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1354: FILE: fs/ocfs2/file.c:1998:
+						  OSYNC_METADATA|OSYNC_DATA);
 						                ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1415: FILE: fs/splice.c:606:
+	smp_mb();

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1416: FILE: fs/splice.c:607:
+	if (waitqueue_active(&pipe->wait))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1812: FILE: include/linux/buffer_head.h:227:
+int block_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf,
 				get_block_t get_block);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1825: FILE: include/linux/compiler.h:79:
+#if defined(CONFIG_TRACE_BRANCH_PROFILING) \
+    && !defined(DISABLE_BRANCH_PROFILING) && !defined(__CHECKER__)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1825: FILE: include/linux/compiler.h:79:
+    && !defined(DISABLE_BRANCH_PROFILING) && !defined(__CHECKER__)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1867: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#1867: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#1867: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'splice_actor *' should also have an identifier name
#1867: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1869: FILE: include/linux/splice.h:73:
+extern int splice_from_pipe_next(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#1869: FILE: include/linux/splice.h:73:
+extern int splice_from_pipe_next(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#1869: FILE: include/linux/splice.h:73:
+extern int splice_from_pipe_next(struct pipe_inode_info *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1871: FILE: include/linux/splice.h:75:
+extern void splice_from_pipe_begin(struct splice_desc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#1871: FILE: include/linux/splice.h:75:
+extern void splice_from_pipe_begin(struct splice_desc *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1872: FILE: include/linux/splice.h:76:
+extern void splice_from_pipe_end(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#1872: FILE: include/linux/splice.h:76:
+extern void splice_from_pipe_end(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#1872: FILE: include/linux/splice.h:76:
+extern void splice_from_pipe_end(struct pipe_inode_info *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1874: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#1874: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_buffer *' should also have an identifier name
#1874: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#1874: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1911: FILE: include/net/cipso_ipv4.h:259:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:RETURN_VOID: void function return statements are not generally useful
#1917: FILE: include/net/cipso_ipv4.h:265:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1957: FILE: include/net/netlabel.h:544:
 }
+static inline int netlbl_req_setattr(struct request_sock *req,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1960: FILE: include/net/netlabel.h:547:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1962: FILE: include/net/netlabel.h:549:
+}
+static inline void netlbl_req_delattr(struct request_sock *req)

WARNING:RETURN_VOID: void function return statements are not generally useful
#1965: FILE: include/net/netlabel.h:552:
+	return;
+}

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1983: FILE: mm/memory.c:1949:
+			vmf.flags = FAULT_FLAG_WRITE|FAULT_FLAG_MKWRITE;
 			                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2000: FILE: mm/memory.c:1969:
+			if (unlikely(!(tmp & VM_FAULT_LOCKED))) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2007: FILE: mm/memory.c:1976:
+			} else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2111: FILE: mm/memory.c:2697:
+				vmf.flags = FAULT_FLAG_WRITE|FAULT_FLAG_MKWRITE;
 				                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2118: FILE: mm/memory.c:2704:
+				if (unlikely(!(tmp & VM_FAULT_LOCKED))) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2125: FILE: mm/memory.c:2711:
+				} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2206: FILE: net/ipv4/cipso_ipv4.c:1969:
+	 * on and after all we are only talking about 40 bytes. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#2209: FILE: net/ipv4/cipso_ipv4.c:1972:
+	if (buf == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2222: FILE: net/ipv4/cipso_ipv4.c:1985:
+	 * set the IPOPT_CIPSO option. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!opt"
#2225: FILE: net/ipv4/cipso_ipv4.c:1988:
+	if (opt == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!opt"
#2269: FILE: net/ipv4/cipso_ipv4.c:2099:
+	if (opt == NULL || opt->cipso == 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2300: FILE: net/ipv4/cipso_ipv4.c:2130:
+		 * from there we can determine the new total option length */

CHECK:BRACES: braces {} should be used on all arms of this statement
#2304: FILE: net/ipv4/cipso_ipv4.c:2134:
+			if (opt->__data[iter] != IPOPT_NOP) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2307: FILE: net/ipv4/cipso_ipv4.c:2137:
+			} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2312: FILE: net/ipv4/cipso_ipv4.c:2142:
+		 * remove the entire option struct */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dom_entry"
#2400: FILE: net/netlabel/netlabel_kapi.c:780:
+	if (dom_entry == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2408: FILE: net/netlabel/netlabel_kapi.c:788:
+			struct inet_request_sock *req_inet = inet_rsk(req);
+			af4_entry = netlbl_domhsh_getentry_af4(secattr->domain,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2409: FILE: net/netlabel/netlabel_kapi.c:789:
+			af4_entry = netlbl_domhsh_getentry_af4(secattr->domain,
+							    req_inet->rmt_addr);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!af4_entry"
#2410: FILE: net/netlabel/netlabel_kapi.c:790:
+			if (af4_entry == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2426: FILE: net/netlabel/netlabel_kapi.c:806:
+			 * but we could remove other protocols if needed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2437: FILE: net/netlabel/netlabel_kapi.c:817:
+		 * now we can optimize everything away until we do */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2451: FILE: net/netlabel/netlabel_kapi.c:831:
+/**
+* netlbl_req_delattr - Delete all the NetLabel labels on a socket

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2649: FILE: security/selinux/include/netlabel.h:121:
+}
+static inline void selinux_netlbl_inet_csk_clone(struct sock *sk, u16 family)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2654: FILE: security/selinux/include/netlabel.h:125:
 }
+static inline int selinux_netlbl_socket_post_create(struct sock *sk,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!secattr"
#2882: FILE: security/selinux/netlabel.c:312:
+	if (secattr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hostsp"
#2966: FILE: security/smack/smack_lsm.c:1546:
+	if (hostsp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hostsp"
#2989: FILE: security/smack/smack_lsm.c:2265:
+	if (hostsp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#3015: FILE: security/smack/smack_lsm.c:2488:
+	if (sk == NULL ||

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3079: FILE: security/smack/smack_lsm.c:2538:
+	/*
+	* Save the peer's label in the request_sock so we can later setup

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3085: FILE: security/smack/smack_lsm.c:2544:
+	/*
+	* We need to decide if we want to label the incoming connection here

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#3087: FILE: security/smack/smack_lsm.c:2546:
+	* propogate the wire-label to the sock when it is created.
 	  ^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!smack_host_label"
#3092: FILE: security/smack/smack_lsm.c:2551:
+	if (smack_host_label(&addr) == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3107: FILE: security/smack/smack_lsm.c:2566:
+/**
+* smack_inet_csk_clone - Copy the connection information to the new socket

ERROR:CODE_INDENT: code indent should use tabs where possible
#3114: FILE: security/smack/smack_lsm.c:2573:
+^I^I^I         const struct request_sock *req)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3114: FILE: security/smack/smack_lsm.c:2573:
+static void smack_inet_csk_clone(struct sock *sk,
+			         const struct request_sock *req)

CHECK:BRACES: braces {} should be used on all arms of this statement
#3119: FILE: security/smack/smack_lsm.c:2578:
+	if (req->peer_secid != 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3122: FILE: security/smack/smack_lsm.c:2581:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3165: FILE: sound/soc/codecs/wm8990.c:748:
+SND_SOC_DAPM_MUX_E("AINLMUX", WM8990_INTDRIVBITS, WM8990_AINLMUX_PWR_BIT, 0,
 	&wm8990_dapm_ainlmux_controls, inmixer_event,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3174: FILE: sound/soc/codecs/wm8990.c:759:
+SND_SOC_DAPM_MUX_E("AINRMUX", WM8990_INTDRIVBITS, WM8990_AINRMUX_PWR_BIT, 0,
 	&wm8990_dapm_ainrmux_controls, inmixer_event,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000122900.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 33 warnings, 58 checks, 2822 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000122900.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
