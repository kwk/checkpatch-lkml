WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
lguest is a simple hypervisor for Linux on Linux.  Unlike kvm it doesn't need

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: drivers/lguest/lguest.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#77: FILE: drivers/lguest/lguest.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#78: FILE: drivers/lguest/lguest.c:19:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#92: FILE: drivers/lguest/lguest.c:33:
+#include <asm/pgtable.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#100: FILE: drivers/lguest/lguest.c:41:
+extern const char lgstart_cli[], lgend_cli[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#101: FILE: drivers/lguest/lguest.c:42:
+extern const char lgstart_sti[], lgend_sti[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#102: FILE: drivers/lguest/lguest.c:43:
+extern const char lgstart_popf[], lgend_popf[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#103: FILE: drivers/lguest/lguest.c:44:
+extern const char lgstart_pushf[], lgend_pushf[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#104: FILE: drivers/lguest/lguest.c:45:
+extern const char lgstart_iret[], lgend_iret[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#105: FILE: drivers/lguest/lguest.c:46:
+extern void lguest_iret(void);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#108: FILE: drivers/lguest/lguest.c:49:
+	.hcall_status = { [0 ... LHCALL_RING_SIZE-1] = 0xFF },
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#113: FILE: drivers/lguest/lguest.c:54:
+};
+struct lguest_device_desc *lguest_devices;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#114: FILE: drivers/lguest/lguest.c:55:
+static __initdata const struct lguest_boot_info *boot = __va(0);

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

CHECK:BRACES: braces {} should be used on all arms of this statement
#119: FILE: drivers/lguest/lguest.c:60:
+	if (mode == PARAVIRT_LAZY_FLUSH)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#121: FILE: drivers/lguest/lguest.c:62:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#193: FILE: drivers/lguest/lguest.c:134:
+static void lguest_load_idt(const struct Xgt_desc_struct *desc)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#198: FILE: drivers/lguest/lguest.c:139:
+	for (i = 0; i < (desc->size+1)/8; i++)
 	                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#198: FILE: drivers/lguest/lguest.c:139:
+	for (i = 0; i < (desc->size+1)/8; i++)
 	                              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: drivers/lguest/lguest.c:145:
+	BUG_ON((desc->size+1)/8 != GDT_ENTRIES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#204: FILE: drivers/lguest/lguest.c:145:
+	BUG_ON((desc->size+1)/8 != GDT_ENTRIES);
 	                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#204: FILE: drivers/lguest/lguest.c:145:
+	BUG_ON((desc->size+1)/8 != GDT_ENTRIES);
 	                     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#220: FILE: drivers/lguest/lguest.c:161:
+static void lguest_set_ldt(const void *addr, unsigned entries)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#245: FILE: drivers/lguest/lguest.c:186:
+		 * processor information, limit it to known fields. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#307: FILE: drivers/lguest/lguest.c:248:
+	lazy_hcall(LHCALL_SET_PMD, __pa(pmdp)&PAGE_MASK,
 	                                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#308: FILE: drivers/lguest/lguest.c:249:
+		   (__pa(pmdp)&(PAGE_SIZE-1))/4, 0);
 		              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#308: FILE: drivers/lguest/lguest.c:249:
+		   (__pa(pmdp)&(PAGE_SIZE-1))/4, 0);
 		                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#308: FILE: drivers/lguest/lguest.c:249:
+		   (__pa(pmdp)&(PAGE_SIZE-1))/4, 0);
 		                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#360: FILE: drivers/lguest/lguest.c:301:
+		int vector = FIRST_EXTERNAL_VECTOR + i;
+		if (vector != SYSCALL_VECTOR) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: drivers/lguest/lguest.c:329:
+static void lguest_load_esp0(struct tss_struct *tss,
+				     struct thread_struct *thread)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#390: FILE: drivers/lguest/lguest.c:331:
+	lazy_hcall(LHCALL_SET_STACK, __KERNEL_DS|0x1, thread->esp0,
 	                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#391: FILE: drivers/lguest/lguest.c:332:
+		   THREAD_SIZE/PAGE_SIZE);
 		              ^

WARNING:TYPO_SPELLING: 'paniced' may be misspelled - perhaps 'panicked'?
#430: FILE: drivers/lguest/lguest.c:371:
+static struct notifier_block paniced = {
                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'paniced' may be misspelled - perhaps 'panicked'?
#437: FILE: drivers/lguest/lguest.c:378:
+	atomic_notifier_chain_register(&panic_notifier_list, &paniced);
 	                                                      ^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#453: FILE: drivers/lguest/lguest.c:394:
+};
+static unsigned lguest_patch(u8 type, u16 clobber, void *insns, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#453: FILE: drivers/lguest/lguest.c:394:
+static unsigned lguest_patch(u8 type, u16 clobber, void *insns, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#453: FILE: drivers/lguest/lguest.c:394:
+static unsigned lguest_patch(u8 type, u16 clobber, void *insns, unsigned len)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#549: FILE: drivers/lguest/lguest.c:490:
+		INITRD_START = boot->max_pfn*PAGE_SIZE - boot->initrd_size;
 		                            ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#561: FILE: drivers/lguest/lguest_asm.S:1:
+#include <linux/linkage.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#618: FILE: drivers/lguest/lguest_bus.c:1:
+#include <linux/init.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#621: FILE: drivers/lguest/lguest_bus.c:4:
+#include <asm/io.h>

ERROR:CODE_INDENT: code indent should use tabs where possible
#624: FILE: drivers/lguest/lguest_bus.c:7:
+                         struct device_attribute *attr, char *buf)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: drivers/lguest/lguest_bus.c:7:
+                         struct device_attribute *attr, char *buf)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#626: FILE: drivers/lguest/lguest_bus.c:9:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#626: FILE: drivers/lguest/lguest_bus.c:9:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#627: FILE: drivers/lguest/lguest_bus.c:10:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
+	return sprintf(buf, "%hu", lguest_devices[dev->index].type);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#629: FILE: drivers/lguest/lguest_bus.c:12:
+}
+static ssize_t features_show(struct device *_dev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#630: FILE: drivers/lguest/lguest_bus.c:13:
+                             struct device_attribute *attr, char *buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: drivers/lguest/lguest_bus.c:13:
+                             struct device_attribute *attr, char *buf)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#632: FILE: drivers/lguest/lguest_bus.c:15:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#632: FILE: drivers/lguest/lguest_bus.c:15:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#633: FILE: drivers/lguest/lguest_bus.c:16:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
+	return sprintf(buf, "%hx", lguest_devices[dev->index].features);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#635: FILE: drivers/lguest/lguest_bus.c:18:
+}
+static ssize_t pfn_show(struct device *_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: drivers/lguest/lguest_bus.c:19:
+static ssize_t pfn_show(struct device *_dev,
+			 struct device_attribute *attr, char *buf)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#638: FILE: drivers/lguest/lguest_bus.c:21:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#638: FILE: drivers/lguest/lguest_bus.c:21:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#639: FILE: drivers/lguest/lguest_bus.c:22:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
+	return sprintf(buf, "%u", lguest_devices[dev->index].pfn);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#641: FILE: drivers/lguest/lguest_bus.c:24:
+}
+static ssize_t status_show(struct device *_dev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#642: FILE: drivers/lguest/lguest_bus.c:25:
+                           struct device_attribute *attr, char *buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: drivers/lguest/lguest_bus.c:25:
+                           struct device_attribute *attr, char *buf)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#644: FILE: drivers/lguest/lguest_bus.c:27:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#644: FILE: drivers/lguest/lguest_bus.c:27:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#645: FILE: drivers/lguest/lguest_bus.c:28:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
+	return sprintf(buf, "%hx", lguest_devices[dev->index].status);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#647: FILE: drivers/lguest/lguest_bus.c:30:
+}
+static ssize_t status_store(struct device *_dev, struct device_attribute *attr,

ERROR:CODE_INDENT: code indent should use tabs where possible
#648: FILE: drivers/lguest/lguest_bus.c:31:
+                            const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: drivers/lguest/lguest_bus.c:31:
+                            const char *buf, size_t count)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#650: FILE: drivers/lguest/lguest_bus.c:33:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#650: FILE: drivers/lguest/lguest_bus.c:33:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#651: FILE: drivers/lguest/lguest_bus.c:34:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
+	if (sscanf(buf, "%hi", &lguest_devices[dev->index].status) != 1)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#651: FILE: drivers/lguest/lguest_bus.c:34:
+	if (sscanf(buf, "%hi", &lguest_devices[dev->index].status) != 1)
+		return -EINVAL;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#655: FILE: drivers/lguest/lguest_bus.c:38:
+}
+static struct device_attribute lguest_dev_attrs[] = {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#665: FILE: drivers/lguest/lguest_bus.c:48:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#665: FILE: drivers/lguest/lguest_bus.c:48:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#666: FILE: drivers/lguest/lguest_bus.c:49:
+	struct lguest_driver *drv = container_of(_drv,struct lguest_driver,drv);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#666: FILE: drivers/lguest/lguest_bus.c:49:
+	struct lguest_driver *drv = container_of(_drv,struct lguest_driver,drv);
 	                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#691: FILE: drivers/lguest/lguest_bus.c:74:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#691: FILE: drivers/lguest/lguest_bus.c:74:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new)...) over kmalloc(sizeof(struct lguest_device)...)
#721: FILE: drivers/lguest/lguest_bus.c:104:
+	new = kmalloc(sizeof(struct lguest_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#723: FILE: drivers/lguest/lguest_bus.c:106:
+		printk(KERN_EMERG "Cannot allocate lguest device %u\n", index);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#735: FILE: drivers/lguest/lguest_bus.c:118:
+		printk(KERN_EMERG "Cannot register lguest device %u\n", index);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#759: FILE: drivers/lguest/lguest_bus.c:142:
+	if (bus_register(&lguest_bus.bus) != 0
+	    || device_register(&lguest_bus.dev) != 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#770: FILE: include/linux/lguest.h:1:
+/* Things the lguest guest needs to know.  Note: like all lguest interfaces,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#771: FILE: include/linux/lguest.h:2:
+ * this is subject to wild and random change between versions. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: include/linux/lguest.h:36:
+      unsigned long arg1, unsigned long arg2, unsigned long arg3)$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#818: FILE: include/linux/lguest.h:49:
+#define LGUEST_IRQS (NR_IRQS < 32 ? NR_IRQS: 32)
                                            ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#822: FILE: include/linux/lguest.h:53:
+struct hcall_ring
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#828: FILE: include/linux/lguest.h:59:
+struct lguest_data
+{

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#852: FILE: include/linux/lguest.h:83:
+};
+extern struct lguest_data lguest_data;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#859: FILE: include/linux/lguest_bus.h:1:
+#ifndef _ASM_LGUEST_DEVICE_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#887: FILE: include/linux/lguest_bus.h:29:
+extern int register_lguest_driver(struct lguest_driver *drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#888: FILE: include/linux/lguest_bus.h:30:
+extern void unregister_lguest_driver(struct lguest_driver *drv);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000433848.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 26 errors, 36 warnings, 29 checks, 816 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000433848.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
