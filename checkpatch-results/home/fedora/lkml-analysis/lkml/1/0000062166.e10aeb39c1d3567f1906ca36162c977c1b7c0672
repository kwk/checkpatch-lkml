WARNING:BAD_SIGN_OFF: 'Almost-signed-off-by:' is the preferred signature form
#49: 
Almost-Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#49: 
Almost-Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                                   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#388: FILE: arch/arm/include/asm/highmem.h:26:
+extern void *kmap_atomic_push(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#389: FILE: arch/arm/include/asm/highmem.h:27:
+extern void kmap_atomic_pop(void *kvaddr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#390: FILE: arch/arm/include/asm/highmem.h:28:
+extern void *kmap_atomic_push_pfn(unsigned long pfn);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#406: FILE: arch/arm/include/asm/pgtable.h:266:
+#define pte_offset_map(dir,addr)	(__pte_map(dir) + __pte_index(addr))
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#407: FILE: arch/arm/include/asm/pgtable.h:267:
+#define pte_offset_map_nested(dir,addr)	(__pte_map(dir) + __pte_index(addr))
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#417: FILE: arch/arm/include/asm/pgtable.h:275:
+#define __pte_map(dir,km)	((pte_t *)kmap_atomic_push(pmd_page(*(dir)), km) + PTRS_PER_PTE)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#418: FILE: arch/arm/include/asm/pgtable.h:276:
+#define __pte_unmap(pte,km)	kmap_atomic_pop((pte - PTRS_PER_PTE), km)
                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pte' may be better as '(pte)' to avoid precedence issues
#418: FILE: arch/arm/include/asm/pgtable.h:276:
+#define __pte_unmap(pte,km)	kmap_atomic_pop((pte - PTRS_PER_PTE), km)

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#874: FILE: arch/frv/include/asm/highmem.h:100:
+#define __kmap_atomic_push_secondary(slot, paddr)							  \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'paddr' may be better as '(paddr)' to avoid precedence issues
#874: FILE: arch/frv/include/asm/highmem.h:100:
+#define __kmap_atomic_push_secondary(slot, paddr)							  \
 ({												  \
 	unsigned long damlr = KMAP_ATOMIC_SECONDARY_FRAME + (slot) * PAGE_SIZE;			  \
 	unsigned long dampr = paddr | xAMPRx_L | xAMPRx_M | xAMPRx_S | xAMPRx_SS_16Kb | xAMPRx_V; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#904: FILE: arch/frv/include/asm/highmem.h:125:
+        case 0:^I^Ireturn __kmap_atomic_push_primary(0, paddr, 2);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: arch/frv/include/asm/highmem.h:125:
+        case 0:^I^Ireturn __kmap_atomic_push_primary(0, paddr, 2);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#905: FILE: arch/frv/include/asm/highmem.h:126:
+        case 1:^I^Ireturn __kmap_atomic_push_primary(1, paddr, 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#905: FILE: arch/frv/include/asm/highmem.h:126:
+        case 1:^I^Ireturn __kmap_atomic_push_primary(1, paddr, 3);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#906: FILE: arch/frv/include/asm/highmem.h:127:
+        case 2:^I^Ireturn __kmap_atomic_push_primary(2, paddr, 4);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: arch/frv/include/asm/highmem.h:127:
+        case 2:^I^Ireturn __kmap_atomic_push_primary(2, paddr, 4);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#907: FILE: arch/frv/include/asm/highmem.h:128:
+        case 3:^I^Ireturn __kmap_atomic_push_primary(3, paddr, 5);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: arch/frv/include/asm/highmem.h:128:
+        case 3:^I^Ireturn __kmap_atomic_push_primary(3, paddr, 5);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#908: FILE: arch/frv/include/asm/highmem.h:129:
+        case 4:^I^Ireturn __kmap_atomic_push_primary(4, paddr, 6);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#908: FILE: arch/frv/include/asm/highmem.h:129:
+        case 4:^I^Ireturn __kmap_atomic_push_primary(4, paddr, 6);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#909: FILE: arch/frv/include/asm/highmem.h:130:
+        case 5:^I^Ireturn __kmap_atomic_push_primary(5, paddr, 7);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#909: FILE: arch/frv/include/asm/highmem.h:130:
+        case 5:^I^Ireturn __kmap_atomic_push_primary(5, paddr, 7);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: arch/frv/include/asm/highmem.h:131:
+        case 6:^I^Ireturn __kmap_atomic_push_primary(6, paddr, 8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: arch/frv/include/asm/highmem.h:131:
+        case 6:^I^Ireturn __kmap_atomic_push_primary(6, paddr, 8);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#911: FILE: arch/frv/include/asm/highmem.h:132:
+        case 7:^I^Ireturn __kmap_atomic_push_primary(7, paddr, 9);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#911: FILE: arch/frv/include/asm/highmem.h:132:
+        case 7:^I^Ireturn __kmap_atomic_push_primary(7, paddr, 9);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#912: FILE: arch/frv/include/asm/highmem.h:133:
+        case 8:^I^Ireturn __kmap_atomic_push_primary(8, paddr, 10);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#912: FILE: arch/frv/include/asm/highmem.h:133:
+        case 8:^I^Ireturn __kmap_atomic_push_primary(8, paddr, 10);$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#933: FILE: arch/frv/include/asm/highmem.h:151:
+#define __kmap_atomic_pop_secondary(slot, vaddr)				\
 do {									\
 	asm volatile("tlbpr %0,gr0,#4,#1" : : "r"(vaddr) : "memory");	\
 } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:CODE_INDENT: code indent should use tabs where possible
#953: FILE: arch/frv/include/asm/highmem.h:161:
+        case 0:^I^I__kmap_atomic_pop_primary(0, 2);^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#953: FILE: arch/frv/include/asm/highmem.h:161:
+        case 0:^I^I__kmap_atomic_pop_primary(0, 2);^Ibreak;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#953: FILE: arch/frv/include/asm/highmem.h:161:
+        case 0:		__kmap_atomic_pop_primary(0, 2);	break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#954: FILE: arch/frv/include/asm/highmem.h:162:
+        case 1:^I^I__kmap_atomic_pop_primary(1, 3);^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#954: FILE: arch/frv/include/asm/highmem.h:162:
+        case 1:^I^I__kmap_atomic_pop_primary(1, 3);^Ibreak;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#954: FILE: arch/frv/include/asm/highmem.h:162:
+        case 1:		__kmap_atomic_pop_primary(1, 3);	break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#955: FILE: arch/frv/include/asm/highmem.h:163:
+        case 2:^I^I__kmap_atomic_pop_primary(2, 4);^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#955: FILE: arch/frv/include/asm/highmem.h:163:
+        case 2:^I^I__kmap_atomic_pop_primary(2, 4);^Ibreak;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#955: FILE: arch/frv/include/asm/highmem.h:163:
+        case 2:		__kmap_atomic_pop_primary(2, 4);	break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#956: FILE: arch/frv/include/asm/highmem.h:164:
+        case 3:^I^I__kmap_atomic_pop_primary(3, 5);^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: arch/frv/include/asm/highmem.h:164:
+        case 3:^I^I__kmap_atomic_pop_primary(3, 5);^Ibreak;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#956: FILE: arch/frv/include/asm/highmem.h:164:
+        case 3:		__kmap_atomic_pop_primary(3, 5);	break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#957: FILE: arch/frv/include/asm/highmem.h:165:
+        case 4:^I^I__kmap_atomic_pop_primary(4, 6);^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#957: FILE: arch/frv/include/asm/highmem.h:165:
+        case 4:^I^I__kmap_atomic_pop_primary(4, 6);^Ibreak;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#957: FILE: arch/frv/include/asm/highmem.h:165:
+        case 4:		__kmap_atomic_pop_primary(4, 6);	break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#958: FILE: arch/frv/include/asm/highmem.h:166:
+        case 5:^I^I__kmap_atomic_pop_primary(5, 7);^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: arch/frv/include/asm/highmem.h:166:
+        case 5:^I^I__kmap_atomic_pop_primary(5, 7);^Ibreak;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#958: FILE: arch/frv/include/asm/highmem.h:166:
+        case 5:		__kmap_atomic_pop_primary(5, 7);	break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#959: FILE: arch/frv/include/asm/highmem.h:167:
+        case 6:^I^I__kmap_atomic_pop_primary(6, 8);^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#959: FILE: arch/frv/include/asm/highmem.h:167:
+        case 6:^I^I__kmap_atomic_pop_primary(6, 8);^Ibreak;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#959: FILE: arch/frv/include/asm/highmem.h:167:
+        case 6:		__kmap_atomic_pop_primary(6, 8);	break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#960: FILE: arch/frv/include/asm/highmem.h:168:
+        case 7:^I^I__kmap_atomic_pop_primary(7, 9);^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#960: FILE: arch/frv/include/asm/highmem.h:168:
+        case 7:^I^I__kmap_atomic_pop_primary(7, 9);^Ibreak;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#960: FILE: arch/frv/include/asm/highmem.h:168:
+        case 7:		__kmap_atomic_pop_primary(7, 9);	break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#961: FILE: arch/frv/include/asm/highmem.h:169:
+        case 8:^I^I__kmap_atomic_pop_primary(8, 10);^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#961: FILE: arch/frv/include/asm/highmem.h:169:
+        case 8:^I^I__kmap_atomic_pop_primary(8, 10);^Ibreak;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#961: FILE: arch/frv/include/asm/highmem.h:169:
+        case 8:		__kmap_atomic_pop_primary(8, 10);	break;

CHECK:SPACING: No space is necessary after a cast
#1087: FILE: arch/microblaze/include/asm/pgtable.h:481:
+	((pte_t *) kmap_atomic_push(pmd_page(*(dir))) + pte_index(addr))

CHECK:SPACING: No space is necessary after a cast
#1090: FILE: arch/microblaze/include/asm/pgtable.h:483:
+	((pte_t *) kmap_atomic_push(pmd_page(*(dir))) + pte_index(addr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1110: FILE: arch/mips/include/asm/highmem.h:50:
+extern void *__kmap_atomic_push(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1111: FILE: arch/mips/include/asm/highmem.h:51:
+extern void __kmap_atomic_pop(void *kvaddr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1112: FILE: arch/mips/include/asm/highmem.h:52:
+extern void *kmap_atomic_push_pfn(unsigned long pfn);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1183: FILE: arch/mips/mm/highmem.c:53:
+	idx = kmap_atomic_push_idx() + KM_TYPE_NR*smp_processor_id();
 	                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1200: FILE: arch/mips/mm/highmem.c:69:
+	enum fixed_addresses idx = kmap_atomic_pop_idx() + KM_TYPE_NR*smp_processor_id();
 	                                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1226: FILE: arch/mips/mm/highmem.c:101:
+	idx = kmap_atomic_push_idx() + KM_TYPE_NR*smp_processor_id();
 	                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1333: FILE: arch/powerpc/include/asm/highmem.h:63:
+extern void *kmap_atomic_push_prot(struct page *page, pgprot_t prot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1334: FILE: arch/powerpc/include/asm/highmem.h:64:
+extern void kmap_atomic_pop(void *kvaddr);

CHECK:SPACING: No space is necessary after a cast
#1359: FILE: arch/powerpc/include/asm/pgtable-ppc32.h:311:
+	((pte_t *) kmap_atomic_push(pmd_page(*(dir))) + pte_index(addr))

CHECK:SPACING: No space is necessary after a cast
#1362: FILE: arch/powerpc/include/asm/pgtable-ppc32.h:313:
+	((pte_t *) kmap_atomic_push(pmd_page(*(dir))) + pte_index(addr))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1452: FILE: arch/powerpc/mm/highmem.c:42:
+	idx = kmap_atomic_push_idx() + KM_TYPE_NR*smp_processor_id();
 	                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1469: FILE: arch/powerpc/mm/highmem.c:58:
+	enum fixed_addresses idx = kmap_atomic_pop_idx() + KM_TYPE_NR*smp_processor_id();
 	                                                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1580: FILE: arch/sparc/include/asm/highmem.h:73:
+extern void *kmap_atomic_push(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1581: FILE: arch/sparc/include/asm/highmem.h:74:
+extern void kmap_atomic_pop(void *kvaddr);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1626: FILE: arch/sparc/mm/highmem.c:42:
+	idx = kmap_atomic_push_idx() + KM_TYPE_NR*smp_processor_id();
 	                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1643: FILE: arch/sparc/mm/highmem.c:71:
+	unsigned long idx = kmap_atomic_pop_idx() + KM_TYPE_NR*smp_processor_id();
 	                                                      ^

CHECK:SPACING: No space is necessary after a cast
#1691: FILE: arch/um/kernel/skas/uaccess.c:71:
+	addr = (unsigned long) kmap_atomic_push(page) +

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2168: FILE: arch/x86/mm/highmem_32.c:41:
+	idx = kmap_atomic_push_idx() + KM_TYPE_NR*smp_processor_id();
 	                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2188: FILE: arch/x86/mm/highmem_32.c:57:
+	enum fixed_addresses idx = kmap_atomic_pop_idx() + KM_TYPE_NR*smp_processor_id();
 	                                                             ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2235: FILE: arch/x86/mm/highmem_32.c:118:
+EXPORT_SYMBOL(kmap_atomic_pop);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2236: FILE: arch/x86/mm/highmem_32.c:119:
+EXPORT_SYMBOL(kmap_atomic_push_prot);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2280: FILE: arch/x86/mm/iomap_32.c:64:
+        * For non-PAT systems, promote PAGE_KERNEL_WC to PAGE_KERNEL_UC_MINUS.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2281: FILE: arch/x86/mm/iomap_32.c:65:
+        * PAGE_KERNEL_WC maps to PWT, which translates to uncached if the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2282: FILE: arch/x86/mm/iomap_32.c:66:
+        * MTRR is UC or WC.  UC_MINUS gets the real intention, of the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2283: FILE: arch/x86/mm/iomap_32.c:67:
+        * user, which is "WC if the MTRR is WC, UC if you can't do that."$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2284: FILE: arch/x86/mm/iomap_32.c:68:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2285: FILE: arch/x86/mm/iomap_32.c:69:
+       if (!pat_enabled && pgprot_val(prot) == pgprot_val(PAGE_KERNEL_WC))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2285: FILE: arch/x86/mm/iomap_32.c:69:
+       if (!pat_enabled && pgprot_val(prot) == pgprot_val(PAGE_KERNEL_WC))
+               prot = PAGE_KERNEL_UC_MINUS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2286: FILE: arch/x86/mm/iomap_32.c:70:
+               prot = PAGE_KERNEL_UC_MINUS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2286: FILE: arch/x86/mm/iomap_32.c:70:
+               prot = PAGE_KERNEL_UC_MINUS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2289: FILE: arch/x86/mm/iomap_32.c:72:
+       return kmap_atomic_push_prot_pfn(pfn, prot);$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2972: FILE: drivers/gpu/drm/i915/i915_gem_debug.c:60:
+	uint32_t *mem = kmap_atomic_push(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3593: FILE: drivers/mmc/host/tmio_mmc.h:204:
+static inline char *tmio_mmc_kmap_atomic_push(struct tmio_mmc_host *host,
 	unsigned long *flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3604: FILE: drivers/mmc/host/tmio_mmc.h:213:
+static inline void tmio_mmc_kmap_atomic_pop(struct tmio_mmc_host *host,
 	unsigned long *flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3746: FILE: drivers/scsi/dc395x.c:2283:
+				base = scsi_kmap_atomic_push_sg(scsi_sglist(srb->cmd),
 							   srb->sg_count, &offset, &len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3764: FILE: drivers/scsi/dc395x.c:2500:
+				base = scsi_kmap_atomic_push_sg(scsi_sglist(srb->cmd),
 							   srb->sg_count, &offset, &len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#3847: FILE: drivers/scsi/gdth.c:2310:
+            address = kmap_atomic_push(sg_page(sl)) + sl->offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3847: FILE: drivers/scsi/gdth.c:2310:
+            address = kmap_atomic_push(sg_page(sl)) + sl->offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3851: FILE: drivers/scsi/gdth.c:2313:
+            kmap_atomic_pop(address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3851: FILE: drivers/scsi/gdth.c:2313:
+            kmap_atomic_pop(address);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3864: FILE: drivers/scsi/ips.c:1509:
+                /* kmap_atomic_push() ensures addressability of the user buffer.*/$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3868: FILE: drivers/scsi/ips.c:1512:
+                buffer = kmap_atomic_push(sg_page(sg)) + sg->offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3868: FILE: drivers/scsi/ips.c:1512:
+                buffer = kmap_atomic_push(sg_page(sg)) + sg->offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3872: FILE: drivers/scsi/ips.c:1515:
+                        kmap_atomic_pop(buffer - sg->offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3872: FILE: drivers/scsi/ips.c:1515:
+                        kmap_atomic_pop(buffer - sg->offset);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3877: FILE: drivers/scsi/ips.c:1519:
+                kmap_atomic_pop(buffer - sg->offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3877: FILE: drivers/scsi/ips.c:1519:
+                kmap_atomic_pop(buffer - sg->offset);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4128: FILE: drivers/scsi/scsi_lib.c:2502:
+void *scsi_kmap_atomic_push_sg(struct scatterlist *sgl, int sg_count,
 			  size_t *offset, size_t *len)

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#4143: FILE: drivers/scsi/scsi_lib.c:2543:
+ * scsi_kmap_atomic_pop_sg - atomically unmap a virtual address, previously mapped with scsi_kmap_atomic_push_sg

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <pSRB>
#4218: FILE: drivers/scsi/tmscsim.c:915:
+		ptr = scsi_kmap_atomic_push_sg(pSRB->pSegmentList, pSRB->SGcount, &offset, &count);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <pSegmentList>
#4218: FILE: drivers/scsi/tmscsim.c:915:
+		ptr = scsi_kmap_atomic_push_sg(pSRB->pSegmentList, pSRB->SGcount, &offset, &count);

CHECK:CAMELCASE: Avoid CamelCase: <SGcount>
#4218: FILE: drivers/scsi/tmscsim.c:915:
+		ptr = scsi_kmap_atomic_push_sg(pSRB->pSegmentList, pSRB->SGcount, &offset, &count);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4236: FILE: drivers/staging/hv/RndisFilter.c:412:
+	rndisHeader = (struct rndis_message *)kmap_atomic_push(

CHECK:CAMELCASE: Avoid CamelCase: <rndisHeader>
#4236: FILE: drivers/staging/hv/RndisFilter.c:412:
+	rndisHeader = (struct rndis_message *)kmap_atomic_push(

CHECK:CAMELCASE: Avoid CamelCase: <Packet>
#4237: FILE: drivers/staging/hv/RndisFilter.c:413:
+			pfn_to_page(Packet->PageBuffers[0].Pfn));

CHECK:CAMELCASE: Avoid CamelCase: <PageBuffers>
#4237: FILE: drivers/staging/hv/RndisFilter.c:413:
+			pfn_to_page(Packet->PageBuffers[0].Pfn));

CHECK:CAMELCASE: Avoid CamelCase: <Pfn>
#4237: FILE: drivers/staging/hv/RndisFilter.c:413:
+			pfn_to_page(Packet->PageBuffers[0].Pfn));

CHECK:CAMELCASE: Avoid CamelCase: <Offset>
#4247: FILE: drivers/staging/hv/RndisFilter.c:426:
+		kmap_atomic_pop(rndisHeader - Packet->PageBuffers[0].Offset);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#4327: FILE: drivers/staging/hv/storvsc_drv.c:558:
+					bounce_addr = (unsigned long)kmap_atomic_push(sg_page((&bounce_sgl[j])));

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#4369: FILE: drivers/staging/hv/storvsc_drv.c:618:
+					bounce_addr = (unsigned long)kmap_atomic_push(sg_page((&bounce_sgl[j])));

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#4672: FILE: fs/btrfs/ctree.h:1198:
+	type *p = kmap_atomic_push(eb->first_page);		\
 	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#4682: FILE: fs/btrfs/ctree.h:1206:
+	type *p = kmap_atomic_push(eb->first_page);		\
 	     ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5569: FILE: fs/nfs/nfs2xdr.c:450:
+	kaddr = p = kmap_atomic_push(*page);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5603: FILE: fs/nfs/nfs3xdr.c:540:
+	kaddr = p = kmap_atomic_push(*page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#5621: FILE: fs/nfs/nfs3xdr.c:862:
+	kaddr = (char*)kmap_atomic_push(rcvbuf->pages[0]);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5637: FILE: fs/nfs/nfs4proc.c:168:
+	start = p = kmap_atomic_push(*readdir->pages);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5659: FILE: fs/nfs/nfs4xdr.c:4101:
+	kaddr = p = kmap_atomic_push(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#6738: FILE: fs/ntfs/super.c:2492:
+		kaddr = (u32*)kmap_atomic_push(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#6756: FILE: fs/ntfs/super.c:2563:
+		kaddr = (u32*)kmap_atomic_push(page);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bio' - possible side-effects?
#7088: FILE: include/linux/bio.h:249:
+#define __bio_kmap_atomic_push(bio, idx, kmtype)				\
+	(kmap_atomic_push(bio_iovec_idx((bio), (idx))->bv_page, kmtype) +	\
 		bio_iovec_idx((bio), (idx))->bv_offset)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#7088: FILE: include/linux/bio.h:249:
+#define __bio_kmap_atomic_push(bio, idx, kmtype)				\
+	(kmap_atomic_push(bio_iovec_idx((bio), (idx))->bv_page, kmtype) +	\
 		bio_iovec_idx((bio), (idx))->bv_offset)

CHECK:SPACING: No space is necessary after a cast
#7102: FILE: include/linux/bio.h:466:
+	addr = (unsigned long) kmap_atomic_push(bvec->bv_page);

CHECK:SPACING: No space is necessary after a cast
#7111: FILE: include/linux/bio.h:478:
+	kmap_atomic_pop((void *) ptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7135: FILE: include/linux/highmem.h:30:
+	BUG_ON(idx > KM_TYPE_NR);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7144: FILE: include/linux/highmem.h:39:
+	BUG_ON(idx < 0);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#7162: FILE: include/linux/highmem.h:75:
 }
+#define kmap_atomic_push_prot(page, prot)	kmap_atomic_push(page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#7166: FILE: include/linux/highmem.h:77:
+#define kmap_atomic_pop(addr)		do { pagefault_enable(); } while (0)

ERROR:SPACING: space required before the open parenthesis '('
#7171: FILE: include/linux/highmem.h:81:
+#define kmap_flush_unused()		do {} while(0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#7282: FILE: include/linux/scatterlist.h:244:
+#define SG_MITER_ATOMIC		(1 << 0)	 /* use kmap_atomic_push */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7295: FILE: include/scsi/scsi_cmnd.h:141:
+extern void *scsi_kmap_atomic_push_sg(struct scatterlist *sg, int sg_count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7296: FILE: include/scsi/scsi_cmnd.h:142:
+extern void *scsi_kmap_atomic_push_sg(struct scatterlist *sg, int sg_count,
 				 size_t *offset, size_t *len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7298: FILE: include/scsi/scsi_cmnd.h:143:
+extern void scsi_kmap_atomic_pop_sg(void *virt);

CHECK:SPACING: No space is necessary after a cast
#7634: FILE: mm/shmem.c:166:
+	(void) kmap_atomic_push(ZERO_PAGE(0));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062166.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 47 errors, 39 warnings, 57 checks, 6316 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062166.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
