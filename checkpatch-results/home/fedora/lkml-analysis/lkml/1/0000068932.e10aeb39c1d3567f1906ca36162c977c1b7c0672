WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: fs/ceph/inode.c:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#91: FILE: fs/ceph/inode.c:42:
+	if (inode == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#94: FILE: fs/ceph/inode.c:45:
+		dout("get_inode created new inode %p %llx.%llx ino %llx\n",
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#99: FILE: fs/ceph/inode.c:50:
+	dout("get_inode on %lu=%llx.%llx got %p\n", inode->i_ino, vino.ino,
 	^^^^

WARNING:TYPO_SPELLING: 'constuct' may be misspelled - perhaps 'construct'?
#105: FILE: fs/ceph/inode.c:56:
+ * get/constuct snapdir inode for a given directory
        ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#115: FILE: fs/ceph/inode.c:66:
+	BUG_ON(!S_ISDIR(parent->i_mode));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: fs/ceph/inode.c:88:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__get_or_create_frag', this function's name, in a string
#172: FILE: fs/ceph/inode.c:123:
+		pr_err("ceph __get_or_create_frag ENOMEM on %p %llx.%llx "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#172: FILE: fs/ceph/inode.c:123:
+	if (!frag) {
+		pr_err("ceph __get_or_create_frag ENOMEM on %p %llx.%llx "

WARNING:SPLIT_STRING: quoted string split across lines
#173: FILE: fs/ceph/inode.c:124:
+		pr_err("ceph __get_or_create_frag ENOMEM on %p %llx.%llx "
+		       "frag %x\n", &ci->vfs_inode,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#185: FILE: fs/ceph/inode.c:136:
+	dout("get_or_create_frag added %llx.%llx frag %x\n",
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#201: FILE: fs/ceph/inode.c:152:
+	unsigned nway, i;

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#223: FILE: fs/ceph/inode.c:174:
+		dout("choose_frag(%x) %x splits by %d (%d ways)\n", v, t,
 		^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#232: FILE: fs/ceph/inode.c:183:
+		BUG_ON(i == nway);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#234: FILE: fs/ceph/inode.c:185:
+	dout("choose_frag(%x) = %x\n", v, t);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#264: FILE: fs/ceph/inode.c:215:
+			dout("fill_dirfrag removed %llx.%llx frag %x"
 			^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#265: FILE: fs/ceph/inode.c:216:
+			dout("fill_dirfrag removed %llx.%llx frag %x"
+			     " (no ref)\n", ceph_vinop(inode), id);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#270: FILE: fs/ceph/inode.c:221:
+			dout("fill_dirfrag cleared %llx.%llx frag %x"
 			^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#271: FILE: fs/ceph/inode.c:222:
+			dout("fill_dirfrag cleared %llx.%llx frag %x"
+			     " referral\n", ceph_vinop(inode), id);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#278: FILE: fs/ceph/inode.c:229:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#283: FILE: fs/ceph/inode.c:234:
+		/* this is not the end of the world; we can continue
+		   with bad/inaccurate delegation info */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#283: FILE: fs/ceph/inode.c:234:
+		   with bad/inaccurate delegation info */

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#294: FILE: fs/ceph/inode.c:245:
+	dout("fill_dirfrag %llx.%llx frag %x ndist=%d\n",
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#302: FILE: fs/ceph/inode.c:253:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#315: FILE: fs/ceph/inode.c:266:
+	dout("alloc_inode %p\n", &ci->vfs_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#400: FILE: fs/ceph/inode.c:351:
+	dout("destroy_inode %p ino %llx.%llx\n", inode, ceph_vinop(inode));
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#418: FILE: fs/ceph/inode.c:369:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#435: FILE: fs/ceph/inode.c:386:
+		dout("size %lld -> %llu\n", inode->i_size, size);
 		^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#437: FILE: fs/ceph/inode.c:388:
+		inode->i_blocks = (size + (1<<9) - 1) >> 9;
 		                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#440: FILE: fs/ceph/inode.c:391:
+			dout("truncate_seq %u -> %u\n",
 			^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#443: FILE: fs/ceph/inode.c:394:
+			if (issued & (CEPH_CAP_FILE_CACHE|CEPH_CAP_FILE_RD|
 			                                 ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#443: FILE: fs/ceph/inode.c:394:
+			if (issued & (CEPH_CAP_FILE_CACHE|CEPH_CAP_FILE_RD|
 			                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#444: FILE: fs/ceph/inode.c:395:
+				      CEPH_CAP_FILE_WR|CEPH_CAP_FILE_BUFFER|
 				                      ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#444: FILE: fs/ceph/inode.c:395:
+				      CEPH_CAP_FILE_WR|CEPH_CAP_FILE_BUFFER|
 				                                           ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#453: FILE: fs/ceph/inode.c:404:
+		dout("truncate_size %lld -> %llu\n", ci->i_truncate_size,
 		^^^^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#467: FILE: fs/ceph/inode.c:418:
+	if (issued & (CEPH_CAP_FILE_EXCL|
 	                                ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#468: FILE: fs/ceph/inode.c:419:
+		      CEPH_CAP_FILE_WR|
 		                      ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#471: FILE: fs/ceph/inode.c:422:
+			dout("ctime %ld.%09ld -> %ld.%09ld inc w/ cap\n",
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#478: FILE: fs/ceph/inode.c:429:
+			dout("mtime %ld.%09ld -> %ld.%09ld "
 			^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#479: FILE: fs/ceph/inode.c:430:
+			dout("mtime %ld.%09ld -> %ld.%09ld "
+			     "tw %d -> %d\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#490: FILE: fs/ceph/inode.c:441:
+				dout("mtime %ld.%09ld -> %ld.%09ld inc\n",
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#497: FILE: fs/ceph/inode.c:448:
+				dout("atime %ld.%09ld -> %ld.%09ld inc\n",
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#520: FILE: fs/ceph/inode.c:471:
+		dout("%p mds time_warp_seq %llu < %u\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#545: FILE: fs/ceph/inode.c:496:
+	dout("fill_inode %p ino %llx.%llx v %llu had %llu\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fill_inode', this function's name, in a string
#545: FILE: fs/ceph/inode.c:496:
+	dout("fill_inode %p ino %llx.%llx v %llu had %llu\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fill_inode', this function's name, in a string
#557: FILE: fs/ceph/inode.c:508:
+			pr_err("ceph fill_inode ENOMEM xattr blob %d bytes\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#585: FILE: fs/ceph/inode.c:536:
+		dout("%p mode 0%o uid.gid %d.%d\n", inode, inode->i_mode,
 		^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#645: FILE: fs/ceph/inode.c:596:
+			BUG_ON(symlen != inode->i_size);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#649: FILE: fs/ceph/inode.c:600:
+			sym = kmalloc(symlen+1, GFP_NOFS);
 			                    ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#677: FILE: fs/ceph/inode.c:628:
+			dout(" marking %p complete (empty)\n", inode);
 			^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fill_inode', this function's name, in a string
#687: FILE: fs/ceph/inode.c:638:
+		pr_err("ceph fill_inode %llx.%llx BAD mode 0%o\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#711: FILE: fs/ceph/inode.c:662:
+		dout(" frag %x split by %d\n", frag->frag, frag->split_by);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#732: FILE: fs/ceph/inode.c:683:
+			dout(" %p got snap_caps %s\n", inode,
 			^^^^

WARNING:MISORDERED_TYPE: type 'long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#787: FILE: fs/ceph/inode.c:738:
+	long unsigned duration = le32_to_cpu(lease->duration_ms);

WARNING:MISORDERED_TYPE: type 'long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#788: FILE: fs/ceph/inode.c:739:
+	long unsigned ttl = from_time + (duration * HZ) / 1000;

WARNING:MISORDERED_TYPE: type 'long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#789: FILE: fs/ceph/inode.c:740:
+	long unsigned half_ttl = from_time + (duration * HZ / 2) / 1000;

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#797: FILE: fs/ceph/inode.c:748:
+	dout("update_dentry_lease %p mask %d duration %lu ms ttl %lu\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'update_dentry_lease', this function's name, in a string
#797: FILE: fs/ceph/inode.c:748:
+	dout("update_dentry_lease %p mask %d duration %lu ms ttl %lu\n",

WARNING:RETURN_VOID: void function return statements are not generally useful
#826: FILE: fs/ceph/inode.c:777:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'splice_dentry', this function's name, in a string
#846: FILE: fs/ceph/inode.c:797:
+		pr_err("ceph splice_dentry error %p inode %p ino %llx.%llx\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#853: FILE: fs/ceph/inode.c:804:
+		dout("dn %p (%d) spliced with %p (%d) "
 		^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#854: FILE: fs/ceph/inode.c:805:
+		dout("dn %p (%d) spliced with %p (%d) "
+		     "inode %p ino %llx.%llx\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#861: FILE: fs/ceph/inode.c:812:
+		BUG_ON(!ceph_dentry(dn));

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#863: FILE: fs/ceph/inode.c:814:
+		dout("dn %p attached to %p ino %llx.%llx\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#893: FILE: fs/ceph/inode.c:844:
+	dout("fill_trace %p is_dentry %d is_target %d\n", req,
 	^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#896: FILE: fs/ceph/inode.c:847:
+#if 0

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#925: FILE: fs/ceph/inode.c:876:
+			iput(in);
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#931: FILE: fs/ceph/inode.c:882:
+		dout("fill_trace reply is empty!\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#935: FILE: fs/ceph/inode.c:886:
+			dout(" clearing %p complete (empty trace)\n",
 			^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#953: FILE: fs/ceph/inode.c:904:
+		BUG_ON(!dn);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#954: FILE: fs/ceph/inode.c:905:
+		BUG_ON(!dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#955: FILE: fs/ceph/inode.c:906:
+		BUG_ON(dn->d_parent->d_inode != dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#956: FILE: fs/ceph/inode.c:907:
+		BUG_ON(ceph_ino(dir) !=

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#958: FILE: fs/ceph/inode.c:909:
+		BUG_ON(ceph_snap(dir) !=

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#978: FILE: fs/ceph/inode.c:929:
+			dout("fill_trace  no dentry lease or dir cap\n");
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#982: FILE: fs/ceph/inode.c:933:
+			dout(" src %p '%.*s' dst %p '%.*s'\n",
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#987: FILE: fs/ceph/inode.c:938:
+			dout("fill_trace doing d_move %p -> %p\n",
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#990: FILE: fs/ceph/inode.c:941:
+			dout(" src %p '%.*s' dst %p '%.*s'\n",
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1004: FILE: fs/ceph/inode.c:955:
+			dout("fill_trace null dentry\n");
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1006: FILE: fs/ceph/inode.c:957:
+				dout("d_delete %p\n", dn);
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1009: FILE: fs/ceph/inode.c:960:
+				dout("d_instantiate %p NULL\n", dn);
 				^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1028: FILE: fs/ceph/inode.c:979:
+				pr_err("ceph fill_trace bad get_inode "
+				       "%llx.%llx\n", vino.ino, vino.snap);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1044: FILE: fs/ceph/inode.c:995:
+			dout(" %p links to %p %llx.%llx, not %llx.%llx\n",
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1054: FILE: fs/ceph/inode.c:1005:
+		dout(" final dn %p\n", dn);
 		^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1061: FILE: fs/ceph/inode.c:1012:
+		BUG_ON(!dn);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1062: FILE: fs/ceph/inode.c:1013:
+		BUG_ON(!req->r_locked_dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1063: FILE: fs/ceph/inode.c:1014:
+		BUG_ON(ceph_snap(req->r_locked_dir) != CEPH_SNAPDIR);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1075: FILE: fs/ceph/inode.c:1026:
+		dout(" linking snapped dir %p to dn %p\n", in, dn);
 		^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!in"
#1090: FILE: fs/ceph/inode.c:1041:
+		if (in == NULL || ceph_ino(in) != vino.ino ||

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1114: FILE: fs/ceph/inode.c:1065:
+	dout("fill_trace done err=%d\n", err);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1138: FILE: fs/ceph/inode.c:1089:
+		dout("readdir_prepopulate %d items under SNAPDIR dn %p\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1141: FILE: fs/ceph/inode.c:1092:
+		dout("readdir_prepopulate %d items under dn %p\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1159: FILE: fs/ceph/inode.c:1110:
+		dout("d_lookup on parent=%p name=%.*s got %p\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1164: FILE: fs/ceph/inode.c:1115:
+			dout("d_alloc %p '%.*s' = %p\n", parent,
 			^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn"
#1166: FILE: fs/ceph/inode.c:1117:
+			if (dn == NULL) {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1167: FILE: fs/ceph/inode.c:1118:
+				dout("d_alloc badness\n");
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1177: FILE: fs/ceph/inode.c:1128:
+			dout(" dn %p points to wrong inode %p\n",
 			^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!in"
#1199: FILE: fs/ceph/inode.c:1150:
+			if (in == NULL) {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1200: FILE: fs/ceph/inode.c:1151:
+				dout("new_inode badness\n");
 				^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1224: FILE: fs/ceph/inode.c:1175:
+		iput(snapdir);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1227: FILE: fs/ceph/inode.c:1178:
+	dout("readdir_prepopulate done\n");
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1237: FILE: fs/ceph/inode.c:1188:
+	dout("set_size %p %llu -> %llu\n", inode, inode->i_size, size);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1260: FILE: fs/ceph/inode.c:1211:
+	dout("writeback %p\n", inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1262: FILE: fs/ceph/inode.c:1213:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1278: FILE: fs/ceph/inode.c:1229:
+	dout("invalidate_pages %p gen %d revoking %d\n", inode,
 	^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1282: FILE: fs/ceph/inode.c:1233:
+		BUG_ON(ci->i_rdcache_revoking > ci->i_rdcache_gen);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1295: FILE: fs/ceph/inode.c:1246:
+		dout("invalidate_pages %p gen %d successful\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1301: FILE: fs/ceph/inode.c:1252:
+		dout("invalidate_pages %p gen %d raced, gen now %d\n",
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1309: FILE: fs/ceph/inode.c:1260:
+	iput(inode);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1312: FILE: fs/ceph/inode.c:1263:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1324: FILE: fs/ceph/inode.c:1275:
+	dout("vmtruncate_work %p\n", inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1328: FILE: fs/ceph/inode.c:1279:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1346: FILE: fs/ceph/inode.c:1297:
+		dout("__do_pending_vmtruncate %p none pending\n", inode);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1356: FILE: fs/ceph/inode.c:1307:
+		dout("__do_pending_vmtruncate %p flushing snaps first\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1366: FILE: fs/ceph/inode.c:1317:
+	dout("__do_pending_vmtruncate %p (%d) to %lld\n", inode,
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1384: FILE: fs/ceph/inode.c:1335:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1388: FILE: fs/ceph/inode.c:1339:
+static void *ceph_sym_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1391: FILE: fs/ceph/inode.c:1342:
+	nd_set_link(nd, ci->i_symlink);
 	            ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1391: FILE: fs/ceph/inode.c:1342:
+	struct ceph_inode_info *ci = ceph_inode(dentry->d_inode);
+	nd_set_link(nd, ci->i_symlink);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1433: FILE: fs/ceph/inode.c:1384:
+	dout("setattr %p issued %s\n", inode, ceph_cap_string(issued));
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1436: FILE: fs/ceph/inode.c:1387:
+		dout("setattr %p uid %d -> %d\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1449: FILE: fs/ceph/inode.c:1400:
+		dout("setattr %p gid %d -> %d\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1462: FILE: fs/ceph/inode.c:1413:
+		dout("setattr %p mode 0%o -> 0%o\n", inode, inode->i_mode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1476: FILE: fs/ceph/inode.c:1427:
+		dout("setattr %p atime %ld.%ld -> %ld.%ld\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1498: FILE: fs/ceph/inode.c:1449:
+		dout("setattr %p mtime %ld.%ld -> %ld.%ld\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1520: FILE: fs/ceph/inode.c:1471:
+		dout("setattr %p size %lld -> %lld\n", inode,
 		^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1552: FILE: fs/ceph/inode.c:1503:
+		bool only = (ia_valid & (ATTR_SIZE|ATTR_MTIME|ATTR_ATIME|
 		                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1552: FILE: fs/ceph/inode.c:1503:
+		bool only = (ia_valid & (ATTR_SIZE|ATTR_MTIME|ATTR_ATIME|
 		                                             ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#1552: FILE: fs/ceph/inode.c:1503:
+		bool only = (ia_valid & (ATTR_SIZE|ATTR_MTIME|ATTR_ATIME|
 		                                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1553: FILE: fs/ceph/inode.c:1504:
+					 ATTR_MODE|ATTR_UID|ATTR_GID)) == 0;
 					          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1553: FILE: fs/ceph/inode.c:1504:
+					 ATTR_MODE|ATTR_UID|ATTR_GID)) == 0;
 					                   ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1554: FILE: fs/ceph/inode.c:1505:
+		dout("setattr %p ctime %ld.%ld -> %ld.%ld (%s)\n", inode,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1576: FILE: fs/ceph/inode.c:1527:
+		dout("setattr %p ATTR_FILE ... hrm!\n", inode);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1596: FILE: fs/ceph/inode.c:1547:
+	dout("setattr %p result=%d (%s locally, %d remote)\n", inode, err,
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1620: FILE: fs/ceph/inode.c:1571:
+		dout("do_getattr inode %p SNAPDIR\n", inode);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1624: FILE: fs/ceph/inode.c:1575:
+	dout("do_getattr inode %p mask %s\n", inode, ceph_cap_string(mask));
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1636: FILE: fs/ceph/inode.c:1587:
+	dout("do_getattr result=%d\n", err);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1640: FILE: fs/ceph/inode.c:1591:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1764: FILE: fs/ceph/inode.c:1715:
+static int __set_xattr(struct ceph_inode_info *ci,
+			   const char *name, int name_len,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1781: FILE: fs/ceph/inode.c:1732:
+		if (c < 0)
[...]
+		else if (c > 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1785: FILE: fs/ceph/inode.c:1736:
+		else {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1804: FILE: fs/ceph/inode.c:1755:
+		dout("__set_xattr count=%d\n", ci->i_xattrs.count);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__set_xattr', this function's name, in a string
#1804: FILE: fs/ceph/inode.c:1755:
+		dout("__set_xattr count=%d\n", ci->i_xattrs.count);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__set_xattr', this function's name, in a string
#1819: FILE: fs/ceph/inode.c:1770:
+		pr_err("ceph __set_xattr ENOMEM on %p %llx.%llx xattr %s=%s\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1838: FILE: fs/ceph/inode.c:1789:
+		dout("__set_xattr_val p=%p\n", p);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1841: FILE: fs/ceph/inode.c:1792:
+	dout("__set_xattr_val added %llx.%llx xattr %p %s=%.*s\n",
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1848: FILE: fs/ceph/inode.c:1799:
+static struct ceph_inode_xattr *__get_xattr(struct ceph_inode_info *ci,
+			   const char *name)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1860: FILE: fs/ceph/inode.c:1811:
+		if (c < 0)
[...]
+		else if (c > 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1864: FILE: fs/ceph/inode.c:1815:
+		else {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1865: FILE: fs/ceph/inode.c:1816:
+			dout("__get_xattr %s: found %.*s\n", name,
 			^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__get_xattr', this function's name, in a string
#1865: FILE: fs/ceph/inode.c:1816:
+			dout("__get_xattr %s: found %.*s\n", name,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1871: FILE: fs/ceph/inode.c:1822:
+	dout("__get_xattr %s: not found\n", name);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__get_xattr', this function's name, in a string
#1871: FILE: fs/ceph/inode.c:1822:
+	dout("__get_xattr %s: not found\n", name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1878: FILE: fs/ceph/inode.c:1829:
+	BUG_ON(!xattr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1910: FILE: fs/ceph/inode.c:1861:
+static int __remove_xattr_by_name(struct ceph_inode_info *ci,
+			   const char *name)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1929: FILE: fs/ceph/inode.c:1880:
+	dout("__copy_xattr_names count=%d\n", ci->i_xattrs.count);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__copy_xattr_names', this function's name, in a string
#1929: FILE: fs/ceph/inode.c:1880:
+	dout("__copy_xattr_names count=%d\n", ci->i_xattrs.count);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1936: FILE: fs/ceph/inode.c:1887:
+		dout("dest=%s %p (%s) (%d/%d)\n", dest, xattr, xattr->name,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1953: FILE: fs/ceph/inode.c:1904:
+	dout("__destroy_xattrs p=%p\n", p);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__destroy_xattrs', this function's name, in a string
#1953: FILE: fs/ceph/inode.c:1904:
+	dout("__destroy_xattrs p=%p\n", p);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1959: FILE: fs/ceph/inode.c:1910:
+		dout("__destroy_xattrs next p=%p (%.*s)\n", p,
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__destroy_xattrs', this function's name, in a string
#1959: FILE: fs/ceph/inode.c:1910:
+		dout("__destroy_xattrs next p=%p (%.*s)\n", p,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1986: FILE: fs/ceph/inode.c:1937:
+	dout("__build_xattrs() len=%d\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__build_xattrs', this function's name, in a string
#1986: FILE: fs/ceph/inode.c:1937:
+	dout("__build_xattrs() len=%d\n",

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2008: FILE: fs/ceph/inode.c:1959:
+		memset(xattrs, 0, numattr*sizeof(struct ceph_xattr *));
 		                         ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*xattrs[i])...) over kmalloc(sizeof(struct ceph_inode_xattr)...)
#2010: FILE: fs/ceph/inode.c:1961:
+			xattrs[i] = kmalloc(sizeof(struct ceph_inode_xattr),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2065: FILE: fs/ceph/inode.c:2016:
+	int size = 4 + ci->i_xattrs.count*(4 + 4) +
 	                                 ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2068: FILE: fs/ceph/inode.c:2019:
+	dout("__get_required_blob_size c=%d names.size=%d vals.size=%d\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__get_required_blob_size', this function's name, in a string
#2068: FILE: fs/ceph/inode.c:2019:
+	dout("__get_required_blob_size c=%d names.size=%d vals.size=%d\n",

WARNING:TYPO_SPELLING: 'reencode' may be misspelled - perhaps 're-encode'?
#2079: FILE: fs/ceph/inode.c:2030:
+ * If there are dirty xattrs, reencode xattrs into the prealloc_blob
                               ^^^^^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2088: FILE: fs/ceph/inode.c:2039:
+	dout("__build_xattrs_blob %p\n", &ci->vfs_inode);
 	^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2092: FILE: fs/ceph/inode.c:2043:
+		BUG_ON(need > ci->i_xattrs.prealloc_blob->alloc_len);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (vir_xattr->getxattr_cb)
#2134: FILE: fs/ceph/inode.c:2085:
+		return (vir_xattr->getxattr_cb)(ci, value, size);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2137: FILE: fs/ceph/inode.c:2088:
+	dout("getxattr %p ver=%lld index_ver=%lld\n", inode,
 	^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ci->i_xattrs.index_version >= ci->i_xattrs.version'
#2140: FILE: fs/ceph/inode.c:2091:
+	if (__ceph_caps_issued_mask(ci, CEPH_CAP_XATTR_SHARED, 1) &&
+	    (ci->i_xattrs.index_version >= ci->i_xattrs.version)) {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2191: FILE: fs/ceph/inode.c:2142:
+	dout("listxattr %p ver=%lld index_ver=%lld\n", inode,
 	^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ci->i_xattrs.index_version > ci->i_xattrs.version'
#2194: FILE: fs/ceph/inode.c:2145:
+	if (__ceph_caps_issued_mask(ci, CEPH_CAP_XATTR_SHARED, 1) &&
+	    (ci->i_xattrs.index_version > ci->i_xattrs.version)) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2258: FILE: fs/ceph/inode.c:2209:
+		pages = kmalloc(sizeof(pages[0])*nr_pages, GFP_NOFS);
 		                                ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#2258: FILE: fs/ceph/inode.c:2209:
+		pages = kmalloc(sizeof(pages[0])*nr_pages, GFP_NOFS);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2269: FILE: fs/ceph/inode.c:2220:
+			memcpy(kaddr, value + i*PAGE_CACHE_SIZE,
 			                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2270: FILE: fs/ceph/inode.c:2221:
+			       min(PAGE_CACHE_SIZE, size-i*PAGE_CACHE_SIZE));
 			                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2270: FILE: fs/ceph/inode.c:2221:
+			       min(PAGE_CACHE_SIZE, size-i*PAGE_CACHE_SIZE));
 			                                  ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2274: FILE: fs/ceph/inode.c:2225:
+	dout("setxattr value=%.*s\n", (int)size, value);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2291: FILE: fs/ceph/inode.c:2242:
+	dout("xattr.ver (before): %lld\n", ci->i_xattrs.version);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2294: FILE: fs/ceph/inode.c:2245:
+	dout("xattr.ver (after): %lld\n", ci->i_xattrs.version);
 	^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "_ceph_match_vir_xattr"
#2326: FILE: fs/ceph/inode.c:2277:
+	if (_ceph_match_vir_xattr(name) != NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*xattr)...) over kmalloc(sizeof(struct ceph_inode_xattr)...)
#2344: FILE: fs/ceph/inode.c:2295:
+	xattr = kmalloc(sizeof(struct ceph_inode_xattr), GFP_NOFS);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2362: FILE: fs/ceph/inode.c:2313:
+		dout(" preaallocating new blob size=%d\n", required_blob_size);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2372: FILE: fs/ceph/inode.c:2323:
+	dout("setxattr %p issued %s\n", inode, ceph_cap_string(issued));
 	^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "_ceph_match_vir_xattr"
#2429: FILE: fs/ceph/inode.c:2380:
+	if (_ceph_match_vir_xattr(name) != NULL)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2435: FILE: fs/ceph/inode.c:2386:
+	dout("removexattr %p issued %s\n", inode, ceph_cap_string(issued));
 	^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068932.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 148 warnings, 44 checks, 2404 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068932.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
