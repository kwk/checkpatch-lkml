CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#40: FILE: drivers/kvm/x86_emulate.c:67:
+#define String      (1<<10)     /* String instruction (rep capable) */
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <String>
#40: FILE: drivers/kvm/x86_emulate.c:67:
+#define String      (1<<10)     /* String instruction (rep capable) */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BIT_MACRO: Prefer using the BIT macro
#40: FILE: drivers/kvm/x86_emulate.c:67:
+#define String      (1<<10)     /* String instruction (rep capable) */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <ByteOp>
#50: FILE: drivers/kvm/x86_emulate.c:137:
+	ByteOp | ImplicitOps | Mov | String, ImplicitOps | Mov | String,

CHECK:CAMELCASE: Avoid CamelCase: <ImplicitOps>
#50: FILE: drivers/kvm/x86_emulate.c:137:
+	ByteOp | ImplicitOps | Mov | String, ImplicitOps | Mov | String,

CHECK:CAMELCASE: Avoid CamelCase: <Mov>
#50: FILE: drivers/kvm/x86_emulate.c:137:
+	ByteOp | ImplicitOps | Mov | String, ImplicitOps | Mov | String,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#76: FILE: drivers/kvm/x86_emulate.c:1242:
+^I^I * ^I- if REPE/REPZ and ZF = 0 then done$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#77: FILE: drivers/kvm/x86_emulate.c:1243:
+^I^I * ^I- if REPNE/REPNZ and ZF = 1 then done$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->b == 0xa6'
#79: FILE: drivers/kvm/x86_emulate.c:1245:
+		if ((c->b == 0xa6) || (c->b == 0xa7) ||
+				(c->b == 0xae) || (c->b == 0xaf)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->b == 0xa7'
#79: FILE: drivers/kvm/x86_emulate.c:1245:
+		if ((c->b == 0xa6) || (c->b == 0xa7) ||
+				(c->b == 0xae) || (c->b == 0xaf)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->b == 0xae'
#79: FILE: drivers/kvm/x86_emulate.c:1245:
+		if ((c->b == 0xa6) || (c->b == 0xa7) ||
+				(c->b == 0xae) || (c->b == 0xaf)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->b == 0xaf'
#79: FILE: drivers/kvm/x86_emulate.c:1245:
+		if ((c->b == 0xa6) || (c->b == 0xa7) ||
+				(c->b == 0xae) || (c->b == 0xaf)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: drivers/kvm/x86_emulate.c:1246:
+		if ((c->b == 0xa6) || (c->b == 0xa7) ||
+				(c->b == 0xae) || (c->b == 0xaf)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#81: FILE: drivers/kvm/x86_emulate.c:1247:
+			if ((c->rep_prefix == REPE_PREFIX) &&
[...]
+					ctxt->vcpu->rip = c->eip;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->rep_prefix == REPE_PREFIX'
#81: FILE: drivers/kvm/x86_emulate.c:1247:
+			if ((c->rep_prefix == REPE_PREFIX) &&
+				((ctxt->eflags & EFLG_ZF) == 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: drivers/kvm/x86_emulate.c:1248:
+			if ((c->rep_prefix == REPE_PREFIX) &&
+				((ctxt->eflags & EFLG_ZF) == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->rep_prefix == REPNE_PREFIX'
#86: FILE: drivers/kvm/x86_emulate.c:1252:
+			if ((c->rep_prefix == REPNE_PREFIX) &&
+				((ctxt->eflags & EFLG_ZF) == EFLG_ZF)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: drivers/kvm/x86_emulate.c:1253:
+			if ((c->rep_prefix == REPNE_PREFIX) &&
+				((ctxt->eflags & EFLG_ZF) == EFLG_ZF)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341999.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 15 checks, 95 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341999.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
