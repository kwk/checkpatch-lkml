WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#86: FILE: fs/gfs2/glock.c:59:
+#define GLOCK_BUG_ON(gl,x) do { if (unlikely(x)) { __dump_glock(NULL, gl); BUG(); } } while(0)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#86: FILE: fs/gfs2/glock.c:59:
+#define GLOCK_BUG_ON(gl,x) do { if (unlikely(x)) { __dump_glock(NULL, gl); BUG(); } } while(0)
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#86: FILE: fs/gfs2/glock.c:59:
+#define GLOCK_BUG_ON(gl,x) do { if (unlikely(x)) { __dump_glock(NULL, gl); BUG(); } } while(0)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#160: FILE: fs/gfs2/glock.c:262:
+	const struct gfs2_holder *gh_head = list_entry(gl->gl_holders.next, const struct gfs2_holder, gh_list);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: fs/gfs2/glock.c:263:
+	const struct gfs2_holder *gh_head = list_entry(gl->gl_holders.next, const struct gfs2_holder, gh_list);
+	if ((gh->gh_state == LM_ST_EXCLUSIVE ||

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: fs/gfs2/glock.c:287:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#310: FILE: fs/gfs2/glock.c:412:
+	unsigned state = ret & LM_OUT_ST_MASK;

ERROR:SPACING: space required before the open parenthesis '('
#340: FILE: fs/gfs2/glock.c:442:
+		switch(state) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#352: FILE: fs/gfs2/glock.c:454:
+			printk(KERN_ERR "GFS2: wanted %u got %u\n", gl->gl_target, state);

WARNING:LINE_SPACING: Missing a blank line after declarations
#366: FILE: fs/gfs2/glock.c:468:
+			int rv;
+			spin_unlock(&gl->gl_spin);

WARNING:LINE_SPACING: Missing a blank line after declarations
#389: FILE: fs/gfs2/glock.c:491:
+	int ret = LM_OUT_ERROR;
+	if (likely(!test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#412: FILE: fs/gfs2/glock.c:514:
+	BUG_ON(gl->gl_state == target);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#413: FILE: fs/gfs2/glock.c:515:
+	BUG_ON(gl->gl_state == gl->gl_target);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: fs/gfs2/glock.c:530:
+	if (target != LM_ST_UNLOCKED && (gl->gl_state == LM_ST_SHARED ||
+	    gl->gl_state == LM_ST_DEFERRED) &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#519: FILE: fs/gfs2/glock.c:618:
+		unsigned long holdtime, now = jiffies;
+		holdtime = gl->gl_tchange + gl->gl_ops->go_min_hold_time;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1198: FILE: fs/gfs2/glock.c:850:
+		printk(KERN_ERR " ");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1211: FILE: fs/gfs2/glock.c:863:
+ * $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gh->gh_gl->gl_ops->go_type != LM_TYPE_FLOCK'
#1262: FILE: fs/gfs2/glock.c:886:
+		if (unlikely(gh2->gh_owner_pid == gh->gh_owner_pid &&
+		    (gh->gh_gl->gl_ops->go_type != LM_TYPE_FLOCK)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1263: FILE: fs/gfs2/glock.c:887:
+		if (unlikely(gh2->gh_owner_pid == gh->gh_owner_pid &&
+		    (gh->gh_gl->gl_ops->go_type != LM_TYPE_FLOCK)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!insert_pt"
#1278: FILE: fs/gfs2/glock.c:902:
+	if (likely(insert_pt == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1300: FILE: fs/gfs2/glock.c:920:
+	printk(KERN_ERR "pid: %d\n", pid_nr(gh2->gh_owner_pid));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1301: FILE: fs/gfs2/glock.c:921:
+	printk(KERN_ERR "lock type: %d req lock state : %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1304: FILE: fs/gfs2/glock.c:924:
+	printk(KERN_ERR "pid: %d\n", pid_nr(gh->gh_owner_pid));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1305: FILE: fs/gfs2/glock.c:925:
+	printk(KERN_ERR "lock type: %d req lock state : %d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1308: FILE: fs/gfs2/glock.c:928:
+	BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!find_first_holder"
#1407: FILE: fs/gfs2/glock.c:990:
+	if (find_first_holder(gl) == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1439: FILE: fs/gfs2/glock.c:1207:
+^I^Iif (error) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!find_first_holder"
#1507: FILE: fs/gfs2/glock.c:1391:
+	if (find_first_holder(gl) == NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!find_first_holder"
#1540: FILE: fs/gfs2/glock.c:1460:
+	if (find_first_holder(gl) == NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!find_first_holder"
#1558: FILE: fs/gfs2/glock.c:1489:
+	if (find_first_holder(gl) == NULL && gl->gl_state != LM_ST_UNLOCKED)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1577: FILE: fs/gfs2/glock.c:1539:
+static const char *state2str(unsigned state)

ERROR:SPACING: space required before the open parenthesis '('
#1583: FILE: fs/gfs2/glock.c:1541:
+	switch(state) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1596: FILE: fs/gfs2/glock.c:1554:
+static const char *hflags2str(char *buf, unsigned flags, unsigned long iflags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1599: FILE: fs/gfs2/glock.c:1557:
+	char *p = buf;
+	if (flags & LM_FLAG_TRY)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1674: FILE: fs/gfs2/glock.c:1603:
+	gfs2_print_dbg(seq, " H: s:%s f:%s e:%d p:%ld [%s] %s\n",
+		  state2str(gh->gh_state),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1676: FILE: fs/gfs2/glock.c:1605:
+^I^I  gh->gh_error, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1707: FILE: fs/gfs2/glock.c:1614:
+	char *p = buf;
+	if (test_bit(GLF_LOCK, gflags))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1764: FILE: fs/gfs2/glock.c:1663:
+	dtime *= 1000000/HZ; /* demote time in uSec */
 	                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1768: FILE: fs/gfs2/glock.c:1667:
+	gfs2_print_dbg(seq, "G:  s:%s n:%u/%llu f:%s t:%s d:%s/%llu l:%d a:%d r:%d\n",
+		  state2str(gl->gl_state),

WARNING:LINE_SPACING: Missing a blank line after declarations
#1862: FILE: fs/gfs2/glock.c:1691:
+	int ret;
+	spin_lock(&gl->gl_spin);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gi->gl"
#1885: FILE: fs/gfs2/glock.c:1817:
+	while (gi->gl == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1972: FILE: fs/gfs2/glock.c:1877:
+	struct gfs2_glock_iter *gi = seq->private;
+	gfs2_glock_iter_free(gi);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2008: FILE: fs/gfs2/glock.c:1899:
+		struct gfs2_glock_iter *gi = seq->private;
+		gi->sdp = inode->i_private;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2126: FILE: fs/gfs2/glops.c:261:
+	const struct gfs2_inode *ip = gl->gl_object;
+	if (ip == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ip"
#2126: FILE: fs/gfs2/glops.c:261:
+	if (ip == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2129: FILE: fs/gfs2/glops.c:264:
+	gfs2_print_dbg(seq, " I: n:%llu/%llu t:%u f:0x%08lx\n",
+		  (unsigned long long)ip->i_no_formal_ino,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2152: FILE: fs/gfs2/glops.c:319:
+	const struct gfs2_rgrpd *rgd = gl->gl_object;
+	if (rgd == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rgd"
#2152: FILE: fs/gfs2/glops.c:319:
+	if (rgd == NULL)

WARNING:SPACING: Unnecessary space before function pointer arguments
#2224: FILE: fs/gfs2/incore.h:131:
+	int (*go_xmote_bh) (struct gfs2_glock *gl, struct gfs2_holder *gh);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2433: FILE: fs/gfs2/ops_address.c:513:
+	gfs2_holder_init(ip->i_gl, LM_ST_SHARED, GL_ATIME|LM_FLAG_TRY_1CB, &gh);
 	                                                 ^

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#2451: FILE: fs/gfs2/ops_address.c:524:
+		yield();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000256059.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 27 warnings, 16 checks, 2339 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000256059.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
