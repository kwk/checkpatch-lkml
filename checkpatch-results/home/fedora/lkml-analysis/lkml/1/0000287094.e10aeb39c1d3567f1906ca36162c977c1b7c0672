WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#151: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: fs/ext3/ext3.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#201: FILE: fs/ext3/ext3.h:46:
+		printk (KERN_DEBUG "EXT3-fs DEBUG (%s, %d): %s:",	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#201: FILE: fs/ext3/ext3.h:46:
+		printk (KERN_DEBUG "EXT3-fs DEBUG (%s, %d): %s:",	\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#202: FILE: fs/ext3/ext3.h:47:
+			__FILE__, __LINE__, __FUNCTION__);		\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#203: FILE: fs/ext3/ext3.h:48:
+		printk (KERN_DEBUG f, ## a);				\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#203: FILE: fs/ext3/ext3.h:48:
+		printk (KERN_DEBUG f, ## a);				\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#238: FILE: fs/ext3/ext3.h:83:
+#define	EXT3_ADDR_PER_BLOCK(s)		(EXT3_BLOCK_SIZE(s) / sizeof (__u32))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#249: FILE: fs/ext3/ext3.h:94:
+#define EXT3_INODE_SIZE(s)	(((s)->s_rev_level == EXT3_GOOD_OLD_REV) ? \
+				 EXT3_GOOD_OLD_INODE_SIZE : \
+				 (s)->s_inode_size)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#252: FILE: fs/ext3/ext3.h:97:
+#define EXT3_FIRST_INO(s)	(((s)->s_rev_level == EXT3_GOOD_OLD_REV) ? \
+				 EXT3_GOOD_OLD_FIRST_INO : \
+				 (s)->s_first_ino)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#268: FILE: fs/ext3/ext3.h:113:
+# define EXT3_FRAGS_PER_BLOCK(s)	(EXT3_BLOCK_SIZE(s) / EXT3_FRAG_SIZE(s))

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#275: FILE: fs/ext3/ext3.h:120:
+struct ext3_group_desc
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#296: FILE: fs/ext3/ext3.h:141:
+# define EXT3_DESC_PER_BLOCK(s)		(EXT3_BLOCK_SIZE(s) / sizeof (struct ext3_group_desc))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#367: FILE: fs/ext3/ext3.h:212:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: fs/ext3/ext3.h:221:
+#define EXT3_IOC_GROUP_ADD		_IOW('f', 8,struct ext3_new_group_input)
                           		           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#401: FILE: fs/ext3/ext3.h:246:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#490: FILE: fs/ext3/ext3.h:335:
+#define i_frag		osd2.hurd2.h_i_frag;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#490: FILE: fs/ext3/ext3.h:335:
+#define i_frag		osd2.hurd2.h_i_frag;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#491: FILE: fs/ext3/ext3.h:336:
+#define i_fsize		osd2.hurd2.h_i_fsize;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#491: FILE: fs/ext3/ext3.h:336:
+#define i_fsize		osd2.hurd2.h_i_fsize;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#542: FILE: fs/ext3/ext3.h:387:
+#define clear_opt(o, opt)		o &= ~EXT3_MOUNT_##opt

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'o' may be better as '(o)' to avoid precedence issues
#542: FILE: fs/ext3/ext3.h:387:
+#define clear_opt(o, opt)		o &= ~EXT3_MOUNT_##opt

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#543: FILE: fs/ext3/ext3.h:388:
+#define set_opt(o, opt)			o |= EXT3_MOUNT_##opt

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'o' may be better as '(o)' to avoid precedence issues
#543: FILE: fs/ext3/ext3.h:388:
+#define set_opt(o, opt)			o |= EXT3_MOUNT_##opt

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#652: FILE: fs/ext3/ext3.h:497:
+static inline struct ext3_sb_info * EXT3_SB(struct super_block *sb)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#656: FILE: fs/ext3/ext3.h:501:
+}
+static inline struct ext3_inode_info *EXT3_I(struct inode *inode)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#672: FILE: fs/ext3/ext3.h:517:
+ * macros from user land. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required after that ',' (ctx:VxV)
#702: FILE: fs/ext3/ext3.h:547:
+#define EXT3_HAS_COMPAT_FEATURE(sb,mask)			\
                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#703: FILE: fs/ext3/ext3.h:548:
+	( EXT3_SB(sb)->s_es->s_feature_compat & cpu_to_le32(mask) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#703: FILE: fs/ext3/ext3.h:548:
+	( EXT3_SB(sb)->s_es->s_feature_compat & cpu_to_le32(mask) )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#704: FILE: fs/ext3/ext3.h:549:
+#define EXT3_HAS_RO_COMPAT_FEATURE(sb,mask)			\
                                      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#705: FILE: fs/ext3/ext3.h:550:
+	( EXT3_SB(sb)->s_es->s_feature_ro_compat & cpu_to_le32(mask) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#705: FILE: fs/ext3/ext3.h:550:
+	( EXT3_SB(sb)->s_es->s_feature_ro_compat & cpu_to_le32(mask) )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#706: FILE: fs/ext3/ext3.h:551:
+#define EXT3_HAS_INCOMPAT_FEATURE(sb,mask)			\
                                     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#707: FILE: fs/ext3/ext3.h:552:
+	( EXT3_SB(sb)->s_es->s_feature_incompat & cpu_to_le32(mask) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#707: FILE: fs/ext3/ext3.h:552:
+	( EXT3_SB(sb)->s_es->s_feature_incompat & cpu_to_le32(mask) )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#708: FILE: fs/ext3/ext3.h:553:
+#define EXT3_SET_COMPAT_FEATURE(sb,mask)			\
                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#708: FILE: fs/ext3/ext3.h:553:
+#define EXT3_SET_COMPAT_FEATURE(sb,mask)			\
+	EXT3_SB(sb)->s_es->s_feature_compat |= cpu_to_le32(mask)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#710: FILE: fs/ext3/ext3.h:555:
+#define EXT3_SET_RO_COMPAT_FEATURE(sb,mask)			\
                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#710: FILE: fs/ext3/ext3.h:555:
+#define EXT3_SET_RO_COMPAT_FEATURE(sb,mask)			\
+	EXT3_SB(sb)->s_es->s_feature_ro_compat |= cpu_to_le32(mask)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: fs/ext3/ext3.h:557:
+#define EXT3_SET_INCOMPAT_FEATURE(sb,mask)			\
                                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#712: FILE: fs/ext3/ext3.h:557:
+#define EXT3_SET_INCOMPAT_FEATURE(sb,mask)			\
+	EXT3_SB(sb)->s_es->s_feature_incompat |= cpu_to_le32(mask)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#714: FILE: fs/ext3/ext3.h:559:
+#define EXT3_CLEAR_COMPAT_FEATURE(sb,mask)			\
                                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#714: FILE: fs/ext3/ext3.h:559:
+#define EXT3_CLEAR_COMPAT_FEATURE(sb,mask)			\
+	EXT3_SB(sb)->s_es->s_feature_compat &= ~cpu_to_le32(mask)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#716: FILE: fs/ext3/ext3.h:561:
+#define EXT3_CLEAR_RO_COMPAT_FEATURE(sb,mask)			\
                                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#716: FILE: fs/ext3/ext3.h:561:
+#define EXT3_CLEAR_RO_COMPAT_FEATURE(sb,mask)			\
+	EXT3_SB(sb)->s_es->s_feature_ro_compat &= ~cpu_to_le32(mask)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#718: FILE: fs/ext3/ext3.h:563:
+#define EXT3_CLEAR_INCOMPAT_FEATURE(sb,mask)			\
                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#718: FILE: fs/ext3/ext3.h:563:
+#define EXT3_CLEAR_INCOMPAT_FEATURE(sb,mask)			\
+	EXT3_SB(sb)->s_es->s_feature_incompat &= ~cpu_to_le32(mask)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#739: FILE: fs/ext3/ext3.h:584:
+#define EXT3_FEATURE_INCOMPAT_SUPP	(EXT3_FEATURE_INCOMPAT_FILETYPE| \
                                   	                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#740: FILE: fs/ext3/ext3.h:585:
+					 EXT3_FEATURE_INCOMPAT_RECOVER| \
 					                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#742: FILE: fs/ext3/ext3.h:587:
+#define EXT3_FEATURE_RO_COMPAT_SUPP	(EXT3_FEATURE_RO_COMPAT_SPARSE_SUPER| \
                                    	                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#743: FILE: fs/ext3/ext3.h:588:
+					 EXT3_FEATURE_RO_COMPAT_LARGE_FILE| \
 					                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#815: FILE: fs/ext3/ext3.h:660:
+#define EXT3_MAX_REC_LEN		((1<<16)-1)
                         		   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#815: FILE: fs/ext3/ext3.h:660:
+#define EXT3_MAX_REC_LEN		((1<<16)-1)
                         		        ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#817: FILE: fs/ext3/ext3.h:662:
+static inline unsigned ext3_rec_len_from_disk(__le16 dlen)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#819: FILE: fs/ext3/ext3.h:664:
+	unsigned len = le16_to_cpu(dlen);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#826: FILE: fs/ext3/ext3.h:671:
+static inline __le16 ext3_rec_len_to_disk(unsigned len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#831: FILE: fs/ext3/ext3.h:676:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dir' - possible side-effects?
#840: FILE: fs/ext3/ext3.h:685:
+#define is_dx(dir) (EXT3_HAS_COMPAT_FEATURE(dir->i_sb, \
+				      EXT3_FEATURE_COMPAT_DIR_INDEX) && \
+		      (EXT3_I(dir)->i_flags & EXT3_INDEX_FL))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dir' may be better as '(dir)' to avoid precedence issues
#840: FILE: fs/ext3/ext3.h:685:
+#define is_dx(dir) (EXT3_HAS_COMPAT_FEATURE(dir->i_sb, \
+				      EXT3_FEATURE_COMPAT_DIR_INDEX) && \
+		      (EXT3_I(dir)->i_flags & EXT3_INDEX_FL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dir' - possible side-effects?
#843: FILE: fs/ext3/ext3.h:688:
+#define EXT3_DIR_LINK_MAX(dir) (!is_dx(dir) && (dir)->i_nlink >= EXT3_LINK_MAX)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dir' - possible side-effects?
#844: FILE: fs/ext3/ext3.h:689:
+#define EXT3_DIR_LINK_EMPTY(dir) ((dir)->i_nlink == 2 || (dir)->i_nlink == 1)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#856: FILE: fs/ext3/ext3.h:701:
+struct dx_hash_info
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#870: FILE: fs/ext3/ext3.h:715:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#875: FILE: fs/ext3/ext3.h:720:
+struct ext3_iloc
+{

CHECK:SPACING: No space is necessary after a cast
#883: FILE: fs/ext3/ext3.h:728:
+	return (struct ext3_inode *) (iloc->bh->b_data + iloc->offset);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#923: FILE: fs/ext3/ext3.h:768:
+# define ATTRIB_NORET  __attribute__((noreturn))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#927: FILE: fs/ext3/ext3.h:772:
+extern int ext3_bg_has_super(struct super_block *sb, int group);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#928: FILE: fs/ext3/ext3.h:773:
+extern unsigned long ext3_bg_num_gdb(struct super_block *sb, int group);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#929: FILE: fs/ext3/ext3.h:774:
+extern ext3_fsblk_t ext3_new_block (handle_t *handle, struct inode *inode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#929: FILE: fs/ext3/ext3.h:774:
+extern ext3_fsblk_t ext3_new_block (handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: fs/ext3/ext3.h:775:
+extern ext3_fsblk_t ext3_new_block (handle_t *handle, struct inode *inode,
+			ext3_fsblk_t goal, int *errp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#931: FILE: fs/ext3/ext3.h:776:
+extern ext3_fsblk_t ext3_new_blocks (handle_t *handle, struct inode *inode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#931: FILE: fs/ext3/ext3.h:776:
+extern ext3_fsblk_t ext3_new_blocks (handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#932: FILE: fs/ext3/ext3.h:777:
+extern ext3_fsblk_t ext3_new_blocks (handle_t *handle, struct inode *inode,
+			ext3_fsblk_t goal, unsigned long *count, int *errp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#933: FILE: fs/ext3/ext3.h:778:
+extern void ext3_free_blocks (handle_t *handle, struct inode *inode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#933: FILE: fs/ext3/ext3.h:778:
+extern void ext3_free_blocks (handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: fs/ext3/ext3.h:779:
+extern void ext3_free_blocks (handle_t *handle, struct inode *inode,
+			ext3_fsblk_t block, unsigned long count);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#935: FILE: fs/ext3/ext3.h:780:
+extern void ext3_free_blocks_sb (handle_t *handle, struct super_block *sb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#935: FILE: fs/ext3/ext3.h:780:
+extern void ext3_free_blocks_sb (handle_t *handle, struct super_block *sb,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#938: FILE: fs/ext3/ext3.h:783:
+extern ext3_fsblk_t ext3_count_free_blocks (struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#938: FILE: fs/ext3/ext3.h:783:
+extern ext3_fsblk_t ext3_count_free_blocks (struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#938: FILE: fs/ext3/ext3.h:783:
+extern ext3_fsblk_t ext3_count_free_blocks (struct super_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#939: FILE: fs/ext3/ext3.h:784:
+extern void ext3_check_blocks_bitmap (struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#939: FILE: fs/ext3/ext3.h:784:
+extern void ext3_check_blocks_bitmap (struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#939: FILE: fs/ext3/ext3.h:784:
+extern void ext3_check_blocks_bitmap (struct super_block *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#940: FILE: fs/ext3/ext3.h:785:
+extern struct ext3_group_desc * ext3_get_group_desc(struct super_block * sb,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#940: FILE: fs/ext3/ext3.h:785:
+extern struct ext3_group_desc * ext3_get_group_desc(struct super_block * sb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#940: FILE: fs/ext3/ext3.h:785:
+extern struct ext3_group_desc * ext3_get_group_desc(struct super_block * sb,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#942: FILE: fs/ext3/ext3.h:787:
+						    struct buffer_head ** bh);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#943: FILE: fs/ext3/ext3.h:788:
+extern int ext3_should_retry_alloc(struct super_block *sb, int *retries);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#944: FILE: fs/ext3/ext3.h:789:
+extern void ext3_init_block_alloc_info(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#944: FILE: fs/ext3/ext3.h:789:
+extern void ext3_init_block_alloc_info(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#945: FILE: fs/ext3/ext3.h:790:
+extern void ext3_rsv_window_add(struct super_block *sb, struct ext3_reserve_window_node *rsv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#948: FILE: fs/ext3/ext3.h:793:
+extern int ext3_check_dir_entry(const char *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#948: FILE: fs/ext3/ext3.h:793:
+extern int ext3_check_dir_entry(const char *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#948: FILE: fs/ext3/ext3.h:793:
+extern int ext3_check_dir_entry(const char *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext3_dir_entry_2 *' should also have an identifier name
#948: FILE: fs/ext3/ext3.h:793:
+extern int ext3_check_dir_entry(const char *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#948: FILE: fs/ext3/ext3.h:793:
+extern int ext3_check_dir_entry(const char *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#948: FILE: fs/ext3/ext3.h:793:
+extern int ext3_check_dir_entry(const char *, struct inode *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#951: FILE: fs/ext3/ext3.h:796:
+extern int ext3_htree_store_dirent(struct file *dir_file, __u32 hash,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#952: FILE: fs/ext3/ext3.h:797:
+extern int ext3_htree_store_dirent(struct file *dir_file, __u32 hash,
+				    __u32 minor_hash,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#954: FILE: fs/ext3/ext3.h:799:
+extern void ext3_htree_free_dir_info(struct dir_private_info *p);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#957: FILE: fs/ext3/ext3.h:802:
+extern int ext3_sync_file (struct file *, struct dentry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#957: FILE: fs/ext3/ext3.h:802:
+extern int ext3_sync_file (struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#957: FILE: fs/ext3/ext3.h:802:
+extern int ext3_sync_file (struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#957: FILE: fs/ext3/ext3.h:802:
+extern int ext3_sync_file (struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#957: FILE: fs/ext3/ext3.h:802:
+extern int ext3_sync_file (struct file *, struct dentry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#960: FILE: fs/ext3/ext3.h:805:
+extern int ext3fs_dirhash(const char *name, int len, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#961: FILE: fs/ext3/ext3.h:806:
+			  dx_hash_info *hinfo);
 			               ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#964: FILE: fs/ext3/ext3.h:809:
+extern struct inode * ext3_new_inode (handle_t *, struct inode *, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#964: FILE: fs/ext3/ext3.h:809:
+extern struct inode * ext3_new_inode (handle_t *, struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#964: FILE: fs/ext3/ext3.h:809:
+extern struct inode * ext3_new_inode (handle_t *, struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#964: FILE: fs/ext3/ext3.h:809:
+extern struct inode * ext3_new_inode (handle_t *, struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#964: FILE: fs/ext3/ext3.h:809:
+extern struct inode * ext3_new_inode (handle_t *, struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#964: FILE: fs/ext3/ext3.h:809:
+extern struct inode * ext3_new_inode (handle_t *, struct inode *, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#965: FILE: fs/ext3/ext3.h:810:
+extern void ext3_free_inode (handle_t *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#965: FILE: fs/ext3/ext3.h:810:
+extern void ext3_free_inode (handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#965: FILE: fs/ext3/ext3.h:810:
+extern void ext3_free_inode (handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#965: FILE: fs/ext3/ext3.h:810:
+extern void ext3_free_inode (handle_t *, struct inode *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#966: FILE: fs/ext3/ext3.h:811:
+extern struct inode * ext3_orphan_get (struct super_block *, unsigned long);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#966: FILE: fs/ext3/ext3.h:811:
+extern struct inode * ext3_orphan_get (struct super_block *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#966: FILE: fs/ext3/ext3.h:811:
+extern struct inode * ext3_orphan_get (struct super_block *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#966: FILE: fs/ext3/ext3.h:811:
+extern struct inode * ext3_orphan_get (struct super_block *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#966: FILE: fs/ext3/ext3.h:811:
+extern struct inode * ext3_orphan_get (struct super_block *, unsigned long);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#967: FILE: fs/ext3/ext3.h:812:
+extern unsigned long ext3_count_free_inodes (struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#967: FILE: fs/ext3/ext3.h:812:
+extern unsigned long ext3_count_free_inodes (struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#967: FILE: fs/ext3/ext3.h:812:
+extern unsigned long ext3_count_free_inodes (struct super_block *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#968: FILE: fs/ext3/ext3.h:813:
+extern unsigned long ext3_count_dirs (struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#968: FILE: fs/ext3/ext3.h:813:
+extern unsigned long ext3_count_dirs (struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#968: FILE: fs/ext3/ext3.h:813:
+extern unsigned long ext3_count_dirs (struct super_block *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#969: FILE: fs/ext3/ext3.h:814:
+extern void ext3_check_inodes_bitmap (struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#969: FILE: fs/ext3/ext3.h:814:
+extern void ext3_check_inodes_bitmap (struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#969: FILE: fs/ext3/ext3.h:814:
+extern void ext3_check_inodes_bitmap (struct super_block *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#970: FILE: fs/ext3/ext3.h:815:
+extern unsigned long ext3_count_free (struct buffer_head *, unsigned);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#970: FILE: fs/ext3/ext3.h:815:
+extern unsigned long ext3_count_free (struct buffer_head *, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#970: FILE: fs/ext3/ext3.h:815:
+extern unsigned long ext3_count_free (struct buffer_head *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#970: FILE: fs/ext3/ext3.h:815:
+extern unsigned long ext3_count_free (struct buffer_head *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#970: FILE: fs/ext3/ext3.h:815:
+extern unsigned long ext3_count_free (struct buffer_head *, unsigned);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#972: FILE: fs/ext3/ext3.h:817:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#976: FILE: fs/ext3/ext3.h:821:
+struct buffer_head * ext3_getblk (handle_t *, struct inode *, long, int, int *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#976: FILE: fs/ext3/ext3.h:821:
+struct buffer_head * ext3_getblk (handle_t *, struct inode *, long, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#976: FILE: fs/ext3/ext3.h:821:
+struct buffer_head * ext3_getblk (handle_t *, struct inode *, long, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#976: FILE: fs/ext3/ext3.h:821:
+struct buffer_head * ext3_getblk (handle_t *, struct inode *, long, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#976: FILE: fs/ext3/ext3.h:821:
+struct buffer_head * ext3_getblk (handle_t *, struct inode *, long, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#976: FILE: fs/ext3/ext3.h:821:
+struct buffer_head * ext3_getblk (handle_t *, struct inode *, long, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#976: FILE: fs/ext3/ext3.h:821:
+struct buffer_head * ext3_getblk (handle_t *, struct inode *, long, int, int *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#977: FILE: fs/ext3/ext3.h:822:
+struct buffer_head * ext3_bread (handle_t *, struct inode *, int, int, int *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#977: FILE: fs/ext3/ext3.h:822:
+struct buffer_head * ext3_bread (handle_t *, struct inode *, int, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#977: FILE: fs/ext3/ext3.h:822:
+struct buffer_head * ext3_bread (handle_t *, struct inode *, int, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#977: FILE: fs/ext3/ext3.h:822:
+struct buffer_head * ext3_bread (handle_t *, struct inode *, int, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#977: FILE: fs/ext3/ext3.h:822:
+struct buffer_head * ext3_bread (handle_t *, struct inode *, int, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#977: FILE: fs/ext3/ext3.h:822:
+struct buffer_head * ext3_bread (handle_t *, struct inode *, int, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#977: FILE: fs/ext3/ext3.h:822:
+struct buffer_head * ext3_bread (handle_t *, struct inode *, int, int, int *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#979: FILE: fs/ext3/ext3.h:824:
+int ext3_get_blocks_handle(handle_t *handle, struct inode *inode,
+	sector_t iblock, unsigned long maxblocks, struct buffer_head *bh_result,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#982: FILE: fs/ext3/ext3.h:827:
+extern struct inode *ext3_iget(struct super_block *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#982: FILE: fs/ext3/ext3.h:827:
+extern struct inode *ext3_iget(struct super_block *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#982: FILE: fs/ext3/ext3.h:827:
+extern struct inode *ext3_iget(struct super_block *, unsigned long);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#983: FILE: fs/ext3/ext3.h:828:
+extern int  ext3_write_inode (struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#983: FILE: fs/ext3/ext3.h:828:
+extern int  ext3_write_inode (struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#983: FILE: fs/ext3/ext3.h:828:
+extern int  ext3_write_inode (struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#983: FILE: fs/ext3/ext3.h:828:
+extern int  ext3_write_inode (struct inode *, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#984: FILE: fs/ext3/ext3.h:829:
+extern int  ext3_setattr (struct dentry *, struct iattr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#984: FILE: fs/ext3/ext3.h:829:
+extern int  ext3_setattr (struct dentry *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#984: FILE: fs/ext3/ext3.h:829:
+extern int  ext3_setattr (struct dentry *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#984: FILE: fs/ext3/ext3.h:829:
+extern int  ext3_setattr (struct dentry *, struct iattr *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#985: FILE: fs/ext3/ext3.h:830:
+extern void ext3_delete_inode (struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#985: FILE: fs/ext3/ext3.h:830:
+extern void ext3_delete_inode (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#985: FILE: fs/ext3/ext3.h:830:
+extern void ext3_delete_inode (struct inode *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#986: FILE: fs/ext3/ext3.h:831:
+extern int  ext3_sync_inode (handle_t *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#986: FILE: fs/ext3/ext3.h:831:
+extern int  ext3_sync_inode (handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#986: FILE: fs/ext3/ext3.h:831:
+extern int  ext3_sync_inode (handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#986: FILE: fs/ext3/ext3.h:831:
+extern int  ext3_sync_inode (handle_t *, struct inode *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#987: FILE: fs/ext3/ext3.h:832:
+extern void ext3_discard_reservation (struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#987: FILE: fs/ext3/ext3.h:832:
+extern void ext3_discard_reservation (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#987: FILE: fs/ext3/ext3.h:832:
+extern void ext3_discard_reservation (struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#988: FILE: fs/ext3/ext3.h:833:
+extern void ext3_dirty_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#988: FILE: fs/ext3/ext3.h:833:
+extern void ext3_dirty_inode(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#989: FILE: fs/ext3/ext3.h:834:
+extern int ext3_change_inode_journal_flag(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#989: FILE: fs/ext3/ext3.h:834:
+extern int ext3_change_inode_journal_flag(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#989: FILE: fs/ext3/ext3.h:834:
+extern int ext3_change_inode_journal_flag(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#990: FILE: fs/ext3/ext3.h:835:
+extern int ext3_get_inode_loc(struct inode *, struct ext3_iloc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#990: FILE: fs/ext3/ext3.h:835:
+extern int ext3_get_inode_loc(struct inode *, struct ext3_iloc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext3_iloc *' should also have an identifier name
#990: FILE: fs/ext3/ext3.h:835:
+extern int ext3_get_inode_loc(struct inode *, struct ext3_iloc *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#991: FILE: fs/ext3/ext3.h:836:
+extern void ext3_truncate (struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#991: FILE: fs/ext3/ext3.h:836:
+extern void ext3_truncate (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#991: FILE: fs/ext3/ext3.h:836:
+extern void ext3_truncate (struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#992: FILE: fs/ext3/ext3.h:837:
+extern void ext3_set_inode_flags(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#992: FILE: fs/ext3/ext3.h:837:
+extern void ext3_set_inode_flags(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#993: FILE: fs/ext3/ext3.h:838:
+extern void ext3_get_inode_flags(struct ext3_inode_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext3_inode_info *' should also have an identifier name
#993: FILE: fs/ext3/ext3.h:838:
+extern void ext3_get_inode_flags(struct ext3_inode_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#994: FILE: fs/ext3/ext3.h:839:
+extern void ext3_set_aops(struct inode *inode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#997: FILE: fs/ext3/ext3.h:842:
+extern int ext3_ioctl (struct inode *, struct file *, unsigned int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#997: FILE: fs/ext3/ext3.h:842:
+extern int ext3_ioctl (struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#997: FILE: fs/ext3/ext3.h:842:
+extern int ext3_ioctl (struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#997: FILE: fs/ext3/ext3.h:842:
+extern int ext3_ioctl (struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#997: FILE: fs/ext3/ext3.h:842:
+extern int ext3_ioctl (struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#997: FILE: fs/ext3/ext3.h:842:
+extern int ext3_ioctl (struct inode *, struct file *, unsigned int,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#999: FILE: fs/ext3/ext3.h:844:
+extern long ext3_compat_ioctl (struct file *, unsigned int, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#999: FILE: fs/ext3/ext3.h:844:
+extern long ext3_compat_ioctl (struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#999: FILE: fs/ext3/ext3.h:844:
+extern long ext3_compat_ioctl (struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#999: FILE: fs/ext3/ext3.h:844:
+extern long ext3_compat_ioctl (struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#999: FILE: fs/ext3/ext3.h:844:
+extern long ext3_compat_ioctl (struct file *, unsigned int, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1002: FILE: fs/ext3/ext3.h:847:
+extern int ext3_orphan_add(handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#1002: FILE: fs/ext3/ext3.h:847:
+extern int ext3_orphan_add(handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1002: FILE: fs/ext3/ext3.h:847:
+extern int ext3_orphan_add(handle_t *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1003: FILE: fs/ext3/ext3.h:848:
+extern int ext3_orphan_del(handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#1003: FILE: fs/ext3/ext3.h:848:
+extern int ext3_orphan_del(handle_t *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1003: FILE: fs/ext3/ext3.h:848:
+extern int ext3_orphan_del(handle_t *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1004: FILE: fs/ext3/ext3.h:849:
+extern int ext3_htree_fill_tree(struct file *dir_file, __u32 start_hash,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1008: FILE: fs/ext3/ext3.h:853:
+extern int ext3_group_add(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: fs/ext3/ext3.h:854:
+extern int ext3_group_add(struct super_block *sb,
+				struct ext3_new_group_data *input);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1010: FILE: fs/ext3/ext3.h:855:
+extern int ext3_group_extend(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1011: FILE: fs/ext3/ext3.h:856:
+extern int ext3_group_extend(struct super_block *sb,
+				struct ext3_super_block *es,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1015: FILE: fs/ext3/ext3.h:860:
+extern void ext3_error (struct super_block *, const char *, const char *, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1015: FILE: fs/ext3/ext3.h:860:
+extern void ext3_error (struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1015: FILE: fs/ext3/ext3.h:860:
+extern void ext3_error (struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1015: FILE: fs/ext3/ext3.h:860:
+extern void ext3_error (struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1015: FILE: fs/ext3/ext3.h:860:
+extern void ext3_error (struct super_block *, const char *, const char *, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#1016: FILE: fs/ext3/ext3.h:861:
+	__attribute__ ((format (printf, 3, 4)));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1017: FILE: fs/ext3/ext3.h:862:
+extern void __ext3_std_error (struct super_block *, const char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1017: FILE: fs/ext3/ext3.h:862:
+extern void __ext3_std_error (struct super_block *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1017: FILE: fs/ext3/ext3.h:862:
+extern void __ext3_std_error (struct super_block *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1017: FILE: fs/ext3/ext3.h:862:
+extern void __ext3_std_error (struct super_block *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1017: FILE: fs/ext3/ext3.h:862:
+extern void __ext3_std_error (struct super_block *, const char *, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1018: FILE: fs/ext3/ext3.h:863:
+extern void ext3_abort (struct super_block *, const char *, const char *, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1018: FILE: fs/ext3/ext3.h:863:
+extern void ext3_abort (struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1018: FILE: fs/ext3/ext3.h:863:
+extern void ext3_abort (struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1018: FILE: fs/ext3/ext3.h:863:
+extern void ext3_abort (struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1018: FILE: fs/ext3/ext3.h:863:
+extern void ext3_abort (struct super_block *, const char *, const char *, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#1019: FILE: fs/ext3/ext3.h:864:
+	__attribute__ ((format (printf, 3, 4)));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1020: FILE: fs/ext3/ext3.h:865:
+extern void ext3_warning (struct super_block *, const char *, const char *, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1020: FILE: fs/ext3/ext3.h:865:
+extern void ext3_warning (struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1020: FILE: fs/ext3/ext3.h:865:
+extern void ext3_warning (struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1020: FILE: fs/ext3/ext3.h:865:
+extern void ext3_warning (struct super_block *, const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1020: FILE: fs/ext3/ext3.h:865:
+extern void ext3_warning (struct super_block *, const char *, const char *, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#1021: FILE: fs/ext3/ext3.h:866:
+	__attribute__ ((format (printf, 3, 4)));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1022: FILE: fs/ext3/ext3.h:867:
+extern void ext3_update_dynamic_rev (struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1022: FILE: fs/ext3/ext3.h:867:
+extern void ext3_update_dynamic_rev (struct super_block *sb);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'errno' - possible side-effects?
#1024: FILE: fs/ext3/ext3.h:869:
+#define ext3_std_error(sb, errno)				\
+do {								\
+	if ((errno))						\
+		__ext3_std_error((sb), __FUNCTION__, (errno));	\
+} while (0)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1027: FILE: fs/ext3/ext3.h:872:
+		__ext3_std_error((sb), __FUNCTION__, (errno));	\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1049: FILE: fs/ext3/ext3.h:894:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1059: FILE: fs/ext3/ext3_i.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1083: FILE: fs/ext3/ext3_i.h:25:
+typedef int ext3_grpblk_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1086: FILE: fs/ext3/ext3_i.h:28:
+typedef unsigned long ext3_fsblk_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1230: FILE: fs/ext3/ext3_jbd.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1257: FILE: fs/ext3/ext3_jbd.h:28:
+ * block to complete the transaction.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1263: FILE: fs/ext3/ext3_jbd.h:34:
+ * and the superblock, which are already accounted for. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1271: FILE: fs/ext3/ext3_jbd.h:42:
+ * counting that again for the quota updates. */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1275: FILE: fs/ext3/ext3_jbd.h:46:
+					 2*EXT3_QUOTA_TRANS_BLOCKS(sb))
 					  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1279: FILE: fs/ext3/ext3_jbd.h:50:
+ * generous.  We can grow the delete transaction later if necessary. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1287: FILE: fs/ext3/ext3_jbd.h:58:
+ * optimistically as we go. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1296: FILE: fs/ext3/ext3_jbd.h:67:
+ * needed. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1304: FILE: fs/ext3/ext3_jbd.h:75:
+ * allocated so we need to update only inode+data */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1307: FILE: fs/ext3/ext3_jbd.h:78:
+ * but inode, sb and group updates are done only once */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxE)
#1308: FILE: fs/ext3/ext3_jbd.h:79:
+#define EXT3_QUOTA_INIT_BLOCKS(sb) (test_opt(sb, QUOTA) ? (DQUOT_INIT_ALLOC*\
                                                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1309: FILE: fs/ext3/ext3_jbd.h:80:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS-3)+3+DQUOT_INIT_REWRITE) : 0)
 		                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1309: FILE: fs/ext3/ext3_jbd.h:80:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS-3)+3+DQUOT_INIT_REWRITE) : 0)
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1309: FILE: fs/ext3/ext3_jbd.h:80:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS-3)+3+DQUOT_INIT_REWRITE) : 0)
 		                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxE)
#1310: FILE: fs/ext3/ext3_jbd.h:81:
+#define EXT3_QUOTA_DEL_BLOCKS(sb) (test_opt(sb, QUOTA) ? (DQUOT_DEL_ALLOC*\
                                                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1311: FILE: fs/ext3/ext3_jbd.h:82:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS-3)+3+DQUOT_DEL_REWRITE) : 0)
 		                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1311: FILE: fs/ext3/ext3_jbd.h:82:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS-3)+3+DQUOT_DEL_REWRITE) : 0)
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1311: FILE: fs/ext3/ext3_jbd.h:82:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS-3)+3+DQUOT_DEL_REWRITE) : 0)
 		                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1329: FILE: fs/ext3/ext3_jbd.h:100:
+int ext3_reserve_inode_write(handle_t *handle, struct inode *inode,
+			struct ext3_iloc *iloc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1341: FILE: fs/ext3/ext3_jbd.h:112:
+static inline void ext3_journal_release_buffer(handle_t *handle,
+						struct buffer_head *bh)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1347: FILE: fs/ext3/ext3_jbd.h:118:
+void ext3_journal_abort_handle(const char *caller, const char *err_fn,
+		struct buffer_head *bh, handle_t *handle, int err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1350: FILE: fs/ext3/ext3_jbd.h:121:
+int __ext3_journal_get_undo_access(const char *where, handle_t *handle,
+				struct buffer_head *bh);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1353: FILE: fs/ext3/ext3_jbd.h:124:
+int __ext3_journal_get_write_access(const char *where, handle_t *handle,
+				struct buffer_head *bh);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1356: FILE: fs/ext3/ext3_jbd.h:127:
+int __ext3_journal_forget(const char *where, handle_t *handle,
+				struct buffer_head *bh);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1359: FILE: fs/ext3/ext3_jbd.h:130:
+int __ext3_journal_revoke(const char *where, handle_t *handle,
+				unsigned long blocknr, struct buffer_head *bh);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1362: FILE: fs/ext3/ext3_jbd.h:133:
+int __ext3_journal_get_create_access(const char *where,
+				handle_t *handle, struct buffer_head *bh);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1365: FILE: fs/ext3/ext3_jbd.h:136:
+int __ext3_journal_dirty_metadata(const char *where,
+				handle_t *handle, struct buffer_head *bh);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1368: FILE: fs/ext3/ext3_jbd.h:139:
+	__ext3_journal_get_undo_access(__FUNCTION__, (handle), (bh))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1370: FILE: fs/ext3/ext3_jbd.h:141:
+	__ext3_journal_get_write_access(__FUNCTION__, (handle), (bh))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1372: FILE: fs/ext3/ext3_jbd.h:143:
+	__ext3_journal_revoke(__FUNCTION__, (handle), (blocknr), (bh))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1374: FILE: fs/ext3/ext3_jbd.h:145:
+	__ext3_journal_get_create_access(__FUNCTION__, (handle), (bh))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1376: FILE: fs/ext3/ext3_jbd.h:147:
+	__ext3_journal_dirty_metadata(__FUNCTION__, (handle), (bh))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1378: FILE: fs/ext3/ext3_jbd.h:149:
+	__ext3_journal_forget(__FUNCTION__, (handle), (bh))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1391: FILE: fs/ext3/ext3_jbd.h:162:
+	__ext3_journal_stop(__FUNCTION__, (handle))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1461: FILE: fs/ext3/ext3_sb.h:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1503: FILE: fs/ext3/ext3_sb.h:43:
+	struct buffer_head * s_sbh;	/* Buffer containing the super block */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1504: FILE: fs/ext3/ext3_sb.h:44:
+	struct ext3_super_block * s_es;	/* Pointer to the super block in the buffer */

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1505: FILE: fs/ext3/ext3_sb.h:45:
+	struct buffer_head ** s_group_desc;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1516: FILE: fs/ext3/ext3_sb.h:56:
+	spinlock_t s_next_gen_lock;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1531: FILE: fs/ext3/ext3_sb.h:71:
+	struct inode * s_journal_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1532: FILE: fs/ext3/ext3_sb.h:72:
+	struct journal_s * s_journal;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000287094.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 42 errors, 145 warnings, 99 checks, 1599 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000287094.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
