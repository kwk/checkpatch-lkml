WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#64: FILE: drivers/video/Kconfig:616:
+config FB_HITACHI_TX09_LANDSCAPE
+	bool "Use Landscape 320x240 instead of Portrait 240x320"
+	depends on FB_HITACHI_TX09
+	default n
+	help
+	  Use 320x240 instead of native 240x320 Resolution
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: drivers/video/Kconfig:632:
+config CONFIG_FB_HITACHI_TX09_CURSOR
+	bool "Enable/Disable cursor"
+	depends on FB_HITACHI_TX09
+	default n
+	help
+	  Enable the cursor
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#103: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#108: FILE: drivers/video/hitachi-tx09.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#109: FILE: drivers/video/hitachi-tx09.c:2:
+ * drivers/video/hitachi-tx09.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#131: FILE: drivers/video/hitachi-tx09.c:24:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#132: FILE: drivers/video/hitachi-tx09.c:25:
+ * 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#215: FILE: drivers/video/hitachi-tx09.c:108:
+	pr_debug("%s to %d\n", __FUNCTION__, val);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#315: FILE: drivers/video/hitachi-tx09.c:208:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#346: FILE: drivers/video/hitachi-tx09.c:239:
+	BFIN_WRITE(TIMER_HSYNC, CONFIG) (CLK_SEL | TIN_SEL | PERIOD_CNT | PWM_OUT);	/* clocked by PPI_clk */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#352: FILE: drivers/video/hitachi-tx09.c:245:
+	BFIN_WRITE(TIMER_DTMG, CONFIG) (CLK_SEL | TIN_SEL | PERIOD_CNT | PWM_OUT);	/* clocked by PPI_clk */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#358: FILE: drivers/video/hitachi-tx09.c:251:
+	BFIN_WRITE(TIMER_VSYNC, CONFIG) (CLK_SEL | TIN_SEL | PERIOD_CNT | PWM_OUT);	/* clocked by PPI_clk */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#378: FILE: drivers/video/hitachi-tx09.c:271:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#442: FILE: drivers/video/hitachi-tx09.c:335:
+			printk(KERN_ERR DRIVER_NAME

WARNING:TYPO_SPELLING: 'faild' may be misspelled - perhaps 'failed'?
#443: FILE: drivers/video/hitachi-tx09.c:336:
+			       ": Requesting Peripherals PPI faild\n");
 			                                     ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#449: FILE: drivers/video/hitachi-tx09.c:342:
+			printk(KERN_ERR DRIVER_NAME

WARNING:TYPO_SPELLING: 'faild' may be misspelled - perhaps 'failed'?
#450: FILE: drivers/video/hitachi-tx09.c:343:
+			       ": Requesting Peripherals TMR faild\n");
 			                                     ^^^^^

WARNING:TYPO_SPELLING: 'faild' may be misspelled - perhaps 'failed'?
#457: FILE: drivers/video/hitachi-tx09.c:350:
+			printk(KERN_ERR ": Requesting GPIO %d faild\n", PCI_PIN);
 			                                      ^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#457: FILE: drivers/video/hitachi-tx09.c:350:
+			printk(KERN_ERR ": Requesting GPIO %d faild\n", PCI_PIN);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#525: FILE: drivers/video/hitachi-tx09.c:418:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#563: FILE: drivers/video/hitachi-tx09.c:456:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#585: FILE: drivers/video/hitachi-tx09.c:478:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#588: FILE: drivers/video/hitachi-tx09.c:481:
+		pr_debug("%s: depth not supported: %u BPP\n", __FUNCTION__,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#595: FILE: drivers/video/hitachi-tx09.c:488:
+	    info->var.xres_virtual != var->xres_virtual
+	    || info->var.yres_virtual != var->yres_virtual) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#597: FILE: drivers/video/hitachi-tx09.c:490:
+			 __FUNCTION__, var->xres, var->yres);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#603: FILE: drivers/video/hitachi-tx09.c:496:
+			 __FUNCTION__, var->yres_virtual);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#614: FILE: drivers/video/hitachi-tx09.c:507:
+	pr_debug("%s\n", __FUNCTION__);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#632: FILE: drivers/video/hitachi-tx09.c:525:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#639: FILE: drivers/video/hitachi-tx09.c:532:
+
+}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#649: FILE: drivers/video/hitachi-tx09.c:542:
+		red = green = blue = (red * 77 + green * 151 + blue * 28) >> 8;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'info->var.green.offset'
#662: FILE: drivers/video/hitachi-tx09.c:555:
+		    (red << info->var.red.offset) | (green << info->var.green.
+						     offset) | (blue << info->

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'info->var.blue'
#663: FILE: drivers/video/hitachi-tx09.c:556:
+						     offset) | (blue << info->
+								var.blue.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'var.blue.offset'
#664: FILE: drivers/video/hitachi-tx09.c:557:
+								var.blue.
+								offset);

CHECK:SPACING: No space is necessary after a cast
#666: FILE: drivers/video/hitachi-tx09.c:559:
+		((u32 *) (info->pseudo_palette))[regno] = value;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct fb_ops should normally be const
#671: FILE: drivers/video/hitachi-tx09.c:564:
+static struct fb_ops tx09_fb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#686: FILE: drivers/video/hitachi-tx09.c:579:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#693: FILE: drivers/video/hitachi-tx09.c:586:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:CONST_STRUCT: struct backlight_ops should normally be const
#697: FILE: drivers/video/hitachi-tx09.c:590:
+static struct backlight_ops tx09fb_bl_ops = {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#704: FILE: drivers/video/hitachi-tx09.c:597:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#706: FILE: drivers/video/hitachi-tx09.c:599:
+	printk(KERN_INFO DRIVER_NAME ": FrameBuffer initializing...\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#710: FILE: drivers/video/hitachi-tx09.c:603:
+		printk(KERN_ERR DRIVER_NAME ": couldn't request PPI dma.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#716: FILE: drivers/video/hitachi-tx09.c:609:
+		printk(KERN_ERR DRIVER_NAME ": couldn't request gpio port.\n");

WARNING:LONG_LINE_COMMENT: line length of 125 exceeds 100 columns
#722: FILE: drivers/video/hitachi-tx09.c:615:
+	fb_buffer = dma_alloc_coherent(NULL, 240 * 320 * 2, &dma_handle, GFP_KERNEL);	/* 7 blanking lines, 2 bytes/pixel */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fb_buffer"
#723: FILE: drivers/video/hitachi-tx09.c:616:
+	if (fb_buffer == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#724: FILE: drivers/video/hitachi-tx09.c:617:
+		printk(KERN_ERR DRIVER_NAME

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#724: FILE: drivers/video/hitachi-tx09.c:617:
+	if (fb_buffer == NULL) {
+		printk(KERN_ERR DRIVER_NAME

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dma_desc_table"
#742: FILE: drivers/video/hitachi-tx09.c:635:
+	if (dma_desc_table == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#743: FILE: drivers/video/hitachi-tx09.c:636:
+		printk(KERN_ERR DRIVER_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#767: FILE: drivers/video/hitachi-tx09.c:660:
+		printk(KERN_ERR DRIVER_NAME

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#767: FILE: drivers/video/hitachi-tx09.c:660:
+	if (!tx09_fb.pseudo_palette) {
+		printk(KERN_ERR DRIVER_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#778: FILE: drivers/video/hitachi-tx09.c:671:
+		printk(KERN_ERR DRIVER_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#790: FILE: drivers/video/hitachi-tx09.c:683:
+		printk(KERN_ERR DRIVER_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#804: FILE: drivers/video/hitachi-tx09.c:697:
+	printk(KERN_INFO "Done.\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#811: FILE: drivers/video/hitachi-tx09.c:704:
+	pr_debug("%s\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fb_buffer"
#813: FILE: drivers/video/hitachi-tx09.c:706:
+	if (fb_buffer != NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#838: FILE: drivers/video/hitachi-tx09.c:731:
+	printk(KERN_INFO DRIVER_NAME ": Unregistered LCD driver.\n");

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#886: FILE: drivers/video/hitachi-tx09.c:779:
+static int __devinit tx09_driver_init(void)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000282055.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 47 warnings, 8 checks, 843 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000282055.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
