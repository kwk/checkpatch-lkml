ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#81: FILE: fs/autofs/root.c:148:
+static int autofs_revalidate(struct dentry * dentry, struct vfs_lookup *lookup)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (dentry->d_op->d_revalidate)
#112: FILE: fs/autofs4/root.c:137:
+		ret = (dentry->d_op->d_revalidate)(dentry, &lookup);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (dentry->d_op->d_revalidate)
#136: FILE: fs/autofs4/root.c:630:
+		(dentry->d_op->d_revalidate)(dentry, &nd->lookup);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#304: FILE: fs/namei.c:985:
+			if (!nd->lookup.path.dentry->d_op->d_revalidate(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#325: FILE: fs/ncpfs/dir.c:269:
+__ncp_lookup_validate(struct dentry * dentry, struct vfs_lookup *lookup)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#334: FILE: fs/ncpfs/dir.c:339:
+ncp_lookup_validate(struct dentry * dentry, struct vfs_lookup *lookup)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: fs/nfs/dir.c:716:
+		if (nfs_lookup_check_intent(lookup, LOOKUP_OPEN) != 0 &&
 				!(server->flags & NFS_MOUNT_NOCTO) &&

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#433: FILE: fs/nfs/dir.c:1002:
+			       (O_CREAT|O_TRUNC|FMODE_WRITE)))
 			               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#433: FILE: fs/nfs/dir.c:1002:
+			       (O_CREAT|O_TRUNC|FMODE_WRITE)))
 			                       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#498: FILE: fs/nfs/nfs4_fs.h:183:
+extern int nfs4_open_revalidate(struct inode *, struct dentry *, int, struct vfs_lookup *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#498: FILE: fs/nfs/nfs4_fs.h:183:
+extern int nfs4_open_revalidate(struct inode *, struct dentry *, int, struct vfs_lookup *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#498: FILE: fs/nfs/nfs4_fs.h:183:
+extern int nfs4_open_revalidate(struct inode *, struct dentry *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#498: FILE: fs/nfs/nfs4_fs.h:183:
+extern int nfs4_open_revalidate(struct inode *, struct dentry *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#498: FILE: fs/nfs/nfs4_fs.h:183:
+extern int nfs4_open_revalidate(struct inode *, struct dentry *, int, struct vfs_lookup *);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#509: FILE: fs/nfs/nfs4proc.c:1445:
+nfs4_open_revalidate(struct inode *dir, struct dentry *dentry, int openflags, struct vfs_lookup *lookup)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#602: FILE: fs/smbfs/dir.c:299:
+smb_lookup_validate(struct dentry * dentry, struct vfs_lookup *lookup)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#639: FILE: include/linux/dcache.h:131:
+	int (*d_revalidate)(struct dentry *, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#639: FILE: include/linux/dcache.h:131:
+	int (*d_revalidate)(struct dentry *, struct vfs_lookup *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394356.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 7 warnings, 7 checks, 498 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394356.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
