WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
support routines (i.e. register initialization and descriptor formats) for the

CHECK:SPACING: No space is necessary after a cast
#168: FILE: arch/arm/mach-iop13xx/setup.c:335:
+		.platform_data = (void *) &iop13xx_adma_0_data,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#180: FILE: arch/arm/mach-iop13xx/setup.c:347:
+		.platform_data = (void *) &iop13xx_adma_1_data,

CHECK:SPACING: No space is necessary after a cast
#192: FILE: arch/arm/mach-iop13xx/setup.c:359:
+		.platform_data = (void *) &iop13xx_adma_2_data,

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: arch/arm/mach-iop13xx/setup.c:470:
+		struct iop_adma_platform_data *plat_data;
+		if ((init_adma & (1 << i)) && IOP13XX_SETUP_DEBUG)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#238: FILE: arch/arm/mach-iop13xx/setup.c:471:
+			printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#309: FILE: arch/arm/mach-iop13xx/setup.c:602:
+				PRINTK("\"iop13xx_init_adma\" malformed"
+					    " at character: \'%c\'", *str);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#319: FILE: arch/arm/mach-iop13xx/setup.c:612:
+__setup("iop13xx_init_adma", iop13xx_init_adma_setup);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#323: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#328: FILE: include/asm-arm/arch-iop13xx/adma.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#341: FILE: include/asm-arm/arch-iop13xx/adma.h:14:
+ * this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#342: FILE: include/asm-arm/arch-iop13xx/adma.h:15:
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#352: FILE: include/asm-arm/arch-iop13xx/adma.h:25:
+#define ADMA_ACCR(chan)	(chan->mmr_base + 0x0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#353: FILE: include/asm-arm/arch-iop13xx/adma.h:26:
+#define ADMA_ACSR(chan)	(chan->mmr_base + 0x4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#354: FILE: include/asm-arm/arch-iop13xx/adma.h:27:
+#define ADMA_ADAR(chan)	(chan->mmr_base + 0x8)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#355: FILE: include/asm-arm/arch-iop13xx/adma.h:28:
+#define ADMA_IIPCR(chan)	(chan->mmr_base + 0x18)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#356: FILE: include/asm-arm/arch-iop13xx/adma.h:29:
+#define ADMA_IIPAR(chan)	(chan->mmr_base + 0x1c)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#357: FILE: include/asm-arm/arch-iop13xx/adma.h:30:
+#define ADMA_IIPUAR(chan)	(chan->mmr_base + 0x20)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#358: FILE: include/asm-arm/arch-iop13xx/adma.h:31:
+#define ADMA_ANDAR(chan)	(chan->mmr_base + 0x24)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#359: FILE: include/asm-arm/arch-iop13xx/adma.h:32:
+#define ADMA_ADCR(chan)	(chan->mmr_base + 0x28)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#360: FILE: include/asm-arm/arch-iop13xx/adma.h:33:
+#define ADMA_CARMD(chan)	(chan->mmr_base + 0x2c)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#361: FILE: include/asm-arm/arch-iop13xx/adma.h:34:
+#define ADMA_ABCR(chan)	(chan->mmr_base + 0x30)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#362: FILE: include/asm-arm/arch-iop13xx/adma.h:35:
+#define ADMA_DLADR(chan)	(chan->mmr_base + 0x34)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#363: FILE: include/asm-arm/arch-iop13xx/adma.h:36:
+#define ADMA_DUADR(chan)	(chan->mmr_base + 0x38)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'src' may be better as '(src)' to avoid precedence issues
#364: FILE: include/asm-arm/arch-iop13xx/adma.h:37:
+#define ADMA_SLAR(src, chan)	(chan->mmr_base + (0x3c + (src << 3)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#364: FILE: include/asm-arm/arch-iop13xx/adma.h:37:
+#define ADMA_SLAR(src, chan)	(chan->mmr_base + (0x3c + (src << 3)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'src' may be better as '(src)' to avoid precedence issues
#365: FILE: include/asm-arm/arch-iop13xx/adma.h:38:
+#define ADMA_SUAR(src, chan)	(chan->mmr_base + (0x40 + (src << 3)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#365: FILE: include/asm-arm/arch-iop13xx/adma.h:38:
+#define ADMA_SUAR(src, chan)	(chan->mmr_base + (0x40 + (src << 3)))

CHECK:BIT_MACRO: Prefer using the BIT macro
#491: FILE: include/asm-arm/arch-iop13xx/adma.h:164:
+#define ADMA_STATUS_BUSY (1 << 13)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#507: FILE: include/asm-arm/arch-iop13xx/adma.h:180:
+}
+#define iop_desc_is_aligned(x, y) 1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: include/asm-arm/arch-iop13xx/adma.h:221:
+static inline u32 iop_desc_get_dest_addr(struct iop_adma_desc_slot *desc,
+					struct iop_adma_chan *chan)

WARNING:LINE_SPACING: Missing a blank line after declarations
#551: FILE: include/asm-arm/arch-iop13xx/adma.h:224:
+	struct iop13xx_adma_desc_hw *hw_desc = desc->hw_desc;
+	return hw_desc->dest_addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: include/asm-arm/arch-iop13xx/adma.h:228:
+static inline u32 iop_desc_get_byte_count(struct iop_adma_desc_slot *desc,
+					struct iop_adma_chan *chan)

WARNING:LINE_SPACING: Missing a blank line after declarations
#558: FILE: include/asm-arm/arch-iop13xx/adma.h:231:
+	struct iop13xx_adma_desc_hw *hw_desc = desc->hw_desc;
+	return hw_desc->byte_count_field.byte_count;

WARNING:LINE_SPACING: Missing a blank line after declarations
#566: FILE: include/asm-arm/arch-iop13xx/adma.h:239:
+	struct iop13xx_adma_desc_hw *hw_desc = desc->hw_desc;
+	return hw_desc->src[src_idx].src_addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: include/asm-arm/arch-iop13xx/adma.h:243:
+static inline u32 iop_desc_get_src_count(struct iop_adma_desc_slot *desc,
+					struct iop_adma_chan *chan)

WARNING:LINE_SPACING: Missing a blank line after declarations
#573: FILE: include/asm-arm/arch-iop13xx/adma.h:246:
+	struct iop13xx_adma_desc_hw *hw_desc = desc->hw_desc;
+	return hw_desc->desc_ctrl_field.src_select + 1;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#626: FILE: include/asm-arm/arch-iop13xx/adma.h:299:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#627: FILE: include/asm-arm/arch-iop13xx/adma.h:300:
+}
+#define iop_desc_init_null_xor(d, s, i) iop_desc_init_xor(d, s, i)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: include/asm-arm/arch-iop13xx/adma.h:325:
+static inline void iop_desc_set_byte_count(struct iop_adma_desc_slot *desc,
+					struct iop_adma_chan *chan,

WARNING:LINE_SPACING: Missing a blank line after declarations
#656: FILE: include/asm-arm/arch-iop13xx/adma.h:329:
+	struct iop13xx_adma_desc_hw *hw_desc = desc->hw_desc;
+	hw_desc->byte_count = byte_count;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#683: FILE: include/asm-arm/arch-iop13xx/adma.h:356:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: include/asm-arm/arch-iop13xx/adma.h:358:
+static inline void iop_desc_set_dest_addr(struct iop_adma_desc_slot *desc,
+					struct iop_adma_chan *chan,

WARNING:LINE_SPACING: Missing a blank line after declarations
#689: FILE: include/asm-arm/arch-iop13xx/adma.h:362:
+	struct iop13xx_adma_desc_hw *hw_desc = desc->hw_desc;
+	hw_desc->dest_addr = addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: include/asm-arm/arch-iop13xx/adma.h:367:
+static inline void iop_desc_set_memcpy_src_addr(struct iop_adma_desc_slot *desc,
+					dma_addr_t addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#697: FILE: include/asm-arm/arch-iop13xx/adma.h:370:
+	struct iop13xx_adma_desc_hw *hw_desc = desc->hw_desc;
+	hw_desc->src[0].src_addr = addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: include/asm-arm/arch-iop13xx/adma.h:375:
+static inline void iop_desc_set_xor_src_addr(struct iop_adma_desc_slot *desc,
+					int src_idx, dma_addr_t addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#722: FILE: include/asm-arm/arch-iop13xx/adma.h:395:
+iop_desc_init_interrupt(struct iop_adma_desc_slot *desc,
+	struct iop_adma_chan *chan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: include/asm-arm/arch-iop13xx/adma.h:406:
+static inline void iop_desc_set_next_desc(struct iop_adma_desc_slot *desc,
+					u32 next_desc_addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#736: FILE: include/asm-arm/arch-iop13xx/adma.h:409:
+	struct iop13xx_adma_desc_hw *hw_desc = desc->hw_desc;
+	BUG_ON(hw_desc->next_desc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#736: FILE: include/asm-arm/arch-iop13xx/adma.h:409:
+	BUG_ON(hw_desc->next_desc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#743: FILE: include/asm-arm/arch-iop13xx/adma.h:416:
+	struct iop13xx_adma_desc_hw *hw_desc = desc->hw_desc;
+	return hw_desc->next_desc;

WARNING:LINE_SPACING: Missing a blank line after declarations
#749: FILE: include/asm-arm/arch-iop13xx/adma.h:422:
+	struct iop13xx_adma_desc_hw *hw_desc = desc->hw_desc;
+	hw_desc->next_desc = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#753: FILE: include/asm-arm/arch-iop13xx/adma.h:426:
+static inline void iop_desc_set_block_fill_val(struct iop_adma_desc_slot *desc,
+						u32 val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#756: FILE: include/asm-arm/arch-iop13xx/adma.h:429:
+	struct iop13xx_adma_desc_hw *hw_desc = desc->hw_desc;
+	hw_desc->block_fill_data = val;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#765: FILE: include/asm-arm/arch-iop13xx/adma.h:438:
+	BUG_ON(!(byte_count.tx_complete && desc_ctrl.zero_result));

WARNING:LINE_SPACING: Missing a blank line after declarations
#795: FILE: include/asm-arm/arch-iop13xx/adma.h:468:
+	u32 adma_chan_ctrl = __raw_readl(ADMA_ACCR(chan));
+	adma_chan_ctrl &= ~0x1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#811: FILE: include/asm-arm/arch-iop13xx/adma.h:484:
+	u32 status = __raw_readl(ADMA_ACSR(chan));
+	status &= (1 << 12);

WARNING:LINE_SPACING: Missing a blank line after declarations
#818: FILE: include/asm-arm/arch-iop13xx/adma.h:491:
+	u32 status = __raw_readl(ADMA_ACSR(chan));
+	status &= (1 << 11);

WARNING:LINE_SPACING: Missing a blank line after declarations
#825: FILE: include/asm-arm/arch-iop13xx/adma.h:498:
+	u32 status = __raw_readl(ADMA_ACSR(chan));
+	status &= (1 << 9) | (1 << 5) | (1 << 4) | (1 << 3);

CHECK:BIT_MACRO: Prefer using the BIT macro
#889: FILE: include/asm-arm/arch-iop13xx/iop13xx.h:172:
+#define IOP13XX_INIT_ADMA_0           (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#890: FILE: include/asm-arm/arch-iop13xx/iop13xx.h:173:
+#define IOP13XX_INIT_ADMA_1           (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#891: FILE: include/asm-arm/arch-iop13xx/iop13xx.h:174:
+#define IOP13XX_INIT_ADMA_2           (1 << 2)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#894: FILE: include/asm-arm/arch-iop13xx/iop13xx.h:177:
+#define IQ81340_NUM_UART     ^I^I2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#895: FILE: include/asm-arm/arch-iop13xx/iop13xx.h:178:
+#define IQ81340_NUM_I2C      ^I^I3$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#897: FILE: include/asm-arm/arch-iop13xx/iop13xx.h:180:
+#define IQ81340_NUM_ADMA     ^I^I3$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412930.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 26 warnings, 38 checks, 850 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412930.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
