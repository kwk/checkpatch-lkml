WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
This patch enables the remaining SPC-3 compliant persistent reservation for PR TYPEs:

WARNING:TYPO_SPELLING: 'alot' may be misspelled - perhaps 'a lot'?
#51: 
that for those folks interested in testing PR_*_ALL_REG types, this will generate alot of
                                                                                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Identifer' may be misspelled - perhaps 'Identifier'?
#156: 
SPC-3 Reservation: Relative Port Identifer Tag: 1 iSCSI Portal Group Tag: 1 iSCSI Logical Unit: 0
                                 ^^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#243: FILE: drivers/lio-core/target_core_base.h:282:
+typedef struct t10_pr_registration_s {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#264: FILE: drivers/lio-core/target_core_base.h:304:
+	int (*t10_reservation_check)(struct se_cmd_s *, u32 *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#264: FILE: drivers/lio-core/target_core_base.h:304:
+	int (*t10_reservation_check)(struct se_cmd_s *, u32 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_cmd_s *' should also have an identifier name
#268: FILE: drivers/lio-core/target_core_base.h:307:
+	int (*t10_seq_non_holder)(struct se_cmd_s *, unsigned char *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#268: FILE: drivers/lio-core/target_core_base.h:307:
+	int (*t10_seq_non_holder)(struct se_cmd_s *, unsigned char *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#268: FILE: drivers/lio-core/target_core_base.h:307:
+	int (*t10_seq_non_holder)(struct se_cmd_s *, unsigned char *, u32);

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#498: FILE: drivers/lio-core/target_core_pr.c:330:
+	 * Case where the CDB is explictly allowed in the above switch
 	                         ^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#502: FILE: drivers/lio-core/target_core_pr.c:334:
+		printk("Allowing CDB: 0x%02x for NON %s reservation holder\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#503: FILE: drivers/lio-core/target_core_pr.c:335:
+		printk("Allowing CDB: 0x%02x for NON %s reservation holder\n",
+			cdb[0], core_scsi3_pr_dump_type(pr_reg_type));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->data_direction == SE_DIRECTION_WRITE'
#511: FILE: drivers/lio-core/target_core_pr.c:343:
+		if ((cmd->data_direction == SE_DIRECTION_WRITE) ||
+		    (cmd->data_direction == SE_DIRECTION_BIDI)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->data_direction == SE_DIRECTION_BIDI'
#511: FILE: drivers/lio-core/target_core_pr.c:343:
+		if ((cmd->data_direction == SE_DIRECTION_WRITE) ||
+		    (cmd->data_direction == SE_DIRECTION_BIDI)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#516: FILE: drivers/lio-core/target_core_pr.c:348:
+			printk(KERN_INFO "Conflict for WRITE CDB: 0x%02x"

WARNING:SPLIT_STRING: quoted string split across lines
#517: FILE: drivers/lio-core/target_core_pr.c:349:
+			printk(KERN_INFO "Conflict for WRITE CDB: 0x%02x"
+				" to %s reservation\n", cdb[0],

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#525: FILE: drivers/lio-core/target_core_pr.c:357:
+			printk(KERN_INFO "Allowing CDB: 0x%02x for %s"

WARNING:SPLIT_STRING: quoted string split across lines
#526: FILE: drivers/lio-core/target_core_pr.c:358:
+			printk(KERN_INFO "Allowing CDB: 0x%02x for %s"
+				" reservation\n", cdb[0],

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#536: FILE: drivers/lio-core/target_core_pr.c:368:
+			printk(KERN_INFO "Allowing CDB: 0x%02x for %s"

WARNING:SPLIT_STRING: quoted string split across lines
#537: FILE: drivers/lio-core/target_core_pr.c:369:
+			printk(KERN_INFO "Allowing CDB: 0x%02x for %s"
+				" reservation\n", cdb[0],

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#542: FILE: drivers/lio-core/target_core_pr.c:374:
+	printk(KERN_INFO "Conflict for CDB: 0x%2x for %s reservation\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: drivers/lio-core/target_core_pr.c:375:
+	printk(KERN_INFO "Conflict for CDB: 0x%2x for %s reservation\n",
+		cdb[0], core_scsi3_pr_dump_type(pr_reg_type));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#555: FILE: drivers/lio-core/target_core_pr.c:400:
+static int core_scsi3_pr_reservation_check(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr_reg->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG'
#669: FILE: drivers/lio-core/target_core_pr.c:1222:
+		if ((pr_reg->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||
+		    (pr_reg->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr_reg->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG'
#669: FILE: drivers/lio-core/target_core_pr.c:1222:
+		if ((pr_reg->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||
+		    (pr_reg->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154309.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 7 checks, 475 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154309.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
