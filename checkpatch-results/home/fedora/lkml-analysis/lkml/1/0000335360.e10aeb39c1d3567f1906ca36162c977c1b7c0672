WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
>>>>> [   12.716149] mfgpt-timer:  registering the MFGT timer as a clock event...

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
#ifdef WORKAROUND:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
#ifndef WORKAROUND:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#131: FILE: arch/i386/kernel/geode-mfgpt.c:1:
+/*     Driver/API for AMD Geode Multi-Function General Purpose Timers (MFGPT)

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#148: FILE: arch/i386/kernel/geode-mfgpt.c:18:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#163: FILE: arch/i386/kernel/geode-mfgpt.c:33:
+static int reserved_mask = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#179: FILE: arch/i386/kernel/geode-mfgpt.c:49:
+EXPORT_SYMBOL(geode_mfgpt_write);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#187: FILE: arch/i386/kernel/geode-mfgpt.c:57:
+EXPORT_SYMBOL(geode_mfgpt_read);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#223: FILE: arch/i386/kernel/geode-mfgpt.c:93:
+	__ATTR(setup, S_IRUGO, sys_show_setup, NULL),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#224: FILE: arch/i386/kernel/geode-mfgpt.c:94:
+	__ATTR(counter, S_IRUGO, sys_show_counter, NULL),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#225: FILE: arch/i386/kernel/geode-mfgpt.c:95:
+	__ATTR(cmp1, S_IRUGO, sys_show_cmp1, NULL),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#226: FILE: arch/i386/kernel/geode-mfgpt.c:96:
+	__ATTR(cmp2, S_IRUGO, sys_show_cmp2, NULL),

ERROR:SPACING: space required before the open parenthesis '('
#235: FILE: arch/i386/kernel/geode-mfgpt.c:105:
+	switch(event) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#265: FILE: arch/i386/kernel/geode-mfgpt.c:135:
+EXPORT_SYMBOL(geode_mfgpt_toggle_event);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mfgpt_iobase"
#295: FILE: arch/i386/kernel/geode-mfgpt.c:165:
+	if (mfgpt_iobase == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#299: FILE: arch/i386/kernel/geode-mfgpt.c:169:
+		if (mfgpt_timers[timer].flags & F_AVAIL) {
[...]
+		else if (mfgpt_timers[timer].owner == owner)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#303: FILE: arch/i386/kernel/geode-mfgpt.c:173:
+			printk("geode-mfgpt:  Registered timer %d\n", timer);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#306: FILE: arch/i386/kernel/geode-mfgpt.c:176:
+		}
+		else if (mfgpt_timers[timer].owner == owner)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#315: FILE: arch/i386/kernel/geode-mfgpt.c:185:
+	for(i = 0; i < MFGPT_MAX_TIMERS; i++) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#316: FILE: arch/i386/kernel/geode-mfgpt.c:186:
+	for(i = 0; i < MFGPT_MAX_TIMERS; i++) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: arch/i386/kernel/geode-mfgpt.c:191:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#322: FILE: arch/i386/kernel/geode-mfgpt.c:192:
+			printk("geode-mfgpt:  Registered timer %d\n", i);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#334: FILE: arch/i386/kernel/geode-mfgpt.c:204:
+EXPORT_SYMBOL(geode_mfgpt_alloc_timer);

WARNING:LINE_SPACING: Missing a blank line after declarations
#341: FILE: arch/i386/kernel/geode-mfgpt.c:211:
+	u16 val = geode_mfgpt_read(timer, MFGPT_REG_SETUP);
+	mfgpt_timers[timer].index = timer;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: arch/i386/kernel/geode-mfgpt.c:224:
+			class_device_create(mfgpt_class, NULL, devid,
+				&pdev->dev, "mfgpt%d", timer);

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: arch/i386/kernel/geode-mfgpt.c:226:
+^I        class_set_devdata(mfgpt_timers[timer].cdev, &mfgpt_timers[timer]);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#358: FILE: arch/i386/kernel/geode-mfgpt.c:228:
+		for(v = 0; v < ARRAY_SIZE(mfgpt_attrs); v++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: arch/i386/kernel/geode-mfgpt.c:230:
+			if (class_device_create_file(mfgpt_timers[timer].cdev,
+				&mfgpt_attrs[v]))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#361: FILE: arch/i386/kernel/geode-mfgpt.c:231:
+				printk(KERN_ERR "geode-mfpgt:  Couldn't create %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: arch/i386/kernel/geode-mfgpt.c:232:
+				printk(KERN_ERR "geode-mfpgt:  Couldn't create %s\n",
+				mfgpt_attrs[v].attr.name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pdev"
#394: FILE: arch/i386/kernel/geode-mfgpt.c:264:
+		if (pdev != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdev"
#398: FILE: arch/i386/kernel/geode-mfgpt.c:268:
+	if (pdev == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#399: FILE: arch/i386/kernel/geode-mfgpt.c:269:
+		printk(KERN_ERR "geode-mfgpt:  No PCI devices found\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#403: FILE: arch/i386/kernel/geode-mfgpt.c:273:
+	if ((ret = pci_enable_device_bars(pdev, 1 << MFGPT_PCI_BAR)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#406: FILE: arch/i386/kernel/geode-mfgpt.c:276:
+	if ((ret = pci_request_region(pdev, MFGPT_PCI_BAR, "geode-mfgpt")))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mfgpt_iobase"
#411: FILE: arch/i386/kernel/geode-mfgpt.c:281:
+	if (mfgpt_iobase == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#417: FILE: arch/i386/kernel/geode-mfgpt.c:287:
+		printk(KERN_ERR "geode-mfgpt: Unable to allocate the class.\n");

ERROR:SPACING: space required before the open parenthesis '('
#421: FILE: arch/i386/kernel/geode-mfgpt.c:291:
+	for(i = 0; i < MFGPT_MAX_TIMERS; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#424: FILE: arch/i386/kernel/geode-mfgpt.c:294:
+	printk("geode-mfgpt:  %d timers available.\n", count);

WARNING:TYPO_SPELLING: 'initalizing' may be misspelled - perhaps 'initializing'?
#435: FILE: arch/i386/kernel/geode-mfgpt.c:305:
+ 	printk("geode-mfgpt:  Error initalizing the timers\n");
  	                            ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: arch/i386/kernel/geode-mfgpt.c:305:
+ ^Iprintk("geode-mfgpt:  Error initalizing the timers\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#435: FILE: arch/i386/kernel/geode-mfgpt.c:305:
+ ^Iprintk("geode-mfgpt:  Error initalizing the timers\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: arch/i386/kernel/geode-mfgpt.c:305:
+ ^Iprintk("geode-mfgpt:  Error initalizing the timers\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#435: FILE: arch/i386/kernel/geode-mfgpt.c:305:
+ 	printk("geode-mfgpt:  Error initalizing the timers\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#458: FILE: drivers/char/watchdog/geodewdt.c:1:
+/* Watchdog timer for the Geode GX/LX

CHECK:LINE_SPACING: Please don't use multiple blank lines
#468: FILE: drivers/char/watchdog/geodewdt.c:11:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#477: FILE: drivers/char/watchdog/geodewdt.c:20:
+#include <asm/uaccess.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#496: FILE: drivers/char/watchdog/geodewdt.c:39:
+	printk("PING\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#504: FILE: drivers/char/watchdog/geodewdt.c:47:
+	printk("STOP\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#519: FILE: drivers/char/watchdog/geodewdt.c:62:
+	printk("HEARTBEAT %d\n", val);

ERROR:CODE_INDENT: code indent should use tabs where possible
#527: FILE: drivers/char/watchdog/geodewdt.c:70:
+        if (test_and_set_bit(WDT_FLAGS_OPEN, &wdt_flags))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: drivers/char/watchdog/geodewdt.c:70:
+        if (test_and_set_bit(WDT_FLAGS_OPEN, &wdt_flags))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: drivers/char/watchdog/geodewdt.c:71:
+                return -EBUSY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: drivers/char/watchdog/geodewdt.c:71:
+                return -EBUSY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: drivers/char/watchdog/geodewdt.c:73:
+        if (!test_and_clear_bit(WDT_FLAGS_ORPHAN, &wdt_flags))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: drivers/char/watchdog/geodewdt.c:73:
+        if (!test_and_clear_bit(WDT_FLAGS_ORPHAN, &wdt_flags))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: drivers/char/watchdog/geodewdt.c:74:
+                __module_get(THIS_MODULE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: drivers/char/watchdog/geodewdt.c:74:
+                __module_get(THIS_MODULE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: drivers/char/watchdog/geodewdt.c:77:
+        return nonseekable_open(inode, file);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: drivers/char/watchdog/geodewdt.c:77:
+        return nonseekable_open(inode, file);$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#544: FILE: drivers/char/watchdog/geodewdt.c:87:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#544: FILE: drivers/char/watchdog/geodewdt.c:87:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#545: FILE: drivers/char/watchdog/geodewdt.c:88:
+		printk(KERN_CRIT "Unexpected close - watchdog is not stopping.\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: drivers/char/watchdog/geodewdt.c:103:
+        if(len) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: drivers/char/watchdog/geodewdt.c:103:
+        if(len) {$

ERROR:SPACING: space required before the open parenthesis '('
#560: FILE: drivers/char/watchdog/geodewdt.c:103:
+        if(len) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#562: FILE: drivers/char/watchdog/geodewdt.c:105:
+                safe_close = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: drivers/char/watchdog/geodewdt.c:105:
+                safe_close = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: drivers/char/watchdog/geodewdt.c:107:
+                for (i = 0; i != len; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: drivers/char/watchdog/geodewdt.c:107:
+                for (i = 0; i != len; i++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#592: FILE: drivers/char/watchdog/geodewdt.c:135:
+        };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: drivers/char/watchdog/geodewdt.c:135:
+        };$

ERROR:SPACING: space required before the open parenthesis '('
#594: FILE: drivers/char/watchdog/geodewdt.c:137:
+	switch(cmd) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#615: FILE: drivers/char/watchdog/geodewdt.c:158:
+/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:CODE_INDENT: code indent should use tabs where possible
#627: FILE: drivers/char/watchdog/geodewdt.c:170:
+        if(code==SYS_DOWN || code==SYS_HALT)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: drivers/char/watchdog/geodewdt.c:170:
+        if(code==SYS_DOWN || code==SYS_HALT)$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#627: FILE: drivers/char/watchdog/geodewdt.c:170:
+        if(code==SYS_DOWN || code==SYS_HALT)
                ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#627: FILE: drivers/char/watchdog/geodewdt.c:170:
+        if(code==SYS_DOWN || code==SYS_HALT)
                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#627: FILE: drivers/char/watchdog/geodewdt.c:170:
+        if(code==SYS_DOWN || code==SYS_HALT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#630: FILE: drivers/char/watchdog/geodewdt.c:173:
+        return NOTIFY_DONE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: drivers/char/watchdog/geodewdt.c:173:
+        return NOTIFY_DONE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: drivers/char/watchdog/geodewdt.c:177:
+        .owner          = THIS_MODULE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: drivers/char/watchdog/geodewdt.c:177:
+        .owner          = THIS_MODULE,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: drivers/char/watchdog/geodewdt.c:178:
+        .llseek         = no_llseek,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: drivers/char/watchdog/geodewdt.c:178:
+        .llseek         = no_llseek,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: drivers/char/watchdog/geodewdt.c:179:
+        .write          = geodewdt_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: drivers/char/watchdog/geodewdt.c:179:
+        .write          = geodewdt_write,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#637: FILE: drivers/char/watchdog/geodewdt.c:180:
+        .ioctl          = geodewdt_ioctl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: drivers/char/watchdog/geodewdt.c:180:
+        .ioctl          = geodewdt_ioctl,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#638: FILE: drivers/char/watchdog/geodewdt.c:181:
+        .open           = geodewdt_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: drivers/char/watchdog/geodewdt.c:181:
+        .open           = geodewdt_open,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#639: FILE: drivers/char/watchdog/geodewdt.c:182:
+        .release        = geodewdt_release,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: drivers/char/watchdog/geodewdt.c:182:
+        .release        = geodewdt_release,$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#660: FILE: drivers/char/watchdog/geodewdt.c:203:
+		printk(KERN_ERR "geodewdt:  No timers were available\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: drivers/char/watchdog/geodewdt.c:220:
+	geode_mfgpt_write(wdt_timer, MFGPT_REG_CMP2,
+		cur_interval * GEODEWDT_HZ);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#712: FILE: drivers/char/watchdog/Kconfig:212:
+config GEODE_WDT
+	tristate "AMD Geode GX/LX Watchdog Timer"
+	depends on WATCHDOG && X86
+	help
+	  Enable support for a hardware based watchdog timer running 
+	  on the MFGPT timers available on AMD Geode GX and LX based
+	  platforms.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#716: FILE: drivers/char/watchdog/Kconfig:216:
+^I  Enable support for a hardware based watchdog timer running $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#738: FILE: include/asm-i386/geode-mfgpt.h:1:
+/*     Driver/API for AMD Geode Multi-Function General Purpose Timers (MFGPT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#770: FILE: include/asm-i386/geode-mfgpt.h:33:
+#define MFGPT_SETUP_CNTEN  (1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#771: FILE: include/asm-i386/geode-mfgpt.h:34:
+#define MFGPT_SETUP_CMP2   (1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#772: FILE: include/asm-i386/geode-mfgpt.h:35:
+#define MFGPT_SETUP_CMP1   (1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#773: FILE: include/asm-i386/geode-mfgpt.h:36:
+#define MFGPT_SETUP_SETUP  (1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#774: FILE: include/asm-i386/geode-mfgpt.h:37:
+#define MFGPT_SETUP_STOPEN (1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#775: FILE: include/asm-i386/geode-mfgpt.h:38:
+#define MFGPT_SETUP_EXTEN  (1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#776: FILE: include/asm-i386/geode-mfgpt.h:39:
+#define MFGPT_SETUP_REVEN  (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#777: FILE: include/asm-i386/geode-mfgpt.h:40:
+#define MFGPT_SETUP_CLKSEL (1 << 4)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#779: FILE: include/asm-i386/geode-mfgpt.h:42:
+extern void geode_mfgpt_toggle_event(int, int, int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#779: FILE: include/asm-i386/geode-mfgpt.h:42:
+extern void geode_mfgpt_toggle_event(int, int, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#779: FILE: include/asm-i386/geode-mfgpt.h:42:
+extern void geode_mfgpt_toggle_event(int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#779: FILE: include/asm-i386/geode-mfgpt.h:42:
+extern void geode_mfgpt_toggle_event(int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#779: FILE: include/asm-i386/geode-mfgpt.h:42:
+extern void geode_mfgpt_toggle_event(int, int, int, int);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#781: FILE: include/asm-i386/geode-mfgpt.h:44:
+#define geode_mfgpt_set_event(t,c,e) geode_mfgpt_toggle_event(t,c,e,1)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#781: FILE: include/asm-i386/geode-mfgpt.h:44:
+#define geode_mfgpt_set_event(t,c,e) geode_mfgpt_toggle_event(t,c,e,1)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#781: FILE: include/asm-i386/geode-mfgpt.h:44:
+#define geode_mfgpt_set_event(t,c,e) geode_mfgpt_toggle_event(t,c,e,1)
                                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#781: FILE: include/asm-i386/geode-mfgpt.h:44:
+#define geode_mfgpt_set_event(t,c,e) geode_mfgpt_toggle_event(t,c,e,1)
                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#781: FILE: include/asm-i386/geode-mfgpt.h:44:
+#define geode_mfgpt_set_event(t,c,e) geode_mfgpt_toggle_event(t,c,e,1)
                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#782: FILE: include/asm-i386/geode-mfgpt.h:45:
+#define geode_mfgpt_clear_event(t,c,e) geode_mfgpt_toggle_event(t,c,e,0)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#782: FILE: include/asm-i386/geode-mfgpt.h:45:
+#define geode_mfgpt_clear_event(t,c,e) geode_mfgpt_toggle_event(t,c,e,0)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#782: FILE: include/asm-i386/geode-mfgpt.h:45:
+#define geode_mfgpt_clear_event(t,c,e) geode_mfgpt_toggle_event(t,c,e,0)
                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#782: FILE: include/asm-i386/geode-mfgpt.h:45:
+#define geode_mfgpt_clear_event(t,c,e) geode_mfgpt_toggle_event(t,c,e,0)
                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#782: FILE: include/asm-i386/geode-mfgpt.h:45:
+#define geode_mfgpt_clear_event(t,c,e) geode_mfgpt_toggle_event(t,c,e,0)
                                                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#784: FILE: include/asm-i386/geode-mfgpt.h:47:
+extern void geode_mfgpt_set_irq(int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#784: FILE: include/asm-i386/geode-mfgpt.h:47:
+extern void geode_mfgpt_set_irq(int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#784: FILE: include/asm-i386/geode-mfgpt.h:47:
+extern void geode_mfgpt_set_irq(int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#784: FILE: include/asm-i386/geode-mfgpt.h:47:
+extern void geode_mfgpt_set_irq(int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#784: FILE: include/asm-i386/geode-mfgpt.h:47:
+extern void geode_mfgpt_set_irq(int, int, int, int);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#786: FILE: include/asm-i386/geode-mfgpt.h:49:
+#define geode_mfgpt_setup_irq(t, c, i) geode_mfgpt_set_irq(t,c,i,1)
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#786: FILE: include/asm-i386/geode-mfgpt.h:49:
+#define geode_mfgpt_setup_irq(t, c, i) geode_mfgpt_set_irq(t,c,i,1)
                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#786: FILE: include/asm-i386/geode-mfgpt.h:49:
+#define geode_mfgpt_setup_irq(t, c, i) geode_mfgpt_set_irq(t,c,i,1)
                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#787: FILE: include/asm-i386/geode-mfgpt.h:50:
+#define geode_mfgpt_release_irq(t, c, i) geode_mfgpt_set_irq(t,c,i,0)
                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#787: FILE: include/asm-i386/geode-mfgpt.h:50:
+#define geode_mfgpt_release_irq(t, c, i) geode_mfgpt_set_irq(t,c,i,0)
                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#787: FILE: include/asm-i386/geode-mfgpt.h:50:
+#define geode_mfgpt_release_irq(t, c, i) geode_mfgpt_set_irq(t,c,i,0)
                                                                   ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#789: FILE: include/asm-i386/geode-mfgpt.h:52:
+extern void geode_mfgpt_write(int, u16, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#789: FILE: include/asm-i386/geode-mfgpt.h:52:
+extern void geode_mfgpt_write(int, u16, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#789: FILE: include/asm-i386/geode-mfgpt.h:52:
+extern void geode_mfgpt_write(int, u16, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#789: FILE: include/asm-i386/geode-mfgpt.h:52:
+extern void geode_mfgpt_write(int, u16, u16);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#790: FILE: include/asm-i386/geode-mfgpt.h:53:
+extern u16 geode_mfgpt_read(int, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#790: FILE: include/asm-i386/geode-mfgpt.h:53:
+extern u16 geode_mfgpt_read(int, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#790: FILE: include/asm-i386/geode-mfgpt.h:53:
+extern u16 geode_mfgpt_read(int, u16);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#792: FILE: include/asm-i386/geode-mfgpt.h:55:
+extern int geode_mfgpt_alloc_timer(int, int, struct module *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#792: FILE: include/asm-i386/geode-mfgpt.h:55:
+extern int geode_mfgpt_alloc_timer(int, int, struct module *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#792: FILE: include/asm-i386/geode-mfgpt.h:55:
+extern int geode_mfgpt_alloc_timer(int, int, struct module *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#792: FILE: include/asm-i386/geode-mfgpt.h:55:
+extern int geode_mfgpt_alloc_timer(int, int, struct module *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000335360.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 51 errors, 66 warnings, 26 checks, 644 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000335360.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
