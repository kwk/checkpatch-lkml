WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
Here is my next iteration of fsblock. This has been sitting around for a while,

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#134: FILE: include/linux/page-flags.h:187:
+//TESTPAGEFLAG(Dirty, dirty) SETPAGEFLAG(Dirty, dirty) TESTSETFLAG(Dirty, dirty) __CLEARPAGEFLAG(Dirty, dirty)

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <Dirty>
#135: FILE: include/linux/page-flags.h:188:
+TESTPAGEFLAG(Dirty, dirty) __CLEARPAGEFLAG(Dirty, dirty)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Blocks>
#143: FILE: include/linux/page-flags.h:199:
+PAGEFLAG(Blocks, blocks)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#151: FILE: include/linux/page-flags.h:262:
+#define ClearPageDirty(page)					\
+do {								\
+	VM_BUG_ON(!PageLocked(page));				\
+	clear_bit(PG_dirty, &(page)->flags);			\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#157: FILE: include/linux/page-flags.h:268:
+#define SetPageDirty(page)					\
+do {								\
+	set_bit(PG_dirty, &(page)->flags);			\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#203: FILE: fs/fsblock.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#204: FILE: fs/fsblock.c:2:
+ * fs/fsblock.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#262: FILE: fs/fsblock.c:60:
+			snprintf(name, 32, "fsblock-data-%uKB", 1U << (i-10));
 			                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#264: FILE: fs/fsblock.c:62:
+			snprintf(name, 32, "fsblock-data-%uMB", 1U << (i-20));
 			                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: fs/fsblock.c:64:
+		block_cache[i - MIN_SECTOR_SHIFT] = kmem_cache_create(name,
+			sizeof(struct fsblock)*nr, 0,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#266: FILE: fs/fsblock.c:64:
+			sizeof(struct fsblock)*nr, 0,
 			                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#267: FILE: fs/fsblock.c:65:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_HWCACHE_ALIGN, NULL);
 			                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#267: FILE: fs/fsblock.c:65:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_HWCACHE_ALIGN, NULL);
 			                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#267: FILE: fs/fsblock.c:65:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_HWCACHE_ALIGN, NULL);
 			                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#275: FILE: fs/fsblock.c:73:
+			snprintf(name, 32, "fsblock-metadata-%uKB", 1U << (i-10));
 			                                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#277: FILE: fs/fsblock.c:75:
+			snprintf(name, 32, "fsblock-metadata-%uMB", 1U << (i-20));
 			                                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: fs/fsblock.c:77:
+		mblock_cache[i - MIN_SECTOR_SHIFT] = kmem_cache_create(name,
+			sizeof(struct fsblock_meta)*nr, 0,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#279: FILE: fs/fsblock.c:77:
+			sizeof(struct fsblock_meta)*nr, 0,
 			                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#280: FILE: fs/fsblock.c:78:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_HWCACHE_ALIGN, NULL);
 			                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#280: FILE: fs/fsblock.c:78:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_HWCACHE_ALIGN, NULL);
 			                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#280: FILE: fs/fsblock.c:78:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_HWCACHE_ALIGN, NULL);
 			                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: fs/fsblock.c:121:
+	block = kmem_cache_alloc_node(block_cache[bits - MIN_SECTOR_SHIFT],
+						gfp_flags, nid);

WARNING:LINE_SPACING: Missing a blank line after declarations
#326: FILE: fs/fsblock.c:124:
+		int i;
+		for (i = 0; i < nr; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#328: FILE: fs/fsblock.c:126:
+			struct fsblock *b = block + i;
+			init_block(page, b, bits);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: fs/fsblock.c:139:
+	mblock = kmem_cache_alloc_node(mblock_cache[bits - MIN_SECTOR_SHIFT],
+						gfp_flags, nid);

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: fs/fsblock.c:142:
+		int i;
+		for (i = 0; i < nr; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#346: FILE: fs/fsblock.c:144:
+			struct fsblock_meta *mb = mblock + i;
+			init_mblock(page, mb, bits);

WARNING:LINE_SPACING: Missing a blank line after declarations
#357: FILE: fs/fsblock.c:155:
+		struct fsblock *b;
+		block = page_blocks(block->page);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#362: FILE: fs/fsblock.c:160:
+			if (b->flags & (BL_dirty|BL_writeback))
 			                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#371: FILE: fs/fsblock.c:169:
+	if (block->flags & (BL_dirty|BL_writeback))
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: fs/fsblock.c:190:
+		FSB_BUG_ON(page->index != first_page_idx(page->index,
+							fsblock_size(block)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: fs/fsblock.c:200:
+		struct fsblock *b;
+		block = page_blocks(block->page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#434: FILE: fs/fsblock.c:232:
+		struct fsblock_meta *mblock = block_mblock(block);
+		vmap_count = mblock->vmap_count;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#437: FILE: fs/fsblock.c:235:
+	if ((flags & badflags) || ((flags & goodflags) != goodflags) || count != 0 || private || vmap_count) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#438: FILE: fs/fsblock.c:236:
+		printk("block flags = %x\n", flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#439: FILE: fs/fsblock.c:237:
+		printk("block size  = %u\n", size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#440: FILE: fs/fsblock.c:238:
+		printk("block count = %u\n", count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#441: FILE: fs/fsblock.c:239:
+		printk("block private = %p\n", private);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#442: FILE: fs/fsblock.c:240:
+		printk("vmap count  = %u\n", vmap_count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#462: FILE: fs/fsblock.c:260:
+			struct fsblock *b;
+			if (block->flags & BL_metadata)

WARNING:LINE_SPACING: Missing a blank line after declarations
#473: FILE: fs/fsblock.c:271:
+			struct fsblock_meta *mblock = block_mblock(block);
+			invalidate_vmap_cache(mblock);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#481: FILE: fs/fsblock.c:279:
+	if (block->flags & BL_metadata) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#500: FILE: fs/fsblock.c:298:
+		printk("__block_get probable leak\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__block_get', this function's name, in a string
#500: FILE: fs/fsblock.c:298:
+		printk("__block_get probable leak\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#509: FILE: fs/fsblock.c:307:
+	unsigned long flags;
+	spin_lock_block_irqsave(block, flags);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#531: FILE: fs/fsblock.c:329:
+}
+static void __block_put(struct fsblock *block)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#558: FILE: fs/fsblock.c:356:
+	if (block->flags & (BL_dirty|BL_writeback|BL_locked))
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#558: FILE: fs/fsblock.c:356:
+	if (block->flags & (BL_dirty|BL_writeback|BL_locked))
 	                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: fs/fsblock.c:408:
+		wait_on_bit(&block->flags, BL_locked_bit, sleep_on_block,
+							TASK_UNINTERRUPTIBLE);

WARNING:MEMORY_BARRIER: memory barrier without comment
#623: FILE: fs/fsblock.c:421:
+	smp_mb();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#626: FILE: fs/fsblock.c:424:
+	 * operations under block spinlock */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#637: FILE: fs/fsblock.c:435:
+		wait_on_bit(&block->flags, BL_locked_bit, sleep_on_block,
+							TASK_UNINTERRUPTIBLE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#649: FILE: fs/fsblock.c:447:
+		struct page *page = block->page, *p;
+		for_each_page(page, fsblock_size(block), p) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#667: FILE: fs/fsblock.c:465:
+	smp_mb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: fs/fsblock.c:477:
+		wait_on_bit(&block->flags, BL_sync_io_bit, sleep_on_block,
+							TASK_UNINTERRUPTIBLE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#685: FILE: fs/fsblock.c:483:
+	struct page *page, *p;
+	might_sleep();

CHECK:BRACES: braces {} should be used on all arms of this statement
#688: FILE: fs/fsblock.c:486:
+	if (!fsblock_superpage(block))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#690: FILE: fs/fsblock.c:488:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#702: FILE: fs/fsblock.c:500:
+	if (!fsblock_superpage(block))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#704: FILE: fs/fsblock.c:502:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#714: FILE: fs/fsblock.c:512:
+	struct page *page, *p;
+	might_sleep();

CHECK:BRACES: braces {} should be used on all arms of this statement
#717: FILE: fs/fsblock.c:515:
+	if (!fsblock_superpage(block))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#719: FILE: fs/fsblock.c:517:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#749: FILE: fs/fsblock.c:547:
+	if (!fsblock_superpage(block))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#751: FILE: fs/fsblock.c:549:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#761: FILE: fs/fsblock.c:559:
+	struct page *page, *p;
+	might_sleep();

CHECK:BRACES: braces {} should be used on all arms of this statement
#764: FILE: fs/fsblock.c:562:
+	if (!fsblock_superpage(block))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#766: FILE: fs/fsblock.c:564:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#776: FILE: fs/fsblock.c:574:
+	struct inode *inode = mapping->host;
+	if (unlikely(S_ISBLK(inode->i_mode)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: fs/fsblock.c:585:
+	FSB_BUG_ON(warn && (!fsblock_subpage(page_blocks(page)) &&
+				!PageUptodate(page)));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#885: FILE: fs/fsblock.c:683:
+	for (i = 0; i < vc_size && vc_size > VC_MAX_ENTRIES-VC_PRUNE_BATCH; i++) {
 	                                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#924: FILE: fs/fsblock.c:722:
+		struct vmap_cache_entry *vce;
+		FSB_BUG_ON(nr == 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#949: FILE: fs/fsblock.c:747:
+		unsigned int page_offset = 0;
+		if (fsblock_subpage(block))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#957: FILE: fs/fsblock.c:755:
+		return kmap(block->page) + page_offset + off;
+	} else {

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#985: FILE: fs/fsblock.c:783:
+		FSB_BUG_ON(pgoff != block->block_nr * (size >> PAGE_CACHE_SHIFT)); /* because it is metadata */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*vce)...) over kmalloc(sizeof(struct vmap_cache_entry)...)
#1018: FILE: fs/fsblock.c:816:
+		vce = kmalloc(sizeof(struct vmap_cache_entry), GFP_NOFS);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#1082: FILE: fs/fsblock.c:880:
+	if (!fsblock_superpage(block))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1084: FILE: fs/fsblock.c:882:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1092: FILE: fs/fsblock.c:890:
+			if (!(block->flags & BL_vmapped) ||
+					vaddr - off != mblock->vce->vmap) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1120: FILE: fs/fsblock.c:918:
+			vm_unmap_ram(vaddr - pos, (len + (PAGE_CACHE_SIZE - 1)) >> PAGE_CACHE_SHIFT);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1153: FILE: fs/fsblock.c:951:
+			if (unlikely(!(block->flags & (BL_mapped|BL_hole)) &&
 			                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1154: FILE: fs/fsblock.c:952:
+			if (unlikely(!(block->flags & (BL_mapped|BL_hole)) &&
+								mapped)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1195: FILE: fs/fsblock.c:993:
+		unsigned int size = fsblock_size(block);
+		if (!size_is_superpage(size)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1197: FILE: fs/fsblock.c:995:
+			struct fsblock_meta *mblock = block_mblock(block);
+			if (!PageHighMem(page))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1216: FILE: fs/fsblock.c:1014:
+int create_unmapped_blocks(struct page *page, gfp_t gfp_flags, unsigned int size, unsigned int flags)

WARNING:TYPO_SPELLING: 'funcions' may be misspelled - perhaps 'functions'?
#1228: FILE: fs/fsblock.c:1026:
+	 * XXX: maybe use private alloc funcions so fses can embed block into
 	                                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1238: FILE: fs/fsblock.c:1036:
+		struct fsblock_meta *mblock;
+		mblock = alloc_mblocks(page, bits, gfp_flags);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1245: FILE: fs/fsblock.c:1043:
+		if (fsblock_subpage(block)) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1248: FILE: fs/fsblock.c:1046:
+			unsigned int offset = 0;
+			__for_each_block_unattached(block, size, b) {

CHECK:BRACES: Unbalanced braces around else statement
#1252: FILE: fs/fsblock.c:1050:
+		} else

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1265: FILE: fs/fsblock.c:1063:
+		int uptodate = 1;
 		    ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1266: FILE: fs/fsblock.c:1064:
+		int uptodate = 1;
+		FSB_BUG_ON(page->index != first_page_idx(page->index, size));

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1270: FILE: fs/fsblock.c:1068:
+				uptodate = 0;
 				^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1272: FILE: fs/fsblock.c:1070:
+		if (uptodate)
 		    ^^^^^^^^

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1287: FILE: fs/fsblock.c:1085:
+static int create_unmapped_blocks_oneref(struct page *page, gfp_t gfp_flags, unsigned int size, unsigned int flags)

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#1311: FILE: fs/fsblock.c:1109:
+static int lock_or_create_first_block(struct page *page, struct fsblock **block, gfp_t gfp_flags, unsigned int size, unsigned int flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1321: FILE: fs/fsblock.c:1119:
+		int ret;
+		ret = create_unmapped_blocks_oneref(page, GFP_NOFS, size, 0);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1324: FILE: fs/fsblock.c:1122:
+			return ret;
+		else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1332: FILE: fs/fsblock.c:1130:
+static struct page *create_lock_page_range(struct address_space *mapping,
+				pgoff_t pgoff, unsigned int size)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1390: FILE: fs/fsblock.c:1188:
+struct fsblock_meta *find_or_create_mblock(struct fsblock_sb *fsb_sb, sector_t blocknr, unsigned int size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1436: FILE: fs/fsblock.c:1234:
+		sector_t base_block;
+		base_block = pgoff << (PAGE_CACHE_SHIFT - fsb_sb->blkbits);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1440: FILE: fs/fsblock.c:1238:
+			if (mb->block.block_nr == blocknr) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1443: FILE: fs/fsblock.c:1241:
+			} else

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1460: FILE: fs/fsblock.c:1258:
+static void block_end_read(struct fsblock *block, int uptodate)
                                                       ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1477: FILE: fs/fsblock.c:1275:
+	if (unlikely(!uptodate)) {
 	              ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1477: FILE: fs/fsblock.c:1275:
+	if (unlikely(!uptodate)) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1479: FILE: fs/fsblock.c:1277:
+		if (!fsblock_superpage(block))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1481: FILE: fs/fsblock.c:1279:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1483: FILE: fs/fsblock.c:1281:
+			struct page *p;
+			for_each_page(page, size, p) {

CHECK:BRACES: Unbalanced braces around else statement
#1487: FILE: fs/fsblock.c:1285:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1490: FILE: fs/fsblock.c:1288:
+	if (fsblock_subpage(block)) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1497: FILE: fs/fsblock.c:1295:
+				uptodate = 0;
 				^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1501: FILE: fs/fsblock.c:1299:
+				uptodate = 0;
 				^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1503: FILE: fs/fsblock.c:1301:
+	} else

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1511: FILE: fs/fsblock.c:1309:
+		if (uptodate)
 		    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1521: FILE: fs/fsblock.c:1319:
+			if (uptodate)
 			    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1544: FILE: fs/fsblock.c:1342:
+static void block_end_write(struct fsblock *block, int uptodate)
                                                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1561: FILE: fs/fsblock.c:1359:
+	if (unlikely(!uptodate)) {
 	              ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1563: FILE: fs/fsblock.c:1361:
+		if (!fsblock_superpage(block))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1565: FILE: fs/fsblock.c:1363:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1567: FILE: fs/fsblock.c:1365:
+			struct page *p;
+			for_each_page(page, size, p) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1575: FILE: fs/fsblock.c:1373:
+	if (fsblock_subpage(block)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1585: FILE: fs/fsblock.c:1383:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1594: FILE: fs/fsblock.c:1392:
+				struct page *p;
+				for_each_page(page, size, p) {

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1610: FILE: fs/fsblock.c:1408:
+void fsblock_end_io(struct fsblock *block, int uptodate)
                                                ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1613: FILE: fs/fsblock.c:1411:
+		block_end_read(block, uptodate);
 		                      ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1615: FILE: fs/fsblock.c:1413:
+		block_end_write(block, uptodate);
 		                       ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1622: FILE: fs/fsblock.c:1420:
+	int uptodate;
 	    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1624: FILE: fs/fsblock.c:1422:
+	uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1626: FILE: fs/fsblock.c:1424:
+		printk(KERN_WARNING "block_end_bio_io: op not supported!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'block_end_bio_io', this function's name, in a string
#1626: FILE: fs/fsblock.c:1424:
+		printk(KERN_WARNING "block_end_bio_io: op not supported!\n");

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1627: FILE: fs/fsblock.c:1425:
+		WARN_ON(uptodate);
 		        ^^^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1630: FILE: fs/fsblock.c:1428:
+	FSB_BUG_ON((block->flags & (BL_readin|BL_writeback)) == (BL_readin|BL_writeback));
 	                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1630: FILE: fs/fsblock.c:1428:
+	FSB_BUG_ON((block->flags & (BL_readin|BL_writeback)) == (BL_readin|BL_writeback));
 	                                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1631: FILE: fs/fsblock.c:1429:
+	FSB_BUG_ON((block->flags & (BL_readin|BL_writeback)) == 0);
 	                                     ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1633: FILE: fs/fsblock.c:1431:
+	fsblock_end_io(block, uptodate);
 	                      ^^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1646: FILE: fs/fsblock.c:1444:
+	int nr = (size + PAGE_CACHE_SIZE-1) >> PAGE_CACHE_SHIFT;
 	                                ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1654: FILE: fs/fsblock.c:1452:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1655: FILE: fs/fsblock.c:1453:
+	printk("submit_block for %s [blocknr=%lu, sector=%lu, size=%u] inode->i_blkbits=%d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'submit_block', this function's name, in a string
#1655: FILE: fs/fsblock.c:1453:
+	printk("submit_block for %s [blocknr=%lu, sector=%lu, size=%u] inode->i_blkbits=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1656: FILE: fs/fsblock.c:1454:
+	printk("submit_block for %s [blocknr=%lu, sector=%lu, size=%u] inode->i_blkbits=%d\n",
+		(block->flags & BL_readin ? "read" : "write"),

WARNING:LINE_SPACING: Missing a blank line after declarations
#1730: FILE: fs/fsblock.c:1528:
+		struct fsblock *b;
+		for_each_block(page_blocks(page), b) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1742: FILE: fs/fsblock.c:1540:
+		struct page *p;
+		for_each_page(page, fsblock_size(block), p) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1785: FILE: fs/fsblock.c:1583:
+	int ret = 0;
+	iolock_block(block);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1828: FILE: fs/fsblock.c:1626:
+		struct page *p;
+		for_each_page(page, fsblock_size(block), p) {

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1835: FILE: fs/fsblock.c:1633:
+		int uptodate = 1;
 		    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1841: FILE: fs/fsblock.c:1639:
+				uptodate = 0;
 				^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1846: FILE: fs/fsblock.c:1644:
+		if (uptodate)
 		    ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1860: FILE: fs/fsblock.c:1658:
+	FSB_BUG_ON(!fsblock_superpage(block) &&
+		!(block->flags & BL_uptodate));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1876: FILE: fs/fsblock.c:1674:
+		struct page *p;
+		for_each_page(page, fsblock_size(block), p) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1916: FILE: fs/fsblock.c:1714:
+			mba = list_entry(mba->blist.next,struct mb_assoc,blist);
 			                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1916: FILE: fs/fsblock.c:1714:
+			mba = list_entry(mba->blist.next,struct mb_assoc,blist);
 			                                                ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mba)...) over kmalloc(sizeof(struct mb_assoc)...)
#1919: FILE: fs/fsblock.c:1717:
+	mba = kmalloc(sizeof(struct mb_assoc), GFP_ATOMIC);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1967: FILE: fs/fsblock.c:1765:
+				block->private = list_entry(mba->blist.next, struct mb_assoc, blist);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2019: FILE: fs/fsblock.c:1817:
+			struct fsblock *block = mblock_block(mba->mblock);
+			if (block->flags & BL_dirty) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2043: FILE: fs/fsblock.c:1841:
+				block->private = list_entry(mba->blist.next, struct mb_assoc, blist);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2049: FILE: fs/fsblock.c:1847:
+		if (free) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2052: FILE: fs/fsblock.c:1850:
+		} else

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2060: FILE: fs/fsblock.c:1858:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <XXXbd_inode>
#2073: FILE: fs/fsblock.c:1871:
+	meta_block = __find_get_block(bdev->XXXbd_inode->i_mapping, blocknr, 1);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2080: FILE: fs/fsblock.c:1878:
+		 * the block uptodate. Probably not worthwhile.
 		             ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2127: FILE: fs/fsblock.c:1925:
+		FSB_BUG_ON(!fsblock_subpage(block) &&
+				PageWriteback(block->page));

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2138: FILE: fs/fsblock.c:1936:
+			FSB_BUG_ON(fsblock_size(block) >= PAGE_CACHE_SIZE && !PageUptodate(block->page));

CHECK:BRACES: braces {} should be used on all arms of this statement
#2152: FILE: fs/fsblock.c:1950:
+	if (!IS_ERR(mblock)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2160: FILE: fs/fsblock.c:1958:
+	} else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2213: FILE: fs/fsblock.c:2011:
+		if (!(block->flags & (BL_mapped|BL_hole))) {
 		                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2215: FILE: fs/fsblock.c:2013:
+			loff_t off;
+			spin_unlock_block_irq(block);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2222: FILE: fs/fsblock.c:2020:
+			FSB_BUG_ON((block->flags & (BL_hole|BL_mapped)) ==
 			                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2223: FILE: fs/fsblock.c:2021:
+							(BL_hole|BL_mapped));
 							        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2276: FILE: fs/fsblock.c:2074:
+		unsigned int offset = block_page_offset(block, size);
+		zero_user(page, offset, size);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2303: FILE: fs/fsblock.c:2101:
+	if (size_is_superpage(size)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2311: FILE: fs/fsblock.c:2109:
+	} else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2326: FILE: fs/fsblock.c:2124:
+			if (!(b->flags & (BL_mapped|BL_hole))) {
 			                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2333: FILE: fs/fsblock.c:2131:
+				FSB_BUG_ON((b->flags & (BL_hole|BL_mapped)) ==
 				                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2334: FILE: fs/fsblock.c:2132:
+							(BL_hole|BL_mapped));
 							        ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2367: FILE: fs/fsblock.c:2165:
+	} else if (fsblock_midpage(block)) {
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2368: FILE: fs/fsblock.c:2166:
+		if (!(block->flags & (BL_mapped|BL_hole))) {
 		                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2375: FILE: fs/fsblock.c:2173:
+			FSB_BUG_ON((block->flags & (BL_hole|BL_mapped)) ==
 			                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2376: FILE: fs/fsblock.c:2174:
+							(BL_hole|BL_mapped));
 							        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2398: FILE: fs/fsblock.c:2196:
+		if (!(block->flags & (BL_mapped|BL_hole))) {
 		                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2404: FILE: fs/fsblock.c:2202:
+			FSB_BUG_ON((block->flags & (BL_hole|BL_mapped)) ==
 			                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2405: FILE: fs/fsblock.c:2203:
+							(BL_hole|BL_mapped));
 							        ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2445: FILE: fs/fsblock.c:2243:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2467: FILE: fs/fsblock.c:2265:
+int fsblock_write_page(struct page *page, map_block_fn *map_block,
+				struct writeback_control *wbc)

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#2532: FILE: fs/fsblock.c:2330:
+				/* mmaped block can be dirtied here */
 				   ^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2535: FILE: fs/fsblock.c:2333:
+			if ((b->flags & (BL_delay|BL_dirty))
 			                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2536: FILE: fs/fsblock.c:2334:
+					== (BL_delay|BL_dirty)) {
 					            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2543: FILE: fs/fsblock.c:2341:
+				FSB_BUG_ON((b->flags & (BL_hole|BL_mapped)) ==
 				                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2544: FILE: fs/fsblock.c:2342:
+							(BL_hole|BL_mapped));
 							        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2559: FILE: fs/fsblock.c:2357:
+                for_each_block(block, b) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2559: FILE: fs/fsblock.c:2357:
+                for_each_block(block, b) {$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2575: FILE: fs/fsblock.c:2373:
+			BUG_ON((b->flags & (BL_dirty|BL_mapped)) == BL_dirty);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2575: FILE: fs/fsblock.c:2373:
+			BUG_ON((b->flags & (BL_dirty|BL_mapped)) == BL_dirty);
 			                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2610: FILE: fs/fsblock.c:2408:
+		if ((block->flags & (BL_delay|BL_dirty))
 		                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2611: FILE: fs/fsblock.c:2409:
+				== (BL_delay|BL_dirty)) {
 				            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2615: FILE: fs/fsblock.c:2413:
+			FSB_BUG_ON((block->flags & (BL_hole|BL_mapped)) ==
 			                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2616: FILE: fs/fsblock.c:2414:
+							(BL_hole|BL_mapped));
 							        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2690: FILE: fs/fsblock.c:2488:
+static void page_zero_new_block(struct page *page, struct fsblock *block,
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2690: FILE: fs/fsblock.c:2488:
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2690: FILE: fs/fsblock.c:2488:
+			unsigned from, unsigned to)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2696: FILE: fs/fsblock.c:2494:
+			unsigned int offset = block_page_offset(block, size);
+			offset = max(from, offset);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2709: FILE: fs/fsblock.c:2507:
+		/* XXX: set page uptodate if blocks are brought uptodate? */
 		                 ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2709: FILE: fs/fsblock.c:2507:
+		/* XXX: set page uptodate if blocks are brought uptodate? */
 		                                                ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2714: FILE: fs/fsblock.c:2512:
+ * If a page has any new buffers, zero them out here, and mark them uptodate
                                                                     ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2719: FILE: fs/fsblock.c:2517:
+static void page_zero_new_blocks(struct page *page, struct fsblock *block,
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2719: FILE: fs/fsblock.c:2517:
+			unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2719: FILE: fs/fsblock.c:2517:
+			unsigned from, unsigned to)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2737: FILE: fs/fsblock.c:2535:
+static int block_dirty_helper(struct page *page, struct fsblock *block,
+					unsigned size, unsigned offset,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2737: FILE: fs/fsblock.c:2535:
+					unsigned size, unsigned offset,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2737: FILE: fs/fsblock.c:2535:
+					unsigned size, unsigned offset,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2738: FILE: fs/fsblock.c:2536:
+					unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2738: FILE: fs/fsblock.c:2536:
+					unsigned from, unsigned to)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2751: FILE: fs/fsblock.c:2549:
+			if (to < offset+size)
 			               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2752: FILE: fs/fsblock.c:2550:
+				zero_user(page, to, offset+size - to);
 				                          ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2753: FILE: fs/fsblock.c:2551:
+			return 0; /* not brought uptodate */
 			                         ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2761: FILE: fs/fsblock.c:2559:
+		 * don't warn because we set page uptodate afterwards
 		                                  ^^^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2766: FILE: fs/fsblock.c:2564:
+	} else if (block->flags & (BL_uptodate|BL_delay|BL_unwritten)) {
 	                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2766: FILE: fs/fsblock.c:2564:
+	} else if (block->flags & (BL_uptodate|BL_delay|BL_unwritten)) {
 	                                               ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2768: FILE: fs/fsblock.c:2566:
+		return 0;
+	} else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2769: FILE: fs/fsblock.c:2567:
+		if (from <= offset && to >= offset+size)
 		                                  ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2770: FILE: fs/fsblock.c:2568:
+			return 0; /* not brought uptodate */
 			                         ^^^^^^^^

WARNING:LONG_LINE: line length of 207 exceeds 100 columns
#2775: FILE: fs/fsblock.c:2573:
+static int fsblock_write_begin_super(struct file *file, struct address_space *mapping, unsigned int size, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata, map_block_fn map_block)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2775: FILE: fs/fsblock.c:2573:
+static int fsblock_write_begin_super(struct file *file, struct address_space *mapping, unsigned int size, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata, map_block_fn map_block)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2775: FILE: fs/fsblock.c:2573:
+static int fsblock_write_begin_super(struct file *file, struct address_space *mapping, unsigned int size, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata, map_block_fn map_block)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2800: FILE: fs/fsblock.c:2598:
+		ret = map_block(mapping, block, pos & ~(size-1), MAP_BLOCK_RESERVE);
 		                                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2804: FILE: fs/fsblock.c:2602:
+		FSB_BUG_ON((block->flags & (BL_hole|BL_mapped)) ==
 		                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2805: FILE: fs/fsblock.c:2603:
+							(BL_hole|BL_mapped));
 							        ^

WARNING:LONG_LINE: line length of 175 exceeds 100 columns
#2855: FILE: fs/fsblock.c:2653:
+int fsblock_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata, map_block_fn map_block)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2855: FILE: fs/fsblock.c:2653:
+int fsblock_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata, map_block_fn map_block)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2855: FILE: fs/fsblock.c:2653:
+int fsblock_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata, map_block_fn map_block)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#2869: FILE: fs/fsblock.c:2667:
+		return fsblock_write_begin_super(file, mapping, size, pos, len, flags, pagep, fsdata, map_block);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#2873: FILE: fs/fsblock.c:2671:
+	if (page == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2895: FILE: fs/fsblock.c:2693:
+		unsigned off;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2903: FILE: fs/fsblock.c:2701:
+					ret = map_block(mapping, b, pos+off, MAP_BLOCK_RESERVE);
 					                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2906: FILE: fs/fsblock.c:2704:
+					FSB_BUG_ON((b->flags & (BL_hole|BL_mapped)) ==
 					                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2907: FILE: fs/fsblock.c:2705:
+							(BL_hole|BL_mapped));
 							        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2911: FILE: fs/fsblock.c:2709:
+				if (block_dirty_helper(page, b, size, off,
[...]
+				} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2912: FILE: fs/fsblock.c:2710:
+				if (block_dirty_helper(page, b, size, off,
+								from, to)) {

CHECK:BRACES: Unbalanced braces around else statement
#2923: FILE: fs/fsblock.c:2721:
+				} else

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2929: FILE: fs/fsblock.c:2727:
+#if 0

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2956: FILE: fs/fsblock.c:2754:
+			FSB_BUG_ON((block->flags & (BL_hole|BL_mapped)) ==
 			                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2957: FILE: fs/fsblock.c:2755:
+							(BL_hole|BL_mapped));
 							        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2960: FILE: fs/fsblock.c:2758:
+		if (block_dirty_helper(page, block, PAGE_CACHE_SIZE, 0, from, to)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2964: FILE: fs/fsblock.c:2762:
+		} else

WARNING:LONG_LINE: line length of 172 exceeds 100 columns
#2996: FILE: fs/fsblock.c:2794:
+static void __fsblock_write_end_super(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *orig_page, void *fsdata, struct fsblock *block)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2996: FILE: fs/fsblock.c:2794:
+static void __fsblock_write_end_super(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *orig_page, void *fsdata, struct fsblock *block)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2996: FILE: fs/fsblock.c:2794:
+static void __fsblock_write_end_super(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *orig_page, void *fsdata, struct fsblock *block)

WARNING:LONG_LINE: line length of 165 exceeds 100 columns
#3017: FILE: fs/fsblock.c:2815:
+static void __fsblock_write_end_sub(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata, struct fsblock *block)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3017: FILE: fs/fsblock.c:2815:
+static void __fsblock_write_end_sub(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata, struct fsblock *block)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3017: FILE: fs/fsblock.c:2815:
+static void __fsblock_write_end_sub(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata, struct fsblock *block)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#3024: FILE: fs/fsblock.c:2822:
+	int uptodate = 1;
 	    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#3038: FILE: fs/fsblock.c:2836:
+				uptodate = 0;
 				^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3043: FILE: fs/fsblock.c:2841:
+
+	}

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#3044: FILE: fs/fsblock.c:2842:
+	if (uptodate)
 	    ^^^^^^^^

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#3049: FILE: fs/fsblock.c:2847:
+int __fsblock_write_end(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3049: FILE: fs/fsblock.c:2847:
+int __fsblock_write_end(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3049: FILE: fs/fsblock.c:2847:
+int __fsblock_write_end(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3067: FILE: fs/fsblock.c:2865:
+		unsigned start = pos & (PAGE_CACHE_SIZE - 1);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#3068: FILE: fs/fsblock.c:2866:
+		/* XXX: handle superpages (already handled via bringing pages uptodate?) */
 		                                                              ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#3070: FILE: fs/fsblock.c:2868:
+		 * The buffers that were written will now be uptodate, so we
 		                                             ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#3074: FILE: fs/fsblock.c:2872:
+		 * will not be marked uptodate, so a readpage might come in and
 		                      ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#3078: FILE: fs/fsblock.c:2876:
+		 * non uptodate page as a zero-length write, and force the
 		       ^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3083: FILE: fs/fsblock.c:2881:
+		page_zero_new_blocks(page, block, start+copied, start+len);
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3083: FILE: fs/fsblock.c:2881:
+		page_zero_new_blocks(page, block, start+copied, start+len);
 		                                                     ^

WARNING:LONG_LINE: line length of 147 exceeds 100 columns
#3115: FILE: fs/fsblock.c:2913:
+int fsblock_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3115: FILE: fs/fsblock.c:2913:
+int fsblock_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3115: FILE: fs/fsblock.c:2913:
+int fsblock_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata)

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3130: FILE: fs/fsblock.c:2928:
+		if (pos+copied > inode->i_size) { /* XXX: real copied can be made 0 if !pageuptodate */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3130: FILE: fs/fsblock.c:2928:
+		if (pos+copied > inode->i_size) { /* XXX: real copied can be made 0 if !pageuptodate */
 		       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3135: FILE: fs/fsblock.c:2933:
+			i_size_write(inode, pos+copied);
 			                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#3142: FILE: fs/fsblock.c:2940:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3142: FILE: fs/fsblock.c:2940:
+        return ret;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3144: FILE: fs/fsblock.c:2942:
+
+}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3155: FILE: fs/fsblock.c:2953:
+	unsigned len;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3167: FILE: fs/fsblock.c:2965:
+	eoff = min_t(loff_t, isize, off+PAGE_CACHE_SIZE);
 	                               ^

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#3172: FILE: fs/fsblock.c:2970:
+	ret = fsblock_write_begin(NULL, mapping, off, len, AOP_FLAG_UNINTERRUPTIBLE, &page, &fsdata, map_block);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3193: FILE: fs/fsblock.c:2991:
+	unsigned offset;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3204: FILE: fs/fsblock.c:3002:
+	offset = from & (PAGE_CACHE_SIZE-1);
 	                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3205: FILE: fs/fsblock.c:3003:
+	nr_pages = ((size - length + PAGE_CACHE_SIZE-1) >> PAGE_CACHE_SHIFT);
 	                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3229: FILE: fs/fsblock.c:3027:
+		from = (from + PAGE_CACHE_SIZE-1) & ~(PAGE_CACHE_SIZE-1);
 		                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3229: FILE: fs/fsblock.c:3027:
+		from = (from + PAGE_CACHE_SIZE-1) & ~(PAGE_CACHE_SIZE-1);
 		                                                     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3238: FILE: fs/fsblock.c:3036:
+	unsigned offset;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3239: FILE: fs/fsblock.c:3037:
+	unsigned zero;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3255: FILE: fs/fsblock.c:3053:
+	offset = from & (PAGE_CACHE_SIZE-1);
 	                                ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#3257: FILE: fs/fsblock.c:3055:
+	err = a_ops->write_begin(NULL, mapping, from, zero, AOP_FLAG_UNINTERRUPTIBLE, &page, &fsdata);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3273: FILE: fs/fsblock.c:3071:
+#if 0 // YYY: last partial page mmaps can trigger this

WARNING:LINE_SPACING: Missing a blank line after declarations
#3278: FILE: fs/fsblock.c:3076:
+		loff_t off = page_offset(page);
+		for_each_block(block, b) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3280: FILE: fs/fsblock.c:3078:
+			FSB_BUG_ON((b->flags & BL_dirty) &&
+				((from + size - 1) & ~(size - 1)) < off+size);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3280: FILE: fs/fsblock.c:3078:
+				((from + size - 1) & ~(size - 1)) < off+size);
 				                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3297: FILE: fs/fsblock.c:3095:
+		!(block->flags & (BL_dirty|BL_writeback|BL_locked)) &&
 		                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3297: FILE: fs/fsblock.c:3095:
+		!(block->flags & (BL_dirty|BL_writeback|BL_locked)) &&
 		                                       ^

WARNING:LONG_LINE_COMMENT: line length of 127 exceeds 100 columns
#3319: FILE: fs/fsblock.c:3117:
+		clear_page_blocks(p); /* XXX: will go bug after first page clears lock bit! unlock first page on last clear. */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3344: FILE: fs/fsblock.c:3142:
+		if (block->flags & (BL_dirty|BL_writeback|BL_locked))
 		                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3344: FILE: fs/fsblock.c:3142:
+		if (block->flags & (BL_dirty|BL_writeback|BL_locked))
 		                                         ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3395: FILE: fs/fsblock.c:3193:
+#if 0

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#3409: FILE: fs/fsblock.c:3207:
+	/* Don't clear uptodate because if the block essentially turns into a hole and remains uptodate */
 	               ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#3409: FILE: fs/fsblock.c:3207:
+	/* Don't clear uptodate because if the block essentially turns into a hole and remains uptodate */
 	                                                                                       ^^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3409: FILE: fs/fsblock.c:3207:
+	/* Don't clear uptodate because if the block essentially turns into a hole and remains uptodate */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3410: FILE: fs/fsblock.c:3208:
+	block->flags &= ~(BL_mapped|BL_hole|BL_delay|BL_unwritten);
 	                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3410: FILE: fs/fsblock.c:3208:
+	block->flags &= ~(BL_mapped|BL_hole|BL_delay|BL_unwritten);
 	                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3410: FILE: fs/fsblock.c:3208:
+	block->flags &= ~(BL_mapped|BL_hole|BL_delay|BL_unwritten);
 	                                            ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3412: FILE: fs/fsblock.c:3210:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3452: FILE: fs/fsblock.c:3250:
+#if 0

WARNING:INDENTED_LABEL: labels should not be indented
#3453: FILE: fs/fsblock.c:3251:
+			XXX: generic code should not do it for us

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3492: FILE: fs/fsblock.c:3290:
+#if 0 // XXX

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#3495: FILE: fs/fsblock.c:3293:
+			msleep(1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3498: FILE: fs/fsblock.c:3296:
+				printk("block=%p could not be freed\n", block);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#3499: FILE: fs/fsblock.c:3297:
+				printk("block->count=%d flags=%x private=%p\n", block->count, block->flags, block->private);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3499: FILE: fs/fsblock.c:3297:
+				printk("block->count=%d flags=%x private=%p\n", block->count, block->flags, block->private);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#3513: FILE: fs/fsblock.c:3311:
+			msleep(1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3516: FILE: fs/fsblock.c:3314:
+				printk("block=%p could not be freed\n", block);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#3517: FILE: fs/fsblock.c:3315:
+				printk("block->count=%d flags=%x private=%p\n", block->count, block->flags, block->private);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3517: FILE: fs/fsblock.c:3315:
+				printk("block->count=%d flags=%x private=%p\n", block->count, block->flags, block->private);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#3530: FILE: fs/fsblock.c:3328:
+static struct vm_operations_struct fsblock_file_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#3551: FILE: fs/fsblock.c:3349:
+	spinlock_t lock;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3578: FILE: fs/fsblock.c:3376:
+			printk("bdflush wrote %lu\n", nr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3586: FILE: fs/fsblock.c:3384:
+				if (block->block_nr <= last_block_nr)
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3588: FILE: fs/fsblock.c:3386:
+				else {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3597: FILE: fs/fsblock.c:3395:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3606: FILE: fs/fsblock.c:3404:
+					printk("bdflush wrote %lu\n", nr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3642: FILE: fs/fsblock.c:3440:
+			struct page *p;
+			for_each_page(page, fsblock_size(block), p) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3657: FILE: fs/fsblock.c:3455:
+			printk("bdflush wrote %lu [congested]\n", nr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3668: FILE: fs/fsblock.c:3466:
+	printk("bdflush wrote %lu\n", nr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3682: FILE: fs/fsblock.c:3480:
+	printk("bdflush\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bdflush', this function's name, in a string
#3682: FILE: fs/fsblock.c:3480:
+	printk("bdflush\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3684: FILE: fs/fsblock.c:3482:
+		printk("bdflush could not acquire bdi\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bdflush', this function's name, in a string
#3684: FILE: fs/fsblock.c:3482:
+		printk("bdflush could not acquire bdi\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3688: FILE: fs/fsblock.c:3486:
+	printk("bdflush starting\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bdflush', this function's name, in a string
#3688: FILE: fs/fsblock.c:3486:
+	printk("bdflush starting\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#3690: FILE: fs/fsblock.c:3488:
+		if (!fbd->nr_dirty) {
[...]
+		} else
[...]

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3693: FILE: fs/fsblock.c:3491:
+				schedule_timeout(30*HZ);
 				                   ^

CHECK:BRACES: Unbalanced braces around else statement
#3694: FILE: fs/fsblock.c:3492:
+		} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3697: FILE: fs/fsblock.c:3495:
+	printk("bdflush finished\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bdflush', this function's name, in a string
#3697: FILE: fs/fsblock.c:3495:
+	printk("bdflush finished\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#3707: FILE: fs/fsblock.c:3505:
+	struct fsblock_bd *fbd;
+	might_sleep();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3724: FILE: fs/fsblock.c:3522:
+		printk("could not register fsblock bdev. something already at private\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fbd)...) over kmalloc(sizeof(struct fsblock_bd)...)
#3728: FILE: fs/fsblock.c:3526:
+	fbd = kmalloc(sizeof(struct fsblock_bd), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3737: FILE: fs/fsblock.c:3535:
+		int err = PTR_ERR(fbd->bdflush);
+		kfree(fbd);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3773: FILE: fs/fsblock.c:3571:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#3785: FILE: fs/fsblock.c:3583:
+	while (*p != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3791: FILE: fs/fsblock.c:3589:
+		if (block_nr < tmp->block_nr)
[...]
+		else if (block_nr > tmp->block_nr)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3795: FILE: fs/fsblock.c:3593:
+		else {

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#3797: FILE: fs/fsblock.c:3595:
+			printk("dirty block discarded block_nr=%llx mapping=%p\n", (unsigned long long)block_nr, mapping);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3797: FILE: fs/fsblock.c:3595:
+			printk("dirty block discarded block_nr=%llx mapping=%p\n", (unsigned long long)block_nr, mapping);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#3822: FILE: fs/fsblock.c:3620:
+	while (*p != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3828: FILE: fs/fsblock.c:3626:
+		if (block->block_nr < tmp->block_nr)
[...]
+		else if (block->block_nr > tmp->block_nr)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3832: FILE: fs/fsblock.c:3630:
+		else {

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#3834: FILE: fs/fsblock.c:3632:
+			/* XXX: truncating subpage blocks that are mmapped can cause big problems. Must fix */

WARNING:LONG_LINE_COMMENT: line length of 189 exceeds 100 columns
#3853: FILE: fs/fsblock.c:3651:
+//	printk("fbd_del_dirty_block block=%p block->block_nr=%llx page->mapping=%p page->index=%lx\n", block, (unsigned long long)block->block_nr, block->page->mapping, block->page->index);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3859: FILE: fs/fsblock.c:3657:
+	block->flags &= ~(BL_dirty|BL_dirty_acct);
 	                          ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#3880: FILE: fs/fsblock.c:3678:
+	if (!fbd) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3883: FILE: fs/fsblock.c:3681:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#3896: FILE: fs/fsblock.c:3694:
+	if (!fbd) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3899: FILE: fs/fsblock.c:3697:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3919: FILE: fs/fsblock.c:3717:
+static int meta_map_block(struct address_space *mapping,
+				struct fsblock *fsblock, loff_t off,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3927: FILE: fs/fsblock.c:3725:
+static int fsblock_meta_write_page(struct page *page,
+				struct writeback_control *wbc)

ERROR:CODE_INDENT: code indent should use tabs where possible
#3934: FILE: fs/fsblock.c:3732:
+        struct backing_dev_info *bdi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3934: FILE: fs/fsblock.c:3732:
+        struct backing_dev_info *bdi;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3935: FILE: fs/fsblock.c:3733:
+        struct inode            *inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3935: FILE: fs/fsblock.c:3733:
+        struct inode            *inode;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3936: FILE: fs/fsblock.c:3734:
+        struct address_space    *mapping;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3936: FILE: fs/fsblock.c:3734:
+        struct address_space    *mapping;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3951: FILE: fs/fsblock.c:3749:
+        inode = new_inode(bdev->bd_inode->i_sb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3951: FILE: fs/fsblock.c:3749:
+        inode = new_inode(bdev->bd_inode->i_sb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3952: FILE: fs/fsblock.c:3750:
+        if (!inode)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3952: FILE: fs/fsblock.c:3750:
+        if (!inode)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3953: FILE: fs/fsblock.c:3751:
+                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3953: FILE: fs/fsblock.c:3751:
+                return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3954: FILE: fs/fsblock.c:3752:
+        inode->i_mode = S_IFBLK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3954: FILE: fs/fsblock.c:3752:
+        inode->i_mode = S_IFBLK;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3955: FILE: fs/fsblock.c:3753:
+        inode->i_bdev = bdev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3955: FILE: fs/fsblock.c:3753:
+        inode->i_bdev = bdev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3956: FILE: fs/fsblock.c:3754:
+        inode->i_rdev = bdev->bd_dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3956: FILE: fs/fsblock.c:3754:
+        inode->i_rdev = bdev->bd_dev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3957: FILE: fs/fsblock.c:3755:
+        bdi = blk_get_backing_dev_info(bdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3957: FILE: fs/fsblock.c:3755:
+        bdi = blk_get_backing_dev_info(bdev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3958: FILE: fs/fsblock.c:3756:
+        if (!bdi)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3958: FILE: fs/fsblock.c:3756:
+        if (!bdi)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3959: FILE: fs/fsblock.c:3757:
+                bdi = &default_backing_dev_info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3959: FILE: fs/fsblock.c:3757:
+                bdi = &default_backing_dev_info;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3960: FILE: fs/fsblock.c:3758:
+        mapping = &inode->i_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3960: FILE: fs/fsblock.c:3758:
+        mapping = &inode->i_data;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3961: FILE: fs/fsblock.c:3759:
+        mapping->a_ops = &mapping_aops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3961: FILE: fs/fsblock.c:3759:
+        mapping->a_ops = &mapping_aops;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3962: FILE: fs/fsblock.c:3760:
+        mapping->backing_dev_info = bdi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3962: FILE: fs/fsblock.c:3760:
+        mapping->backing_dev_info = bdi;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3963: FILE: fs/fsblock.c:3761:
+        mapping_set_gfp_mask(mapping, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3963: FILE: fs/fsblock.c:3761:
+        mapping_set_gfp_mask(mapping, GFP_KERNEL);$

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#3973: FILE: fs/fsblock.c:3771:
+	printk("blocksize=%x blkbits=%d size=%lld\n", fsb_sb->blocksize, fsb_sb->blkbits, i_size_read(inode));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3973: FILE: fs/fsblock.c:3771:
+	printk("blocksize=%x blkbits=%d size=%lld\n", fsb_sb->blocksize, fsb_sb->blkbits, i_size_read(inode));

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3983: FILE: fs/fsblock.c:3781:
+	iput(fsb_sb->mapping->host);
 	^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3992: FILE: include/linux/fsblock.h:1:
+#ifndef __FSBLOCK_H__

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#4009: FILE: include/linux/fsblock.h:18:
+#define MIN_SECTOR_SIZE		(1UL<<MIN_SECTOR_SHIFT)
                        		    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#4009: FILE: include/linux/fsblock.h:18:
+#define MIN_SECTOR_SIZE		(1UL<<MIN_SECTOR_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4031: FILE: include/linux/fsblock.h:40:
+				 * blkdev inode. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4048: FILE: include/linux/fsblock.h:57:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4075: FILE: include/linux/fsblock.h:84:
+#if 0

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4141: FILE: include/linux/fsblock.h:150:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#4146: FILE: include/linux/fsblock.h:155:
+	struct fsblock *block;
+	FSB_BUG_ON(!PagePrivate(page));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4153: FILE: include/linux/fsblock.h:162:
+	/* XXX these go bang if put here
+	FSB_BUG_ON(PageUptodate(page) && !(block->flags & BL_uptodate));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4212: FILE: include/linux/fsblock.h:221:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#4213: FILE: include/linux/fsblock.h:222:
+#define assert_first_block(first)					\
+({									\
+	FSB_BUG_ON((struct fsblock *)first != page_blocks(first->page));\
+	first;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'first' may be better as '(first)' to avoid precedence issues
#4213: FILE: include/linux/fsblock.h:222:
+#define assert_first_block(first)					\
+({									\
+	FSB_BUG_ON((struct fsblock *)first != page_blocks(first->page));\
+	first;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#4219: FILE: include/linux/fsblock.h:228:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON((first->flags ^ b->flags) & BL_metadata);	\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#4219: FILE: include/linux/fsblock.h:228:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON((first->flags ^ b->flags) & BL_metadata);	\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#4219: FILE: include/linux/fsblock.h:228:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON((first->flags ^ b->flags) & BL_metadata);	\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bsize' may be better as '(bsize)' to avoid precedence issues
#4219: FILE: include/linux/fsblock.h:228:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON((first->flags ^ b->flags) & BL_metadata);	\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size_of' - possible side-effects?
#4219: FILE: include/linux/fsblock.h:228:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON((first->flags ^ b->flags) & BL_metadata);	\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size_of' may be better as '(size_of)' to avoid precedence issues
#4219: FILE: include/linux/fsblock.h:228:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON((first->flags ^ b->flags) & BL_metadata);	\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#4234: FILE: include/linux/fsblock.h:243:
+#define for_each_block(first, b)					\
+ for (b = assert_first_block(first); block_inbounds(first, b, fsblock_size(first), sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#4234: FILE: include/linux/fsblock.h:243:
+#define for_each_block(first, b)					\
+ for (b = assert_first_block(first); block_inbounds(first, b, fsblock_size(first), sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))

WARNING:LONG_LINE: line length of 158 exceeds 100 columns
#4235: FILE: include/linux/fsblock.h:244:
+ for (b = assert_first_block(first); block_inbounds(first, b, fsblock_size(first), sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4235: FILE: include/linux/fsblock.h:244:
+ for (b = assert_first_block(first); block_inbounds(first, b, fsblock_size(first), sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#4237: FILE: include/linux/fsblock.h:246:
+#define __for_each_block(first, size, b)				\
+ for (b = assert_first_block(first); block_inbounds(first, b, size, sizeof(struct fsblock)); b++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#4237: FILE: include/linux/fsblock.h:246:
+#define __for_each_block(first, size, b)				\
+ for (b = assert_first_block(first); block_inbounds(first, b, size, sizeof(struct fsblock)); b++)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4238: FILE: include/linux/fsblock.h:247:
+ for (b = assert_first_block(first); block_inbounds(first, b, size, sizeof(struct fsblock)); b++)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#4241: FILE: include/linux/fsblock.h:250:
+#define __for_each_block_unattached(first, size, b)			\
+ for (b = first; block_inbounds(first, b, size, sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#4241: FILE: include/linux/fsblock.h:250:
+#define __for_each_block_unattached(first, size, b)			\
+ for (b = first; block_inbounds(first, b, size, sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#4242: FILE: include/linux/fsblock.h:251:
+ for (b = first; block_inbounds(first, b, size, sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4242: FILE: include/linux/fsblock.h:251:
+ for (b = first; block_inbounds(first, b, size, sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#4244: FILE: include/linux/fsblock.h:253:
+#define __for_each_mblock(first, size, mb)				\
+ for (mb = block_mblock(assert_first_block(mblock_block(first))); block_inbounds(mblock_block(first), mblock_block(mb), size, sizeof(struct fsblock_meta)); mb++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mb' - possible side-effects?
#4244: FILE: include/linux/fsblock.h:253:
+#define __for_each_mblock(first, size, mb)				\
+ for (mb = block_mblock(assert_first_block(mblock_block(first))); block_inbounds(mblock_block(first), mblock_block(mb), size, sizeof(struct fsblock_meta)); mb++)

WARNING:LONG_LINE: line length of 161 exceeds 100 columns
#4245: FILE: include/linux/fsblock.h:254:
+ for (mb = block_mblock(assert_first_block(mblock_block(first))); block_inbounds(mblock_block(first), mblock_block(mb), size, sizeof(struct fsblock_meta)); mb++)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4245: FILE: include/linux/fsblock.h:254:
+ for (mb = block_mblock(assert_first_block(mblock_block(first))); block_inbounds(mblock_block(first), mblock_block(mb), size, sizeof(struct fsblock_meta)); mb++)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4247: FILE: include/linux/fsblock.h:256:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4248: FILE: include/linux/fsblock.h:257:
+#define first_page_idx(idx, bsize) ((idx) & ~(((bsize) >> PAGE_CACHE_SHIFT)-1))
                                                                            ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#4260: FILE: include/linux/fsblock.h:269:
+static inline void find_pages(struct address_space *mapping, pgoff_t start, int nr_pages, struct page **pages)

ERROR:CODE_INDENT: code indent should use tabs where possible
#4264: FILE: include/linux/fsblock.h:273:
+        ret = radix_tree_gang_lookup(&mapping->page_tree,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4264: FILE: include/linux/fsblock.h:273:
+        ret = radix_tree_gang_lookup(&mapping->page_tree,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4265: FILE: include/linux/fsblock.h:274:
+        ret = radix_tree_gang_lookup(&mapping->page_tree,
+				(void **)pages, start, nr_pages);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#4269: FILE: include/linux/fsblock.h:278:
+#define for_each_page(page, size, p)					\
+do {									\
+	pgoff_t ___idx = (page)->index;					\
+	int ___i, ___nr = (size) >> PAGE_CACHE_SHIFT;			\
+	(p) = (page);							\
+	FSB_BUG_ON(___idx != first_page_idx(___idx, size));		\
+	for (___i = 0; ___i < ___nr; ___i++) {				\
+		(p) = find_page(page->mapping, ___idx + ___i);		\
+		FSB_BUG_ON(!(p));					\
+		{ struct { int i; } page; (void)page.i;			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#4269: FILE: include/linux/fsblock.h:278:
+#define for_each_page(page, size, p)					\
+do {									\
+	pgoff_t ___idx = (page)->index;					\
+	int ___i, ___nr = (size) >> PAGE_CACHE_SHIFT;			\
+	(p) = (page);							\
+	FSB_BUG_ON(___idx != first_page_idx(___idx, size));		\
+	for (___i = 0; ___i < ___nr; ___i++) {				\
+		(p) = find_page(page->mapping, ___idx + ___i);		\
+		FSB_BUG_ON(!(p));					\
+		{ struct { int i; } page; (void)page.i;			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#4269: FILE: include/linux/fsblock.h:278:
+#define for_each_page(page, size, p)					\
+do {									\
+	pgoff_t ___idx = (page)->index;					\
+	int ___i, ___nr = (size) >> PAGE_CACHE_SHIFT;			\
+	(p) = (page);							\
+	FSB_BUG_ON(___idx != first_page_idx(___idx, size));		\
+	for (___i = 0; ___i < ___nr; ___i++) {				\
+		(p) = find_page(page->mapping, ___idx + ___i);		\
+		FSB_BUG_ON(!(p));					\
+		{ struct { int i; } page; (void)page.i;			\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#4269: FILE: include/linux/fsblock.h:278:
+#define for_each_page(page, size, p)					\
+do {									\
+	pgoff_t ___idx = (page)->index;					\
+	int ___i, ___nr = (size) >> PAGE_CACHE_SHIFT;			\
+	(p) = (page);							\
+	FSB_BUG_ON(___idx != first_page_idx(___idx, size));		\
+	for (___i = 0; ___i < ___nr; ___i++) {				\
+		(p) = find_page(page->mapping, ___idx + ___i);		\
+		FSB_BUG_ON(!(p));					\
+		{ struct { int i; } page; (void)page.i;			\
+

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4280: FILE: include/linux/fsblock.h:289:
+#define end_for_each_page } } } while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4309: FILE: include/linux/fsblock.h:318:
+	unsigned int size_of = sizeof_block(block);
+	idx = (unsigned long)block - (unsigned long)page_blocks(block->page);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#4317: FILE: include/linux/fsblock.h:326:
+struct fsblock_meta *find_get_mblock(struct fsblock_sb *fsb_sb, sector_t blocknr, unsigned int size);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#4319: FILE: include/linux/fsblock.h:328:
+struct fsblock_meta *find_or_create_mblock(struct fsblock_sb *fsb_sb, sector_t blocknr, unsigned int size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4323: FILE: include/linux/fsblock.h:332:
+
+

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#4332: FILE: include/linux/fsblock.h:341:
+static inline struct fsblock_meta *sb_find_or_create_mblock(struct fsblock_sb *fsb_sb, sector_t blocknr)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#4344: FILE: include/linux/fsblock.h:353:
+int create_unmapped_blocks(struct page *page, gfp_t gfp_flags, unsigned int size, unsigned int flags);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4381: FILE: include/linux/fsblock.h:390:
+	if (ret) {
+		assert_block(block);
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#4399: FILE: include/linux/fsblock.h:408:
+#define spin_trylock_block_irqsave(block, flags)			\
+({									\
+	int ret;							\
+									\
+	local_irq_save(flags);						\
+	ret = spin_trylock_block(block);				\
+	if (!ret)							\
+		local_irq_restore(flags);				\
+									\
+	ret;								\
+})

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4438: FILE: include/linux/fsblock.h:447:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <Bug>
#4439: FILE: include/linux/fsblock.h:448:
+Bug: !some_refcounted(block)

ERROR:SPACING: space prohibited after that open square bracket '['
#4440: FILE: include/linux/fsblock.h:449:
+------------[ cut here ]------------

ERROR:SPACING: space prohibited before that close square bracket ']'
#4440: FILE: include/linux/fsblock.h:449:
+------------[ cut here ]------------

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#4441: FILE: include/linux/fsblock.h:450:
+kernel BUG at include/linux/fsblock.h:468!

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4441: FILE: include/linux/fsblock.h:450:
+kernel BUG at include/linux/fsblock.h:468!

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4441: FILE: include/linux/fsblock.h:450:
+kernel BUG at include/linux/fsblock.h:468!
                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4441: FILE: include/linux/fsblock.h:450:
+kernel BUG at include/linux/fsblock.h:468!
                            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#4441: FILE: include/linux/fsblock.h:450:
+kernel BUG at include/linux/fsblock.h:468!
                                      ^

ERROR:SPACING: space required before that '!' (ctx:VxE)
#4441: FILE: include/linux/fsblock.h:450:
+kernel BUG at include/linux/fsblock.h:468!
                                          ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#4442: FILE: include/linux/fsblock.h:451:
+invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4442: FILE: include/linux/fsblock.h:451:
+invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC
               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4443: FILE: include/linux/fsblock.h:452:
+last sysfs file: /sys/devices/system/cpu/cpu7/cache/index2/shared_cpu_map
                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:WxV)
#4443: FILE: include/linux/fsblock.h:452:
+last sysfs file: /sys/devices/system/cpu/cpu7/cache/index2/shared_cpu_map
                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4443: FILE: include/linux/fsblock.h:452:
+last sysfs file: /sys/devices/system/cpu/cpu7/cache/index2/shared_cpu_map
                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4443: FILE: include/linux/fsblock.h:452:
+last sysfs file: /sys/devices/system/cpu/cpu7/cache/index2/shared_cpu_map
                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4443: FILE: include/linux/fsblock.h:452:
+last sysfs file: /sys/devices/system/cpu/cpu7/cache/index2/shared_cpu_map
                                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4443: FILE: include/linux/fsblock.h:452:
+last sysfs file: /sys/devices/system/cpu/cpu7/cache/index2/shared_cpu_map
                                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4443: FILE: include/linux/fsblock.h:452:
+last sysfs file: /sys/devices/system/cpu/cpu7/cache/index2/shared_cpu_map
                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4443: FILE: include/linux/fsblock.h:452:
+last sysfs file: /sys/devices/system/cpu/cpu7/cache/index2/shared_cpu_map
                                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4443: FILE: include/linux/fsblock.h:452:
+last sysfs file: /sys/devices/system/cpu/cpu7/cache/index2/shared_cpu_map
                                                           ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#4445: FILE: include/linux/fsblock.h:454:
+Modules linked in: brd [last unloaded: brd]

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4445: FILE: include/linux/fsblock.h:454:
+Modules linked in: brd [last unloaded: brd]
                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4445: FILE: include/linux/fsblock.h:454:
+Modules linked in: brd [last unloaded: brd]
                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <Modules>
#4445: FILE: include/linux/fsblock.h:454:
+Modules linked in: brd [last unloaded: brd]

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4446: FILE: include/linux/fsblock.h:455:
+Pid: 3771, comm: fsx-linux Tainted: G        W  2.6.28-06859-gede6f5a-dirty #30
    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4446: FILE: include/linux/fsblock.h:455:
+Pid: 3771, comm: fsx-linux Tainted: G        W  2.6.28-06859-gede6f5a-dirty #30
                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4446: FILE: include/linux/fsblock.h:455:
+Pid: 3771, comm: fsx-linux Tainted: G        W  2.6.28-06859-gede6f5a-dirty #30
                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4446: FILE: include/linux/fsblock.h:455:
+Pid: 3771, comm: fsx-linux Tainted: G        W  2.6.28-06859-gede6f5a-dirty #30
                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4446: FILE: include/linux/fsblock.h:455:
+Pid: 3771, comm: fsx-linux Tainted: G        W  2.6.28-06859-gede6f5a-dirty #30
                                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4446: FILE: include/linux/fsblock.h:455:
+Pid: 3771, comm: fsx-linux Tainted: G        W  2.6.28-06859-gede6f5a-dirty #30
                                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4446: FILE: include/linux/fsblock.h:455:
+Pid: 3771, comm: fsx-linux Tainted: G        W  2.6.28-06859-gede6f5a-dirty #30
                                                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <Pid>
#4446: FILE: include/linux/fsblock.h:455:
+Pid: 3771, comm: fsx-linux Tainted: G        W  2.6.28-06859-gede6f5a-dirty #30

CHECK:CAMELCASE: Avoid CamelCase: <Tainted>
#4446: FILE: include/linux/fsblock.h:455:
+Pid: 3771, comm: fsx-linux Tainted: G        W  2.6.28-06859-gede6f5a-dirty #30

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#4447: FILE: include/linux/fsblock.h:456:
+RIP: 0010:[<ffffffff802e9db8>]  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4447: FILE: include/linux/fsblock.h:456:
+RIP: 0010:[<ffffffff802e9db8>]  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#4447: FILE: include/linux/fsblock.h:456:
+RIP: 0010:[<ffffffff802e9db8>]  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
          ^

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4447: FILE: include/linux/fsblock.h:456:
+RIP: 0010:[<ffffffff802e9db8>]  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
            ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4447: FILE: include/linux/fsblock.h:456:
+RIP: 0010:[<ffffffff802e9db8>]  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
                             ^

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4447: FILE: include/linux/fsblock.h:456:
+RIP: 0010:[<ffffffff802e9db8>]  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
                                  ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4447: FILE: include/linux/fsblock.h:456:
+RIP: 0010:[<ffffffff802e9db8>]  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4447: FILE: include/linux/fsblock.h:456:
+RIP: 0010:[<ffffffff802e9db8>]  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
                                                                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4447: FILE: include/linux/fsblock.h:456:
+RIP: 0010:[<ffffffff802e9db8>]  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
                                                                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4448: FILE: include/linux/fsblock.h:457:
+RSP: 0018:ffff8800654f3c98  EFLAGS: 00010092
    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#4448: FILE: include/linux/fsblock.h:457:
+RSP: 0018:ffff8800654f3c98  EFLAGS: 00010092
          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4448: FILE: include/linux/fsblock.h:457:
+RSP: 0018:ffff8800654f3c98  EFLAGS: 00010092
                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4449: FILE: include/linux/fsblock.h:458:
+RAX: 0000000000000020 RBX: ffff88007c8b5ef0 RCX: 0000000000000000
    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4449: FILE: include/linux/fsblock.h:458:
+RAX: 0000000000000020 RBX: ffff88007c8b5ef0 RCX: 0000000000000000
                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4449: FILE: include/linux/fsblock.h:458:
+RAX: 0000000000000020 RBX: ffff88007c8b5ef0 RCX: 0000000000000000
                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4450: FILE: include/linux/fsblock.h:459:
+RDX: ffff88006b1311b0 RSI: 0000000000000001 RDI: ffffffff805941c8
    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4450: FILE: include/linux/fsblock.h:459:
+RDX: ffff88006b1311b0 RSI: 0000000000000001 RDI: ffffffff805941c8
                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4450: FILE: include/linux/fsblock.h:459:
+RDX: ffff88006b1311b0 RSI: 0000000000000001 RDI: ffffffff805941c8
                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4451: FILE: include/linux/fsblock.h:460:
+RBP: ffff8800654f3cd8 R08: 0000000000000000 R09: 0000000000000000
    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4451: FILE: include/linux/fsblock.h:460:
+RBP: ffff8800654f3cd8 R08: 0000000000000000 R09: 0000000000000000
                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4451: FILE: include/linux/fsblock.h:460:
+RBP: ffff8800654f3cd8 R08: 0000000000000000 R09: 0000000000000000
                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4452: FILE: include/linux/fsblock.h:461:
+R10: ffffffff80855620 R11: ffff8800654f3bb8 R12: ffffe20002be4ef0
    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4452: FILE: include/linux/fsblock.h:461:
+R10: ffffffff80855620 R11: ffff8800654f3bb8 R12: ffffe20002be4ef0
                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4452: FILE: include/linux/fsblock.h:461:
+R10: ffffffff80855620 R11: ffff8800654f3bb8 R12: ffffe20002be4ef0
                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4453: FILE: include/linux/fsblock.h:462:
+R13: ffff88007c8b5ff0 R14: ffffe20002be4ee0 R15: 0000000000000001
    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4453: FILE: include/linux/fsblock.h:462:
+R13: ffff88007c8b5ff0 R14: ffffe20002be4ee0 R15: 0000000000000001
                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4453: FILE: include/linux/fsblock.h:462:
+R13: ffff88007c8b5ff0 R14: ffffe20002be4ee0 R15: 0000000000000001
                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4454: FILE: include/linux/fsblock.h:463:
+FS:  00007f9d5ff026e0(0000) GS:ffffffff80807040(0000) knlGS:0000000000000000
   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#4454: FILE: include/linux/fsblock.h:463:
+FS:  00007f9d5ff026e0(0000) GS:ffffffff80807040(0000) knlGS:0000000000000000
                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#4454: FILE: include/linux/fsblock.h:463:
+FS:  00007f9d5ff026e0(0000) GS:ffffffff80807040(0000) knlGS:0000000000000000
                                                            ^

CHECK:CAMELCASE: Avoid CamelCase: <knlGS>
#4454: FILE: include/linux/fsblock.h:463:
+FS:  00007f9d5ff026e0(0000) GS:ffffffff80807040(0000) knlGS:0000000000000000

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4455: FILE: include/linux/fsblock.h:464:
+CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4455: FILE: include/linux/fsblock.h:464:
+CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4455: FILE: include/linux/fsblock.h:464:
+CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4455: FILE: include/linux/fsblock.h:464:
+CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
                                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4456: FILE: include/linux/fsblock.h:465:
+CR2: 00007f9d5fe7f0d0 CR3: 000000011fc8c000 CR4: 00000000000006e0
    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4456: FILE: include/linux/fsblock.h:465:
+CR2: 00007f9d5fe7f0d0 CR3: 000000011fc8c000 CR4: 00000000000006e0
                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4456: FILE: include/linux/fsblock.h:465:
+CR2: 00007f9d5fe7f0d0 CR3: 000000011fc8c000 CR4: 00000000000006e0
                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4457: FILE: include/linux/fsblock.h:466:
+DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4457: FILE: include/linux/fsblock.h:466:
+DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4457: FILE: include/linux/fsblock.h:466:
+DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4458: FILE: include/linux/fsblock.h:467:
+DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4458: FILE: include/linux/fsblock.h:467:
+DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4458: FILE: include/linux/fsblock.h:467:
+DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
                                                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#4459: FILE: include/linux/fsblock.h:468:
+Process fsx-linux (pid: 3771, threadinfo ffff8800654f2000, task ffff88006b1311b0)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4459: FILE: include/linux/fsblock.h:468:
+Process fsx-linux (pid: 3771, threadinfo ffff8800654f2000, task ffff88006b1311b0)
            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4459: FILE: include/linux/fsblock.h:468:
+Process fsx-linux (pid: 3771, threadinfo ffff8800654f2000, task ffff88006b1311b0)
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <Process>
#4459: FILE: include/linux/fsblock.h:468:
+Process fsx-linux (pid: 3771, threadinfo ffff8800654f2000, task ffff88006b1311b0)

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#4460: FILE: include/linux/fsblock.h:469:
+Stack:
      ^

CHECK:CAMELCASE: Avoid CamelCase: <Stack>
#4460: FILE: include/linux/fsblock.h:469:
+Stack:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4461: FILE: include/linux/fsblock.h:470:
+ 0000000000000086 ffffe20002be4ee0 0000100000000400 0000000000000086$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4462: FILE: include/linux/fsblock.h:471:
+ ffffe20002be4ee0 0000000000000086 0000000000000030 ffffffffffffffff$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4463: FILE: include/linux/fsblock.h:472:
+ ffff8800654f3ce8 ffffffff80296fb2 ffff8800654f3dd8 ffffffff802973fa$

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#4464: FILE: include/linux/fsblock.h:473:
+Call Trace:
           ^

CHECK:CAMELCASE: Avoid CamelCase: <Call>
#4464: FILE: include/linux/fsblock.h:473:
+Call Trace:

CHECK:CAMELCASE: Avoid CamelCase: <Trace>
#4464: FILE: include/linux/fsblock.h:473:
+Call Trace:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4465: FILE: include/linux/fsblock.h:474:
+ [<ffffffff80296fb2>] do_invalidatepage+0x22/0x40$

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4465: FILE: include/linux/fsblock.h:474:
+ [<ffffffff80296fb2>] do_invalidatepage+0x22/0x40
   ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4465: FILE: include/linux/fsblock.h:474:
+ [<ffffffff80296fb2>] do_invalidatepage+0x22/0x40
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4465: FILE: include/linux/fsblock.h:474:
+ [<ffffffff80296fb2>] do_invalidatepage+0x22/0x40
                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4465: FILE: include/linux/fsblock.h:474:
+ [<ffffffff80296fb2>] do_invalidatepage+0x22/0x40
                                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4466: FILE: include/linux/fsblock.h:475:
+ [<ffffffff802973fa>] truncate_inode_pages_range+0x3ba/0x3f0$

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4466: FILE: include/linux/fsblock.h:475:
+ [<ffffffff802973fa>] truncate_inode_pages_range+0x3ba/0x3f0
   ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4466: FILE: include/linux/fsblock.h:475:
+ [<ffffffff802973fa>] truncate_inode_pages_range+0x3ba/0x3f0
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4466: FILE: include/linux/fsblock.h:475:
+ [<ffffffff802973fa>] truncate_inode_pages_range+0x3ba/0x3f0
                                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4466: FILE: include/linux/fsblock.h:475:
+ [<ffffffff802973fa>] truncate_inode_pages_range+0x3ba/0x3f0
                                                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4467: FILE: include/linux/fsblock.h:476:
+ [<ffffffff80297440>] truncate_inode_pages+0x10/0x20$

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4467: FILE: include/linux/fsblock.h:476:
+ [<ffffffff80297440>] truncate_inode_pages+0x10/0x20
   ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4467: FILE: include/linux/fsblock.h:476:
+ [<ffffffff80297440>] truncate_inode_pages+0x10/0x20
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4467: FILE: include/linux/fsblock.h:476:
+ [<ffffffff80297440>] truncate_inode_pages+0x10/0x20
                                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4467: FILE: include/linux/fsblock.h:476:
+ [<ffffffff80297440>] truncate_inode_pages+0x10/0x20
                                                ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4468: FILE: include/linux/fsblock.h:477:
+ [<ffffffff802a40ad>] vmtruncate+0xed/0x110$

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4468: FILE: include/linux/fsblock.h:477:
+ [<ffffffff802a40ad>] vmtruncate+0xed/0x110
   ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4468: FILE: include/linux/fsblock.h:477:
+ [<ffffffff802a40ad>] vmtruncate+0xed/0x110
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4468: FILE: include/linux/fsblock.h:477:
+ [<ffffffff802a40ad>] vmtruncate+0xed/0x110
                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4468: FILE: include/linux/fsblock.h:477:
+ [<ffffffff802a40ad>] vmtruncate+0xed/0x110
                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4469: FILE: include/linux/fsblock.h:478:
+ [<ffffffff802dbc40>] inode_setattr+0x30/0x180$

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4469: FILE: include/linux/fsblock.h:478:
+ [<ffffffff802dbc40>] inode_setattr+0x30/0x180
   ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4469: FILE: include/linux/fsblock.h:478:
+ [<ffffffff802dbc40>] inode_setattr+0x30/0x180
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4469: FILE: include/linux/fsblock.h:478:
+ [<ffffffff802dbc40>] inode_setattr+0x30/0x180
                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4469: FILE: include/linux/fsblock.h:478:
+ [<ffffffff802dbc40>] inode_setattr+0x30/0x180
                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4470: FILE: include/linux/fsblock.h:479:
+ [<ffffffff8034d41f>] ext2_setattr+0x2f/0x40$

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4470: FILE: include/linux/fsblock.h:479:
+ [<ffffffff8034d41f>] ext2_setattr+0x2f/0x40
   ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4470: FILE: include/linux/fsblock.h:479:
+ [<ffffffff8034d41f>] ext2_setattr+0x2f/0x40
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4470: FILE: include/linux/fsblock.h:479:
+ [<ffffffff8034d41f>] ext2_setattr+0x2f/0x40
                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4470: FILE: include/linux/fsblock.h:479:
+ [<ffffffff8034d41f>] ext2_setattr+0x2f/0x40
                                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4471: FILE: include/linux/fsblock.h:480:
+ [<ffffffff802dbea9>] notify_change+0x119/0x2f0$

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4471: FILE: include/linux/fsblock.h:480:
+ [<ffffffff802dbea9>] notify_change+0x119/0x2f0
   ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4471: FILE: include/linux/fsblock.h:480:
+ [<ffffffff802dbea9>] notify_change+0x119/0x2f0
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4471: FILE: include/linux/fsblock.h:480:
+ [<ffffffff802dbea9>] notify_change+0x119/0x2f0
                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4471: FILE: include/linux/fsblock.h:480:
+ [<ffffffff802dbea9>] notify_change+0x119/0x2f0
                                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4472: FILE: include/linux/fsblock.h:481:
+ [<ffffffff802c5015>] do_truncate+0x65/0x90$

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4472: FILE: include/linux/fsblock.h:481:
+ [<ffffffff802c5015>] do_truncate+0x65/0x90
   ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4472: FILE: include/linux/fsblock.h:481:
+ [<ffffffff802c5015>] do_truncate+0x65/0x90
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4472: FILE: include/linux/fsblock.h:481:
+ [<ffffffff802c5015>] do_truncate+0x65/0x90
                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4472: FILE: include/linux/fsblock.h:481:
+ [<ffffffff802c5015>] do_truncate+0x65/0x90
                                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4473: FILE: include/linux/fsblock.h:482:
+ [<ffffffff802c5128>] sys_ftruncate+0xe8/0x130$

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4473: FILE: include/linux/fsblock.h:482:
+ [<ffffffff802c5128>] sys_ftruncate+0xe8/0x130
   ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4473: FILE: include/linux/fsblock.h:482:
+ [<ffffffff802c5128>] sys_ftruncate+0xe8/0x130
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4473: FILE: include/linux/fsblock.h:482:
+ [<ffffffff802c5128>] sys_ftruncate+0xe8/0x130
                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4473: FILE: include/linux/fsblock.h:482:
+ [<ffffffff802c5128>] sys_ftruncate+0xe8/0x130
                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4474: FILE: include/linux/fsblock.h:483:
+ [<ffffffff8020ba9b>] system_call_fastpath+0x16/0x1b$

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4474: FILE: include/linux/fsblock.h:483:
+ [<ffffffff8020ba9b>] system_call_fastpath+0x16/0x1b
   ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4474: FILE: include/linux/fsblock.h:483:
+ [<ffffffff8020ba9b>] system_call_fastpath+0x16/0x1b
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4474: FILE: include/linux/fsblock.h:483:
+ [<ffffffff8020ba9b>] system_call_fastpath+0x16/0x1b
                                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4474: FILE: include/linux/fsblock.h:483:
+ [<ffffffff8020ba9b>] system_call_fastpath+0x16/0x1b
                                                ^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#4475: FILE: include/linux/fsblock.h:484:
+Code: 48 8b 53 18 f6 42 10 01 0f 1f 00 75 04 0f 0b eb fe 48 8d 42 10 0f ba 72 10 00 e9 de fe ff ff 48 c7 c7 08 e4 66 80 e8 c5 6c 2a 00 <0f> 0b eb fe 0f 0b eb fe fae8 0a 04 f8 ff eb 0e 41 f6 04 24 01
                                                                         ^^

WARNING:LONG_LINE: line length of 198 exceeds 100 columns
#4475: FILE: include/linux/fsblock.h:484:
+Code: 48 8b 53 18 f6 42 10 01 0f 1f 00 75 04 0f 0b eb fe 48 8d 42 10 0f ba 72 10 00 e9 de fe ff ff 48 c7 c7 08 e4 66 80 e8 c5 6c 2a 00 <0f> 0b eb fe 0f 0b eb fe fae8 0a 04 f8 ff eb 0e 41 f6 04 24 01

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4475: FILE: include/linux/fsblock.h:484:
+Code: 48 8b 53 18 f6 42 10 01 0f 1f 00 75 04 0f 0b eb fe 48 8d 42 10 0f ba 72 10 00 e9 de fe ff ff 48 c7 c7 08 e4 66 80 e8 c5 6c 2a 00 <0f> 0b eb fe 0f 0b eb fe fae8 0a 04 f8 ff eb 0e 41 f6 04 24 01
     ^

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#4475: FILE: include/linux/fsblock.h:484:
+Code: 48 8b 53 18 f6 42 10 01 0f 1f 00 75 04 0f 0b eb fe 48 8d 42 10 0f ba 72 10 00 e9 de fe ff ff 48 c7 c7 08 e4 66 80 e8 c5 6c 2a 00 <0f> 0b eb fe 0f 0b eb fe fae8 0a 04 f8 ff eb 0e 41 f6 04 24 01
                                                                                                                                        ^

ERROR:SPACING: spaces required around that '>' (ctx:VxW)
#4475: FILE: include/linux/fsblock.h:484:
+Code: 48 8b 53 18 f6 42 10 01 0f 1f 00 75 04 0f 0b eb fe 48 8d 42 10 0f ba 72 10 00 e9 de fe ff ff 48 c7 c7 08 e4 66 80 e8 c5 6c 2a 00 <0f> 0b eb fe 0f 0b eb fe fae8 0a 04 f8 ff eb 0e 41 f6 04 24 01
                                                                                                                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <Code>
#4475: FILE: include/linux/fsblock.h:484:
+Code: 48 8b 53 18 f6 42 10 01 0f 1f 00 75 04 0f 0b eb fe 48 8d 42 10 0f ba 72 10 00 e9 de fe ff ff 48 c7 c7 08 e4 66 80 e8 c5 6c 2a 00 <0f> 0b eb fe 0f 0b eb fe fae8 0a 04 f8 ff eb 0e 41 f6 04 24 01

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#4476: FILE: include/linux/fsblock.h:485:
+RIP  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580

ERROR:SPACING: spaces required around that '<' (ctx:BxV)
#4476: FILE: include/linux/fsblock.h:485:
+RIP  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
       ^

ERROR:SPACING: spaces required around that '>' (ctx:VxB)
#4476: FILE: include/linux/fsblock.h:485:
+RIP  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4476: FILE: include/linux/fsblock.h:485:
+RIP  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4476: FILE: include/linux/fsblock.h:485:
+RIP  [<ffffffff802e9db8>] fsblock_invalidate_page+0x418/0x580
                                                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4477: FILE: include/linux/fsblock.h:486:
+ RSP <ffff8800654f3c98>$

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#4477: FILE: include/linux/fsblock.h:486:
+ RSP <ffff8800654f3c98>
      ^

ERROR:SPACING: spaces required around that '>' (ctx:VxE)
#4477: FILE: include/linux/fsblock.h:486:
+ RSP <ffff8800654f3c98>
                       ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#4477: FILE: include/linux/fsblock.h:486:
+ RSP <ffff8800654f3c98>

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4538: FILE: include/linux/fsblock.h:547:
+	block->flags &= ~(BL_delay|BL_unwritten);
 	                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4541: FILE: include/linux/fsblock.h:550:
+	if (block->flags & BL_metadata) {
+		FSB_BUG_ON(block->block_nr << fsblock_bits(block) >> PAGE_CACHE_SHIFT != block->page->index);
+	}

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4542: FILE: include/linux/fsblock.h:551:
+		FSB_BUG_ON(block->block_nr << fsblock_bits(block) >> PAGE_CACHE_SHIFT != block->page->index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4551: FILE: include/linux/fsblock.h:560:
+int fsblock_write_page(struct page *page, map_block_fn *insert_mapping,
+				struct writeback_control *wbc);

WARNING:LONG_LINE: line length of 181 exceeds 100 columns
#4553: FILE: include/linux/fsblock.h:562:
+int fsblock_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata, map_block_fn insert_mapping);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4553: FILE: include/linux/fsblock.h:562:
+int fsblock_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata, map_block_fn insert_mapping);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4553: FILE: include/linux/fsblock.h:562:
+int fsblock_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata, map_block_fn insert_mapping);

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#4554: FILE: include/linux/fsblock.h:563:
+int __fsblock_write_end(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4554: FILE: include/linux/fsblock.h:563:
+int __fsblock_write_end(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4554: FILE: include/linux/fsblock.h:563:
+int __fsblock_write_end(struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata);

WARNING:LONG_LINE: line length of 148 exceeds 100 columns
#4555: FILE: include/linux/fsblock.h:564:
+int fsblock_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4555: FILE: include/linux/fsblock.h:564:
+int fsblock_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4555: FILE: include/linux/fsblock.h:564:
+int fsblock_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#4557: FILE: include/linux/fsblock.h:566:
+int fsblock_page_mkwrite(struct vm_area_struct *vma, struct page *page, map_block_fn *insert_mapping);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4580: FILE: include/linux/fsblock.h:589:
+}
+static inline void writeback_blockdevs_background(void)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#4586: FILE: include/linux/fsblock.h:595:
+void fsblock_end_io(struct fsblock *block, int uptodate);
                                                ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4594: FILE: include/linux/fsblock_types.h:1:
+#ifndef __FSBLOCK_TYPES_H__

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4606: FILE: include/linux/fsblock_types.h:13:
+# define FSB_BUG()	BUG()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4607: FILE: include/linux/fsblock_types.h:14:
+# define FSB_BUG_ON(x)	do { if (x) { printk("Warning: " #x "\n"); } BUG_ON(x); } while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4607: FILE: include/linux/fsblock_types.h:14:
+# define FSB_BUG_ON(x)	do { if (x) { printk("Warning: " #x "\n"); } BUG_ON(x); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#4607: FILE: include/linux/fsblock_types.h:14:
+# define FSB_BUG_ON(x)	do { if (x) { printk("Warning: " #x "\n"); } BUG_ON(x); } while (0)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4607: FILE: include/linux/fsblock_types.h:14:
+# define FSB_BUG_ON(x)	do { if (x) { printk("Warning: " #x "\n"); } BUG_ON(x); } while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4609: FILE: include/linux/fsblock_types.h:16:
+# define FSB_WARN_ON(x)	do { if (x) { printk("Warning: " #x "\n"); } WARN_ON(x); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#4609: FILE: include/linux/fsblock_types.h:16:
+# define FSB_WARN_ON(x)	do { if (x) { printk("Warning: " #x "\n"); } WARN_ON(x); } while (0)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4609: FILE: include/linux/fsblock_types.h:16:
+# define FSB_WARN_ON(x)	do { if (x) { printk("Warning: " #x "\n"); } WARN_ON(x); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4937: FILE: fs/buffer.c:2328:
+	BUG_ON(page->mapping != inode->i_mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5071: FILE: mm/filemap.c:125:
+	BUG_ON(PageBlocks(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5079: FILE: mm/filemap.c:2474:
+	BUG_ON(!PagePrivate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5152: FILE: mm/truncate.c:87:
+	BUG_ON(!PageDirty(page));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5211: FILE: mm/truncate.c:206:
+			next = page_index+1;
 			                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5212: FILE: mm/truncate.c:207:
+			if (next-1 > end)
 			        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5227: FILE: mm/truncate.c:216:
+						unmap_mapping_range(mapping,
+						  (loff_t)page_index<<PAGE_CACHE_SHIFT,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5227: FILE: mm/truncate.c:216:
+						  (loff_t)page_index<<PAGE_CACHE_SHIFT,
 						                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5270: FILE: mm/truncate.c:246:
+			if (next-1 > end) {
 			        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5389: FILE: fs/inode.c:212:
+	BUG_ON(mapping_has_private(&inode->i_data));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5390: FILE: fs/inode.c:213:
+	BUG_ON(inode->i_data.nrpages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5406: FILE: fs/inode.c:288:
+	BUG_ON(mapping_has_private(mapping));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5407: FILE: fs/inode.c:289:
+	BUG_ON(mapping->nrpages);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#5415: FILE: fs/inode.c:352:
+		struct address_space * mapping;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5429: FILE: fs/inode.c:371:
+		BUG_ON(mapping_has_private(mapping));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5546: FILE: mm/page-writeback.c:1217:
+			WARN_ON_ONCE(!PagePrivate(page) && !PageBlocks(page) &&
+						 !PageUptodate(page));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5554: FILE: mm/page-writeback.c:1245:
+	printk("redirty!\n");

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#5556: FILE: mm/page-writeback.c:1247:
+	/* XXX: this is crap. the whole idea of clearing page dirty before writepage is a load of shit */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5566: FILE: mm/page-writeback.c:1308:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5567: FILE: mm/page-writeback.c:1309:
+	BUG_ON(!PageDirty(page));

WARNING:LINE_SPACING: Missing a blank line after declarations
#5574: FILE: mm/page-writeback.c:1316:
+	struct address_space *mapping = page_mapping(page);
+	BUG_ON(!mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5574: FILE: mm/page-writeback.c:1316:
+	BUG_ON(!mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5575: FILE: mm/page-writeback.c:1317:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5576: FILE: mm/page-writeback.c:1318:
+	BUG_ON(!PageDirty(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5589: FILE: mm/page-writeback.c:1343:
+	BUG_ON(!PageDirty(page));

CHECK:BRACES: Unbalanced braces around else statement
#5609: FILE: mm/page-writeback.c:1387:
+	} else

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#5624: FILE: kernel/sysctl.c:74:
+extern int fsblock_noblock;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#5658: FILE: include/linux/fs.h:535:
+	int (*release)(struct address_space *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#5658: FILE: include/linux/fs.h:535:
+	int (*release)(struct address_space *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#5664: FILE: include/linux/fs.h:541:
+	int (*sync)(struct address_space *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5687: FILE: include/linux/fs.h:1749:
+extern void invalidate_bdev(struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#5687: FILE: include/linux/fs.h:1749:
+extern void invalidate_bdev(struct block_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5688: FILE: include/linux/fs.h:1750:
+extern int sync_blockdev(struct block_device *bdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5689: FILE: include/linux/fs.h:1751:
+extern struct super_block *freeze_bdev(struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#5689: FILE: include/linux/fs.h:1751:
+extern struct super_block *freeze_bdev(struct block_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5690: FILE: include/linux/fs.h:1752:
+extern int thaw_bdev(struct block_device *bdev, struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5691: FILE: include/linux/fs.h:1753:
+extern int fsync_bdev(struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#5691: FILE: include/linux/fs.h:1753:
+extern int fsync_bdev(struct block_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5692: FILE: include/linux/fs.h:1754:
+extern int fsync_super(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#5692: FILE: include/linux/fs.h:1754:
+extern int fsync_super(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5693: FILE: include/linux/fs.h:1755:
+extern int fsync_no_super(struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#5693: FILE: include/linux/fs.h:1755:
+extern int fsync_no_super(struct block_device *);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5731: FILE: fs/block_dev.c:99:
+	 * and it's value is >= 512 */

ERROR:CODE_INDENT: code indent should use tabs where possible
#5740: FILE: fs/block_dev.c:119:
+                struct buffer_head *bh, int create)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5740: FILE: fs/block_dev.c:119:
+                struct buffer_head *bh, int create)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5753: FILE: fs/block_dev.c:124:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5753: FILE: fs/block_dev.c:124:
+                return 0;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#5783: FILE: fs/block_dev.c:193:
+	struct super_block *sb = get_super(bdev);
+	if (sb) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#5785: FILE: fs/block_dev.c:195:
+		int res = fsync_super(sb);
+		drop_super(sb);

WARNING:MEMORY_BARRIER: memory barrier without comment
#5823: FILE: fs/block_dev.c:233:
+		smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#5828: FILE: fs/block_dev.c:238:
+		smp_wmb();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5835: FILE: fs/block_dev.c:245:
+				printk(KERN_ERR

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5880: FILE: fs/block_dev.c:290:
+		BUG_ON(sb->s_bdev != bdev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5885: FILE: fs/block_dev.c:295:
+					printk(KERN_ERR

WARNING:MEMORY_BARRIER: memory barrier without comment
#5894: FILE: fs/block_dev.c:304:
+			smp_wmb();

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#6002: FILE: fs/ext2/balloc.c:40:
+					     struct fsblock_meta ** mb)

CHECK:SPACING: No space is necessary after a cast
#6013: FILE: fs/ext2/balloc.c:66:
+	desc = (struct ext2_group_desc *) sbi->s_group_desc[group_desc]->data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6049: FILE: fs/ext2/balloc.c:102:
+	next_zero_bit = ext2_find_next_zero_bit(mb->data,
 				offset + EXT2_SB(sb)->s_itb_per_group,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#6065: FILE: fs/ext2/balloc.c:126:
+	struct fsblock_meta * mb = NULL;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#6168: FILE: fs/ext2/balloc.c:541:
+	desc = ext2_get_group_desc (sb, block_group, &mb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6220: FILE: fs/ext2/balloc.c:598:
+bitmap_search_next_usable_block(ext2_grpblk_t start, struct fsblock_meta *mb,
 					ext2_grpblk_t maxblocks)

ERROR:CODE_INDENT: code indent should use tabs where possible
#6306: FILE: fs/ext2/balloc.c:728:
+^I^I^I^I^I     ^I^Ibitmap_mb->data);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6306: FILE: fs/ext2/balloc.c:728:
+^I^I^I^I^I     ^I^Ibitmap_mb->data);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#6315: FILE: fs/ext2/balloc.c:736:
+^I^I^I       ^I^I^I^Ibitmap_mb->data)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6315: FILE: fs/ext2/balloc.c:736:
+^I^I^I       ^I^I^I^Ibitmap_mb->data)) {$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#6497: FILE: fs/ext2/balloc.c:1452:
+unsigned long ext2_count_free (struct fsblock_meta * map, unsigned int numchars)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#6497: FILE: fs/ext2/balloc.c:1452:
+unsigned long ext2_count_free (struct fsblock_meta * map, unsigned int numchars)

CHECK:BRACES: Unbalanced braces around else statement
#6565: FILE: fs/ext2/dir.c:201:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6566: FILE: fs/ext2/dir.c:202:
+		printk("ext2_get_page read_mapping_page error\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext2_get_page', this function's name, in a string
#6566: FILE: fs/ext2/dir.c:202:
+		printk("ext2_get_page read_mapping_page error\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#6570: FILE: fs/ext2/dir.c:206:
+	printk("ext2_get_page PageError\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext2_get_page', this function's name, in a string
#6570: FILE: fs/ext2/dir.c:206:
+	printk("ext2_get_page PageError\n");

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#6598: FILE: fs/ext2/ext2.h:102:
+						    struct fsblock_meta ** mb);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6607: FILE: fs/ext2/ext2.h:126:
+extern unsigned long ext2_count_free (struct fsblock_meta *, unsigned);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#6607: FILE: fs/ext2/ext2.h:126:
+extern unsigned long ext2_count_free (struct fsblock_meta *, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6607: FILE: fs/ext2/ext2.h:126:
+extern unsigned long ext2_count_free (struct fsblock_meta *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsblock_meta *' should also have an identifier name
#6607: FILE: fs/ext2/ext2.h:126:
+extern unsigned long ext2_count_free (struct fsblock_meta *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#6607: FILE: fs/ext2/ext2.h:126:
+extern unsigned long ext2_count_free (struct fsblock_meta *, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6615: FILE: fs/ext2/ext2.h:133:
+extern int ext2_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#6615: FILE: fs/ext2/ext2.h:133:
+extern int ext2_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#6615: FILE: fs/ext2/ext2.h:133:
+extern int ext2_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#6615: FILE: fs/ext2/ext2.h:133:
+extern int ext2_insert_mapping(struct address_space *, loff_t, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#6615: FILE: fs/ext2/ext2.h:133:
+extern int ext2_insert_mapping(struct address_space *, loff_t, size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6623: FILE: fs/ext2/ext2.h:140:
+extern int __ext2_write_begin(struct file *file, struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6624: FILE: fs/ext2/ext2.h:141:
+extern int __ext2_write_begin(struct file *file, struct address_space *mapping,
 		loff_t pos, unsigned len, unsigned flags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6626: FILE: fs/ext2/ext2.h:143:
+extern int ext2_page_mkwrite(struct vm_area_struct *vma, struct page *page);

CHECK:SPACING: No space is necessary after a cast
#6742: FILE: fs/ext2/ialloc.c:150:
+				bit, (void *) bitmap_mb->data))

WARNING:LONG_LINE_COMMENT: line length of 144 exceeds 100 columns
#6895: FILE: fs/ext2/inode.c:74:
+	fsblock_release(&inode->i_data, 1); /* XXX: just do this at delete time? (but that goes bug in clear_inode mapping has private check) */

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#6908: FILE: fs/ext2/inode.c:88:
+static inline void add_chain(Indirect *p, struct fsblock_meta *mb, __le32 *v)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#6959: FILE: fs/ext2/inode.c:222:
+		add_chain(++p, mb, (__le32*)mb->data + *++offsets);

CHECK:SPACING: No space is necessary after a cast
#6977: FILE: fs/ext2/inode.c:263:
+	__le32 *start = ind->mb ? (__le32 *) ind->mb->data : ei->i_data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7004: FILE: fs/ext2/inode.c:441:
+static noinline int ext2_alloc_branch(struct inode *inode,
 			int indirect_blks, int *blks, ext2_fsblk_t goal,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7029: FILE: fs/ext2/inode.c:467:
+		mb = sb_find_or_create_mblock(&EXT2_SB(inode->i_sb)->fsb_sb, new_blocks[n-1]);
 		                                                                         ^

CHECK:SPACING: No space is necessary after a cast
#7037: FILE: fs/ext2/inode.c:475:
+		branch[n].p = (__le32 *) mb->data + offsets[n];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7068: FILE: fs/ext2/inode.c:515:
+static noinline void ext2_splice_branch(struct inode *inode,
 			long block, Indirect *where, int num, int blks)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7100: FILE: fs/ext2/inode.c:578:
+static int ext2_get_blocks(struct inode *inode, sector_t blocknr,
+				unsigned long maxblocks, int create,

ERROR:SPACING: space required after that ',' (ctx:VxO)
#7115: FILE: fs/ext2/inode.c:598:
+	depth = ext2_block_to_path(inode, blocknr, offsets,&blocks_to_boundary);
 	                                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#7115: FILE: fs/ext2/inode.c:598:
+	depth = ext2_block_to_path(inode, blocknr, offsets,&blocks_to_boundary);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7166: FILE: fs/ext2/inode.c:692:
+	*block = le32_to_cpu(chain[depth-1].key);
 	                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7197: FILE: fs/ext2/inode.c:714:
+static int ext2_map_extent(struct address_space *mapping, loff_t pos, int mode,
+				sector_t *offset, sector_t *block,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7217: FILE: fs/ext2/inode.c:730:
+static int ext2_map_block(struct address_space *mapping,
+			struct fsblock *block, loff_t pos, int mode)

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#7224: FILE: fs/ext2/inode.c:735:
+	return fsb_ext_map_fsblock(mapping, pos, block, mode, &EXT2_I(mapping->host)->fsb_ext_root, ext2_map_extent);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7230: FILE: fs/ext2/inode.c:740:
+static int ext2_map_block(struct address_space *mapping,
+			struct fsblock *b, loff_t pos, int mode)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7246: FILE: fs/ext2/inode.c:755:
+	if (ret > 0) {
+		ret = 0;
+	}

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#7329: FILE: fs/ext2/inode.c:815:
+#if 0

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#7400: FILE: fs/ext2/inode.c:929:
+	for (p=partial; p>chain && all_zeroes((__le32*)p->mb->data,p->p); p--)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#7400: FILE: fs/ext2/inode.c:929:
+	for (p=partial; p>chain && all_zeroes((__le32*)p->mb->data,p->p); p--)
 	      ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#7400: FILE: fs/ext2/inode.c:929:
+	for (p=partial; p>chain && all_zeroes((__le32*)p->mb->data,p->p); p--)
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#7400: FILE: fs/ext2/inode.c:929:
+	for (p=partial; p>chain && all_zeroes((__le32*)p->mb->data,p->p); p--)
 	                                                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#7418: FILE: fs/ext2/inode.c:1006:
+	struct fsblock_meta * mb;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#7442: FILE: fs/ext2/inode.c:1028:
+					   (__le32*)mb->data,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#7443: FILE: fs/ext2/inode.c:1029:
+					   (__le32*)mb->data + addr_per_block,

CHECK:BRACES: Unbalanced braces around else statement
#7469: FILE: fs/ext2/inode.c:1066:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7472: FILE: fs/ext2/inode.c:1069:
+		fsblock_truncate_page(inode->i_mapping,
+				inode->i_size);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#7474: FILE: fs/ext2/inode.c:1071:
+		fsb_ext_unmap_fsblock(inode->i_mapping, inode->i_size, -1, &EXT2_I(inode)->fsb_ext_root);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#7493: FILE: fs/ext2/inode.c:1104:
+				   (__le32*)partial->mb->data+addr_per_block,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7493: FILE: fs/ext2/inode.c:1104:
+				   (__le32*)partial->mb->data+addr_per_block,
 				                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#7519: FILE: fs/ext2/inode.c:1153:
+	struct fsblock_meta * mb;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7528: FILE: fs/ext2/inode.c:1174:
+	if (!(mb = sb_mbread(&EXT2_SB(sb)->fsb_sb, block)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#7535: FILE: fs/ext2/inode.c:1179:
+	return (struct ext2_inode *) (mb->data + offset);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#7544: FILE: fs/ext2/inode.c:1232:
+	struct fsblock_meta * mb;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#7614: FILE: fs/ext2/inode.c:1347:
+static noinline int ext2_update_inode(struct inode * inode, int do_sync)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#7623: FILE: fs/ext2/inode.c:1354:
+	struct fsblock_meta * mb;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#7624: FILE: fs/ext2/inode.c:1355:
+	struct ext2_inode * raw_inode = ext2_get_inode(sb, ino, &mb);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#7727: FILE: fs/ext2/super.c:751:
+	struct fsblock_meta * mb;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#7737: FILE: fs/ext2/super.c:817:
+		printk("ext2 fill super wrong magic\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#7762: FILE: fs/ext2/super.c:925:
+		printk("EXT2-fs: Could not read fsblock metadata block for superblock\n");

CHECK:SPACING: No space is necessary after a cast
#7767: FILE: fs/ext2/super.c:930:
+	es = (struct ext2_super_block *) (((char *)mb->data) + offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#7796: FILE: fs/ext2/super.c:1015:
+	sbi->s_group_desc = kmalloc (db_count * sizeof (struct fsblock_meta *), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#7796: FILE: fs/ext2/super.c:1015:
+	sbi->s_group_desc = kmalloc (db_count * sizeof (struct fsblock_meta *), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#7796: FILE: fs/ext2/super.c:1015:
+	sbi->s_group_desc = kmalloc (db_count * sizeof (struct fsblock_meta *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7999: FILE: fs/ext2/xattr.c:69:
+#define FIRST_ENTRY(fsb) ENTRY(HDR(fsb)+1)
                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fsb' - possible side-effects?
#8008: FILE: fs/ext2/xattr.c:79:
+# define ea_bdebug(fsb, f...) do { \
 		char b[BDEVNAME_SIZE]; \
+		printk(KERN_DEBUG "block %s:%llu: ", \
+			bdevname(fsb->page->mapping->host->i_sb->sb_bdev, b), \
+			(unsigned long long) fsb->blocknr); \
 		printk(f); \
 		printk("\n"); \
 	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fsb' may be better as '(fsb)' to avoid precedence issues
#8008: FILE: fs/ext2/xattr.c:79:
+# define ea_bdebug(fsb, f...) do { \
 		char b[BDEVNAME_SIZE]; \
+		printk(KERN_DEBUG "block %s:%llu: ", \
+			bdevname(fsb->page->mapping->host->i_sb->sb_bdev, b), \
+			(unsigned long long) fsb->blocknr); \
 		printk(f); \
 		printk("\n"); \
 	} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#8013: FILE: fs/ext2/xattr.c:81:
+		printk(KERN_DEBUG "block %s:%llu: ", \

CHECK:SPACING: No space is necessary after a cast
#8015: FILE: fs/ext2/xattr.c:83:
+			(unsigned long long) fsb->blocknr); \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8031: FILE: fs/ext2/xattr.c:97:
+static struct fsblock *ext2_xattr_cache_find(struct inode *,
 						 struct ext2_xattr_header *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8059: FILE: fs/ext2/xattr.c:173:
+	ea_bdebug(fsb, "count=%d, refcount=%d",
+		atomic_read(&(fsb->count)), le32_to_cpu(HDR(fsb)->h_refcount));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around fsb->count
#8059: FILE: fs/ext2/xattr.c:173:
+		atomic_read(&(fsb->count)), le32_to_cpu(HDR(fsb)->h_refcount));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#8061: FILE: fs/ext2/xattr.c:175:
+	if (HDR(fsb)->h_magic != cpu_to_le32(EXT2_XATTR_MAGIC) ||
[...]
 			"inode %ld: bad block %d", inode->i_ino,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8098: FILE: fs/ext2/xattr.c:230:
+		memcpy(buffer, fsb->data + le16_to_cpu(entry->e_value_offs),
 			size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8133: FILE: fs/ext2/xattr.c:273:
+	ea_bdebug(fsb, "count=%d, refcount=%d",
+		atomic_read(&(fsb->count)), le32_to_cpu(HDR(bh)->h_refcount));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around fsb->count
#8133: FILE: fs/ext2/xattr.c:273:
+		atomic_read(&(fsb->count)), le32_to_cpu(HDR(bh)->h_refcount));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#8135: FILE: fs/ext2/xattr.c:275:
+	if (HDR(fsb)->h_magic != cpu_to_le32(EXT2_XATTR_MAGIC) ||
[...]
 			"inode %ld: bad block %d", inode->i_ino,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8215: FILE: fs/ext2/xattr.c:404:
+		ea_bdebug(fsb, "count=%d, refcount=%d",
+			atomic_read(&(fsb->count)),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around fsb->count
#8215: FILE: fs/ext2/xattr.c:404:
+			atomic_read(&(fsb->count)),

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#8414: FILE: include/linux/ext2_fs_sb.h:85:
+	struct fsblock_meta * s_smb;	/* Buffer containing the super block */

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#8417: FILE: include/linux/ext2_fs_sb.h:87:
+	struct fsblock_meta ** s_group_desc;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#8475: FILE: fs/ext2/file.c:41:
+static struct vm_operations_struct ext2_file_vm_ops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8511: FILE: include/linux/fsb_extentmap.h:1:
+#ifndef __FSB_EXTENTMAP_H__

WARNING:LONG_LINE: line length of 164 exceeds 100 columns
#8548: FILE: include/linux/fsb_extentmap.h:38:
+typedef int (*map_fsb_extent_fn)(struct address_space *mapping, loff_t off, int create, sector_t *offset, sector_t *block, unsigned int *size, unsigned int *flags);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#8553: FILE: include/linux/fsb_extentmap.h:43:
+int fsb_ext_unmap_fsblock(struct address_space *mapping, loff_t start, loff_t end, struct fsb_ext_root *root);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#8562: FILE: fs/fsb_extentmap.c:1:
+#include <linux/fsb_extentmap.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8572: FILE: fs/fsb_extentmap.c:11:
+	extent_cache = kmem_cache_create("fsb-extent",
+			sizeof(struct fsb_extent), 0,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#8573: FILE: fs/fsb_extentmap.c:12:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD, NULL);
 			                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#8573: FILE: fs/fsb_extentmap.c:12:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD, NULL);
 			                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#8583: FILE: fs/fsb_extentmap.c:22:
+		struct fsb_extent *ext;
+		ext = rb_entry(node, struct fsb_extent, rb_node);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#8584: FILE: fs/fsb_extentmap.c:23:
+		printk("[%llx-%llx] ", (unsigned long long)ext->offset, (unsigned long long)ext->offset + ext->size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#8584: FILE: fs/fsb_extentmap.c:23:
+		printk("[%llx-%llx] ", (unsigned long long)ext->offset, (unsigned long long)ext->offset + ext->size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#8586: FILE: fs/fsb_extentmap.c:25:
+	printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#8596: FILE: fs/fsb_extentmap.c:35:
+		struct fsb_extent *ext;
+		ext = rb_entry(node, struct fsb_extent, rb_node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8597: FILE: fs/fsb_extentmap.c:36:
+		BUG_ON(ext->offset < curr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8692: FILE: fs/fsb_extentmap.c:131:
+int __fsb_ext_map_fsblock(struct address_space *mapping, loff_t off,
+			struct fsblock *fsblock, int mode,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mode == MAP_BLOCK_READ'
#8706: FILE: fs/fsb_extentmap.c:145:
+	if ((ext->flags & FE_mapped) || ((ext->flags & FE_hole) &&
+						(mode == MAP_BLOCK_READ))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#8706: FILE: fs/fsb_extentmap.c:145:
+	if ((ext->flags & FE_mapped) || ((ext->flags & FE_hole) &&
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8707: FILE: fs/fsb_extentmap.c:146:
+	if ((ext->flags & FE_mapped) || ((ext->flags & FE_hole) &&
+						(mode == MAP_BLOCK_READ))) {

CHECK:BRACES: Unbalanced braces around else statement
#8717: FILE: fs/fsb_extentmap.c:156:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8743: FILE: fs/fsb_extentmap.c:182:
+		ret = mapfn(mapping, off, mode, &new->offset, &new->block,
+						&new->size, &new->flags);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#8799: FILE: fs/fsb_extentmap.c:238:
+			if (ext->offset + ext->size > new->offset + new->size) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#8803: FILE: fs/fsb_extentmap.c:242:
+^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#8819: FILE: fs/fsb_extentmap.c:258:
+						if (tmp->offset == new->offset) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LINE_SPACING: Missing a blank line after declarations
#8836: FILE: fs/fsb_extentmap.c:275:
+			struct fsb_extent *next;
+			n = rb_next(&new->rb_node);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#8905: FILE: fs/fsb_extentmap.c:344:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8906: FILE: fs/fsb_extentmap.c:345:
+	BUG_ON(size != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8907: FILE: fs/fsb_extentmap.c:346:
+	BUG_ON(off >> mapping->host->i_blkbits != offset);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#8910: FILE: fs/fsb_extentmap.c:349:
+		printk("fsblock->flags=%x flags=%x\n", fsblock->flags, flags);

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#8912: FILE: fs/fsb_extentmap.c:351:
+		printk("fsblock->block_nr=%llx block=%llx\n", (unsigned long long)fsblock->block_nr, (unsigned long long)block);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#8912: FILE: fs/fsb_extentmap.c:351:
+		printk("fsblock->block_nr=%llx block=%llx\n", (unsigned long long)fsblock->block_nr, (unsigned long long)block);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#8917: FILE: fs/fsb_extentmap.c:356:
+int fsb_ext_unmap_fsblock(struct address_space *mapping, loff_t start, loff_t end, struct fsb_ext_root *root)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000181048.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 133 errors, 357 warnings, 313 checks, 8633 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000181048.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
