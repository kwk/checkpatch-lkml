WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#36: FILE: drivers/mtd/ubi/scan.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#50: FILE: drivers/mtd/ubi/scan.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#51: FILE: drivers/mtd/ubi/scan.c:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*seb)...) over kmalloc(sizeof(struct ubi_scan_leb)...)
#110: FILE: drivers/mtd/ubi/scan.c:75:
+	seb = kmalloc(sizeof(struct ubi_scan_leb), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*seb)...) over kmalloc(sizeof(struct ubi_scan_leb)...)
#138: FILE: drivers/mtd/ubi/scan.c:103:
+	seb = kmalloc(sizeof(struct ubi_scan_leb), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*seb)...) over kmalloc(sizeof(struct ubi_scan_leb)...)
#163: FILE: drivers/mtd/ubi/scan.c:128:
+	seb = kmalloc(sizeof(struct ubi_scan_leb), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*seb)...) over kmalloc(sizeof(struct ubi_scan_leb)...)
#190: FILE: drivers/mtd/ubi/scan.c:155:
+	seb = kmalloc(sizeof(struct ubi_scan_leb), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sv)...) over kmalloc(sizeof(struct ubi_scan_volume)...)
#331: FILE: drivers/mtd/ubi/scan.c:296:
+	sv = kmalloc(sizeof(struct ubi_scan_volume), GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#335: FILE: drivers/mtd/ubi/scan.c:300:
+	sv->highest_lnum = sv->leb_count = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#381: FILE: drivers/mtd/ubi/scan.c:346:
+	uint32_t data_crc, crc;

CHECK:BRACES: Unbalanced braces around else statement
#416: FILE: drivers/mtd/ubi/scan.c:381:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#445: FILE: drivers/mtd/ubi/scan.c:410:
+			if (err == UBI_IO_BITFLIPS)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#447: FILE: drivers/mtd/ubi/scan.c:412:
+			else {

WARNING:SPLIT_STRING: quoted string split across lines
#449: FILE: drivers/mtd/ubi/scan.c:414:
+				dbg_err("VID of PEB %d header is bad, but it "
+					"was OK earlier", pnum);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#531: FILE: drivers/mtd/ubi/scan.c:496:
+	uint32_t leb_ver;

WARNING:LIKELY_MISUSE: Using unlikely should generally have parentheses around the comparison
#546: FILE: drivers/mtd/ubi/scan.c:511:
+	if (unlikely(IS_ERR(sv)) < 0)

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#546: FILE: drivers/mtd/ubi/scan.c:511:
+	if (unlikely(IS_ERR(sv)) < 0)

WARNING:SPLIT_STRING: quoted string split across lines
#573: FILE: drivers/mtd/ubi/scan.c:538:
+		dbg_scan("this LEB already exists: PEB %d, sqnum %llu, "
+			 "LEB ver %u, EC %d", seb->pnum, seb->sqnum,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#636: FILE: drivers/mtd/ubi/scan.c:601:
+			return 0;
+		} else {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*seb)...) over kmalloc(sizeof(struct ubi_scan_leb)...)
#657: FILE: drivers/mtd/ubi/scan.c:622:
+	seb = kmalloc(sizeof(struct ubi_scan_leb), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'succesfully' may be misspelled - perhaps 'successfully'?
#888: FILE: drivers/mtd/ubi/scan.c:853:
+ * This function returns a zero if the physical eraseblock was succesfully
                                                                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#900: FILE: drivers/mtd/ubi/scan.c:865:
+	if (unlikely(err < 0))
[...]
+	else if (err) {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#912: FILE: drivers/mtd/ubi/scan.c:877:
+	if (unlikely(err < 0))
[...]
+	else if (unlikely(err == UBI_IO_BITFLIPS))
[...]
+	else if (err == UBI_IO_PEB_EMPTY)
[...]
+	else if (err == UBI_IO_BAD_EC_HDR) {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#958: FILE: drivers/mtd/ubi/scan.c:923:
+	if (unlikely(err < 0))
[...]
+	else if (unlikely(err == UBI_IO_BITFLIPS))
[...]
+	else if (unlikely(err == UBI_IO_BAD_VID_HDR ||
[...]
+	} else if (err == UBI_IO_PEB_FREE) {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#963: FILE: drivers/mtd/ubi/scan.c:928:
+	else if (unlikely(err == UBI_IO_BAD_VID_HDR ||
+		 (err == UBI_IO_PEB_FREE && ec_corr))) {

WARNING:SPLIT_STRING: quoted string split across lines
#985: FILE: drivers/mtd/ubi/scan.c:950:
+			ubi_msg("\"delete\" compatible internal volume %d:%d"
+				" found, remove it", vol_id, lnum);

WARNING:SPLIT_STRING: quoted string split across lines
#993: FILE: drivers/mtd/ubi/scan.c:958:
+			ubi_msg("read-only compatible internal volume %d:%d"
+				" found, switch to read-only mode",

WARNING:SPLIT_STRING: quoted string split across lines
#1000: FILE: drivers/mtd/ubi/scan.c:965:
+			ubi_msg("\"preserve\" compatible internal volume %d:%d"
+				" found", vol_id, lnum);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*si)...) over kzalloc(sizeof(struct ubi_scan_info)...)
#1055: FILE: drivers/mtd/ubi/scan.c:1020:
+	si = kzalloc(sizeof(struct ubi_scan_info), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1156: FILE: drivers/mtd/ubi/scan.c:1121:
+		if (this->rb_left)
[...]
+		else if (this->rb_right)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1160: FILE: drivers/mtd/ubi/scan.c:1125:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1207: FILE: drivers/mtd/ubi/scan.c:1172:
+		if (rb->rb_left)
[...]
+		else if (rb->rb_right)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1211: FILE: drivers/mtd/ubi/scan.c:1176:
+		else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1248: FILE: drivers/mtd/ubi/scan.c:1213:
+	uint8_t *buf;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000456184.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 10 warnings, 22 checks, 1478 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000456184.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
