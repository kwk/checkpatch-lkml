WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-mm-for-linus

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: arch/x86/include/asm/acpi.h:121:
+extern void acpi_reserve_wakeup_memory(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: arch/x86/include/asm/acpi.h:161:
+extern int acpi_get_nodes(struct bootnode *physnodes);

CHECK:BIT_MACRO: Prefer using the BIT macro
#260: FILE: arch/x86/include/asm/cache.h:13:
+#define INTERNODE_CACHE_BYTES (1 << INTERNODE_CACHE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(INTERNODE_CACHE_BYTES) over __attribute__((__aligned__(INTERNODE_CACHE_BYTES)))
#268: FILE: arch/x86/include/asm/cache.h:18:
+	__attribute__((__aligned__(INTERNODE_CACHE_BYTES)))		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: arch/x86/include/asm/k8.h:14:
+extern int k8_get_nodes(struct bootnode *nodes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: arch/x86/include/asm/k8.h:15:
+extern int k8_numa_init(unsigned long start_pfn, unsigned long end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#345: FILE: arch/x86/include/asm/k8.h:16:
+extern int k8_scan_nodes(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#372: FILE: arch/x86/include/asm/mpspec.h:87:
+extern void default_find_smp_config(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#394: FILE: arch/x86/include/asm/page_types.h:52:
+extern void initmem_init(unsigned long start_pfn, unsigned long end_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: arch/x86/include/asm/page_types.h:53:
+extern void initmem_init(unsigned long start_pfn, unsigned long end_pfn,
+				int acpi, int k8);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#464: FILE: arch/x86/include/asm/sections.h:5:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#517: FILE: arch/x86/kernel/acpi/sleep.c:83:
+		header->pmode_efer_low = header->pmode_efer_high = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#545: FILE: arch/x86/kernel/acpi/sleep.c:136:
+	mem = find_e820_area(0, 1<<20, WAKEUP_SIZE, PAGE_SIZE);
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#554: FILE: arch/x86/kernel/acpi/sleep.c:142:
+	acpi_realmode = (unsigned long) phys_to_virt(mem);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#621: FILE: arch/x86/kernel/apic/x2apic_uv_x.c:406:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#647: FILE: arch/x86/kernel/cpu/intel.c:266:
+	if (node == NUMA_NO_NODE)
[...]
+	else if (!node_online(node)) {
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#899: FILE: arch/x86/kernel/mpparse.c:674:
+	reserve_early(mpf->physptr, mpf->physptr+size, "MP-table mpc");
 	                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1020: FILE: arch/x86/kernel/setup.c:514:
+		const unsigned long long alignment = 16<<20;	/* 16M */
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1023: FILE: arch/x86/kernel/setup.c:517:
+		crash_base = find_e820_area(alignment, ULONG_MAX, crash_size,
+				 alignment);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: arch/x86/kernel/setup.c:526:
+		start = find_e820_area(crash_base, ULONG_MAX, crash_size,
+				 1<<20);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1039: FILE: arch/x86/kernel/setup.c:526:
+				 1<<20);
 				  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1160: FILE: arch/x86/kernel/tlb_uv.c:823:
+	uv_write_global_mmr64(pnode, UVH_BAU_DATA_CONFIG,
 				      ((apicid << 32) | UV_BAU_MESSAGE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1327: FILE: arch/x86/mm/init_32.c:707:
+void __init initmem_init(unsigned long start_pfn, unsigned long end_pfn,
+				int acpi, int k8)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1350: FILE: arch/x86/mm/init_64.c:572:
+void __init initmem_init(unsigned long start_pfn, unsigned long end_pfn,
+				int acpi, int k8)

CHECK:SPACING: No space is necessary after a cast
#1407: FILE: arch/x86/mm/init_64.c:741:
+	unsigned long end = (unsigned long) &__end_rodata_hpage_align;

CHECK:SPACING: No space is necessary after a cast
#1408: FILE: arch/x86/mm/init_64.c:742:
+	unsigned long text_end = PAGE_ALIGN((unsigned long) &__stop___ex_table);

CHECK:SPACING: No space is necessary after a cast
#1409: FILE: arch/x86/mm/init_64.c:743:
+	unsigned long rodata_end = PAGE_ALIGN((unsigned long) &__end_rodata);

CHECK:SPACING: No space is necessary after a cast
#1410: FILE: arch/x86/mm/init_64.c:744:
+	unsigned long data_start = (unsigned long) &_sdata;

CHECK:SPACING: No space is necessary after a cast
#1420: FILE: arch/x86/mm/init_64.c:769:
+			(unsigned long) page_address(virt_to_page(text_end)),

CHECK:SPACING: No space is necessary after a cast
#1424: FILE: arch/x86/mm/init_64.c:773:
+			(unsigned long) page_address(virt_to_page(rodata_end)),

CHECK:SPACING: No space is necessary after a cast
#1425: FILE: arch/x86/mm/init_64.c:774:
+			(unsigned long) page_address(virt_to_page(data_start)));

WARNING:MISPLACED_INIT: __initdata should be placed after nodes[8]
#1437: FILE: arch/x86/mm/k8topology_64.c:27:
+static struct bootnode __initdata nodes[8];

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after nodes_parsed
#1438: FILE: arch/x86/mm/k8topology_64.c:28:
+static nodemask_t __initdata nodes_parsed = NODE_MASK_NONE;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1485: FILE: arch/x86/mm/k8topology_64.c:87:
+	unsigned numnodes;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1612: FILE: arch/x86/mm/k8topology_64.c:202:
+	BUG_ON(nodes_empty(nodes_parsed));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1654: FILE: arch/x86/mm/numa_32.c:351:
+void __init initmem_init(unsigned long start_pfn, unsigned long end_pfn,
+				int acpi, int k8)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1688: FILE: arch/x86/mm/numa_64.c:320:
+static int __init setup_physnodes(unsigned long start, unsigned long end,
+					int acpi, int k8)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1772: FILE: arch/x86/mm/numa_64.c:409:
+static int __init split_nodes_interleave(u64 addr, u64 max_addr,
+						int nr_phys_nodes, int nr_nodes)

WARNING:SPLIT_STRING: quoted string split across lines
#1799: FILE: arch/x86/mm/numa_64.c:436:
+		pr_err("Not enough memory for each node.  "
+			"NUMA emulation disabled.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1859: FILE: arch/x86/mm/numa_64.c:496:
+			if (setup_node_range(ret++, &physnodes[i].start,
+						end - physnodes[i].start,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1911: FILE: arch/x86/mm/numa_64.c:583:
+static int __init numa_emulation(unsigned long start_pfn,
+			unsigned long last_pfn, int acpi, int k8)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1929: FILE: arch/x86/mm/numa_64.c:599:
+		num_nodes = split_nodes_interleave(addr, max_addr,
+							num_phys_nodes, n);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1940: FILE: arch/x86/mm/numa_64.c:627:
+					if (setup_node_range(num_nodes, &addr,
+						size, max_addr) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1996: FILE: arch/x86/mm/numa_64.c:691:
+void __init initmem_init(unsigned long start_pfn, unsigned long last_pfn,
+				int acpi, int k8)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#2155: FILE: arch/x86/mm/pat.c:1023:
+		debugfs_create_file("pat_memtype_list", S_IRUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2216: FILE: arch/x86/mm/setup_nx.c:43:
+		printk(KERN_NOTICE "Notice: NX (Execute Disable) protection "

WARNING:SPLIT_STRING: quoted string split across lines
#2217: FILE: arch/x86/mm/setup_nx.c:44:
+		printk(KERN_NOTICE "Notice: NX (Execute Disable) protection "
+		       "missing in CPU or disabled in BIOS!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2221: FILE: arch/x86/mm/setup_nx.c:48:
+			printk(KERN_INFO "NX (Execute Disable) protection: "

WARNING:SPLIT_STRING: quoted string split across lines
#2222: FILE: arch/x86/mm/setup_nx.c:49:
+			printk(KERN_INFO "NX (Execute Disable) protection: "
+			       "disabled by kernel command line option\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2224: FILE: arch/x86/mm/setup_nx.c:51:
+			printk(KERN_INFO "NX (Execute Disable) protection: "

WARNING:SPLIT_STRING: quoted string split across lines
#2225: FILE: arch/x86/mm/setup_nx.c:52:
+			printk(KERN_INFO "NX (Execute Disable) protection: "
+			       "active\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2234: FILE: arch/x86/mm/setup_nx.c:56:
+		printk(KERN_NOTICE "Notice: NX (Execute Disable) protection "

WARNING:SPLIT_STRING: quoted string split across lines
#2235: FILE: arch/x86/mm/setup_nx.c:57:
+		printk(KERN_NOTICE "Notice: NX (Execute Disable) protection "
+		       "cannot be enabled: non-PAE kernel!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2301: FILE: arch/x86/mm/srat_64.c:375:
+		e820_register_active_regions(i, nodes[i].start >> PAGE_SHIFT,
+						nodes[i].end >> PAGE_SHIFT);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cache.h> instead of <asm/cache.h>
#2326: FILE: arch/x86/mm/tlb.c:11:
+#include <asm/cache.h>

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039708.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 40 checks, 1937 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039708.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
