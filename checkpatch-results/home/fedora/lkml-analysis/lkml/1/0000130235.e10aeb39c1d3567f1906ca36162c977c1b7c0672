WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
Range-BW is an I/O controller supports the process group-based range bandwidth

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#100: FILE: drivers/md/dm-ioband-ctl.c:827:
TIME_COMPENSATOR), (unsigned long)gp);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: drivers/md/dm-ioband-ctl.c:829:
+			wait_event_lock_irq(gp->c_max_bw_over_waitq, !is_no_io_mode(gp),
+		}

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#171: FILE: drivers/md/dm-ioband.h:137:
+	spinlock_t      c_lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: drivers/md/dm-ioband.h:155:
+extern void range_bw_timeover(unsigned long gp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: drivers/md/dm-ioband.h:156:
+extern void range_bw_timer_register(struct timer_list *ptimer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: drivers/md/dm-ioband.h:157:
+extern void range_bw_timer_register(struct timer_list *ptimer,
+extern int policy_range_bw_init(struct ioband_device *dp, int argc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: drivers/md/dm-ioband.h:157:
+extern int policy_range_bw_init(struct ioband_device *dp, int argc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: drivers/md/dm-ioband.h:157:
+extern void range_bw_timer_register(struct timer_list *ptimer,
char **argv);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: drivers/md/dm-ioband.h:158:
+extern int policy_range_bw_init(struct ioband_device *dp, int argc,
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#218: FILE: drivers/md/dm-ioband-rangebw.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#260: FILE: drivers/md/dm-ioband-rangebw.c:41:
+#define NO_IO_MODE ^I        4$

CHECK:BRACES: braces {} should be used on all arms of this statement
#296: FILE: drivers/md/dm-ioband-rangebw.c:77:
+	if (gp_io_mode == MINBW_IO_MODE)
[...]
+	else if (gp_io_mode == RANGE_IO_MODE)
[...]
+	else if (gp_io_mode == DEFAULT_IO_MODE)
[...]
+	else if (gp_io_mode == NO_IO_MODE) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#355: FILE: drivers/md/dm-ioband-rangebw.c:136:
+	if (gp == dp->g_running_gp) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#357: FILE: drivers/md/dm-ioband-rangebw.c:138:
+		if (gp->c_time_slice_expired == TIME_SLICE_EXPIRED) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#369: FILE: drivers/md/dm-ioband-rangebw.c:150:
+
+	}

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#399: FILE: drivers/md/dm-ioband-rangebw.c:180:
+		if (waitqueue_active(&p->c_max_bw_over_waitq))

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#443: FILE: drivers/md/dm-ioband-rangebw.c:221:
+					if (p->c_io_mode == RANGE_IO_MODE || p->c_io_mode == DEFAULT_IO_MODE) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'valuse' may be misspelled - perhaps 'values'?
#475: FILE: drivers/md/dm-ioband-rangebw.c:253:
+ * Convert the bw valuse to the number of bw token
                   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#491: FILE: drivers/md/dm-ioband-rangebw.c:269:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#507: FILE: drivers/md/dm-ioband-rangebw.c:285:
+	list_for_each_entry(p, &dp->g_groups, c_list) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#519: FILE: drivers/md/dm-ioband-rangebw.c:295:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: drivers/md/dm-ioband-rangebw.c:318:
+	dp->g_total_min_bw_token = convert_bw_to_token(dp->g_min_bw_total,
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#556: FILE: drivers/md/dm-ioband-rangebw.c:331:
+	return;
+}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#576: FILE: drivers/md/dm-ioband-rangebw.c:351:
+
+}

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#586: FILE: drivers/md/dm-ioband-rangebw.c:361:
+	dp->g_carryover = val/dp->g_token_bucket;
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: drivers/md/dm-ioband-rangebw.c:366:
+static int policy_range_bw_param(struct ioband_group *gp, char *cmd,
+{

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#596: FILE: drivers/md/dm-ioband-rangebw.c:370:
+	err = strict_strtol(value, 0, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*gp->c_timer)...) over kmalloc(sizeof(struct timer_list)...)
#640: FILE: drivers/md/dm-ioband-rangebw.c:413:
+	gp->c_timer = kmalloc(sizeof(struct timer_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gp->c_timer"
#641: FILE: drivers/md/dm-ioband-rangebw.c:414:
+	if (gp->c_timer == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "gp->c_timer"
#661: FILE: drivers/md/dm-ioband-rangebw.c:434:
+	if (gp->c_timer != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: drivers/md/dm-ioband-rangebw.c:441:
+static void policy_range_bw_show(struct ioband_group *gp, int *szp,
+					char *result, unsigned int maxlen)

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#736: FILE: drivers/md/dm-ioband-rangebw.c:506:
+	if (waitqueue_active(&group->c_max_bw_over_waitq))

WARNING:TYPO_SPELLING: 'initalize' may be misspelled - perhaps 'initialize'?
#761: FILE: drivers/md/dm-ioband-rangebw.c:531:
+ * g_group_ctr    : To initalize the policy own members of struct ioband_group.
                        ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#773: FILE: drivers/md/dm-ioband-rangebw.c:543:
+int policy_range_bw_init(struct ioband_device *dp,
+					int argc, char **argv)

CHECK:BRACES: braces {} should be used on all arms of this statement
#778: FILE: drivers/md/dm-ioband-rangebw.c:548:
+	if (argc < 1)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#780: FILE: drivers/md/dm-ioband-rangebw.c:550:
+	else {

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#781: FILE: drivers/md/dm-ioband-rangebw.c:551:
+		r = strict_strtol(argv[0], 0, &val);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000130235.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 26 checks, 729 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000130235.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
