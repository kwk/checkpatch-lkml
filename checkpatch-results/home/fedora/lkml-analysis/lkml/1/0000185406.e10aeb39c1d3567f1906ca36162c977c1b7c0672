WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#98: 
 drivers/ide/ide-probe.c               |  474 +++++++++++++++++----------------

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#209: FILE: drivers/ide/Kconfig:514:
+config BLK_DEV_IT8172
+	tristate "IT8172 IDE support"
+	select BLK_DEV_IDEDMA_PCI
+	help
+	  This driver adds support for the IDE controller on the
+	  IT8172 System Controller.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#300: FILE: drivers/ide/alim15x3.c:515:
 static const struct ide_port_info ali15x3_chipset __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#497: FILE: drivers/ide/cmd64x.c:415:
 static const struct ide_port_info cmd64x_chipsets[] __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#653: FILE: drivers/ide/hpt366.c:1454:
 static const struct ide_port_info hpt366_chipsets[] __devinitdata = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq"
#1427: FILE: drivers/ide/ide-io.c:323:
+	if (rq == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#1462: FILE: drivers/ide/ide-io.c:581:
+		drive->hwif->name, (unsigned long) rq);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq"
#1670: FILE: drivers/ide/ide-io.c:805:
+	if (rq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handler"
#1747: FILE: drivers/ide/ide-io.c:915:
+	if (handler == NULL || hwif->req_gen != hwif->req_gen_timer) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1841: FILE: drivers/ide/ide-io.c:956:
+			printk(KERN_WARNING "%s: lost interrupt\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1842: FILE: drivers/ide/ide-io.c:957:
+			printk(KERN_WARNING "%s: lost interrupt\n",
+				drive->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1849: FILE: drivers/ide/ide-io.c:964:
+				startstop = ide_error(drive, "irq timeout",
+					hwif->tp_ops->read_status(hwif));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1921: FILE: drivers/ide/ide-io.c:1021:
+			printk(KERN_ERR "%s: unexpected interrupt, "

WARNING:SPLIT_STRING: quoted string split across lines
#1922: FILE: drivers/ide/ide-io.c:1022:
+			printk(KERN_ERR "%s: unexpected interrupt, "
+				"status=0x%02x, count=%ld\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handler"
#1983: FILE: drivers/ide/ide-io.c:1075:
+	if (handler == NULL || hwif->polling) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2048: FILE: drivers/ide/ide-io.c:1147:
+		BUG_ON(hwif->handler);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2145: FILE: drivers/ide/ide-iops.c:818:
+	BUG_ON(hwif->handler);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2290: FILE: drivers/ide/ide-iops.c:1082:
+	BUG_ON(hwif->handler != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hwif->handler"
#2290: FILE: drivers/ide/ide-iops.c:1082:
+	BUG_ON(hwif->handler != NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2903: FILE: drivers/ide/ide-probe.c:991:
+		printk(KERN_CONT " (serialized)");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2903: FILE: drivers/ide/ide-probe.c:991:
+		printk(KERN_CONT " (serialized)");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#3032: FILE: drivers/ide/ide-probe.c:1273:
+static const u8 ide_hwif_to_major[] =
+	{ IDE0_MAJOR, IDE1_MAJOR, IDE2_MAJOR, IDE3_MAJOR, IDE4_MAJOR,

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!drive"
#3115: FILE: drivers/ide/ide-probe.c:1398:
+		if (drive == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3264: FILE: drivers/ide/ide-probe.c:1626:
+	BUG_ON(in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3265: FILE: drivers/ide/ide-probe.c:1627:
+	BUG_ON(irqs_disabled());

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3285: FILE: drivers/ide/ide-probe.c:1647:
+	blk_unregister_region(MKDEV(hwif->major, 0), MAX_DRIVES<<PARTN_BITS);
 	                                                       ^

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#3510: FILE: drivers/ide/ide-taskfile.c:333:
+		drv = *(struct ide_driver **)rq->rq_disk->private_data;;

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#3783: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3788: FILE: drivers/ide/it8172.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3814: FILE: drivers/ide/it8172.c:27:
+ *  675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#3881: FILE: drivers/ide/it8172.c:94:
+		u8 udma = speed - XFER_UDMA_0;
+		u_speed = udma << (drive->dn * 4);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3899: FILE: drivers/ide/it8172.c:112:
+
+

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#3905: FILE: drivers/ide/it8172.c:118:
+static const struct ide_port_info it8172_port_info __devinitdata = {

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __devinitconst
#3905: FILE: drivers/ide/it8172.c:118:
+static const struct ide_port_info it8172_port_info __devinitdata = {

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#3915: FILE: drivers/ide/it8172.c:128:
+static int __devinit it8172_init_one(struct pci_dev *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3916: FILE: drivers/ide/it8172.c:129:
+static int __devinit it8172_init_one(struct pci_dev *dev,
+					const struct pci_device_id *id)

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#4102: FILE: drivers/ide/ns87415.c:315:
 static const struct ide_port_info ns87415_chipset __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#4117: FILE: drivers/ide/palm_bk3710.c:336:
 static struct ide_port_info __devinitdata palm_bk3710_port_info = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4309: FILE: drivers/ide/qd65xx.c:206:
+	qd_set_timing(drive, qd6500_compute_timing(drive->hwif,
+				active_time, recovery_time));

CHECK:SPACING: No space is necessary after a cast
#4337: FILE: drivers/ide/qd65xx.h:34:
+#define QD_TIMING(drive)	(u8)(((drive)->drive_data) & 0x00ff)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4337: FILE: drivers/ide/qd65xx.h:34:
+#define QD_TIMING(drive)	(u8)(((drive)->drive_data) & 0x00ff)

CHECK:SPACING: No space is necessary after a cast
#4338: FILE: drivers/ide/qd65xx.h:35:
+#define QD_TIMREG(drive)	(u8)((((drive)->drive_data) & 0xff00) >> 8)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4338: FILE: drivers/ide/qd65xx.h:35:
+#define QD_TIMREG(drive)	(u8)((((drive)->drive_data) & 0xff00) >> 8)

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#4383: FILE: drivers/ide/sc1200.c:298:
 static const struct ide_port_info sc1200_chipset __devinitdata = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hwif->dma_ops"
#4548: FILE: drivers/ide/setup-pci.c:380:
+		if (hwif->dma_ops == NULL)

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#4756: FILE: drivers/ide/sl82c105.c:305:
 static const struct ide_port_info sl82c105_chipset __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#4840: FILE: drivers/ide/tc86c001.c:194:
 static const struct ide_port_info tc86c001_chipset __devinitdata = {

CHECK:CAMELCASE: Avoid CamelCase: <TX4939IDE_DMA_Stat>
#4917: FILE: drivers/ide/tx4939ide.c:405:
+	return tx4939ide_readb(base, TX4939IDE_DMA_Stat);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ide_drive_s *' should also have an identifier name
#5076: FILE: include/linux/ide.h:653:
+	ide_startstop_t (*irq_handler)(struct ide_drive_s *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hwif_s *' should also have an identifier name
#5097: FILE: include/linux/ide.h:741:
+	u8	(*dma_sff_read_status)(struct hwif_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#5149: FILE: include/linux/ide.h:854:
+	int (*expiry)(ide_drive_t *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#5154: FILE: include/linux/ide.h:859:
+	spinlock_t lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#5170: FILE: include/linux/ide.h:874:
+	volatile long	host_busy;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#5223: FILE: include/linux/ide.h:1013:
+void ide_proc_register_driver(ide_drive_t *, struct ide_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ide_driver *' should also have an identifier name
#5223: FILE: include/linux/ide.h:1013:
+void ide_proc_register_driver(ide_drive_t *, struct ide_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#5224: FILE: include/linux/ide.h:1014:
+void ide_proc_unregister_driver(ide_drive_t *, struct ide_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ide_driver *' should also have an identifier name
#5224: FILE: include/linux/ide.h:1014:
+void ide_proc_unregister_driver(ide_drive_t *, struct ide_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#5270: FILE: include/linux/ide.h:1160:
+ide_startstop_t ide_error(ide_drive_t *, const char *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#5270: FILE: include/linux/ide.h:1160:
+ide_startstop_t ide_error(ide_drive_t *, const char *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#5270: FILE: include/linux/ide.h:1160:
+ide_startstop_t ide_error(ide_drive_t *, const char *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_hwif_t *' should also have an identifier name
#5337: FILE: include/linux/ide.h:1464:
+u8 ide_dma_sff_read_status(ide_hwif_t *);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#5385: FILE: include/linux/ide.h:1609:
+#define ide_port_for_each_dev(i, dev, port) \
+	for ((i) = 0; ((dev) = (port)->devices[i]) || (i) < MAX_DRIVES; (i)++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#5388: FILE: include/linux/ide.h:1612:
+#define ide_host_for_each_port(i, port, host) \
+	for ((i) = 0; ((port) = (host)->ports[i]) || (i) < MAX_HOST_PORTS; (i)++)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000185406.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 38 warnings, 20 checks, 4621 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000185406.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
