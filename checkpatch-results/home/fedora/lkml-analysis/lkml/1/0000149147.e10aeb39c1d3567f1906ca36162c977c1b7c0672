WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#52: FILE: drivers/spi/Kconfig:154:
+config SPI_OCORES
+	tristate "OpenCores SPI Controller"
+	help
+	  This enables using the OpenCores SPI controller.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#73: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: drivers/spi/spioc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#79: FILE: drivers/spi/spioc.c:2:
+ * linux/drivers/spi/spioc.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#99: FILE: drivers/spi/spioc.c:22:
+#define SPIOC_RX(i)	(i * 4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#100: FILE: drivers/spi/spioc.c:23:
+#define SPIOC_TX(i)	(i * 4)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#106: FILE: drivers/spi/spioc.c:29:
+#define CTRL_LEN(x)	((x < 128) ? x : 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#106: FILE: drivers/spi/spioc.c:29:
+#define CTRL_LEN(x)	((x < 128) ? x : 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#107: FILE: drivers/spi/spioc.c:30:
+#define CTRL_BUSY	(1 <<  8)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#108: FILE: drivers/spi/spioc.c:31:
+#define CTRL_RXNEG	(1 <<  9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#109: FILE: drivers/spi/spioc.c:32:
+#define CTRL_TXNEG	(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#110: FILE: drivers/spi/spioc.c:33:
+#define CTRL_LSB	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#111: FILE: drivers/spi/spioc.c:34:
+#define CTRL_IE		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#112: FILE: drivers/spi/spioc.c:35:
+#define CTRL_ASS	(1 << 13)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#145: FILE: drivers/spi/spioc.c:68:
+	spinlock_t lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#153: FILE: drivers/spi/spioc.c:76:
+static inline void spioc_write(struct spioc *spioc, unsigned offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: drivers/spi/spioc.c:77:
+static inline void spioc_write(struct spioc *spioc, unsigned offset,
+		u32 value)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#168: FILE: drivers/spi/spioc.c:91:
+ * that can be transferred in one go */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 0'
#197: FILE: drivers/spi/spioc.c:120:
+		if ((i == 0) || (rem % 4 == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: drivers/spi/spioc.c:142:
+	spioc->message = list_entry(spioc->queue.next, struct spi_message,
+			queue);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#235: FILE: drivers/spi/spioc.c:158:
+	 * transfer */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'spioc->nx >= transfer->len'
#236: FILE: drivers/spi/spioc.c:159:
+	if (!transfer || (spioc->nx >= transfer->len)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: drivers/spi/spioc.c:162:
+			transfer = list_entry(spioc->message->transfers.next,
+					struct spi_transfer, transfer_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: drivers/spi/spioc.c:169:
+				transfer = list_entry(next,
+						struct spi_transfer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: drivers/spi/spioc.c:240:
+		clkdiv = DIV_ROUND_UP(clk_get_rate(spioc->clk),
+				2 * spi->max_speed_hz) - 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: drivers/spi/spioc.c:301:
+	tasklet_init(&spioc->process_transfers, process_transfers,
+			(unsigned long)spioc);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#382: FILE: drivers/spi/spioc.c:305:
+	spioc->workqueue = create_singlethread_workqueue(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "spioc->message"
#394: FILE: drivers/spi/spioc.c:317:
+	WARN_ON(spioc->message  != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "spioc->transfer"
#395: FILE: drivers/spi/spioc.c:318:
+	WARN_ON(spioc->transfer != NULL);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#422: FILE: drivers/spi/spioc.c:345:
+static int __devinit spioc_probe(struct platform_device *pdev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: drivers/spi/spioc.c:366:
+	res = request_mem_region(res->start, res->end - res->start + 1,
+			res->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: drivers/spi/spioc.c:429:
+	retval = request_irq(irq, spioc_interrupt, IRQF_SHARED, "spioc",
+			master);

WARNING:SPLIT_STRING: quoted string split across lines
#509: FILE: drivers/spi/spioc.c:432:
+		dev_err(&master->dev, "unable to install handler for "
+				"IRQ%d\n", irq);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#545: FILE: drivers/spi/spioc.c:468:
+static int __devexit spioc_remove(struct platform_device *pdev)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#566: FILE: drivers/spi/spioc.c:489:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#571: FILE: drivers/spi/spioc.c:494:
+	return -ENOSYS;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#612: FILE: include/linux/spi/spioc.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#613: FILE: include/linux/spi/spioc.h:2:
+ * linux/include/linux/spi/spioc.h

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149147.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 24 checks, 571 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149147.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
