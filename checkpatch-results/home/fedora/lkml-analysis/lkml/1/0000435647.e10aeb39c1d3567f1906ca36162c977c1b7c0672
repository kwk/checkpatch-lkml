WARNING:TYPO_SPELLING: 'attributs' may be misspelled - perhaps 'attributes'?
#41: 
for the name. The common alignment attributs to the struct can control
                                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'alignmnet' may be misspelled - perhaps 'alignment'?
#42: 
slab alignmnet.
     ^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
kmem_cache_create alone still accepts the specification of SLAB_HWCACHE_ALIGN

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#97: FILE: include/linux/slab.h:42:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#97: FILE: include/linux/slab.h:42:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#97: FILE: include/linux/slab.h:42:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#99: FILE: include/linux/slab.h:44:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#99: FILE: include/linux/slab.h:44:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#99: FILE: include/linux/slab.h:44:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#102: FILE: include/linux/slab.h:47:
+struct kmem_cache *__kmem_cache_create(const char *, size_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#102: FILE: include/linux/slab.h:47:
+struct kmem_cache *__kmem_cache_create(const char *, size_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#102: FILE: include/linux/slab.h:47:
+struct kmem_cache *__kmem_cache_create(const char *, size_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#102: FILE: include/linux/slab.h:47:
+struct kmem_cache *__kmem_cache_create(const char *, size_t, size_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: include/linux/slab.h:48:
+struct kmem_cache *__kmem_cache_create(const char *, size_t, size_t,
+	unsigned long, struct slab_ops *s);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__struct' - possible side-effects?
#112: FILE: include/linux/slab.h:66:
+#define KMEM_CACHE(__struct, __flags) __kmem_cache_create(#__struct,\
 		sizeof(struct __struct), __alignof__(struct __struct),\
+		(__flags), NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__struct' - possible side-effects?
#117: FILE: include/linux/slab.h:70:
+#define KMEM_CACHE_OPS(__struct, __flags, __ops) \
+	__kmem_cache_create(#__struct, sizeof(struct __struct), \
+	__alignof__(struct __struct), (__flags), (__ops))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: include/linux/slab.h:255:
+static inline struct kmem_cache *kmem_cache_create(const char *s,
+		size_t size, size_t align, unsigned long flags,

WARNING:TYPO_SPELLING: 'specificiations' may be misspelled - perhaps 'specifications'?
#148: FILE: include/linux/slab.h:265:
+		/* Do not allow conflicting alignment specificiations */
 		                                      ^^^^^^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#149: FILE: include/linux/slab.h:266:
+		BUG_ON(align);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*so)...) over kzalloc(sizeof(struct slab_ops)...)
#155: FILE: include/linux/slab.h:272:
+		so = kzalloc(sizeof(struct slab_ops), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#253: FILE: mm/slub.c:1765:
+		BUG_ON(slab_ops->ctor || slab_ops->dtor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: mm/slub.c:2371:
+struct kmem_cache *__kmem_cache_create(const char *name, size_t size,
 		size_t align, unsigned long flags,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000435647.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 6 checks, 288 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000435647.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
