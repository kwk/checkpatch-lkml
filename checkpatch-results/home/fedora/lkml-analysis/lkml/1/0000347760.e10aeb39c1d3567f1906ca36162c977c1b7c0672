WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#44: FILE: drivers/net/Kconfig:2640:
+config RIONET_MEMMAP
+	bool "Use memory map instead of message"
+	depends on RIONET
+	default n
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#49: FILE: drivers/net/Kconfig:2645:
+config RIONET_DMA
+	bool "Use DMA for memory mapping data transfer"
+	depends on RIONET_MEMMAP && FSL_DMA
+	default y
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#108: FILE: drivers/net/rionet.c:65:
+	printk(KERN_ERR "ERROR %s - %s: " fmt,  __FILE__, __FUNCTION__, ## arg)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#108: FILE: drivers/net/rionet.c:65:
+	printk(KERN_ERR "ERROR %s - %s: " fmt,  __FILE__, __FUNCTION__, ## arg)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#115: FILE: drivers/net/rionet.c:72:
+#define RIONET_QUEUE_NEXT(x)	(((x) < 127) ? ((x) + 1) : 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#116: FILE: drivers/net/rionet.c:73:
+#define RIONET_QUEUE_INC(x)	(x = RIONET_QUEUE_NEXT(x))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#124: FILE: drivers/net/rionet.c:81:
+	volatile int	enqueue;		/* enqueue point */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#125: FILE: drivers/net/rionet.c:82:
+	volatile int	dequeue;		/* dequeue point */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#152: FILE: drivers/net/rionet.c:115:
+	spinlock_t rio_dma_event_lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: drivers/net/rionet.c:212:
+static int rio_send_mem(struct sk_buff *skb,
+				struct net_device *ndev, struct rio_dev *rdev)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#204: FILE: drivers/net/rionet.c:222:
+		printk("Net frame len more than RIONET max sk_data size!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: drivers/net/rionet.c:227:
+	err = rio_space_find_mem(rnet->mport, rdev->destid, RIONET_DRVID,
+					&rnet->txmem->riores);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#212: FILE: drivers/net/rionet.c:230:
+		printk("err %d\n", err);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#221: FILE: drivers/net/rionet.c:239:
+	if (!(in_be32(&rnet->txbuff->size[enqueue]) & RIONET_SKDATA_EN)
+			&& (RIONET_QUEUE_NEXT(enqueue) != dequeue)) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#241: FILE: drivers/net/rionet.c:259:
+		while (dma_async_memcpy_complete(rnet->txdmachan,
+					tx_cookie, NULL, NULL) == DMA_IN_PROGRESS) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: drivers/net/rionet.c:260:
+		while (dma_async_memcpy_complete(rnet->txdmachan,
+					tx_cookie, NULL, NULL) == DMA_IN_PROGRESS) ;

WARNING:SPACING: space prohibited before semicolon
#242: FILE: drivers/net/rionet.c:260:
+					tx_cookie, NULL, NULL) == DMA_IN_PROGRESS) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: drivers/net/rionet.c:265:
+		out_be32(&rnet->txbuff->size[enqueue],
+						RIONET_SKDATA_EN | skb->len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: drivers/net/rionet.c:267:
+		out_be32(&rnet->txbuff->enqueue,
+						RIONET_QUEUE_NEXT(enqueue));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#252: FILE: drivers/net/rionet.c:270:
+		printk("txbuff is busy!\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#267: FILE: drivers/net/rionet.c:285:
+	int ret = 0;
+	ret = rio_send_mem(skb, ndev, rdev);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#332: FILE: drivers/net/rionet.c:383:
+		if (!(skb = dev_alloc_skb(size + 2)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#348: FILE: drivers/net/rionet.c:399:
+		while (dma_async_memcpy_complete(rnet->rxdmachan,
+				rx_cookie, NULL, NULL) == DMA_IN_PROGRESS) ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: drivers/net/rionet.c:400:
+		while (dma_async_memcpy_complete(rnet->rxdmachan,
+				rx_cookie, NULL, NULL) == DMA_IN_PROGRESS) ;

WARNING:SPACING: space prohibited before semicolon
#349: FILE: drivers/net/rionet.c:400:
+				rx_cookie, NULL, NULL) == DMA_IN_PROGRESS) ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: drivers/net/rionet.c:403:
+		memcpy(skb_put(skb, size),
+				rnet->rxbuff->skdata[dequeue].data,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#369: FILE: drivers/net/rionet.c:420:
+				printk(KERN_WARNING "%s: bad rx packet\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#386: FILE: drivers/net/rionet.c:437:
+		printk(KERN_INFO "%s: inbound memory data receive event\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#395: FILE: drivers/net/rionet.c:446:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: drivers/net/rionet.c:526:
+static enum dma_state_client rionet_dma_event(struct dma_client *client,
+		struct dma_chan *chan, enum dma_state state)

WARNING:LINE_SPACING: Missing a blank line after declarations
#462: FILE: drivers/net/rionet.c:562:
+	int rc = 0;
+	spin_lock_init(&rnet->rio_dma_event_lock);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#482: FILE: drivers/net/rionet.c:593:
+	if (!(rnet->rxmem = rio_request_inb_region(rnet->mport, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: drivers/net/rionet.c:594:
+	if (!(rnet->rxmem = rio_request_inb_region(rnet->mport, NULL,
+		  RIONET_TX_RX_BUFF_SIZE, "rionet_rx_buff", RIONET_DRVID))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#489: FILE: drivers/net/rionet.c:600:
+	if (!(rnet->txmem = rio_prepare_io_mem(rnet->mport, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: drivers/net/rionet.c:601:
+	if (!(rnet->txmem = rio_prepare_io_mem(rnet->mport, NULL,
+				RIONET_TX_RX_BUFF_SIZE, "rionet_tx_buff"))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#544: FILE: drivers/net/rionet.c:770:
+	if (!(rionet_active = (struct rio_dev **)__get_free_pages(GFP_KERNEL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: drivers/net/rionet.c:771:
+	if (!(rionet_active = (struct rio_dev **)__get_free_pages(GFP_KERNEL,
+				mport->sys_size ? __ilog2(sizeof(void *)) + 4

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347760.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 16 warnings, 16 checks, 492 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347760.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
