WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
> > suicidal attributes might need some extra attention but I think they can

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#63: 
likely to contain bugs and definitely needs to be splitted.
                                                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#129: FILE: fs/sysfs/bin.c:24:
+	struct mutex	mutex;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: fs/sysfs/bin.c:33:
+	struct sysfs_dirent * sd = dentry->d_parent->d_fsdata;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: fs/sysfs/bin.c:34:
+	struct kobject * kobj;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#205: FILE: fs/sysfs/bin.c:93:
+	struct sysfs_dirent * sd = dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#206: FILE: fs/sysfs/bin.c:94:
+	struct kobject * kobj;

CHECK:CAMELCASE: Avoid CamelCase: <Error>
#312: FILE: fs/sysfs/bin.c:202:
+		goto Error;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: fs/sysfs/bin.c:221:
+	struct sysfs_dirent * sd = file->f_path.dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#357: FILE: fs/sysfs/dir.c:33:
+void release_sysfs_dirent(struct sysfs_dirent * sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#364: FILE: fs/sysfs/dir.c:40:
+		struct sysfs_symlink * sl = sd->s_element;

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: fs/sysfs/dir.c:41:
+		struct sysfs_symlink * sl = sd->s_element;
+		kfree(sl->link_name);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#384: FILE: fs/sysfs/dir.c:60:
+	BUG_ON(!(sd->s_type & SYSFS_DIR));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#401: FILE: fs/sysfs/dir.c:77:
+	BUG_ON(!(sd->s_type & SYSFS_DIR) || !sdir->kobj);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#410: FILE: fs/sysfs/dir.c:85:
+static struct sysfs_dirent * __sysfs_new_dirent(struct sysfs_dirent *parent_sd,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#411: FILE: fs/sysfs/dir.c:86:
+						void * element)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#461: FILE: fs/sysfs/dir.c:202:
+static int create_dir(struct kobject * kobj, struct dentry * p,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#461: FILE: fs/sysfs/dir.c:202:
+static int create_dir(struct kobject * kobj, struct dentry * p,

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#464: FILE: fs/sysfs/dir.c:205:
+	struct sysfs_ops *ops = NULL;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#517: FILE: fs/sysfs/dir.c:384:
+	struct sysfs_dirent * sd = d->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#518: FILE: fs/sysfs/dir.c:385:
+	struct sysfs_dir * sdir = sd->s_element;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#601: FILE: fs/sysfs/file.c:49:
+struct sysfs_ops subsys_sysfs_ops = {

ERROR:POINTER_LOCATION: "foo				* bar" should be "foo				*bar"
#632: FILE: fs/sysfs/file.c:57:
+	char				* page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: fs/sysfs/file.c:76:
+	struct sysfs_dirent * attr_sd = dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#646: FILE: fs/sysfs/file.c:77:
+	struct sysfs_dirent * sd = dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#647: FILE: fs/sysfs/file.c:78:
+	struct sysfs_dir * sdir = sd->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#651: FILE: fs/sysfs/file.c:80:
+	struct kobject * kobj;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#666: FILE: fs/sysfs/file.c:94:
+	count = sdir->ops->show(kobj,attr,buffer->page);
 	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#666: FILE: fs/sysfs/file.c:94:
+	count = sdir->ops->show(kobj,attr,buffer->page);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#681: FILE: fs/sysfs/file.c:165:
+		retval = fill_read_buffer(file->f_path.dentry,buffer);
 		                                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#689: FILE: fs/sysfs/file.c:222:
+	struct sysfs_dirent * sd = dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#690: FILE: fs/sysfs/file.c:223:
+	struct sysfs_dir * sdir = sd->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#694: FILE: fs/sysfs/file.c:225:
+	struct kobject * kobj;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#701: FILE: fs/sysfs/file.c:232:
+	rc = sdir->ops->store(kobj,attr,buffer->page,count);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#701: FILE: fs/sysfs/file.c:232:
+	rc = sdir->ops->store(kobj,attr,buffer->page,count);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#701: FILE: fs/sysfs/file.c:232:
+	rc = sdir->ops->store(kobj,attr,buffer->page,count);
 	                                            ^

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#783: FILE: fs/sysfs/file.c:297:
+		goto Done;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#794: FILE: fs/sysfs/file.c:306:
+		if (!(inode->i_mode & S_IWUGO) || !sdir->ops->store)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#803: FILE: fs/sysfs/file.c:316:
+		if (!(inode->i_mode & S_IRUGO) || !sdir->ops->show)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#831: FILE: fs/sysfs/file.c:346:
+	struct sysfs_dirent * sd = filp->f_path.dentry->d_parent->d_fsdata;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#872: FILE: fs/sysfs/file.c:398:
+	return POLLERR|POLLPRI;
 	              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#971: FILE: fs/sysfs/symlink.c:14:
+static int object_depth(struct sysfs_dirent * sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#974: FILE: fs/sysfs/symlink.c:16:
+	struct sysfs_dirent * p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#985: FILE: fs/sysfs/symlink.c:25:
+static int object_path_length(struct sysfs_dirent * sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#988: FILE: fs/sysfs/symlink.c:27:
+	struct sysfs_dirent * p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1011: FILE: fs/sysfs/symlink.c:45:
+static int fill_object_path(struct sysfs_dirent * sd, char * buffer, int length)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1011: FILE: fs/sysfs/symlink.c:45:
+static int fill_object_path(struct sysfs_dirent * sd, char * buffer, int length)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1014: FILE: fs/sysfs/symlink.c:47:
+	struct sysfs_dirent * p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1041: FILE: fs/sysfs/symlink.c:70:
+static int sysfs_add_link(struct sysfs_dirent * parent_sd, const char * name,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1041: FILE: fs/sysfs/symlink.c:70:
+static int sysfs_add_link(struct sysfs_dirent * parent_sd, const char * name,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1042: FILE: fs/sysfs/symlink.c:71:
+			  struct sysfs_dirent * target_sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1107: FILE: fs/sysfs/symlink.c:158:
+static int sysfs_get_target_path(struct sysfs_dirent * parent_sd,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1108: FILE: fs/sysfs/symlink.c:159:
+				 struct sysfs_dirent * target_sd, char *path)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1128: FILE: fs/sysfs/symlink.c:175:
+	pr_debug("%s: rc = %d path = '%s'\n", __FUNCTION__, rc, path);

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#1173: FILE: fs/sysfs/sysfs.h:3:
+	struct sysfs_dirent	* s_parent;

ERROR:POINTER_LOCATION: "foo		* bar" should be "foo		*bar"
#1183: FILE: fs/sysfs/sysfs.h:16:
+	struct kobject		* kobj;	/* associated kobj */

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#1184: FILE: fs/sysfs/sysfs.h:17:
+	struct sysfs_ops	* ops;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#1184: FILE: fs/sysfs/sysfs.h:17:
+	struct sysfs_ops	* ops;

ERROR:POINTER_LOCATION: "foo			* bar" should be "foo			*bar"
#1188: FILE: fs/sysfs/sysfs.h:21:
+	char			* link_name;

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#1189: FILE: fs/sysfs/sysfs.h:22:
+	struct sysfs_dirent	* target_sd;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#1194: FILE: fs/sysfs/sysfs.h:27:
+extern struct sysfs_ops subsys_sysfs_ops;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1200: FILE: fs/sysfs/sysfs.h:33:
+extern void release_sysfs_dirent(struct sysfs_dirent * sd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1200: FILE: fs/sysfs/sysfs.h:33:
+extern void release_sysfs_dirent(struct sysfs_dirent * sd);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1201: FILE: fs/sysfs/sysfs.h:34:
+extern struct kobject *sysfs_get_kobj(struct sysfs_dirent *sd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1202: FILE: fs/sysfs/sysfs.h:35:
+extern void sysfs_put_kobj(struct sysfs_dirent *sd);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000450076.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 46 errors, 12 warnings, 7 checks, 1095 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000450076.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
