WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
gregkh-driver-pm-acquire-device-locks-prior-to-suspending.patch that deadlocked

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#83: FILE: drivers/base/core.c:733:
+		dev_warn(dev, "Suspicious %s during suspend\n", __FUNCTION__);

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#174: FILE: drivers/base/core.c:1218:
+ * It can only be called within the scope of a system sleep transition.  In
                                                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#202: FILE: include/linux/device.h:525:
+extern void destroy_suspended_device(struct class *cls, dev_t devt);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: drivers/base/power/power.h:23:
+extern void device_pm_schedule_removal(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#220: FILE: drivers/base/power/power.h:23:
+extern void device_pm_schedule_removal(struct device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: drivers/base/power/power.h:24:
+extern int pm_sleep_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: drivers/base/power/power.h:25:
+extern void pm_sleep_unlock(void);

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#309: FILE: drivers/base/power/main.c:87:
+	 * lead to a deadlock.  In that case we want to print a warning.
 	                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: drivers/base/power/main.c:100:
+			dev_warn(dev, "Suspicious %s during suspend\n",
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#322: FILE: drivers/base/power/main.c:100:
+				__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: drivers/base/power/main.c:126:
+	pr_debug("PM: Preparing for removal: %s:%s\n",
+		dev->bus ? dev->bus->name : "No Bus",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#401: FILE: drivers/base/power/main.c:175:
+		dev_dbg(dev,"EARLY resume\n");
 		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#421: FILE: drivers/base/power/main.c:195:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#539: FILE: drivers/base/power/main.c:285:
+ ^Iwhile (!list_empty(&dpm_locked)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#539: FILE: drivers/base/power/main.c:285:
+ ^Iwhile (!list_empty(&dpm_locked)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: drivers/base/power/main.c:285:
+ ^Iwhile (!list_empty(&dpm_locked)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: drivers/base/power/main.c:286:
+ ^I^Istruct list_head *entry = dpm_locked.prev;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#540: FILE: drivers/base/power/main.c:286:
+ ^I^Istruct list_head *entry = dpm_locked.prev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: drivers/base/power/main.c:286:
+ ^I^Istruct list_head *entry = dpm_locked.prev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: drivers/base/power/main.c:287:
+ ^I^Istruct device *dev = to_device(entry);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#541: FILE: drivers/base/power/main.c:287:
+ ^I^Istruct device *dev = to_device(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: drivers/base/power/main.c:287:
+ ^I^Istruct device *dev = to_device(entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: drivers/base/power/main.c:289:
+ ^I^Ilist_move(entry, &dpm_active);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#543: FILE: drivers/base/power/main.c:289:
+ ^I^Ilist_move(entry, &dpm_active);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: drivers/base/power/main.c:289:
+ ^I^Ilist_move(entry, &dpm_active);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: drivers/base/power/main.c:290:
+ ^I^Iup(&dev->sem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#544: FILE: drivers/base/power/main.c:290:
+ ^I^Iup(&dev->sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: drivers/base/power/main.c:290:
+ ^I^Iup(&dev->sem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: drivers/base/power/main.c:291:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#545: FILE: drivers/base/power/main.c:291:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: drivers/base/power/main.c:291:
+ ^I}$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#688: FILE: drivers/base/power/main.c:393:
+			printk(KERN_ERR "Could not power down device %s: "

WARNING:SPLIT_STRING: quoted string split across lines
#689: FILE: drivers/base/power/main.c:394:
+			printk(KERN_ERR "Could not power down device %s: "
+					"error %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#805: FILE: drivers/base/power/main.c:472:
 			printk(KERN_ERR "Could not suspend device %s: "
+					"error %d%s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#819: FILE: drivers/base/power/main.c:486:
+ ^I^I^Ilist_add(&dev->power.entry, &dpm_off);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#819: FILE: drivers/base/power/main.c:486:
+ ^I^I^Ilist_add(&dev->power.entry, &dpm_off);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: drivers/base/power/main.c:486:
+ ^I^I^Ilist_add(&dev->power.entry, &dpm_off);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338034.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 21 warnings, 9 checks, 843 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338034.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
