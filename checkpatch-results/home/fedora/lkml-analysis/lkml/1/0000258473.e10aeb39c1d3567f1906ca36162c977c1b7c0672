WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#103: FILE: drivers/dma/Kconfig:49:
+config MV_XOR
+	bool "Marvell XOR engine support"
+	depends on PLAT_ORION
+	select ASYNC_CORE
+	select DMA_ENGINE
+	---help---
+	  Enable support for the Marvell XOR engine.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#124: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: drivers/dma/mv_xor.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#143: FILE: drivers/dma/mv_xor.c:15:
+ * this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#144: FILE: drivers/dma/mv_xor.c:16:
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

WARNING:LINE_SPACING: Missing a blank line after declarations
#182: FILE: drivers/dma/mv_xor.c:54:
+	struct mv_xor_desc *hw_desc = desc->hw_desc;
+	return hw_desc->phy_dest_addr;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#189: FILE: drivers/dma/mv_xor.c:61:
+	struct mv_xor_desc *hw_desc = desc->hw_desc;
+	return hw_desc->phy_src_addr[src_idx];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#192: FILE: drivers/dma/mv_xor.c:64:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: drivers/dma/mv_xor.c:69:
+	struct mv_xor_desc *hw_desc = desc->hw_desc;
+	hw_desc->byte_count = byte_count;

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: drivers/dma/mv_xor.c:76:
+	struct mv_xor_desc *hw_desc = desc->hw_desc;
+	BUG_ON(hw_desc->phy_next_desc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: drivers/dma/mv_xor.c:76:
+	BUG_ON(hw_desc->phy_next_desc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#211: FILE: drivers/dma/mv_xor.c:83:
+	struct mv_xor_desc *hw_desc = desc->hw_desc;
+	hw_desc->phy_next_desc = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#223: FILE: drivers/dma/mv_xor.c:95:
+	struct mv_xor_desc *hw_desc = desc->hw_desc;
+	hw_desc->phy_dest_addr = addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: drivers/dma/mv_xor.c:109:
+	struct mv_xor_desc *hw_desc = desc->hw_desc;
+	hw_desc->phy_src_addr[index] = addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#272: FILE: drivers/dma/mv_xor.c:144:
+	u32 val = __raw_readl(XOR_INTR_MASK(chan));
+	val |= XOR_INTR_MASK_VALUE << (chan->idx * 16);

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: drivers/dma/mv_xor.c:151:
+	u32 intr_cause = __raw_readl(XOR_INTR_CAUSE(chan));
+	intr_cause = (intr_cause >> (chan->idx * 16)) & 0xFFFF;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#285: FILE: drivers/dma/mv_xor.c:157:
+	if (intr_cause & ((1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)))
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#285: FILE: drivers/dma/mv_xor.c:157:
+	if (intr_cause & ((1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)))
 	                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#285: FILE: drivers/dma/mv_xor.c:157:
+	if (intr_cause & ((1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)))
 	                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#285: FILE: drivers/dma/mv_xor.c:157:
+	if (intr_cause & ((1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)))
 	                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#285: FILE: drivers/dma/mv_xor.c:157:
+	if (intr_cause & ((1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)))
 	                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#285: FILE: drivers/dma/mv_xor.c:157:
+	if (intr_cause & ((1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)))
 	                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#285: FILE: drivers/dma/mv_xor.c:157:
+	if (intr_cause & ((1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)))
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#285: FILE: drivers/dma/mv_xor.c:157:
+	if (intr_cause & ((1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)))
 	                                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#285: FILE: drivers/dma/mv_xor.c:157:
+	if (intr_cause & ((1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)))
 	                                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#285: FILE: drivers/dma/mv_xor.c:157:
+	if (intr_cause & ((1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)))
 	                                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#285: FILE: drivers/dma/mv_xor.c:157:
+	if (intr_cause & ((1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)))
 	                                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#294: FILE: drivers/dma/mv_xor.c:166:
+	u32 val = (1 << (1 + (chan->idx * 16)));
+	dev_dbg(chan->device->common.dev, "%s, val 0x%08x\n", __func__, val);

WARNING:LINE_SPACING: Missing a blank line after declarations
#301: FILE: drivers/dma/mv_xor.c:173:
+	u32 val = 0xFFFF0000 >> (chan->idx * 16);
+	__raw_writel(val, XOR_INTR_CAUSE(chan));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#306: FILE: drivers/dma/mv_xor.c:178:
+	struct mv_xor_desc_slot *chain_old_tail = list_entry(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: drivers/dma/mv_xor.c:190:
+static void mv_set_mode(struct mv_xor_chan *chan,
+			       enum dma_transaction_type type)

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#334: FILE: drivers/dma/mv_xor.c:206:
+		dev_printk(KERN_ERR, chan->device->common.dev,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: drivers/dma/mv_xor.c:209:
+		BUG();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#384: FILE: drivers/dma/mv_xor.c:256:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#404: FILE: drivers/dma/mv_xor.c:276:
+		struct mv_xor_desc *hw_desc = sw_desc->hw_desc;
+		mv_chan_set_dest_pointer(mv_chan, hw_desc->phy_dest_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: drivers/dma/mv_xor.c:289:
+mv_xor_run_tx_complete_actions(struct mv_xor_desc_slot *desc,
+	struct mv_xor_chan *mv_chan, dma_cookie_t cookie)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#419: FILE: drivers/dma/mv_xor.c:291:
+	BUG_ON(desc->async_tx.cookie < 0);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#428: FILE: drivers/dma/mv_xor.c:300:
+			desc->async_tx.callback(

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#465: FILE: drivers/dma/mv_xor.c:337:
+				 completed_node) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: drivers/dma/mv_xor.c:348:
+mv_xor_clean_slot(struct mv_xor_desc_slot *desc,
+	struct mv_xor_chan *mv_chan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: drivers/dma/mv_xor.c:383:
+	list_for_each_entry_safe(iter, _iter, &mv_chan->chain,
+					chain_node) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'busy == 0'
#537: FILE: drivers/dma/mv_xor.c:409:
+	if ((busy == 0) && !list_empty(&mv_chan->chain)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#539: FILE: drivers/dma/mv_xor.c:411:
+		struct mv_xor_desc_slot *chain_head;
+		chain_head = list_entry(mv_chan->chain.next,

CHECK:SPACING: No space is necessary after a cast
#560: FILE: drivers/dma/mv_xor.c:432:
+	struct mv_xor_chan *chan = (struct mv_xor_chan *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#561: FILE: drivers/dma/mv_xor.c:433:
+	struct mv_xor_chan *chan = (struct mv_xor_chan *) data;
+	__mv_xor_slot_cleanup(chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: drivers/dma/mv_xor.c:438:
+mv_xor_alloc_slots(struct mv_xor_chan *mv_chan, int num_slots,
+		    int slots_per_op)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: drivers/dma/mv_xor.c:454:
+		iter = list_entry(&mv_chan->all_slots,
+			struct mv_xor_desc_slot,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#585: FILE: drivers/dma/mv_xor.c:457:
+	list_for_each_entry_safe_continue(

WARNING:LINE_SPACING: Missing a blank line after declarations
#607: FILE: drivers/dma/mv_xor.c:479:
+			struct mv_xor_desc_slot *last_used = NULL;
+			iter = alloc_start;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: drivers/dma/mv_xor.c:495:
+					iter = list_entry(iter->slot_node.next,
+						struct mv_xor_desc_slot,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#654: FILE: drivers/dma/mv_xor.c:526:
+	mv_chan->common.cookie = desc->async_tx.cookie = cookie;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#677: FILE: drivers/dma/mv_xor.c:549:
+	if (list_empty(&mv_chan->chain))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#679: FILE: drivers/dma/mv_xor.c:551:
+	else {

WARNING:TYPO_SPELLING: 'curren' may be misspelled - perhaps 'current'?
#701: FILE: drivers/dma/mv_xor.c:573:
+			 * and the curren desc is the end of the chain before
 			           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#727: FILE: drivers/dma/mv_xor.c:599:
+	int num_descs_in_pool = plat_data->pool_size/MV_XOR_SLOT_SIZE;
 	                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: drivers/dma/mv_xor.c:602:
+ ^Iidx = mv_chan->slots_allocated;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#730: FILE: drivers/dma/mv_xor.c:602:
+ ^Iidx = mv_chan->slots_allocated;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: drivers/dma/mv_xor.c:602:
+ ^Iidx = mv_chan->slots_allocated;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#734: FILE: drivers/dma/mv_xor.c:606:
+			printk(KERN_INFO "MV XOR Channel only initialized"

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#734: FILE: drivers/dma/mv_xor.c:606:
+		if (!slot) {
+			printk(KERN_INFO "MV XOR Channel only initialized"

WARNING:SPLIT_STRING: quoted string split across lines
#735: FILE: drivers/dma/mv_xor.c:607:
+			printk(KERN_INFO "MV XOR Channel only initialized"
+				" %d descriptor slots", idx);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#738: FILE: drivers/dma/mv_xor.c:610:
+		hw_desc = (char *) mv_chan->device->dma_desc_pool_virt;

CHECK:SPACING: No space is necessary after a cast
#739: FILE: drivers/dma/mv_xor.c:611:
+		slot->hw_desc = (void *) &hw_desc[idx * MV_XOR_SLOT_SIZE];

CHECK:SPACING: No space is necessary after a cast
#746: FILE: drivers/dma/mv_xor.c:618:
+		hw_desc = (char *) mv_chan->device->dma_desc_pool;

CHECK:SPACING: No space is necessary after a cast
#748: FILE: drivers/dma/mv_xor.c:620:
+			(dma_addr_t) &hw_desc[idx * MV_XOR_SLOT_SIZE];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#759: FILE: drivers/dma/mv_xor.c:631:
+		mv_chan->last_used = list_entry(mv_chan->all_slots.next,
+					struct mv_xor_desc_slot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: drivers/dma/mv_xor.c:643:
+mv_xor_prep_dma_memcpy(struct dma_chan *chan, dma_addr_t dest, dma_addr_t src,
+		size_t len, unsigned long flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#783: FILE: drivers/dma/mv_xor.c:655:
+	BUG_ON(unlikely(len > MV_XOR_MAX_BYTE_COUNT));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#822: FILE: drivers/dma/mv_xor.c:694:
+	BUG_ON(unlikely(len > MV_XOR_MAX_BYTE_COUNT));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#840: FILE: drivers/dma/mv_xor.c:712:
+		"%s sw_desc %p async_tx %p \n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#856: FILE: drivers/dma/mv_xor.c:728:
+	BUG_ON(unlikely(len > MV_XOR_MAX_BYTE_COUNT));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#880: FILE: drivers/dma/mv_xor.c:752:
+		"%s sw_desc %p async_tx %p \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#895: FILE: drivers/dma/mv_xor.c:767:
+	list_for_each_entry_safe(iter, _iter, &mv_chan->chain,
+					chain_node) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#904: FILE: drivers/dma/mv_xor.c:776:
+	list_for_each_entry_safe_reverse(

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#967: FILE: drivers/dma/mv_xor.c:839:
+	dev_printk(KERN_ERR, chan->device->common.dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#971: FILE: drivers/dma/mv_xor.c:843:
+	dev_printk(KERN_ERR, chan->device->common.dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#975: FILE: drivers/dma/mv_xor.c:847:
+	dev_printk(KERN_ERR, chan->device->common.dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#979: FILE: drivers/dma/mv_xor.c:851:
+	dev_printk(KERN_ERR, chan->device->common.dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#983: FILE: drivers/dma/mv_xor.c:855:
+	dev_printk(KERN_ERR, chan->device->common.dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#987: FILE: drivers/dma/mv_xor.c:859:
+	dev_printk(KERN_ERR, chan->device->common.dev,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 13)
#994: FILE: drivers/dma/mv_xor.c:866:
+	if (intr_cause & (1 << 4)) {
+	     dev_dbg(chan->device->common.dev,

WARNING:TABSTOP: Statements should start on a tabstop
#997: FILE: drivers/dma/mv_xor.c:869:
+	     return;

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#1000: FILE: drivers/dma/mv_xor.c:872:
+	dev_printk(KERN_ERR, chan->device->common.dev,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1005: FILE: drivers/dma/mv_xor.c:877:
+	BUG();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1040: FILE: drivers/dma/mv_xor.c:912:
+static int __devinit mv_xor_memcpy_self_test(struct mv_xor_device *device)

CHECK:SPACING: No space is necessary after a cast
#1063: FILE: drivers/dma/mv_xor.c:935:
+		((u8 *) src)[i] = (u8)i;

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1085: FILE: drivers/dma/mv_xor.c:957:
+	msleep(1);

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#1089: FILE: drivers/dma/mv_xor.c:961:
+		dev_printk(KERN_ERR, dma_chan->device->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#1099: FILE: drivers/dma/mv_xor.c:971:
+		dev_printk(KERN_ERR, dma_chan->device->dev,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1114: FILE: drivers/dma/mv_xor.c:986:
+static int __devinit

WARNING:LINE_SPACING: Missing a blank line after declarations
#1149: FILE: drivers/dma/mv_xor.c:1021:
+		u8 *ptr = page_address(xor_srcs[src_idx]);
+		for (i = 0; i < PAGE_SIZE; i++)

CHECK:SPACING: No space is necessary after a cast
#1154: FILE: drivers/dma/mv_xor.c:1026:
+		cmp_byte ^= (u8) (1 << src_idx);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1183: FILE: drivers/dma/mv_xor.c:1055:
+	msleep(8);

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#1187: FILE: drivers/dma/mv_xor.c:1059:
+		dev_printk(KERN_ERR, dma_chan->device->dev,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1198: FILE: drivers/dma/mv_xor.c:1070:
+		u32 *ptr = page_address(dest);
+		if (ptr[i] != cmp_word) {

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#1199: FILE: drivers/dma/mv_xor.c:1071:
+			dev_printk(KERN_ERR, dma_chan->device->dev,

WARNING:SPLIT_STRING: quoted string split across lines
#1201: FILE: drivers/dma/mv_xor.c:1073:
+				   "Self-test xor failed compare, disabling."
+				   " index %d, data %x, expected %x\n", i,

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1218: FILE: drivers/dma/mv_xor.c:1090:
+static int __devexit mv_xor_remove(struct platform_device *dev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1228: FILE: drivers/dma/mv_xor.c:1100:
+	dma_free_coherent(&dev->dev, plat_data->pool_size,
+			device->dma_desc_pool_virt, device->dma_desc_pool);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1231: FILE: drivers/dma/mv_xor.c:1103:
+	list_for_each_entry_safe(chan, _chan, &device->common.channels,
+				device_node) {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1239: FILE: drivers/dma/mv_xor.c:1111:
+static int __devinit mv_xor_probe(struct platform_device *pdev)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1248: FILE: drivers/dma/mv_xor.c:1120:
+
+

WARNING:TYPO_SPELLING: 'capabilites' may be misspelled - perhaps 'capabilities'?
#1268: FILE: drivers/dma/mv_xor.c:1140:
+	/* discover transaction capabilites from the platform data */
 	                        ^^^^^^^^^^^

WARNING:SPACING: space prohibited before semicolon
#1290: FILE: drivers/dma/mv_xor.c:1162:
+		dma_dev->max_xor = 8;                  ;

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1290: FILE: drivers/dma/mv_xor.c:1162:
+		dma_dev->max_xor = 8;                  ;

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#1351: FILE: drivers/dma/mv_xor.c:1223:
+	dev_printk(KERN_INFO, &pdev->dev, "Marvell XOR: "

WARNING:SPLIT_STRING: quoted string split across lines
#1352: FILE: drivers/dma/mv_xor.c:1224:
+	dev_printk(KERN_INFO, &pdev->dev, "Marvell XOR: "
+	  "( %s%s%s%s)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1363: FILE: drivers/dma/mv_xor.c:1235:
+	dma_free_coherent(&adev->pdev->dev, plat_data->pool_size,
+			adev->dma_desc_pool_virt, adev->dma_desc_pool);

WARNING:PREFER_DEV_LEVEL: Prefer dev_notice(... to dev_printk(KERN_NOTICE, ...
#1414: FILE: drivers/dma/mv_xor.c:1286:
+	dev_printk(KERN_NOTICE, &pdev->dev, "Marvell shared XOR driver\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msd"
#1443: FILE: drivers/dma/mv_xor.c:1315:
+	if (msd != NULL && msd->dram != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msd->dram"
#1443: FILE: drivers/dma/mv_xor.c:1315:
+	if (msd != NULL && msd->dram != NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1463: FILE: drivers/dma/mv_xor.c:1335:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1479: FILE: drivers/dma/mv_xor.c:1351:
+#if 0

WARNING:RETURN_VOID: void function return statements are not generally useful
#1485: FILE: drivers/dma/mv_xor.c:1357:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1499: FILE: drivers/dma/mv_xor.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1512: FILE: drivers/dma/mv_xor.h:14:
+ * along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1513: FILE: drivers/dma/mv_xor.h:15:
+ * Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#1532: FILE: drivers/dma/mv_xor.h:34:
+#define XOR_CURR_DESC(chan)	(chan->mmr_base + 0x210 + (chan->idx * 4))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1532: FILE: drivers/dma/mv_xor.h:34:
+#define XOR_CURR_DESC(chan)	(chan->mmr_base + 0x210 + (chan->idx * 4))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#1533: FILE: drivers/dma/mv_xor.h:35:
+#define XOR_NEXT_DESC(chan)	(chan->mmr_base + 0x200 + (chan->idx * 4))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1533: FILE: drivers/dma/mv_xor.h:35:
+#define XOR_NEXT_DESC(chan)	(chan->mmr_base + 0x200 + (chan->idx * 4))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#1534: FILE: drivers/dma/mv_xor.h:36:
+#define XOR_BYTE_COUNT(chan)	(chan->mmr_base + 0x220 + (chan->idx * 4))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1534: FILE: drivers/dma/mv_xor.h:36:
+#define XOR_BYTE_COUNT(chan)	(chan->mmr_base + 0x220 + (chan->idx * 4))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#1535: FILE: drivers/dma/mv_xor.h:37:
+#define XOR_DEST_POINTER(chan)	(chan->mmr_base + 0x2B0 + (chan->idx * 4))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1535: FILE: drivers/dma/mv_xor.h:37:
+#define XOR_DEST_POINTER(chan)	(chan->mmr_base + 0x2B0 + (chan->idx * 4))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#1536: FILE: drivers/dma/mv_xor.h:38:
+#define XOR_BLOCK_SIZE(chan)	(chan->mmr_base + 0x2C0 + (chan->idx * 4))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1536: FILE: drivers/dma/mv_xor.h:38:
+#define XOR_BLOCK_SIZE(chan)	(chan->mmr_base + 0x2C0 + (chan->idx * 4))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1537: FILE: drivers/dma/mv_xor.h:39:
+#define XOR_INIT_VALUE_LOW(chan)	(chan->mmr_base + 0x2E0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1538: FILE: drivers/dma/mv_xor.h:40:
+#define XOR_INIT_VALUE_HIGH(chan)	(chan->mmr_base + 0x2E4)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#1540: FILE: drivers/dma/mv_xor.h:42:
+#define XOR_CONFIG(chan)	(chan->mmr_base + 0x10 + (chan->idx * 4))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1540: FILE: drivers/dma/mv_xor.h:42:
+#define XOR_CONFIG(chan)	(chan->mmr_base + 0x10 + (chan->idx * 4))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#1541: FILE: drivers/dma/mv_xor.h:43:
+#define XOR_ACTIVATION(chan)	(chan->mmr_base + 0x20 + (chan->idx * 4))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1541: FILE: drivers/dma/mv_xor.h:43:
+#define XOR_ACTIVATION(chan)	(chan->mmr_base + 0x20 + (chan->idx * 4))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1542: FILE: drivers/dma/mv_xor.h:44:
+#define XOR_INTR_CAUSE(chan)	(chan->mmr_base + 0x30)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1543: FILE: drivers/dma/mv_xor.h:45:
+#define XOR_INTR_MASK(chan)	(chan->mmr_base + 0x40)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1544: FILE: drivers/dma/mv_xor.h:46:
+#define XOR_ERROR_CAUSE(chan)	(chan->mmr_base + 0x50)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1545: FILE: drivers/dma/mv_xor.h:47:
+#define XOR_ERROR_ADDR(chan)	(chan->mmr_base + 0x60)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1558: FILE: drivers/dma/mv_xor.h:60:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1680: FILE: drivers/dma/mv_xor.h:182:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1688: FILE: include/asm-arm/plat-orion/mv_xor.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1714: FILE: include/asm-arm/plat-orion/mv_xor.h:27:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258473.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 66 warnings, 70 checks, 1601 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258473.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
