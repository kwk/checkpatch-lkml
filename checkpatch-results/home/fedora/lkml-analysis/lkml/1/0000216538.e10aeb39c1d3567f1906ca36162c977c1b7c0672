ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#106: FILE: drivers/mtd/onenand/onenand_base.c:12:
<h.rohit@samsung.com>

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#176: FILE: drivers/mtd/onenand/onenand_base.c:222:
+unsigned onenand_get_block(struct mtd_info *mtd, loff_t addr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#177: FILE: drivers/mtd/onenand/onenand_base.c:223:
+			   unsigned *isblkslc)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#180: FILE: drivers/mtd/onenand/onenand_base.c:226:
+	unsigned boundary, blk, die = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#220: FILE: drivers/mtd/onenand/onenand_base.c:283:
+	unsigned slc = 0;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#293: FILE: drivers/mtd/onenand/onenand_base.c:390:
+ * @param mtd ^I^IMTD device structure$

CHECK:BRACES: braces {} should be used on all arms of this statement
#306: FILE: drivers/mtd/onenand/onenand_base.c:403:
+		if (ecc[i] & FLEXONENAND_UNCORRECTABLE_ERROR) {
[...]
+		} else if (ecc[i])
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#358: FILE: drivers/mtd/onenand/onenand_base.c:947:
+	unsigned slc = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#376: FILE: drivers/mtd/onenand/onenand_base.c:965:
+	printk(KERN_DEBUG "Attempting to recover from uncorrectable

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#624: FILE: drivers/mtd/onenand/onenand_base.c:1967:
+		printk(KERN_ERR "onenand_erase: Erase past end of

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#641: FILE: drivers/mtd/onenand/onenand_base.c:1982:
+			printk(KERN_ERR "onenand_erase: Unaligned
 			                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Unaligned>
#641: FILE: drivers/mtd/onenand/onenand_base.c:1982:
+			printk(KERN_ERR "onenand_erase: Unaligned

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: Unbalanced braces around else statement
#645: FILE: drivers/mtd/onenand/onenand_base.c:1985:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#672: FILE: drivers/mtd/onenand/onenand_base.c:2028:
+			printk(KERN_ERR "onenand_erase: Failed erase, block

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mtd->numeraseregions > 1'
#683: FILE: drivers/mtd/onenand/onenand_base.c:2037:
+		if (FLEXONENAND(this) && (mtd->numeraseregions > 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr == mtd->eraseregions[i + 1].offset'
#684: FILE: drivers/mtd/onenand/onenand_base.c:2038:
+			if ((i < (mtd->numeraseregions - 1)) &&
+			    (addr == mtd->eraseregions[i + 1].offset))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 0)
#688: FILE: drivers/mtd/onenand/onenand_base.c:2042:
+			if (len & (block_size - 1)) {
[...]
partitioning

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#693: FILE: drivers/mtd/onenand/onenand_base.c:2046:
+				printk(KERN_ERR "onenand_erase: Unaligned

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#716: FILE: drivers/mtd/onenand/onenand_base.c:2135:
+^I * ^I   with MLC erasesize? For now, it is not advisable to$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#883: FILE: drivers/mtd/onenand/onenand_base.c:2699:
+	ret = onenand_otp_walk(mtd, from, len, &retlen, buf, do_otp_lock,
 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#917: FILE: drivers/mtd/onenand/onenand_base.c:2777:
+	printk(KERN_INFO "%s%sOneNAND%s %dMB %sV 16-bit (0x%02x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: drivers/mtd/onenand/onenand_base.c:2778:
+	printk(KERN_INFO "%s%sOneNAND%s %dMB %sV 16-bit (0x%02x)\n",
+		demuxed ? "" : "Muxed ",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#933: FILE: drivers/mtd/onenand/onenand_base.c:2824:
+	unsigned die, bdry;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#956: FILE: drivers/mtd/onenand/onenand_base.c:2846:
+		printk(KERN_INFO "Die %d boundary: %d%s\n", die,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: drivers/mtd/onenand/onenand_base.c:2847:
+		printk(KERN_INFO "Die %d boundary: %d%s\n", die,
"(Unlocked)");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#968: FILE: drivers/mtd/onenand/onenand_base.c:2857:
+ * ^I^I^I  boundary[], diesize[], chipsize,$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#989: FILE: drivers/mtd/onenand/onenand_base.c:2878:
+	die = ofs = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#992: FILE: drivers/mtd/onenand/onenand_base.c:2881:
+		if (!die || this->boundary[die-1] != maxbdry) {
 		                              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: drivers/mtd/onenand/onenand_base.c:2887:
+ 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: drivers/mtd/onenand/onenand_base.c:2894:
+ 1;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1009: FILE: drivers/mtd/onenand/onenand_base.c:2897:
+		if (this->boundary[die] != maxbdry) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1018: FILE: drivers/mtd/onenand/onenand_base.c:2905:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1026: FILE: drivers/mtd/onenand/onenand_base.c:2913:
+	printk(KERN_INFO "Device has %d eraseregions\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: drivers/mtd/onenand/onenand_base.c:2914:
+	printk(KERN_INFO "Device has %d eraseregions\n",
+	for (i = 0; i < mtd->numeraseregions; i++)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1029: FILE: drivers/mtd/onenand/onenand_base.c:2915:
+		printk(KERN_INFO "[offset: 0x%08x, erasesize: 0x%05x,"

WARNING:SPLIT_STRING: quoted string split across lines
#1030: FILE: drivers/mtd/onenand/onenand_base.c:2916:
+		printk(KERN_INFO "[offset: 0x%08x, erasesize: 0x%05x,"
+			 " numblocks: %04u]\n", mtd->eraseregions[i].offset,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1049: FILE: drivers/mtd/onenand/onenand_base.c:2935:
+static int flexonenand_set_boundary(struct mtd_info *mtd, unsigned die,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1050: FILE: drivers/mtd/onenand/onenand_base.c:2936:
+static int flexonenand_set_boundary(struct mtd_info *mtd, unsigned die,
+						int boundary, int lock)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1060: FILE: drivers/mtd/onenand/onenand_base.c:2946:
+	printk(KERN_INFO "Changing die %d boundary: %d%s\n", die, boundary,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1061: FILE: drivers/mtd/onenand/onenand_base.c:2947:
+	printk(KERN_INFO "Changing die %d boundary: %d%s\n", die, boundary,
+					 lock ? "(Locked)" : "(Unlocked)");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1063: FILE: drivers/mtd/onenand/onenand_base.c:2949:
+		printk(KERN_ERR "Invalid boundary value.\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#1063: FILE: drivers/mtd/onenand/onenand_base.c:2949:
+		printk(KERN_ERR "Invalid boundary value.\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1069: FILE: drivers/mtd/onenand/onenand_base.c:2955:
+		printk(KERN_ERR "Die boundary is locked.\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#1069: FILE: drivers/mtd/onenand/onenand_base.c:2955:
+		printk(KERN_ERR "Die boundary is locked.\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1089: FILE: drivers/mtd/onenand/onenand_base.c:2975:
+		printk(KERN_ERR "Failed PI write for Die %d\n", die);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1096: FILE: drivers/mtd/onenand/onenand_base.c:2982:
+		printk(KERN_ERR "Failed PI update for Die %d\n", die);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1098: FILE: drivers/mtd/onenand/onenand_base.c:2984:
+		printk(KERN_INFO "Done\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1169: FILE: drivers/mtd/onenand/onenand_base.c:3083:
+	if (FLEXONENAND(this)) {
[...]
+	} else
[...]

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1170: FILE: drivers/mtd/onenand/onenand_base.c:3084:
+		unsigned die;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!this->boundary_locked[die]'
#1176: FILE: drivers/mtd/onenand/onenand_base.c:3090:
+			if ((!this->boundary_locked[die]) &&
+			   (boundary[die] >= 0) &&
+			   (boundary[die] != this->boundary[die]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'boundary[die] >= 0'
#1176: FILE: drivers/mtd/onenand/onenand_base.c:3090:
+			if ((!this->boundary_locked[die]) &&
+			   (boundary[die] >= 0) &&
+			   (boundary[die] != this->boundary[die]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'boundary[die] != this->boundary[die]'
#1176: FILE: drivers/mtd/onenand/onenand_base.c:3090:
+			if ((!this->boundary_locked[die]) &&
+			   (boundary[die] >= 0) &&
+			   (boundary[die] != this->boundary[die]))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1177: FILE: drivers/mtd/onenand/onenand_base.c:3091:
+			if ((!this->boundary_locked[die]) &&
+			   (boundary[die] >= 0) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1180: FILE: drivers/mtd/onenand/onenand_base.c:3094:
+				flexonenand_set_boundary(mtd, die,
+						 boundary[die], lock[die]);

CHECK:BRACES: Unbalanced braces around else statement
#1181: FILE: drivers/mtd/onenand/onenand_base.c:3095:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1227: FILE: drivers/mtd/onenand/onenand_bbt.c:63:
+	unsigned slc;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1247: FILE: drivers/mtd/onenand/onenand_bbt.c:110:
+		if (FLEXONENAND(this)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1252: FILE: drivers/mtd/onenand/onenand_bbt.c:115:
+		} else

CHECK:SPACING: No space is necessary after a cast
#1263: FILE: drivers/mtd/onenand/onenand_bbt.c:153:
+	block = (int) (onenand_get_block(mtd, offs, NULL) << 1);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mtd->numeraseregions > 1'
#1429: FILE: drivers/mtd/onenand/onenand_sim.c:345:
+		if (slc && (mtd->numeraseregions > 1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mtd->numeraseregions > 1'
#1434: FILE: drivers/mtd/onenand/onenand_sim.c:350:
+		if (slc && (mtd->numeraseregions > 1))

CHECK:SPACING: No space is necessary after a cast
#1454: FILE: drivers/mtd/onenand/onenand_sim.c:370:
+	if (ONENAND_IS_DDP(this) && block >= this->density_mask) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!CONFIG_FLEXONENAND'
#1503: FILE: drivers/mtd/onenand/onenand_sim.c:500:
+	if (density < 2 && (!CONFIG_FLEXONENAND))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1543: FILE: include/linux/mtd/onenand.h:73:
+ * ^I^I^Iis locked and cannot be changed$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1552: FILE: include/linux/mtd/onenand.h:116:
+	unsigned		dies;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1553: FILE: include/linux/mtd/onenand.h:117:
+	unsigned		boundary[MAX_DIES];

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1554: FILE: include/linux/mtd/onenand.h:118:
+^Iunsigned int ^I^Iboundary_locked[MAX_DIES];$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'this' may be better as '(this)' to avoid precedence issues
#1567: FILE: include/linux/mtd/onenand.h:174:
+#define FLEXONENAND(this)						\
+	(this->device_id & DEVICE_IS_FLEXONENAND)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'this' may be better as '(this)' to avoid precedence issues
#1576: FILE: include/linux/mtd/onenand.h:184:
+#define ONENAND_IS_MLC(this)						\
+	(this->technology & ONENAND_TECHNOLOGY_IS_MLC)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1587: FILE: include/linux/mtd/onenand.h:223:
+unsigned onenand_get_block(struct mtd_info *mtd, loff_t addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1588: FILE: include/linux/mtd/onenand.h:224:
+unsigned onenand_get_block(struct mtd_info *mtd, loff_t addr,
+			 unsigned *isblkslc);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1588: FILE: include/linux/mtd/onenand.h:224:
+			 unsigned *isblkslc);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1600: FILE: include/linux/mtd/onenand_regs.h:70:
+#define DEVICE_IS_FLEXONENAND		(1 << 9)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1612: FILE: include/linux/mtd/onenand_regs.h:92:
+#define ONENAND_TECHNOLOGY_IS_MLC	(1 << 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216538.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 38 warnings, 34 checks, 1459 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216538.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
