CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#50: 
On Mon, 3 Mar 2008, Ilpo Järvinen wrote:
                          ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#52: 
> On Sun, 2 Mar 2008, Ilpo Järvinen wrote:
                            ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
> > >> On Sun, Mar 2, 2008 at 1:38 PM, Ilpo Järvinen <ilpo.jarvinen@helsinki.fi> wrote:

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#56: 
> > >> On Sun, Mar 2, 2008 at 1:38 PM, Ilpo Järvinen <ilpo.jarvinen@helsinki.fi> wrote:
                                             ^

WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#73: 
> > things like this again (as long as one pastes couple of first occuring 
                                                                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/net/tcp.h:275:
+extern void tcp_print_queue(struct sock *sk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/net/tcp.h:276:
+extern int			tcp_verify_wq(struct sock *sk);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tp' - possible side-effects?
#119: FILE: include/net/tcp.h:774:
+#define tcp_verify_left_out(tp)		\
+	do {\
+		int res; \
+		res = tcp_verify_wq((struct sock *)tp); \
+		WARN_ON(res || tcp_left_out(tp) > tp->packets_out); \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#124: FILE: include/net/tcp.h:779:
+	} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tcp_write_queue_head"
#167: FILE: net/ipv4/tcp_input.c:2655:
+	WARN_ON(tcp_write_queue_head(sk) == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#212: FILE: net/ipv4/tcp_ipv4.c:115:
+	char s[50+1];
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#213: FILE: net/ipv4/tcp_ipv4.c:116:
+	char h[50+1];
 	         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#220: FILE: net/ipv4/tcp_ipv4.c:123:
+			printk(KERN_ERR "head %u %p\n", i, skb);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#222: FILE: net/ipv4/tcp_ipv4.c:125:
+			printk(KERN_ERR "skb %u %p\n", i, skb);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#256: FILE: net/ipv4/tcp_ipv4.c:159:
+				printk(KERN_ERR "TCP wq(s) %s\n", s);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#257: FILE: net/ipv4/tcp_ipv4.c:160:
+				printk(KERN_ERR "TCP wq(h) %s\n", h);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#264: FILE: net/ipv4/tcp_ipv4.c:167:
+		s[idx+1] = 0;
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#266: FILE: net/ipv4/tcp_ipv4.c:169:
+		h[idx+1] = 0;
 		     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#267: FILE: net/ipv4/tcp_ipv4.c:170:
+		printk(KERN_ERR "TCP wq(s) %s\n", s);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#268: FILE: net/ipv4/tcp_ipv4.c:171:
+		printk(KERN_ERR "TCP wq(h) %s\n", h);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#270: FILE: net/ipv4/tcp_ipv4.c:173:
+	printk(KERN_ERR "l%u s%u f%u p%u seq: su%u hs%u sn%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: net/ipv4/tcp_ipv4.c:174:
+	printk(KERN_ERR "l%u s%u f%u p%u seq: su%u hs%u sn%u\n",
+		tp->lost_out, tp->sacked_out, tp->fackets_out, tp->packets_out,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fackets == packets'
#290: FILE: net/ipv4/tcp_ipv4.c:193:
+		if ((fackets == packets) && (skb == tp->highest_sack))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb == tp->highest_sack'
#290: FILE: net/ipv4/tcp_ipv4.c:193:
+		if ((fackets == packets) && (skb == tp->highest_sack))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#298: FILE: net/ipv4/tcp_ipv4.c:201:
+				printk(KERN_ERR "Sacked bitmap S+L: %u %u-%u/%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: net/ipv4/tcp_ipv4.c:202:
+				printk(KERN_ERR "Sacked bitmap S+L: %u %u-%u/%u\n",
+					TCP_SKB_CB(skb)->sacked,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fackets == packets'
#310: FILE: net/ipv4/tcp_ipv4.c:213:
+	if ((fackets == packets) && (tp->highest_sack == tcp_send_head(sk)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->highest_sack == tcp_send_head(sk)'
#310: FILE: net/ipv4/tcp_ipv4.c:213:
+	if ((fackets == packets) && (tp->highest_sack == tcp_send_head(sk)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lost != tp->lost_out'
#313: FILE: net/ipv4/tcp_ipv4.c:216:
+	if ((lost != tp->lost_out) ||
+	    (tcp_is_sack(tp) && (sacked != tp->sacked_out)) ||
+	    ((sacked || (tcp_is_sack(tp) && tp->sacked_out)) && !hs_valid) ||
+	    (packets != tp->packets_out) ||
+	    (fackets != tp->fackets_out) ||
+	    tcp_left_out(tp) > tp->packets_out) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sacked != tp->sacked_out'
#313: FILE: net/ipv4/tcp_ipv4.c:216:
+	if ((lost != tp->lost_out) ||
+	    (tcp_is_sack(tp) && (sacked != tp->sacked_out)) ||
+	    ((sacked || (tcp_is_sack(tp) && tp->sacked_out)) && !hs_valid) ||
+	    (packets != tp->packets_out) ||
+	    (fackets != tp->fackets_out) ||
+	    tcp_left_out(tp) > tp->packets_out) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'packets != tp->packets_out'
#313: FILE: net/ipv4/tcp_ipv4.c:216:
+	if ((lost != tp->lost_out) ||
+	    (tcp_is_sack(tp) && (sacked != tp->sacked_out)) ||
+	    ((sacked || (tcp_is_sack(tp) && tp->sacked_out)) && !hs_valid) ||
+	    (packets != tp->packets_out) ||
+	    (fackets != tp->fackets_out) ||
+	    tcp_left_out(tp) > tp->packets_out) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fackets != tp->fackets_out'
#313: FILE: net/ipv4/tcp_ipv4.c:216:
+	if ((lost != tp->lost_out) ||
+	    (tcp_is_sack(tp) && (sacked != tp->sacked_out)) ||
+	    ((sacked || (tcp_is_sack(tp) && tp->sacked_out)) && !hs_valid) ||
+	    (packets != tp->packets_out) ||
+	    (fackets != tp->fackets_out) ||
+	    tcp_left_out(tp) > tp->packets_out) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#319: FILE: net/ipv4/tcp_ipv4.c:222:
+		printk(KERN_ERR "P: %u L: %u vs %u S: %u vs %u F: %u vs %u w: %u-%u (%u)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: net/ipv4/tcp_ipv4.c:223:
+		printk(KERN_ERR "P: %u L: %u vs %u S: %u vs %u F: %u vs %u w: %u-%u (%u)\n",
+			tp->packets_out,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000312486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 22 checks, 304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000312486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
