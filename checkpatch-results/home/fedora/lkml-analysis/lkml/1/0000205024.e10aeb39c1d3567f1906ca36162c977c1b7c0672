WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#61: FILE: fs/notify/Kconfig:40:
+config FANOTIFY
+        bool "Filesystem wide access notification"
+        select SECURITY
+        default y
+        ---help---
+           Say Y here to enable fanotify suport.  fanotify is a system wide
+           file access notification interface.  Events are read from from a
+           single open fd and in doing so a fd is created in the reading process
+           which points to the same data as the one on which the event occured.
+
+           For more information, see <file:Documentation/filesystems/fanotify.txt>
+
+           If unsure, say Y.

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'suport' may be misspelled - perhaps 'support'?
#66: FILE: fs/notify/Kconfig:45:
+           Say Y here to enable fanotify suport.  fanotify is a system wide
                                          ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'from'
#67: FILE: fs/notify/Kconfig:46:
+           file access notification interface.  Events are read from from a

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#69: FILE: fs/notify/Kconfig:48:
+           which points to the same data as the one on which the event occured.
                                                                        ^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#85: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: fs/notify/fanotify.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#105: FILE: fs/notify/fanotify.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:REPEATED_WORD: Possible repeated word: 'very'
#145: FILE: fs/notify/fanotify.c:56:
+	 * SRCU!!  the groups list is very very much read only and the path is

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#161: FILE: fs/notify/fanotify.c:72:
+				/* shit, we OOM'd and now we can't tell, lets hope something else blows up */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#188: FILE: fs/notify/fanotify.c:99:
+__initcall(fanotify_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#195: FILE: fs/notify/fanotify.h:1:
+#ifndef _LINUX_FANOTIFY_PRIVATE_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#200: FILE: fs/notify/fanotify.h:6:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#201: FILE: fs/notify/fanotify.h:7:
+#include <asm/atomic.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: fs/notify/fanotify.h:24:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: fs/notify/fanotify.h:52:
+extern int fanotify_check_notif_queue(struct fanotify_group *group);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: fs/notify/fanotify.h:53:
+extern void fanotify_get_event(struct fanotify_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#248: FILE: fs/notify/fanotify.h:54:
+extern void fanotify_put_event(struct fanotify_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: fs/notify/fanotify.h:55:
+extern int fanotify_add_event_to_notif(struct fanotify_group *group, struct fanotify_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: fs/notify/fanotify.h:56:
+extern struct fanotify_event *remove_event_from_group_notification(struct fanotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: fs/notify/fanotify.h:57:
+extern void fanotify_notification_clear_group(struct fanotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#252: FILE: fs/notify/fanotify.h:58:
+extern struct fanotify_event *create_event(struct file *file, unsigned int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#253: FILE: fs/notify/fanotify.h:59:
+extern struct fanotify_event_holder *alloc_event_holder(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#254: FILE: fs/notify/fanotify.h:60:
+extern void fanotify_destroy_event_holder(struct fanotify_event_holder *holder);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: fs/notify/fanotify.h:61:
+extern __init int fanotify_notification_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#256: FILE: fs/notify/fanotify.h:62:
+extern __init int fanotify_notification_uninit(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#264: FILE: fs/notify/group.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#279: FILE: fs/notify/group.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#299: FILE: fs/notify/group.c:36:
+DEFINE_MUTEX(fanotify_grp_mutex);

CHECK:BRACES: braces {} should be used on all arms of this statement
#316: FILE: fs/notify/group.c:53:
+			if (group_iter->mask == mask) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#319: FILE: fs/notify/group.c:56:
+			} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*group)...) over kmalloc(sizeof(struct fanotify_group)...)
#325: FILE: fs/notify/group.c:62:
+	group = kmalloc(sizeof(struct fanotify_group), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#360: FILE: fs/notify/group.c:97:
+	if (atomic_dec_and_test(&group->refcnt)) {
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#373: FILE: fs/notify/group.c:110:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#380: FILE: fs/notify/notification.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#395: FILE: fs/notify/notification.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#398: FILE: fs/notify/notification.c:19:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#484: FILE: fs/notify/notification.c:105:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#492: FILE: fs/notify/notification.c:113:
+
+

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#508: FILE: fs/notify/notification.c:129:
+	holder = list_first_entry(&group->notification_list, struct fanotify_event_holder, event_list);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#566: FILE: fs/notify/notification.c:187:
+int fanotify_create_event_fd(struct fanotify_group *group, struct fanotify_event_metadata *data, int nonblock)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#585: FILE: fs/notify/notification.c:206:
+		rc = wait_event_interruptible(group->notification_waitq, fanotify_check_notif_queue(group));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#594: FILE: fs/notify/notification.c:215:
+	BUG_ON(!event);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#641: FILE: fs/notify/notification.c:262:
+	event_kmem_cache = kmem_cache_create("fanotify_event", sizeof(struct fanotify_event), 0, SLAB_PANIC, NULL);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#642: FILE: fs/notify/notification.c:263:
+	event_holder_kmem_cache = kmem_cache_create("fanotify_event_holder", sizeof(struct fanotify_event_holder), 0, SLAB_PANIC, NULL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#664: FILE: include/linux/fanotify.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#706: FILE: include/linux/fanotify.h:43:
+	int32_t fd;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#707: FILE: include/linux/fanotify.h:44:
+	uint32_t mask;

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#717: FILE: include/linux/fanotify.h:54:
+#include <asm/atomic.h>

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#727: FILE: include/linux/fanotify.h:64:
+	struct list_head notification_list;	/* list of event_holder this group needs to send to userspace */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#728: FILE: include/linux/fanotify.h:65:
+	wait_queue_head_t notification_waitq;	/* read() on the notification file blocks on this waitq */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#733: FILE: include/linux/fanotify.h:70:
+extern void fanotify(struct file *file, unsigned int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#735: FILE: include/linux/fanotify.h:72:
+extern void fanotify_get_group(struct fanotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#736: FILE: include/linux/fanotify.h:73:
+extern struct fanotify_group *fanotify_find_group(unsigned int group_num, unsigned int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#737: FILE: include/linux/fanotify.h:74:
+extern void fanotify_put_group(struct fanotify_group *group);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#751: FILE: include/linux/fanotify.h:88:
+static inline extern void fanotify_put_group(struct fanotify_group *group)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205024.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 25 warnings, 25 checks, 716 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205024.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
