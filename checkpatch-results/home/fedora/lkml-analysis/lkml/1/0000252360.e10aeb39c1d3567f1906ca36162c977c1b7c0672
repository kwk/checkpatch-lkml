WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#67: FILE: net/sched/Kconfig:321:
+config NET_CLS_CGROUP
+	tristate "Cgroups tc classifier"
+	select NET_CLS
+	---help---
+	  If you say Y here, you will be able to classify packets based on
+	  cgroup membership of the task originating the packet.
+
+	  To compile this code as a module, choose M here: the
+	  module will be called cls_cgroup.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#93: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: net/sched/cls_cgroup.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#99: FILE: net/sched/cls_cgroup.c:2:
+ * net/sched/cls_cgroup.c	Simple packet classifier which can filter

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#100: FILE: net/sched/cls_cgroup.c:3:
+ * ^I^I^I^Ipackets based on the cgroups they belong to.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: net/sched/cls_cgroup.c:37:
+static int cgroup_classify(struct sk_buff *skb, struct tcf_proto *tp,
+			  struct tcf_result *res)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#139: FILE: net/sched/cls_cgroup.c:42:
+	uint32_t cgroup_classid = skb->cgroup_classid;

CHECK:SPACING: No space is necessary after a cast
#154: FILE: net/sched/cls_cgroup.c:57:
+	struct cgroup_head *head = (struct cgroup_head *) tp->root;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!head"
#157: FILE: net/sched/cls_cgroup.c:60:
+	if (head == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#162: FILE: net/sched/cls_cgroup.c:65:
+			l = (unsigned long) f;

WARNING:LINE_SPACING: Missing a blank line after declarations
#176: FILE: net/sched/cls_cgroup.c:79:
+	struct cgroup_head *head = kzalloc(sizeof(*head), GFP_KERNEL);
+	if (head == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!head"
#176: FILE: net/sched/cls_cgroup.c:79:
+	if (head == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: net/sched/cls_cgroup.c:89:
+static inline void cgroup_delete_filter(struct tcf_proto *tp,
+				       struct cgroup_filter *f)

CHECK:SPACING: No space is necessary after a cast
#194: FILE: net/sched/cls_cgroup.c:97:
+	struct cgroup_head *head = (struct cgroup_head *) xchg(&tp->root, NULL);

CHECK:SPACING: No space is necessary after a cast
#207: FILE: net/sched/cls_cgroup.c:110:
+	struct cgroup_head *head = (struct cgroup_head *) tp->root;

CHECK:SPACING: No space is necessary after a cast
#208: FILE: net/sched/cls_cgroup.c:111:
+	struct cgroup_filter *t, *f = (struct cgroup_filter *) arg;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: net/sched/cls_cgroup.c:127:
+static inline int cgroup_set_parms(struct tcf_proto *tp,
+			unsigned long base,

CHECK:BRACES: braces {} should be used on all arms of this statement
#229: FILE: net/sched/cls_cgroup.c:132:
+	if (tb[TCA_CGROUP_MASK]) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#233: FILE: net/sched/cls_cgroup.c:136:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#236: FILE: net/sched/cls_cgroup.c:139:
+	if (tb[TCA_CGROUP_VALUE]) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#240: FILE: net/sched/cls_cgroup.c:143:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#243: FILE: net/sched/cls_cgroup.c:146:
+	if (tb[TCA_CGROUP_CLASSID]) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#248: FILE: net/sched/cls_cgroup.c:151:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: net/sched/cls_cgroup.c:159:
+static int cgroup_change(struct tcf_proto *tp, unsigned long base, u32 handle,
+				struct nlattr **tca, unsigned long *arg)

CHECK:SPACING: No space is necessary after a cast
#259: FILE: net/sched/cls_cgroup.c:162:
+	struct cgroup_head *head = (struct cgroup_head *) tp->root;

CHECK:SPACING: No space is necessary after a cast
#261: FILE: net/sched/cls_cgroup.c:164:
+	struct cgroup_filter *f = (struct cgroup_filter *) *arg;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tca[TCA_OPTIONS]"
#263: FILE: net/sched/cls_cgroup.c:166:
+	if (tca[TCA_OPTIONS] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f"
#269: FILE: net/sched/cls_cgroup.c:172:
+	if (f != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#276: FILE: net/sched/cls_cgroup.c:179:
+		if (f == NULL)

CHECK:SPACING: No space is necessary after a cast
#303: FILE: net/sched/cls_cgroup.c:206:
+	struct cgroup_head *head = (struct cgroup_head *) tp->root;

CHECK:SPACING: No space is necessary after a cast
#310: FILE: net/sched/cls_cgroup.c:213:
+		if (arg->fn(tp, (unsigned long) f, arg) < 0) {

WARNING:TYPO_SPELLING: 'Retreive' may be misspelled - perhaps 'Retrieve'?
#319: FILE: net/sched/cls_cgroup.c:222:
+/* Retreive current settings in the filter */
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: net/sched/cls_cgroup.c:224:
+static int cgroup_dump(struct tcf_proto *tp, unsigned long fh,
+		      struct sk_buff *skb, struct tcmsg *t)

CHECK:SPACING: No space is necessary after a cast
#323: FILE: net/sched/cls_cgroup.c:226:
+	struct cgroup_filter *f = (struct cgroup_filter *) fh;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#326: FILE: net/sched/cls_cgroup.c:229:
+	if (f == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nest"
#332: FILE: net/sched/cls_cgroup.c:235:
+	if (nest == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000252360.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 29 checks, 318 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000252360.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
