WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#144: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#149: FILE: checkpoint/files.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#171: FILE: checkpoint/files.c:23:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#188: FILE: checkpoint/files.c:40:
+	BUG_ON(!buf);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#270: FILE: checkpoint/files.c:122:
+	fds = krealloc(fds, tot * sizeof(*fds), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#336: FILE: checkpoint/files.c:188:
+	struct file *file = (struct file *) ptr;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#463: FILE: checkpoint/files.c:315:
+	return do_checkpoint_file_table(ctx, (struct files_struct *) ptr);

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#515: FILE: checkpoint/files.c:367:
+		ckpt_write_err(ctx, "TE", "file removed", -EBUSY, file);
 		                     ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#558: FILE: checkpoint/files.c:410:
+		ckpt_write_err(ctx, "TE", "files_struct missing", -EBUSY);
 		                     ^^

CHECK:SPACING: No space is necessary after a cast
#585: FILE: checkpoint/objhash.c:69:
+	atomic_inc(&((struct files_struct *) ptr)->count);

CHECK:SPACING: No space is necessary after a cast
#591: FILE: checkpoint/objhash.c:75:
+	put_files_struct((struct files_struct *) ptr);

CHECK:SPACING: No space is necessary after a cast
#596: FILE: checkpoint/objhash.c:80:
+	return atomic_read(&((struct files_struct *) ptr)->count);

CHECK:SPACING: No space is necessary after a cast
#601: FILE: checkpoint/objhash.c:85:
+	get_file((struct file *) ptr);

CHECK:SPACING: No space is necessary after a cast
#607: FILE: checkpoint/objhash.c:91:
+	fput((struct file *) ptr);

CHECK:SPACING: No space is necessary after a cast
#612: FILE: checkpoint/objhash.c:96:
+	return atomic_long_read(&((struct file *) ptr)->f_count);

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#660: FILE: checkpoint/process.c:116:
+		ckpt_write_err(ctx, "TE", "files_struct", files_objref);
 		                     ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#739: FILE: include/linux/checkpoint.h:73:
+extern char *ckpt_fill_fname(struct path *path, struct path *root,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#750: FILE: include/linux/checkpoint.h:144:
+extern int ckpt_collect_file_table(struct ckpt_ctx *ctx, struct task_struct *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#751: FILE: include/linux/checkpoint.h:145:
+extern int checkpoint_obj_file_table(struct ckpt_ctx *ctx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#753: FILE: include/linux/checkpoint.h:147:
+extern int checkpoint_file_table(struct ckpt_ctx *ctx, void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#756: FILE: include/linux/checkpoint.h:150:
+extern int checkpoint_fname(struct ckpt_ctx *ctx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#758: FILE: include/linux/checkpoint.h:152:
+extern int ckpt_collect_file(struct ckpt_ctx *ctx, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#759: FILE: include/linux/checkpoint.h:153:
+extern int checkpoint_file(struct ckpt_ctx *ctx, void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#761: FILE: include/linux/checkpoint.h:155:
+extern int checkpoint_file_common(struct ckpt_ctx *ctx, struct file *file,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#815: FILE: include/linux/checkpoint_hdr.h:172:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#828: FILE: include/linux/checkpoint_hdr.h:199:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#836: FILE: include/linux/checkpoint_hdr.h:207:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#853: FILE: include/linux/checkpoint_hdr.h:224:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#857: FILE: include/linux/checkpoint_hdr.h:228:
+} __attribute__((aligned(8)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#892: FILE: include/linux/fs.h:2320:
+extern int generic_file_checkpoint(struct ckpt_ctx *ctx, struct file *file);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068260.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 18 checks, 739 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068260.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
