WARNING:TYPO_SPELLING: 'assignement' may be misspelled - perhaps 'assignment'?
#31: 
assignement of timer functionality is delegated to the core framework
^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'evalution' may be misspelled - perhaps 'evaluation'?
#32: 
code and replaces the compile and runtime evalution in
                                          ^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
[ fixes based on review feedback from Arjan van de Ven <arjan@infradead.org> ]

WARNING:TYPO_SPELLING: 'resulution' may be misspelled - perhaps 'resolution'?
#82: FILE: Documentation/kernel-parameters.txt:772:
+			systems for high resulution timers and dynticks.
 			                 ^^^^^^^^^^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#149: FILE: arch/i386/kernel/apic.c:63:
+static int enable_local_apic_timer __initdata = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#182: FILE: arch/i386/kernel/apic.c:93:
+};
+static DEFINE_PER_CPU(struct clock_event_device, lapic_events);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#226: FILE: arch/i386/kernel/apic.c:258:
+		apic_write_around(APIC_TMICT, clocks/APIC_DIVISOR);
 		                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'initilized' may be misspelled - perhaps 'initialized'?
#283: FILE: arch/i386/kernel/apic.c:308:
+ * Setup the local APIC timer for this CPU. Copy the initilized values
                                                      ^^^^^^^^^^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#286: FILE: arch/i386/kernel/apic.c:311:
+static void __devinit setup_APIC_timer(void)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#321: FILE: arch/i386/kernel/apic.c:389:
+	lapic_clockevent.mult = div_sc(tt1-tt2, TICK_NSEC * LOOPS, 32);
 	                                  ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#358: FILE: arch/i386/kernel/apic.c:429:
 void __devinit setup_secondary_APIC_clock(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#460: FILE: arch/i386/kernel/apic.c:455:
+		printk(KERN_WARNING

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#555: FILE: arch/i386/kernel/apic.c:1132:
+}
+early_param("lapictimer", apic_enable_lapic_timer);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#605: FILE: arch/i386/kernel/hpet.c:22:
+static void __iomem * hpet_virt_address;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#622: FILE: arch/i386/kernel/hpet.c:39:
+static int __init hpet_setup(char* str)

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#630: FILE: arch/i386/kernel/hpet.c:47:
+__setup("hpet=", hpet_setup);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#664: FILE: arch/i386/kernel/hpet.c:81:
+	memset(&hd, 0, sizeof (hd));

CHECK:CAMELCASE: Avoid CamelCase: <Tn_INT_ROUTE_CNF_MASK>
#679: FILE: arch/i386/kernel/hpet.c:96:
+		hd.hd_irq[i] = (timer->hpet_config & Tn_INT_ROUTE_CNF_MASK) >>

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Tn_INT_ROUTE_CNF_SHIFT>
#680: FILE: arch/i386/kernel/hpet.c:97:
+			Tn_INT_ROUTE_CNF_SHIFT;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#684: FILE: arch/i386/kernel/hpet.c:101:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#736: FILE: arch/i386/kernel/hpet.c:153:
+	uint64_t delta;

ERROR:SPACING: space required before the open parenthesis '('
#738: FILE: arch/i386/kernel/hpet.c:155:
+	switch(mode) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#740: FILE: arch/i386/kernel/hpet.c:157:
+		delta = ((uint64_t)(NSEC_PER_SEC/HZ)) * hpet_clockevent.mult;
 		                                ^

CHECK:SPACING: No space is necessary after a cast
#743: FILE: arch/i386/kernel/hpet.c:160:
+		cmp = now + (unsigned long) delta;

CHECK:SPACING: No space is necessary after a cast
#755: FILE: arch/i386/kernel/hpet.c:172:
+		hpet_writel((unsigned long) delta, HPET_T0_CMP);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#783: FILE: arch/i386/kernel/hpet.c:200:
+	return ((long)(hpet_readl(HPET_COUNTER) - cnt ) > 0);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#792: FILE: arch/i386/kernel/hpet.c:209:
+	uint64_t hpet_freq;

CHECK:SPACING: No space is necessary after a cast
#813: FILE: arch/i386/kernel/hpet.c:230:
+	hpet_clockevent.mult = div_sc((unsigned long) hpet_freq,

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#846: FILE: arch/i386/kernel/hpet.c:263:
+		hpet_clockevent.cpumask =cpumask_of_cpu(0);
 		                        ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#960: FILE: arch/i386/kernel/hpet.c:366:
+		uint64_t clc;

CHECK:SPACING: No space is necessary after a cast
#962: FILE: arch/i386/kernel/hpet.c:368:
+		clc = (uint64_t) hpet_clockevent.mult * NSEC_PER_SEC;

CHECK:SPACING: No space is necessary after a cast
#964: FILE: arch/i386/kernel/hpet.c:370:
+		hpet_default_delta = (unsigned long) clc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1032: FILE: arch/i386/kernel/hpet.c:438:
+	uint64_t clc;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1037: FILE: arch/i386/kernel/hpet.c:443:
+	if (freq <= DEFAULT_RTC_INT_FREQ)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1039: FILE: arch/i386/kernel/hpet.c:445:
+	else {

CHECK:SPACING: No space is necessary after a cast
#1040: FILE: arch/i386/kernel/hpet.c:446:
+		clc = (uint64_t) hpet_clockevent.mult * NSEC_PER_SEC;

CHECK:SPACING: No space is necessary after a cast
#1043: FILE: arch/i386/kernel/hpet.c:449:
+		hpet_pie_delta = (unsigned long) clc;

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#1083: FILE: arch/i386/kernel/hpet.c:489:
+		if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1084: FILE: arch/i386/kernel/hpet.c:490:
+			printk(KERN_WARNING "rtc: lost %d interrupts\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1085: FILE: arch/i386/kernel/hpet.c:491:
+			printk(KERN_WARNING "rtc: lost %d interrupts\n",
+				lost_ints);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1111: FILE: arch/i386/kernel/hpet.c:517:
+	if (hpet_rtc_flags & RTC_PIE &&
[...]
+			rtc_int_flag |= RTC_AF;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr_time.tm_sec == hpet_alarm_time.tm_sec'
#1111: FILE: arch/i386/kernel/hpet.c:517:
+	if (hpet_rtc_flags & RTC_PIE &&
+	    (curr_time.tm_sec == hpet_alarm_time.tm_sec) &&
+	    (curr_time.tm_min == hpet_alarm_time.tm_min) &&
+	    (curr_time.tm_hour == hpet_alarm_time.tm_hour))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr_time.tm_min == hpet_alarm_time.tm_min'
#1111: FILE: arch/i386/kernel/hpet.c:517:
+	if (hpet_rtc_flags & RTC_PIE &&
+	    (curr_time.tm_sec == hpet_alarm_time.tm_sec) &&
+	    (curr_time.tm_min == hpet_alarm_time.tm_min) &&
+	    (curr_time.tm_hour == hpet_alarm_time.tm_hour))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr_time.tm_hour == hpet_alarm_time.tm_hour'
#1111: FILE: arch/i386/kernel/hpet.c:517:
+	if (hpet_rtc_flags & RTC_PIE &&
+	    (curr_time.tm_sec == hpet_alarm_time.tm_sec) &&
+	    (curr_time.tm_min == hpet_alarm_time.tm_min) &&
+	    (curr_time.tm_hour == hpet_alarm_time.tm_hour))

ERROR:SPACING: space required before the open parenthesis '('
#1165: FILE: arch/i386/kernel/i8253.c:40:
+	switch(mode) {

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1169: FILE: arch/i386/kernel/i8253.c:44:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1170: FILE: arch/i386/kernel/i8253.c:45:
+		outb_p(LATCH & 0xff , PIT_CH0);	/* LSB */
 		                    ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1171: FILE: arch/i386/kernel/i8253.c:46:
+		udelay(10);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1172: FILE: arch/i386/kernel/i8253.c:47:
+		outb(LATCH >> 8 , PIT_CH0);	/* MSB */
 		                ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1180: FILE: arch/i386/kernel/i8253.c:55:
+		udelay(10);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1196: FILE: arch/i386/kernel/i8253.c:71:
+	outb_p(delta & 0xff , PIT_CH0);	/* LSB */
 	                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1197: FILE: arch/i386/kernel/i8253.c:72:
+	outb(delta >> 8 , PIT_CH0);	/* MSB */
 	                ^

WARNING:TYPO_SPELLING: 'capabilites' may be misspelled - perhaps 'capabilities'?
#1207: FILE: arch/i386/kernel/i8253.c:82:
+ * The profiling and update capabilites are switched off once the local apic is
                             ^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2057: FILE: include/asm-i386/hpet.h:94:
+extern int is_hpet_enabled(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2069: FILE: include/asm-i386/hpet.h:104:
+extern int hpet_enable(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475242.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 13 warnings, 31 checks, 1555 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475242.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
