WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: include/linux/syaoran.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#44: FILE: include/linux/syaoran.h:2:
+ * include/linux/syaoran.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#89: FILE: include/linux/syaoran.h:47:
+#define list_for_each_cookie(pos, cookie, head)				\
+	for (({ if (!cookie)						\
+				     cookie = head; }), pos = (cookie)->next; \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cookie' - possible side-effects?
#89: FILE: include/linux/syaoran.h:47:
+#define list_for_each_cookie(pos, cookie, head)				\
+	for (({ if (!cookie)						\
+				     cookie = head; }), pos = (cookie)->next; \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = pos->next)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cookie' may be better as '(cookie)' to avoid precedence issues
#89: FILE: include/linux/syaoran.h:47:
+#define list_for_each_cookie(pos, cookie, head)				\
+	for (({ if (!cookie)						\
+				     cookie = head; }), pos = (cookie)->next; \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#89: FILE: include/linux/syaoran.h:47:
+#define list_for_each_cookie(pos, cookie, head)				\
+	for (({ if (!cookie)						\
+				     cookie = head; }), pos = (cookie)->next; \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL);	\
+	     (cookie) = pos, pos = pos->next)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#90: FILE: include/linux/syaoran.h:48:
+	for (({ if (!cookie)						\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#115: FILE: include/linux/syaoran.h:73:
+static int (*org_blkdev_open) (struct inode *inode, struct file *filp);
                                                                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: Unnecessary space before function pointer arguments
#115: FILE: include/linux/syaoran.h:73:
+static int (*org_blkdev_open) (struct inode *inode, struct file *filp);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#116: FILE: include/linux/syaoran.h:74:
+static struct file_operations wrapped_def_blk_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#118: FILE: include/linux/syaoran.h:76:
+static int wrapped_blkdev_open(struct inode *inode, struct file *filp)
                                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#120: FILE: include/linux/syaoran.h:78:
+	int error = org_blkdev_open(inode, filp);
 	                                   ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#121: FILE: include/linux/syaoran.h:79:
+	int error = org_blkdev_open(inode, filp);
+	if (error != -ENXIO)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#127: FILE: include/linux/syaoran.h:85:
+static int (*org_chrdev_open) (struct inode *inode, struct file *filp);
                                                                  ^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#127: FILE: include/linux/syaoran.h:85:
+static int (*org_chrdev_open) (struct inode *inode, struct file *filp);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#128: FILE: include/linux/syaoran.h:86:
+static struct file_operations wrapped_def_chr_fops;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#130: FILE: include/linux/syaoran.h:88:
+static int wrapped_chrdev_open(struct inode *inode, struct file *filp)
                                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#132: FILE: include/linux/syaoran.h:90:
+	int error = org_chrdev_open(inode, filp);
 	                                   ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#133: FILE: include/linux/syaoran.h:91:
+	int error = org_chrdev_open(inode, filp);
+	if (error != -ENXIO)

WARNING:LINE_SPACING: Missing a blank line after declarations
#144: FILE: include/linux/syaoran.h:102:
+	const int len = name ? strlen(name) : 0;
+	mutex_lock(&base->d_inode->i_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#164: FILE: include/linux/syaoran.h:122:
+	int error = PTR_ERR(dentry);
+	if (!IS_ERR(dentry)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#184: FILE: include/linux/syaoran.h:142:
+	int error;
+	switch (mode & S_IFMT) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: include/linux/syaoran.h:174:
+	int error = PTR_ERR(dentry);
+	if (!IS_ERR(dentry)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#241: FILE: include/linux/syaoran.h:199:
+	bool first = true;
+	while (*sp && (*sp <= ' ' || *sp >= 127))

WARNING:LINE_SPACING: Missing a blank line after declarations
#262: FILE: include/linux/syaoran.h:220:
+	char e;
+	if (!cp)

CHECK:SPACING: No space is necessary after a cast
#282: FILE: include/linux/syaoran.h:240:
+		*(unsigned char *) cp++ = (unsigned char)

CHECK:SPACING: No space is necessary after a cast
#283: FILE: include/linux/syaoran.h:241:
+			(((unsigned char) (c - '0') << 6)

CHECK:SPACING: No space is necessary after a cast
#284: FILE: include/linux/syaoran.h:242:
+			 + ((unsigned char) (d - '0') << 3)

CHECK:SPACING: No space is necessary after a cast
#285: FILE: include/linux/syaoran.h:243:
+			 + (unsigned char) (e - '0'));

WARNING:LINE_SPACING: Missing a blank line after declarations
#294: FILE: include/linux/syaoran.h:252:
+	char *cp = kzalloc(len, GFP_KERNEL);
+	if (cp)

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#312: FILE: include/linux/syaoran.h:270:
+__setup("SYAORAN=", syaoran_setup);

CHECK:SPACING: No space is necessary after a cast
#372: FILE: include/linux/syaoran.h:330:
+		(struct syaoran_sb_info *) sb->s_fs_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#374: FILE: include/linux/syaoran.h:332:
+	struct dev_entry *entry;
+	if (!info)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#385: FILE: include/linux/syaoran.h:343:
+	/*
+	  printk(KERN_DEBUG "<%s> <%s> <%s> <%s> <%s> <%s> <%s> <%s>\n",

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#463: FILE: include/linux/syaoran.h:421:
+		const int len = strlen(entry->name);
+		if (len && entry->name[len - 1] == '/')

WARNING:LINE_SPACING: Missing a blank line after declarations
#489: FILE: include/linux/syaoran.h:447:
+	struct dev_entry *tmp;
+	if (!sb)

CHECK:SPACING: No space is necessary after a cast
#491: FILE: include/linux/syaoran.h:449:
+	info = (struct syaoran_sb_info *) sb->s_fs_info;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#505: FILE: include/linux/syaoran.h:463:
+	printk(KERN_INFO "%s: Unused memory freed.\n", __func__);

WARNING:LINE_SPACING: Missing a blank line after declarations
#515: FILE: include/linux/syaoran.h:473:
+	int error = -ENOMEM;
+	if (!file)

CHECK:SPACING: No space is necessary after a cast
#544: FILE: include/linux/syaoran.h:502:
+	while ((c = *(unsigned char *) filename) != '\0') {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#556: FILE: include/linux/syaoran.h:514:
+				/*
+				  printk(KERN_DEBUG "'%s' = %ld\n", entry->name,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#563: FILE: include/linux/syaoran.h:521:
+				/*
+				  printk(KERN_DEBUG

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#571: FILE: include/linux/syaoran.h:529:
+			/*
+			  printk(KERN_DEBUG "Directory '%s' exists.\n",

CHECK:SPACING: No space is necessary after a cast
#581: FILE: include/linux/syaoran.h:539:
+	filename = (char *) name;

WARNING:LINE_SPACING: Missing a blank line after declarations
#598: FILE: include/linux/syaoran.h:556:
+	struct dev_entry *entry;
+	if (!sb)

CHECK:SPACING: No space is necessary after a cast
#600: FILE: include/linux/syaoran.h:558:
+	info = (struct syaoran_sb_info *) sb->s_fs_info;

CHECK:SPACING: No space is necessary after a cast
#619: FILE: include/linux/syaoran.h:577:
+	char *filename = (char *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#622: FILE: include/linux/syaoran.h:580:
+	static bool first = true;
+	if (first) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#624: FILE: include/linux/syaoran.h:582:
+		printk(KERN_INFO "SYAORAN: 1.6.0   2008/04/01\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#628: FILE: include/linux/syaoran.h:586:
+		struct inode *inode = new_inode(sb);
+		if (!inode)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#633: FILE: include/linux/syaoran.h:591:
+		iput(inode);
 		^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#639: FILE: include/linux/syaoran.h:597:
+		struct inode *inode = new_inode(sb);
+		if (!inode)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#644: FILE: include/linux/syaoran.h:602:
+		iput(inode);
 		^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#649: FILE: include/linux/syaoran.h:607:
+		printk(KERN_WARNING "SYAORAN: Missing config-file path.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#664: FILE: include/linux/syaoran.h:622:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#670: FILE: include/linux/syaoran.h:628:
+		printk(KERN_WARNING "SYAORAN: Can't open '%s'\n", filename);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sb->s_fs_info)...) over kzalloc(sizeof(struct syaoran_sb_info)...)
#675: FILE: include/linux/syaoran.h:633:
+	sb->s_fs_info = kzalloc(sizeof(struct syaoran_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#678: FILE: include/linux/syaoran.h:636:
+	((struct syaoran_sb_info *) sb->s_fs_info)->is_permissive_mode

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#679: FILE: include/linux/syaoran.h:637:
+	((struct syaoran_sb_info *) sb->s_fs_info)->is_permissive_mode
+		= is_permissive_mode;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: No space is necessary after a cast
#680: FILE: include/linux/syaoran.h:638:
+	INIT_LIST_HEAD(&((struct syaoran_sb_info *) sb->s_fs_info)->list);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#681: FILE: include/linux/syaoran.h:639:
+	printk(KERN_INFO "SYAORAN: Reading '%s'\n", filename);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#685: FILE: include/linux/syaoran.h:643:
+		printk(KERN_WARNING "SYAORAN: Can't read '%s'\n", filename);

WARNING:LINE_SPACING: Missing a blank line after declarations
#706: FILE: include/linux/syaoran.h:664:
+		struct dentry *parent;
+		if (IS_ROOT(dentry))

WARNING:LINE_SPACING: Missing a blank line after declarations
#742: FILE: include/linux/syaoran.h:700:
+	struct dentry *d_dentry;
+	if (!dentry || !newname || newname_len <= 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#771: FILE: include/linux/syaoran.h:729:
+		struct dev_entry *entry;
+		error = -EPERM;

CHECK:BRACES: braces {} should be used on all arms of this statement
#780: FILE: include/linux/syaoran.h:738:
+			if (info->is_permissive_mode) {
[...]
+			} else if ((entry->flags & flags) == flags)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#794: FILE: include/linux/syaoran.h:752:
+		const mode_t perm = mode & 0777;
+		flags &= ~DEVICE_USED;

WARNING:LINE_SPACING: Missing a blank line after declarations
#798: FILE: include/linux/syaoran.h:756:
+			const char *cp = strchr(filename, '\0') - 1;
+			while (cp > filename && end > cp &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#801: FILE: include/linux/syaoran.h:759:
+				const unsigned char c = *cp--;
+				if (c == '\\') {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#817: FILE: include/linux/syaoran.h:775:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#823: FILE: include/linux/syaoran.h:781:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#829: FILE: include/linux/syaoran.h:787:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#834: FILE: include/linux/syaoran.h:792:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#839: FILE: include/linux/syaoran.h:797:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#844: FILE: include/linux/syaoran.h:802:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#849: FILE: include/linux/syaoran.h:807:
+			printk(KERN_DEBUG

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#864: FILE: include/linux/syaoran.h:822:
+	struct syaoran_sb_info *info
+		= (struct syaoran_sb_info *) dentry->d_sb->s_fs_info;

CHECK:SPACING: No space is necessary after a cast
#864: FILE: include/linux/syaoran.h:822:
+		= (struct syaoran_sb_info *) dentry->d_sb->s_fs_info;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#866: FILE: include/linux/syaoran.h:824:
+		printk(KERN_WARNING "%s: dentry->d_sb->s_fs_info == NULL\n",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#879: FILE: include/linux/syaoran.h:837:
+	struct syaoran_sb_info *info
+		= (struct syaoran_sb_info *) dentry->d_sb->s_fs_info;

CHECK:SPACING: No space is necessary after a cast
#879: FILE: include/linux/syaoran.h:837:
+		= (struct syaoran_sb_info *) dentry->d_sb->s_fs_info;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#881: FILE: include/linux/syaoran.h:839:
+		printk(KERN_WARNING "%s: dentry->d_sb->s_fs_info == NULL\n",

CHECK:SPACING: No space is necessary after a cast
#911: FILE: include/linux/syaoran.h:869:
+	struct syaoran_sb_info *info = (struct syaoran_sb_info *) sb->s_fs_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#914: FILE: include/linux/syaoran.h:872:
+	const bool read_all = head->read_all;
+	if (!info)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#920: FILE: include/linux/syaoran.h:878:
+		struct dev_entry *entry
+			= list_entry(pos, struct dev_entry, list);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#922: FILE: include/linux/syaoran.h:880:
+		const unsigned int flags
+			= read_all ? entry->flags : entry->flags & ~DEVICE_USED;

WARNING:LINE_SPACING: Missing a blank line after declarations
#928: FILE: include/linux/syaoran.h:886:
+		int len = 0;
+		switch (entry->mode & S_IFMT) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#979: FILE: include/linux/syaoran.h:937:
+	struct syaoran_read_struct *head = kzalloc(sizeof(*head), GFP_KERNEL);
+	if (!head)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#983: FILE: include/linux/syaoran.h:941:
+	head->read_all
+		= (strcmp(file->f_dentry->d_name.name, ".syaoran_all") == 0);

CHECK:SPACING: No space is necessary after a cast
#984: FILE: include/linux/syaoran.h:942:
+	head->pos = &((struct syaoran_sb_info *) head->sb->s_fs_info)->list;

WARNING:LINE_SPACING: Missing a blank line after declarations
#999: FILE: include/linux/syaoran.h:957:
+	struct syaoran_read_struct *head = file->private_data;
+	kfree(head->buf);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1009: FILE: include/linux/syaoran.h:967:
+	struct syaoran_read_struct *head
+		= (struct syaoran_read_struct *) file->private_data;

CHECK:SPACING: No space is necessary after a cast
#1009: FILE: include/linux/syaoran.h:967:
+		= (struct syaoran_read_struct *) file->private_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1012: FILE: include/linux/syaoran.h:970:
+	char *cp = head->buf;
+	if (!access_ok(VERIFY_WRITE, buf, count))

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1027: FILE: include/linux/syaoran.h:985:
+static struct file_operations syaoran_trace_operations = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1039: FILE: include/linux/syaoran.h:997:
+	int error = PTR_ERR(dentry);
+	if (!IS_ERR(dentry)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1041: FILE: include/linux/syaoran.h:999:
+		struct inode *inode = new_inode(sb);
+		if (inode) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1048: FILE: include/linux/syaoran.h:1006:
+			inode->i_mapping->backing_dev_info
+				= &syaoran_backing_dev_info;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299171.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 65 warnings, 32 checks, 1023 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299171.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
