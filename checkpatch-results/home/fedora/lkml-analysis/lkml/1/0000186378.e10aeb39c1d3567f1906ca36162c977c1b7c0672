WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
The bzip patch is based on an idea by Christian Ludwig, includes support for

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: drivers/block/Kconfig:361:
+config RD_BZIP2
+	bool "Initial ramdisk compressed using bzip2"
+	default n
+	depends on BLK_DEV_INITRD=y
+	help
+	  Support loading of a bzip2 encoded initial ramdisk or cpio buffer
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#62: FILE: drivers/block/Kconfig:369:
+config RD_LZMA
+	bool "Initial ramdisk compressed using lzma"
+	default n
+	depends on BLK_DEV_INITRD=y
+	help
+	  Support loading of a lzma encoded initial ramdisk or cpio buffer
+	  If unsure, say N.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#70: FILE: drivers/block/Kconfig:377:
+config RD_GZIP
+	bool "Initial ramdisk compressed using gzip"
+	default y
+	depends on BLK_DEV_INITRD=y
+	select ZLIB_INFLATE
+	help
+	  Support loading of a gzip encoded initial ramdisk or cpio buffer.
+	  If unsure, say Y.
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[1] == 0x5a'
#138: FILE: init/do_mounts_rd.c:97:
+	if (buf[0] == 0x42 && (buf[1] == 0x5a)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#139: FILE: init/do_mounts_rd.c:98:
+		printk(KERN_NOTICE

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[1] == 0x00'
#152: FILE: init/do_mounts_rd.c:111:
+	if (buf[0] == 0x5d && (buf[1] == 0x00)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#153: FILE: init/do_mounts_rd.c:112:
+		printk(KERN_NOTICE

WARNING:LINE_SPACING: Missing a blank line after declarations
#262: FILE: init/do_mounts_rd.c:307:
+	int r = sys_read(crd_infd, buf, len);
+	if (r < 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#263: FILE: init/do_mounts_rd.c:308:
+		printk(KERN_ERR "RAMDISK: error while reading compressed data");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#265: FILE: init/do_mounts_rd.c:310:
+		printk(KERN_ERR "RAMDISK: EOF while reading compressed data");

WARNING:LINE_SPACING: Missing a blank line after declarations
#295: FILE: init/do_mounts_rd.c:317:
+	int written = sys_write(crd_outfd, window, outcnt);
+	if (written != outcnt) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#297: FILE: init/do_mounts_rd.c:319:
+			printk(KERN_ERR

CHECK:LINE_SPACING: Please don't use multiple blank lines
#357: FILE: init/initramfs.c:392:
 
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#358: FILE: init/initramfs.c:393:
+static int __init flush_buffer(void *bufv, unsigned len)

CHECK:SPACING: No space is necessary after a cast
#360: FILE: init/initramfs.c:395:
+	char *buf = (char *) bufv;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <origLen>
#362: FILE: init/initramfs.c:397:
+	int origLen = len;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#385: FILE: init/initramfs.c:416:
+static unsigned my_inptr;   /* index of next byte to be processed in inbuf */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!message"
#475: FILE: init/initramfs.c:454:
+		    message == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#480: FILE: init/initramfs.c:459:
+				   think an error has already occured */
 				                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#480: FILE: init/initramfs.c:459:
+		message = NULL; /* Zero out message, or else cpio will
+				   think an error has already occured */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#480: FILE: init/initramfs.c:459:
+				   think an error has already occured */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!message"
#483: FILE: init/initramfs.c:462:
+		    message == NULL) {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#490: FILE: init/initramfs.c:469:
+				   think an error has already occured */
 				                              ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#490: FILE: init/initramfs.c:469:
+		message = NULL; /* Zero out message, or else cpio will
+				   think an error has already occured */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#490: FILE: init/initramfs.c:469:
+				   think an error has already occured */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!message"
#493: FILE: init/initramfs.c:472:
+		    message == NULL) {

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#541: FILE: init/Kconfig:125:
+config KERNEL_GZIP
+       bool "Gzip"
+       help
+         The old and tried gzip compression. Its compression ratio is
+	 the poorest among the 3 choices; however its speed (both
+	 compression and decompression) is the fastest.
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000186378.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 8 checks, 509 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000186378.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
