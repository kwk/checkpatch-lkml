WARNING:TYPO_SPELLING: 'continus' may be misspelled - perhaps 'continue'?
#37: 
some BIOS like to use continus MTRR layout, and X driver can not add
                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
mtrr_chunk_size= could be used to have smaller continuous block to hold holes.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#59: FILE: arch/x86/kernel/cpu/mtrr/generic.c:163:
+void fill_mtrr_var_range(unsigned int index,
+		u32 base_lo, u32 base_hi, u32 mask_lo, u32 mask_hi)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#97: FILE: arch/x86/kernel/cpu/mtrr/main.c:620:
+}
+early_param("disable_mtrr_cleanup", disable_mtrr_cleanup_setup);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: arch/x86/kernel/cpu/mtrr/main.c:630:
+static void __init subtract_range(struct res_range *range, size_t start,
+				size_t end)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#127: FILE: arch/x86/kernel/cpu/mtrr/main.c:650:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#143: FILE: arch/x86/kernel/cpu/mtrr/main.c:666:
+				printk(KERN_ERR "run of slot in ranges\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#167: FILE: arch/x86/kernel/cpu/mtrr/main.c:690:
+	unsigned address_bits;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#170: FILE: arch/x86/kernel/cpu/mtrr/main.c:693:
+static void __init set_var_mtrr(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#172: FILE: arch/x86/kernel/cpu/mtrr/main.c:695:
+	unsigned char type, unsigned address_bits)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#175: FILE: arch/x86/kernel/cpu/mtrr/main.c:698:
+	unsigned address_mask_high;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#187: FILE: arch/x86/kernel/cpu/mtrr/main.c:710:
+	if (sizek < 4*1024*1024) {
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#187: FILE: arch/x86/kernel/cpu/mtrr/main.c:710:
+	if (sizek < 4*1024*1024) {
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: arch/x86/kernel/cpu/mtrr/main.c:724:
+static unsigned int __init range_to_mtrr(unsigned int reg,
+	unsigned long range_startk, unsigned long range_sizek,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#202: FILE: arch/x86/kernel/cpu/mtrr/main.c:725:
+	unsigned long next_range_startk, unsigned char type, unsigned address_bits)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg >= num_var_ranges'
#204: FILE: arch/x86/kernel/cpu/mtrr/main.c:727:
+	if (!range_sizek || (reg >= num_var_ranges))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#220: FILE: arch/x86/kernel/cpu/mtrr/main.c:743:
+		printk(KERN_INFO "Setting variable MTRR %d, base: %ldMB, range: %ldMB, type %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: arch/x86/kernel/cpu/mtrr/main.c:744:
+		printk(KERN_INFO "Setting variable MTRR %d, base: %ldMB, range: %ldMB, type %s\n",
+			reg, range_startk >> 10, sizek >> 10,

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#222: FILE: arch/x86/kernel/cpu/mtrr/main.c:745:
+			(type == MTRR_TYPE_UNCACHABLE)?"UC":
 			                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#222: FILE: arch/x86/kernel/cpu/mtrr/main.c:745:
+			(type == MTRR_TYPE_UNCACHABLE)?"UC":
 			                                   ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#223: FILE: arch/x86/kernel/cpu/mtrr/main.c:746:
+			    ((type == MTRR_TYPE_WRBACK)?"WB":"Other")
 			                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#223: FILE: arch/x86/kernel/cpu/mtrr/main.c:746:
+			    ((type == MTRR_TYPE_WRBACK)?"WB":"Other")
 			                                    ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#250: FILE: arch/x86/kernel/cpu/mtrr/main.c:773:
+	if ((range0_sizek == state->range_sizek) ||
[...]
+			printk(KERN_INFO "rangeX: %016lx - %016lx\n", range0_basek<<10, (range0_basek + range0_sizek)<<10);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'range0_sizek == state->range_sizek'
#250: FILE: arch/x86/kernel/cpu/mtrr/main.c:773:
+	if ((range0_sizek == state->range_sizek) ||
+		((range0_basek + range0_sizek > basek) && basek)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: arch/x86/kernel/cpu/mtrr/main.c:774:
+	if ((range0_sizek == state->range_sizek) ||
+		((range0_basek + range0_sizek > basek) && basek)) {

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#252: FILE: arch/x86/kernel/cpu/mtrr/main.c:775:
+			printk(KERN_INFO "rangeX: %016lx - %016lx\n", range0_basek<<10, (range0_basek + range0_sizek)<<10);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#252: FILE: arch/x86/kernel/cpu/mtrr/main.c:775:
+			printk(KERN_INFO "rangeX: %016lx - %016lx\n", range0_basek<<10, (range0_basek + range0_sizek)<<10);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#252: FILE: arch/x86/kernel/cpu/mtrr/main.c:775:
+			printk(KERN_INFO "rangeX: %016lx - %016lx\n", range0_basek<<10, (range0_basek + range0_sizek)<<10);
 			                                                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#252: FILE: arch/x86/kernel/cpu/mtrr/main.c:775:
+			printk(KERN_INFO "rangeX: %016lx - %016lx\n", range0_basek<<10, (range0_basek + range0_sizek)<<10);
 			                                                                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: arch/x86/kernel/cpu/mtrr/main.c:777:
+			state->reg = range_to_mtrr(state->reg, range0_basek,
+				range0_sizek, next_basek, MTRR_TYPE_WRBACK, state->address_bits);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#260: FILE: arch/x86/kernel/cpu/mtrr/main.c:783:
+	printk(KERN_INFO "range0: %016lx - %016lx\n", range0_basek<<10, (range0_basek + range0_sizek)<<10);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#260: FILE: arch/x86/kernel/cpu/mtrr/main.c:783:
+	printk(KERN_INFO "range0: %016lx - %016lx\n", range0_basek<<10, (range0_basek + range0_sizek)<<10);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#260: FILE: arch/x86/kernel/cpu/mtrr/main.c:783:
+	printk(KERN_INFO "range0: %016lx - %016lx\n", range0_basek<<10, (range0_basek + range0_sizek)<<10);
 	                                                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#260: FILE: arch/x86/kernel/cpu/mtrr/main.c:783:
+	printk(KERN_INFO "range0: %016lx - %016lx\n", range0_basek<<10, (range0_basek + range0_sizek)<<10);
 	                                                                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: arch/x86/kernel/cpu/mtrr/main.c:785:
+	state->reg = range_to_mtrr(state->reg, range0_basek,
+		range0_sizek, range_basek, MTRR_TYPE_WRBACK, state->address_bits);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#267: FILE: arch/x86/kernel/cpu/mtrr/main.c:790:
+		next_basek = hole_basek = range_basek + range_sizek - hole_sizek;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#271: FILE: arch/x86/kernel/cpu/mtrr/main.c:794:
+	printk(KERN_INFO "range: %016lx - %016lx\n", range_basek<<10, (range_basek + range_sizek)<<10);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#271: FILE: arch/x86/kernel/cpu/mtrr/main.c:794:
+	printk(KERN_INFO "range: %016lx - %016lx\n", range_basek<<10, (range_basek + range_sizek)<<10);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#271: FILE: arch/x86/kernel/cpu/mtrr/main.c:794:
+	printk(KERN_INFO "range: %016lx - %016lx\n", range_basek<<10, (range_basek + range_sizek)<<10);
 	                                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#271: FILE: arch/x86/kernel/cpu/mtrr/main.c:794:
+	printk(KERN_INFO "range: %016lx - %016lx\n", range_basek<<10, (range_basek + range_sizek)<<10);
 	                                                                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: arch/x86/kernel/cpu/mtrr/main.c:796:
+	state->reg = range_to_mtrr(state->reg, range_basek,
+		range_sizek, next_basek, MTRR_TYPE_WRBACK, state->address_bits);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#275: FILE: arch/x86/kernel/cpu/mtrr/main.c:798:
+		printk(KERN_INFO "hole: %016lx - %016lx\n", hole_basek<<10, (hole_basek + hole_sizek)<<10);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#275: FILE: arch/x86/kernel/cpu/mtrr/main.c:798:
+		printk(KERN_INFO "hole: %016lx - %016lx\n", hole_basek<<10, (hole_basek + hole_sizek)<<10);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#275: FILE: arch/x86/kernel/cpu/mtrr/main.c:798:
+		printk(KERN_INFO "hole: %016lx - %016lx\n", hole_basek<<10, (hole_basek + hole_sizek)<<10);
 		                                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#275: FILE: arch/x86/kernel/cpu/mtrr/main.c:798:
+		printk(KERN_INFO "hole: %016lx - %016lx\n", hole_basek<<10, (hole_basek + hole_sizek)<<10);
 		                                                                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: arch/x86/kernel/cpu/mtrr/main.c:800:
+		state->reg = range_to_mtrr(state->reg, hole_basek,
+			hole_sizek, basek, MTRR_TYPE_UNCACHABLE, state->address_bits);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#281: FILE: arch/x86/kernel/cpu/mtrr/main.c:804:
+static void __init set_var_mtrr_range(struct var_mtrr_state *state, size_t base_pfn, size_t size_pfn)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'basek <= 1024'
#292: FILE: arch/x86/kernel/cpu/mtrr/main.c:815:
+	if ((basek <= 1024) || (state->range_startk + state->range_sizek == basek)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#294: FILE: arch/x86/kernel/cpu/mtrr/main.c:817:
+		unsigned long endk = basek + sizek;
+		state->range_sizek = endk - state->range_startk;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#309: FILE: arch/x86/kernel/cpu/mtrr/main.c:832:
+static u64 mtrr_chunk_size __initdata = (256ULL<<20);
                                                ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#318: FILE: arch/x86/kernel/cpu/mtrr/main.c:841:
+}
+early_param("mtrr_chunk_size", parse_mtrr_chunk_size_opt);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#320: FILE: arch/x86/kernel/cpu/mtrr/main.c:843:
+static void __init x86_setup_var_mtrrs(struct res_range *range, int nr_range, unsigned address_bits)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#337: FILE: arch/x86/kernel/cpu/mtrr/main.c:860:
+	printk(KERN_INFO "DONE variable MTRRs\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#343: FILE: arch/x86/kernel/cpu/mtrr/main.c:866:
+static int __init mtrr_cleanup(unsigned address_bits)

CHECK:CAMELCASE: Avoid CamelCase: <MTRRdefType_MSR>
#355: FILE: arch/x86/kernel/cpu/mtrr/main.c:878:
+	rdmsr(MTRRdefType_MSR, def, dummy);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#395: FILE: arch/x86/kernel/cpu/mtrr/main.c:918:
+	printk(KERN_INFO "After WB checking\n");

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#397: FILE: arch/x86/kernel/cpu/mtrr/main.c:920:
+		printk(KERN_INFO "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#397: FILE: arch/x86/kernel/cpu/mtrr/main.c:920:
+		printk(KERN_INFO "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#415: FILE: arch/x86/kernel/cpu/mtrr/main.c:938:
+	printk(KERN_INFO "After UC checking\n");

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#417: FILE: arch/x86/kernel/cpu/mtrr/main.c:940:
+		printk(KERN_INFO "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#417: FILE: arch/x86/kernel/cpu/mtrr/main.c:940:
+		printk(KERN_INFO "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#421: FILE: arch/x86/kernel/cpu/mtrr/main.c:944:
+	printk(KERN_INFO "After sorting\n");

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#423: FILE: arch/x86/kernel/cpu/mtrr/main.c:946:
+		printk(KERN_INFO "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#423: FILE: arch/x86/kernel/cpu/mtrr/main.c:946:
+		printk(KERN_INFO "MTRR MAP PFN: %016lx - %016lx\n", range[i].start, range[i].end + 1);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#430: FILE: arch/x86/kernel/cpu/mtrr/main.c:953:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#477: FILE: arch/x86/kernel/cpu/mtrr/main.c:1147:
+
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: arch/x86/kernel/cpu/mtrr/mtrr.h:85:
+void fill_mtrr_var_range(unsigned int index,
+		u32 base_lo, u32 base_hi, u32 mask_lo, u32 mask_hi);

WARNING:TYPO_SPELLING: 'continous' may be misspelled - perhaps 'continuous'?
#509: FILE: Documentation/kernel-parameters.txt:605:
+			used for mtrr cleanup. It is largest continous chunk
 			                                     ^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289424.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 32 warnings, 35 checks, 442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289424.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
