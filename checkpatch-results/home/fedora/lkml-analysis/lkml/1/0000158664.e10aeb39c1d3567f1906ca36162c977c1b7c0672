WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
one chip SSD. IO mode is ATA-like custom mode for the host that doesn't have

WARNING:TYPO_SPELLING: 'Followings' may be misspelled - perhaps 'Following'?
#45: 
Followings are brief descriptions about IO mode.
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'quitely' may be misspelled - perhaps 'quite'?
#51: 
This driver is quitely simillar with standard ATA driver, but cause of
               ^^^^^^^

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#52: 
following reasons currently seperated with ATA layer.
                            ^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#106: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'Followings' may be misspelled - perhaps 'Following'?
#130: FILE: Documentation/blockdev/mflash.txt:20:
+Followings are brief descriptions about IO mode.
 ^^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#192: FILE: drivers/block/Kconfig:406:
+config MG_DISK
+	tristate "mGine mflash, gflash support"
+	depends on ARM
+	help
+	  mGine mFlash(gFlash) block device driver
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#230: FILE: drivers/block/mg_disk.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#231: FILE: drivers/block/mg_disk.c:2:
+ *  drivers/block/mg_disk.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: drivers/block/mg_disk.c:31:
+static void mg_dump_status(const char *msg, unsigned int stat,
+		struct mg_host *host)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#262: FILE: drivers/block/mg_disk.c:33:
+	char *name = MG_DISK_NAME"?";

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#271: FILE: drivers/block/mg_disk.c:42:
+	printk(KERN_DEBUG "%s: %s: status=0x%02x { ", name, msg, stat & 0xff);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#273: FILE: drivers/block/mg_disk.c:44:
+		printk("Busy ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#275: FILE: drivers/block/mg_disk.c:46:
+		printk("DriveReady ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#277: FILE: drivers/block/mg_disk.c:48:
+		printk("WriteFault ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#279: FILE: drivers/block/mg_disk.c:50:
+		printk("SeekComplete ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#281: FILE: drivers/block/mg_disk.c:52:
+		printk("DataRequest ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#283: FILE: drivers/block/mg_disk.c:54:
+		printk("CorrectedError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#285: FILE: drivers/block/mg_disk.c:56:
+		printk("Error ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#286: FILE: drivers/block/mg_disk.c:57:
+	printk("}\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#291: FILE: drivers/block/mg_disk.c:62:
+		printk(KERN_DEBUG "%s: %s: error=0x%02x { ", name, msg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: drivers/block/mg_disk.c:63:
+		printk(KERN_DEBUG "%s: %s: error=0x%02x { ", name, msg,
+				host->error & 0xff);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#294: FILE: drivers/block/mg_disk.c:65:
+			printk("BadSector ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#296: FILE: drivers/block/mg_disk.c:67:
+			printk("UncorrectableError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: drivers/block/mg_disk.c:69:
+			printk("SectorIdNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#300: FILE: drivers/block/mg_disk.c:71:
+			printk("DriveStatusError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#302: FILE: drivers/block/mg_disk.c:73:
+			printk("AddrMarkNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#303: FILE: drivers/block/mg_disk.c:74:
+		printk("}");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: drivers/block/mg_disk.c:81:
+					printk(", sector=%ld", req->sector);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#313: FILE: drivers/block/mg_disk.c:84:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#314: FILE: drivers/block/mg_disk.c:85:
+		printk("\n");

CHECK:SPACING: No space is necessary after a cast
#382: FILE: drivers/block/mg_disk.c:153:
+		be16_to_cpus((u16 *) p);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#391: FILE: drivers/block/mg_disk.c:162:
+			*p++ = *(s-1);
 			          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: drivers/block/mg_disk.c:178:
+		outb(MG_REG_CTRL_INTR_DISABLE,
+				host->dev_base + MG_REG_DRV_CTRL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: drivers/block/mg_disk.c:211:
+	mg_ide_fixstring(host->id_data.model,
+			sizeof(host->id_data.model));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: drivers/block/mg_disk.c:213:
+	mg_ide_fixstring(host->id_data.serial_no,
+			sizeof(host->id_data.serial_no));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: drivers/block/mg_disk.c:215:
+	mg_ide_fixstring(host->id_data.fw_rev,
+			sizeof(host->id_data.fw_rev));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#445: FILE: drivers/block/mg_disk.c:216:
+	printk(KERN_INFO "mg_disk: model: %s\n", host->id_data.model);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#446: FILE: drivers/block/mg_disk.c:217:
+	printk(KERN_INFO "mg_disk: firm: %.8s\n", host->id_data.fw_rev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#447: FILE: drivers/block/mg_disk.c:218:
+	printk(KERN_INFO "mg_disk: serial: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: drivers/block/mg_disk.c:219:
+	printk(KERN_INFO "mg_disk: serial: %s\n",
+			host->id_data.serial_no);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#449: FILE: drivers/block/mg_disk.c:220:
+	printk(KERN_INFO "mg_disk: %d + reserved %d sectors\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: drivers/block/mg_disk.c:221:
+	printk(KERN_INFO "mg_disk: %d + reserved %d sectors\n",
+			host->tot_sectors, res);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#458: FILE: drivers/block/mg_disk.c:229:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: drivers/block/mg_disk.c:276:
+	struct request *req = elv_next_request(host->breq);
+	if (req != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "req"
#505: FILE: drivers/block/mg_disk.c:276:
+	if (req != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: drivers/block/mg_disk.c:288:
+static unsigned int mg_out(struct mg_host *host,
+		unsigned int sect_num,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: drivers/block/mg_disk.c:309:
+	outb((u8)((sect_num >> 24) | MG_REG_HEAD_LBA_MODE),
+			host->dev_base + MG_REG_DRV_HEAD);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: drivers/block/mg_disk.c:334:
+	MG_DBG("requested %d sects (from %ld), buffer=0x%p\n",
+			remains, req->sector, req->buffer);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#614: FILE: drivers/block/mg_disk.c:385:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: drivers/block/mg_disk.c:387:
+	MG_DBG("requested %d sects (from %ld), buffer=0x%p\n",
+			remains, req->sector, req->buffer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: drivers/block/mg_disk.c:447:
+	MG_DBG("sector %ld, remaining=%ld, buffer=0x%p\n",
+			req->sector, req->nr_sectors - 1, req->buffer);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'req->nr_sectors <= 1'
#717: FILE: drivers/block/mg_disk.c:488:
+		if ((req->nr_sectors <= 1) || (i & MG_REG_STATUS_BIT_DATA_REQ))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: drivers/block/mg_disk.c:515:
+		MG_DBG("sector %ld, remaining=%ld, buffer=0x%p\n",
+				req->sector, req->nr_sectors, req->buffer);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#769: FILE: drivers/block/mg_disk.c:540:
+	printk(KERN_DEBUG "%s: timeout\n", name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#793: FILE: drivers/block/mg_disk.c:564:
+				printk(KERN_WARNING "%s:%d unknown command\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: drivers/block/mg_disk.c:565:
+				printk(KERN_WARNING "%s:%d unknown command\n",
+						__func__, __LINE__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: drivers/block/mg_disk.c:574:
+static unsigned int mg_issue_req(struct request *req,
+		struct mg_host *host,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#821: FILE: drivers/block/mg_disk.c:592:
+		outb(MG_REG_CTRL_INTR_DISABLE,
+				host->dev_base + MG_REG_DRV_CTRL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#843: FILE: drivers/block/mg_disk.c:614:
+		printk(KERN_WARNING "%s:%d unknown command\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#844: FILE: drivers/block/mg_disk.c:615:
+		printk(KERN_WARNING "%s:%d unknown command\n",
+				__func__, __LINE__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#885: FILE: drivers/block/mg_disk.c:656:
+		if (sect_num >= get_capacity(req->rq_disk) ||
+				((sect_num + sect_cnt) >

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#887: FILE: drivers/block/mg_disk.c:658:
+			printk(KERN_WARNING

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#913: FILE: drivers/block/mg_disk.c:684:
+static struct block_device_operations mg_disk_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#927: FILE: drivers/block/mg_disk.c:698:
+		outb(MG_REG_CTRL_INTR_DISABLE,
+				host->dev_base + MG_REG_DRV_CTRL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#935: FILE: drivers/block/mg_disk.c:706:
+			outb(MG_REG_CTRL_INTR_ENABLE,
+					host->dev_base + MG_REG_DRV_CTRL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#970: FILE: drivers/block/mg_disk.c:741:
+		printk(KERN_ERR	"%s:%d fail (no driver_data)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: drivers/block/mg_disk.c:742:
+		printk(KERN_ERR	"%s:%d fail (no driver_data)\n",
+				__func__, __LINE__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*host)...) over kmalloc(sizeof(struct mg_host)...)
#977: FILE: drivers/block/mg_disk.c:748:
+	host = kmalloc(sizeof(struct mg_host), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#979: FILE: drivers/block/mg_disk.c:750:
+		printk(KERN_ERR "%s:%d fail (no memory for mg_host)\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#979: FILE: drivers/block/mg_disk.c:750:
+	if (!host) {
+		printk(KERN_ERR "%s:%d fail (no memory for mg_host)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#980: FILE: drivers/block/mg_disk.c:751:
+		printk(KERN_ERR "%s:%d fail (no memory for mg_host)\n",
+				__func__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#994: FILE: drivers/block/mg_disk.c:765:
+		printk(KERN_ERR "%s:%d platform_get_resource fail\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: drivers/block/mg_disk.c:766:
+		printk(KERN_ERR "%s:%d platform_get_resource fail\n",
+				__func__, __LINE__);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#999: FILE: drivers/block/mg_disk.c:770:
+	host->dev_base = (unsigned long)ioremap(rsc->start , rsc->end + 1);
 	                                                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1001: FILE: drivers/block/mg_disk.c:772:
+		printk(KERN_ERR "%s:%d ioremap fail\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1002: FILE: drivers/block/mg_disk.c:773:
+		printk(KERN_ERR "%s:%d ioremap fail\n",
+				__func__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1011: FILE: drivers/block/mg_disk.c:782:
+		printk(KERN_ERR "%s:%d get reset pin fail\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1012: FILE: drivers/block/mg_disk.c:783:
+		printk(KERN_ERR "%s:%d get reset pin fail\n",
+				__func__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1027: FILE: drivers/block/mg_disk.c:798:
+		printk(KERN_ERR "%s:%d fail (err code : %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: drivers/block/mg_disk.c:799:
+		printk(KERN_ERR "%s:%d fail (err code : %d)\n",
+				__func__, __LINE__, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1041: FILE: drivers/block/mg_disk.c:812:
+		err = request_irq(host->irq, mg_irq,
+				IRQF_DISABLED | IRQF_TRIGGER_RISING,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1044: FILE: drivers/block/mg_disk.c:815:
+			printk(KERN_ERR "%s:%d fail (request_irq err=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1045: FILE: drivers/block/mg_disk.c:816:
+			printk(KERN_ERR "%s:%d fail (request_irq err=%d)\n",
+					__func__, __LINE__, err);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1049: FILE: drivers/block/mg_disk.c:820:
+
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1054: FILE: drivers/block/mg_disk.c:825:
+		printk(KERN_ERR "%s:%d fail (err code : %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1055: FILE: drivers/block/mg_disk.c:826:
+		printk(KERN_ERR "%s:%d fail (err code : %d)\n",
+				__func__, __LINE__, err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1062: FILE: drivers/block/mg_disk.c:833:
+		printk(KERN_ERR "%s:%d register_blkdev fail (err code : %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1063: FILE: drivers/block/mg_disk.c:834:
+		printk(KERN_ERR "%s:%d register_blkdev fail (err code : %d)\n",
+				__func__, __LINE__, err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1078: FILE: drivers/block/mg_disk.c:849:
+		printk(KERN_ERR "%s:%d (blk_init_queue) fail\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1079: FILE: drivers/block/mg_disk.c:850:
+		printk(KERN_ERR "%s:%d (blk_init_queue) fail\n",
+				__func__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1087: FILE: drivers/block/mg_disk.c:858:
+		printk(KERN_ERR "%s:%d (elevator_init) fail\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1088: FILE: drivers/block/mg_disk.c:859:
+		printk(KERN_ERR "%s:%d (elevator_init) fail\n",
+				__func__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1100: FILE: drivers/block/mg_disk.c:871:
+		printk(KERN_ERR "%s:%d (alloc_disk) fail\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: drivers/block/mg_disk.c:872:
+		printk(KERN_ERR "%s:%d (alloc_disk) fail\n",
+				__func__, __LINE__);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1110: FILE: drivers/block/mg_disk.c:881:
+	sprintf(host->gd->disk_name, MG_DISK_NAME"a");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1195: FILE: drivers/block/mg_disk.c:966:
+	printk(KERN_INFO "mGine mflash driver, (c) 2008 mGine Co.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1201: FILE: drivers/block/mg_disk.c:972:
+	printk(KERN_INFO "mflash driver : bye bye\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1217: FILE: include/linux/mg_disk.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1269: FILE: include/linux/mg_disk.h:53:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1272: FILE: include/linux/mg_disk.h:56:
+#define MG_REG_CTRL_INTR_DISABLE		(0x1<<1)
                                 		    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1273: FILE: include/linux/mg_disk.h:57:
+#define MG_REG_CTRL_RESET			(0x1<<2)
                          			    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1275: FILE: include/linux/mg_disk.h:59:
+#define MG_REG_CTRL_INTR_POLA_ACTIVE_LOW	(0x1<<4)
                                         	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1277: FILE: include/linux/mg_disk.h:61:
+#define MG_REG_CTRL_DPD_POLA_ACTIVE_HIGH	(0x1<<5)
                                         	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1279: FILE: include/linux/mg_disk.h:63:
+#define MG_REG_CTRL_DPD_ENABLE			(0x1<<6)
                               			    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1329: FILE: include/linux/mg_disk.h:113:
+#define MG_OP_CASCADE (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1330: FILE: include/linux/mg_disk.h:114:
+#define MG_OP_CASCADE_SYNC_RD (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1331: FILE: include/linux/mg_disk.h:115:
+#define MG_OP_CASCADE_SYNC_WR (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1332: FILE: include/linux/mg_disk.h:116:
+#define MG_OP_INTERLEAVE (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1340: FILE: include/linux/mg_disk.h:124:
+#define MG_BURST_LEN_4 (1 << 1)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1360: FILE: include/linux/mg_disk.h:144:
+	spinlock_t lock;

WARNING:SPACING: Unnecessary space before function pointer arguments
#1364: FILE: include/linux/mg_disk.h:148:
+	void (*mg_do_intr) (struct mg_host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mg_host *' should also have an identifier name
#1364: FILE: include/linux/mg_disk.h:148:
+	void (*mg_do_intr) (struct mg_host *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1384: FILE: include/linux/mg_disk.h:168:
+	printk(KERN_DEBUG "%s:%d "fmt, __func__, __LINE__, ##args)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158664.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 56 warnings, 57 checks, 1265 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158664.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
