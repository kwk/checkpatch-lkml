WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: arch/ia64/kernel/kgdb-jmp.S:1:
+/* setjmp() and longjmp() assembler support for kdb on ia64.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#104: FILE: arch/ia64/kernel/kgdb-jmp.S:23:
+   not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#105: FILE: arch/ia64/kernel/kgdb-jmp.S:24:
+   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#325: FILE: arch/ia64/kernel/kgdb.c:1:
+/*

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#349: FILE: arch/ia64/kernel/kgdb.c:25:
+ *  Origianl kgdb, with 2.1.xx kernel by David Grothe <dave@gcom.com>
     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#366: FILE: arch/ia64/kernel/kgdb.c:42:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#369: FILE: arch/ia64/kernel/kgdb.c:45:
+#define REGISTER_BYTES (NUM_REGS*8+128*8)
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#369: FILE: arch/ia64/kernel/kgdb.c:45:
+#define REGISTER_BYTES (NUM_REGS*8+128*8)
                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#369: FILE: arch/ia64/kernel/kgdb.c:45:
+#define REGISTER_BYTES (NUM_REGS*8+128*8)
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'N' - possible side-effects?
#370: FILE: arch/ia64/kernel/kgdb.c:46:
+#define REGISTER_BYTE(N) (((N) * 8)                                    \
+	+ ((N) <= IA64_FR0_REGNUM ?                                     \
+	0 : 8 * (((N) > IA64_FR127_REGNUM) ? 128 : (N) - IA64_FR0_REGNUM)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'N' - possible side-effects?
#373: FILE: arch/ia64/kernel/kgdb.c:49:
+#define REGISTER_SIZE(N)                                               \
+	(((N) >= IA64_FR0_REGNUM && (N) <= IA64_FR127_REGNUM) ? 16 : 8)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#377: FILE: arch/ia64/kernel/kgdb.c:53:
+#define IA64_FR127_REGNUM       (IA64_FR0_REGNUM+127)
                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#387: FILE: arch/ia64/kernel/kgdb.c:63:
+#define IA64_NAT31_REGNUM       (IA64_NAT0_REGNUM+31)
                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#388: FILE: arch/ia64/kernel/kgdb.c:64:
+#define IA64_NAT32_REGNUM       (IA64_NAT0_REGNUM+32)
                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#389: FILE: arch/ia64/kernel/kgdb.c:65:
+#define IA64_RSC_REGNUM		(IA64_AR0_REGNUM+16)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#390: FILE: arch/ia64/kernel/kgdb.c:66:
+#define IA64_BSP_REGNUM		(IA64_AR0_REGNUM+17)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#391: FILE: arch/ia64/kernel/kgdb.c:67:
+#define IA64_BSPSTORE_REGNUM	(IA64_AR0_REGNUM+18)
                             	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#392: FILE: arch/ia64/kernel/kgdb.c:68:
+#define IA64_RNAT_REGNUM	(IA64_AR0_REGNUM+19)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#393: FILE: arch/ia64/kernel/kgdb.c:69:
+#define IA64_FCR_REGNUM		(IA64_AR0_REGNUM+21)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#394: FILE: arch/ia64/kernel/kgdb.c:70:
+#define IA64_EFLAG_REGNUM	(IA64_AR0_REGNUM+24)
                          	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#395: FILE: arch/ia64/kernel/kgdb.c:71:
+#define IA64_CSD_REGNUM		(IA64_AR0_REGNUM+25)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#396: FILE: arch/ia64/kernel/kgdb.c:72:
+#define IA64_SSD_REGNUM		(IA64_AR0_REGNUM+26)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#397: FILE: arch/ia64/kernel/kgdb.c:73:
+#define IA64_CFLG_REGNUM	(IA64_AR0_REGNUM+27)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#398: FILE: arch/ia64/kernel/kgdb.c:74:
+#define IA64_FSR_REGNUM		(IA64_AR0_REGNUM+28)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#399: FILE: arch/ia64/kernel/kgdb.c:75:
+#define IA64_FIR_REGNUM		(IA64_AR0_REGNUM+29)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#400: FILE: arch/ia64/kernel/kgdb.c:76:
+#define IA64_FDR_REGNUM		(IA64_AR0_REGNUM+30)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#401: FILE: arch/ia64/kernel/kgdb.c:77:
+#define IA64_CCV_REGNUM		(IA64_AR0_REGNUM+32)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#402: FILE: arch/ia64/kernel/kgdb.c:78:
+#define IA64_UNAT_REGNUM	(IA64_AR0_REGNUM+36)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#403: FILE: arch/ia64/kernel/kgdb.c:79:
+#define IA64_FPSR_REGNUM	(IA64_AR0_REGNUM+40)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#404: FILE: arch/ia64/kernel/kgdb.c:80:
+#define IA64_ITC_REGNUM		(IA64_AR0_REGNUM+44)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#405: FILE: arch/ia64/kernel/kgdb.c:81:
+#define IA64_PFS_REGNUM		(IA64_AR0_REGNUM+64)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#406: FILE: arch/ia64/kernel/kgdb.c:82:
+#define IA64_LC_REGNUM		(IA64_AR0_REGNUM+65)
                       		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#407: FILE: arch/ia64/kernel/kgdb.c:83:
+#define IA64_EC_REGNUM		(IA64_AR0_REGNUM+66)
                       		                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#409: FILE: arch/ia64/kernel/kgdb.c:85:
+#define	REGISTER_INDEX(N)	(REGISTER_BYTE(N) / sizeof (unsigned long))

CHECK:SPACING: No space is necessary after a cast
#412: FILE: arch/ia64/kernel/kgdb.c:88:
+#define	ptoff(V)	((unsigned int) &((struct pt_regs *)0x0)->V)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'V' may be better as '(V)' to avoid precedence issues
#412: FILE: arch/ia64/kernel/kgdb.c:88:
+#define	ptoff(V)	((unsigned int) &((struct pt_regs *)0x0)->V)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#466: FILE: arch/ia64/kernel/kgdb.c:142:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: arch/ia64/kernel/kgdb.c:145:
+static int kgdb_gr_reg(int regnum, struct unw_frame_info *info,
+	unsigned long *reg, int rw)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: arch/ia64/kernel/kgdb.c:150:
+	if ((regnum >= IA64_GR0_REGNUM && regnum <= (IA64_GR0_REGNUM + 1)) ||
+		(regnum >= (IA64_GR0_REGNUM + 4) &&

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#481: FILE: arch/ia64/kernel/kgdb.c:157:
+}
+static int kgdb_gr_ptreg(int regnum, struct pt_regs *ptregs,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: arch/ia64/kernel/kgdb.c:158:
+static int kgdb_gr_ptreg(int regnum, struct pt_regs *ptregs,
+	struct unw_frame_info *info, unsigned long *reg, int rw)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: arch/ia64/kernel/kgdb.c:164:
+	if (!((regnum >= (IA64_GR0_REGNUM + 2) &&
+		regnum <= (IA64_GR0_REGNUM + 3)) ||

CHECK:BRACES: Unbalanced braces around else statement
#509: FILE: arch/ia64/kernel/kgdb.c:185:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: arch/ia64/kernel/kgdb.c:192:
+static int kgdb_br_reg(int regnum, struct pt_regs *ptregs,
+	struct unw_frame_info *info, unsigned long *reg, int rw)

CHECK:BRACES: Unbalanced braces around else statement
#536: FILE: arch/ia64/kernel/kgdb.c:212:
+		} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 48)
#538: FILE: arch/ia64/kernel/kgdb.c:214:
+				if (br_reg_to_ptreg_index[i].reg == regnum) {
+						*reg = *((unsigned long *)

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'br_reg_to_ptreg_index[i].ptregoff'
#542: FILE: arch/ia64/kernel/kgdb.c:218:
+						br_reg_to_ptreg_index[i].
+						ptregoff));

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: arch/ia64/kernel/kgdb.c:236:
+static int kgdb_fr_reg(int regnum, char *inbuffer, struct pt_regs *ptregs,
+	struct unw_frame_info *info, unsigned long *reg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: arch/ia64/kernel/kgdb.c:280:
+static int kgdb_ar_reg(int regnum, struct pt_regs *ptregs,
+	struct unw_frame_info *info, unsigned long *reg, int rw)

CHECK:SPACING: No space is necessary after a cast
#614: FILE: arch/ia64/kernel/kgdb.c:290:
+				*((unsigned long *) (((void *)ptregs) +

CHECK:SPACING: No space is necessary after a cast
#623: FILE: arch/ia64/kernel/kgdb.c:299:
+				*reg = *((unsigned long *) (((void *)ptregs) +

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: arch/ia64/kernel/kgdb.c:309:
+       result = 1;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: arch/ia64/kernel/kgdb.c:353:
+void kgdb_get_reg(char *outbuffer, int regnum, struct unw_frame_info *info,
+	struct pt_regs *ptregs)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#682: FILE: arch/ia64/kernel/kgdb.c:358:
+	if (kgdb_gr_reg(regnum, info, &reg, 0) ||
[...]
+			size = sizeof(reg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: arch/ia64/kernel/kgdb.c:359:
+	if (kgdb_gr_reg(regnum, info, &reg, 0) ||
+		kgdb_gr_ptreg(regnum, ptregs, info, &reg, 0) ||

CHECK:BRACES: braces {} should be used on all arms of this statement
#723: FILE: arch/ia64/kernel/kgdb.c:399:
+	if (size) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#724: FILE: arch/ia64/kernel/kgdb.c:400:
+		kgdb_mem2hex((char *) mem, outbuffer, size);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#725: FILE: arch/ia64/kernel/kgdb.c:401:
+		outbuffer[size*2] = 0;
 		              ^

CHECK:BRACES: Unbalanced braces around else statement
#726: FILE: arch/ia64/kernel/kgdb.c:402:
+	} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#730: FILE: arch/ia64/kernel/kgdb.c:406:
+	return;
+}

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#742: FILE: arch/ia64/kernel/kgdb.c:418:
+	if (kgdb_gr_reg(regnum, info, &reg, 1) ||
[...]
+		kgdb_ar_reg(regnum, ptregs, info, &reg, 1)) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: arch/ia64/kernel/kgdb.c:419:
+	if (kgdb_gr_reg(regnum, info, &reg, 1) ||
+		kgdb_gr_ptreg(regnum, ptregs, info, &reg, 1) ||

WARNING:SPACING: space prohibited before semicolon
#746: FILE: arch/ia64/kernel/kgdb.c:422:
+		kgdb_ar_reg(regnum, ptregs, info, &reg, 1)) ;

WARNING:RETURN_VOID: void function return statements are not generally useful
#758: FILE: arch/ia64/kernel/kgdb.c:434:
+	return;
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#770: FILE: arch/ia64/kernel/kgdb.c:446:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#771: FILE: arch/ia64/kernel/kgdb.c:447:
+
+}

CHECK:BIT_MACRO: Prefer using the BIT macro
#782: FILE: arch/ia64/kernel/kgdb.c:458:
+#define	HWCAP_IBR	(1 << WATCH_INSTRUCTION)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#784: FILE: arch/ia64/kernel/kgdb.c:460:
+	unsigned enabled;

WARNING:LINE_SPACING: Missing a blank line after declarations
#832: FILE: arch/ia64/kernel/kgdb.c:508:
+	char tmp_variable[BREAK_INSTR_SIZE];
+	error = kgdb_get_mem((char *)(addr & BREAK_INSTR_ALIGN), tmp_variable,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: arch/ia64/kernel/kgdb.c:509:
+	error = kgdb_get_mem((char *)(addr & BREAK_INSTR_ALIGN), tmp_variable,
+		BREAK_INSTR_SIZE);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#839: FILE: arch/ia64/kernel/kgdb.c:515:
+	extern unsigned long _start[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#893: FILE: arch/ia64/kernel/kgdb.c:569:
+	extern unsigned long _start[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#901: FILE: arch/ia64/kernel/kgdb.c:577:
+volatile static struct smp_unw {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#904: FILE: arch/ia64/kernel/kgdb.c:580:
+} smp_unw[NR_CPUS];

WARNING:LINE_SPACING: Missing a blank line after declarations
#931: FILE: arch/ia64/kernel/kgdb.c:607:
+	unsigned long hw_breakpoint_status = ia64_getreg(_IA64_REG_PSR);
+	if (hw_breakpoint_status & IA64_PSR_DB)

WARNING:RETURN_VOID: void function return statements are not generally useful
#939: FILE: arch/ia64/kernel/kgdb.c:615:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#953: FILE: arch/ia64/kernel/kgdb.c:629:
+	return;
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#975: FILE: arch/ia64/kernel/kgdb.c:651:
+		if (current->state == TASK_RUNNING)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#977: FILE: arch/ia64/kernel/kgdb.c:653:
+		else {

WARNING:RETURN_VOID: void function return statements are not generally useful
#989: FILE: arch/ia64/kernel/kgdb.c:665:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1000: FILE: arch/ia64/kernel/kgdb.c:676:
+static int kgdb_notify(struct notifier_block *self, unsigned long cmd,
+	void *ptr)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1020: FILE: arch/ia64/kernel/kgdb.c:696:
+		if (user_mode(regs))
[...]
+		else if (err == 36 && kgdb_hwbreak_sstep[smp_processor_id()]) {
[...]

WARNING:RETURN_VOID: void function return statements are not generally useful
#1065: FILE: arch/ia64/kernel/kgdb.c:741:
+	return;
+}

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1102: FILE: arch/ia64/kernel/kgdb.c:778:
+		for (i = 0; i < NR_CPUS; i++)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1104: FILE: arch/ia64/kernel/kgdb.c:780:
+			if (smp_unw[i].task == kgdb_usethread && smp_unw[i].unw
+			    && smp_unw[i].unw != (struct unw_frame_info *)1) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1108: FILE: arch/ia64/kernel/kgdb.c:784:
+				break;
+			} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1118: FILE: arch/ia64/kernel/kgdb.c:794:
+		printk(KERN_ERR "kgdb_arch_handle_exception: p packet "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kgdb_arch_handle_exception', this function's name, in a string
#1118: FILE: arch/ia64/kernel/kgdb.c:794:
+		printk(KERN_ERR "kgdb_arch_handle_exception: p packet "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#1119: FILE: arch/ia64/kernel/kgdb.c:795:
+		printk(KERN_ERR "kgdb_arch_handle_exception: p packet "
+			   "bad (%s)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#1143: FILE: arch/ia64/kernel/kgdb.c:819:
+			regnum = (int) reglong;

CHECK:SPACING: No space is necessary after a cast
#1149: FILE: arch/ia64/kernel/kgdb.c:825:
+			regnum = (int) reglong;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1158: FILE: arch/ia64/kernel/kgdb.c:834:
+static void do_kgdb_handle_exception(struct unw_frame_info *unw_info,
+	void *data)

CHECK:CAMELCASE: Avoid CamelCase: <newPC>
#1162: FILE: arch/ia64/kernel/kgdb.c:838:
+	unsigned long newPC;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: Unbalanced braces around else statement
#1192: FILE: arch/ia64/kernel/kgdb.c:868:
+			} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'v >= 0'
#1204: FILE: arch/ia64/kernel/kgdb.c:880:
+			if ((!kgdb_usethread || kgdb_usethread == current) &&
+			    kgdb_hex2long(&ptr, &v) &&
+			    *ptr++ == '=' && (v >= 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#1204: FILE: arch/ia64/kernel/kgdb.c:880:
+			if ((!kgdb_usethread || kgdb_usethread == current) &&
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1211: FILE: arch/ia64/kernel/kgdb.c:887:
+			} else

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#1225: FILE: arch/ia64/kernel/kgdb.c:901:
+		/* try to read optional parameter, pc unchanged if no parm */
 		                                                      ^^^^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1247: FILE: arch/ia64/kernel/kgdb.c:923:
+		/* if not hardware breakpoint, then reenable them */
 		                                    ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1248: FILE: arch/ia64/kernel/kgdb.c:924:
+		if (e_vector != TRAP_HWBKPT)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1250: FILE: arch/ia64/kernel/kgdb.c:926:
+		else {

WARNING:RETURN_VOID: void function return statements are not generally useful
#1262: FILE: arch/ia64/kernel/kgdb.c:938:
+	return;
+}

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#1264: FILE: arch/ia64/kernel/kgdb.c:940:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TABSTOP: Statements should start on a tabstop
#1292: FILE: arch/ia64/kernel/smp.c:177:
+			      case IPI_KGDB_INTERRUPT:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1323: FILE: arch/ia64/kernel/traps.c:160:
+			if (notify_die(DIE_BREAK, "bad break", regs,
+				break_num, TRAP_BRKPT, SIGTRAP) == NOTIFY_STOP)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1359: FILE: arch/ia64/mm/fault.c:266:
+	if (notify_die(DIE_PAGE_FAULT_NO_CONTEXT, "no context", regs,
+			isr, 14, SIGSEGV) == NOTIFY_STOP)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1378: FILE: include/asm-ia64/kgdb.h:1:
+#ifdef __KERNEL__

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1397: FILE: include/asm-ia64/kgdb.h:20:
+ * on ia64. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1400: FILE: include/asm-ia64/kgdb.h:23:
+#define NUMCRITREGBYTES		(70*8)
                        		   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1401: FILE: include/asm-ia64/kgdb.h:24:
+#define JMP_REGS_ALIGNMENT	__attribute__ ((aligned (16)))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1401: FILE: include/asm-ia64/kgdb.h:24:
+#define JMP_REGS_ALIGNMENT	__attribute__ ((aligned (16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#1401: FILE: include/asm-ia64/kgdb.h:24:
+#define JMP_REGS_ALIGNMENT	__attribute__ ((aligned (16)))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1405: FILE: include/asm-ia64/kgdb.h:28:
+#define BREAKPOINT()		asm volatile ("break.m 0x6665")

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1410: FILE: include/asm-ia64/kgdb.h:33:
+extern void smp_send_nmi_allbutself(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1411: FILE: include/asm-ia64/kgdb.h:34:
+extern void kgdb_wait_ipi(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1411: FILE: include/asm-ia64/kgdb.h:34:
+extern void kgdb_wait_ipi(struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369978.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 38 warnings, 73 checks, 1322 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369978.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
