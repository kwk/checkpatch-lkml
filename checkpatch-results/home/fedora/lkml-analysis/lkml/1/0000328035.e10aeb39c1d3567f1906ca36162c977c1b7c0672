WARNING:LINE_SPACING: Missing a blank line after declarations
#60: FILE: include/linux/genhd.h:173:
+	int i;
+	for (i = 0; i < gendiskp->minors - 1; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#63: FILE: include/linux/genhd.h:176:
+		if (part && part->start_sect <= sector
+		    && sector < part->start_sect + part->nr_sects)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'part' may be better as '(part)' to avoid precedence issues
#77: FILE: include/linux/genhd.h:202:
+#define __part_stat_add(part, field, addnd)				\
+	(per_cpu_ptr(part->dkstats, smp_processor_id())->field += addnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#77: FILE: include/linux/genhd.h:202:
+#define __part_stat_add(part, field, addnd)				\
+	(per_cpu_ptr(part->dkstats, smp_processor_id())->field += addnd)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'gendiskp' - possible side-effects?
#80: FILE: include/linux/genhd.h:205:
+#define __all_stat_add(gendiskp, field, addnd, sector)		\
+({								\
+	struct hd_struct *part = get_part(gendiskp, sector);	\
+	if (part)						\
+		__part_stat_add(part, field, addnd);		\
+	__disk_stat_add(gendiskp, field, addnd);		\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#80: FILE: include/linux/genhd.h:205:
+#define __all_stat_add(gendiskp, field, addnd, sector)		\
+({								\
+	struct hd_struct *part = get_part(gendiskp, sector);	\
+	if (part)						\
+		__part_stat_add(part, field, addnd);		\
+	__disk_stat_add(gendiskp, field, addnd);		\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addnd' - possible side-effects?
#80: FILE: include/linux/genhd.h:205:
+#define __all_stat_add(gendiskp, field, addnd, sector)		\
+({								\
+	struct hd_struct *part = get_part(gendiskp, sector);	\
+	if (part)						\
+		__part_stat_add(part, field, addnd);		\
+	__disk_stat_add(gendiskp, field, addnd);		\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'part' may be better as '(part)' to avoid precedence issues
#88: FILE: include/linux/genhd.h:213:
+#define part_stat_read(part, field)					\
+({									\
+	typeof(part->dkstats->field) res = 0;				\
+	int i;								\
+	for_each_possible_cpu(i)					\
+		res += per_cpu_ptr(part->dkstats, i)->field;		\
+	res;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#88: FILE: include/linux/genhd.h:213:
+#define part_stat_read(part, field)					\
+({									\
+	typeof(part->dkstats->field) res = 0;				\
+	int i;								\
+	for_each_possible_cpu(i)					\
+		res += per_cpu_ptr(part->dkstats, i)->field;		\
+	res;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#88: FILE: include/linux/genhd.h:213:
+#define part_stat_read(part, field)					\
+({									\
+	typeof(part->dkstats->field) res = 0;				\
+	int i;								\
+	for_each_possible_cpu(i)					\
+		res += per_cpu_ptr(part->dkstats, i)->field;		\
+	res;								\
+})

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#97: FILE: include/linux/genhd.h:222:
+static inline void part_stat_set_all(struct hd_struct *part, int value)	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#99: FILE: include/linux/genhd.h:224:
+	int i;
+	for_each_possible_cpu(i)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'part' may be better as '(part)' to avoid precedence issues
#115: FILE: include/linux/genhd.h:239:
+#define __part_stat_add(part, field, addnd) \
+	(part->dkstats.field += addnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#115: FILE: include/linux/genhd.h:239:
+#define __part_stat_add(part, field, addnd) \
+	(part->dkstats.field += addnd)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'gendiskp' - possible side-effects?
#118: FILE: include/linux/genhd.h:242:
+#define __all_stat_add(gendiskp, field, addnd, sector)		\
+({								\
+	struct hd_struct *part = get_part(gendiskp, sector);	\
+	if (part)						\
+		part->dkstats.field += addnd;			\
+	__disk_stat_add(gendiskp, field, addnd);		\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#118: FILE: include/linux/genhd.h:242:
+#define __all_stat_add(gendiskp, field, addnd, sector)		\
+({								\
+	struct hd_struct *part = get_part(gendiskp, sector);	\
+	if (part)						\
+		part->dkstats.field += addnd;			\
+	__disk_stat_add(gendiskp, field, addnd);		\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#118: FILE: include/linux/genhd.h:242:
+#define __all_stat_add(gendiskp, field, addnd, sector)		\
+({								\
+	struct hd_struct *part = get_part(gendiskp, sector);	\
+	if (part)						\
+		part->dkstats.field += addnd;			\
+	__disk_stat_add(gendiskp, field, addnd);		\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addnd' - possible side-effects?
#118: FILE: include/linux/genhd.h:242:
+#define __all_stat_add(gendiskp, field, addnd, sector)		\
+({								\
+	struct hd_struct *part = get_part(gendiskp, sector);	\
+	if (part)						\
+		part->dkstats.field += addnd;			\
+	__disk_stat_add(gendiskp, field, addnd);		\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'part' may be better as '(part)' to avoid precedence issues
#126: FILE: include/linux/genhd.h:250:
+#define part_stat_read(part, field)	(part->dkstats.field)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'subnd' may be better as '(subnd)' to avoid precedence issues
#153: FILE: include/linux/genhd.h:290:
+#define __part_stat_sub(gendiskp, field, subnd) \
+		__part_stat_add(gendiskp, field, -subnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'subnd' may be better as '(subnd)' to avoid precedence issues
#155: FILE: include/linux/genhd.h:292:
+#define part_stat_sub(gendiskp, field, subnd) \
+		part_stat_add(gendiskp, field, -subnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'subnd' may be better as '(subnd)' to avoid precedence issues
#175: FILE: include/linux/genhd.h:312:
+#define __all_stat_sub(gendiskp, field, subnd, sector) \
+		__all_stat_add(gendiskp, field, -subnd, sector)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'subnd' may be better as '(subnd)' to avoid precedence issues
#177: FILE: include/linux/genhd.h:314:
+#define all_stat_sub(gendiskp, field, subnd, sector) \
+		all_stat_add(gendiskp, field, -subnd, sector)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000328035.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 2 warnings, 20 checks, 176 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000328035.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
