CHECK:LINE_SPACING: Please don't use multiple blank lines
#135: FILE: drivers/gpio/gpiolib.c:291:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: drivers/gpio/gpiolib.c:309:
+static ssize_t gpio_direction_show(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: drivers/gpio/gpiolib.c:322:
+static ssize_t gpio_direction_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#169: FILE: drivers/gpio/gpiolib.c:325:
+	unsigned		gpio = desc - gpio_desc;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#170: FILE: drivers/gpio/gpiolib.c:326:
+	unsigned		len = size;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#184: FILE: drivers/gpio/gpiolib.c:340:
+	else if (len == 3 && (strncmp(buf, "out", 3) == 0
+			|| strncmp(buf, "low", 3) == 0))

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'gpio_direction_show' to 'direction_show' 'gpio_direction_store' to 'direction_store'
#191: FILE: drivers/gpio/gpiolib.c:347:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: drivers/gpio/gpiolib.c:352:
+static ssize_t gpio_value_show(struct device *dev,
+		struct device_attribute *attr, char *buf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#199: FILE: drivers/gpio/gpiolib.c:355:
+	unsigned		gpio = desc - gpio_desc;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: drivers/gpio/gpiolib.c:365:
+static ssize_t gpio_value_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#212: FILE: drivers/gpio/gpiolib.c:368:
+	unsigned		gpio = desc - gpio_desc;

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#223: FILE: drivers/gpio/gpiolib.c:379:
+	ret = strict_strtol(buf, 0, &value);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'gpio_value_show' to 'value_show' 'gpio_value_store' to 'value_store'
#228: FILE: drivers/gpio/gpiolib.c:384:
+}

CHECK:SPACING: No space is necessary after a cast
#239: FILE: drivers/gpio/gpiolib.c:395:
+	.attrs = (struct attribute **) gpio_attrs,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#254: FILE: drivers/gpio/gpiolib.c:410:
+int gpio_export(unsigned gpio)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#261: FILE: drivers/gpio/gpiolib.c:417:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#271: FILE: drivers/gpio/gpiolib.c:427:
+	if (test_bit(FLAG_REQUESTED, &desc->flags)
+			&& !test_bit(FLAG_EXPORT, &desc->flags))

CHECK:BRACES: braces {} should be used on all arms of this statement
#275: FILE: drivers/gpio/gpiolib.c:431:
+	if (status)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#277: FILE: drivers/gpio/gpiolib.c:433:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: drivers/gpio/gpiolib.c:437:
+		dev = device_create(gpio_class, desc->chip->dev, 0,
+				"gpio-%d", gpio);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: drivers/gpio/gpiolib.c:441:
+			status = sysfs_create_group(&dev->kobj,
+					&gpio_attr_group);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#306: FILE: drivers/gpio/gpiolib.c:462:
+void gpio_unexport(unsigned gpio)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#332: FILE: drivers/gpio/gpiolib.c:488:
+
+}

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#356: FILE: drivers/gpio/gpiolib.c:512:
+	status = strict_strtoul(tmp, 0, &gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#507: FILE: include/asm-generic/gpio.h:117:
+extern int gpio_export(unsigned gpio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#507: FILE: include/asm-generic/gpio.h:117:
+extern int gpio_export(unsigned gpio);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#508: FILE: include/asm-generic/gpio.h:118:
+extern void gpio_unexport(unsigned gpio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#508: FILE: include/asm-generic/gpio.h:118:
+extern void gpio_unexport(unsigned gpio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#521: FILE: include/asm-generic/gpio.h:154:
+static inline int gpio_export(unsigned gpio)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#523: FILE: include/asm-generic/gpio.h:156:
+	return -ENOSYS;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#526: FILE: include/asm-generic/gpio.h:159:
+static inline void gpio_unexport(unsigned gpio)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289043.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 15 checks, 416 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000289043.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
