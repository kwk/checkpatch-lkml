WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#57: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: kernel/debug/debug_core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#124: FILE: kernel/debug/debug_core.c:51:
+#include <asm/cacheflush.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#126: FILE: kernel/debug/debug_core.c:53:
+#include <asm/atomic.h>

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#148: FILE: kernel/debug/debug_core.c:75:
+} kgdb_info[NR_CPUS];

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#162: FILE: kernel/debug/debug_core.c:89:
+static struct kgdb_io		*kgdb_io_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#185: FILE: kernel/debug/debug_core.c:112:
+	[0 ... KGDB_MAX_BREAKPOINTS-1] = { .state = BP_UNDEFINED }
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#243: FILE: kernel/debug/debug_core.c:170:
+ * can be overriden by architectures when needed:
           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#277: FILE: kernel/debug/debug_core.c:204:
+		printk(KERN_ERR "KGDB: Critical breakpoint error, kernel "

WARNING:SPLIT_STRING: quoted string split across lines
#278: FILE: kernel/debug/debug_core.c:205:
+		printk(KERN_ERR "KGDB: Critical breakpoint error, kernel "
+		   "memory destroyed at: %lx", addr);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:RETURN_VOID: void function return statements are not generally useful
#301: FILE: kernel/debug/debug_core.c:228:
+	return;
+}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 37)
#343: FILE: kernel/debug/debug_core.c:270:
+		while ((ch = (kgdb_io_ops->read_char())) != '$')
+			/* nothing */;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#618: FILE: kernel/debug/debug_core.c:545:
+	if (tid < -1 && tid > -NR_CPUS - 2) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#625: FILE: kernel/debug/debug_core.c:552:
+		printk(KERN_ERR "KGDB: Internal thread select error\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: kernel/debug/debug_core.c:641:
+		error = kgdb_arch_set_breakpoint(addr,
+				kgdb_break[i].saved_instr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#717: FILE: kernel/debug/debug_core.c:644:
+			printk(KERN_INFO "KGDB: BP install failed: %lx", addr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == BP_SET'
#737: FILE: kernel/debug/debug_core.c:664:
+		if ((kgdb_break[i].state == BP_SET) &&
+					(kgdb_break[i].bpt_addr == addr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#737: FILE: kernel/debug/debug_core.c:664:
+		if ((kgdb_break[i].state == BP_SET) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: kernel/debug/debug_core.c:665:
+		if ((kgdb_break[i].state == BP_SET) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: kernel/debug/debug_core.c:670:
+		if (kgdb_break[i].state == BP_REMOVED &&
+					kgdb_break[i].bpt_addr == addr) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: kernel/debug/debug_core.c:707:
+		error = kgdb_arch_remove_breakpoint(addr,
+					kgdb_break[i].saved_instr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#782: FILE: kernel/debug/debug_core.c:709:
+			printk(KERN_INFO "KGDB: BP remove failed: %lx\n", addr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == BP_SET'
#797: FILE: kernel/debug/debug_core.c:724:
+		if ((kgdb_break[i].state == BP_SET) &&
+				(kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#797: FILE: kernel/debug/debug_core.c:724:
+		if ((kgdb_break[i].state == BP_SET) &&
+				(kgdb_break[i].bpt_addr == addr)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: kernel/debug/debug_core.c:725:
+		if ((kgdb_break[i].state == BP_SET) &&
+				(kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == BP_REMOVED'
#811: FILE: kernel/debug/debug_core.c:738:
+		if ((kgdb_break[i].state == BP_REMOVED) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#811: FILE: kernel/debug/debug_core.c:738:
+		if ((kgdb_break[i].state == BP_REMOVED) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: kernel/debug/debug_core.c:739:
+		if ((kgdb_break[i].state == BP_REMOVED) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: kernel/debug/debug_core.c:757:
+		error = kgdb_arch_remove_breakpoint(addr,
+				kgdb_break[i].saved_instr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#832: FILE: kernel/debug/debug_core.c:759:
+			printk(KERN_ERR "KGDB: breakpoint remove failed: %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: kernel/debug/debug_core.c:760:
+			printk(KERN_ERR "KGDB: breakpoint remove failed: %lx\n",
+			   addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#910: FILE: kernel/debug/debug_core.c:837:
+		printk(KERN_CRIT "KGDB: Waiting for remote debugger\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1002: FILE: kernel/debug/debug_core.c:929:
+	if (kgdb_hex2long(&ptr, &addr) > 0 && *ptr++ == ',' &&
+					kgdb_hex2long(&ptr, &length) > 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1063: FILE: kernel/debug/debug_core.c:990:
+		printk(KERN_CRIT "Executing emergency reboot\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1150: FILE: kernel/debug/debug_core.c:1077:
+			kgdb_mem2hex(getthread(ks->linux_regs,
+					ks->threadid)->comm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1156: FILE: kernel/debug/debug_core.c:1083:
+			sprintf(tmpstr, "shadowCPU%d",
+					(int)(-ks->threadid - 2));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1254: FILE: kernel/debug/debug_core.c:1181:
+	if (*(ptr++) != ',' ||
+		!kgdb_hex2long(&ptr, &length)) {

CHECK:SPACING: No space is necessary after a cast
#1268: FILE: kernel/debug/debug_core.c:1195:
+			(int) length, *bpt_type - '0');

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1283: FILE: kernel/debug/debug_core.c:1210:
+	if (remcom_in_buffer[1] == '0' && remcom_in_buffer[2] == '9') {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1288: FILE: kernel/debug/debug_core.c:1215:
+	} else if (remcom_in_buffer[1] == '1' && remcom_in_buffer[2] == '5') {
+

WARNING:SPLIT_STRING: quoted string split across lines
#1297: FILE: kernel/debug/debug_core.c:1224:
+		kgdb_msg_write("KGDB only knows signal 9 (pass)"
+			" and 15 (pass and disconnect)\n"

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1302: FILE: kernel/debug/debug_core.c:1229:
+	/* Indicate fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#1307: FILE: kernel/debug/debug_core.c:1234:
+ * This function performs all gdbserial command procesing
                                                 ^^^^^^^^^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1393: FILE: kernel/debug/debug_core.c:1320:
+			/* Fall through on tmp < 0 */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1402: FILE: kernel/debug/debug_core.c:1329:
+			/* Fall through to default processing */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1406: FILE: kernel/debug/debug_core.c:1333:
+			error = kgdb_arch_handle_exception(ks->ex_vector,
+						ks->signo,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1421: FILE: kernel/debug/debug_core.c:1348:
+
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1455: FILE: kernel/debug/debug_core.c:1382:
+		printk(KERN_CRIT "KGDB: re-enter error: breakpoint removed %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1456: FILE: kernel/debug/debug_core.c:1383:
+		printk(KERN_CRIT "KGDB: re-enter error: breakpoint removed %lx\n",
+			addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1469: FILE: kernel/debug/debug_core.c:1396:
+	printk(KERN_CRIT "KGDB: re-enter exception: ALL breakpoints killed\n");

WARNING:TYPO_SPELLING: 'gaurd' may be misspelled - perhaps 'guard'?
#1521: FILE: kernel/debug/debug_core.c:1448:
+	 * that was single stepping.  To gaurd against a deadlock, the
 	                                 ^^^^^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1561: FILE: kernel/debug/debug_core.c:1488:
+		for (i = 0; i < NR_CPUS; i++)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!kgdb_single_step'
#1573: FILE: kernel/debug/debug_core.c:1500:
+	if ((!kgdb_single_step) && kgdb_do_roundup)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1607: FILE: kernel/debug/debug_core.c:1534:
+		for (i = NR_CPUS-1; i >= 0; i--)
 		                ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1607: FILE: kernel/debug/debug_core.c:1534:
+		for (i = NR_CPUS-1; i >= 0; i--)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1622: FILE: kernel/debug/debug_core.c:1549:
+		int sstep_cpu = atomic_read(&kgdb_cpu_doing_single_step);
+		if (kgdb_info[sstep_cpu].task)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1640: FILE: kernel/debug/debug_core.c:1567:
+	if (!atomic_read(&cpu_in_kgdb[cpu]) &&
+			atomic_read(&kgdb_active) != cpu &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1650: FILE: kernel/debug/debug_core.c:1577:
+static void kgdb_console_write(struct console *co, const char *s,
+   unsigned count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1650: FILE: kernel/debug/debug_core.c:1577:
+   unsigned count)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1650: FILE: kernel/debug/debug_core.c:1577:
+   unsigned count)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1655: FILE: kernel/debug/debug_core.c:1582:
+	 * and print. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1675: FILE: kernel/debug/debug_core.c:1602:
+		printk(KERN_CRIT "ERROR: No KGDB I/O module available\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1679: FILE: kernel/debug/debug_core.c:1606:
+		printk(KERN_CRIT "Entering KGDB\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1730: FILE: kernel/debug/debug_core.c:1657:
+	printk(KERN_CRIT "kgdb: Waiting for connection from remote gdb...\n");

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#1740: FILE: kernel/debug/debug_core.c:1667:
+int kgdb_register_io_module(struct kgdb_io *new_kgdb_io_ops)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1749: FILE: kernel/debug/debug_core.c:1676:
+		printk(KERN_ERR "kgdb: Another I/O driver is already "

WARNING:SPLIT_STRING: quoted string split across lines
#1750: FILE: kernel/debug/debug_core.c:1677:
+		printk(KERN_ERR "kgdb: Another I/O driver is already "
+				"registered with KGDB.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1766: FILE: kernel/debug/debug_core.c:1693:
+	printk(KERN_INFO "kgdb: Registered I/O driver %s.\n",

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#1785: FILE: kernel/debug/debug_core.c:1712:
+void kgdb_unregister_io_module(struct kgdb_io *old_kgdb_io_ops)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1787: FILE: kernel/debug/debug_core.c:1714:
+	BUG_ON(kgdb_connected);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1802: FILE: kernel/debug/debug_core.c:1729:
+	printk(KERN_INFO

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000023736.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 42 warnings, 29 checks, 1776 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000023736.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
