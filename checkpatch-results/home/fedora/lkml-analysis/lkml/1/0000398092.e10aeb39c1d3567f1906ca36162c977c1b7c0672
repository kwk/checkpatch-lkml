CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: arch/i386/kernel/smpcommon.c:43:
+int raw_smp_call_function(void (*func) (void *info), void *info,
+			       int nonatomic, int wait)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: arch/i386/kernel/smpcommon.c:63:
+int raw_smp_call_function_single(int cpu, void (*func) (void *info),
+				      void *info, int nonatomic, int wait)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#118: FILE: arch/ia64/kernel/smp.c:377:
+raw_smp_call_function_single (int cpuid, void (*func) (void *info), void *info, int nonatomic,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: arch/ia64/kernel/smp.c:378:
+raw_smp_call_function_single (int cpuid, void (*func) (void *info), void *info, int nonatomic,
 			  int wait)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#136: FILE: arch/ia64/kernel/smp.c:438:
+raw_smp_call_function (void (*func) (void *info), void *info, int nonatomic, int wait)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: arch/powerpc/kernel/smp.c:287:
+int raw_smp_call_function(void (*func) (void *info), void *info,
+			       int nonatomic, int wait)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: arch/powerpc/kernel/smp.c:294:
+int raw_smp_call_function_single(int cpu, void (*func) (void *info),
+				      void *info, int nonatomic, int wait)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#204: FILE: arch/x86_64/kernel/smp.c:382:
+raw_smp_call_function_single (int cpu, void (*func) (void *info),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: arch/x86_64/kernel/smp.c:383:
+raw_smp_call_function_single (int cpu, void (*func) (void *info),
+				  void *info, int nonatomic, int wait)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#233: FILE: arch/x86_64/kernel/smp.c:454:
+int raw_smp_call_function (void (*func) (void *info), void *info,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: arch/x86_64/kernel/smp.c:455:
+int raw_smp_call_function (void (*func) (void *info), void *info,
+				int nonatomic, int wait)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: include/linux/smp.h:83:
+       raw_smp_call_function(func, info, retry, wait)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: include/linux/smp.h:85:
+       raw_smp_call_function_single(cpuid, func, info, retry, wait)$

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#284: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#289: FILE: include/linux/vfcipi.h:1:
+#ifndef _LINUX_VFCIPI_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/linux/vfcipi.h:5:
+extern int vfcipi_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#371: FILE: kernel/vfcipi/heap.c:1:
+/*

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#418: FILE: kernel/vfcipi/heap.c:48:
+	for (i = 0; i<nr_elements; ++i) {
 	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#420: FILE: kernel/vfcipi/heap.c:50:
+		size_t offset = i*actual_size;
 		                 ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#422: FILE: kernel/vfcipi/heap.c:52:
+		hi = (struct vfcipi_heap_item*)&heap->data[offset];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#434: FILE: kernel/vfcipi/heap.c:64:
+static void* _vfcipi_heap_alloc(struct vfcipi_heap *heap)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#444: FILE: kernel/vfcipi/heap.c:74:
+		BUG_ON(!hi);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#452: FILE: kernel/vfcipi/heap.c:82:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#466: FILE: kernel/vfcipi/heap.c:96:
+	BUG_ON(hi->magic != VFCIPI_HEAP_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: kernel/vfcipi/heap.c:97:
+	BUG_ON(!hi->inuse);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#487: FILE: kernel/vfcipi/heap.c:117:
+void* vfcipi_heap_alloc(size_t size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#489: FILE: kernel/vfcipi/heap.c:119:
+	BUG_ON(size > vfcipi_heap.element_size);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#494: FILE: kernel/vfcipi/heap.c:124:
+void* vfcipi_heap_zalloc(size_t size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: kernel/vfcipi/heap.c:127:
+	void *ptr = vfcipi_heap_alloc(size);
+	if (ptr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#503: FILE: kernel/vfcipi/heap.c:133:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#505: FILE: kernel/vfcipi/heap.c:135:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#513: FILE: kernel/vfcipi/heap.h:1:
+#ifndef _VFCIPI_HEAP_H

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#519: FILE: kernel/vfcipi/heap.h:7:
+void* vfcipi_heap_alloc(size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#519: FILE: kernel/vfcipi/heap.h:7:
+void* vfcipi_heap_alloc(size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#520: FILE: kernel/vfcipi/heap.h:8:
+void* vfcipi_heap_zalloc(size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#520: FILE: kernel/vfcipi/heap.h:8:
+void* vfcipi_heap_zalloc(size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#521: FILE: kernel/vfcipi/heap.h:9:
+void  vfcipi_heap_free(void *);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#526: FILE: kernel/vfcipi/heap.h:14:
+#define vfcipi_heap_alloc(size_t size) kmalloc(size, GFP_ATOMIC);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#527: FILE: kernel/vfcipi/heap.h:15:
+#define vfcipi_heap_alloc(size_t size) kzalloc(size, GFP_ATOMIC);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#528: FILE: kernel/vfcipi/heap.h:16:
+#define vfcipi_heap_free(void *ptr)    kfree(ptr);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#539: FILE: kernel/vfcipi/thread.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#569: FILE: kernel/vfcipi/thread.c:31:
+#include <asm/atomic.h>

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr >= s->threshold'
#622: FILE: kernel/vfcipi/thread.c:84:
+	if (s->task && (curr >= s->threshold))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#632: FILE: kernel/vfcipi/thread.c:94:
+		if (atomic_read(&s->curr) != s->threshold) {
[...]
+		} else
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#633: FILE: kernel/vfcipi/thread.c:95:
+			if (s->task) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#635: FILE: kernel/vfcipi/thread.c:97:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#637: FILE: kernel/vfcipi/thread.c:99:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#654: FILE: kernel/vfcipi/thread.c:116:
+	struct vfcipi_workitem *item = vfcipi_heap_zalloc(sizeof(*item));
+	if (!item)

WARNING:TYPO_SPELLING: 'Theres' may be misspelled - perhaps 'There's'?
#663: FILE: kernel/vfcipi/thread.c:125:
+	 * Theres no need to wait for both a start and a finish event.	You
 	   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#696: FILE: kernel/vfcipi/thread.c:158:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#713: FILE: kernel/vfcipi/thread.c:175:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#718: FILE: kernel/vfcipi/thread.c:180:
+			BUG_ON(!qi);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#760: FILE: kernel/vfcipi/thread.c:222:
+	BUG_ON(!ftask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: kernel/vfcipi/thread.c:248:
+static int vfcipi_call_function_single(int cpu, void (*func)(void *data),
+				      void *data, int nonatomic, int wait)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#807: FILE: kernel/vfcipi/thread.c:269:
+static int vfcipi_call_function(void (*func)(void *data), void *data,
+			       int nonatomic, int wait)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#813: FILE: kernel/vfcipi/thread.c:275:
+	int nr_cpus = num_online_cpus()-1;
 	                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#905: FILE: kernel/vfcipi/thread.c:367:
+		struct vfcipi_task *ftask = per_cpu(vfcipi_tasks, cpu);
+		kfree(ftask);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000398092.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 29 warnings, 20 checks, 770 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000398092.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
