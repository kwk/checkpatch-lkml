CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/devpts_fs.h:64:
+extern struct pts_namespace *new_pts_ns(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/linux/devpts_fs.h:65:
+extern void free_pts_ns(struct kref *kref);

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: include/linux/devpts_fs.h:80:
+              struct pts_namespace *old_ns)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: include/linux/devpts_fs.h:80:
+static inline struct pts_namespace *copy_pts_ns(u64 flags,
+              struct pts_namespace *old_ns)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: include/linux/devpts_fs.h:80:
+              struct pts_namespace *old_ns)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: include/linux/devpts_fs.h:82:
+      if (flags & CLONE_NEWPTS)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 14)
#131: FILE: include/linux/devpts_fs.h:82:
+      if (flags & CLONE_NEWPTS)
+              return new_pts_ns();

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: include/linux/devpts_fs.h:83:
+              return new_pts_ns();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: include/linux/devpts_fs.h:83:
+              return new_pts_ns();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: include/linux/devpts_fs.h:84:
+      else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 14)
#133: FILE: include/linux/devpts_fs.h:84:
+      else
+              return get_pts_ns(old_ns);

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: include/linux/devpts_fs.h:85:
+              return get_pts_ns(old_ns);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: include/linux/devpts_fs.h:85:
+              return get_pts_ns(old_ns);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: include/linux/devpts_fs.h:105:
+              struct pts_namespace *old_ns)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: include/linux/devpts_fs.h:105:
+static inline struct pts_namespace *copy_pts_ns(u64 flags,
+              struct pts_namespace *old_ns)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: include/linux/devpts_fs.h:105:
+              struct pts_namespace *old_ns)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: include/linux/devpts_fs.h:107:
+      if (flags & CLONE_NEWPTS)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 14)
#148: FILE: include/linux/devpts_fs.h:107:
+      if (flags & CLONE_NEWPTS)
+              return ERR_PTR(-EINVAL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: include/linux/devpts_fs.h:108:
+              return ERR_PTR(-EINVAL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: include/linux/devpts_fs.h:108:
+              return ERR_PTR(-EINVAL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: include/linux/devpts_fs.h:109:
+      return old_ns;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#189: FILE: fs/devpts/inode.c:141:
+	printk(KERN_NOTICE "Created pts-ns 0x%p\n", ns);

WARNING:TYPO_SPELLING: 'acceses' may be misspelled - perhaps 'accesses'?
#207: FILE: fs/devpts/inode.c:159:
+	 * After clearing the pts_ns is NULL here, any acceses from parent
 	                                               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#220: FILE: fs/devpts/inode.c:172:
+	printk(KERN_NOTICE "Freed pts-ns 0x%p\n", ns);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#270: FILE: fs/devpts/inode.c:382:
+	BUG_ON(pts_ns == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pts_ns"
#270: FILE: fs/devpts/inode.c:382:
+	BUG_ON(pts_ns == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#278: FILE: fs/devpts/inode.c:402:
+	BUG_ON(pts_ns == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pts_ns"
#278: FILE: fs/devpts/inode.c:402:
+	BUG_ON(pts_ns == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: fs/devpts/inode.c:472:
+	BUG_ON(pts_ns == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pts_ns"
#301: FILE: fs/devpts/inode.c:472:
+	BUG_ON(pts_ns == NULL);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#315: FILE: kernel/fork.c:1717:
+				CLONE_NEWNET|CLONE_NEWPTS))
 				            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000297975.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 18 warnings, 8 checks, 269 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000297975.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
