WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#65: FILE: drivers/ieee802154/Kconfig:33:
+config IEEE802154_SERIAL
+	tristate "Simple LR-WPAN UART driver"
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: drivers/ieee802154/serial.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#104: FILE: drivers/ieee802154/serial.c:19:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#105: FILE: drivers/ieee802154/serial.c:20:
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#121: FILE: drivers/ieee802154/serial.c:36:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: drivers/ieee802154/serial.c:83:
+^IRESP_SET_CHANNEL ^I= 0x84, /* u8 id, u8 status */$

WARNING:TYPO_SPELLING: 'completition' may be misspelled - perhaps 'completion'?
#195: FILE: drivers/ieee802154/serial.c:110:
+	/* command completition */
 	           ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#228: FILE: drivers/ieee802154/serial.c:143:
+	BUG_ON(!zbdev);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#236: FILE: drivers/ieee802154/serial.c:151:
+	printk(KERN_INFO "%lu %s, %d bytes:", jiffies, __func__, zbdev->pending_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#238: FILE: drivers/ieee802154/serial.c:153:
+		printk(KERN_CONT " 0x%02X", zbdev->pending_data[j]);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#238: FILE: drivers/ieee802154/serial.c:153:
+		printk(KERN_CONT " 0x%02X", zbdev->pending_data[j]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#239: FILE: drivers/ieee802154/serial.c:154:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#239: FILE: drivers/ieee802154/serial.c:154:
+	printk(KERN_CONT "\n");

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#241: FILE: drivers/ieee802154/serial.c:156:
+	if (tty->driver->ops->write(tty, zbdev->pending_data, zbdev->pending_size) != zbdev->pending_size) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#242: FILE: drivers/ieee802154/serial.c:157:
+		printk(KERN_ERR "%s: device write failed\n", __func__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#255: FILE: drivers/ieee802154/serial.c:170:
+	BUG_ON(!zbdev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#264: FILE: drivers/ieee802154/serial.c:179:
+		printk(KERN_ERR "%s(): cmd is already pending, id = %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: drivers/ieee802154/serial.c:180:
+		printk(KERN_ERR "%s(): cmd is already pending, id = %u\n",
+			__func__, zbdev->pending_id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#266: FILE: drivers/ieee802154/serial.c:181:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#278: FILE: drivers/ieee802154/serial.c:193:
+		printk(KERN_ERR "%s(): unable to allocate memory\n", __func__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#294: FILE: drivers/ieee802154/serial.c:209:
+	BUG_ON(!zbdev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#303: FILE: drivers/ieee802154/serial.c:218:
+		printk(KERN_ERR "%s(): cmd is already pending, id = %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: drivers/ieee802154/serial.c:219:
+		printk(KERN_ERR "%s(): cmd is already pending, id = %u\n",
+			__func__, zbdev->pending_id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#305: FILE: drivers/ieee802154/serial.c:220:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#318: FILE: drivers/ieee802154/serial.c:233:
+		printk(KERN_ERR "%s(): unable to allocate memory\n", __func__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#334: FILE: drivers/ieee802154/serial.c:249:
+	BUG_ON(!zbdev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#343: FILE: drivers/ieee802154/serial.c:258:
+		printk(KERN_ERR "%s(): cmd is already pending, id = %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: drivers/ieee802154/serial.c:259:
+		printk(KERN_ERR "%s(): cmd is already pending, id = %u\n",
+			__func__, zbdev->pending_id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#345: FILE: drivers/ieee802154/serial.c:260:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#358: FILE: drivers/ieee802154/serial.c:273:
+		printk(KERN_ERR "%s(): unable to allocate memory\n", __func__);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#403: FILE: drivers/ieee802154/serial.c:318:
+	return ((CMD_OPEN == zbdev->pending_id && RESP_OPEN == zbdev->id)
+		|| (CMD_CLOSE == zbdev->pending_id && RESP_CLOSE == zbdev->id)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#404: FILE: drivers/ieee802154/serial.c:319:
+		|| (CMD_CLOSE == zbdev->pending_id && RESP_CLOSE == zbdev->id)
+		|| (CMD_SET_CHANNEL == zbdev->pending_id && RESP_SET_CHANNEL == zbdev->id)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#405: FILE: drivers/ieee802154/serial.c:320:
+		|| (CMD_SET_CHANNEL == zbdev->pending_id && RESP_SET_CHANNEL == zbdev->id)
+		|| (CMD_ED == zbdev->pending_id && RESP_ED == zbdev->id)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#406: FILE: drivers/ieee802154/serial.c:321:
+		|| (CMD_ED == zbdev->pending_id && RESP_ED == zbdev->id)
+		|| (CMD_CCA == zbdev->pending_id && RESP_CCA == zbdev->id)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#407: FILE: drivers/ieee802154/serial.c:322:
+		|| (CMD_CCA == zbdev->pending_id && RESP_CCA == zbdev->id)
+		|| (CMD_SET_STATE == zbdev->pending_id && RESP_SET_STATE == zbdev->id)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#408: FILE: drivers/ieee802154/serial.c:323:
+		|| (CMD_SET_STATE == zbdev->pending_id && RESP_SET_STATE == zbdev->id)
+		|| (DATA_XMIT_BLOCK == zbdev->pending_id && RESP_XMIT_BLOCK == zbdev->id)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#409: FILE: drivers/ieee802154/serial.c:324:
+		|| (DATA_XMIT_BLOCK == zbdev->pending_id && RESP_XMIT_BLOCK == zbdev->id)
+		|| (DATA_XMIT_STREAM == zbdev->pending_id && RESP_XMIT_STREAM == zbdev->id)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#410: FILE: drivers/ieee802154/serial.c:325:
+		|| (DATA_XMIT_STREAM == zbdev->pending_id && RESP_XMIT_STREAM == zbdev->id)
+		|| DATA_RECV_BLOCK == zbdev->id

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#411: FILE: drivers/ieee802154/serial.c:326:
+		|| DATA_RECV_BLOCK == zbdev->id
+		|| DATA_RECV_STREAM == zbdev->id);

WARNING:LINE_SPACING: Missing a blank line after declarations
#421: FILE: drivers/ieee802154/serial.c:336:
+	struct sk_buff *skb;
+	skb = alloc_skb(zbdev->param2, GFP_ATOMIC);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#480: FILE: drivers/ieee802154/serial.c:395:
+			printk(KERN_ERR "%s: bad status received from firmware: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: drivers/ieee802154/serial.c:396:
+			printk(KERN_ERR "%s: bad status received from firmware: %u\n",
+				__func__, zbdev->param1);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#510: FILE: drivers/ieee802154/serial.c:425:
+		if (START_BYTE1 == c)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#515: FILE: drivers/ieee802154/serial.c:430:
+		if (START_BYTE2 == c)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#527: FILE: drivers/ieee802154/serial.c:442:
+			printk(KERN_ERR "%s, unexpected command id: %x\n", __func__, c);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'RESP_ED == zbdev->id'
#533: FILE: drivers/ieee802154/serial.c:448:
+		if ((RESP_ED == zbdev->id) || (DATA_RECV_BLOCK == zbdev->id))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'DATA_RECV_BLOCK == zbdev->id'
#533: FILE: drivers/ieee802154/serial.c:448:
+		if ((RESP_ED == zbdev->id) || (DATA_RECV_BLOCK == zbdev->id))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#533: FILE: drivers/ieee802154/serial.c:448:
+		if ((RESP_ED == zbdev->id) || (DATA_RECV_BLOCK == zbdev->id))

CHECK:BRACES: braces {} should be used on all arms of this statement
#533: FILE: drivers/ieee802154/serial.c:448:
+		if ((RESP_ED == zbdev->id) || (DATA_RECV_BLOCK == zbdev->id))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#535: FILE: drivers/ieee802154/serial.c:450:
+		else {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#543: FILE: drivers/ieee802154/serial.c:458:
+		if (RESP_ED == zbdev->id) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#543: FILE: drivers/ieee802154/serial.c:458:
+		if (RESP_ED == zbdev->id) {
[...]
+		} else if (DATA_RECV_BLOCK == zbdev->id)
[...]
+		else
[...]

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#546: FILE: drivers/ieee802154/serial.c:461:
+		} else if (DATA_RECV_BLOCK == zbdev->id)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#562: FILE: drivers/ieee802154/serial.c:477:
+			printk(KERN_ERR "%s(): data size is greater "

WARNING:SPLIT_STRING: quoted string split across lines
#563: FILE: drivers/ieee802154/serial.c:478:
+			printk(KERN_ERR "%s(): data size is greater "
+				"than buffer available\n", __func__);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#583: FILE: drivers/ieee802154/serial.c:498:
+	BUG_ON(!zbdev);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#587: FILE: drivers/ieee802154/serial.c:502:
+	pr_debug("%s()\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#589: FILE: drivers/ieee802154/serial.c:504:
+		printk(KERN_ERR "%s(): cmd is already pending, id = %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: drivers/ieee802154/serial.c:505:
+		printk(KERN_ERR "%s(): cmd is already pending, id = %u\n",
+			__func__, zbdev->pending_id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#591: FILE: drivers/ieee802154/serial.c:506:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#603: FILE: drivers/ieee802154/serial.c:518:
+		printk(KERN_ERR "%s(): unable to allocate memory\n", __func__);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#616: FILE: drivers/ieee802154/serial.c:531:
+		wait_for_completion_interruptible_timeout(&zbdev->open_done, msecs_to_jiffies(1000));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#626: FILE: drivers/ieee802154/serial.c:541:
+		printk(KERN_INFO "Opened connection to device\n");

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#640: FILE: drivers/ieee802154/serial.c:555:
+	pr_debug("%s\n", __func__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#643: FILE: drivers/ieee802154/serial.c:558:
+	if (NULL == zbdev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#644: FILE: drivers/ieee802154/serial.c:559:
+		printk(KERN_ERR "%s: wrong phy\n", __func__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#652: FILE: drivers/ieee802154/serial.c:567:
+	 * channels 0-10 are not valid for us */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#653: FILE: drivers/ieee802154/serial.c:568:
+	BUG_ON(channel < 11 || channel > 26);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#657: FILE: drivers/ieee802154/serial.c:572:
+	 * optimize this stuff anyway. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#658: FILE: drivers/ieee802154/serial.c:573:
+	BUG_ON((channel - 10) < 1 && (channel - 10) > 16);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#665: FILE: drivers/ieee802154/serial.c:580:
+	if (wait_event_interruptible_timeout(zbdev->wq, zbdev->status != PHY_INVAL, msecs_to_jiffies(1000)) > 0)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#674: FILE: drivers/ieee802154/serial.c:589:
+	pr_debug("%s end\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#684: FILE: drivers/ieee802154/serial.c:599:
+	pr_debug("%s\n", __func__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#687: FILE: drivers/ieee802154/serial.c:602:
+	if (NULL == zbdev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#688: FILE: drivers/ieee802154/serial.c:603:
+		printk(KERN_ERR "%s: wrong phy\n", __func__);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#695: FILE: drivers/ieee802154/serial.c:610:
+#if 0

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#701: FILE: drivers/ieee802154/serial.c:616:
+	if (wait_event_interruptible_timeout(zbdev->wq, zbdev->status != PHY_INVAL, msecs_to_jiffies(1000)) > 0) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#701: FILE: drivers/ieee802154/serial.c:616:
+	if (wait_event_interruptible_timeout(zbdev->wq, zbdev->status != PHY_INVAL, msecs_to_jiffies(1000)) > 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#704: FILE: drivers/ieee802154/serial.c:619:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#709: FILE: drivers/ieee802154/serial.c:624:
+	 * till we fix something regarding hardware or driver */

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#714: FILE: drivers/ieee802154/serial.c:629:
+	pr_debug("%s end\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#724: FILE: drivers/ieee802154/serial.c:639:
+	pr_debug("%s\n", __func__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#727: FILE: drivers/ieee802154/serial.c:642:
+	if (NULL == zbdev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#728: FILE: drivers/ieee802154/serial.c:643:
+		printk(KERN_ERR "%s: wrong phy\n", __func__);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#740: FILE: drivers/ieee802154/serial.c:655:
+	if (wait_event_interruptible_timeout(zbdev->wq, zbdev->status != PHY_INVAL, msecs_to_jiffies(1000)) > 0)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#746: FILE: drivers/ieee802154/serial.c:661:
+	pr_debug("%s end\n", __func__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#760: FILE: drivers/ieee802154/serial.c:675:
+	if (NULL == zbdev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#761: FILE: drivers/ieee802154/serial.c:676:
+		printk(KERN_ERR "%s: wrong phy\n", __func__);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#791: FILE: drivers/ieee802154/serial.c:706:
+	if (wait_event_interruptible_timeout(zbdev->wq, zbdev->status != PHY_INVAL, msecs_to_jiffies(1000)) > 0)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#797: FILE: drivers/ieee802154/serial.c:712:
+	pr_debug("%s end\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#807: FILE: drivers/ieee802154/serial.c:722:
+	pr_debug("%s\n", __func__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#810: FILE: drivers/ieee802154/serial.c:725:
+	if (NULL == zbdev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#811: FILE: drivers/ieee802154/serial.c:726:
+		printk(KERN_ERR "%s: wrong phy\n", __func__);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#823: FILE: drivers/ieee802154/serial.c:738:
+	if (wait_event_interruptible_timeout(zbdev->wq, zbdev->status != PHY_INVAL, msecs_to_jiffies(1000)) > 0)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#830: FILE: drivers/ieee802154/serial.c:745:
+	pr_debug("%s end\n", __func__);

WARNING:LINE_SPACING: Missing a blank line after declarations
#850: FILE: drivers/ieee802154/serial.c:765:
+	int *minor = data;
+	return MINOR(dev->devt) == *minor;

WARNING:TYPO_SPELLING: 'Openning' may be misspelled - perhaps 'Opening'?
#864: FILE: drivers/ieee802154/serial.c:779:
+	pr_debug("Openning ldisc\n");
 	          ^^^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*zbdev)...) over kzalloc(sizeof(struct zb_device)...)
#872: FILE: drivers/ieee802154/serial.c:787:
+	zbdev = kzalloc(sizeof(struct zb_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#873: FILE: drivers/ieee802154/serial.c:788:
+	if (NULL == zbdev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#874: FILE: drivers/ieee802154/serial.c:789:
+		printk(KERN_ERR "%s: can't allocate zb_device structure.\n", __func__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#874: FILE: drivers/ieee802154/serial.c:789:
+	if (NULL == zbdev) {
+		printk(KERN_ERR "%s: can't allocate zb_device structure.\n", __func__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#905: FILE: drivers/ieee802154/serial.c:820:
+	/* FIXME: why is this needed. Note don't use ldisc_ref here as the
+	   open path is before the ldisc is referencable */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#905: FILE: drivers/ieee802154/serial.c:820:
+	   open path is before the ldisc is referencable */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#916: FILE: drivers/ieee802154/serial.c:831:
+		printk(KERN_ERR "%s: device register failed\n", __func__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#947: FILE: drivers/ieee802154/serial.c:862:
+	if (NULL == zbdev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#948: FILE: drivers/ieee802154/serial.c:863:
+		printk(KERN_WARNING "%s: match is not found\n", __func__);

CHECK:SPACING: No space is necessary after a cast
#983: FILE: drivers/ieee802154/serial.c:898:
+	void __user *argp = (void __user *) arg;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#989: FILE: drivers/ieee802154/serial.c:904:
+	if (NULL == zbdev) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#994: FILE: drivers/ieee802154/serial.c:909:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#998: FILE: drivers/ieee802154/serial.c:913:
+		BUG_ON(!zbdev->dev->netdev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1011: FILE: drivers/ieee802154/serial.c:926:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1023: FILE: drivers/ieee802154/serial.c:938:
+	printk(KERN_INFO "%lu %s, received %d bytes:", jiffies, __func__, count);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1025: FILE: drivers/ieee802154/serial.c:940:
+		printk(KERN_CONT " 0x%02X", buf[i]);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1025: FILE: drivers/ieee802154/serial.c:940:
+		printk(KERN_CONT " 0x%02X", buf[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1026: FILE: drivers/ieee802154/serial.c:941:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1026: FILE: drivers/ieee802154/serial.c:941:
+	printk(KERN_CONT "\n");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1030: FILE: drivers/ieee802154/serial.c:945:
+	if (NULL == zbdev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1031: FILE: drivers/ieee802154/serial.c:946:
+		printk(KERN_ERR "%s(): record for tty is not found\n", __func__);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1036: FILE: drivers/ieee802154/serial.c:951:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1063: FILE: drivers/ieee802154/serial.c:978:
+	printk(KERN_INFO "Initializing ZigBee TTY interface\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1066: FILE: drivers/ieee802154/serial.c:981:
+		printk(KERN_ERR "%s: line discipline register failed\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1076: FILE: drivers/ieee802154/serial.c:991:
+		printk(KERN_CRIT "failed to unregister ZigBee line discipline.\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117398.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 95 warnings, 26 checks, 1027 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117398.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
