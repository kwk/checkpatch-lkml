WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#159: FILE: fs/cifs/cifsfs.c:309:
+	cifs_inode->clientCanCacheRead = false;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheAll>
#160: FILE: fs/cifs/cifsfs.c:310:
+	cifs_inode->clientCanCacheAll = false;

CHECK:CAMELCASE: Avoid CamelCase: <endOfSearch>
#243: FILE: fs/cifs/cifsglob.h:312:
+	bool endOfSearch:1;

CHECK:CAMELCASE: Avoid CamelCase: <emptyDir>
#244: FILE: fs/cifs/cifsglob.h:313:
+	bool emptyDir:1;

CHECK:CAMELCASE: Avoid CamelCase: <smallBuf>
#246: FILE: fs/cifs/cifsglob.h:315:
+	bool smallBuf:1; /* so we know which buf_release function to call */

CHECK:CAMELCASE: Avoid CamelCase: <closePend>
#257: FILE: fs/cifs/cifsglob.h:330:
+	bool closePend:1;	/* file is marked to close */

CHECK:CAMELCASE: Avoid CamelCase: <invalidHandle>
#258: FILE: fs/cifs/cifsglob.h:331:
+	bool invalidHandle:1;	/* file closed via session abend */

CHECK:CAMELCASE: Avoid CamelCase: <messageMode>
#259: FILE: fs/cifs/cifsglob.h:332:
+	bool messageMode:1;	/* for pipes: message vs byte mode */

CHECK:CAMELCASE: Avoid CamelCase: <oplockPending>
#272: FILE: fs/cifs/cifsglob.h:353:
+	bool oplockPending:1;

CHECK:CAMELCASE: Avoid CamelCase: <largeBuf>
#283: FILE: fs/cifs/cifsglob.h:421:
+	bool largeBuf:1;	/* if valid response, is pointer to large buf */

CHECK:CAMELCASE: Avoid CamelCase: <multiRsp>
#284: FILE: fs/cifs/cifsglob.h:422:
+	bool multiRsp:1;	/* multiple trans2 responses for one request  */

CHECK:CAMELCASE: Avoid CamelCase: <multiEnd>
#285: FILE: fs/cifs/cifsglob.h:423:
+	bool multiEnd:1;	/* both received */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: fs/cifs/cifsproto.h:62:
+extern bool is_valid_oplock_break(struct smb_hdr *smb,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct TCP_Server_Info *' should also have an identifier name
#299: FILE: fs/cifs/cifsproto.h:62:
+extern bool is_valid_oplock_break(struct smb_hdr *smb,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#301: FILE: fs/cifs/cifsproto.h:64:
+extern bool is_size_safe_to_change(struct cifsInodeInfo *, __u64 eof);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: fs/cifs/cifsproto.h:64:
+extern bool is_size_safe_to_change(struct cifsInodeInfo *, __u64 eof);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cifsInodeInfo *' should also have an identifier name
#301: FILE: fs/cifs/cifsproto.h:64:
+extern bool is_size_safe_to_change(struct cifsInodeInfo *, __u64 eof);

CHECK:CAMELCASE: Avoid CamelCase: <setAllocationSizeFlag>
#310: FILE: fs/cifs/cifsproto.h:193:
+			bool setAllocationSizeFlag,

CHECK:CAMELCASE: Avoid CamelCase: <AllocSizeFlag>
#315: FILE: fs/cifs/cifsproto.h:197:
+			bool AllocSizeFlag);

CHECK:CAMELCASE: Avoid CamelCase: <waitFlag>
#324: FILE: fs/cifs/cifsproto.h:287:
+			const bool waitFlag);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->ses->status == CifsExiting'
#351: FILE: fs/cifs/cifssmb.c:144:
+					if (!tcon->retry ||
 					   (tcon->ses->status == CifsExiting)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: fs/cifs/cifssmb.c:145:
+					if (!tcon->retry ||
 					   (tcon->ses->status == CifsExiting)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->ses->status == CifsExiting'
#360: FILE: fs/cifs/cifssmb.c:290:
+					if (!tcon->retry ||
 					   (tcon->ses->status == CifsExiting)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: fs/cifs/cifssmb.c:291:
+					if (!tcon->retry ||
 					   (tcon->ses->status == CifsExiting)) {

CHECK:CAMELCASE: Avoid CamelCase: <numLock>
#369: FILE: fs/cifs/cifssmb.c:1689:
+	    const __u32 numLock, const __u8 lockType, const bool waitFlag)

CHECK:CAMELCASE: Avoid CamelCase: <lockType>
#369: FILE: fs/cifs/cifssmb.c:1689:
+	    const __u32 numLock, const __u8 lockType, const bool waitFlag)

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#378: FILE: fs/cifs/cifssmb.c:1698:
+	cFYI(1, ("CIFSSMBLock timeout %d numLock %d", (int)waitFlag, numLock));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'CIFSSMBLock', this function's name, in a string
#378: FILE: fs/cifs/cifssmb.c:1698:
+	cFYI(1, ("CIFSSMBLock timeout %d numLock %d", (int)waitFlag, numLock));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <SetAllocation>
#471: FILE: fs/cifs/cifssmb.c:4593:
+	      __u64 size, bool SetAllocation,

CHECK:CAMELCASE: Avoid CamelCase: <isLargeBuf>
#535: FILE: fs/cifs/connect.c:348:
+	bool isLargeBuf = false;

CHECK:CAMELCASE: Avoid CamelCase: <isMultiRsp>
#536: FILE: fs/cifs/connect.c:349:
+	bool isMultiRsp;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#587: FILE: fs/cifs/connect.c:608:
+^I^I^I^I^I^I^Imid_entry->largeBuf = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <cifsSesInfo>
#646: FILE: fs/cifs/connect.c:2604:
+			      struct cifsSesInfo *ses, bool *pNTLMv2_flag,

CHECK:CAMELCASE: Avoid CamelCase: <pNTLMv2_flag>
#646: FILE: fs/cifs/connect.c:2604:
+			      struct cifsSesInfo *ses, bool *pNTLMv2_flag,

CHECK:CAMELCASE: Avoid CamelCase: <pCifsFile>
#723: FILE: fs/cifs/dir.c:267:
+			pCifsFile->invalidHandle = false;

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#743: FILE: fs/cifs/dir.c:289:
+					pCifsInode->clientCanCacheAll = true;

CHECK:CAMELCASE: Avoid CamelCase: <pSMBFile>
#881: FILE: fs/cifs/file.c:485:
+		pSMBFile->closePend = true;

CHECK:CAMELCASE: Avoid CamelCase: <pCFileStruct>
#903: FILE: fs/cifs/file.c:584:
+		if (!pCFileStruct->srch_inf.endOfSearch &&

CHECK:CAMELCASE: Avoid CamelCase: <cifsInode>
#1001: FILE: fs/cifs/file.c:2010:
+bool is_size_safe_to_change(struct cifsInodeInfo *cifsInode, __u64 end_of_file)

CHECK:CAMELCASE: Avoid CamelCase: <adjustTZ>
#1047: FILE: fs/cifs/inode.c:356:
+	bool adjustTZ = false;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1298: FILE: fs/cifs/misc.c:580:
 						pCifsInode->clientCanCacheRead
+							= false;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:CAMELCASE: Avoid CamelCase: <cifsFile>
#1334: FILE: fs/cifs/readdir.c:450:
+	cifsFile->invalidHandle = true;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000305644.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 4 warnings, 38 checks, 1179 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000305644.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
