WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#93: FILE: fs/hfsplus/hfsplus_fs.h:325:
+extern struct dentry_operations hfsplus_dentry_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#114: FILE: fs/hfsplus/inode.c:133:
+struct dentry_operations hfsplus_dentry_operations = {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#156: FILE: fs/hfsplus/unicode.c:341:
+		if (decompose && (dstr = decompose_unichar(c, &dsize))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#159: FILE: fs/hfsplus/unicode.c:344:
+				if (!casefold || (c2 = case_fold(c2)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#164: FILE: fs/hfsplus/unicode.c:349:
+			if (!casefold || (c2 = case_fold(c2)))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#194: FILE: fs/hfsplus/unicode.c:379:
+	dsize1 = dsize2 = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#195: FILE: fs/hfsplus/unicode.c:380:
+	dstr1 = dstr2 = NULL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#203: FILE: fs/hfsplus/unicode.c:388:
+			if (!decompose || !(dstr1 = decompose_unichar(c, &dsize1))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#215: FILE: fs/hfsplus/unicode.c:400:
+			if (!decompose || !(dstr2 = decompose_unichar(c, &dsize2))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#225: FILE: fs/hfsplus/unicode.c:410:
+			if  (!(c1 = case_fold(c1))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#230: FILE: fs/hfsplus/unicode.c:415:
+			if (!(c2 = case_fold(c2))) {

CHECK:BRACES: Unbalanced braces around else statement
#262: FILE: fs/hfsplus/btree.c:64:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000413703.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 2 warnings, 3 checks, 185 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000413703.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
