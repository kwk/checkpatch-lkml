WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '8c773549b08a54f7d418a5e06b19d92f87f59aaf', maybe rebased or not pulled?
#32: 
commit 8c773549b08a54f7d418a5e06b19d92f87f59aaf

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
    libata: Move Marvell AHCI to separate driver 'mv-ahci'.  Create 'libahci'.

WARNING:BAD_SIGN_OFF: Do not use whitespace before Not-signed-off-by:
#42: 
    NOT-Signed-off-by: Jeff Garzik <jgarzik@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Not-signed-off-by:' is the preferred signature form
#42: 
    NOT-Signed-off-by: Jeff Garzik <jgarzik@redhat.com>

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#60: FILE: drivers/ata/Kconfig:114:
+config SATA_MV_AHCI
+	tristate "Marvell AHCI support (6121, 6145)"
+	depends on PCI
+	help
+	  This option enables support for AHCI-like chips
+	  from Marvell:  6121, 6145.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: drivers/ata/ahci.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#2244: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2249: FILE: drivers/ata/ahci.h:1:
+#ifndef __LINUX_AHCI_H__

WARNING:TYPO_SPELLING: 'compliancy' may be misspelled - perhaps 'compliance'?
#2287: FILE: drivers/ata/ahci.h:39:
+	HOST_VERSION		= 0x10, /* AHCI spec. version compliancy */
 	            		                              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2446: FILE: drivers/ata/ahci.h:198:
+^Iu32 ^I^I^Iem_loc; /* enclosure management location */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2461: FILE: drivers/ata/ahci.h:213:
+^Iu32 ^I^I^Iintr_mask;^I/* interrupts to enable */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2484: FILE: drivers/ata/ahci.h:236:
+extern void ahci_postreset(struct ata_link *link, unsigned int *class);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2485: FILE: drivers/ata/ahci.h:237:
+extern void ahci_qc_prep(struct ata_queued_cmd *qc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2486: FILE: drivers/ata/ahci.h:238:
+extern void ahci_freeze(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2487: FILE: drivers/ata/ahci.h:239:
+extern void ahci_thaw(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2488: FILE: drivers/ata/ahci.h:240:
+extern void ahci_error_handler(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2489: FILE: drivers/ata/ahci.h:241:
+extern void ahci_post_internal_cmd(struct ata_queued_cmd *qc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2490: FILE: drivers/ata/ahci.h:242:
+extern unsigned int ahci_qc_issue(struct ata_queued_cmd *qc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2491: FILE: drivers/ata/ahci.h:243:
+extern bool ahci_qc_fill_rtf(struct ata_queued_cmd *qc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2492: FILE: drivers/ata/ahci.h:244:
+extern void ahci_init_controller(struct ata_host *host);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2493: FILE: drivers/ata/ahci.h:245:
+extern int ahci_softreset(struct ata_link *link, unsigned int *class,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2494: FILE: drivers/ata/ahci.h:246:
+extern int ahci_softreset(struct ata_link *link, unsigned int *class,
+		  unsigned long deadline);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2495: FILE: drivers/ata/ahci.h:247:
+extern int ahci_hardreset(struct ata_link *link, unsigned int *class,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2496: FILE: drivers/ata/ahci.h:248:
+extern int ahci_hardreset(struct ata_link *link, unsigned int *class,
+		  unsigned long deadline);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2497: FILE: drivers/ata/ahci.h:249:
+extern void ahci_start_engine(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2498: FILE: drivers/ata/ahci.h:250:
+extern int ahci_stop_engine(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2499: FILE: drivers/ata/ahci.h:251:
+extern int ahci_do_softreset(struct ata_link *link, unsigned int *class,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2502: FILE: drivers/ata/ahci.h:254:
+extern int ahci_check_ready(struct ata_link *link);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2503: FILE: drivers/ata/ahci.h:255:
+extern int ahci_kick_engine(struct ata_port *ap, int force_restart);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2504: FILE: drivers/ata/ahci.h:256:
+extern int ahci_port_resume(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2505: FILE: drivers/ata/ahci.h:257:
+extern void ahci_pmp_attach(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2506: FILE: drivers/ata/ahci.h:258:
+extern void ahci_pmp_detach(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2507: FILE: drivers/ata/ahci.h:259:
+extern int ahci_reset_controller(struct ata_host *host);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2508: FILE: drivers/ata/ahci.h:260:
+extern int ahci_port_start(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2509: FILE: drivers/ata/ahci.h:261:
+extern void ahci_port_stop(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2510: FILE: drivers/ata/ahci.h:262:
+extern void ahci_save_initial_config(struct pci_dev *pdev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2512: FILE: drivers/ata/ahci.h:264:
+extern int ahci_configure_dma_masks(struct pci_dev *pdev, int using_dac);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2513: FILE: drivers/ata/ahci.h:265:
+extern int ahci_reset_em(struct ata_host *host);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2514: FILE: drivers/ata/ahci.h:266:
+extern int ahci_scr_read(struct ata_link *link, unsigned int sc_reg, u32 *val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2515: FILE: drivers/ata/ahci.h:267:
+extern int ahci_scr_write(struct ata_link *link, unsigned int sc_reg, u32 val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2516: FILE: drivers/ata/ahci.h:268:
+extern void ahci_disable_alpm(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2517: FILE: drivers/ata/ahci.h:269:
+extern int ahci_enable_alpm(struct ata_port *ap, enum link_pm policy);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2518: FILE: drivers/ata/ahci.h:270:
+extern ssize_t ahci_led_show(struct ata_port *ap, char *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2519: FILE: drivers/ata/ahci.h:271:
+extern ssize_t ahci_led_store(struct ata_port *ap, const char *buf, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2520: FILE: drivers/ata/ahci.h:272:
+extern ssize_t ahci_activity_store(struct ata_device *dev, enum sw_activity val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2521: FILE: drivers/ata/ahci.h:273:
+extern ssize_t ahci_activity_show(struct ata_device *dev, char *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2522: FILE: drivers/ata/ahci.h:274:
+extern void ahci_print_info(struct ata_host *host);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2523: FILE: drivers/ata/ahci.h:275:
+extern void ahci_port_intr(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2526: FILE: drivers/ata/ahci.h:278:
+extern int ahci_port_suspend(struct ata_port *ap, pm_message_t mesg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2527: FILE: drivers/ata/ahci.h:279:
+extern int ahci_pci_device_suspend(struct pci_dev *pdev, pm_message_t mesg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2528: FILE: drivers/ata/ahci.h:280:
+extern int ahci_pci_device_resume(struct pci_dev *pdev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2538: FILE: drivers/ata/libahci.c:1:
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2552: FILE: drivers/ata/libahci.c:15:
+static ssize_t ahci_transmit_led_message(struct ata_port *ap, u32 state,
+					ssize_t size);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2565: FILE: drivers/ata/libahci.c:28:
+static unsigned ahci_scr_offset(struct ata_port *ap, unsigned int sc_reg)

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#2794: FILE: drivers/ata/libahci.c:257:
+					udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2805: FILE: drivers/ata/libahci.c:268:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_DEV_LEVEL: Prefer dev_warn(... to dev_printk(KERN_WARNING, ...
#2839: FILE: drivers/ata/libahci.c:302:
+		dev_printk(KERN_WARNING, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#2934: FILE: drivers/ata/libahci.c:397:
+				dev_printk(KERN_ERR, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#2942: FILE: drivers/ata/libahci.c:405:
+			dev_printk(KERN_ERR, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#2948: FILE: drivers/ata/libahci.c:411:
+			dev_printk(KERN_ERR, &pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3017: FILE: drivers/ata/libahci.c:480:
+void ahci_save_initial_config(struct pci_dev *pdev,
+				     struct ahci_host_priv *hpriv)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3030: FILE: drivers/ata/libahci.c:493:
+	hpriv->saved_cap = cap = readl(mmio + HOST_CAP);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3031: FILE: drivers/ata/libahci.c:494:
+	hpriv->saved_port_map = port_map = readl(mmio + HOST_PORTS_IMPL);

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#3035: FILE: drivers/ata/libahci.c:498:
+		dev_printk(KERN_INFO, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#3041: FILE: drivers/ata/libahci.c:504:
+		dev_printk(KERN_INFO, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#3047: FILE: drivers/ata/libahci.c:510:
+		dev_printk(KERN_INFO, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#3053: FILE: drivers/ata/libahci.c:516:
+		dev_printk(KERN_INFO, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#3060: FILE: drivers/ata/libahci.c:523:
+		dev_printk(KERN_INFO, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#3076: FILE: drivers/ata/libahci.c:539:
+		dev_printk(KERN_ERR, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#3080: FILE: drivers/ata/libahci.c:543:
+		dev_printk(KERN_ERR, &pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3081: FILE: drivers/ata/libahci.c:544:
+		dev_printk(KERN_ERR, &pdev->dev,
+			  "Disabling your PATA port. Use the boot option 'ahci.marvell_enable=0' to avoid this.\n");

WARNING:PREFER_DEV_LEVEL: Prefer dev_warn(... to dev_printk(KERN_WARNING, ...
#3098: FILE: drivers/ata/libahci.c:561:
+			dev_printk(KERN_WARNING, &pdev->dev,

WARNING:SPLIT_STRING: quoted string split across lines
#3100: FILE: drivers/ata/libahci.c:563:
+				   "implemented port map (0x%x) contains more "
+				   "ports than nr_ports (%u), using nr_ports\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_DEV_LEVEL: Prefer dev_warn(... to dev_printk(KERN_WARNING, ...
#3109: FILE: drivers/ata/libahci.c:572:
+		dev_printk(KERN_WARNING, &pdev->dev,

CHECK:SPACING: No space is necessary after a cast
#3138: FILE: drivers/ata/libahci.c:601:
+	(void) readl(mmio + HOST_PORTS_IMPL);	/* flush */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#3160: FILE: drivers/ata/libahci.c:623:
+		msleep(10);

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#3196: FILE: drivers/ata/libahci.c:659:
+			dev_printk(KERN_ERR, host->dev,

CHECK:BRACES: Unbalanced braces around else statement
#3208: FILE: drivers/ata/libahci.c:671:
+	} else

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#3209: FILE: drivers/ata/libahci.c:672:
+		dev_printk(KERN_INFO, host->dev,

CHECK:BRACES: braces {} should be used on all arms of this statement
#3288: FILE: drivers/ata/libahci.c:751:
+	if (rc == 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3290: FILE: drivers/ata/libahci.c:753:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3424: FILE: drivers/ata/libahci.c:887:
+	if (timeout_msec) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3431: FILE: drivers/ata/libahci.c:894:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3438: FILE: drivers/ata/libahci.c:901:
+int ahci_do_softreset(struct ata_link *link, unsigned int *class,
+			     int pmp, unsigned long deadline,

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#3472: FILE: drivers/ata/libahci.c:935:
+	msleep(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3506: FILE: drivers/ata/libahci.c:969:
+int ahci_softreset(struct ata_link *link, unsigned int *class,
+		  unsigned long deadline)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3517: FILE: drivers/ata/libahci.c:980:
+int ahci_hardreset(struct ata_link *link, unsigned int *class,
+		  unsigned long deadline)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3558: FILE: drivers/ata/libahci.c:1021:
+	new_tmp = tmp = readl(port_mmio + PORT_CMD);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3635: FILE: drivers/ata/libahci.c:1098:
+	emp->saved_activity = emp->activity = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3658: FILE: drivers/ata/libahci.c:1121:
+static ssize_t ahci_transmit_led_message(struct ata_port *ap, u32 state,
+					ssize_t size)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3699: FILE: drivers/ata/libahci.c:1162:
+	writel(message[1], mmio + hpriv->em_loc+4);
 	                                       ^

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#3843: FILE: drivers/ata/libahci.c:1306:
+	msleep(10);

ERROR:CODE_INDENT: code indent should use tabs where possible
#3852: FILE: drivers/ata/libahci.c:1315:
+ ^I * Clear flag to indicate that we should ignore all PhyRdy$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3852: FILE: drivers/ata/libahci.c:1315:
+ ^I * Clear flag to indicate that we should ignore all PhyRdy$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3853: FILE: drivers/ata/libahci.c:1316:
+ ^I * state changes$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3853: FILE: drivers/ata/libahci.c:1316:
+ ^I * state changes$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3854: FILE: drivers/ata/libahci.c:1317:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3854: FILE: drivers/ata/libahci.c:1317:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3858: FILE: drivers/ata/libahci.c:1321:
+ ^I * Enable interrupts on Phy Ready.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3858: FILE: drivers/ata/libahci.c:1321:
+ ^I * Enable interrupts on Phy Ready.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3859: FILE: drivers/ata/libahci.c:1322:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3859: FILE: drivers/ata/libahci.c:1322:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3864: FILE: drivers/ata/libahci.c:1327:
+ ^I * don't change the link pm policy - we can be called$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3864: FILE: drivers/ata/libahci.c:1327:
+ ^I * don't change the link pm policy - we can be called$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3865: FILE: drivers/ata/libahci.c:1328:
+ ^I * just to turn of link pm temporarily$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3865: FILE: drivers/ata/libahci.c:1328:
+ ^I * just to turn of link pm temporarily$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3866: FILE: drivers/ata/libahci.c:1329:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3866: FILE: drivers/ata/libahci.c:1329:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3886: FILE: drivers/ata/libahci.c:1349:
+ ^I^I * if we came here with NOT_AVAILABLE,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3886: FILE: drivers/ata/libahci.c:1349:
+ ^I^I * if we came here with NOT_AVAILABLE,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3887: FILE: drivers/ata/libahci.c:1350:
+ ^I^I * it just means this is the first time we$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3887: FILE: drivers/ata/libahci.c:1350:
+ ^I^I * it just means this is the first time we$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3888: FILE: drivers/ata/libahci.c:1351:
+ ^I^I * have tried to enable - default to max performance,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3888: FILE: drivers/ata/libahci.c:1351:
+ ^I^I * have tried to enable - default to max performance,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3889: FILE: drivers/ata/libahci.c:1352:
+ ^I^I * and let the user go to lower power modes on request.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3889: FILE: drivers/ata/libahci.c:1352:
+ ^I^I * and let the user go to lower power modes on request.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3890: FILE: drivers/ata/libahci.c:1353:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3890: FILE: drivers/ata/libahci.c:1353:
+ ^I^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3906: FILE: drivers/ata/libahci.c:1369:
+ ^I * Disable interrupts on Phy Ready. This keeps us from$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3906: FILE: drivers/ata/libahci.c:1369:
+ ^I * Disable interrupts on Phy Ready. This keeps us from$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3907: FILE: drivers/ata/libahci.c:1370:
+ ^I * getting woken up due to spurious phy ready interrupts$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3907: FILE: drivers/ata/libahci.c:1370:
+ ^I * getting woken up due to spurious phy ready interrupts$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3910: FILE: drivers/ata/libahci.c:1373:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3910: FILE: drivers/ata/libahci.c:1373:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3915: FILE: drivers/ata/libahci.c:1378:
+ ^I * Set a flag to indicate that we should ignore all PhyRdy$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3915: FILE: drivers/ata/libahci.c:1378:
+ ^I * Set a flag to indicate that we should ignore all PhyRdy$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3916: FILE: drivers/ata/libahci.c:1379:
+ ^I * state changes since these can happen now whenever we$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3916: FILE: drivers/ata/libahci.c:1379:
+ ^I * state changes since these can happen now whenever we$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3917: FILE: drivers/ata/libahci.c:1380:
+ ^I * change link state$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3917: FILE: drivers/ata/libahci.c:1380:
+ ^I * change link state$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3918: FILE: drivers/ata/libahci.c:1381:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3918: FILE: drivers/ata/libahci.c:1381:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3925: FILE: drivers/ata/libahci.c:1388:
+ ^I * Set ASP based on Policy$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3925: FILE: drivers/ata/libahci.c:1388:
+ ^I * Set ASP based on Policy$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3926: FILE: drivers/ata/libahci.c:1389:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3926: FILE: drivers/ata/libahci.c:1389:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3930: FILE: drivers/ata/libahci.c:1393:
+ ^I * Setting this bit will instruct the HBA to aggressively$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3930: FILE: drivers/ata/libahci.c:1393:
+ ^I * Setting this bit will instruct the HBA to aggressively$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3931: FILE: drivers/ata/libahci.c:1394:
+ ^I * enter a lower power link state when it's appropriate and$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3931: FILE: drivers/ata/libahci.c:1394:
+ ^I * enter a lower power link state when it's appropriate and$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3932: FILE: drivers/ata/libahci.c:1395:
+ ^I * based on the value set above for ASP$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3932: FILE: drivers/ata/libahci.c:1395:
+ ^I * based on the value set above for ASP$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3933: FILE: drivers/ata/libahci.c:1396:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3933: FILE: drivers/ata/libahci.c:1396:
+ ^I */$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#3967: FILE: drivers/ata/libahci.c:1430:
+	state = simple_strtoul(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#4067: FILE: drivers/ata/libahci.c:1530:
+	dev_printk(KERN_INFO, &pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4068: FILE: drivers/ata/libahci.c:1531:
+	dev_printk(KERN_INFO, &pdev->dev,
+		"AHCI %02x%02x.%02x%02x "

WARNING:SPLIT_STRING: quoted string split across lines
#4069: FILE: drivers/ata/libahci.c:1532:
+		"AHCI %02x%02x.%02x%02x "
+		"%u slots %u ports %s Gbps 0x%x impl %s mode\n"

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#4083: FILE: drivers/ata/libahci.c:1546:
+	dev_printk(KERN_INFO, &pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4084: FILE: drivers/ata/libahci.c:1547:
+	dev_printk(KERN_INFO, &pdev->dev,
+		"flags: "

WARNING:SPLIT_STRING: quoted string split across lines
#4085: FILE: drivers/ata/libahci.c:1548:
+		"flags: "
+		"%s%s%s%s%s%s%s"

WARNING:SPLIT_STRING: quoted string split across lines
#4086: FILE: drivers/ata/libahci.c:1549:
+		"%s%s%s%s%s%s%s"
+		"%s%s%s%s%s%s%s"

WARNING:SPLIT_STRING: quoted string split across lines
#4087: FILE: drivers/ata/libahci.c:1550:
+		"%s%s%s%s%s%s%s"
+		"%s\n"

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#4105: FILE: drivers/ata/libahci.c:1568:
+		cap & (1 << 6) ? "ems ": ""
 		                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#4163: FILE: drivers/ata/libahci.c:1626:
+				  "unknown FIS %08x %08x %08x %08x" ,
 				                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4188: FILE: drivers/ata/libahci.c:1651:
+		ata_ehi_push_desc(host_ehi, "%s",
+			irq_stat & PORT_IRQ_CONNECT ?

ERROR:CODE_INDENT: code indent should use tabs where possible
#4218: FILE: drivers/ata/libahci.c:1681:
+ ^I * just a power state change, we should$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4218: FILE: drivers/ata/libahci.c:1681:
+ ^I * just a power state change, we should$

ERROR:CODE_INDENT: code indent should use tabs where possible
#4219: FILE: drivers/ata/libahci.c:1682:
+ ^I * clear out this, plus the PhyRdy/Comm$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4219: FILE: drivers/ata/libahci.c:1682:
+ ^I * clear out this, plus the PhyRdy/Comm$

ERROR:CODE_INDENT: code indent should use tabs where possible
#4220: FILE: drivers/ata/libahci.c:1683:
+ ^I * Wake bits from Serror$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4220: FILE: drivers/ata/libahci.c:1683:
+ ^I * Wake bits from Serror$

ERROR:CODE_INDENT: code indent should use tabs where possible
#4221: FILE: drivers/ata/libahci.c:1684:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4221: FILE: drivers/ata/libahci.c:1684:
+ ^I */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4223: FILE: drivers/ata/libahci.c:1686:
+	if ((hpriv->flags & AHCI_HFLAG_NO_HOTPLUG) &&
+		(status & PORT_IRQ_PHYRDY)) {

WARNING:TYPO_SPELLING: 'constrollers' may be misspelled - perhaps 'controllers'?
#4239: FILE: drivers/ata/libahci.c:1702:
+		 * poking SNotification but some constrollers which
 		                                 ^^^^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#4243: FILE: drivers/ata/libahci.c:1706:
+		if (hpriv->cap & HOST_CAP_SNTF)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4245: FILE: drivers/ata/libahci.c:1708:
+		else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4281: FILE: drivers/ata/mv-ahci.c:1:
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4286: FILE: drivers/ata/mv-ahci.c:6:
+ *    ^I^I    Please ALWAYS copy linux-ide@vger.kernel.org$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#4304: FILE: drivers/ata/mv-ahci.c:24:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#4398: FILE: drivers/ata/mv-ahci.c:118:
+	[board_ahci_mv] =
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#4399: FILE: drivers/ata/mv-ahci.c:119:
+		AHCI_HFLAGS	(AHCI_HFLAG_NO_NCQ | AHCI_HFLAG_NO_MSI |

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#4416: FILE: drivers/ata/mv-ahci.c:136:
+#if defined(CONFIG_PATA_MARVELL) || defined(CONFIG_PATA_MARVELL_MODULE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4432: FILE: drivers/ata/mv-ahci.c:152:
+MODULE_PARM_DESC(ahci_em_messages,
+	"Set AHCI Enclosure Management Message type (0 = disabled, 1 = LED");

WARNING:PREFER_DEV_LEVEL: Prefer dev_warn(... to dev_printk(KERN_WARNING, ...
#4469: FILE: drivers/ata/mv-ahci.c:189:
+				dev_printk(KERN_WARNING, host->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4470: FILE: drivers/ata/mv-ahci.c:190:
+				dev_printk(KERN_WARNING, host->dev,
+					"interrupt on disabled port %u\n", i);

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#4510: FILE: drivers/ata/mv-ahci.c:230:
+		dev_printk(KERN_DEBUG, &pdev->dev, "version " DRV_VERSION "\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4513: FILE: drivers/ata/mv-ahci.c:233:
+	/* The AHCI driver can only drive the SATA ports, the PATA driver
+	   can drive them all so if both drivers are selected make sure

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4514: FILE: drivers/ata/mv-ahci.c:234:
+	   AHCI stays out of the way */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ahci_em_messages == 1'
#4559: FILE: drivers/ata/mv-ahci.c:279:
+		if ((messages & 0x01) && (ahci_em_messages == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4584: FILE: drivers/ata/mv-ahci.c:304:
+		printk(KERN_INFO "ahci: SSS flag set, parallel bus scan disabled\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4603: FILE: drivers/ata/mv-ahci.c:323:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4647: FILE: drivers/ata/mv-ahci.c:367:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000140492.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 34 errors, 79 warnings, 71 checks, 4555 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000140492.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
