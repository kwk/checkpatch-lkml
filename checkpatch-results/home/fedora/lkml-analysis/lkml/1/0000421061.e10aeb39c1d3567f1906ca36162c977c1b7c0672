ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#94: FILE: drivers/base/dd.c:26:
kobj.entry)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: drivers/base/dd.c:225:
+static inline int real_device_attach(struct device * dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#111: FILE: drivers/base/dd.c:231:
+		if (ret == 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#113: FILE: drivers/base/dd.c:233:
+		else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around devices_subsys.list
#169: FILE: drivers/base/dd.c:405:
+	list_for_each_entry(kobj, &(devices_subsys.list), entry) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#173: FILE: drivers/base/dd.c:409:
+		if (dev->class || !dev->parent) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#176: FILE: drivers/base/dd.c:412:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around devices_subsys.list
#194: FILE: drivers/base/dd.c:430:
+	list_for_each_entry(kobj, &(devices_subsys.list), entry) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#198: FILE: drivers/base/dd.c:434:
+		if (dev->is_checking)
[...]
+		else if (!dev->is_matched && !dev->is_checked) {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#201: FILE: drivers/base/dd.c:437:
+			if (parent->is_matched || parent->is_checked) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#204: FILE: drivers/base/dd.c:440:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#241: FILE: drivers/base/dd.c:477:
+		if (cont == CONTINUE_FOUND) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#244: FILE: drivers/base/dd.c:480:
+		} else

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#245: FILE: drivers/base/dd.c:481:
+			yield();

ERROR:SPACING: space required after that close brace '}'
#254: FILE: drivers/base/dd.c:490:
+}dev_match_thread

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#266: FILE: drivers/base/dd.c:502:
+		thread = dev_match_thread_default > 0 ? \

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*threads_complete)...) over kmalloc(sizeof(struct completion)...)
#268: FILE: drivers/base/dd.c:504:
+	threads_complete = kmalloc(sizeof(struct completion) * thread,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#268: FILE: drivers/base/dd.c:504:
+	threads_complete = kmalloc(sizeof(struct completion) * thread,
+				   GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#289: FILE: drivers/base/dd.c:525:
+__setup("dev_match_thread=", dev_match_thread);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#291: FILE: drivers/base/dd.c:527:
+EXPORT_SYMBOL_GPL(device_match_freeze);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#292: FILE: drivers/base/dd.c:528:
+EXPORT_SYMBOL_GPL(device_match_thaw);

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: include/linux/device.h:422:
+ ^Iunsigned^I^Iis_matched:1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#303: FILE: include/linux/device.h:422:
+ ^Iunsigned^I^Iis_matched:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: include/linux/device.h:422:
+ ^Iunsigned^I^Iis_matched:1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: include/linux/device.h:423:
+ ^Iunsigned^I^Iis_checking:1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: include/linux/device.h:423:
+ ^Iunsigned^I^Iis_checking:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: include/linux/device.h:423:
+ ^Iunsigned^I^Iis_checking:1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: include/linux/device.h:424:
+ ^Iunsigned^I^Iis_checked:1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#305: FILE: include/linux/device.h:424:
+ ^Iunsigned^I^Iis_checked:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: include/linux/device.h:424:
+ ^Iunsigned^I^Iis_checked:1;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/linux/device.h:531:
+extern void device_match_freeze(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: include/linux/device.h:532:
+extern void device_match_thaw(int thread);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421061.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 11 warnings, 15 checks, 229 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421061.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
