WARNING:TYPO_SPELLING: 'EXPERMENTAL' may be misspelled - perhaps 'EXPERIMENTAL'?
#73: FILE: drivers/mtd/Kconfig:312:
+	  This enables new and very EXPERMENTAL support for SmartMedia/xD
 	                            ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'tanslation' may be misspelled - perhaps 'translation'?
#74: FILE: drivers/mtd/Kconfig:313:
+	  FTL (Flash tanslation layer)
 	             ^^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#95: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#100: FILE: drivers/mtd/sm_ftl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#123: FILE: drivers/mtd/sm_ftl.c:24:
+module_param(force_load, bool, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#126: FILE: drivers/mtd/sm_ftl.c:27:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#128: FILE: drivers/mtd/sm_ftl.c:29:
+module_param(cache_timeout, bool, S_IRUGO);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#131: FILE: drivers/mtd/sm_ftl.c:32:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: drivers/mtd/sm_ftl.c:36:
+static int sm_erase_block(struct sm_ftl *ftl, int zone_num, s16 block,
+								int put_free);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#138: FILE: drivers/mtd/sm_ftl.c:39:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#156: FILE: drivers/mtd/sm_ftl.c:57:
+ * This ideally has to be based on nand id, but for now device size is enough */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: drivers/mtd/sm_ftl.c:62:
+	int size_in_megs = mtd->size / (1024 * 1024);
+	ftl->readonly = mtd->type == MTD_ROM;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#204: FILE: drivers/mtd/sm_ftl.c:105:
+	/* Minimum xD size is 16M, and thus all xD cards have standard zone
+	   sizes. SmartMedia cards exist up to 128 Mb and have same layout*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#204: FILE: drivers/mtd/sm_ftl.c:105:
+	   sizes. SmartMedia cards exist up to 128 Mb and have same layout*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#246: FILE: drivers/mtd/sm_ftl.c:147:
+
+

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#253: FILE: drivers/mtd/sm_ftl.c:154:
+	/* check parity - endianess doesn't matter */
 	                  ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#260: FILE: drivers/mtd/sm_ftl.c:161:
+
+

WARNING:TYPO_SPELLING: 'asscociated' may be misspelled - perhaps 'associated'?
#262: FILE: drivers/mtd/sm_ftl.c:163:
+ * Read LBA asscociated with block
             ^^^^^^^^^^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#279: FILE: drivers/mtd/sm_ftl.c:180:
+	lba_test = *(u16 *)oob->lba_copy1 ^ *(u16*)oob->lba_copy2;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#304: FILE: drivers/mtd/sm_ftl.c:205:
+	oob->lba_copy1[0] = oob->lba_copy2[0] = tmp[0];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#305: FILE: drivers/mtd/sm_ftl.c:206:
+	oob->lba_copy1[1] = oob->lba_copy2[1] = tmp[1];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: drivers/mtd/sm_ftl.c:209:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: drivers/mtd/sm_ftl.c:226:
+static void sm_break_offset(struct sm_ftl *ftl, loff_t offset,
+					int *zone, int *block, int *boffset)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#334: FILE: drivers/mtd/sm_ftl.c:235:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: drivers/mtd/sm_ftl.c:238:
+static int sm_read_sector(struct sm_ftl *ftl, int zone, int block, int boffset,
+								u8 *buffer)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: drivers/mtd/sm_ftl.c:257:
+		dbg("read of block %d at zone %d failed with error %d",
+					block, zone, ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: drivers/mtd/sm_ftl.c:264:
+static int sm_read_sector_oob(struct sm_ftl *ftl,
+		int zone, int block, int boffset, struct sm_oob *oob)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#370: FILE: drivers/mtd/sm_ftl.c:271:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#382: FILE: drivers/mtd/sm_ftl.c:283:
+		dbg("can't read oob of sector %d of block %d in zone %d "
+			"(error %d)",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#389: FILE: drivers/mtd/sm_ftl.c:290:
+		dbg("can't read oob of sector %d of block %d in zone %d "
+			"(less that expected oob returned (%d))",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: drivers/mtd/sm_ftl.c:300:
+static int sm_write_block(struct sm_ftl *ftl, u8 *buf,
+					int zone_num, int block, int lba)

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: drivers/mtd/sm_ftl.c:308:
+	struct sm_oob oob;
+	memset(&oob, 0xFF, sizeof(oob));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#422: FILE: drivers/mtd/sm_ftl.c:323:
+	/* Use write_oob here because some xD cards only accept writes that
+		contain both page and oob write. These cards most likely

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#423: FILE: drivers/mtd/sm_ftl.c:324:
+		do their own ftl */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#429: FILE: drivers/mtd/sm_ftl.c:330:
+				boffset += SM_SECTOR_SIZE) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: drivers/mtd/sm_ftl.c:339:
+			dbg("write of block %d in zone %d failed, erasing it",
+							block, zone_num);

WARNING:SPLIT_STRING: quoted string split across lines
#446: FILE: drivers/mtd/sm_ftl.c:347:
+			dbg("write of block %d in zone %d failed again"
+				", marking as bad", block, zone_num);

WARNING:TYPO_SPELLING: 'succedes' may be misspelled - perhaps 'succeeds'?
#498: FILE: drivers/mtd/sm_ftl.c:399:
+ * If erase succedes, it updates free block fifo
             ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: drivers/mtd/sm_ftl.c:402:
+static int sm_erase_block(struct sm_ftl *ftl, int zone_num, s16 block,
+								int put_free)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/mtd/sm_ftl.c:422:
+		dbg("erase of block %d in zone %d failed in mtd->erase call",
+			block, zone_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: drivers/mtd/sm_ftl.c:431:
+		dbg("erase of block %d in zone %d failed after wait",
+			block, zone_num);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#543: FILE: drivers/mtd/sm_ftl.c:444:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#547: FILE: drivers/mtd/sm_ftl.c:448:
+	struct sm_ftl *ftl = (struct sm_ftl *)self->priv;
+	ftl->erase_error = (self->state == MTD_ERASE_FAILED);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#551: FILE: drivers/mtd/sm_ftl.c:452:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#562: FILE: drivers/mtd/sm_ftl.c:463:
+					boffset += SM_SECTOR_SIZE) {
+

WARNING:TYPO_SPELLING: 'shoudn't' may be misspelled - perhaps 'shouldn't'?
#563: FILE: drivers/mtd/sm_ftl.c:464:
+		/* This shoudn't happen anyway */
 		        ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#570: FILE: drivers/mtd/sm_ftl.c:471:
+		/* We have here bad LBA, we can ether erase the block,
+			or mark it as bad... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#570: FILE: drivers/mtd/sm_ftl.c:471:
+			or mark it as bad... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#580: FILE: drivers/mtd/sm_ftl.c:481:
+		/* Found sector with different LBA that first.
+			Mostly likely result of partial write */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#580: FILE: drivers/mtd/sm_ftl.c:481:
+			Mostly likely result of partial write */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#605: FILE: drivers/mtd/sm_ftl.c:506:
+	BUG_ON(zone_num >= ftl->zone_count);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#625: FILE: drivers/mtd/sm_ftl.c:526:
+	for (block = 0 ; block < ftl->zone_size ; block++) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#630: FILE: drivers/mtd/sm_ftl.c:531:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: drivers/mtd/sm_ftl.c:539:
+			kfifo_in(&zone->free_sectors,
+				(unsigned char *)&block, 2);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#643: FILE: drivers/mtd/sm_ftl.c:544:
+		/* This block is really bad,
+			and probably now is marked as such */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#643: FILE: drivers/mtd/sm_ftl.c:544:
+			and probably now is marked as such */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#647: FILE: drivers/mtd/sm_ftl.c:548:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#649: FILE: drivers/mtd/sm_ftl.c:550:
+		/* If there is no collision,
+			just put the sector in the FTL table */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#649: FILE: drivers/mtd/sm_ftl.c:550:
+			just put the sector in the FTL table */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: drivers/mtd/sm_ftl.c:558:
+		dbg("collision of LBA %d between blocks %d and %d in zone %d",
+			lba, zone->lba_to_phys_table[lba], block, zone_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: drivers/mtd/sm_ftl.c:566:
+		if (sm_check_block(ftl, zone_num,
+				zone->lba_to_phys_table[lba], 0) < 0) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#671: FILE: drivers/mtd/sm_ftl.c:572:
+		/* Now both blocks are valid and share same LBA...
+		   I guess only solution is to throw a dice.... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#671: FILE: drivers/mtd/sm_ftl.c:572:
+		   I guess only solution is to throw a dice.... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#680: FILE: drivers/mtd/sm_ftl.c:581:
+	/* No free sectors, means that the zone is heavily damaged, write won't
+		work, but it can still can be (partially) read */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#680: FILE: drivers/mtd/sm_ftl.c:581:
+		work, but it can still can be (partially) read */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#697: FILE: drivers/mtd/sm_ftl.c:598:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#721: FILE: drivers/mtd/sm_ftl.c:622:
+	if (test_bit(boffset / SM_SECTOR_SIZE,
[...]
+			return -1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#722: FILE: drivers/mtd/sm_ftl.c:623:
+	if (test_bit(boffset / SM_SECTOR_SIZE,
+		&ftl->cache_data_invalid_bitmap))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#742: FILE: drivers/mtd/sm_ftl.c:643:
+	BUG_ON(zone_num < 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#746: FILE: drivers/mtd/sm_ftl.c:647:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: drivers/mtd/sm_ftl.c:650:
+	for_each_bit(sector_num, &ftl->cache_data_invalid_bitmap,
+		ftl->block_size / SM_SECTOR_SIZE) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#750: FILE: drivers/mtd/sm_ftl.c:651:
+		ftl->block_size / SM_SECTOR_SIZE) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: drivers/mtd/sm_ftl.c:653:
+		if (sm_read_sector(ftl,
+			zone_num, block_num, sector_num * SM_SECTOR_SIZE,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#759: FILE: drivers/mtd/sm_ftl.c:660:
+	/* We could still continue by erasing the current block,
+		but for such worn out media it doesn't worth the trouble,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#760: FILE: drivers/mtd/sm_ftl.c:661:
+			and the dangers */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#769: FILE: drivers/mtd/sm_ftl.c:670:
+	if (sm_write_block(ftl, ftl->cache_data, zone_num, write_sector,
[...]
+			goto restart;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#770: FILE: drivers/mtd/sm_ftl.c:671:
+	if (sm_write_block(ftl, ftl->cache_data, zone_num, write_sector,
+							ftl->cache_block))

WARNING:TYPO_SPELLING: 'succesfull' may be misspelled - perhaps 'successful'?
#776: FILE: drivers/mtd/sm_ftl.c:677:
+	/* Write succesfull, so erase and free the old block */
 	         ^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#784: FILE: drivers/mtd/sm_ftl.c:685:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#789: FILE: drivers/mtd/sm_ftl.c:690:
+	struct sm_ftl *ftl = (struct sm_ftl *)data;
+	queue_work(cache_flush_workqueue, &ftl->flush_work);

WARNING:LINE_SPACING: Missing a blank line after declarations
#796: FILE: drivers/mtd/sm_ftl.c:697:
+	struct sm_ftl *ftl = container_of(work, struct sm_ftl, flush_work);
+	mutex_lock(&ftl->mutex);

WARNING:RETURN_VOID: void function return statements are not generally useful
#800: FILE: drivers/mtd/sm_ftl.c:701:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#802: FILE: drivers/mtd/sm_ftl.c:703:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#813: FILE: drivers/mtd/sm_ftl.c:714:
+	for (block = 0 ; block < ftl->zone_size - ftl->max_lba ; block++) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#826: FILE: drivers/mtd/sm_ftl.c:727:
+		if (!memcmp(tmp_buffer + SM_SECTOR_SIZE / 2, cis_signature,
+							sizeof(cis_signature)))

WARNING:SPLIT_STRING: quoted string split across lines
#834: FILE: drivers/mtd/sm_ftl.c:735:
+		dbg("WARNING: CIS block not found, "
+			"media is ether uncompatable or damaged");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#850: FILE: drivers/mtd/sm_ftl.c:751:
+static int sm_read(struct mtd_blktrans_dev *dev,
+				unsigned long sect_no, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: drivers/mtd/sm_ftl.c:800:
+static int sm_write(struct mtd_blktrans_dev *dev,
+				unsigned long sec_no, char *buf)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#920: FILE: drivers/mtd/sm_ftl.c:821:
+	if (ftl->cache_block != block || ftl->cache_zone != zone_num) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#965: FILE: drivers/mtd/sm_ftl.c:866:
+	struct sm_ftl *ftl = dev->priv;
+	geo->heads = ftl->heads;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ftl)...) over kzalloc(sizeof(struct sm_ftl)...)
#978: FILE: drivers/mtd/sm_ftl.c:879:
+	ftl = kzalloc(sizeof(struct sm_ftl), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#987: FILE: drivers/mtd/sm_ftl.c:888:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ftl->zones)...) over kzalloc(sizeof(struct ftl_zone)...)
#993: FILE: drivers/mtd/sm_ftl.c:894:
+	ftl->zones = kzalloc(sizeof(struct ftl_zone) * ftl->zone_count,

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#993: FILE: drivers/mtd/sm_ftl.c:894:
+	ftl->zones = kzalloc(sizeof(struct ftl_zone) * ftl->zone_count,
+								GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: drivers/mtd/sm_ftl.c:895:
+	ftl->zones = kzalloc(sizeof(struct ftl_zone) * ftl->zone_count,
+								GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*trans)...) over kzalloc(sizeof(struct mtd_blktrans_dev)...)
#1007: FILE: drivers/mtd/sm_ftl.c:908:
+	trans = kzalloc(sizeof(struct mtd_blktrans_dev), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: drivers/mtd/sm_ftl.c:929:
+	dbg("Found %d MiB SmartMedia/xD card on %s",
+		(int)(mtd->size / (1024 * 1024)), mtd->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1032: FILE: drivers/mtd/sm_ftl.c:933:
+	dbg("%d zones, each consists of %d blocks (+%d spares)",
+		ftl->zone_count, ftl->max_lba,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1035: FILE: drivers/mtd/sm_ftl.c:936:
+	dbg("each block consists of %d bytes",
+		ftl->block_size);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1059: FILE: drivers/mtd/sm_ftl.c:960:
+	for (i = 0 ; i < ftl->zone_count; i++) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1094: FILE: drivers/mtd/sm_ftl.c:995:
+	int error = 0;
+	cache_flush_workqueue = create_freezeable_workqueue("smflush");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1105: FILE: drivers/mtd/sm_ftl.c:1006:
+
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1125: FILE: drivers/mtd/sm_ftl.h:1:
+/*

WARNING:TYPO_SPELLING: 'loosly' may be misspelled - perhaps 'loosely'?
#1129: FILE: drivers/mtd/sm_ftl.h:5:
+ * Based loosly on ssfdc.c which is
          ^^^^^^

WARNING:MISORDERED_TYPE: type 'long unsigned int' should be specified in [[un]signed] [short|int|long|long long] order
#1168: FILE: drivers/mtd/sm_ftl.h:44:
+	long unsigned int cache_data_invalid_bitmap;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'long unsigned int' as the int is unnecessary
#1168: FILE: drivers/mtd/sm_ftl.h:44:
+	long unsigned int cache_data_invalid_bitmap;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1190: FILE: drivers/mtd/sm_ftl.h:66:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1194: FILE: drivers/mtd/sm_ftl.h:70:
+	printk(KERN_ERR "sm_ftl" ": " format "\n", ## __VA_ARGS__)

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#1194: FILE: drivers/mtd/sm_ftl.h:70:
+	printk(KERN_ERR "sm_ftl" ": " format "\n", ## __VA_ARGS__)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000024631.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 53 warnings, 55 checks, 1113 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000024631.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
