CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: mm/memory.c:906:
+void anon_add(struct vm_area_struct *vma, struct page *page,
+				unsigned long address)

CHECK:BRACES: braces {} should be used on all arms of this statement
#85: FILE: mm/memory.c:909:
+	if (vma->vm_flags & VM_LOCKED) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#88: FILE: mm/memory.c:912:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: mm/memory.c:970:
+	if ((flags & FOLL_MLOCK) &&
+			!PageMlocked(page) &&

CHECK:BRACES: Unbalanced braces around else statement
#139: FILE: mm/memory.c:2271:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: mm/memory.c:2274:
+			if (!PageMlocked(new_page) &&
+					(vma->vm_flags & VM_LOCKED))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#228: FILE: include/linux/page-flags.h:252:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: include/linux/swap.h:190:
+extern void lru_release(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: include/linux/swap.h:191:
+extern void mlock_remove(struct page *page, struct vm_area_struct *vma);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#242: FILE: include/linux/swap.h:192:
+extern void mlock_add(struct page *page, struct vm_area_struct *vma);

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: mm/mlock.c:91:
+ ^Ipgd_t *pgd;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#365: FILE: mm/mlock.c:91:
+ ^Ipgd_t *pgd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: mm/mlock.c:91:
+ ^Ipgd_t *pgd;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#366: FILE: mm/mlock.c:92:
+ ^Ipud_t *pud;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#366: FILE: mm/mlock.c:92:
+ ^Ipud_t *pud;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: mm/mlock.c:92:
+ ^Ipud_t *pud;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: mm/mlock.c:93:
+ ^Ipmd_t *pmd;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#367: FILE: mm/mlock.c:93:
+ ^Ipmd_t *pmd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: mm/mlock.c:93:
+ ^Ipmd_t *pmd;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: mm/mlock.c:95:
+ ^Ispinlock_t *ptl;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#369: FILE: mm/mlock.c:95:
+ ^Ispinlock_t *ptl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: mm/mlock.c:95:
+ ^Ispinlock_t *ptl;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#369: FILE: mm/mlock.c:95:
+ 	spinlock_t *ptl;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: mm/mlock.c:100:
+	if (addr == -EFAULT ||
+			PageReserved(page) ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: mm/mlock.c:104:
+ ^Ipgd = pgd_offset(mm, addr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: mm/mlock.c:104:
+ ^Ipgd = pgd_offset(mm, addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: mm/mlock.c:104:
+ ^Ipgd = pgd_offset(mm, addr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: mm/mlock.c:106:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: mm/mlock.c:106:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#384: FILE: mm/mlock.c:110:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: mm/mlock.c:110:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: mm/mlock.c:117:
+ ^Iptl = pte_lockptr(mm, pmd);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#391: FILE: mm/mlock.c:117:
+ ^Iptl = pte_lockptr(mm, pmd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: mm/mlock.c:117:
+ ^Iptl = pte_lockptr(mm, pmd);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: mm/mlock.c:118:
+ ^Ispin_lock(ptl);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#392: FILE: mm/mlock.c:118:
+ ^Ispin_lock(ptl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: mm/mlock.c:118:
+ ^Ispin_lock(ptl);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#394: FILE: mm/mlock.c:120:
+	if (!is_swap_pte(pte) &&
[...]
+			if (__mlock_add(page))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: mm/mlock.c:121:
+	if (!is_swap_pte(pte) &&
+		page == vm_normal_page(vma, addr, pte) &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 40)
#418: FILE: mm/mlock.c:144:
+		if (v != vma && (vma->vm_flags & VM_LOCKED) &&
[...]
+					rc = 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: mm/mlock.c:145:
+		if (v != vma && (vma->vm_flags & VM_LOCKED) &&
+				page_in_mlocked_vma(vma, page)) {

CHECK:SPACING: No space is necessary after a cast
#443: FILE: mm/mlock.c:169:
+	anon_vma = (struct anon_vma *) (mapping - PAGE_MAPPING_ANON);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 40)
#447: FILE: mm/mlock.c:173:
+		if (v != vma && (vma->vm_flags & VM_LOCKED) &&
[...]
+					rc = 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: mm/mlock.c:174:
+		if (v != vma && (vma->vm_flags & VM_LOCKED) &&
+				page_in_mlocked_vma(vma, page)) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#500: FILE: mm/mlock.c:264:
+#if 0	/* We may need this to only mlock current pages */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#574: FILE: mm/vmscan.c:701:
+			printk(KERN_INFO "Found mlocked page on LRU\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471656.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 21 warnings, 16 checks, 456 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471656.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
