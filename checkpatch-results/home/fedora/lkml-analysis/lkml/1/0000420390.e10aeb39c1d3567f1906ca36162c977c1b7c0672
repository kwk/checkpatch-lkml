CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#44: FILE: fs/ncpfs/dir.c:300:
+	pr_debug("ncp_lookup_validate: %s/%s not valid, age=%ld, server lookup\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#53: FILE: fs/ncpfs/dir.c:317:
+	pr_debug("ncp_lookup_validate: looked for %s/%s, res=%d\n",
 		dentry->d_parent->d_name.name, __name, res);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_readdir', this function's name, in a string
#77: FILE: fs/ncpfs/dir.c:419:
+	pr_debug("ncp_readdir: reading %s/%s, pos=%d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#78: FILE: fs/ncpfs/dir.c:420:
+	pr_debug("ncp_readdir: reading %s/%s, pos=%d\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_read_volume_list', this function's name, in a string
#86: FILE: fs/ncpfs/dir.c:659:
+	pr_debug("ncp_read_volume_list: pos=%ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: fs/ncpfs/dir.c:660:
+	pr_debug("ncp_read_volume_list: pos=%ld\n",
 			(unsigned long) filp->f_pos);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_read_volume_list', this function's name, in a string
#95: FILE: fs/ncpfs/dir.c:669:
+		pr_debug("ncp_read_volume_list: found vol: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: fs/ncpfs/dir.c:670:
+		pr_debug("ncp_read_volume_list: found vol: %s\n",
 			info.volume_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: fs/ncpfs/dir.c:675:
+			pr_debug("ncpfs: could not lookup vol %s\n",
 				info.volume_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_do_readdir', this function's name, in a string
#110: FILE: fs/ncpfs/dir.c:698:
+	pr_debug("ncp_do_readdir: %s/%s, fpos=%ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: fs/ncpfs/dir.c:699:
+	pr_debug("ncp_do_readdir: %s/%s, fpos=%ld\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_do_readdir', this function's name, in a string
#119: FILE: fs/ncpfs/dir.c:707:
+		pr_debug("ncp_do_readdir: init failed, err=%d\n", err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: fs/ncpfs/dir.c:921:
+			pr_debug("ncp_create: %s/%s failed\n",
 				dentry->d_parent->d_name.name, dentry->d_name.name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_mkdir', this function's name, in a string
#150: FILE: fs/ncpfs/dir.c:955:
+	pr_debug("ncp_mkdir: making %s/%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: fs/ncpfs/dir.c:956:
+	pr_debug("ncp_mkdir: making %s/%s\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_rmdir', this function's name, in a string
#159: FILE: fs/ncpfs/dir.c:998:
+	pr_debug("ncp_rmdir: removing %s/%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: fs/ncpfs/dir.c:999:
+	pr_debug("ncp_rmdir: removing %s/%s\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_unlink', this function's name, in a string
#168: FILE: fs/ncpfs/dir.c:1055:
+	pr_debug("ncp_unlink: unlinking %s/%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: fs/ncpfs/dir.c:1056:
+	pr_debug("ncp_unlink: unlinking %s/%s\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: fs/ncpfs/dir.c:1081:
+			pr_debug("ncp: removed %s/%s\n",
 				dentry->d_parent->d_name.name, dentry->d_name.name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_rename', this function's name, in a string
#186: FILE: fs/ncpfs/dir.c:1117:
+	pr_debug("ncp_rename: %s/%s to %s/%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: fs/ncpfs/dir.c:1118:
+	pr_debug("ncp_rename: %s/%s to %s/%s\n",
 		old_dentry->d_parent->d_name.name, old_dentry->d_name.name,

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: fs/ncpfs/dir.c:1154:
+               ^I        pr_debug("ncp renamed %s -> %s.\n",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#195: FILE: fs/ncpfs/dir.c:1154:
+               ^I        pr_debug("ncp renamed %s -> %s.\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: fs/ncpfs/dir.c:1154:
+               ^I        pr_debug("ncp renamed %s -> %s.\n",$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: fs/ncpfs/dir.c:1155:
+               	        pr_debug("ncp renamed %s -> %s.\n",


ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#197: FILE: fs/ncpfs/dir.c:1155:
old_dentry->d_name.name,new_dentry->d_name.name);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: fs/ncpfs/dir.c:1155:
+               	        pr_debug("ncp renamed %s -> %s.\n",
old_dentry->d_name.name,new_dentry->d_name.name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_mknod', this function's name, in a string
#205: FILE: fs/ncpfs/dir.c:1178:
+		pr_debug(KERN_DEBUG "ncp_mknod: mode = 0%o\n", mode);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#205: FILE: fs/ncpfs/dir.c:1178:
+		pr_debug(KERN_DEBUG "ncp_mknod: mode = 0%o\n", mode);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_make_open', this function's name, in a string
#218: FILE: fs/ncpfs/file.c:44:
+	pr_debug("ncp_make_open: opened=%d, volume # %u, dir entry # %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: fs/ncpfs/file.c:45:
+	pr_debug("ncp_make_open: opened=%d, volume # %u, dir entry # %u\n",
 		atomic_read(&NCP_FINFO(inode)->opened),

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_file_read', this function's name, in a string
#227: FILE: fs/ncpfs/file.c:113:
+	pr_debug("ncp_file_read: enter %s/%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: fs/ncpfs/file.c:114:
+	pr_debug("ncp_file_read: enter %s/%s\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_file_read', this function's name, in a string
#236: FILE: fs/ncpfs/file.c:134:
+		pr_err("ncp_file_read: open failed, error=%d\n", error);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_file_read', this function's name, in a string
#245: FILE: fs/ncpfs/file.c:175:
+	pr_debug("ncp_file_read: exit %s/%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: fs/ncpfs/file.c:176:
+	pr_debug("ncp_file_read: exit %s/%s\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_file_write', this function's name, in a string
#254: FILE: fs/ncpfs/file.c:193:
+	pr_debug("ncp_file_write: enter %s/%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: fs/ncpfs/file.c:194:
+	pr_debug("ncp_file_write: enter %s/%s\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_file_write', this function's name, in a string
#263: FILE: fs/ncpfs/file.c:227:
+		pr_err("ncp_file_write: open failed, error=%d\n", errno);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_file_write', this function's name, in a string
#272: FILE: fs/ncpfs/file.c:272:
+	pr_debug("ncp_file_write: exit %s/%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: fs/ncpfs/file.c:273:
+	pr_debug("ncp_file_write: exit %s/%s\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_update_inode', this function's name, in a string
#294: FILE: fs/ncpfs/inode.c:124:
+	pr_debug("ncp_update_inode: updated %s, volnum=%d, dirent=%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: fs/ncpfs/inode.c:125:
+	pr_debug("ncp_update_inode: updated %s, volnum=%d, dirent=%u\n",
 		nwinfo->i.entryName, NCP_FINFO(inode)->volNumber,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: fs/ncpfs/inode.c:133:
+	pr_debug("ncp_update_dates_and_mode: (%s) nfs.mode=0%o\n",
 		nwi->entryName, nwi->nfs.mode);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_delete_inode', this function's name, in a string
#322: FILE: fs/ncpfs/inode.c:287:
+		pr_debug("ncp_delete_inode: put directory %ld\n", inode->i_ino);

CHECK:SPACING: No space is necessary after a cast
#331: FILE: fs/ncpfs/inode.c:604:
+	pr_debug("ncp_fill_super: NCP_SBP(sb) = %x\n", (int) NCP_SBP(sb));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_fill_super', this function's name, in a string
#331: FILE: fs/ncpfs/inode.c:604:
+	pr_debug("ncp_fill_super: NCP_SBP(sb) = %x\n", (int) NCP_SBP(sb));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_fill_super', this function's name, in a string
#350: FILE: fs/ncpfs/inode.c:659:
+	pr_debug("ncp_fill_super: root vol=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: fs/ncpfs/inode.c:660:
+	pr_debug("ncp_fill_super: root vol=%d\n",
 	sb->s_root = d_alloc_root(root_inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: fs/ncpfs/inode.c:904:
+		pr_debug("ncpfs: trying to change size to %ld\n",
 			attr->ia_size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_ioctl', this function's name, in a string
#426: FILE: fs/ncpfs/ioctl.c:324:
+		pr_debug("ncp_ioctl: copy %d bytes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: fs/ncpfs/ioctl.c:325:
+		pr_debug("ncp_ioctl: copy %d bytes\n",
 			result);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_mmap', this function's name, in a string
#463: FILE: fs/ncpfs/mmap.c:111:
+	pr_debug("ncp_mmap: called\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#519: FILE: fs/ncpfs/ncplib_kernel.c:398:
+			pr_debug(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_get_volume_root', this function's name, in a string
#537: FILE: fs/ncpfs/ncplib_kernel.c:585:
+	pr_debug("ncp_get_volume_root: looking up vol %s\n", volname);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: fs/ncpfs/ncplib_kernel.c:612:
+	pr_debug("lookup_vol: namespace[%d] = %d\n",
 		volnum, server->name_space[volnum]);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#577: FILE: fs/ncpfs/sock.c:416:
+					pr_debug("bad signature (%02X) in watchdog packet\n", buf[9]);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#643: FILE: fs/ncpfs/symlink.c:117:
+	pr_debug("ncp_symlink(dir=%p,dentry=%p,symname=%s)\n",dir,dentry,symname);
 	                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#643: FILE: fs/ncpfs/symlink.c:117:
+	pr_debug("ncp_symlink(dir=%p,dentry=%p,symname=%s)\n",dir,dentry,symname);
 	                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#643: FILE: fs/ncpfs/symlink.c:117:
+	pr_debug("ncp_symlink(dir=%p,dentry=%p,symname=%s)\n",dir,dentry,symname);
 	                                                                ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ncp_symlink', this function's name, in a string
#643: FILE: fs/ncpfs/symlink.c:117:
+	pr_debug("ncp_symlink(dir=%p,dentry=%p,symname=%s)\n",dir,dentry,symname);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000420390.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 29 warnings, 28 checks, 541 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000420390.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
