WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
The result of this patch, and the next two, is a fairly nice simplification,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: include/linux/pickop.h:1:
+#ifndef _LINUX_PICKOP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#56: FILE: include/linux/pickop.h:8:
+extern int __bad_func_type(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#58: FILE: include/linux/pickop.h:10:
+#define PICK_FUNCTION(type1, type2, func1, func2, arg0, ...)		\
+do {									\
+	if (TYPE_EQUAL((arg0), type1))					\
+		func1((type1 *)(arg0), ##__VA_ARGS__);			\
+	else if (TYPE_EQUAL((arg0), type2))				\
+		func2((type2 *)(arg0), ##__VA_ARGS__);			\
+	else __bad_func_type();						\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#58: FILE: include/linux/pickop.h:10:
+#define PICK_FUNCTION(type1, type2, func1, func2, arg0, ...)		\
+do {									\
+	if (TYPE_EQUAL((arg0), type1))					\
+		func1((type1 *)(arg0), ##__VA_ARGS__);			\
+	else if (TYPE_EQUAL((arg0), type2))				\
+		func2((type2 *)(arg0), ##__VA_ARGS__);			\
+	else __bad_func_type();						\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg0' - possible side-effects?
#58: FILE: include/linux/pickop.h:10:
+#define PICK_FUNCTION(type1, type2, func1, func2, arg0, ...)		\
+do {									\
+	if (TYPE_EQUAL((arg0), type1))					\
+		func1((type1 *)(arg0), ##__VA_ARGS__);			\
+	else if (TYPE_EQUAL((arg0), type2))				\
+		func2((type2 *)(arg0), ##__VA_ARGS__);			\
+	else __bad_func_type();						\
+} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#64: FILE: include/linux/pickop.h:16:
+	else __bad_func_type();						\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#67: FILE: include/linux/pickop.h:19:
+#define PICK_FUNCTION_RET(type1, type2, func1, func2, arg0, ...)	\
+({									\
+	unsigned long __ret;						\
+									\
+	if (TYPE_EQUAL((arg0), type1))					\
+		__ret = func1((type1 *)(arg0), ##__VA_ARGS__);		\
+	else if (TYPE_EQUAL((arg0), type2))				\
+		__ret = func2((type2 *)(arg0), ##__VA_ARGS__);		\
+	else __ret = __bad_func_type();					\
+									\
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#67: FILE: include/linux/pickop.h:19:
+#define PICK_FUNCTION_RET(type1, type2, func1, func2, arg0, ...)	\
+({									\
+	unsigned long __ret;						\
+									\
+	if (TYPE_EQUAL((arg0), type1))					\
+		__ret = func1((type1 *)(arg0), ##__VA_ARGS__);		\
+	else if (TYPE_EQUAL((arg0), type2))				\
+		__ret = func2((type2 *)(arg0), ##__VA_ARGS__);		\
+	else __ret = __bad_func_type();					\
+									\
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg0' - possible side-effects?
#67: FILE: include/linux/pickop.h:19:
+#define PICK_FUNCTION_RET(type1, type2, func1, func2, arg0, ...)	\
+({									\
+	unsigned long __ret;						\
+									\
+	if (TYPE_EQUAL((arg0), type1))					\
+		__ret = func1((type1 *)(arg0), ##__VA_ARGS__);		\
+	else if (TYPE_EQUAL((arg0), type2))				\
+		__ret = func2((type2 *)(arg0), ##__VA_ARGS__);		\
+	else __ret = __bad_func_type();					\
+									\
+	__ret;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#75: FILE: include/linux/pickop.h:27:
+	else __ret = __bad_func_type();					\

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000398895.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 2 warnings, 7 checks, 207 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000398895.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
