CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#119: FILE: net/9p/mux.c:46:
+#define MAX_SOCK_BUF (64*1024)
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_trans_fd *' should also have an identifier name
#184: FILE: net/9p/mux.c:83:
+	int (*sent)(struct p9_trans_fd *, struct p9fd_trans_req *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9fd_trans_req *' should also have an identifier name
#184: FILE: net/9p/mux.c:83:
+	int (*sent)(struct p9_trans_fd *, struct p9fd_trans_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_trans_fd *' should also have an identifier name
#185: FILE: net/9p/mux.c:84:
+	int (*rcvd)(struct p9_trans_fd *, u16 tag, int pos, int size);

CHECK:CAMELCASE: Avoid CamelCase: <Rworksched>
#194: FILE: net/9p/mux.c:89:
+	Rworksched = 1,		/* read work scheduled or running */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Rpending>
#195: FILE: net/9p/mux.c:90:
+	Rpending = 2,		/* can read */

CHECK:CAMELCASE: Avoid CamelCase: <Wworksched>
#196: FILE: net/9p/mux.c:91:
+	Wworksched = 4,		/* write work scheduled or running */

CHECK:CAMELCASE: Avoid CamelCase: <Wpending>
#197: FILE: net/9p/mux.c:92:
+	Wpending = 8,		/* can write */

CHECK:CAMELCASE: Avoid CamelCase: <None>
#234: FILE: net/9p/mux.c:110:
+	None,

CHECK:CAMELCASE: Avoid CamelCase: <Flushing>
#235: FILE: net/9p/mux.c:111:
+	Flushing,

CHECK:CAMELCASE: Avoid CamelCase: <Flushed>
#236: FILE: net/9p/mux.c:112:
+	Flushed,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_port>
#244: FILE: net/9p/mux.c:117:
+	Opt_port, Opt_rfdno, Opt_wfdno, Opt_msize,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rfdno>
#244: FILE: net/9p/mux.c:117:
+	Opt_port, Opt_rfdno, Opt_wfdno, Opt_msize,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_wfdno>
#244: FILE: net/9p/mux.c:117:
+	Opt_port, Opt_rfdno, Opt_wfdno, Opt_msize,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_msize>
#244: FILE: net/9p/mux.c:117:
+	Opt_port, Opt_rfdno, Opt_wfdno, Opt_msize,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#264: FILE: net/9p/mux.c:130:
+static void p9fd_pollwait(struct file *filp, wait_queue_head_t *wait_address,
                                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#265: FILE: net/9p/mux.c:131:
+			  poll_table * p);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: net/9p/mux.c:137:
+static unsigned int p9fd_poll(struct p9_trans_fd *trans,
+	struct poll_table_struct *pt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: net/9p/mux.c:139:
+static struct p9fd_trans_req *p9fd_req_create(struct p9_trans_fd *trans,
+					struct p9_trans_req *req);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: net/9p/mux.c:143:
+static struct p9_trans *p9fd_create_tcp_client(const char *devname,
+		char *options);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: net/9p/mux.c:145:
+static struct p9_trans *p9fd_create_unix_client(const char *devname,
+		char *options);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: net/9p/mux.c:147:
+static struct p9_trans *p9fd_create_fd_client(const char *devname,
+		char *options);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: net/9p/mux.c:206:
+	P9_DPRINTK(P9_DEBUG_TRANS, "trans %p num %d procnum %d\n", trans,
+		p9fd_num, p9fd_poll_task_num);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p9fd_poll_tasks[i].task"
#385: FILE: net/9p/mux.c:213:
+			if (p9fd_poll_tasks[i].task == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#403: FILE: net/9p/mux.c:228:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p9fd_poll_tasks[i].task"
#427: FILE: net/9p/mux.c:238:
+		if (p9fd_poll_tasks[i].task != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "trans->poll_waddr[i]"
#483: FILE: net/9p/mux.c:271:
+		if (trans->poll_waddr[i] != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: net/9p/mux.c:273:
+			remove_wait_queue(trans->poll_waddr[i],
+				&trans->poll_wait[i]);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*trans)...) over kzalloc(sizeof(struct p9_trans)...)
#530: FILE: net/9p/mux.c:302:
+	trans = kzalloc(sizeof(struct p9_trans), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ts)...) over kzalloc(sizeof(struct p9_trans_fd)...)
#544: FILE: net/9p/mux.c:306:
+	ts = kzalloc(sizeof(struct p9_trans_fd) + 2 * msize, GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#590: FILE: net/9p/mux.c:333:
+	ts->rbuf = (u8 *) ts + sizeof(*ts);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: net/9p/mux.c:390:
+	P9_DPRINTK(P9_DEBUG_TRANS, "trans %p prev %p next %p\n", ts,
+		ts->trans_list.prev, ts->trans_list.next);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#690: FILE: net/9p/mux.c:407:
+	BUG_ON(err == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#727: FILE: net/9p/mux.c:436:
+p9fd_pollwait(struct file *filp, wait_queue_head_t *wait_address,
                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#728: FILE: net/9p/mux.c:437:
+p9fd_pollwait(struct file *filp, wait_queue_head_t *wait_address,
+	poll_table * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#728: FILE: net/9p/mux.c:437:
+	poll_table * p)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ts->poll_waddr[i]"
#739: FILE: net/9p/mux.c:444:
+		if (ts->poll_waddr[i] == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#748: FILE: net/9p/mux.c:447:
+	BUG_ON(i >= ARRAY_SIZE(ts->poll_waddr));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#812: FILE: net/9p/mux.c:491:
+		if ((ts->wsize || !list_empty(&ts->unsent_req_list))
+		    && !test_and_set_bit(Wworksched, &ts->wsched)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#841: FILE: net/9p/mux.c:513:
+		list_for_each_entry_safe(ts, ttmp, &vpt->trans_list,
+								trans_list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#871: FILE: net/9p/mux.c:541:
+		req = list_first_entry(&ts->unsent_req_list,
+			struct p9fd_trans_req, req_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#875: FILE: net/9p/mux.c:545:
+		P9_DPRINTK(P9_DEBUG_TRANS, "tag %d size %d\n", tc->tag,
+			tc->size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#885: FILE: net/9p/mux.c:555:
+		n = p9_fcall_get(ts->wbuf + ts->wsize,
+					ts->msize - ts->wsize, tc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#949: FILE: net/9p/mux.c:588:
+	P9_DPRINTK(P9_DEBUG_TRANS, "trans %p pos %d size %d\n", ts, ts->wpos,
+		ts->wsize);

CHECK:BRACES: braces {} should be used on all arms of this statement
#980: FILE: net/9p/mux.c:608:
+	if (ts->wsize > 0) {
[...]
+			queue_work(p9fd_wq, &ts->wq);
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1066: FILE: net/9p/mux.c:643:
+	P9_DPRINTK(P9_DEBUG_TRANS, "trans %p msize %d trans->msize %d\n",
+		ts, ts->msize, trans->msize);

CHECK:SPACING: No space is necessary after a cast
#1108: FILE: net/9p/mux.c:662:
+		n = le32_to_cpu(*(__le32 *) (ts->rbuf + i));

CHECK:SPACING: No space is necessary after a cast
#1125: FILE: net/9p/mux.c:674:
+		tag = le16_to_cpu(*(__le16 *) (ts->rbuf + i + 5));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1171: FILE: net/9p/mux.c:691:
+	if (n & POLLIN) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1174: FILE: net/9p/mux.c:694:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1392: FILE: net/9p/mux.c:814:
+static struct p9fd_trans_req *p9fd_req_create(struct p9_trans_fd *trans,
+					struct p9_trans_req *req)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1458: FILE: net/9p/mux.c:853:
+		int token;
+		if (!*p)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1464: FILE: net/9p/mux.c:859:
+			P9_DPRINTK(P9_DEBUG_ERROR,
+			 "integer field, but no integer?\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1563: FILE: net/9p/mux.c:932:
+static unsigned int p9fd_poll(struct p9_trans_fd *ts,
+	struct poll_table_struct *pt)

CHECK:SPACING: No space is necessary after a cast
#1711: FILE: net/9p/mux.c:1017:
+	err = csocket->ops->connect(csocket, (struct sockaddr *) &sin_server,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1715: FILE: net/9p/mux.c:1021:
+		P9_EPRINTK(KERN_ERR,
+			"p9_trans_tcp: problem connecting socket to %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1798: FILE: net/9p/mux.c:1061:
+		P9_EPRINTK(KERN_ERR, "p9_trans_unix: address too long: %s\n",
+			addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1815: FILE: net/9p/mux.c:1073:
+		P9_EPRINTK(KERN_ERR,
+			"p9_trans_unix: problem connecting socket: %s: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1871: FILE: net/9p/mux.c:1108:
+		printk(KERN_ERR "v9fs: Insufficient options for proto=fd\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1917: FILE: net/9p/mux.c:1135:
+		printk(KERN_WARNING "v9fs: creating 9pfd workqueue failed\n");

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1932: FILE: net/9p/mux.c:1146:
+static void __exit p9_trans_fd_exit(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1934: FILE: net/9p/mux.c:1148:
+	printk(KERN_ERR "Removal of 9p transports not implemented\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1935: FILE: net/9p/mux.c:1149:
+	BUG();

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1945: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361779.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 13 warnings, 48 checks, 1888 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361779.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
