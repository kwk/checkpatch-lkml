WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#74: FILE: drivers/staging/hv/ChannelMgmt.h:50:
+^Ivoid ^I^I^I^I^I*PollTimer; // SA-111 workaround$

CHECK:CAMELCASE: Avoid CamelCase: <PollTimer>
#74: FILE: drivers/staging/hv/ChannelMgmt.h:50:
+	void 					*PollTimer; // SA-111 workaround

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#83: FILE: drivers/staging/hv/ChannelMgmt.h:67:
+^Ivoid ^I^I^I^I^I*ControlWQ;$

CHECK:CAMELCASE: Avoid CamelCase: <ControlWQ>
#83: FILE: drivers/staging/hv/ChannelMgmt.h:67:
+	void 					*ControlWQ;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#87: FILE: drivers/staging/hv/ChannelMgmt.h:70:
+^I//void ^I^I^I^I^I*dataWorkQueue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#96: FILE: drivers/staging/hv/ChannelMgmt.h:116:
+^Ivoid ^I^I^I*WaitEvent;$

CHECK:CAMELCASE: Avoid CamelCase: <WaitEvent>
#96: FILE: drivers/staging/hv/ChannelMgmt.h:116:
+	void 			*WaitEvent;

CHECK:CAMELCASE: Avoid CamelCase: <gHvContext>
#110: FILE: drivers/staging/hv/Hv.c:240:
+	memset(gHvContext.synICEventPage,   0, sizeof(void *) * MAX_NUM_CPUS);

CHECK:CAMELCASE: Avoid CamelCase: <synICEventPage>
#110: FILE: drivers/staging/hv/Hv.c:240:
+	memset(gHvContext.synICEventPage,   0, sizeof(void *) * MAX_NUM_CPUS);

CHECK:CAMELCASE: Avoid CamelCase: <synICMessagePage>
#111: FILE: drivers/staging/hv/Hv.c:241:
+	memset(gHvContext.synICMessagePage, 0, sizeof(void *) * MAX_NUM_CPUS);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#139: FILE: drivers/staging/hv/NetVsc.h:81:
+^Ivoid ^I^I^I^I^I^I^I*ChannelInitEvent;$

CHECK:CAMELCASE: Avoid CamelCase: <ChannelInitEvent>
#139: FILE: drivers/staging/hv/NetVsc.h:81:
+	void 							*ChannelInitEvent;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#152: FILE: drivers/staging/hv/RndisFilter.c:64:
+^Ivoid ^I^I^I^I^I^I*WaitEvent;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#165: FILE: drivers/staging/hv/StorVsc.c:50:
+^Ivoid ^I^I^I^I^I^I^I*WaitEvent;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#174: FILE: drivers/staging/hv/StorVsc.c:71:
+^I//void ^I^I^I^I^I^I*OutstandingRequestLock;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: drivers/staging/hv/VmbusPrivate.h:89:
+^Ivoid ^I^I^I^I^I^I^I^I*WorkQueue;$

CHECK:CAMELCASE: Avoid CamelCase: <WorkQueue>
#187: FILE: drivers/staging/hv/VmbusPrivate.h:89:
+	void 								*WorkQueue;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: drivers/staging/hv/VmbusPrivate.h:98:
+^Ivoid ^I^I^I^I*WaitEvent;$

CHECK:CAMELCASE: Avoid CamelCase: <TimerCreate>
#220: FILE: drivers/staging/hv/include/osd.h:119:
+extern void *TimerCreate(PFN_TIMER_CALLBACK pfnTimerCB, void *context);

CHECK:CAMELCASE: Avoid CamelCase: <pfnTimerCB>
#220: FILE: drivers/staging/hv/include/osd.h:119:
+extern void *TimerCreate(PFN_TIMER_CALLBACK pfnTimerCB, void *context);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: drivers/staging/hv/include/osd.h:119:
+extern void *TimerCreate(PFN_TIMER_CALLBACK pfnTimerCB, void *context);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <TimerClose>
#221: FILE: drivers/staging/hv/include/osd.h:120:
+extern void  TimerClose(void *hTimer);

CHECK:CAMELCASE: Avoid CamelCase: <hTimer>
#221: FILE: drivers/staging/hv/include/osd.h:120:
+extern void  TimerClose(void *hTimer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: drivers/staging/hv/include/osd.h:120:
+extern void  TimerClose(void *hTimer);

CHECK:CAMELCASE: Avoid CamelCase: <TimerStop>
#222: FILE: drivers/staging/hv/include/osd.h:121:
+extern int   TimerStop(void *hTimer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: drivers/staging/hv/include/osd.h:121:
+extern int   TimerStop(void *hTimer);

CHECK:CAMELCASE: Avoid CamelCase: <TimerStart>
#223: FILE: drivers/staging/hv/include/osd.h:122:
+extern void  TimerStart(void *hTimer, u32 expirationInUs);

CHECK:CAMELCASE: Avoid CamelCase: <expirationInUs>
#223: FILE: drivers/staging/hv/include/osd.h:122:
+extern void  TimerStart(void *hTimer, u32 expirationInUs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#223: FILE: drivers/staging/hv/include/osd.h:122:
+extern void  TimerStart(void *hTimer, u32 expirationInUs);

CHECK:CAMELCASE: Avoid CamelCase: <WaitEventCreate>
#229: FILE: drivers/staging/hv/include/osd.h:124:
+extern void *WaitEventCreate(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: drivers/staging/hv/include/osd.h:124:
+extern void *WaitEventCreate(void);

CHECK:CAMELCASE: Avoid CamelCase: <WaitEventClose>
#230: FILE: drivers/staging/hv/include/osd.h:125:
+extern void  WaitEventClose(void *hWait);

CHECK:CAMELCASE: Avoid CamelCase: <hWait>
#230: FILE: drivers/staging/hv/include/osd.h:125:
+extern void  WaitEventClose(void *hWait);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#230: FILE: drivers/staging/hv/include/osd.h:125:
+extern void  WaitEventClose(void *hWait);

CHECK:CAMELCASE: Avoid CamelCase: <WaitEventSet>
#231: FILE: drivers/staging/hv/include/osd.h:126:
+extern void  WaitEventSet(void *hWait);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: drivers/staging/hv/include/osd.h:126:
+extern void  WaitEventSet(void *hWait);

CHECK:CAMELCASE: Avoid CamelCase: <WaitEventWait>
#232: FILE: drivers/staging/hv/include/osd.h:127:
+extern int   WaitEventWait(void *hWait);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: drivers/staging/hv/include/osd.h:127:
+extern int   WaitEventWait(void *hWait);

CHECK:CAMELCASE: Avoid CamelCase: <WaitEventWaitEx>
#236: FILE: drivers/staging/hv/include/osd.h:130:
+extern int	WaitEventWaitEx(void *hWait, u32 TimeoutInMs);

CHECK:CAMELCASE: Avoid CamelCase: <TimeoutInMs>
#236: FILE: drivers/staging/hv/include/osd.h:130:
+extern int	WaitEventWaitEx(void *hWait, u32 TimeoutInMs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: drivers/staging/hv/include/osd.h:130:
+extern int	WaitEventWaitEx(void *hWait, u32 TimeoutInMs);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#247: FILE: drivers/staging/hv/include/osd.h:145:
+extern void *WorkQueueCreate(char* name);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <WorkQueueCreate>
#247: FILE: drivers/staging/hv/include/osd.h:145:
+extern void *WorkQueueCreate(char* name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: drivers/staging/hv/include/osd.h:145:
+extern void *WorkQueueCreate(char* name);

CHECK:CAMELCASE: Avoid CamelCase: <WorkQueueClose>
#248: FILE: drivers/staging/hv/include/osd.h:146:
+extern void  WorkQueueClose(void *hWorkQueue);

CHECK:CAMELCASE: Avoid CamelCase: <hWorkQueue>
#248: FILE: drivers/staging/hv/include/osd.h:146:
+extern void  WorkQueueClose(void *hWorkQueue);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#248: FILE: drivers/staging/hv/include/osd.h:146:
+extern void  WorkQueueClose(void *hWorkQueue);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#249: FILE: drivers/staging/hv/include/osd.h:147:
+extern int   WorkQueueQueueWorkItem(void *hWorkQueue, PFN_WORKITEM_CALLBACK workItem, void *context);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <WorkQueueQueueWorkItem>
#249: FILE: drivers/staging/hv/include/osd.h:147:
+extern int   WorkQueueQueueWorkItem(void *hWorkQueue, PFN_WORKITEM_CALLBACK workItem, void *context);

CHECK:CAMELCASE: Avoid CamelCase: <workItem>
#249: FILE: drivers/staging/hv/include/osd.h:147:
+extern int   WorkQueueQueueWorkItem(void *hWorkQueue, PFN_WORKITEM_CALLBACK workItem, void *context);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: drivers/staging/hv/include/osd.h:147:
+extern int   WorkQueueQueueWorkItem(void *hWorkQueue, PFN_WORKITEM_CALLBACK workItem, void *context);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092014.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 39 checks, 237 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092014.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
