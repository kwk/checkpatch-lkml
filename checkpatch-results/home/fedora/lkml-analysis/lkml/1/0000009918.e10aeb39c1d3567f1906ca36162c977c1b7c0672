WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#55: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: security/apparmor/include/match.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'insted' may be misspelled - perhaps 'instead'?
#87: FILE: security/apparmor/include/match.h:28:
+ * used in the header is 0x1B5E783D insted of 0xF13C57B1 though, because
                                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'LEN' may be better as '(LEN)' to avoid precedence issues
#155: FILE: security/apparmor/include/match.h:96:
+#define UNPACK_ARRAY(TABLE, BLOB, LEN, TYPE, NTOHX) \
+	do { \
+		typeof(LEN) __i; \
+		TYPE *__t = (TYPE *) TABLE; \
+		TYPE *__b = (TYPE *) BLOB; \
+		for (__i = 0; __i < LEN; __i++) { \
+			__t[__i] = NTOHX(__b[__i]); \
+		} \
+	} while (0)

CHECK:SPACING: No space is necessary after a cast
#159: FILE: security/apparmor/include/match.h:100:
+		TYPE *__b = (TYPE *) BLOB; \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#189: FILE: security/apparmor/match.c:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#233: FILE: security/apparmor/match.c:45:
+	th.td_id = be16_to_cpu(*(u16 *) (blob)) - 1;

CHECK:SPACING: No space is necessary after a cast
#234: FILE: security/apparmor/match.c:46:
+	th.td_flags = be16_to_cpu(*(u16 *) (blob + 2));

CHECK:SPACING: No space is necessary after a cast
#235: FILE: security/apparmor/match.c:47:
+	th.td_lolen = be32_to_cpu(*(u32 *) (blob + 8));

WARNING:LINE_SPACING: Missing a blank line after declarations
#361: FILE: security/apparmor/match.c:173:
+	struct aa_dfa *dfa = container_of(kref, struct aa_dfa, count);
+	aa_dfa_free(dfa);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#372: FILE: security/apparmor/match.c:184:
+ * Assumes the dfa @blob stream has been aligned on a 8 byte boundry
                                                              ^^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dfa)...) over kzalloc(sizeof(struct aa_dfa)...)
#380: FILE: security/apparmor/match.c:192:
+	struct aa_dfa *dfa = kzalloc(sizeof(struct aa_dfa), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#381: FILE: security/apparmor/match.c:193:
+	struct aa_dfa *dfa = kzalloc(sizeof(struct aa_dfa), GFP_KERNEL);
+	if (!dfa)

CHECK:SPACING: No space is necessary after a cast
#392: FILE: security/apparmor/match.c:204:
+	if (ntohl(*(u32 *) blob) != YYTH_MAGIC)

CHECK:SPACING: No space is necessary after a cast
#395: FILE: security/apparmor/match.c:207:
+	hsize = ntohl(*(u32 *) (blob + 4));

CHECK:SPACING: No space is necessary after a cast
#399: FILE: security/apparmor/match.c:211:
+	dfa->flags = ntohs(*(u16 *) (blob + 12));

WARNING:LINE_SPACING: Missing a blank line after declarations
#405: FILE: security/apparmor/match.c:217:
+		struct table_header *table;
+		table = unpack_table(blob, size);

CHECK:SPACING: No space is necessary after a cast
#484: FILE: security/apparmor/match.c:296:
+			pos = base[state] + equiv[(u8) *str++];

CHECK:SPACING: No space is necessary after a cast
#493: FILE: security/apparmor/match.c:305:
+			pos = base[state] + (u8) *str++;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009918.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 11 checks, 453 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009918.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
