WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perfcounters-fixes-for-linus

WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#43: 
shouldnt affect anything else - and perfcounters is a new subsystem 
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#44: 
so this shouldnt cause regressions.
        ^^^^^^^^

ERROR:SPACING: space prohibited after that open square bracket '['
#202: FILE: arch/x86/kernel/cpu/perf_counter.c:404:
+		[ C(RESULT_ACCESS) ] = 0x0142, /* Data Cache Refills :system */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close square bracket ']'
#202: FILE: arch/x86/kernel/cpu/perf_counter.c:404:
+		[ C(RESULT_ACCESS) ] = 0x0142, /* Data Cache Refills :system */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#328: FILE: include/linux/perf_counter.h:340:
+^I * ^Istruct perf_event_header^Iheader;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#329: FILE: include/linux/perf_counter.h:341:
+^I * ^Iu32^I^I^I^Ipid, tid;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#330: FILE: include/linux/perf_counter.h:342:
+^I * ^Iu64^I^I^I^Ivalue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#331: FILE: include/linux/perf_counter.h:343:
+^I * ^I{ u64^I^Itime_enabled; ^I} && PERF_FORMAT_ENABLED$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#332: FILE: include/linux/perf_counter.h:344:
+^I * ^I{ u64^I^Itime_running; ^I} && PERF_FORMAT_RUNNING$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#333: FILE: include/linux/perf_counter.h:345:
+^I * ^I{ u64^I^Iparent_id;^I} && PERF_FORMAT_ID$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#349: FILE: include/linux/perf_counter.h:360:
+^I * ^I{ u64^I^I^Iperiod;   } && PERF_SAMPLE_PERIOD$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#378: FILE: include/linux/perf_counter.h:697:
+extern void __perf_swcounter_event(u32, u64, int, struct pt_regs *, u64);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#378: FILE: include/linux/perf_counter.h:697:
+extern void __perf_swcounter_event(u32, u64, int, struct pt_regs *, u64);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#378: FILE: include/linux/perf_counter.h:697:
+extern void __perf_swcounter_event(u32, u64, int, struct pt_regs *, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#378: FILE: include/linux/perf_counter.h:697:
+extern void __perf_swcounter_event(u32, u64, int, struct pt_regs *, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#378: FILE: include/linux/perf_counter.h:697:
+extern void __perf_swcounter_event(u32, u64, int, struct pt_regs *, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#378: FILE: include/linux/perf_counter.h:697:
+extern void __perf_swcounter_event(u32, u64, int, struct pt_regs *, u64);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#463: FILE: kernel/perf_counter.c:1061:
+#define list_next_entry(pos, member) \
+	list_entry(pos->member.next, typeof(*pos), member)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pos' may be better as '(pos)' to avoid precedence issues
#463: FILE: kernel/perf_counter.c:1061:
+#define list_next_entry(pos, member) \
+	list_entry(pos->member.next, typeof(*pos), member)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#463: FILE: kernel/perf_counter.c:1061:
+#define list_next_entry(pos, member) \
+	list_entry(pos->member.next, typeof(*pos), member)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#463: FILE: kernel/perf_counter.c:1061:
+#define list_next_entry(pos, member) \
+	list_entry(pos->member.next, typeof(*pos), member)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#482: FILE: kernel/perf_counter.c:1080:
+	       &next_counter->event_entry != &next_ctx->event_list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#694: FILE: kernel/perf_counter.c:2684:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#706: FILE: kernel/perf_counter.c:2737:
+		if (callchain)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#708: FILE: kernel/perf_counter.c:2739:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#710: FILE: kernel/perf_counter.c:2741:
+			u64 nr = 0;
+			perf_output_put(&handle, nr);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#957: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#983: FILE: tools/perf/CREDITS:22:
+ René Scharfe
     ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1128: FILE: tools/perf/builtin-record.c:44:
+static int			inherit_stat			= 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1129: FILE: tools/perf/builtin-record.c:45:
+static int			no_samples			= 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!execname"
#1151: FILE: tools/perf/builtin-record.c:316:
+			if (execname == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#1327: FILE: tools/perf/builtin-record.c:559:
+	} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1422: FILE: tools/perf/builtin-report.c:105:
+	u32 pid,tid;
 	       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1523: FILE: tools/perf/builtin-report.c:789:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1553: FILE: tools/perf/builtin-report.c:819:
+
+

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1589: FILE: tools/perf/builtin-report.c:906:
+	dprintf(" ...... map: %Lx -> %Lx\n", *ipp, ip);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1652: FILE: tools/perf/builtin-report.c:1222:
+	dprintf("%p [%p]: PERF_EVENT_SAMPLE (IP, %d): %d: %p period: %Ld\n",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#1694: FILE: tools/perf/builtin-report.c:1429:
+	dprintf("%p [%p]: PERF_EVENT_READ: %d %d %Lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1695: FILE: tools/perf/builtin-report.c:1430:
+	dprintf("%p [%p]: PERF_EVENT_READ: %d %d %Lu\n",
+			(void *)(offset + head),

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1895: FILE: tools/perf/builtin-stat.c:68:
+static int			run_idx				=  0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1901: FILE: tools/perf/builtin-stat.c:74:
+static int			null_run			=  0;

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2083: FILE: tools/perf/builtin-stat.c:305:
+	fprintf(stderr, " %14Ld  %-24s", count[0], event_name(counter));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2104: FILE: tools/perf/builtin-stat.c:395:
+				update_avg("scaled", j,
+					event_scaled_avg + j, event_scaled[i]+j);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2104: FILE: tools/perf/builtin-stat.c:395:
+					event_scaled_avg + j, event_scaled[i]+j);
 					                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2118: FILE: tools/perf/builtin-stat.c:463:
+	fprintf(stderr, " %14.9f  seconds time elapsed",
 			(double)walltime_nsecs_avg/1e9);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2122: FILE: tools/perf/builtin-stat.c:466:
+			100.0*(double)walltime_nsecs_noise/(double)walltime_nsecs_avg);
 			     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2122: FILE: tools/perf/builtin-stat.c:466:
+			100.0*(double)walltime_nsecs_noise/(double)walltime_nsecs_avg);
 			                                  ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2244: FILE: tools/perf/util/callchain.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2259: FILE: tools/perf/util/callchain.c:16:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2360: FILE: tools/perf/util/callchain.c:117:
+__append_chain(struct callchain_node *root, struct ip_callchain *chain,
+		int start);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2370: FILE: tools/perf/util/callchain.c:127:
+		int ret = __append_chain(rnode, chain, root->val_nr);
+		if (!ret)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2378: FILE: tools/perf/util/callchain.c:135:
+__append_chain(struct callchain_node *root, struct ip_callchain *chain,
+		int start)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2424: FILE: tools/perf/util/callchain.h:1:
+#ifndef __PERF_CALLCHAIN_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2431: FILE: tools/perf/util/callchain.h:8:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2435: FILE: tools/perf/util/callchain.h:12:
+^Istruct list_head ^Ichildren;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2436: FILE: tools/perf/util/callchain.h:13:
+^Istruct list_head ^Ival;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2463: FILE: tools/perf/util/header.c:1:
+#include <sys/types.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2595: FILE: tools/perf/util/header.c:133:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2603: FILE: tools/perf/util/header.c:141:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2619: FILE: tools/perf/util/header.c:157:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2711: FILE: tools/perf/util/header.h:1:
+#ifndef _PERF_HEADER_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2744: FILE: tools/perf/util/header.h:34:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2842: FILE: tools/perf/util/parse-events.c:26:
+  { CHW(CPU_CYCLES),^I^I"cpu-cycles",^I^I"cycles"^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2843: FILE: tools/perf/util/parse-events.c:27:
+  { CHW(INSTRUCTIONS),^I^I"instructions",^I^I""^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2844: FILE: tools/perf/util/parse-events.c:28:
+  { CHW(CACHE_REFERENCES),^I"cache-references",^I""^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2845: FILE: tools/perf/util/parse-events.c:29:
+  { CHW(CACHE_MISSES),^I^I"cache-misses",^I^I""^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2846: FILE: tools/perf/util/parse-events.c:30:
+  { CHW(BRANCH_INSTRUCTIONS),^I"branch-instructions",^I"branches"^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2847: FILE: tools/perf/util/parse-events.c:31:
+  { CHW(BRANCH_MISSES),^I^I"branch-misses",^I""^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2848: FILE: tools/perf/util/parse-events.c:32:
+  { CHW(BUS_CYCLES),^I^I"bus-cycles",^I^I""^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2850: FILE: tools/perf/util/parse-events.c:34:
+  { CSW(CPU_CLOCK),^I^I"cpu-clock",^I^I""^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2851: FILE: tools/perf/util/parse-events.c:35:
+  { CSW(TASK_CLOCK),^I^I"task-clock",^I^I""^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2852: FILE: tools/perf/util/parse-events.c:36:
+  { CSW(PAGE_FAULTS),^I^I"page-faults",^I^I"faults"^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2853: FILE: tools/perf/util/parse-events.c:37:
+  { CSW(PAGE_FAULTS_MIN),^I"minor-faults",^I^I""^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2854: FILE: tools/perf/util/parse-events.c:38:
+  { CSW(PAGE_FAULTS_MAJ),^I"major-faults",^I^I""^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2855: FILE: tools/perf/util/parse-events.c:39:
+  { CSW(CONTEXT_SWITCHES),^I"context-switches",^I"cs"^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2856: FILE: tools/perf/util/parse-events.c:40:
+  { CSW(CPU_MIGRATIONS),^I"cpu-migrations",^I"migrations"^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2872: FILE: tools/perf/util/parse-events.c:74:
+ { "L1-d$",^I"l1-d",^I^I"l1d",^I^I"L1-data",^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2873: FILE: tools/perf/util/parse-events.c:75:
+ { "L1-i$",^I"l1-i",^I^I"l1i",^I^I"L1-instruction",^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2874: FILE: tools/perf/util/parse-events.c:76:
+ { "LLC",^I"L2"^I^I^I^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2875: FILE: tools/perf/util/parse-events.c:77:
+ { "dTLB",^I"d-tlb",^I"Data-TLB",^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2876: FILE: tools/perf/util/parse-events.c:78:
+ { "iTLB",^I"i-tlb",^I"Instruction-TLB",^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2877: FILE: tools/perf/util/parse-events.c:79:
+ { "branch",^I"branches",^I"bpu",^I^I"btb",^I^I"bpc",^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2885: FILE: tools/perf/util/parse-events.c:83:
+ { "load",^I"loads",^I"read",^I^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2886: FILE: tools/perf/util/parse-events.c:84:
+ { "store",^I"stores",^I"write",^I^I^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2887: FILE: tools/perf/util/parse-events.c:85:
+ { "prefetch",^I"prefetches",^I"speculative-read", "speculative-load",^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2894: FILE: tools/perf/util/parse-events.c:89:
+ { "refs",^I"Reference",^I"ops",^I^I"access",^I^I},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2895: FILE: tools/perf/util/parse-events.c:90:
+ { "misses",^I"miss",^I^I^I^I^I^I^I},$

CHECK:BIT_MACRO: Prefer using the BIT macro
#2899: FILE: tools/perf/util/parse-events.c:94:
+#define CACHE_READ	(1 << C(OP_READ))

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#2900: FILE: tools/perf/util/parse-events.c:95:
+#define CACHE_WRITE	(1 << C(OP_WRITE))

CHECK:BIT_MACRO: Prefer using the BIT macro
#2901: FILE: tools/perf/util/parse-events.c:96:
+#define CACHE_PREFETCH	(1 << C(OP_PREFETCH))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2902: FILE: tools/perf/util/parse-events.c:97:
+#define COP(x)		(1 << x)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2910: FILE: tools/perf/util/parse-events.c:105:
+ [C(L1D)]^I= (CACHE_READ | CACHE_WRITE | CACHE_PREFETCH),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2911: FILE: tools/perf/util/parse-events.c:106:
+ [C(L1I)]^I= (CACHE_READ | CACHE_PREFETCH),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2912: FILE: tools/perf/util/parse-events.c:107:
+ [C(LL)]^I= (CACHE_READ | CACHE_WRITE | CACHE_PREFETCH),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2913: FILE: tools/perf/util/parse-events.c:108:
+ [C(DTLB)]^I= (CACHE_READ | CACHE_WRITE | CACHE_PREFETCH),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2914: FILE: tools/perf/util/parse-events.c:109:
+ [C(ITLB)]^I= (CACHE_READ),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2915: FILE: tools/perf/util/parse-events.c:110:
+ [C(BPU)]^I= (CACHE_READ),$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3241: FILE: tools/perf/util/strlist.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#3257: FILE: tools/perf/util/strlist.c:17:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s"
#3260: FILE: tools/perf/util/strlist.c:20:
+			if (s == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#3286: FILE: tools/perf/util/strlist.c:46:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sn"
#3302: FILE: tools/perf/util/strlist.c:62:
+	if (sn == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fp"
#3317: FILE: tools/perf/util/strlist.c:77:
+	if (fp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fgets"
#3320: FILE: tools/perf/util/strlist.c:80:
+	while (fgets(entry, sizeof(entry), fp) != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#3349: FILE: tools/perf/util/strlist.c:109:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#3397: FILE: tools/perf/util/strlist.c:157:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#3412: FILE: tools/perf/util/strlist.c:172:
+	if (self != NULL) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3431: FILE: tools/perf/util/strlist.h:1:
+#ifndef STRLIST_H_

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rb_first"
#3458: FILE: tools/perf/util/strlist.h:28:
+	return rb_first(&self->entries) == NULL;

WARNING:LONG_LINE_STRING: line length of 103 exceeds 100 columns
#3485: FILE: tools/perf/util/symbol.c:542:
+				printf("adjusting symbol: st_value: %Lx sh_addr: %Lx sh_offset: %Lx\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#3485: FILE: tools/perf/util/symbol.c:542:
+				printf("adjusting symbol: st_value: %Lx sh_addr: %Lx sh_offset: %Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3486: FILE: tools/perf/util/symbol.c:543:
+				printf("adjusting symbol: st_value: %Lx sh_addr: %Lx sh_offset: %Lx\n",
+					(u64)sym.st_value, (u64)shdr.sh_addr, (u64)shdr.sh_offset);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000102356.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 63 warnings, 43 checks, 3114 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000102356.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
