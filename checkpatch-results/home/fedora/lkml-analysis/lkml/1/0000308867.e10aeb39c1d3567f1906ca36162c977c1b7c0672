CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#66: FILE: arch/powerpc/sysdev/fsl_rio.c:27:
+#define IRQ_RIO_BELL(m)		(((struct rio_priv *)(m->priv))->bellirq)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#67: FILE: arch/powerpc/sysdev/fsl_rio.c:28:
+#define IRQ_RIO_TX(m)		(((struct rio_priv *)(m->priv))->txirq)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#68: FILE: arch/powerpc/sysdev/fsl_rio.c:29:
+#define IRQ_RIO_RX(m)		(((struct rio_priv *)(m->priv))->rxirq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: arch/powerpc/sysdev/fsl_rio.c:173:
+static int fsl_rio_doorbell_send(struct rio_mport *mport,
+				int index, u16 destid, u16 data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: arch/powerpc/sysdev/fsl_rio.c:195:
+static int fsl_local_config_read(struct rio_mport *mport,
+				int index, u32 offset, int len, u32 *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: arch/powerpc/sysdev/fsl_rio.c:216:
+static int fsl_local_config_write(struct rio_mport *mport,
+				int index, u32 offset, int len, u32 data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: arch/powerpc/sysdev/fsl_rio.c:241:
+fsl_rio_config_read(struct rio_mport *mport, int index, u16 destid,
+			u8 hopcount, u32 offset, int len, u32 *val)

CHECK:SPACING: No space is necessary after a cast
#204: FILE: arch/powerpc/sysdev/fsl_rio.c:252:
+	data = (u8 *) priv->maint_win + offset;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: arch/powerpc/sysdev/fsl_rio.c:282:
+fsl_rio_config_write(struct rio_mport *mport, int index, u16 destid,
+			u8 hopcount, u32 offset, int len, u32 val)

CHECK:SPACING: No space is necessary after a cast
#227: FILE: arch/powerpc/sysdev/fsl_rio.c:292:
+	data = (u8 *) priv->maint_win + offset;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: arch/powerpc/sysdev/fsl_rio.c:340:
+	memcpy(priv->msg_tx_ring.virt_buffer[priv->msg_tx_ring.tx_slot], buffer,
+			len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: arch/powerpc/sysdev/fsl_rio.c:404:
+		int slot = (dqp - priv->msg_tx_ring.phys) >> 5;
+		port->outb_msg[0].mcback(port, priv->msg_tx_ring.dev_id, -1,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: arch/powerpc/sysdev/fsl_rio.c:444:
+			dma_alloc_coherent(NULL, RIO_MSG_BUFFER_SIZE,
+				&priv->msg_tx_ring.phys_buffer[i], GFP_KERNEL);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'priv->msg_tx_ring.virt_buffer[j]'
#362: FILE: arch/powerpc/sysdev/fsl_rio.c:452:
+							priv->msg_tx_ring.
+							virt_buffer[j],

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'priv->msg_tx_ring.phys_buffer[j]'
#364: FILE: arch/powerpc/sysdev/fsl_rio.c:454:
+							priv->msg_tx_ring.
+							phys_buffer[j]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: arch/powerpc/sysdev/fsl_rio.c:461:
+	priv->msg_tx_ring.virt = dma_alloc_coherent(NULL,
+				priv->msg_tx_ring.size * RIO_MSG_DESC_SIZE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: arch/powerpc/sysdev/fsl_rio.c:468:
+	memset(priv->msg_tx_ring.virt, 0,
+			priv->msg_tx_ring.size * RIO_MSG_DESC_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: arch/powerpc/sysdev/fsl_rio.c:614:
+	priv->msg_rx_ring.virt = dma_alloc_coherent(NULL,
+				priv->msg_rx_ring.size * RIO_MAX_MSG_SIZE,

CHECK:SPACING: No space is necessary after a cast
#540: FILE: arch/powerpc/sysdev/fsl_rio.c:622:
+	out_be32(&priv->msg_regs->ifqdpar, (u32) priv->msg_rx_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#541: FILE: arch/powerpc/sysdev/fsl_rio.c:623:
+	out_be32(&priv->msg_regs->ifqepar, (u32) priv->msg_rx_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#652: FILE: arch/powerpc/sysdev/fsl_rio.c:735:
+	virt_buf = (u32) priv->msg_rx_ring.virt + (phys_buf

CHECK:SPACING: No space is necessary after a cast
#702: FILE: arch/powerpc/sysdev/fsl_rio.c:793:
+		    (u32) priv->dbell_ring.virt +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: arch/powerpc/sysdev/fsl_rio.c:840:
+	priv->dbell_win = ioremap(mport->iores.start + RIO_MAINT_WIN_SIZE,
+			    RIO_DBELL_WIN_SIZE);

CHECK:SPACING: No space is necessary after a cast
#757: FILE: arch/powerpc/sysdev/fsl_rio.c:859:
+	out_be32(&priv->msg_regs->dqdpar, (u32) priv->dbell_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#758: FILE: arch/powerpc/sysdev/fsl_rio.c:860:
+	out_be32(&priv->msg_regs->dqepar, (u32) priv->dbell_ring.phys);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*port)...) over kzalloc(sizeof(struct rio_mport)...)
#801: FILE: arch/powerpc/sysdev/fsl_rio.c:929:
+	port = kzalloc(sizeof(struct rio_mport), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*priv)...) over kzalloc(sizeof(struct rio_priv)...)
#805: FILE: arch/powerpc/sysdev/fsl_rio.c:933:
+	priv = kzalloc(sizeof(struct rio_priv), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#807: FILE: arch/powerpc/sysdev/fsl_rio.c:935:
+		printk(KERN_ERR "Can't alloc memory for 'priv'\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#807: FILE: arch/powerpc/sysdev/fsl_rio.c:935:
+	if (!priv) {
+		printk(KERN_ERR "Can't alloc memory for 'priv'\n");

WARNING:SPACING: Unnecessary space before function pointer arguments
#938: FILE: include/linux/rio.h:234:
+	int (*lcread) (struct rio_mport *mport, int index, u32 offset, int len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: include/linux/rio.h:235:
+	int (*lcread) (struct rio_mport *mport, int index, u32 offset, int len,
+			u32 *data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#940: FILE: include/linux/rio.h:236:
+	int (*lcwrite) (struct rio_mport *mport, int index, u32 offset, int len,

WARNING:SPACING: Unnecessary space before function pointer arguments
#942: FILE: include/linux/rio.h:238:
+	int (*cread) (struct rio_mport *mport, int index, u16 destid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: include/linux/rio.h:239:
+	int (*cread) (struct rio_mport *mport, int index, u16 destid,
+			u8 hopcount, u32 offset, int len, u32 *data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#944: FILE: include/linux/rio.h:240:
+	int (*cwrite) (struct rio_mport *mport, int index, u16 destid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#945: FILE: include/linux/rio.h:241:
+	int (*cwrite) (struct rio_mport *mport, int index, u16 destid,
+			u8 hopcount, u32 offset, int len, u32 data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#946: FILE: include/linux/rio.h:242:
+	int (*dsend) (struct rio_mport *mport, int index, u16 destid, u16 data);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308867.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 27 checks, 850 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308867.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
