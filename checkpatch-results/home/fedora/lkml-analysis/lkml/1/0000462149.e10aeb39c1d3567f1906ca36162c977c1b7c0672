WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
A  file_operations structure variable called loop_fops is initialised with the default block device file operations (def_blk_fops).

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#25: 
The mmap operation is overriden with a new function called loop_file_mmap. 
                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'retreive' may be misspelled - perhaps 'retrieve'?
#47: 
Changes made to area1 can be periodically copied to area2 using the ioctl cmds (retreive dirty page offsets and copy the dirty pages from area1 to area2). This facility would provide a quick way of updating the read only version.
                                                                                ^^^^^^^^

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Kandan Venkataraman kandan.venkataraman@omxgroup.com'
#53: 
Signed-off-by: Kandan Venkataraman kandan.venkataraman@omxgroup.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:POINTER_LOCATION: "foo*  bar" should be "foo *bar"
#71: FILE: drivers/block/loop.c:85:
+static char*  cache_name = "loop_pgoff_elem_cache";

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#72: FILE: drivers/block/loop.c:86:
+static struct file_operations loop_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rb_node"
#84: FILE: drivers/block/loop.c:657:
+	while (rb_node != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#85: FILE: drivers/block/loop.c:658:
+	while (rb_node != NULL) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: drivers/block/loop.c:659:
+^I^Irb_erase(rb_node, rb_root); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: drivers/block/loop.c:664:
+  *rb_root = RB_ROOT;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#94: FILE: drivers/block/loop.c:667:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#97: FILE: drivers/block/loop.c:670:
+	struct file *filp = lo->lo_backing_file;
 	             ^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Lo_bound>
#99: FILE: drivers/block/loop.c:672:
+	if (lo->lo_state != Lo_bound)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#102: FILE: drivers/block/loop.c:675:
+	if (filp == NULL)
 	    ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!filp"
#102: FILE: drivers/block/loop.c:675:
+	if (filp == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#105: FILE: drivers/block/loop.c:678:
+	if (!lo->lo_track_pgwrite)
+	  return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#106: FILE: drivers/block/loop.c:679:
+	  return 0;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#115: FILE: drivers/block/loop.c:688:
+	struct file *filp = lo->lo_backing_file;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#123: FILE: drivers/block/loop.c:696:
+	if (filp == NULL)
 	    ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!filp"
#123: FILE: drivers/block/loop.c:696:
+	if (filp == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#126: FILE: drivers/block/loop.c:699:
+	if (!lo->lo_track_pgwrite)
+	  return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#127: FILE: drivers/block/loop.c:700:
+	  return 0;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: drivers/block/loop.c:702:
+	if (copy_from_user(&array, arg, sizeof (struct loop_pgoff_array)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#132: FILE: drivers/block/loop.c:705:
+	while (i < array.max && rb_node != NULL) {
[...]
+	  if (put_user(rb_entry(rb_node, struct pgoff_elem, node)->offset, array.pgoff + i))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rb_node"
#132: FILE: drivers/block/loop.c:705:
+	while (i < array.max && rb_node != NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#133: FILE: drivers/block/loop.c:706:
+	while (i < array.max && rb_node != NULL) {
+

WARNING:TABSTOP: Statements should start on a tabstop
#134: FILE: drivers/block/loop.c:707:
+	  if (put_user(rb_entry(rb_node, struct pgoff_elem, node)->offset, array.pgoff + i))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 17)
#134: FILE: drivers/block/loop.c:707:
+	  if (put_user(rb_entry(rb_node, struct pgoff_elem, node)->offset, array.pgoff + i))
+		 return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#135: FILE: drivers/block/loop.c:708:
+		 return -EFAULT;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#142: FILE: drivers/block/loop.c:715:
+	if (copy_to_user(arg, &array, sizeof(array)))
+	  return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#143: FILE: drivers/block/loop.c:716:
+	  return -EFAULT;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#181: FILE: drivers/block/loop.c:1049:
+	if (info->lo_track_pgwrite)
+	  lo->lo_track_pgwrite = 1;

CHECK:BRACES: braces {} should be used on all arms of this statement
#181: FILE: drivers/block/loop.c:1049:
+	if (info->lo_track_pgwrite)
[...]
+	else {
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#183: FILE: drivers/block/loop.c:1051:
+	else {
+	  if (lo->lo_track_pgwrite)

CHECK:BRACES: Unbalanced braces around else statement
#183: FILE: drivers/block/loop.c:1051:
+	else {

WARNING:TABSTOP: Statements should start on a tabstop
#184: FILE: drivers/block/loop.c:1052:
+	  if (lo->lo_track_pgwrite)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 17)
#184: FILE: drivers/block/loop.c:1052:
+	  if (lo->lo_track_pgwrite)
+		 pgoff_tree_clear(&lo->pgoff_tree);

CHECK:SPACING: No space is necessary after a cast
#213: FILE: drivers/block/loop.c:1250:
+		err = loop_get_pgwrites(lo, (struct loop_pgoff_array __user *) arg);

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#235: FILE: drivers/block/loop.c:1421:
+	struct rb_node ** p = &rb_root->rb_node;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#236: FILE: drivers/block/loop.c:1422:
+	struct rb_node * parent = NULL;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#239: FILE: drivers/block/loop.c:1425:
+	while (*p)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#253: FILE: drivers/block/loop.c:1439:
+	if (!pgoff_elem)
+	  return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#254: FILE: drivers/block/loop.c:1440:
+	  return -ENOMEM;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#272: FILE: drivers/block/loop.c:1458:
+struct vm_operations_struct loop_file_vm_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: drivers/block/loop.c:1464:
+static int loop_file_mmap(struct file * file, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: drivers/block/loop.c:1464:
+static int loop_file_mmap(struct file * file, struct vm_area_struct * vma)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: drivers/block/loop.c:1467:
+  int err = generic_file_mmap(file, vma);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: drivers/block/loop.c:1469:
+  if (err)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 9)
#283: FILE: drivers/block/loop.c:1469:
+  if (err)
+	 return err;

WARNING:TABSTOP: Statements should start on a tabstop
#284: FILE: drivers/block/loop.c:1470:
+	 return err;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode.i_fop
#306: FILE: drivers/block/loop.c:1560:
+	loop_fops = *(inode.i_fop);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#315: FILE: drivers/block/loop.c:1572:
+	pgoff_elem_cache = kmem_cache_create(cache_name, sizeof(struct pgoff_elem), 0, SLAB_HWCACHE_ALIGN, NULL, NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#316: FILE: drivers/block/loop.c:1573:
+	if (!pgoff_elem_cache)
+	  goto out_mem0;

WARNING:TABSTOP: Statements should start on a tabstop
#317: FILE: drivers/block/loop.c:1574:
+	  goto out_mem0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: include/linux/loop.h:38:
+^Iint^I^Ilo_track_pgwrite;^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#364: FILE: include/linux/loop.h:73:
+struct pgoff_elem {
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: include/linux/loop.h:74:
+  struct rb_node^Inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: include/linux/loop.h:75:
+  unsigned long offset;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: include/linux/loop.h:117:
+^I__u32^I^I^Ilo_track_pgwrite; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: include/linux/loop.h:125:
+  __u64 max; /* size of array passed by user */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: include/linux/loop.h:126:
+  __u64 num; /* number of entries filled in by driver */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: include/linux/loop.h:127:
+  __u64 *pgoff; /* array of page offsets of pages written to by mmap */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#389: FILE: include/linux/loop.h:130:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000462149.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 39 warnings, 14 checks, 319 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000462149.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
