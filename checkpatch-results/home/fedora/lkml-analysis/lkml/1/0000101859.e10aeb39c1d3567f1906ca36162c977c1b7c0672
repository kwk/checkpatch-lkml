WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
Gitweb:     http://git.kernel.org/tip/f37a291c527c954df4da568de718ebb36b8261c0

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#52: 
Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: tools/perf/builtin-report.c:942:
+resolve_callchain(struct thread *thread, struct map *map __used,
 		    struct ip_callchain *chain, struct hist_entry *entry)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#331: FILE: tools/perf/builtin-stat.c:67:
+static unsigned int		nr_cpus				=  0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#418: FILE: tools/perf/builtin-top.c:290:
+static const char *skip_symbols[] = {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#471: FILE: tools/perf/perf.h:55:
+#define __used		__attribute__((__unused__))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#660: FILE: tools/perf/util/config.c:476:
+static int store_aux(const char* key, const char* value, void *cb __used)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#660: FILE: tools/perf/util/config.c:476:
+static int store_aux(const char* key, const char* value, void *cb __used)

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#889: FILE: tools/perf/util/parse-options.h:96:
+#define OPT_BIT(s, l, v, h, b)      { .type = OPTION_BIT, .short_name = (s), .long_name = (l), .value = (v), .help = (h), .defval = (b) }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#890: FILE: tools/perf/util/parse-options.h:97:
+#define OPT_BOOLEAN(s, l, v, h)     { .type = OPTION_BOOLEAN, .short_name = (s), .long_name = (l), .value = (v), .help = (h) }

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#891: FILE: tools/perf/util/parse-options.h:98:
+#define OPT_SET_INT(s, l, v, h, i)  { .type = OPTION_SET_INT, .short_name = (s), .long_name = (l), .value = (v), .help = (h), .defval = (i) }

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#892: FILE: tools/perf/util/parse-options.h:99:
+#define OPT_SET_PTR(s, l, v, h, p)  { .type = OPTION_SET_PTR, .short_name = (s), .long_name = (l), .value = (v), .help = (h), .defval = (p) }

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#893: FILE: tools/perf/util/parse-options.h:100:
+#define OPT_INTEGER(s, l, v, h)     { .type = OPTION_INTEGER, .short_name = (s), .long_name = (l), .value = (v), .help = (h) }

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#894: FILE: tools/perf/util/parse-options.h:101:
+#define OPT_LONG(s, l, v, h)        { .type = OPTION_LONG, .short_name = (s), .long_name = (l), .value = (v), .help = (h) }

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#895: FILE: tools/perf/util/parse-options.h:102:
+#define OPT_STRING(s, l, v, a, h)   { .type = OPTION_STRING,  .short_name = (s), .long_name = (l), .value = (v), (a), .help = (h) }

WARNING:LONG_LINE: line length of 153 exceeds 100 columns
#899: FILE: tools/perf/util/parse-options.h:104:
+	{ .type = OPTION_CALLBACK, .short_name = (s), .long_name = (l), .value = (v), .argh = "time", .help = (h), .callback = parse_opt_approxidate_cb }

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#902: FILE: tools/perf/util/parse-options.h:106:
+	{ .type = OPTION_CALLBACK, .short_name = (s), .long_name = (l), .value = (v), (a), .help = (h), .callback = (f) }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#942: FILE: tools/perf/util/quote.c:199:
+#define EMIT(c)							\
+	do {							\
+		if (sb) strbuf_addch(sb, (c));			\
+		if (fp) fputc((c), fp);				\
+		count++;					\
 	} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#944: FILE: tools/perf/util/quote.c:201:
+		if (sb) strbuf_addch(sb, (c));			\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#945: FILE: tools/perf/util/quote.c:202:
+		if (fp) fputc((c), fp);				\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#955: FILE: tools/perf/util/quote.c:206:
+#define EMITBUF(s, l)						\
+	do {							\
+		int __ret;					\
+		if (sb) strbuf_add(sb, (s), (l));		\
+		if (fp) __ret = fwrite((s), (l), 1, fp);	\
+		count += (l);					\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#955: FILE: tools/perf/util/quote.c:206:
+#define EMITBUF(s, l)						\
+	do {							\
+		int __ret;					\
+		if (sb) strbuf_add(sb, (s), (l));		\
+		if (fp) __ret = fwrite((s), (l), 1, fp);	\
+		count += (l);					\
 	} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#958: FILE: tools/perf/util/quote.c:209:
+		if (sb) strbuf_add(sb, (s), (l));		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#959: FILE: tools/perf/util/quote.c:210:
+		if (fp) __ret = fwrite((s), (l), 1, fp);	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#997: FILE: tools/perf/util/quote.h:56:
+extern void write_name_quotedpfx(const char *pfx, ssize_t pfxlen,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'FILE *' should also have an identifier name
#997: FILE: tools/perf/util/quote.h:56:
+extern void write_name_quotedpfx(const char *pfx, ssize_t pfxlen,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1069: FILE: tools/perf/util/strbuf.h:53:
+extern void strbuf_init(struct strbuf *buf, ssize_t hint);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1078: FILE: tools/perf/util/strbuf.h:64:
+static inline ssize_t strbuf_avail(const struct strbuf *sb) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1089: FILE: tools/perf/util/strbuf.h:125:
+extern ssize_t strbuf_read(struct strbuf *, int fd, ssize_t hint);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct strbuf *' should also have an identifier name
#1089: FILE: tools/perf/util/strbuf.h:125:
+extern ssize_t strbuf_read(struct strbuf *, int fd, ssize_t hint);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1090: FILE: tools/perf/util/strbuf.h:126:
+extern int strbuf_read_file(struct strbuf *sb, const char *path, ssize_t hint);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1091: FILE: tools/perf/util/strbuf.h:127:
+extern int strbuf_readlink(struct strbuf *sb, const char *path, ssize_t hint);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101859.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 15 warnings, 9 checks, 833 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101859.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
