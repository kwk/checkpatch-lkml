WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perf-fixes-for-linus

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#119: FILE: include/linux/hw_breakpoint.h:96:
+			  struct perf_event_attr *attr)	{ return -ENOSYS; }

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: No space is necessary after a cast
#309: FILE: tools/perf/bench/sched-messaging.c:324:
+		       (unsigned long) (diff.tv_usec/1000));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#309: FILE: tools/perf/bench/sched-messaging.c:324:
+		       (unsigned long) (diff.tv_usec/1000));
 		                                    ^

CHECK:SPACING: No space is necessary after a cast
#314: FILE: tools/perf/bench/sched-messaging.c:328:
+		       (unsigned long) (diff.tv_usec/1000));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#314: FILE: tools/perf/bench/sched-messaging.c:328:
+		       (unsigned long) (diff.tv_usec/1000));
 		                                    ^

CHECK:SPACING: No space is necessary after a cast
#346: FILE: tools/perf/bench/sched-pipe.c:104:
+		       (unsigned long) (diff.tv_usec/1000));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#346: FILE: tools/perf/bench/sched-pipe.c:104:
+		       (unsigned long) (diff.tv_usec/1000));
 		                                    ^

CHECK:SPACING: No space is necessary after a cast
#356: FILE: tools/perf/bench/sched-pipe.c:116:
+		       (unsigned long) (diff.tv_usec / 1000));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session"
#381: FILE: tools/perf/builtin-annotate.c:470:
+	if (session == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#418: FILE: tools/perf/builtin-bench.c:34:
 };
+						\

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#418: FILE: tools/perf/builtin-bench.c:34:
+						\

WARNING:LINE_SPACING: Missing a blank line after declarations
#508: FILE: tools/perf/builtin-bench.c:169:
+	int i;
+	for (i = 0; subsystems[i].suites; i++)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session"
#597: FILE: tools/perf/builtin-buildid-list.c:60:
+	if (session == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: tools/perf/builtin-buildid-list.c:64:
+	err = perf_header__process_sections(&session->header, session->fd,
 				         perf_file_section__process_buildids);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session"
#644: FILE: tools/perf/builtin-kmem.c:373:
+	if (session == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session"
#723: FILE: tools/perf/builtin-record.c:445:
+	if (session == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session"
#790: FILE: tools/perf/builtin-report.c:771:
+	if (session == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session"
#852: FILE: tools/perf/builtin-sched.c:1669:
+	if (session == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session"
#878: FILE: tools/perf/builtin-timechart.c:1065:
+	if (session == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#921: FILE: tools/perf/builtin-trace.c:65:
+static struct perf_session ^I*session;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session"
#932: FILE: tools/perf/builtin-trace.c:133:
+	if (session == NULL)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#973: FILE: tools/perf/perf.h:68:
+#define rmb()		asm volatile("mov r0, #0xffff0fff; mov lr, pc;" \
+				     "sub pc, r0, #95" ::: "r0", "lr", "cc", \
+				     "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#976: FILE: tools/perf/perf.h:71:
+#define cpu_relax()	asm volatile("":::"memory")

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self->attr"
#1234: FILE: tools/perf/util/header.c:65:
+	return self->attr == NULL ? -ENOMEM : 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1245: FILE: tools/perf/util/header.c:72:
+                perf_header_attr__delete(self->attr[i]);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1245: FILE: tools/perf/util/header.c:72:
+                perf_header_attr__delete(self->attr[i]);$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1312: FILE: tools/perf/util/map.c:113:
+		if (self->dso->has_build_id) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1320: FILE: tools/perf/util/map.c:121:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#1332: FILE: tools/perf/util/map.c:133:
+			pr_warning("%.*s was updated, restart the long "
+				   "running apps that use it!\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1336: FILE: tools/perf/util/map.c:137:
+			pr_warning("no symbols found in %s, maybe install "
+				   "a debug package?\n", name);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1369: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1374: FILE: tools/perf/util/session.c:1:
+#include <linux/kernel.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'input_stat.st_uid != geteuid()'
#1398: FILE: tools/perf/util/session.c:25:
+	if (!force && input_stat.st_uid && (input_stat.st_uid != geteuid())) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#1429: FILE: tools/perf/util/session.c:56:
+	if (self == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1460: FILE: tools/perf/util/session.h:1:
+#ifndef __PERF_SESSION_H

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1566: FILE: tools/perf/util/symbol.c:187:
+			self->symbols[i] = self->symbol_names[i] = RB_ROOT;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#1590: FILE: tools/perf/util/symbol.c:280:
+	while (*p != NULL) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1604: FILE: tools/perf/util/symbol.c:294:
+	struct rb_node *nd;
 	                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1606: FILE: tools/perf/util/symbol.c:296:
+	for (nd = rb_first(source); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1606: FILE: tools/perf/util/symbol.c:296:
+	for (nd = rb_first(source); nd; nd = rb_next(nd)) {
 	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1606: FILE: tools/perf/util/symbol.c:296:
+	for (nd = rb_first(source); nd; nd = rb_next(nd)) {
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1606: FILE: tools/perf/util/symbol.c:296:
+	for (nd = rb_first(source); nd; nd = rb_next(nd)) {
 	                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1607: FILE: tools/perf/util/symbol.c:297:
+		struct symbol *pos = rb_entry(nd, struct symbol, rb_node);
 		                              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1608: FILE: tools/perf/util/symbol.c:298:
+		struct symbol *pos = rb_entry(nd, struct symbol, rb_node);
+		symbols__insert_by_name(self, pos);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#1616: FILE: tools/perf/util/symbol.c:306:
+	if (self == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Sym>
#1738: FILE: tools/perf/util/symbol.c:638:
+static inline bool elf_sym__is_object(const GElf_Sym *sym)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Shdr>
#1752: FILE: tools/perf/util/symbol.c:665:
+static inline bool elf_sec__is_data(const GElf_Shdr *shdr,

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Data>
#1753: FILE: tools/perf/util/symbol.c:666:
+				    const Elf_Data *secstrs)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strstr"
#1755: FILE: tools/perf/util/symbol.c:668:
+	return strstr(elf_sec__name(shdr, secstrs), "data") != NULL;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1851: FILE: tools/perf/util/symbol.c:1316:
+	for (nd = rb_first(&self->maps[type]); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1851: FILE: tools/perf/util/symbol.c:1316:
+	for (nd = rb_first(&self->maps[type]); nd; nd = rb_next(nd)) {
 	                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1851: FILE: tools/perf/util/symbol.c:1316:
+	for (nd = rb_first(&self->maps[type]); nd; nd = rb_next(nd)) {
 	                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1851: FILE: tools/perf/util/symbol.c:1316:
+	for (nd = rb_first(&self->maps[type]); nd; nd = rb_next(nd)) {
 	                                                        ^^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1938: FILE: tools/perf/util/symbol.c:1641:
+static struct dso *dsos__create_kernel( const char *vmlinux)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kernel"
#1985: FILE: tools/perf/util/symbol.c:1675:
+	if (kernel == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!functions"
#1989: FILE: tools/perf/util/symbol.c:1679:
+	if (functions == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!variables"
#1993: FILE: tools/perf/util/symbol.c:1683:
+	if (variables == NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1998: FILE: tools/perf/util/symbol.c:1688:
+	functions->map_ip = functions->unmap_ip =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1999: FILE: tools/perf/util/symbol.c:1689:
+		variables->map_ip = variables->unmap_ip = identity__map_ip;

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#2217: FILE: tools/perf/util/thread.c:252:
+ * XXX This should not really _copy_ te maps, but refcount them.
                                      ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034811.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 23 warnings, 34 checks, 1982 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034811.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
