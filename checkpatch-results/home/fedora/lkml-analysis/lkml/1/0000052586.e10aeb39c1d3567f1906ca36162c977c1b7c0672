WARNING:TYPO_SPELLING: 'controling' may be misspelled - perhaps 'controlling'?
#27: 
AppArmor routines for controling domain transitions, which can occur at
                      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'immeditately' may be misspelled - perhaps 'immediately'?
#39: 
be applied, either immeditately or at exec time depending on the request.
                   ^^^^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#53: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: security/apparmor/domain.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#152: FILE: security/apparmor/domain.c:95:
+		perms.xindex = perms.dindex = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#153: FILE: security/apparmor/domain.c:96:
+		perms.audit = perms.quiet = perms.kill = 0;

WARNING:UNNECESSARY_PARENTHESES: Unnecessary parentheses - maybe == should be = ?
#159: FILE: security/apparmor/domain.c:102:
+	} else if ((ns == profile->ns)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'prefered' may be misspelled - perhaps 'preferred'?
#183: FILE: security/apparmor/domain.c:126:
+ * preference where an exact match is prefered over a name which uses
                                       ^^^^^^^^

WARNING:TYPO_SPELLING: 'prefered' may be misspelled - perhaps 'preferred'?
#185: FILE: security/apparmor/domain.c:128:
+ * xmatch_len are prefered.
                   ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#277: FILE: security/apparmor/domain.c:220:
+			const char *ns_name = name + 1;
+			name = xname = ns_name + strlen(ns_name) + 1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#277: FILE: security/apparmor/domain.c:220:
+			name = xname = ns_name + strlen(ns_name) + 1;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#333: FILE: security/apparmor/domain.c:276:
+	BUG_ON(!cxt);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'unconfiged' may be misspelled - perhaps 'unconfigured'?
#479: FILE: security/apparmor/domain.c:422:
+	/* bail out if unconfiged or not changing profile */
 	               ^^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_cxt->sys.profile == profile'
#480: FILE: security/apparmor/domain.c:423:
+	if ((new_cxt->sys.profile == profile) ||
+	    (new_cxt->sys.profile->flags & PFLAG_UNCONFINED)) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#497: FILE: security/apparmor/domain.c:440:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#506: FILE: security/apparmor/domain.c:449:
+	char *name = kmalloc(strlen(n1) + strlen(n2) + 3, GFP_KERNEL);
+	if (name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#547: FILE: security/apparmor/domain.c:490:
+		struct aa_profile *root;
+		root = PROFILE_IS_HAT(profile) ? profile->parent : profile;

CHECK:BRACES: Unbalanced braces around else statement
#597: FILE: security/apparmor/domain.c:540:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#716: FILE: security/apparmor/include/domain.h:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052586.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 5 checks, 688 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052586.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
