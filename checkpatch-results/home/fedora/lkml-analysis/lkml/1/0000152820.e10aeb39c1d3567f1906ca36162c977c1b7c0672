WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#58: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#63: FILE: arch/microblaze/include/asm/uaccess.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#84: FILE: arch/microblaze/include/asm/uaccess.h:22:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: arch/microblaze/include/asm/uaccess.h:29:
+extern int ___range_ok(unsigned long addr, unsigned long size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#103: FILE: arch/microblaze/include/asm/uaccess.h:41:
+}
+/* FIXME this is function for optimalization -> memcpy */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#104: FILE: arch/microblaze/include/asm/uaccess.h:42:
+#define __get_user(var, ptr)					\
+	({							\
+		int __gu_err = 0;				\
+		switch (sizeof(*(ptr))) {			\
+		case 1:						\
+		case 2:						\
+		case 4:						\
+			(var) = *(ptr);				\
+			break;					\
+		case 8:						\
+			memcpy((void *) &(var), (ptr), 8);	\
+			break;					\
+		default:					\
+			(var) = 0;				\
+			__gu_err = __get_user_bad();		\
+			break;					\
+		}						\
+		__gu_err;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#104: FILE: arch/microblaze/include/asm/uaccess.h:42:
+#define __get_user(var, ptr)					\
+	({							\
+		int __gu_err = 0;				\
+		switch (sizeof(*(ptr))) {			\
+		case 1:						\
+		case 2:						\
+		case 4:						\
+			(var) = *(ptr);				\
+			break;					\
+		case 8:						\
+			memcpy((void *) &(var), (ptr), 8);	\
+			break;					\
+		default:					\
+			(var) = 0;				\
+			__gu_err = __get_user_bad();		\
+			break;					\
+		}						\
+		__gu_err;					\
+	})

CHECK:SPACING: No space is necessary after a cast
#114: FILE: arch/microblaze/include/asm/uaccess.h:52:
+			memcpy((void *) &(var), (ptr), 8);	\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#126: FILE: arch/microblaze/include/asm/uaccess.h:64:
+#define __put_user(var, ptr)					\
+	({							\
+		int __pu_err = 0;				\
+		switch (sizeof(*(ptr))) {			\
+		case 1:						\
+		case 2:						\
+		case 4:						\
+			*(ptr) = (var);				\
+			break;					\
+		case 8: {					\
+			typeof(*(ptr)) __pu_val = var;		\
+			memcpy(ptr, &__pu_val, sizeof(__pu_val));\
+			}					\
+			break;					\
+		default:					\
+			__pu_err = __put_user_bad();		\
+			break;					\
+		}							\
+		__pu_err;						\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#126: FILE: arch/microblaze/include/asm/uaccess.h:64:
+#define __put_user(var, ptr)					\
+	({							\
+		int __pu_err = 0;				\
+		switch (sizeof(*(ptr))) {			\
+		case 1:						\
+		case 2:						\
+		case 4:						\
+			*(ptr) = (var);				\
+			break;					\
+		case 8: {					\
+			typeof(*(ptr)) __pu_val = var;		\
+			memcpy(ptr, &__pu_val, sizeof(__pu_val));\
+			}					\
+			break;					\
+		default:					\
+			__pu_err = __put_user_bad();		\
+			break;					\
+		}							\
+		__pu_err;						\
+	})

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: arch/microblaze/include/asm/uaccess.h:108:
+extern unsigned long search_exception_table(unsigned long);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#172: FILE: arch/microblaze/include/asm/uaccess.h:110:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: arch/microblaze/include/asm/uaccess.h:111:
+extern long strncpy_from_user(char *dst, const char __user *src, long count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#174: FILE: arch/microblaze/include/asm/uaccess.h:112:
+extern long strnlen_user(const char __user *src, long count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: arch/microblaze/include/asm/uaccess.h:113:
+extern long __strncpy_from_user(char *dst, const char __user *src, long count);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#203: FILE: arch/microblaze/lib/uaccess.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#212: FILE: arch/microblaze/lib/uaccess.c:10:
+#include <asm/uaccess.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bug.h> instead of <asm/bug.h>
#214: FILE: arch/microblaze/lib/uaccess.c:12:
+#include <asm/bug.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dst' - possible side-effects?
#221: FILE: arch/microblaze/lib/uaccess.c:19:
+#define __do_strncpy_from_user(dst, src, count, res)			\
+	do {								\
+		char *tmp;						\
+		strncpy(dst, src, count);				\
+		for (tmp = dst; *tmp && count > 0; tmp++, count--)	\
+			;						\
+		res = (tmp - dst);					\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'count' - possible side-effects?
#221: FILE: arch/microblaze/lib/uaccess.c:19:
+#define __do_strncpy_from_user(dst, src, count, res)			\
+	do {								\
+		char *tmp;						\
+		strncpy(dst, src, count);				\
+		for (tmp = dst; *tmp && count > 0; tmp++, count--)	\
+			;						\
+		res = (tmp - dst);					\
+	} while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#233: FILE: arch/microblaze/lib/uaccess.c:31:
+	long res;
+	__do_strncpy_from_user(dst, src, count, res);

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: arch/microblaze/lib/uaccess.c:38:
+	long res = -EFAULT;
+	if (access_ok(VERIFY_READ, src, 1))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152820.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 17 checks, 175 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152820.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
