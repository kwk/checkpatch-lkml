WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
o This is core of the io scheduler implemented at elevator layer. This is a mix

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#70: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#75: FILE: block/elevator-fq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#85: FILE: block/elevator-fq.c:11:
+ * ^I              Nauman Rafique <nauman@google.com>$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entity->my_sd"
#100: FILE: block/elevator-fq.c:26:
+	if (entity->my_sd == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: block/elevator-fq.c:84:
+	s64 delta = (s64)(vdisktime - min_vdisktime);
+	if (delta > 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: block/elevator-fq.c:93:
+	s64 delta = (s64)(vdisktime - min_vdisktime);
+	if (delta < 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#224: FILE: block/elevator-fq.c:150:
+	BUG_ON(idx >= IO_IOPRIO_CLASSES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: block/elevator-fq.c:157:
+entity_served(struct io_entity *entity, unsigned long served,
+				unsigned long nr_sectors)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: block/elevator-fq.c:164:
+static void place_entity(struct io_service_tree *st, struct io_entity *entity,
+				int add_front)

CHECK:BRACES: braces {} should be used on all arms of this statement
#249: FILE: block/elevator-fq.c:175:
+	if (io_entity_class_idle(entity)) {
[...]
+	} else if (!add_front && nr_active) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#262: FILE: block/elevator-fq.c:188:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#323: FILE: block/elevator-fq.c:249:
+	while (*node != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#376: FILE: block/elevator-fq.c:302:
+	BUG_ON(sd->active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->active_entity"
#376: FILE: block/elevator-fq.c:302:
+	BUG_ON(sd->active_entity != NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#433: FILE: block/elevator-fq.c:359:
+	if (unlikely(entity->ioprio_changed)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#436: FILE: block/elevator-fq.c:362:
+	} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#455: FILE: block/elevator-fq.c:381:
+	return;
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#475: FILE: block/elevator-fq.c:401:
+	BUG_ON(atomic_read(&ioq->ref) <= 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#485: FILE: block/elevator-fq.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#495: FILE: block/elevator-fq.h:11:
+ * ^I              Nauman Rafique <nauman@google.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#577: FILE: block/elevator-fq.h:93:
+static inline int elv_ioq_##name(struct io_queue *ioq)         ^I^I\$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#593: FILE: block/elevator-fq.h:109:
+	return IO_WEIGHT_DEFAULT + (IO_WEIGHT_DEFAULT/5 * (4 - ioprio));
 	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: block/elevator-fq.h:120:
+static inline void elv_ioq_set_ioprio_class(struct io_queue *ioq,
+						int ioprio_class)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#630: FILE: block/elevator-fq.h:146:
+extern void elv_put_ioq(struct io_queue *ioq);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078475.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 12 checks, 560 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078475.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
