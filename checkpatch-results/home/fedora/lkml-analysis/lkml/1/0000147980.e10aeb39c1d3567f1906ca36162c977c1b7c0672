WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git iommu-for-linus

WARNING:REPEATED_WORD: Possible repeated word: 'add'
#127: 
      dma-debug: add add checking for map/unmap_sg

WARNING:TYPO_SPELLING: 'carefull' may be misspelled - perhaps 'careful'?
#268: FILE: Documentation/DMA-API.txt:679:
+				into the kernel log. Be carefull with this
 				                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#354: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#431: FILE: arch/ia64/hp/common/hwsw_iommu.c:20:
+extern struct dma_map_ops sba_dma_ops, swiotlb_dma_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#475: FILE: arch/ia64/hp/common/hwsw_iommu.c:36:
+struct dma_map_ops *hwsw_dma_get_ops(struct device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#696: FILE: arch/ia64/hp/common/sba_iommu.c:1185:
+static void sba_free_coherent (struct device *dev, size_t size, void *vaddr,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#745: FILE: arch/ia64/hp/common/sba_iommu.c:2083:
+extern struct dma_map_ops swiotlb_dma_ops;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#745: FILE: arch/ia64/hp/common/sba_iommu.c:2083:
+extern struct dma_map_ops swiotlb_dma_ops;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#772: FILE: arch/ia64/hp/common/sba_iommu.c:2161:
+static int sba_dma_supported (struct device *dev, u64 mask)

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#792: FILE: arch/ia64/hp/common/sba_iommu.c:2197:
+struct dma_map_ops sba_dma_ops = {

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#858: FILE: arch/ia64/include/asm/dma-mapping.h:14:
+extern struct dma_map_ops *dma_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#864: FILE: arch/ia64/include/asm/dma-mapping.h:18:
+extern void machvec_dma_sync_single(struct device *, dma_addr_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#864: FILE: arch/ia64/include/asm/dma-mapping.h:18:
+extern void machvec_dma_sync_single(struct device *, dma_addr_t, size_t,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dma_addr_t' should also have an identifier name
#864: FILE: arch/ia64/include/asm/dma-mapping.h:18:
+extern void machvec_dma_sync_single(struct device *, dma_addr_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#864: FILE: arch/ia64/include/asm/dma-mapping.h:18:
+extern void machvec_dma_sync_single(struct device *, dma_addr_t, size_t,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#866: FILE: arch/ia64/include/asm/dma-mapping.h:20:
+extern void machvec_dma_sync_sg(struct device *, struct scatterlist *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#866: FILE: arch/ia64/include/asm/dma-mapping.h:20:
+extern void machvec_dma_sync_sg(struct device *, struct scatterlist *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scatterlist *' should also have an identifier name
#866: FILE: arch/ia64/include/asm/dma-mapping.h:20:
+extern void machvec_dma_sync_sg(struct device *, struct scatterlist *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#866: FILE: arch/ia64/include/asm/dma-mapping.h:20:
+extern void machvec_dma_sync_sg(struct device *, struct scatterlist *, int,

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#877: FILE: arch/ia64/include/asm/dma-mapping.h:26:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#878: FILE: arch/ia64/include/asm/dma-mapping.h:27:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	return ops->alloc_coherent(dev, size, daddr, gfp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#888: FILE: arch/ia64/include/asm/dma-mapping.h:33:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#889: FILE: arch/ia64/include/asm/dma-mapping.h:34:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	ops->free_coherent(dev, size, caddr, daddr);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#900: FILE: arch/ia64/include/asm/dma-mapping.h:45:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#901: FILE: arch/ia64/include/asm/dma-mapping.h:46:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	return ops->map_page(dev, virt_to_page(caddr),

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#911: FILE: arch/ia64/include/asm/dma-mapping.h:56:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#912: FILE: arch/ia64/include/asm/dma-mapping.h:57:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	ops->unmap_page(dev, daddr, size, dir, attrs);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#922: FILE: arch/ia64/include/asm/dma-mapping.h:67:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#923: FILE: arch/ia64/include/asm/dma-mapping.h:68:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	return ops->map_sg(dev, sgl, nents, dir, attrs);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#931: FILE: arch/ia64/include/asm/dma-mapping.h:76:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#932: FILE: arch/ia64/include/asm/dma-mapping.h:77:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	ops->unmap_sg(dev, sgl, nents, dir, attrs);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#943: FILE: arch/ia64/include/asm/dma-mapping.h:87:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#944: FILE: arch/ia64/include/asm/dma-mapping.h:88:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	ops->sync_single_for_cpu(dev, daddr, size, dir);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#955: FILE: arch/ia64/include/asm/dma-mapping.h:95:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#956: FILE: arch/ia64/include/asm/dma-mapping.h:96:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	ops->sync_sg_for_cpu(dev, sgl, nents, dir);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#968: FILE: arch/ia64/include/asm/dma-mapping.h:104:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#969: FILE: arch/ia64/include/asm/dma-mapping.h:105:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	ops->sync_single_for_device(dev, daddr, size, dir);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#981: FILE: arch/ia64/include/asm/dma-mapping.h:113:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#982: FILE: arch/ia64/include/asm/dma-mapping.h:114:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	ops->sync_sg_for_device(dev, sgl, nents, dir);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#990: FILE: arch/ia64/include/asm/dma-mapping.h:119:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#991: FILE: arch/ia64/include/asm/dma-mapping.h:120:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	return ops->mapping_error(dev, daddr);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#999: FILE: arch/ia64/include/asm/dma-mapping.h:127:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1000: FILE: arch/ia64/include/asm/dma-mapping.h:128:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	return ops->map_page(dev, page, offset, size, dir, NULL);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1027: FILE: arch/ia64/include/asm/dma-mapping.h:149:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1028: FILE: arch/ia64/include/asm/dma-mapping.h:150:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);
+	return ops->dma_supported(dev, mask);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1079: FILE: arch/ia64/include/asm/machvec.h:48:
+typedef struct dma_map_ops *ia64_mv_dma_get_ops(struct device *);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1079: FILE: arch/ia64/include/asm/machvec.h:48:
+typedef struct dma_map_ops *ia64_mv_dma_get_ops(struct device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1159: FILE: arch/ia64/include/asm/machvec.h:253:
+extern void swiotlb_dma_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1160: FILE: arch/ia64/include/asm/machvec.h:254:
+extern struct dma_map_ops *dma_get_ops(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1160: FILE: arch/ia64/include/asm/machvec.h:254:
+extern struct dma_map_ops *dma_get_ops(struct device *);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1160: FILE: arch/ia64/include/asm/machvec.h:254:
+extern struct dma_map_ops *dma_get_ops(struct device *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1411: FILE: arch/ia64/kernel/dma-mapping.c:1:
+#include <linux/dma-mapping.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1416: FILE: arch/ia64/kernel/dma-mapping.c:6:
+struct dma_map_ops *dma_ops;

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1419: FILE: arch/ia64/kernel/dma-mapping.c:9:
+struct dma_map_ops *dma_get_ops(struct device *dev)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1484: FILE: arch/ia64/kernel/pci-dma.c:44:
+extern struct dma_map_ops intel_dma_ops;

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1484: FILE: arch/ia64/kernel/pci-dma.c:44:
+extern struct dma_map_ops intel_dma_ops;

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1498: FILE: arch/ia64/kernel/pci-dma.c:70:
+	struct dma_map_ops *ops = platform_dma_get_ops(dev);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1552: FILE: arch/ia64/kernel/pci-swiotlb.c:24:
+struct dma_map_ops swiotlb_dma_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1620: FILE: arch/ia64/sn/pci/pci_dma.c:78:
+				   dma_addr_t * dma_handle, gfp_t flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1812: FILE: arch/ia64/sn/pci/pci_dma.c:466:
+static struct dma_map_ops sn_dma_ops = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1819: FILE: arch/ia64/sn/pci/pci_dma.c:473:
+^I.sync_single_for_cpu ^I= sn_dma_sync_single_for_cpu,$

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1852: FILE: arch/x86/include/asm/device.h:9:
+struct dma_map_ops *dma_ops;

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1914: FILE: arch/x86/include/asm/dma-mapping.h:21:
+extern struct dma_map_ops *dma_ops;

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1916: FILE: arch/x86/include/asm/dma-mapping.h:23:
+static inline struct dma_map_ops *get_dma_ops(struct device *dev)

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1925: FILE: arch/x86/include/asm/dma-mapping.h:38:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1940: FILE: arch/x86/include/asm/dma-mapping.h:59:
+	struct dma_map_ops *ops = get_dma_ops(hwdev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1943: FILE: arch/x86/include/asm/dma-mapping.h:62:
+	BUG_ON(!valid_dma_direction(dir));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1959: FILE: arch/x86/include/asm/dma-mapping.h:76:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1964: FILE: arch/x86/include/asm/dma-mapping.h:78:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1976: FILE: arch/x86/include/asm/dma-mapping.h:88:
+	struct dma_map_ops *ops = get_dma_ops(hwdev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1979: FILE: arch/x86/include/asm/dma-mapping.h:91:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#1994: FILE: arch/x86/include/asm/dma-mapping.h:102:
+	struct dma_map_ops *ops = get_dma_ops(hwdev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1997: FILE: arch/x86/include/asm/dma-mapping.h:104:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2010: FILE: arch/x86/include/asm/dma-mapping.h:114:
+	struct dma_map_ops *ops = get_dma_ops(hwdev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2013: FILE: arch/x86/include/asm/dma-mapping.h:116:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2027: FILE: arch/x86/include/asm/dma-mapping.h:127:
+	struct dma_map_ops *ops = get_dma_ops(hwdev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2030: FILE: arch/x86/include/asm/dma-mapping.h:129:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2045: FILE: arch/x86/include/asm/dma-mapping.h:141:
+	struct dma_map_ops *ops = get_dma_ops(hwdev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2048: FILE: arch/x86/include/asm/dma-mapping.h:143:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2065: FILE: arch/x86/include/asm/dma-mapping.h:157:
+	struct dma_map_ops *ops = get_dma_ops(hwdev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2068: FILE: arch/x86/include/asm/dma-mapping.h:159:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2084: FILE: arch/x86/include/asm/dma-mapping.h:172:
+	struct dma_map_ops *ops = get_dma_ops(hwdev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2087: FILE: arch/x86/include/asm/dma-mapping.h:174:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2101: FILE: arch/x86/include/asm/dma-mapping.h:185:
+	struct dma_map_ops *ops = get_dma_ops(hwdev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2104: FILE: arch/x86/include/asm/dma-mapping.h:187:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2119: FILE: arch/x86/include/asm/dma-mapping.h:199:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2125: FILE: arch/x86/include/asm/dma-mapping.h:202:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2137: FILE: arch/x86/include/asm/dma-mapping.h:212:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2139: FILE: arch/x86/include/asm/dma-mapping.h:214:
+	BUG_ON(!valid_dma_direction(dir));

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2151: FILE: arch/x86/include/asm/dma-mapping.h:263:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2172: FILE: arch/x86/include/asm/dma-mapping.h:292:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2192: FILE: arch/x86/include/asm/iommu.h:6:
+extern struct dma_map_ops nommu_dma_ops;

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2282: FILE: arch/x86/kernel/amd_iommu.c:1651:
+static struct dma_map_ops amd_iommu_dma_ops = {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2303: FILE: arch/x86/kernel/pci-calgary_64.c:384:
+			     int nelems,enum dma_data_direction dir,
 			               ^

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2381: FILE: arch/x86/kernel/pci-calgary_64.c:522:
+static struct dma_map_ops calgary_dma_ops = {

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2408: FILE: arch/x86/kernel/pci-dma.c:16:
+struct dma_map_ops *dma_ops;

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2427: FILE: arch/x86/kernel/pci-dma.c:231:
+	struct dma_map_ops *ops = get_dma_ops(dev);

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2541: FILE: arch/x86/kernel/pci-gart_64.c:714:
+static struct dma_map_ops gart_dma_ops = {

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2595: FILE: arch/x86/kernel/pci-nommu.c:82:
+struct dma_map_ops nommu_dma_ops = {

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2636: FILE: arch/x86/kernel/pci-swiotlb.c:53:
+struct dma_map_ops swiotlb_dma_ops = {

WARNING:CONST_STRUCT: struct dma_map_ops should normally be const
#2765: FILE: drivers/pci/intel-iommu.c:2592:
+struct dma_map_ops intel_dma_ops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2784: FILE: include/linux/dma-debug.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2799: FILE: include/linux/dma-debug.h:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2800: FILE: include/linux/dma-debug.h:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2814: FILE: include/linux/dma-debug.h:31:
+extern void dma_debug_add_bus(struct bus_type *bus);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2816: FILE: include/linux/dma-debug.h:33:
+extern void dma_debug_init(u32 num_entries);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2818: FILE: include/linux/dma-debug.h:35:
+extern void debug_dma_map_page(struct device *dev, struct page *page,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2823: FILE: include/linux/dma-debug.h:40:
+extern void debug_dma_unmap_page(struct device *dev, dma_addr_t addr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2826: FILE: include/linux/dma-debug.h:43:
+extern void debug_dma_map_sg(struct device *dev, struct scatterlist *sg,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2829: FILE: include/linux/dma-debug.h:46:
+extern void debug_dma_unmap_sg(struct device *dev, struct scatterlist *sglist,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2832: FILE: include/linux/dma-debug.h:49:
+extern void debug_dma_alloc_coherent(struct device *dev, size_t size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2835: FILE: include/linux/dma-debug.h:52:
+extern void debug_dma_free_coherent(struct device *dev, size_t size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2838: FILE: include/linux/dma-debug.h:55:
+extern void debug_dma_sync_single_for_cpu(struct device *dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2842: FILE: include/linux/dma-debug.h:59:
+extern void debug_dma_sync_single_for_device(struct device *dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2846: FILE: include/linux/dma-debug.h:63:
+extern void debug_dma_sync_single_range_for_cpu(struct device *dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2852: FILE: include/linux/dma-debug.h:69:
+extern void debug_dma_sync_single_range_for_device(struct device *dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2857: FILE: include/linux/dma-debug.h:74:
+extern void debug_dma_sync_sg_for_cpu(struct device *dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2861: FILE: include/linux/dma-debug.h:78:
+extern void debug_dma_sync_sg_for_device(struct device *dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2865: FILE: include/linux/dma-debug.h:82:
+extern void debug_dma_dump_mappings(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3049: FILE: include/linux/swiotlb.h:34:
+extern int swiotlb_arch_range_needs_mapping(phys_addr_t paddr, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3071: FILE: include/linux/swiotlb.h:44:
+extern dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3075: FILE: include/linux/swiotlb.h:48:
+extern void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3169: FILE: lib/dma-debug.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3184: FILE: lib/dma-debug.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3185: FILE: lib/dma-debug.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#3233: FILE: lib/dma-debug.c:65:
+	spinlock_t lock;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3292: FILE: lib/dma-debug.c:124:
+		printk(KERN_WARNING "Mapped at:\n");

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#3298: FILE: lib/dma-debug.c:130:
+#define err_printk(dev, entry, format, arg...) do {		\
+		error_count += 1;				\
+		if (show_all_errors || show_num_errors > 0) {	\
+			WARN(1, "%s %s: " format,		\
+			     dev_driver_string(dev),		\
+			     dev_name(dev) , ## arg);		\
+			dump_entry_trace(entry);		\
+		}						\
+		if (!show_all_errors && show_num_errors > 0)	\
+			show_num_errors -= 1;			\
+	} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#3298: FILE: lib/dma-debug.c:130:
+#define err_printk(dev, entry, format, arg...) do {		\
+		error_count += 1;				\
+		if (show_all_errors || show_num_errors > 0) {	\
+			WARN(1, "%s %s: " format,		\
+			     dev_driver_string(dev),		\
+			     dev_name(dev) , ## arg);		\
+			dump_entry_trace(entry);		\
+		}						\
+		if (!show_all_errors && show_num_errors > 0)	\
+			show_num_errors -= 1;			\
+	} while (0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3303: FILE: lib/dma-debug.c:135:
+			     dev_name(dev) , ## arg);		\
 			                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->dev_addr == ref->dev_addr'
#3359: FILE: lib/dma-debug.c:191:
+		if ((entry->dev_addr == ref->dev_addr) &&
+		    (entry->dev == ref->dev))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->dev == ref->dev'
#3359: FILE: lib/dma-debug.c:191:
+		if ((entry->dev_addr == ref->dev_addr) &&
+		    (entry->dev == ref->dev))

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#3401: FILE: lib/dma-debug.c:233:
+					 "%s idx %d P=%Lx D=%Lx L=%Lx %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3441: FILE: lib/dma-debug.c:273:
+		printk(KERN_ERR "DMA-API: debugging out of memory "

WARNING:SPLIT_STRING: quoted string split across lines
#3442: FILE: lib/dma-debug.c:274:
+		printk(KERN_ERR "DMA-API: debugging out of memory "
+				"- disabling\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3505: FILE: lib/dma-debug.c:337:
+	printk(KERN_INFO "DMA-API: preallocated %d debug entries\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3506: FILE: lib/dma-debug.c:338:
+	printk(KERN_INFO "DMA-API: preallocated %d debug entries\n",
+			num_entries);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3524: FILE: lib/dma-debug.c:356:
+		printk(KERN_ERR "DMA-API: can not create debugfs directory\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3529: FILE: lib/dma-debug.c:361:
+	global_disable_dent = debugfs_create_bool("disabled", 0444,
+			dma_debug_dent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3535: FILE: lib/dma-debug.c:367:
+	error_count_dent = debugfs_create_u32("error_count", 0444,
+			dma_debug_dent, &error_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3540: FILE: lib/dma-debug.c:372:
+	show_all_errors_dent = debugfs_create_u32("all_errors", 0644,
+			dma_debug_dent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3546: FILE: lib/dma-debug.c:378:
+	show_num_errors_dent = debugfs_create_u32("num_errors", 0644,
+			dma_debug_dent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3552: FILE: lib/dma-debug.c:384:
+	num_free_entries_dent = debugfs_create_u32("num_free_entries", 0444,
+			dma_debug_dent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3558: FILE: lib/dma-debug.c:390:
+	min_free_entries_dent = debugfs_create_u32("min_free_entries", 0444,
+			dma_debug_dent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3590: FILE: lib/dma-debug.c:422:
+static int dma_debug_device_change(struct notifier_block *nb,
+				    unsigned long action, void *data)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3595: FILE: lib/dma-debug.c:427:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#3602: FILE: lib/dma-debug.c:434:
+		err_printk(dev, NULL, "DMA-API: device driver has pending "
+				"DMA allocations while released from device "

WARNING:SPLIT_STRING: quoted string split across lines
#3603: FILE: lib/dma-debug.c:435:
+				"DMA allocations while released from device "
+				"[count=%d]\n", count);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*nb)...) over kzalloc(sizeof(struct notifier_block)...)
#3616: FILE: lib/dma-debug.c:448:
+	nb = kzalloc(sizeof(struct notifier_block), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nb"
#3617: FILE: lib/dma-debug.c:449:
+	if (nb == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3618: FILE: lib/dma-debug.c:450:
+		printk(KERN_ERR "dma_debug_add_bus: out of memory\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_debug_add_bus', this function's name, in a string
#3618: FILE: lib/dma-debug.c:450:
+		printk(KERN_ERR "dma_debug_add_bus: out of memory\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#3618: FILE: lib/dma-debug.c:450:
+	if (nb == NULL) {
+		printk(KERN_ERR "dma_debug_add_bus: out of memory\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3643: FILE: lib/dma-debug.c:475:
+		printk(KERN_ERR "DMA-API: error creating debugfs entries "

WARNING:SPLIT_STRING: quoted string split across lines
#3644: FILE: lib/dma-debug.c:476:
+		printk(KERN_ERR "DMA-API: error creating debugfs entries "
+				"- disabling\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3654: FILE: lib/dma-debug.c:486:
+		printk(KERN_ERR "DMA-API: debugging out of memory error "

WARNING:SPLIT_STRING: quoted string split across lines
#3655: FILE: lib/dma-debug.c:487:
+		printk(KERN_ERR "DMA-API: debugging out of memory error "
+				"- disabled\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3661: FILE: lib/dma-debug.c:493:
+	printk(KERN_INFO "DMA-API: debugging enabled by kernel config\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3670: FILE: lib/dma-debug.c:502:
+		printk(KERN_INFO "DMA-API: debugging disabled on kernel "

WARNING:SPLIT_STRING: quoted string split across lines
#3671: FILE: lib/dma-debug.c:503:
+		printk(KERN_INFO "DMA-API: debugging disabled on kernel "
+				 "command line\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#3693: FILE: lib/dma-debug.c:525:
+__setup("dma_debug=", dma_debug_cmdline);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#3694: FILE: lib/dma-debug.c:526:
+__setup("dma_debug_entries=", dma_debug_entries_cmdline);

WARNING:SPLIT_STRING: quoted string split across lines
#3704: FILE: lib/dma-debug.c:536:
+		err_printk(ref->dev, NULL, "DMA-API: device driver tries "
+			   "to free an invalid DMA memory address\n");

WARNING:SPLIT_STRING: quoted string split across lines
#3713: FILE: lib/dma-debug.c:545:
+		err_printk(ref->dev, NULL, "DMA-API: device driver tries "
+			   "to free DMA memory it has not allocated "

WARNING:SPLIT_STRING: quoted string split across lines
#3714: FILE: lib/dma-debug.c:546:
+			   "to free DMA memory it has not allocated "
+			   "[device address=0x%016llx] [size=%llu bytes]\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3721: FILE: lib/dma-debug.c:553:
+		err_printk(ref->dev, entry, "DMA-API: device driver frees "
+			   "DMA memory with different size "

WARNING:SPLIT_STRING: quoted string split across lines
#3722: FILE: lib/dma-debug.c:554:
+			   "DMA memory with different size "
+			   "[device address=0x%016llx] [map size=%llu bytes] "

WARNING:SPLIT_STRING: quoted string split across lines
#3723: FILE: lib/dma-debug.c:555:
+			   "[device address=0x%016llx] [map size=%llu bytes] "
+			   "[unmap size=%llu bytes]\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3729: FILE: lib/dma-debug.c:561:
+		err_printk(ref->dev, entry, "DMA-API: device driver frees "
+			   "DMA memory with wrong function "

WARNING:SPLIT_STRING: quoted string split across lines
#3730: FILE: lib/dma-debug.c:562:
+			   "DMA memory with wrong function "
+			   "[device address=0x%016llx] [size=%llu bytes] "

WARNING:SPLIT_STRING: quoted string split across lines
#3731: FILE: lib/dma-debug.c:563:
+			   "[device address=0x%016llx] [size=%llu bytes] "
+			   "[mapped as %s] [unmapped as %s]\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3737: FILE: lib/dma-debug.c:569:
+		err_printk(ref->dev, entry, "DMA-API: device driver frees "
+			   "DMA memory with different CPU address "

WARNING:SPLIT_STRING: quoted string split across lines
#3738: FILE: lib/dma-debug.c:570:
+			   "DMA memory with different CPU address "
+			   "[device address=0x%016llx] [size=%llu bytes] "

WARNING:SPLIT_STRING: quoted string split across lines
#3739: FILE: lib/dma-debug.c:571:
+			   "[device address=0x%016llx] [size=%llu bytes] "
+			   "[cpu alloc address=%p] [cpu free address=%p]",

WARNING:SPLIT_STRING: quoted string split across lines
#3747: FILE: lib/dma-debug.c:579:
+		err_printk(ref->dev, entry, "DMA-API: device driver frees "
+			   "DMA sg list with different entry count "

WARNING:SPLIT_STRING: quoted string split across lines
#3748: FILE: lib/dma-debug.c:580:
+			   "DMA sg list with different entry count "
+			   "[map count=%d] [unmap count=%d]\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3758: FILE: lib/dma-debug.c:590:
+		err_printk(ref->dev, entry, "DMA-API: device driver frees "
+			   "DMA memory with different direction "

WARNING:SPLIT_STRING: quoted string split across lines
#3759: FILE: lib/dma-debug.c:591:
+			   "DMA memory with different direction "
+			   "[device address=0x%016llx] [size=%llu bytes] "

WARNING:SPLIT_STRING: quoted string split across lines
#3760: FILE: lib/dma-debug.c:592:
+			   "[device address=0x%016llx] [size=%llu bytes] "
+			   "[mapped with %s] [unmapped with %s]\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3777: FILE: lib/dma-debug.c:609:
+		err_printk(dev, NULL, "DMA-API: device driver maps memory from"
+				"stack [addr=%p]\n", addr);

WARNING:MISSING_SPACE: break quoted strings at a space character
#3777: FILE: lib/dma-debug.c:609:
+		err_printk(dev, NULL, "DMA-API: device driver maps memory from"
+				"stack [addr=%p]\n", addr);

WARNING:SPLIT_STRING: quoted string split across lines
#3794: FILE: lib/dma-debug.c:626:
+		err_printk(dev, NULL, "DMA-API: device driver maps "
+				"memory from kernel text or rodata "

WARNING:SPLIT_STRING: quoted string split across lines
#3795: FILE: lib/dma-debug.c:627:
+				"memory from kernel text or rodata "
+				"[addr=%p] [size=%llu]\n", addr, size);

WARNING:SPLIT_STRING: quoted string split across lines
#3817: FILE: lib/dma-debug.c:649:
+		err_printk(dev, NULL, "DMA-API: device driver tries "
+				"to sync DMA memory it has not allocated "

WARNING:SPLIT_STRING: quoted string split across lines
#3818: FILE: lib/dma-debug.c:650:
+				"to sync DMA memory it has not allocated "
+				"[device address=0x%016llx] [size=%llu bytes]\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3825: FILE: lib/dma-debug.c:657:
+		err_printk(dev, entry, "DMA-API: device driver syncs"
+				" DMA memory outside allocated range "

WARNING:SPLIT_STRING: quoted string split across lines
#3826: FILE: lib/dma-debug.c:658:
+				" DMA memory outside allocated range "
+				"[device address=0x%016llx] "

WARNING:SPLIT_STRING: quoted string split across lines
#3827: FILE: lib/dma-debug.c:659:
+				"[device address=0x%016llx] "
+				"[allocation size=%llu bytes] [sync offset=%llu] "

WARNING:SPLIT_STRING: quoted string split across lines
#3828: FILE: lib/dma-debug.c:660:
+				"[allocation size=%llu bytes] [sync offset=%llu] "
+				"[sync size=%llu]\n", entry->dev_addr, entry->size,

WARNING:SPLIT_STRING: quoted string split across lines
#3834: FILE: lib/dma-debug.c:666:
+		err_printk(dev, entry, "DMA-API: device driver syncs "
+				"DMA memory with different direction "

WARNING:SPLIT_STRING: quoted string split across lines
#3835: FILE: lib/dma-debug.c:667:
+				"DMA memory with different direction "
+				"[device address=0x%016llx] [size=%llu bytes] "

WARNING:SPLIT_STRING: quoted string split across lines
#3836: FILE: lib/dma-debug.c:668:
+				"[device address=0x%016llx] [size=%llu bytes] "
+				"[mapped with %s] [synced with %s]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3846: FILE: lib/dma-debug.c:678:
+	if (to_cpu && !(entry->direction == DMA_FROM_DEVICE) &&
+		      !(direction == DMA_TO_DEVICE))

WARNING:SPLIT_STRING: quoted string split across lines
#3848: FILE: lib/dma-debug.c:680:
+		err_printk(dev, entry, "DMA-API: device driver syncs "
+				"device read-only DMA memory for cpu "

WARNING:SPLIT_STRING: quoted string split across lines
#3849: FILE: lib/dma-debug.c:681:
+				"device read-only DMA memory for cpu "
+				"[device address=0x%016llx] [size=%llu bytes] "

WARNING:SPLIT_STRING: quoted string split across lines
#3850: FILE: lib/dma-debug.c:682:
+				"[device address=0x%016llx] [size=%llu bytes] "
+				"[mapped with %s] [synced with %s]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3856: FILE: lib/dma-debug.c:688:
+	if (!to_cpu && !(entry->direction == DMA_TO_DEVICE) &&
+		       !(direction == DMA_FROM_DEVICE))

WARNING:SPLIT_STRING: quoted string split across lines
#3858: FILE: lib/dma-debug.c:690:
+		err_printk(dev, entry, "DMA-API: device driver syncs "
+				"device write-only DMA memory to device "

WARNING:SPLIT_STRING: quoted string split across lines
#3859: FILE: lib/dma-debug.c:691:
+				"device write-only DMA memory to device "
+				"[device address=0x%016llx] [size=%llu bytes] "

WARNING:SPLIT_STRING: quoted string split across lines
#3860: FILE: lib/dma-debug.c:692:
+				"[device address=0x%016llx] [size=%llu bytes] "
+				"[mapped with %s] [synced with %s]\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3868: FILE: lib/dma-debug.c:700:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#3898: FILE: lib/dma-debug.c:730:
+		void *addr = ((char *)page_address(page)) + offset;
+		check_for_stack(dev, addr);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3973: FILE: lib/dma-debug.c:805:
+	for_each_sg(sglist, s, nelems, i) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#3989: FILE: lib/dma-debug.c:821:
+			struct hash_bucket *bucket;
+			ref.sg_call_ents = nelems;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!virt"
#4010: FILE: lib/dma-debug.c:842:
+	if (unlikely(virt == NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4029: FILE: lib/dma-debug.c:861:
+void debug_dma_free_coherent(struct device *dev, size_t size,
+			 void *virt, dma_addr_t addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4103: FILE: lib/dma-debug.c:935:
+		check_sync(dev, s->dma_address, s->dma_length, 0,
+				direction, true);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4119: FILE: lib/dma-debug.c:951:
+		check_sync(dev, s->dma_address, s->dma_length, 0,
+				direction, false);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000147980.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 155 warnings, 47 checks, 3673 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000147980.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
