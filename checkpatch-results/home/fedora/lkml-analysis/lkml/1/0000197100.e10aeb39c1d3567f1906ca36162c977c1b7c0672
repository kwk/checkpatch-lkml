WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
  function specific structures. (definitions in include/linux/ima.h and "ima.h")

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#89: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#94: FILE: include/linux/ima.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#212: FILE: security/integrity/ima/ima.h:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#240: FILE: security/integrity/ima/ima.h:29:
+	printk(level "ima (%s): " format, __func__, ## arg)

CHECK:BIT_MACRO: Prefer using the BIT macro
#253: FILE: security/integrity/ima/ima.h:42:
+#define IMA_MEASURE_HTABLE_SIZE (1 << IMA_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#271: FILE: security/integrity/ima/ima.h:60:
+};
+extern struct list_head ima_measurements;	/* list of all measurements */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#297: FILE: security/integrity/ima/ima.h:86:
+};
+extern struct ima_h_table ima_htable;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#301: FILE: security/integrity/ima/ima.h:90:
+	return (hash_long(*digest, IMA_HASH_BITS));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#306: FILE: security/integrity/ima/ima.h:95:
+#define IMA_TPM ((((u32)TPM_ANY_TYPE)<<16) | (u32)TPM_ANY_NUM)
                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#357: FILE: security/integrity/ima/ima.h:146:
+	struct mutex mutex;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#360: FILE: security/integrity/ima/ima.h:149:
+};
+#define IMA_IINT_INIT		1

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#375: FILE: security/integrity/ima/ima.h:164:
+int ima_add_rule(int, char *subj_user, char *subj_role, char *subj_type,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#387: FILE: security/integrity/ima/ima_api.c:1:
+/*

WARNING:SIZEOF_PARENTHESIS: sizeof measure_entry should be sizeof(measure_entry)
#521: FILE: security/integrity/ima/ima_api.c:135:
+	memset(&measure_entry, 0, sizeof measure_entry);

WARNING:TYPO_SPELLING: 'keypairs' may be misspelled - perhaps 'key pairs'?
#534: FILE: security/integrity/ima/ima_api.c:148:
+ * The policy is defined in terms of keypairs:
                                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#535: FILE: security/integrity/ima/ima_api.c:149:
+ * ^I^Isubj=, obj=, type=, func=, mask=, fsmagic=$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#537: FILE: security/integrity/ima/ima_api.c:151:
+ * ^Ifunc: PATH_CHECK | BPRM_CHECK | FILE_MMAP$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#538: FILE: security/integrity/ima/ima_api.c:152:
+ * ^Imask: contains the permission mask$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#543: FILE: security/integrity/ima/ima_api.c:157:
+ * or other error, return an error code.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#599: FILE: security/integrity/ima/ima_api.c:213:
+		if (rc) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#602: FILE: security/integrity/ima/ima_api.c:216:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#636: FILE: security/integrity/ima/ima_api.c:250:
+	if (!(iint->flags & IMA_MEASURED)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#639: FILE: security/integrity/ima/ima_api.c:253:
+	} else

WARNING:SIZEOF_PARENTHESIS: sizeof measure_entry should be sizeof(measure_entry)
#681: FILE: security/integrity/ima/ima_api.c:295:
+	memset(&measure_entry, 0, sizeof measure_entry);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#702: FILE: security/integrity/ima/ima_crypto.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#714: FILE: security/integrity/ima/ima_crypto.c:13:
+ * ^ICalculate a file's or a template's hash.$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#810: FILE: security/integrity/ima/ima_iint.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#887: FILE: security/integrity/ima/ima_init.c:1:
+/*

WARNING:SIZEOF_PARENTHESIS: sizeof measure_entry should be sizeof(measure_entry)
#921: FILE: security/integrity/ima/ima_init.c:35:
+	memset(&measure_entry, 0, sizeof measure_entry);

CHECK:BRACES: braces {} should be used on all arms of this statement
#927: FILE: security/integrity/ima/ima_init.c:41:
+	if (ima_used_chip) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#947: FILE: security/integrity/ima/ima_init.c:61:
+			sg_init_one(&sg, (u8 *) pcr_i, IMA_DIGEST_SIZE);

CHECK:BRACES: Unbalanced braces around else statement
#952: FILE: security/integrity/ima/ima_init.c:66:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#983: FILE: security/integrity/ima/ima_main.c:1:
+/*

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1024: FILE: security/integrity/ima/ima_main.c:42:
+__setup("ima_hash=", hash_setup);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1067: FILE: security/integrity/ima/ima_main.c:85:
+ * ^I- Opening a file for write when already open for read,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1070: FILE: security/integrity/ima/ima_main.c:88:
+ * ^I  could result in a file measurement error.$

WARNING:SIZEOF_PARENTHESIS: sizeof mdata should be sizeof(mdata)
#1079: FILE: security/integrity/ima/ima_main.c:97:
+	memset(&mdata, 0, sizeof mdata);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around path->dentry->d_count
#1091: FILE: security/integrity/ima/ima_main.c:109:
+			if (atomic_read(&(path->dentry->d_count)) - 1 >

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around mdata.inode->i_writecount
#1092: FILE: security/integrity/ima/ima_main.c:110:
+			    atomic_read(&(mdata.inode->i_writecount)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around mdata.inode->i_writecount
#1109: FILE: security/integrity/ima/ima_main.c:127:
+			if (atomic_read(&(mdata.inode->i_writecount)) > 0)

WARNING:SIZEOF_PARENTHESIS: sizeof mdata should be sizeof(mdata)
#1162: FILE: security/integrity/ima/ima_main.c:180:
+	memset(&mdata, 0, sizeof mdata);

WARNING:SIZEOF_PARENTHESIS: sizeof mdata should be sizeof(mdata)
#1199: FILE: security/integrity/ima/ima_main.c:217:
+	memset(&mdata, 0, sizeof mdata);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1263: FILE: security/integrity/ima/ima_policy.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1272: FILE: security/integrity/ima/ima_policy.c:10:
+ * ^I- initialize default measure policy rules$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1295: FILE: security/integrity/ima/ima_policy.c:33:
+#define IMA_FUNC ^I0x0001$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1296: FILE: security/integrity/ima/ima_policy.c:34:
+#define IMA_MASK ^I0x0002$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1304: FILE: security/integrity/ima/ima_policy.c:42:
+	{.action = DONT_MEASURE,.fsmagic = PROC_SUPER_MAGIC,
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1306: FILE: security/integrity/ima/ima_policy.c:44:
+	{.action = DONT_MEASURE,.fsmagic = SYSFS_MAGIC,.flags = IMA_FSMAGIC},
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1306: FILE: security/integrity/ima/ima_policy.c:44:
+	{.action = DONT_MEASURE,.fsmagic = SYSFS_MAGIC,.flags = IMA_FSMAGIC},
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1307: FILE: security/integrity/ima/ima_policy.c:45:
+	{.action = DONT_MEASURE,.fsmagic = DEBUGFS_MAGIC,.flags = IMA_FSMAGIC},
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1307: FILE: security/integrity/ima/ima_policy.c:45:
+	{.action = DONT_MEASURE,.fsmagic = DEBUGFS_MAGIC,.flags = IMA_FSMAGIC},
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1308: FILE: security/integrity/ima/ima_policy.c:46:
+	{.action = DONT_MEASURE,.fsmagic = TMPFS_MAGIC,.flags = IMA_FSMAGIC},
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1308: FILE: security/integrity/ima/ima_policy.c:46:
+	{.action = DONT_MEASURE,.fsmagic = TMPFS_MAGIC,.flags = IMA_FSMAGIC},
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1309: FILE: security/integrity/ima/ima_policy.c:47:
+	{.action = DONT_MEASURE,.fsmagic = SECURITYFS_MAGIC,
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1311: FILE: security/integrity/ima/ima_policy.c:49:
+	{.action = MEASURE,.func = FILE_MMAP,.mask = MAY_EXEC,
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1311: FILE: security/integrity/ima/ima_policy.c:49:
+	{.action = MEASURE,.func = FILE_MMAP,.mask = MAY_EXEC,
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1313: FILE: security/integrity/ima/ima_policy.c:51:
+	{.action = MEASURE,.func = BPRM_CHECK,.mask = MAY_EXEC,
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1313: FILE: security/integrity/ima/ima_policy.c:51:
+	{.action = MEASURE,.func = BPRM_CHECK,.mask = MAY_EXEC,
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1315: FILE: security/integrity/ima/ima_policy.c:53:
+	{.action = MEASURE,.func = PATH_CHECK,.mask = MAY_READ,.uid = 0,
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1315: FILE: security/integrity/ima/ima_policy.c:53:
+	{.action = MEASURE,.func = PATH_CHECK,.mask = MAY_READ,.uid = 0,
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1315: FILE: security/integrity/ima/ima_policy.c:53:
+	{.action = MEASURE,.func = PATH_CHECK,.mask = MAY_READ,.uid = 0,
 	                                                      ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1341: FILE: security/integrity/ima/ima_policy.c:79:
+	if ((rule->flags & IMA_FSMAGIC)
+	    && rule->fsmagic != inode->i_sb->s_magic)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1393: FILE: security/integrity/ima/ima_queue.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qe"
#1467: FILE: security/integrity/ima/ima_queue.c:75:
+	if (qe == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*qe)...) over kmalloc(sizeof(struct ima_queue_entry)...)
#1490: FILE: security/integrity/ima/ima_queue.c:98:
+	qe = kmalloc(sizeof(struct ima_queue_entry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qe"
#1491: FILE: security/integrity/ima/ima_queue.c:99:
+	if (qe == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1507: FILE: security/integrity/ima/ima_queue.c:115:
+	if (violation) {	/* Replace 0x00 with 0xFF */
[...]
+	} else
[...]

WARNING:SIZEOF_PARENTHESIS: sizeof digest should be sizeof(digest)
#1510: FILE: security/integrity/ima/ima_queue.c:118:
+		memset(digest, 0xff, sizeof digest);

CHECK:BRACES: Unbalanced braces around else statement
#1512: FILE: security/integrity/ima/ima_queue.c:120:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197100.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 31 warnings, 23 checks, 1366 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197100.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
