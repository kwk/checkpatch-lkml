CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cfqg' - possible side-effects?
#123: FILE: block/cfq-iosched.c:370:
+#define for_each_cfqg_st(cfqg, i, st) \
+	for (i = 0, st = &cfqg->service_trees[i]; \
+		i <= SYNC_WORKLOAD && (st = &cfqg->service_trees[i]); i++) \
 

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cfqg' may be better as '(cfqg)' to avoid precedence issues
#123: FILE: block/cfq-iosched.c:370:
+#define for_each_cfqg_st(cfqg, i, st) \
+	for (i = 0, st = &cfqg->service_trees[i]; \
+		i <= SYNC_WORKLOAD && (st = &cfqg->service_trees[i]); i++) \
 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#123: FILE: block/cfq-iosched.c:370:
+#define for_each_cfqg_st(cfqg, i, st) \
+	for (i = 0, st = &cfqg->service_trees[i]; \
+		i <= SYNC_WORKLOAD && (st = &cfqg->service_trees[i]); i++) \
 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'st' - possible side-effects?
#123: FILE: block/cfq-iosched.c:370:
+#define for_each_cfqg_st(cfqg, i, st) \
+	for (i = 0, st = &cfqg->service_trees[i]; \
+		i <= SYNC_WORKLOAD && (st = &cfqg->service_trees[i]); i++) \
 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#124: FILE: block/cfq-iosched.c:371:
+	for (i = 0, st = &cfqg->service_trees[i]; \
[...]
 static inline enum wl_prio_t cfqq_prio(struct cfq_queue *cfqq)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#182: FILE: block/cfq-iosched.c:537:
+	unsigned busy = cfq_group_busy_queues(cfqd, cfqg);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#209: FILE: block/cfq-iosched.c:563:
+		unsigned iq = cfq_group_get_avg_queues(cfqd, cfqq->cfqg);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#396: FILE: block/cfq-iosched.c:1181:
 	if (!cfqd->cfq_group_isolation
+	    && cfqq_type(cfqq) == SYNC_NOIDLE_WORKLOAD && cfqq->cfqg

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#397: FILE: block/cfq-iosched.c:1182:
+	    && cfqq_type(cfqq) == SYNC_NOIDLE_WORKLOAD && cfqq->cfqg
+	    && cfqq->cfqg != &cfqd->root_groups[cfqq_prio(cfqq)]) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#412: FILE: block/cfq-iosched.c:1194:
+		BUG_ON(cfqq->cfqg != &cfqd->root_groups[cfqq_prio(cfqq)]);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#544: FILE: block/cfq-iosched.c:2077:
+	slice = group_slice * count / max_t(unsigned, cfqg->busy_queues_avg,

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#625: FILE: block/cfq-iosched.c:3742:
+			*st = CFQ_RB_ROOT;
 			^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#631: FILE: block/cfq-iosched.c:3746:
+		cfqg->weight = 2*BLKIO_WEIGHT_DEFAULT;
 		                ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000033322.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 8 checks, 590 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000033322.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
