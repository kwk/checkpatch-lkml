WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: include/asm-generic/kgdb.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#59: FILE: include/asm-generic/kgdb.h:2:
+ * include/asm-generic/kgdb.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:REPEATED_WORD: Possible repeated word: 'of'
#81: FILE: include/asm-generic/kgdb.h:24:
+ *	kgdb_skipexception - Bail of of KGDB when we've been triggered.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/asm-generic/kgdb.h:43:
+extern void kgdb_post_master_code(struct pt_regs *regs, int e_vector,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/asm-generic/kgdb.h:54:
+extern void kgdb_disable_hw_debug(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/asm-generic/kgdb.h:63:
+extern void kgdb_shadowinfo(struct pt_regs *regs, char *buffer,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#121: FILE: include/asm-generic/kgdb.h:64:
+			    unsigned threadid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/asm-generic/kgdb.h:75:
+extern struct task_struct *kgdb_get_shadow_thread(struct pt_regs *regs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/asm-generic/kgdb.h:86:
+extern struct pt_regs *kgdb_shadow_regs(struct pt_regs *regs, int threadid);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: include/linux/kgdb.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#157: FILE: include/linux/kgdb.h:2:
+ * include/linux/kgdb.h

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#173: FILE: include/linux/kgdb.h:18:
+#include <asm/atomic.h>

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#234: FILE: include/linux/kgdb.h:79:
+ *	kgdb_arch_init - Perform any architecture specific initalization.
   	                                                   ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#236: FILE: include/linux/kgdb.h:81:
+ *	This function will handle the initalization of any architecture
   	                              ^^^^^^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#353: FILE: include/linux/kgdb.h:198:
+	unsigned		shadowth;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#355: FILE: include/linux/kgdb.h:200:
+	int	(*set_breakpoint)(unsigned long, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#355: FILE: include/linux/kgdb.h:200:
+	int	(*set_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#356: FILE: include/linux/kgdb.h:201:
+	int	(*remove_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#356: FILE: include/linux/kgdb.h:201:
+	int	(*remove_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#357: FILE: include/linux/kgdb.h:202:
+	int	(*set_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#357: FILE: include/linux/kgdb.h:202:
+	int	(*set_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#358: FILE: include/linux/kgdb.h:203:
+	int	(*remove_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#358: FILE: include/linux/kgdb.h:203:
+	int	(*remove_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:SPACING: Unnecessary space before function pointer arguments
#389: FILE: include/linux/kgdb.h:234:
+	int			(*read_char) (void);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#390: FILE: include/linux/kgdb.h:235:
+	void			(*write_char) (u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#390: FILE: include/linux/kgdb.h:235:
+	void			(*write_char) (u8);

WARNING:SPACING: Unnecessary space before function pointer arguments
#391: FILE: include/linux/kgdb.h:236:
+	void			(*flush) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#392: FILE: include/linux/kgdb.h:237:
+	int			(*init) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#393: FILE: include/linux/kgdb.h:238:
+	void			(*pre_exception) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#394: FILE: include/linux/kgdb.h:239:
+	void			(*post_exception) (void);

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#397: FILE: include/linux/kgdb.h:242:
+extern struct kgdb_arch		arch_kgdb_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#399: FILE: include/linux/kgdb.h:244:
+int kgdb_register_io_module(struct kgdb_io *local_kgdb_io_ops);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#400: FILE: include/linux/kgdb.h:245:
+void kgdb_unregister_io_module(struct kgdb_io *local_kgdb_io_ops);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#437: FILE: kernel/kgdb.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#438: FILE: kernel/kgdb.c:2:
+ * kernel/kgdb.c

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#487: FILE: kernel/kgdb.c:51:
+#include <asm/cacheflush.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#489: FILE: kernel/kgdb.c:53:
+#include <asm/atomic.h>

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#509: FILE: kernel/kgdb.c:73:
+} kgdb_info[NR_CPUS];

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#527: FILE: kernel/kgdb.c:91:
+static struct kgdb_io		*kgdb_io_ops;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#535: FILE: kernel/kgdb.c:99:
+	[0 ... KGDB_MAX_BREAKPOINTS-1] = { .state = BP_UNDEFINED }
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#551: FILE: kernel/kgdb.c:115:
+	[0 ... NR_CPUS-1] = __SPIN_LOCK_UNLOCKED(slave_cpu_locks)
 	              ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#553: FILE: kernel/kgdb.c:117:
+};
+static atomic_t			cpu_in_kgdb[NR_CPUS];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#629: FILE: kernel/kgdb.c:193:
+
+

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#632: FILE: kernel/kgdb.c:196:
+ * can be overriden by architectures when needed:
           ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: kernel/kgdb.c:213:
+	if (kgdb_set_mem((char *)addr, arch_kgdb_ops.gdb_bpt_instr,
+						BREAK_INSTR_SIZE))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 37)
#696: FILE: kernel/kgdb.c:260:
+		while ((ch = (kgdb_io_ops->read_char())) != '$')
+			/* nothing */;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count == 2'
#805: FILE: kernel/kgdb.c:369:
+	if ((count == 2) && (((long)mem & 1) == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#827: FILE: kernel/kgdb.c:391:
+		u32 tmp_l;
+		if (probe_kernel_address(mem, tmp_l)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#855: FILE: kernel/kgdb.c:419:
+		u64 tmp_ll;
+		if (probe_kernel_address(mem, tmp_ll)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count == 2'
#951: FILE: kernel/kgdb.c:515:
+	if ((count == 2) && (((long)mem & 1) == 0)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1029: FILE: kernel/kgdb.c:593:
+		if (hex_val >= 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1032: FILE: kernel/kgdb.c:596:
+		} else

WARNING:TYPO_SPELLING: 'gaurd' may be misspelled - perhaps 'guard'?
#1156: FILE: kernel/kgdb.c:720:
+	 * gaurd in case the master CPU had not been selected if
 	   ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1202: FILE: kernel/kgdb.c:766:
+		error = kgdb_arch_set_breakpoint(addr,
+				kgdb_break[i].saved_instr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1209: FILE: kernel/kgdb.c:773:
+				flush_cache_range(current->mm->mmap_cache,
+						addr, addr + BREAK_INSTR_SIZE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == BP_SET'
#1230: FILE: kernel/kgdb.c:794:
+		if ((kgdb_break[i].state == BP_SET) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1230: FILE: kernel/kgdb.c:794:
+		if ((kgdb_break[i].state == BP_SET) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1231: FILE: kernel/kgdb.c:795:
+		if ((kgdb_break[i].state == BP_SET) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1236: FILE: kernel/kgdb.c:800:
+		if (kgdb_break[i].state == BP_REMOVED &&
+					kgdb_break[i].bpt_addr == addr) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1272: FILE: kernel/kgdb.c:836:
+		error = kgdb_arch_remove_breakpoint(addr,
+					kgdb_break[i].saved_instr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1277: FILE: kernel/kgdb.c:841:
+		if (CACHE_FLUSH_IS_SAFE && current->mm &&
+				addr < TASK_SIZE) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1279: FILE: kernel/kgdb.c:843:
+			flush_cache_range(current->mm->mmap_cache,
+					addr, addr + BREAK_INSTR_SIZE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == BP_SET'
#1293: FILE: kernel/kgdb.c:857:
+		if ((kgdb_break[i].state == BP_SET) &&
+				(kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1293: FILE: kernel/kgdb.c:857:
+		if ((kgdb_break[i].state == BP_SET) &&
+				(kgdb_break[i].bpt_addr == addr)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1294: FILE: kernel/kgdb.c:858:
+		if ((kgdb_break[i].state == BP_SET) &&
+				(kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == BP_REMOVED'
#1307: FILE: kernel/kgdb.c:871:
+		if ((kgdb_break[i].state == BP_REMOVED) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1307: FILE: kernel/kgdb.c:871:
+		if ((kgdb_break[i].state == BP_REMOVED) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1308: FILE: kernel/kgdb.c:872:
+		if ((kgdb_break[i].state == BP_REMOVED) &&
+					(kgdb_break[i].bpt_addr == addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1326: FILE: kernel/kgdb.c:890:
+		error = kgdb_arch_remove_breakpoint(addr,
+				kgdb_break[i].saved_instr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1400: FILE: kernel/kgdb.c:964:
+		printk(KERN_CRIT "KGDB: Waiting for remote debugger\n");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1448: FILE: kernel/kgdb.c:1012:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1466: FILE: kernel/kgdb.c:1030:
+	if (arch_kgdb_ops.shadowth &&
+			ks->kgdb_usethreadid >= pid_max + num_online_cpus()) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1467: FILE: kernel/kgdb.c:1031:
+			ks->kgdb_usethreadid >= pid_max + num_online_cpus()) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1469: FILE: kernel/kgdb.c:1033:
+		shadowregs = kgdb_shadow_regs(ks->linux_regs,
+					  ks->kgdb_usethreadid -

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1515: FILE: kernel/kgdb.c:1079:
+	if (kgdb_hex2long(&ptr, &addr) > 0 && *ptr++ == ',' &&
+					kgdb_hex2long(&ptr, &length) > 0) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1516: FILE: kernel/kgdb.c:1080:
+					kgdb_hex2long(&ptr, &length) > 0) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1577: FILE: kernel/kgdb.c:1141:
+		printk(KERN_CRIT "Executing reboot\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1630: FILE: kernel/kgdb.c:1194:
+							ks->threadid++) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1664: FILE: kernel/kgdb.c:1228:
+			kgdb_mem2hex(getthread(ks->linux_regs,
+					ks->threadid)->comm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1669: FILE: kernel/kgdb.c:1233:
+				kgdb_shadowinfo(ks->linux_regs,
+					remcom_out_buffer,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1674: FILE: kernel/kgdb.c:1238:
+				static char tmpstr[23 + BUF_THREAD_ID_SIZE];
+				sprintf(tmpstr, "Shadow task %d for pid 0",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1675: FILE: kernel/kgdb.c:1239:
+				sprintf(tmpstr, "Shadow task %d for pid 0",
+						(int)(ks->threadid - pid_max));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1677: FILE: kernel/kgdb.c:1241:
+				kgdb_mem2hex(tmpstr, remcom_out_buffer,
+							 strlen(tmpstr));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1769: FILE: kernel/kgdb.c:1333:
+		return;
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1772: FILE: kernel/kgdb.c:1336:
+			if (*(ptr++) != ',' ||
+				!kgdb_hex2long(&ptr, &length)) {

CHECK:SPACING: No space is necessary after a cast
#1791: FILE: kernel/kgdb.c:1355:
+			(int) length, *bpt_type);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1806: FILE: kernel/kgdb.c:1370:
+	if (remcom_in_buffer[1] == '0' && remcom_in_buffer[2] == '9') {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1811: FILE: kernel/kgdb.c:1375:
+	} else if (remcom_in_buffer[1] == '1' && remcom_in_buffer[2] == '5') {
+

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1823: FILE: kernel/kgdb.c:1387:
+	/* Indicate fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#1828: FILE: kernel/kgdb.c:1392:
+ * This function performs all gdbserial command procesing
                                                 ^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1848: FILE: kernel/kgdb.c:1412:
+			kgdb_msg_write("Not all CPUs have been synced for "
+			       "KGDB\n", 39);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1923: FILE: kernel/kgdb.c:1487:
+			/* Fall through on tmp < 0 */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1932: FILE: kernel/kgdb.c:1496:
+			/* Fall through to default processing */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1936: FILE: kernel/kgdb.c:1500:
+			error = kgdb_arch_handle_exception(ks->ex_vector,
+						ks->signo,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1951: FILE: kernel/kgdb.c:1515:
+
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1985: FILE: kernel/kgdb.c:1549:
+		printk(KERN_CRIT "KGDB: re-enter error: breakpoint removed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1998: FILE: kernel/kgdb.c:1562:
+	printk(KERN_CRIT "KGDB: re-enter exception: ALL breakpoints killed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2055: FILE: kernel/kgdb.c:1619:
+		if (atomic_read(&kgdb_sync) < 0 &&
+			atomic_inc_and_test(&kgdb_sync)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2064: FILE: kernel/kgdb.c:1628:
+		if (atomic_read(&cpu_doing_single_step) != -1 &&
+				atomic_read(&cpu_doing_single_step) != cpu)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2075: FILE: kernel/kgdb.c:1639:
+	    atomic_read(&cpu_doing_single_step) != cpu) {
+

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2108: FILE: kernel/kgdb.c:1672:
+		for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2133: FILE: kernel/kgdb.c:1697:
+		for (n = 0; n < NR_CPUS; n++) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2162: FILE: kernel/kgdb.c:1726:
+		for (i = NR_CPUS-1; i >= 0; i--)
 		                ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2162: FILE: kernel/kgdb.c:1726:
+		for (i = NR_CPUS-1; i >= 0; i--)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2168: FILE: kernel/kgdb.c:1732:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2220: FILE: kernel/kgdb.c:1784:
+	if (!atomic_read(&cpu_in_kgdb[cpu]) &&
+		atomic_read(&debugger_active) != (cpu + 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2236: FILE: kernel/kgdb.c:1800:
+		printk(KERN_ERR "KGDB: Cannot handle panic while"

WARNING:SPLIT_STRING: quoted string split across lines
#2237: FILE: kernel/kgdb.c:1801:
+		printk(KERN_ERR "KGDB: Cannot handle panic while"
+				"debugger active\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#2237: FILE: kernel/kgdb.c:1801:
+		printk(KERN_ERR "KGDB: Cannot handle panic while"
+				"debugger active\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2241: FILE: kernel/kgdb.c:1805:
+	printk(KERN_ERR "kgdb panic point\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2253: FILE: kernel/kgdb.c:1817:
+void kgdb_console_write(struct console *co, const char *s, unsigned count)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2258: FILE: kernel/kgdb.c:1822:
+	 * and print. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2273: FILE: kernel/kgdb.c:1837:
+}
+;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2280: FILE: kernel/kgdb.c:1844:
+		printk(KERN_CRIT "ERROR: No KGDB I/O module available\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2284: FILE: kernel/kgdb.c:1848:
+		printk(KERN_CRIT "Entering KGDB\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2302: FILE: kernel/kgdb.c:1866:
+		atomic_notifier_chain_register(&panic_notifier_list,
+					&kgdb_panic_notifier);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2326: FILE: kernel/kgdb.c:1890:
+		atomic_notifier_chain_unregister(&panic_notifier_list,
+					  &kgdb_panic_notifier);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2343: FILE: kernel/kgdb.c:1907:
+	printk(KERN_CRIT "kgdb: Waiting for connection from remote gdb...\n");

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2347: FILE: kernel/kgdb.c:1911:
+int kgdb_register_io_module(struct kgdb_io *new_kgdb_io_ops)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2356: FILE: kernel/kgdb.c:1920:
+		printk(KERN_ERR "kgdb: Another I/O driver is already "

WARNING:SPLIT_STRING: quoted string split across lines
#2357: FILE: kernel/kgdb.c:1921:
+		printk(KERN_ERR "kgdb: Another I/O driver is already "
+				"registered with KGDB.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2373: FILE: kernel/kgdb.c:1937:
+	printk(KERN_INFO "kgdb: Registered I/O driver %s.\n",

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2386: FILE: kernel/kgdb.c:1950:
+void kgdb_unregister_io_module(struct kgdb_io *old_kgdb_io_ops)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2388: FILE: kernel/kgdb.c:1952:
+	BUG_ON(kgdb_connected);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2403: FILE: kernel/kgdb.c:1967:
+	printk(KERN_INFO

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2500: FILE: lib/Kconfig.kgdb:29:
+config KGDBOC
+	tristate "KGDB: use kgdb over the serial console"
+	depends on KGDB
+	select CONSOLE_POLL
+	select MAGIC_SYSRQ
+	default y
+	help
+	  Share a serial console with kgdb. Sysrq-g must be used

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323920.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 72 warnings, 54 checks, 2426 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323920.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
