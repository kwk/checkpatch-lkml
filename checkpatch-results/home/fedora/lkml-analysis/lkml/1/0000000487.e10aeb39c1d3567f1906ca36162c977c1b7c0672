WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#20: 
Subject: [PATCH 2/2] Staging:dt3155: fix coding style issue in dt3155_drv.c This is a patch to the dt3155_drv.c file that fixes up a coding style warning and errors found by the checkpatch.pl tool;

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:CAMELCASE: Avoid CamelCase: <Merged>
#52: FILE: drivers/staging/dt3155/dt3155_drv.c:30:
+			Merged John Roll's changes (john@cfa.harvard.edu)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <John>
#52: FILE: drivers/staging/dt3155/dt3155_drv.c:30:
+			Merged John Roll's changes (john@cfa.harvard.edu)

CHECK:CAMELCASE: Avoid CamelCase: <Roll>
#52: FILE: drivers/staging/dt3155/dt3155_drv.c:30:
+			Merged John Roll's changes (john@cfa.harvard.edu)

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#57: FILE: drivers/staging/dt3155/dt3155_drv.c:33:
+			* fix successive interrupt-driven captures
 			^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#57: FILE: drivers/staging/dt3155/dt3155_drv.c:33:
+			* fix successive interrupt-driven captures
 			                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#58: FILE: drivers/staging/dt3155/dt3155_drv.c:34:
+			* add select/poll support.
 			            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#71: FILE: drivers/staging/dt3155/dt3155_drv.c:99:
+#define DT_3155_DEBUG_MSG(x, y) printk(x, y)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: drivers/staging/dt3155/dt3155_drv.c:152:
+  ReadMReg((dt3155_lbase[minor] + INT_CSR), int_csr_r.reg);$

CHECK:CAMELCASE: Avoid CamelCase: <ReadMReg>
#116: FILE: drivers/staging/dt3155/dt3155_drv.c:152:
+  ReadMReg((dt3155_lbase[minor] + INT_CSR), int_csr_r.reg);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: drivers/staging/dt3155/dt3155_drv.c:156:
+  WriteMReg((dt3155_lbase[minor] + INT_CSR), int_csr_r.reg);$

CHECK:CAMELCASE: Avoid CamelCase: <WriteMReg>
#121: FILE: drivers/staging/dt3155/dt3155_drv.c:156:
+  WriteMReg((dt3155_lbase[minor] + INT_CSR), int_csr_r.reg);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: drivers/staging/dt3155/dt3155_drv.c:158:
+  dt3155_status[minor].state &= ~(DT3155_STATE_STOP|0xff);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#124: FILE: drivers/staging/dt3155/dt3155_drv.c:158:
+  dt3155_status[minor].state &= ~(DT3155_STATE_STOP|0xff);
                                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: drivers/staging/dt3155/dt3155_drv.c:160:
+  dt3155_status[minor].state |= DT3155_STATE_IDLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: drivers/staging/dt3155/dt3155_drv.c:161:
+  dt3155_fbuffer[minor]->stop_acquire = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: drivers/staging/dt3155/dt3155_drv.c:162:
+  dt3155_fbuffer[minor]->even_stopped = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: drivers/staging/dt3155/dt3155_drv.c:186:
+    for (index = 0; index < ndevices; index++) {$

CHECK:SPACING: No space is necessary after a cast
#153: FILE: drivers/staging/dt3155/dt3155_drv.c:187:
+	if (dev_id == (void *) &dt3155_status[index]) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: drivers/staging/dt3155/dt3155_drv.c:191:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: drivers/staging/dt3155/dt3155_drv.c:194:
+    if (minor < 0 || minor >= MAXBOARDS) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#167: FILE: drivers/staging/dt3155/dt3155_drv.c:195:
+	printk(KERN_ERR "dt3155_isr called with invalid dev_id\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dt3155_isr', this function's name, in a string
#167: FILE: drivers/staging/dt3155/dt3155_drv.c:195:
+	printk(KERN_ERR "dt3155_isr called with invalid dev_id\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: drivers/staging/dt3155/dt3155_drv.c:197:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: drivers/staging/dt3155/dt3155_drv.c:200:
+  ReadMReg((dt3155_lbase[minor] + CSR1), csr1_r.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: drivers/staging/dt3155/dt3155_drv.c:202:
+    if ((csr1_r.fld.FLD_CRPT_EVE) || (csr1_r.fld.FLD_CRPT_ODD)) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'csr1_r.fld.FLD_CRPT_EVE'
#184: FILE: drivers/staging/dt3155/dt3155_drv.c:202:
+    if ((csr1_r.fld.FLD_CRPT_EVE) || (csr1_r.fld.FLD_CRPT_ODD)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'csr1_r.fld.FLD_CRPT_ODD'
#184: FILE: drivers/staging/dt3155/dt3155_drv.c:202:
+    if ((csr1_r.fld.FLD_CRPT_EVE) || (csr1_r.fld.FLD_CRPT_ODD)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#189: FILE: drivers/staging/dt3155/dt3155_drv.c:207:
+	printk("dt3155:  corrupt field\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: drivers/staging/dt3155/dt3155_drv.c:211:
+  ReadMReg((dt3155_lbase[minor] + INT_CSR), int_csr_r.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: drivers/staging/dt3155/dt3155_drv.c:214:
+    if (int_csr_r.fld.FLD_END_EVE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: drivers/staging/dt3155/dt3155_drv.c:220:
+      ReadI2C(dt3155_lbase[minor], EVEN_CSR, &i2c_even_csr.reg);$

CHECK:CAMELCASE: Avoid CamelCase: <ReadI2C>
#210: FILE: drivers/staging/dt3155/dt3155_drv.c:220:
+      ReadI2C(dt3155_lbase[minor], EVEN_CSR, &i2c_even_csr.reg);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/staging/dt3155/dt3155_drv.c:226:
+    if (dt3155_fbuffer[minor]->stop_acquire) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#230: FILE: drivers/staging/dt3155/dt3155_drv.c:227:
+	printk("dt3155:  even stopped.\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: drivers/staging/dt3155/dt3155_drv.c:233:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: drivers/staging/dt3155/dt3155_drv.c:235:
+      WriteMReg((dt3155_lbase[minor] + INT_CSR), int_csr_r.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: drivers/staging/dt3155/dt3155_drv.c:238:
+    if ((dt3155_status[minor].state & DT3155_STATE_MODE) ==$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#253: FILE: drivers/staging/dt3155/dt3155_drv.c:241:
+	/* GCS (Aug 2, 2002) -- In field mode, dma the odd field
+	into the lower half of the buffer */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#253: FILE: drivers/staging/dt3155/dt3155_drv.c:241:
+	into the lower half of the buffer */

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: drivers/staging/dt3155/dt3155_drv.c:243:
+	const u32 stride =  dt3155_status[minor].config.cols;
+	buffer_addr = dt3155_fbuffer[minor]->

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dt3155_fbuffer[minor]->frame_info[dt3155_fbuffer[minor]->active_buf'
#256: FILE: drivers/staging/dt3155/dt3155_drv.c:244:
+	buffer_addr = dt3155_fbuffer[minor]->
+	    frame_info[dt3155_fbuffer[minor]->active_buf].addr

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: drivers/staging/dt3155/dt3155_drv.c:257:
+      if (i2c_even_csr.fld.ERROR_EVE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: drivers/staging/dt3155/dt3155_drv.c:260:
+      WriteI2C(dt3155_lbase[minor], EVEN_CSR, i2c_even_csr.reg);$

CHECK:CAMELCASE: Avoid CamelCase: <WriteI2C>
#278: FILE: drivers/staging/dt3155/dt3155_drv.c:260:
+      WriteI2C(dt3155_lbase[minor], EVEN_CSR, i2c_even_csr.reg);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: drivers/staging/dt3155/dt3155_drv.c:264:
+      dt3155_fbuffer[minor]->even_happened = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: drivers/staging/dt3155/dt3155_drv.c:268:
+      do_gettimeofday(&(dt3155_fbuffer[minor]->$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dt3155_fbuffer[minor]->frame_info[dt3155_fbuffer[minor]'
#291: FILE: drivers/staging/dt3155/dt3155_drv.c:269:
+      do_gettimeofday(&(dt3155_fbuffer[minor]->
+			 frame_info[dt3155_fbuffer[minor]->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'frame_info[dt3155_fbuffer[minor]->active_buf'
#292: FILE: drivers/staging/dt3155/dt3155_drv.c:270:
+			 frame_info[dt3155_fbuffer[minor]->
+				     active_buf].time));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: drivers/staging/dt3155/dt3155_drv.c:275:
+    if (int_csr_r.fld.FLD_END_ODD) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#343: FILE: drivers/staging/dt3155/dt3155_drv.c:289:
+		printk(KERN_DEBUG "dt3155:  stopping odd..\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#344: FILE: drivers/staging/dt3155/dt3155_drv.c:290:
+		if (i2c_odd_csr.fld.SNGL_ODD) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#347: FILE: drivers/staging/dt3155/dt3155_drv.c:293:
+			dt3155_status[minor].state &= ~(DT3155_STATE_STOP|0xff);
 			                                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#354: FILE: drivers/staging/dt3155/dt3155_drv.c:300:
+			printk(KERN_DEBUG "dt3155:  state is now %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: drivers/staging/dt3155/dt3155_drv.c:301:
+			printk(KERN_DEBUG "dt3155:  state is now %x\n",
+			dt3155_status[minor].state);

CHECK:BRACES: Unbalanced braces around else statement
#356: FILE: drivers/staging/dt3155/dt3155_drv.c:302:
+		} else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: drivers/staging/dt3155/dt3155_drv.c:306:
+      WriteMReg((dt3155_lbase[minor] + INT_CSR), int_csr_r.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: drivers/staging/dt3155/dt3155_drv.c:311:
+    if (dt3155_fbuffer[minor]->even_happened ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: drivers/staging/dt3155/dt3155_drv.c:321:
+    if (dt3155_fbuffer[minor]->nbuffers > 2) {$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#396: FILE: drivers/staging/dt3155/dt3155_drv.c:324:
+		/* The number of active + locked buffers is
+		* at most 2, and since there are none empty, there

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#398: FILE: drivers/staging/dt3155/dt3155_drv.c:326:
+		* This is where we 'drop frames', oldest first. */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#432: FILE: drivers/staging/dt3155/dt3155_drv.c:331:
+	/* The ready_que can't be full, since we know
+	* there is one active buffer right now, so it's safe

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#433: FILE: drivers/staging/dt3155/dt3155_drv.c:332:
+	* to push the active buf on the ready_que. */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dt3155_fbuffer[minor]->frame_info[dt3155_fbuffer[minor]'
#438: FILE: drivers/staging/dt3155/dt3155_drv.c:337:
+	dt3155_fbuffer[minor]->
+		frame_info[dt3155_fbuffer[minor]->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'frame_info[dt3155_fbuffer[minor]->active_buf'
#439: FILE: drivers/staging/dt3155/dt3155_drv.c:338:
+		frame_info[dt3155_fbuffer[minor]->
+			active_buf].tag = ++unique_tag;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: drivers/staging/dt3155/dt3155_drv.c:339:
+    } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#440: FILE: drivers/staging/dt3155/dt3155_drv.c:339:
+    } else {
[...]
+		if (dt3155_fbuffer[minor]->locked_buf < 0) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#443: FILE: drivers/staging/dt3155/dt3155_drv.c:342:
+		/* There is 1 active buffer.
+		* If there is a locked buffer, keep the active buffer

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: drivers/staging/dt3155/dt3155_drv.c:357:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: drivers/staging/dt3155/dt3155_drv.c:372:
+      buffer_addr = dt3155_fbuffer[minor]->$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dt3155_fbuffer[minor]->frame_info[dt3155_fbuffer[minor]->active_buf'
#492: FILE: drivers/staging/dt3155/dt3155_drv.c:373:
+      buffer_addr = dt3155_fbuffer[minor]->
+	frame_info[dt3155_fbuffer[minor]->active_buf].addr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: drivers/staging/dt3155/dt3155_drv.c:374:
+    if ((dt3155_status[minor].state & DT3155_STATE_MODE) ==$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#493: FILE: drivers/staging/dt3155/dt3155_drv.c:374:
+    if ((dt3155_status[minor].state & DT3155_STATE_MODE) ==
[...]
+		WriteMReg((dt3155_lbase[minor] + EVEN_DMA_START), buffer_addr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: drivers/staging/dt3155/dt3155_drv.c:377:
+    else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#496: FILE: drivers/staging/dt3155/dt3155_drv.c:377:
+    else {
+		WriteMReg((dt3155_lbase[minor] + EVEN_DMA_START), buffer_addr);

CHECK:BRACES: Unbalanced braces around else statement
#496: FILE: drivers/staging/dt3155/dt3155_drv.c:377:
+    else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: drivers/staging/dt3155/dt3155_drv.c:382:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: drivers/staging/dt3155/dt3155_drv.c:386:
+      if (i2c_odd_csr.fld.ERROR_ODD)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: drivers/staging/dt3155/dt3155_drv.c:389:
+      WriteI2C(dt3155_lbase[minor], ODD_CSR, i2c_odd_csr.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: drivers/staging/dt3155/dt3155_drv.c:394:
+  printk("neither even nor odd.  shared perhaps?\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#516: FILE: drivers/staging/dt3155/dt3155_drv.c:394:
+  printk("neither even nor odd.  shared perhaps?\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: drivers/staging/dt3155/dt3155_drv.c:405:
+  const u32 stride =  dt3155_status[minor].config.cols;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: drivers/staging/dt3155/dt3155_drv.c:407:
+    switch (dt3155_status[minor].state & DT3155_STATE_MODE) {$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dt3155_status[minor].fbuffer.frame_info[dt3155_status[minor].fbuffer.active_buf'
#535: FILE: drivers/staging/dt3155/dt3155_drv.c:411:
+	even_dma_start_r  = dt3155_status[minor].
+	fbuffer.frame_info[dt3155_status[minor].fbuffer.active_buf].addr;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dt3155_status[minor].fbuffer.frame_info[dt3155_status[minor].fbuffer.active_buf'
#557: FILE: drivers/staging/dt3155/dt3155_drv.c:428:
+	even_dma_start_r  = dt3155_status[minor].
+	  fbuffer.frame_info[dt3155_status[minor].fbuffer.active_buf].addr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: drivers/staging/dt3155/dt3155_drv.c:448:
+  ReadI2C(dt3155_lbase[minor], CONFIG, &i2c_csr2.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: drivers/staging/dt3155/dt3155_drv.c:450:
+  WriteI2C(dt3155_lbase[minor], CONFIG, i2c_config.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: drivers/staging/dt3155/dt3155_drv.c:470:
+  WriteMReg((dt3155_lbase[minor] + CSR1), csr1_r.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: drivers/staging/dt3155/dt3155_drv.c:479:
+  WriteMReg((dt3155_lbase[minor] + INT_CSR), int_csr_r.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: drivers/staging/dt3155/dt3155_drv.c:483:
+  ReadI2C(dt3155_lbase[minor], CSR2, &i2c_csr2.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#611: FILE: drivers/staging/dt3155/dt3155_drv.c:486:
+  WriteI2C(dt3155_lbase[minor], CSR2, i2c_csr2.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: drivers/staging/dt3155/dt3155_drv.c:505:
+    if (minor >= MAXBOARDS || minor < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: drivers/staging/dt3155/dt3155_drv.c:509:
+    if (_IOC_NR(cmd) > DT3155_IOC_MAXNR) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#636: FILE: drivers/staging/dt3155/dt3155_drv.c:510:
+	printk("DT3155: invalid IOCTL(0x%x)\n", cmd);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#637: FILE: drivers/staging/dt3155/dt3155_drv.c:511:
+	printk("DT3155: Valid commands (0x%x), (0x%x), (0x%x), (0x%x), (0x%x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: drivers/staging/dt3155/dt3155_drv.c:512:
+	printk("DT3155: Valid commands (0x%x), (0x%x), (0x%x), (0x%x), (0x%x)\n",
+		(unsigned int)DT3155_GET_CONFIG,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: drivers/staging/dt3155/dt3155_drv.c:520:
+    switch (cmd) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: drivers/staging/dt3155/dt3155_drv.c:522:
+    {$

CHECK:SPACING: No space is necessary after a cast
#672: FILE: drivers/staging/dt3155/dt3155_drv.c:526:
+		if (copy_from_user((void *)&tmp, (void *) arg, sizeof(tmp)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#672: FILE: drivers/staging/dt3155/dt3155_drv.c:526:
+		struct dt3155_config_s tmp;
+		if (copy_from_user((void *)&tmp, (void *) arg, sizeof(tmp)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: drivers/staging/dt3155/dt3155_drv.c:530:
+			if (tmp.rows > DT3155_MAX_ROWS ||
+				tmp.cols > DT3155_MAX_COLS ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: drivers/staging/dt3155/dt3155_drv.c:540:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: drivers/staging/dt3155/dt3155_drv.c:542:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: drivers/staging/dt3155/dt3155_drv.c:547:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#701: FILE: drivers/staging/dt3155/dt3155_drv.c:549:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: drivers/staging/dt3155/dt3155_drv.c:553:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: drivers/staging/dt3155/dt3155_drv.c:555:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: drivers/staging/dt3155/dt3155_drv.c:568:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: drivers/staging/dt3155/dt3155_drv.c:570:
+    {$

CHECK:SPACING: No space is necessary after a cast
#764: FILE: drivers/staging/dt3155/dt3155_drv.c:584:
+	if (copy_to_user((void *) arg, (void *) &dt3155_status[minor],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: drivers/staging/dt3155/dt3155_drv.c:585:
+	if (copy_to_user((void *) arg, (void *) &dt3155_status[minor],
+		sizeof(dt3155_status_t)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: drivers/staging/dt3155/dt3155_drv.c:588:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: drivers/staging/dt3155/dt3155_drv.c:590:
+    {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#777: FILE: drivers/staging/dt3155/dt3155_drv.c:591:
+	printk("DT3155: invalid IOCTL(0x%x)\n", cmd);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#778: FILE: drivers/staging/dt3155/dt3155_drv.c:592:
+	printk("DT3155: Valid commands (0x%x), (0x%x), (0x%x), (0x%x), (0x%x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: drivers/staging/dt3155/dt3155_drv.c:593:
+	printk("DT3155: Valid commands (0x%x), (0x%x), (0x%x), (0x%x), (0x%x)\n",
+		(unsigned int)DT3155_GET_CONFIG,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: drivers/staging/dt3155/dt3155_drv.c:598:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#787: FILE: drivers/staging/dt3155/dt3155_drv.c:599:
+    return -ENOSYS;$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#787: FILE: drivers/staging/dt3155/dt3155_drv.c:599:
+    return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: drivers/staging/dt3155/dt3155_drv.c:618:
+    if (offset >= __pa(high_memory) || (file->f_flags & O_SYNC))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: drivers/staging/dt3155/dt3155_drv.c:625:
+    if ((offset == dt3155_status[minor].reg_addr &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#821: FILE: drivers/staging/dt3155/dt3155_drv.c:625:
+    if ((offset == dt3155_status[minor].reg_addr &&
[...]
+		if (remap_pfn_range(vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: drivers/staging/dt3155/dt3155_drv.c:626:
+    if ((offset == dt3155_status[minor].reg_addr &&
+	vma->vm_end - vma->vm_start == PCI_PAGE_SIZE) ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#825: FILE: drivers/staging/dt3155/dt3155_drv.c:629:
+		if (remap_pfn_range(vma,
[...]
+				printk("DT3155: remap_page_range() failed.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#826: FILE: drivers/staging/dt3155/dt3155_drv.c:630:
+		if (remap_pfn_range(vma,
 			vma->vm_start,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#832: FILE: drivers/staging/dt3155/dt3155_drv.c:634:
+				printk("DT3155: remap_page_range() failed.\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: drivers/staging/dt3155/dt3155_drv.c:637:
+    } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#835: FILE: drivers/staging/dt3155/dt3155_drv.c:637:
+    } else {
+		printk("DT3155: dt3155_mmap() bad call.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#836: FILE: drivers/staging/dt3155/dt3155_drv.c:638:
+		printk("DT3155: dt3155_mmap() bad call.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dt3155_mmap', this function's name, in a string
#836: FILE: drivers/staging/dt3155/dt3155_drv.c:638:
+		printk("DT3155: dt3155_mmap() bad call.\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#847: FILE: drivers/staging/dt3155/dt3155_drv.c:642:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: drivers/staging/dt3155/dt3155_drv.c:656:
+    if (dt3155_dev_open[minor]) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#864: FILE: drivers/staging/dt3155/dt3155_drv.c:657:
+	printk("DT3155:  Already opened by another process.\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#866: FILE: drivers/staging/dt3155/dt3155_drv.c:659:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#873: FILE: drivers/staging/dt3155/dt3155_drv.c:661:
+    if (dt3155_status[minor].device_installed == 0) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#874: FILE: drivers/staging/dt3155/dt3155_drv.c:662:
+	printk("DT3155 Open Error: No such device dt3155 minor number %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#875: FILE: drivers/staging/dt3155/dt3155_drv.c:663:
+	printk("DT3155 Open Error: No such device dt3155 minor number %d\n",
+		minor);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#884: FILE: drivers/staging/dt3155/dt3155_drv.c:667:
+    if (dt3155_status[minor].state != DT3155_STATE_IDLE) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#885: FILE: drivers/staging/dt3155/dt3155_drv.c:668:
+	printk("DT3155:  Not in idle state (state = %x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#886: FILE: drivers/staging/dt3155/dt3155_drv.c:669:
+	printk("DT3155:  Not in idle state (state = %x)\n",
+		dt3155_status[minor].state);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#888: FILE: drivers/staging/dt3155/dt3155_drv.c:671:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: drivers/staging/dt3155/dt3155_drv.c:673:
+    printk("DT3155: Device opened.\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#891: FILE: drivers/staging/dt3155/dt3155_drv.c:673:
+    printk("DT3155: Device opened.\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: drivers/staging/dt3155/dt3155_drv.c:675:
+    dt3155_dev_open[minor] = 1 ;$

WARNING:SPACING: space prohibited before semicolon
#894: FILE: drivers/staging/dt3155/dt3155_drv.c:675:
+    dt3155_dev_open[minor] = 1 ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: drivers/staging/dt3155/dt3155_drv.c:677:
+    dt3155_flush(minor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: drivers/staging/dt3155/dt3155_drv.c:680:
+    int_csr_r.reg = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: drivers/staging/dt3155/dt3155_drv.c:681:
+    WriteMReg((dt3155_lbase[minor] + INT_CSR), int_csr_r.reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: drivers/staging/dt3155/dt3155_drv.c:683:
+    init_waitqueue_head(&(dt3155_read_wait_queue[minor]));$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dt3155_read_wait_queue[minor]
#907: FILE: drivers/staging/dt3155/dt3155_drv.c:683:
+    init_waitqueue_head(&(dt3155_read_wait_queue[minor]));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: drivers/staging/dt3155/dt3155_drv.c:685:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#922: FILE: drivers/staging/dt3155/dt3155_drv.c:697:
+    int minor;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#932: FILE: drivers/staging/dt3155/dt3155_drv.c:699:
+    minor = MINOR(inode->i_rdev); /* which device are we closing */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: drivers/staging/dt3155/dt3155_drv.c:700:
+    if (!dt3155_dev_open[minor])$

CHECK:BRACES: braces {} should be used on all arms of this statement
#933: FILE: drivers/staging/dt3155/dt3155_drv.c:700:
+    if (!dt3155_dev_open[minor])
[...]
+    else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#934: FILE: drivers/staging/dt3155/dt3155_drv.c:701:
+	printk("DT3155: attempt to CLOSE a not OPEN device\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#935: FILE: drivers/staging/dt3155/dt3155_drv.c:702:
+    else {$

CHECK:BRACES: Unbalanced braces around else statement
#935: FILE: drivers/staging/dt3155/dt3155_drv.c:702:
+    else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#946: FILE: drivers/staging/dt3155/dt3155_drv.c:708:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#965: FILE: drivers/staging/dt3155/dt3155_drv.c:719:
+    int^I^Iminor = MINOR(filep->f_dentry->d_inode->i_rdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#966: FILE: drivers/staging/dt3155/dt3155_drv.c:720:
+    u32^I^Ioffset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#967: FILE: drivers/staging/dt3155/dt3155_drv.c:721:
+    int^I^Iframe_index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#968: FILE: drivers/staging/dt3155/dt3155_drv.c:722:
+    frame_info_t^I*frame_info_p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: drivers/staging/dt3155/dt3155_drv.c:726:
+    if (count != sizeof(dt3155_read_t)) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#973: FILE: drivers/staging/dt3155/dt3155_drv.c:727:
+	printk("DT3155 ERROR (NJC): count is not right\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#985: FILE: drivers/staging/dt3155/dt3155_drv.c:733:
+    /* Hack here -- I'm going to allow reading even when idle.
+    * this is so that the frames can be read after STOP has

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#989: FILE: drivers/staging/dt3155/dt3155_drv.c:737:
+    * and the device is idle, then it could sit here forever! */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: drivers/staging/dt3155/dt3155_drv.c:743:
+    if (filep->f_flags & O_NDELAY) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1024: FILE: drivers/staging/dt3155/dt3155_drv.c:744:
+	if ((frame_index = dt3155_get_ready_buffer(minor)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1029: FILE: drivers/staging/dt3155/dt3155_drv.c:749:
+    } else {$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1031: FILE: drivers/staging/dt3155/dt3155_drv.c:751:
+	/*
+	* sleep till data arrives , or we get interrupted.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1036: FILE: drivers/staging/dt3155/dt3155_drv.c:756:
+	wait_event_interruptible(dt3155_read_wait_queue[minor],
+				(frame_index = dt3155_get_ready_buffer(minor))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1040: FILE: drivers/staging/dt3155/dt3155_drv.c:760:
+		printk("DT3155: read: interrupted\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1049: FILE: drivers/staging/dt3155/dt3155_drv.c:767:
+    frame_info_p = &dt3155_status[minor].fbuffer.frame_info[frame_index];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1054: FILE: drivers/staging/dt3155/dt3155_drv.c:770:
+    offset = frame_info_p->addr - dt3155_status[minor].mem_addr;$

CHECK:SPACING: No space is necessary after a cast
#1064: FILE: drivers/staging/dt3155/dt3155_drv.c:772:
+    put_user(offset, (unsigned int *) buf);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: drivers/staging/dt3155/dt3155_drv.c:772:
+    put_user(offset, (unsigned int *) buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1065: FILE: drivers/staging/dt3155/dt3155_drv.c:773:
+    buf += sizeof(u32);$

CHECK:SPACING: No space is necessary after a cast
#1066: FILE: drivers/staging/dt3155/dt3155_drv.c:774:
+    put_user(dt3155_status[minor].fbuffer.frame_count, (unsigned int *) buf);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1066: FILE: drivers/staging/dt3155/dt3155_drv.c:774:
+    put_user(dt3155_status[minor].fbuffer.frame_count, (unsigned int *) buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1067: FILE: drivers/staging/dt3155/dt3155_drv.c:775:
+    buf += sizeof(u32);$

CHECK:SPACING: No space is necessary after a cast
#1068: FILE: drivers/staging/dt3155/dt3155_drv.c:776:
+    put_user(dt3155_status[minor].state, (unsigned int *) buf);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: drivers/staging/dt3155/dt3155_drv.c:776:
+    put_user(dt3155_status[minor].state, (unsigned int *) buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1069: FILE: drivers/staging/dt3155/dt3155_drv.c:777:
+    buf += sizeof(u32);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1070: FILE: drivers/staging/dt3155/dt3155_drv.c:778:
+    if (copy_to_user(buf, frame_info_p, sizeof(frame_info_t)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1074: FILE: drivers/staging/dt3155/dt3155_drv.c:781:
+    return sizeof(dt3155_read_t);$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1078: FILE: drivers/staging/dt3155/dt3155_drv.c:784:
+static unsigned int dt3155_poll(struct file *filp, poll_table *wait)
                                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1081: FILE: drivers/staging/dt3155/dt3155_drv.c:786:
+    int minor = MINOR(filp->f_dentry->d_inode->i_rdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1085: FILE: drivers/staging/dt3155/dt3155_drv.c:788:
+    if (!is_ready_buf_empty(minor))$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1089: FILE: drivers/staging/dt3155/dt3155_drv.c:791:
+    poll_wait(filp, &dt3155_read_wait_queue[minor], wait);
               ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1089: FILE: drivers/staging/dt3155/dt3155_drv.c:791:
+    poll_wait(filp, &dt3155_read_wait_queue[minor], wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1092: FILE: drivers/staging/dt3155/dt3155_drv.c:793:
+    return 0;$

WARNING:INDENTED_LABEL: labels should not be indented
#1106: FILE: drivers/staging/dt3155/dt3155_drv.c:803:
+    read:	dt3155_read,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1107: FILE: drivers/staging/dt3155/dt3155_drv.c:804:
+    ioctl :^Idt3155_ioctl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1108: FILE: drivers/staging/dt3155/dt3155_drv.c:805:
+    mm$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1109: FILE: drivers/staging/dt3155/dt3155_drv.c:806:
+    ap :^Idt3155_mmap,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1110: FILE: drivers/staging/dt3155/dt3155_drv.c:807:
+    poll :^Idt3155_poll,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1111: FILE: drivers/staging/dt3155/dt3155_drv.c:808:
+    open :^Idt3155_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1112: FILE: drivers/staging/dt3155/dt3155_drv.c:809:
+    release :^Idt3155_close$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1137: FILE: drivers/staging/dt3155/dt3155_drv.c:820:
+    struct pci_dev *pci_dev = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1138: FILE: drivers/staging/dt3155/dt3155_drv.c:821:
+    int error, pci_index = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1139: FILE: drivers/staging/dt3155/dt3155_drv.c:822:
+    unsigned short rev_device;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1140: FILE: drivers/staging/dt3155/dt3155_drv.c:823:
+    unsigned long base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1141: FILE: drivers/staging/dt3155/dt3155_drv.c:824:
+    unsigned char irq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1143: FILE: drivers/staging/dt3155/dt3155_drv.c:826:
+    while ((pci_dev = pci_get_device$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1148: FILE: drivers/staging/dt3155/dt3155_drv.c:831:
+	if ((error =
[...]
 	continue;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1148: FILE: drivers/staging/dt3155/dt3155_drv.c:831:
+	if ((error =

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1157: FILE: drivers/staging/dt3155/dt3155_drv.c:836:
+	DT_3155_DEBUG_MSG("DT3155: Device number %d \n", pci_index);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1176: FILE: drivers/staging/dt3155/dt3155_drv.c:840:
+		printk("DT3155: ERROR - found %d devices, but driver "

WARNING:SPLIT_STRING: quoted string split across lines
#1177: FILE: drivers/staging/dt3155/dt3155_drv.c:841:
+		printk("DT3155: ERROR - found %d devices, but driver "
+		"only configured for %d devices\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1192: FILE: drivers/staging/dt3155/dt3155_drv.c:848:
+	/* Now, just go out and make sure that this/these device(s) is/are
+	actually mapped into the kernel address space */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1192: FILE: drivers/staging/dt3155/dt3155_drv.c:848:
+	actually mapped into the kernel address space */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1193: FILE: drivers/staging/dt3155/dt3155_drv.c:849:
+	if ((error = pci_read_config_dword(pci_dev, PCI_BASE_ADDRESS_0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1194: FILE: drivers/staging/dt3155/dt3155_drv.c:850:
+	if ((error = pci_read_config_dword(pci_dev, PCI_BASE_ADDRESS_0,
+					    (u32 *) &base))) {

CHECK:SPACING: No space is necessary after a cast
#1194: FILE: drivers/staging/dt3155/dt3155_drv.c:850:
+					    (u32 *) &base))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1195: FILE: drivers/staging/dt3155/dt3155_drv.c:851:
+		printk("DT3155: Was not able to find device \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1195: FILE: drivers/staging/dt3155/dt3155_drv.c:851:
+		printk("DT3155: Was not able to find device \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1198: FILE: drivers/staging/dt3155/dt3155_drv.c:854:
+	DT_3155_DEBUG_MSG("DT3155: Base address 0 for device is %lx \n", base);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1199: FILE: drivers/staging/dt3155/dt3155_drv.c:855:
+	dt3155_status[pci_index-1].reg_addr = base;
 	                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1202: FILE: drivers/staging/dt3155/dt3155_drv.c:858:
+	* can access it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1202: FILE: drivers/staging/dt3155/dt3155_drv.c:858:
+	/* Remap the base address to a logical address through which we
+	* can access it. */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1203: FILE: drivers/staging/dt3155/dt3155_drv.c:859:
+	dt3155_lbase[pci_index - 1] = ioremap(base,PCI_PAGE_SIZE);
 	                                          ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1205: FILE: drivers/staging/dt3155/dt3155_drv.c:861:
+	DT_3155_DEBUG_MSG("DT3155: New logical address is %p \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1206: FILE: drivers/staging/dt3155/dt3155_drv.c:862:
+	DT_3155_DEBUG_MSG("DT3155: New logical address is %p \n",
 			dt3155_lbase[pci_index-1]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1211: FILE: drivers/staging/dt3155/dt3155_drv.c:863:
+	if (!dt3155_lbase[pci_index-1]) {
 	                           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1212: FILE: drivers/staging/dt3155/dt3155_drv.c:864:
+		printk("DT3155: Unable to remap control registers\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1220: FILE: drivers/staging/dt3155/dt3155_drv.c:868:
+	if ((error = pci_read_config_byte(pci_dev, PCI_INTERRUPT_LINE, &irq))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1221: FILE: drivers/staging/dt3155/dt3155_drv.c:869:
+		printk("DT3155: Was not able to find device \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1221: FILE: drivers/staging/dt3155/dt3155_drv.c:869:
+		printk("DT3155: Was not able to find device \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1233: FILE: drivers/staging/dt3155/dt3155_drv.c:872:
+	DT_3155_DEBUG_MSG("DT3155: IRQ is %d \n", irq);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1234: FILE: drivers/staging/dt3155/dt3155_drv.c:873:
+	dt3155_status[pci_index-1].irq = irq;
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1236: FILE: drivers/staging/dt3155/dt3155_drv.c:875:
+	dt3155_status[pci_index-1].device_installed = 1;
 	                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1237: FILE: drivers/staging/dt3155/dt3155_drv.c:876:
+	printk("DT3155: Installing device %d w/irq %d and address %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: drivers/staging/dt3155/dt3155_drv.c:877:
+	printk("DT3155: Installing device %d w/irq %d and address %p\n",
+		pci_index,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1239: FILE: drivers/staging/dt3155/dt3155_drv.c:878:
+		dt3155_status[pci_index-1].irq,
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1240: FILE: drivers/staging/dt3155/dt3155_drv.c:879:
+		dt3155_lbase[pci_index-1]);
 		                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: drivers/staging/dt3155/dt3155_drv.c:882:
+    ndevices = pci_index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1247: FILE: drivers/staging/dt3155/dt3155_drv.c:884:
+    return DT_3155_SUCCESS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1252: FILE: drivers/staging/dt3155/dt3155_drv.c:887:
+    pci_dev_put(pci_dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1253: FILE: drivers/staging/dt3155/dt3155_drv.c:888:
+    return DT_3155_FAILURE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1264: FILE: drivers/staging/dt3155/dt3155_drv.c:898:
+    int index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1265: FILE: drivers/staging/dt3155/dt3155_drv.c:899:
+    int rcode = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1266: FILE: drivers/staging/dt3155/dt3155_drv.c:900:
+    char *devname[MAXBOARDS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1269: FILE: drivers/staging/dt3155/dt3155_drv.c:902:
+    devname[0] = "dt3155a";$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1272: FILE: drivers/staging/dt3155/dt3155_drv.c:904:
+    devname[1] = "dt3155b";$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1276: FILE: drivers/staging/dt3155/dt3155_drv.c:907:
+    printk("DT3155: Loading module...\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1276: FILE: drivers/staging/dt3155/dt3155_drv.c:907:
+    printk("DT3155: Loading module...\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1284: FILE: drivers/staging/dt3155/dt3155_drv.c:910:
+    rcode = register_chrdev(dt3155_major, "dt3155", &dt3155_fops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1285: FILE: drivers/staging/dt3155/dt3155_drv.c:911:
+    if (rcode < 0) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1286: FILE: drivers/staging/dt3155/dt3155_drv.c:912:
+	printk(KERN_INFO "DT3155: register_chrdev failed \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1286: FILE: drivers/staging/dt3155/dt3155_drv.c:912:
+	printk(KERN_INFO "DT3155: register_chrdev failed \n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: drivers/staging/dt3155/dt3155_drv.c:915:
+    if (dt3155_major == 0)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1313: FILE: drivers/staging/dt3155/dt3155_drv.c:918:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1316: FILE: drivers/staging/dt3155/dt3155_drv.c:921:
+    for (index = 0; index < MAXBOARDS; index++) {$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1334: FILE: drivers/staging/dt3155/dt3155_drv.c:937:
+    * number of cards found in this machine. */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1334: FILE: drivers/staging/dt3155/dt3155_drv.c:937:
+    /* Now let's find the hardware.  find_PCI() will set ndevices to the
+    * number of cards found in this machine. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1341: FILE: drivers/staging/dt3155/dt3155_drv.c:939:
+	if ((rcode = find_PCI()) !=  DT_3155_SUCCESS) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1342: FILE: drivers/staging/dt3155/dt3155_drv.c:940:
+		printk("DT3155 error: find_PCI() failed to find dt3155 board(s)\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1355: FILE: drivers/staging/dt3155/dt3155_drv.c:947:
+    if ((rcode = dt3155_setup_buffers(&allocatorAddr)) < 0) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1355: FILE: drivers/staging/dt3155/dt3155_drv.c:947:
+    if ((rcode = dt3155_setup_buffers(&allocatorAddr)) < 0) {

CHECK:CAMELCASE: Avoid CamelCase: <allocatorAddr>
#1355: FILE: drivers/staging/dt3155/dt3155_drv.c:947:
+    if ((rcode = dt3155_setup_buffers(&allocatorAddr)) < 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1356: FILE: drivers/staging/dt3155/dt3155_drv.c:948:
+	printk("DT3155: Error: setting up buffer not large enough.");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1380: FILE: drivers/staging/dt3155/dt3155_drv.c:955:
+    for (index = 0;  index < ndevices;  index++) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1381: FILE: drivers/staging/dt3155/dt3155_drv.c:956:
+	printk("DT3155: Device = %d; acq_mode = %d; "

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#1383: FILE: drivers/staging/dt3155/dt3155_drv.c:958:
+		index ,
 		      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1388: FILE: drivers/staging/dt3155/dt3155_drv.c:963:
+	printk("DT3155: m_addr = 0x%x; m_size = %ld; "

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#1391: FILE: drivers/staging/dt3155/dt3155_drv.c:966:
+		(long int)dt3155_status[index].mem_size,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1421: FILE: drivers/staging/dt3155/dt3155_drv.c:972:
+    int_csr_r.reg = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1422: FILE: drivers/staging/dt3155/dt3155_drv.c:973:
+    for (index = 0;  index < ndevices;  index++) {$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1426: FILE: drivers/staging/dt3155/dt3155_drv.c:977:
+		/*
+		* This driver *looks* like it can handle sharing interrupts,

CHECK:SPACING: No space is necessary after a cast
#1434: FILE: drivers/staging/dt3155/dt3155_drv.c:985:
+					(void *) &dt3155_status[index]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1436: FILE: drivers/staging/dt3155/dt3155_drv.c:987:
+			printk("DT3155: minor %d request_irq failed for IRQ %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1437: FILE: drivers/staging/dt3155/dt3155_drv.c:988:
+			printk("DT3155: minor %d request_irq failed for IRQ %d\n",
+				index, dt3155_status[index].irq);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1445: FILE: drivers/staging/dt3155/dt3155_drv.c:995:
+    printk("DT3155: finished loading\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1445: FILE: drivers/staging/dt3155/dt3155_drv.c:995:
+    printk("DT3155: finished loading\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1448: FILE: drivers/staging/dt3155/dt3155_drv.c:997:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1457: FILE: drivers/staging/dt3155/dt3155_drv.c:1006:
+    int index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1460: FILE: drivers/staging/dt3155/dt3155_drv.c:1008:
+    printk("DT3155:  cleanup_module called\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1460: FILE: drivers/staging/dt3155/dt3155_drv.c:1008:
+    printk("DT3155:  cleanup_module called\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1466: FILE: drivers/staging/dt3155/dt3155_drv.c:1012:
+    if (allocatorAddr != 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1470: FILE: drivers/staging/dt3155/dt3155_drv.c:1015:
+    allocator_cleanup();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1474: FILE: drivers/staging/dt3155/dt3155_drv.c:1018:
+    unregister_chrdev(dt3155_major, "dt3155");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1483: FILE: drivers/staging/dt3155/dt3155_drv.c:1020:
+    for (index = 0; index < ndevices; index++) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1485: FILE: drivers/staging/dt3155/dt3155_drv.c:1022:
+		printk("DT3155: Freeing irq %d for device %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1486: FILE: drivers/staging/dt3155/dt3155_drv.c:1023:
+		printk("DT3155: Freeing irq %d for device %d\n",
+		    dt3155_status[index].irq, index);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000487.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 227 warnings, 50 checks, 1432 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000487.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
