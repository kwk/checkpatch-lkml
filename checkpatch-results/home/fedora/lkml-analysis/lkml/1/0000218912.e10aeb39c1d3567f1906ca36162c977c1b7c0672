WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git fastboot-v28-for-linus

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#152: FILE: drivers/md/Kconfig:33:
+config MD_AUTODETECT
+	bool "Autodetect RAID arrays during kernel boot"
+	depends on BLK_DEV_MD
+	default y
+	---help---
+	  If you say Y here, then the kernel will try to autodetect raid
+	  arrays as part of its boot process. 
+
+	  If you don't use raid and say Y, this autodetection can cause 
+	  a several-second delay in the boot time due to various
+	  synchronisation steps that are part of this step.
+
+	  If unsure, say Y.
+
 config MD_LINEAR
 	tristate "Linear (append) mode"
 	depends on BLK_DEV_MD

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: drivers/md/Kconfig:39:
+^I  arrays as part of its boot process. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: drivers/md/Kconfig:41:
+^I  If you don't use raid and say Y, this autodetection can cause $

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#229: FILE: include/asm-generic/vmlinux.lds.h:379:
+	*(.initcall6s.init)						\
 	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: include/linux/init.h:146:
+extern int do_one_initcall(initcall_t fn);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#270: FILE: include/linux/init.h:264:
+#define module_init_async(x)	__initcall_async(x);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: init/Kconfig:531:
+^I  for faster boot. $

WARNING:MISPLACED_INIT: __initdata should be placed after raid_noautodetect
#343: FILE: init/do_mounts_md.c:17:
+static int __initdata raid_noautodetect;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#345: FILE: init/do_mounts_md.c:19:
+static int __initdata raid_noautodetect=1;
                                        ^

WARNING:MISPLACED_INIT: __initdata should be placed after raid_noautodetect
#345: FILE: init/do_mounts_md.c:19:
+static int __initdata raid_noautodetect=1;

WARNING:MISPLACED_INIT: __initdata should be placed after raid_autopart
#347: FILE: init/do_mounts_md.c:21:
+static int __initdata raid_autopart;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#372: FILE: init/do_mounts_md.c:283:
+	printk(KERN_INFO "md: Waiting for all devices to be available before autodetect\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#373: FILE: init/do_mounts_md.c:284:
+	printk(KERN_INFO "md: If you don't use raid, use raid=noautodetect\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#396: FILE: init/do_mounts_md.c:299:
+		printk(KERN_INFO "md: Skipping autodetection of RAID arrays. (raid=autodetect will force)\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#447: FILE: init/initramfs.c:419:
+static char * __init unpack_to_rootfs(char *buf, unsigned len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: init/initramfs.c:583:
+			unpack_to_rootfs(__initramfs_start,
+				 __initramfs_end - __initramfs_start);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#552: FILE: init/main.c:711:
+		printk("calling  %pF @ %i\n", fn, task_pid_nr(current));

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#552: FILE: init/main.c:711:
+		printk("calling  %pF @ %i\n", fn, task_pid_nr(current));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#563: FILE: init/main.c:721:
+		printk("initcall %pF returned %d after %Ld msecs\n", fn,

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#563: FILE: init/main.c:721:
+		printk("initcall %pF returned %d after %Ld msecs\n", fn,

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#563: FILE: init/main.c:721:
+		printk("initcall %pF returned %d after %Ld msecs\n", fn,
+			result, (unsigned long long) delta.tv64 >> 20);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: init/main.c:722:
+		printk("initcall %pF returned %d after %Ld msecs\n", fn,
+			result, (unsigned long long) delta.tv64 >> 20);

CHECK:SPACING: No space is necessary after a cast
#564: FILE: init/main.c:722:
+			result, (unsigned long long) delta.tv64 >> 20);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#572: FILE: init/main.c:747:
+extern initcall_t __async_initcall_start[], __async_initcall_end[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#573: FILE: init/main.c:748:
+extern initcall_t __device_initcall_end[];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#594: FILE: init/main.c:766:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#663: FILE: init/main.c:885:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#676: FILE: init/main.c:898:
+^I$

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#681: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#687: FILE: scripts/bootgraph.pl:2:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#704: FILE: scripts/bootgraph.pl:19:
+# 51 Franklin Street, Fifth Floor,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#722: FILE: scripts/bootgraph.pl:37:
+# 	dmesg | perl scripts/bootgraph.pl > output.svg

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#772: FILE: scripts/bootgraph.pl:87:
+	print "      dmesg | perl scripts/bootgraph.pl > output.svg\n\n";

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218912.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 21 warnings, 6 checks, 623 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218912.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
