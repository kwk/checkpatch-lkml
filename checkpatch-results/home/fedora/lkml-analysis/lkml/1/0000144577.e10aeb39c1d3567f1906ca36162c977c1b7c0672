WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#50: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: include/asm-generic/libgcc/longlong.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#70: FILE: include/asm-generic/libgcc/longlong.h:16:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#71: FILE: include/asm-generic/libgcc/longlong.h:17:
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:CAMELCASE: Avoid CamelCase: <UWtype>
#75: FILE: include/asm-generic/libgcc/longlong.h:21:
+#define __ll_B ((UWtype) 1 << (W_TYPE_SIZE / 2))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <UQItype>
#79: FILE: include/asm-generic/libgcc/longlong.h:25:
+extern const UQItype __clz_tab[256];

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#83: FILE: include/asm-generic/libgcc/longlong.h:29:
+#if !defined (add_ssaaaa)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'al' - possible side-effects?
#84: FILE: include/asm-generic/libgcc/longlong.h:30:
+#define add_ssaaaa(sh, sl, ah, al, bh, bl) \
+  do {									\
+    UWtype __x;								\
+    __x = (al) + (bl);							\
+    (sh) = (ah) + (bh) + (__x < (al));					\
+    (sl) = __x;								\
+  } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: include/asm-generic/libgcc/longlong.h:31:
+  do {^I^I^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#85: FILE: include/asm-generic/libgcc/longlong.h:31:
+  do {									\
+    UWtype __x;								\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: include/asm-generic/libgcc/longlong.h:32:
+    UWtype __x;^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: include/asm-generic/libgcc/longlong.h:33:
+    __x = (al) + (bl);^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: include/asm-generic/libgcc/longlong.h:34:
+    (sh) = (ah) + (bh) + (__x < (al));^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: include/asm-generic/libgcc/longlong.h:35:
+    (sl) = __x;^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: include/asm-generic/libgcc/longlong.h:36:
+  } while (0)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#93: FILE: include/asm-generic/libgcc/longlong.h:39:
+#if !defined (sub_ddmmss)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'al' - possible side-effects?
#94: FILE: include/asm-generic/libgcc/longlong.h:40:
+#define sub_ddmmss(sh, sl, ah, al, bh, bl) \
+  do {									\
+    UWtype __x;								\
+    __x = (al) - (bl);							\
+    (sh) = (ah) - (bh) - (__x > (al));					\
+    (sl) = __x;								\
+  } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: include/asm-generic/libgcc/longlong.h:41:
+  do {^I^I^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#95: FILE: include/asm-generic/libgcc/longlong.h:41:
+  do {									\
+    UWtype __x;								\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: include/asm-generic/libgcc/longlong.h:42:
+    UWtype __x;^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: include/asm-generic/libgcc/longlong.h:43:
+    __x = (al) - (bl);^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: include/asm-generic/libgcc/longlong.h:44:
+    (sh) = (ah) - (bh) - (__x > (al));^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: include/asm-generic/libgcc/longlong.h:45:
+    (sl) = __x;^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: include/asm-generic/libgcc/longlong.h:46:
+  } while (0)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#104: FILE: include/asm-generic/libgcc/longlong.h:50:
+/* If we lack umul_ppmm but have smul_ppmm, define umul_ppmm in terms of
+   smul_ppmm.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#104: FILE: include/asm-generic/libgcc/longlong.h:50:
+   smul_ppmm.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#105: FILE: include/asm-generic/libgcc/longlong.h:51:
+#if !defined (umul_ppmm) && defined (smul_ppmm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#105: FILE: include/asm-generic/libgcc/longlong.h:51:
+#if !defined (umul_ppmm) && defined (smul_ppmm)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: include/asm-generic/libgcc/longlong.h:53:
+  do {^I^I^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#107: FILE: include/asm-generic/libgcc/longlong.h:53:
+  do {									\
+    UWtype __w1;							\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: include/asm-generic/libgcc/longlong.h:54:
+    UWtype __w1;^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: include/asm-generic/libgcc/longlong.h:55:
+    UWtype __xm0 = (u), __xm1 = (v);^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: include/asm-generic/libgcc/longlong.h:56:
+    smul_ppmm (__w1, w0, __xm0, __xm1);^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#110: FILE: include/asm-generic/libgcc/longlong.h:56:
+    smul_ppmm (__w1, w0, __xm0, __xm1);					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: include/asm-generic/libgcc/longlong.h:57:
+    (w1) = __w1 + (-(__xm0 >> (W_TYPE_SIZE - 1)) & __xm1)^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: include/asm-generic/libgcc/longlong.h:59:
+  } while (0)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#117: FILE: include/asm-generic/libgcc/longlong.h:63:
+#if !defined (umul_ppmm)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#118: FILE: include/asm-generic/libgcc/longlong.h:64:
+#define umul_ppmm(w1, w0, u, v)						\
+  do {									\
+    UWtype __x0, __x1, __x2, __x3;					\
+    UHWtype __ul, __vl, __uh, __vh;					\
+									\
+    __ul = __ll_lowpart (u);						\
+    __uh = __ll_highpart (u);						\
+    __vl = __ll_lowpart (v);						\
+    __vh = __ll_highpart (v);						\
+									\
+    __x0 = (UWtype) __ul * __vl;					\
+    __x1 = (UWtype) __ul * __vh;					\
+    __x2 = (UWtype) __uh * __vl;					\
+    __x3 = (UWtype) __uh * __vh;					\
+									\
+    __x1 += __ll_highpart (__x0);/* this can't give carry */		\
+    __x1 += __x2;		/* but this indeed can */		\
+    if (__x1 < __x2)		/* did we get it? */			\
+      __x3 += __ll_B;		/* yes, add it in the proper pos.  */	\
+									\
+    (w1) = __x3 + __ll_highpart (__x1);					\
+    (w0) = __ll_lowpart (__x1) * __ll_B + __ll_lowpart (__x0);		\
+  } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#118: FILE: include/asm-generic/libgcc/longlong.h:64:
+#define umul_ppmm(w1, w0, u, v)						\
+  do {									\
+    UWtype __x0, __x1, __x2, __x3;					\
+    UHWtype __ul, __vl, __uh, __vh;					\
+									\
+    __ul = __ll_lowpart (u);						\
+    __uh = __ll_highpart (u);						\
+    __vl = __ll_lowpart (v);						\
+    __vh = __ll_highpart (v);						\
+									\
+    __x0 = (UWtype) __ul * __vl;					\
+    __x1 = (UWtype) __ul * __vh;					\
+    __x2 = (UWtype) __uh * __vl;					\
+    __x3 = (UWtype) __uh * __vh;					\
+									\
+    __x1 += __ll_highpart (__x0);/* this can't give carry */		\
+    __x1 += __x2;		/* but this indeed can */		\
+    if (__x1 < __x2)		/* did we get it? */			\
+      __x3 += __ll_B;		/* yes, add it in the proper pos.  */	\
+									\
+    (w1) = __x3 + __ll_highpart (__x1);					\
+    (w0) = __ll_lowpart (__x1) * __ll_B + __ll_lowpart (__x0);		\
+  } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: include/asm-generic/libgcc/longlong.h:65:
+  do {^I^I^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#119: FILE: include/asm-generic/libgcc/longlong.h:65:
+  do {									\
[...]
+    __uh = __ll_highpart (u);						\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: include/asm-generic/libgcc/longlong.h:66:
+    UWtype __x0, __x1, __x2, __x3;^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: include/asm-generic/libgcc/longlong.h:67:
+    UHWtype __ul, __vl, __uh, __vh;^I^I^I^I^I\$

CHECK:CAMELCASE: Avoid CamelCase: <UHWtype>
#121: FILE: include/asm-generic/libgcc/longlong.h:67:
+    UHWtype __ul, __vl, __uh, __vh;					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: include/asm-generic/libgcc/longlong.h:69:
+    __ul = __ll_lowpart (u);^I^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#123: FILE: include/asm-generic/libgcc/longlong.h:69:
+    __ul = __ll_lowpart (u);						\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: include/asm-generic/libgcc/longlong.h:70:
+    __uh = __ll_highpart (u);^I^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#124: FILE: include/asm-generic/libgcc/longlong.h:70:
+    __uh = __ll_highpart (u);						\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: include/asm-generic/libgcc/longlong.h:71:
+    __vl = __ll_lowpart (v);^I^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#125: FILE: include/asm-generic/libgcc/longlong.h:71:
+    __vl = __ll_lowpart (v);						\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: include/asm-generic/libgcc/longlong.h:72:
+    __vh = __ll_highpart (v);^I^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#126: FILE: include/asm-generic/libgcc/longlong.h:72:
+    __vh = __ll_highpart (v);						\

CHECK:SPACING: No space is necessary after a cast
#128: FILE: include/asm-generic/libgcc/longlong.h:74:
+    __x0 = (UWtype) __ul * __vl;					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: include/asm-generic/libgcc/longlong.h:74:
+    __x0 = (UWtype) __ul * __vl;^I^I^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#129: FILE: include/asm-generic/libgcc/longlong.h:75:
+    __x1 = (UWtype) __ul * __vh;					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: include/asm-generic/libgcc/longlong.h:75:
+    __x1 = (UWtype) __ul * __vh;^I^I^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#130: FILE: include/asm-generic/libgcc/longlong.h:76:
+    __x2 = (UWtype) __uh * __vl;					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: include/asm-generic/libgcc/longlong.h:76:
+    __x2 = (UWtype) __uh * __vl;^I^I^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#131: FILE: include/asm-generic/libgcc/longlong.h:77:
+    __x3 = (UWtype) __uh * __vh;					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: include/asm-generic/libgcc/longlong.h:77:
+    __x3 = (UWtype) __uh * __vh;^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: include/asm-generic/libgcc/longlong.h:79:
+    __x1 += __ll_highpart (__x0);/* this can't give carry */^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#133: FILE: include/asm-generic/libgcc/longlong.h:79:
+    __x1 += __ll_highpart (__x0);/* this can't give carry */		\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: include/asm-generic/libgcc/longlong.h:80:
+    __x1 += __x2;^I^I/* but this indeed can */^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: include/asm-generic/libgcc/longlong.h:81:
+    if (__x1 < __x2)^I^I/* did we get it? */^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#135: FILE: include/asm-generic/libgcc/longlong.h:81:
+    if (__x1 < __x2)		/* did we get it? */			\
+      __x3 += __ll_B;		/* yes, add it in the proper pos.  */	\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: include/asm-generic/libgcc/longlong.h:82:
+      __x3 += __ll_B;^I^I/* yes, add it in the proper pos.  */^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: include/asm-generic/libgcc/longlong.h:84:
+    (w1) = __x3 + __ll_highpart (__x1);^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#138: FILE: include/asm-generic/libgcc/longlong.h:84:
+    (w1) = __x3 + __ll_highpart (__x1);					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: include/asm-generic/libgcc/longlong.h:85:
+    (w0) = __ll_lowpart (__x1) * __ll_B + __ll_lowpart (__x0);^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#139: FILE: include/asm-generic/libgcc/longlong.h:85:
+    (w0) = __ll_lowpart (__x1) * __ll_B + __ll_lowpart (__x0);		\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#139: FILE: include/asm-generic/libgcc/longlong.h:85:
+    (w0) = __ll_lowpart (__x1) * __ll_B + __ll_lowpart (__x0);		\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: include/asm-generic/libgcc/longlong.h:86:
+  } while (0)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#143: FILE: include/asm-generic/libgcc/longlong.h:89:
+#if !defined (__umulsidi3)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: include/asm-generic/libgcc/longlong.h:91:
+  ({DWunion __w;^I^I^I^I^I^I^I\$

CHECK:CAMELCASE: Avoid CamelCase: <DWunion>
#145: FILE: include/asm-generic/libgcc/longlong.h:91:
+  ({DWunion __w;							\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: include/asm-generic/libgcc/longlong.h:92:
+    umul_ppmm (__w.s.high, __w.s.low, u, v);^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#146: FILE: include/asm-generic/libgcc/longlong.h:92:
+    umul_ppmm (__w.s.high, __w.s.low, u, v);				\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: include/asm-generic/libgcc/longlong.h:93:
+    __w.ll; })$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#151: FILE: include/asm-generic/libgcc/longlong.h:97:
+/* If the processor has no udiv_qrnnd but sdiv_qrnnd, go through
+   __udiv_w_sdiv (defined in libgcc or elsewhere).  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#151: FILE: include/asm-generic/libgcc/longlong.h:97:
+   __udiv_w_sdiv (defined in libgcc or elsewhere).  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#152: FILE: include/asm-generic/libgcc/longlong.h:98:
+#if !defined (udiv_qrnnd) && defined (sdiv_qrnnd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#152: FILE: include/asm-generic/libgcc/longlong.h:98:
+#if !defined (udiv_qrnnd) && defined (sdiv_qrnnd)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: include/asm-generic/libgcc/longlong.h:100:
+  do {^I^I^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#154: FILE: include/asm-generic/libgcc/longlong.h:100:
+  do {									\
+    USItype __r;							\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: include/asm-generic/libgcc/longlong.h:101:
+    USItype __r;^I^I^I^I^I^I^I\$

CHECK:CAMELCASE: Avoid CamelCase: <USItype>
#155: FILE: include/asm-generic/libgcc/longlong.h:101:
+    USItype __r;							\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: include/asm-generic/libgcc/longlong.h:102:
+    (q) = __udiv_w_sdiv (&__r, nh, nl, d);^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#156: FILE: include/asm-generic/libgcc/longlong.h:102:
+    (q) = __udiv_w_sdiv (&__r, nh, nl, d);				\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: include/asm-generic/libgcc/longlong.h:103:
+    (r) = __r;^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: include/asm-generic/libgcc/longlong.h:104:
+  } while (0)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#161: FILE: include/asm-generic/libgcc/longlong.h:107:
+#if !defined (udiv_qrnnd)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n1' - possible side-effects?
#162: FILE: include/asm-generic/libgcc/longlong.h:108:
+#define udiv_qrnnd(q, r, n1, n0, d) \
+  do {									\
+    UWtype __d1, __d0, __q1, __q0;					\
+    UWtype __r1, __r0, __m;						\
+    __d1 = __ll_highpart (d);						\
+    __d0 = __ll_lowpart (d);						\
+									\
+    __r1 = (n1) % __d1;							\
+    __q1 = (n1) / __d1;							\
+    __m = (UWtype) __q1 * __d0;						\
+    __r1 = __r1 * __ll_B | __ll_highpart (n0);				\
+    if (__r1 < __m)							\
+      {									\
+	__q1--, __r1 += (d);						\
+	if (__r1 >= (d)) /* i.e. we didn't get carry when adding to __r1 */\
+	  if (__r1 < __m)						\
+	    __q1--, __r1 += (d);					\
+      }									\
+    __r1 -= __m;							\
+									\
+    __r0 = __r1 % __d1;							\
+    __q0 = __r1 / __d1;							\
+    __m = (UWtype) __q0 * __d0;						\
+    __r0 = __r0 * __ll_B | __ll_lowpart (n0);				\
+    if (__r0 < __m)							\
+      {									\
+	__q0--, __r0 += (d);						\
+	if (__r0 >= (d))						\
+	  if (__r0 < __m)						\
+	    __q0--, __r0 += (d);					\
+      }									\
+    __r0 -= __m;							\
+									\
+    (q) = (UWtype) __q1 * __ll_B | __q0;				\
+    (r) = __r0;								\
+  } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n0' - possible side-effects?
#162: FILE: include/asm-generic/libgcc/longlong.h:108:
+#define udiv_qrnnd(q, r, n1, n0, d) \
+  do {									\
+    UWtype __d1, __d0, __q1, __q0;					\
+    UWtype __r1, __r0, __m;						\
+    __d1 = __ll_highpart (d);						\
+    __d0 = __ll_lowpart (d);						\
+									\
+    __r1 = (n1) % __d1;							\
+    __q1 = (n1) / __d1;							\
+    __m = (UWtype) __q1 * __d0;						\
+    __r1 = __r1 * __ll_B | __ll_highpart (n0);				\
+    if (__r1 < __m)							\
+      {									\
+	__q1--, __r1 += (d);						\
+	if (__r1 >= (d)) /* i.e. we didn't get carry when adding to __r1 */\
+	  if (__r1 < __m)						\
+	    __q1--, __r1 += (d);					\
+      }									\
+    __r1 -= __m;							\
+									\
+    __r0 = __r1 % __d1;							\
+    __q0 = __r1 / __d1;							\
+    __m = (UWtype) __q0 * __d0;						\
+    __r0 = __r0 * __ll_B | __ll_lowpart (n0);				\
+    if (__r0 < __m)							\
+      {									\
+	__q0--, __r0 += (d);						\
+	if (__r0 >= (d))						\
+	  if (__r0 < __m)						\
+	    __q0--, __r0 += (d);					\
+      }									\
+    __r0 -= __m;							\
+									\
+    (q) = (UWtype) __q1 * __ll_B | __q0;				\
+    (r) = __r0;								\
+  } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#162: FILE: include/asm-generic/libgcc/longlong.h:108:
+#define udiv_qrnnd(q, r, n1, n0, d) \
+  do {									\
+    UWtype __d1, __d0, __q1, __q0;					\
+    UWtype __r1, __r0, __m;						\
+    __d1 = __ll_highpart (d);						\
+    __d0 = __ll_lowpart (d);						\
+									\
+    __r1 = (n1) % __d1;							\
+    __q1 = (n1) / __d1;							\
+    __m = (UWtype) __q1 * __d0;						\
+    __r1 = __r1 * __ll_B | __ll_highpart (n0);				\
+    if (__r1 < __m)							\
+      {									\
+	__q1--, __r1 += (d);						\
+	if (__r1 >= (d)) /* i.e. we didn't get carry when adding to __r1 */\
+	  if (__r1 < __m)						\
+	    __q1--, __r1 += (d);					\
+      }									\
+    __r1 -= __m;							\
+									\
+    __r0 = __r1 % __d1;							\
+    __q0 = __r1 / __d1;							\
+    __m = (UWtype) __q0 * __d0;						\
+    __r0 = __r0 * __ll_B | __ll_lowpart (n0);				\
+    if (__r0 < __m)							\
+      {									\
+	__q0--, __r0 += (d);						\
+	if (__r0 >= (d))						\
+	  if (__r0 < __m)						\
+	    __q0--, __r0 += (d);					\
+      }									\
+    __r0 -= __m;							\
+									\
+    (q) = (UWtype) __q1 * __ll_B | __q0;				\
+    (r) = __r0;								\
+  } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: include/asm-generic/libgcc/longlong.h:109:
+  do {^I^I^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#163: FILE: include/asm-generic/libgcc/longlong.h:109:
+  do {									\
[...]
+    __d0 = __ll_lowpart (d);						\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: include/asm-generic/libgcc/longlong.h:110:
+    UWtype __d1, __d0, __q1, __q0;^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: include/asm-generic/libgcc/longlong.h:111:
+    UWtype __r1, __r0, __m;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: include/asm-generic/libgcc/longlong.h:112:
+    __d1 = __ll_highpart (d);^I^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#166: FILE: include/asm-generic/libgcc/longlong.h:112:
+    __d1 = __ll_highpart (d);						\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: include/asm-generic/libgcc/longlong.h:113:
+    __d0 = __ll_lowpart (d);^I^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#167: FILE: include/asm-generic/libgcc/longlong.h:113:
+    __d0 = __ll_lowpart (d);						\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: include/asm-generic/libgcc/longlong.h:115:
+    __r1 = (n1) % __d1;^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: include/asm-generic/libgcc/longlong.h:116:
+    __q1 = (n1) / __d1;^I^I^I^I^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#171: FILE: include/asm-generic/libgcc/longlong.h:117:
+    __m = (UWtype) __q1 * __d0;						\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: include/asm-generic/libgcc/longlong.h:117:
+    __m = (UWtype) __q1 * __d0;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: include/asm-generic/libgcc/longlong.h:118:
+    __r1 = __r1 * __ll_B | __ll_highpart (n0);^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#172: FILE: include/asm-generic/libgcc/longlong.h:118:
+    __r1 = __r1 * __ll_B | __ll_highpart (n0);				\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: include/asm-generic/libgcc/longlong.h:119:
+    if (__r1 < __m)^I^I^I^I^I^I^I\$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#173: FILE: include/asm-generic/libgcc/longlong.h:119:
+    if (__r1 < __m)							\
+      {									\

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#173: FILE: include/asm-generic/libgcc/longlong.h:119:
+    if (__r1 < __m)							\
+      {									\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: include/asm-generic/libgcc/longlong.h:120:
+      {^I^I^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#176: FILE: include/asm-generic/libgcc/longlong.h:122:
+	if (__r1 >= (d)) /* i.e. we didn't get carry when adding to __r1 */\
+	  if (__r1 < __m)						\

WARNING:TABSTOP: Statements should start on a tabstop
#177: FILE: include/asm-generic/libgcc/longlong.h:123:
+	  if (__r1 < __m)						\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#177: FILE: include/asm-generic/libgcc/longlong.h:123:
+	  if (__r1 < __m)						\
+	    __q1--, __r1 += (d);					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: include/asm-generic/libgcc/longlong.h:125:
+      }^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: include/asm-generic/libgcc/longlong.h:126:
+    __r1 -= __m;^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: include/asm-generic/libgcc/longlong.h:128:
+    __r0 = __r1 % __d1;^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: include/asm-generic/libgcc/longlong.h:129:
+    __q0 = __r1 / __d1;^I^I^I^I^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#184: FILE: include/asm-generic/libgcc/longlong.h:130:
+    __m = (UWtype) __q0 * __d0;						\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: include/asm-generic/libgcc/longlong.h:130:
+    __m = (UWtype) __q0 * __d0;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: include/asm-generic/libgcc/longlong.h:131:
+    __r0 = __r0 * __ll_B | __ll_lowpart (n0);^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#185: FILE: include/asm-generic/libgcc/longlong.h:131:
+    __r0 = __r0 * __ll_B | __ll_lowpart (n0);				\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: include/asm-generic/libgcc/longlong.h:132:
+    if (__r0 < __m)^I^I^I^I^I^I^I\$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#186: FILE: include/asm-generic/libgcc/longlong.h:132:
+    if (__r0 < __m)							\
+      {									\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#186: FILE: include/asm-generic/libgcc/longlong.h:132:
+    if (__r0 < __m)							\
+      {									\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: include/asm-generic/libgcc/longlong.h:133:
+      {^I^I^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#189: FILE: include/asm-generic/libgcc/longlong.h:135:
+	if (__r0 >= (d))						\
+	  if (__r0 < __m)						\

WARNING:TABSTOP: Statements should start on a tabstop
#190: FILE: include/asm-generic/libgcc/longlong.h:136:
+	  if (__r0 < __m)						\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#190: FILE: include/asm-generic/libgcc/longlong.h:136:
+	  if (__r0 < __m)						\
+	    __q0--, __r0 += (d);					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: include/asm-generic/libgcc/longlong.h:138:
+      }^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: include/asm-generic/libgcc/longlong.h:139:
+    __r0 -= __m;^I^I^I^I^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#195: FILE: include/asm-generic/libgcc/longlong.h:141:
+    (q) = (UWtype) __q1 * __ll_B | __q0;				\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: include/asm-generic/libgcc/longlong.h:141:
+    (q) = (UWtype) __q1 * __ll_B | __q0;^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: include/asm-generic/libgcc/longlong.h:142:
+    (r) = __r0;^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: include/asm-generic/libgcc/longlong.h:143:
+  } while (0)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#201: FILE: include/asm-generic/libgcc/longlong.h:147:
+#if !defined (count_leading_zeros)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: include/asm-generic/libgcc/longlong.h:149:
+  do {^I^I^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#203: FILE: include/asm-generic/libgcc/longlong.h:149:
+  do {									\
[...]
+									\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: include/asm-generic/libgcc/longlong.h:150:
+    UWtype __xr = (x);^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: include/asm-generic/libgcc/longlong.h:151:
+    UWtype __a;^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: include/asm-generic/libgcc/longlong.h:153:
+    if (W_TYPE_SIZE <= 32)^I^I^I^I^I^I\$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#207: FILE: include/asm-generic/libgcc/longlong.h:153:
+    if (W_TYPE_SIZE <= 32)						\
+      {									\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#207: FILE: include/asm-generic/libgcc/longlong.h:153:
+    if (W_TYPE_SIZE <= 32)						\
+      {									\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: include/asm-generic/libgcc/longlong.h:154:
+      {^I^I^I^I^I^I^I^I^I\$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#209: FILE: include/asm-generic/libgcc/longlong.h:155:
+	__a = __xr < ((UWtype)1<<2*__BITS4)				\
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#209: FILE: include/asm-generic/libgcc/longlong.h:155:
+	__a = __xr < ((UWtype)1<<2*__BITS4)				\
 	                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#210: FILE: include/asm-generic/libgcc/longlong.h:156:
+	  ? (__xr < ((UWtype)1<<__BITS4) ? 0 : __BITS4)			\
 	                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#211: FILE: include/asm-generic/libgcc/longlong.h:157:
+	  : (__xr < ((UWtype)1<<3*__BITS4) ?  2*__BITS4 : 3*__BITS4);	\
 	                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#211: FILE: include/asm-generic/libgcc/longlong.h:157:
+	  : (__xr < ((UWtype)1<<3*__BITS4) ?  2*__BITS4 : 3*__BITS4);	\
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#211: FILE: include/asm-generic/libgcc/longlong.h:157:
+	  : (__xr < ((UWtype)1<<3*__BITS4) ?  2*__BITS4 : 3*__BITS4);	\
 	                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#211: FILE: include/asm-generic/libgcc/longlong.h:157:
+	  : (__xr < ((UWtype)1<<3*__BITS4) ?  2*__BITS4 : 3*__BITS4);	\
 	                                                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: include/asm-generic/libgcc/longlong.h:158:
+      }^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: include/asm-generic/libgcc/longlong.h:159:
+    else^I^I^I^I^I^I^I^I\$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#213: FILE: include/asm-generic/libgcc/longlong.h:159:
+    else								\
+      {									\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#213: FILE: include/asm-generic/libgcc/longlong.h:159:
+    else								\
+      {									\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: include/asm-generic/libgcc/longlong.h:160:
+      {^I^I^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#215: FILE: include/asm-generic/libgcc/longlong.h:161:
+	for (__a = W_TYPE_SIZE - 8; __a > 0; __a -= 8)			\
+	  if (((__xr >> __a) & 0xff) != 0)				\

WARNING:TABSTOP: Statements should start on a tabstop
#216: FILE: include/asm-generic/libgcc/longlong.h:162:
+	  if (((__xr >> __a) & 0xff) != 0)				\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#216: FILE: include/asm-generic/libgcc/longlong.h:162:
+	  if (((__xr >> __a) & 0xff) != 0)				\
+	    break;							\

WARNING:TABSTOP: Statements should start on a tabstop
#217: FILE: include/asm-generic/libgcc/longlong.h:163:
+	    break;							\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: include/asm-generic/libgcc/longlong.h:164:
+      }^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: include/asm-generic/libgcc/longlong.h:166:
+    (count) = W_TYPE_SIZE - (__clz_tab[__xr >> __a] + __a);^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: include/asm-generic/libgcc/longlong.h:167:
+  } while (0)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#225: FILE: include/asm-generic/libgcc/longlong.h:171:
+#if !defined (count_trailing_zeros)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: include/asm-generic/libgcc/longlong.h:173:
+  do {^I^I^I^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#227: FILE: include/asm-generic/libgcc/longlong.h:173:
+  do {									\
+    UWtype __ctz_x = (x);						\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: include/asm-generic/libgcc/longlong.h:174:
+    UWtype __ctz_x = (x);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: include/asm-generic/libgcc/longlong.h:175:
+    UWtype __ctz_c;^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: include/asm-generic/libgcc/longlong.h:176:
+    count_leading_zeros (__ctz_c, __ctz_x & -__ctz_x);^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#230: FILE: include/asm-generic/libgcc/longlong.h:176:
+    count_leading_zeros (__ctz_c, __ctz_x & -__ctz_x);			\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: include/asm-generic/libgcc/longlong.h:177:
+    (count) = W_TYPE_SIZE - 1 - __ctz_c;^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: include/asm-generic/libgcc/longlong.h:178:
+  } while (0)$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#244: FILE: lib/libgcc/coretypes.h:1:
+/* empty */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#251: FILE: lib/libgcc/longlong.h:1:
+#include <asm-generic/libgcc/longlong.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#258: FILE: lib/libgcc/tconfig.h:1:
+#include <asm/libgcc/config.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#272: FILE: lib/libgcc/tm.h:1:
+#include <asm/bug.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#272: FILE: lib/libgcc/tm.h:1:
+#include <asm/bug.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#274: FILE: lib/libgcc/tm.h:3:
+#define abort() do { BUG(); return 0; } while (0)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#274: FILE: lib/libgcc/tm.h:3:
+#define abort() do { BUG(); return 0; } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#281: FILE: lib/libgcc/tsystem.h:1:
+/* empty */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144577.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 149 warnings, 26 checks, 197 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144577.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
