WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#73: FILE: Makefile:4:
+EXTRAVERSION = .1
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#198: FILE: arch/sparc64/kernel/ldc.c:29:
 static char version[] __devinitdata =

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lp->state != LDC_STATE_INIT'
#211: FILE: arch/sparc64/kernel/ldc.c:1238:
+	if (!name ||
+	    (lp->state != LDC_STATE_INIT))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#281: FILE: arch/sparc64/kernel/time.c:888:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __used over __attribute__((__used__))
#322: FILE: arch/um/include/init.h:58:
+# define __used			__attribute__((__used__))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#349: FILE: arch/x86/kernel/acpi/sleep.c:27:
+/* XXX: this macro should move to asm-x86/segment.h and be shared with the
+   boot code... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#349: FILE: arch/x86/kernel/acpi/sleep.c:27:
+   boot code... */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#350: FILE: arch/x86/kernel/acpi/sleep.c:28:
+#define GDT_ENTRY(flags, base, limit)		\
+	(((u64)(base & 0xff000000) << 32) |	\
+	 ((u64)flags << 40) |			\
+	 ((u64)(limit & 0x00ff0000) << 32) |	\
+	 ((u64)(base & 0x00ffffff) << 16) |	\
+	 ((u64)(limit & 0x0000ffff)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#350: FILE: arch/x86/kernel/acpi/sleep.c:28:
+#define GDT_ENTRY(flags, base, limit)		\
+	(((u64)(base & 0xff000000) << 32) |	\
+	 ((u64)flags << 40) |			\
+	 ((u64)(limit & 0x00ff0000) << 32) |	\
+	 ((u64)(base & 0x00ffffff) << 16) |	\
+	 ((u64)(limit & 0x0000ffff)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#350: FILE: arch/x86/kernel/acpi/sleep.c:28:
+#define GDT_ENTRY(flags, base, limit)		\
+	(((u64)(base & 0xff000000) << 32) |	\
+	 ((u64)flags << 40) |			\
+	 ((u64)(limit & 0x00ff0000) << 32) |	\
+	 ((u64)(base & 0x00ffffff) << 16) |	\
+	 ((u64)(limit & 0x0000ffff)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'limit' - possible side-effects?
#350: FILE: arch/x86/kernel/acpi/sleep.c:28:
+#define GDT_ENTRY(flags, base, limit)		\
+	(((u64)(base & 0xff000000) << 32) |	\
+	 ((u64)flags << 40) |			\
+	 ((u64)(limit & 0x00ff0000) << 32) |	\
+	 ((u64)(base & 0x00ffffff) << 16) |	\
+	 ((u64)(limit & 0x0000ffff)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'limit' may be better as '(limit)' to avoid precedence issues
#350: FILE: arch/x86/kernel/acpi/sleep.c:28:
+#define GDT_ENTRY(flags, base, limit)		\
+	(((u64)(base & 0xff000000) << 32) |	\
+	 ((u64)flags << 40) |			\
+	 ((u64)(limit & 0x00ff0000) << 32) |	\
+	 ((u64)(base & 0x00ffffff) << 16) |	\
+	 ((u64)(limit & 0x0000ffff)))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#485: FILE: arch/x86/kvm/svm.c:273:
+	uint64_t efer;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#507: FILE: arch/x86/kvm/svm.c:319:
+	struct svm_cpu_data *svm_data
+		= per_cpu(svm_data, raw_smp_processor_id());

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#699: FILE: drivers/ide/ide-cd.c:1318:
+	case __constant_cpu_to_be32(512):

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#700: FILE: drivers/ide/ide-cd.c:1319:
+	case __constant_cpu_to_be32(1024):

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#701: FILE: drivers/ide/ide-cd.c:1320:
+	case __constant_cpu_to_be32(2048):

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#702: FILE: drivers/ide/ide-cd.c:1321:
+	case __constant_cpu_to_be32(4096):

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#705: FILE: drivers/ide/ide-cd.c:1324:
+		printk(KERN_ERR "%s: weird block size %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: drivers/ide/ide-cd.c:1325:
+		printk(KERN_ERR "%s: weird block size %u\n",
+			drive->name, capbuf.blocklen);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#707: FILE: drivers/ide/ide-cd.c:1326:
+		printk(KERN_ERR "%s: default to 2kb block size\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: drivers/ide/ide-cd.c:1327:
+		printk(KERN_ERR "%s: default to 2kb block size\n",
+			drive->name);

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#709: FILE: drivers/ide/ide-cd.c:1328:
+		capbuf.blocklen = __constant_cpu_to_be32(2048);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#792: FILE: drivers/media/video/cx18/cx18-firmware.c:93:
+#define CX18_FW_CPU_SIZE ^I^I(158332)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1039: FILE: drivers/media/video/saa7134/saa7134-core.c:954:
+	printk(KERN_INFO "%s: subsystem: %04x:%04x, board: %s [card=%d,%s]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1040: FILE: drivers/media/video/saa7134/saa7134-core.c:955:
+	printk(KERN_INFO "%s: subsystem: %04x:%04x, board: %s [card=%d,%s]\n",
 		dev->name,pci_dev->subsystem_vendor,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1044: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1049: FILE: drivers/media/video/uvc/Kconfig:1:
+config USB_VIDEO_CLASS
+	tristate "USB Video Class (UVC)"
+	---help---
+	  Support for the USB Video Class (UVC).  Currently only video
+	  input devices, such as webcams, are supported.
+
+	  For more information see: <http://linux-uvc.berlios.de/>
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1057: FILE: drivers/media/video/uvc/Kconfig:9:
+config USB_VIDEO_CLASS_INPUT_EVDEV
+	bool "UVC input events device support"
+	default y
+	depends on USB_VIDEO_CLASS && INPUT
+	---help---
+	  This option makes USB Video Class devices register an input device
+	  to report button events.
+
+	  If you are in doubt, say Y.

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#1087: FILE: drivers/media/video/uvc/uvc_driver.c:1898:
+	  .idVendor		= 0x5986,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#1088: FILE: drivers/media/video/uvc/uvc_driver.c:1899:
+	  .idProduct		= 0x0141,

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceClass>
#1089: FILE: drivers/media/video/uvc/uvc_driver.c:1900:
+	  .bInterfaceClass	= USB_CLASS_VIDEO,

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceSubClass>
#1090: FILE: drivers/media/video/uvc/uvc_driver.c:1901:
+	  .bInterfaceSubClass	= 1,

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceProtocol>
#1091: FILE: drivers/media/video/uvc/uvc_driver.c:1902:
+	  .bInterfaceProtocol	= 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1113: FILE: drivers/media/video/uvc/uvc_status.c:72:
+static void uvc_input_report_key(struct uvc_device *dev, unsigned int code,
+	int value)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1162: FILE: drivers/media/video/uvc/uvc_video.c:566:
+			usb_buffer_free(video->dev->udev, video->urb_size,
+				video->urb_buffer[i], video->urb_dma[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1178: FILE: drivers/media/video/uvc/uvc_video.c:582:
+static int uvc_alloc_urb_buffers(struct uvc_video_device *video,
+	unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1188: FILE: drivers/media/video/uvc/uvc_video.c:592:
+		video->urb_buffer[i] = usb_buffer_alloc(video->dev->udev,
+			size, GFP_KERNEL, &video->urb_dma[i]);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!video->urb_buffer[i]"
#1189: FILE: drivers/media/video/uvc/uvc_video.c:593:
+		if (video->urb_buffer[i] == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1346: FILE: drivers/media/video/uvc/uvc_video.c:798:
+		if ((ret = usb_submit_urb(video->urb[i], gfp_flags)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1368: FILE: drivers/media/video/uvc/uvc_video.c:853:
+	if ((ret = uvc_init_video(video, GFP_NOIO)) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1476: FILE: drivers/net/myri10ge/myri10ge.c:3229:
+	mgp->ss.rx_done.entry = dma_alloc_coherent(&pdev->dev, bytes,
+						&mgp->ss.rx_done.bus, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mgp->ss.rx_done.entry"
#1477: FILE: drivers/net/myri10ge/myri10ge.c:3230:
+	if (mgp->ss.rx_done.entry == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1688: FILE: fs/dquot.c:601:
+			printk(KERN_ERR "VFS: cannot write quota structure on "

WARNING:SPLIT_STRING: quoted string split across lines
#1689: FILE: fs/dquot.c:602:
+			printk(KERN_ERR "VFS: cannot write quota structure on "
+				"device %s (error %d). Quota may get out of "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1690: FILE: fs/dquot.c:603:
+				"device %s (error %d). Quota may get out of "
+				"sync!\n", dquot->dq_sb->s_id, ret);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1881: FILE: include/asm-arm/bitops.h:280:
+#define __fls(x) \
 	( __builtin_constant_p(x) ? constant_fls(x) : \
 	  ({ int __r; asm("clz\t%0, %1" : "=r"(__r) : "r"(x) : "cc"); 32-__r; }) )

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1912: FILE: include/asm-generic/vmlinux.lds.h:218:
+		*(.text.unlikely)
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000245895.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 21 warnings, 26 checks, 1773 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000245895.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
