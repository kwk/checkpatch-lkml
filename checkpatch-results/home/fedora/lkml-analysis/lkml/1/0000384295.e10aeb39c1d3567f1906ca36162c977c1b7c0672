WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
Introduce debugging functionality, Makefile support to turn it on at compile

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#64: FILE: fs/Kconfig:1066:
+config UNION_FS_DEBUG
+	bool "Debug Unionfs"
+	depends on UNION_FS
+	help
+	  If you say Y here, you can turn on debugging output from Unionfs.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#180: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#185: FILE: fs/unionfs/debug.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#207: FILE: fs/unionfs/debug.c:23:
+			printk("PC:%s:%s:%d\n",(fname),(fxn),(line));	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: fs/unionfs/debug.c:23:
+			printk("PC:%s:%s:%d\n",(fname),(fxn),(line));	\
 			                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: fs/unionfs/debug.c:23:
+			printk("PC:%s:%s:%d\n",(fname),(fxn),(line));	\
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: fs/unionfs/debug.c:23:
+			printk("PC:%s:%s:%d\n",(fname),(fxn),(line));	\
 			                                    ^

CHECK:SPACING: No space is necessary after a cast
#213: FILE: fs/unionfs/debug.c:29:
+#define POISONED_PTR		((void*) 0x5a5a5a5a)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#213: FILE: fs/unionfs/debug.c:29:
+#define POISONED_PTR		((void*) 0x5a5a5a5a)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#215: FILE: fs/unionfs/debug.c:31:
+#define POISONED_PTR		((void*) 0x5a5a5a5a5a5a5a5a)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#215: FILE: fs/unionfs/debug.c:31:
+#define POISONED_PTR		((void*) 0x5a5a5a5a5a5a5a5a)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#239: FILE: fs/unionfs/debug.c:55:
+	BUG_ON(!inode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#245: FILE: fs/unionfs/debug.c:61:
+		printk(" Ci0: inode=%p istart/end=%d:%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#251: FILE: fs/unionfs/debug.c:67:
+		printk(" Ci1: inode=%p istart/end=%d:%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#257: FILE: fs/unionfs/debug.c:73:
+			printk(" Ci2: inode=%p istart=%d iend=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#265: FILE: fs/unionfs/debug.c:81:
+			printk(" Ci3: no inode_info %p\n", inode);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#270: FILE: fs/unionfs/debug.c:86:
+			printk(" Ci4: no lower_inodes %p\n", inode);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#277: FILE: fs/unionfs/debug.c:93:
+				printk(" Ci5: inode/linode=%p:%p bindex=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#278: FILE: fs/unionfs/debug.c:94:
+				printk(" Ci5: inode/linode=%p:%p bindex=%d "
+				       "istart/end=%d:%d\n", inode,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#283: FILE: fs/unionfs/debug.c:99:
+				printk(" Ci6: inode/linode=%p:%p bindex=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#284: FILE: fs/unionfs/debug.c:100:
+				printk(" Ci6: inode/linode=%p:%p bindex=%d "
+				       "istart/end=%d:%d\n", inode,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#297: FILE: fs/unionfs/debug.c:113:
+					printk(" Ci7: inode/linode=%p:%p "

WARNING:SPLIT_STRING: quoted string split across lines
#298: FILE: fs/unionfs/debug.c:114:
+					printk(" Ci7: inode/linode=%p:%p "
+					       "bindex=%d istart/end=%d:%d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#318: FILE: fs/unionfs/debug.c:134:
+	BUG_ON(!dentry);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: fs/unionfs/debug.c:139:
+	BUG_ON(dstart > dend);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#328: FILE: fs/unionfs/debug.c:144:
+		printk(" CD0: dentry=%p dstart/end=%d:%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#340: FILE: fs/unionfs/debug.c:156:
+				printk(" CD1: dentry/lower=%p:%p(%p) "

WARNING:SPLIT_STRING: quoted string split across lines
#341: FILE: fs/unionfs/debug.c:157:
+				printk(" CD1: dentry/lower=%p:%p(%p) "
+				       "bindex=%d dstart/end=%d:%d\n",

CHECK:SPACING: No space is necessary after a cast
#344: FILE: fs/unionfs/debug.c:160:
+					(void *) -1L),

CHECK:SPACING: No space is necessary after a cast
#356: FILE: fs/unionfs/debug.c:172:
+				if (!d_deleted((struct dentry *) dentry) &&

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#361: FILE: fs/unionfs/debug.c:177:
+					printk(" CD2: dentry/lower=%p:%p(%p) "

WARNING:SPLIT_STRING: quoted string split across lines
#362: FILE: fs/unionfs/debug.c:178:
+					printk(" CD2: dentry/lower=%p:%p(%p) "
+					       "bindex=%d dstart/end=%d:%d\n",

CHECK:SPACING: No space is necessary after a cast
#366: FILE: fs/unionfs/debug.c:182:
+						(void *) -1L),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#379: FILE: fs/unionfs/debug.c:195:
+				printk(" CM0: dentry/lmnt=%p:%p bindex=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#380: FILE: fs/unionfs/debug.c:196:
+				printk(" CM0: dentry/lmnt=%p:%p bindex=%d "
+				       "dstart/end=%d:%d\n", dentry,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#395: FILE: fs/unionfs/debug.c:211:
+					printk(" CM1: dentry/lmnt=%p:%p "

WARNING:SPLIT_STRING: quoted string split across lines
#396: FILE: fs/unionfs/debug.c:212:
+					printk(" CM1: dentry/lmnt=%p:%p "
+					       "bindex=%d dstart/end=%d:%d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#409: FILE: fs/unionfs/debug.c:225:
+	BUG_ON(istart > iend);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#413: FILE: fs/unionfs/debug.c:229:
+		printk(" CI0: dentry/inode=%p:%p istart/end=%d:%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#418: FILE: fs/unionfs/debug.c:234:
+		printk(" CI1: dentry/inode=%p:%p istart=%d dstart=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#423: FILE: fs/unionfs/debug.c:239:
+		printk(" CI2: dentry/inode=%p:%p iend=%d dend=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#430: FILE: fs/unionfs/debug.c:246:
+			printk(" CI3: dentry/inode=%p:%p dstart=%d dend=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#435: FILE: fs/unionfs/debug.c:251:
+			printk(" CI4: dentry/inode=%p:%p istart=%d iend=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#445: FILE: fs/unionfs/debug.c:261:
+				printk(" CI5: dentry/linode=%p:%p bindex=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#446: FILE: fs/unionfs/debug.c:262:
+				printk(" CI5: dentry/linode=%p:%p bindex=%d "
+				       "istart/end=%d:%d\n", dentry,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#451: FILE: fs/unionfs/debug.c:267:
+				printk(" CI6: dentry/linode=%p:%p bindex=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#452: FILE: fs/unionfs/debug.c:268:
+				printk(" CI6: dentry/linode=%p:%p bindex=%d "
+				       "istart/end=%d:%d\n", dentry,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#465: FILE: fs/unionfs/debug.c:281:
+					printk(" CI7: dentry/linode=%p:%p "

WARNING:SPLIT_STRING: quoted string split across lines
#466: FILE: fs/unionfs/debug.c:282:
+					printk(" CI7: dentry/linode=%p:%p "
+					       "bindex=%d istart/end=%d:%d\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#480: FILE: fs/unionfs/debug.c:296:
+		for (bindex = dstart+1; bindex < dend; bindex++) {
 		                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#488: FILE: fs/unionfs/debug.c:304:
+				printk(" Cx: lmnt/ldentry/linode=%p:%p:%p "

WARNING:SPLIT_STRING: quoted string split across lines
#489: FILE: fs/unionfs/debug.c:305:
+				printk(" Cx: lmnt/ldentry/linode=%p:%p:%p "
+				       "bindex=%d dstart/end=%d:%d\n",

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#497: FILE: fs/unionfs/debug.c:313:
+		for (bindex=ibstart(inode); bindex <= ibend(inode); bindex++) {
 		           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#501: FILE: fs/unionfs/debug.c:317:
+			printk(" CI8: bindex=%d mtime/lmtime=%lu.%lu/%lu.%lu "

WARNING:SPLIT_STRING: quoted string split across lines
#502: FILE: fs/unionfs/debug.c:318:
+			printk(" CI8: bindex=%d mtime/lmtime=%lu.%lu/%lu.%lu "
+			       "ctime/lctime=%lu.%lu/%lu.%lu\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#527: FILE: fs/unionfs/debug.c:343:
+	BUG_ON(!file);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#532: FILE: fs/unionfs/debug.c:348:
+	BUG_ON(dstart > dend);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#535: FILE: fs/unionfs/debug.c:351:
+	BUG_ON(fstart > fend);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#540: FILE: fs/unionfs/debug.c:356:
+		printk(" CF0: file/dentry=%p:%p fstart/end=%d:%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#545: FILE: fs/unionfs/debug.c:361:
+		printk(" CF1: file/dentry=%p:%p fstart=%d dstart=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#550: FILE: fs/unionfs/debug.c:366:
+		printk(" CF2: file/dentry=%p:%p fend=%d dend=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#557: FILE: fs/unionfs/debug.c:373:
+			printk(" CF3: file/inode=%p:%p fstart=%d fend=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#562: FILE: fs/unionfs/debug.c:378:
+			printk(" CF4: file/dentry=%p:%p dstart=%d dend=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#576: FILE: fs/unionfs/debug.c:392:
+				printk(" CF5: file/lower=%p:%p bindex=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#577: FILE: fs/unionfs/debug.c:393:
+				printk(" CF5: file/lower=%p:%p bindex=%d "
+				       "fstart/end=%d:%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#590: FILE: fs/unionfs/debug.c:406:
+					printk(" CF6: file/lower=%p:%p "

WARNING:SPLIT_STRING: quoted string split across lines
#591: FILE: fs/unionfs/debug.c:407:
+					printk(" CF6: file/lower=%p:%p "
+					       "bindex=%d fstart/end=%d:%d\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#599: FILE: fs/unionfs/debug.c:415:
+	__unionfs_check_dentry(dentry,fname,fxn,line);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#599: FILE: fs/unionfs/debug.c:415:
+	__unionfs_check_dentry(dentry,fname,fxn,line);
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#599: FILE: fs/unionfs/debug.c:415:
+	__unionfs_check_dentry(dentry,fname,fxn,line);
 	                                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#609: FILE: fs/unionfs/debug.c:425:
+	printk("BC:");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#610: FILE: fs/unionfs/debug.c:426:
+	for (i=0; i<sbmax(sb); i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#610: FILE: fs/unionfs/debug.c:426:
+	for (i=0; i<sbmax(sb); i++) {
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#615: FILE: fs/unionfs/debug.c:431:
+		printk("%d:", (mnt ? atomic_read(&mnt->mnt_count) : -99));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#617: FILE: fs/unionfs/debug.c:433:
+	printk("%s:%s:%d\n",file,fxn,line);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#617: FILE: fs/unionfs/debug.c:433:
+	printk("%s:%s:%d\n",file,fxn,line);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#617: FILE: fs/unionfs/debug.c:433:
+	printk("%s:%s:%d\n",file,fxn,line);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#617: FILE: fs/unionfs/debug.c:433:
+	printk("%s:%s:%d\n",file,fxn,line);
 	                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#626: FILE: fs/unionfs/debug.c:442:
+	for (bindex=ibstart(inode); bindex <= ibend(inode); bindex++) {
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#630: FILE: fs/unionfs/debug.c:446:
+		printk("IT(%lu:%d): ", inode->i_ino, bindex);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#631: FILE: fs/unionfs/debug.c:447:
+		printk("%s:%s:%d ",file,fxn,line);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#631: FILE: fs/unionfs/debug.c:447:
+		printk("%s:%s:%d ",file,fxn,line);
 		                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#631: FILE: fs/unionfs/debug.c:447:
+		printk("%s:%s:%d ",file,fxn,line);
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#631: FILE: fs/unionfs/debug.c:447:
+		printk("%s:%s:%d ",file,fxn,line);
 		                           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#632: FILE: fs/unionfs/debug.c:448:
+		printk("um=%lu/%lu lm=%lu/%lu ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#636: FILE: fs/unionfs/debug.c:452:
+		printk("uc=%lu/%lu lc=%lu/%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: fs/unionfs/debug.c:460:
+void __show_dinode_times(const struct dentry *dentry,
+			const char *file, const char *fxn, int line)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#650: FILE: fs/unionfs/debug.c:466:
+	for (bindex=ibstart(inode); bindex <= ibend(inode); bindex++) {
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#654: FILE: fs/unionfs/debug.c:470:
+		printk("DT(%s:%lu:%d): ", dentry->d_name.name, inode->i_ino, bindex);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#655: FILE: fs/unionfs/debug.c:471:
+		printk("%s:%s:%d ",file,fxn,line);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#655: FILE: fs/unionfs/debug.c:471:
+		printk("%s:%s:%d ",file,fxn,line);
 		                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#655: FILE: fs/unionfs/debug.c:471:
+		printk("%s:%s:%d ",file,fxn,line);
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#655: FILE: fs/unionfs/debug.c:471:
+		printk("%s:%s:%d ",file,fxn,line);
 		                           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#656: FILE: fs/unionfs/debug.c:472:
+		printk("um=%lu/%lu lm=%lu/%lu ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#660: FILE: fs/unionfs/debug.c:476:
+		printk("uc=%lu/%lu lc=%lu/%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: fs/unionfs/debug.c:484:
+void __show_inode_counts(const struct inode *inode,
+			const char *file, const char *fxn, int line)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#674: FILE: fs/unionfs/debug.c:490:
+		printk("SiC: Null inode\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#677: FILE: fs/unionfs/debug.c:493:
+	for (bindex=sbstart(inode->i_sb); bindex <= sbend(inode->i_sb); bindex++) {
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#681: FILE: fs/unionfs/debug.c:497:
+		printk("SIC(%lu:%d:%d): ", inode->i_ino, bindex,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#683: FILE: fs/unionfs/debug.c:499:
+		printk("lc=%d ", atomic_read(&(lower_inode)->i_count));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#684: FILE: fs/unionfs/debug.c:500:
+		printk("%s:%s:%d\n",file,fxn,line);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#684: FILE: fs/unionfs/debug.c:500:
+		printk("%s:%s:%d\n",file,fxn,line);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#684: FILE: fs/unionfs/debug.c:500:
+		printk("%s:%s:%d\n",file,fxn,line);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#684: FILE: fs/unionfs/debug.c:500:
+		printk("%s:%s:%d\n",file,fxn,line);
 		                            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1043: FILE: fs/unionfs/union.h:475:
+	BUG_ON(!dentry || bindex < 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1048: FILE: fs/unionfs/union.h:480:
+		printk(KERN_DEBUG "unionfs_mntget: mnt=%p bindex=%d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unionfs_mntget', this function's name, in a string
#1048: FILE: fs/unionfs/union.h:480:
+		printk(KERN_DEBUG "unionfs_mntget: mnt=%p bindex=%d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1068: FILE: fs/unionfs/union.h:493:
+	BUG_ON(!dentry || bindex < 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1087: FILE: fs/unionfs/union.h:505:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unionfs_mntput', this function's name, in a string
#1088: FILE: fs/unionfs/union.h:506:
+		       "unionfs_mntput: mnt=%p bindex=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1098: FILE: fs/unionfs/union.h:515:
+#define UDBG printk("DBG:%s:%s:%d\n",__FILE__,__FUNCTION__,__LINE__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1098: FILE: fs/unionfs/union.h:515:
+#define UDBG printk("DBG:%s:%s:%d\n",__FILE__,__FUNCTION__,__LINE__)
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1098: FILE: fs/unionfs/union.h:515:
+#define UDBG printk("DBG:%s:%s:%d\n",__FILE__,__FUNCTION__,__LINE__)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1098: FILE: fs/unionfs/union.h:515:
+#define UDBG printk("DBG:%s:%s:%d\n",__FILE__,__FUNCTION__,__LINE__)
                                                           ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1098: FILE: fs/unionfs/union.h:515:
+#define UDBG printk("DBG:%s:%s:%d\n",__FILE__,__FUNCTION__,__LINE__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1101: FILE: fs/unionfs/union.h:518:
+	__FILE__,__FUNCTION__,__LINE__)
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1101: FILE: fs/unionfs/union.h:518:
+	__FILE__,__FUNCTION__,__LINE__)
 	                     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1101: FILE: fs/unionfs/union.h:518:
+	__FILE__,__FUNCTION__,__LINE__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1103: FILE: fs/unionfs/union.h:520:
+	__FILE__,__FUNCTION__,__LINE__)
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1103: FILE: fs/unionfs/union.h:520:
+	__FILE__,__FUNCTION__,__LINE__)
 	                     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1103: FILE: fs/unionfs/union.h:520:
+	__FILE__,__FUNCTION__,__LINE__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1105: FILE: fs/unionfs/union.h:522:
+	__FILE__,__FUNCTION__,__LINE__)
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1105: FILE: fs/unionfs/union.h:522:
+	__FILE__,__FUNCTION__,__LINE__)
 	                     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1105: FILE: fs/unionfs/union.h:522:
+	__FILE__,__FUNCTION__,__LINE__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1107: FILE: fs/unionfs/union.h:524:
+	__FILE__,__FUNCTION__,__LINE__)
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1107: FILE: fs/unionfs/union.h:524:
+	__FILE__,__FUNCTION__,__LINE__)
 	                     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1107: FILE: fs/unionfs/union.h:524:
+	__FILE__,__FUNCTION__,__LINE__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1109: FILE: fs/unionfs/union.h:526:
+	__FILE__,__FUNCTION__,__LINE__)
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1109: FILE: fs/unionfs/union.h:526:
+	__FILE__,__FUNCTION__,__LINE__)
 	                     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1109: FILE: fs/unionfs/union.h:526:
+	__FILE__,__FUNCTION__,__LINE__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1111: FILE: fs/unionfs/union.h:528:
+	__FILE__,__FUNCTION__,__LINE__)
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1111: FILE: fs/unionfs/union.h:528:
+	__FILE__,__FUNCTION__,__LINE__)
 	                     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1111: FILE: fs/unionfs/union.h:528:
+	__FILE__,__FUNCTION__,__LINE__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1113: FILE: fs/unionfs/union.h:530:
+	__FILE__,__FUNCTION__,__LINE__)
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1113: FILE: fs/unionfs/union.h:530:
+	__FILE__,__FUNCTION__,__LINE__)
 	                     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1113: FILE: fs/unionfs/union.h:530:
+	__FILE__,__FUNCTION__,__LINE__)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1115: FILE: fs/unionfs/union.h:532:
+extern void __unionfs_check_inode(const struct inode *inode, const char *fname,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1117: FILE: fs/unionfs/union.h:534:
+extern void __unionfs_check_dentry(const struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1120: FILE: fs/unionfs/union.h:537:
+extern void __unionfs_check_file(const struct file *file,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1122: FILE: fs/unionfs/union.h:539:
+extern void __show_branch_counts(const struct super_block *sb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1124: FILE: fs/unionfs/union.h:541:
+extern void __show_inode_times(const struct inode *inode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1126: FILE: fs/unionfs/union.h:543:
+extern void __show_dinode_times(const struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1128: FILE: fs/unionfs/union.h:545:
+extern void __show_inode_counts(const struct inode *inode,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1129: FILE: fs/unionfs/union.h:546:
+^I^I^I        const char *file, const char *fxn, int line);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1129: FILE: fs/unionfs/union.h:546:
+extern void __show_inode_counts(const struct inode *inode,
+			        const char *file, const char *fxn, int line);

ERROR:SPACING: space required before the open parenthesis '('
#1134: FILE: fs/unionfs/union.h:551:
+#define unionfs_check_inode(i)		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1135: FILE: fs/unionfs/union.h:552:
+#define unionfs_check_dentry(d)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1136: FILE: fs/unionfs/union.h:553:
+#define unionfs_check_file(f)		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1137: FILE: fs/unionfs/union.h:554:
+#define show_branch_counts(sb)		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1138: FILE: fs/unionfs/union.h:555:
+#define show_inode_times(i)		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1139: FILE: fs/unionfs/union.h:556:
+#define show_dinode_times(d)		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1140: FILE: fs/unionfs/union.h:557:
+#define show_inode_counts(i)		do { } while(0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384295.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 51 errors, 86 warnings, 16 checks, 1042 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384295.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
