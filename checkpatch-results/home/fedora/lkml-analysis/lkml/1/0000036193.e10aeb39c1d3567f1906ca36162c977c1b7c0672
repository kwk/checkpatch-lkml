WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
2.6.31-stable review patch.  If anyone has any objections, please let us know.

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '0031462b5b392f90d17f1d75abb795883c44e969', maybe rebased or not pulled?
#32: 
(cherry picked from commit 0031462b5b392f90d17f1d75abb795883c44e969)

WARNING:TYPO_SPELLING: 'unitialized' may be misspelled - perhaps 'uninitialized'?
#34: 
When writing into an unitialized extent via direct I/O, and the direct
                     ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'unitialized' may be misspelled - perhaps 'uninitialized'?
#35: 
I/O doesn't exactly cover the unitialized extent, split the extent
                              ^^^^^^^^^^^

WARNING:BAD_SIGN_OFF: Non-standard signature: 'Singed-Off-By:' - perhaps 'Signed-off-by:'?
#42: 
Singed-Off-By: Mingming Cao <cmm@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Singed-off-by:' is the preferred signature form
#42: 
Singed-Off-By: Mingming Cao <cmm@us.ibm.com>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#60: FILE: fs/ext4/ext4.h:116:
+typedef struct ext4_io_end {

WARNING:TYPO_SPELLING: 'unitialized' may be misspelled - perhaps 'uninitialized'?
#78: FILE: fs/ext4/ext4.h:361:
+	unitialized extents if not allocated, split the uninitialized
 	^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#78: FILE: fs/ext4/ext4.h:361:
+	/* caller is from the direct IO path, request to creation of an
+	unitialized extents if not allocated, split the uninitialized

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#79: FILE: fs/ext4/ext4.h:362:
+	extent if blocks has been preallocated already*/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#82: FILE: fs/ext4/ext4.h:365:
+#define EXT4_GET_BLOCKS_DIO_CREATE_EXT		(EXT4_GET_BLOCKS_DIO|\
                                       		                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#85: FILE: fs/ext4/ext4.h:368:
+#define EXT4_GET_BLOCKS_DIO_CONVERT_EXT		(EXT4_GET_BLOCKS_CONVERT|\
                                        		                        ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: fs/ext4/ext4.h:1723:
+extern int ext4_convert_unwritten_extents(struct inode *inode, loff_t offset,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: fs/ext4/ext4.h:1724:
+extern int ext4_convert_unwritten_extents(struct inode *inode, loff_t offset,
+			  loff_t len);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#118: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#118: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#118: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_ext_path *' should also have an identifier name
#118: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_extent *' should also have an identifier name
#118: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#118: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: fs/ext4/extents.c:714:
+int ext4_ext_insert_index(handle_t *handle, struct inode *inode,
 				struct ext4_ext_path *curp,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag != EXT4_GET_BLOCKS_DIO_CREATE_EXT'
#147: FILE: fs/ext4/extents.c:1591:
+	if (ex && (flag != EXT4_GET_BLOCKS_DIO_CREATE_EXT)
+		&& ext4_can_extents_be_merged(inode, ex, newext)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#148: FILE: fs/ext4/extents.c:1592:
+	if (ex && (flag != EXT4_GET_BLOCKS_DIO_CREATE_EXT)
+		&& ext4_can_extents_be_merged(inode, ex, newext)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: fs/ext4/extents.c:2568:
+			err = ext4_ext_insert_extent(handle, inode, path,
+							ex3, 0);

WARNING:TYPO_SPELLING: 'intialized' may be misspelled - perhaps 'initialized'?
#207: FILE: fs/ext4/extents.c:2774:
+ * extent into multiple /intialized unintialized extents (up to three)
                          ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'unintialized' may be misspelled - perhaps 'uninitialized'?
#214: FILE: fs/ext4/extents.c:2781:
+ * the unintialized extent split. To prevent ENOSPC occur at the IO
        ^^^^^^^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext4_split_unwritten_extents', this function's name, in a string
#239: FILE: fs/ext4/extents.c:2806:
+	ext_debug("ext4_split_unwritten_extents: inode %lu,"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#240: FILE: fs/ext4/extents.c:2807:
+	ext_debug("ext4_split_unwritten_extents: inode %lu,"
+		  "iblock %llu, max_blocks %u\n", inode->i_ino,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'unintialized' may be misspelled - perhaps 'uninitialized'?
#255: FILE: fs/ext4/extents.c:2822:
+ 	 * if the entire unintialized extent length less than
  	                 ^^^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: fs/ext4/extents.c:2822:
+ ^I * if the entire unintialized extent length less than$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: fs/ext4/extents.c:2822:
+ ^I * if the entire unintialized extent length less than$

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: fs/ext4/extents.c:2823:
+ ^I * the size of extent to write, there is no need to split$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#256: FILE: fs/ext4/extents.c:2823:
+ ^I * the size of extent to write, there is no need to split$

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: fs/ext4/extents.c:2824:
+ ^I * uninitialized extent$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#257: FILE: fs/ext4/extents.c:2824:
+ ^I * uninitialized extent$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: fs/ext4/extents.c:2825:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#258: FILE: fs/ext4/extents.c:2825:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: fs/ext4/extents.c:2826:
+ ^Iif (allocated <= max_blocks)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#259: FILE: fs/ext4/extents.c:2826:
+ ^Iif (allocated <= max_blocks)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: fs/ext4/extents.c:2826:
+ ^Iif (allocated <= max_blocks)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: fs/ext4/extents.c:2849:
+		unsigned int newdepth;
+		ex3 = &newex;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#288: FILE: fs/ext4/extents.c:2855:
+		if (err == -ENOSPC) {
[...]
+		} else if (err)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#359: FILE: fs/ext4/extents.c:2926:
+	if (err == -ENOSPC) {
[...]
+	} else if (err)
[...]

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#384: FILE: fs/ext4/extents.c:2951:
+}
+static int ext4_convert_unwritten_extents_dio(handle_t *handle,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: fs/ext4/extents.c:3008:
+ext4_ext_handle_uninitialized_extents(handle_t *handle, struct inode *inode,
+			ext4_lblk_t iblock, unsigned int max_blocks,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext4_ext_handle_uninitialized_extents', this function's name, in a string
#449: FILE: fs/ext4/extents.c:3016:
+	ext_debug("ext4_ext_handle_uninitialized_extents: inode %lu, logical"

WARNING:SPLIT_STRING: quoted string split across lines
#450: FILE: fs/ext4/extents.c:3017:
+	ext_debug("ext4_ext_handle_uninitialized_extents: inode %lu, logical"
+		  "block %llu, max_blocks %u, flags %d, allocated %u",

WARNING:MISSING_SPACE: break quoted strings at a space character
#450: FILE: fs/ext4/extents.c:3017:
+	ext_debug("ext4_ext_handle_uninitialized_extents: inode %lu, logical"
+		  "block %llu, max_blocks %u, flags %d, allocated %u",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: fs/ext4/extents.c:3025:
+		ret = ext4_split_unwritten_extents(handle,
+						inode, path, iblock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: fs/ext4/extents.c:3032:
+		ret = ext4_convert_unwritten_extents_dio(handle, inode,
+							path);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: fs/ext4/extents.c:3058:
+	ret = ext4_ext_convert_to_initialized(handle, inode,
+						path, iblock,

CHECK:BRACES: braces {} should be used on all arms of this statement
#494: FILE: fs/ext4/extents.c:3061:
+	if (ret <= 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#497: FILE: fs/ext4/extents.c:3064:
+	} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#515: FILE: fs/ext4/extents.c:3082:
+}
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: fs/ext4/extents.c:3188:
+			ret = ext4_ext_handle_uninitialized_extents(handle,
+					inode, iblock, max_blocks, path,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: fs/ext4/extents.c:3484:
+int ext4_convert_unwritten_extents(struct inode *inode, loff_t offset,
+				    loff_t len)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#622: FILE: fs/ext4/extents.c:3519:
+			printk(KERN_ERR "%s: ext4_ext_get_blocks "

WARNING:SPLIT_STRING: quoted string split across lines
#623: FILE: fs/ext4/extents.c:3520:
+			printk(KERN_ERR "%s: ext4_ext_get_blocks "
+				    "returned error inode#%lu, block=%u, "

WARNING:SPLIT_STRING: quoted string split across lines
#624: FILE: fs/ext4/extents.c:3521:
+				    "returned error inode#%lu, block=%u, "
+				    "max_blocks=%u", __func__,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#629: FILE: fs/ext4/extents.c:3526:
+		if (ret <= 0 || ret2 )

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#634: FILE: fs/ext4/extents.c:3531:
+}
+/*

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext4_get_blocks', this function's name, in a string
#644: FILE: fs/ext4/inode.c:1237:
+	ext_debug("ext4_get_blocks(): inode %lu, flag %d, max_blocks %u,"

WARNING:SPLIT_STRING: quoted string split across lines
#645: FILE: fs/ext4/inode.c:1238:
+	ext_debug("ext4_get_blocks(): inode %lu, flag %d, max_blocks %u,"
+		  "logical block %lu\n", inode->i_ino, flags, max_blocks,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000036193.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 36 warnings, 22 checks, 593 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000036193.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
