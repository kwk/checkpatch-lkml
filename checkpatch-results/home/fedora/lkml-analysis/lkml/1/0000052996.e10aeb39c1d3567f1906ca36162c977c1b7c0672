WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#41: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: include/linux/mod_export.h:1:
+#ifndef LINUX_MOD_EXPORT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/module.h> instead of <asm/module.h>
#50: FILE: include/linux/mod_export.h:5:
+#include <asm/module.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#66: FILE: include/linux/mod_export.h:21:
+ * generate a checksums for some symbols */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#67: FILE: include/linux/mod_export.h:22:
+#define __CRC_SYMBOL(sym, sec)					\
+	extern void *__crc_##sym __attribute__((weak));		\
+	static const unsigned long __kcrctab_##sym		\
+	__used							\
+	__attribute__((section("__kcrctab" sec), unused))	\
+	= (unsigned long) &__crc_##sym;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#68: FILE: include/linux/mod_export.h:23:
+	extern void *__crc_##sym __attribute__((weak));		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__kcrctab" sec) over __attribute__((section("__kcrctab" sec)))
#71: FILE: include/linux/mod_export.h:26:
+	__attribute__((section("__kcrctab" sec), unused))	\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#72: FILE: include/linux/mod_export.h:27:
+	__attribute__((section("__kcrctab" sec), unused))	\
+	= (unsigned long) &__crc_##sym;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: No space is necessary after a cast
#72: FILE: include/linux/mod_export.h:27:
+	= (unsigned long) &__crc_##sym;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sym' - possible side-effects?
#78: FILE: include/linux/mod_export.h:33:
+#define __EXPORT_SYMBOL(sym, sec)				\
+	extern typeof(sym) sym;					\
+	__CRC_SYMBOL(sym, sec)					\
+	static const char __kstrtab_##sym[]			\
+	__attribute__((section("__ksymtab_strings"), aligned(1))) \
+	= MODULE_SYMBOL_PREFIX #sym;                    	\
+	static const struct kernel_symbol __ksymtab_##sym	\
+	__used							\
+	__attribute__((section("__ksymtab" sec), unused))	\
+	= { (unsigned long)&sym, __kstrtab_##sym }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sec' - possible side-effects?
#78: FILE: include/linux/mod_export.h:33:
+#define __EXPORT_SYMBOL(sym, sec)				\
+	extern typeof(sym) sym;					\
+	__CRC_SYMBOL(sym, sec)					\
+	static const char __kstrtab_##sym[]			\
+	__attribute__((section("__ksymtab_strings"), aligned(1))) \
+	= MODULE_SYMBOL_PREFIX #sym;                    	\
+	static const struct kernel_symbol __ksymtab_##sym	\
+	__used							\
+	__attribute__((section("__ksymtab" sec), unused))	\
+	= { (unsigned long)&sym, __kstrtab_##sym }

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__ksymtab_strings") over __attribute__((section("__ksymtab_strings")))
#82: FILE: include/linux/mod_export.h:37:
+	__attribute__((section("__ksymtab_strings"), aligned(1))) \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(1) over __attribute__((aligned(1)))
#82: FILE: include/linux/mod_export.h:37:
+	__attribute__((section("__ksymtab_strings"), aligned(1))) \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#83: FILE: include/linux/mod_export.h:38:
+^I= MODULE_SYMBOL_PREFIX #sym;                    ^I\$

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#83: FILE: include/linux/mod_export.h:38:
+	__attribute__((section("__ksymtab_strings"), aligned(1))) \
+	= MODULE_SYMBOL_PREFIX #sym;                    	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__ksymtab" sec) over __attribute__((section("__ksymtab" sec)))
#86: FILE: include/linux/mod_export.h:41:
+	__attribute__((section("__ksymtab" sec), unused))	\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#87: FILE: include/linux/mod_export.h:42:
+	__attribute__((section("__ksymtab" sec), unused))	\
+	= { (unsigned long)&sym, __kstrtab_##sym }

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#89: FILE: include/linux/mod_export.h:44:
+#define EXPORT_SYMBOL(sym)					\

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#92: FILE: include/linux/mod_export.h:47:
+#define EXPORT_SYMBOL_GPL(sym)					\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#95: FILE: include/linux/mod_export.h:50:
+#define EXPORT_SYMBOL_GPL_FUTURE(sym)				\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#100: FILE: include/linux/mod_export.h:55:
+#define EXPORT_UNUSED_SYMBOL_GPL(sym) __EXPORT_SYMBOL(sym, "_unused_gpl")

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#110: FILE: include/linux/mod_export.h:65:
+#define EXPORT_SYMBOL(sym)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#111: FILE: include/linux/mod_export.h:66:
+#define EXPORT_SYMBOL_GPL(sym)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052996.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 6 checks, 162 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052996.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
