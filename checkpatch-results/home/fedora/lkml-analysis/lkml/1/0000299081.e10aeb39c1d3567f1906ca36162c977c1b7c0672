WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: include/linux/sysids.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#57: FILE: include/linux/sysids.h:2:
+ * include/linux/sysids.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/sysids.h:15:
+extern ssize_t get_nextid(struct task_struct *, char *, size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#70: FILE: include/linux/sysids.h:15:
+extern ssize_t get_nextid(struct task_struct *, char *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#70: FILE: include/linux/sysids.h:15:
+extern ssize_t get_nextid(struct task_struct *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#70: FILE: include/linux/sysids.h:15:
+extern ssize_t get_nextid(struct task_struct *, char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/sysids.h:16:
+extern int set_nextid(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#71: FILE: include/linux/sysids.h:16:
+extern int set_nextid(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#71: FILE: include/linux/sysids.h:16:
+extern int set_nextid(struct task_struct *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/sysids.h:17:
+extern int reset_nextid(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#72: FILE: include/linux/sysids.h:17:
+extern int reset_nextid(struct task_struct *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: fs/proc/base.c:1142:
+static ssize_t next_id_read(struct file *file, char __user *buf,
+				size_t count, loff_t *ppos)

CHECK:SPACING: No space is necessary after a cast
#124: FILE: fs/proc/base.c:1156:
+	page = (char *) __get_free_page(GFP_TEMPORARY);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#128: FILE: fs/proc/base.c:1160:
+	length = get_nextid(task, (char *) page, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: fs/proc/base.c:1163:
+		length = simple_read_from_buffer(buf, count, ppos,
+						(char *)page, length);

CHECK:SPACING: No space is necessary after a cast
#132: FILE: fs/proc/base.c:1164:
+	free_page((unsigned long) page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: fs/proc/base.c:1172:
+static ssize_t next_id_write(struct file *file, const char __user *buf,
+				size_t count, loff_t *ppos)

CHECK:SPACING: No space is necessary after a cast
#170: FILE: fs/proc/base.c:1202:
+	free_page((unsigned long) page);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: fs/proc/base.c:1211:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#187: FILE: fs/proc/base.c:2527:
+	REG("next_id", S_IRUGO|S_IWUSR, next_id),
 	                      ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#187: FILE: fs/proc/base.c:2527:
+	REG("next_id", S_IRUGO|S_IWUSR, next_id),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#195: FILE: fs/proc/base.c:2854:
+	REG("next_id", S_IRUGO|S_IWUSR, next_id),
 	                      ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#195: FILE: fs/proc/base.c:2854:
+	REG("next_id", S_IRUGO|S_IWUSR, next_id),

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#217: FILE: kernel/nextid.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#218: FILE: kernel/nextid.c:2:
+ * linux/kernel/nextid.c

CHECK:LINE_SPACING: Please don't use multiple blank lines
#230: FILE: kernel/nextid.c:14:
+
+

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#249: FILE: kernel/nextid.c:33:
+	next_id = simple_strtol(buffer, &end, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299081.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 14 checks, 251 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299081.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
