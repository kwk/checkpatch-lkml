WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: security/tomoyo/common.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#61: FILE: security/tomoyo/common.c:2:
+ * security/tomoyo/common.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#106: FILE: security/tomoyo/common.c:47:
+	[TMY_MAX_ACCEPT_ENTRY]    =
+	{ "MAX_ACCEPT_ENTRY", MAX_ACCEPT_ENTRY, INT_MAX },

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'chracters' may be misspelled - perhaps 'characters'?
#136: FILE: security/tomoyo/common.c:77:
+ * Remove leading and trailing non ASCII printable chracters and
                                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'chracters' may be misspelled - perhaps 'characters'?
#137: FILE: security/tomoyo/common.c:78:
+ * replace one or more non ASCII printable chracters with single space.
                                            ^^^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#183: FILE: security/tomoyo/common.c:124:
+	return (c >= '0' && c <= '9') || (c >= 'A' && c <= 'F')
+		|| (c >= 'a' && c <= 'f');

CHECK:SPACING: No space is necessary after a cast
#197: FILE: security/tomoyo/common.c:138:
+	return (((unsigned char) (c - '0')) << 6) +

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#198: FILE: security/tomoyo/common.c:139:
+		(((unsigned char) (d - '0')) << 3) +

CHECK:SPACING: No space is necessary after a cast
#199: FILE: security/tomoyo/common.c:140:
+		(((unsigned char) (e - '0')));

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#261: FILE: security/tomoyo/common.c:202:
+		c = * (strchr(filename, '\0') - 1);
 		    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#271: FILE: security/tomoyo/common.c:212:
+		if (c == '\\') {
[...]
+		} else if (c <= 0x20 || c >= 0x7F)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#273: FILE: security/tomoyo/common.c:214:
+			unsigned char f;
+			switch ((c = *filename++)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#317: FILE: security/tomoyo/common.c:258:
+out: ;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#318: FILE: security/tomoyo/common.c:259:
+	printk(KERN_DEBUG "%s: Invalid pathname '%s'\n",

CHECK:SPACING: No space is necessary after a cast
#341: FILE: security/tomoyo/common.c:282:
+	if (!domainname || !tmy_strstarts((char **) &domainname, TMY_ROOT_NAME))

WARNING:LINE_SPACING: Missing a blank line after declarations
#358: FILE: security/tomoyo/common.c:299:
+				unsigned char f;
+				switch ((c = *domainname++)) {

WARNING:SPACING: space prohibited before semicolon
#384: FILE: security/tomoyo/common.c:325:
+out: ;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#385: FILE: security/tomoyo/common.c:326:
+	printk(KERN_DEBUG "%s: Invalid domainname '%s'\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#470: FILE: security/tomoyo/common.c:411:
+	const int len = strlen(name);
+	ptr->total_len = len;

WARNING:SPACING: space prohibited before semicolon
#647: FILE: security/tomoyo/common.c:588:
+out: ;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#854: FILE: security/tomoyo/common.c:795:
+	return sbin_init_started && index < TMY_MAX_CONTROL_INDEX
+		&& profile_ptr[profile] ?

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptr"
#912: FILE: security/tomoyo/common.c:853:
+	if (profile < TMY_MAX_PROFILES && ptr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptr"
#914: FILE: security/tomoyo/common.c:855:
+		if (ptr != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#916: FILE: security/tomoyo/common.c:857:
+			int i;
+			for (i = 0; i < TMY_MAX_CONTROL_INDEX; i++)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#944: FILE: security/tomoyo/common.c:885:
+	i = simple_strtoul(data, &cp, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:SPACING: space prohibited before semicolon
#1009: FILE: security/tomoyo/common.c:950:
+non_comment: ;

WARNING:SPACING: space prohibited before semicolon
#1014: FILE: security/tomoyo/common.c:955:
+comment_ok: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1044: FILE: security/tomoyo/common.c:985:
+	u8 is_domain = 0;
+	if (!tmy_is_root())

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1047: FILE: security/tomoyo/common.c:988:
+		if (!tmy_is_correct_domain(manager, __FUNCTION__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1051: FILE: security/tomoyo/common.c:992:
+		if (!tmy_correct_path(manager, 1, -1, -1, __FUNCTION__))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!saved_manager"
#1056: FILE: security/tomoyo/common.c:997:
+	if (saved_manager == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_entry"
#1075: FILE: security/tomoyo/common.c:1016:
+	if (new_entry == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1081: FILE: security/tomoyo/common.c:1022:
+	if (ptr) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1085: FILE: security/tomoyo/common.c:1026:
+	} else

WARNING:SPACING: space prohibited before semicolon
#1088: FILE: security/tomoyo/common.c:1029:
+out: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1114: FILE: security/tomoyo/common.c:1055:
+	struct policy_manager_entry *ptr = head->read_var2;
+	if (head->read_eof)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1177: FILE: security/tomoyo/common.c:1118:
+		const pid_t pid = current->pid;
+		if (last_pid != pid) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1178: FILE: security/tomoyo/common.c:1119:
+			printk(KERN_INFO

CHECK:BRACES: braces {} should be used on all arms of this statement
#1216: FILE: security/tomoyo/common.c:1157:
+		if (is_delete) {
[...]
+		} else if (is_select)
[...]
+		else if (is_undelete)
[...]
+		else
[...]

CHECK:SPACING: No space is necessary after a cast
#1235: FILE: security/tomoyo/common.c:1176:
+			domain->profile = (u8) profile;

CHECK:SPACING: No space is necessary after a cast
#1260: FILE: security/tomoyo/common.c:1201:
+	struct file_acl *ptr2 = (struct file_acl *) ptr;

CHECK:SPACING: No space is necessary after a cast
#1275: FILE: security/tomoyo/common.c:1216:
+	struct argv0_acl *ptr2 = (struct argv0_acl *) ptr;

CHECK:SPACING: No space is necessary after a cast
#1287: FILE: security/tomoyo/common.c:1228:
+	struct net_acl *ptr2 = (struct net_acl *) ptr;

WARNING:SPACING: space prohibited before semicolon
#1307: FILE: security/tomoyo/common.c:1248:
+non_address_group: ;

WARNING:SPACING: space prohibited before semicolon
#1320: FILE: security/tomoyo/common.c:1261:
+ipv6_address: ;

WARNING:SPACING: space prohibited before semicolon
#1332: FILE: security/tomoyo/common.c:1273:
+print_port: ;

WARNING:SPACING: space prohibited before semicolon
#1340: FILE: security/tomoyo/common.c:1281:
+out: ;

CHECK:SPACING: No space is necessary after a cast
#1348: FILE: security/tomoyo/common.c:1289:
+	struct signal_acl *ptr2 = (struct signal_acl *) ptr;

CHECK:SPACING: No space is necessary after a cast
#1367: FILE: security/tomoyo/common.c:1308:
+		struct double_acl *ptr2 = (struct double_acl *) ptr;

CHECK:SPACING: No space is necessary after a cast
#1382: FILE: security/tomoyo/common.c:1323:
+		struct single_acl *ptr2 = (struct single_acl *) ptr;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1404: FILE: security/tomoyo/common.c:1345:
+	case 0: break; /* Resume from printing domainname. */

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1405: FILE: security/tomoyo/common.c:1346:
+	case 1: goto step1; /* Resume from printing profile number. */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1406: FILE: security/tomoyo/common.c:1347:
+	case 2: goto step2; /* Resume from printing ACL entries. */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1407: FILE: security/tomoyo/common.c:1348:
+	case 3: goto step3; /* Resume from printing trailing '\n'. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1416: FILE: security/tomoyo/common.c:1357:
+		struct acl_info *ptr;
+		if (domain->is_deleted)

WARNING:SPACING: space prohibited before semicolon
#1422: FILE: security/tomoyo/common.c:1363:
+step1: ;

WARNING:SPACING: space prohibited before semicolon
#1433: FILE: security/tomoyo/common.c:1374:
+step2: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1437: FILE: security/tomoyo/common.c:1378:
+			const int pos = head->read_avail;
+			head->read_var2 = ptr;

CHECK:BRACES: Unbalanced braces around else statement
#1452: FILE: security/tomoyo/common.c:1393:
+			} else

WARNING:SPACING: space prohibited before semicolon
#1456: FILE: security/tomoyo/common.c:1397:
+print_acl_rollback: ;

WARNING:SPACING: space prohibited before semicolon
#1466: FILE: security/tomoyo/common.c:1407:
+step3: ;

CHECK:SPACING: No space is necessary after a cast
#1508: FILE: security/tomoyo/common.c:1449:
+	head->read_step = (int) simple_strtoul(head->write_buf, NULL, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1508: FILE: security/tomoyo/common.c:1449:
+	head->read_step = (int) simple_strtoul(head->write_buf, NULL, 10);

CHECK:SPACING: No space is necessary after a cast
#1529: FILE: security/tomoyo/common.c:1470:
+		domain = ((struct tmy_security *) p->security)->domain;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1557: FILE: security/tomoyo/common.c:1498:
+	profile = simple_strtoul(data, NULL, 10);

CHECK:SPACING: No space is necessary after a cast
#1560: FILE: security/tomoyo/common.c:1501:
+		domain->profile = (u8) profile;

WARNING:TYPO_SPELLING: 'everytime' may be misspelled - perhaps 'every time'?
#1749: FILE: security/tomoyo/common.c:1690:
+	 * So let do_execve() call this function everytime.
 	                                         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1753: FILE: security/tomoyo/common.c:1694:
+		struct nameidata nd;
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1757: FILE: security/tomoyo/common.c:1698:
+		if (path_lookup(tmy_loader, LOOKUP_FOLLOW, &nd)) {
 		                                            ^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1758: FILE: security/tomoyo/common.c:1699:
+			printk("TOMOYO: Not activating Mandatory Access Control"

WARNING:SPLIT_STRING: quoted string split across lines
#1759: FILE: security/tomoyo/common.c:1700:
+			printk("TOMOYO: Not activating Mandatory Access Control"
+			       " now since %s doesn't exist.\n", tmy_loader);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1762: FILE: security/tomoyo/common.c:1703:
+		path_release(&nd);
 		              ^^

CHECK:SPACING: No space is necessary after a cast
#1763: FILE: security/tomoyo/common.c:1704:
+		argv[0] = (char *) tmy_loader;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1771: FILE: security/tomoyo/common.c:1712:
+	printk(KERN_INFO "TOMOYO: %s   2007/08/21\n", TOMOYO_VERSION_CODE);

WARNING:SPLIT_STRING: quoted string split across lines
#1775: FILE: security/tomoyo/common.c:1716:
+		panic("TOMOYO: No profiles loaded. "
+		      "Run policy loader using 'init=' option.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1777: FILE: security/tomoyo/common.c:1718:
+	printk(KERN_INFO "TOMOYO: Mandatory Access Control activated.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1782: FILE: security/tomoyo/common.c:1723:
+		struct domain_info *domain;
+		for (domain = &KERNEL_DOMAIN; domain; domain = domain->next) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1784: FILE: security/tomoyo/common.c:1725:
+			const u8 profile = domain->profile;
+			if (profile_ptr[profile])

WARNING:SPLIT_STRING: quoted string split across lines
#1787: FILE: security/tomoyo/common.c:1728:
+			panic("TOMOYO: Profile %u (used by '%s') "
+			      "not defined.\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1794: FILE: security/tomoyo/common.c:1735:
+
+

CHECK:SPACING: No space is necessary after a cast
#1844: FILE: security/tomoyo/common.c:1785:
+	len = vsnprintf((char *) &pos, sizeof(pos) - 1, fmt, args) + 32;

WARNING:SPACING: space prohibited before semicolon
#1911: FILE: security/tomoyo/common.c:1852:
+out: ;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1964: FILE: security/tomoyo/common.c:1905:
+		struct query_entry *ptr
+			= list_entry(tmp, struct query_entry, list);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1985: FILE: security/tomoyo/common.c:1926:
+			struct query_entry *ptr
+				= list_entry(tmp, struct query_entry, list);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1998: FILE: security/tomoyo/common.c:1939:
+		if (buf[0]) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2003: FILE: security/tomoyo/common.c:1944:
+		} else

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2022: FILE: security/tomoyo/common.c:1963:
+		struct query_entry *ptr
+			= list_entry(tmp, struct query_entry, list);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2035: FILE: security/tomoyo/common.c:1976:
+		struct query_entry *ptr
+			= list_entry(tmp, struct query_entry, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2074: FILE: security/tomoyo/common.c:2015:
+	unsigned int counter[TMY_MAX_UPDATES_COUNTER];
+	if (head->read_eof)

CHECK:SPACING: No space is necessary after a cast
#2261: FILE: security/tomoyo/common.c:2202:
+	struct io_buffer *head = (struct io_buffer *) file->private_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2262: FILE: security/tomoyo/common.c:2203:
+	struct io_buffer *head = (struct io_buffer *) file->private_data;
+	if (!head->poll)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2263: FILE: security/tomoyo/common.c:2204:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: No space is necessary after a cast
#2272: FILE: security/tomoyo/common.c:2213:
+	struct io_buffer *head = (struct io_buffer *) file->private_data;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2275: FILE: security/tomoyo/common.c:2216:
+		return -ENOSYS;

CHECK:SPACING: No space is necessary after a cast
#2292: FILE: security/tomoyo/common.c:2233:
+	struct io_buffer *head = (struct io_buffer *) file->private_data;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2298: FILE: security/tomoyo/common.c:2239:
+		return -ENOSYS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2311: FILE: security/tomoyo/common.c:2252:
+		char c;
+		if (head->write_avail >= head->writebuf_size - 1) {

CHECK:SPACING: No space is necessary after a cast
#2354: FILE: security/tomoyo/common.c:2295:
+	return tmy_open_control(((u8 *) PDE(inode)->data) - ((u8 *) NULL),

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2384: FILE: security/tomoyo/common.c:2325:
+static struct file_operations tmy_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2385: FILE: security/tomoyo/common.c:2326:
+^I.open ^I = tmy_open,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2387: FILE: security/tomoyo/common.c:2328:
+^I.poll ^I = tmy_poll,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2388: FILE: security/tomoyo/common.c:2329:
+^I.read ^I = tmy_read,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2389: FILE: security/tomoyo/common.c:2330:
+^I.write ^I = tmy_write$

CHECK:SPACING: No space is necessary after a cast
#2402: FILE: security/tomoyo/common.c:2343:
+		entry->data = ((u8 *) NULL) + key;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000387273.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 59 warnings, 39 checks, 2385 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000387273.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
