WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#57: FILE: arch/s390/kernel/head31.S:56:
+# and create a kernel NSS if the SAVESYS= parm is defined
                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#118: FILE: arch/s390/kernel/head64.S:63:
+# and create a kernel NSS if the SAVESYS= parm is defined
                                           ^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_value' - possible side-effects?
#216: FILE: arch/s390/kernel/ipl.c:184:
+#define DEFINE_IPL_ATTR_STR_RW(_prefix, _name, _fmt_out, _fmt_in, _value)\
+static ssize_t sys_##_prefix##_##_name##_show(struct subsystem *subsys,	\
+		char *page)						\
+{									\
+	return sprintf(page, _fmt_out, _value);				\
+}									\
+static ssize_t sys_##_prefix##_##_name##_store(struct subsystem *subsys,\
+		const char *buf, size_t len)				\
+{									\
+	if (sscanf(buf, _fmt_in, _value) != 1)				\
+		return -EINVAL;						\
+	return len;							\
+}									\
+static struct subsys_attribute sys_##_prefix##_##_name##_attr =		\
+	__ATTR(_name,(S_IRUGO | S_IWUSR),				\
+			sys_##_prefix##_##_name##_show,			\
+			sys_##_prefix##_##_name##_store);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#216: FILE: arch/s390/kernel/ipl.c:184:
+#define DEFINE_IPL_ATTR_STR_RW(_prefix, _name, _fmt_out, _fmt_in, _value)\
+static ssize_t sys_##_prefix##_##_name##_show(struct subsystem *subsys,	\
+		char *page)						\
+{									\
+	return sprintf(page, _fmt_out, _value);				\
+}									\
+static ssize_t sys_##_prefix##_##_name##_store(struct subsystem *subsys,\
+		const char *buf, size_t len)				\
+{									\
+	if (sscanf(buf, _fmt_in, _value) != 1)				\
+		return -EINVAL;						\
+	return len;							\
+}									\
+static struct subsys_attribute sys_##_prefix##_##_name##_attr =		\
+	__ATTR(_name,(S_IRUGO | S_IWUSR),				\
+			sys_##_prefix##_##_name##_show,			\
+			sys_##_prefix##_##_name##_store);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: arch/s390/kernel/ipl.c:198:
+	__ATTR(_name,(S_IRUGO | S_IWUSR),				\
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#230: FILE: arch/s390/kernel/ipl.c:198:
+	__ATTR(_name,(S_IRUGO | S_IWUSR),				\

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#271: FILE: arch/s390/kernel/ipl.c:477:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#386: FILE: arch/s390/kernel/setup.c:289:
+ * Create a Kernel NSS if the SAVESYS= parameter is defined
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#390: FILE: arch/s390/kernel/setup.c:293:
+extern int _eshared;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: arch/s390/kernel/setup.c:344:
+		sprintf(defsys_cmd, "%s EW %.5X-%.5X", defsys_cmd,
+		sinitrd_pfn, einitrd_pfn);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#446: FILE: arch/s390/kernel/setup.c:349:
+	sprintf(savesys_cmd, "SAVESYS %s \n IPL %s",

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#506: FILE: arch/s390/kernel/setup.c:409:
+ * and create a kernel NSS at startup if the SAVESYS= parm is defined
                                                       ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: arch/s390/kernel/setup.c:689:
+		if (code_resource.start >= res->start  &&
+			code_resource.start <= res->end &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: arch/s390/kernel/setup.c:693:
+			memcpy(sub_res, &code_resource,
+				sizeof(struct resource));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: arch/s390/kernel/setup.c:700:
+		if (code_resource.start >= res->start &&
+			code_resource.start <= res->end &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#554: FILE: arch/s390/kernel/setup.c:705:
+		if (data_resource.start >= res->start &&
+			data_resource.start <= res->end &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#558: FILE: arch/s390/kernel/setup.c:709:
+			memcpy(sub_res, &data_resource,
+				sizeof(struct resource));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: arch/s390/kernel/setup.c:716:
+		if (data_resource.start >= res->start &&
+			data_resource.start <= res->end &&

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#626: FILE: include/asm-s390/setup.h:159:
+extern void do_reipl(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#627: FILE: include/asm-s390/setup.h:160:
+extern void ipl_save_parameters(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474279.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 8 warnings, 11 checks, 550 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474279.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
