WARNING:TYPO_SPELLING: 'technics' may be misspelled - perhaps 'techniques'?
#41: 
provides a set of general mount options, borrowing technics used
                                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#83: 
accomodate changes in the operating environment or even the time
^^^^^^^^^^

WARNING:TYPO_SPELLING: 'madatory' may be misspelled - perhaps 'mandatory'?
#199: FILE: security/smack/Kconfig:8:
+          of other madatory security schemes.
                    ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#218: FILE: security/smack/smack_access.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sp"
#241: FILE: security/smack/smack_access.c:24:
+	for (; sp != NULL; sp = sp->smk_next)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: security/smack/smack_access.c:87:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:OxV)
#321: FILE: security/smack/smack_access.c:104:
+	for (cp = (char *)&smack, i = 0; i < sizeof(smack_t); str++,cp++,i++) {
 	                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:OxV)
#321: FILE: security/smack/smack_access.c:104:
+	for (cp = (char *)&smack, i = 0; i < sizeof(smack_t); str++,cp++,i++) {
 	                                                                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#335: FILE: security/smack/smackfs.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#339: FILE: security/smack/smackfs.c:5:
+ *  ^Iit under the terms of the GNU General Public License as published by$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#343: FILE: security/smack/smackfs.c:9:
+ * ^ICasey Schaufler <casey@schaufler-ca.com>$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: security/smack/smackfs.c:10:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: security/smack/smackfs.c:12:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#365: FILE: security/smack/smackfs.c:31:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#369: FILE: security/smack/smackfs.c:35:
+^ISMK_LINKS = ^I4,^I/* symlinks */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#370: FILE: security/smack/smackfs.c:36:
+^ISMK_CIPSO = ^I5,^I/* load label -> CIPSO mapping */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#371: FILE: security/smack/smackfs.c:37:
+^ISMK_DOI = ^I6,^I/* CIPSO DOI */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#372: FILE: security/smack/smackfs.c:38:
+^ISMK_DIRECT = ^I7,^I/* CIPSO level indicating direct label */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#373: FILE: security/smack/smackfs.c:39:
+^ISMK_AMBIENT = ^I8,^I/* internet ambient label */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#374: FILE: security/smack/smackfs.c:40:
+^ISMK_NLTYPE = ^I9,^I/* label scheme to use by default */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#400: FILE: security/smack/smackfs.c:66:
+        .smk_next = NULL,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: security/smack/smackfs.c:66:
+        .smk_next = NULL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#401: FILE: security/smack/smackfs.c:67:
+        .smk_smack = SMK_FLOOR,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: security/smack/smackfs.c:67:
+        .smk_smack = SMK_FLOOR,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: security/smack/smackfs.c:68:
+        .smk_level = 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: security/smack/smackfs.c:68:
+        .smk_level = 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: security/smack/smackfs.c:69:
+        .smk_catset = 0LL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: security/smack/smackfs.c:69:
+        .smk_catset = 0LL,$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#405: FILE: security/smack/smackfs.c:71:
+};
+struct smk_cipso_entry *smack_cipso = &smack_cipso_floor;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: security/smack/smackfs.c:79:
+ * 'ssssssss oooooooo mmmm\n\0' $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#417: FILE: security/smack/smackfs.c:83:
+static ssize_t smk_read_load(struct file *filp, char __user *buf,
                                           ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: security/smack/smackfs.c:92:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!result"
#432: FILE: security/smack/smackfs.c:98:
+	if (result == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#435: FILE: security/smack/smackfs.c:101:
+	for (cp = result; slp != NULL; slp = slp->smk_next) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: security/smack/smackfs.c:106:
+^I^Iif (srp->smk_access != 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: security/smack/smackfs.c:122:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sp"
#476: FILE: security/smack/smackfs.c:142:
+	for (sp = smack_list; sp != NULL; sp = sp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#483: FILE: security/smack/smackfs.c:149:
+	if (sp == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*newp)...) over kzalloc(sizeof(struct smk_list_entry)...)
#484: FILE: security/smack/smackfs.c:150:
+		newp = kzalloc(sizeof(struct smk_list_entry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:RETURN_VOID: void function return statements are not generally useful
#494: FILE: security/smack/smackfs.c:160:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#496: FILE: security/smack/smackfs.c:162:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#506: FILE: security/smack/smackfs.c:172:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#522: FILE: security/smack/smackfs.c:188:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#532: FILE: security/smack/smackfs.c:198:
+	for (cp = data - 1; cp != NULL; cp = strchr(cp + 1, '\n')) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#538: FILE: security/smack/smackfs.c:204:
+			printk("%s:%d bad scan\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: security/smack/smackfs.c:205:
+			printk("%s:%d bad scan\n",
+				__FUNCTION__, __LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#539: FILE: security/smack/smackfs.c:205:
+				__FUNCTION__, __LINE__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#560: FILE: security/smack/smackfs.c:226:
+		printk("%s:%d rule %s %s 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: security/smack/smackfs.c:227:
+		printk("%s:%d rule %s %s 0x%x\n",
+			__FUNCTION__, __LINE__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#561: FILE: security/smack/smackfs.c:227:
+			__FUNCTION__, __LINE__,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#571: FILE: security/smack/smackfs.c:237:
+static struct file_operations smk_load_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*doip)...) over kmalloc(sizeof(struct cipso_v4_doi)...)
#606: FILE: security/smack/smackfs.c:272:
+	doip = kmalloc(sizeof(struct cipso_v4_doi), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!doip"
#607: FILE: security/smack/smackfs.c:273:
+	if (doip == NULL)

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#608: FILE: security/smack/smackfs.c:274:
+	if (doip == NULL)
+		panic("smack:  Failed to initialize cipso DOI.\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ndmp)...) over kmalloc(sizeof(struct netlbl_dom_map)...)
#611: FILE: security/smack/smackfs.c:277:
+	ndmp = kmalloc(sizeof(struct netlbl_dom_map), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ndmp"
#612: FILE: security/smack/smackfs.c:278:
+	if (ndmp == NULL)

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#613: FILE: security/smack/smackfs.c:279:
+	if (ndmp == NULL)
+		panic("smack:  Failed to initialize cipso ndmp.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#623: FILE: security/smack/smackfs.c:289:
+		printk("%s:%d add doi rc = %d\n", __FUNCTION__, __LINE__, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#623: FILE: security/smack/smackfs.c:289:
+		printk("%s:%d add doi rc = %d\n", __FUNCTION__, __LINE__, rc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#631: FILE: security/smack/smackfs.c:297:
+		printk("%s:%d remove rc = %d\n", __FUNCTION__, __LINE__, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#631: FILE: security/smack/smackfs.c:297:
+		printk("%s:%d remove rc = %d\n", __FUNCTION__, __LINE__, rc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#635: FILE: security/smack/smackfs.c:301:
+		printk("%s:%d add rc = %d\n", __FUNCTION__, __LINE__, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#635: FILE: security/smack/smackfs.c:301:
+		printk("%s:%d add rc = %d\n", __FUNCTION__, __LINE__, rc);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#641: FILE: security/smack/smackfs.c:307:
+static ssize_t smk_read_cipso(struct file *filp, char __user *buf,
                                            ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!result"
#657: FILE: security/smack/smackfs.c:323:
+	if (result == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#661: FILE: security/smack/smackfs.c:327:
+	for (slp = smack_cipso; slp != NULL; slp = slp->smk_next) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#662: FILE: security/smack/smackfs.c:328:
+		sprintf(cp, "%-8s %3d", (char *)&slp->smk_smack,slp->smk_level);
 		                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#682: FILE: security/smack/smackfs.c:348:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#719: FILE: security/smack/smackfs.c:385:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "eolp"
#731: FILE: security/smack/smackfs.c:397:
+		eolp != NULL && rc >= 0;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#733: FILE: security/smack/smackfs.c:399:
+		linep = eolp + 1, eolp = strchr(linep, '\n')) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#745: FILE: security/smack/smackfs.c:411:
+		if (cp == NULL)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#748: FILE: security/smack/smackfs.c:414:
+		i = sscanf(cp, "%d", &maplevel);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#753: FILE: security/smack/smackfs.c:419:
+		if (cp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#755: FILE: security/smack/smackfs.c:421:
+			if (cp == NULL)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#759: FILE: security/smack/smackfs.c:425:
+				i = sscanf(cp, "%d", &cat);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#769: FILE: security/smack/smackfs.c:435:
+				if (cp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#771: FILE: security/smack/smackfs.c:437:
+			} while (cp != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "scp"
#779: FILE: security/smack/smackfs.c:445:
+		for (scp = smack_cipso; scp != NULL; scp = scp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scp"
#783: FILE: security/smack/smackfs.c:449:
+		if (scp == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*scp)...) over kzalloc(sizeof(struct smk_cipso_entry)...)
#784: FILE: security/smack/smackfs.c:450:
+			scp = kzalloc(sizeof(struct smk_cipso_entry),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: security/smack/smackfs.c:451:
+			scp = kzalloc(sizeof(struct smk_cipso_entry),
+				GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#786: FILE: security/smack/smackfs.c:452:
+			if (scp == NULL)
[...]
+			else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scp"
#786: FILE: security/smack/smackfs.c:452:
+			if (scp == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#788: FILE: security/smack/smackfs.c:454:
+			else {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#809: FILE: security/smack/smackfs.c:475:
+static struct file_operations smk_cipso_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#814: FILE: security/smack/smackfs.c:480:
+static ssize_t smk_read_doi(struct file *filp, char __user *buf,
                                          ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#815: FILE: security/smack/smackfs.c:481:
+^I^I^I        size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: security/smack/smackfs.c:481:
+static ssize_t smk_read_doi(struct file *filp, char __user *buf,
+			        size_t count, loff_t *ppos)

ERROR:CODE_INDENT: code indent should use tabs where possible
#830: FILE: security/smack/smackfs.c:496:
+^I^I^I         size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: security/smack/smackfs.c:496:
+static ssize_t smk_write_doi(struct file *file, const char __user *buf,
+			         size_t count, loff_t *ppos)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#844: FILE: security/smack/smackfs.c:510:
+	if (sscanf(temp, "%d", &i) != 1)
+		return -EINVAL;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#852: FILE: security/smack/smackfs.c:518:
+static struct file_operations smk_doi_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#857: FILE: security/smack/smackfs.c:523:
+static ssize_t smk_read_direct(struct file *filp, char __user *buf,
                                             ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#858: FILE: security/smack/smackfs.c:524:
+^I^I^I        size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#858: FILE: security/smack/smackfs.c:524:
+static ssize_t smk_read_direct(struct file *filp, char __user *buf,
+			        size_t count, loff_t *ppos)

ERROR:CODE_INDENT: code indent should use tabs where possible
#873: FILE: security/smack/smackfs.c:539:
+^I^I^I         size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#873: FILE: security/smack/smackfs.c:539:
+static ssize_t smk_write_direct(struct file *file, const char __user *buf,
+			         size_t count, loff_t *ppos)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#887: FILE: security/smack/smackfs.c:553:
+	if (sscanf(temp, "%d", &i) != 1)
+		return -EINVAL;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#895: FILE: security/smack/smackfs.c:561:
+static struct file_operations smk_direct_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#900: FILE: security/smack/smackfs.c:566:
+static ssize_t smk_read_ambient(struct file *filp, char __user *buf,
                                              ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#901: FILE: security/smack/smackfs.c:567:
+^I^I^I        size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: security/smack/smackfs.c:567:
+static ssize_t smk_read_ambient(struct file *filp, char __user *buf,
+			        size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: security/smack/smackfs.c:578:
+	rc = simple_read_from_buffer(buf, count, ppos, &smack_net_ambient,
+		sizeof(smack_t));

ERROR:CODE_INDENT: code indent should use tabs where possible
#918: FILE: security/smack/smackfs.c:584:
+^I^I^I         size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: security/smack/smackfs.c:584:
+static ssize_t smk_write_ambient(struct file *file, const char __user *buf,
+			         size_t count, loff_t *ppos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#942: FILE: security/smack/smackfs.c:608:
+static struct file_operations smk_ambient_ops = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#965: FILE: security/smack/smackfs.c:631:
+};
+#define NCHOICES (sizeof(netlbl_choices) / sizeof(struct option_names))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#967: FILE: security/smack/smackfs.c:633:
+static ssize_t smk_read_nltype(struct file *filp, char __user *buf,
                                             ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#994: FILE: security/smack/smackfs.c:660:
+^I^I^I        size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: security/smack/smackfs.c:660:
+static ssize_t smk_write_nltype(struct file *file, const char __user *buf,
+			        size_t count, loff_t *ppos)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#1011: FILE: security/smack/smackfs.c:677:
+	if (cp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#1014: FILE: security/smack/smackfs.c:680:
+	if (cp != NULL)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1029: FILE: security/smack/smackfs.c:695:
+static struct file_operations smk_nltype_ops = {

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1047: FILE: security/smack/smackfs.c:713:
+static struct super_block *smk_sb = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1048: FILE: security/smack/smackfs.c:714:
+static struct smk_link *smk_links = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1049: FILE: security/smack/smackfs.c:715:
+static int smk_links_count = 0;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1051: FILE: security/smack/smackfs.c:717:
+static void *smackfs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                           ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#1059: FILE: security/smack/smackfs.c:725:
+	for (slp = smk_links; slp != NULL; slp = slp->sl_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slp"
#1063: FILE: security/smack/smackfs.c:729:
+	if (slp == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1064: FILE: security/smack/smackfs.c:730:
+		printk("%s:%d failed\n", __FUNCTION__, __LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1064: FILE: security/smack/smackfs.c:730:
+		printk("%s:%d failed\n", __FUNCTION__, __LINE__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#1068: FILE: security/smack/smackfs.c:734:
+	if (cp == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1073: FILE: security/smack/smackfs.c:739:
+	nd_set_link(nd, cp);
 	            ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#1089: FILE: security/smack/smackfs.c:755:
+	for (slp = smk_links; slp != NULL; slp = slp->sl_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slp"
#1093: FILE: security/smack/smackfs.c:759:
+	if (slp == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1094: FILE: security/smack/smackfs.c:760:
+		printk("%s:%d failed\n", __FUNCTION__, __LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1094: FILE: security/smack/smackfs.c:760:
+		printk("%s:%d failed\n", __FUNCTION__, __LINE__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#1099: FILE: security/smack/smackfs.c:765:
+	if (cp == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1114: FILE: security/smack/smackfs.c:780:
+static void smackfs_put_link(struct dentry *dentry, struct nameidata *nd, void *ptr)
                                                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1116: FILE: security/smack/smackfs.c:782:
+	kfree(nd_get_link(nd));
 	                  ^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1119: FILE: security/smack/smackfs.c:785:
+static struct inode_operations smackfs_symlink_inode_operations = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#1132: FILE: security/smack/smackfs.c:798:
+	for (slp = smk_links; slp != NULL; slp = slp->sl_next) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*slp)...) over kzalloc(sizeof(struct smk_link)...)
#1139: FILE: security/smack/smackfs.c:805:
+	slp = kzalloc(sizeof(struct smk_link), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slp"
#1140: FILE: security/smack/smackfs.c:806:
+	if (slp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry"
#1144: FILE: security/smack/smackfs.c:810:
+	if (dentry == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1145: FILE: security/smack/smackfs.c:811:
+		printk("%s:%d link dentry failed\n", __FUNCTION__, __LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1145: FILE: security/smack/smackfs.c:811:
+		printk("%s:%d link dentry failed\n", __FUNCTION__, __LINE__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#1150: FILE: security/smack/smackfs.c:816:
+	if (inode == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1151: FILE: security/smack/smackfs.c:817:
+		printk("%s:%d link inode failed\n", __FUNCTION__, __LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1151: FILE: security/smack/smackfs.c:817:
+		printk("%s:%d link inode failed\n", __FUNCTION__, __LINE__);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1155: FILE: security/smack/smackfs.c:821:
+	inode->i_mode = S_IFLNK | S_IRWXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:RETURN_VOID: void function return statements are not generally useful
#1174: FILE: security/smack/smackfs.c:840:
+	return;
+}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1176: FILE: security/smack/smackfs.c:842:
+static ssize_t smk_read_links(struct file *filp, char __user *buf,
                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1177: FILE: security/smack/smackfs.c:843:
+static ssize_t smk_read_links(struct file *filp, char __user *buf,
+			     size_t count, loff_t *ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1183: FILE: security/smack/smackfs.c:849:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1184: FILE: security/smack/smackfs.c:850:
+	
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!result"
#1186: FILE: security/smack/smackfs.c:852:
+	if (result == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#1190: FILE: security/smack/smackfs.c:856:
+	for (slp = smk_links, cp = result; slp != NULL; slp = slp->sl_next) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1195: FILE: security/smack/smackfs.c:861:
+	bytes = simple_read_from_buffer(buf,count,ppos,result,strlen(result));
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1195: FILE: security/smack/smackfs.c:861:
+	bytes = simple_read_from_buffer(buf,count,ppos,result,strlen(result));
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1195: FILE: security/smack/smackfs.c:861:
+	bytes = simple_read_from_buffer(buf,count,ppos,result,strlen(result));
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1195: FILE: security/smack/smackfs.c:861:
+	bytes = simple_read_from_buffer(buf,count,ppos,result,strlen(result));
 	                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1196: FILE: security/smack/smackfs.c:862:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1203: FILE: security/smack/smackfs.c:869:
+static ssize_t smk_write_links(struct file *file, const char __user *buf,
+			      size_t count, loff_t *ppos)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#1223: FILE: security/smack/smackfs.c:889:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#1233: FILE: security/smack/smackfs.c:899:
+	for (cp = data - 1; cp != NULL; cp = strchr(cp + 1, '\n')) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1237: FILE: security/smack/smackfs.c:903:
+			printk("%s:%d bad scan\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: security/smack/smackfs.c:904:
+			printk("%s:%d bad scan\n",
+				__FUNCTION__, __LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1238: FILE: security/smack/smackfs.c:904:
+				__FUNCTION__, __LINE__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1242: FILE: security/smack/smackfs.c:908:
+		printk("%s:%d add %s -> %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1243: FILE: security/smack/smackfs.c:909:
+		printk("%s:%d add %s -> %s\n",
+			__FUNCTION__, __LINE__, name, target);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1243: FILE: security/smack/smackfs.c:909:
+			__FUNCTION__, __LINE__, name, target);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1250: FILE: security/smack/smackfs.c:916:
+static struct file_operations smk_links_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1255: FILE: security/smack/smackfs.c:921:
+static int smk_fill_super(struct super_block *sb, void * data, int silent)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1261: FILE: security/smack/smackfs.c:927:
+		[SMK_LOAD] = {"load", &smk_load_ops, S_IRUGO|S_IWUSR},
 		                                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1261: FILE: security/smack/smackfs.c:927:
+		[SMK_LOAD] = {"load", &smk_load_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1262: FILE: security/smack/smackfs.c:928:
+		[SMK_LINKS] = {"links", &smk_links_ops, S_IRUGO|S_IWUSR},
 		                                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1262: FILE: security/smack/smackfs.c:928:
+		[SMK_LINKS] = {"links", &smk_links_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1263: FILE: security/smack/smackfs.c:929:
+		[SMK_CIPSO] = {"cipso", &smk_cipso_ops, S_IRUGO|S_IWUSR},
 		                                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1263: FILE: security/smack/smackfs.c:929:
+		[SMK_CIPSO] = {"cipso", &smk_cipso_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1264: FILE: security/smack/smackfs.c:930:
+		[SMK_DOI] = {"doi", &smk_doi_ops, S_IRUGO|S_IWUSR},
 		                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1264: FILE: security/smack/smackfs.c:930:
+		[SMK_DOI] = {"doi", &smk_doi_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1265: FILE: security/smack/smackfs.c:931:
+		[SMK_DIRECT] = {"direct", &smk_direct_ops, S_IRUGO|S_IWUSR},
 		                                                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1265: FILE: security/smack/smackfs.c:931:
+		[SMK_DIRECT] = {"direct", &smk_direct_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1266: FILE: security/smack/smackfs.c:932:
+		[SMK_AMBIENT] = {"ambient", &smk_ambient_ops, S_IRUGO|S_IWUSR},
 		                                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1266: FILE: security/smack/smackfs.c:932:
+		[SMK_AMBIENT] = {"ambient", &smk_ambient_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1267: FILE: security/smack/smackfs.c:933:
+		[SMK_NLTYPE] = {"nltype", &smk_nltype_ops, S_IRUGO|S_IWUSR},
 		                                                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1267: FILE: security/smack/smackfs.c:933:
+		[SMK_NLTYPE] = {"nltype", &smk_nltype_ops, S_IRUGO|S_IWUSR},

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1278: FILE: security/smack/smackfs.c:944:
+		printk(KERN_ERR "%s failed %d while creating inodes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1279: FILE: security/smack/smackfs.c:945:
+		printk(KERN_ERR "%s failed %d while creating inodes\n",
+			__FUNCTION__, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1279: FILE: security/smack/smackfs.c:945:
+			__FUNCTION__, rc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1317: FILE: security/smack/smackfs.c:983:
+			printk(KERN_ERR "smackfs:  could not mount!\n");

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1328: FILE: security/smack/smackfs.c:994:
+__initcall(init_smk_fs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1333: FILE: security/smack/smack.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1355: FILE: security/smack/smack.h:23:
+ * $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1441: FILE: security/smack/smack.h:109:
+#define XATTR_NAME_SMACK	XATTR_SECURITY_PREFIX XATTR_SMACK_SUFFIX

WARNING:FUNCTION_ARGUMENTS: function definition argument 'smack_t' should also have an identifier name
#1497: FILE: security/smack/smack.h:165:
+struct inode_smack *new_inode_smack(smack_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'smack_t *' should also have an identifier name
#1502: FILE: security/smack/smack.h:170:
+int smk_access(smack_t *, smack_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'smack_t *' should also have an identifier name
#1502: FILE: security/smack/smack.h:170:
+int smk_access(smack_t *, smack_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1502: FILE: security/smack/smack.h:170:
+int smk_access(smack_t *, smack_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'smack_t *' should also have an identifier name
#1503: FILE: security/smack/smack.h:171:
+int smk_curacc(smack_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1503: FILE: security/smack/smack.h:171:
+int smk_curacc(smack_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1504: FILE: security/smack/smack.h:172:
+smack_t smk_from_string(char *);

WARNING:TYPO_SPELLING: 'Stricly' may be misspelled - perhaps 'Strictly'?
#1507: FILE: security/smack/smack.h:175:
+ * Stricly for CIPSO level manipulation.
    ^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1512: FILE: security/smack/smack.h:180:
+        char *cp = (char *)catsetp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1512: FILE: security/smack/smack.h:180:
+        char *cp = (char *)catsetp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1514: FILE: security/smack/smack.h:182:
+        if (cat > sizeof(smack_t) * 8)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1514: FILE: security/smack/smack.h:182:
+        if (cat > sizeof(smack_t) * 8)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1515: FILE: security/smack/smack.h:183:
+                return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1515: FILE: security/smack/smack.h:183:
+                return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1517: FILE: security/smack/smack.h:185:
+        cp[(cat - 1) / 8] |= 0x80 >> ((cat - 1) % 8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1517: FILE: security/smack/smack.h:185:
+        cp[(cat - 1) / 8] |= 0x80 >> ((cat - 1) % 8);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1526: FILE: security/smack/smack.h:194:
+	struct task_smack *stp = tsp->security;
+	return &stp->smk_task;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1535: FILE: security/smack/smack.h:203:
+	struct inode_smack *sip = isp->i_security;
+	return &sip->smk_inode;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bp"
#1546: FILE: security/smack/smack.h:214:
+	if (bp != NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1566: FILE: security/smack/smack.h:234:
+		if (found)
[...]
+		else if (i >= size || *from > '~' || *from <= ' ') {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1572: FILE: security/smack/smack.h:240:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1583: FILE: security/smack/smack_lsm.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1624: FILE: security/smack/smack_lsm.c:42:
+extern smack_t smack_net_ambient;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1625: FILE: security/smack/smack_lsm.c:43:
+extern int smack_net_nltype;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1626: FILE: security/smack/smack_lsm.c:44:
+extern int smack_cipso_direct;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1627: FILE: security/smack/smack_lsm.c:45:
+extern struct smk_cipso_entry *smack_cipso;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1629: FILE: security/smack/smack_lsm.c:47:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ip->i_op->getxattr"
#1638: FILE: security/smack/smack_lsm.c:56:
+	if (ip->i_op->getxattr == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1651: FILE: security/smack/smack_lsm.c:69:
+        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1651: FILE: security/smack/smack_lsm.c:69:
+        return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1658: FILE: security/smack/smack_lsm.c:76:
+        isp = kzalloc(sizeof(struct inode_smack), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1658: FILE: security/smack/smack_lsm.c:76:
+        isp = kzalloc(sizeof(struct inode_smack), GFP_KERNEL);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*isp)...) over kzalloc(sizeof(struct inode_smack)...)
#1658: FILE: security/smack/smack_lsm.c:76:
+        isp = kzalloc(sizeof(struct inode_smack), GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1659: FILE: security/smack/smack_lsm.c:77:
+        if (isp == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1659: FILE: security/smack/smack_lsm.c:77:
+        if (isp == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp"
#1659: FILE: security/smack/smack_lsm.c:77:
+        if (isp == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1660: FILE: security/smack/smack_lsm.c:78:
+                return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1660: FILE: security/smack/smack_lsm.c:78:
+                return NULL;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1696: FILE: security/smack/smack_lsm.c:114:
+	if (rc == 0)
+		 if (*sp != SMK_FLOOR)

WARNING:TABSTOP: Statements should start on a tabstop
#1697: FILE: security/smack/smack_lsm.c:115:
+		 if (*sp != SMK_FLOOR)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tsp)...) over kzalloc(sizeof(struct task_smack)...)
#1708: FILE: security/smack/smack_lsm.c:126:
+	tsp = kzalloc(sizeof(struct task_smack), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsp"
#1709: FILE: security/smack/smack_lsm.c:127:
+	if (tsp == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbsp)...) over kzalloc(sizeof(struct superblock_smack)...)
#1803: FILE: security/smack/smack_lsm.c:221:
+	sbsp = kzalloc(sizeof(struct superblock_smack), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sbsp"
#1805: FILE: security/smack/smack_lsm.c:223:
+	if (sbsp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!otheropts"
#1837: FILE: security/smack/smack_lsm.c:255:
+	if (otheropts == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#1840: FILE: security/smack/smack_lsm.c:258:
+	for (cp = orig, commap = orig; commap != NULL; cp = commap + 1) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#1853: FILE: security/smack/smack_lsm.c:271:
+		if (commap != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#1877: FILE: security/smack/smack_lsm.c:295:
+	if (sp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#1884: FILE: security/smack/smack_lsm.c:302:
+	if (inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "op"
#1889: FILE: security/smack/smack_lsm.c:307:
+	for (op = data; op != NULL; op = commap) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#1891: FILE: security/smack/smack_lsm.c:309:
+		if (commap != NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1902: FILE: security/smack/smack_lsm.c:320:
+		} else if (strncmp(op,SMK_FSDEFAULT,strlen(SMK_FSDEFAULT))==0) {
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1902: FILE: security/smack/smack_lsm.c:320:
+		} else if (strncmp(op,SMK_FSDEFAULT,strlen(SMK_FSDEFAULT))==0) {
 		                                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1902: FILE: security/smack/smack_lsm.c:320:
+		} else if (strncmp(op,SMK_FSDEFAULT,strlen(SMK_FSDEFAULT))==0) {
 		                                                          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp"
#1917: FILE: security/smack/smack_lsm.c:335:
+	if (isp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry"
#1929: FILE: security/smack/smack_lsm.c:347:
+	if (dentry == NULL || dentry->d_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_sb"
#1929: FILE: security/smack/smack_lsm.c:347:
+	if (dentry == NULL || dentry->d_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_sb->s_security"
#1930: FILE: security/smack/smack_lsm.c:348:
+	    dentry->d_sb->s_security == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1938: FILE: security/smack/smack_lsm.c:356:
+static int smack_sb_mount(char *dev_name, struct nameidata *nd,
                                                             ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1939: FILE: security/smack/smack_lsm.c:357:
+        char *type, unsigned long flags, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1939: FILE: security/smack/smack_lsm.c:357:
+static int smack_sb_mount(char *dev_name, struct nameidata *nd,
+        char *type, unsigned long flags, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1939: FILE: security/smack/smack_lsm.c:357:
+        char *type, unsigned long flags, void *data)$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1944: FILE: security/smack/smack_lsm.c:362:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||
 	    ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd"
#1944: FILE: security/smack/smack_lsm.c:362:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd->mnt"
#1944: FILE: security/smack/smack_lsm.c:362:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd->mnt->mnt_sb"
#1944: FILE: security/smack/smack_lsm.c:362:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd->mnt->mnt_sb->s_security"
#1945: FILE: security/smack/smack_lsm.c:363:
+	    nd->mnt->mnt_sb->s_security == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1972: FILE: security/smack/smack_lsm.c:390:
+        inode->i_security = new_inode_smack(*csp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1972: FILE: security/smack/smack_lsm.c:390:
+        inode->i_security = new_inode_smack(*csp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1973: FILE: security/smack/smack_lsm.c:391:
+        if (inode->i_security == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1973: FILE: security/smack/smack_lsm.c:391:
+        if (inode->i_security == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_security"
#1973: FILE: security/smack/smack_lsm.c:391:
+        if (inode->i_security == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1974: FILE: security/smack/smack_lsm.c:392:
+                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1974: FILE: security/smack/smack_lsm.c:392:
+                return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1985: FILE: security/smack/smack_lsm.c:403:
+                               char **name, void **value, size_t *len)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1985: FILE: security/smack/smack_lsm.c:403:
+static int smack_inode_init_security(struct inode *inode, struct inode *dir,
+                               char **name, void **value, size_t *len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1985: FILE: security/smack/smack_lsm.c:403:
+                               char **name, void **value, size_t *len)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1989: FILE: security/smack/smack_lsm.c:407:
+	if (name && (*name = kstrdup(XATTR_SMACK_SUFFIX, GFP_KERNEL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1992: FILE: security/smack/smack_lsm.c:410:
+	if (value && (*value = kstrdup((char *)isp, GFP_KERNEL)) == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2059: FILE: security/smack/smack_lsm.c:477:
+				  struct nameidata *nd)
 				                    ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2089: FILE: security/smack/smack_lsm.c:507:
+^I^I^I        void *value, size_t size, int flags)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2089: FILE: security/smack/smack_lsm.c:507:
+static int smack_inode_setxattr(struct dentry *dentry, char *name,
+			        void *value, size_t size, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2094: FILE: security/smack/smack_lsm.c:512:
+	if (strcmp(name, XATTR_NAME_SMACK) == 0 &&
+		!__capable(current, CAP_MAC_OVERRIDE))

WARNING:RETURN_VOID: void function return statements are not generally useful
#2131: FILE: security/smack/smack_lsm.c:549:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2154: FILE: security/smack/smack_lsm.c:572:
+	if (strcmp(name, XATTR_NAME_SMACK) == 0 &&
+		!__capable(current, CAP_MAC_OVERRIDE))

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#2169: FILE: security/smack/smack_lsm.c:587:
+static int smack_inode_getsecurity(const struct inode *inode, const char *name, void *buffer, size_t size, int err)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#2178: FILE: security/smack/smack_lsm.c:596:
+	if (size < sizeof(smack_t) || name == NULL || bsp == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bsp"
#2178: FILE: security/smack/smack_lsm.c:596:
+	if (size < sizeof(smack_t) || name == NULL || bsp == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#2179: FILE: security/smack/smack_lsm.c:597:
+	    inode == NULL || inode->i_security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_security"
#2179: FILE: security/smack/smack_lsm.c:597:
+	    inode == NULL || inode->i_security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sock"
#2196: FILE: security/smack/smack_lsm.c:614:
+	if (sock == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#2223: FILE: security/smack/smack_lsm.c:641:
+	if (value == NULL || size > sizeof(smack_t))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sock"
#2242: FILE: security/smack/smack_lsm.c:660:
+	if (sock == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "buffer"
#2263: FILE: security/smack/smack_lsm.c:681:
+	if (buffer != NULL && len <= buffer_size) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2270: FILE: security/smack/smack_lsm.c:688:
+static void smack_d_instantiate (struct dentry *opt_dentry, struct inode *inode)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#2281: FILE: security/smack/smack_lsm.c:699:
+	if (inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_security"
#2284: FILE: security/smack/smack_lsm.c:702:
+	if (inode->i_security == NULL)

WARNING:TYPO_SPELLING: 'embarassing' may be misspelled - perhaps 'embarrassing'?
#2314: FILE: security/smack/smack_lsm.c:732:
+		 * Casey says that it's a little embarassing
 		                                 ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_op->getxattr"
#2371: FILE: security/smack/smack_lsm.c:789:
+		if (inode->i_op->getxattr == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!opt_dentry"
#2378: FILE: security/smack/smack_lsm.c:796:
+		if (opt_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dp"
#2380: FILE: security/smack/smack_lsm.c:798:
+			if (dp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dp"
#2386: FILE: security/smack/smack_lsm.c:804:
+			if (dp == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2391: FILE: security/smack/smack_lsm.c:809:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2401: FILE: security/smack/smack_lsm.c:819:
+		printk("%s:%d unset? Investigate!\n", __FUNCTION__, __LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2401: FILE: security/smack/smack_lsm.c:819:
+		printk("%s:%d unset? Investigate!\n", __FUNCTION__, __LINE__);

WARNING:RETURN_VOID: void function return statements are not generally useful
#2410: FILE: security/smack/smack_lsm.c:828:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_security"
#2421: FILE: security/smack/smack_lsm.c:839:
+	if (file->f_security == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2445: FILE: security/smack/smack_lsm.c:863:
+                            unsigned long arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2445: FILE: security/smack/smack_lsm.c:863:
+                            unsigned long arg)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2496: FILE: security/smack/smack_lsm.c:914:
+                                     struct fown_struct *fown, int signum)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2496: FILE: security/smack/smack_lsm.c:914:
+                                     struct fown_struct *fown, int signum)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2504: FILE: security/smack/smack_lsm.c:922:
+	file = (struct file *)((long)fown - offsetof(struct file,f_owner));
 	                                                        ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ssp)...) over kzalloc(sizeof(struct socket_smack)...)
#2548: FILE: security/smack/smack_lsm.c:966:
+	ssp = kzalloc(sizeof(struct socket_smack), priority);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#2549: FILE: security/smack/smack_lsm.c:967:
+	if (ssp == NULL)

WARNING:TYPO_SPELLING: 'Appologies' may be misspelled - perhaps 'Apologies'?
#2597: FILE: security/smack/smack_lsm.c:1015:
+ * Appologies to the TSIG group in general and GW in particular.
    ^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "scp"
#2609: FILE: security/smack/smack_lsm.c:1027:
+		for (scp = smack_cipso; scp != NULL; scp = scp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "scp"
#2613: FILE: security/smack/smack_lsm.c:1031:
+		if (scp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp"
#2655: FILE: security/smack/smack_lsm.c:1073:
+	if (isp == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2656: FILE: security/smack/smack_lsm.c:1074:
+		if (kern)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2658: FILE: security/smack/smack_lsm.c:1076:
+		else {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2768: FILE: security/smack/smack_lsm.c:1186:
+	if (flags & S_IRUGO)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#2770: FILE: security/smack/smack_lsm.c:1188:
+	if (flags & S_IWUGO)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#2772: FILE: security/smack/smack_lsm.c:1190:
+	if (flags & S_IXUGO)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg->security"
#2783: FILE: security/smack/smack_lsm.c:1201:
+	if (msg->security == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2793: FILE: security/smack/smack_lsm.c:1211:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shp"
#2796: FILE: security/smack/smack_lsm.c:1214:
+	if (shp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp->security"
#2808: FILE: security/smack/smack_lsm.c:1226:
+	if (isp->security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#2825: FILE: security/smack/smack_lsm.c:1243:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#2838: FILE: security/smack/smack_lsm.c:1256:
+	if (ssp == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#2841: FILE: security/smack/smack_lsm.c:1259:
+	switch(cmd) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#2871: FILE: security/smack/smack_lsm.c:1289:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sma"
#2881: FILE: security/smack/smack_lsm.c:1299:
+	if (sma == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp->security"
#2893: FILE: security/smack/smack_lsm.c:1311:
+	if (isp->security == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2905: FILE: security/smack/smack_lsm.c:1323:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#2911: FILE: security/smack/smack_lsm.c:1329:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#2924: FILE: security/smack/smack_lsm.c:1342:
+	if (ssp == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#2927: FILE: security/smack/smack_lsm.c:1345:
+	switch(cmd) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2957: FILE: security/smack/smack_lsm.c:1375:
+static int smack_sem_semop(struct sem_array *sma, struct sembuf *sops, unsigned nsops, int alter)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#2962: FILE: security/smack/smack_lsm.c:1380:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kisp->security"
#2975: FILE: security/smack/smack_lsm.c:1393:
+	if (kisp->security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msq"
#2989: FILE: security/smack/smack_lsm.c:1407:
+	if (msq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#3000: FILE: security/smack/smack_lsm.c:1418:
+	if (msp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#3013: FILE: security/smack/smack_lsm.c:1431:
+	if (msp == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#3016: FILE: security/smack/smack_lsm.c:1434:
+	switch(cmd) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#3044: FILE: security/smack/smack_lsm.c:1462:
+	if (msp == NULL)

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#3052: FILE: security/smack/smack_lsm.c:1470:
+static int smack_msg_queue_msgrcv(struct msg_queue *msq, struct msg_msg *msg, struct task_struct *target, long type, int mode)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#3057: FILE: security/smack/smack_lsm.c:1475:
+	if (msp == NULL)

WARNING:TYPO_SPELLING: 'subjet' may be misspelled - perhaps 'subject'?
#3099: FILE: security/smack/smack_lsm.c:1517:
+	 * This breaks the strict subjet/object access
 	                          ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3105: FILE: security/smack/smack_lsm.c:1523:
+	if (__capable(current, CAP_MAC_OVERRIDE) ||
+		__capable(p, CAP_MAC_OVERRIDE))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3107: FILE: security/smack/smack_lsm.c:1525:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#3133: FILE: security/smack/smack_lsm.c:1551:
+	if (value == NULL || size == 0 || size >= sizeof(smack_t))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3193: FILE: security/smack/smack_lsm.c:1611:
+			pcat = netlbl_secattr_catmap_walk(sap->mls_cat, pcat+1);
 			                                                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "scp"
#3208: FILE: security/smack/smack_lsm.c:1626:
+	for (scp = smack_cipso; scp != NULL; scp = scp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#3262: FILE: security/smack/smack_lsm.c:1680:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#3262: FILE: security/smack/smack_lsm.c:1680:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent->sk"
#3262: FILE: security/smack/smack_lsm.c:1680:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3293: FILE: security/smack/smack_lsm.c:1711:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#3294: FILE: security/smack/smack_lsm.c:1712:
+	if (skb == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!key->security"
#3324: FILE: security/smack/smack_lsm.c:1742:
+	if (key->security == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#3340: FILE: security/smack/smack_lsm.c:1758:
+^I^I^I        struct task_struct *context, key_perm_t perm)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3340: FILE: security/smack/smack_lsm.c:1758:
+static int smack_key_permission(key_ref_t key_ref,
+			        struct task_struct *context, key_perm_t perm)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!keyp"
#3348: FILE: security/smack/smack_lsm.c:1766:
+	if (keyp == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3361: FILE: security/smack/smack_lsm.c:1779:
+^I.ptrace = ^I^I^Ismack_ptrace,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3362: FILE: security/smack/smack_lsm.c:1780:
+^I.capget = ^I^I^Icap_capget,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3363: FILE: security/smack/smack_lsm.c:1781:
+^I.capset_check = ^I^Icap_capset_check,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3364: FILE: security/smack/smack_lsm.c:1782:
+^I.capset_set = ^I^I^Icap_capset_set,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3365: FILE: security/smack/smack_lsm.c:1783:
+^I.capable = ^I^I^Icap_capable,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3370: FILE: security/smack/smack_lsm.c:1788:
+^I.syslog = ^I^I^Ismack_syslog,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3371: FILE: security/smack/smack_lsm.c:1789:
+^I.settime = ^I^I^Icap_settime,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3372: FILE: security/smack/smack_lsm.c:1790:
+^I.vm_enough_memory = ^I^Icap_vm_enough_memory,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3376: FILE: security/smack/smack_lsm.c:1794:
+^I.bprm_apply_creds = ^I^Icap_bprm_apply_creds,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3378: FILE: security/smack/smack_lsm.c:1796:
+^I.bprm_set_security = ^I^Icap_bprm_set_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3380: FILE: security/smack/smack_lsm.c:1798:
+^I.bprm_secureexec = ^I^Icap_bprm_secureexec,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3382: FILE: security/smack/smack_lsm.c:1800:
+^I.sb_alloc_security = ^I^Ismack_sb_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3383: FILE: security/smack/smack_lsm.c:1801:
+^I.sb_free_security = ^I^Ismack_sb_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3384: FILE: security/smack/smack_lsm.c:1802:
+^I.sb_copy_data = ^I^Ismack_sb_copy_data,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3385: FILE: security/smack/smack_lsm.c:1803:
+^I.sb_kern_mount = ^I^Ismack_sb_kern_mount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3386: FILE: security/smack/smack_lsm.c:1804:
+^I.sb_statfs = ^I^I^Ismack_sb_statfs,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3387: FILE: security/smack/smack_lsm.c:1805:
+^I.sb_mount = ^I^I^Ismack_sb_mount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3389: FILE: security/smack/smack_lsm.c:1807:
+^I.sb_umount = ^I^I^Ismack_sb_umount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3398: FILE: security/smack/smack_lsm.c:1816:
+^I.inode_alloc_security = ^Ismack_inode_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3399: FILE: security/smack/smack_lsm.c:1817:
+^I.inode_free_security = ^I^Ismack_inode_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3400: FILE: security/smack/smack_lsm.c:1818:
+^I.inode_init_security = ^I^Ismack_inode_init_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3401: FILE: security/smack/smack_lsm.c:1819:
+^I.inode_create = ^I^Ismack_inode_create,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3402: FILE: security/smack/smack_lsm.c:1820:
+^I.inode_link = ^I^I^Ismack_inode_link,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3403: FILE: security/smack/smack_lsm.c:1821:
+^I.inode_unlink = ^I^Ismack_inode_unlink,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3404: FILE: security/smack/smack_lsm.c:1822:
+^I.inode_symlink = ^I^Ismack_inode_symlink,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3405: FILE: security/smack/smack_lsm.c:1823:
+^I.inode_mkdir = ^I^I^Ismack_inode_mkdir,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3406: FILE: security/smack/smack_lsm.c:1824:
+^I.inode_rmdir = ^I^I^Ismack_inode_rmdir,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3407: FILE: security/smack/smack_lsm.c:1825:
+^I.inode_mknod = ^I^I^Ismack_inode_mknod,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3408: FILE: security/smack/smack_lsm.c:1826:
+^I.inode_rename = ^I^Ismack_inode_rename,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3409: FILE: security/smack/smack_lsm.c:1827:
+^I.inode_readlink = ^I^Ismack_inode_readlink,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3410: FILE: security/smack/smack_lsm.c:1828:
+^I.inode_follow_link = ^I^Ismack_inode_follow_link,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3411: FILE: security/smack/smack_lsm.c:1829:
+^I.inode_permission = ^I^Ismack_inode_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3412: FILE: security/smack/smack_lsm.c:1830:
+^I.inode_setattr = ^I^Ismack_inode_setattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3413: FILE: security/smack/smack_lsm.c:1831:
+^I.inode_getattr = ^I^Ismack_inode_getattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3415: FILE: security/smack/smack_lsm.c:1833:
+^I.inode_setxattr = ^I^Ismack_inode_setxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3416: FILE: security/smack/smack_lsm.c:1834:
+^I.inode_post_setxattr = ^I^Ismack_inode_post_setxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3417: FILE: security/smack/smack_lsm.c:1835:
+^I.inode_getxattr = ^I^Ismack_inode_getxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3418: FILE: security/smack/smack_lsm.c:1836:
+^I.inode_listxattr = ^I^Ismack_inode_listxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3419: FILE: security/smack/smack_lsm.c:1837:
+^I.inode_removexattr = ^I^Ismack_inode_removexattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3420: FILE: security/smack/smack_lsm.c:1838:
+^I.inode_xattr_getsuffix = ^Ismack_inode_xattr_getsuffix,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3421: FILE: security/smack/smack_lsm.c:1839:
+^I.inode_getsecurity = ^I^Ismack_inode_getsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3422: FILE: security/smack/smack_lsm.c:1840:
+^I.inode_setsecurity = ^I^Ismack_inode_setsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3423: FILE: security/smack/smack_lsm.c:1841:
+^I.inode_listsecurity = ^I^Ismack_inode_listsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3425: FILE: security/smack/smack_lsm.c:1843:
+^I.file_permission = ^I^Ismack_file_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3426: FILE: security/smack/smack_lsm.c:1844:
+^I.file_alloc_security = ^I^Ismack_file_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3427: FILE: security/smack/smack_lsm.c:1845:
+^I.file_free_security = ^I^Ismack_file_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3428: FILE: security/smack/smack_lsm.c:1846:
+^I.file_ioctl = ^I^I^Ismack_file_ioctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3431: FILE: security/smack/smack_lsm.c:1849:
+^I.file_lock = ^I^I^Ismack_file_lock,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3432: FILE: security/smack/smack_lsm.c:1850:
+^I.file_fcntl = ^I^I^Ismack_file_fcntl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3433: FILE: security/smack/smack_lsm.c:1851:
+^I.file_set_fowner = ^I^Ismack_file_set_fowner,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3434: FILE: security/smack/smack_lsm.c:1852:
+^I.file_send_sigiotask = ^I^Ismack_file_send_sigiotask,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3435: FILE: security/smack/smack_lsm.c:1853:
+^I.file_receive = ^I^Ismack_file_receive,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3438: FILE: security/smack/smack_lsm.c:1856:
+^I.task_alloc_security = ^I^Ismack_task_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3439: FILE: security/smack/smack_lsm.c:1857:
+^I.task_free_security = ^I^Ismack_task_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3443: FILE: security/smack/smack_lsm.c:1861:
+^I.task_setpgid = ^I^Ismack_task_setpgid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3444: FILE: security/smack/smack_lsm.c:1862:
+^I.task_getpgid = ^I^Ismack_task_getpgid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3445: FILE: security/smack/smack_lsm.c:1863:
+^I.task_getsid = ^I^I^Ismack_task_getsid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3446: FILE: security/smack/smack_lsm.c:1864:
+^I.task_getsecid = ^I^Ismack_task_getsecid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3448: FILE: security/smack/smack_lsm.c:1866:
+^I.task_setnice = ^I^Ismack_task_setnice,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3449: FILE: security/smack/smack_lsm.c:1867:
+^I.task_setioprio = ^I^Ismack_task_setioprio,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3450: FILE: security/smack/smack_lsm.c:1868:
+^I.task_getioprio = ^I^Ismack_task_getioprio,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3452: FILE: security/smack/smack_lsm.c:1870:
+^I.task_setscheduler = ^I^Ismack_task_setscheduler,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3453: FILE: security/smack/smack_lsm.c:1871:
+^I.task_getscheduler = ^I^Ismack_task_getscheduler,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3454: FILE: security/smack/smack_lsm.c:1872:
+^I.task_movememory = ^I^Ismack_task_movememory,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3455: FILE: security/smack/smack_lsm.c:1873:
+^I.task_kill = ^I^I^Ismack_task_kill,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3456: FILE: security/smack/smack_lsm.c:1874:
+^I.task_wait = ^I^I^Ismack_task_wait,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3459: FILE: security/smack/smack_lsm.c:1877:
+^I.task_to_inode = ^I^Ismack_task_to_inode,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3461: FILE: security/smack/smack_lsm.c:1879:
+^I.ipc_permission = ^I^Ismack_ipc_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3463: FILE: security/smack/smack_lsm.c:1881:
+^I.msg_msg_alloc_security = ^Ismack_msg_msg_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3464: FILE: security/smack/smack_lsm.c:1882:
+^I.msg_msg_free_security = ^Ismack_msg_msg_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3466: FILE: security/smack/smack_lsm.c:1884:
+^I.msg_queue_alloc_security = ^Ismack_msg_queue_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3467: FILE: security/smack/smack_lsm.c:1885:
+^I.msg_queue_free_security = ^Ismack_msg_queue_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3468: FILE: security/smack/smack_lsm.c:1886:
+^I.msg_queue_associate = ^I^Ismack_msg_queue_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3469: FILE: security/smack/smack_lsm.c:1887:
+^I.msg_queue_msgctl = ^I^Ismack_msg_queue_msgctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3470: FILE: security/smack/smack_lsm.c:1888:
+^I.msg_queue_msgsnd = ^I^Ismack_msg_queue_msgsnd,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3471: FILE: security/smack/smack_lsm.c:1889:
+^I.msg_queue_msgrcv = ^I^Ismack_msg_queue_msgrcv,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3473: FILE: security/smack/smack_lsm.c:1891:
+^I.shm_alloc_security = ^I^Ismack_shm_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3474: FILE: security/smack/smack_lsm.c:1892:
+^I.shm_free_security = ^I^Ismack_shm_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3475: FILE: security/smack/smack_lsm.c:1893:
+^I.shm_associate = ^I^Ismack_shm_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3476: FILE: security/smack/smack_lsm.c:1894:
+^I.shm_shmctl = ^I^I^Ismack_shm_shmctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3477: FILE: security/smack/smack_lsm.c:1895:
+^I.shm_shmat = ^I^I^Ismack_shm_shmat,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3479: FILE: security/smack/smack_lsm.c:1897:
+^I.sem_alloc_security = ^I^Ismack_sem_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3480: FILE: security/smack/smack_lsm.c:1898:
+^I.sem_free_security = ^I^Ismack_sem_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3481: FILE: security/smack/smack_lsm.c:1899:
+^I.sem_associate = ^I^Ismack_sem_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3482: FILE: security/smack/smack_lsm.c:1900:
+^I.sem_semctl = ^I^I^Ismack_sem_semctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3483: FILE: security/smack/smack_lsm.c:1901:
+^I.sem_semop = ^I^I^Ismack_sem_semop,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3486: FILE: security/smack/smack_lsm.c:1904:
+^I.netlink_recv = ^I^Icap_netlink_recv,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3491: FILE: security/smack/smack_lsm.c:1909:
+^I.d_instantiate = ^I^Ismack_d_instantiate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3493: FILE: security/smack/smack_lsm.c:1911:
+^I.getprocattr = ^I^I^Ismack_getprocattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3494: FILE: security/smack/smack_lsm.c:1912:
+^I.setprocattr = ^I^I^Ismack_setprocattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3498: FILE: security/smack/smack_lsm.c:1916:
+^I.unix_stream_connect = ^I^Ismack_unix_stream_connect,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3499: FILE: security/smack/smack_lsm.c:1917:
+^I.unix_may_send = ^I^Ismack_unix_may_send,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3501: FILE: security/smack/smack_lsm.c:1919:
+^I/* .socket_create ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3502: FILE: security/smack/smack_lsm.c:1920:
+^I.socket_post_create = ^I^Ismack_socket_post_create,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3503: FILE: security/smack/smack_lsm.c:1921:
+^I/* .socket_bind ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3504: FILE: security/smack/smack_lsm.c:1922:
+^I/* .socket_connect ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3505: FILE: security/smack/smack_lsm.c:1923:
+^I/* .socket_listen ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3506: FILE: security/smack/smack_lsm.c:1924:
+^I/* .socket_accept ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3507: FILE: security/smack/smack_lsm.c:1925:
+^I/* .socket_post_accept ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3508: FILE: security/smack/smack_lsm.c:1926:
+^I/* .socket_sendmsg ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3509: FILE: security/smack/smack_lsm.c:1927:
+^I/* .socket_recvmsg ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3515: FILE: security/smack/smack_lsm.c:1933:
+^I.socket_sock_rcv_skb = ^I^Ismack_socket_sock_rcv_skb,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3518: FILE: security/smack/smack_lsm.c:1936:
+^I.sk_alloc_security = ^I^Ismack_sk_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3519: FILE: security/smack/smack_lsm.c:1937:
+^I.sk_free_security = ^I^Ismack_sk_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3520: FILE: security/smack/smack_lsm.c:1938:
+^I/* .sk_clone_security ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3521: FILE: security/smack/smack_lsm.c:1939:
+^I/* .sk_getsecid ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3522: FILE: security/smack/smack_lsm.c:1940:
+^I.sock_graft = ^I^I^Ismack_sock_graft,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3523: FILE: security/smack/smack_lsm.c:1941:
+^I.inet_conn_request = ^I^Ismack_inet_conn_request,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3527: FILE: security/smack/smack_lsm.c:1945:
+^I/* .req_classify_flow ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3541: FILE: security/smack/smack_lsm.c:1959:
+^I.key_alloc = ^I^I^Ismack_key_alloc,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3542: FILE: security/smack/smack_lsm.c:1960:
+^I.key_free = ^I^I^Ismack_key_free,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3543: FILE: security/smack/smack_lsm.c:1961:
+^I.key_permission = ^I^Ismack_key_permission,$

WARNING:LINE_SPACING: Missing a blank line after declarations
#3551: FILE: security/smack/smack_lsm.c:1969:
+	struct task_smack *tsp;
+	printk(KERN_INFO "Smack:  Initializing.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3551: FILE: security/smack/smack_lsm.c:1969:
+	printk(KERN_INFO "Smack:  Initializing.\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tsp)...) over kzalloc(sizeof(struct task_smack)...)
#3555: FILE: security/smack/smack_lsm.c:1973:
+	tsp = kzalloc(sizeof(struct task_smack), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsp"
#3556: FILE: security/smack/smack_lsm.c:1974:
+	if (tsp == NULL)

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#3557: FILE: security/smack/smack_lsm.c:1975:
+	if (tsp == NULL)
+		panic("smack:  Failed to initialize initial task.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3569: FILE: security/smack/smack_lsm.c:1987:
+/* smack requires early initialization in order to label
+   all processes and objects when they are created. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3569: FILE: security/smack/smack_lsm.c:1987:
+   all processes and objects when they are created. */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000392962.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 64 errors, 245 warnings, 159 checks, 3380 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000392962.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
