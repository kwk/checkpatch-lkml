ERROR:CODE_INDENT: code indent should use tabs where possible
#57: FILE: include/linux/fanotify.h:45:
+        uint32_t group_num;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: include/linux/fanotify.h:45:
+        uint32_t group_num;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#57: FILE: include/linux/fanotify.h:45:
+        uint32_t group_num;

ERROR:CODE_INDENT: code indent should use tabs where possible
#58: FILE: include/linux/fanotify.h:46:
+        uint32_t mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: include/linux/fanotify.h:46:
+        uint32_t mask;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#58: FILE: include/linux/fanotify.h:46:
+        uint32_t mask;

ERROR:CODE_INDENT: code indent should use tabs where possible
#59: FILE: include/linux/fanotify.h:47:
+        uint32_t timeout;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: include/linux/fanotify.h:47:
+        uint32_t timeout;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#59: FILE: include/linux/fanotify.h:47:
+        uint32_t timeout;

ERROR:CODE_INDENT: code indent should use tabs where possible
#60: FILE: include/linux/fanotify.h:48:
+        uint32_t unused[9];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: include/linux/fanotify.h:48:
+        uint32_t unused[9];$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#60: FILE: include/linux/fanotify.h:48:
+        uint32_t unused[9];

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#80: FILE: include/linux/fanotify.h:89:
+extern int fanotify_create_event_fd(struct fanotify_group *group, struct fanotify_event_metadata *data, int nonblock);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/fanotify.h:89:
+extern int fanotify_create_event_fd(struct fanotify_group *group, struct fanotify_event_metadata *data, int nonblock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#88: FILE: include/linux/fanotify.h:106:
+static inline int fanotify_create_event_fd(struct fanotify_group *group, struct fanotify_event_metadata *data, int nonblock)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: net/core/sock.c:158:
+  "sk_lock-AF_FANOTIFY", "sk_lock-AF_MAX"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: net/core/sock.c:173:
+  "slock=AF_FANOTIFY", "slock-AF_MAX"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: net/core/sock.c:188:
+  "clock-AF_FANOTIFY", "clock-AF_MAX"$

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#170: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#186: FILE: net/fanotify/af_fanotify.c:1:
+#include <linux/errno.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#229: FILE: net/fanotify/af_fanotify.c:44:
+	if (sk == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#281: FILE: net/fanotify/af_fanotify.c:96:
+	/*
+	 * we do all of this shit to figure out if this process is closing the last

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'testsock != sock'
#306: FILE: net/fanotify/af_fanotify.c:121:
+				if ((testsock != sock) && (testsock->ops == &fanotify_proto_ops))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'testsock->ops == &fanotify_proto_ops'
#306: FILE: net/fanotify/af_fanotify.c:121:
+				if ((testsock != sock) && (testsock->ops == &fanotify_proto_ops))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#342: FILE: net/fanotify/af_fanotify.c:157:
+static unsigned int fan_poll(struct file * file, struct socket *sock, poll_table *pt)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#347: FILE: net/fanotify/af_fanotify.c:162:
+static int fan_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *optlen)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#364: FILE: net/fanotify/af_fanotify.c:179:
+			return -ENOMEM;
+		else

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#366: FILE: net/fanotify/af_fanotify.c:181:
+		ret = fanotify_create_event_fd(group, &metadata, !!(sock->file->f_flags & O_NONBLOCK));

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#417: FILE: net/fanotify/af_fanotify.c:232:
+__initcall(fanotify_socket_register);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#424: FILE: net/fanotify/af_fanotify.h:1:
+#ifndef _LINUX_AF_FANOTIFY_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217067.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 17 warnings, 8 checks, 352 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217067.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
