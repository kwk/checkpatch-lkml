WARNING:TYPO_SPELLING: 'mutliple' may be misspelled - perhaps 'multiple'?
#33: 
The current dmaengine interface defines mutliple routines per operation,
                                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'definining' may be misspelled - perhaps 'defining'?
#60: 
groundwork for definining cross-channel-operation dependencies, and a
               ^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#121: FILE: drivers/dma/dmaengine.c:179:
+			printk(KERN_ERR "dma_sync_wait_timeout!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#138: FILE: drivers/dma/dmaengine.c:346:
+	BUG_ON(dma_has_cap(DMA_MEMCPY, device->cap_mask) &&

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: drivers/dma/dmaengine.c:347:
+	BUG_ON(dma_has_cap(DMA_MEMCPY, device->cap_mask) &&
+		!device->device_prep_dma_memcpy);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#140: FILE: drivers/dma/dmaengine.c:348:
+	BUG_ON(dma_has_cap(DMA_XOR, device->cap_mask) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: drivers/dma/dmaengine.c:349:
+	BUG_ON(dma_has_cap(DMA_XOR, device->cap_mask) &&
+		!device->device_prep_dma_xor);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: drivers/dma/dmaengine.c:350:
+	BUG_ON(dma_has_cap(DMA_ZERO_SUM, device->cap_mask) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: drivers/dma/dmaengine.c:351:
+	BUG_ON(dma_has_cap(DMA_ZERO_SUM, device->cap_mask) &&
+		!device->device_prep_dma_zero_sum);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#144: FILE: drivers/dma/dmaengine.c:352:
+	BUG_ON(dma_has_cap(DMA_MEMSET, device->cap_mask) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: drivers/dma/dmaengine.c:353:
+	BUG_ON(dma_has_cap(DMA_MEMSET, device->cap_mask) &&
+		!device->device_prep_dma_memset);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#146: FILE: drivers/dma/dmaengine.c:354:
+	BUG_ON(dma_has_cap(DMA_ZERO_SUM, device->cap_mask) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: drivers/dma/dmaengine.c:355:
+	BUG_ON(dma_has_cap(DMA_ZERO_SUM, device->cap_mask) &&
+		!device->device_prep_dma_interrupt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#149: FILE: drivers/dma/dmaengine.c:357:
+	BUG_ON(!device->device_alloc_chan_resources);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#150: FILE: drivers/dma/dmaengine.c:358:
+	BUG_ON(!device->device_free_chan_resources);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#151: FILE: drivers/dma/dmaengine.c:359:
+	BUG_ON(!device->device_dependency_added);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#152: FILE: drivers/dma/dmaengine.c:360:
+	BUG_ON(!device->device_is_tx_complete);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#153: FILE: drivers/dma/dmaengine.c:361:
+	BUG_ON(!device->device_issue_pending);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#154: FILE: drivers/dma/dmaengine.c:362:
+	BUG_ON(!device->dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: drivers/dma/dmaengine.c:453:
+dma_async_memcpy_buf_to_buf(struct dma_chan *chan, void *dest,
+			void *src, size_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: drivers/dma/dmaengine.c:497:
+dma_async_memcpy_buf_to_pg(struct dma_chan *chan, struct page *page,
+			unsigned int offset, void *kdata, size_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: drivers/dma/dmaengine.c:542:
+dma_async_memcpy_pg_to_pg(struct dma_chan *chan, struct page *dest_pg,
+	unsigned int dest_off, struct page *src_pg, unsigned int src_off,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: drivers/dma/dmaengine.c:573:
+void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *tx,
+	struct dma_chan *chan)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#320: FILE: drivers/dma/ioatdma.c:45:
 static int __devinit ioat_probe(struct pci_dev *pdev, const struct pci_device_id *ent);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#338: FILE: drivers/dma/ioatdma.c:95:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#370: FILE: drivers/dma/ioatdma.c:127:
+	ioat_chan->common.cookie = desc->async_tx.cookie = cookie;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: drivers/dma/ioatdma.c:142:
+		ioatdma_chan_write8(ioat_chan, IOAT_CHANCMD_OFFSET,
+					IOAT_CHANCMD_APPEND);

CHECK:BRACES: Unbalanced braces around else statement
#630: FILE: drivers/dma/ioatdma.c:438:
+			} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#647: FILE: drivers/dma/ioatdma.c:462:
+	struct ioat_dma_chan *ioat_chan = to_ioat_chan(chan);
+	spin_lock_bh(&ioat_chan->desc_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#648: FILE: drivers/dma/ioatdma.c:463:
+	if (ioat_chan->pending == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#651: FILE: drivers/dma/ioatdma.c:466:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: drivers/dma/ioatdma.c:628:
+	addr = dma_map_single(dma_chan->device->dev, src, IOAT_TEST_SIZE,
+			DMA_TO_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: drivers/dma/ioatdma.c:631:
+	addr = dma_map_single(dma_chan->device->dev, dest, IOAT_TEST_SIZE,
+			DMA_FROM_DEVICE);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#788: FILE: include/linux/dmaengine.h:89:
+typedef struct { DECLARE_BITMAP(bits, DMA_TX_TYPE_END); } dma_cap_mask_t;

WARNING:REPEATED_WORD: Possible repeated word: 'has'
#804: FILE: include/linux/dmaengine.h:190:
+ *	receipt, i.e. has has a chance to establish any dependency chains

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: include/linux/dmaengine.h:211:
+	void (*tx_set_dest)(dma_addr_t addr,
+		struct dma_async_tx_descriptor *tx, int index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#827: FILE: include/linux/dmaengine.h:213:
+	void (*tx_set_src)(dma_addr_t addr,
+		struct dma_async_tx_descriptor *tx, int index);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#831: FILE: include/linux/dmaengine.h:217:
+	spinlock_t lock;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#887: FILE: include/linux/dmaengine.h:259:
+	struct dma_async_tx_descriptor *(*device_prep_dma_memcpy)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#889: FILE: include/linux/dmaengine.h:261:
+	struct dma_async_tx_descriptor *(*device_prep_dma_xor)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#892: FILE: include/linux/dmaengine.h:264:
+	struct dma_async_tx_descriptor *(*device_prep_dma_zero_sum)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#895: FILE: include/linux/dmaengine.h:267:
+	struct dma_async_tx_descriptor *(*device_prep_dma_memset)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#897: FILE: include/linux/dmaengine.h:269:
+	struct dma_async_tx_descriptor *(*device_prep_dma_interrupt)(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#902: FILE: include/linux/dmaengine.h:274:
+	enum dma_status (*device_is_tx_complete)(struct dma_chan *chan,
 			dma_cookie_t cookie, dma_cookie_t *last,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#914: FILE: include/linux/dmaengine.h:286:
+dma_cookie_t dma_async_memcpy_buf_to_buf(struct dma_chan *chan,
+	void *dest, void *src, size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: include/linux/dmaengine.h:288:
+dma_cookie_t dma_async_memcpy_buf_to_pg(struct dma_chan *chan,
+	struct page *page, unsigned int offset, void *kdata, size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: include/linux/dmaengine.h:290:
+dma_cookie_t dma_async_memcpy_pg_to_pg(struct dma_chan *chan,
+	struct page *dest_pg, unsigned int dest_off, struct page *src_pg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#921: FILE: include/linux/dmaengine.h:293:
+void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *tx,
+	struct dma_chan *chan);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#982: FILE: include/linux/dmaengine.h:313:
+		find_next_bit(srcp->bits, DMA_TX_TYPE_END, n+1));
 		                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cap' - possible side-effects?
#1022: FILE: include/linux/dmaengine.h:330:
+#define for_each_dma_cap_mask(cap, mask) \
+	for ((cap) = first_dma_cap(mask);	\
+		(cap) < DMA_TX_TYPE_END;	\
+		(cap) = next_dma_cap((cap), (mask)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#1022: FILE: include/linux/dmaengine.h:330:
+#define for_each_dma_cap_mask(cap, mask) \
+	for ((cap) = first_dma_cap(mask);	\
+		(cap) < DMA_TX_TYPE_END;	\
+		(cap) = next_dma_cap((cap), (mask)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1056: FILE: include/linux/dmaengine.h:361:
+static inline enum dma_status dma_async_is_tx_complete(struct dma_chan *chan,
 	dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412946.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 34 checks, 950 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412946.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
