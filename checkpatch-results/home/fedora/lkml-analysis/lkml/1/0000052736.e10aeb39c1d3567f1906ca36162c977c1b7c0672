CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#197: FILE: arch/x86/include/asm/debugreg.h:91:
+extern void hw_breakpoint_restore(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: arch/x86/include/asm/hw_breakpoint.h:49:
+extern int arch_validate_hwbkpt_settings(struct perf_event *bp,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#277: FILE: arch/x86/include/asm/hw_breakpoint.h:54:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#287: FILE: arch/x86/include/asm/hw_breakpoint.h:64:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#287: FILE: arch/x86/include/asm/hw_breakpoint.h:64:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: arch/x86/include/asm/hw_breakpoint.h:66:
+extern int arch_bp_generic_fields(int x86_len, int x86_type,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#393: FILE: arch/x86/kernel/hw_breakpoint.c:76:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#393: FILE: arch/x86/kernel/hw_breakpoint.c:76:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#632: FILE: arch/x86/kernel/hw_breakpoint.c:264:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#679: FILE: arch/x86/kernel/hw_breakpoint.c:308:
+}
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#689: FILE: arch/x86/kernel/hw_breakpoint.c:318:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: arch/x86/kernel/hw_breakpoint.c:332:
+		if ((!arch_check_va_in_userspace(info->address, info->len)) &&
+			info->len != X86_BREAKPOINT_EXECUTE)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (bp->callback)
#865: FILE: arch/x86/kernel/hw_breakpoint.c:477:
+		(bp->callback)(bp, args->regs);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around current->thread
#1095: FILE: arch/x86/kernel/ptrace.c:449:
+	struct thread_struct *thread = &(current->thread);

WARNING:TYPO_SPELLING: 'shoud' may be misspelled - perhaps 'should'?
#1185: FILE: arch/x86/kernel/ptrace.c:526:
+		 * We shoud have at least an inactive breakpoint at this
 		      ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1242: FILE: arch/x86/kernel/ptrace.c:584:
+		struct perf_event *bp;
+		bp = thread->ptrace_bps[n];

WARNING:TABSTOP: Statements should start on a tabstop
#1250: FILE: arch/x86/kernel/ptrace.c:590:
+	 } else if (n == 7) {

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1412: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1562: FILE: include/linux/hw_breakpoint.h:1:
+#ifndef _LINUX_HW_BREAKPOINT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1637: FILE: include/linux/hw_breakpoint.h:76:
+extern int register_perf_hw_breakpoint(struct perf_event *bp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1638: FILE: include/linux/hw_breakpoint.h:77:
+extern int __register_perf_hw_breakpoint(struct perf_event *bp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1639: FILE: include/linux/hw_breakpoint.h:78:
+extern void unregister_hw_breakpoint(struct perf_event *bp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1640: FILE: include/linux/hw_breakpoint.h:79:
+extern void unregister_wide_hw_breakpoint(struct perf_event **cpu_events);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1642: FILE: include/linux/hw_breakpoint.h:81:
+extern int reserve_bp_slot(struct perf_event *bp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1643: FILE: include/linux/hw_breakpoint.h:82:
+extern void release_bp_slot(struct perf_event *bp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1645: FILE: include/linux/hw_breakpoint.h:84:
+extern void flush_ptrace_hw_breakpoint(struct task_struct *tsk);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1678: FILE: include/linux/hw_breakpoint.h:117:
+register_perf_hw_breakpoint(struct perf_event *bp)	{ return -ENOSYS; }

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1680: FILE: include/linux/hw_breakpoint.h:119:
+__register_perf_hw_breakpoint(struct perf_event *bp) ^I{ return -ENOSYS; }$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1680: FILE: include/linux/hw_breakpoint.h:119:
+__register_perf_hw_breakpoint(struct perf_event *bp) 	{ return -ENOSYS; }

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1685: FILE: include/linux/hw_breakpoint.h:124:
+reserve_bp_slot(struct perf_event *bp)			{return -ENOSYS; }

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1686: FILE: include/linux/hw_breakpoint.h:125:
+static inline void release_bp_slot(struct perf_event *bp) ^I^I{ }$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1766: FILE: include/linux/perf_event.h:855:
+extern void perf_bp_event(struct perf_event *event, void *data);

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2211: FILE: kernel/hw_breakpoint.c:224:
+	struct perf_event **cpu_events, **pevent, *bp;
 	                                  ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2223: FILE: kernel/hw_breakpoint.c:233:
+		pevent = per_cpu_ptr(cpu_events, cpu);
 		^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2225: FILE: kernel/hw_breakpoint.c:235:
+		bp = register_kernel_hw_breakpoint_cpu(addr, len, type,
+					triggered, cpu, active);

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2228: FILE: kernel/hw_breakpoint.c:237:
+		*pevent = bp;
 		 ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2249: FILE: kernel/hw_breakpoint.c:249:
+		pevent = per_cpu_ptr(cpu_events, cpu);
 		^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2250: FILE: kernel/hw_breakpoint.c:250:
+		if (IS_ERR(*pevent) || !*pevent)
 		            ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2250: FILE: kernel/hw_breakpoint.c:250:
+		if (IS_ERR(*pevent) || !*pevent)
 		                         ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2252: FILE: kernel/hw_breakpoint.c:252:
+		unregister_hw_breakpoint(*pevent);
 		                          ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2280: FILE: kernel/hw_breakpoint.c:266:
+	struct perf_event **pevent;
 	                    ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2287: FILE: kernel/hw_breakpoint.c:269:
+		pevent = per_cpu_ptr(cpu_events, cpu);
 		^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2288: FILE: kernel/hw_breakpoint.c:270:
+		unregister_hw_breakpoint(*pevent);
 		                          ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2317: FILE: kernel/hw_breakpoint.c:288:
+
+

WARNING:TYPO_SPELLING: 'trigerred' may be misspelled - perhaps 'triggered'?
#2352: FILE: kernel/perf_event.c:4245:
+	 * FIXME: manage to get trigerred to NULL if it comes from syscalls
 	                        ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2396: FILE: kernel/perf_event.c:4428:
+
+

ERROR:SPACING: space prohibited after that open parenthesis '('
#2419: FILE: kernel/trace/trace_entries.h:376:
+		__field(	unsigned long,  addr			  )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2419: FILE: kernel/trace/trace_entries.h:376:
+		__field(	unsigned long,  addr			  )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2424: FILE: kernel/trace/trace_entries.h:380:
+	F_printk("ip: %pF type: %d ksym_name: %pS cmd: %s",
 		(void *)__entry->ip, (unsigned int)__entry->type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2551: FILE: kernel/trace/trace_ksym.c:200:
+	entry->ksym_hbp = register_wide_hw_breakpoint(entry->ksym_addr,
+					entry->len, entry->type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2631: FILE: kernel/trace/trace_ksym.c:335:
+				register_wide_hw_breakpoint(entry->ksym_addr,
+					entry->len, entry->type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2653: FILE: kernel/trace/trace_ksym.c:412:
+	ret = trace_seq_printf(s, "%11s-%-5d [%03d] %pS", field->cmd,
+				entry->pid, iter->cpu, (char *)field->addr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052736.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 25 warnings, 25 checks, 2226 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052736.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
