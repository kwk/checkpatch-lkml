WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#222: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#227: FILE: tools/perf/util/trace-event-perl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#243: FILE: tools/perf/util/trace-event-perl.c:17:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#244: FILE: tools/perf/util/trace-event-perl.c:18:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:LINE_SPACING: Missing a blank line after declarations
#276: FILE: tools/perf/util/trace-event-perl.c:50:
+	unsigned long long value;
+	dSP;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <dSP>
#276: FILE: tools/perf/util/trace-event-perl.c:50:
+	dSP;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <XPUSHs>
#284: FILE: tools/perf/util/trace-event-perl.c:58:
+	XPUSHs(sv_2mortal(newSVpv(ev_name, 0)));

CHECK:CAMELCASE: Avoid CamelCase: <newSVpv>
#284: FILE: tools/perf/util/trace-event-perl.c:58:
+	XPUSHs(sv_2mortal(newSVpv(ev_name, 0)));

CHECK:CAMELCASE: Avoid CamelCase: <newSVuv>
#286: FILE: tools/perf/util/trace-event-perl.c:60:
+	XPUSHs(sv_2mortal(newSVuv(value)));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'define_symbolic_value', this function's name, in a string
#290: FILE: tools/perf/util/trace-event-perl.c:64:
+	if (get_cv("main::define_symbolic_value", 0))

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'define_symbolic_value', this function's name, in a string
#291: FILE: tools/perf/util/trace-event-perl.c:65:
+		call_pv("main::define_symbolic_value", G_SCALAR);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'define_symbolic_field', this function's name, in a string
#320: FILE: tools/perf/util/trace-event-perl.c:94:
+	if (get_cv("main::define_symbolic_field", 0))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'define_symbolic_field', this function's name, in a string
#321: FILE: tools/perf/util/trace-event-perl.c:95:
+		call_pv("main::define_symbolic_field", G_SCALAR);

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: tools/perf/util/trace-event-perl.c:108:
+	unsigned long long value;
+	dSP;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'define_flag_value', this function's name, in a string
#348: FILE: tools/perf/util/trace-event-perl.c:122:
+	if (get_cv("main::define_flag_value", 0))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'define_flag_value', this function's name, in a string
#349: FILE: tools/perf/util/trace-event-perl.c:123:
+		call_pv("main::define_flag_value", G_SCALAR);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'define_flag_field', this function's name, in a string
#380: FILE: tools/perf/util/trace-event-perl.c:154:
+	if (get_cv("main::define_flag_field", 0))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'define_flag_field', this function's name, in a string
#381: FILE: tools/perf/util/trace-event-perl.c:155:
+		call_pv("main::define_flag_field", G_SCALAR);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#444: FILE: tools/perf/util/trace-event-perl.c:218:
+	events[type] = event = trace_find_event(type);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <newSViv>
#490: FILE: tools/perf/util/trace-event-perl.c:264:
+	XPUSHs(sv_2mortal(newSViv(pid)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#498: FILE: tools/perf/util/trace-event-perl.c:272:
+			int offset;
+			if (field->flags & FIELD_IS_DYNAMIC) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#498: FILE: tools/perf/util/trace-event-perl.c:272:
+			if (field->flags & FIELD_IS_DYNAMIC) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#501: FILE: tools/perf/util/trace-event-perl.c:275:
+			} else

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#506: FILE: tools/perf/util/trace-event-perl.c:280:
+			if (field->flags & FIELD_IS_SIGNED) {
[...]
+			} else {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#515: FILE: tools/perf/util/trace-event-perl.c:289:
+	if (get_cv(handler, 0))
[...]
+	else if (get_cv("main::trace_unhandled", 0)) {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <SvTRUE>
#556: FILE: tools/perf/util/trace-event-perl.c:330:
+	if (SvTRUE(ERRSV))

WARNING:SPLIT_STRING: quoted string split across lines
#595: FILE: tools/perf/util/trace-event-perl.c:369:
+	fprintf(stderr, "Perl scripting not supported."
+		"  Install libperl-dev[el] and rebuild perf to get it.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#618: FILE: tools/perf/util/trace-event-perl.h:1:
+#ifndef __PERF_TRACE_EVENT_PERL_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#621: FILE: tools/perf/util/trace-event-perl.h:4:
+typedef int INTERP;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#638: FILE: tools/perf/util/trace-event-perl.h:21:
+#define newSVpv(a,b)
                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#641: FILE: tools/perf/util/trace-event-perl.h:24:
+#define get_cv(a,b)		(0)
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#642: FILE: tools/perf/util/trace-event-perl.h:25:
+#define call_pv(a,b)		(0)
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#645: FILE: tools/perf/util/trace-event-perl.h:28:
+#define perl_parse(a,b,c,d,e)	(0)
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#645: FILE: tools/perf/util/trace-event-perl.h:28:
+#define perl_parse(a,b,c,d,e)	(0)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#645: FILE: tools/perf/util/trace-event-perl.h:28:
+#define perl_parse(a,b,c,d,e)	(0)
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#645: FILE: tools/perf/util/trace-event-perl.h:28:
+#define perl_parse(a,b,c,d,e)	(0)
                           ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#652: FILE: tools/perf/util/trace-event-perl.h:35:
+typedef PerlInterpreter * INTERP;

CHECK:CAMELCASE: Avoid CamelCase: <PerlInterpreter>
#652: FILE: tools/perf/util/trace-event-perl.h:35:
+typedef PerlInterpreter * INTERP;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000063596.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 18 warnings, 11 checks, 588 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000063596.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
