WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#50: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: fs/ceph/mon_client.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#78: FILE: fs/ceph/mon_client.c:24:
+	dout(30, "monmap_decode %p %p len %d\n", p, end, (int)(end-p));
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#78: FILE: fs/ceph/mon_client.c:24:
+	dout(30, "monmap_decode %p %p len %d\n", p, end, (int)(end-p));
 	                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#81: FILE: fs/ceph/mon_client.c:27:
+	m = kmalloc(end-p, GFP_NOFS);
 	               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m"
#82: FILE: fs/ceph/mon_client.c:28:
+	if (m == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#85: FILE: fs/ceph/mon_client.c:31:
+	ceph_decode_need(&p, end, 2*sizeof(u32) + 2*sizeof(u64), bad);
 	                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#85: FILE: fs/ceph/mon_client.c:31:
+	ceph_decode_need(&p, end, 2*sizeof(u32) + 2*sizeof(u64), bad);
 	                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#90: FILE: fs/ceph/mon_client.c:36:
+	ceph_decode_need(&p, end, m->num_mon*sizeof(m->mon_inst[0]), bad);
 	                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#91: FILE: fs/ceph/mon_client.c:37:
+	ceph_decode_copy(&p, m->mon_inst, m->num_mon*sizeof(m->mon_inst[0]));
 	                                            ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#95: FILE: fs/ceph/mon_client.c:41:
+	dout(30, "monmap_decode epoch %d, num_mon %d\n", m->epoch,
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#98: FILE: fs/ceph/mon_client.c:44:
+		dout(30, "monmap_decode  mon%d is %u.%u.%u.%u:%u\n", i,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#103: FILE: fs/ceph/mon_client.c:49:
+	dout(30, "monmap_decode failed with %d\n", err);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#148: FILE: fs/ceph/mon_client.c:94:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#161: FILE: fs/ceph/mon_client.c:107:
+	dout(5, "request_mdsmap from mon%d want %u\n", mon, monc->want_mdsmap);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#181: FILE: fs/ceph/mon_client.c:127:
+	dout(5, "request_mdsmap want %u\n", want);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#200: FILE: fs/ceph/mon_client.c:146:
+		dout(5, "got_mdsmap %u < wanted %u\n", got, monc->want_mdsmap);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#203: FILE: fs/ceph/mon_client.c:149:
+		dout(5, "got_mdsmap %u >= wanted %u\n", got, monc->want_mdsmap);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: fs/ceph/mon_client.c:158:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#225: FILE: fs/ceph/mon_client.c:171:
+	dout(5, "request_osdmap from mon%d want %u\n", mon, monc->want_osdmap);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#242: FILE: fs/ceph/mon_client.c:188:
+	dout(5, "request_osdmap want %u\n", want);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#256: FILE: fs/ceph/mon_client.c:202:
+		dout(5, "got_osdmap %u < wanted %u\n", got, monc->want_osdmap);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#259: FILE: fs/ceph/mon_client.c:205:
+		dout(5, "got_osdmap %u >= wanted %u\n", got, monc->want_osdmap);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#268: FILE: fs/ceph/mon_client.c:214:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#280: FILE: fs/ceph/mon_client.c:226:
+	dout(5, "do_request_umount from mon%d\n", mon);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_request_umount', this function's name, in a string
#280: FILE: fs/ceph/mon_client.c:226:
+	dout(5, "do_request_umount from mon%d\n", mon);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#310: FILE: fs/ceph/mon_client.c:256:
+	dout(5, "handle_umount\n");
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#318: FILE: fs/ceph/mon_client.c:264:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#332: FILE: fs/ceph/mon_client.c:278:
+	dout(10, "handle_statfs_reply %p tid %llu\n", msg, tid);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#362: FILE: fs/ceph/mon_client.c:308:
+	dout(10, "send_statfs to mon%d tid %llu\n", mon, tid);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'send_statfs', this function's name, in a string
#362: FILE: fs/ceph/mon_client.c:308:
+	dout(10, "send_statfs to mon%d tid %llu\n", mon, tid);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#408: FILE: fs/ceph/mon_client.c:354:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#411: FILE: fs/ceph/mon_client.c:357:
+	dout(5, "init\n");
 	^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*monc->monmap)...) over kzalloc(sizeof(struct ceph_monmap)...)
#414: FILE: fs/ceph/mon_client.c:360:
+	monc->monmap = kzalloc(sizeof(struct ceph_monmap) +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!monc->monmap"
#417: FILE: fs/ceph/mon_client.c:363:
+	if (monc->monmap == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#425: FILE: fs/ceph/mon_client.c:371:
+	monc->mds_delay = monc->osd_delay = monc->umount_delay = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#434: FILE: fs/ceph/mon_client.c:380:
+	dout(5, "stop\n");
 	^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#446: FILE: fs/ceph/mon_client.h:1:
+#ifndef _FS_CEPH_MON_CLIENT_H

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#511: FILE: fs/ceph/mon_client.h:66:
+	struct mutex req_mutex;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#516: FILE: fs/ceph/mon_client.h:71:
+extern struct ceph_monmap *ceph_monmap_decode(void *p, void *end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#517: FILE: fs/ceph/mon_client.h:72:
+extern int ceph_monmap_contains(struct ceph_monmap *m,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#520: FILE: fs/ceph/mon_client.h:75:
+extern int ceph_monc_init(struct ceph_mon_client *monc, struct ceph_client *cl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#521: FILE: fs/ceph/mon_client.h:76:
+extern void ceph_monc_stop(struct ceph_mon_client *monc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#528: FILE: fs/ceph/mon_client.h:83:
+extern void ceph_monc_request_mdsmap(struct ceph_mon_client *monc, u32 want);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#529: FILE: fs/ceph/mon_client.h:84:
+extern int ceph_monc_got_mdsmap(struct ceph_mon_client *monc, u32 have);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#531: FILE: fs/ceph/mon_client.h:86:
+extern void ceph_monc_request_osdmap(struct ceph_mon_client *monc, u32 want);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#532: FILE: fs/ceph/mon_client.h:87:
+extern int ceph_monc_got_osdmap(struct ceph_mon_client *monc, u32 have);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#534: FILE: fs/ceph/mon_client.h:89:
+extern void ceph_monc_request_umount(struct ceph_mon_client *monc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#536: FILE: fs/ceph/mon_client.h:91:
+extern int ceph_monc_do_statfs(struct ceph_mon_client *monc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#538: FILE: fs/ceph/mon_client.h:93:
+extern void ceph_monc_handle_statfs_reply(struct ceph_mon_client *monc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#541: FILE: fs/ceph/mon_client.h:96:
+extern void ceph_monc_request_umount(struct ceph_mon_client *monc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#542: FILE: fs/ceph/mon_client.h:97:
+extern void ceph_monc_handle_umount(struct ceph_mon_client *monc,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204211.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 23 warnings, 29 checks, 485 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204211.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
