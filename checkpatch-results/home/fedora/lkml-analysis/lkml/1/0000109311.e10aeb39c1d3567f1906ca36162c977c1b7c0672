WARNING:TYPO_SPELLING: 'followings' may be misspelled - perhaps 'following'?
#1105: FILE: Documentation/device-mapper/ioband.txt:1023:
+     The followings shows how to map ioband device "ioband1" and "ioband2" to
          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1204: FILE: drivers/md/Kconfig:296:
+config DM_IOBAND
+	tristate "I/O bandwidth control (EXPERIMENTAL)"
+	depends on BLK_DEV_DM && EXPERIMENTAL
+	---help---
+	This device-mapper target allows to define how the
+	available bandwidth of a storage device should be
+	shared between processes, cgroups, the partitions or the LUNs.
+
+	Information on how to use dm-ioband is available in:
+	   <file:Documentation/device-mapper/ioband.txt>.
+
+	If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1244: FILE: drivers/md/dm-ioband-ctl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dp' - possible side-effects?
#1269: FILE: drivers/md/dm-ioband-ctl.c:26:
+#define num_issued(dp) \
+	(dp->g_issued[BLK_RW_SYNC] + dp->g_issued[BLK_RW_ASYNC])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dp' may be better as '(dp)' to avoid precedence issues
#1269: FILE: drivers/md/dm-ioband-ctl.c:26:
+#define num_issued(dp) \
+	(dp->g_issued[BLK_RW_SYNC] + dp->g_issued[BLK_RW_ASYNC])

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*new_dp)...) over kzalloc(sizeof(struct ioband_device)...)
#1336: FILE: drivers/md/dm-ioband-ctl.c:93:
+	new_dp = kzalloc(sizeof(struct ioband_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1374: FILE: drivers/md/dm-ioband-ctl.c:131:
+	strlcpy(new_dp->g_name, name, sizeof(new_dp->g_name));

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1410: FILE: drivers/md/dm-ioband-ctl.c:167:
+	if (dp->g_blocked || waitqueue_active(&dp->g_waitq))

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1413: FILE: drivers/md/dm-ioband-ctl.c:170:
+		if (waitqueue_active(&gp->c_waitq))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1616: FILE: drivers/md/dm-ioband-ctl.c:373:
+		return 0;
+	} else {

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#1618: FILE: drivers/md/dm-ioband-ctl.c:375:
+		return strict_strtol(p, 0, id);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1627: FILE: drivers/md/dm-ioband-ctl.c:384:
+static int ioband_ctr(struct dm_target *ti, unsigned argc, char **argv)

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#1649: FILE: drivers/md/dm-ioband-ctl.c:406:
+	r = strict_strtol(argv[2], 0, &val);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#1656: FILE: drivers/md/dm-ioband-ctl.c:413:
+	r = strict_strtol(argv[3], 0, &val);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*gp)...) over kzalloc(sizeof(struct ioband_group)...)
#1705: FILE: drivers/md/dm-ioband-ctl.c:462:
+	gp = kzalloc(sizeof(struct ioband_group), GFP_KERNEL);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1874: FILE: drivers/md/dm-ioband-ctl.c:631:
+	return dp->g_issued[BLK_RW_SYNC] < dp->g_io_limit
+		|| dp->g_issued[BLK_RW_ASYNC] < dp->g_io_limit;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2035: FILE: drivers/md/dm-ioband-ctl.c:792:
+	int ret = release_prio_bios(gp, issue_list, pushback_list);
+	if (ret)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2252: FILE: drivers/md/dm-ioband-ctl.c:1009:
+				char *result, unsigned maxlen)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2268: FILE: drivers/md/dm-ioband-ctl.c:1025:
+			 char *result, unsigned maxlen)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ioband_set_param', this function's name, in a string
#2348: FILE: drivers/md/dm-ioband-ctl.c:1105:
+			DMWARN("ioband_set_param: id=%ld not found.", id);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ioband_group_attach', this function's name, in a string
#2364: FILE: drivers/md/dm-ioband-ctl.c:1121:
+		DMWARN("ioband_group_attach: invalid id:%d", id);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ioband_group_attach', this function's name, in a string
#2368: FILE: drivers/md/dm-ioband-ctl.c:1125:
+		DMWARN("ioband_group_attach: "

WARNING:SPLIT_STRING: quoted string split across lines
#2369: FILE: drivers/md/dm-ioband-ctl.c:1126:
+		DMWARN("ioband_group_attach: "
+		       "no ioband group type is specified");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sub_gp)...) over kzalloc(sizeof(struct ioband_group)...)
#2373: FILE: drivers/md/dm-ioband-ctl.c:1130:
+	sub_gp = kzalloc(sizeof(struct ioband_group), GFP_KERNEL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ioband_group_detach', this function's name, in a string
#2392: FILE: drivers/md/dm-ioband-ctl.c:1149:
+		DMWARN("ioband_group_detach: invalid id:%d", id);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ioband_group_detach', this function's name, in a string
#2399: FILE: drivers/md/dm-ioband-ctl.c:1156:
+		DMWARN("ioband_group_detach: invalid id:%d", id);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2420: FILE: drivers/md/dm-ioband-ctl.c:1177:
+ * ^I"io_throttle" <value>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2421: FILE: drivers/md/dm-ioband-ctl.c:1178:
+ * ^I"io_limit"    <value>$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2429: FILE: drivers/md/dm-ioband-ctl.c:1186:
+static int __ioband_message(struct dm_target *ti, unsigned argc, char **argv)

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#2455: FILE: drivers/md/dm-ioband-ctl.c:1212:
+		r = strict_strtol(argv[1], 0, &val);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#2470: FILE: drivers/md/dm-ioband-ctl.c:1227:
+		r = strict_strtol(argv[1], 0, &val);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#2500: FILE: drivers/md/dm-ioband-ctl.c:1257:
+		r = strict_strtol(argv[1], 0, &val);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#2505: FILE: drivers/md/dm-ioband-ctl.c:1262:
+		r = strict_strtol(argv[1], 0, &val);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2512: FILE: drivers/md/dm-ioband-ctl.c:1269:
+		return r;
+	} else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2522: FILE: drivers/md/dm-ioband-ctl.c:1279:
+static int ioband_message(struct dm_target *ti, unsigned argc, char **argv)

WARNING:SPLIT_STRING: quoted string split across lines
#2586: FILE: drivers/md/dm-ioband-ctl.c:1343:
+MODULE_AUTHOR("Hirokazu Takahashi <taka@valinux.co.jp>, "
+	      "Ryo Tsuruta <ryov@valinux.co.jp");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2593: FILE: drivers/md/dm-ioband-policy.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#2668: FILE: drivers/md/dm-ioband-policy.c:76:
+		int iopri = iopriority(gp);
+		if (iopri * PROCEED_THRESHOLD > IOBAND_IOPRIO_BASE &&

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2831: FILE: drivers/md/dm-ioband-policy.c:239:
+			p->c_token = p->c_token_initial = p->c_limit = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2834: FILE: drivers/md/dm-ioband-policy.c:242:
+			p->c_token = p->c_token_initial =

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#2867: FILE: drivers/md/dm-ioband-policy.c:275:
+	err = strict_strtol(value, 0, &val);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2874: FILE: drivers/md/dm-ioband-policy.c:282:
+		if (!err && 0 <= val && val <= INT_MAX) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2878: FILE: drivers/md/dm-ioband-policy.c:286:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2881: FILE: drivers/md/dm-ioband-policy.c:289:
+		if (!err && 0 <= val && val <= INT_MAX) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2885: FILE: drivers/md/dm-ioband-policy.c:293:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#2911: FILE: drivers/md/dm-ioband-policy.c:319:
+	struct ioband_device *dp = gp->c_banddev;
+	set_weight(gp, 0);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2917: FILE: drivers/md/dm-ioband-policy.c:325:
+			       char *result, unsigned maxlen)

WARNING:TYPO_SPELLING: 'initalize' may be misspelled - perhaps 'initialize'?
#2952: FILE: drivers/md/dm-ioband-policy.c:360:
+ * g_group_ctr    : To initalize the policy own members of struct ioband_group.
                        ^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2967: FILE: drivers/md/dm-ioband-policy.c:375:
+	if (argc < 1)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2969: FILE: drivers/md/dm-ioband-policy.c:377:
+	else {

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#2970: FILE: drivers/md/dm-ioband-policy.c:378:
+		r = strict_strtol(argv[0], 0, &val);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3015: FILE: drivers/md/dm-ioband-policy.c:423:
+	if (argc < 1)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3017: FILE: drivers/md/dm-ioband-policy.c:425:
+	else {

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#3018: FILE: drivers/md/dm-ioband-policy.c:426:
+		r = strict_strtol(argv[0], 0, &val);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3053: FILE: drivers/md/dm-ioband-type.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3134: FILE: drivers/md/dm-ioband.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#3173: FILE: drivers/md/dm-ioband.h:40:
+	spinlock_t g_lock;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#3174: FILE: drivers/md/dm-ioband.h:41:
+	struct mutex g_lock_device;

WARNING:SPACING: Unnecessary space before function pointer arguments
#3186: FILE: drivers/md/dm-ioband.h:53:
+	int (*g_can_submit) (struct ioband_group *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_group *' should also have an identifier name
#3186: FILE: drivers/md/dm-ioband.h:53:
+	int (*g_can_submit) (struct ioband_group *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#3187: FILE: drivers/md/dm-ioband.h:54:
+	int (*g_prepare_bio) (struct ioband_group *, struct bio *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_group *' should also have an identifier name
#3187: FILE: drivers/md/dm-ioband.h:54:
+	int (*g_prepare_bio) (struct ioband_group *, struct bio *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#3187: FILE: drivers/md/dm-ioband.h:54:
+	int (*g_prepare_bio) (struct ioband_group *, struct bio *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3187: FILE: drivers/md/dm-ioband.h:54:
+	int (*g_prepare_bio) (struct ioband_group *, struct bio *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3188: FILE: drivers/md/dm-ioband.h:55:
+	int (*g_restart_bios) (struct ioband_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_device *' should also have an identifier name
#3188: FILE: drivers/md/dm-ioband.h:55:
+	int (*g_restart_bios) (struct ioband_device *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3189: FILE: drivers/md/dm-ioband.h:56:
+	void (*g_hold_bio) (struct ioband_group *, struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_group *' should also have an identifier name
#3189: FILE: drivers/md/dm-ioband.h:56:
+	void (*g_hold_bio) (struct ioband_group *, struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#3189: FILE: drivers/md/dm-ioband.h:56:
+	void (*g_hold_bio) (struct ioband_group *, struct bio *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3190: FILE: drivers/md/dm-ioband.h:57:
+	struct bio *(*g_pop_bio) (struct ioband_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_group *' should also have an identifier name
#3190: FILE: drivers/md/dm-ioband.h:57:
+	struct bio *(*g_pop_bio) (struct ioband_group *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3191: FILE: drivers/md/dm-ioband.h:58:
+	int (*g_group_ctr) (struct ioband_group *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_group *' should also have an identifier name
#3191: FILE: drivers/md/dm-ioband.h:58:
+	int (*g_group_ctr) (struct ioband_group *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3191: FILE: drivers/md/dm-ioband.h:58:
+	int (*g_group_ctr) (struct ioband_group *, char *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3192: FILE: drivers/md/dm-ioband.h:59:
+	void (*g_group_dtr) (struct ioband_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_group *' should also have an identifier name
#3192: FILE: drivers/md/dm-ioband.h:59:
+	void (*g_group_dtr) (struct ioband_group *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3193: FILE: drivers/md/dm-ioband.h:60:
+	int (*g_set_param) (struct ioband_group *, char *cmd, char *value);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_group *' should also have an identifier name
#3193: FILE: drivers/md/dm-ioband.h:60:
+	int (*g_set_param) (struct ioband_group *, char *cmd, char *value);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3194: FILE: drivers/md/dm-ioband.h:61:
+	int (*g_should_block) (struct ioband_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_group *' should also have an identifier name
#3194: FILE: drivers/md/dm-ioband.h:61:
+	int (*g_should_block) (struct ioband_group *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3195: FILE: drivers/md/dm-ioband.h:62:
+	void (*g_show) (struct ioband_group *, int *, char *, unsigned);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3195: FILE: drivers/md/dm-ioband.h:62:
+	void (*g_show) (struct ioband_group *, int *, char *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_group *' should also have an identifier name
#3195: FILE: drivers/md/dm-ioband.h:62:
+	void (*g_show) (struct ioband_group *, int *, char *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#3195: FILE: drivers/md/dm-ioband.h:62:
+	void (*g_show) (struct ioband_group *, int *, char *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3195: FILE: drivers/md/dm-ioband.h:62:
+	void (*g_show) (struct ioband_group *, int *, char *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#3195: FILE: drivers/md/dm-ioband.h:62:
+	void (*g_show) (struct ioband_group *, int *, char *, unsigned);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3209: FILE: drivers/md/dm-ioband.h:76:
+	/* give another group a chance to be scheduled when the rest
+	   of tokens of the current group reaches this mark */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3209: FILE: drivers/md/dm-ioband.h:76:
+	   of tokens of the current group reaches this mark */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3214: FILE: drivers/md/dm-ioband.h:81:
+	/* the group which has the largest number of tokens in the
+	   active groups */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3214: FILE: drivers/md/dm-ioband.h:81:
+	   active groups */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#3270: FILE: drivers/md/dm-ioband.h:137:
+	spinlock_t      c_lock;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3331: FILE: drivers/md/dm-ioband.h:198:
+	((gp)->c_flags & (IOG_PRIO_QUEUE|IOG_PRIO_BIO_SYNC) == IOG_PRIO_QUEUE)
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3334: FILE: drivers/md/dm-ioband.h:201:
+	((gp)->c_flags |= (IOG_PRIO_QUEUE|IOG_PRIO_BIO_SYNC))
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3336: FILE: drivers/md/dm-ioband.h:203:
+	((gp)->c_flags &= ~(IOG_PRIO_QUEUE|IOG_PRIO_BIO_SYNC))
 	                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3338: FILE: drivers/md/dm-ioband.h:205:
+	((gp)->c_flags & (IOG_PRIO_QUEUE|IOG_PRIO_BIO_SYNC) == \
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3339: FILE: drivers/md/dm-ioband.h:206:
+		(IOG_PRIO_QUEUE|IOG_PRIO_BIO_SYNC))
 		               ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sync' may be better as '(sync)' to avoid precedence issues
#3341: FILE: drivers/md/dm-ioband.h:208:
+#define set_prio_queue(gp, sync) \
+	((gp)->c_flags |= (IOG_PRIO_QUEUE|sync))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3342: FILE: drivers/md/dm-ioband.h:209:
+	((gp)->c_flags |= (IOG_PRIO_QUEUE|sync))
 	                                 ^

WARNING:SPACING: Unnecessary space before function pointer arguments
#3349: FILE: drivers/md/dm-ioband.h:216:
+	int (*p_policy_init) (struct ioband_device *, int, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_device *' should also have an identifier name
#3349: FILE: drivers/md/dm-ioband.h:216:
+	int (*p_policy_init) (struct ioband_device *, int, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3349: FILE: drivers/md/dm-ioband.h:216:
+	int (*p_policy_init) (struct ioband_device *, int, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#3349: FILE: drivers/md/dm-ioband.h:216:
+	int (*p_policy_init) (struct ioband_device *, int, char **);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3356: FILE: drivers/md/dm-ioband.h:223:
+	int (*t_getid) (struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#3356: FILE: drivers/md/dm-ioband.h:223:
+	int (*t_getid) (struct bio *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3361: FILE: drivers/md/dm-ioband.h:228:
+extern int policy_range_bw_init(struct ioband_device *, int, char **);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ioband_device *' should also have an identifier name
#3361: FILE: drivers/md/dm-ioband.h:228:
+extern int policy_range_bw_init(struct ioband_device *, int, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3361: FILE: drivers/md/dm-ioband.h:228:
+extern int policy_range_bw_init(struct ioband_device *, int, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#3361: FILE: drivers/md/dm-ioband.h:228:
+extern int policy_range_bw_init(struct ioband_device *, int, char **);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109311.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 81 warnings, 27 checks, 3248 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109311.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
