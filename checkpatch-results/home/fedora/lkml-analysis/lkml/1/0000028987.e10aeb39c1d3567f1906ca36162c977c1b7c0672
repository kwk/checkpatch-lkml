WARNING:TYPO_SPELLING: 'simmilar' may be misspelled - perhaps 'similar'?
#53: 
It uses stats to track memory usage, simmilar to soft limits. It checks
                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'controler' may be misspelled - perhaps 'controller'?
#74: FILE: Documentation/cgroups/memory.txt:419:
+Memory controler implements memory thresholds using cgroups notification
        ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#130: FILE: mm/memcontrol.c:83:
+	MEM_CGROUP_STAT_THRESHOLDS, /* decrements on each page in/out.
+					used by threshold implementation */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#130: FILE: mm/memcontrol.c:83:
+					used by threshold implementation */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#152: FILE: mm/memcontrol.c:201:
+static bool mem_cgroup_threshold_check(struct mem_cgroup* mem);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#153: FILE: mm/memcontrol.c:202:
+static void mem_cgroup_threshold(struct mem_cgroup* mem);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: mm/memcontrol.c:3120:
+		__mem_cgroup_stat_set_safe(cpustat, MEM_CGROUP_STAT_THRESHOLDS,
+				THRESHOLDS_EVENTS_THRESH);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#231: FILE: mm/memcontrol.c:3134:
+	if (!swap) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: mm/memcontrol.c:3158:
+	for(; i > 0 && unlikely(t->entries[i].threshold > usage); i--) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#255: FILE: mm/memcontrol.c:3158:
+	for(; i > 0 && unlikely(t->entries[i].threshold > usage); i--) {
+		eventfd_signal(t->entries[i].eventfd, 1);
+	}

ERROR:SPACING: space required before the open parenthesis '('
#268: FILE: mm/memcontrol.c:3171:
+	for(; i < t->size && unlikely(t->entries[i].threshold <= usage); i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#268: FILE: mm/memcontrol.c:3171:
+	for(; i < t->size && unlikely(t->entries[i].threshold <= usage); i++) {
+		eventfd_signal(t->entries[i].eventfd, 1);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: mm/memcontrol.c:3197:
+static int mem_cgroup_register_event(struct cgroup *cgrp, struct cftype *cft,
+		struct eventfd_ctx *eventfd, const char *args)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: mm/memcontrol.c:3216:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: mm/memcontrol.c:3242:
+		memcpy(thresholds_new->entries, thresholds->entries,
+				thresholds->size *

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: mm/memcontrol.c:3250:
+	sort(thresholds_new->entries, size,
+			sizeof(struct mem_cgroup_threshold),

ERROR:SPACING: space required before the open parenthesis '('
#352: FILE: mm/memcontrol.c:3255:
+	for(i = 0; i < size; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: mm/memcontrol.c:3288:
+static int mem_cgroup_unregister_event(struct cgroup *cgrp, struct cftype *cft,
+		struct eventfd_ctx *eventfd)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#400: FILE: mm/memcontrol.c:3303:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#406: FILE: mm/memcontrol.c:3309:
+	BUG_ON(!thresholds);

ERROR:SPACING: space required before the open parenthesis '('
#414: FILE: mm/memcontrol.c:3317:
+	for(i = 0; i < thresholds->size; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#437: FILE: mm/memcontrol.c:3340:
+	for(i = 0, j = 0; i < thresholds->size; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#462: FILE: mm/memcontrol.c:3365:
+	for(i = 0; i < thresholds->size - size; i++)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000028987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 10 warnings, 5 checks, 415 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000028987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
