WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#48: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: arch/arm/common/it8152.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#54: FILE: arch/arm/common/it8152.c:2:
+ * linux/arch/arm/common/it8152.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: arch/arm/common/it8152.c:37:
+       if (irq >= IT8152_LD_IRQ(0)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#89: FILE: arch/arm/common/it8152.c:37:
+       if (irq >= IT8152_LD_IRQ(0)) {
+	       __raw_writel((__raw_readl(IT8152_INTC_LDCNIMR) |

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: arch/arm/common/it8152.c:41:
+       } else if (irq >= IT8152_LP_IRQ(0)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#93: FILE: arch/arm/common/it8152.c:41:
+       } else if (irq >= IT8152_LP_IRQ(0)) {
+	       __raw_writel((__raw_readl(IT8152_INTC_LPCNIMR) |

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: arch/arm/common/it8152.c:45:
+       } else if (irq >= IT8152_PD_IRQ(0)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#97: FILE: arch/arm/common/it8152.c:45:
+       } else if (irq >= IT8152_PD_IRQ(0)) {
+	       __raw_writel((__raw_readl(IT8152_INTC_PDCNIMR) |

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/arm/common/it8152.c:49:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: arch/arm/common/it8152.c:54:
+       if (irq >= IT8152_LD_IRQ(0)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#106: FILE: arch/arm/common/it8152.c:54:
+       if (irq >= IT8152_LD_IRQ(0)) {
+	       __raw_writel((__raw_readl(IT8152_INTC_LDCNIMR) &

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: arch/arm/common/it8152.c:58:
+       } else if (irq >= IT8152_LP_IRQ(0)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#110: FILE: arch/arm/common/it8152.c:58:
+       } else if (irq >= IT8152_LP_IRQ(0)) {
+	       __raw_writel((__raw_readl(IT8152_INTC_LPCNIMR) &

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: arch/arm/common/it8152.c:62:
+       } else if (irq >= IT8152_PD_IRQ(0)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#114: FILE: arch/arm/common/it8152.c:62:
+       } else if (irq >= IT8152_PD_IRQ(0)) {
+	       __raw_writel((__raw_readl(IT8152_INTC_PDCNIMR) &

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: arch/arm/common/it8152.c:66:
+       }$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#125: FILE: arch/arm/common/it8152.c:73:
+	printk(KERN_DEBUG "===> %s: irq=%d\n", __FUNCTION__, irq);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#125: FILE: arch/arm/common/it8152.c:73:
+	printk(KERN_DEBUG "===> %s: irq=%d\n", __FUNCTION__, irq);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: arch/arm/common/it8152.c:106:
+       int bits_pd, bits_lp, bits_ld;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: arch/arm/common/it8152.c:107:
+       int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: arch/arm/common/it8152.c:109:
+       printk(KERN_DEBUG "=> %s: irq = %d\n", __FUNCTION__, irq);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#161: FILE: arch/arm/common/it8152.c:109:
+       printk(KERN_DEBUG "=> %s: irq = %d\n", __FUNCTION__, irq);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#161: FILE: arch/arm/common/it8152.c:109:
+       printk(KERN_DEBUG "=> %s: irq = %d\n", __FUNCTION__, irq);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: arch/arm/common/it8152.c:111:
+       while (1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#163: FILE: arch/arm/common/it8152.c:111:
+       while (1) {
[...]
+	       bits_pd = __raw_readl(IT8152_INTC_PDCNIRR);

WARNING:TABSTOP: Statements should start on a tabstop
#174: FILE: arch/arm/common/it8152.c:122:
+	       if (!(bits_ld | bits_lp | bits_pd)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#174: FILE: arch/arm/common/it8152.c:122:
+	       if (!(bits_ld | bits_lp | bits_pd)) {
[...]
+		       bits_pd = __raw_readl(IT8152_INTC_PDCNIRR);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#176: FILE: arch/arm/common/it8152.c:124:
+		       /* Re-read to guarantee, that there was a moment of
+			  time, when they all three were 0. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#176: FILE: arch/arm/common/it8152.c:124:
+			  time, when they all three were 0. */

WARNING:TABSTOP: Statements should start on a tabstop
#179: FILE: arch/arm/common/it8152.c:127:
+		       if (!(bits_ld | bits_lp | bits_pd))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#179: FILE: arch/arm/common/it8152.c:127:
+		       if (!(bits_ld | bits_lp | bits_pd))
+			       return;

WARNING:TABSTOP: Statements should start on a tabstop
#180: FILE: arch/arm/common/it8152.c:128:
+			       return;

WARNING:TABSTOP: Statements should start on a tabstop
#181: FILE: arch/arm/common/it8152.c:129:
+	       }

WARNING:TABSTOP: Statements should start on a tabstop
#184: FILE: arch/arm/common/it8152.c:132:
+	       while (bits_pd) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#184: FILE: arch/arm/common/it8152.c:132:
+	       while (bits_pd) {
+		       i = __ffs(bits_pd);

WARNING:TABSTOP: Statements should start on a tabstop
#188: FILE: arch/arm/common/it8152.c:136:
+	       }

WARNING:TABSTOP: Statements should start on a tabstop
#191: FILE: arch/arm/common/it8152.c:139:
+	       while (bits_lp) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#191: FILE: arch/arm/common/it8152.c:139:
+	       while (bits_lp) {
+		       i = __ffs(bits_pd);

WARNING:TABSTOP: Statements should start on a tabstop
#195: FILE: arch/arm/common/it8152.c:143:
+	       }

WARNING:TABSTOP: Statements should start on a tabstop
#198: FILE: arch/arm/common/it8152.c:146:
+	       while (bits_ld) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#198: FILE: arch/arm/common/it8152.c:146:
+	       while (bits_ld) {
+		       i = __ffs(bits_pd);

WARNING:TABSTOP: Statements should start on a tabstop
#202: FILE: arch/arm/common/it8152.c:150:
+	       }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: arch/arm/common/it8152.c:151:
+       }$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->vendor == PCI_VENDOR_ID_ITE'
#209: FILE: arch/arm/common/it8152.c:157:
+	if ((dev->vendor == PCI_VENDOR_ID_ITE) &&
+	    (dev->device == PCI_DEVICE_ID_ITE_8152)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->device == PCI_DEVICE_ID_ITE_8152'
#209: FILE: arch/arm/common/it8152.c:157:
+	if ((dev->vendor == PCI_VENDOR_ID_ITE) &&
+	    (dev->device == PCI_DEVICE_ID_ITE_8152)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#227: FILE: arch/arm/common/it8152.c:175:
+	if (bus->number == 0) {
+			if (devfn < PCI_DEVFN(MAX_SLOTS, 0))

CHECK:BRACES: braces {} should be used on all arms of this statement
#227: FILE: arch/arm/common/it8152.c:175:
+	if (bus->number == 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#230: FILE: arch/arm/common/it8152.c:178:
+	} else

WARNING:TYPO_SPELLING: 'addrees' may be misspelled - perhaps 'address'?
#303: FILE: arch/arm/common/it8152.c:251:
+ * ITE8152 chip can addrees up to 64MByte, so all the devices
                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#333: FILE: arch/arm/common/it8152.c:281:
+		__FUNCTION__, dma_addr, size);

WARNING:TYPO_SPELLING: 'everyhing' may be misspelled - perhaps 'everything'?
#343: FILE: arch/arm/common/it8152.c:291:
+ * We just return true on everyhing except for < 64MB in which case
                           ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#348: FILE: arch/arm/common/it8152.c:296:
+	printk(KERN_DEBUG "%s: %s %llx\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#349: FILE: arch/arm/common/it8152.c:297:
+	       __FUNCTION__, dev->dev.bus_id, mask);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#359: FILE: arch/arm/common/it8152.c:307:
+	printk(KERN_DEBUG "%s: %s %llx\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#360: FILE: arch/arm/common/it8152.c:308:
+	       __FUNCTION__, dev->dev.bus_id, mask);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#376: FILE: arch/arm/common/it8152.c:324:
+		printk(KERN_ERR "PCI: unable to allocate IO region\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#380: FILE: arch/arm/common/it8152.c:328:
+		printk(KERN_ERR "PCI: unable to allocate memory region\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#388: FILE: arch/arm/common/it8152.c:336:
+		printk(KERN_ERR "PCI: Can't use platform_notify\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->vendor == PCI_VENDOR_ID_ITE'
#417: FILE: arch/arm/common/it8152.c:365:
+	if ((dev->vendor == PCI_VENDOR_ID_ITE) &&
+	    (dev->device == PCI_DEVICE_ID_ITE_8152) &&
+	    ((dev->class >> 8) == PCI_CLASS_SERIAL_USB))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->device == PCI_DEVICE_ID_ITE_8152'
#417: FILE: arch/arm/common/it8152.c:365:
+	if ((dev->vendor == PCI_VENDOR_ID_ITE) &&
+	    (dev->device == PCI_DEVICE_ID_ITE_8152) &&
+	    ((dev->class >> 8) == PCI_CLASS_SERIAL_USB))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#424: FILE: arch/arm/common/it8152.c:372:
+		lat = (64 <= pcibios_max_latency) ? 64 : pcibios_max_latency;

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#429: FILE: arch/arm/common/it8152.c:377:
+	printk(KERN_DEBUG "PCI: Setting latency timer of device %s to %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#434: FILE: arch/arm/common/it8152.c:382:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#465: FILE: arch/arm/kernel/bios32.c:299:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#467: FILE: arch/arm/kernel/bios32.c:301:
 void __devinit pcibios_update_irq(struct pci_dev *dev, int irq)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#492: FILE: include/asm-arm/hardware/it8152.h:1:
+/*

WARNING:TYPO_SPELLING: 'Interrup' may be misspelled - perhaps 'Interrupt'?
#536: FILE: include/asm-arm/hardware/it8152.h:45:
+  Interrup contoler per register summary:
   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#536: FILE: include/asm-arm/hardware/it8152.h:45:
+/*
+  Interrup contoler per register summary:

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#584: FILE: include/asm-arm/hardware/it8152.h:93:
+extern void it8152_irq_demux(unsigned int irq, struct irq_desc *desc);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#585: FILE: include/asm-arm/hardware/it8152.h:94:
+extern void it8152_init_irq(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#586: FILE: include/asm-arm/hardware/it8152.h:95:
+extern int it8152_pci_map_irq(struct pci_dev *dev, u8 slot, u8 pin);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#587: FILE: include/asm-arm/hardware/it8152.h:96:
+extern int it8152_pci_setup(int nr, struct pci_sys_data *sys);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#588: FILE: include/asm-arm/hardware/it8152.h:97:
+extern struct pci_bus *it8152_pci_scan_bus(int nr, struct pci_sys_data *sys);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#601: FILE: include/asm-arm/pci.h:13:
+/* ITE bridge requires setting latency timer to avoid early bus access
+   termination by PIC bus mater devices

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#603: FILE: include/asm-arm/pci.h:15:
+extern void pcibios_set_master(struct pci_dev *dev);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000378564.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 62 warnings, 14 checks, 554 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000378564.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
