ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: arch/x86/kernel/cpu/mcheck/k7.c:19:
+static void k7_machine_check(struct pt_regs * regs, long error_code)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#92: FILE: arch/x86/kernel/cpu/mcheck/mce.h:11:
+extern void (*machine_check_vector)(struct pt_regs *, long error_code);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: arch/x86/kernel/cpu/mcheck/mce_32.c:25:
+static void unexpected_machine_check(struct pt_regs * regs, long error_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: arch/x86/kernel/cpu/mcheck/p4.c:144:
+static void intel_machine_check(struct pt_regs * regs, long error_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: arch/x86/kernel/cpu/mcheck/p5.c:19:
+static void pentium_machine_check(struct pt_regs * regs, long error_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: arch/x86/kernel/cpu/mcheck/p6.c:19:
+static void intel_machine_check(struct pt_regs * regs, long error_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#173: FILE: arch/x86/kernel/cpu/mcheck/winchip.c:18:
+static void winchip_machine_check(struct pt_regs * regs, long error_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#225: FILE: arch/x86/kernel/process_32.c:708:
+struct task_struct * __switch_to(struct task_struct *prev_p, struct task_struct *next_p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#289: FILE: arch/x86/kernel/traps_32.c:504:
+void do_##name(struct pt_regs * regs, long error_code) \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: arch/x86/kernel/traps_32.c:513:
+void do_##name(struct pt_regs * regs, long error_code) \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#307: FILE: arch/x86/kernel/traps_32.c:529:
+void do_##name(struct pt_regs * regs, long error_code) \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#316: FILE: arch/x86/kernel/traps_32.c:538:
+void do_##name(struct pt_regs * regs, long error_code) \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#325: FILE: arch/x86/kernel/traps_32.c:565:
+void __kprobes do_general_protection(struct pt_regs * regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: arch/x86/kernel/traps_32.c:566:
+void __kprobes do_general_protection(struct pt_regs * regs,
 					      long error_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#334: FILE: arch/x86/kernel/traps_32.c:766:
+__kprobes void do_nmi(struct pt_regs * regs, long error_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#352: FILE: arch/x86/kernel/traps_32.c:831:
+void __kprobes do_debug(struct pt_regs * regs, long error_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#361: FILE: arch/x86/kernel/traps_32.c:963:
+void do_coprocessor_error(struct pt_regs * regs, long error_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#370: FILE: arch/x86/kernel/traps_32.c:1017:
+void do_simd_coprocessor_error(struct pt_regs * regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: arch/x86/kernel/traps_32.c:1018:
+void do_simd_coprocessor_error(struct pt_regs * regs,
 					  long error_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#379: FILE: arch/x86/kernel/traps_32.c:1041:
+void do_spurious_interrupt_bug(struct pt_regs * regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: arch/x86/kernel/traps_32.c:1042:
+void do_spurious_interrupt_bug(struct pt_regs * regs,
 					  long error_code)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: arch/x86/kernel/traps_32.c:1051:
+unsigned long patch_espfix_desc(unsigned long uesp,
 					  unsigned long kesp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#402: FILE: arch/x86/kernel/vm86_32.c:123:
+struct pt_regs * save_v86_state(struct kernel_vm86_regs * regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#402: FILE: arch/x86/kernel/vm86_32.c:123:
+struct pt_regs * save_v86_state(struct kernel_vm86_regs * regs)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#501: FILE: arch/x86/mm/fault_32.c:217:
+void do_invalid_op(struct pt_regs *, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#501: FILE: arch/x86/mm/fault_32.c:217:
+void do_invalid_op(struct pt_regs *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#501: FILE: arch/x86/mm/fault_32.c:217:
+void do_invalid_op(struct pt_regs *, unsigned long);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000348032.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 19 errors, 4 warnings, 4 checks, 356 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000348032.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
