WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#78: 
   quilt-8551  0d..3    0us+: wake_up_process+0x15/0x17 <ffffffff80233e80> (sched_exec+0xc9/0x100 <ffffffff80235343>)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#142: FILE: lib/tracing/Kconfig:29:
+config WAKEUP_TRACER
+	bool "Trace wakeup latencies"
+	depends on DEBUG_KERNEL
+	select TRACING
+	select CONTEXT_SWITCH_TRACER
+	help
+	  This tracer adds hooks into scheduling to time the latency
+	  of the highest priority task tasks to be scheduled in
+	  after it has worken up.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#171: FILE: lib/tracing/trace_wakeup.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#200: FILE: lib/tracing/trace_wakeup.c:30:
+static unsigned wakeup_prio = -1;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#210: FILE: lib/tracing/trace_wakeup.c:40:
+	trace_nr_entries = simple_strtoul(str, &str, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#213: FILE: lib/tracing/trace_wakeup.c:43:
+__setup("trace_wakeup_entries=", set_nr_entries);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#246: FILE: lib/tracing/trace_wakeup.c:76:
+static struct mcount_ops trace_ops __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#280: FILE: lib/tracing/trace_wakeup.c:110:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#341: FILE: lib/tracing/trace_wakeup.c:171:
+	delta = T1-T0;
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_1: Consider removing the #if 1 and its #endif
#354: FILE: lib/tracing/trace_wakeup.c:184:
+#if 1

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#356: FILE: lib/tracing/trace_wakeup.c:186:
+		printk(KERN_INFO "(%16s-%-5d|#%d): %lu us wakeup latency "

WARNING:SPLIT_STRING: quoted string split across lines
#357: FILE: lib/tracing/trace_wakeup.c:187:
+		printk(KERN_INFO "(%16s-%-5d|#%d): %lu us wakeup latency "
+		       "violates %lu us threshold.\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#363: FILE: lib/tracing/trace_wakeup.c:193:
+		printk(KERN_INFO "(%16s-%-5d|#%d): new %lu us maximum "

WARNING:SPLIT_STRING: quoted string split across lines
#364: FILE: lib/tracing/trace_wakeup.c:194:
+		printk(KERN_INFO "(%16s-%-5d|#%d): new %lu us maximum "
+		       "wakeup latency.\n => started at timestamp %lu: ",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#368: FILE: lib/tracing/trace_wakeup.c:198:
+	printk(KERN_CONT "   ended at timestamp %lu: ", t1);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#368: FILE: lib/tracing/trace_wakeup.c:198:
+	printk(KERN_CONT "   ended at timestamp %lu: ", t1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#371: FILE: lib/tracing/trace_wakeup.c:201:
+	printk(KERN_CONT "   dump-end timestamp %lu\n\n", t1);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#371: FILE: lib/tracing/trace_wakeup.c:201:
+	printk(KERN_CONT "   dump-end timestamp %lu\n\n", t1);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#380: FILE: lib/tracing/trace_wakeup.c:210:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#452: FILE: lib/tracing/trace_wakeup.c:282:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#490: FILE: lib/tracing/trace_wakeup.c:320:
+static ssize_t max_wakeup_lat_read(struct file *filp, char __user *ubuf,
                                                 ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: lib/tracing/trace_wakeup.c:321:
+static ssize_t max_wakeup_lat_read(struct file *filp, char __user *ubuf,
+					size_t cnt, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#503: FILE: lib/tracing/trace_wakeup.c:333:
+static ssize_t max_wakeup_lat_write(struct file *filp,
                                                  ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#503: FILE: lib/tracing/trace_wakeup.c:333:
+}
+static ssize_t max_wakeup_lat_write(struct file *filp,

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#519: FILE: lib/tracing/trace_wakeup.c:349:
+	val = simple_strtoul(buf, NULL, 10);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#526: FILE: lib/tracing/trace_wakeup.c:356:
+static struct file_operations max_wakeup_lat_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:MEMORY_BARRIER: memory barrier without comment
#544: FILE: lib/tracing/trace_wakeup.c:374:
+			smp_wmb();

WARNING:SPLIT_STRING: quoted string split across lines
#567: FILE: lib/tracing/trace_wakeup.c:397:
+		pr_warning("Could not create debugfs"
+			   " 'preempt_wakeup_trace_ctrl' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#574: FILE: lib/tracing/trace_wakeup.c:404:
+		pr_warning("Could not create debugfs "
+			   "'wakeup_max_latency' entry\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#623: FILE: lib/tracing/trace_wakeup.c:453:
+		if (array == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#624: FILE: lib/tracing/trace_wakeup.c:454:
+			printk(KERN_ERR "wakeup tracer: failed to allocate"

WARNING:SPLIT_STRING: quoted string split across lines
#625: FILE: lib/tracing/trace_wakeup.c:455:
+			printk(KERN_ERR "wakeup tracer: failed to allocate"
+			       " %ld bytes for trace buffer!\n", size);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#632: FILE: lib/tracing/trace_wakeup.c:462:
+		if (array == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#633: FILE: lib/tracing/trace_wakeup.c:463:
+			printk(KERN_ERR "wakeup tracer: failed to allocate"

WARNING:SPLIT_STRING: quoted string split across lines
#634: FILE: lib/tracing/trace_wakeup.c:464:
+			printk(KERN_ERR "wakeup tracer: failed to allocate"
+			       " %ld bytes for trace buffer!\n", size);

WARNING:SPLIT_STRING: quoted string split across lines
#659: FILE: lib/tracing/trace_wakeup.c:489:
+				    "pid %d state %ld --"
+				    "p %p rq->curr %p",

WARNING:SPLIT_STRING: quoted string split across lines
#664: FILE: lib/tracing/trace_wakeup.c:494:
+		pr_info("wakeup trace: Couldn't add marker"
+			" probe to kernel_sched_wakeup\n");

WARNING:SPLIT_STRING: quoted string split across lines
#671: FILE: lib/tracing/trace_wakeup.c:501:
+		pr_info("wakeup trace: Couldn't arm probe"
+			" kernel_sched_wakeup\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333830.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 28 warnings, 9 checks, 548 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333830.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
