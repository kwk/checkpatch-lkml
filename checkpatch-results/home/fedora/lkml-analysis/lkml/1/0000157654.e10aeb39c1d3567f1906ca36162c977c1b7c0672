WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#43: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: fs/aufs/f_op.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IW>
#76: FILE: fs/aufs/f_op.c:29:
+	di_read_lock_child(dentry, AuLock_IW);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#112: FILE: fs/aufs/f_op.c:65:
+	BUG_ON(au_test_ro(dentry->d_sb, bindex, dentry->d_inode)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#113: FILE: fs/aufs/f_op.c:66:
+	BUG_ON(au_test_ro(dentry->d_sb, bindex, dentry->d_inode)
+	       && (flags & O_TRUNC));

CHECK:BRACES: braces {} should be used on all arms of this statement
#116: FILE: fs/aufs/f_op.c:69:
+	if (IS_ERR(h_file))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#118: FILE: fs/aufs/f_op.c:71:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_FLUSH>
#158: FILE: fs/aufs/f_op.c:111:
+	si_read_lock(sb, AuLock_FLUSH);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#169: FILE: fs/aufs/f_op.c:122:
+	di_read_unlock(dentry, AuLock_IR);

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#326: FILE: fs/aufs/f_op.c:279:
+	AuDebugOn(!h_file || !au_test_mmapped(file));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#335: FILE: fs/aufs/f_op.c:288:
+#if 0 /* def CONFIG_SMP */

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#345: FILE: fs/aufs/f_op.c:298:
+static struct vm_operations_struct aufs_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#351: FILE: fs/aufs/f_op.c:304:
+static struct vm_operations_struct *au_vm_ops(struct file *h_file,

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#354: FILE: fs/aufs/f_op.c:307:
+	struct vm_operations_struct *vm_ops;

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#365: FILE: fs/aufs/f_op.c:318:
+		AuIOErr("failed internal unmapping %.*s, %d\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#366: FILE: fs/aufs/f_op.c:319:
+			AuDLNPair(h_file->f_dentry), err);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#381: FILE: fs/aufs/f_op.c:334:
+	struct vm_operations_struct *vm_ops;

CHECK:BRACES: braces {} should be used on all arms of this statement
#392: FILE: fs/aufs/f_op.c:345:
+	if (wlock) {
[...]
+	} else if (!mmapped)
[...]

WARNING:TYPO_SPELLING: 'handlling' may be misspelled - perhaps 'handling'?
#427: FILE: fs/aufs/f_op.c:380:
+	 * finally I hope we can skip handlling MAP_DENYWRITE here.
 	                              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#481: FILE: fs/aufs/f_op.c:434:
+	AuTraceErr((int)mask);

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#495: FILE: fs/aufs/f_op.c:448:
+	IMustLock(file->f_mapping->host);

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#522: FILE: fs/aufs/f_op.c:475:
+		struct mutex *h_mtx;

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#530: FILE: fs/aufs/f_op.c:483:
+		mutex_lock_nested(h_mtx, AuLsc_I_CHILD);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#579: FILE: fs/aufs/f_op.c:532:
+struct file_operations aufs_file_fop = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#605: FILE: fs/aufs/file.c:1:
+/*

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#627: FILE: fs/aufs/file.c:23:
+void au_store_oflag(struct nameidata *nd)
                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#629: FILE: fs/aufs/file.c:25:
+	if (nd
 	    ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#630: FILE: fs/aufs/file.c:26:
+	if (nd
+	    && !(nd->flags & LOOKUP_CONTINUE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#631: FILE: fs/aufs/file.c:27:
+	    && !(nd->flags & LOOKUP_CONTINUE)
+	    && (nd->flags & LOOKUP_OPEN))

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#633: FILE: fs/aufs/file.c:29:
+		nd->intent.open.file->private_data
+			= (void *)nd->intent.open.flags;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#661: FILE: fs/aufs/file.c:57:
+	if (unlikely((!d_unhashed(dentry) && d_unhashed(h_dentry))
+		     || !h_inode))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#668: FILE: fs/aufs/file.c:64:
+	if (file && (file->f_mode & FMODE_EXEC)
+	    && (br->br_mnt->mnt_flags & MNT_NOEXEC))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#743: FILE: fs/aufs/file.c:139:
+	AuDebugOn(au_fbstart(file) < bstart
+		  || au_fi(file)->fi_hfile[0 + bstart].hf_file);

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_NONE>
#832: FILE: fs/aufs/file.c:228:
+		err = au_pin(pin, dentry, bstart, AuOpt_UDBA_NONE, /*flags*/0);

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup>
#839: FILE: fs/aufs/file.c:235:
+	err = AuWbrCopyup(au_sbi(sb), dentry);

CHECK:CAMELCASE: Avoid CamelCase: <AuPin_DI_LOCKED>
#852: FILE: fs/aufs/file.c:248:
+		     AuPin_DI_LOCKED | AuPin_MNT_WRITE);

CHECK:CAMELCASE: Avoid CamelCase: <AuPin_MNT_WRITE>
#852: FILE: fs/aufs/file.c:248:
+		     AuPin_DI_LOCKED | AuPin_MNT_WRITE);

CHECK:CAMELCASE: Avoid CamelCase: <AuCpup_DTIME>
#867: FILE: fs/aufs/file.c:263:
+						 AuCpup_DTIME);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#925: FILE: fs/aufs/file.c:321:
+	if (au_opt_test(au_mntflags(sb), PLINK)
+	    && au_plink_test(inode)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#926: FILE: fs/aufs/file.c:322:
+	    && au_plink_test(inode)
+	    && !d_unhashed(dentry)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#994: FILE: fs/aufs/file.c:390:
+				if (p->hf_file->f_dentry
+				    && p->hf_file->f_dentry->d_inode)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#996: FILE: fs/aufs/file.c:392:
+					break;
+				else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1013: FILE: fs/aufs/file.c:409:
+			if (p->hf_file->f_dentry
+			    && p->hf_file->f_dentry->d_inode)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1015: FILE: fs/aufs/file.c:411:
+				break;
+			else

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#1061: FILE: fs/aufs/file.c:457:
+	unsigned int sigen, figen;
 	             ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#1068: FILE: fs/aufs/file.c:464:
+	sigen = au_sigen(dentry->d_sb);
 	^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#1074: FILE: fs/aufs/file.c:470:
+	if (sigen == figen && !pseudo_link && au_fbstart(file) == bstart) {
 	    ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#1082: FILE: fs/aufs/file.c:478:
+	AuDbg("sigen %d, figen %d\n", sigen, figen);
 	       ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#1082: FILE: fs/aufs/file.c:478:
+	AuDbg("sigen %d, figen %d\n", sigen, figen);
 	                              ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#1082: FILE: fs/aufs/file.c:478:
+	AuDbg("sigen %d, figen %d\n", sigen, figen);

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#1083: FILE: fs/aufs/file.c:479:
+	if (sigen != au_digen(dentry)
 	    ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#1084: FILE: fs/aufs/file.c:480:
+	    || sigen != au_iigen(dentry->d_inode)) {
 	       ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1084: FILE: fs/aufs/file.c:480:
+	if (sigen != au_digen(dentry)
+	    || sigen != au_iigen(dentry->d_inode)) {

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#1085: FILE: fs/aufs/file.c:481:
+		err = au_reval_dpath(dentry, sigen);
 		                             ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#1088: FILE: fs/aufs/file.c:484:
+		AuDebugOn(au_digen(dentry) != sigen
 		                              ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#1089: FILE: fs/aufs/file.c:485:
+			  || au_iigen(dentry->d_inode) != sigen);
 			                                  ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1089: FILE: fs/aufs/file.c:485:
+		AuDebugOn(au_digen(dentry) != sigen
+			  || au_iigen(dentry->d_inode) != sigen);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1120: FILE: fs/aufs/file.c:516:
+			    loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1120: FILE: fs/aufs/file.c:516:
+			    loff_t pos, unsigned len, unsigned flags,

CHECK:CAMELCASE: Avoid CamelCase: <AuUnsupport>
#1122: FILE: fs/aufs/file.c:518:
+{ AuUnsupport(); return 0; }

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1124: FILE: fs/aufs/file.c:520:
+			  loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1124: FILE: fs/aufs/file.c:520:
+			  loff_t pos, unsigned len, unsigned copied,

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1144: FILE: fs/aufs/file.c:540:
+struct address_space_operations aufs_aop = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1163: FILE: fs/aufs/file.h:1:
+/*

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#1202: FILE: fs/aufs/file.h:40:
+		struct vm_operations_struct	*fi_h_vm_ops;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1215: FILE: fs/aufs/file.h:53:
+extern struct address_space_operations aufs_aop;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1216: FILE: fs/aufs/file.h:54:
+void au_store_oflag(struct nameidata *nd);
                                       ^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1228: FILE: fs/aufs/file.h:66:
+extern struct file_operations aufs_file_fop;

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleRwsemFuncs>
#1255: FILE: fs/aufs/file.h:93:
+AuSimpleRwsemFuncs(fi, struct file *f, &au_fi(f)->fi_rwsem);

CHECK:CAMELCASE: Avoid CamelCase: <FiMustNoWaiters>
#1257: FILE: fs/aufs/file.h:95:
+#define FiMustNoWaiters(f)	AuRwMustNoWaiters(&au_fi(f)->fi_rwsem)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustNoWaiters>
#1257: FILE: fs/aufs/file.h:95:
+#define FiMustNoWaiters(f)	AuRwMustNoWaiters(&au_fi(f)->fi_rwsem)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1317: FILE: fs/aufs/finfo.c:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157654.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 36 warnings, 36 checks, 1377 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157654.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
