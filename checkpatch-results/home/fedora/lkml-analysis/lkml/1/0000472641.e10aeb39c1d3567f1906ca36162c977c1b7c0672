WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
patches. It also adds the complete list of atomic operations on the atomic_long

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#127: FILE: include/asm-alpha/atomic.h:220:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#127: FILE: include/asm-alpha/atomic.h:220:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#393: FILE: include/asm-ia64/atomic.h:115:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__(v->counter) c, old;				\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#393: FILE: include/asm-ia64/atomic.h:115:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__(v->counter) c, old;				\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#452: FILE: include/asm-mips/atomic.h:666:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic64_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#452: FILE: include/asm-mips/atomic.h:666:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic64_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#506: FILE: include/asm-parisc/atomic.h:288:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;						\
+	c = atomic64_read(v);					\
+	while (c != (u) && (old = atomic64_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#506: FILE: include/asm-parisc/atomic.h:288:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;						\
+	c = atomic64_read(v);					\
+	while (c != (u) && (old = atomic64_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

WARNING:INLINE: plain inline is preferred over __inline__
#550: FILE: include/asm-powerpc/atomic.h:430:
+static __inline__ int atomic64_add_unless(atomic64_t *v, long a, long u)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#554: FILE: include/asm-powerpc/atomic.h:434:
+	__asm__ __volatile__ (

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#556: FILE: include/asm-powerpc/atomic.h:436:
+"1:	ldarx	%0,0,%1		# atomic_add_unless\n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#560: FILE: include/asm-powerpc/atomic.h:440:
+"	stdcx.	%0,0,%1 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#560: FILE: include/asm-powerpc/atomic.h:440:
+"	stdcx.	%0,0,%1 \n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#563: FILE: include/asm-powerpc/atomic.h:443:
+"	subf	%0,%2,%0 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#563: FILE: include/asm-powerpc/atomic.h:443:
+"	subf	%0,%2,%0 \n\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#629: FILE: include/asm-sparc64/atomic.h:97:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	likely(c != (u));					\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#629: FILE: include/asm-sparc64/atomic.h:97:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	likely(c != (u));					\
+})

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#658: FILE: include/asm-x86_64/atomic.h:378:
+		:"+r" (i), "+m" (v->counter)
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#699: FILE: include/asm-x86_64/atomic.h:433:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#699: FILE: include/asm-x86_64/atomic.h:433:
+#define atomic64_add_unless(v, a, u)				\
+({								\
+	__typeof__((v)->counter) c, old;			\
+	c = atomic64_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic64_cmpxchg((v), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000472641.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 7 warnings, 13 checks, 576 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000472641.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
