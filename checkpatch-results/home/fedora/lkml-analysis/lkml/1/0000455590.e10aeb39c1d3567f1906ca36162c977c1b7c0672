WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
# HG changeset patch

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# User Ralph Campbell <ralph.campbell@qlogic.com>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# Date 1173994464 25200

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
# Node ID 02b57b02578b7ffb189de66f7886214e9d5f2045

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
# Parent  78ae7bddbd5e205adc12993ad2956e0402ca01d7

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
IB/ipath - support larger IB_QP_MAX_DEST_RD_ATOMIC and IB_QP_MAX_QP_RD_ATOMIC

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#209: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:102:
+		/* FALLTHROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:INDENTED_LABEL: labels should not be indented
#293: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:167:
+	normal:

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#497: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:407:
+				ohdr->u.atomic_eth.swap_data = cpu_to_be64(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#499: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:409:
+				ohdr->u.atomic_eth.compare_data = cpu_to_be64(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#503: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:413:
+				ohdr->u.atomic_eth.swap_data = cpu_to_be64(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#507: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:417:
+			ohdr->u.atomic_eth.vaddr[0] = cpu_to_be32(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#509: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:419:
+			ohdr->u.atomic_eth.vaddr[1] = cpu_to_be32(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#511: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:421:
+			ohdr->u.atomic_eth.rkey = cpu_to_be32(

CHECK:BRACES: braces {} should be used on all arms of this statement
#746: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1112:
+			if (!header_in_data) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#749: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1115:
+				val = ((u64) be32_to_cpu(p[0]) << 32) |

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#751: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1117:
+			} else

CHECK:SPACING: No space is necessary after a cast
#752: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1118:
+				val = be64_to_cpu(((__be64 *) data)[0]);

CHECK:SPACING: No space is necessary after a cast
#753: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1119:
+			*(u64 *) wqe->sg_list[0].vaddr = val;

WARNING:INDENTED_LABEL: labels should not be indented
#788: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1145:
+	read_middle:

WARNING:INDENTED_LABEL: labels should not be indented
#851: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1194:
+	read_last:

CHECK:SPACING: No space is necessary after a cast
#880: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1220:
+		(void) do_rc_ack(qp, aeth, psn, OP(RDMA_READ_RESPONSE_LAST));

CHECK:SPACING: No space is necessary after a cast
#1087: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1375:
+		if (!e || e->opcode != (u8) opcode || old_req)

CHECK:SPACING: No space is necessary after a cast
#1285: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1763:
+		vaddr = ((u64) be32_to_cpu(ateth->vaddr[0]) << 32) |

CHECK:SPACING: No space is necessary after a cast
#1298: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1774:
+		maddr = (atomic64_t *) qp->r_sge.sge.vaddr;

CHECK:SPACING: No space is necessary after a cast
#1311: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1778:
+			(u64) atomic64_add_return(sdata, maddr) - sdata :

CHECK:SPACING: No space is necessary after a cast
#1312: FILE: drivers/infiniband/hw/ipath/ipath_rc.c:1779:
+			(u64) cmpxchg((u64 *) qp->r_sge.sge.vaddr,

CHECK:SPACING: No space is necessary after a cast
#1453: FILE: drivers/infiniband/hw/ipath/ipath_ruc.c:380:
+		maddr = (atomic64_t *) qp->r_sge.sge.vaddr;

CHECK:SPACING: No space is necessary after a cast
#1455: FILE: drivers/infiniband/hw/ipath/ipath_ruc.c:382:
+		*(u64 *) sqp->s_sge.sge.vaddr =

CHECK:SPACING: No space is necessary after a cast
#1457: FILE: drivers/infiniband/hw/ipath/ipath_ruc.c:384:
+			(u64) atomic64_add_return(sdata, maddr) - sdata :

CHECK:SPACING: No space is necessary after a cast
#1458: FILE: drivers/infiniband/hw/ipath/ipath_ruc.c:385:
+			(u64) cmpxchg((u64 *) qp->r_sge.sge.vaddr,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qp->ibqp.qp_type == IB_QPT_RC'
#1511: FILE: drivers/infiniband/hw/ipath/ipath_ruc.c:693:
+	if (!((qp->ibqp.qp_type == IB_QPT_RC) ?
+	       ipath_make_rc_req(qp, ohdr, pmtu, &bth0, &bth2) :
+	       ipath_make_uc_req(qp, ohdr, pmtu, &bth0, &bth2))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000455590.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 22 checks, 1611 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000455590.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
