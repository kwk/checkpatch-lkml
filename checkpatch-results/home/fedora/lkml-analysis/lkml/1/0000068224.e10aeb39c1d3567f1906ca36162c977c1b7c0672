WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
has been tested with a single and multiple processes, and with data inflight

CHECK:SPACING: No space is necessary after a cast
#271: FILE: checkpoint/objhash.c:240:
+	sock_hold((struct sock *) ptr);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#277: FILE: checkpoint/objhash.c:246:
+	struct sock *sk = (struct sock *) ptr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#290: FILE: checkpoint/objhash.c:259:
+		struct socket *sock = sk->sk_socket;
+		sock_orphan(sk);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#295: FILE: checkpoint/objhash.c:264:
+	sock_put((struct sock *) ptr);

CHECK:SPACING: No space is necessary after a cast
#300: FILE: checkpoint/objhash.c:269:
+	return atomic_read(&((struct sock *) ptr)->sk_refcnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#378: FILE: include/linux/checkpoint.h:82:
+extern int ckpt_sock_getnames(struct ckpt_ctx *ctx,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#380: FILE: include/linux/checkpoint.h:84:
+			      struct sockaddr *loc, unsigned *loc_len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#381: FILE: include/linux/checkpoint.h:85:
+			      struct sockaddr *rem, unsigned *rem_len);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#444: FILE: include/linux/checkpoint_hdr.h:401:
+	} socket __attribute__ ((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#451: FILE: include/linux/checkpoint_hdr.h:408:
+	} sock_common __attribute__ ((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#475: FILE: include/linux/checkpoint_hdr.h:432:
+	} sock __attribute__ ((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#476: FILE: include/linux/checkpoint_hdr.h:433:
+} __attribute__ ((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#482: FILE: include/linux/checkpoint_hdr.h:439:
+} __attribute__ ((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#502: FILE: include/linux/checkpoint_hdr.h:459:
+} __attribute__ ((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#507: FILE: include/linux/checkpoint_hdr.h:464:
+} __attribute__((aligned(8)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#520: FILE: include/linux/net.h:235:
+extern int	     sock_attach_fd(struct socket *sock, struct file *file,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#537: FILE: include/net/af_unix.h:75:
+extern int unix_checkpoint(struct ckpt_ctx *ctx, struct socket *sock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#538: FILE: include/net/af_unix.h:76:
+extern int unix_restore(struct ckpt_ctx *ctx, struct socket *sock,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#540: FILE: include/net/af_unix.h:78:
+extern int unix_collect(struct ckpt_ctx *ctx, struct socket *sock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#560: FILE: include/net/sock.h:1653:
+extern int checkpoint_sock(struct ckpt_ctx *ctx, void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#561: FILE: include/net/sock.h:1654:
+extern void *restore_sock(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#562: FILE: include/net/sock.h:1655:
+extern int sock_file_checkpoint(struct ckpt_ctx *ctx, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#563: FILE: include/net/sock.h:1656:
+extern struct file *sock_file_restore(struct ckpt_ctx *ctx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#565: FILE: include/net/sock.h:1658:
+extern int sock_file_collect(struct ckpt_ctx *ctx, struct file *file);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#580: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#585: FILE: net/checkpoint.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#634: FILE: net/checkpoint.c:50:
+	skbs = kzalloc(sizeof(*skbs) * count1, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#690: FILE: net/checkpoint.c:106:
+			ckpt_write_err(ctx, "TE", "af_unix: pass fd", -EBUSY);
 			                     ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#704: FILE: net/checkpoint.c:120:
+		BUG_ON(!skb->sk);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#711: FILE: net/checkpoint.c:127:
+		ret = ckpt_write_obj(ctx, (struct ckpt_hdr *) h);

WARNING:INDENTED_LABEL: labels should not be indented
#717: FILE: net/checkpoint.c:133:
+	end:

CHECK:SPACING: No space is necessary after a cast
#745: FILE: net/checkpoint.c:161:
+	ret = ckpt_write_obj(ctx, (struct ckpt_hdr *) h);

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#765: FILE: net/checkpoint.c:181:
+		ckpt_write_err(ctx, "TE", "socket: owner gone?", dst_objref);
 		                     ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#795: FILE: net/checkpoint.c:211:
+		       struct sockaddr *loc, unsigned *loc_len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#796: FILE: net/checkpoint.c:212:
+		       struct sockaddr *rem, unsigned *rem_len)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sock->sk->sk_type != SOCK_DGRAM'
#808: FILE: net/checkpoint.c:224:
+		if ((sock->sk->sk_type != SOCK_DGRAM) &&
+		    (sock->sk->sk_state == TCP_ESTABLISHED)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sock->sk->sk_state == TCP_ESTABLISHED'
#808: FILE: net/checkpoint.c:224:
+		if ((sock->sk->sk_type != SOCK_DGRAM) &&
+		    (sock->sk->sk_state == TCP_ESTABLISHED)) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#822: FILE: net/checkpoint.c:238:
+	uint8_t userlocks_mask = SOCK_SNDBUF_LOCK | SOCK_RCVBUF_LOCK |

ERROR:CODE_INDENT: code indent should use tabs where possible
#823: FILE: net/checkpoint.c:239:
+^I^I                 SOCK_BINDADDR_LOCK | SOCK_BINDPORT_LOCK;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sk' may be better as '(sk)' to avoid precedence issues
#854: FILE: net/checkpoint.c:270:
+#define CKPT_COPY_SOPT(op, sk, name, opt) \
+	sock_cptrst_opt(op, sk->sk_socket, name, (char *)opt, sizeof(*opt))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'opt' - possible side-effects?
#854: FILE: net/checkpoint.c:270:
+#define CKPT_COPY_SOPT(op, sk, name, opt) \
+	sock_cptrst_opt(op, sk->sk_socket, name, (char *)opt, sizeof(*opt))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == CKPT_RST'
#861: FILE: net/checkpoint.c:277:
+		if ((op == CKPT_RST) &&
+		    CKPT_COPY_SOPT(op, sk, SO_RCVBUFFORCE, &h->sock.rcvbuf)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == CKPT_RST'
#868: FILE: net/checkpoint.c:284:
+		if ((op == CKPT_RST) &&
+		    CKPT_COPY_SOPT(op, sk, SO_SNDBUFFORCE, &h->sock.sndbuf)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == CKPT_CPT'
#878: FILE: net/checkpoint.c:294:
+	if ((op == CKPT_CPT) && (h->sock.rcvbuf != SOCK_MIN_RCVBUF))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->sock.rcvbuf != SOCK_MIN_RCVBUF'
#878: FILE: net/checkpoint.c:294:
+	if ((op == CKPT_CPT) && (h->sock.rcvbuf != SOCK_MIN_RCVBUF))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == CKPT_CPT'
#881: FILE: net/checkpoint.c:297:
+	if ((op == CKPT_CPT) && (h->sock.sndbuf != SOCK_MIN_SNDBUF))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->sock.sndbuf != SOCK_MIN_SNDBUF'
#881: FILE: net/checkpoint.c:297:
+	if ((op == CKPT_CPT) && (h->sock.sndbuf != SOCK_MIN_SNDBUF))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#921: FILE: net/checkpoint.c:337:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#932: FILE: net/checkpoint.c:348:
+		int flag = sk_flag_map[i].flag;
+		ret = sock_restore_flag(sock, &sk_flags, flag, opt);

WARNING:LINE_SPACING: Missing a blank line after declarations
#942: FILE: net/checkpoint.c:358:
+		int flag = sock_flag_map[i].flag;
+		ret = sock_restore_flag(sock, &sock_flags, flag, opt);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#958: FILE: net/checkpoint.c:374:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#964: FILE: net/checkpoint.c:380:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#997: FILE: net/checkpoint.c:413:
+	if (sk->sk_socket) {
+		CKPT_COPY(op, h->socket.state, sk->sk_socket->state);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->socket.state == SS_CONNECTED'
#1062: FILE: net/checkpoint.c:478:
+	if ((h->socket.state == SS_CONNECTED) &&
+	    (h->sock.state != TCP_ESTABLISHED)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->sock.state != TCP_ESTABLISHED'
#1062: FILE: net/checkpoint.c:478:
+	if ((h->socket.state == SS_CONNECTED) &&
+	    (h->sock.state != TCP_ESTABLISHED)) {

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1092: FILE: net/checkpoint.c:508:
+			       -ENOSYS, sock->ops, sock);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1093: FILE: net/checkpoint.c:509:
+		return -ENOSYS;

CHECK:SPACING: No space is necessary after a cast
#1105: FILE: net/checkpoint.c:521:
+	ret = ckpt_write_obj(ctx, (struct ckpt_hdr *) h);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sk->sk_state != TCP_LISTEN'
#1115: FILE: net/checkpoint.c:531:
+	if ((sk->sk_state != TCP_LISTEN) && (!sock_flag(sk, SOCK_DEAD)))

CHECK:SPACING: No space is necessary after a cast
#1173: FILE: net/checkpoint.c:589:
+	ret = ckpt_write_obj(ctx, (struct ckpt_hdr *) h);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1286: FILE: net/checkpoint.c:702:
+	/*
+	 * part II: per socket type state

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1410: FILE: net/unix/checkpoint.c:1:
+#include <linux/namei.h>

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#1431: FILE: net/unix/checkpoint.c:22:
+#define UNIX_ADDR_EMPTY(a) (a <= sizeof(short))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "peer"
#1442: FILE: net/unix/checkpoint.c:33:
+	if (unix_sk(src)->peer != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1450: FILE: net/unix/checkpoint.c:41:
+
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sock->sk->sk_state == TCP_LISTEN'
#1536: FILE: net/unix/checkpoint.c:127:
+	if ((sock->sk->sk_state == TCP_LISTEN) &&
+	    !skb_queue_empty(&sock->sk->sk_receive_queue)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sk->dentry->d_inode->i_nlink > 0'
#1553: FILE: net/unix/checkpoint.c:144:
+	if (sk->dentry && (sk->dentry->d_inode->i_nlink > 0))

CHECK:SPACING: No space is necessary after a cast
#1573: FILE: net/unix/checkpoint.c:164:
+	ret = ckpt_write_obj(ctx, (struct ckpt_hdr *) un);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1608: FILE: net/unix/checkpoint.c:199:
+	uint8_t sock_shutdown;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1609: FILE: net/unix/checkpoint.c:200:
+	uint8_t peer_shutdown = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1644: FILE: net/unix/checkpoint.c:235:
+		struct sock *pr;
+		pr = ckpt_obj_fetch(ctx, h->pr_objref, CKPT_OBJ_SOCK);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret > 0'
#1692: FILE: net/unix/checkpoint.c:283:
+	if ((ret > 0) && (ret != len))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret != len'
#1692: FILE: net/unix/checkpoint.c:283:
+	if ((ret > 0) && (ret != len))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sk->sk_type == SOCK_DGRAM'
#1754: FILE: net/unix/checkpoint.c:345:
+	if ((sk->sk_type == SOCK_DGRAM) && (unix_sk(sk)->addr != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "addr"
#1754: FILE: net/unix/checkpoint.c:345:
+	if ((sk->sk_type == SOCK_DGRAM) && (unix_sk(sk)->addr != NULL)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1787: FILE: net/unix/checkpoint.c:378:
+					  unsigned len)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1817: FILE: net/unix/checkpoint.c:408:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'un->peer > 0'
#1839: FILE: net/unix/checkpoint.c:430:
+	if (!dead && (un->peer > 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == 0'
#1918: FILE: net/unix/checkpoint.c:509:
+	if ((ret == 0) || (ret == -ENOENT))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->socket.state == SS_CONNECTING'
#1973: FILE: net/unix/checkpoint.c:564:
+	if ((h->socket.state == SS_CONNECTING) ||
+	    (h->socket.state == SS_DISCONNECTING) ||
+	    (h->socket.state == SS_FREE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->socket.state == SS_DISCONNECTING'
#1973: FILE: net/unix/checkpoint.c:564:
+	if ((h->socket.state == SS_CONNECTING) ||
+	    (h->socket.state == SS_DISCONNECTING) ||
+	    (h->socket.state == SS_FREE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->socket.state == SS_FREE'
#1973: FILE: net/unix/checkpoint.c:564:
+	if ((h->socket.state == SS_CONNECTING) ||
+	    (h->socket.state == SS_DISCONNECTING) ||
+	    (h->socket.state == SS_FREE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->sock.type == SOCK_DGRAM'
#1984: FILE: net/unix/checkpoint.c:575:
+	if ((h->sock.type == SOCK_DGRAM) &&
+	    (h->sock.backlog > net->unx.sysctl_max_dgram_qlen)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->sock.backlog > net->unx.sysctl_max_dgram_qlen'
#1984: FILE: net/unix/checkpoint.c:575:
+	if ((h->sock.type == SOCK_DGRAM) &&
+	    (h->sock.backlog > net->unx.sysctl_max_dgram_qlen)) {

WARNING:TYPO_SPELLING: 'unx' may be misspelled - perhaps 'unix'?
#1985: FILE: net/unix/checkpoint.c:576:
+	    (h->sock.backlog > net->unx.sysctl_max_dgram_qlen)) {
 	                            ^^^

WARNING:TYPO_SPELLING: 'unx' may be misspelled - perhaps 'unix'?
#1987: FILE: net/unix/checkpoint.c:578:
+			   h->sock.backlog, net->unx.sysctl_max_dgram_qlen);
 			                         ^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->sock.state != TCP_ESTABLISHED'
#2026: FILE: net/unix/checkpoint.c:617:
+	if ((h->sock.state != TCP_ESTABLISHED) &&
+	    !UNIX_ADDR_EMPTY(un->laddr_len)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->sock.state == TCP_ESTABLISHED'
#2033: FILE: net/unix/checkpoint.c:624:
+	if ((h->sock.state == TCP_ESTABLISHED) || (h->sock.state == TCP_CLOSE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->sock.state == TCP_CLOSE'
#2033: FILE: net/unix/checkpoint.c:624:
+	if ((h->sock.state == TCP_ESTABLISHED) || (h->sock.state == TCP_CLOSE))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068224.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 32 warnings, 57 checks, 1736 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068224.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
