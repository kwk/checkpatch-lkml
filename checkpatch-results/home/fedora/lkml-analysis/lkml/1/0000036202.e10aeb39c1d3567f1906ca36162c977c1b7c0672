WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
2.6.31-stable review patch.  If anyone has any objections, please let us know.

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '2147b1a6a48e28399120ca51d4a91840a278611f', maybe rebased or not pulled?
#33: 
(cherry picked from commit 2147b1a6a48e28399120ca51d4a91840a278611f)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#59: FILE: fs/ext4/move_extent.c:137:
+mext_check_null_inode(struct inode *inode1, struct inode *inode2,
+		const char *function)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode1"
#63: FILE: fs/ext4/move_extent.c:141:
+	if (inode1 == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#65: FILE: fs/ext4/move_extent.c:143:
+		ext4_error(inode2->i_sb, function,
+			"Both inodes should not be NULL: "

WARNING:SPLIT_STRING: quoted string split across lines
#66: FILE: fs/ext4/move_extent.c:144:
+			"Both inodes should not be NULL: "
+			"inode1 NULL inode2 %lu", inode2->i_ino);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode2"
#68: FILE: fs/ext4/move_extent.c:146:
+	} else if (inode2 == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#70: FILE: fs/ext4/move_extent.c:148:
+		ext4_error(inode1->i_sb, function,
+			"Both inodes should not be NULL: "

WARNING:SPLIT_STRING: quoted string split across lines
#71: FILE: fs/ext4/move_extent.c:149:
+			"Both inodes should not be NULL: "
+			"inode1 %lu inode2 NULL", inode1->i_ino);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: fs/ext4/move_extent.c:556:
+		ext4_error(orig_inode->i_sb, __func__,
+			"new_ext_end(%u) should be less than or equal to "

WARNING:SPLIT_STRING: quoted string split across lines
#125: FILE: fs/ext4/move_extent.c:557:
+			"new_ext_end(%u) should be less than or equal to "
+			"oext->ee_block(%u) + oext_alen(%d) - 1",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: fs/ext4/move_extent.c:704:
+			ext4_error(donor_inode->i_sb, __func__,
+				"Donor offset(%u) and the first block of donor "

WARNING:SPLIT_STRING: quoted string split across lines
#155: FILE: fs/ext4/move_extent.c:705:
+				"Donor offset(%u) and the first block of donor "
+				"extent(%u) should be equal",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#185: FILE: fs/ext4/move_extent.c:1100:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode1"
#185: FILE: fs/ext4/move_extent.c:1100:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode2"
#185: FILE: fs/ext4/move_extent.c:1100:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#221: FILE: fs/ext4/move_extent.c:1137:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode1"
#221: FILE: fs/ext4/move_extent.c:1137:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode2"
#221: FILE: fs/ext4/move_extent.c:1137:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: fs/ext4/move_extent.c:1221:
+	ret1 = mext_check_arguments(orig_inode, donor_inode, orig_start,
 					donor_start, &len, *moved_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: fs/ext4/move_extent.c:1345:
+			ret1 = move_extent_per_page(o_filp, donor_inode,
 						orig_page_offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: fs/ext4/move_extent.c:1355:
+				ext4_error(orig_inode->i_sb, __func__,
+					"We replaced blocks too much! "

WARNING:SPLIT_STRING: quoted string split across lines
#342: FILE: fs/ext4/move_extent.c:1356:
+					"We replaced blocks too much! "
+					"sum of replaced: %llu requested: %llu",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000036202.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 14 checks, 315 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000036202.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
