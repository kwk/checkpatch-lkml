CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bi' - possible side-effects?
#127: FILE: crypto/aes_generic.c:290:
+#define f_rl(bo, bi, n, k)	do {					    \
+	bo[n] = (crypto_ft_tab[2][byte(bi[n], 0)] & 0x000000ff) ^ 	    \
+		(crypto_ft_tab[3][byte(bi[(n + 1) & 3], 1)] & 0x0000ff00) ^ \
+		(crypto_ft_tab[0][byte(bi[(n + 2) & 3], 2)] & 0x00ff0000) ^ \
+		(crypto_ft_tab[1][byte(bi[(n + 3) & 3], 3)] & 0xff000000) ^ \
+		*(k + n);						    \
 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#127: FILE: crypto/aes_generic.c:290:
+#define f_rl(bo, bi, n, k)	do {					    \
+	bo[n] = (crypto_ft_tab[2][byte(bi[n], 0)] & 0x000000ff) ^ 	    \
+		(crypto_ft_tab[3][byte(bi[(n + 1) & 3], 1)] & 0x0000ff00) ^ \
+		(crypto_ft_tab[0][byte(bi[(n + 2) & 3], 2)] & 0x00ff0000) ^ \
+		(crypto_ft_tab[1][byte(bi[(n + 3) & 3], 3)] & 0xff000000) ^ \
+		*(k + n);						    \
 } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#127: FILE: crypto/aes_generic.c:290:
+#define f_rl(bo, bi, n, k)	do {					    \
+	bo[n] = (crypto_ft_tab[2][byte(bi[n], 0)] & 0x000000ff) ^ 	    \
+		(crypto_ft_tab[3][byte(bi[(n + 1) & 3], 1)] & 0x0000ff00) ^ \
+		(crypto_ft_tab[0][byte(bi[(n + 2) & 3], 2)] & 0x00ff0000) ^ \
+		(crypto_ft_tab[1][byte(bi[(n + 3) & 3], 3)] & 0xff000000) ^ \
+		*(k + n);						    \
 } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#127: FILE: crypto/aes_generic.c:290:
+#define f_rl(bo, bi, n, k)	do {					    \
+	bo[n] = (crypto_ft_tab[2][byte(bi[n], 0)] & 0x000000ff) ^ 	    \
+		(crypto_ft_tab[3][byte(bi[(n + 1) & 3], 1)] & 0x0000ff00) ^ \
+		(crypto_ft_tab[0][byte(bi[(n + 2) & 3], 2)] & 0x00ff0000) ^ \
+		(crypto_ft_tab[1][byte(bi[(n + 3) & 3], 3)] & 0xff000000) ^ \
+		*(k + n);						    \
 } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: crypto/aes_generic.c:291:
+^Ibo[n] = (crypto_ft_tab[2][byte(bi[n], 0)] & 0x000000ff) ^ ^I    \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bi' - possible side-effects?
#145: FILE: crypto/aes_generic.c:363:
+#define i_rl(bo, bi, n, k)	do {					\
+	bo[n] = (u32)isb_tab[byte(bi[n], 0)] ^				\
+	((u32)isb_tab[byte(bi[(n + 3) & 3], 1)] << 8) ^			\
+	((u32)isb_tab[byte(bi[(n + 2) & 3], 2)] << 16) ^		\
+	((u32)isb_tab[byte(bi[(n + 1) & 3], 3)] << 24) ^ *(k + n);	\
 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#145: FILE: crypto/aes_generic.c:363:
+#define i_rl(bo, bi, n, k)	do {					\
+	bo[n] = (u32)isb_tab[byte(bi[n], 0)] ^				\
+	((u32)isb_tab[byte(bi[(n + 3) & 3], 1)] << 8) ^			\
+	((u32)isb_tab[byte(bi[(n + 2) & 3], 2)] << 16) ^		\
+	((u32)isb_tab[byte(bi[(n + 1) & 3], 3)] << 24) ^ *(k + n);	\
 } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#145: FILE: crypto/aes_generic.c:363:
+#define i_rl(bo, bi, n, k)	do {					\
+	bo[n] = (u32)isb_tab[byte(bi[n], 0)] ^				\
+	((u32)isb_tab[byte(bi[(n + 3) & 3], 1)] << 8) ^			\
+	((u32)isb_tab[byte(bi[(n + 2) & 3], 2)] << 16) ^		\
+	((u32)isb_tab[byte(bi[(n + 1) & 3], 3)] << 24) ^ *(k + n);	\
 } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#145: FILE: crypto/aes_generic.c:363:
+#define i_rl(bo, bi, n, k)	do {					\
+	bo[n] = (u32)isb_tab[byte(bi[n], 0)] ^				\
+	((u32)isb_tab[byte(bi[(n + 3) & 3], 1)] << 8) ^			\
+	((u32)isb_tab[byte(bi[(n + 2) & 3], 2)] << 16) ^		\
+	((u32)isb_tab[byte(bi[(n + 1) & 3], 3)] << 24) ^ *(k + n);	\
 } while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308941.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 6 checks, 99 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000308941.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
