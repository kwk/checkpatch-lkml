WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-stage-1-for-linus

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#124: 
      x86: smp.h move zap_low_mappings declartion to tlbflush.h
                                       ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#125: 
      x86: smp.h move prefill_possible_map declartion to cpu.h
                                           ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#126: 
      x86: smp.h move stack_processor_id declartion to cpu.h
                                         ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#127: 
      x86: smp.h move safe_smp_processor_id declartion to cpu.h
                                            ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#128: 
      x86: smp.h move cpu_physical_id declartion to cpu.h
                                      ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#129: 
      x86: smp.h move boot_cpu_id declartion to cpu.h
                                  ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#132: 
      x86: smp.h move cpu_callin_mask and cpu_callin_map declartion to cpumask.h
                                                         ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#133: 
      x86: smp.h move cpu_callout_mask and cpu_callout_map declartion to cpumask.h
                                                           ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#134: 
      x86: smp.h move cpu_initialized_mask and cpu_initialized declartion to cpumask.h
                                                               ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#135: 
      x86: smp.h move cpu_sibling_setup_mask and cpu_sibling_setup_map declartion to cpumask.h
                                                                       ^^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#301: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#341: FILE: Documentation/x86/earlyprintk.txt:36:
+  wont be able to use the USB debug key. )
   ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3061: FILE: arch/x86/ia32/ia32_signal.c:56:
+		/* If you change siginfo_t structure, please make sure that
+		   this code is fixed accordingly.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3064: FILE: arch/x86/ia32/ia32_signal.c:59:
+		   3 ints plus the relevant union member.  */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3079: FILE: arch/x86/ia32/ia32_signal.c:74:
+			put_user_ex(from->_sifields._pad[0],
+					  &to->_sifields._pad[0]);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3087: FILE: arch/x86/ia32/ia32_signal.c:82:
+				/* FALL THROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3482: FILE: arch/x86/include/asm/cpu.h:12:
+extern void prefill_possible_map(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3515: FILE: arch/x86/include/asm/cpumask.h:1:
+#ifndef _ASM_X86_CPUMASK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4005: FILE: arch/x86/include/asm/tlbflush.h:178:
+extern void zap_low_mappings(void);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4032: FILE: arch/x86/include/asm/uaccess.h:189:
+#define __put_user_asm_u64(x, addr, err, errret)			\
 	asm volatile("1:	movl %%eax,0(%2)\n"			\
 		     "2:	movl %%edx,4(%2)\n"			\
 		     "3:\n"						\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4043: FILE: arch/x86/include/asm/uaccess.h:202:
+#define __put_user_asm_ex_u64(x, addr)					\
+	asm volatile("1:	movl %%eax,0(%1)\n"			\
+		     "2:	movl %%edx,4(%1)\n"			\
+		     "3:\n"						\
+		     _ASM_EXTABLE(1b, 2b - 1b)				\
+		     _ASM_EXTABLE(2b, 3b - 2b)				\
+		     : : "A" (x), "r" (addr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#4081: FILE: arch/x86/include/asm/uaccess.h:300:
+#define __put_user_size_ex(x, ptr, size)				\
+do {									\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	case 1:								\
+		__put_user_asm_ex(x, ptr, "b", "b", "iq");		\
+		break;							\
+	case 2:								\
+		__put_user_asm_ex(x, ptr, "w", "w", "ir");		\
+		break;							\
+	case 4:								\
+		__put_user_asm_ex(x, ptr, "l", "k", "ir");		\
+		break;							\
+	case 8:								\
+		__put_user_asm_ex_u64((__typeof__(*ptr))(x), ptr);	\
 		break;							\
 	default:							\
 		__put_user_bad();					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#4081: FILE: arch/x86/include/asm/uaccess.h:300:
+#define __put_user_size_ex(x, ptr, size)				\
+do {									\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	case 1:								\
+		__put_user_asm_ex(x, ptr, "b", "b", "iq");		\
+		break;							\
+	case 2:								\
+		__put_user_asm_ex(x, ptr, "w", "w", "ir");		\
+		break;							\
+	case 4:								\
+		__put_user_asm_ex(x, ptr, "l", "k", "ir");		\
+		break;							\
+	case 8:								\
+		__put_user_asm_ex_u64((__typeof__(*ptr))(x), ptr);	\
 		break;							\
 	default:							\
 		__put_user_bad();					\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4103: FILE: arch/x86/include/asm/uaccess.h:346:
+#define __get_user_asm_ex_u64(x, ptr)			(x) = __get_user_bad()

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#4116: FILE: arch/x86/include/asm/uaccess.h:388:
+#define __get_user_size_ex(x, ptr, size)				\
+do {									\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	case 1:								\
+		__get_user_asm_ex(x, ptr, "b", "b", "=q");		\
+		break;							\
+	case 2:								\
+		__get_user_asm_ex(x, ptr, "w", "w", "=r");		\
+		break;							\
+	case 4:								\
+		__get_user_asm_ex(x, ptr, "l", "k", "=r");		\
+		break;							\
+	case 8:								\
+		__get_user_asm_ex_u64(x, ptr);				\
+		break;							\
+	default:							\
+		(x) = __get_user_bad();					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#4116: FILE: arch/x86/include/asm/uaccess.h:388:
+#define __get_user_size_ex(x, ptr, size)				\
+do {									\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	case 1:								\
+		__get_user_asm_ex(x, ptr, "b", "b", "=q");		\
+		break;							\
+	case 2:								\
+		__get_user_asm_ex(x, ptr, "w", "w", "=r");		\
+		break;							\
+	case 4:								\
+		__get_user_asm_ex(x, ptr, "l", "k", "=r");		\
+		break;							\
+	case 8:								\
+		__get_user_asm_ex_u64(x, ptr);				\
+		break;							\
+	default:							\
+		(x) = __get_user_bad();					\
+	}								\
+} while (0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4137: FILE: arch/x86/include/asm/uaccess.h:409:
+#define __get_user_asm_ex(x, addr, itype, rtype, ltype)			\
+	asm volatile("1:	mov"itype" %1,%"rtype"0\n"		\
+		     "2:\n"						\
+		     _ASM_EXTABLE(1b, 2b - 1b)				\
+		     : ltype(x) : "m" (__m(addr)))

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4138: FILE: arch/x86/include/asm/uaccess.h:410:
+	asm volatile("1:	mov"itype" %1,%"rtype"0\n"		\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4151: FILE: arch/x86/include/asm/uaccess.h:451:
+#define __put_user_asm_ex(x, addr, itype, rtype, ltype)			\
+	asm volatile("1:	mov"itype" %"rtype"0,%1\n"		\
+		     "2:\n"						\
+		     _ASM_EXTABLE(1b, 2b - 1b)				\
+		     : : ltype(x), "m" (__m(addr)))

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4152: FILE: arch/x86/include/asm/uaccess.h:452:
+	asm volatile("1:	mov"itype" %"rtype"0,%1\n"		\

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#4160: FILE: arch/x86/include/asm/uaccess.h:460:
+#define uaccess_try	do {						\
+	int prev_err = current_thread_info()->uaccess_err;		\
+	current_thread_info()->uaccess_err = 0;				\
+	barrier();

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#4165: FILE: arch/x86/include/asm/uaccess.h:465:
+#define uaccess_catch(err)						\
+	(err) |= current_thread_info()->uaccess_err;			\
+	current_thread_info()->uaccess_err = prev_err;			\
+} while (0)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#4194: FILE: arch/x86/include/asm/uaccess.h:530:
+#define get_user_ex(x, ptr)	do {					\
+	unsigned long __gue_val;					\
+	__get_user_size_ex((__gue_val), (ptr), (sizeof(*(ptr))));	\
+	(x) = (__force __typeof__(*(ptr)))__gue_val;			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#4205: FILE: arch/x86/include/asm/uaccess.h:541:
+#define put_user_ex(x, ptr)						\
+	__put_user_size_ex((__typeof__(*(ptr)))(x), (ptr), sizeof(*(ptr)))

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#4210: FILE: arch/x86/include/asm/uaccess.h:546:
+#define put_user_try		do {		\
+	int __uaccess_err = 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#4213: FILE: arch/x86/include/asm/uaccess.h:549:
+#define put_user_catch(err)			\
+	(err) |= __uaccess_err;			\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#4217: FILE: arch/x86/include/asm/uaccess.h:553:
+#define put_user_ex(x, ptr)	do {		\
+	__uaccess_err |= __put_user(x, ptr);	\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4277: FILE: arch/x86/kernel/acpi/boot.c:130:
+}
+void __init __acpi_unmap_table(char *map, unsigned long size)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#4294: FILE: arch/x86/kernel/acpi/boot.c:899:
+		struct mpc_ioapic *ia = &mp_ioapics[i];
+		__set_bit(ia->apicid, used);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4332: FILE: arch/x86/kernel/acpi/boot.c:951:
+	printk(KERN_INFO "IOAPIC[%d]: apic_id %d, version %d, address 0x%x, "

WARNING:SPLIT_STRING: quoted string split across lines
#4333: FILE: arch/x86/kernel/acpi/boot.c:952:
+	printk(KERN_INFO "IOAPIC[%d]: apic_id %d, version %d, address 0x%x, "
+	       "GSI %d-%d\n", idx, mp_ioapics[idx].apicid,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4345: FILE: arch/x86/kernel/acpi/boot.c:983:
+static void assign_to_mp_irq(struct mpc_intsrc *m,
+				    struct mpc_intsrc *mp_irq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4354: FILE: arch/x86/kernel/acpi/boot.c:989:
+static int mp_irq_cmp(struct mpc_intsrc *mp_irq,
+				struct mpc_intsrc *m)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4528: FILE: arch/x86/kernel/apic.c:567:
+		   "with PM-Timer: %ldms instead of 100ms\n",(long)res);
 		                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#4528: FILE: arch/x86/kernel/apic.c:567:
+	pr_warning("APIC calibration not consistent "
+		   "with PM-Timer: %ldms instead of 100ms\n",(long)res);

WARNING:SPLIT_STRING: quoted string split across lines
#4534: FILE: arch/x86/kernel/apic.c:573:
+	pr_info("APIC delta adjusted to PM-Timer: "
+		"%lu (%ld)\n", (unsigned long)res, *delta);

WARNING:SPLIT_STRING: quoted string split across lines
#4545: FILE: arch/x86/kernel/apic.c:581:
+		apic_printk(APIC_VERBOSE, "TSC delta adjusted to "
+					  "PM-Timer: %lu (%ld) \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#4545: FILE: arch/x86/kernel/apic.c:581:
+					  "PM-Timer: %lu (%ld) \n",

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#4808: FILE: arch/x86/kernel/io_apic.c:1140:
+	switch ((mp_irqs[idx].irqflag>>2) & 3)
 	                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4879: FILE: arch/x86/kernel/io_apic.c:1721:
+	printk(KERN_DEBUG "IO APIC #%d......\n", mp_ioapics[apic].apicid);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#4943: FILE: arch/x86/kernel/io_apic.c:2169:
+					mp_irqs[i].dstapic
+						= mp_ioapics[apic].apicid;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5080: FILE: arch/x86/kernel/machine_kexec_64.c:117:
+	paddr = __pa(page_address(image->control_code_page)+PAGE_SIZE);
 	                                                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5212: FILE: arch/x86/kernel/module_32.c:45:
+	   table entries. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5249: FILE: arch/x86/kernel/module_64.c:40:
+	   table entries. */

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#5269: FILE: arch/x86/kernel/module_64.c:94:
+		DEBUGP("type %d st_value %Lx r_addend %Lx loc %Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5270: FILE: arch/x86/kernel/module_64.c:95:
+		DEBUGP("type %d st_value %Lx r_addend %Lx loc %Lx\n",
+			(int)ELF64_R_TYPE(rel[i].r_info),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5294: FILE: arch/x86/kernel/module_64.c:125:
+			printk(KERN_ERR "module %s: Unknown rela relocation: %llu\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5303: FILE: arch/x86/kernel/module_64.c:133:
+	printk(KERN_ERR "overflow in relocation type %d val %Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#5303: FILE: arch/x86/kernel/module_64.c:133:
+	printk(KERN_ERR "overflow in relocation type %d val %Lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5312: FILE: arch/x86/kernel/module_64.c:146:
+	printk(KERN_ERR "non add relocation not supported\n");

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#5320: FILE: arch/x86/kernel/module_64.c:151:
+		    const Elf_Shdr *sechdrs,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5528: FILE: arch/x86/kernel/mpparse.c:703:
+		    ((mpf->specification == 1)
+		     || (mpf->specification == 4))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5557: FILE: arch/x86/kernel/mpparse.c:733:
+				reserve_bootmem_generic(mpf->physptr, size,
 						BOOTMEM_DEFAULT);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5622: FILE: arch/x86/kernel/mpparse.c:1029:
+	printk(KERN_INFO "physptr: %x\n", mpf->physptr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5653: FILE: arch/x86/kernel/mpparse.c:1066:
+		printk(KERN_INFO "physptr new: %x\n", mpf->physptr);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5916: FILE: arch/x86/kernel/signal.c:87:
+	get_user_try {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5964: FILE: arch/x86/kernel/signal.c:115:
+		 * App's signal handler can save/restore other segments if needed. */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5992: FILE: arch/x86/kernel/signal.c:139:
+	put_user_try {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#6205: FILE: arch/x86/kernel/signal.c:459:
+		/* Set up to return from userspace.  If provided, use a stub
+		   already in userspace.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6205: FILE: arch/x86/kernel/signal.c:459:
+		   already in userspace.  */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6619: FILE: arch/x86/mm/kmmio.c:314:
+		pr_debug("kmmio: spurious debug trap on CPU %d.\n",
 							smp_processor_id());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6660: FILE: drivers/acpi/acpica/tbxface.c:381:
+acpi_get_table_with_size(char *signature,
+	       u32 instance, struct acpi_table_header **out_table,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6820: FILE: drivers/pci/dmar.c:293:
+	status = acpi_get_table_with_size(ACPI_SIG_DMAR, 0,
+				(struct acpi_table_header **)&dmar_tbl,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#6866: FILE: include/acpi/acpiosxf.h:147:
+void early_acpi_os_unmap_memory(void __iomem * virt, acpi_size size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6879: FILE: include/acpi/acpixf.h:134:
+acpi_get_table_with_size(acpi_string signature,
+	       u32 instance, struct acpi_table_header **out_table,

CHECK:BRACES: braces {} should be used on all arms of this statement
#6927: FILE: mm/memory.c:1668:
+	if (addr == vma->vm_start && end == vma->vm_end) {
[...]
+		vma->vm_flags |= VM_PFN_AT_MMAP;
[...]

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148904.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 40 warnings, 28 checks, 5755 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148904.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
