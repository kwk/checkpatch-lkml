WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
2.6.27-stable review patch.  If anyone has any objections, please let us know.

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '1a94bc34768e463a93cb3751819709ab0ea80a01', maybe rebased or not pulled?
#47: 
commit 1a94bc34768e463a93cb3751819709ab0ea80a01 upstream.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#85: FILE: include/linux/syscalls.h:69:
+#define __SC_DECL1(t1, a1)	t1 a1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#86: FILE: include/linux/syscalls.h:70:
+#define __SC_DECL2(t2, a2, ...) t2 a2, __SC_DECL1(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#87: FILE: include/linux/syscalls.h:71:
+#define __SC_DECL3(t3, a3, ...) t3 a3, __SC_DECL2(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#88: FILE: include/linux/syscalls.h:72:
+#define __SC_DECL4(t4, a4, ...) t4 a4, __SC_DECL3(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#89: FILE: include/linux/syscalls.h:73:
+#define __SC_DECL5(t5, a5, ...) t5 a5, __SC_DECL4(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#90: FILE: include/linux/syscalls.h:74:
+#define __SC_DECL6(t6, a6, ...) t6 a6, __SC_DECL5(__VA_ARGS__)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#92: FILE: include/linux/syscalls.h:76:
+#define __SC_LONG1(t1, a1) ^Ilong a1$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#99: FILE: include/linux/syscalls.h:83:
+#define __SC_CAST1(t1, a1)	(t1) a1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#100: FILE: include/linux/syscalls.h:84:
+#define __SC_CAST2(t2, a2, ...) (t2) a2, __SC_CAST1(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#101: FILE: include/linux/syscalls.h:85:
+#define __SC_CAST3(t3, a3, ...) (t3) a3, __SC_CAST2(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#102: FILE: include/linux/syscalls.h:86:
+#define __SC_CAST4(t4, a4, ...) (t4) a4, __SC_CAST3(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#103: FILE: include/linux/syscalls.h:87:
+#define __SC_CAST5(t5, a5, ...) (t5) a5, __SC_CAST4(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#104: FILE: include/linux/syscalls.h:88:
+#define __SC_CAST6(t6, a6, ...) (t6) a6, __SC_CAST5(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#108: FILE: include/linux/syscalls.h:92:
+#define __SC_TEST2(t2, a2, ...)	__SC_TEST(t2); __SC_TEST1(__VA_ARGS__)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#109: FILE: include/linux/syscalls.h:93:
+#define __SC_TEST3(t3, a3, ...)	__SC_TEST(t3); __SC_TEST2(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#110: FILE: include/linux/syscalls.h:94:
+#define __SC_TEST4(t4, a4, ...)	__SC_TEST(t4); __SC_TEST3(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#111: FILE: include/linux/syscalls.h:95:
+#define __SC_TEST5(t5, a5, ...)	__SC_TEST(t5); __SC_TEST4(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#112: FILE: include/linux/syscalls.h:96:
+#define __SC_TEST6(t6, a6, ...)	__SC_TEST(t6); __SC_TEST5(__VA_ARGS__)

CHECK:CAMELCASE: Avoid CamelCase: <SYSCALL_DEFINEx>
#115: FILE: include/linux/syscalls.h:99:
+#define SYSCALL_DEFINE1(...)    SYSCALL_DEFINEx(1, __VA_ARGS__)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#122: FILE: include/linux/syscalls.h:106:
+#define SYSCALL_ALIAS(alias, name)					\
+	asm ("\t.globl " #alias "\n\t.set " #alias ", " #name)

CHECK:CAMELCASE: Avoid CamelCase: <SyS_##name>
#131: FILE: include/linux/syscalls.h:115:
+	asmlinkage long SyS_##name(__SC_LONG##x(__VA_ARGS__))		\

CHECK:SPACING: No space is necessary after a cast
#134: FILE: include/linux/syscalls.h:118:
+		return (long) SYSC_##name(__SC_CAST##x(__VA_ARGS__));	\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000180016.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 3 warnings, 3 checks, 77 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000180016.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
