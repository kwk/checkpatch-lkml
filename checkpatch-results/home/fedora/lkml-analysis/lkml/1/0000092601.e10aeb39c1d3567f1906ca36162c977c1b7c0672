WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#79: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: drivers/isdn/hardware/mISDN/iohelper.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#104: FILE: drivers/isdn/hardware/mISDN/iohelper.h:21:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#105: FILE: drivers/isdn/hardware/mISDN/iohelper.h:22:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hws' - possible side-effects?
#121: FILE: drivers/isdn/hardware/mISDN/iohelper.h:38:
+#define IOFUNC_IO(name, hws, ap) \
+	static u8 Read##name##_IO(void *p, u8 off) {\
+		struct hws *hw = p;\
+		return inb(hw->ap.port + off);\
+	} \
+	static void Write##name##_IO(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		outb(val, hw->ap.port + off);\
+	} \
+	static void ReadFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		insb(hw->ap.port + off, dp, size);\
+	} \
+	static void WriteFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outsb(hw->ap.port + off, dp, size);\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'hws' may be better as '(hws)' to avoid precedence issues
#121: FILE: drivers/isdn/hardware/mISDN/iohelper.h:38:
+#define IOFUNC_IO(name, hws, ap) \
+	static u8 Read##name##_IO(void *p, u8 off) {\
+		struct hws *hw = p;\
+		return inb(hw->ap.port + off);\
+	} \
+	static void Write##name##_IO(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		outb(val, hw->ap.port + off);\
+	} \
+	static void ReadFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		insb(hw->ap.port + off, dp, size);\
+	} \
+	static void WriteFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outsb(hw->ap.port + off, dp, size);\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ap' - possible side-effects?
#121: FILE: drivers/isdn/hardware/mISDN/iohelper.h:38:
+#define IOFUNC_IO(name, hws, ap) \
+	static u8 Read##name##_IO(void *p, u8 off) {\
+		struct hws *hw = p;\
+		return inb(hw->ap.port + off);\
+	} \
+	static void Write##name##_IO(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		outb(val, hw->ap.port + off);\
+	} \
+	static void ReadFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		insb(hw->ap.port + off, dp, size);\
+	} \
+	static void WriteFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outsb(hw->ap.port + off, dp, size);\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ap' may be better as '(ap)' to avoid precedence issues
#121: FILE: drivers/isdn/hardware/mISDN/iohelper.h:38:
+#define IOFUNC_IO(name, hws, ap) \
+	static u8 Read##name##_IO(void *p, u8 off) {\
+		struct hws *hw = p;\
+		return inb(hw->ap.port + off);\
+	} \
+	static void Write##name##_IO(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		outb(val, hw->ap.port + off);\
+	} \
+	static void ReadFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		insb(hw->ap.port + off, dp, size);\
+	} \
+	static void WriteFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outsb(hw->ap.port + off, dp, size);\
+	}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#122: FILE: drivers/isdn/hardware/mISDN/iohelper.h:39:
+	static u8 Read##name##_IO(void *p, u8 off) {\

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Read##name##_IO>
#122: FILE: drivers/isdn/hardware/mISDN/iohelper.h:39:
+	static u8 Read##name##_IO(void *p, u8 off) {\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#126: FILE: drivers/isdn/hardware/mISDN/iohelper.h:43:
+	static void Write##name##_IO(void *p, u8 off, u8 val) {\

CHECK:CAMELCASE: Avoid CamelCase: <Write##name##_IO>
#126: FILE: drivers/isdn/hardware/mISDN/iohelper.h:43:
+	static void Write##name##_IO(void *p, u8 off, u8 val) {\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#130: FILE: drivers/isdn/hardware/mISDN/iohelper.h:47:
+	static void ReadFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\

CHECK:CAMELCASE: Avoid CamelCase: <ReadFiFo##name##_IO>
#130: FILE: drivers/isdn/hardware/mISDN/iohelper.h:47:
+	static void ReadFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#134: FILE: drivers/isdn/hardware/mISDN/iohelper.h:51:
+	static void WriteFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\

CHECK:CAMELCASE: Avoid CamelCase: <WriteFiFo##name##_IO>
#134: FILE: drivers/isdn/hardware/mISDN/iohelper.h:51:
+	static void WriteFiFo##name##_IO(void *p, u8 off, u8 *dp, int size) {\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hws' - possible side-effects?
#139: FILE: drivers/isdn/hardware/mISDN/iohelper.h:56:
+#define IOFUNC_IND(name, hws, ap) \
+	static u8 Read##name##_IND(void *p, u8 off) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		return inb(hw->ap.port);\
+	} \
+	static void Write##name##_IND(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		outb(val, hw->ap.port);\
+	} \
+	static void ReadFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		insb(hw->ap.port, dp, size);\
+	} \
+	static void WriteFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		outsb(hw->ap.port, dp, size);\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'hws' may be better as '(hws)' to avoid precedence issues
#139: FILE: drivers/isdn/hardware/mISDN/iohelper.h:56:
+#define IOFUNC_IND(name, hws, ap) \
+	static u8 Read##name##_IND(void *p, u8 off) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		return inb(hw->ap.port);\
+	} \
+	static void Write##name##_IND(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		outb(val, hw->ap.port);\
+	} \
+	static void ReadFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		insb(hw->ap.port, dp, size);\
+	} \
+	static void WriteFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		outsb(hw->ap.port, dp, size);\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ap' - possible side-effects?
#139: FILE: drivers/isdn/hardware/mISDN/iohelper.h:56:
+#define IOFUNC_IND(name, hws, ap) \
+	static u8 Read##name##_IND(void *p, u8 off) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		return inb(hw->ap.port);\
+	} \
+	static void Write##name##_IND(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		outb(val, hw->ap.port);\
+	} \
+	static void ReadFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		insb(hw->ap.port, dp, size);\
+	} \
+	static void WriteFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		outsb(hw->ap.port, dp, size);\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ap' may be better as '(ap)' to avoid precedence issues
#139: FILE: drivers/isdn/hardware/mISDN/iohelper.h:56:
+#define IOFUNC_IND(name, hws, ap) \
+	static u8 Read##name##_IND(void *p, u8 off) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		return inb(hw->ap.port);\
+	} \
+	static void Write##name##_IND(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		outb(val, hw->ap.port);\
+	} \
+	static void ReadFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		insb(hw->ap.port, dp, size);\
+	} \
+	static void WriteFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		outb(off, hw->ap.ale);\
+		outsb(hw->ap.port, dp, size);\
+	}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#140: FILE: drivers/isdn/hardware/mISDN/iohelper.h:57:
+	static u8 Read##name##_IND(void *p, u8 off) {\

CHECK:CAMELCASE: Avoid CamelCase: <Read##name##_IND>
#140: FILE: drivers/isdn/hardware/mISDN/iohelper.h:57:
+	static u8 Read##name##_IND(void *p, u8 off) {\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#145: FILE: drivers/isdn/hardware/mISDN/iohelper.h:62:
+	static void Write##name##_IND(void *p, u8 off, u8 val) {\

CHECK:CAMELCASE: Avoid CamelCase: <Write##name##_IND>
#145: FILE: drivers/isdn/hardware/mISDN/iohelper.h:62:
+	static void Write##name##_IND(void *p, u8 off, u8 val) {\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#150: FILE: drivers/isdn/hardware/mISDN/iohelper.h:67:
+	static void ReadFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\

CHECK:CAMELCASE: Avoid CamelCase: <ReadFiFo##name##_IND>
#150: FILE: drivers/isdn/hardware/mISDN/iohelper.h:67:
+	static void ReadFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#155: FILE: drivers/isdn/hardware/mISDN/iohelper.h:72:
+	static void WriteFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\

CHECK:CAMELCASE: Avoid CamelCase: <WriteFiFo##name##_IND>
#155: FILE: drivers/isdn/hardware/mISDN/iohelper.h:72:
+	static void WriteFiFo##name##_IND(void *p, u8 off, u8 *dp, int size) {\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hws' - possible side-effects?
#161: FILE: drivers/isdn/hardware/mISDN/iohelper.h:78:
+#define IOFUNC_MEMIO(name, hws, typ, adr) \
+	static u8 Read##name##_MIO(void *p, u8 off) {\
+		struct hws *hw = p;\
+		return readb(((typ *)hw->adr) + off);\
+	} \
+	static void Write##name##_MIO(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		writeb(val, ((typ *)hw->adr) + off);\
+	} \
+	static void ReadFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		while (size--)\
+			*dp++ = readb(((typ *)hw->adr) + off);\
+	} \
+	static void WriteFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct inf_hw *hw = p;\
+		while (size--)\
+			writeb(*dp++, ((typ *)hw->adr) + off);\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'hws' may be better as '(hws)' to avoid precedence issues
#161: FILE: drivers/isdn/hardware/mISDN/iohelper.h:78:
+#define IOFUNC_MEMIO(name, hws, typ, adr) \
+	static u8 Read##name##_MIO(void *p, u8 off) {\
+		struct hws *hw = p;\
+		return readb(((typ *)hw->adr) + off);\
+	} \
+	static void Write##name##_MIO(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		writeb(val, ((typ *)hw->adr) + off);\
+	} \
+	static void ReadFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		while (size--)\
+			*dp++ = readb(((typ *)hw->adr) + off);\
+	} \
+	static void WriteFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct inf_hw *hw = p;\
+		while (size--)\
+			writeb(*dp++, ((typ *)hw->adr) + off);\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'typ' - possible side-effects?
#161: FILE: drivers/isdn/hardware/mISDN/iohelper.h:78:
+#define IOFUNC_MEMIO(name, hws, typ, adr) \
+	static u8 Read##name##_MIO(void *p, u8 off) {\
+		struct hws *hw = p;\
+		return readb(((typ *)hw->adr) + off);\
+	} \
+	static void Write##name##_MIO(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		writeb(val, ((typ *)hw->adr) + off);\
+	} \
+	static void ReadFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		while (size--)\
+			*dp++ = readb(((typ *)hw->adr) + off);\
+	} \
+	static void WriteFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct inf_hw *hw = p;\
+		while (size--)\
+			writeb(*dp++, ((typ *)hw->adr) + off);\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'typ' may be better as '(typ)' to avoid precedence issues
#161: FILE: drivers/isdn/hardware/mISDN/iohelper.h:78:
+#define IOFUNC_MEMIO(name, hws, typ, adr) \
+	static u8 Read##name##_MIO(void *p, u8 off) {\
+		struct hws *hw = p;\
+		return readb(((typ *)hw->adr) + off);\
+	} \
+	static void Write##name##_MIO(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		writeb(val, ((typ *)hw->adr) + off);\
+	} \
+	static void ReadFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		while (size--)\
+			*dp++ = readb(((typ *)hw->adr) + off);\
+	} \
+	static void WriteFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct inf_hw *hw = p;\
+		while (size--)\
+			writeb(*dp++, ((typ *)hw->adr) + off);\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'adr' - possible side-effects?
#161: FILE: drivers/isdn/hardware/mISDN/iohelper.h:78:
+#define IOFUNC_MEMIO(name, hws, typ, adr) \
+	static u8 Read##name##_MIO(void *p, u8 off) {\
+		struct hws *hw = p;\
+		return readb(((typ *)hw->adr) + off);\
+	} \
+	static void Write##name##_MIO(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		writeb(val, ((typ *)hw->adr) + off);\
+	} \
+	static void ReadFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		while (size--)\
+			*dp++ = readb(((typ *)hw->adr) + off);\
+	} \
+	static void WriteFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct inf_hw *hw = p;\
+		while (size--)\
+			writeb(*dp++, ((typ *)hw->adr) + off);\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'adr' may be better as '(adr)' to avoid precedence issues
#161: FILE: drivers/isdn/hardware/mISDN/iohelper.h:78:
+#define IOFUNC_MEMIO(name, hws, typ, adr) \
+	static u8 Read##name##_MIO(void *p, u8 off) {\
+		struct hws *hw = p;\
+		return readb(((typ *)hw->adr) + off);\
+	} \
+	static void Write##name##_MIO(void *p, u8 off, u8 val) {\
+		struct hws *hw = p;\
+		writeb(val, ((typ *)hw->adr) + off);\
+	} \
+	static void ReadFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct hws *hw = p;\
+		while (size--)\
+			*dp++ = readb(((typ *)hw->adr) + off);\
+	} \
+	static void WriteFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\
+		struct inf_hw *hw = p;\
+		while (size--)\
+			writeb(*dp++, ((typ *)hw->adr) + off);\
+	}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#162: FILE: drivers/isdn/hardware/mISDN/iohelper.h:79:
+	static u8 Read##name##_MIO(void *p, u8 off) {\

CHECK:CAMELCASE: Avoid CamelCase: <Read##name##_MIO>
#162: FILE: drivers/isdn/hardware/mISDN/iohelper.h:79:
+	static u8 Read##name##_MIO(void *p, u8 off) {\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#166: FILE: drivers/isdn/hardware/mISDN/iohelper.h:83:
+	static void Write##name##_MIO(void *p, u8 off, u8 val) {\

CHECK:CAMELCASE: Avoid CamelCase: <Write##name##_MIO>
#166: FILE: drivers/isdn/hardware/mISDN/iohelper.h:83:
+	static void Write##name##_MIO(void *p, u8 off, u8 val) {\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#170: FILE: drivers/isdn/hardware/mISDN/iohelper.h:87:
+	static void ReadFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\

CHECK:CAMELCASE: Avoid CamelCase: <ReadFiFo##name##_MIO>
#170: FILE: drivers/isdn/hardware/mISDN/iohelper.h:87:
+	static void ReadFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#175: FILE: drivers/isdn/hardware/mISDN/iohelper.h:92:
+	static void WriteFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\

CHECK:CAMELCASE: Avoid CamelCase: <WriteFiFo##name##_MIO>
#175: FILE: drivers/isdn/hardware/mISDN/iohelper.h:92:
+	static void WriteFiFo##name##_MIO(void *p, u8 off, u8 *dp, int size) {\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dest' - possible side-effects?
#181: FILE: drivers/isdn/hardware/mISDN/iohelper.h:98:
+#define ASSIGN_FUNC(typ, name, dest)	do {\
+	dest.read_reg = &Read##name##_##typ;\
+	dest.write_reg = &Write##name##_##typ;\
+	dest.read_fifo = &ReadFiFo##name##_##typ;\
+	dest.write_fifo = &WriteFiFo##name##_##typ;\
+	} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <Read##name##_##typ>
#182: FILE: drivers/isdn/hardware/mISDN/iohelper.h:99:
+	dest.read_reg = &Read##name##_##typ;\

CHECK:CAMELCASE: Avoid CamelCase: <Write##name##_##typ>
#183: FILE: drivers/isdn/hardware/mISDN/iohelper.h:100:
+	dest.write_reg = &Write##name##_##typ;\

CHECK:CAMELCASE: Avoid CamelCase: <ReadFiFo##name##_##typ>
#184: FILE: drivers/isdn/hardware/mISDN/iohelper.h:101:
+	dest.read_fifo = &ReadFiFo##name##_##typ;\

CHECK:CAMELCASE: Avoid CamelCase: <WriteFiFo##name##_##typ>
#185: FILE: drivers/isdn/hardware/mISDN/iohelper.h:102:
+	dest.write_fifo = &WriteFiFo##name##_##typ;\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'typ' - possible side-effects?
#187: FILE: drivers/isdn/hardware/mISDN/iohelper.h:104:
+#define ASSIGN_FUNC_IPAC(typ, target)	do {\
+	ASSIGN_FUNC(typ, ISAC, target.isac);\
+	ASSIGN_FUNC(typ, IPAC, target);\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'target' - possible side-effects?
#187: FILE: drivers/isdn/hardware/mISDN/iohelper.h:104:
+#define ASSIGN_FUNC_IPAC(typ, target)	do {\
+	ASSIGN_FUNC(typ, ISAC, target.isac);\
+	ASSIGN_FUNC(typ, IPAC, target);\
+	} while (0)

WARNING:MISSING_EOF_NEWLINE: adding a line without newline at end of file
#192: FILE: drivers/isdn/hardware/mISDN/iohelper.h:109:
+#endif

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#200: FILE: drivers/isdn/hardware/mISDN/ipac.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#219: FILE: drivers/isdn/hardware/mISDN/ipac.h:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#220: FILE: drivers/isdn/hardware/mISDN/ipac.h:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:TYPO_SPELLING: 'acccess' may be misspelled - perhaps 'access'?
#231: FILE: drivers/isdn/hardware/mISDN/ipac.h:32:
+	spinlock_t		*hwlock;	/* lock HW acccess */
 	          		        	           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#236: FILE: drivers/isdn/hardware/mISDN/ipac.h:37:
+	int			(*monitor)(void *, u32, u8 *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#236: FILE: drivers/isdn/hardware/mISDN/ipac.h:37:
+	int			(*monitor)(void *, u32, u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#236: FILE: drivers/isdn/hardware/mISDN/ipac.h:37:
+	int			(*monitor)(void *, u32, u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#236: FILE: drivers/isdn/hardware/mISDN/ipac.h:37:
+	int			(*monitor)(void *, u32, u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct isac_hw *' should also have an identifier name
#237: FILE: drivers/isdn/hardware/mISDN/ipac.h:38:
+	void			(*release)(struct isac_hw *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct isac_hw *' should also have an identifier name
#238: FILE: drivers/isdn/hardware/mISDN/ipac.h:39:
+	int			(*init)(struct isac_hw *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct isac_hw *' should also have an identifier name
#239: FILE: drivers/isdn/hardware/mISDN/ipac.h:40:
+	int			(*ctrl)(struct isac_hw *, u32, u_long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#239: FILE: drivers/isdn/hardware/mISDN/ipac.h:40:
+	int			(*ctrl)(struct isac_hw *, u32, u_long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_long' should also have an identifier name
#239: FILE: drivers/isdn/hardware/mISDN/ipac.h:40:
+	int			(*ctrl)(struct isac_hw *, u32, u_long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct isac_hw *' should also have an identifier name
#240: FILE: drivers/isdn/hardware/mISDN/ipac.h:41:
+	int			(*open)(struct isac_hw *, struct channel_req *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct channel_req *' should also have an identifier name
#240: FILE: drivers/isdn/hardware/mISDN/ipac.h:41:
+	int			(*open)(struct isac_hw *, struct channel_req *);

WARNING:TYPO_SPELLING: 'acccess' may be misspelled - perhaps 'access'?
#272: FILE: drivers/isdn/hardware/mISDN/ipac.h:73:
+	spinlock_t		*hwlock;	/* lock HW acccess */
 	          		        	           ^^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipac_hw *' should also have an identifier name
#279: FILE: drivers/isdn/hardware/mISDN/ipac.h:80:
+	void			(*release)(struct ipac_hw *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipac_hw *' should also have an identifier name
#280: FILE: drivers/isdn/hardware/mISDN/ipac.h:81:
+	int			(*init)(struct ipac_hw *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipac_hw *' should also have an identifier name
#281: FILE: drivers/isdn/hardware/mISDN/ipac.h:82:
+	int			(*ctrl)(struct ipac_hw *, u32, u_long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#281: FILE: drivers/isdn/hardware/mISDN/ipac.h:82:
+	int			(*ctrl)(struct ipac_hw *, u32, u_long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u_long' should also have an identifier name
#281: FILE: drivers/isdn/hardware/mISDN/ipac.h:82:
+	int			(*ctrl)(struct ipac_hw *, u32, u_long);

WARNING:TYPO_SPELLING: 'Contol' may be misspelled - perhaps 'Control'?
#491: FILE: drivers/isdn/hardware/mISDN/ipac.h:292:
+/* IOM: Contol, Sync transfer, Monitor    */
         ^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <mISDNisac_init>
#601: FILE: drivers/isdn/hardware/mISDN/ipac.h:402:
+extern int mISDNisac_init(struct isac_hw *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#601: FILE: drivers/isdn/hardware/mISDN/ipac.h:402:
+extern int mISDNisac_init(struct isac_hw *, void *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct isac_hw *' should also have an identifier name
#601: FILE: drivers/isdn/hardware/mISDN/ipac.h:402:
+extern int mISDNisac_init(struct isac_hw *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#601: FILE: drivers/isdn/hardware/mISDN/ipac.h:402:
+extern int mISDNisac_init(struct isac_hw *, void *);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNisac_irq>
#602: FILE: drivers/isdn/hardware/mISDN/ipac.h:403:
+extern irqreturn_t mISDNisac_irq(struct isac_hw *, u8);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#602: FILE: drivers/isdn/hardware/mISDN/ipac.h:403:
+extern irqreturn_t mISDNisac_irq(struct isac_hw *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct isac_hw *' should also have an identifier name
#602: FILE: drivers/isdn/hardware/mISDN/ipac.h:403:
+extern irqreturn_t mISDNisac_irq(struct isac_hw *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#602: FILE: drivers/isdn/hardware/mISDN/ipac.h:403:
+extern irqreturn_t mISDNisac_irq(struct isac_hw *, u8);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNipac_init>
#603: FILE: drivers/isdn/hardware/mISDN/ipac.h:404:
+extern u32 mISDNipac_init(struct ipac_hw *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#603: FILE: drivers/isdn/hardware/mISDN/ipac.h:404:
+extern u32 mISDNipac_init(struct ipac_hw *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipac_hw *' should also have an identifier name
#603: FILE: drivers/isdn/hardware/mISDN/ipac.h:404:
+extern u32 mISDNipac_init(struct ipac_hw *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#603: FILE: drivers/isdn/hardware/mISDN/ipac.h:404:
+extern u32 mISDNipac_init(struct ipac_hw *, void *);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNipac_irq>
#604: FILE: drivers/isdn/hardware/mISDN/ipac.h:405:
+extern irqreturn_t mISDNipac_irq(struct ipac_hw *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#604: FILE: drivers/isdn/hardware/mISDN/ipac.h:405:
+extern irqreturn_t mISDNipac_irq(struct ipac_hw *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipac_hw *' should also have an identifier name
#604: FILE: drivers/isdn/hardware/mISDN/ipac.h:405:
+extern irqreturn_t mISDNipac_irq(struct ipac_hw *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#604: FILE: drivers/isdn/hardware/mISDN/ipac.h:405:
+extern irqreturn_t mISDNipac_irq(struct ipac_hw *, int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#611: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#646: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:36:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#647: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:37:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#731: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:121:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#736: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:126:
+static struct pci_device_id infineon_ids[] __devinitdata = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#832: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:222:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#853: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:243:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <Cards>
#854: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:244:
+static LIST_HEAD(Cards);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#884: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:274:
+module_param_call(debug, set_debug, param_get_uint, &debug, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#886: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:276:
+module_param(irqloops, uint, S_IRUGO | S_IWUSR);

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1043: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:433:
+		val |= NICCY_IRQ_ENABLE;;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1053: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:443:
+		outb(GAZEL_ISAC_EN + GAZEL_HSCX_EN + GAZEL_PCI_EN,
+			(u32)hw->cfg.start + GAZEL_INCSR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1057: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:447:
+		outb(GAZEL_IPAC_EN + GAZEL_PCI_EN,
+			(u32)hw->cfg.start + GAZEL_INCSR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1133: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:523:
+		outb(DIVA_RESET_BIT | DIVA_LED_A,
+			(u32)hw->cfg.start + DIVA_PCI_CTRL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1137: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:527:
+		writel(PITA_PARA_SOFTRESET | PITA_PARA_MPX_MODE,
+			hw->cfg.p + PITA_MISC_REG);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1144: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:534:
+		writel(PITA_PARA_SOFTRESET | PITA_PARA_MPX_MODE,
+			hw->cfg.p + PITA_MISC_REG);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1147: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:537:
+		writel(PITA_PARA_MPX_MODE | PITA_SER_SOFTRESET,
+			hw->cfg.p + PITA_MISC_REG);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1225: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:615:
+static int __devinit

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1252: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:642:
+			pr_notice("%s: IRQ %d count %d\n", hw->name,
+				hw->irq, hw->irqcnt);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1253: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:643:
+		if (!hw->irqcnt) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1256: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:646:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1267: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:657:
+		if (hw->cfg.p) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1270: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:660:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1275: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:665:
+		if (hw->addr.p) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1278: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:668:
+		} else

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1284: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:674:
+static int __devinit

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1294: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:684:
+			if (!request_mem_region(hw->cfg.start, hw->cfg.size,
+			    hw->name))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1298: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:688:
+			if (!request_region(hw->cfg.start, hw->cfg.size,
+			    hw->name))

WARNING:SPLIT_STRING: quoted string split across lines
#1303: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:693:
+			pr_info("mISDN: %s config port %lx (%lu bytes)"
+				"already in use\n", hw->name,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1312: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:702:
+			pr_notice("%s: IO cfg %lx (%lu bytes) mode%d\n",
+				hw->name, (ulong)hw->cfg.start,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1315: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:705:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1321: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:711:
+			if (!request_mem_region(hw->addr.start, hw->addr.size,
+			    hw->name))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1325: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:715:
+			if (!request_region(hw->addr.start, hw->addr.size,
+			    hw->name))

WARNING:SPLIT_STRING: quoted string split across lines
#1330: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:720:
+			pr_info("mISDN: %s address port %lx (%lu bytes)"
+				"already in use\n", hw->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1339: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:729:
+			pr_notice("%s: IO addr %lx (%lu bytes) mode%d\n",
+				hw->name, (ulong)hw->addr.start,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1342: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:732:
+
+	}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1483: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:873:
+static void
+release_card(struct inf_hw *card) {

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_unregister_device>
#1493: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:883:
+	mISDN_unregister_device(&card->ipac.isac.dch.dev);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1518: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:908:
+static int __devinit

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1525: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:915:
+	snprintf(card->name, MISDN_MAX_IDLEN - 1, "%s.%d", card->ci->name,
+		inf_cnt + 1);

CHECK:CAMELCASE: Avoid CamelCase: <Bprotocols>
#1543: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:933:
+	card->ipac.isac.dch.dev.Bprotocols =

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1547: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:937:
+		goto error_setup;;

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_register_device>
#1549: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:939:
+	err = mISDN_register_device(&card->ipac.isac.dch.dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1550: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:940:
+	err = mISDN_register_device(&card->ipac.isac.dch.dev,
+		&card->pdev->dev, card->name);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1682: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1072:
+static const struct inf_cinfo * __devinit

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1695: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1085:
+static int __devinit

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*card)...) over kzalloc(sizeof(struct inf_hw)...)
#1701: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1091:
+	card = kzalloc(sizeof(struct inf_hw), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1703: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1093:
+	if (!card) {
+		pr_info("No memory for Infineon ISDN card\n");

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#1714: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1104:
+		pr_info("mISDN: do not have informations about adapter at %s\n",
 		                            ^^^^^^^^^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1718: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1108:
+		return -EINVAL;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#1718: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1108:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1720: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1110:
+		pr_notice("mISDN: found adapter %s at %s\n",
+			card->ci->full, pci_name(pdev));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sc)...) over kzalloc(sizeof(struct inf_hw)...)
#1734: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1124:
+			sc = kzalloc(sizeof(struct inf_hw), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1743: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1133:
+			if (err) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1746: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1136:
+			} else

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1753: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1143:
+static void __devexit

WARNING:TYPO_SPELLING: 'allready' may be misspelled - perhaps 'already'?
#1761: FILE: drivers/isdn/hardware/mISDN/mISDNinfineon.c:1151:
+		pr_debug("%s: drvdata allready removed\n", __func__);
 		                      ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1795: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1812: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1813: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:19:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1821: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:27:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <ReadISAC>
#1831: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:37:
+#define ReadISAC(is, o)		(is->read_reg(is->dch.hw, o + is->off))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'is' - possible side-effects?
#1831: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:37:
+#define ReadISAC(is, o)		(is->read_reg(is->dch.hw, o + is->off))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'is' may be better as '(is)' to avoid precedence issues
#1831: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:37:
+#define ReadISAC(is, o)		(is->read_reg(is->dch.hw, o + is->off))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'o' may be better as '(o)' to avoid precedence issues
#1831: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:37:
+#define ReadISAC(is, o)		(is->read_reg(is->dch.hw, o + is->off))

CHECK:CAMELCASE: Avoid CamelCase: <WriteISAC>
#1832: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:38:
+#define	WriteISAC(is, o, v)	(is->write_reg(is->dch.hw, o + is->off, v))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'is' - possible side-effects?
#1832: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:38:
+#define	WriteISAC(is, o, v)	(is->write_reg(is->dch.hw, o + is->off, v))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'is' may be better as '(is)' to avoid precedence issues
#1832: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:38:
+#define	WriteISAC(is, o, v)	(is->write_reg(is->dch.hw, o + is->off, v))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'o' may be better as '(o)' to avoid precedence issues
#1832: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:38:
+#define	WriteISAC(is, o, v)	(is->write_reg(is->dch.hw, o + is->off, v))

CHECK:CAMELCASE: Avoid CamelCase: <ReadHSCX>
#1833: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:39:
+#define ReadHSCX(h, o)		(h->ip->read_reg(h->ip->hw, h->off + o))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#1833: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:39:
+#define ReadHSCX(h, o)		(h->ip->read_reg(h->ip->hw, h->off + o))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'h' may be better as '(h)' to avoid precedence issues
#1833: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:39:
+#define ReadHSCX(h, o)		(h->ip->read_reg(h->ip->hw, h->off + o))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'o' may be better as '(o)' to avoid precedence issues
#1833: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:39:
+#define ReadHSCX(h, o)		(h->ip->read_reg(h->ip->hw, h->off + o))

CHECK:CAMELCASE: Avoid CamelCase: <WriteHSCX>
#1834: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:40:
+#define WriteHSCX(h, o, v)	(h->ip->write_reg(h->ip->hw, h->off + o, v))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#1834: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:40:
+#define WriteHSCX(h, o, v)	(h->ip->write_reg(h->ip->hw, h->off + o, v))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'h' may be better as '(h)' to avoid precedence issues
#1834: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:40:
+#define WriteHSCX(h, o, v)	(h->ip->write_reg(h->ip->hw, h->off + o, v))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'o' may be better as '(o)' to avoid precedence issues
#1834: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:40:
+#define WriteHSCX(h, o, v)	(h->ip->write_reg(h->ip->hw, h->off + o, v))

CHECK:CAMELCASE: Avoid CamelCase: <ReadIPAC>
#1835: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:41:
+#define ReadIPAC(ip, o)		(ip->read_reg(ip->hw, o))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#1835: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:41:
+#define ReadIPAC(ip, o)		(ip->read_reg(ip->hw, o))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ip' may be better as '(ip)' to avoid precedence issues
#1835: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:41:
+#define ReadIPAC(ip, o)		(ip->read_reg(ip->hw, o))

CHECK:CAMELCASE: Avoid CamelCase: <WriteIPAC>
#1836: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:42:
+#define WriteIPAC(ip, o, v)	(ip->write_reg(ip->hw, o, v))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#1836: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:42:
+#define WriteIPAC(ip, o, v)	(ip->write_reg(ip->hw, o, v))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ip' may be better as '(ip)' to avoid precedence issues
#1836: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:42:
+#define WriteIPAC(ip, o, v)	(ip->write_reg(ip->hw, o, v))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ph_command', this function's name, in a string
#1841: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:47:
+	pr_debug("%s: ph_command %x\n", isac->name, command);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#1904: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:110:
+	pr_debug("%s: TE newstate %x\n", isac->name, dch->state);
 	              ^^

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1917: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:123:
+		if (!isac->dch.rx_skb) {
+			pr_info("%s: D receive out of memory\n", isac->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1924: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:130:
+		pr_debug("%s: %s overrun %d\n", isac->name, __func__,
+			    isac->dch.rx_skb->len + count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1935: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:141:
+		snprintf(pfx, MISDN_MAX_IDLEN + 15, "D-recv %s %d ",
+			isac->name, count);

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#1962: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:168:
+	if (test_and_set_bit(FLG_BUSY_TIMER, &isac->dch.Flags)) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1967: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:173:
+	isac->dch.timer.expires = jiffies + ((DBUSY_TIMER_VALUE * HZ)/1000);
 	                                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1973: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:179:
+		snprintf(pfx, MISDN_MAX_IDLEN + 15, "D-send %s %d ",
+			isac->name, count);

CHECK:CAMELCASE: Avoid CamelCase: <recv_Dchannel>
#2006: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:212:
+		recv_Dchannel(&isac->dch);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2058: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:264:
+			if (!isac->mon_rx) {
[...]
+			} else
[...]

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2059: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:265:
+			if (!isac->mon_rx) {
+				pr_info("%s: ISAC MON RX out of memory!\n",

CHECK:CAMELCASE: Avoid CamelCase: <afterMONR0>
#2064: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:270:
+				goto afterMONR0;

CHECK:BRACES: Unbalanced braces around else statement
#2065: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:271:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2078: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:284:
+		pr_debug("%s: ISAC MOR0 %02x\n", isac->name,
+			isac->mon_rx[isac->mon_rxp - 1]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2088: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:294:
+			if (!isac->mon_rx) {
[...]
+			} else
[...]

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2089: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:295:
+			if (!isac->mon_rx) {
+				pr_info("%s: ISAC MON RX out of memory!\n",

CHECK:CAMELCASE: Avoid CamelCase: <afterMONR1>
#2094: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:300:
+				goto afterMONR1;

CHECK:BRACES: Unbalanced braces around else statement
#2095: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:301:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2108: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:314:
+		pr_debug("%s: ISAC MOR1 %02x\n", isac->name,
+			isac->mon_rx[isac->mon_rxp - 1]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!isac->mon_tx'
#2150: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:356:
+		if ((!isac->mon_tx) || (isac->mon_txc &&
+			(isac->mon_txp >= isac->mon_txc) && !(val & 0x08))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'isac->mon_txp >= isac->mon_txc'
#2150: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:356:
+		if ((!isac->mon_tx) || (isac->mon_txc &&
+			(isac->mon_txp >= isac->mon_txc) && !(val & 0x08))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2151: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:357:
+		if ((!isac->mon_tx) || (isac->mon_txc &&
+			(isac->mon_txp >= isac->mon_txc) && !(val & 0x08))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'isac->mon_txp >= isac->mon_txc'
#2156: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:362:
+			if (isac->mon_txc && (isac->mon_txp >= isac->mon_txc)) {

CHECK:CAMELCASE: Avoid CamelCase: <AfterMOX0>
#2165: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:371:
+			goto AfterMOX0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'isac->mon_txp >= isac->mon_txc'
#2167: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:373:
+		if (isac->mon_txc && (isac->mon_txp >= isac->mon_txc)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2179: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:385:
+		pr_debug("%s: ISAC %02x -> MOX0\n", isac->name,
+			isac->mon_tx[isac->mon_txp - 1]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!isac->mon_tx'
#2183: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:389:
+		if ((!isac->mon_tx) || (isac->mon_txc &&
+			(isac->mon_txp >= isac->mon_txc) && !(val & 0x80))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'isac->mon_txp >= isac->mon_txc'
#2183: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:389:
+		if ((!isac->mon_tx) || (isac->mon_txc &&
+			(isac->mon_txp >= isac->mon_txc) && !(val & 0x80))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2184: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:390:
+		if ((!isac->mon_tx) || (isac->mon_txc &&
+			(isac->mon_txp >= isac->mon_txc) && !(val & 0x80))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'isac->mon_txp >= isac->mon_txc'
#2189: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:395:
+			if (isac->mon_txc && (isac->mon_txp >= isac->mon_txc)) {

CHECK:CAMELCASE: Avoid CamelCase: <AfterMOX1>
#2198: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:404:
+			goto AfterMOX1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'isac->mon_txp >= isac->mon_txc'
#2200: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:406:
+		if (isac->mon_txc && (isac->mon_txp >= isac->mon_txc)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2212: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:418:
+		pr_debug("%s: ISAC %02x -> MOX1\n", isac->name,
+			isac->mon_tx[isac->mon_txp - 1]);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2219: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:425:
+static void
+isac_cisq_irq(struct isac_hw *isac) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2227: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:433:
+		pr_debug("%s: ph_state change %x->%x\n", isac->name,
+			isac->state, (val >> 2) & 0xf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2246: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:452:
+		pr_debug("%s: ph_state change %x->%x\n", isac->name,
+			isac->state, val >> 4);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2283: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:489:
+			pr_debug("%s: dchannel received %d\n", isac->name,
+				isac->dch.rx_skb->len);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNchannel>
#2360: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:566:
+isac_l1hw(struct mISDNchannel *ch, struct sk_buff *skb)

CHECK:CAMELCASE: Avoid CamelCase: <mISDNdevice>
#2362: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:568:
+	struct mISDNdevice	*dev = container_of(ch, struct mISDNdevice, D);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNhead>
#2366: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:572:
+	struct mISDNhead	*hh = mISDN_HEAD_P(skb);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_HEAD_P>
#2366: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:572:
+	struct mISDNhead	*hh = mISDN_HEAD_P(skb);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2374: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:580:
+		if (ret > 0) { /* direct TX */
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2380: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:586:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2423: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:629:
+		pr_debug("%s: %s unknown command %x %lx\n", isac->name,
+			__func__, cmd, para);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'isac->state == ISAC_IND_EI'
#2449: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:655:
+		if ((isac->state == ISAC_IND_EI) ||
+		    (isac->state == ISAC_IND_DR) ||
+		    (isac->state == ISAC_IND_RS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'isac->state == ISAC_IND_DR'
#2449: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:655:
+		if ((isac->state == ISAC_IND_EI) ||
+		    (isac->state == ISAC_IND_DR) ||
+		    (isac->state == ISAC_IND_RS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'isac->state == ISAC_IND_RS'
#2449: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:655:
+		if ((isac->state == ISAC_IND_EI) ||
+		    (isac->state == ISAC_IND_DR) ||
+		    (isac->state == ISAC_IND_RS))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2480: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:686:
+		_queue_data(&dch->dev.D, cmd, MISDN_ID_ANY, 0, NULL,
+			GFP_ATOMIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2485: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:691:
+		_queue_data(&dch->dev.D, cmd, MISDN_ID_ANY, 0, NULL,
+			GFP_ATOMIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2489: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:695:
+		pr_debug("%s: %s unknown command %x\n", isac->name,
+			__func__, cmd);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "isac->dch.timer.function"
#2502: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:708:
+	if (isac->dch.timer.function != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_freedchannel>
#2512: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:718:
+	mISDN_freedchannel(&isac->dch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2526: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:732:
+		pr_debug("%s: D-Channel Busy RBCH %02x STAR %02x\n",
+			isac->name, rbch, star);

CHECK:BRACES: Unbalanced braces around else statement
#2529: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:735:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2548: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:754:
+	pr_debug("%s: %s dev(%d) open from %p\n", isac->name, __func__,
+		isac->dch.dev.id, __builtin_return_address(1));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2558: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:764:
+		_queue_data(rq->ch, PH_ACTIVATE_IND, MISDN_ID_ANY,
+		    0, NULL, GFP_KERNEL);

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#2562: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:768:
+static const char *ISACVer[] =

CHECK:CAMELCASE: Avoid CamelCase: <ISACVer>
#2562: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:768:
+static const char *ISACVer[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2563: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:769:
+static const char *ISACVer[] =
+{"2086/2186 V1.1", "2085 B1", "2085 B2",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2564: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:770:
+ "2085 V2.3"};$

CHECK:SPACING: No space is necessary after a cast
#2579: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:785:
+	isac->dch.timer.function = (void *) dbusy_timer_handler;

WARNING:TYPO_SPELLING: 'STARD' may be misspelled - perhaps 'START'?
#2587: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:793:
+		pr_debug("%s: ISACX STARD %x\n", isac->name, val);
 		                    ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2602: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:808:
+			pr_notice("%s: ISACX Design ID %x\n",
+				isac->name, val & 0x3f);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2627: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:833:
+			pr_notice("%s: ISAC version (%x): %s\n", isac->name,
+				val, ISACVer[(val >> 5) & 3]);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_initdchannel>
#2657: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:863:
+	mISDN_initdchannel(&isac->dch, MAX_DFRAME_LEN_L1, isac_ph_state_bh);

CHECK:CAMELCASE: Avoid CamelCase: <Dprotocols>
#2664: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:870:
+	isac->dch.dev.Dprotocols = (1 << ISDN_P_TE_S0);

CHECK:CAMELCASE: Avoid CamelCase: <waitforCEC>
#2671: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:877:
+waitforCEC(struct hscx_hw *hx)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2684: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:890:
+		pr_debug("%s: B%1d CEC %d us\n", hx->ip->name, hx->bch.nr,
+			50 - to);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2689: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:895:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <waitforXFW>
#2691: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:897:
+waitforXFW(struct hscx_hw *hx)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2704: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:910:
+		pr_debug("%s: B%1d XFW %d us\n", hx->ip->name, hx->bch.nr,
+			50 - to);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2712: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:918:
+	if (hx->ip->type & IPAC_TYPE_IPACX)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2714: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:920:
+	else {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2729: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:935:
+		if (!hscx->bch.rx_skb) {
+			pr_info("%s: B receive out of memory\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2737: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:943:
+		pr_debug("%s: overrun %d\n", hscx->ip->name,
+			hscx->bch.rx_skb->len + count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2755: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:961:
+		snprintf(hscx->log, 64, "B%1d-recv %s %d ",
+			hscx->bch.nr, hscx->ip->name, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2779: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:985:
+	pr_debug("%s: B%1d %d/%d/%d\n", hscx->ip->name, hscx->bch.nr, count,
+		hscx->bch.tx_idx, hscx->bch.tx_skb->len);

CHECK:BRACES: Unbalanced braces around else statement
#2785: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:991:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2794: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1000:
+		snprintf(hscx->log, 64, "B%1d-send %s %d ",
+			hscx->bch.nr, hscx->ip->name, count);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2802: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1008:
+	if (hx->bch.tx_skb && hx->bch.tx_idx < hx->bch.tx_skb->len)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2804: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1010:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <confirm_Bsend>
#2808: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1014:
+				confirm_Bsend(&hx->bch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2832: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1038:
+				pr_notice("%s: B%1d invalid frame\n",
+					hx->ip->name, hx->bch.nr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2837: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1043:
+				pr_notice("%s: B%1d RDO proto=%x\n",
+					hx->ip->name, hx->bch.nr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2843: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1049:
+				pr_notice("%s: B%1d CRC error\n",
+					hx->ip->name, hx->bch.nr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2860: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1066:
+		pr_debug("%s: B%1d frame to short %d\n",
+			hx->ip->name, hx->bch.nr, hx->bch.rx_skb->len);

CHECK:CAMELCASE: Avoid CamelCase: <recv_Bchannel>
#2864: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1070:
+		recv_Bchannel(&hx->bch, 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2873: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1079:
+	if (hx->ip->type & IPAC_TYPE_IPACX)
[...]
+	else if (hx->ip->type & IPAC_TYPE_IPAC) {
[...]
+	} else if (hx->bch.nr & 2) { /* HSCX B */
[...]
+	} else { /* HSCX A */
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2881: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1087:
+			pr_debug("%s: B%1d EXIRB %02x\n", hx->ip->name,
+				hx->bch.nr, exirb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2889: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1095:
+			pr_debug("%s: B%1d EXIRB %02x\n", hx->ip->name,
+				hx->bch.nr, exirb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2897: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1103:
+			pr_debug("%s: B%1d EXIRB %02x\n", hx->ip->name,
+				hx->bch.nr, exirb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2936: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1142:
+		pr_debug("%s: B%1d XDU error at len %d\n", hx->ip->name,
+			hx->bch.nr, hx->bch.tx_idx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2999: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1205:
+		pr_debug("%s: %d irqloops cpu%d\n", ipac->name,
+			maxloop - cnt, smp_processor_id());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3002: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1208:
+		pr_notice("%s: %d IRQ LOOP cpu%d\n", ipac->name,
+			maxloop, smp_processor_id());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3011: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1217:
+	pr_debug("%s: HSCX %c protocol %x-->%x ch %d\n", hscx->ip->name,
+		'@' + hscx->bch.nr, hscx->bch.state, bprotocol, hscx->bch.nr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3012: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1218:
+	if (hscx->ip->type & IPAC_TYPE_IPACX) {
[...]
+	} else if (hscx->ip->type & IPAC_TYPE_IPAC) { /* IPAC */
[...]
+	} else if (hscx->ip->type & IPAC_TYPE_HSCX) { /* HSCX */
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3120: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1326:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#3140: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1346:
+		if (ret > 0) { /* direct TX */
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3147: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1353:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3159: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1365:
+			_queue_data(ch, PH_ACTIVATE_IND, MISDN_ID_ANY, 0,
+				NULL, GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_clear_bchannel>
#3163: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1369:
+		mISDN_clear_bchannel(bch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3167: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1373:
+		_queue_data(ch, PH_DEACTIVATE_IND, MISDN_ID_ANY, 0,
+			NULL, GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_ctrl_req>
#3181: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1387:
+channel_bctrl(struct bchannel *bch, struct mISDN_ctrl_req *cq)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_freebchannel>
#3213: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1419:
+			mISDN_freebchannel(bch);

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#3241: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1447:
+static const char *HSCXVer[] =

CHECK:CAMELCASE: Avoid CamelCase: <HSCXVer>
#3241: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1447:
+static const char *HSCXVer[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#3242: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1448:
+static const char *HSCXVer[] =
+{"A1", "?1", "A2", "?3", "A3", "V2.1", "?6", "?7",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3243: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1449:
+ "?8", "?9", "?10", "?11", "?12", "?13", "?14", "???"};$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3245: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1451:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#3256: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1462:
+	if (hx->ip->type & IPAC_TYPE_HSCX) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3262: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1468:
+			pr_notice("%s: HSCX version %s\n", hx->ip->name,
+				HSCXVer[val & 0x0f]);

CHECK:BRACES: Unbalanced braces around else statement
#3263: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1469:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3286: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1492:
+		pr_debug("%s: IPAC CONF %02x/%02x\n", ipac->name,
+			val, ipac->conf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3364: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1570:
+		pr_debug("%s: dev(%d) close from %p\n", ipac->name,
+			dch->dev.id, __builtin_return_address(0));

CHECK:BRACES: braces {} should be used on all arms of this statement
#3386: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1592:
+	if (ipac->type & IPAC_TYPE_HSCX) {
[...]
+	} else if (ipac->type & IPAC_TYPE_IPAC) {
[...]
+	} else if (ipac->type & IPAC_TYPE_IPACX) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3404: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1610:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3415: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1621:
+		list_add(&ipac->hscx[i].bch.ch.list,
+			&ipac->isac.dch.dev.bchannels);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_initbchannel>
#3416: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1622:
+		mISDN_initbchannel(&ipac->hscx[i].bch, MAX_DATA_MEM);

WARNING:TYPO_SPELLING: 'overwriten' may be misspelled - perhaps 'overwritten'?
#3423: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1629:
+		 * can be overwriten by card */
 		          ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3423: FILE: drivers/isdn/hardware/mISDN/mISDNipac.c:1629:
+		 * can be overwriten by card */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092601.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 63 warnings, 204 checks, 3370 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092601.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
