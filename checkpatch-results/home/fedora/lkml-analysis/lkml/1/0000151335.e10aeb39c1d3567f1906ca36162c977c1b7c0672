CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: fs/exofs/exofs.h:134:
+int exofs_write_begin(struct file *file, struct address_space *mapping,
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#61: FILE: fs/exofs/exofs.h:134:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#61: FILE: fs/exofs/exofs.h:134:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#96: FILE: fs/exofs/inode.c:50:
+	unsigned expected_pages;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#99: FILE: fs/exofs/inode.c:53:
+	unsigned nr_pages;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#104: FILE: fs/exofs/inode.c:58:
+static void _pcol_init(struct page_collect *pcol, unsigned expected_pages,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: fs/exofs/inode.c:59:
+static void _pcol_init(struct page_collect *pcol, unsigned expected_pages,
+		struct inode *inode)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '_pcol_init', this function's name, in a string
#120: FILE: fs/exofs/inode.c:74:
+	EXOFS_DBGMSG("_pcol_init ino=0x%lx expected_pages=%u\n", inode->i_ino,

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '_pcol_reset', this function's name, in a string
#132: FILE: fs/exofs/inode.c:86:
+	EXOFS_DBGMSG("_pcol_reset ino=0x%lx expected_pages=%u\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#144: FILE: fs/exofs/inode.c:98:
+	int pages = min_t(unsigned, pcol->expected_pages, BIO_MAX_PAGES);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#164: FILE: fs/exofs/inode.c:118:
+			 unsigned len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: fs/exofs/inode.c:121:
+	int added_len = bio_add_pc_page(pcol->req_q, pcol->bio, page, len, 0);
+	if (unlikely(len != added_len))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#187: FILE: fs/exofs/inode.c:141:
+		 * locked */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: Unbalanced braces around else statement
#194: FILE: fs/exofs/inode.c:148:
+	} else /* Error */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#231: FILE: fs/exofs/inode.c:185:
+	EXOFS_DBGMSG("readpages_done(%ld) good_bytes=%llx"
+		     " length=%zx nr_pages=%u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'length < good_bytes'
#242: FILE: fs/exofs/inode.c:196:
+		if ((length < good_bytes) || (i == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 0'
#242: FILE: fs/exofs/inode.c:196:
+		if ((length < good_bytes) || (i == 0)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#250: FILE: fs/exofs/inode.c:204:
+			BUG_ON(!do_unlock);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: fs/exofs/inode.c:210:
+			EXOFS_ERR("    readpages_done(%ld, %ld) bad_bytes\n",
+				     inode->i_ino, page->index);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_exec', this function's name, in a string
#337: FILE: fs/exofs/inode.c:291:
+	EXOFS_DBGMSG("read_exec obj=%llx start=%llx length=%zx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: fs/exofs/inode.c:292:
+	EXOFS_DBGMSG("read_exec obj=%llx start=%llx length=%zx\n",
+		  obj.id, _LLU(i_start), pcol->length);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'readpage_strip', this function's name, in a string
#386: FILE: fs/exofs/inode.c:340:
+		EXOFS_DBGMSG("readpage_strip(%ld, %ld) empty page, splitting\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'readpage_strip', this function's name, in a string
#414: FILE: fs/exofs/inode.c:368:
+	EXOFS_DBGMSG("    readpage_strip(%ld, %ld) len=%zx\n", inode->i_ino,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: fs/exofs/inode.c:369:
+	EXOFS_DBGMSG("    readpage_strip(%ld, %ld) len=%zx\n", inode->i_ino,
+		  page->index, len);

WARNING:SPLIT_STRING: quoted string split across lines
#420: FILE: fs/exofs/inode.c:374:
+		EXOFS_DBGMSG("Failed pcol_add_page pages[i]=%p "
+			  "len=%zx nr_pages=%u length=%zx\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#440: FILE: fs/exofs/inode.c:394:
+			   struct list_head *pages, unsigned nr_pages)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '_readpage', this function's name, in a string
#469: FILE: fs/exofs/inode.c:423:
+		EXOFS_ERR("_readpage => %d\n", ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'writepages_done', this function's name, in a string
#507: FILE: fs/exofs/inode.c:461:
+	EXOFS_DBGMSG("writepages_done(%lx) good_bytes=%llx"

WARNING:SPLIT_STRING: quoted string split across lines
#508: FILE: fs/exofs/inode.c:462:
+	EXOFS_DBGMSG("writepages_done(%lx) good_bytes=%llx"
+		     " length=%zx nr_pages=%u\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'length < good_bytes'
#519: FILE: fs/exofs/inode.c:473:
+		if ((length < good_bytes) || (i == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 0'
#519: FILE: fs/exofs/inode.c:473:
+		if ((length < good_bytes) || (i == 0)) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'writepages_done', this function's name, in a string
#522: FILE: fs/exofs/inode.c:476:
+			EXOFS_DBGMSG("    writepages_done(%lx, %lx)"

WARNING:SPLIT_STRING: quoted string split across lines
#523: FILE: fs/exofs/inode.c:477:
+			EXOFS_DBGMSG("    writepages_done(%lx, %lx)"
+				     " good_bytes ret=%x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'writepages_done', this function's name, in a string
#529: FILE: fs/exofs/inode.c:483:
+			EXOFS_ERR("    writepages_done(%lx, %lx) bad_bytes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: fs/exofs/inode.c:484:
+			EXOFS_ERR("    writepages_done(%lx, %lx) bad_bytes\n",
+				     inode->i_ino, page->index);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'writepages_done', this function's name, in a string
#540: FILE: fs/exofs/inode.c:494:
+	EXOFS_DBGMSG("writepages_done END\n");

WARNING:TYPO_SPELLING: 'Faild' may be misspelled - perhaps 'Failed'?
#558: FILE: fs/exofs/inode.c:512:
+		EXOFS_ERR("write_exec: Faild to osd_start_request()\n");
 		                       ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_exec', this function's name, in a string
#558: FILE: fs/exofs/inode.c:512:
+		EXOFS_ERR("write_exec: Faild to osd_start_request()\n");

WARNING:TYPO_SPELLING: 'Faild' may be misspelled - perhaps 'Failed'?
#565: FILE: fs/exofs/inode.c:519:
+		EXOFS_ERR("write_exec: Faild to kmalloc(pcol)\n");
 		                       ^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_exec', this function's name, in a string
#565: FILE: fs/exofs/inode.c:519:
+		EXOFS_ERR("write_exec: Faild to kmalloc(pcol)\n");

WARNING:TYPO_SPELLING: 'Faild' may be misspelled - perhaps 'Failed'?
#575: FILE: fs/exofs/inode.c:529:
+		EXOFS_ERR("write_exec: exofs_async_op() Faild\n");
 		                                        ^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_exec', this function's name, in a string
#575: FILE: fs/exofs/inode.c:529:
+		EXOFS_ERR("write_exec: exofs_async_op() Faild\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_exec', this function's name, in a string
#580: FILE: fs/exofs/inode.c:534:
+	EXOFS_DBGMSG("write_exec(%lx, %lx) start=%llx length=%zx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: fs/exofs/inode.c:535:
+	EXOFS_DBGMSG("write_exec(%lx, %lx) start=%llx length=%zx\n",
+		  pcol->inode->i_ino, pcol->pg_first, _LLU(i_start),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#606: FILE: fs/exofs/inode.c:560:
+	BUG_ON(!PageLocked(page));

CHECK:BRACES: Unbalanced braces around else statement
#615: FILE: fs/exofs/inode.c:569:
+	else {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'writepage_strip', this function's name, in a string
#651: FILE: fs/exofs/inode.c:605:
+	EXOFS_DBGMSG("    writepage_strip(%lx, %lx) len=%zx\n", inode->i_ino,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: fs/exofs/inode.c:606:
+	EXOFS_DBGMSG("    writepage_strip(%lx, %lx) len=%zx\n", inode->i_ino,
+		  page->index, len);

WARNING:SPLIT_STRING: quoted string split across lines
#657: FILE: fs/exofs/inode.c:611:
+		EXOFS_DBGMSG("Failed pcol_add_page "
+			     "nr_pages=%u total_length=%zx\n",

WARNING:TYPO_SPELLING: 'faild' may be misspelled - perhaps 'failed'?
#663: FILE: fs/exofs/inode.c:617:
+			EXOFS_DBGMSG("write_exec faild => %d", ret);
 			                         ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#670: FILE: fs/exofs/inode.c:624:
+	BUG_ON(PageWriteback(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: fs/exofs/inode.c:636:
+static int exofs_writepages(struct address_space *mapping,
+		       struct writeback_control *wbc)

WARNING:SPLIT_STRING: quoted string split across lines
#699: FILE: fs/exofs/inode.c:653:
+	EXOFS_DBGMSG("inode(%lx) wbc->start=0x%llx wbc->end=0x%llx"
+		     " m->nrpages=%lu start=%ld end=%ld\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_writepage', this function's name, in a string
#723: FILE: fs/exofs/inode.c:677:
+		EXOFS_ERR("exofs_writepage => %d\n", ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: fs/exofs/inode.c:685:
+int exofs_write_begin(struct file *file, struct address_space *mapping,
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#731: FILE: fs/exofs/inode.c:685:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#731: FILE: fs/exofs/inode.c:685:
+		loff_t pos, unsigned len, unsigned flags,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#738: FILE: fs/exofs/inode.c:692:
+	if (page == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'faild' may be misspelled - perhaps 'failed'?
#742: FILE: fs/exofs/inode.c:696:
+			EXOFS_DBGMSG("simple_write_begin faild\n");
 			                                 ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len != PAGE_CACHE_SIZE'
#750: FILE: fs/exofs/inode.c:704:
+	if (!PageUptodate(page) && (len != PAGE_CACHE_SIZE)) {

WARNING:TYPO_SPELLING: 'faild' may be misspelled - perhaps 'failed'?
#755: FILE: fs/exofs/inode.c:709:
+			EXOFS_DBGMSG("__readpage_filler faild\n");
 			                                ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#763: FILE: fs/exofs/inode.c:717:
+static int exofs_write_begin_export(struct file *file,
+		struct address_space *mapping,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#764: FILE: fs/exofs/inode.c:718:
+		loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#764: FILE: fs/exofs/inode.c:718:
+		loff_t pos, unsigned len, unsigned flags,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000151335.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 45 warnings, 19 checks, 721 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000151335.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
