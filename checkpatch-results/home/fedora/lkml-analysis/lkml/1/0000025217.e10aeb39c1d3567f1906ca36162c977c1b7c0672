WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
echo up <pid> <address to probe> D <data address> <size> >>/sys/kernel/tracing/uprobes_events

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#117: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'tring' may be misspelled - perhaps 'trying'?
#268: FILE: Documentation/trace/uprobes_trace.txt:147:
+           <...>-3906  [001]   391.531491: : 0x400498: D 0x600968: 74 72 69 6e 67 00 00     tring..
                                                                                             ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'tring' may be misspelled - perhaps 'trying'?
#305: FILE: Documentation/trace/uprobes_trace.txt:184:
+           <...>-3906  [001]   442.537674: : 0x400498: D 0x400650: 74 72 69 6e 67 20 70 6f  tring po
                                                                                             ^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#336: FILE: kernel/trace/trace_uprobes.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#338: FILE: kernel/trace/trace_uprobes.c:3:
+ *  kernel/trace/trace_uprobes.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#351: FILE: kernel/trace/trace_uprobes.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#352: FILE: kernel/trace/trace_uprobes.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#370: FILE: kernel/trace/trace_uprobes.c:35:
+^Istruct list_head ^Ilist;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#371: FILE: kernel/trace/trace_uprobes.c:36:
+^Istruct uprobe ^I^Iusp;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#372: FILE: kernel/trace/trace_uprobes.c:37:
+^Iunsigned long ^I^Idaddr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#373: FILE: kernel/trace/trace_uprobes.c:38:
+^Isize_t^I ^I^Ilength;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: kernel/trace/trace_uprobes.c:45:
+^Ichar ^I^I^Itype;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#435: FILE: kernel/trace/trace_uprobes.c:100:
+	if (tu->type == TYPE_STACK) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#438: FILE: kernel/trace/trace_uprobes.c:103:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#480: FILE: kernel/trace/trace_uprobes.c:145:
+		__trace_bprintk(ip, "0x%lx: %c 0x%lx: "
+			"Data capture failed. Invalid address\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#499: FILE: kernel/trace/trace_uprobes.c:164:
+ * ^I0x400498: A ARG 1: 0000000000000004$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#500: FILE: kernel/trace/trace_uprobes.c:165:
+ * ^I0x400498: A ARG 2: 00000000000000c8$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: kernel/trace/trace_uprobes.c:186:
+		__trace_bprintk(ip, "0x%lx: %c ARG %d: %016lx\n",
+			u->vaddr, tu->type, i + 1, args[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: kernel/trace/trace_uprobes.c:195:
+static struct trace_uprobe *update_trace_probe(pid_t pid,
+		unsigned long taddr, unsigned long daddr, size_t length,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tu->usp.pid == pid'
#537: FILE: kernel/trace/trace_uprobes.c:202:
+		if ((tu->usp.pid == pid) && (tu->usp.vaddr == taddr)
+			&& (tu->type == type) && (tu->daddr == daddr)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tu->usp.vaddr == taddr'
#537: FILE: kernel/trace/trace_uprobes.c:202:
+		if ((tu->usp.pid == pid) && (tu->usp.vaddr == taddr)
+			&& (tu->type == type) && (tu->daddr == daddr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tu->type == type'
#537: FILE: kernel/trace/trace_uprobes.c:202:
+		if ((tu->usp.pid == pid) && (tu->usp.vaddr == taddr)
+			&& (tu->type == type) && (tu->daddr == daddr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tu->daddr == daddr'
#537: FILE: kernel/trace/trace_uprobes.c:202:
+		if ((tu->usp.pid == pid) && (tu->usp.vaddr == taddr)
+			&& (tu->type == type) && (tu->daddr == daddr)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#538: FILE: kernel/trace/trace_uprobes.c:203:
+		if ((tu->usp.pid == pid) && (tu->usp.vaddr == taddr)
+			&& (tu->type == type) && (tu->daddr == daddr)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: kernel/trace/trace_uprobes.c:218:
+static int trace_register_uprobe(pid_t pid, unsigned long taddr,
+		unsigned long daddr, size_t length, char type)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tu)...) over kzalloc(sizeof(struct trace_uprobe)...)
#566: FILE: kernel/trace/trace_uprobes.c:231:
+	tu = kzalloc(sizeof(struct trace_uprobe), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: kernel/trace/trace_uprobes.c:251:
+		pr_err("register_uprobe(pid=%d vaddr=%lx) = ret(%d) failed\n",
+			pid, taddr, ret);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tu"
#630: FILE: kernel/trace/trace_uprobes.c:295:
+	if (tu == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: kernel/trace/trace_uprobes.c:300:
+		seq_printf(m, "%-3s%d 0x%lx D 0x%lx %zu\n",
+		      "up", tu->usp.pid, tu->usp.vaddr, tu->daddr, tu->length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: kernel/trace/trace_uprobes.c:303:
+		seq_printf(m, "%-3s%d 0x%lx %c %zu\n",
+		      "up", tu->usp.pid, tu->usp.vaddr, tu->type, tu->length);

CHECK:BRACES: braces {} should be used on all arms of this statement
#674: FILE: kernel/trace/trace_uprobes.c:339:
+			if (test_tsk_thread_flag(tsk, TIF_IA32)) {
[...]
+			} else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#676: FILE: kernel/trace/trace_uprobes.c:341:
+				pr_err("Option to dump arguments is"
+					"not supported for 32bit process\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#676: FILE: kernel/trace/trace_uprobes.c:341:
+				pr_err("Option to dump arguments is"
+					"not supported for 32bit process\n");

CHECK:BRACES: Unbalanced braces around else statement
#678: FILE: kernel/trace/trace_uprobes.c:343:
+			} else

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#689: FILE: kernel/trace/trace_uprobes.c:354:
+ * ^Iup <pid> <address-to-probe> <type> [<data-address>] <size>$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'argc < 5'
#700: FILE: kernel/trace/trace_uprobes.c:365:
+	if ((argc < 5) || (argc > 6))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'argc > 6'
#700: FILE: kernel/trace/trace_uprobes.c:365:
+	if ((argc < 5) || (argc > 6))

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#707: FILE: kernel/trace/trace_uprobes.c:372:
+	ret = strict_strtoul(argv[1], 10, &tmpval);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: No space is necessary after a cast
#711: FILE: kernel/trace/trace_uprobes.c:376:
+	pid = (pid_t) tmpval;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#714: FILE: kernel/trace/trace_uprobes.c:379:
+	ret = strict_strtoul(argv[2], 16, &taddr);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#746: FILE: kernel/trace/trace_uprobes.c:411:
+			ret = strict_strtoul(argv[4], 16, &daddr);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#765: FILE: kernel/trace/trace_uprobes.c:430:
+	ret = strict_strtoul(((type == TYPE_DATA) ?

CHECK:SPACING: No space is necessary after a cast
#770: FILE: kernel/trace/trace_uprobes.c:435:
+	dsize = (size_t) tmpval;

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#773: FILE: kernel/trace/trace_uprobes.c:438:
+	/* Only upto 6 args supported */
 	        ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == TYPE_ARG'
#774: FILE: kernel/trace/trace_uprobes.c:439:
+	if ((type == TYPE_ARG) && (dsize > 6)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dsize > 6'
#774: FILE: kernel/trace/trace_uprobes.c:439:
+	if ((type == TYPE_ARG) && (dsize > 6)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#793: FILE: kernel/trace/trace_uprobes.c:458:
+uprobe_events_write(struct file *file, const char __user *ubuf,
+			size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: kernel/trace/trace_uprobes.c:530:
+	entry = debugfs_create_file("uprobe_events", 0644, d_tracer,
+					NULL, &uprobes_events_ops);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000025217.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 22 warnings, 25 checks, 740 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000025217.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
