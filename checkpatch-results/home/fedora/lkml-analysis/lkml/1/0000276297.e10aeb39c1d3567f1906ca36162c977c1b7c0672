WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#162: FILE: arch/x86/xen/mmu.c:656:
+			BUG_ON(!PagePinned(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#163: FILE: arch/x86/xen/mmu.c:657:
+			printk("unpinning pinned %p\n", page_address(page));

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#186: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#190: FILE: arch/x86/xen/suspend.c:1:
+#include <linux/types.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <domU>
#205: FILE: arch/x86/xen/suspend.c:16:
+	xen_start_info->console.domU.mfn =

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#208: FILE: arch/x86/xen/suspend.c:19:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#213: FILE: arch/x86/xen/suspend.c:24:
+		BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#291: FILE: drivers/xen/events.c:683:
+		if ((irq = per_cpu(virq_to_irq, cpu)[virq]) == -1)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#294: FILE: drivers/xen/events.c:686:
+		BUG_ON(irq_info[irq].type != IRQT_VIRQ);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#295: FILE: drivers/xen/events.c:687:
+		BUG_ON(irq_info[irq].index != virq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#302: FILE: drivers/xen/events.c:694:
+			BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#321: FILE: drivers/xen/events.c:713:
+		if ((irq = per_cpu(ipi_to_irq, cpu)[ipi]) == -1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#324: FILE: drivers/xen/events.c:716:
+		BUG_ON(irq_info[irq].type != IRQT_IPI);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#325: FILE: drivers/xen/events.c:717:
+		BUG_ON(irq_info[irq].index != ipi);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#331: FILE: drivers/xen/events.c:723:
+			BUG();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#342: FILE: drivers/xen/events.c:734:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#424: FILE: drivers/xen/manage.c:25:
+	/* Code 3 is SHUTDOWN_CRASH, which we don't use because the domain can only
+	   report a crash, not be instructed to crash!

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#426: FILE: drivers/xen/manage.c:27:
+	   the distinction when we return the reason code to them.  */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#438: FILE: drivers/xen/manage.c:38:
+	BUG_ON(!irqs_disabled());

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#476: FILE: drivers/xen/manage.c:76:
+	/* If the kernel is preemptible, we need to freeze all the processes
+	   to prevent them from being in the middle of a pagetable update

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#477: FILE: drivers/xen/manage.c:77:
+	   during suspend. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#480: FILE: drivers/xen/manage.c:80:
+		printk(KERN_ERR "xen suspend: freeze failed %d\n", err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#487: FILE: drivers/xen/manage.c:87:
+		printk(KERN_ERR "xen suspend: device_suspend %d\n", err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#491: FILE: drivers/xen/manage.c:91:
+	printk("suspending xenbus...\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#497: FILE: drivers/xen/manage.c:97:
+		printk(KERN_ERR "failed to start xen_suspend: %d\n", err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#508: FILE: drivers/xen/manage.c:108:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <SavePinned>
#546: FILE: include/linux/page-flags.h:160:
+PAGEFLAG(SavePinned, dirty);					/* Xen */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#558: FILE: include/xen/events.h:45:
+extern void xen_irq_resume(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000276297.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 21 warnings, 5 checks, 457 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000276297.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
