WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#58: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#63: FILE: drivers/char/tty_buffer.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'thead' may be misspelled - perhaps 'thread'?
#94: FILE: drivers/char/tty_buffer.c:32:
+	struct tty_buffer *thead;
 	                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'thead' may be misspelled - perhaps 'thread'?
#95: FILE: drivers/char/tty_buffer.c:33:
+	while ((thead = tty->buf.head) != NULL) {
 	        ^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#95: FILE: drivers/char/tty_buffer.c:33:
+	struct tty_buffer *thead;
+	while ((thead = tty->buf.head) != NULL) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'thead' may be misspelled - perhaps 'thread'?
#97: FILE: drivers/char/tty_buffer.c:35:
+		kfree(thead);
 		      ^^^^^

WARNING:TYPO_SPELLING: 'thead' may be misspelled - perhaps 'thread'?
#99: FILE: drivers/char/tty_buffer.c:37:
+	while ((thead = tty->buf.free) != NULL) {
 	        ^^^^^

WARNING:TYPO_SPELLING: 'thead' may be misspelled - perhaps 'thread'?
#101: FILE: drivers/char/tty_buffer.c:39:
+		kfree(thead);
 		      ^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct tty_buffer)...)
#125: FILE: drivers/char/tty_buffer.c:63:
+	p = kmalloc(sizeof(struct tty_buffer) + 2 * size, GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#126: FILE: drivers/char/tty_buffer.c:64:
+	if (p == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#156: FILE: drivers/char/tty_buffer.c:94:
+	if (b->size >= 512)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#158: FILE: drivers/char/tty_buffer.c:96:
+	else {

WARNING:TYPO_SPELLING: 'thead' may be misspelled - perhaps 'thread'?
#177: FILE: drivers/char/tty_buffer.c:115:
+	struct tty_buffer *thead;
 	                   ^^^^^

WARNING:TYPO_SPELLING: 'thead' may be misspelled - perhaps 'thread'?
#179: FILE: drivers/char/tty_buffer.c:117:
+	while ((thead = tty->buf.head) != NULL) {
 	        ^^^^^

WARNING:TYPO_SPELLING: 'thead' may be misspelled - perhaps 'thread'?
#181: FILE: drivers/char/tty_buffer.c:119:
+		tty_buffer_free(tty, thead);
 		                     ^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#200: FILE: drivers/char/tty_buffer.c:138:
+	unsigned long flags;
+	spin_lock_irqsave(&tty->buf.lock, flags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#203: FILE: drivers/char/tty_buffer.c:141:
+	/* If the data is being pushed to the tty layer then we can't
+	   process it here. Instead set a flag and the flush_to_ldisc

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#204: FILE: drivers/char/tty_buffer.c:142:
+	   path will process the flush request before it exits */

CHECK:BRACES: braces {} should be used on all arms of this statement
#205: FILE: drivers/char/tty_buffer.c:143:
+	if (test_bit(TTY_FLUSHING, &tty->flags)) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: drivers/char/tty_buffer.c:147:
+		wait_event(tty->read_wait,
+				test_bit(TTY_FLUSHPENDING, &tty->flags) == 0);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#211: FILE: drivers/char/tty_buffer.c:149:
+		return;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#211: FILE: drivers/char/tty_buffer.c:149:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#231: FILE: drivers/char/tty_buffer.c:169:
+	struct tty_buffer **tbh = &tty->buf.free;
+	while ((*tbh) != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#233: FILE: drivers/char/tty_buffer.c:171:
+		struct tty_buffer *t = *tbh;
+		if (t->size >= size) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#248: FILE: drivers/char/tty_buffer.c:186:
+	/* Should possibly check if this fails for the largest buffer we
+	   have queued and recycle that ? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: drivers/char/tty_buffer.c:186:
+	   have queued and recycle that ? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#270: FILE: drivers/char/tty_buffer.c:208:
+	/* OPTIMISATION: We could keep a per tty "zero" sized buffer to
+	   remove this conditional if its worth it. This would be invisible

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#271: FILE: drivers/char/tty_buffer.c:209:
+	   to the callers */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#272: FILE: drivers/char/tty_buffer.c:210:
+	if ((b = tty->buf.tail) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#279: FILE: drivers/char/tty_buffer.c:217:
+		if ((n = tty_buffer_find(tty, size)) != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#279: FILE: drivers/char/tty_buffer.c:217:
+		if ((n = tty_buffer_find(tty, size)) != NULL) {
[...]
+		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#280: FILE: drivers/char/tty_buffer.c:218:
+			if (b != NULL) {
[...]
+			} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "b"
#280: FILE: drivers/char/tty_buffer.c:218:
+			if (b != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#283: FILE: drivers/char/tty_buffer.c:221:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#286: FILE: drivers/char/tty_buffer.c:224:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: drivers/char/tty_buffer.c:246:
+int tty_insert_flip_string(struct tty_struct *tty, const unsigned char *chars,
+				size_t size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: drivers/char/tty_buffer.c:249:
+	int copied = 0;
+	do {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#323: FILE: drivers/char/tty_buffer.c:261:
+		/* There is a small chance that we need to split the data over
+		   several buffers. If this is the case we must loop */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#323: FILE: drivers/char/tty_buffer.c:261:
+		   several buffers. If this is the case we must loop */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: drivers/char/tty_buffer.c:282:
+int tty_insert_flip_string_flags(struct tty_struct *tty,
+		const unsigned char *chars, const char *flags, size_t size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#347: FILE: drivers/char/tty_buffer.c:285:
+	int copied = 0;
+	do {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#360: FILE: drivers/char/tty_buffer.c:298:
+		/* There is a small chance that we need to split the data over
+		   several buffers. If this is the case we must loop */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#360: FILE: drivers/char/tty_buffer.c:298:
+		   several buffers. If this is the case we must loop */

WARNING:LINE_SPACING: Missing a blank line after declarations
#380: FILE: drivers/char/tty_buffer.c:318:
+	unsigned long flags;
+	spin_lock_irqsave(&tty->buf.lock, flags);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tty->buf.tail"
#381: FILE: drivers/char/tty_buffer.c:319:
+	if (tty->buf.tail != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: drivers/char/tty_buffer.c:342:
+int tty_prepare_flip_string(struct tty_struct *tty, unsigned char **chars,
+								size_t size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: drivers/char/tty_buffer.c:345:
+	int space = tty_buffer_request_room(tty, size);
+	if (likely(space)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: drivers/char/tty_buffer.c:372:
+int tty_prepare_flip_string_flags(struct tty_struct *tty,
+			unsigned char **chars, char **flags, size_t size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#437: FILE: drivers/char/tty_buffer.c:375:
+	int space = tty_buffer_request_room(tty, size);
+	if (likely(space)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#447: FILE: drivers/char/tty_buffer.c:385:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#465: FILE: drivers/char/tty_buffer.c:403:
+^Iunsigned long ^Iflags;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!disc"
#472: FILE: drivers/char/tty_buffer.c:410:
+	if (disc == NULL)	/*  !TTY_LDISC */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "head"
#479: FILE: drivers/char/tty_buffer.c:417:
+	if (head != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#483: FILE: drivers/char/tty_buffer.c:421:
+			int count = head->commit - head->read;
+			if (!count) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!head->next"
#484: FILE: drivers/char/tty_buffer.c:422:
+				if (head->next == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#492: FILE: drivers/char/tty_buffer.c:430:
+			/* Ldisc or user is trying to flush the buffers
+			   we are feeding to the ldisc, stop feeding the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#493: FILE: drivers/char/tty_buffer.c:431:
+			   line discipline as we want to empty the queue */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#514: FILE: drivers/char/tty_buffer.c:452:
+	/* We may have a deferred request to flush the input buffer,
+	   if so pull the chain under the lock and empty the queue */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#514: FILE: drivers/char/tty_buffer.c:452:
+	   if so pull the chain under the lock and empty the queue */

WARNING:LINE_SPACING: Missing a blank line after declarations
#542: FILE: drivers/char/tty_buffer.c:480:
+	unsigned long flags;
+	spin_lock_irqsave(&tty->buf.lock, flags);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tty->buf.tail"
#543: FILE: drivers/char/tty_buffer.c:481:
+	if (tty->buf.tail != NULL)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1116: FILE: include/linux/tty.h:350:
+extern void tty_buffer_free_all(struct tty_struct *tty);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1117: FILE: include/linux/tty.h:351:
+extern void tty_buffer_flush(struct tty_struct *tty);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1118: FILE: include/linux/tty.h:352:
+extern void tty_buffer_init(struct tty_struct *tty);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217820.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 37 warnings, 25 checks, 1054 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217820.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
