WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#39: 
Signed-Off-By: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:LINE_SPACING: Missing a blank line after declarations
#124: FILE: mm/page_alloc.c:4244:
+	int pagenum;
+	pagenum = 1 << order;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: mm/page_alloc.c:4266:
+	spin_lock_irqsave(&zone->isolation_lock,flags);
 	                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#153: FILE: mm/page_alloc.c:4273:
+	if (found) {
+		isolate_page_nolock(info, page, order);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start >= end'
#172: FILE: mm/page_alloc.c:4292:
+	if (!pfn_valid(start) || !pfn_valid(last_pfn) || (start >= end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: mm/page_alloc.c:4301:
+	if ((start & (MAX_ORDER_NR_PAGES - 1)) ||
+		(end & (MAX_ORDER_NR_PAGES - 1)))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#190: FILE: mm/page_alloc.c:4310:
+			if (start < tmp->end_pfn && end > tmp->start_pfn) {
+				goto out_free;
+			}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#209: FILE: mm/page_alloc.c:4329:
+}
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: mm/page_alloc.c:4340:
+	struct zone *zone = info->zone;
+	spin_lock_irqsave(&zone->isolation_lock,flags);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#220: FILE: mm/page_alloc.c:4340:
+	spin_lock_irqsave(&zone->isolation_lock,flags);
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#223: FILE: mm/page_alloc.c:4343:
+	spin_unlock_irqrestore(&zone->isolation_lock,flags);
 	                                            ^

WARNING:TYPO_SPELLING: 'remvoed' may be misspelled - perhaps 'removed'?
#227: FILE: mm/page_alloc.c:4347:
+ * All pages in info->pages should be remvoed before calling this.
                                       ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#233: FILE: mm/page_alloc.c:4353:
+	BUG_ON(!list_empty(&info->pages));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#234: FILE: mm/page_alloc.c:4354:
+	BUG_ON(info->zone);

WARNING:RETURN_VOID: void function return statements are not generally useful
#237: FILE: mm/page_alloc.c:4357:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#251: FILE: mm/page_alloc.c:4371:
+	struct page *page, *n;
+	BUG_ON(info->zone);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#251: FILE: mm/page_alloc.c:4371:
+	BUG_ON(info->zone);

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: mm/page_alloc.c:4388:
+	struct page *page, *n;
+	BUG_ON(info->zone);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#268: FILE: mm/page_alloc.c:4388:
+	BUG_ON(info->zone);

ERROR:SPACING: space prohibited before that ',' (ctx:WxO)
#269: FILE: mm/page_alloc.c:4389:
+	list_for_each_entry_safe(page, n ,&info->pages, lru) {
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:WxO)
#269: FILE: mm/page_alloc.c:4389:
+	list_for_each_entry_safe(page, n ,&info->pages, lru) {
 	                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#269: FILE: mm/page_alloc.c:4389:
+	list_for_each_entry_safe(page, n ,&info->pages, lru) {
 	                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#283: FILE: mm/page_alloc.c:4403:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#304: FILE: include/linux/page_isolation.h:1:
+#ifndef __LINIX_PAGE_ISOLATION_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#341: FILE: include/linux/page_isolation.h:38:
+extern void detach_isolation_info_zone(struct isolation_info *info);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: include/linux/page_isolation.h:39:
+extern void free_isolation_info(struct isolation_info *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: include/linux/page_isolation.h:40:
+extern void unuse_all_isolated_pages(struct isolation_info *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: include/linux/page_isolation.h:41:
+extern void free_all_isolated_pages(struct isolation_info *info);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000433997.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 14 warnings, 8 checks, 284 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000433997.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
