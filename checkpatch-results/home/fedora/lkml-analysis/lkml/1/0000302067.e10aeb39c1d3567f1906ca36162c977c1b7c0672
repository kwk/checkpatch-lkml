WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#39: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#66: FILE: fs/Kconfig:2121:
+config AFS_FSCACHE
+	bool "Provide AFS client caching support (EXPERIMENTAL)"
+	depends on EXPERIMENTAL
+	depends on AFS_FS=m && FSCACHE || AFS_FS=y && FSCACHE=y
+	help
+	  Say Y here if you want AFS data to be cached locally on disk through
+	  the generic filesystem cache manager
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#135: FILE: fs/afs/cache.c:28:
+static enum fscache_checkaux afs_vlocation_cache_check_aux(

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#207: FILE: fs/afs/cache.c:93:
+	uint16_t klen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#229: FILE: fs/afs/cache.c:106:
+ * provide new auxilliary cache data
                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#239: FILE: fs/afs/cache.c:112:
+	uint16_t dlen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#257: FILE: fs/afs/cache.c:125:
+ * check that the auxilliary data indicates that the entry is still valid
                   ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#297: FILE: fs/afs/cache.c:143:
+	uint16_t klen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#317: FILE: fs/afs/cache.c:158:
+ * provide new auxilliary cache data
                ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#323: FILE: fs/afs/cache.c:164:
+	uint16_t dlen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#339: FILE: fs/afs/cache.c:180:
+ * check that the auxilliary data indicates that the entry is still valid
                   ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#348: FILE: fs/afs/cache.c:189:
+	uint16_t dlen;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#361: FILE: fs/afs/cache.c:202:
+	 * VL record from the cache */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: fs/afs/cache.c:233:
+static uint16_t afs_volume_cache_get_key(const void *cookie_netfs_data,
+					void *buffer, uint16_t bufmax)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#421: FILE: fs/afs/cache.c:236:
+	uint16_t klen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#468: FILE: fs/afs/cache.c:259:
+	uint16_t klen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#531: FILE: fs/afs/cache.c:291:
+ * provide new auxilliary cache data
                ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#554: FILE: fs/afs/cache.c:297:
+	uint16_t dlen;

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#556: FILE: fs/afs/cache.c:299:
+	_enter("{%x,%x,%Lx},%p,%u",

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#574: FILE: fs/afs/cache.c:317:
+ * check that the auxilliary data indicates that the entry is still valid
                   ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#581: FILE: fs/afs/cache.c:324:
+	uint16_t dlen;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#602: FILE: fs/afs/cache.c:341:
+		unsigned unique;

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#650: FILE: fs/afs/cache.c:382:
+	_enter("{%x,%x,%Lx}",

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#752: FILE: fs/afs/file.c:26:
+static int afs_readpages(struct file *filp, struct address_space *mapping,
                                       ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#753: FILE: fs/afs/file.c:27:
+			 struct list_head *pages, unsigned nr_pages);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#786: FILE: fs/afs/file.c:115:
+	 * the VM reissue the readpage */

WARNING:INDENTED_LABEL: labels should not be indented
#847: FILE: fs/afs/file.c:169:
+	go_on:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#860: FILE: fs/afs/file.c:185:
+			BUG_ON(PageFsCache(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#879: FILE: fs/afs/file.c:195:
+			BUG_ON(PageFsCache(page));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#896: FILE: fs/afs/file.c:214:
+			 struct list_head *pages, unsigned nr_pages)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#939: FILE: fs/afs/file.c:239:
+		BUG_ON(!list_empty(pages));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#940: FILE: fs/afs/file.c:240:
+		BUG_ON(nr_pages != 0);

CHECK:SPACING: No space is necessary after a cast
#957: FILE: fs/afs/file.c:256:
+	ret = read_cache_pages(mapping, pages, (void *) afs_readpage, file);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#975: FILE: fs/afs/file.c:279:
+	struct afs_writeback *wb = (struct afs_writeback *) page_private(page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#980: FILE: fs/afs/file.c:284:
+	BUG_ON(!PageLocked(page));

CHECK:SPACING: No space is necessary after a cast
#1010: FILE: fs/afs/file.c:314:
+	struct afs_writeback *wb = (struct afs_writeback *) page_private(page);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1019: FILE: fs/afs/file.c:322:
+	 * elected to wait */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1086: FILE: fs/afs/inode.c:181:
+	 * first page of symlinks to see if they're really mountpoints */

CHECK:SPACING: No space is necessary after a cast
#1185: FILE: fs/afs/internal.h:433:
+#define afs_cell_cache_index_def	(*(struct fscache_cookie_def *) NULL)

CHECK:SPACING: No space is necessary after a cast
#1186: FILE: fs/afs/internal.h:434:
+#define afs_vlocation_cache_index_def	(*(struct fscache_cookie_def *) NULL)

CHECK:SPACING: No space is necessary after a cast
#1187: FILE: fs/afs/internal.h:435:
+#define afs_volume_cache_index_def	(*(struct fscache_cookie_def *) NULL)

CHECK:SPACING: No space is necessary after a cast
#1188: FILE: fs/afs/internal.h:436:
+#define afs_vnode_cache_index_def	(*(struct fscache_cookie_def *) NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1447: FILE: fs/afs/write.c:841:
+	 * be modified */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302067.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 25 warnings, 18 checks, 1297 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302067.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
