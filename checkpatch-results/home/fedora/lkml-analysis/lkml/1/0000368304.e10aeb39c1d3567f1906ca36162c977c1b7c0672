WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#37: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#42: FILE: drivers/block/dst/Kconfig:1:
+config DST
+	tristate "Distributed storage"
+	depends on NET
+	select CONNECTOR
+	---help---
+	This driver allows to create a distributed storage.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#49: FILE: drivers/block/dst/Kconfig:8:
+config DST_ALG_LINEAR
+	tristate "Linear distribution algorithm"
+	depends on DST
+	---help---
+	This module allows to create linear mapping of the nodes
+	in the distributed storage.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#56: FILE: drivers/block/dst/Kconfig:15:
+config DST_ALG_MIRROR
+	tristate "Mirror distribution algorithm"
+	depends on DST
+	---help---
+	This module allows to create a mirror of the noes in the
+	distributed storage.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/block/dst/dcore.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: drivers/block/dst/dcore.c:69:
+^I.name ^I^I= "dst",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#149: FILE: drivers/block/dst/dcore.c:70:
+^I.match ^I^I= &dst_dev_match,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#153: FILE: drivers/block/dst/dcore.c:74:
+^I.bus ^I^I= &dst_dev_bus_type,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#154: FILE: drivers/block/dst/dcore.c:75:
+^I.release ^I= &dst_dev_release$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: drivers/block/dst/dcore.c:83:
+^I.release ^I= &dst_node_release$

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#174: FILE: drivers/block/dst/dcore.c:95:
+ * which are splitted between nodes (part with local node destination
              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#205: FILE: drivers/block/dst/dcore.c:126:
+		dprintk("%s: start: %llu, num: %d, idx: %d, offset: %u, "
+				"size: %llu, bi_idx: %d, bi_vcnt: %d.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: drivers/block/dst/dcore.c:131:
+		if (likely(bio->bi_idx == req->idx &&
+					bio->bi_vcnt == req->num)) {

WARNING:SPLIT_STRING: quoted string split across lines
#237: FILE: drivers/block/dst/dcore.c:158:
+			dprintk("%s: start: %llu, num: %d, idx: %d, "
+				"offset: %u, size: %llu, "

WARNING:SPLIT_STRING: quoted string split across lines
#238: FILE: drivers/block/dst/dcore.c:159:
+				"offset: %u, size: %llu, "
+				"bi_idx: %d, bi_vcnt: %d, req: %p, bio: %p.\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#243: FILE: drivers/block/dst/dcore.c:164:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#261: FILE: drivers/block/dst/dcore.c:182:
+	unsigned int bio_sectors = bio->bi_size>>9;
 	                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#272: FILE: drivers/block/dst/dcore.c:193:
+		dprintk("%s: failed to find a node for bio: %p, "
+				"sector: %llu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: drivers/block/dst/dcore.c:199:
+	dprintk("%s: bio: %llu-%llu, dev: %llu-%llu, in sectors.\n",
+			__func__, bio->bi_sector, bio->bi_sector+bio_sectors,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#278: FILE: drivers/block/dst/dcore.c:199:
+			__func__, bio->bi_sector, bio->bi_sector+bio_sectors,
 			                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#279: FILE: drivers/block/dst/dcore.c:200:
+			n->start, n->start+n->size);
 			                  ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#286: FILE: drivers/block/dst/dcore.c:207:
+	req.flags = (test_bit(DST_NODE_FROZEN, &n->flags))?
 	                                                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#287: FILE: drivers/block/dst/dcore.c:208:
+				DST_REQ_ALWAYS_QUEUE:0;
 				                    ^

WARNING:SPLIT_STRING: quoted string split across lines
#330: FILE: drivers/block/dst/dcore.c:251:
+			dprintk("%s: split: start: %llu/%llu, size: %llu, "
+					"total_size: %llu, diff: %u, idx: %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#331: FILE: drivers/block/dst/dcore.c:252:
+					"total_size: %llu, diff: %u, idx: %d, "
+					"num: %d, bv_len: %u, bv_offset: %u.\n",

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#347: FILE: drivers/block/dst/dcore.c:268:
+			req.flags = (test_bit(DST_NODE_FROZEN, &n->flags))?
 			                                                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#348: FILE: drivers/block/dst/dcore.c:269:
+				DST_REQ_ALWAYS_QUEUE:0;
 				                    ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#349: FILE: drivers/block/dst/dcore.c:270:
+			req.orig_size = req.size = diff;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#360: FILE: drivers/block/dst/dcore.c:281:
+			dprintk("%s: next: start: %llu, size: %llu, "
+				"total_size: %llu, diff: %u, idx: %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#361: FILE: drivers/block/dst/dcore.c:282:
+				"total_size: %llu, diff: %u, idx: %d, "
+				"num: %d, offset: %u, bv_len: %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#362: FILE: drivers/block/dst/dcore.c:283:
+				"num: %d, offset: %u, bv_len: %u, "
+				"bv_offset: %u.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#374: FILE: drivers/block/dst/dcore.c:295:
+				dprintk("%s: failed to find a split node for "
+				  "bio: %p, sector: %llu, start: %llu.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#386: FILE: drivers/block/dst/dcore.c:307:
+			dprintk("%s: req.start: %llu, start: %llu, "
+					"dev_start: %llu, dev_size: %llu, "

WARNING:SPLIT_STRING: quoted string split across lines
#387: FILE: drivers/block/dst/dcore.c:308:
+					"dev_start: %llu, dev_size: %llu, "
+					"rest_in_node: %llu.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#397: FILE: drivers/block/dst/dcore.c:318:
+	dprintk("%s: last request: start: %llu, size: %llu, "
+			"total_size: %llu.\n", __func__,

WARNING:SPLIT_STRING: quoted string split across lines
#405: FILE: drivers/block/dst/dcore.c:326:
+		dprintk("%s: last: start: %llu/%llu, size: %llu, "
+				"total_size: %llu, idx: %d, num: %d.\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#413: FILE: drivers/block/dst/dcore.c:334:
+			BUG_ON(total_size != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#421: FILE: drivers/block/dst/dcore.c:342:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'spcific' may be misspelled - perhaps 'specific'?
#424: FILE: drivers/block/dst/dcore.c:345:
+ * It calls algorithm spcific remapping code only.
                       ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: drivers/block/dst/dcore.c:353:
+	dprintk("\n%s: start: st: %p, bio: %p, cnt: %u.\n",
+			__func__, st, bio, bio->bi_vcnt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: drivers/block/dst/dcore.c:358:
+	dprintk("%s: end: st: %p, bio: %p, err: %d.\n",
+			__func__, st, bio, err);

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#450: FILE: drivers/block/dst/dcore.c:371:
+static struct block_device_operations dst_blk_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: drivers/block/dst/dcore.c:405:
+	snprintf(st->disk->disk_name, sizeof(st->disk->disk_name),
+			"dst-%s-%d", st->name, st->disk->first_minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: drivers/block/dst/dcore.c:426:
+static ssize_t dst_name_show(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/block/dst/dcore.c:442:
+		dprintk("%s: n: %p, start: %llu, size: %llu.\n",
+				__func__, n, n->start, n->size);

WARNING:TYPO_SPELLING: 'syfs' may be misspelled - perhaps 'sysfs'?
#537: FILE: drivers/block/dst/dcore.c:458:
+ * Shows node layout in syfs.
                         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: drivers/block/dst/dcore.c:461:
+static ssize_t dst_nodes_show(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#577: FILE: drivers/block/dst/dcore.c:498:
+static ssize_t dst_alg_show(struct device *dev,
+		struct device_attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#580: FILE: drivers/block/dst/dcore.c:501:
+	struct dst_storage *st = container_of(dev, struct dst_storage, device);
+	return sprintf(buf, "%s\n", st->alg->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: drivers/block/dst/dcore.c:509:
+static ssize_t dst_remove_nodes(struct device *dev,
+		struct device_attribute *attr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#592: FILE: drivers/block/dst/dcore.c:513:
+	struct dst_storage *st = container_of(dev, struct dst_storage, device);
+	dst_remove_all_nodes(st);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_name_show' to 'name_show'
#594: FILE: drivers/block/dst/dcore.c:515:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_nodes_show' to 'nodes_show'
#597: FILE: drivers/block/dst/dcore.c:518:
+static DEVICE_ATTR(nodes, 0444, dst_nodes_show, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_alg_show' to 'alg_show'
#598: FILE: drivers/block/dst/dcore.c:519:
+static DEVICE_ATTR(alg, 0444, dst_alg_show, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_remove_nodes' to 'remove_all_nodes_store'
#599: FILE: drivers/block/dst/dcore.c:520:
+static DEVICE_ATTR(remove_all_nodes, 0644, NULL, dst_remove_nodes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#653: FILE: drivers/block/dst/dcore.c:574:
+static ssize_t dst_show_start(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: drivers/block/dst/dcore.c:582:
+static ssize_t dst_show_size(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: drivers/block/dst/dcore.c:594:
+static ssize_t dst_show_type(struct device *dev,
+		struct device_attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#693: FILE: drivers/block/dst/dcore.c:614:
+		struct sockaddr_in *sin = (struct sockaddr_in *)&addr;
+		return sprintf(buf, "R: %u.%u.%u.%u:%d\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#697: FILE: drivers/block/dst/dcore.c:618:
+		struct sockaddr_in6 *sin = (struct sockaddr_in6 *)&addr;
+		return sprintf(buf,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_show_start' to 'start_show'
#702: FILE: drivers/block/dst/dcore.c:623:
+}

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_show_size' to 'size_show'
#705: FILE: drivers/block/dst/dcore.c:626:
+static DEVICE_ATTR(size, 0444, dst_show_size, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dst_show_type' to 'type_show'
#706: FILE: drivers/block/dst/dcore.c:627:
+static DEVICE_ATTR(type, 0444, dst_show_type, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: drivers/block/dst/dcore.c:664:
+	snprintf(n->device.bus_id, sizeof(n->device.bus_id),
+			"n-%llu-%p", n->start, n);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*st)...) over kzalloc(sizeof(struct dst_storage)...)
#783: FILE: drivers/block/dst/dcore.c:704:
+	st = kzalloc(sizeof(struct dst_storage), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*alg)...) over kzalloc(sizeof(struct dst_alg)...)
#840: FILE: drivers/block/dst/dcore.c:761:
+	alg = kzalloc(sizeof(struct dst_alg), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: drivers/block/dst/dcore.c:790:
+	dprintk("%s: alg: %p, refcnt: %d.\n",
+			__func__, alg, atomic_read(&alg->refcnt));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#916: FILE: drivers/block/dst/dcore.c:837:
+	BUG_ON(rb_first(&st->tree_root) != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rb_first"
#916: FILE: drivers/block/dst/dcore.c:837:
+	BUG_ON(rb_first(&st->tree_root) != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#925: FILE: drivers/block/dst/dcore.c:846:
+	dprintk("%s: st: %p, refcnt: %d.\n",
+			__func__, st, atomic_read(&st->refcnt));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#938: FILE: drivers/block/dst/dcore.c:859:
+	dprintk("%s: node: %p, start: %llu, size: %llu, refcnt: %d.\n",
+			__func__, n, n->start, n->size,

WARNING:SPLIT_STRING: quoted string split across lines
#945: FILE: drivers/block/dst/dcore.c:866:
+		dprintk("%s: freeing node: %p, start: %llu, size: %llu, "
+				"refcnt: %d.\n",

WARNING:REPEATED_WORD: Possible repeated word: 'of'
#965: FILE: drivers/block/dst/dcore.c:886:
+ * Tree of of the nodes, which form the storage.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#980: FILE: drivers/block/dst/dcore.c:901:
+			__func__, dn->start, dn->start+dn->size, start);
 			                              ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#981: FILE: drivers/block/dst/dcore.c:902:
+		if (cmp < 0)
[...]
+		else if (cmp > 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#985: FILE: drivers/block/dst/dcore.c:906:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: drivers/block/dst/dcore.c:936:
+static struct dst_node *dst_storage_tree_add(struct dst_node *new,
+		struct dst_storage *st)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: drivers/block/dst/dcore.c:948:
+		dprintk("%s: tree: %llu-%llu, new: %llu.\n",
+				__func__, dn->start, dn->start+dn->size,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1027: FILE: drivers/block/dst/dcore.c:948:
+				__func__, dn->start, dn->start+dn->size,
 				                              ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1029: FILE: drivers/block/dst/dcore.c:950:
+		if (cmp < 0)
[...]
+		else if (cmp > 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1033: FILE: drivers/block/dst/dcore.c:954:
+		else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1050: FILE: drivers/block/dst/dcore.c:971:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1053: FILE: drivers/block/dst/dcore.c:974:
+	err = path_lookup(path, LOOKUP_FOLLOW, &nd);
 	                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1057: FILE: drivers/block/dst/dcore.c:978:
+	inode = nd.dentry->d_inode;
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1071: FILE: drivers/block/dst/dcore.c:992:
+	path_release(&nd);
 	              ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1105: FILE: drivers/block/dst/dcore.c:1026:
+static int dst_setup_local(struct dst_node *n, struct dst_ctl *ctl,
+		struct dst_local_ctl *l)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1114: FILE: drivers/block/dst/dcore.c:1035:
+	n->bdev = open_by_devnum(dev, FMODE_READ|FMODE_WRITE);
 	                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1125: FILE: drivers/block/dst/dcore.c:1046:
+static int dst_setup_local_export(struct dst_node *n, struct dst_ctl *ctl,
+		struct dst_le_template *tmp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1202: FILE: drivers/block/dst/dcore.c:1123:
+static int dst_setup_remote(struct dst_node *n, struct dst_ctl *ctl,
+		struct dst_remote_ctl *r)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1211: FILE: drivers/block/dst/dcore.c:1132:
+	sock->sk->sk_sndtimeo = sock->sk->sk_rcvtimeo =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1286: FILE: drivers/block/dst/dcore.c:1207:
+static struct dst_node *dst_alloc_node(struct dst_ctl *ctl,
+		void (*cleanup)(struct dst_node *))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*n)...) over kzalloc(sizeof(struct dst_node)...)
#1295: FILE: drivers/block/dst/dcore.c:1216:
+	n = kzalloc(sizeof(struct dst_node), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1358: FILE: drivers/block/dst/dcore.c:1279:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1384: FILE: drivers/block/dst/dcore.c:1305:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1467: FILE: drivers/block/dst/dcore.c:1388:
+		dprintk("%s: STARTED st: %p, disk_size: %llu.\n",
+				__func__, st, st->disk_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1535: FILE: drivers/block/dst/dcore.c:1456:
+^Idst_commands[ctl->cmd](ctl, msg->data + sizeof(struct dst_ctl), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1554: FILE: drivers/block/dst/dcore.c:1475:
+	dst_request_cache = kmem_cache_create("dst", sizeof(struct dst_request),
+				       0, 0, NULL, NULL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000368304.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 50 warnings, 44 checks, 1563 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000368304.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
