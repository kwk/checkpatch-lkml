WARNING:TYPO_SPELLING: 'architecure' may be misspelled - perhaps 'architecture'?
#18: 
Subject: [PATCH 14/14] score - New architecure port to SunplusCT S+CORE
                                   ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#51: FILE: drivers/serial/Kconfig:1415:
+config SERIAL_SCT
+       tristate "SunplusCT compatible serial support"
+       depends on (SCORE)
+       select SERIAL_CORE
+       ---help---
+         Most people will say Y or M here, so that they can use serial 

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#56: FILE: drivers/serial/Kconfig:1420:
+         Most people will say Y or M here, so that they can use serial $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#57: FILE: drivers/serial/Kconfig:1420:
mice,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: drivers/serial/Kconfig:1421:
+         modems and similar devices connecting to the standard serial $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#61: FILE: drivers/serial/Kconfig:1423:
+config SERIAL_SCT_CONSOLE
+       bool "Console on SunplusCT compatible serial port"
+       depends on (SERIAL_SCT)
+       select SERIAL_CORE_CONSOLE
+       ---help---
+         If you don't have a VGA card installed and you say Y here, the
+         kernel will automatically use the first serial line, /dev/ttyS0, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#67: FILE: drivers/serial/Kconfig:1429:
+         kernel will automatically use the first serial line, /dev/ttyS0, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: drivers/serial/Kconfig:1435:
+         and it will switch to normal serial console when the $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: drivers/serial/sct_serial.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#104: FILE: drivers/serial/sct_serial.c:2:
+ * File: linux/drivers/serial/sct_serial.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#126: FILE: drivers/serial/sct_serial.c:24:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#150: FILE: drivers/serial/sct_serial.c:48:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#153: FILE: drivers/serial/sct_serial.c:51:
+/*
+#define DEBUG_MESSAGE  0

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: drivers/serial/sct_serial.c:62:
+       writeb(c, UART_THR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: drivers/serial/sct_serial.c:63:
+       if (c == '\n')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#165: FILE: drivers/serial/sct_serial.c:63:
+       if (c == '\n')
+               writeb('\r', UART_THR);

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: drivers/serial/sct_serial.c:64:
+               writeb('\r', UART_THR);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: drivers/serial/sct_serial.c:64:
+               writeb('\r', UART_THR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: drivers/serial/sct_serial.c:73:
+       send_char(c);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: drivers/serial/sct_serial.c:75:
+       unsigned int base = port->mapbase;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: drivers/serial/sct_serial.c:78:
+       while (readw(UART_ST(base)) & UART_ST_BY);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#180: FILE: drivers/serial/sct_serial.c:78:
+       while (readw(UART_ST(base)) & UART_ST_BY);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: drivers/serial/sct_serial.c:79:
+       writeb(c, UART_DR(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: drivers/serial/sct_serial.c:81:
+       if (c == '\n') {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#183: FILE: drivers/serial/sct_serial.c:81:
+       if (c == '\n') {
+               while (readw(UART_ST(base)) & UART_ST_BY);

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: drivers/serial/sct_serial.c:82:
+               while (readw(UART_ST(base)) & UART_ST_BY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: drivers/serial/sct_serial.c:82:
+               while (readw(UART_ST(base)) & UART_ST_BY);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#184: FILE: drivers/serial/sct_serial.c:82:
+               while (readw(UART_ST(base)) & UART_ST_BY);

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: drivers/serial/sct_serial.c:83:
+               writeb('\r', UART_DR(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: drivers/serial/sct_serial.c:83:
+               writeb('\r', UART_DR(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: drivers/serial/sct_serial.c:84:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: drivers/serial/sct_serial.c:92:
+       unsigned int base = port->mapbase;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: drivers/serial/sct_serial.c:95:
+       return readb(UART_RBR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: drivers/serial/sct_serial.c:98:
+       while (readw(UART_ST(base)) & UART_ST_RE);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#200: FILE: drivers/serial/sct_serial.c:98:
+       while (readw(UART_ST(base)) & UART_ST_RE);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: drivers/serial/sct_serial.c:99:
+       return readb(UART_DR(base));$

CHECK:SPACING: No space is necessary after a cast
#209: FILE: drivers/serial/sct_serial.c:107:
+       struct uart_port *port = (struct uart_port *) dev_id;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: drivers/serial/sct_serial.c:107:
+       struct uart_port *port = (struct uart_port *) dev_id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: drivers/serial/sct_serial.c:108:
+       struct tty_struct *tty = port->info->port.tty;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: drivers/serial/sct_serial.c:109:
+       unsigned int data, status, base = port->mapbase;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: drivers/serial/sct_serial.c:112:
+       if (readw(UART_LSR) & 1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#214: FILE: drivers/serial/sct_serial.c:112:
+       if (readw(UART_LSR) & 1) {
+               data = readb(UART_RBR);

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: drivers/serial/sct_serial.c:113:
+               data = readb(UART_RBR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: drivers/serial/sct_serial.c:113:
+               data = readb(UART_RBR);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: drivers/serial/sct_serial.c:114:
+               tty_insert_flip_char(tty, data, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: drivers/serial/sct_serial.c:114:
+               tty_insert_flip_char(tty, data, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: drivers/serial/sct_serial.c:115:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: drivers/serial/sct_serial.c:117:
+       do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#219: FILE: drivers/serial/sct_serial.c:117:
+       do {
+               data = sct_uart_getc(port);

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: drivers/serial/sct_serial.c:118:
+               data = sct_uart_getc(port);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: drivers/serial/sct_serial.c:118:
+               data = sct_uart_getc(port);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: drivers/serial/sct_serial.c:119:
+               status = readw(UART_ERR(base)) & 0xf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: drivers/serial/sct_serial.c:119:
+               status = readw(UART_ERR(base)) & 0xf;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: drivers/serial/sct_serial.c:120:
+               switch (status) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: drivers/serial/sct_serial.c:120:
+               switch (status) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: drivers/serial/sct_serial.c:121:
+               case UART_ERR_OE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: drivers/serial/sct_serial.c:121:
+               case UART_ERR_OE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: drivers/serial/sct_serial.c:122:
+                       status = TTY_OVERRUN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: drivers/serial/sct_serial.c:122:
+                       status = TTY_OVERRUN;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: drivers/serial/sct_serial.c:123:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: drivers/serial/sct_serial.c:123:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: drivers/serial/sct_serial.c:124:
+               case UART_ERR_BE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: drivers/serial/sct_serial.c:124:
+               case UART_ERR_BE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: drivers/serial/sct_serial.c:125:
+                       status = TTY_BREAK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: drivers/serial/sct_serial.c:125:
+                       status = TTY_BREAK;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: drivers/serial/sct_serial.c:126:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: drivers/serial/sct_serial.c:126:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: drivers/serial/sct_serial.c:127:
+               case UART_ERR_PE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/serial/sct_serial.c:127:
+               case UART_ERR_PE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: drivers/serial/sct_serial.c:128:
+                       status = TTY_PARITY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: drivers/serial/sct_serial.c:128:
+                       status = TTY_PARITY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: drivers/serial/sct_serial.c:129:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: drivers/serial/sct_serial.c:129:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: drivers/serial/sct_serial.c:130:
+               case UART_ERR_FE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: drivers/serial/sct_serial.c:130:
+               case UART_ERR_FE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: drivers/serial/sct_serial.c:131:
+                       status = TTY_FRAME;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: drivers/serial/sct_serial.c:131:
+                       status = TTY_FRAME;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: drivers/serial/sct_serial.c:132:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: drivers/serial/sct_serial.c:132:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: drivers/serial/sct_serial.c:133:
+               default:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: drivers/serial/sct_serial.c:134:
+                       status = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: drivers/serial/sct_serial.c:134:
+                       status = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: drivers/serial/sct_serial.c:135:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: drivers/serial/sct_serial.c:135:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: drivers/serial/sct_serial.c:137:
+               tty_insert_flip_char(tty, data, status);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: drivers/serial/sct_serial.c:137:
+               tty_insert_flip_char(tty, data, status);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: drivers/serial/sct_serial.c:138:
+       } while (!(readw(UART_ST(base)) & UART_ST_RE));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: drivers/serial/sct_serial.c:140:
+       tty_flip_buffer_push(tty);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: drivers/serial/sct_serial.c:141:
+       return IRQ_HANDLED;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: drivers/serial/sct_serial.c:152:
+       if (!request_mem_region(port->mapbase, UART_REGISTER_SPACE, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: drivers/serial/sct_serial.c:152:
+       if (!request_mem_region(port->mapbase, UART_REGISTER_SPACE, $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#254: FILE: drivers/serial/sct_serial.c:152:
+       if (!request_mem_region(port->mapbase, UART_REGISTER_SPACE, 
[...]
+               return -EBUSY;

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: drivers/serial/sct_serial.c:153:
+               return -EBUSY;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: drivers/serial/sct_serial.c:153:
+       if (!request_mem_region(port->mapbase, UART_REGISTER_SPACE, 
+               return -EBUSY;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: drivers/serial/sct_serial.c:153:
+               return -EBUSY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: drivers/serial/sct_serial.c:155:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: drivers/serial/sct_serial.c:166:
+       release_mem_region(port->mapbase, UART_REGISTER_SPACE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: drivers/serial/sct_serial.c:176:
+       if (flags & UART_CONFIG_TYPE && sct_uart_request_port(port) == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#279: FILE: drivers/serial/sct_serial.c:176:
+       if (flags & UART_CONFIG_TYPE && sct_uart_request_port(port) == 0)
+               port->type = PORT_SCT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: drivers/serial/sct_serial.c:177:
+               port->type = PORT_SCT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: drivers/serial/sct_serial.c:177:
+               port->type = PORT_SCT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: drivers/serial/sct_serial.c:184:
+       return port->type == PORT_SCT ? "SCT_UART" : NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: drivers/serial/sct_serial.c:191:
+       while (1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#294: FILE: drivers/serial/sct_serial.c:191:
+       while (1) {
+               sct_uart_putc(port, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: drivers/serial/sct_serial.c:192:
+               sct_uart_putc(port, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: drivers/serial/sct_serial.c:192:
+               sct_uart_putc(port, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: drivers/serial/sct_serial.c:192:
+               sct_uart_putc(port, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: drivers/serial/sct_serial.c:193:
+               port->info->xmit.tail = (port->info->xmit.tail + 1) &$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: drivers/serial/sct_serial.c:193:
+               sct_uart_putc(port, 
+               port->info->xmit.tail = (port->info->xmit.tail + 1) &

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: drivers/serial/sct_serial.c:193:
+               port->info->xmit.tail = (port->info->xmit.tail + 1) &$

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: drivers/serial/sct_serial.c:194:
+                                        (UART_XMIT_SIZE - 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: drivers/serial/sct_serial.c:194:
+                                        (UART_XMIT_SIZE - 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: drivers/serial/sct_serial.c:195:
+               port->icount.tx++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: drivers/serial/sct_serial.c:195:
+               port->icount.tx++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: drivers/serial/sct_serial.c:196:
+               if (uart_circ_empty(&port->info->xmit))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: drivers/serial/sct_serial.c:196:
+               if (uart_circ_empty(&port->info->xmit))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#300: FILE: drivers/serial/sct_serial.c:196:
+               if (uart_circ_empty(&port->info->xmit))
+                       break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: drivers/serial/sct_serial.c:197:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: drivers/serial/sct_serial.c:197:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: drivers/serial/sct_serial.c:198:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: drivers/serial/sct_serial.c:206:
+       unsigned short val = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: drivers/serial/sct_serial.c:209:
+       writew(0, UART_ERR(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: drivers/serial/sct_serial.c:210:
+       writew(0, UART_ST(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: drivers/serial/sct_serial.c:213:
+       writew(UART_BAUDRATE, UART_BUD(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: drivers/serial/sct_serial.c:216:
+       val |= UART_CR_8BITS;   /* Word Length Definition=8 Bits */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: drivers/serial/sct_serial.c:217:
+       val &= ~UART_CR_PEN;    /* Disable Party Check */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: drivers/serial/sct_serial.c:218:
+       val &= ~UART_CR_SBSEL;  /* Stop-Bit Size Selection: 1 Stop Bit */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: drivers/serial/sct_serial.c:221:
+       if (!early) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#325: FILE: drivers/serial/sct_serial.c:221:
+       if (!early) {
+               val |= UART_CR_RIE;     /* Enable receive interrupt */

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: drivers/serial/sct_serial.c:222:
+               val |= UART_CR_RIE;     /* Enable receive interrupt */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: drivers/serial/sct_serial.c:222:
+               val |= UART_CR_RIE;     /* Enable receive interrupt */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: drivers/serial/sct_serial.c:223:
+               val |= UART_CR_RT;      /* Enable receive timeout $

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: drivers/serial/sct_serial.c:223:
+               val |= UART_CR_RT;      /* Enable receive timeout $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: drivers/serial/sct_serial.c:223:
+               val |= UART_CR_RT;      /* Enable receive timeout $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#329: FILE: drivers/serial/sct_serial.c:224:
+               val |= UART_CR_RT;      /* Enable receive timeout 
+       }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: drivers/serial/sct_serial.c:226:
+       val |= UART_CR_UEN;     /* Enable UART */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: drivers/serial/sct_serial.c:227:
+       writew(val, UART_CR(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: drivers/serial/sct_serial.c:235:
+       int retval = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: drivers/serial/sct_serial.c:237:
+       if ((retval = request_irq(port->irq, sct_uart_rxint, 0,$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#342: FILE: drivers/serial/sct_serial.c:237:
+       if ((retval = request_irq(port->irq, sct_uart_rxint, 0,
[...]
+               return retval;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#342: FILE: drivers/serial/sct_serial.c:237:
+       if ((retval = request_irq(port->irq, sct_uart_rxint, 0,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: drivers/serial/sct_serial.c:238:
+                                 "sct_uart", (void *)port))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: drivers/serial/sct_serial.c:238:
+                                 "sct_uart", (void *)port))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: drivers/serial/sct_serial.c:239:
+               return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: drivers/serial/sct_serial.c:239:
+               return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: drivers/serial/sct_serial.c:240:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: drivers/serial/sct_serial.c:242:
+       sct_uart_init_port(port->mapbase, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: drivers/serial/sct_serial.c:243:
+       return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: drivers/serial/sct_serial.c:251:
+       writew(0, UART_CR(port->mapbase));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: drivers/serial/sct_serial.c:253:
+       free_irq(port->irq, port);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: drivers/serial/sct_serial.c:262:
+                       struct ktermios *old)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: drivers/serial/sct_serial.c:262:
+sct_uart_set_termios(struct uart_port *port, struct ktermios *new,
+                       struct ktermios *old)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: drivers/serial/sct_serial.c:262:
+                       struct ktermios *old)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#372: FILE: drivers/serial/sct_serial.c:267:
+       return (readw(UART_ST(port->mapbase)) & UART_ST_TE) ? TIOCSER_TEMT $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: drivers/serial/sct_serial.c:267:
+       return (readw(UART_ST(port->mapbase)) & UART_ST_TE) ? TIOCSER_TEMT $

WARNING:CONST_STRUCT: struct uart_ops should normally be const
#379: FILE: drivers/serial/sct_serial.c:273:
+static struct uart_ops sct_uart_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: drivers/serial/sct_serial.c:274:
+       .tx_empty       = sct_uart_tx_empty,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: drivers/serial/sct_serial.c:275:
+       .stop_rx        = sct_uart_stop_rx,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: drivers/serial/sct_serial.c:276:
+       .start_tx       = sct_uart_start_tx,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: drivers/serial/sct_serial.c:277:
+       .startup        = sct_uart_startup,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: drivers/serial/sct_serial.c:278:
+       .shutdown       = sct_uart_shutdown,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: drivers/serial/sct_serial.c:279:
+       .type           = sct_uart_type,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: drivers/serial/sct_serial.c:280:
+       .config_port    = sct_uart_config_port,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: drivers/serial/sct_serial.c:281:
+       .request_port   = sct_uart_request_port,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: drivers/serial/sct_serial.c:282:
+       .release_port   = sct_uart_release_port,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: drivers/serial/sct_serial.c:283:
+       .set_mctrl      = sct_uart_set_mctrl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: drivers/serial/sct_serial.c:284:
+       .set_termios    = sct_uart_set_termios,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: drivers/serial/sct_serial.c:291:
+       .owner          = THIS_MODULE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: drivers/serial/sct_serial.c:292:
+       .driver_name    = "sct_uart",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: drivers/serial/sct_serial.c:293:
+       .dev_name       = "ttyS",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: drivers/serial/sct_serial.c:294:
+       .major           = UART_MAJOR,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: drivers/serial/sct_serial.c:295:
+       .minor          = UART_MINOR_START,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: drivers/serial/sct_serial.c:296:
+       .nr             = UART_PORT_NR,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: drivers/serial/sct_serial.c:298:
+       .cons           = &sct_uart_console,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: drivers/serial/sct_serial.c:300:
+       .cons           = NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: drivers/serial/sct_serial.c:305:
+       {$

CHECK:SPACING: No space is necessary after a cast
#413: FILE: drivers/serial/sct_serial.c:307:
+       .mapbase        = (unsigned int) UART_BASE,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: drivers/serial/sct_serial.c:307:
+       .mapbase        = (unsigned int) UART_BASE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: drivers/serial/sct_serial.c:308:
+       .irq            = UART_IRQ,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: drivers/serial/sct_serial.c:309:
+       .fifosize       = UART_FIFO_SIZE,$

CHECK:SPACING: No space is necessary after a cast
#417: FILE: drivers/serial/sct_serial.c:311:
+       .mapbase        = (unsigned int) UART0_BASE,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: drivers/serial/sct_serial.c:311:
+       .mapbase        = (unsigned int) UART0_BASE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: drivers/serial/sct_serial.c:312:
+       .irq            = UART0_IRQ,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: drivers/serial/sct_serial.c:313:
+       .fifosize       = UART0_FIFO_SIZE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: drivers/serial/sct_serial.c:315:
+       .iotype         = UPIO_MEM,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: drivers/serial/sct_serial.c:316:
+       .ops            = &sct_uart_ops,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: drivers/serial/sct_serial.c:317:
+       .flags          = UPF_BOOT_AUTOCONF,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: drivers/serial/sct_serial.c:318:
+       .line           = 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: drivers/serial/sct_serial.c:319:
+       },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: drivers/serial/sct_serial.c:325:
+       uart_add_one_port(&sct_uart_reg, &sct_uart_port[dev->id]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: drivers/serial/sct_serial.c:326:
+       platform_set_drvdata(dev, &sct_uart_port[dev->id]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: drivers/serial/sct_serial.c:327:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: drivers/serial/sct_serial.c:333:
+       platform_set_drvdata(dev, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: drivers/serial/sct_serial.c:334:
+       uart_remove_one_port(&sct_uart_reg, &sct_uart_port[dev->id]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: drivers/serial/sct_serial.c:335:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: drivers/serial/sct_serial.c:341:
+       uart_suspend_port(&sct_uart_reg, &sct_uart_port[dev->id]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: drivers/serial/sct_serial.c:342:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: drivers/serial/sct_serial.c:348:
+       uart_resume_port(&sct_uart_reg, &sct_uart_port[dev->id]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: drivers/serial/sct_serial.c:349:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: drivers/serial/sct_serial.c:355:
+       .probe          = sct_uart_probe,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: drivers/serial/sct_serial.c:356:
+       .remove         = __exit_p(sct_uart_remove),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: drivers/serial/sct_serial.c:357:
+       .suspend        = sct_uart_suspend,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: drivers/serial/sct_serial.c:358:
+       .resume         = sct_uart_resume,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: drivers/serial/sct_serial.c:359:
+       .driver         = {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: drivers/serial/sct_serial.c:360:
+               .name   = "sct_uart",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: drivers/serial/sct_serial.c:360:
+               .name   = "sct_uart",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: drivers/serial/sct_serial.c:361:
+               .owner  = THIS_MODULE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: drivers/serial/sct_serial.c:361:
+               .owner  = THIS_MODULE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: drivers/serial/sct_serial.c:362:
+       },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: drivers/serial/sct_serial.c:369:
+       int retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: drivers/serial/sct_serial.c:371:
+       if ((retval = uart_register_driver(&sct_uart_reg)))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#477: FILE: drivers/serial/sct_serial.c:371:
+       if ((retval = uart_register_driver(&sct_uart_reg)))
+               return retval;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#477: FILE: drivers/serial/sct_serial.c:371:
+       if ((retval = uart_register_driver(&sct_uart_reg)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: drivers/serial/sct_serial.c:372:
+               return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: drivers/serial/sct_serial.c:372:
+               return retval;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: drivers/serial/sct_serial.c:374:
+       sct_uart_plat_device0 = $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: drivers/serial/sct_serial.c:374:
+       sct_uart_plat_device0 = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: drivers/serial/sct_serial.c:375:
+                                                                0, NULL, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: drivers/serial/sct_serial.c:375:
+                                                                0, NULL, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: drivers/serial/sct_serial.c:375:
+                                                                0, NULL, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: drivers/serial/sct_serial.c:376:
+       if (IS_ERR(sct_uart_plat_device0)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#484: FILE: drivers/serial/sct_serial.c:376:
+       if (IS_ERR(sct_uart_plat_device0)) {
+               uart_unregister_driver(&sct_uart_reg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: drivers/serial/sct_serial.c:377:
+               uart_unregister_driver(&sct_uart_reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: drivers/serial/sct_serial.c:377:
+               uart_unregister_driver(&sct_uart_reg);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: drivers/serial/sct_serial.c:378:
+               return PTR_ERR(sct_uart_plat_device0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: drivers/serial/sct_serial.c:378:
+               return PTR_ERR(sct_uart_plat_device0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: drivers/serial/sct_serial.c:379:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: drivers/serial/sct_serial.c:381:
+       if ((retval = platform_driver_register(&sct_uart_driver))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#489: FILE: drivers/serial/sct_serial.c:381:
+       if ((retval = platform_driver_register(&sct_uart_driver))) {
+               platform_device_unregister(sct_uart_plat_device0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#489: FILE: drivers/serial/sct_serial.c:381:
+       if ((retval = platform_driver_register(&sct_uart_driver))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: drivers/serial/sct_serial.c:382:
+               platform_device_unregister(sct_uart_plat_device0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: drivers/serial/sct_serial.c:382:
+               platform_device_unregister(sct_uart_plat_device0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: drivers/serial/sct_serial.c:383:
+               uart_unregister_driver(&sct_uart_reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: drivers/serial/sct_serial.c:383:
+               uart_unregister_driver(&sct_uart_reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: drivers/serial/sct_serial.c:384:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: drivers/serial/sct_serial.c:385:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: drivers/serial/sct_serial.c:391:
+       platform_driver_unregister(&sct_uart_driver);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: drivers/serial/sct_serial.c:392:
+       platform_device_unregister(sct_uart_plat_device0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: drivers/serial/sct_serial.c:393:
+       uart_unregister_driver(&sct_uart_reg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: drivers/serial/sct_serial.c:404:
+       unsigned int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: drivers/serial/sct_serial.c:406:
+       for (i = 0; *s != '\0'; i++, s++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#514: FILE: drivers/serial/sct_serial.c:406:
+       for (i = 0; *s != '\0'; i++, s++)
+               send_char(*s);

ERROR:CODE_INDENT: code indent should use tabs where possible
#515: FILE: drivers/serial/sct_serial.c:407:
+               send_char(*s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: drivers/serial/sct_serial.c:407:
+               send_char(*s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: drivers/serial/sct_serial.c:409:
+       unsigned int i, base = UART0_BASE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: drivers/serial/sct_serial.c:410:
+       unsigned short val = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: drivers/serial/sct_serial.c:412:
+       if (readw(UART_CR(base)) == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#520: FILE: drivers/serial/sct_serial.c:412:
+       if (readw(UART_CR(base)) == 0) {
[...]
+               writew(0, UART_ERR(base));

ERROR:CODE_INDENT: code indent should use tabs where possible
#521: FILE: drivers/serial/sct_serial.c:413:
+               /* Clear error and status register */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: drivers/serial/sct_serial.c:414:
+               writew(0, UART_ERR(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: drivers/serial/sct_serial.c:414:
+               writew(0, UART_ERR(base));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: drivers/serial/sct_serial.c:415:
+               writew(0, UART_ST(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: drivers/serial/sct_serial.c:415:
+               writew(0, UART_ST(base));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: drivers/serial/sct_serial.c:417:
+               /* Set UART Control Register. 8-N-1 */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: drivers/serial/sct_serial.c:418:
+               val |= UART_CR_8BITS;   /* Word Length Definition=8 Bits $

ERROR:CODE_INDENT: code indent should use tabs where possible
#526: FILE: drivers/serial/sct_serial.c:418:
+               val |= UART_CR_8BITS;   /* Word Length Definition=8 Bits $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: drivers/serial/sct_serial.c:418:
+               val |= UART_CR_8BITS;   /* Word Length Definition=8 Bits $

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: drivers/serial/sct_serial.c:419:
+               val &= ~UART_CR_PEN;    /* Disable Party Check */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#528: FILE: drivers/serial/sct_serial.c:419:
+               val |= UART_CR_8BITS;   /* Word Length Definition=8 Bits 
+               val &= ~UART_CR_PEN;    /* Disable Party Check */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: drivers/serial/sct_serial.c:420:
+               val &= ~UART_CR_SBSEL;  /* Stop-Bit Size Selection: 1 Stop $

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: drivers/serial/sct_serial.c:420:
+               val &= ~UART_CR_SBSEL;  /* Stop-Bit Size Selection: 1 Stop $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: drivers/serial/sct_serial.c:420:
+               val &= ~UART_CR_SBSEL;  /* Stop-Bit Size Selection: 1 Stop $

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: drivers/serial/sct_serial.c:421:
+               val |= UART_CR_FEN;     /* Enable FIFO buffer */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#531: FILE: drivers/serial/sct_serial.c:421:
+               val &= ~UART_CR_SBSEL;  /* Stop-Bit Size Selection: 1 Stop 
+               val |= UART_CR_FEN;     /* Enable FIFO buffer */

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: drivers/serial/sct_serial.c:422:
+               val |= UART_CR_UEN;     /* Enable UART */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: drivers/serial/sct_serial.c:422:
+               val |= UART_CR_UEN;     /* Enable UART */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#533: FILE: drivers/serial/sct_serial.c:423:
+               writew(val, UART_CR(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: drivers/serial/sct_serial.c:423:
+               writew(val, UART_CR(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: drivers/serial/sct_serial.c:424:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: drivers/serial/sct_serial.c:427:
+       writew(UART_BAUDRATE, UART_BUD(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: drivers/serial/sct_serial.c:429:
+       for (i = 0; *s != '\0'; i++, s++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#539: FILE: drivers/serial/sct_serial.c:429:
+       for (i = 0; *s != '\0'; i++, s++) {
[...]
+               while (readw(UART_ST(base)) & UART_ST_BY);

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: drivers/serial/sct_serial.c:430:
+               /* wait until not busy */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: drivers/serial/sct_serial.c:431:
+               while (readw(UART_ST(base)) & UART_ST_BY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: drivers/serial/sct_serial.c:431:
+               while (readw(UART_ST(base)) & UART_ST_BY);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#541: FILE: drivers/serial/sct_serial.c:431:
+               while (readw(UART_ST(base)) & UART_ST_BY);

ERROR:CODE_INDENT: code indent should use tabs where possible
#542: FILE: drivers/serial/sct_serial.c:432:
+               writeb(*s, UART_DR(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: drivers/serial/sct_serial.c:432:
+               writeb(*s, UART_DR(base));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: drivers/serial/sct_serial.c:434:
+               if (*s == '\n') {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: drivers/serial/sct_serial.c:434:
+               if (*s == '\n') {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#544: FILE: drivers/serial/sct_serial.c:434:
+               if (*s == '\n') {
+                       while (readw(UART_ST(base)) & UART_ST_BY);

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: drivers/serial/sct_serial.c:435:
+                       while (readw(UART_ST(base)) & UART_ST_BY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: drivers/serial/sct_serial.c:435:
+                       while (readw(UART_ST(base)) & UART_ST_BY);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#545: FILE: drivers/serial/sct_serial.c:435:
+                       while (readw(UART_ST(base)) & UART_ST_BY);

ERROR:CODE_INDENT: code indent should use tabs where possible
#546: FILE: drivers/serial/sct_serial.c:436:
+                       writeb('\r', UART_DR(base));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: drivers/serial/sct_serial.c:436:
+                       writeb('\r', UART_DR(base));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: drivers/serial/sct_serial.c:437:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: drivers/serial/sct_serial.c:437:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: drivers/serial/sct_serial.c:438:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: drivers/serial/sct_serial.c:445:
+       int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: drivers/serial/sct_serial.c:447:
+       for (i = 0; i < count; i++, s++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#557: FILE: drivers/serial/sct_serial.c:447:
+       for (i = 0; i < count; i++, s++)
+               sct_uart_putc(&sct_uart_port[con->index], *s);

ERROR:CODE_INDENT: code indent should use tabs where possible
#558: FILE: drivers/serial/sct_serial.c:448:
+               sct_uart_putc(&sct_uart_port[con->index], *s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: drivers/serial/sct_serial.c:448:
+               sct_uart_putc(&sct_uart_port[con->index], *s);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#563: FILE: drivers/serial/sct_serial.c:453:
+                               int *parity, int *bits)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: drivers/serial/sct_serial.c:453:
+sct_uart_console_get_options(struct uart_port *port, int *baud,
+                               int *parity, int *bits)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: drivers/serial/sct_serial.c:453:
+                               int *parity, int *bits)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: drivers/serial/sct_serial.c:455:
+       *parity = 'n';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: drivers/serial/sct_serial.c:456:
+       *bits = 8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: drivers/serial/sct_serial.c:457:
+       *baud = 115200;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: drivers/serial/sct_serial.c:463:
+       struct uart_port *port;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: drivers/serial/sct_serial.c:464:
+       int baud, bits, parity, flow;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: drivers/serial/sct_serial.c:466:
+       if (con->index == -1 || con->index >= UART_PORT_NR)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#576: FILE: drivers/serial/sct_serial.c:466:
+       if (con->index == -1 || con->index >= UART_PORT_NR)
+               con->index = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: drivers/serial/sct_serial.c:467:
+               con->index = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: drivers/serial/sct_serial.c:467:
+               con->index = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: drivers/serial/sct_serial.c:469:
+       port = &sct_uart_port[con->index];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: drivers/serial/sct_serial.c:471:
+       if (options)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#581: FILE: drivers/serial/sct_serial.c:471:
+       if (options)
+               uart_parse_options(options, &baud, &parity, &bits, &flow);

ERROR:CODE_INDENT: code indent should use tabs where possible
#582: FILE: drivers/serial/sct_serial.c:472:
+               uart_parse_options(options, &baud, &parity, &bits, &flow);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: drivers/serial/sct_serial.c:472:
+               uart_parse_options(options, &baud, &parity, &bits, &flow);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: drivers/serial/sct_serial.c:473:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#583: FILE: drivers/serial/sct_serial.c:473:
+       else
+               sct_uart_console_get_options(port, &baud, &parity, &bits);

ERROR:CODE_INDENT: code indent should use tabs where possible
#584: FILE: drivers/serial/sct_serial.c:474:
+               sct_uart_console_get_options(port, &baud, &parity, &bits);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: drivers/serial/sct_serial.c:474:
+               sct_uart_console_get_options(port, &baud, &parity, &bits);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#586: FILE: drivers/serial/sct_serial.c:476:
+       return uart_set_options(port, con, baud, parity, bits, flow);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: drivers/serial/sct_serial.c:482:
+       return 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#595: FILE: drivers/serial/sct_serial.c:485:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: drivers/serial/sct_serial.c:487:
+       .name           = "ttyS",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: drivers/serial/sct_serial.c:488:
+       .write          = sct_uart_console_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: drivers/serial/sct_serial.c:489:
+       .device         = uart_console_device,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: drivers/serial/sct_serial.c:490:
+       .setup          = sct_uart_console_setup,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: drivers/serial/sct_serial.c:491:
+       .early_setup    = sct_uart_console_early_setup,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: drivers/serial/sct_serial.c:492:
+       .flags          = CON_PRINTBUFFER,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: drivers/serial/sct_serial.c:493:
+       .index          = -1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: drivers/serial/sct_serial.c:494:
+       .data           = &sct_uart_reg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: drivers/serial/sct_serial.c:498:
+       .name   = "uart",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: drivers/serial/sct_serial.c:499:
+       .write  = sct_uart_console_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: drivers/serial/sct_serial.c:500:
+       .flags  = CON_PRINTBUFFER | CON_BOOT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#611: FILE: drivers/serial/sct_serial.c:501:
+       .index  = -1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: drivers/serial/sct_serial.c:509:
+       sct_uart_init_port(UART_BASE, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: drivers/serial/sct_serial.c:511:
+       sct_uart_init_port(UART0_BASE, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: drivers/serial/sct_serial.c:513:
+       register_console(&sct_uart_console);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: drivers/serial/sct_serial.c:514:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: drivers/serial/sct_serial.c:525:
+       char *options;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: drivers/serial/sct_serial.c:527:
+       options = strstr(cmdline, "sct_uart,");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: drivers/serial/sct_serial.c:529:
+       if (!options) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#639: FILE: drivers/serial/sct_serial.c:529:
+       if (!options) {
+               options = strstr(cmdline, "uart,");

ERROR:CODE_INDENT: code indent should use tabs where possible
#640: FILE: drivers/serial/sct_serial.c:530:
+               options = strstr(cmdline, "uart,");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: drivers/serial/sct_serial.c:530:
+               options = strstr(cmdline, "uart,");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#641: FILE: drivers/serial/sct_serial.c:531:
+               if (!options)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: drivers/serial/sct_serial.c:531:
+               if (!options)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#641: FILE: drivers/serial/sct_serial.c:531:
+               if (!options)
+                       return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#642: FILE: drivers/serial/sct_serial.c:532:
+                       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: drivers/serial/sct_serial.c:532:
+                       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: drivers/serial/sct_serial.c:533:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: drivers/serial/sct_serial.c:536:
+       sct_uart_init_port(UART_BASE, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: drivers/serial/sct_serial.c:538:
+       sct_uart_init_port(UART0_BASE, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: drivers/serial/sct_serial.c:540:
+       register_console(&sct_early_uart_console);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: drivers/serial/sct_serial.c:541:
+       return 0;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#653: FILE: drivers/serial/sct_serial.c:543:
+}
+early_param("earlycon", setup_early_sct_uart_console);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#665: FILE: drivers/serial/sct_serial.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#666: FILE: drivers/serial/sct_serial.h:2:
+ * File: linux/drivers/serial/sct_serial.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#688: FILE: drivers/serial/sct_serial.h:24:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#730: FILE: drivers/serial/sct_serial.h:66:
+#define UART_RBR               (UART_BASE+0x00)        /* Rx buffer */
                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#731: FILE: drivers/serial/sct_serial.h:67:
+#define UART_THR               (UART_BASE+0x00)        /* Tx buffer */
                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#732: FILE: drivers/serial/sct_serial.h:68:
+#define UART_IER               (UART_BASE+0x04)        /* interrupt $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#732: FILE: drivers/serial/sct_serial.h:68:
+#define UART_IER               (UART_BASE+0x04)        /* interrupt 
                                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#734: FILE: drivers/serial/sct_serial.h:69:
+#define UART_IER               (UART_BASE+0x04)        /* interrupt 
+#define UART_LSR               (UART_BASE+0x14)        /* line status */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#736: FILE: drivers/serial/sct_serial.h:71:
+#define UART_DR(_base)         (_base+0x00)            /* Rx\Tx buffer */
                                      ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_base' may be better as '(_base)' to avoid precedence issues
#736: FILE: drivers/serial/sct_serial.h:71:
+#define UART_DR(_base)         (_base+0x00)            /* Rx\Tx buffer */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#737: FILE: drivers/serial/sct_serial.h:72:
+#define UART_ERR(_base)                (_base+0x04)            /* Rx\Tx $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#737: FILE: drivers/serial/sct_serial.h:72:
+#define UART_ERR(_base)                (_base+0x04)            /* Rx\Tx 
                                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_base' may be better as '(_base)' to avoid precedence issues
#737: FILE: drivers/serial/sct_serial.h:72:
+#define UART_ERR(_base)                (_base+0x04)            /* Rx\Tx 

WARNING:TYPO_SPELLING: 'Conrol' may be misspelled - perhaps 'Control'?
#739: FILE: drivers/serial/sct_serial.h:73:
+#define UART_CR(_base)         (_base+0x08)            /* Conrol register 
                                                           ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: drivers/serial/sct_serial.h:73:
+#define UART_CR(_base)         (_base+0x08)            /* Conrol register $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#739: FILE: drivers/serial/sct_serial.h:73:
+#define UART_ERR(_base)                (_base+0x04)            /* Rx\Tx 
+#define UART_CR(_base)         (_base+0x08)            /* Conrol register 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#741: FILE: drivers/serial/sct_serial.h:74:
+#define UART_BUD(_base)                (_base+0x0C)            /* Baud $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#741: FILE: drivers/serial/sct_serial.h:74:
+#define UART_CR(_base)         (_base+0x08)            /* Conrol register 
+#define UART_BUD(_base)                (_base+0x0C)            /* Baud 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#743: FILE: drivers/serial/sct_serial.h:75:
+#define UART_ST(_base)         (_base+0x10)            /* Status Register $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#743: FILE: drivers/serial/sct_serial.h:75:
+#define UART_BUD(_base)                (_base+0x0C)            /* Baud 
+#define UART_ST(_base)         (_base+0x10)            /* Status Register 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: drivers/serial/sct_serial.h:76:
+#define UART_IRDABUD(_base)    (_base+0x14)            /* IRDA Baud Rate $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#745: FILE: drivers/serial/sct_serial.h:76:
+#define UART_ST(_base)         (_base+0x10)            /* Status Register 
+#define UART_IRDABUD(_base)    (_base+0x14)            /* IRDA Baud Rate 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#747: FILE: drivers/serial/sct_serial.h:77:
+#define UART_IRDALP(_base)     (_base+0x18)            /* IRDA Low Power $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#747: FILE: drivers/serial/sct_serial.h:77:
+#define UART_IRDABUD(_base)    (_base+0x14)            /* IRDA Baud Rate 
+#define UART_IRDALP(_base)     (_base+0x18)            /* IRDA Low Power 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#749: FILE: drivers/serial/sct_serial.h:78:
+#define UART_IRDACR(_base)     (_base+0x1C)            /* IRDA Control $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#749: FILE: drivers/serial/sct_serial.h:78:
+#define UART_IRDALP(_base)     (_base+0x18)            /* IRDA Low Power 
+#define UART_IRDACR(_base)     (_base+0x1C)            /* IRDA Control 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#751: FILE: drivers/serial/sct_serial.h:79:
+#define UART_TWTR(_base)       (_base+0x20)            /* Transmitter $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#751: FILE: drivers/serial/sct_serial.h:79:
+#define UART_IRDACR(_base)     (_base+0x1C)            /* IRDA Control 
+#define UART_TWTR(_base)       (_base+0x20)            /* Transmitter 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#753: FILE: drivers/serial/sct_serial.h:80:
+#define UART_TWTR(_base)       (_base+0x20)            /* Transmitter 
+#endif

CHECK:LINE_SPACING: Please don't use multiple blank lines
#755: FILE: drivers/serial/sct_serial.h:82:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: drivers/serial/sct_serial.h:87:
+#define UART_ERR_RXD           (1 << 15)       /* UART RXD signal, 0: in $

CHECK:BIT_MACRO: Prefer using the BIT macro
#760: FILE: drivers/serial/sct_serial.h:87:
+#define UART_ERR_RXD           (1 << 15)       /* UART RXD signal, 0: in 

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#762: FILE: drivers/serial/sct_serial.h:88:
+                                                       1: receive data $

ERROR:CODE_INDENT: code indent should use tabs where possible
#762: FILE: drivers/serial/sct_serial.h:88:
+                                                       1: receive data $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#762: FILE: drivers/serial/sct_serial.h:88:
+#define UART_ERR_RXD           (1 << 15)       /* UART RXD signal, 0: in 
+                                                       1: receive data 

CHECK:BIT_MACRO: Prefer using the BIT macro
#765: FILE: drivers/serial/sct_serial.h:90:
+#define UART_ERR_BE            (1 << 2)        /* break error */

CHECK:BIT_MACRO: Prefer using the BIT macro
#766: FILE: drivers/serial/sct_serial.h:91:
+#define UART_ERR_PE            (1 << 1)        /* parity error */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#773: FILE: drivers/serial/sct_serial.h:98:
+#define UART_CR_RIE            (1 << 15)       /* receive interrupt $

CHECK:BIT_MACRO: Prefer using the BIT macro
#773: FILE: drivers/serial/sct_serial.h:98:
+#define UART_CR_RIE            (1 << 15)       /* receive interrupt 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#775: FILE: drivers/serial/sct_serial.h:99:
+#define UART_CR_TIE            (1 << 14)       /* transmit interrupt $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#775: FILE: drivers/serial/sct_serial.h:99:
+#define UART_CR_RIE            (1 << 15)       /* receive interrupt 
+#define UART_CR_TIE            (1 << 14)       /* transmit interrupt 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#777: FILE: drivers/serial/sct_serial.h:100:
+#define UART_CR_RT             (1 << 13)       /* receive timeout $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#777: FILE: drivers/serial/sct_serial.h:100:
+#define UART_CR_TIE            (1 << 14)       /* transmit interrupt 
+#define UART_CR_RT             (1 << 13)       /* receive timeout 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#779: FILE: drivers/serial/sct_serial.h:101:
+#define UART_CR_RT             (1 << 13)       /* receive timeout 
+#define UART_CR_UEN            (1 << 12)       /* UART enable */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#780: FILE: drivers/serial/sct_serial.h:102:
+#define UART_CR_MSIE           (1 << 11)       /* modem status interrupt $

CHECK:BIT_MACRO: Prefer using the BIT macro
#780: FILE: drivers/serial/sct_serial.h:102:
+#define UART_CR_MSIE           (1 << 11)       /* modem status interrupt 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#782: FILE: drivers/serial/sct_serial.h:103:
+#define UART_CR_MSIE           (1 << 11)       /* modem status interrupt 
+#define UART_CR_SLT            (1 << 10)       /* self loop test */

CHECK:BIT_MACRO: Prefer using the BIT macro
#783: FILE: drivers/serial/sct_serial.h:104:
+#define UART_CR_MEN            (1 << 9)        /* modem enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#784: FILE: drivers/serial/sct_serial.h:105:
+#define UART_CR_WKUEN          (1 << 8)        /* wake up enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#789: FILE: drivers/serial/sct_serial.h:110:
+#define UART_CR_FEN            (1 << 4)        /* FIFO buffer enable */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#790: FILE: drivers/serial/sct_serial.h:111:
+#define UART_CR_SBSEL          (1 << 3)        /* stop bit size $

CHECK:BIT_MACRO: Prefer using the BIT macro
#790: FILE: drivers/serial/sct_serial.h:111:
+#define UART_CR_SBSEL          (1 << 3)        /* stop bit size 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#792: FILE: drivers/serial/sct_serial.h:112:
+#define UART_CR_PSEL           (1 << 2)        /* parity selection, 0: $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#792: FILE: drivers/serial/sct_serial.h:112:
+#define UART_CR_SBSEL          (1 << 3)        /* stop bit size 
+#define UART_CR_PSEL           (1 << 2)        /* parity selection, 0: 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#794: FILE: drivers/serial/sct_serial.h:113:
+#define UART_CR_PSEL           (1 << 2)        /* parity selection, 0: 
+#define UART_CR_PEN            (1 << 1)        /* parity enable */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: drivers/serial/sct_serial.h:120:
+#define UART_ST_RI             (1 << 15)       /* receive interrupt flag $

CHECK:BIT_MACRO: Prefer using the BIT macro
#801: FILE: drivers/serial/sct_serial.h:120:
+#define UART_ST_RI             (1 << 15)       /* receive interrupt flag 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: drivers/serial/sct_serial.h:121:
+#define UART_ST_TI             (1 << 14)       /* transmit interrupt flag $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#803: FILE: drivers/serial/sct_serial.h:121:
+#define UART_ST_RI             (1 << 15)       /* receive interrupt flag 
+#define UART_ST_TI             (1 << 14)       /* transmit interrupt flag 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#805: FILE: drivers/serial/sct_serial.h:122:
+#define UART_ST_RT             (1 << 13)       /* receive timeout $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#805: FILE: drivers/serial/sct_serial.h:122:
+#define UART_ST_TI             (1 << 14)       /* transmit interrupt flag 
+#define UART_ST_RT             (1 << 13)       /* receive timeout 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#807: FILE: drivers/serial/sct_serial.h:123:
+#define UART_ST_MIT            (1 << 12)       /* modem status interrupt $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#807: FILE: drivers/serial/sct_serial.h:123:
+#define UART_ST_RT             (1 << 13)       /* receive timeout 
+#define UART_ST_MIT            (1 << 12)       /* modem status interrupt 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#809: FILE: drivers/serial/sct_serial.h:124:
+#define UART_ST_MRI            (1 << 10)       /* complement of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#809: FILE: drivers/serial/sct_serial.h:124:
+#define UART_ST_MIT            (1 << 12)       /* modem status interrupt 
+#define UART_ST_MRI            (1 << 10)       /* complement of 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#811: FILE: drivers/serial/sct_serial.h:125:
+#define UART_ST_RTS            (1 << 9)        /* modem output (Request $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#811: FILE: drivers/serial/sct_serial.h:125:
+#define UART_ST_MRI            (1 << 10)       /* complement of 
+#define UART_ST_RTS            (1 << 9)        /* modem output (Request 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#813: FILE: drivers/serial/sct_serial.h:126:
+#define UART_ST_DTR            (1 << 8)        /* modem output (Data $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#813: FILE: drivers/serial/sct_serial.h:126:
+#define UART_ST_RTS            (1 << 9)        /* modem output (Request 
+#define UART_ST_DTR            (1 << 8)        /* modem output (Data 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: drivers/serial/sct_serial.h:127:
+#define UART_ST_TE             (1 << 7)        /* transmit FIFO empty $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#815: FILE: drivers/serial/sct_serial.h:127:
+#define UART_ST_DTR            (1 << 8)        /* modem output (Data 
+#define UART_ST_TE             (1 << 7)        /* transmit FIFO empty 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#817: FILE: drivers/serial/sct_serial.h:128:
+#define UART_ST_RF             (1 << 6)        /* receive FIFO full flag $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#817: FILE: drivers/serial/sct_serial.h:128:
+#define UART_ST_TE             (1 << 7)        /* transmit FIFO empty 
+#define UART_ST_RF             (1 << 6)        /* receive FIFO full flag 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#819: FILE: drivers/serial/sct_serial.h:129:
+#define UART_ST_TF             (1 << 5)        /* transmit FIFO full flag $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#819: FILE: drivers/serial/sct_serial.h:129:
+#define UART_ST_RF             (1 << 6)        /* receive FIFO full flag 
+#define UART_ST_TF             (1 << 5)        /* transmit FIFO full flag 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#821: FILE: drivers/serial/sct_serial.h:130:
+#define UART_ST_RE             (1 << 4)        /* receive FIFO empty flag $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#821: FILE: drivers/serial/sct_serial.h:130:
+#define UART_ST_TF             (1 << 5)        /* transmit FIFO full flag 
+#define UART_ST_RE             (1 << 4)        /* receive FIFO empty flag 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#823: FILE: drivers/serial/sct_serial.h:131:
+#define UART_ST_RE             (1 << 4)        /* receive FIFO empty flag 
+#define UART_ST_BY             (1 << 3)        /* busy */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: drivers/serial/sct_serial.h:132:
+#define UART_ST_MDCD           (1 << 2)        /* complement of $

CHECK:BIT_MACRO: Prefer using the BIT macro
#824: FILE: drivers/serial/sct_serial.h:132:
+#define UART_ST_MDCD           (1 << 2)        /* complement of 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#826: FILE: drivers/serial/sct_serial.h:133:
+#define UART_ST_MDSR           (1 << 1)        /* complement of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#826: FILE: drivers/serial/sct_serial.h:133:
+#define UART_ST_MDCD           (1 << 2)        /* complement of 
+#define UART_ST_MDSR           (1 << 1)        /* complement of 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#828: FILE: drivers/serial/sct_serial.h:134:
+#define UART_ST_MCTS           1               /* complement of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#828: FILE: drivers/serial/sct_serial.h:134:
+#define UART_ST_MDSR           (1 << 1)        /* complement of 
+#define UART_ST_MCTS           1               /* complement of 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#830: FILE: drivers/serial/sct_serial.h:135:
+#define UART_ST_MCTS           1               /* complement of 
+

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#847: FILE: MAINTAINERS:3776:
+P:     Chen Liqin

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#848: FILE: MAINTAINERS:3777:
+M:     liqin.chen@sunplusct.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#848: FILE: MAINTAINERS:3777:
+P:     Chen Liqin
+M:     liqin.chen@sunplusct.com

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#849: FILE: MAINTAINERS:3778:
+P:     Lennox Wu

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#850: FILE: MAINTAINERS:3779:
+M:     lennox.wu@sunplusct.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#850: FILE: MAINTAINERS:3779:
+P:     Lennox Wu
+M:     lennox.wu@sunplusct.com

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#851: FILE: MAINTAINERS:3780:
+W:     http://www.sunplusct.com

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#852: FILE: MAINTAINERS:3781:
+S:     Supported

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'S:' before 'W:'
#852: FILE: MAINTAINERS:3781:
+W:     http://www.sunplusct.com
+S:     Supported

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000142522.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 126 errors, 290 warnings, 29 checks, 776 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000142522.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
