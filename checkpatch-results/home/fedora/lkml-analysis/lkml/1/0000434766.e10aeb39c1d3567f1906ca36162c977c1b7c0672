WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: fs/logfs/logfs.h:1:
+#ifndef logfs_h

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#155: FILE: fs/logfs/logfs.h:6:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#164: FILE: fs/logfs/logfs.h:15:
+
+

WARNING:TYPO_SPELLING: 'stricly' may be misspelled - perhaps 'strictly'?
#167: FILE: fs/logfs/logfs.h:18:
+ * various positions or offsets.  To remove confusion, we stricly
                                                           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#194: FILE: fs/logfs/logfs.h:45:
+ * Levels 1-11 are necessary for robust gc operations and help seperate
                                                                ^^^^^^^^

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#196: FILE: fs/logfs/logfs.h:47:
+ * file data should get seperated into several segments based on simple
                         ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#203: FILE: fs/logfs/logfs.h:54:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#214: FILE: fs/logfs/logfs.h:65:
+#define packed __attribute__((__packed__))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#216: FILE: fs/logfs/logfs.h:67:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#218: FILE: fs/logfs/logfs.h:69:
+	printk("trace: %s:%d: ", __FILE__, __LINE__);		\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#219: FILE: fs/logfs/logfs.h:70:
+	printk("->%s\n", __func__);				\

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#219: FILE: fs/logfs/logfs.h:70:
+	printk("->%s\n", __func__);				\

ERROR:SPACING: space required before the open parenthesis '('
#220: FILE: fs/logfs/logfs.h:71:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#222: FILE: fs/logfs/logfs.h:73:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#226: FILE: fs/logfs/logfs.h:77:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#231: FILE: fs/logfs/logfs.h:82:
+#define LOGFS_BLOCK_MASK (LOGFS_BLOCK_FACTOR-1)
                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#233: FILE: fs/logfs/logfs.h:84:
+#define I0_BLOCKS	(4+16)
                  	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#240: FILE: fs/logfs/logfs.h:91:
+#define I1_INDEX	(4+16)
                 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#241: FILE: fs/logfs/logfs.h:92:
+#define I2_INDEX	(5+16)
                 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#242: FILE: fs/logfs/logfs.h:93:
+#define I3_INDEX	(6+16)
                 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#243: FILE: fs/logfs/logfs.h:94:
+#define I4_INDEX	(7+16)
                 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#244: FILE: fs/logfs/logfs.h:95:
+#define I5_INDEX	(8+16)
                 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#246: FILE: fs/logfs/logfs.h:97:
+#define LOGFS_EMBEDDED_FIELDS	(9+16)
                              	  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#260: FILE: fs/logfs/logfs.h:111:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#282: FILE: fs/logfs/logfs.h:133:
+	 * used, some fields are set to 0 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required after that close brace '}'
#289: FILE: fs/logfs/logfs.h:140:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#291: FILE: fs/logfs/logfs.h:142:
+
+

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#295: FILE: fs/logfs/logfs.h:146:
+#define LOGFS_IF_STILLBORN	0x40000000 /* couldn't write inode in creat() */
                           	                                      ^^^^^

ERROR:SPACING: space required after that close brace '}'
#313: FILE: fs/logfs/logfs.h:164:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#315: FILE: fs/logfs/logfs.h:166:
+
+

ERROR:SPACING: space required after that close brace '}'
#322: FILE: fs/logfs/logfs.h:173:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#324: FILE: fs/logfs/logfs.h:175:
+
+

ERROR:SPACING: space required after that close brace '}'
#338: FILE: fs/logfs/logfs.h:189:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#340: FILE: fs/logfs/logfs.h:191:
+
+

ERROR:SPACING: space required after that close brace '}'
#349: FILE: fs/logfs/logfs.h:200:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#351: FILE: fs/logfs/logfs.h:202:
+
+

ERROR:SPACING: space required after that close brace '}'
#355: FILE: fs/logfs/logfs.h:206:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#357: FILE: fs/logfs/logfs.h:208:
+
+

ERROR:SPACING: space required after that close brace '}'
#368: FILE: fs/logfs/logfs.h:219:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#370: FILE: fs/logfs/logfs.h:221:
+
+

ERROR:SPACING: space required after that close brace '}'
#379: FILE: fs/logfs/logfs.h:230:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#381: FILE: fs/logfs/logfs.h:232:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#393: FILE: fs/logfs/logfs.h:244:
+
+

ERROR:SPACING: space required after that close brace '}'
#400: FILE: fs/logfs/logfs.h:251:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#402: FILE: fs/logfs/logfs.h:253:
+
+

ERROR:SPACING: space required after that close brace '}'
#405: FILE: fs/logfs/logfs.h:256:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#407: FILE: fs/logfs/logfs.h:258:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#411: FILE: fs/logfs/logfs.h:262:
+	u8	d_data[0];	/* XOR between on-medium and actual block,
+				   zlib compressed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#411: FILE: fs/logfs/logfs.h:262:
+				   zlib compressed */

ERROR:SPACING: space required after that close brace '}'
#412: FILE: fs/logfs/logfs.h:263:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#414: FILE: fs/logfs/logfs.h:265:
+
+

ERROR:SPACING: space required after that close brace '}'
#417: FILE: fs/logfs/logfs.h:268:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#419: FILE: fs/logfs/logfs.h:270:
+
+

ERROR:SPACING: space required after that close brace '}'
#422: FILE: fs/logfs/logfs.h:273:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#424: FILE: fs/logfs/logfs.h:275:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#430: FILE: fs/logfs/logfs.h:281:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#436: FILE: fs/logfs/logfs.h:287:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#438: FILE: fs/logfs/logfs.h:289:
+ * entries, next groups contain one entry per level */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#457: FILE: fs/logfs/logfs.h:308:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#461: FILE: fs/logfs/logfs.h:312:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#462: FILE: fs/logfs/logfs.h:313:
+#define LOGFS_SUPER(sb) ((struct logfs_super*)(sb->s_fs_info))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sb' may be better as '(sb)' to avoid precedence issues
#462: FILE: fs/logfs/logfs.h:313:
+#define LOGFS_SUPER(sb) ((struct logfs_super*)(sb->s_fs_info))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#465: FILE: fs/logfs/logfs.h:316:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#475: FILE: fs/logfs/logfs.h:326:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#481: FILE: fs/logfs/logfs.h:332:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#495: FILE: fs/logfs/logfs.h:346:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#509: FILE: fs/logfs/logfs.h:360:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#518: FILE: fs/logfs/logfs.h:369:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#526: FILE: fs/logfs/logfs.h:377:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#570: FILE: fs/logfs/logfs.h:421:
+	struct logfs_journal_entry s_retired[JE_LAST+1]; /* for journal scan */
 	                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#571: FILE: fs/logfs/logfs.h:422:
+	struct logfs_journal_entry s_speculative[JE_LAST+1]; /* dito */
 	                                                ^

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#577: FILE: fs/logfs/logfs.h:428:
+	struct mutex s_w_mutex;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#587: FILE: fs/logfs/logfs.h:438:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#596: FILE: fs/logfs/logfs.h:447:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#597: FILE: fs/logfs/logfs.h:448:
+#define journal_for_each(__i) for (__i=0; __i<LOGFS_JOURNAL_SEGS; __i++)
                                       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#597: FILE: fs/logfs/logfs.h:448:
+#define journal_for_each(__i) for (__i=0; __i<LOGFS_JOURNAL_SEGS; __i++)
                                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__i' - possible side-effects?
#597: FILE: fs/logfs/logfs.h:448:
+#define journal_for_each(__i) for (__i=0; __i<LOGFS_JOURNAL_SEGS; __i++)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#599: FILE: fs/logfs/logfs.h:450:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#604: FILE: fs/logfs/logfs.h:455:
+	BUG();				\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#605: FILE: fs/logfs/logfs.h:456:
+} while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#608: FILE: fs/logfs/logfs.h:459:
+	do { if (unlikely((condition)!=0)) LOGFS_BUG((sb)); } while(0)
 	                             ^

ERROR:SPACING: space required before the open parenthesis '('
#608: FILE: fs/logfs/logfs.h:459:
+	do { if (unlikely((condition)!=0)) LOGFS_BUG((sb)); } while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#610: FILE: fs/logfs/logfs.h:461:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#614: FILE: fs/logfs/logfs.h:465:
+	return cpu_to_be32(crc32(~0, data+skip, len-skip));
 	                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#614: FILE: fs/logfs/logfs.h:465:
+	return cpu_to_be32(crc32(~0, data+skip, len-skip));
 	                                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#617: FILE: fs/logfs/logfs.h:468:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#623: FILE: fs/logfs/logfs.h:474:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#629: FILE: fs/logfs/logfs.h:480:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#634: FILE: fs/logfs/logfs.h:485:
+}
+static inline void free_disk_sum(struct logfs_disk_sum *sum)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#639: FILE: fs/logfs/logfs.h:490:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: fs/logfs/logfs.h:492:
+static inline u64 logfs_block_ofs(struct super_block *sb, u32 segno,
+		u32 blockno)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#647: FILE: fs/logfs/logfs.h:498:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#659: FILE: fs/logfs/logfs.h:510:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#661: FILE: fs/logfs/logfs.h:512:
+extern struct inode_operations logfs_dir_iops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#662: FILE: fs/logfs/logfs.h:513:
+extern struct file_operations logfs_dir_fops;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#665: FILE: fs/logfs/logfs.h:516:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#667: FILE: fs/logfs/logfs.h:518:
+extern struct inode_operations logfs_reg_iops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#668: FILE: fs/logfs/logfs.h:519:
+extern struct file_operations logfs_reg_fops;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#669: FILE: fs/logfs/logfs.h:520:
+extern struct address_space_operations logfs_reg_aops;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#673: FILE: fs/logfs/logfs.h:524:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#679: FILE: fs/logfs/logfs.h:530:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#692: FILE: fs/logfs/logfs.h:543:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#698: FILE: fs/logfs/logfs.h:549:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#705: FILE: fs/logfs/logfs.h:556:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: fs/logfs/logfs.h:560:
+int logfs_inode_write(struct inode *inode, const void *buf, size_t n,
+		loff_t pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: fs/logfs/logfs.h:578:
+s64 logfs_segment_write(struct inode *inode, void *buf, u64 pos, int level,
+		int alloc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#742: FILE: fs/logfs/logfs.h:593:
+void *logfs_device_getpage(struct super_block *sb, u64 offset,
+		struct page **page);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#748: FILE: fs/logfs/logfs.h:599:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#752: FILE: fs/logfs/logfs.h:603:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#756: FILE: fs/logfs/logfs.h:607:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#760: FILE: fs/logfs/logfs.h:611:
+	struct logfs_super *super = LOGFS_SUPER(sb);
+	return ((u64)segno << super->s_segshift) + ofs;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#763: FILE: fs/logfs/logfs.h:614:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: fs/logfs/logfs.h:616:
+static inline void device_read(struct super_block *sb, u32 segno, u32 ofs,
+		size_t len, void *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#768: FILE: fs/logfs/logfs.h:619:
+	int err = mtdread(sb, dev_ofs(sb, segno, ofs), len, buf);
+	LOGFS_BUG_ON(err, sb);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#771: FILE: fs/logfs/logfs.h:622:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#774: FILE: fs/logfs/logfs.h:625:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#779: FILE: fs/logfs/dir.c:1:
+/**

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#783: FILE: fs/logfs/dir.c:5:
+ * created/removed/altered in seperate operations.  Therefore we need to do
                               ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#835: FILE: fs/logfs/dir.c:57:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#842: FILE: fs/logfs/dir.c:64:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#849: FILE: fs/logfs/dir.c:71:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#855: FILE: fs/logfs/dir.c:77:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: fs/logfs/dir.c:79:
+static int write_dir(struct inode *dir, struct logfs_disk_dentry *dd,
+		loff_t pos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#862: FILE: fs/logfs/dir.c:84:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#866: FILE: fs/logfs/dir.c:88:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#870: FILE: fs/logfs/dir.c:92:
+	s64 new_pos = logfs_seek_data(inode, pos);
+	return max((s64)pos, new_pos - 1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#873: FILE: fs/logfs/dir.c:95:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#875: FILE: fs/logfs/dir.c:97:
+static int __logfs_dir_walk(struct inode *dir, struct dentry *dentry,
+		dir_callback handler, struct logfs_disk_dentry *dd, loff_t *pos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#890: FILE: fs/logfs/dir.c:112:
+		BUG_ON(dd->namelen == 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#904: FILE: fs/logfs/dir.c:126:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#906: FILE: fs/logfs/dir.c:128:
+static int logfs_dir_walk(struct inode *dir, struct dentry *dentry,
+		dir_callback handler)

WARNING:LINE_SPACING: Missing a blank line after declarations
#910: FILE: fs/logfs/dir.c:132:
+	loff_t pos = 0;
+	return __logfs_dir_walk(dir, dentry, handler, &dd, &pos);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#913: FILE: fs/logfs/dir.c:135:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: fs/logfs/dir.c:137:
+static int logfs_lookup_handler(struct inode *dir, struct dentry *dentry,
+		struct logfs_disk_dentry *dd, loff_t pos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#925: FILE: fs/logfs/dir.c:147:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#927: FILE: fs/logfs/dir.c:149:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#927: FILE: fs/logfs/dir.c:149:
+static struct dentry *logfs_lookup(struct inode *dir, struct dentry *dentry,
+		struct nameidata *nd)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#935: FILE: fs/logfs/dir.c:157:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#938: FILE: fs/logfs/dir.c:160:
+static int logfs_unlink_handler(struct inode *dir, struct dentry *dentry,
+		struct logfs_disk_dentry *dd, loff_t pos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#943: FILE: fs/logfs/dir.c:165:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#956: FILE: fs/logfs/dir.c:178:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#969: FILE: fs/logfs/dir.c:191:
+	inode->i_ctime = dir->i_ctime = dir->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#983: FILE: fs/logfs/dir.c:205:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#985: FILE: fs/logfs/dir.c:207:
+static int logfs_empty_handler(struct inode *dir, struct dentry *dentry,
+		struct logfs_disk_dentry *dd, loff_t pos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#989: FILE: fs/logfs/dir.c:211:
+}
+static inline int logfs_empty_dir(struct inode *dir)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#994: FILE: fs/logfs/dir.c:216:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1005: FILE: fs/logfs/dir.c:227:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1007: FILE: fs/logfs/dir.c:229:
+ * way to combine the two copies */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1015: FILE: fs/logfs/dir.c:237:
+	BUG_ON(pos<0);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1015: FILE: fs/logfs/dir.c:237:
+	BUG_ON(pos<0);
 	          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1018: FILE: fs/logfs/dir.c:240:
+		struct inode *dir = file->f_dentry->d_inode;
+		err = read_dir(dir, &dd, pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1027: FILE: fs/logfs/dir.c:249:
+		BUG_ON(dd.namelen == 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1030: FILE: fs/logfs/dir.c:252:
+		if (filldir(buf, dd.name, be16_to_cpu(dd.namelen), pos,
+					be64_to_cpu(dd.ino), dd.type))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1038: FILE: fs/logfs/dir.c:260:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1054: FILE: fs/logfs/dir.c:276:
+		ino_t pino = parent_ino(file->f_dentry);
+		if (filldir(buf, "..", 2, 2, pino, DT_DIR) < 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1061: FILE: fs/logfs/dir.c:283:
+		printk("LOGFS readdir error=%x, pos=%llx\n", err, file->f_pos);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1065: FILE: fs/logfs/dir.c:287:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1071: FILE: fs/logfs/dir.c:293:
+}
+static void logfs_set_name(struct logfs_disk_dentry *dd, struct qstr *name)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1073: FILE: fs/logfs/dir.c:295:
+	BUG_ON(name->len > LOGFS_MAX_NAMELEN);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1077: FILE: fs/logfs/dir.c:299:
+}
+static int logfs_write_dir(struct inode *dir, struct dentry *dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1078: FILE: fs/logfs/dir.c:300:
+static int logfs_write_dir(struct inode *dir, struct dentry *dentry,
+		struct inode *inode)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1088: FILE: fs/logfs/dir.c:310:
+	dir->i_ctime = dir->i_mtime = CURRENT_TIME;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1090: FILE: fs/logfs/dir.c:312:
+	 * not when reading. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1098: FILE: fs/logfs/dir.c:320:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1100: FILE: fs/logfs/dir.c:322:
+static int __logfs_create(struct inode *dir, struct dentry *dentry,
+		struct inode *inode, const char *dest, long destlen)

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#1113: FILE: fs/logfs/dir.c:335:
+	else /* creat/mkdir/mknod */
 	        ^^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1121: FILE: fs/logfs/dir.c:343:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1133: FILE: fs/logfs/dir.c:355:
+		iput(inode);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1140: FILE: fs/logfs/dir.c:362:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1142: FILE: fs/logfs/dir.c:364:
+#define LOGFS_LINK_MAX (1<<30)
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1142: FILE: fs/logfs/dir.c:364:
+#define LOGFS_LINK_MAX (1<<30)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#1151: FILE: fs/logfs/dir.c:373:
+	 * correct for mknod, creat, etc.?  Smells like the vfs *should*
 	                      ^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1164: FILE: fs/logfs/dir.c:386:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1166: FILE: fs/logfs/dir.c:388:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1166: FILE: fs/logfs/dir.c:388:
+static int logfs_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1181: FILE: fs/logfs/dir.c:403:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: fs/logfs/dir.c:405:
+static int logfs_mknod(struct inode *dir, struct dentry *dentry, int mode,
+		dev_t rdev)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1187: FILE: fs/logfs/dir.c:409:
+	BUG_ON(dentry->d_name.len > LOGFS_MAX_NAMELEN);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1198: FILE: fs/logfs/dir.c:420:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1199: FILE: fs/logfs/dir.c:421:
+static struct inode_operations ext2_symlink_iops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1205: FILE: fs/logfs/dir.c:427:
+static int logfs_symlink(struct inode *dir, struct dentry *dentry,
+		const char *target)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1213: FILE: fs/logfs/dir.c:435:
+	inode = logfs_new_inode(dir, S_IFLNK | S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1223: FILE: fs/logfs/dir.c:445:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1224: FILE: fs/logfs/dir.c:446:
+static int logfs_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                              ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1229: FILE: fs/logfs/dir.c:451:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1231: FILE: fs/logfs/dir.c:453:
+static int logfs_link(struct dentry *old_dentry, struct inode *dir,
+		struct dentry *dentry)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1238: FILE: fs/logfs/dir.c:460:
+	inode->i_ctime = dir->i_ctime = dir->i_mtime = CURRENT_TIME;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1245: FILE: fs/logfs/dir.c:467:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1247: FILE: fs/logfs/dir.c:469:
+static int logfs_nop_handler(struct inode *dir, struct dentry *dentry,
+		struct logfs_disk_dentry *dd, loff_t pos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1251: FILE: fs/logfs/dir.c:473:
+}
+static inline int logfs_get_dd(struct inode *dir, struct dentry *dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1252: FILE: fs/logfs/dir.c:474:
+static inline int logfs_get_dd(struct inode *dir, struct dentry *dentry,
+		struct logfs_disk_dentry *dd, loff_t *pos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1258: FILE: fs/logfs/dir.c:480:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1263: FILE: fs/logfs/dir.c:485:
+static int logfs_rename_local(struct inode *dir, struct dentry *old_dentry,
+		struct dentry *new_dentry)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1277: FILE: fs/logfs/dir.c:499:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1279: FILE: fs/logfs/dir.c:501:
+static int logfs_delete_dd(struct inode *dir, struct logfs_disk_dentry *dd,
+		loff_t pos)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1289: FILE: fs/logfs/dir.c:511:
+	dir->i_ctime = dir->i_mtime = CURRENT_TIME;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1295: FILE: fs/logfs/dir.c:517:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1301: FILE: fs/logfs/dir.c:523:
+static int logfs_rename_cross(struct inode *old_dir, struct dentry *old_dentry,
+		struct inode *new_dir, struct dentry *new_dentry)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1317: FILE: fs/logfs/dir.c:539:
+	 * dropping too low.  Needs more thought. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1337: FILE: fs/logfs/dir.c:559:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1339: FILE: fs/logfs/dir.c:561:
+static int logfs_replace_inode(struct inode *dir, struct dentry *dentry,
+		struct logfs_disk_dentry *dd, struct inode *inode)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1353: FILE: fs/logfs/dir.c:575:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1359: FILE: fs/logfs/dir.c:581:
+static int logfs_rename_target(struct inode *old_dir, struct dentry *old_dentry,
+		struct inode *new_dir, struct dentry *new_dentry)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1369: FILE: fs/logfs/dir.c:591:
+	BUG_ON(isdir != S_ISDIR(new_inode->i_mode));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1409: FILE: fs/logfs/dir.c:631:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1411: FILE: fs/logfs/dir.c:633:
+static int logfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+		struct inode *new_dir, struct dentry *new_dentry)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1420: FILE: fs/logfs/dir.c:642:
+
+

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1438: FILE: fs/logfs/dir.c:660:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1454: FILE: fs/logfs/dir.c:676:
+		iput(inode);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1467: FILE: fs/logfs/dir.c:689:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1468: FILE: fs/logfs/dir.c:690:
+struct inode_operations logfs_dir_iops = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1480: FILE: fs/logfs/dir.c:702:
+};
+struct file_operations logfs_dir_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1480: FILE: fs/logfs/dir.c:702:
+struct file_operations logfs_dir_fops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1487: FILE: fs/logfs/file.c:1:
+#include "logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1489: FILE: fs/logfs/file.c:3:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1491: FILE: fs/logfs/file.c:5:
+static int logfs_prepare_write(struct file *file, struct page *page,
+		unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1491: FILE: fs/logfs/file.c:5:
+		unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1491: FILE: fs/logfs/file.c:5:
+		unsigned start, unsigned end)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start == 0'
#1496: FILE: fs/logfs/file.c:10:
+	if ((start == 0) && (end == PAGE_CACHE_SIZE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end == PAGE_CACHE_SIZE'
#1496: FILE: fs/logfs/file.c:10:
+	if ((start == 0) && (end == PAGE_CACHE_SIZE))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1502: FILE: fs/logfs/file.c:16:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1504: FILE: fs/logfs/file.c:18:
+static int logfs_commit_write(struct file *file, struct page *page,
+		unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1504: FILE: fs/logfs/file.c:18:
+		unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1504: FILE: fs/logfs/file.c:18:
+		unsigned start, unsigned end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1512: FILE: fs/logfs/file.c:26:
+	pr_debug("ino: %lu, page:%lu, start: %d, len:%d\n", inode->i_ino,
+			page->index, start, end-start);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1512: FILE: fs/logfs/file.c:26:
+			page->index, start, end-start);
 			                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1513: FILE: fs/logfs/file.c:27:
+	BUG_ON(PAGE_CACHE_SIZE != inode->i_sb->s_blocksize);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1513: FILE: fs/logfs/file.c:27:
+	BUG_ON(PAGE_CACHE_SIZE != inode->i_sb->s_blocksize);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1514: FILE: fs/logfs/file.c:28:
+	BUG_ON(page->index > I3_BLOCKS);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1530: FILE: fs/logfs/file.c:44:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1534: FILE: fs/logfs/file.c:48:
+	int ret = logfs_readpage_nolock(page);
+	unlock_page(page);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1538: FILE: fs/logfs/file.c:52:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1541: FILE: fs/logfs/file.c:55:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1545: FILE: fs/logfs/file.c:59:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1546: FILE: fs/logfs/file.c:60:
+struct inode_operations logfs_reg_iops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1550: FILE: fs/logfs/file.c:64:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1551: FILE: fs/logfs/file.c:65:
+struct file_operations logfs_reg_fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1561: FILE: fs/logfs/file.c:75:
+
+

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1562: FILE: fs/logfs/file.c:76:
+struct address_space_operations logfs_reg_aops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1572: FILE: fs/logfs/gc.c:1:
+#include "logfs.h"

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1574: FILE: fs/logfs/gc.c:3:
+#if 0

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1608: FILE: fs/logfs/gc.c:37:
+	if (t >= 32*theta)
 	           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1611: FILE: fs/logfs/gc.c:40:
+	shift = t/theta;
 	         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1612: FILE: fs/logfs/gc.c:41:
+	fac = theta - (t%theta)/2;
 	                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1612: FILE: fs/logfs/gc.c:41:
+	fac = theta - (t%theta)/2;
 	                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1617: FILE: fs/logfs/gc.c:46:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1634: FILE: fs/logfs/gc.c:63:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1634: FILE: fs/logfs/gc.c:63:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1636: FILE: fs/logfs/gc.c:65:
+		struct logfs_area *area = super->s_area[i];
+		if (area->a_is_open && (area->a_segno == segno)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'area->a_segno == segno'
#1636: FILE: fs/logfs/gc.c:65:
+		if (area->a_is_open && (area->a_segno == segno)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1636: FILE: fs/logfs/gc.c:65:
+		if (area->a_is_open && (area->a_segno == segno)) {
+			return super->s_segsize;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#1655: FILE: fs/logfs/gc.c:84:
+		//printk("%x %x (%llx, %llx, %llx)(%x, %x)\n", h.type, h.compr, ofs, ino, pos, valid, size);

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1660: FILE: fs/logfs/gc.c:89:
+	printk("valid(%x) = %x\n", segno, valid);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1664: FILE: fs/logfs/gc.c:93:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1666: FILE: fs/logfs/gc.c:95:
+static void logfs_cleanse_block(struct super_block *sb, u64 ofs, u64 ino,
+		u64 pos, int level)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1672: FILE: fs/logfs/gc.c:101:
+	BUG_ON(!inode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1674: FILE: fs/logfs/gc.c:103:
+	BUG_ON(err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1678: FILE: fs/logfs/gc.c:107:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1689: FILE: fs/logfs/gc.c:118:
+	sh = (void*)&h;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1704: FILE: fs/logfs/gc.c:133:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1716: FILE: fs/logfs/gc.c:145:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1716: FILE: fs/logfs/gc.c:145:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1718: FILE: fs/logfs/gc.c:147:
+		struct logfs_area *area = super->s_area[i];
+		BUG_ON(area->a_is_open && (area->a_segno == segno));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1718: FILE: fs/logfs/gc.c:147:
+		BUG_ON(area->a_is_open && (area->a_segno == segno));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1723: FILE: fs/logfs/gc.c:152:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1725: FILE: fs/logfs/gc.c:154:
+static void __add_segment(struct list_head *list, int *count, u32 segno,
+		int valid)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1728: FILE: fs/logfs/gc.c:157:
+	struct logfs_segment *seg = kzalloc(sizeof(*seg), GFP_KERNEL);
+	if (!seg)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1737: FILE: fs/logfs/gc.c:166:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1739: FILE: fs/logfs/gc.c:168:
+static void add_segment(struct list_head *list, int *count, u32 segno,
+		int valid)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1742: FILE: fs/logfs/gc.c:171:
+	struct logfs_segment *seg;
+	list_for_each_entry(seg, list, list)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1748: FILE: fs/logfs/gc.c:177:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1752: FILE: fs/logfs/gc.c:181:
+	struct logfs_segment *seg;
+	list_for_each_entry(seg, list, list)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1761: FILE: fs/logfs/gc.c:190:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1765: FILE: fs/logfs/gc.c:194:
+	struct logfs_super *super = LOGFS_SUPER(sb);
+	add_segment(&super->s_free_list, &super->s_free_count, segno, 0);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1767: FILE: fs/logfs/gc.c:196:
+}
+static void add_low_segment(struct super_block *sb, u32 segno, int valid)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1770: FILE: fs/logfs/gc.c:199:
+	struct logfs_super *super = LOGFS_SUPER(sb);
+	add_segment(&super->s_low_list, &super->s_low_count, segno, valid);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1772: FILE: fs/logfs/gc.c:201:
+}
+static void del_low_segment(struct super_block *sb, u32 segno)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1775: FILE: fs/logfs/gc.c:204:
+	struct logfs_super *super = LOGFS_SUPER(sb);
+	del_segment(&super->s_low_list, &super->s_low_count, segno);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1778: FILE: fs/logfs/gc.c:207:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1786: FILE: fs/logfs/gc.c:215:
+	if (valid == 0) {
[...]
+	} else if (valid < full)
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1793: FILE: fs/logfs/gc.c:222:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1808: FILE: fs/logfs/gc.c:237:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1814: FILE: fs/logfs/gc.c:243:
+	for (i = super->s_sweeper+1; i != super->s_sweeper; i++) {
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1816: FILE: fs/logfs/gc.c:245:
+			i=1;	/* skip superblock */
 			 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1828: FILE: fs/logfs/gc.c:257:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1833: FILE: fs/logfs/gc.c:262:
+	unsigned min_valid = super->s_segsize;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1836: FILE: fs/logfs/gc.c:265:
+	BUG_ON(list_empty(&super->s_low_list));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1855: FILE: fs/logfs/gc.c:284:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1857: FILE: fs/logfs/gc.c:286:
+ * If we made enough room, return */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1870: FILE: fs/logfs/gc.c:299:
+			printk("s");

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1873: FILE: fs/logfs/gc.c:302:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1876: FILE: fs/logfs/gc.c:305:
+		printk(".");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1881: FILE: fs/logfs/gc.c:310:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1887: FILE: fs/logfs/gc.c:316:
+	for (i=4; i; i--) {
 	      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1894: FILE: fs/logfs/gc.c:323:
+		printk("free:%8d, low:%8d, sweeper:%8lld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1895: FILE: fs/logfs/gc.c:324:
+		printk("free:%8d, low:%8d, sweeper:%8lld\n",
+				super->s_free_count, super->s_low_count,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1898: FILE: fs/logfs/gc.c:327:
+		printk("free:%8d, low:%8d, sweeper:%8lld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1899: FILE: fs/logfs/gc.c:328:
+		printk("free:%8d, low:%8d, sweeper:%8lld\n",
+				super->s_free_count, super->s_low_count,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1906: FILE: fs/logfs/gc.c:335:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1917: FILE: fs/logfs/gc.c:346:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1925: FILE: fs/logfs/inode.c:1:
+#include "logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1929: FILE: fs/logfs/inode.c:5:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1932: FILE: fs/logfs/inode.c:8:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1935: FILE: fs/logfs/inode.c:11:
+
+

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1947: FILE: fs/logfs/inode.c:23:
+			iput(inode);
 			^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1955: FILE: fs/logfs/inode.c:31:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1977: FILE: fs/logfs/inode.c:53:
+
+

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1980: FILE: fs/logfs/inode.c:56:
+	if (inode->i_ino == LOGFS_INO_MASTER) /* never iput it either! */
 	                                               ^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1986: FILE: fs/logfs/inode.c:62:
+	iput(inode);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1989: FILE: fs/logfs/inode.c:65:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2006: FILE: fs/logfs/inode.c:82:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2006: FILE: fs/logfs/inode.c:82:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	           ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#2010: FILE: fs/logfs/inode.c:86:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2012: FILE: fs/logfs/inode.c:88:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2024: FILE: fs/logfs/inode.c:100:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2039: FILE: fs/logfs/inode.c:115:
+	 * to be nonstatic, alas. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2056: FILE: fs/logfs/inode.c:132:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2061: FILE: fs/logfs/inode.c:137:
+	struct timespec tsp;
+	tsp.tv_sec = time >> 32;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2066: FILE: fs/logfs/inode.c:142:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2070: FILE: fs/logfs/inode.c:146:
+	u64 time = ((u64)tsp.tv_sec << 32) + (tsp.tv_nsec & 0xffffffff);
+	return cpu_to_be64(time);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2073: FILE: fs/logfs/inode.c:149:
+
+

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#2074: FILE: fs/logfs/inode.c:150:
+static void logfs_disk_to_inode(struct logfs_disk_inode *di, struct inode*inode)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2091: FILE: fs/logfs/inode.c:167:
+	case S_IFCHR: /* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2092: FILE: fs/logfs/inode.c:168:
+	case S_IFBLK: /* fall through */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2097: FILE: fs/logfs/inode.c:173:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2097: FILE: fs/logfs/inode.c:173:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2103: FILE: fs/logfs/inode.c:179:
+
+

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#2104: FILE: fs/logfs/inode.c:180:
+static void logfs_inode_to_disk(struct inode *inode, struct logfs_disk_inode*di)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2122: FILE: fs/logfs/inode.c:198:
+	case S_IFCHR: /* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2123: FILE: fs/logfs/inode.c:199:
+	case S_IFBLK: /* fall through */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2128: FILE: fs/logfs/inode.c:204:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2128: FILE: fs/logfs/inode.c:204:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2134: FILE: fs/logfs/inode.c:210:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2136: FILE: fs/logfs/inode.c:212:
+static int logfs_read_disk_inode(struct logfs_disk_inode *di,
+		struct inode *inode)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2142: FILE: fs/logfs/inode.c:218:
+	BUG_ON(!super->s_master_inode);

ERROR:SPACING: space prohibited after that open parenthesis '('
#2147: FILE: fs/logfs/inode.c:223:
+	if ( !(be32_to_cpu(di->di_flags) & LOGFS_IF_VALID))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2156: FILE: fs/logfs/inode.c:232:
+
+

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2176: FILE: fs/logfs/inode.c:252:
+	if ( !(li->li_flags&LOGFS_IF_VALID) || (li->li_flags&LOGFS_IF_INVALID))
 	                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2176: FILE: fs/logfs/inode.c:252:
+	if ( !(li->li_flags&LOGFS_IF_VALID) || (li->li_flags&LOGFS_IF_INVALID))
 	                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2176: FILE: fs/logfs/inode.c:252:
+	if ( !(li->li_flags&LOGFS_IF_VALID) || (li->li_flags&LOGFS_IF_INVALID))

WARNING:DEFAULT_NO_BREAK: switch default: should use break
#2189: FILE: fs/logfs/inode.c:265:
+	default:
+		;

switch default case is sometimes written as "default:;".  This can
cause new cases added below default to be defective.

A "break;" should be added after empty default statement to avoid
unwanted fallthrough.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2196: FILE: fs/logfs/inode.c:272:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2201: FILE: fs/logfs/inode.c:277:
+	BUG_ON(inode->i_ino == LOGFS_INO_MASTER);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2205: FILE: fs/logfs/inode.c:281:
+		printk("%lx, %x\n", inode->i_ino, -ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2206: FILE: fs/logfs/inode.c:282:
+		BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2210: FILE: fs/logfs/inode.c:286:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2212: FILE: fs/logfs/inode.c:288:
+static int logfs_write_disk_inode(struct logfs_disk_inode *di,
+		struct inode *inode)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2220: FILE: fs/logfs/inode.c:296:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2225: FILE: fs/logfs/inode.c:301:
+	BUG_ON(inode->i_ino == LOGFS_INO_MASTER);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2228: FILE: fs/logfs/inode.c:304:
+	 * bother writing it. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2237: FILE: fs/logfs/inode.c:313:
+
+

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#2242: FILE: fs/logfs/inode.c:318:
+	/* Can only happen if creat() failed.  Safe to skip. */
 	                      ^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2251: FILE: fs/logfs/inode.c:327:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2259: FILE: fs/logfs/inode.c:335:
+
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2268: FILE: fs/logfs/inode.c:344:
+	if (! (LOGFS_INODE(inode)->li_flags & LOGFS_IF_ZOMBIE)) {
 	    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2276: FILE: fs/logfs/inode.c:352:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2282: FILE: fs/logfs/inode.c:358:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2294: FILE: fs/logfs/inode.c:370:
+	BUG_ON(list_empty(&li->li_freeing_list));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2301: FILE: fs/logfs/inode.c:377:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2311: FILE: fs/logfs/inode.c:387:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2328: FILE: fs/logfs/inode.c:404:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2348: FILE: fs/logfs/inode.c:424:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2350: FILE: fs/logfs/inode.c:426:
+static void logfs_init_once(void *_li, struct kmem_cache *cachep,
+		unsigned long flags)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2355: FILE: fs/logfs/inode.c:431:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2359: FILE: fs/logfs/inode.c:435:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2359: FILE: fs/logfs/inode.c:435:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		           ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2364: FILE: fs/logfs/inode.c:440:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2366: FILE: fs/logfs/inode.c:442:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2377: FILE: fs/logfs/inode.c:453:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2381: FILE: fs/logfs/inode.c:457:
+	logfs_inode_cache = kmem_cache_create("logfs_inode_cache",
+			sizeof(struct logfs_inode), 0, SLAB_RECLAIM_ACCOUNT,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2388: FILE: fs/logfs/inode.c:464:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2396: FILE: fs/logfs/journal.c:1:
+#include "logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2398: FILE: fs/logfs/journal.c:3:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2404: FILE: fs/logfs/journal.c:9:
+	for (i=0; i<JE_LAST; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2404: FILE: fs/logfs/journal.c:9:
+	for (i=0; i<JE_LAST; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2409: FILE: fs/logfs/journal.c:14:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2415: FILE: fs/logfs/journal.c:20:
+	for (i=0; i<JE_LAST; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2415: FILE: fs/logfs/journal.c:20:
+	for (i=0; i<JE_LAST; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2419: FILE: fs/logfs/journal.c:24:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2425: FILE: fs/logfs/journal.c:30:
+	for (i=0; i<JE_LAST; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2425: FILE: fs/logfs/journal.c:30:
+	for (i=0; i<JE_LAST; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2428: FILE: fs/logfs/journal.c:33:
+		struct logfs_journal_entry *retired = super->s_retired + i;
+		if (! spec->used)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2428: FILE: fs/logfs/journal.c:33:
+		if (! spec->used)
 		    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'spec->version <= retired->version'
#2430: FILE: fs/logfs/journal.c:35:
+		if (retired->used && (spec->version <= retired->version))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2440: FILE: fs/logfs/journal.c:45:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2442: FILE: fs/logfs/journal.c:47:
+static void __logfs_scan_journal(struct super_block *sb, void *block,
+		u32 segno, u64 block_ofs, int block_index)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2448: FILE: fs/logfs/journal.c:53:
+	for (h = block; (void*)h - block < sb->s_blocksize; h++) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2450: FILE: fs/logfs/journal.c:55:
+		unsigned long ofs = (void*)h - block;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < 16'
#2456: FILE: fs/logfs/journal.c:61:
+		if ((len < 16) || (len > remainder))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > remainder'
#2456: FILE: fs/logfs/journal.c:61:
+		if ((len < 16) || (len > remainder))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type < JE_FIRST'
#2458: FILE: fs/logfs/journal.c:63:
+		if ((type < JE_FIRST) || (type > JE_LAST))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type > JE_LAST'
#2458: FILE: fs/logfs/journal.c:63:
+		if ((type < JE_FIRST) || (type > JE_LAST))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2469: FILE: fs/logfs/journal.c:74:
+		if (abs(version) > 1<<14) /* all versions should be near */
 		                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'version <= spec->version'
#2476: FILE: fs/logfs/journal.c:81:
+			if (spec->used && (version <= spec->version))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'version <= retired->version'
#2484: FILE: fs/logfs/journal.c:89:
+			if (retired->used && (version <= retired->version))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2495: FILE: fs/logfs/journal.c:100:
+			area->a_is_open = 0; /* never reuse same segment after
+						mount - wasteful but safe */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2495: FILE: fs/logfs/journal.c:100:
+						mount - wasteful but safe */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2501: FILE: fs/logfs/journal.c:106:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2516: FILE: fs/logfs/journal.c:121:
+		for (k=0; k<super->s_no_blocks; k++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2516: FILE: fs/logfs/journal.c:121:
+		for (k=0; k<super->s_no_blocks; k++) {
 		           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2527: FILE: fs/logfs/journal.c:132:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2529: FILE: fs/logfs/journal.c:134:
+static void logfs_read_commit(struct logfs_super *super,
+		struct logfs_journal_header *h)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2534: FILE: fs/logfs/journal.c:139:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2557: FILE: fs/logfs/journal.c:162:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2564: FILE: fs/logfs/journal.c:169:
+	err = btree_insert(head, 0, (void*)1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2565: FILE: fs/logfs/journal.c:170:
+	BUG_ON(err);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2568: FILE: fs/logfs/journal.c:173:
+		if (! super->s_journal_seg[i])
 		    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2570: FILE: fs/logfs/journal.c:175:
+		err = btree_insert(head, super->s_journal_seg[i], (void*)1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2571: FILE: fs/logfs/journal.c:176:
+		BUG_ON(err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2575: FILE: fs/logfs/journal.c:180:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2588: FILE: fs/logfs/journal.c:193:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2601: FILE: fs/logfs/journal.c:206:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2601: FILE: fs/logfs/journal.c:206:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2605: FILE: fs/logfs/journal.c:210:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2607: FILE: fs/logfs/journal.c:212:
+static void logfs_read_erasecount(struct super_block *sb,
+		struct logfs_journal_ec *ec)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2616: FILE: fs/logfs/journal.c:221:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2628: FILE: fs/logfs/journal.c:233:
+		err = btree_insert(head, be32_to_cpu(*seg), (void*)1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2629: FILE: fs/logfs/journal.c:234:
+		BUG_ON(err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2634: FILE: fs/logfs/journal.c:239:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2640: FILE: fs/logfs/journal.c:245:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2640: FILE: fs/logfs/journal.c:245:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2649: FILE: fs/logfs/journal.c:254:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2663: FILE: fs/logfs/journal.c:268:
+	BUG_ON(err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2667: FILE: fs/logfs/journal.c:272:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2677: FILE: fs/logfs/journal.c:282:
+	for (i=0; i<JE_LAST; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2677: FILE: fs/logfs/journal.c:282:
+	for (i=0; i<JE_LAST; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2679: FILE: fs/logfs/journal.c:284:
+		struct logfs_journal_entry *je = super->s_retired + i;
+		if (!super->s_retired[i].used)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2684: FILE: fs/logfs/journal.c:289:
+				printk("LogFS: Missing journal entry %x?\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2685: FILE: fs/logfs/journal.c:290:
+				printk("LogFS: Missing journal entry %x?\n",
+						i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2710: FILE: fs/logfs/journal.c:315:
+				logfs_read_erasecount(sb,unpack(block,scratch));
 				                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2710: FILE: fs/logfs/journal.c:315:
+				logfs_read_erasecount(sb,unpack(block,scratch));
 				                                     ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2732: FILE: fs/logfs/journal.c:337:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2736: FILE: fs/logfs/journal.c:341:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2756: FILE: fs/logfs/journal.c:361:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2759: FILE: fs/logfs/journal.c:364:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2763: FILE: fs/logfs/journal.c:368:
+	 * journal_get_free_segment() - nothing to do here */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2766: FILE: fs/logfs/journal.c:371:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2772: FILE: fs/logfs/journal.c:377:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2778: FILE: fs/logfs/journal.c:383:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2786: FILE: fs/logfs/journal.c:391:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2794: FILE: fs/logfs/journal.c:399:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2800: FILE: fs/logfs/journal.c:405:
+	BUG_ON(ofs >= LOGFS_SUPER(sb)->s_size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2804: FILE: fs/logfs/journal.c:409:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2815: FILE: fs/logfs/journal.c:420:
+	BUG_ON(ret <= 0); /* not sure, but it's safer to BUG than to accept */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2819: FILE: fs/logfs/journal.c:424:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2821: FILE: fs/logfs/journal.c:426:
+static size_t __logfs_write_header(struct logfs_super *super,
+		struct logfs_journal_header *h, size_t len, size_t datalen,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2836: FILE: fs/logfs/journal.c:441:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2838: FILE: fs/logfs/journal.c:443:
+static size_t logfs_write_header(struct logfs_super *super,
+		struct logfs_journal_header *h, size_t datalen, u16 type)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2841: FILE: fs/logfs/journal.c:446:
+	size_t len = datalen + sizeof(*h);
+	return __logfs_write_header(super, h, len, datalen, type, COMPR_NONE);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2844: FILE: fs/logfs/journal.c:449:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2846: FILE: fs/logfs/journal.c:451:
+static void *logfs_write_bb(struct super_block *sb, void *h,
+		u16 *type, size_t *len)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2853: FILE: fs/logfs/journal.c:458:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2858: FILE: fs/logfs/journal.c:463:
+}
+static void *logfs_write_erasecount(struct super_block *sb, void *_ec,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2859: FILE: fs/logfs/journal.c:464:
+static void *logfs_write_erasecount(struct super_block *sb, void *_ec,
+		u16 *type, size_t *len)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2872: FILE: fs/logfs/journal.c:477:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2874: FILE: fs/logfs/journal.c:479:
+static void *logfs_write_wbuf(struct super_block *sb, void *h,
+		u16 *type, size_t *len)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2884: FILE: fs/logfs/journal.c:489:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2886: FILE: fs/logfs/journal.c:491:
+static void *__logfs_write_anchor(struct super_block *sb, void *_da,
+		u16 *type, size_t *len)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2897: FILE: fs/logfs/journal.c:502:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2897: FILE: fs/logfs/journal.c:502:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2904: FILE: fs/logfs/journal.c:509:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2906: FILE: fs/logfs/journal.c:511:
+static void *logfs_write_dynsb(struct super_block *sb, void *_dynsb,
+		u16 *type, size_t *len)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2922: FILE: fs/logfs/journal.c:527:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2924: FILE: fs/logfs/journal.c:529:
+static void *logfs_write_areas(struct super_block *sb, void *_a,
+		u16 *type, size_t *len)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2930: FILE: fs/logfs/journal.c:535:
+	for (i=0; i<16; i++) { /* FIXME: have all 16 areas */
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2930: FILE: fs/logfs/journal.c:535:
+	for (i=0; i<16; i++) { /* FIXME: have all 16 areas */
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2934: FILE: fs/logfs/journal.c:539:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2934: FILE: fs/logfs/journal.c:539:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2944: FILE: fs/logfs/journal.c:549:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2946: FILE: fs/logfs/journal.c:551:
+static void *logfs_write_commit(struct super_block *sb, void *h,
+		u16 *type, size_t *len)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2953: FILE: fs/logfs/journal.c:558:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2955: FILE: fs/logfs/journal.c:560:
+static size_t logfs_write_je(struct super_block *sb, size_t jpos,
+		void* (*write)(struct super_block *sb, void *scratch,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2956: FILE: fs/logfs/journal.c:561:
+		void* (*write)(struct super_block *sb, void *scratch,
+			u16 *type, size_t *len))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2977: FILE: fs/logfs/journal.c:582:
+	BUG_ON(compr_len < 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2986: FILE: fs/logfs/journal.c:591:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2997: FILE: fs/logfs/journal.c:602:
+	BUG_ON(ofs >= super->s_size);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3001: FILE: fs/logfs/journal.c:606:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3001: FILE: fs/logfs/journal.c:606:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3012: FILE: fs/logfs/journal.c:617:
+	BUG_ON(jpos > sb->s_blocksize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3020: FILE: fs/logfs/journal.c:625:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3029: FILE: fs/logfs/journal.c:634:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3057: FILE: fs/logfs/journal.c:662:
+	 * then re-reads those entries and copies their contents over. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3080: FILE: fs/logfs/journal.c:685:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3095: FILE: fs/logfs/readwrite.c:1:
+/**

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#3096: FILE: fs/logfs/readwrite.c:2:
+ * fs/logfs/readwrite.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3107: FILE: fs/logfs/readwrite.c:13:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3117: FILE: fs/logfs/readwrite.c:23:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3126: FILE: fs/logfs/readwrite.c:32:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3128: FILE: fs/logfs/readwrite.c:34:
+static int logfs_read_direct(struct inode *inode, pgoff_t index, void *buf,
+		int read_zero)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3141: FILE: fs/logfs/readwrite.c:47:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3148: FILE: fs/logfs/readwrite.c:54:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3154: FILE: fs/logfs/readwrite.c:60:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3164: FILE: fs/logfs/readwrite.c:70:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3170: FILE: fs/logfs/readwrite.c:76:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3178: FILE: fs/logfs/readwrite.c:84:
+	BUG_ON((unsigned long)ret != ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3182: FILE: fs/logfs/readwrite.c:88:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3184: FILE: fs/logfs/readwrite.c:90:
+static int logfs_read_loop(struct inode *inode, pgoff_t index, void *buf,
+		int read_zero, int count)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3198: FILE: fs/logfs/readwrite.c:104:
+	for (i=count; i>=0; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3198: FILE: fs/logfs/readwrite.c:104:
+	for (i=count; i>=0; i--) {
 	               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3216: FILE: fs/logfs/readwrite.c:122:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3218: FILE: fs/logfs/readwrite.c:124:
+static int logfs_read_block(struct inode *inode, pgoff_t index, void *buf,
+		int read_zero)

CHECK:BRACES: braces {} should be used on all arms of this statement
#3222: FILE: fs/logfs/readwrite.c:128:
+	if (li->li_flags & LOGFS_IF_EMBEDDED) {
[...]
+	} else if (index < I0_BLOCKS)
[...]
+	else if (index < I1_BLOCKS)
[...]
+	else if (index < I2_BLOCKS)
[...]
+	else if (index < I3_BLOCKS)
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3236: FILE: fs/logfs/readwrite.c:142:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3240: FILE: fs/logfs/readwrite.c:146:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3251: FILE: fs/logfs/readwrite.c:157:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3261: FILE: fs/logfs/readwrite.c:167:
+	BUG_ON(!bofs);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3265: FILE: fs/logfs/readwrite.c:171:
+	for (i=count; i>=0; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3265: FILE: fs/logfs/readwrite.c:171:
+	for (i=count; i>=0; i--) {
 	               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3283: FILE: fs/logfs/readwrite.c:189:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3316: FILE: fs/logfs/readwrite.c:222:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3329: FILE: fs/logfs/readwrite.c:235:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3335: FILE: fs/logfs/readwrite.c:241:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3337: FILE: fs/logfs/readwrite.c:243:
+static int logfs_is_valid_loop(struct inode *inode, pgoff_t index,
+		int count, u64 ofs)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3354: FILE: fs/logfs/readwrite.c:260:
+	for (i=count; i>=0; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3354: FILE: fs/logfs/readwrite.c:260:
+	for (i=count; i>=0; i--) {
 	               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3376: FILE: fs/logfs/readwrite.c:282:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_nlink == 0'
#3382: FILE: fs/logfs/readwrite.c:288:
+	if ((inode->i_nlink == 0) && atomic_read(&inode->i_count) == 1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3397: FILE: fs/logfs/readwrite.c:303:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3401: FILE: fs/logfs/readwrite.c:307:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3408: FILE: fs/logfs/readwrite.c:314:
+	 * blocks are by definition invalid. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3413: FILE: fs/logfs/readwrite.c:319:
+		printk("%llx, %llx, %llx\n", ofs, ino, pos);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3420: FILE: fs/logfs/readwrite.c:326:
+#if 0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3435: FILE: fs/logfs/readwrite.c:341:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3458: FILE: fs/logfs/readwrite.c:364:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3463: FILE: fs/logfs/readwrite.c:369:
+static ssize_t __logfs_inode_read(struct inode *inode, char *buf, size_t count,
+		loff_t *ppos, int read_zero)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3476: FILE: fs/logfs/readwrite.c:382:
+	BUG_ON(logfs_index(*ppos) != logfs_index(*ppos + count - 1));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3483: FILE: fs/logfs/readwrite.c:389:
+	err = logfs_read_block(inode, logfs_index(*ppos), block_data,
+			read_zero);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3496: FILE: fs/logfs/readwrite.c:402:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3498: FILE: fs/logfs/readwrite.c:404:
+static s64 logfs_segment_write_pos(struct inode *inode, void *buf, u64 pos,
+		int level, int alloc)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3503: FILE: fs/logfs/readwrite.c:409:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3517: FILE: fs/logfs/readwrite.c:423:
+	 * lock before then! */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3522: FILE: fs/logfs/readwrite.c:428:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:WxV)
#3525: FILE: fs/logfs/readwrite.c:431:
+	return logfs_alloc_bytes(inode, blocks <<inode->i_sb->s_blocksize_bits);
 	                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3528: FILE: fs/logfs/readwrite.c:434:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3538: FILE: fs/logfs/readwrite.c:444:
+
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#3550: FILE: fs/logfs/readwrite.c:456:
+	if (! (li->li_flags & LOGFS_IF_EMBEDDED))
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3568: FILE: fs/logfs/readwrite.c:474:
+	for (i=1; i<LOGFS_EMBEDDED_FIELDS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3568: FILE: fs/logfs/readwrite.c:474:
+	for (i=1; i<LOGFS_EMBEDDED_FIELDS; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3574: FILE: fs/logfs/readwrite.c:480:
+
+

WARNING:MINMAX: max() should probably be max_t(long long, LOGFS_EMBEDDED_SIZE, i_size_read(inode))
#3580: FILE: fs/logfs/readwrite.c:486:
+	memcpy(dst, buf, max((long long)LOGFS_EMBEDDED_SIZE, i_size_read(inode)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3588: FILE: fs/logfs/readwrite.c:494:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3611: FILE: fs/logfs/readwrite.c:517:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3613: FILE: fs/logfs/readwrite.c:519:
+static int logfs_write_loop(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks, int count)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3622: FILE: fs/logfs/readwrite.c:528:
+	for (i=count; i>=0; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3622: FILE: fs/logfs/readwrite.c:528:
+	for (i=count; i>=0; i--) {
 	               ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#3634: FILE: fs/logfs/readwrite.c:540:
+	if (! wblocks[0][get_bits(index, 0, bits)])
 	    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3642: FILE: fs/logfs/readwrite.c:548:
+	allocs = allocs ? allocs-1 : 0;
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3646: FILE: fs/logfs/readwrite.c:552:
+	for (i=0; i<=count; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#3646: FILE: fs/logfs/readwrite.c:552:
+	for (i=0; i<=count; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3648: FILE: fs/logfs/readwrite.c:554:
+		block = logfs_segment_write(inode, wblocks[i], index, i+1,
 		                                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3649: FILE: fs/logfs/readwrite.c:555:
+		block = logfs_segment_write(inode, wblocks[i], index, i+1,
+				allocs);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3650: FILE: fs/logfs/readwrite.c:556:
+		allocs = allocs ? allocs-1 : 0;
 		                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3660: FILE: fs/logfs/readwrite.c:566:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3662: FILE: fs/logfs/readwrite.c:568:
+static int __logfs_write_buf(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3667: FILE: fs/logfs/readwrite.c:573:
+	inode->i_ctime.tv_sec = inode->i_mtime.tv_sec = get_seconds();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3685: FILE: fs/logfs/readwrite.c:591:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3689: FILE: fs/logfs/readwrite.c:595:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3702: FILE: fs/logfs/readwrite.c:608:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3713: FILE: fs/logfs/readwrite.c:619:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3726: FILE: fs/logfs/readwrite.c:632:
+	cmap = (void*)lmap;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3736: FILE: fs/logfs/readwrite.c:642:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3738: FILE: fs/logfs/readwrite.c:644:
+static int logfs_delete_loop(struct inode *inode, pgoff_t index, be64 **wblocks,
+		int count)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3751: FILE: fs/logfs/readwrite.c:657:
+	for (i=count; i>=0; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3751: FILE: fs/logfs/readwrite.c:657:
+	for (i=count; i>=0; i--) {
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3757: FILE: fs/logfs/readwrite.c:663:
+		ofs_array[i+1] = bofs;
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3764: FILE: fs/logfs/readwrite.c:670:
+	for (i=0; i<=count; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#3764: FILE: fs/logfs/readwrite.c:670:
+	for (i=0; i<=count; i++) {
 	           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'block == 0'
#3766: FILE: fs/logfs/readwrite.c:672:
+		if ((block == 0) && mem_zero(wblocks[i], sb->s_blocksize)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3767: FILE: fs/logfs/readwrite.c:673:
+			logfs_segment_delete(inode, ofs_array[i+1], index, i+1);
 			                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3767: FILE: fs/logfs/readwrite.c:673:
+			logfs_segment_delete(inode, ofs_array[i+1], index, i+1);
 			                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3770: FILE: fs/logfs/readwrite.c:676:
+		block = logfs_segment_write(inode, wblocks[i], index, i+1, 0);
 		                                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3780: FILE: fs/logfs/readwrite.c:686:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3785: FILE: fs/logfs/readwrite.c:691:
+	inode->i_ctime.tv_sec = inode->i_mtime.tv_sec = get_seconds();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3804: FILE: fs/logfs/readwrite.c:710:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3817: FILE: fs/logfs/readwrite.c:723:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3819: FILE: fs/logfs/readwrite.c:725:
+static int logfs_rewrite_direct(struct inode *inode, int index, pgoff_t pos,
+		void *buf, int level)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3826: FILE: fs/logfs/readwrite.c:732:
+	BUG_ON(block == 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3841: FILE: fs/logfs/readwrite.c:747:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3843: FILE: fs/logfs/readwrite.c:749:
+static int logfs_rewrite_loop(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks, int count, int level)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3855: FILE: fs/logfs/readwrite.c:761:
+	for (i=count; i>=level; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3855: FILE: fs/logfs/readwrite.c:761:
+	for (i=count; i>=level; i--) {
 	               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3861: FILE: fs/logfs/readwrite.c:767:
+			BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3868: FILE: fs/logfs/readwrite.c:774:
+		printk("(%lx, %lx, %x, %x, %lx)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3869: FILE: fs/logfs/readwrite.c:775:
+		printk("(%lx, %lx, %x, %x, %lx)\n",
+				inode->i_ino, index, count, level,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3882: FILE: fs/logfs/readwrite.c:788:
+	for (i=level; i<=count; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#3882: FILE: fs/logfs/readwrite.c:788:
+	for (i=level; i<=count; i++) {
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3884: FILE: fs/logfs/readwrite.c:790:
+		block = logfs_segment_write(inode, wblocks[i], index, i+1, 0);
 		                                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3894: FILE: fs/logfs/readwrite.c:800:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3896: FILE: fs/logfs/readwrite.c:802:
+static int __logfs_rewrite_block(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks, int level)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3900: FILE: fs/logfs/readwrite.c:806:
+	BUG_ON(level >= LOGFS_MAX_LEVELS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3911: FILE: fs/logfs/readwrite.c:817:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3915: FILE: fs/logfs/readwrite.c:821:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3930: FILE: fs/logfs/readwrite.c:836:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3938: FILE: fs/logfs/readwrite.c:844:
+static s64 __logfs_truncate_i0(struct inode *inode, u64 size, u64 bofs,
+		u64 pos, be64 **wblocks)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3946: FILE: fs/logfs/readwrite.c:852:
+		logfs_segment_delete(inode, bofs,
+				pos >> inode->i_sb->s_blocksize_bits, 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3959: FILE: fs/logfs/readwrite.c:865:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3968: FILE: fs/logfs/readwrite.c:874:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3976: FILE: fs/logfs/readwrite.c:882:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3981: FILE: fs/logfs/readwrite.c:887:
+static s64 __logfs_truncate_loop(struct inode *inode, u64 size, u64 old_bofs,
+		u64 pos, be64 **wblocks, int i)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3991: FILE: fs/logfs/readwrite.c:897:
+	for (e = LOGFS_BLOCK_FACTOR-1; e>=0; e--) {
 	                           ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3991: FILE: fs/logfs/readwrite.c:897:
+	for (e = LOGFS_BLOCK_FACTOR-1; e>=0; e--) {
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3993: FILE: fs/logfs/readwrite.c:899:
+		u64 new_pos = pos + e*logfs_factor[i];
 		                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4006: FILE: fs/logfs/readwrite.c:912:
+			ofs = __logfs_truncate_loop(inode, size, bofs, new_pos,
+					wblocks, i-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4006: FILE: fs/logfs/readwrite.c:912:
+					wblocks, i-1);
 					          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4009: FILE: fs/logfs/readwrite.c:915:
+			ofs = __logfs_truncate_i0(inode, size, bofs, new_pos,
+					wblocks);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4018: FILE: fs/logfs/readwrite.c:924:
+		logfs_segment_delete(inode, old_bofs, logfs_index(pos), i+1);
 		                                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4026: FILE: fs/logfs/readwrite.c:932:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4033: FILE: fs/logfs/readwrite.c:939:
+	for (e = I1_INDEX-1; e>=0; e--) {
 	                 ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#4033: FILE: fs/logfs/readwrite.c:939:
+	for (e = I1_INDEX-1; e>=0; e--) {
 	                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4034: FILE: fs/logfs/readwrite.c:940:
+		u64 new_pos = e*logfs_factor[0];
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4036: FILE: fs/logfs/readwrite.c:942:
+		if (size > e*logfs_factor[0])
 		            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4052: FILE: fs/logfs/readwrite.c:958:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4054: FILE: fs/logfs/readwrite.c:960:
+static int logfs_truncate_loop(struct inode *inode, u64 size, be64 **wblocks,
+		int i)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4071: FILE: fs/logfs/readwrite.c:977:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#4075: FILE: fs/logfs/readwrite.c:981:
+	void *buf = (void*)li->li_data + size;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4083: FILE: fs/logfs/readwrite.c:989:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4097: FILE: fs/logfs/readwrite.c:1003:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4102: FILE: fs/logfs/readwrite.c:1008:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4107: FILE: fs/logfs/readwrite.c:1013:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4110: FILE: fs/logfs/readwrite.c:1016:
+	BUG_ON(ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4113: FILE: fs/logfs/readwrite.c:1019:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4125: FILE: fs/logfs/readwrite.c:1031:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4127: FILE: fs/logfs/readwrite.c:1033:
+static ssize_t __logfs_inode_write(struct inode *inode, const char *buf,
+		size_t count, loff_t *ppos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4134: FILE: fs/logfs/readwrite.c:1040:
+	BUG_ON(logfs_index(*ppos) != logfs_index(*ppos + count - 1));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4162: FILE: fs/logfs/readwrite.c:1068:
+
+

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#4173: FILE: fs/logfs/readwrite.c:1079:
+	ret = ret==n ? 0 : -EIO;
 	         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4177: FILE: fs/logfs/readwrite.c:1083:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4179: FILE: fs/logfs/readwrite.c:1085:
+int logfs_inode_write(struct inode *inode, const void *buf, size_t n,
+		loff_t _pos)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#4187: FILE: fs/logfs/readwrite.c:1093:
+	return ret==n ? 0 : -EIO;
 	          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4190: FILE: fs/logfs/readwrite.c:1096:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4200: FILE: fs/logfs/readwrite.c:1106:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#4200: FILE: fs/logfs/readwrite.c:1106:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4211: FILE: fs/logfs/readwrite.c:1117:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4216: FILE: fs/logfs/readwrite.c:1122:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++)
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#4216: FILE: fs/logfs/readwrite.c:1122:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++)
 	           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4223: FILE: fs/logfs/super.c:1:
+#include "logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4225: FILE: fs/logfs/super.c:3:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#4226: FILE: fs/logfs/super.c:4:
+#define FAIL_ON(cond) do { if (unlikely((cond))) return -EINVAL; } while(0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#4226: FILE: fs/logfs/super.c:4:
+#define FAIL_ON(cond) do { if (unlikely((cond))) return -EINVAL; } while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retlen != len'
#4235: FILE: fs/logfs/super.c:13:
+	if (ret || (retlen != len)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4236: FILE: fs/logfs/super.c:14:
+		printk("ret: %x\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4237: FILE: fs/logfs/super.c:15:
+		printk("retlen: %x, len: %x\n", retlen, len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4238: FILE: fs/logfs/super.c:16:
+		printk("ofs: %llx, mtd->size: %x\n", ofs, mtd->size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4246: FILE: fs/logfs/super.c:24:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4253: FILE: fs/logfs/super.c:31:
+		poison = memchr(poison, value[0], end-poison);
 		                                     ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#4256: FILE: fs/logfs/super.c:34:
+		if (! memcmp(poison, value, 8)) {
 		    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#4257: FILE: fs/logfs/super.c:35:
+			printk("%p %p %p\n", buf, poison, end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4258: FILE: fs/logfs/super.c:36:
+			BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4264: FILE: fs/logfs/super.c:42:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4278: FILE: fs/logfs/super.c:56:
+	BUG_ON((ofs >= mtd->size) || (len > mtd->size - ofs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4279: FILE: fs/logfs/super.c:57:
+	BUG_ON(ofs != (ofs >> super->s_writeshift) << super->s_writeshift);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4282: FILE: fs/logfs/super.c:60:
+	BUG_ON(len > PAGE_CACHE_SIZE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retlen != len'
#4287: FILE: fs/logfs/super.c:65:
+	if (ret || (retlen != len))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4293: FILE: fs/logfs/super.c:71:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4299: FILE: fs/logfs/super.c:77:
+}
+int mtderase(struct super_block *sb, loff_t ofs, size_t len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4306: FILE: fs/logfs/super.c:84:
+	BUG_ON(len % mtd->erasesize);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4308: FILE: fs/logfs/super.c:86:
+	truncate_inode_pages_range(&inode->i_data, ofs, ofs+len-1);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4308: FILE: fs/logfs/super.c:86:
+	truncate_inode_pages_range(&inode->i_data, ofs, ofs+len-1);
 	                                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4327: FILE: fs/logfs/super.c:105:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4337: FILE: fs/logfs/super.c:115:
+
+

CHECK:SPACING: No space is necessary after a cast
#4349: FILE: fs/logfs/super.c:127:
+	void *stack = (void *) ((ulong)current & ~0x1fffUL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4352: FILE: fs/logfs/super.c:130:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#4352: FILE: fs/logfs/super.c:130:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4354: FILE: fs/logfs/super.c:132:
+		u64 ofs = sb->s_blocksize + i*super->s_writesize;
 		                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#4355: FILE: fs/logfs/super.c:133:
+		u64 ofs = sb->s_blocksize + i*super->s_writesize;
+		mtdwrite(sb, ofs, super->s_writesize, wbuf);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4366: FILE: fs/logfs/super.c:144:
+	for (i=0; i<LOGFS_MAX_LEVELS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#4366: FILE: fs/logfs/super.c:144:
+	for (i=0; i<LOGFS_MAX_LEVELS; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4370: FILE: fs/logfs/super.c:148:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4385: FILE: fs/logfs/super.c:163:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4387: FILE: fs/logfs/super.c:165:
+void *logfs_device_getpage(struct super_block *sb, u64 offset,
+		struct page **page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4392: FILE: fs/logfs/super.c:170:
+	*page = read_cache_page(inode->i_mapping, offset >> PAGE_CACHE_SHIFT,
+			logfs_readdevice, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4393: FILE: fs/logfs/super.c:171:
+	BUG_ON(IS_ERR(*page));	/* TODO: use mempool here */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4397: FILE: fs/logfs/super.c:175:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4404: FILE: fs/logfs/super.c:182:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4434: FILE: fs/logfs/super.c:212:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4440: FILE: fs/logfs/super.c:218:
+	for (i=0; i<len; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#4440: FILE: fs/logfs/super.c:218:
+	for (i=0; i<len; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4446: FILE: fs/logfs/super.c:224:
+
+

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#4456: FILE: fs/logfs/super.c:234:
+	stats->f_bavail	= super->s_free_bytes >> sb->s_blocksize_bits; /* FIXME: leave some for root */

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#4459: FILE: fs/logfs/super.c:237:
+	stats->f_namelen= LOGFS_MAX_NAMELEN;
 	                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4463: FILE: fs/logfs/super.c:241:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4474: FILE: fs/logfs/super.c:252:
+
+

WARNING:IF_1: Consider removing the #if 1 and its #endif
#4489: FILE: fs/logfs/super.c:267:
+#if 1

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4495: FILE: fs/logfs/super.c:273:
+		printk(KERN_ERR "LOGFS: fsck failed, refusing to mount\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#4502: FILE: fs/logfs/super.c:280:
+	iput(LOGFS_SUPER(sb)->s_master_inode);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4506: FILE: fs/logfs/super.c:284:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4545: FILE: fs/logfs/super.c:323:
+	super->s_gc_reserve = super->s_total_levels * (2*super->s_no_blocks -1);
 	                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#4545: FILE: fs/logfs/super.c:323:
+	super->s_gc_reserve = super->s_total_levels * (2*super->s_no_blocks -1);
 	                                                                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4570: FILE: fs/logfs/super.c:348:
+	 * for rw-mounts, if necessary */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4589: FILE: fs/logfs/super.c:367:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4604: FILE: fs/logfs/super.c:382:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4606: FILE: fs/logfs/super.c:384:
+static int logfs_get_sb_mtd(struct file_system_type *type, int flags,
+		struct mtd_info *mtd, struct vfsmount *mnt)

ERROR:SPACING: space required before that '*' (ctx:VxV)
#4612: FILE: fs/logfs/super.c:390:
+	super = kzalloc(sizeof*super, GFP_KERNEL);
 	                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4646: FILE: fs/logfs/super.c:424:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4648: FILE: fs/logfs/super.c:426:
+static int logfs_get_sb(struct file_system_type *type, int flags,
+		const char *devname, void *data, struct vfsmount *mnt)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4653: FILE: fs/logfs/super.c:431:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#4661: FILE: fs/logfs/super.c:439:
+		char *garbage;
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4661: FILE: fs/logfs/super.c:439:
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);
 		                              ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#4661: FILE: fs/logfs/super.c:439:
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4676: FILE: fs/logfs/super.c:454:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4684: FILE: fs/logfs/super.c:462:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4702: FILE: fs/logfs/super.c:480:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4710: FILE: fs/logfs/super.c:488:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4716: FILE: fs/logfs/progs/mkfs.c:1:
+#include "../logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4742: FILE: fs/logfs/progs/mkfs.c:27:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4743: FILE: fs/logfs/progs/mkfs.c:28:
+#if 0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4762: FILE: fs/logfs/progs/mkfs.c:47:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4786: FILE: fs/logfs/progs/mkfs.c:71:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4789: FILE: fs/logfs/progs/mkfs.c:74:
+static size_t __write_header(struct logfs_journal_header *h, size_t len,
+		size_t datalen, u16 type, u8 compr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4802: FILE: fs/logfs/progs/mkfs.c:87:
+}
+static size_t write_header(struct logfs_journal_header *h, size_t datalen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4803: FILE: fs/logfs/progs/mkfs.c:88:
+static size_t write_header(struct logfs_journal_header *h, size_t datalen,
+		u16 type)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4806: FILE: fs/logfs/progs/mkfs.c:91:
+	size_t len = datalen + sizeof(*h);
+	return __write_header(h, len, datalen, type, COMPR_NONE);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4808: FILE: fs/logfs/progs/mkfs.c:93:
+}
+static size_t je_badsegments(void *data, u16 *type)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4814: FILE: fs/logfs/progs/mkfs.c:99:
+}
+static size_t je_anchor(void *_da, u16 *type)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4820: FILE: fs/logfs/progs/mkfs.c:105:
+	da->da_size	= cpu_to_be64((LOGFS_INO_ROOT+1) * blocksize);
 	           	                             ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4821: FILE: fs/logfs/progs/mkfs.c:106:
+#if 0

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4823: FILE: fs/logfs/progs/mkfs.c:108:
+	da->da_data[LOGFS_INO_ROOT] = cpu_to_be64(3*segsize);
 	                                           ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4830: FILE: fs/logfs/progs/mkfs.c:115:
+}
+static size_t je_dynsb(void *_dynsb, u16 *type)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4839: FILE: fs/logfs/progs/mkfs.c:124:
+}
+static size_t je_commit(void *h, u16 *type)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4844: FILE: fs/logfs/progs/mkfs.c:129:
+}
+static size_t write_je(size_t jpos, void *scratch, void *header,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4845: FILE: fs/logfs/progs/mkfs.c:130:
+static size_t write_je(size_t jpos, void *scratch, void *header,
+		size_t (*write)(void *scratch, u16 *type))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'compr_len < 0'
#4861: FILE: fs/logfs/progs/mkfs.c:146:
+	if ((compr_len < 0) || (type == JE_ANCHOR)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == JE_ANCHOR'
#4861: FILE: fs/logfs/progs/mkfs.c:146:
+	if ((compr_len < 0) || (type == JE_ANCHOR)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4865: FILE: fs/logfs/progs/mkfs.c:150:
+	BUG_ON(compr_len < 0);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4873: FILE: fs/logfs/progs/mkfs.c:158:
+}
+static int make_journal(struct super_block *sb)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4879: FILE: fs/logfs/progs/mkfs.c:164:
+	journal = kzalloc(2*blocksize, GFP_KERNEL);
 	                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4897: FILE: fs/logfs/progs/mkfs.c:182:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4911: FILE: fs/logfs/progs/mkfs.c:196:
+#if 0	/* sane defaults */

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#4922: FILE: fs/logfs/progs/mkfs.c:207:
+	ds->ds_feature_ro_compat= 0;
 	                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4947: FILE: fs/logfs/progs/mkfs.c:232:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4950: FILE: fs/logfs/progs/mkfs.c:235:
+static void getsize(struct super_block *sb, u64 *size,
+		u64 *no_segs)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4956: FILE: fs/logfs/progs/mkfs.c:241:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4961: FILE: fs/logfs/progs/mkfs.c:246:
+	int k, seg=0;
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4965: FILE: fs/logfs/progs/mkfs.c:250:
+	for (ofs=0; ofs<fssize; ofs+=segsize) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#4965: FILE: fs/logfs/progs/mkfs.c:250:
+	for (ofs=0; ofs<fssize; ofs+=segsize) {
 	               ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#4965: FILE: fs/logfs/progs/mkfs.c:250:
+	for (ofs=0; ofs<fssize; ofs+=segsize) {
 	                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4968: FILE: fs/logfs/progs/mkfs.c:253:
+		for (k=0; k<segsize; k+=mtd->erasesize) /* iterate subblocks */
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#4968: FILE: fs/logfs/progs/mkfs.c:253:
+		for (k=0; k<segsize; k+=mtd->erasesize) /* iterate subblocks */
 		           ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#4968: FILE: fs/logfs/progs/mkfs.c:253:
+		for (k=0; k<segsize; k+=mtd->erasesize) /* iterate subblocks */
 		                      ^

CHECK:SPACING: spaces required around that '?:' (ctx:VxV)
#4969: FILE: fs/logfs/progs/mkfs.c:254:
+			bad = bad?:mtd->block_isbad(mtd, ofs+k);
 			         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4969: FILE: fs/logfs/progs/mkfs.c:254:
+			bad = bad?:mtd->block_isbad(mtd, ofs+k);
 			                                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4983: FILE: fs/logfs/progs/mkfs.c:268:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#5011: FILE: fs/logfs/progs/mkfs.c:296:
+		int i;
+		for (i=0; i<OFS_COUNT; i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#5011: FILE: fs/logfs/progs/mkfs.c:296:
+		for (i=0; i<OFS_COUNT; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#5011: FILE: fs/logfs/progs/mkfs.c:296:
+		for (i=0; i<OFS_COUNT; i++)
 		           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5012: FILE: fs/logfs/progs/mkfs.c:297:
+			printk("%x->%llx\n", i, segment_offset[i]);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#5015: FILE: fs/logfs/progs/mkfs.c:300:
+#if 0

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5038: FILE: fs/logfs/progs/fsck.c:1:
+#include "../logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5046: FILE: fs/logfs/progs/fsck.c:9:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5051: FILE: fs/logfs/progs/fsck.c:14:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5053: FILE: fs/logfs/progs/fsck.c:16:
+static void safe_read(struct super_block *sb, u32 segno, u32 ofs,
+		size_t len, void *buf)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5055: FILE: fs/logfs/progs/fsck.c:18:
+	BUG_ON(wbuf_read(sb, dev_ofs(sb, segno, ofs), len, buf));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5057: FILE: fs/logfs/progs/fsck.c:20:
+}
+static u32 logfs_free_bytes(struct super_block *sb, u32 segno)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5098: FILE: fs/logfs/progs/fsck.c:61:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#5105: FILE: fs/logfs/progs/fsck.c:68:
+	for (i=0; i<super->s_no_segs; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#5105: FILE: fs/logfs/progs/fsck.c:68:
+	for (i=0; i<super->s_no_segs; i++) {
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5108: FILE: fs/logfs/progs/fsck.c:71:
+		printk(" %3x", free);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5110: FILE: fs/logfs/progs/fsck.c:73:
+			printk(" : ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5112: FILE: fs/logfs/progs/fsck.c:75:
+			printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5114: FILE: fs/logfs/progs/fsck.c:77:
+	printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5117: FILE: fs/logfs/progs/fsck.c:80:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5122: FILE: fs/logfs/progs/fsck.c:85:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5124: FILE: fs/logfs/progs/fsck.c:87:
+static noinline int read_one_dd(struct inode *dir, loff_t pos, u64 *ino,
+		u8 *type)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5137: FILE: fs/logfs/progs/fsck.c:100:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#5141: FILE: fs/logfs/progs/fsck.c:104:
+	s64 new_pos = logfs_seek_data(inode, pos);
+	return max((s64)pos, new_pos - 1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5144: FILE: fs/logfs/progs/fsck.c:107:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#5153: FILE: fs/logfs/progs/fsck.c:116:
+	for (pos=0; ; pos++) {
 	        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5167: FILE: fs/logfs/progs/fsck.c:130:
+			printk("ino %llx > last_ino %llx\n", ino, last_ino);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5172: FILE: fs/logfs/progs/fsck.c:135:
+			printk("Could not find inode #%llx\n", ino);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5176: FILE: fs/logfs/progs/fsck.c:139:
+			printk("dd type %x != inode type %x\n", type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5177: FILE: fs/logfs/progs/fsck.c:140:
+			printk("dd type %x != inode type %x\n", type,
+					logfs_type(inode));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5197: FILE: fs/logfs/progs/fsck.c:160:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5215: FILE: fs/logfs/progs/fsck.c:178:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5220: FILE: fs/logfs/progs/fsck.c:183:
+
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5230: FILE: fs/logfs/progs/fsck.c:193:
+	if (bytes0 || bytes1 || links0 || links1
+			|| inode->i_ino == LOGFS_SUPER(inode->i_sb)->s_last_ino)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5231: FILE: fs/logfs/progs/fsck.c:194:
+		printk("%lx: %llx(%llx) bytes, %llx(%llx) links\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5232: FILE: fs/logfs/progs/fsck.c:195:
+		printk("%lx: %llx(%llx) bytes, %llx(%llx) links\n",
+				inode->i_ino, bytes0, bytes1, links0, links1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5237: FILE: fs/logfs/progs/fsck.c:200:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5252: FILE: fs/logfs/progs/fsck.c:215:
+
+

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#5260: FILE: fs/logfs/progs/fsck.c:223:
+		ret = 0;;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#5263: FILE: fs/logfs/progs/fsck.c:226:
+	for (i=16; i<super->s_last_ino; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#5263: FILE: fs/logfs/progs/fsck.c:226:
+	for (i=16; i<super->s_last_ino; i++) {
 	            ^

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#5266: FILE: fs/logfs/progs/fsck.c:229:
+			ret = 0;;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5271: FILE: fs/logfs/progs/fsck.c:234:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5276: FILE: fs/logfs/progs/fsck.c:239:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5293: FILE: fs/logfs/progs/fsck.c:256:
+	printk("free:%8llx, used:%8llx, total:%8llx",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5294: FILE: fs/logfs/progs/fsck.c:257:
+	printk("free:%8llx, used:%8llx, total:%8llx",
+			free_bytes, used_bytes, expected);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5296: FILE: fs/logfs/progs/fsck.c:259:
+		printk(" + %llx\n", total - expected);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5298: FILE: fs/logfs/progs/fsck.c:261:
+		printk(" - %llx\n", expected - total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5300: FILE: fs/logfs/progs/fsck.c:263:
+		printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5305: FILE: fs/logfs/progs/fsck.c:268:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5316: FILE: fs/logfs/progs/fsck.c:279:
+		printk("Pass 2: directory check failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5322: FILE: fs/logfs/progs/fsck.c:285:
+		printk("Pass 3: inode check failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5328: FILE: fs/logfs/progs/fsck.c:291:
+		printk("Pass 4: statistic check failed\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5335: FILE: fs/logfs/progs/fsck.c:298:
+
+

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#5344: FILE: fs/logfs/progs/fsck.c:307:
+	inode_bytes = kzalloc(last_ino * sizeof(be64), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#5347: FILE: fs/logfs/progs/fsck.c:310:
+	inode_links = kzalloc(last_ino * sizeof(be64), GFP_KERNEL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5412: FILE: fs/logfs/compr.c:1:
+#include "logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5421: FILE: fs/logfs/compr.c:10:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5430: FILE: fs/logfs/compr.c:19:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <zlib_deflateInit>
#5436: FILE: fs/logfs/compr.c:25:
+	ret = zlib_deflateInit(&stream, COMPR_LEVEL);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#5443: FILE: fs/logfs/compr.c:32:
+	for (i=0; i<count-1; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#5443: FILE: fs/logfs/compr.c:32:
+	for (i=0; i<count-1; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5443: FILE: fs/logfs/compr.c:32:
+	for (i=0; i<count-1; i++) {
 	                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5453: FILE: fs/logfs/compr.c:42:
+		/* if (stream.total_out >= outlen)
+			goto error; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5453: FILE: fs/logfs/compr.c:42:
+			goto error; */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5456: FILE: fs/logfs/compr.c:45:
+	stream.next_in = vec[count-1].iov_base;
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5457: FILE: fs/logfs/compr.c:46:
+	stream.avail_in = vec[count-1].iov_len;
 	                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5465: FILE: fs/logfs/compr.c:54:
+	/* if (stream.total_out >= outlen)
+		goto error; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5465: FILE: fs/logfs/compr.c:54:
+		goto error; */

CHECK:CAMELCASE: Avoid CamelCase: <zlib_deflateEnd>
#5467: FILE: fs/logfs/compr.c:56:
+	ret = zlib_deflateEnd(&stream);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5482: FILE: fs/logfs/compr.c:71:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5518: FILE: fs/logfs/compr.c:107:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <zlib_inflateInit>
#5524: FILE: fs/logfs/compr.c:113:
+	ret = zlib_inflateInit(&stream);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#5531: FILE: fs/logfs/compr.c:120:
+	for (i=0; i<count-1; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#5531: FILE: fs/logfs/compr.c:120:
+	for (i=0; i<count-1; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5531: FILE: fs/logfs/compr.c:120:
+	for (i=0; i<count-1; i++) {
 	                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5543: FILE: fs/logfs/compr.c:132:
+	stream.next_out = vec[count-1].iov_base;
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5544: FILE: fs/logfs/compr.c:133:
+	stream.avail_out = vec[count-1].iov_len;
 	                            ^

CHECK:CAMELCASE: Avoid CamelCase: <zlib_inflateEnd>
#5550: FILE: fs/logfs/compr.c:139:
+	ret = zlib_inflateEnd(&stream);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5561: FILE: fs/logfs/compr.c:150:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5593: FILE: fs/logfs/compr.c:182:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5598: FILE: fs/logfs/compr.c:187:
+	printk("deflate size: %x\n", zlib_deflate_workspacesize());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5599: FILE: fs/logfs/compr.c:188:
+	printk("inflate size: %x\n", zlib_inflate_workspacesize());

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5613: FILE: fs/logfs/segment.c:1:
+#include "logfs.h"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5619: FILE: fs/logfs/segment.c:7:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5629: FILE: fs/logfs/segment.c:17:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5631: FILE: fs/logfs/segment.c:19:
+static s32 __logfs_get_free_bytes(struct logfs_area *area, u64 ino, u64 pos,
+		size_t bytes)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5637: FILE: fs/logfs/segment.c:25:
+	BUG_ON(ret>0);

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#5637: FILE: fs/logfs/segment.c:25:
+	BUG_ON(ret>0);
 	          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5643: FILE: fs/logfs/segment.c:31:
+	BUG_ON(area->a_used_bytes >= LOGFS_SUPER(area->a_sb)->s_segsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5648: FILE: fs/logfs/segment.c:36:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5659: FILE: fs/logfs/segment.c:47:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5668: FILE: fs/logfs/segment.c:56:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5674: FILE: fs/logfs/segment.c:62:
+	BUG_ON(li->li_used_bytes + bytes < bytes); /* wraps are bad, mkay */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5681: FILE: fs/logfs/segment.c:69:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5687: FILE: fs/logfs/segment.c:75:
+	BUG_ON(li->li_used_bytes < bytes);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5694: FILE: fs/logfs/segment.c:82:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5739: FILE: fs/logfs/segment.c:127:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5742: FILE: fs/logfs/segment.c:130:
+	BUG_ON(level >= LOGFS_MAX_LEVELS);

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#5744: FILE: fs/logfs/segment.c:132:
+	if (ino == LOGFS_INO_MASTER)	/* ifile has seperate areas */
 	                            	             ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5749: FILE: fs/logfs/segment.c:137:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5755: FILE: fs/logfs/segment.c:143:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5758: FILE: fs/logfs/segment.c:146:
+s64 __logfs_segment_write(struct inode *inode, void *buf, u64 pos, int level,
+		int alloc, int len, int compr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5783: FILE: fs/logfs/segment.c:171:
+	BUG_ON(err);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#5787: FILE: fs/logfs/segment.c:175:
+		int acc_len = (level==0) ? len : sb->s_blocksize;
 		                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#5788: FILE: fs/logfs/segment.c:176:
+		int acc_len = (level==0) ? len : sb->s_blocksize;
+		logfs_consume_bytes(inode, acc_len + HEADER_SIZE);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5798: FILE: fs/logfs/segment.c:186:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5800: FILE: fs/logfs/segment.c:188:
+s64 logfs_segment_write(struct inode *inode, void *buf, u64 pos, int level,
+		int alloc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5815: FILE: fs/logfs/segment.c:203:
+		ofs = __logfs_segment_write(inode, compressor_buf, pos, level,
+				alloc, compr_len, COMPR_ZLIB);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5818: FILE: fs/logfs/segment.c:206:
+		ofs = __logfs_segment_write(inode, buf, pos, level, alloc, bs,
+				COMPR_NONE);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5824: FILE: fs/logfs/segment.c:212:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5827: FILE: fs/logfs/segment.c:215:
+static void fixup_from_wbuf(struct super_block *sb, struct logfs_area *area,
+		void *read, u64 ofs, size_t readlen)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5857: FILE: fs/logfs/segment.c:245:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#5869: FILE: fs/logfs/segment.c:257:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#5869: FILE: fs/logfs/segment.c:257:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5879: FILE: fs/logfs/segment.c:267:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5887: FILE: fs/logfs/segment.c:275:
+	err = wbuf_read(sb, ofs, bs+24, compressor_buf);
 	                           ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#5890: FILE: fs/logfs/segment.c:278:
+	h = (void*)compressor_buf;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5895: FILE: fs/logfs/segment.c:283:
+		logfs_memcpy(compressor_buf+24, buf, bs, bs);
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5898: FILE: fs/logfs/segment.c:286:
+		err = logfs_uncompress(compressor_buf+24, buf, len, bs);
 		                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5899: FILE: fs/logfs/segment.c:287:
+		BUG_ON(err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5909: FILE: fs/logfs/segment.c:297:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5912: FILE: fs/logfs/segment.c:300:
+	~(I1_BLOCKS-1),
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5913: FILE: fs/logfs/segment.c:301:
+	~(I2_BLOCKS-1),
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5914: FILE: fs/logfs/segment.c:302:
+	~(I3_BLOCKS-1)
 	           ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5916: FILE: fs/logfs/segment.c:304:
+};
+static int check_pos(struct super_block *sb, u64 pos1, u64 pos2, int level)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5918: FILE: fs/logfs/segment.c:306:
+	LOGFS_BUG_ON(	(pos1 & logfs_block_mask[level]) !=

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5921: FILE: fs/logfs/segment.c:309:
+}
+int logfs_segment_delete(struct inode *inode, u64 ofs, u64 pos, int level)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5928: FILE: fs/logfs/segment.c:316:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5930: FILE: fs/logfs/segment.c:318:
+	err = wbuf_read(sb, ofs, 4096+24, compressor_buf);
 	                             ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#5932: FILE: fs/logfs/segment.c:320:
+	h = (void*)compressor_buf;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#5938: FILE: fs/logfs/segment.c:326:
+	len = (level==0) ? len : sb->s_blocksize;
 	            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5943: FILE: fs/logfs/segment.c:331:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5960: FILE: fs/logfs/segment.c:348:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5969: FILE: fs/logfs/segment.c:357:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5975: FILE: fs/logfs/segment.c:363:
+	BUG_ON(list_empty(&super->s_free_list));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5984: FILE: fs/logfs/segment.c:372:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5993: FILE: fs/logfs/segment.c:381:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6002: FILE: fs/logfs/segment.c:390:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6027: FILE: fs/logfs/segment.c:415:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6052: FILE: fs/logfs/segment.c:440:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6069: FILE: fs/logfs/segment.c:457:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6078: FILE: fs/logfs/segment.c:466:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6085: FILE: fs/logfs/segment.c:473:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6112: FILE: fs/logfs/segment.c:500:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*super->s_journal_area)...) over kzalloc(sizeof(struct logfs_area)...)
#6118: FILE: fs/logfs/segment.c:506:
+	super->s_journal_area = kzalloc(sizeof(struct logfs_area), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6123: FILE: fs/logfs/segment.c:511:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6123: FILE: fs/logfs/segment.c:511:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#6131: FILE: fs/logfs/segment.c:519:
+	for (i--; i>=0; i--)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6137: FILE: fs/logfs/segment.c:525:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6142: FILE: fs/logfs/segment.c:530:
+	for (i=0; i<LOGFS_NO_AREAS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6142: FILE: fs/logfs/segment.c:530:
+	for (i=0; i<LOGFS_NO_AREAS; i++)
 	           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6149: FILE: fs/logfs/memtree.c:1:
+/* In-memory B+Tree. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6160: FILE: fs/logfs/memtree.c:12:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6168: FILE: fs/logfs/memtree.c:20:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6181: FILE: fs/logfs/memtree.c:33:
+		for (i=0; i<BTREE_NODES; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6181: FILE: fs/logfs/memtree.c:33:
+		for (i=0; i<BTREE_NODES; i++)
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6187: FILE: fs/logfs/memtree.c:39:
+	for (i=0; i<BTREE_NODES; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6187: FILE: fs/logfs/memtree.c:39:
+	for (i=0; i<BTREE_NODES; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6194: FILE: fs/logfs/memtree.c:46:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6199: FILE: fs/logfs/memtree.c:51:
+	for (i=0; i<BTREE_NODES; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6199: FILE: fs/logfs/memtree.c:51:
+	for (i=0; i<BTREE_NODES; i++)
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#6203: FILE: fs/logfs/memtree.c:55:
+	for (i=*pos; i<BTREE_NODES; i++)
 	      ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#6203: FILE: fs/logfs/memtree.c:55:
+	for (i=*pos; i<BTREE_NODES; i++)
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6203: FILE: fs/logfs/memtree.c:55:
+	for (i=*pos; i<BTREE_NODES; i++)
 	              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6209: FILE: fs/logfs/memtree.c:61:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6211: FILE: fs/logfs/memtree.c:63:
+static struct btree_node *find_level(struct btree_head *head, long val,
+		int level)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6217: FILE: fs/logfs/memtree.c:69:
+		for (i=0; i<BTREE_NODES; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6217: FILE: fs/logfs/memtree.c:69:
+		for (i=0; i<BTREE_NODES; i++)
 		           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6225: FILE: fs/logfs/memtree.c:77:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6234: FILE: fs/logfs/memtree.c:86:
+		node->val = head->node[BTREE_NODES-1].val;
 		                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6242: FILE: fs/logfs/memtree.c:94:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6244: FILE: fs/logfs/memtree.c:96:
+static int btree_insert_level(struct btree_head *head, long val, void *ptr,
+		int level)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6250: FILE: fs/logfs/memtree.c:102:
+		BUG_ON(level != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6264: FILE: fs/logfs/memtree.c:116:
+	BUG_ON(node[pos].val == val);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6272: FILE: fs/logfs/memtree.c:124:
+		err = btree_insert_level(head, node[BTREE_NODES/2 - 1].val, new,
 		                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6273: FILE: fs/logfs/memtree.c:125:
+		err = btree_insert_level(head, node[BTREE_NODES/2 - 1].val, new,
+				level+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6273: FILE: fs/logfs/memtree.c:125:
+				level+1);
 				     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6278: FILE: fs/logfs/memtree.c:130:
+		for (i=0; i<BTREE_NODES/2; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6278: FILE: fs/logfs/memtree.c:130:
+		for (i=0; i<BTREE_NODES/2; i++) {
 		           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6278: FILE: fs/logfs/memtree.c:130:
+		for (i=0; i<BTREE_NODES/2; i++) {
 		                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6281: FILE: fs/logfs/memtree.c:133:
+			node[i].val = node[i + BTREE_NODES/2].val;
 			                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6282: FILE: fs/logfs/memtree.c:134:
+			node[i].node = node[i + BTREE_NODES/2].node;
 			                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6283: FILE: fs/logfs/memtree.c:135:
+			node[i + BTREE_NODES/2].val = 0;
 			                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6284: FILE: fs/logfs/memtree.c:136:
+			node[i + BTREE_NODES/2].node = NULL;
 			                    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6288: FILE: fs/logfs/memtree.c:140:
+	BUG_ON(fill >= BTREE_NODES);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6291: FILE: fs/logfs/memtree.c:143:
+	for (i=fill; i>pos; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#6291: FILE: fs/logfs/memtree.c:143:
+	for (i=fill; i>pos; i--) {
 	              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6292: FILE: fs/logfs/memtree.c:144:
+		node[i].val = node[i-1].val;
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6293: FILE: fs/logfs/memtree.c:145:
+		node[i].node = node[i-1].node;
 		                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6301: FILE: fs/logfs/memtree.c:153:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6307: FILE: fs/logfs/memtree.c:159:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6321: FILE: fs/logfs/memtree.c:173:
+		BUG_ON(node[pos].val != val);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6324: FILE: fs/logfs/memtree.c:176:
+	for (i=pos; i<fill-1; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6324: FILE: fs/logfs/memtree.c:176:
+	for (i=pos; i<fill-1; i++) {
 	             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6324: FILE: fs/logfs/memtree.c:176:
+	for (i=pos; i<fill-1; i++) {
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6325: FILE: fs/logfs/memtree.c:177:
+		node[i].val = node[i+1].val;
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6326: FILE: fs/logfs/memtree.c:178:
+		node[i].node = node[i+1].node;
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6328: FILE: fs/logfs/memtree.c:180:
+	node[fill-1].val = 0;
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6329: FILE: fs/logfs/memtree.c:181:
+	node[fill-1].node = NULL;
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6331: FILE: fs/logfs/memtree.c:183:
+	if (fill-1 < BTREE_NODES/2) {
 	        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6331: FILE: fs/logfs/memtree.c:183:
+	if (fill-1 < BTREE_NODES/2) {
 	                        ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#6331: FILE: fs/logfs/memtree.c:183:
+	if (fill-1 < BTREE_NODES/2) {
+		/* XXX */
+	}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6334: FILE: fs/logfs/memtree.c:186:
+	if (fill-1 == 0) {
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6335: FILE: fs/logfs/memtree.c:187:
+		btree_remove_level(head, val, level+1);
 		                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6343: FILE: fs/logfs/memtree.c:195:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434766.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 163 errors, 227 warnings, 557 checks, 6233 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434766.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
