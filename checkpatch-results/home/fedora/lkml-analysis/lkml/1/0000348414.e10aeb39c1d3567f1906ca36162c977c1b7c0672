Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#29: 
Added support for fallocate for a msdos fat driver. This allows
                                  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fat_bmap', this function's name, in a string
#60: FILE: fs/fat/cache.c:322:
+	pr_debug("fat_bmap():cluster:%d, offset:%d, last_block:%llu\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: fs/fat/cache.c:323:
+	pr_debug("fat_bmap():cluster:%d, offset:%d, last_block:%llu\n",
+		cluster, offset, last_block);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fat_bmap', this function's name, in a string
#71: FILE: fs/fat/cache.c:334:
+			pr_debug("fat_bmap():cluster:%d, phys:%llu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: fs/fat/cache.c:335:
+			pr_debug("fat_bmap():cluster:%d, phys:%llu\n",
+				cluster, *phys);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#125: FILE: fs/fat/file.c:342:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fat_fallocate', this function's name, in a string
#126: FILE: fs/fat/file.c:343:
+		"fat_fallocate(): Directory prealloc not supported\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fat_fallocate', this function's name, in a string
#131: FILE: fs/fat/file.c:348:
+	pr_debug("fat_fallocate:offset block:%lu\n", offset_block);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fat_fallocate', this function's name, in a string
#136: FILE: fs/fat/file.c:353:
+	pr_debug("fat_fallocate:allocate block:%lu\n", new_blocks);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#141: FILE: fs/fat/file.c:358:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fat_fallocate', this function's name, in a string
#142: FILE: fs/fat/file.c:359:
+			"fat_fallocate():Blocks already allocated\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#145: FILE: fs/fat/file.c:362:
+	if (offset_block >
[...]
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#148: FILE: fs/fat/file.c:365:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fat_fallocate', this function's name, in a string
#149: FILE: fs/fat/file.c:366:
+			"fat_fallocate():Offset error\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#153: FILE: fs/fat/file.c:370:
+	while (ret >= 0 && nblocks < new_blocks) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#160: FILE: fs/fat/file.c:377:
+		if (!cluster_offset) {
+

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#163: FILE: fs/fat/file.c:380:
+				pr_debug("msdos_fallocate():Add cluster err\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: fs/fat/file.c:390:
+		pr_debug("msdos_fallocate():mapped_blocks:%lu\n",
+					mapped_blocks);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#180: FILE: fs/fat/file.c:397:
+		max_blocks = min(mapped_blocks, (new_blocks-nblocks));
 		                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: fs/fat/file.c:403:
+		pr_debug("msdos_fallocate():MSDOS_I(inode)->mmu_private:%llu\n",
+				MSDOS_I(inode)->mmu_private);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: fs/fat/file.c:406:
+		pr_debug("msdos_fallocate():mapped_blocks:%lu,max_blocks:%lu\n",
+				mapped_blocks, max_blocks);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#193: FILE: fs/fat/file.c:410:
+			printk(KERN_ERR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: fs/fat/file.c:415:
+		pr_debug("msdos_fallocate():sector: %lu, phys: %llu\n",
+			offset_block, phys);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#201: FILE: fs/fat/file.c:418:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#206: FILE: fs/fat/file.c:423:
+			printk(KERN_ERR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: fs/fat/file.c:430:
+		pr_debug("msdos_fallocate():b_size:%d, b_blocknr:%llu\n",
+			bh.b_size, bh.b_blocknr);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#216: FILE: fs/fat/file.c:433:
+		if (!timespec_equal(&inode->i_ctime, &now))
+				inode->i_ctime = now;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: fs/fat/file.c:442:
+	pr_debug("msdos_fallocate():fat_bmap():nblocks:%lu\n",
+			nblocks);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: fs/fat/file.c:450:
+	if (!(mode & FALLOC_FL_KEEP_SIZE) &&
+		(offset + len) > i_size_read(inode)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: fs/fat/file.c:460:
+			pr_debug("msdos_fallocate():INODE SIZE:%llu\n",
+					i_size_read(inode));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#246: FILE: fs/fat/file.c:463:
+		} else if (ret && nblocks) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#247: FILE: fs/fat/file.c:464:
+			printk(KERN_ERR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: fs/fat/file.c:470:
+			i_size_write(inode,
+				MSDOS_BLOCK_ALIGN(newsize, blkbits));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: fs/fat/file.c:473:
+			pr_debug("msdos_fallocate():INODE SIZE:%llu\n",
+					i_size_read(inode));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#262: FILE: fs/fat/file.c:479:
+
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#297: FILE: fs/fat/inode.c:70:
+	pr_debug(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__fat_get_block', this function's name, in a string
#298: FILE: fs/fat/inode.c:71:
+	"__fat_get_block():phys: %llu, mapped_blocks:%lu,sector: %llu\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#308: FILE: fs/fat/inode.c:100:
+	pr_debug(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__fat_get_block', this function's name, in a string
#309: FILE: fs/fat/inode.c:101:
+	"__fat_get_block(): max_blocks: %lu, mapped_blocks:%lu\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#316: FILE: fs/fat/inode.c:108:
+	pr_debug(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__fat_get_block', this function's name, in a string
#317: FILE: fs/fat/inode.c:109:
+	"__fat_get_block():phys: %llu, mapped_blocks:%lu,sector: %llu\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#328: FILE: fs/fat/inode.c:135:
+	printk(KERN_INFO "fat_get_block():bh_result->b_size:%d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fat_get_block', this function's name, in a string
#328: FILE: fs/fat/inode.c:135:
+	printk(KERN_INFO "fat_get_block():bh_result->b_size:%d\n",

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#352: FILE: include/linux/msdos_fs.h:356:
+extern int fat_add_cluster(struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000348414.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 23 warnings, 21 checks, 286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000348414.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
