WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
It provides methods to reserve and charge. Upon this, generic alloc/free style

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: include/linux/reserve.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: include/linux/reserve.h:33:
+^I       ^I^Istruct mem_reserve *node);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#81: FILE: include/linux/reserve.h:33:
+^I       ^I^Istruct mem_reserve *node);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#81: FILE: include/linux/reserve.h:33:
+int mem_reserve_connect(struct mem_reserve *new_child,
+	       		struct mem_reserve *node);

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: include/linux/reserve.h:48:
+^I       ^I^I       struct kmem_cache *s,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#96: FILE: include/linux/reserve.h:48:
+^I       ^I^I       struct kmem_cache *s,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: include/linux/reserve.h:48:
+int mem_reserve_kmem_cache_set(struct mem_reserve *res,
+	       		       struct kmem_cache *s,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#121: FILE: mm/reserve.c:1:
+/*

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#179: FILE: mm/reserve.c:59:
+EXPORT_SYMBOL_GPL(mem_reserve_root);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#199: FILE: mm/reserve.c:79:
+EXPORT_SYMBOL_GPL(mem_reserve_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#303: FILE: mm/reserve.c:183:
+EXPORT_SYMBOL_GPL(mem_reserve_connect);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#316: FILE: mm/reserve.c:196:
+	BUG_ON(!node->parent);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#329: FILE: mm/reserve.c:209:
+EXPORT_SYMBOL_GPL(mem_reserve_disconnect);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#364: FILE: mm/reserve.c:244:
+		mem_reserve_show_item(m, child, nesting+1);
 		                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#392: FILE: mm/reserve.c:272:
+	entry = create_proc_entry("reserve_info", S_IRUSR, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#399: FILE: mm/reserve.c:279:
+__initcall(mem_reserve_proc_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#427: FILE: mm/reserve.c:307:
+EXPORT_SYMBOL_GPL(mem_reserve_pages_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#463: FILE: mm/reserve.c:343:
+EXPORT_SYMBOL_GPL(mem_reserve_pages_charge);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#491: FILE: mm/reserve.c:371:
+EXPORT_SYMBOL_GPL(mem_reserve_kmalloc_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#512: FILE: mm/reserve.c:392:
+EXPORT_SYMBOL_GPL(mem_reserve_kmalloc_charge);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#542: FILE: mm/reserve.c:422:
+EXPORT_SYMBOL_GPL(mem_reserve_kmem_cache_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#558: FILE: mm/reserve.c:438:
+EXPORT_SYMBOL_GPL(mem_reserve_kmem_cache_charge);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346978.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 18 warnings, 3 checks, 500 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346978.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
