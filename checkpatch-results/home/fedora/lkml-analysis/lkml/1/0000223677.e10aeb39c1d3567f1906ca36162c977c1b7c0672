WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#101: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: fs/notify/access.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#121: FILE: fs/notify/access.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#124: FILE: fs/notify/access.c:19:
+#include <asm/atomic.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#164: FILE: fs/notify/access.c:59:
+	int ret;
+	ret = wait_event_interruptible_timeout(group->access_waitq,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: fs/notify/access.c:60:
+	ret = wait_event_interruptible_timeout(group->access_waitq,
+						event->response,

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#205: FILE: fs/notify/access.c:100:
+int fanotify_process_access_response(struct fanotify_group *group, unsigned long cookie, unsigned int response)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'responce' may be misspelled - perhaps 'response'?
#212: FILE: fs/notify/access.c:107:
+	 * userspace can send a valid responce or we will clean it up after the
 	                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#249: FILE: fs/notify/access_user.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#264: FILE: fs/notify/access_user.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#280: FILE: fs/notify/access_user.c:32:
+static ssize_t fanotify_access_write(struct file *file, const char __user *buf, size_t lenp, loff_t *offset)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#352: FILE: fs/notify/access_user.c:104:
+	BUG_ON(!group);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONST_STRUCT: struct file_operations should normally be const
#359: FILE: fs/notify/access_user.c:111:
+static struct file_operations access_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#379: FILE: fs/notify/access_user.c:131:
+	access_file = securityfs_create_file("access", S_IRUSR|S_IWUSR, group->subdir, group, &access_fops);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#379: FILE: fs/notify/access_user.c:131:
+	access_file = securityfs_create_file("access", S_IRUSR|S_IWUSR, group->subdir, group, &access_fops);
 	                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#379: FILE: fs/notify/access_user.c:131:
+	access_file = securityfs_create_file("access", S_IRUSR|S_IWUSR, group->subdir, group, &access_fops);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LONG_LINE_COMMENT: line length of 128 exceeds 100 columns
#452: FILE: fs/notify/fanotify.c:111:
+				/* put on access_list first so userspace can't be so fast responding it isn't on the list yet */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#533: FILE: fs/notify/fanotify.h:143:
+extern int fanotify_access_user_create(struct fanotify_group *group);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#534: FILE: fs/notify/fanotify.h:144:
+extern int fanotify_access_user_destroy(struct fanotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#536: FILE: fs/notify/fanotify.h:146:
+extern int add_event_to_group_access(struct fanotify_group *group, struct fanotify_event *event);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#537: FILE: fs/notify/fanotify.h:147:
+extern int get_response_from_group_access(struct fanotify_group *group, struct fanotify_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#537: FILE: fs/notify/fanotify.h:147:
+extern int get_response_from_group_access(struct fanotify_group *group, struct fanotify_event *event);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#538: FILE: fs/notify/fanotify.h:148:
+extern int fanotify_process_access_response(struct fanotify_group *group, unsigned long cookie, unsigned int response);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#538: FILE: fs/notify/fanotify.h:148:
+extern int fanotify_process_access_response(struct fanotify_group *group, unsigned long cookie, unsigned int response);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#577: FILE: fs/notify/group.c:132:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#638: FILE: fs/notify/notification_user.c:80:
 
+

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#647: FILE: fs/notify/notification_user.c:136:
+	rc = snprintf(output, lenp-1, "fd=%d mask=%x cookie=%lu\n", client_fd, event->mask, event->cookie);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#647: FILE: fs/notify/notification_user.c:136:
+	rc = snprintf(output, lenp-1, "fd=%d mask=%x cookie=%lu\n", client_fd, event->mask, event->cookie);
 	                          ^

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#712: FILE: fs/notify/notification_user.c:238:
+				/* don't count this file we are closing as being a reference to an access file */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: fs/notify/notification_user.c:248:
+^I^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#723: FILE: fs/notify/notification_user.c:249:
+					
+				}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#826: FILE: include/linux/fanotify.h:58:
+extern int fanotify(struct file *file, unsigned int mask);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223677.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 17 warnings, 12 checks, 696 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223677.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
