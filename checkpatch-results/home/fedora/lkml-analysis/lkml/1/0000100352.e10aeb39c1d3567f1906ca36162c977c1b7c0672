WARNING:BAD_SIGN_OFF: Unexpected content after email: 'linux-arm-kernel@lists.arm.linux.org.uk; Linux Kernel', should be: 'linux-arm-kernel@lists.arm.linux.org.uk; (Linux Kernel)'
#51: 
To: linux-arm-kernel@lists.arm.linux.org.uk; Linux Kernel

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Russell King - ARM Linux; Alan Cox; Jean-Christophe PLAGNIOL-VILLARD; Scott Branden; Leo (Hao) Chen'
#52: 
Cc: Russell King - ARM Linux; Alan Cox; Jean-Christophe PLAGNIOL-VILLARD; Scott Branden; Leo (Hao) Chen

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#88: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: arch/arm/mach-bcmring/arch.c:1:
+/*****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#94: FILE: arch/arm/mach-bcmring/arch.c:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: arch/arm/mach-bcmring/arch.c:48:
+    EXPORT_SYMBOL(bcmring_gpio_reg_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: arch/arm/mach-bcmring/arch.c:61:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: arch/arm/mach-bcmring/arch.c:62:
+        .ctl_name = BCM_SYSCTL_REBOOT_WARM,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: arch/arm/mach-bcmring/arch.c:62:
+        .ctl_name = BCM_SYSCTL_REBOOT_WARM,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: arch/arm/mach-bcmring/arch.c:63:
+        .procname = "warm",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: arch/arm/mach-bcmring/arch.c:63:
+        .procname = "warm",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: arch/arm/mach-bcmring/arch.c:64:
+        .data = &bcmring_arch_warm_reboot,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: arch/arm/mach-bcmring/arch.c:64:
+        .data = &bcmring_arch_warm_reboot,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: arch/arm/mach-bcmring/arch.c:65:
+        .maxlen = sizeof(int),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: arch/arm/mach-bcmring/arch.c:65:
+        .maxlen = sizeof(int),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: arch/arm/mach-bcmring/arch.c:66:
+        .mode = 0644,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: arch/arm/mach-bcmring/arch.c:66:
+        .mode = 0644,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: arch/arm/mach-bcmring/arch.c:67:
+        .proc_handler = &proc_dointvec},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: arch/arm/mach-bcmring/arch.c:67:
+        .proc_handler = &proc_dointvec},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: arch/arm/mach-bcmring/arch.c:68:
+       {}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: arch/arm/mach-bcmring/arch.c:72:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: arch/arm/mach-bcmring/arch.c:73:
+        .ctl_name = CTL_BCM_REBOOT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: arch/arm/mach-bcmring/arch.c:73:
+        .ctl_name = CTL_BCM_REBOOT,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: arch/arm/mach-bcmring/arch.c:74:
+        .procname = "reboot",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: arch/arm/mach-bcmring/arch.c:74:
+        .procname = "reboot",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: arch/arm/mach-bcmring/arch.c:75:
+        .mode = 0555,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: arch/arm/mach-bcmring/arch.c:75:
+        .mode = 0555,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: arch/arm/mach-bcmring/arch.c:76:
+        .child = bcmring_sysctl_warm_reboot},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: arch/arm/mach-bcmring/arch.c:76:
+        .child = bcmring_sysctl_warm_reboot},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/arm/mach-bcmring/arch.c:77:
+       {}$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#172: FILE: arch/arm/mach-bcmring/arch.c:80:
+extern void bcmring_map_io(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#173: FILE: arch/arm/mach-bcmring/arch.c:81:
+extern void bcmring_init_irq(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#174: FILE: arch/arm/mach-bcmring/arch.c:82:
+extern void bcmring_init_timer(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: arch/arm/mach-bcmring/arch.c:85:
+       .name = "bcm-nand",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: arch/arm/mach-bcmring/arch.c:86:
+       .id = -1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: arch/arm/mach-bcmring/arch.c:90:
+       &nand_device,$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#186: FILE: arch/arm/mach-bcmring/arch.c:94:
+/****************************************************************************
+*

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#196: FILE: arch/arm/mach-bcmring/arch.c:104:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: arch/arm/mach-bcmring/arch.c:105:
+       bcmring_sysctl_header = register_sysctl_table(bcmring_sysctl_reboot);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: arch/arm/mach-bcmring/arch.c:108:
+       chipcHw_enableSpreadSpectrum();$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_enableSpreadSpectrum>
#200: FILE: arch/arm/mach-bcmring/arch.c:108:
+       chipcHw_enableSpreadSpectrum();

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: arch/arm/mach-bcmring/arch.c:110:
+       platform_add_devices(devices, ARRAY_SIZE(devices));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: arch/arm/mach-bcmring/arch.c:112:
+       bcmring_amba_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: arch/arm/mach-bcmring/arch.c:114:
+       dma_init();$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#210: FILE: arch/arm/mach-bcmring/arch.c:118:
+/****************************************************************************
+*

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#216: FILE: arch/arm/mach-bcmring/arch.c:124:
+static void __init bcmring_fixup
+    (struct machine_desc *desc,
+     struct tag *t, char **cmdline, struct meminfo *mi) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: arch/arm/mach-bcmring/arch.c:125:
+    (struct machine_desc *desc,$

WARNING:CONST_STRUCT: struct machine_desc should normally be const
#217: FILE: arch/arm/mach-bcmring/arch.c:125:
+    (struct machine_desc *desc,

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: arch/arm/mach-bcmring/arch.c:126:
+     struct tag *t, char **cmdline, struct meminfo *mi) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: arch/arm/mach-bcmring/arch.c:128:
+       printk(KERN_NOTICE "bcmring_fixup\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#220: FILE: arch/arm/mach-bcmring/arch.c:128:
+       printk(KERN_NOTICE "bcmring_fixup\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bcmring_fixup', this function's name, in a string
#220: FILE: arch/arm/mach-bcmring/arch.c:128:
+       printk(KERN_NOTICE "bcmring_fixup\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: arch/arm/mach-bcmring/arch.c:129:
+       t->hdr.tag = ATAG_CORE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: arch/arm/mach-bcmring/arch.c:130:
+       t->hdr.size = tag_size(tag_core);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: arch/arm/mach-bcmring/arch.c:131:
+       t->u.core.flags = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: arch/arm/mach-bcmring/arch.c:132:
+       t->u.core.pagesize = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: arch/arm/mach-bcmring/arch.c:133:
+       t->u.core.rootdev = 31 << 8 | 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: arch/arm/mach-bcmring/arch.c:134:
+       t = tag_next(t);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: arch/arm/mach-bcmring/arch.c:136:
+       t->hdr.tag = ATAG_MEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: arch/arm/mach-bcmring/arch.c:137:
+       t->hdr.size = tag_size(tag_mem32);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: arch/arm/mach-bcmring/arch.c:138:
+       t->u.mem.start = CFG_GLOBAL_RAM_BASE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: arch/arm/mach-bcmring/arch.c:139:
+       t->u.mem.size = CFG_GLOBAL_RAM_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: arch/arm/mach-bcmring/arch.c:141:
+       t = tag_next(t);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: arch/arm/mach-bcmring/arch.c:143:
+       t->hdr.tag = ATAG_NONE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: arch/arm/mach-bcmring/arch.c:144:
+       t->hdr.size = 0;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#241: FILE: arch/arm/mach-bcmring/arch.c:149:
+/****************************************************************************
+*

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: arch/arm/mach-bcmring/arch.c:156:
+       .init = bcmring_init_timer,$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#252: FILE: arch/arm/mach-bcmring/arch.c:160:
+/****************************************************************************
+*

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: arch/arm/mach-bcmring/arch.c:167:
+    .phys_io = IO_START,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: arch/arm/mach-bcmring/arch.c:168:
+        .io_pg_offst = (IO_BASE >> 18) & 0xfffc,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: arch/arm/mach-bcmring/arch.c:168:
+        .io_pg_offst = (IO_BASE >> 18) & 0xfffc,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: arch/arm/mach-bcmring/arch.c:169:
+        .fixup = bcmring_fixup,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: arch/arm/mach-bcmring/arch.c:169:
+        .fixup = bcmring_fixup,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: arch/arm/mach-bcmring/arch.c:170:
+        .map_io = bcmring_map_io,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: arch/arm/mach-bcmring/arch.c:170:
+        .map_io = bcmring_map_io,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: arch/arm/mach-bcmring/arch.c:171:
+        .init_irq = bcmring_init_irq,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: arch/arm/mach-bcmring/arch.c:171:
+        .init_irq = bcmring_init_irq,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: arch/arm/mach-bcmring/arch.c:172:
+        .timer = &bcmring_timer,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: arch/arm/mach-bcmring/arch.c:172:
+        .timer = &bcmring_timer,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: arch/arm/mach-bcmring/arch.c:173:
+        .init_machine = bcmring_init_machine$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: arch/arm/mach-bcmring/arch.c:173:
+        .init_machine = bcmring_init_machine$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: arch/arm/mach-bcmring/arch.c:174:
+ MACHINE_END$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#273: FILE: arch/arm/mach-bcmring/include/cfg_global.h:1:
+#ifndef _CFG_GLOBAL_H_

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#295: FILE: arch/arm/mach-bcmring/include/cfg_global_defines.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#296: FILE: arch/arm/mach-bcmring/include/cfg_global_defines.h:2:
+/*****************************************************************************
+* Copyright 2006 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#352: FILE: arch/arm/mach-bcmring/include/mach/csp/mm_addr.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#353: FILE: arch/arm/mach-bcmring/include/mach/csp/mm_addr.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#368: FILE: arch/arm/mach-bcmring/include/mach/csp/mm_addr.h:17:
+/**
+*  @file    mm_addr.h

WARNING:TYPO_SPELLING: 'defintions' may be misspelled - perhaps 'definitions'?
#370: FILE: arch/arm/mach-bcmring/include/mach/csp/mm_addr.h:19:
+*  @brief   Memory Map address defintions
                                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#459: FILE: arch/arm/mach-bcmring/include/mach/csp/mm_io.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#460: FILE: arch/arm/mach-bcmring/include/mach/csp/mm_io.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#475: FILE: arch/arm/mach-bcmring/include/mach/csp/mm_io.h:17:
+/**
+*  @file    mm_io.h

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'phys' - possible side-effects?
#504: FILE: arch/arm/mach-bcmring/include/mach/csp/mm_io.h:46:
+#define MM_IO_PHYS_TO_VIRT(phys) (0xF0000000 | (((phys) >> 4) & 0x0F000000) | ((phys) & 0xFFFFFF))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'phys' - possible side-effects?
#508: FILE: arch/arm/mach-bcmring/include/mach/csp/mm_io.h:50:
+#define MM_IO_PHYS_TO_VIRT(phys)                                           \
+((((phys) >= 0x20000000) && ((phys) < 0x30000000)) ?                      \
+/* Phys to Virtual 0x2xxxxxxx => 0xExxxxxxx */                             \
+((phys) | 0xC0000000) :                                                    \
+/* Explicitly map phys addr MM_ADDR_IO_VPM_EXTMEM_RSVD to virt addr 0xF0000000. This */   \
+/* address range is reserved for VPM external prog and data memories. */   \
+(((phys) == MM_ADDR_IO_VPM_EXTMEM_RSVD) ? 0xF0000000 :                                    \
+/* Phys to Virtual 0xNyxxxxxx => 0xFNxxxxxx where N != 2 */                \
+(0xF0000000 | (((phys) >> 4) & 0x0F000000) | ((phys) & 0xFFFFFF))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'virt' - possible side-effects?
#525: FILE: arch/arm/mach-bcmring/include/mach/csp/mm_io.h:67:
+#define MM_IO_VIRT_TO_PHYS(virt) ((((virt) & 0x0F000000) << 4) | ((virt) & 0xFFFFFF))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'virt' - possible side-effects?
#527: FILE: arch/arm/mach-bcmring/include/mach/csp/mm_io.h:69:
+#define MM_IO_VIRT_TO_PHYS(virt) ((((virt) & 0xF0000000) == 0xE0000000) ?  \
+/* Virtual to Physical 0xExxxxxxx => 0x2xxxxxxx */                         \
+(((virt) & ~0xF0000000) | 0x20000000)  :                                   \
+/* Explicitly map phys addr MM_ADDR_IO_VPM_EXTMEM_RSVD to virt addr 0xF0000000. This */   \
+/* address range is reserved for VPM external prog and data memories. */   \
+(((virt) == 0xF0000000) ? MM_ADDR_IO_VPM_EXTMEM_RSVD : \
+/* Virtual to Physical 0xFNxxxxxx => 0xN0xxxxxx */                         \
+((((virt) & 0x0F000000) << 4) | ((virt) & 0xFFFFFF))))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#625: FILE: arch/arm/mach-bcmring/include/mach/hardware.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#642: FILE: arch/arm/mach-bcmring/include/mach/hardware.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#643: FILE: arch/arm/mach-bcmring/include/mach/hardware.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#660: FILE: arch/arm/mach-bcmring/include/mach/hardware.h:36:
+#define RAM_SIZE                (CFG_GLOBAL_RAM_SIZE-CFG_GLOBAL_RAM_SIZE_RESERVED)
                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#668: FILE: arch/arm/mach-bcmring/include/mach/hardware.h:44:
+#define HW_DECLARE_SPINLOCK(name)  spinlock_t bcmring_arch_##name##_reg_lock = __SPIN_LOCK_UNLOCKED();

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#668: FILE: arch/arm/mach-bcmring/include/mach/hardware.h:44:
+#define HW_DECLARE_SPINLOCK(name)  spinlock_t bcmring_arch_##name##_reg_lock = __SPIN_LOCK_UNLOCKED();

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#669: FILE: arch/arm/mach-bcmring/include/mach/hardware.h:45:
+#define HW_EXTERN_SPINLOCK(name)   extern spinlock_t bcmring_##name##_reg_lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#693: FILE: arch/arm/mach-bcmring/include/mach/system.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#709: FILE: arch/arm/mach-bcmring/include/mach/system.h:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#710: FILE: arch/arm/mach-bcmring/include/mach/system.h:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: arch/arm/mach-bcmring/include/mach/system.h:29:
+       cpu_do_idle();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: arch/arm/mach-bcmring/include/mach/system.h:34:
+       printk("arch_reset:%c %x\n", mode, bcmring_arch_warm_reboot);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#726: FILE: arch/arm/mach-bcmring/include/mach/system.h:34:
+       printk("arch_reset:%c %x\n", mode, bcmring_arch_warm_reboot);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'arch_reset', this function's name, in a string
#726: FILE: arch/arm/mach-bcmring/include/mach/system.h:34:
+       printk("arch_reset:%c %x\n", mode, bcmring_arch_warm_reboot);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#728: FILE: arch/arm/mach-bcmring/include/mach/system.h:36:
+       if (mode == 'h') {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#728: FILE: arch/arm/mach-bcmring/include/mach/system.h:36:
+       if (mode == 'h') {
[...]
+               if (bcmring_arch_warm_reboot) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#729: FILE: arch/arm/mach-bcmring/include/mach/system.h:37:
+               /* Reboot configured in proc entry */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: arch/arm/mach-bcmring/include/mach/system.h:38:
+               if (bcmring_arch_warm_reboot) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: arch/arm/mach-bcmring/include/mach/system.h:38:
+               if (bcmring_arch_warm_reboot) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#730: FILE: arch/arm/mach-bcmring/include/mach/system.h:38:
+               if (bcmring_arch_warm_reboot) {
+                       printk("warm reset\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#731: FILE: arch/arm/mach-bcmring/include/mach/system.h:39:
+                       printk("warm reset\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: arch/arm/mach-bcmring/include/mach/system.h:39:
+                       printk("warm reset\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#731: FILE: arch/arm/mach-bcmring/include/mach/system.h:39:
+                       printk("warm reset\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#732: FILE: arch/arm/mach-bcmring/include/mach/system.h:40:
+                       /* Issue Warm reset (do not reset ethernet switch, keep alive) */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#733: FILE: arch/arm/mach-bcmring/include/mach/system.h:41:
+                       chipcHw_reset(chipcHw_REG_SOFT_RESET_CHIP_WARM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#733: FILE: arch/arm/mach-bcmring/include/mach/system.h:41:
+                       chipcHw_reset(chipcHw_REG_SOFT_RESET_CHIP_WARM);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_reset>
#733: FILE: arch/arm/mach-bcmring/include/mach/system.h:41:
+                       chipcHw_reset(chipcHw_REG_SOFT_RESET_CHIP_WARM);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_CHIP_WARM>
#733: FILE: arch/arm/mach-bcmring/include/mach/system.h:41:
+                       chipcHw_reset(chipcHw_REG_SOFT_RESET_CHIP_WARM);

ERROR:CODE_INDENT: code indent should use tabs where possible
#734: FILE: arch/arm/mach-bcmring/include/mach/system.h:42:
+               } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#734: FILE: arch/arm/mach-bcmring/include/mach/system.h:42:
+               } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#734: FILE: arch/arm/mach-bcmring/include/mach/system.h:42:
+               } else {
[...]
+                       printk("force reset\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#735: FILE: arch/arm/mach-bcmring/include/mach/system.h:43:
+                       /* Force reset of everything */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#736: FILE: arch/arm/mach-bcmring/include/mach/system.h:44:
+                       printk("force reset\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#736: FILE: arch/arm/mach-bcmring/include/mach/system.h:44:
+                       printk("force reset\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#736: FILE: arch/arm/mach-bcmring/include/mach/system.h:44:
+                       printk("force reset\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#737: FILE: arch/arm/mach-bcmring/include/mach/system.h:45:
+                       chipcHw_reset(chipcHw_REG_SOFT_RESET_CHIP_SOFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: arch/arm/mach-bcmring/include/mach/system.h:45:
+                       chipcHw_reset(chipcHw_REG_SOFT_RESET_CHIP_SOFT);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_CHIP_SOFT>
#737: FILE: arch/arm/mach-bcmring/include/mach/system.h:45:
+                       chipcHw_reset(chipcHw_REG_SOFT_RESET_CHIP_SOFT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#738: FILE: arch/arm/mach-bcmring/include/mach/system.h:46:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: arch/arm/mach-bcmring/include/mach/system.h:46:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: arch/arm/mach-bcmring/include/mach/system.h:47:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#739: FILE: arch/arm/mach-bcmring/include/mach/system.h:47:
+       } else {
[...]
+               printk("force reset\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#740: FILE: arch/arm/mach-bcmring/include/mach/system.h:48:
+               /* Force reset of everything */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#741: FILE: arch/arm/mach-bcmring/include/mach/system.h:49:
+               printk("force reset\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: arch/arm/mach-bcmring/include/mach/system.h:49:
+               printk("force reset\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#741: FILE: arch/arm/mach-bcmring/include/mach/system.h:49:
+               printk("force reset\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#742: FILE: arch/arm/mach-bcmring/include/mach/system.h:50:
+               chipcHw_reset(chipcHw_REG_SOFT_RESET_CHIP_SOFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#742: FILE: arch/arm/mach-bcmring/include/mach/system.h:50:
+               chipcHw_reset(chipcHw_REG_SOFT_RESET_CHIP_SOFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: arch/arm/mach-bcmring/include/mach/system.h:51:
+       }$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100352.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 35 errors, 100 warnings, 10 checks, 618 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100352.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
