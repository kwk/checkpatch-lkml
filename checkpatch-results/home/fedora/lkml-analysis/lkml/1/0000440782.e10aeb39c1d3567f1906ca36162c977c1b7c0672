WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#61: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:REPEATED_WORD: Possible repeated word: 'vmlinux'
#72: FILE: arch/h8300/boot/compressed/Makefile:7:
+targets		:= vmlinux vmlinux.bin vmlinux.bin.gz head.o misc.o piggy.o

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_AFLAGS is deprecated, please use `asflags-y instead.
#73: FILE: arch/h8300/boot/compressed/Makefile:8:
+EXTRA_AFLAGS	:= -traditional

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: arch/h8300/boot/compressed/head.S:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#110: FILE: arch/h8300/boot/compressed/head.S:2:
+ *  linux/arch/h8300/boot/compressed/head.S

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: arch/h8300/boot/compressed/head.S:33:
+^I.ascii^I"HdrS"^I^I; header signature $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#162: FILE: arch/h8300/boot/compressed/misc.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#163: FILE: arch/h8300/boot/compressed/misc.c:2:
+ * arch/h8300/boot/compressed/misc.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#173: FILE: arch/h8300/boot/compressed/misc.c:12:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#184: FILE: arch/h8300/boot/compressed/misc.c:23:
+#define memzero(s, n)     memset ((s), 0, (n))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#184: FILE: arch/h8300/boot/compressed/misc.c:23:
+#define memzero(s, n)     memset ((s), 0, (n))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#186: FILE: arch/h8300/boot/compressed/misc.c:25:
+typedef unsigned char  uch;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#187: FILE: arch/h8300/boot/compressed/misc.c:26:
+typedef unsigned short ush;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#188: FILE: arch/h8300/boot/compressed/misc.c:27:
+typedef unsigned long  ulg;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#196: FILE: arch/h8300/boot/compressed/misc.c:35:
+static unsigned insize = 0;  /* valid bytes in inbuf */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#196: FILE: arch/h8300/boot/compressed/misc.c:35:
+static unsigned insize = 0;  /* valid bytes in inbuf */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#197: FILE: arch/h8300/boot/compressed/misc.c:36:
+static unsigned inptr = 0;   /* index of next byte to be processed in inbuf */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#197: FILE: arch/h8300/boot/compressed/misc.c:36:
+static unsigned inptr = 0;   /* index of next byte to be processed in inbuf */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#198: FILE: arch/h8300/boot/compressed/misc.c:37:
+static unsigned outcnt = 0;  /* bytes in output buffer */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#198: FILE: arch/h8300/boot/compressed/misc.c:37:
+static unsigned outcnt = 0;  /* bytes in output buffer */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#213: FILE: arch/h8300/boot/compressed/misc.c:52:
+#  define Assert(cond,msg) {if(!(cond)) error(msg);}
                      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#213: FILE: arch/h8300/boot/compressed/misc.c:52:
+#  define Assert(cond,msg) {if(!(cond)) error(msg);}
                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#213: FILE: arch/h8300/boot/compressed/misc.c:52:
+#  define Assert(cond,msg) {if(!(cond)) error(msg);}

CHECK:CAMELCASE: Avoid CamelCase: <Assert>
#213: FILE: arch/h8300/boot/compressed/misc.c:52:
+#  define Assert(cond,msg) {if(!(cond)) error(msg);}

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Trace>
#214: FILE: arch/h8300/boot/compressed/misc.c:53:
+#  define Trace(x) fprintf x

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#214: FILE: arch/h8300/boot/compressed/misc.c:53:
+#  define Trace(x) fprintf x

ERROR:SPACING: space required after that ';' (ctx:WxV)
#215: FILE: arch/h8300/boot/compressed/misc.c:54:
+#  define Tracev(x) {if (verbose) fprintf x ;}
                                             ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracev>
#215: FILE: arch/h8300/boot/compressed/misc.c:54:
+#  define Tracev(x) {if (verbose) fprintf x ;}

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#216: FILE: arch/h8300/boot/compressed/misc.c:55:
+#  define Tracevv(x) {if (verbose>1) fprintf x ;}
                                  ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#216: FILE: arch/h8300/boot/compressed/misc.c:55:
+#  define Tracevv(x) {if (verbose>1) fprintf x ;}
                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracevv>
#216: FILE: arch/h8300/boot/compressed/misc.c:55:
+#  define Tracevv(x) {if (verbose>1) fprintf x ;}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: arch/h8300/boot/compressed/misc.c:56:
+#  define Tracec(c,x) {if (verbose && (c)) fprintf x ;}
                   ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#217: FILE: arch/h8300/boot/compressed/misc.c:56:
+#  define Tracec(c,x) {if (verbose && (c)) fprintf x ;}
                                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracec>
#217: FILE: arch/h8300/boot/compressed/misc.c:56:
+#  define Tracec(c,x) {if (verbose && (c)) fprintf x ;}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: arch/h8300/boot/compressed/misc.c:57:
+#  define Tracecv(c,x) {if (verbose>1 && (c)) fprintf x ;}
                    ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#218: FILE: arch/h8300/boot/compressed/misc.c:57:
+#  define Tracecv(c,x) {if (verbose>1 && (c)) fprintf x ;}
                                    ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#218: FILE: arch/h8300/boot/compressed/misc.c:57:
+#  define Tracecv(c,x) {if (verbose>1 && (c)) fprintf x ;}
                                                         ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracecv>
#218: FILE: arch/h8300/boot/compressed/misc.c:57:
+#  define Tracecv(c,x) {if (verbose>1 && (c)) fprintf x ;}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#220: FILE: arch/h8300/boot/compressed/misc.c:59:
+#  define Assert(cond,msg)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: arch/h8300/boot/compressed/misc.c:63:
+#  define Tracec(c,x)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#225: FILE: arch/h8300/boot/compressed/misc.c:64:
+#  define Tracecv(c,x)
                    ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#234: FILE: arch/h8300/boot/compressed/misc.c:73:
+extern char input_data[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#235: FILE: arch/h8300/boot/compressed/misc.c:74:
+extern int input_len;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#237: FILE: arch/h8300/boot/compressed/misc.c:76:
+static long bytes_out = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#239: FILE: arch/h8300/boot/compressed/misc.c:78:
+static unsigned long output_ptr = 0;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#247: FILE: arch/h8300/boot/compressed/misc.c:86:
+int puts(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#247: FILE: arch/h8300/boot/compressed/misc.c:86:
+int puts(const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#249: FILE: arch/h8300/boot/compressed/misc.c:88:
+extern int _text;		/* Defined in vmlinux.lds.S */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#250: FILE: arch/h8300/boot/compressed/misc.c:89:
+extern int _end;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#258: FILE: arch/h8300/boot/compressed/misc.c:97:
+#define SCR *((volatile unsigned char *)0xffff8a)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#258: FILE: arch/h8300/boot/compressed/misc.c:97:
+#define SCR *((volatile unsigned char *)0xffff8a)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#259: FILE: arch/h8300/boot/compressed/misc.c:98:
+#define TDR *((volatile unsigned char *)0xffff8b)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#259: FILE: arch/h8300/boot/compressed/misc.c:98:
+#define TDR *((volatile unsigned char *)0xffff8b)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#260: FILE: arch/h8300/boot/compressed/misc.c:99:
+#define SSR *((volatile unsigned char *)0xffff8c)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#260: FILE: arch/h8300/boot/compressed/misc.c:99:
+#define SSR *((volatile unsigned char *)0xffff8c)

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#266: FILE: arch/h8300/boot/compressed/misc.c:105:
+	if (size <0) error("Malloc error");
 	         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#266: FILE: arch/h8300/boot/compressed/misc.c:105:
+	if (size <0) error("Malloc error");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#267: FILE: arch/h8300/boot/compressed/misc.c:106:
+	if (free_mem_ptr == 0) error("Memory error");

CHECK:SPACING: No space is necessary after a cast
#286: FILE: arch/h8300/boot/compressed/misc.c:125:
+	*ptr = (void *) free_mem_ptr;

CHECK:SPACING: No space is necessary after a cast
#291: FILE: arch/h8300/boot/compressed/misc.c:130:
+	free_mem_ptr = (long) *ptr;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#299: FILE: arch/h8300/boot/compressed/misc.c:138:
+void* memset(void* s, int c, size_t n)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#299: FILE: arch/h8300/boot/compressed/misc.c:138:
+void* memset(void* s, int c, size_t n)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#302: FILE: arch/h8300/boot/compressed/misc.c:141:
+	char *ss = (char*)s;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#304: FILE: arch/h8300/boot/compressed/misc.c:143:
+	for (i=0;i<n;i++) ss[i] = c;
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#304: FILE: arch/h8300/boot/compressed/misc.c:143:
+	for (i=0;i<n;i++) ss[i] = c;
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#304: FILE: arch/h8300/boot/compressed/misc.c:143:
+	for (i=0;i<n;i++) ss[i] = c;
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#304: FILE: arch/h8300/boot/compressed/misc.c:143:
+	for (i=0;i<n;i++) ss[i] = c;
 	            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#304: FILE: arch/h8300/boot/compressed/misc.c:143:
+	for (i=0;i<n;i++) ss[i] = c;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#308: FILE: arch/h8300/boot/compressed/misc.c:147:
+void* memcpy(void* __dest, __const void* __src,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#308: FILE: arch/h8300/boot/compressed/misc.c:147:
+void* memcpy(void* __dest, __const void* __src,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#308: FILE: arch/h8300/boot/compressed/misc.c:147:
+void* memcpy(void* __dest, __const void* __src,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: arch/h8300/boot/compressed/misc.c:148:
+void* memcpy(void* __dest, __const void* __src,
+			    size_t __n)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#314: FILE: arch/h8300/boot/compressed/misc.c:153:
+	for (i=0;i<__n;i++) d[i] = s[i];
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#314: FILE: arch/h8300/boot/compressed/misc.c:153:
+	for (i=0;i<__n;i++) d[i] = s[i];
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#314: FILE: arch/h8300/boot/compressed/misc.c:153:
+	for (i=0;i<__n;i++) d[i] = s[i];
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#314: FILE: arch/h8300/boot/compressed/misc.c:153:
+	for (i=0;i<__n;i++) d[i] = s[i];
 	              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#314: FILE: arch/h8300/boot/compressed/misc.c:153:
+	for (i=0;i<__n;i++) d[i] = s[i];

WARNING:BRACES: braces {} are not necessary for single statement blocks
#324: FILE: arch/h8300/boot/compressed/misc.c:163:
+	if (insize != 0) {
+		error("ran out of input data");
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: arch/h8300/boot/compressed/misc.c:179:
+    ulg c = crc;         /* temporary variable */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: arch/h8300/boot/compressed/misc.c:180:
+    unsigned n;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#341: FILE: arch/h8300/boot/compressed/misc.c:180:
+    unsigned n;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: arch/h8300/boot/compressed/misc.c:181:
+    uch *in, *out, ch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: arch/h8300/boot/compressed/misc.c:183:
+    in = window;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: arch/h8300/boot/compressed/misc.c:184:
+    out = &output_data[output_ptr];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: arch/h8300/boot/compressed/misc.c:185:
+    for (n = 0; n < outcnt; n++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#346: FILE: arch/h8300/boot/compressed/misc.c:185:
+    for (n = 0; n < outcnt; n++) {
+	    ch = *out++ = *in++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: arch/h8300/boot/compressed/misc.c:188:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: arch/h8300/boot/compressed/misc.c:189:
+    crc = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: arch/h8300/boot/compressed/misc.c:190:
+    bytes_out += (ulg)outcnt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: arch/h8300/boot/compressed/misc.c:191:
+    output_ptr += (ulg)outcnt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: arch/h8300/boot/compressed/misc.c:192:
+    outcnt = 0;$

ERROR:SPACING: space required before the open parenthesis '('
#362: FILE: arch/h8300/boot/compressed/misc.c:201:
+	while(1);	/* Halt */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#362: FILE: arch/h8300/boot/compressed/misc.c:201:
+	while(1);	/* Halt */

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#366: FILE: arch/h8300/boot/compressed/misc.c:205:
+long user_stack [STACK_SIZE];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#367: FILE: arch/h8300/boot/compressed/misc.c:206:
+long* stack_start = &user_stack[STACK_SIZE];

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)0x400000' could be '0x400000UL'
#372: FILE: arch/h8300/boot/compressed/misc.c:211:
+	output_ptr = (unsigned long)0x400000;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440782.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 48 errors, 38 warnings, 10 checks, 326 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440782.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
