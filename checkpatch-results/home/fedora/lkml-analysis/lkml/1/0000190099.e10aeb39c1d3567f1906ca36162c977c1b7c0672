WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git core-for-linus

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#110: 
      xen: compilation fix fo xen CPU hotplugging
                           ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#159: 
Török Edwin (1):
 ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#244: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#259: FILE: Documentation/RCU/trace.txt:11:
+preemptable RCU (rcupreempt) and hierarchical RCU (rcutree).
 ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'Preemptable' may be misspelled - perhaps 'Preemptible'?
#262: FILE: Documentation/RCU/trace.txt:14:
+Preemptable RCU debugfs Files and Formats
 ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#266: FILE: Documentation/RCU/trace.txt:18:
+counters used by preemptable RCU) rcu/rcugp (which displays grace-period
                  ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#376: FILE: Documentation/RCU/trace.txt:128:
+	early versions of preemptable RCU had a bug so that only the
 	                  ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#584: FILE: Documentation/RCU/trace.txt:336:
+1/1 0:127 ^0    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#585: FILE: Documentation/RCU/trace.txt:337:
+3/3 0:35 ^0    0/0 36:71 ^1    0/0 72:107 ^2    0/0 108:127 ^3    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: Documentation/RCU/trace.txt:338:
+3/3f 0:5 ^0    2/3 6:11 ^1    0/0 12:17 ^2    0/0 18:23 ^3    0/0 24:29 ^4    0/0 30:35 ^5    0/0 36:41 ^0    0/0 42:47 ^1    0/0 48:53 ^2    0/0 54:59 ^3    0/0 60:65 ^4    0/0 66:71 ^5    0/0 72:77 ^0    0/0 78:83 ^1    0/0 84:89 ^2    0/0 90:95 ^3    0/0 96:101 ^4    0/0 102:107 ^5    0/0 108:113 ^0    0/0 114:119 ^1    0/0 120:125 ^2    0/0 126:127 ^3    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#589: FILE: Documentation/RCU/trace.txt:341:
+0/1 0:127 ^0    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: Documentation/RCU/trace.txt:342:
+0/3 0:35 ^0    0/0 36:71 ^1    0/0 72:107 ^2    0/0 108:127 ^3    $

WARNING:TYPO_SPELLING: 'thoughout' may be misspelled - perhaps 'throughout'?
#605: FILE: Documentation/RCU/trace.txt:357:
+	along.  Note that CPUs in dyntick-idle mode thoughout the grace
 	                                            ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#633: FILE: Documentation/RCU/trace.txt:385:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#787: FILE: arch/um/include/asm/system.h:20:
+                                   raw_local_irq_disable(); } while(0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#787: FILE: arch/um/include/asm/system.h:20:
+                                   raw_local_irq_disable(); } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#787: FILE: arch/um/include/asm/system.h:20:
+                                   raw_local_irq_disable(); } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#787: FILE: arch/um/include/asm/system.h:20:
+                                   raw_local_irq_disable(); } while(0)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: arch/um/include/asm/system.h:28:
+        raw_local_save_flags(flags);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: arch/um/include/asm/system.h:28:
+        raw_local_save_flags(flags);        \$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#836: FILE: arch/x86/include/asm/pci.h:85:
+extern void pci_iommu_alloc(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1016: FILE: arch/x86/kernel/pci-swiotlb_64.c:21:
+void *swiotlb_alloc(unsigned order, unsigned long nslabs)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1152: FILE: include/asm-generic/bug.h:43:
+#define __WARN_printf(arg...)	do { printk(arg); __WARN(); } while (0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1199: FILE: include/linux/futex.h:168:
+#define FUTEX_KEY_INIT (union futex_key) { .both = { .ptr = NULL } }

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1216: FILE: include/linux/hardirq.h:124:
+extern void rcu_nmi_enter(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1217: FILE: include/linux/hardirq.h:125:
+extern void rcu_nmi_exit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1278: FILE: include/linux/kernel.h:200:
+extern int func_ptr_is_kernel_text(void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1328: FILE: include/linux/lockdep.h:317:
+extern void lock_set_class(struct lockdep_map *lock, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1333: FILE: include/linux/lockdep.h:322:
+static inline void lock_set_subclass(struct lockdep_map *lock,
+		unsigned int subclass, unsigned long ip)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1353: FILE: include/linux/lockdep.h:372:
+extern void lock_acquired(struct lockdep_map *lock, unsigned long ip);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1378: FILE: include/linux/lockdep.h:498:
+# define might_lock(lock) ^I^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1378: FILE: include/linux/lockdep.h:498:
+# define might_lock(lock) 						\
+do {									\
+	typecheck(struct lockdep_map *, &(lock)->dep_map);		\
+	lock_acquire(&(lock)->dep_map, 0, 0, 0, 2, NULL, _THIS_IP_);	\
+	lock_release(&(lock)->dep_map, 0, _THIS_IP_);			\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1384: FILE: include/linux/lockdep.h:504:
+# define might_lock_read(lock) ^I^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1384: FILE: include/linux/lockdep.h:504:
+# define might_lock_read(lock) 						\
+do {									\
+	typecheck(struct lockdep_map *, &(lock)->dep_map);		\
+	lock_acquire(&(lock)->dep_map, 0, 0, 1, 2, NULL, _THIS_IP_);	\
+	lock_release(&(lock)->dep_map, 0, _THIS_IP_);			\
+} while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1451: FILE: include/linux/rcutree.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1465: FILE: include/linux/rcutree.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1466: FILE: include/linux/rcutree.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1477: FILE: include/linux/rcutree.h:27:
+ * ^IDocumentation/RCU$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1507: FILE: include/linux/rcutree.h:57:
+#elif NR_CPUS <= RCU_FANOUT_SQ

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1513: FILE: include/linux/rcutree.h:63:
+#elif NR_CPUS <= RCU_FANOUT_CUBE

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1541: FILE: include/linux/rcutree.h:91:
+	spinlock_t lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1598: FILE: include/linux/rcutree.h:148:
+^Ilong^I^Iqlen; ^I ^I/* # of queued callbacks */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1704: FILE: include/linux/rcutree.h:254:
+	struct rcu_data *rdp = &per_cpu(rcu_data, cpu);
+	rdp->passed_quiesc = 1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1707: FILE: include/linux/rcutree.h:257:
+}
+static inline void rcu_bh_qsctr_inc(int cpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1710: FILE: include/linux/rcutree.h:260:
+	struct rcu_data *rdp = &per_cpu(rcu_bh_data, cpu);
+	rdp->passed_quiesc = 1;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1714: FILE: include/linux/rcutree.h:264:
+extern int rcu_pending(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1715: FILE: include/linux/rcutree.h:265:
+extern int rcu_needs_cpu(int cpu);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1733: FILE: include/linux/rcutree.h:283:
+}
+static inline void __rcu_read_unlock(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1739: FILE: include/linux/rcutree.h:289:
+}
+static inline void __rcu_read_lock_bh(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1745: FILE: include/linux/rcutree.h:295:
+}
+static inline void __rcu_read_unlock_bh(void)

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#1754: FILE: include/linux/rcutree.h:304:
+#define call_rcu_sched(head, func) call_rcu(head, func)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1760: FILE: include/linux/rcutree.h:310:
+extern void __rcu_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1761: FILE: include/linux/rcutree.h:311:
+extern void rcu_check_callbacks(int cpu, int user);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1762: FILE: include/linux/rcutree.h:312:
+extern void rcu_restart_cpu(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1764: FILE: include/linux/rcutree.h:314:
+extern long rcu_batches_completed(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1765: FILE: include/linux/rcutree.h:315:
+extern long rcu_batches_completed_bh(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1774: FILE: include/linux/rcutree.h:324:
+}
+static inline void rcu_exit_nohz(void)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1795: FILE: include/linux/swiotlb.h:17:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1805: FILE: include/linux/swiotlb.h:27:
+extern void *swiotlb_alloc_boot(size_t bytes, unsigned long nslabs);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1806: FILE: include/linux/swiotlb.h:28:
+extern void *swiotlb_alloc(unsigned order, unsigned long nslabs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1806: FILE: include/linux/swiotlb.h:28:
+extern void *swiotlb_alloc(unsigned order, unsigned long nslabs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1808: FILE: include/linux/swiotlb.h:30:
+extern dma_addr_t swiotlb_phys_to_bus(phys_addr_t address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1809: FILE: include/linux/swiotlb.h:31:
+extern phys_addr_t swiotlb_bus_to_phys(dma_addr_t address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1811: FILE: include/linux/swiotlb.h:33:
+extern int swiotlb_arch_range_needs_mapping(void *ptr, size_t size);

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1825: FILE: include/linux/uaccess.h:81:
+		ret = __copy_from_user_inatomic(&(retval), (__force typeof(retval) __user *)(addr), sizeof(retval));		\

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1837: FILE: init/Kconfig:931:
+choice
+	prompt "RCU Implementation"
+	default CLASSIC_RCU
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1853: FILE: init/Kconfig:944:
+config TREE_RCU
+	bool "Tree-based hierarchical RCU"
+	help
+	  This option selects the RCU implementation that is
+	  designed for very large SMP system with hundreds or
+	  thousands of CPUs.
+

CHECK:SPACING: No space is necessary after a cast
#2013: FILE: kernel/extable.c:80:
+	addr = (unsigned long) dereference_function_descriptor(ptr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2013: FILE: kernel/extable.c:80:
+	unsigned long addr;
+	addr = (unsigned long) dereference_function_descriptor(ptr);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "module_text_address"
#2016: FILE: kernel/extable.c:83:
+	return module_text_address(addr) != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2076: FILE: kernel/futex.c:157:
+	switch (key->both.offset & (FUT_OFF_INODE|FUT_OFF_MMSHARED)) {
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2095: FILE: kernel/futex.c:176:
+	switch (key->both.offset & (FUT_OFF_INODE|FUT_OFF_MMSHARED)) {
 	                                         ^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2097: FILE: kernel/futex.c:178:
+		iput(key->shared.inode);
 		^^^^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2761: FILE: kernel/futex.c:1913:
+	int clockrt, ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2772: FILE: kernel/futex.c:1922:
+		return -ENOSYS;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2797: FILE: kernel/irq/manage.c:682:
+	if ((irqflags & (IRQF_SHARED|IRQF_DISABLED))
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2798: FILE: kernel/irq/manage.c:683:
+			== (IRQF_SHARED|IRQF_DISABLED))
 			               ^

WARNING:SPLIT_STRING: quoted string split across lines
#2800: FILE: kernel/irq/manage.c:685:
+		pr_warning("IRQ %d/%s: IRQF_DISABLED is not "
+				"guaranteed on shared IRQs\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3042: FILE: kernel/lockdep_proc.c:478:
+	snprintf(buf, bufsiz, "%lld.%02d", (long long)div, (int)rem/10);
 	                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3067: FILE: kernel/lockdep_proc.c:585:
+			seq_line(m, '-', 40-namelen, namelen);
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3071: FILE: kernel/lockdep_proc.c:589:
+		snprintf(ip, sizeof(ip), "[<%p>]",
+				(void *)class->contending_point[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3073: FILE: kernel/lockdep_proc.c:591:
+		seq_printf(m, "%40s %14lu %29s %s\n", name,
+				stats->contending_point[i],

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#3084: FILE: kernel/lockdep_proc.c:603:
+	seq_printf(m, "lock_stat version 0.3\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3206: FILE: kernel/panic.c:339:
+		printk(KERN_WARNING "Hardware name: %s\n", board);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3269: FILE: kernel/rcuclassic.c:194:
+	printk(KERN_ERR "INFO: RCU detected CPU stalls:");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3278: FILE: kernel/rcuclassic.c:207:
+	printk(KERN_ERR "INFO: RCU detected CPU %d stall (t=%lu/%lu jiffies)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3279: FILE: kernel/rcuclassic.c:208:
+	printk(KERN_ERR "INFO: RCU detected CPU %d stall (t=%lu/%lu jiffies)\n",
 			smp_processor_id(), jiffies,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_ops->cb_barrier"
#3467: FILE: kernel/rcutorture.c:976:
+		if (cur_ops->cb_barrier != NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3513: FILE: kernel/rcutree.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3527: FILE: kernel/rcutree.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3528: FILE: kernel/rcutree.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3540: FILE: kernel/rcutree.c:28:
+ * ^IDocumentation/RCU$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#3550: FILE: kernel/rcutree.c:38:
+#include <asm/atomic.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#3570: FILE: kernel/rcutree.c:58:
+#define RCU_STATE_INITIALIZER(name) { \
+	.level = { &name.node[0] }, \
+	.levelcnt = { \
+		NUM_RCU_LVL_0,  /* root of hierarchy. */ \
+		NUM_RCU_LVL_1, \
+		NUM_RCU_LVL_2, \
+		NUM_RCU_LVL_3, /* == MAX_RCU_LVLS */ \
+	}, \
+	.signaled = RCU_SIGNAL_INIT, \
+	.gpnum = -300, \
+	.completed = -300, \
+	.onofflock = __SPIN_LOCK_UNLOCKED(&name.onofflock), \
+	.fqslock = __SPIN_LOCK_UNLOCKED(&name.fqslock), \
+	.n_force_qs = 0, \
+	.n_force_qs_ngp = 0, \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#3570: FILE: kernel/rcutree.c:58:
+#define RCU_STATE_INITIALIZER(name) { \
+	.level = { &name.node[0] }, \
+	.levelcnt = { \
+		NUM_RCU_LVL_0,  /* root of hierarchy. */ \
+		NUM_RCU_LVL_1, \
+		NUM_RCU_LVL_2, \
+		NUM_RCU_LVL_3, /* == MAX_RCU_LVLS */ \
+	}, \
+	.signaled = RCU_SIGNAL_INIT, \
+	.gpnum = -300, \
+	.completed = -300, \
+	.onofflock = __SPIN_LOCK_UNLOCKED(&name.onofflock), \
+	.fqslock = __SPIN_LOCK_UNLOCKED(&name.fqslock), \
+	.n_force_qs = 0, \
+	.n_force_qs_ngp = 0, \
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3951: FILE: kernel/rcutree.c:439:
+	printk(KERN_ERR "INFO: RCU detected CPU stalls:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3957: FILE: kernel/rcutree.c:445:
+				printk(" %d", rnp_cur->grplo + cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3959: FILE: kernel/rcutree.c:447:
+	printk(" (detected by %d, t=%ld jiffies)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3969: FILE: kernel/rcutree.c:457:
+	printk(KERN_ERR "INFO: RCU detected CPU %d stall (t=%lu jiffies)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3970: FILE: kernel/rcutree.c:458:
+	printk(KERN_ERR "INFO: RCU detected CPU %d stall (t=%lu jiffies)\n",
+			smp_processor_id(), jiffies - rsp->gp_start);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3988: FILE: kernel/rcutree.c:476:
+	if ((rnp->qsmask & rdp->grpmask) && delta >= 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3994: FILE: kernel/rcutree.c:482:
+		   delta >= RCU_STALL_RAT_DELAY) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4093: FILE: kernel/rcutree.c:581:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4156: FILE: kernel/rcutree.c:644:
+	if (rdp->completed != completed_snap) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4183: FILE: kernel/rcutree.c:671:
+		if (!(rnp->qsmask & mask)) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4190: FILE: kernel/rcutree.c:678:
+		if (rnp->qsmask != 0) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rnp->parent"
#4196: FILE: kernel/rcutree.c:684:
+		if (rnp->parent == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4197: FILE: kernel/rcutree.c:685:
+		if (rnp->parent == NULL) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4236: FILE: kernel/rcutree.c:724:
+	if (lastcomp != ACCESS_ONCE(rsp->completed)) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rnp"
#4329: FILE: kernel/rcutree.c:817:
+	} while (rnp != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nxtlist"
#4351: FILE: kernel/rcutree.c:839:
+	if (rdp->nxtlist != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "list"
#4426: FILE: kernel/rcutree.c:914:
+	if (list != NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4461: FILE: kernel/rcutree.c:949:
+				hardirq_count() <= (1 << HARDIRQ_SHIFT))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4479: FILE: kernel/rcutree.c:967:
+	} else if (!in_softirq()) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4528: FILE: kernel/rcutree.c:1016:
+		if (mask != 0 && rsp->completed == lastcomp) {
+

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#4739: FILE: kernel/rcutree.c:1227:
+void call_rcu_bh(struct rcu_head *head, void (*func)(struct rcu_head *rcu))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rnp"
#4874: FILE: kernel/rcutree.c:1362:
+	} while (rnp != NULL && !(rnp->qsmaskinit & mask));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4898: FILE: kernel/rcutree.c:1386:
+^Irdtp->dynticks |= 1; ^I/* need consecutive #s even for hotplug. */$

WARNING:TYPO_SPELLING: 'notifcation' may be misspelled - perhaps 'notification'?
#4907: FILE: kernel/rcutree.c:1395:
+ * Handle CPU online/offline notifcation events.
                              ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4910: FILE: kernel/rcutree.c:1398:
+static int __cpuinit rcu_cpu_notify(struct notifier_block *self,
+				unsigned long action, void *hcpu)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#4950: FILE: kernel/rcutree.c:1438:
+	cprv = NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#4986: FILE: kernel/rcutree.c:1474:
+			if (rnp->grphi >= NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#4987: FILE: kernel/rcutree.c:1475:
+				rnp->grphi = NR_CPUS - 1;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rsp' - possible side-effects?
#5007: FILE: kernel/rcutree.c:1495:
+#define RCU_DATA_PTR_INIT(rsp, rcu_data) \
+do { \
+	rnp = (rsp)->level[NUM_RCU_LVLS - 1]; \
+	j = 0; \
+	for_each_possible_cpu(i) { \
+		if (i > rnp[j].grphi) \
+			j++; \
+		per_cpu(rcu_data, i).mynode = &rnp[j]; \
+		(rsp)->rda[i] = &per_cpu(rcu_data, i); \
+	} \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rcu_data' - possible side-effects?
#5007: FILE: kernel/rcutree.c:1495:
+#define RCU_DATA_PTR_INIT(rsp, rcu_data) \
+do { \
+	rnp = (rsp)->level[NUM_RCU_LVLS - 1]; \
+	j = 0; \
+	for_each_possible_cpu(i) { \
+		if (i > rnp[j].grphi) \
+			j++; \
+		per_cpu(rcu_data, i).mynode = &rnp[j]; \
+		(rsp)->rda[i] = &per_cpu(rcu_data, i); \
+	} \
+} while (0)

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after rcu_nb
#5019: FILE: kernel/rcutree.c:1507:
+static struct notifier_block __cpuinitdata rcu_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5029: FILE: kernel/rcutree.c:1517:
+	printk(KERN_WARNING "Experimental hierarchical RCU implementation.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5031: FILE: kernel/rcutree.c:1519:
+	printk(KERN_INFO "RCU-based detection of stalled CPUs is enabled.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5042: FILE: kernel/rcutree.c:1530:
+	printk(KERN_WARNING "Experimental hierarchical RCU init done.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5054: FILE: kernel/rcutree_trace.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5068: FILE: kernel/rcutree_trace.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5069: FILE: kernel/rcutree_trace.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5076: FILE: kernel/rcutree_trace.c:23:
+ * ^I^IDocumentation/RCU$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#5087: FILE: kernel/rcutree_trace.c:34:
+#include <asm/atomic.h>

WARNING:CONST_STRUCT: struct file_operations should normally be const
#5144: FILE: kernel/rcutree_trace.c:91:
+static struct file_operations rcudata_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#5194: FILE: kernel/rcutree_trace.c:141:
+static struct file_operations rcudata_csv_fops = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#5208: FILE: kernel/rcutree_trace.c:155:
+^I              "nfqs=%lu/nfqsng=%lu(%lu) fqlh=%lu\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#5208: FILE: kernel/rcutree_trace.c:155:
+	seq_printf(m, "c=%ld g=%ld s=%d jfq=%ld j=%x "
+	              "nfqs=%lu/nfqsng=%lu(%lu) fqlh=%lu\n",

WARNING:CONST_STRUCT: struct file_operations should normally be const
#5241: FILE: kernel/rcutree_trace.c:188:
+static struct file_operations rcuhier_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#5263: FILE: kernel/rcutree_trace.c:210:
+static struct file_operations rcugp_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5279: FILE: kernel/rcutree_trace.c:226:
+	datadir = debugfs_create_file("rcudata", 0444, rcudir,
+						NULL, &rcudata_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5284: FILE: kernel/rcutree_trace.c:231:
+	datadir_csv = debugfs_create_file("rcudata.csv", 0444, rcudir,
+						NULL, &rcudata_csv_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5293: FILE: kernel/rcutree_trace.c:240:
+	hierdir = debugfs_create_file("rcuhier", 0444, rcudir,
+						NULL, &rcuhier_fops);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#5299: FILE: kernel/rcutree_trace.c:246:
+	if (datadir)
+		debugfs_remove(datadir);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#5301: FILE: kernel/rcutree_trace.c:248:
+	if (datadir_csv)
+		debugfs_remove(datadir_csv);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#5303: FILE: kernel/rcutree_trace.c:250:
+	if (gpdir)
+		debugfs_remove(gpdir);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5318: FILE: kernel/rcutree_trace.c:265:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5362: FILE: kernel/sched.c:4341:
+       if (DEBUG_LOCKS_WARN_ON(val > preempt_count() - (!!kernel_locked())))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#5362: FILE: kernel/sched.c:4341:
+       if (DEBUG_LOCKS_WARN_ON(val > preempt_count() - (!!kernel_locked())))
 		return;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'save_stack_trace_tsk', this function's name, in a string
#5448: FILE: kernel/stacktrace.c:36:
+	WARN_ONCE(1, KERN_INFO "save_stack_trace_tsk() not implemented yet.\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_INFO
#5448: FILE: kernel/stacktrace.c:36:
+	WARN_ONCE(1, KERN_INFO "save_stack_trace_tsk() not implemented yet.\n");

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#5530: FILE: lib/debugobjects.c:49:
+static int			debug_objects_enabled __read_mostly
+				= CONFIG_DEBUG_OBJECTS_ENABLE_DEFAULT;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5596: FILE: lib/swiotlb.c:124:
+void * __weak swiotlb_alloc(unsigned order, unsigned long nslabs)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#5611: FILE: lib/swiotlb.c:139:
+static dma_addr_t swiotlb_virt_to_bus(volatile void *address)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5642: FILE: lib/swiotlb.c:170:
+	printk(KERN_INFO "Placing %luMB software IO TLB between %p - %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5645: FILE: lib/swiotlb.c:173:
+		printk(KERN_INFO "software IO TLB at phys %#llx - %#llx"

WARNING:SPLIT_STRING: quoted string split across lines
#5646: FILE: lib/swiotlb.c:174:
+		printk(KERN_INFO "software IO TLB at phys %#llx - %#llx"
+		       " bus %#llx - %#llx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5652: FILE: lib/swiotlb.c:180:
+		printk(KERN_INFO "software IO TLB at phys %#llx - %#llx\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#5705: FILE: lib/swiotlb.c:293:
+^I                           get_order(io_tlb_nslabs * sizeof(struct swiotlb_phys_addr)));$

WARNING:LINE_SPACING: Missing a blank line after declarations
#5743: FILE: lib/swiotlb.c:348:
+	struct swiotlb_phys_addr buffer = io_tlb_orig_addr[index];
+	buffer.offset += (long)dma_addr & ((1 << IO_TLB_SHIFT) - 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#5809: FILE: lib/swiotlb.c:414:
+ ^I * Carefully handle integer overflow which can occur when mask == ~0UL.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5809: FILE: lib/swiotlb.c:414:
+ ^I * Carefully handle integer overflow which can occur when mask == ~0UL.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5810: FILE: lib/swiotlb.c:415:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5810: FILE: lib/swiotlb.c:415:
+ ^I */$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5824: FILE: lib/swiotlb.c:495:
+		io_tlb_orig_addr[index+i] = slot_buf;
 		                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir == DMA_FROM_DEVICE'
#5844: FILE: lib/swiotlb.c:518:
+	if ((dir == DMA_FROM_DEVICE) || (dir == DMA_BIDIRECTIONAL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir == DMA_BIDIRECTIONAL'
#5844: FILE: lib/swiotlb.c:518:
+	if ((dir == DMA_FROM_DEVICE) || (dir == DMA_BIDIRECTIONAL))

WARNING:LINE_SPACING: Missing a blank line after declarations
#5894: FILE: lib/swiotlb.c:604:
+		struct swiotlb_phys_addr buffer;
+		buffer.page = virt_to_page(NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#5991: FILE: lib/swiotlb.c:847:
+			void *map;
+			buffer.page   = sg_page(sg);

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#6072: FILE: mm/memory.c:3062:
+	if (!in_atomic() && current->mm)

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190099.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 79 warnings, 71 checks, 5369 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190099.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
