WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
  perf sched record            # low-overhead recording of arbitrary workloads

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#101: 
this particular capture showed latencies that occured during a Gnome 
                                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: include/trace/events/sched.h:387:
+TRACE_EVENT(sched_stat_runtime,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#399: FILE: include/trace/events/sched.h:392:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#400: FILE: include/trace/events/sched.h:393:
+		__array( char,	comm,	TASK_COMM_LEN	)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#400: FILE: include/trace/events/sched.h:393:
+		__array( char,	comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#401: FILE: include/trace/events/sched.h:394:
+		__field( pid_t,	pid			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#401: FILE: include/trace/events/sched.h:394:
+		__field( pid_t,	pid			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#402: FILE: include/trace/events/sched.h:395:
+		__field( u64,	runtime			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#402: FILE: include/trace/events/sched.h:395:
+		__field( u64,	runtime			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#403: FILE: include/trace/events/sched.h:396:
+		__field( u64,	vruntime			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#403: FILE: include/trace/events/sched.h:396:
+		__field( u64,	vruntime			)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#406: FILE: include/trace/events/sched.h:399:
+	TP_fast_assign(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#412: FILE: include/trace/events/sched.h:405:
+	TP_perf_assign(

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#416: FILE: include/trace/events/sched.h:409:
+	TP_printk("task: %s:%d runtime: %Lu [ns], vruntime: %Lu [ns]",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: include/trace/events/sched.h:410:
+	TP_printk("task: %s:%d runtime: %Lu [ns], vruntime: %Lu [ns]",
+			__entry->comm, __entry->pid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: kernel/perf_counter.c:2181:
+		data->watermark = min_t(long, PAGE_SIZE * nr_pages,
+				      counter->attr.wakeup_watermark);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'locked > lock_limit'
#449: FILE: kernel/perf_counter.c:2325:
+	if ((locked > lock_limit) && perf_paranoid_tracepoint_raw() &&
+		!capable(CAP_IPC_LOCK)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: kernel/perf_counter.c:2326:
+	if ((locked > lock_limit) && perf_paranoid_tracepoint_raw() &&
+		!capable(CAP_IPC_LOCK)) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#499: FILE: kernel/perf_counter.c:2725:
+		smp_rmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "counter->pmu->unthrottle"
#529: FILE: kernel/perf_counter.c:3510:
+	throttle = (throttle && counter->pmu->unthrottle != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#584: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#618: FILE: tools/perf/Documentation/perf-sched.txt:30:
+  of the workload as it occured when it was recorded - and can repeat
                         ^^^^^^^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#681: FILE: tools/perf/builtin-record.c:51:
+static int			multiplex			= 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#717: FILE: tools/perf/builtin-record.c:490:
+		mmap_array[nr_cpu][counter].mask = mmap_pages*page_size - 1;
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#718: FILE: tools/perf/builtin-record.c:491:
+		mmap_array[nr_cpu][counter].base = mmap(NULL, (mmap_pages+1)*page_size,
 		                                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#718: FILE: tools/perf/builtin-record.c:491:
+		mmap_array[nr_cpu][counter].base = mmap(NULL, (mmap_pages+1)*page_size,
 		                                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: tools/perf/builtin-record.c:492:
+		mmap_array[nr_cpu][counter].base = mmap(NULL, (mmap_pages+1)*page_size,
+				PROT_READ|PROT_WRITE, MAP_SHARED, fd[nr_cpu][counter], 0);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#719: FILE: tools/perf/builtin-record.c:492:
+				PROT_READ|PROT_WRITE, MAP_SHARED, fd[nr_cpu][counter], 0);
 				         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#783: FILE: tools/perf/builtin-sched.c:1:
+#include "builtin.h"

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#804: FILE: tools/perf/builtin-sched.c:22:
+static char			const *input_name = "perf.data";

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#809: FILE: tools/perf/builtin-sched.c:27:
+static unsigned long		total_comm = 0;

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#817: FILE: tools/perf/builtin-sched.c:35:
+static char			default_sort_order[] = "avg, max, switch, runtime";

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#823: FILE: tools/perf/builtin-sched.c:41:
+#define BUG_ON(x)		assert(!(x))

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#944: FILE: tools/perf/builtin-sched.c:162:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#982: FILE: tools/perf/builtin-sched.c:200:
+		delta = T1-T0;
 		          ^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#987: FILE: tools/perf/builtin-sched.c:205:
+	printf("run measurement overhead: %Ld nsecs\n", min_delta);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#999: FILE: tools/perf/builtin-sched.c:217:
+		delta = T1-T0;
 		          ^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1005: FILE: tools/perf/builtin-sched.c:223:
+	printf("sleep measurement overhead: %Ld nsecs\n", min_delta);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1021: FILE: tools/perf/builtin-sched.c:239:
+	BUG_ON(!task->atoms);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1102: FILE: tools/perf/builtin-sched.c:320:
+	BUG_ON(pid >= MAX_PID);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1121: FILE: tools/perf/builtin-sched.c:339:
+	tasks = realloc(tasks, nr_tasks*sizeof(struct task_task *));
 	                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1122: FILE: tools/perf/builtin-sched.c:340:
+	BUG_ON(!tasks);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1131: FILE: tools/perf/builtin-sched.c:349:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1140: FILE: tools/perf/builtin-sched.c:358:
+		printf("task %6ld (%20s:%10ld), nr_events: %ld\n",
+			task->nr, task->comm, task->pid, task->nr_events);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1169: FILE: tools/perf/builtin-sched.c:387:
+	switch (atom->type) {
+		case SCHED_EVENT_RUN:
[...]
+		case SCHED_EVENT_SLEEP:
[...]
+		case SCHED_EVENT_WAKEUP:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1176: FILE: tools/perf/builtin-sched.c:394:
+			BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1181: FILE: tools/perf/builtin-sched.c:399:
+			BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1184: FILE: tools/perf/builtin-sched.c:402:
+			BUG_ON(1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1195: FILE: tools/perf/builtin-sched.c:413:
+	BUG_ON(err);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1197: FILE: tools/perf/builtin-sched.c:415:
+	sum =  ru.ru_utime.tv_sec*1e9 + ru.ru_utime.tv_usec*1e3;
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1197: FILE: tools/perf/builtin-sched.c:415:
+	sum =  ru.ru_utime.tv_sec*1e9 + ru.ru_utime.tv_usec*1e3;
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1198: FILE: tools/perf/builtin-sched.c:416:
+	sum += ru.ru_stime.tv_sec*1e9 + ru.ru_stime.tv_usec*1e3;
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1198: FILE: tools/perf/builtin-sched.c:416:
+	sum += ru.ru_stime.tv_sec*1e9 + ru.ru_stime.tv_usec*1e3;
 	                                                   ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1205: FILE: tools/perf/builtin-sched.c:423:
+	char filename [] = "/proc/1234567890/sched";

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1216: FILE: tools/perf/builtin-sched.c:434:
+	BUG_ON(!file);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1220: FILE: tools/perf/builtin-sched.c:438:
+		ret = sscanf(line, "se.sum_exec_runtime : %ld.%06ld\n",
+			&msecs, &nsecs);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1222: FILE: tools/perf/builtin-sched.c:440:
+			total = msecs*1e6 + nsecs;
 			             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1245: FILE: tools/perf/builtin-sched.c:463:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1247: FILE: tools/perf/builtin-sched.c:465:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1249: FILE: tools/perf/builtin-sched.c:467:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1262: FILE: tools/perf/builtin-sched.c:480:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1265: FILE: tools/perf/builtin-sched.c:483:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1267: FILE: tools/perf/builtin-sched.c:485:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1280: FILE: tools/perf/builtin-sched.c:498:
+	BUG_ON(err);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1281: FILE: tools/perf/builtin-sched.c:499:
+	err = pthread_attr_setstacksize(&attr, (size_t)(16*1024));
 	                                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1282: FILE: tools/perf/builtin-sched.c:500:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1284: FILE: tools/perf/builtin-sched.c:502:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1286: FILE: tools/perf/builtin-sched.c:504:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1294: FILE: tools/perf/builtin-sched.c:512:
+		BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1311: FILE: tools/perf/builtin-sched.c:529:
+		BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1315: FILE: tools/perf/builtin-sched.c:533:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1324: FILE: tools/perf/builtin-sched.c:542:
+		BUG_ON(ret);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1333: FILE: tools/perf/builtin-sched.c:551:
+	runavg_cpu_usage = (runavg_cpu_usage*9 + cpu_usage)/10;
 	                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1333: FILE: tools/perf/builtin-sched.c:551:
+	runavg_cpu_usage = (runavg_cpu_usage*9 + cpu_usage)/10;
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1338: FILE: tools/perf/builtin-sched.c:556:
+	runavg_parent_cpu_usage = (runavg_parent_cpu_usage*9 +
 	                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1339: FILE: tools/perf/builtin-sched.c:557:
+				   parent_cpu_usage)/10;
 				                    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1342: FILE: tools/perf/builtin-sched.c:560:
+	BUG_ON(ret);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1372: FILE: tools/perf/builtin-sched.c:590:
+	run_avg = (run_avg*9 + delta)/10;
 	                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1372: FILE: tools/perf/builtin-sched.c:590:
+	run_avg = (run_avg*9 + delta)/10;
 	                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1375: FILE: tools/perf/builtin-sched.c:593:
+	printf("#%-3ld: %0.3f, ",
+		nr_runs, (double)delta/1000000.0);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1375: FILE: tools/perf/builtin-sched.c:593:
+		nr_runs, (double)delta/1000000.0);
 		                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1378: FILE: tools/perf/builtin-sched.c:596:
+	printf("ravg: %0.2f, ",
+		(double)run_avg/1e6);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1378: FILE: tools/perf/builtin-sched.c:596:
+		(double)run_avg/1e6);
 		               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1381: FILE: tools/perf/builtin-sched.c:599:
+	printf("cpu: %0.2f / %0.2f",
+		(double)cpu_usage/1e6, (double)runavg_cpu_usage/1e6);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1381: FILE: tools/perf/builtin-sched.c:599:
+		(double)cpu_usage/1e6, (double)runavg_cpu_usage/1e6);
 		                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1381: FILE: tools/perf/builtin-sched.c:599:
+		(double)cpu_usage/1e6, (double)runavg_cpu_usage/1e6);
 		                                               ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1383: FILE: tools/perf/builtin-sched.c:601:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1389: FILE: tools/perf/builtin-sched.c:607:
+	printf(" [%0.2f / %0.2f]",
+		(double)parent_cpu_usage/1e6,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1389: FILE: tools/perf/builtin-sched.c:607:
+		(double)parent_cpu_usage/1e6,
 		                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1390: FILE: tools/perf/builtin-sched.c:608:
+		(double)runavg_parent_cpu_usage/1e6);
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1408: FILE: tools/perf/builtin-sched.c:626:
+	printf("the run test took %Ld nsecs\n", T1-T0);
 	                                          ^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1408: FILE: tools/perf/builtin-sched.c:626:
+	printf("the run test took %Ld nsecs\n", T1-T0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1414: FILE: tools/perf/builtin-sched.c:632:
+	printf("the sleep test took %Ld nsecs\n", T1-T0);
 	                                            ^

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1414: FILE: tools/perf/builtin-sched.c:632:
+	printf("the sleep test took %Ld nsecs\n", T1-T0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1425: FILE: tools/perf/builtin-sched.c:643:
+	dump_printf("%p [%p]: perf_event_comm: %s:%d\n",
+		(void *)(offset + head),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#1429: FILE: tools/perf/builtin-sched.c:647:
+	if (thread == NULL ||

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1439: FILE: tools/perf/builtin-sched.c:657:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#1445: FILE: tools/perf/builtin-sched.c:663:
+#define FILL_FIELD(ptr, field, event, data)	\
+	ptr.field = (typeof(ptr.field)) raw_field_value(event, #field, data)

CHECK:SPACING: No space is necessary after a cast
#1446: FILE: tools/perf/builtin-sched.c:664:
+	ptr.field = (typeof(ptr.field)) raw_field_value(event, #field, data)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'array' - possible side-effects?
#1448: FILE: tools/perf/builtin-sched.c:666:
+#define FILL_ARRAY(ptr, array, event, data)			\
+do {								\
+	void *__array = raw_field_ptr(event, #array, data);	\
+	memcpy(ptr.array, __array, sizeof(ptr.array));	\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1452: FILE: tools/perf/builtin-sched.c:670:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1454: FILE: tools/perf/builtin-sched.c:672:
+#define FILL_COMMON_FIELDS(ptr, event, data)			\
+do {								\
+	FILL_FIELD(ptr, common_type, event, data);		\
+	FILL_FIELD(ptr, common_flags, event, data);		\
+	FILL_FIELD(ptr, common_preempt_count, event, data);	\
+	FILL_FIELD(ptr, common_pid, event, data);		\
+	FILL_FIELD(ptr, common_tgid, event, data);		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event' - possible side-effects?
#1454: FILE: tools/perf/builtin-sched.c:672:
+#define FILL_COMMON_FIELDS(ptr, event, data)			\
+do {								\
+	FILL_FIELD(ptr, common_type, event, data);		\
+	FILL_FIELD(ptr, common_flags, event, data);		\
+	FILL_FIELD(ptr, common_preempt_count, event, data);	\
+	FILL_FIELD(ptr, common_pid, event, data);		\
+	FILL_FIELD(ptr, common_tgid, event, data);		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'data' - possible side-effects?
#1454: FILE: tools/perf/builtin-sched.c:672:
+#define FILL_COMMON_FIELDS(ptr, event, data)			\
+do {								\
+	FILL_FIELD(ptr, common_type, event, data);		\
+	FILL_FIELD(ptr, common_flags, event, data);		\
+	FILL_FIELD(ptr, common_preempt_count, event, data);	\
+	FILL_FIELD(ptr, common_pid, event, data);		\
+	FILL_FIELD(ptr, common_tgid, event, data);		\
+} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1463: FILE: tools/perf/builtin-sched.c:681:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_switch_event *' should also have an identifier name
#1531: FILE: tools/perf/builtin-sched.c:749:
+	void (*switch_event)(struct trace_switch_event *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#1531: FILE: tools/perf/builtin-sched.c:749:
+	void (*switch_event)(struct trace_switch_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_runtime_event *' should also have an identifier name
#1537: FILE: tools/perf/builtin-sched.c:755:
+	void (*runtime_event)(struct trace_runtime_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#1537: FILE: tools/perf/builtin-sched.c:755:
+	void (*runtime_event)(struct trace_runtime_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_wakeup_event *' should also have an identifier name
#1543: FILE: tools/perf/builtin-sched.c:761:
+	void (*wakeup_event)(struct trace_wakeup_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#1543: FILE: tools/perf/builtin-sched.c:761:
+	void (*wakeup_event)(struct trace_wakeup_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_fork_event *' should also have an identifier name
#1549: FILE: tools/perf/builtin-sched.c:767:
+	void (*fork_event)(struct trace_fork_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#1549: FILE: tools/perf/builtin-sched.c:767:
+	void (*fork_event)(struct trace_fork_event *,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1556: FILE: tools/perf/builtin-sched.c:774:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1570: FILE: tools/perf/builtin-sched.c:788:
+		printf(" ... pid %d woke up %s/%d\n",
+			wakeup_event->common_pid,

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1607: FILE: tools/perf/builtin-sched.c:825:
+		die("hm, delta: %Ld < 0 ?\n", delta);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1610: FILE: tools/perf/builtin-sched.c:828:
+		printf(" ... switch from %s/%d to %s/%d [ran %Ld nsecs]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1611: FILE: tools/perf/builtin-sched.c:829:
+		printf(" ... switch from %s/%d to %s/%d [ran %Ld nsecs]\n",
+			switch_event->prev_comm, switch_event->prev_pid,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1625: FILE: tools/perf/builtin-sched.c:843:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1662: FILE: tools/perf/builtin-sched.c:880:
+	BUG_ON(list_empty(list));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1675: FILE: tools/perf/builtin-sched.c:893:
+thread_atoms_search(struct rb_root *root, struct thread *thread,
+			 struct list_head *sort_list)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1687: FILE: tools/perf/builtin-sched.c:905:
+		if (cmp > 0)
[...]
+		else if (cmp < 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1691: FILE: tools/perf/builtin-sched.c:909:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1692: FILE: tools/perf/builtin-sched.c:910:
+			BUG_ON(thread != atoms->thread);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1701: FILE: tools/perf/builtin-sched.c:919:
+__thread_latency_insert(struct rb_root *root, struct work_atoms *data,
+			 struct list_head *sort_list)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around root->rb_node
#1703: FILE: tools/perf/builtin-sched.c:921:
+	struct rb_node **new = &(root->rb_node), *parent = NULL;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1781: FILE: tools/perf/builtin-sched.c:999:
+	BUG_ON(list_empty(&atoms->work_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1830: FILE: tools/perf/builtin-sched.c:1048:
+	BUG_ON(cpu >= MAX_CPUS || cpu < 0);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1840: FILE: tools/perf/builtin-sched.c:1058:
+		die("hm, delta: %Ld < 0 ?\n", delta);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1842: FILE: tools/perf/builtin-sched.c:1060:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1872: FILE: tools/perf/builtin-sched.c:1090:
+latency_runtime_event(struct trace_runtime_event *runtime_event,
+		     struct event *event __used,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1880: FILE: tools/perf/builtin-sched.c:1098:
+	BUG_ON(cpu >= MAX_CPUS || cpu < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1920: FILE: tools/perf/builtin-sched.c:1138:
+	BUG_ON(list_empty(&atoms->work_list));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1969: FILE: tools/perf/builtin-sched.c:1187:
+	printf("|%11.3f ms |%9llu | avg:%9.3f ms | max:%9.3f ms |\n",
+	      (double)work_list->total_runtime / 1e6,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2068: FILE: tools/perf/builtin-sched.c:1286:
+#define NB_AVAILABLE_SORTS	(int)(sizeof(available_sorts) / sizeof(struct sort_dimension *))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2095: FILE: tools/perf/builtin-sched.c:1313:
+		struct work_atoms *data;
+		node = rb_first(&atom_root);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2134: FILE: tools/perf/builtin-sched.c:1352:
+static u32 curr_pid[MAX_CPUS] = { [0 ... MAX_CPUS-1] = -1 };
                                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2154: FILE: tools/perf/builtin-sched.c:1372:
+	BUG_ON(this_cpu >= MAX_CPUS || this_cpu < 0);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2167: FILE: tools/perf/builtin-sched.c:1385:
+		die("hm, delta: %Ld < 0 ?\n", delta);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2169: FILE: tools/perf/builtin-sched.c:1387:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2185: FILE: tools/perf/builtin-sched.c:1403:
+			next_shortname1='A';
 			               ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2186: FILE: tools/perf/builtin-sched.c:1404:
+			if (next_shortname2 < '9') {
[...]
+			} else {
[...]

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2189: FILE: tools/perf/builtin-sched.c:1407:
+				next_shortname2='0';
 				               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2201: FILE: tools/perf/builtin-sched.c:1419:
+		if (curr_thread[cpu]) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2206: FILE: tools/perf/builtin-sched.c:1424:
+		} else

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2210: FILE: tools/perf/builtin-sched.c:1428:
+	printf("  %12.6f secs ", (double)timestamp/1e9);
 	                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2213: FILE: tools/perf/builtin-sched.c:1431:
+		printf("%s => %s:%d\n",
+			sched_in->shortname, sched_in->comm, sched_in->pid);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2219: FILE: tools/perf/builtin-sched.c:1437:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2255: FILE: tools/perf/builtin-sched.c:1473:
+process_sched_runtime_event(struct raw_event_sample *raw,
+			   struct event *event,

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2358: FILE: tools/perf/builtin-sched.c:1576:
+	dump_printf("%p [%p]: PERF_EVENT_SAMPLE (IP, %d): %d/%d: %p period: %Ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2359: FILE: tools/perf/builtin-sched.c:1577:
+	dump_printf("%p [%p]: PERF_EVENT_SAMPLE (IP, %d): %d/%d: %p period: %Ld\n",
+		(void *)(offset + head),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#2368: FILE: tools/perf/builtin-sched.c:1586:
+	if (thread == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2385: FILE: tools/perf/builtin-sched.c:1603:
+	} else if (cpumode == PERF_EVENT_MISC_USER) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#2470: FILE: tools/perf/builtin-sched.c:1688:
+		die("No trace sample to read. Did you call perf record "
+		    "without -R?");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2506: FILE: tools/perf/builtin-sched.c:1724:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2508: FILE: tools/perf/builtin-sched.c:1726:
+	if (!size || process_event(event, offset, head) < 0) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2535: FILE: tools/perf/builtin-sched.c:1753:
+		printf("  INFO: %.3f%% unordered timestamps (%ld out of %ld)\n",
+			(double)nr_unordered_timestamps/(double)nr_timestamps*100.0,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2535: FILE: tools/perf/builtin-sched.c:1753:
+			(double)nr_unordered_timestamps/(double)nr_timestamps*100.0,
 			                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2535: FILE: tools/perf/builtin-sched.c:1753:
+			(double)nr_unordered_timestamps/(double)nr_timestamps*100.0,
 			                                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2540: FILE: tools/perf/builtin-sched.c:1758:
+		printf("  INFO: %.3f%% lost events (%ld out of %ld, in %ld chunks)\n",
+			(double)nr_lost_events/(double)nr_events*100.0,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2540: FILE: tools/perf/builtin-sched.c:1758:
+			(double)nr_lost_events/(double)nr_events*100.0,
 			                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2540: FILE: tools/perf/builtin-sched.c:1758:
+			(double)nr_lost_events/(double)nr_events*100.0,
 			                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2545: FILE: tools/perf/builtin-sched.c:1763:
+		printf("  INFO: %.3f%% state machine bugs (%ld out of %ld)",
+			(double)nr_state_machine_bugs/(double)nr_timestamps*100.0,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2545: FILE: tools/perf/builtin-sched.c:1763:
+			(double)nr_state_machine_bugs/(double)nr_timestamps*100.0,
 			                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2545: FILE: tools/perf/builtin-sched.c:1763:
+			(double)nr_state_machine_bugs/(double)nr_timestamps*100.0,
 			                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2553: FILE: tools/perf/builtin-sched.c:1771:
+		printf("  INFO: %.3f%% context switch bugs (%ld out of %ld)",
+			(double)nr_context_switch_bugs/(double)nr_timestamps*100.0,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2553: FILE: tools/perf/builtin-sched.c:1771:
+			(double)nr_context_switch_bugs/(double)nr_timestamps*100.0,
 			                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2553: FILE: tools/perf/builtin-sched.c:1771:
+			(double)nr_context_switch_bugs/(double)nr_timestamps*100.0,
 			                                                    ^

WARNING:LONG_LINE_STRING: line length of 113 exceeds 100 columns
#2569: FILE: tools/perf/builtin-sched.c:1787:
+	printf("\n -----------------------------------------------------------------------------------------\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_STRING: line length of 111 exceeds 100 columns
#2570: FILE: tools/perf/builtin-sched.c:1788:
+	printf("  Task                  |   Runtime ms  | Switches | Average delay ms | Maximum delay ms |\n");

WARNING:LONG_LINE_STRING: line length of 111 exceeds 100 columns
#2571: FILE: tools/perf/builtin-sched.c:1789:
+	printf(" -----------------------------------------------------------------------------------------\n");

WARNING:LONG_LINE_STRING: line length of 111 exceeds 100 columns
#2583: FILE: tools/perf/builtin-sched.c:1801:
+	printf(" -----------------------------------------------------------------------------------------\n");

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#2584: FILE: tools/perf/builtin-sched.c:1802:
+	printf("  TOTAL:                |%11.3f ms |%9Ld |\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2585: FILE: tools/perf/builtin-sched.c:1803:
+	printf("  TOTAL:                |%11.3f ms |%9Ld |\n",
+		(double)all_runtime/1e6, all_count);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2585: FILE: tools/perf/builtin-sched.c:1803:
+		(double)all_runtime/1e6, all_count);
 		                   ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2592: FILE: tools/perf/builtin-sched.c:1810:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2631: FILE: tools/perf/builtin-sched.c:1849:
+		printf("run atoms optimized: %ld\n",
+			nr_run_events_optimized);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2642: FILE: tools/perf/builtin-sched.c:1860:
+
+

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#2703: FILE: tools/perf/builtin-sched.c:1921:
+static const char *record_args[] = {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2736: FILE: tools/perf/builtin-sched.c:1954:
+	BUG_ON(i != rec_argc);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2779: FILE: tools/perf/builtin-sched.c:1997:
+		return cmd_trace(argc, argv, prefix);
+	} else {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2793: FILE: tools/perf/builtin.h:19:
+extern int cmd_sched(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2794: FILE: tools/perf/builtin.h:20:
+extern int cmd_list(int argc, const char **argv, const char *prefix);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2802: FILE: tools/perf/builtin.h:26:
+extern int cmd_version(int argc, const char **argv, const char *prefix);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2950: FILE: tools/perf/util/parse-events.c:476:
+		if (!strcmp(evt_ent->d_name, ".")
+		    || !strcmp(evt_ent->d_name, "..")

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2951: FILE: tools/perf/util/parse-events.c:477:
+		    || !strcmp(evt_ent->d_name, "..")
+		    || !strcmp(evt_ent->d_name, "enable")

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2952: FILE: tools/perf/util/parse-events.c:478:
+		    || !strcmp(evt_ent->d_name, "enable")
+		    || !strcmp(evt_ent->d_name, "filter"))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2976: FILE: tools/perf/util/parse-events.c:502:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2978: FILE: tools/perf/util/parse-events.c:504:
+static enum event_result parse_tracepoint_event(const char **strp,
 				    struct perf_counter_attr *attr)

CHECK:BRACES: Unbalanced braces around else statement
#3035: FILE: tools/perf/util/parse-events.c:540:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000070817.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 69 warnings, 106 checks, 2881 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000070817.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
