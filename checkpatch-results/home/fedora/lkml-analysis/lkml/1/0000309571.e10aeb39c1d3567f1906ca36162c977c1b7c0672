CHECK:SPACING: No space is necessary after a cast
#142: FILE: arch/x86/mm/ioremap.c:196:
+	ret_addr = (void __iomem *) (vaddr + offset);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#416: FILE: arch/x86/mm/mmio-mod.c:60:
+static const size_t subbuf_size = 256*1024;
                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#458: FILE: arch/x86/mm/mmio-mod.c:91:
+static unsigned int	n_subbufs = 32*4;
                    	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: arch/x86/mm/mmio-mod.c:131:
+static ssize_t write_marker(struct file *file, const char __user *buffer,
+						size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: arch/x86/mm/mmio-mod.c:168:
+		pr_err(NAME "Error in %s: no pte for page 0x%08lx\n",
 							__func__, address);

WARNING:SPLIT_STRING: quoted string split across lines
#534: FILE: arch/x86/mm/mmio-mod.c:174:
+		pr_emerg(NAME "4MB pages are not currently supported: "
+							"0x%08lx\n", address);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: arch/x86/mm/mmio-mod.c:178:
+	pr_info(NAME "pte for 0x%lx: 0x%lx 0x%lx\n", address, pte_val(*pte),
+						pte_val(*pte) & _PAGE_PRESENT);

WARNING:SPLIT_STRING: quoted string split across lines
#552: FILE: arch/x86/mm/mmio-mod.c:189:
+	pr_emerg(NAME "unexpected fault for address: 0x%08lx, "
+					"last fault for address: 0x%08lx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'post', this function's name, in a string
#596: FILE: arch/x86/mm/mmio-mod.c:287:
+		pr_emerg(NAME "unexpected post handler");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: arch/x86/mm/mmio-mod.c:323:
+		pr_err(NAME "cpu %d buffer no longer full, missed %d events.\n",
+								cpu, count);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#621: FILE: arch/x86/mm/mmio-mod.c:330:
+static struct file_operations mmio_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: arch/x86/mm/mmio-mod.c:370:
+static void ioremap_trace_core(unsigned long offset, unsigned long size,
 							void __iomem *addr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset != filter_offset'
#718: FILE: arch/x86/mm/mmio-mod.c:429:
+	if ((filter_offset) && (offset != filter_offset))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#746: FILE: arch/x86/mm/mmio-mod.c:434:
+static void iounmap_trace_core(volatile void __iomem *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#787: FILE: arch/x86/mm/mmio-mod.c:482:
+void mmiotrace_iounmap(volatile void __iomem *addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: arch/x86/mm/mmio-mod.c:516:
+static ssize_t read_enabled_file_bool(struct file *file,
+		char __user *user_buf, size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: arch/x86/mm/mmio-mod.c:533:
+static ssize_t write_enabled_file_bool(struct file *file,
+		const char __user *user_buf, size_t count, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#845: FILE: arch/x86/mm/mmio-mod.c:536:
+	int buf_size = min(count, (sizeof(buf)-1));
 	                                      ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#868: FILE: arch/x86/mm/mmio-mod.c:558:
+static struct file_operations fops_enabled = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#874: FILE: arch/x86/mm/mmio-mod.c:564:
+static struct file_operations fops_marker = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#886: FILE: arch/x86/mm/mmio-mod.c:576:
+	chan = relay_open("cpu", dir, subbuf_size, n_subbufs,
+						&relay_callbacks, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#895: FILE: arch/x86/mm/mmio-mod.c:585:
+	marker_file = debugfs_create_file("marker", 0660, dir, NULL,
+								&fops_marker);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#919: FILE: arch/x86/mm/mmio-mod.c:609:
+	BUG_ON(is_enabled());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#925: FILE: arch/x86/mm/mmio-mod.c:615:
+	if (marker_file) {
+		debugfs_remove(marker_file);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: arch/x86/mm/mmio-mod.c:641:
+	enabled_file = debugfs_create_file("enabled", 0600, dir, NULL,
+								&fops_enabled);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#988: FILE: arch/x86/mm/mmio-mod.c:658:
+	if (enabled_file)
+		debugfs_remove(enabled_file);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1065: FILE: include/linux/mmiotrace.h:46:
+extern void mmiotrace_iounmap(volatile void __iomem *addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1065: FILE: include/linux/mmiotrace.h:46:
+extern void mmiotrace_iounmap(volatile void __iomem *addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1071: FILE: include/linux/mmiotrace.h:52:
+}
+static inline void mmiotrace_iounmap(volatile void __iomem *addr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1071: FILE: include/linux/mmiotrace.h:52:
+static inline void mmiotrace_iounmap(volatile void __iomem *addr)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000309571.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 17 checks, 950 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000309571.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
