WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct restart_block *' should also have an identifier name
#153: FILE: checkpoint/process.c:91:
+	long (*fn)(struct restart_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#168: FILE: checkpoint/process.c:106:
+	if (fn == do_no_restart_syscall) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#173: FILE: checkpoint/process.c:111:
+	} else if (fn == hrtimer_nanosleep_restart) {
+

CHECK:SPACING: No space is necessary after a cast
#176: FILE: checkpoint/process.c:114:
+		h->arg_1 = (unsigned long) restart_block->nanosleep.rmtp;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: checkpoint/process.c:117:
+		ckpt_debug("restart_block: hrtimer expire %lld now %lld\n",
+			 expire, base);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: checkpoint/process.c:129:
+		ckpt_debug("restart_block: posix_cpu expire %lld now %lld\n",
+			 expire, base);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#195: FILE: checkpoint/process.c:133:
+	} else if (fn == compat_nanosleep_restart) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: checkpoint/process.c:140:
+		ckpt_debug("restart_block: compat expire %lld now %lld\n",
+			 expire, base);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#205: FILE: checkpoint/process.c:143:
+	} else if (fn == compat_clock_nanosleep_restart) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: checkpoint/process.c:150:
+		ckpt_debug("restart_block: compat_clock expire %lld now %lld\n",
+			 expire, base);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#216: FILE: checkpoint/process.c:154:
+	} else if (fn == futex_wait_restart) {
+

CHECK:SPACING: No space is necessary after a cast
#218: FILE: checkpoint/process.c:156:
+		h->arg_0 = (unsigned long) restart_block->futex.uaddr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: checkpoint/process.c:162:
+		ckpt_debug("restart_block: futex expire %lld now %lld\n",
+			 expire, base);

CHECK:SPACING: No space is necessary after a cast
#230: FILE: checkpoint/process.c:168:
+		h->arg_0 = (unsigned long) restart_block->poll.ufds;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: checkpoint/process.c:175:
+		ckpt_debug("restart_block: poll expire %lld now %lld\n",
+			 expire, base);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#240: FILE: checkpoint/process.c:178:
+	} else {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#241: FILE: checkpoint/process.c:179:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#243: FILE: checkpoint/process.c:181:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: checkpoint/process.c:187:
+	ckpt_debug("restart_block: args %#llx %#llx %#llx %#llx %#llx\n",
+		 h->arg_0, h->arg_1, h->arg_2, h->arg_3, h->arg_4);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: checkpoint/process.c:287:
+	ckpt_debug("restart_block: expire %lld begin %lld\n",
+		 expire, ktime_to_ns(ctx->ktime_begin));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: checkpoint/process.c:289:
+	ckpt_debug("restart_block: args %#llx %#llx %#llx %#llx %#llx\n",
+		 h->arg_0, h->arg_1, h->arg_2, h->arg_3, h->arg_4);

CHECK:SPACING: No space is necessary after a cast
#308: FILE: checkpoint/process.c:302:
+			(struct timespec __user *) (unsigned long) h->arg_1;

CHECK:SPACING: No space is necessary after a cast
#330: FILE: checkpoint/process.c:324:
+			(struct timespec __user *) (unsigned long) h->arg_1;

CHECK:SPACING: No space is necessary after a cast
#333: FILE: checkpoint/process.c:327:
+				(unsigned long) h->arg_2;

CHECK:SPACING: No space is necessary after a cast
#343: FILE: checkpoint/process.c:337:
+			(struct timespec __user *) (unsigned long) h->arg_1;

CHECK:SPACING: No space is necessary after a cast
#346: FILE: checkpoint/process.c:340:
+				(unsigned long) h->arg_2;

CHECK:SPACING: No space is necessary after a cast
#352: FILE: checkpoint/process.c:346:
+		restart_block.futex.uaddr = (u32 *) (unsigned long) h->arg_0;

CHECK:SPACING: No space is necessary after a cast
#361: FILE: checkpoint/process.c:355:
+			(struct pollfd __user *) (unsigned long) h->arg_0;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#474: FILE: include/linux/checkpoint.h:72:
+extern int checkpoint_restart_block(struct ckpt_ctx *ctx,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#476: FILE: include/linux/checkpoint.h:74:
+extern int restore_restart_block(struct ckpt_ctx *ctx);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#506: FILE: include/linux/checkpoint_hdr.h:157:
+} __attribute__((aligned(8)));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119452.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 28 checks, 404 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119452.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
