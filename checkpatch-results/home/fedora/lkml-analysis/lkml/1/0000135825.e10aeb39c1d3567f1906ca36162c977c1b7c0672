WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#44: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: arch/mips/include/asm/txx9/dmac.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#105: FILE: drivers/dma/Kconfig:84:
+config TXX9_DMAC
+	tristate "Toshiba TXx9 SoC DMA support"
+	depends on MACH_TX49XX || MACH_TX39XX
+	select DMA_ENGINE
+	help
+	  Support the TXx9 SoC internal DMA controller.  This can be
+	  integrated in chips such as the Toshiba TX4927/38/39.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#131: FILE: drivers/dma/txx9dmac.c:1:
+/*

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#160: FILE: drivers/dma/txx9dmac.c:30:
+static struct txx9dmac_cregs32 __iomem *__dma_regs32(

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#166: FILE: drivers/dma/txx9dmac.c:36:
+#define channel64_readq(dc, name) \
+	__raw_readq(&(__dma_regs(dc)->name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#168: FILE: drivers/dma/txx9dmac.c:38:
+#define channel64_writeq(dc, name, val) \
+	__raw_writeq((val), &(__dma_regs(dc)->name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#170: FILE: drivers/dma/txx9dmac.c:40:
+#define channel64_readl(dc, name) \
+	__raw_readl(&(__dma_regs(dc)->name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#172: FILE: drivers/dma/txx9dmac.c:42:
+#define channel64_writel(dc, name, val) \
+	__raw_writel((val), &(__dma_regs(dc)->name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#175: FILE: drivers/dma/txx9dmac.c:45:
+#define channel32_readl(dc, name) \
+	__raw_readl(&(__dma_regs32(dc)->name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#177: FILE: drivers/dma/txx9dmac.c:47:
+#define channel32_writel(dc, name, val) \
+	__raw_writel((val), &(__dma_regs32(dc)->name))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dc' - possible side-effects?
#182: FILE: drivers/dma/txx9dmac.c:52:
+#define channel_readl(dc, name) \
+	(is_dmac64(dc) ? \
+	 channel64_readl(dc, name) : channel32_readl(dc, name))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#182: FILE: drivers/dma/txx9dmac.c:52:
+#define channel_readl(dc, name) \
+	(is_dmac64(dc) ? \
+	 channel64_readl(dc, name) : channel32_readl(dc, name))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dc' - possible side-effects?
#185: FILE: drivers/dma/txx9dmac.c:55:
+#define channel_writel(dc, name, val) \
+	(is_dmac64(dc) ? \
+	 channel64_writel(dc, name, val) : channel32_writel(dc, name, val))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#185: FILE: drivers/dma/txx9dmac.c:55:
+#define channel_writel(dc, name, val) \
+	(is_dmac64(dc) ? \
+	 channel64_writel(dc, name, val) : channel32_writel(dc, name, val))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#185: FILE: drivers/dma/txx9dmac.c:55:
+#define channel_writel(dc, name, val) \
+	(is_dmac64(dc) ? \
+	 channel64_writel(dc, name, val) : channel32_writel(dc, name, val))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#221: FILE: drivers/dma/txx9dmac.c:91:
+static struct txx9dmac_regs __iomem *__txx9dmac_regs(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#227: FILE: drivers/dma/txx9dmac.c:97:
+static struct txx9dmac_regs32 __iomem *__txx9dmac_regs32(

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#233: FILE: drivers/dma/txx9dmac.c:103:
+#define dma64_readl(ddev, name) \
+	__raw_readl(&(__txx9dmac_regs(ddev)->name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#235: FILE: drivers/dma/txx9dmac.c:105:
+#define dma64_writel(ddev, name, val) \
+	__raw_writel((val), &(__txx9dmac_regs(ddev)->name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#238: FILE: drivers/dma/txx9dmac.c:108:
+#define dma32_readl(ddev, name) \
+	__raw_readl(&(__txx9dmac_regs32(ddev)->name))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#240: FILE: drivers/dma/txx9dmac.c:110:
+#define dma32_writel(ddev, name, val) \
+	__raw_writel((val), &(__txx9dmac_regs32(ddev)->name))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ddev' - possible side-effects?
#243: FILE: drivers/dma/txx9dmac.c:113:
+#define dma_readl(ddev, name) \
+	(__is_dmac64(ddev) ? \
+	dma64_readl(ddev, name) : dma32_readl(ddev, name))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#243: FILE: drivers/dma/txx9dmac.c:113:
+#define dma_readl(ddev, name) \
+	(__is_dmac64(ddev) ? \
+	dma64_readl(ddev, name) : dma32_readl(ddev, name))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ddev' - possible side-effects?
#246: FILE: drivers/dma/txx9dmac.c:116:
+#define dma_writel(ddev, name, val) \
+	(__is_dmac64(ddev) ? \
+	dma64_writel(ddev, name, val) : dma32_writel(ddev, name, val))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#246: FILE: drivers/dma/txx9dmac.c:116:
+#define dma_writel(ddev, name, val) \
+	(__is_dmac64(ddev) ? \
+	dma64_writel(ddev, name, val) : dma32_writel(ddev, name, val))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#246: FILE: drivers/dma/txx9dmac.c:116:
+#define dma_writel(ddev, name, val) \
+	(__is_dmac64(ddev) ? \
+	dma64_writel(ddev, name, val) : dma32_writel(ddev, name, val))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#254: FILE: drivers/dma/txx9dmac.c:124:
+}
+static struct device *chan2parent(struct dma_chan *chan)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#355: FILE: drivers/dma/txx9dmac.c:225:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: drivers/dma/txx9dmac.c:240:
+		dma_sync_single_for_cpu(chan2parent(&dc->chan),
+				child->txd.phys, ddev->descsize,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: drivers/dma/txx9dmac.c:243:
+	dma_sync_single_for_cpu(chan2parent(&dc->chan),
+			desc->txd.phys, ddev->descsize,

WARNING:SPLIT_STRING: quoted string split across lines
#424: FILE: drivers/dma/txx9dmac.c:294:
+			"  CHAR: %#llx SAR: %#llx DAR: %#llx CNTR: %#x"
+			" SAIR: %#x DAIR: %#x CCR: %#x CSR: %#x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#436: FILE: drivers/dma/txx9dmac.c:306:
+			"  CHAR: %#x SAR: %#x DAR: %#x CNTR: %#x"
+			" SAIR: %#x DAIR: %#x CCR: %#x CSR: %#x\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#561: FILE: drivers/dma/txx9dmac.c:431:
+		dma_addr_t dmaaddr;
+		if (!(txd->flags & DMA_COMPL_SKIP_DEST_UNMAP)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#590: FILE: drivers/dma/txx9dmac.c:460:
+	BUG_ON(!list_empty(list));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: drivers/dma/txx9dmac.c:466:
+			dma_sync_single_for_device(chan2parent(&dc->chan),
+				prev->txd.phys, ddev->descsize,

WARNING:SPLIT_STRING: quoted string split across lines
#638: FILE: drivers/dma/txx9dmac.c:508:
+			 "  desc: ch%#llx s%#llx d%#llx c%#x"
+			 " si%#x di%#x cc%#x cs%#x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#651: FILE: drivers/dma/txx9dmac.c:521:
+			 "  desc: ch%#x s%#x d%#x c%#x"
+			 " si%#x di%#x cc%#x cs%#x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#789: FILE: drivers/dma/txx9dmac.c:659:
+	dev_vdbg(chan2dev(&dc->chan), "interrupt: status=%#x\n",
+			channel_readl(dc, CSR));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: drivers/dma/txx9dmac.c:706:
+	dev_vdbg(ddev->chan[0]->dma.dev, "interrupt: status=%#x\n",
+			dma_readl(ddev, MCR));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: drivers/dma/txx9dmac.c:740:
+txx9dmac_prep_dma_memcpy(struct dma_chan *chan, dma_addr_t dest, dma_addr_t src,
+		size_t len, unsigned long flags)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#888: FILE: drivers/dma/txx9dmac.c:758:
+	prev = first = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#919: FILE: drivers/dma/txx9dmac.c:789:
+			txx9dmac_desc_set_nosimple(ddev, desc, 8, 8,
+					dc->ccr | TXX9_DMA_CCR_XFACT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#925: FILE: drivers/dma/txx9dmac.c:795:
+			txx9dmac_desc_set_nosimple(ddev, desc, 4, 4,
+					dc->ccr | TXX9_DMA_CCR_XFACT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#940: FILE: drivers/dma/txx9dmac.c:810:
+			dma_sync_single_for_device(chan2parent(&dc->chan),
+					prev->txd.phys, ddev->descsize,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: drivers/dma/txx9dmac.c:813:
+			list_add_tail(&desc->desc_node,
+					&first->txd.tx_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: drivers/dma/txx9dmac.c:824:
+	dma_sync_single_for_device(chan2parent(&dc->chan),
+			prev->txd.phys, ddev->descsize,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: drivers/dma/txx9dmac.c:835:
+txx9dmac_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,
+		unsigned int sg_len, enum dma_data_direction direction,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#978: FILE: drivers/dma/txx9dmac.c:848:
+	BUG_ON(!ds || !ds->reg_width);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#980: FILE: drivers/dma/txx9dmac.c:850:
+		BUG_ON(direction != DMA_TO_DEVICE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#982: FILE: drivers/dma/txx9dmac.c:852:
+		BUG_ON(direction != DMA_FROM_DEVICE);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#986: FILE: drivers/dma/txx9dmac.c:856:
+	prev = first = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: drivers/dma/txx9dmac.c:898:
+		txx9dmac_desc_set_nosimple(ddev, desc, sai, dai,
+					dc->ccr | TXX9_DMA_CCR_XFACT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1035: FILE: drivers/dma/txx9dmac.c:905:
+			dma_sync_single_for_device(chan2parent(&dc->chan),
+					prev->txd.phys,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: drivers/dma/txx9dmac.c:909:
+			list_add_tail(&desc->desc_node,
+					&first->txd.tx_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1050: FILE: drivers/dma/txx9dmac.c:920:
+	dma_sync_single_for_device(chan2parent(&dc->chan),
+			prev->txd.phys, ddev->descsize,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1175: FILE: drivers/dma/txx9dmac.c:1045:
+	dc->completed = chan->cookie = 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1202: FILE: drivers/dma/txx9dmac.c:1072:
+			dev_info(chan2dev(chan),
+				"only allocated %d descriptors\n", i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1227: FILE: drivers/dma/txx9dmac.c:1097:
+	dev_dbg(chan2dev(chan), "free_chan_resources (descs allocated=%u)\n",
+			dc->descs_allocated);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1230: FILE: drivers/dma/txx9dmac.c:1100:
+	BUG_ON(!list_empty(&dc->active_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1231: FILE: drivers/dma/txx9dmac.c:1101:
+	BUG_ON(!list_empty(&dc->queue));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1232: FILE: drivers/dma/txx9dmac.c:1102:
+	BUG_ON(channel_readl(dc, CSR) & TXX9_DMA_CSR_XFACT);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1288: FILE: drivers/dma/txx9dmac.c:1158:
+	if (dc->ddev->irq < 0) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1293: FILE: drivers/dma/txx9dmac.c:1163:
+		tasklet_init(&dc->tasklet, txx9dmac_chan_tasklet,
+				(unsigned long)dc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1296: FILE: drivers/dma/txx9dmac.c:1166:
+		err = devm_request_irq(&pdev->dev, dc->irq,
+			txx9dmac_chan_interrupt, 0, dev_name(&pdev->dev), dc);

CHECK:BRACES: Unbalanced braces around else statement
#1299: FILE: drivers/dma/txx9dmac.c:1169:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1304: FILE: drivers/dma/txx9dmac.c:1174:
+	dc->chan.cookie = dc->completed = 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1377: FILE: drivers/dma/txx9dmac.c:1247:
+		tasklet_init(&ddev->tasklet, txx9dmac_tasklet,
+				(unsigned long)ddev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1379: FILE: drivers/dma/txx9dmac.c:1249:
+		err = devm_request_irq(&pdev->dev, ddev->irq,
+			txx9dmac_interrupt, 0, dev_name(&pdev->dev), ddev);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1431: FILE: drivers/dma/txx9dmac.c:1301:
+
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1481: FILE: drivers/dma/txx9dmac.h:1:
+/*

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1517: FILE: drivers/dma/txx9dmac.h:37:
+}
+#define TXX9_DMA_USE_SIMPLE_CHAIN

WARNING:LINE_SPACING: Missing a blank line after declarations
#1557: FILE: drivers/dma/txx9dmac.h:77:
+	u64 DAR;		/* Destination Address Register */
+	TXX9_DMA_REG32(CNTR);	/* Count Register */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1563: FILE: drivers/dma/txx9dmac.h:83:
+};
+struct txx9dmac_cregs32 {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1579: FILE: drivers/dma/txx9dmac.h:99:
+	u64	MFDR;		/* Memory Fill Data Register */
+	TXX9_DMA_REG32(MCR);	/* Master Control Register */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1581: FILE: drivers/dma/txx9dmac.h:101:
+};
+struct txx9dmac_regs32 {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1589: FILE: drivers/dma/txx9dmac.h:109:
+#define TXX9_DMA_MCR_EIS(ch)	(0x10000000<<(ch))
                             	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1590: FILE: drivers/dma/txx9dmac.h:110:
+#define TXX9_DMA_MCR_DIS(ch)	(0x01000000<<(ch))
                             	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1592: FILE: drivers/dma/txx9dmac.h:112:
+#define TXX9_DMA_MCR_FIFUM(ch)	(0x00000008<<(ch))
                               	           ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1652: FILE: drivers/dma/txx9dmac.h:172:
+	spinlock_t		lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1692: FILE: drivers/dma/txx9dmac.h:212:
+	u64 DAR;
+	TXX9_DMA_REG32(CNTR);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1694: FILE: drivers/dma/txx9dmac.h:214:
+};
+struct txx9dmac_hwdesc32 {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000135825.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 62 checks, 1717 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000135825.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
