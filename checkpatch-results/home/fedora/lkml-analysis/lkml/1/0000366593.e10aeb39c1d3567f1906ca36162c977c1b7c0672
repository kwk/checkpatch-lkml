WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#60: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'intialization' may be misspelled - perhaps 'initialization'?
#183: FILE: Documentation/pps/pps.txt:86:
+intialization routine as follow:
 ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Documentaion' may be misspelled - perhaps 'Documentation'?
#249: FILE: Documentation/pps/pps.txt:152:
+and the userland tools provided into Documentaion/pps/ directory.
                                      ^^^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#274: FILE: Documentation/pps/ppsctl.c:1:
+#include <stdio.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usage', this function's name, in a string
#287: FILE: Documentation/pps/ppsctl.c:14:
+	fprintf(stderr, "usage: %s <ttyS> [enable|disable]\n", name);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: braces {} should be used on all arms of this statement
#319: FILE: Documentation/pps/ppsctl.c:46:
+	if (argv[2][0] == 'e' || argv[2][0] == '1')
[...]
+	else if (argv[2][0] == 'd' || argv[2][0] == '0')
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#323: FILE: Documentation/pps/ppsctl.c:50:
+	else {

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#337: FILE: Documentation/pps/ppsfind

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#343: FILE: Documentation/pps/ppsfind:2:
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#365: FILE: Documentation/pps/ppstest.c:1:
+#include <stdio.h>

WARNING:SPLIT_STRING: quoted string split across lines
#394: FILE: Documentation/pps/ppstest.c:30:
+		fprintf(stderr, "cannot create a PPS source from device "
+				"\"%s\" (%m)\n", path);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#415: FILE: Documentation/pps/ppstest.c:51:
+	 * propagation delay */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: Documentation/pps/ppstest.c:82:
+		ret = time_pps_fetch(*handle, PPS_TSFMT_TSPEC, &infobuf,
+				   &timeout);

CHECK:BRACES: Unbalanced braces around else statement
#447: FILE: Documentation/pps/ppstest.c:83:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: Documentation/pps/ppstest.c:86:
+		ret = time_pps_fetch(*handle, PPS_TSFMT_TSPEC, &infobuf,
+				   &timeout);

WARNING:SPLIT_STRING: quoted string split across lines
#463: FILE: Documentation/pps/ppstest.c:99:
+	printf("source %d - "
+	       "assert %ld.%09ld, sequence: %ld - "

WARNING:SPLIT_STRING: quoted string split across lines
#464: FILE: Documentation/pps/ppstest.c:100:
+	       "assert %ld.%09ld, sequence: %ld - "
+	       "clear  %ld.%09ld, sequence: %ld\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usage', this function's name, in a string
#477: FILE: Documentation/pps/ppstest.c:113:
+	fprintf(stderr, "usage: %s <ppsdev> [<ppsdev> ...]\n", name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#522: FILE: Documentation/pps/timepps.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#538: FILE: Documentation/pps/timepps.h:17:
+ *   along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#539: FILE: Documentation/pps/timepps.h:18:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#580: FILE: Documentation/pps/timepps.h:59:
+typedef int pps_handle_t;		/* represents a PPS source */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#581: FILE: Documentation/pps/timepps.h:60:
+typedef unsigned long pps_seq_t;	/* sequence number */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#582: FILE: Documentation/pps/timepps.h:61:
+typedef struct ntp_fp ntp_fp_t;		/* NTP-compatible time stamp */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#583: FILE: Documentation/pps/timepps.h:62:
+typedef union pps_timeu pps_timeu_t;	/* generic data type for time stamps */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#584: FILE: Documentation/pps/timepps.h:63:
+typedef struct pps_info pps_info_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#585: FILE: Documentation/pps/timepps.h:64:
+typedef struct pps_params pps_params_t;

WARNING:INLINE: plain inline is preferred over __inline
#603: FILE: Documentation/pps/timepps.h:82:
+static __inline int time_pps_create(int source, pps_handle_t *handle)

WARNING:INLINE: plain inline is preferred over __inline
#628: FILE: Documentation/pps/timepps.h:107:
+static __inline int time_pps_destroy(pps_handle_t handle)

WARNING:INLINE: plain inline is preferred over __inline
#633: FILE: Documentation/pps/timepps.h:112:
+static __inline int time_pps_getparams(pps_handle_t handle,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: Documentation/pps/timepps.h:113:
+static __inline int time_pps_getparams(pps_handle_t handle,
+					pps_params_t *ppsparams)

WARNING:INLINE: plain inline is preferred over __inline
#651: FILE: Documentation/pps/timepps.h:130:
+static __inline int time_pps_setparams(pps_handle_t handle,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: Documentation/pps/timepps.h:131:
+static __inline int time_pps_setparams(pps_handle_t handle,
+					const pps_params_t *ppsparams)

WARNING:INLINE: plain inline is preferred over __inline
#667: FILE: Documentation/pps/timepps.h:146:
+static __inline int time_pps_getcap(pps_handle_t handle, int *mode)

WARNING:INLINE: plain inline is preferred over __inline
#672: FILE: Documentation/pps/timepps.h:151:
+static __inline int time_pps_fetch(pps_handle_t handle, const int tsformat,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: Documentation/pps/timepps.h:152:
+static __inline int time_pps_fetch(pps_handle_t handle, const int tsformat,
+					pps_info_t *ppsinfobuf,

CHECK:BRACES: braces {} should be used on all arms of this statement
#685: FILE: Documentation/pps/timepps.h:164:
+	if (timeout) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#689: FILE: Documentation/pps/timepps.h:168:
+	} else

WARNING:INLINE: plain inline is preferred over __inline
#705: FILE: Documentation/pps/timepps.h:184:
+static __inline int time_pps_kcbind(pps_handle_t handle,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: Documentation/pps/timepps.h:185:
+static __inline int time_pps_kcbind(pps_handle_t handle,
+					const int kernel_consumer,

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#725: FILE: MAINTAINERS:3016:
+P:	Rodolfo Giometti
+M:	giometti@enneenne.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#727: FILE: MAINTAINERS:3018:
+W:	http://wiki.enneenne.com/index.php/LinuxPPS_support
+L:	linuxpps@ml.enneenne.com

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#777: FILE: drivers/char/lp.c:760:
+	parport_write_control(port,
+		parport_read_control(port) | PARPORT_CONTROL_SELECT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#782: FILE: drivers/char/lp.c:765:
+		parport_write_control(port,
+			parport_read_control(port) & ~PARPORT_CONTROL_SELECT);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#803: FILE: drivers/char/lp.c:850:
+		port->pps_info.mode = PPS_CAPTUREASSERT | PPS_OFFSETASSERT | \

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around port->pps_info
#809: FILE: drivers/char/lp.c:856:
+		port->pps_source = pps_register_source(&(port->pps_info),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: drivers/char/lp.c:857:
+		port->pps_source = pps_register_source(&(port->pps_info),
+				PPS_CAPTUREASSERT | PPS_OFFSETASSERT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#813: FILE: drivers/char/lp.c:860:
+			dev_err(port->dev,
+					"cannot register PPS source \"%s\"\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: drivers/char/lp.c:864:
+			dev_info(port->dev, "PPS source #%d \"%s\" added\n",
+					port->pps_source, port->pps_info.path);

WARNING:SPLIT_STRING: quoted string split across lines
#821: FILE: drivers/char/lp.c:868:
+		dev_err(port->dev, "PPS support disabled due port \"%s\" is "
+					"in polling mode\n",

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#856: FILE: drivers/pps/Kconfig:7:
+config PPS
+	tristate "PPS support"
+	depends on EXPERIMENTAL
+	---help---
+	  PPS (Pulse Per Second) is a special pulse provided by some GPS
+	  antennae. Userland can use it to get an high time reference.
+
+	  Some antennae's PPS signals are connected with the CD (Carrier
+	  Detect) pin of the serial line they use to communicate with the
+	  host. In this case use the SERIAL_LINE client support.
+
+	  Some antennae's PPS signals are connected with some special host
+	  inputs so you have to enable the corresponding client support.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called pps_core.ko.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#873: FILE: drivers/pps/Kconfig:24:
+config PPS_DEBUG
+	bool "PPS debugging messages"
+	depends on PPS 
+	help
+	  Say Y here if you want the PPS support to produce a bunch of debug
+	  messages to the system log.  Select this if you are having a
+	  problem with PPS support and want to see more of what is going on.
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#875: FILE: drivers/pps/Kconfig:26:
+^Idepends on PPS $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#899: FILE: drivers/pps/Makefile:10:
+EXTRA_CFLAGS += -DDEBUG

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#937: FILE: drivers/pps/clients/Kconfig:31:
+config PPS_CLIENT_LP
+	bool "Parallel printer support"
+	depends on PRINTER != n && !(PPS = m && PRINTER = y)
+	help
+	  If you say yes here you get support for a PPS source connected
+	  with the interrupt pin of your parallel port.
+

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#958: FILE: drivers/pps/clients/Makefile:8:
+EXTRA_CFLAGS += -DDEBUG

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#966: FILE: drivers/pps/clients/ktimer.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#983: FILE: drivers/pps/clients/ktimer.c:18:
+ *   along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#984: FILE: drivers/pps/clients/ktimer.c:19:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#987: FILE: drivers/pps/clients/ktimer.c:22:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1033: FILE: drivers/pps/clients/ktimer.c:68:
+	name		: "ktimer",
 	    		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1035: FILE: drivers/pps/clients/ktimer.c:70:
+	mode		: PPS_CAPTUREASSERT | PPS_OFFSETASSERT | \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1038: FILE: drivers/pps/clients/ktimer.c:73:
+^Iecho ^I^I: pps_ktimer_echo,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: drivers/pps/clients/ktimer.c:94:
+	ret = pps_register_source(&pps_ktimer_info,
+				PPS_CAPTUREASSERT | PPS_OFFSETASSERT);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1061: FILE: drivers/pps/clients/ktimer.c:96:
+		printk(KERN_ERR "cannot register ktimer source\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1086: FILE: drivers/pps/kapi.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1103: FILE: drivers/pps/kapi.c:18:
+ *   along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1104: FILE: drivers/pps/kapi.c:19:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1107: FILE: drivers/pps/kapi.c:22:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1155: FILE: drivers/pps/kapi.c:70:
+		printk(KERN_ERR "pps: %s: unsupported default parameters\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1156: FILE: drivers/pps/kapi.c:71:
+		printk(KERN_ERR "pps: %s: unsupported default parameters\n",
+					info->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: drivers/pps/kapi.c:76:
+	if ((info->mode & (PPS_ECHOASSERT | PPS_ECHOCLEAR)) != 0 &&
+			info->echo == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!info->echo"
#1161: FILE: drivers/pps/kapi.c:76:
+			info->echo == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1162: FILE: drivers/pps/kapi.c:77:
+		printk(KERN_ERR "pps: %s: echo function is not defined\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1163: FILE: drivers/pps/kapi.c:78:
+		printk(KERN_ERR "pps: %s: echo function is not defined\n",
+					info->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1168: FILE: drivers/pps/kapi.c:83:
+		printk(KERN_ERR "pps: %s: unspecified time format\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: drivers/pps/kapi.c:84:
+		printk(KERN_ERR "pps: %s: unspecified time format\n",
+					info->name);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pps)...) over kzalloc(sizeof(struct pps_device)...)
#1175: FILE: drivers/pps/kapi.c:90:
+	pps = kzalloc(sizeof(struct pps_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pps"
#1176: FILE: drivers/pps/kapi.c:91:
+	if (pps == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1196: FILE: drivers/pps/kapi.c:111:
+		printk(KERN_ERR "pps: %s: too much PPS sources in the system\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1197: FILE: drivers/pps/kapi.c:112:
+		printk(KERN_ERR "pps: %s: too much PPS sources in the system\n",
+					info->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1215: FILE: drivers/pps/kapi.c:130:
+		printk(KERN_ERR "pps: %s: unable to create char device\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1216: FILE: drivers/pps/kapi.c:131:
+		printk(KERN_ERR "pps: %s: unable to create char device\n",
+					info->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1223: FILE: drivers/pps/kapi.c:138:
+		printk(KERN_ERR "pps: %s: unable to create sysfs entries\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1224: FILE: drivers/pps/kapi.c:139:
+		printk(KERN_ERR "pps: %s: unable to create sysfs entries\n",
+					info->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1244: FILE: drivers/pps/kapi.c:159:
+	printk(KERN_ERR "pps: %s: unable to register source\n", info->name);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1291: FILE: drivers/pps/kapi.c:206:
+	if ((event & (PPS_CAPTUREASSERT | PPS_CAPTURECLEAR)) == 0 ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1292: FILE: drivers/pps/kapi.c:207:
+		printk(KERN_ERR "pps: unknown event (%x) for source %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1293: FILE: drivers/pps/kapi.c:208:
+		printk(KERN_ERR "pps: unknown event (%x) for source %d\n",
+			event, source);

WARNING:REPEATED_WORD: Possible repeated word: 'at'
#1310: FILE: drivers/pps/kapi.c:225:
+	pr_debug("PPS event on source %d at at %llu.%06u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1311: FILE: drivers/pps/kapi.c:226:
+	pr_debug("PPS event on source %d at at %llu.%06u\n",
+			pps->id, ts.sec, ts.nsec);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1330: FILE: drivers/pps/kapi.c:245:
+		pr_debug("capture assert seq #%u for source %d\n",
+			pps->assert_sequence, source);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1341: FILE: drivers/pps/kapi.c:256:
+		pr_debug("capture clear seq #%u for source %d\n",
+			pps->clear_sequence, source);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1364: FILE: drivers/pps/pps.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1381: FILE: drivers/pps/pps.c:18:
+ *   along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1382: FILE: drivers/pps/pps.c:19:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1385: FILE: drivers/pps/pps.c:22:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1419: FILE: drivers/pps/pps.c:56:
+	struct pps_device *pps = file->private_data;
+	return fasync_helper(fd, file, on, &pps->async_queue);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1423: FILE: drivers/pps/pps.c:60:
+static int pps_cdev_ioctl(struct inode *inode, struct file *file,
+		unsigned int cmd, unsigned long arg)

CHECK:SPACING: No space is necessary after a cast
#1429: FILE: drivers/pps/pps.c:66:
+	void __user *uarg = (void __user *) arg;

CHECK:SPACING: No space is necessary after a cast
#1430: FILE: drivers/pps/pps.c:67:
+	int __user *iuarg = (int __user *) arg;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1449: FILE: drivers/pps/pps.c:86:
+		err = copy_to_user(uarg, &pps->params,
+						sizeof(struct pps_kparams));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1470: FILE: drivers/pps/pps.c:107:
+			pr_debug("capture mode unspecified (%x)\n",
+								params.mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1477: FILE: drivers/pps/pps.c:114:
+			pr_debug("unsupported capabilities (%x)\n",
+								params.mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1490: FILE: drivers/pps/pps.c:127:
+			pr_debug("time format unspecified (%x)\n",
+								params.mode);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1526: FILE: drivers/pps/pps.c:163:
+		if (fdata.timeout.flags & PPS_TIME_INVALID)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1528: FILE: drivers/pps/pps.c:165:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1530: FILE: drivers/pps/pps.c:167:
+			pr_debug("timeout %lld.%09d\n",
+					fdata.timeout.sec, fdata.timeout.nsec);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1535: FILE: drivers/pps/pps.c:172:
+				err = wait_event_interruptible_timeout(

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1567: FILE: drivers/pps/pps.c:204:
+		return -ENOTTY;
+		break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1621: FILE: drivers/pps/pps.c:258:
+		printk(KERN_ERR "pps: %s: failed to add char device %d:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1622: FILE: drivers/pps/pps.c:259:
+		printk(KERN_ERR "pps: %s: failed to add char device %d:%d\n",
+				pps->info.name, MAJOR(pps_devt), pps->id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1626: FILE: drivers/pps/pps.c:263:
+	pps->dev = device_create(pps_class, pps->info.dev, pps->devno,
+							"pps%d", pps->id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1632: FILE: drivers/pps/pps.c:269:
+	pr_debug("source %s got cdev (%d:%d)\n", pps->info.name,
+			MAJOR(pps_devt), pps->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1668: FILE: drivers/pps/pps.c:305:
+		printk(KERN_ERR "pps: ailed to allocate class\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1674: FILE: drivers/pps/pps.c:311:
+		printk(KERN_ERR "pps: failed to allocate char device region\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1680: FILE: drivers/pps/pps.c:317:
+	pr_info("Software ver. %s - Copyright 2005-2007 Rodolfo Giometti "
+		"<giometti@linux.it>\n", PPS_VERSION);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1702: FILE: drivers/pps/sysfs.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1719: FILE: drivers/pps/sysfs.c:18:
+ *   along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1720: FILE: drivers/pps/sysfs.c:19:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1723: FILE: drivers/pps/sysfs.c:22:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1734: FILE: drivers/pps/sysfs.c:33:
+static ssize_t pps_show_assert(struct device *dev,
+				struct device_attribute *attr, char *buf)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'pps_show_assert' to 'assert_show'
#1741: FILE: drivers/pps/sysfs.c:40:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1742: FILE: drivers/pps/sysfs.c:41:
+DEVICE_ATTR(assert, S_IRUGO, pps_show_assert, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1745: FILE: drivers/pps/sysfs.c:44:
+static ssize_t pps_show_clear(struct device *dev,
+				struct device_attribute *attr, char *buf)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'pps_show_clear' to 'clear_show'
#1752: FILE: drivers/pps/sysfs.c:51:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1753: FILE: drivers/pps/sysfs.c:52:
+DEVICE_ATTR(clear, S_IRUGO, pps_show_clear, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1756: FILE: drivers/pps/sysfs.c:55:
+static ssize_t pps_show_mode(struct device *dev,
+				struct device_attribute *attr, char *buf)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'pps_show_mode' to 'mode_show'
#1761: FILE: drivers/pps/sysfs.c:60:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1762: FILE: drivers/pps/sysfs.c:61:
+DEVICE_ATTR(mode, S_IRUGO, pps_show_mode, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1765: FILE: drivers/pps/sysfs.c:64:
+static ssize_t pps_show_echo(struct device *dev,
+				struct device_attribute *attr, char *buf)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'pps_show_echo' to 'echo_show'
#1770: FILE: drivers/pps/sysfs.c:69:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1771: FILE: drivers/pps/sysfs.c:70:
+DEVICE_ATTR(echo, S_IRUGO, pps_show_echo, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1774: FILE: drivers/pps/sysfs.c:73:
+static ssize_t pps_show_name(struct device *dev,
+				struct device_attribute *attr, char *buf)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'pps_show_name' to 'name_show'
#1779: FILE: drivers/pps/sysfs.c:78:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1780: FILE: drivers/pps/sysfs.c:79:
+DEVICE_ATTR(name, S_IRUGO, pps_show_name, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1783: FILE: drivers/pps/sysfs.c:82:
+static ssize_t pps_show_path(struct device *dev,
+				struct device_attribute *attr, char *buf)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'pps_show_path' to 'path_show'
#1788: FILE: drivers/pps/sysfs.c:87:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1789: FILE: drivers/pps/sysfs.c:88:
+DEVICE_ATTR(path, S_IRUGO, pps_show_path, NULL);

WARNING:SPLIT_STRING: quoted string split across lines
#1819: FILE: drivers/pps/sysfs.c:118:
+			dev_err(pps->dev, "unable to create \"assert\" "
+					"sysfs entry");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1821: FILE: drivers/pps/sysfs.c:120:
+^I^I^I$

WARNING:SPLIT_STRING: quoted string split across lines
#1826: FILE: drivers/pps/sysfs.c:125:
+			dev_err(pps->dev, "unable to create \"clear\" "
+					"sysfs entry");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1884: FILE: drivers/serial/serial_core.c:648:
+	snprintf(state->pps_info.name, PPS_MAX_NAME_LEN, "%s%d",
+		drv->driver_name, port->line);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1886: FILE: drivers/serial/serial_core.c:650:
+	snprintf(state->pps_info.path, PPS_MAX_NAME_LEN, "/dev/%s%d",
+		drv->name, port->line);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1888: FILE: drivers/serial/serial_core.c:652:
+	state->pps_info.mode = PPS_CAPTUREBOTH | \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1892: FILE: drivers/serial/serial_core.c:656:
+	ret = pps_register_source(&state->pps_info, PPS_CAPTUREBOTH | \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1896: FILE: drivers/serial/serial_core.c:660:
+		dev_err(port->dev, "cannot register PPS source \"%s\"\n",
+						state->pps_info.path);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1911: FILE: drivers/serial/serial_core.c:675:
+	dev_dbg(port->dev, "PPS source #%d \"%s\" removed\n",
+				port->pps_source, state->pps_info.path);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1941: FILE: drivers/serial/serial_core.c:871:
+		if (((old_flags ^ port->flags) & (UPF_SPD_MASK|UPF_HARDPPS_CD)) ||
 		                                              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2026: FILE: include/linux/pps.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2043: FILE: include/linux/pps.h:18:
+ *   along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2044: FILE: include/linux/pps.h:19:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2047: FILE: include/linux/pps.h:22:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2053: FILE: include/linux/pps.h:28:
+ * means the bit is set.  */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2079: FILE: include/linux/pps.h:54:
+ *^I^I^I^I^I ^I^I[David Woodhouse]$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2086: FILE: include/linux/pps.h:61:
+};
+#define PPS_TIME_INVALID	(1<<0)	/* used to specify timeout==NULL */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2086: FILE: include/linux/pps.h:61:
+#define PPS_TIME_INVALID	(1<<0)	/* used to specify timeout==NULL */
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2086: FILE: include/linux/pps.h:61:
+#define PPS_TIME_INVALID	(1<<0)	/* used to specify timeout==NULL */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2090: FILE: include/linux/pps.h:65:
+^I__u32 clear_sequence; ^I^I/* seq. num. of clear event */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2133: FILE: include/linux/pps.h:108:
+#define PPS_KC_HARDPPS_PLL	1	/* hardpps() constrained to
+					   use a phase-locked loop */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2133: FILE: include/linux/pps.h:108:
+					   use a phase-locked loop */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2135: FILE: include/linux/pps.h:110:
+#define PPS_KC_HARDPPS_FLL	2	/* hardpps() constrained to
+					   use a frequency-locked loop */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2135: FILE: include/linux/pps.h:110:
+					   use a frequency-locked loop */

WARNING:TYPO_SPELLING: 'enought' may be misspelled - perhaps 'enough'?
#2159: FILE: include/linux/pps.h:134:
+#define PPS_MAX_SOURCES		16		/* should be enought... */
                        		  		             ^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2209: FILE: include/linux/pps.h:184:
+extern int pps_register_source(struct pps_source_info *info,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2210: FILE: include/linux/pps.h:185:
+extern int pps_register_source(struct pps_source_info *info,
+				int default_params);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2211: FILE: include/linux/pps.h:186:
+extern void pps_unregister_source(int source);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2212: FILE: include/linux/pps.h:187:
+extern int pps_register_cdev(struct pps_device *pps);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2213: FILE: include/linux/pps.h:188:
+extern void pps_unregister_cdev(struct pps_device *pps);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2214: FILE: include/linux/pps.h:189:
+extern void pps_event(int source, int event, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2216: FILE: include/linux/pps.h:191:
+extern int pps_sysfs_create_source_entry(struct pps_device *pps);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2217: FILE: include/linux/pps.h:192:
+extern void pps_sysfs_remove_source_entry(struct pps_device *pps);

CHECK:SPACING: No space is necessary after a cast
#2249: FILE: include/linux/serial_core.h:287:
+#define UPF_USR_MASK		((__force upf_t) (UPF_SPD_MASK|UPF_LOW_LATENCY\

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2249: FILE: include/linux/serial_core.h:287:
+#define UPF_USR_MASK		((__force upf_t) (UPF_SPD_MASK|UPF_LOW_LATENCY\
                     		                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#2250: FILE: include/linux/serial_core.h:288:
+							|UPF_HARDPPS_CD))
 							^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000366593.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 82 warnings, 76 checks, 2087 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000366593.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
