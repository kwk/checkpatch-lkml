WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
 drivers/ata/libata-acpi.c           |  698 +++++++++++++++++++++++++++++++++++

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#131: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#136: FILE: drivers/ata/libata-acpi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#172: FILE: drivers/ata/libata-acpi.c:37:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: drivers/ata/libata-acpi.c:51:
+static int sata_get_dev_handle(struct device *dev, acpi_handle *handle,
+					acpi_integer *pcidevfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: drivers/ata/libata-acpi.c:77:
+static int pata_get_dev_handle(struct device *dev, acpi_handle *handle,
+				acpi_integer *pcidevfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: drivers/ata/libata-acpi.c:135:
+static acpi_status get_devices(acpi_handle handle,
+				u32 level, void *context, void **return_value)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: drivers/ata/libata-acpi.c:162:
+			ata_dev_printk(winfo->atadev, KERN_DEBUG,
+				":%s: matches pcidevfn (0x%llx)\n",

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#299: FILE: drivers/ata/libata-acpi.c:164:
+		strlcpy(winfo->basepath, pathname,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: drivers/ata/libata-acpi.c:176:
+	if (strncmp(pathname, winfo->basepath,
+	    winfo->basepath_len) == 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: drivers/ata/libata-acpi.c:181:
+			ata_dev_printk(winfo->atadev, KERN_DEBUG,
+				"GOT ONE: (%s) root_port = 0x%llx,"

WARNING:SPLIT_STRING: quoted string split across lines
#317: FILE: drivers/ata/libata-acpi.c:182:
+				"GOT ONE: (%s) root_port = 0x%llx,"
+				" port_num = 0x%llx\n", pathname,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: drivers/ata/libata-acpi.c:189:
+				ata_dev_printk(winfo->atadev,
+					KERN_DEBUG, "warning: don't"

WARNING:SPLIT_STRING: quoted string split across lines
#325: FILE: drivers/ata/libata-acpi.c:190:
+					KERN_DEBUG, "warning: don't"
+					" know how to handle SATA port"

WARNING:SPLIT_STRING: quoted string split across lines
#326: FILE: drivers/ata/libata-acpi.c:191:
+					" know how to handle SATA port"
+					" multiplier\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: drivers/ata/libata-acpi.c:197:
+				ata_dev_printk(winfo->atadev,
+					KERN_DEBUG,

WARNING:SPLIT_STRING: quoted string split across lines
#334: FILE: drivers/ata/libata-acpi.c:199:
+					"THIS ^^^^^ is the requested"
+					" SATA drive (handle = 0x%p)\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*winfo)...) over kzalloc(sizeof(struct walk_info)...)
#359: FILE: drivers/ata/libata-acpi.c:224:
+	winfo = kzalloc(sizeof(struct walk_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/ata/libata-acpi.c:234:
+			ata_dev_printk(winfo->atadev, KERN_DEBUG,
+				"acpi_bus_get_device failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: drivers/ata/libata-acpi.c:243:
+			ata_dev_printk(winfo->atadev, KERN_DEBUG,
+				"%s: acpi_get_devices failed\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#379: FILE: drivers/ata/libata-acpi.c:244:
+				__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: drivers/ata/libata-acpi.c:275:
+static int do_drive_get_GTF(struct ata_port *ap, int ix,
+			unsigned int *gtf_length, unsigned long *gtf_address,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#419: FILE: drivers/ata/libata-acpi.c:284:
+^Iunion acpi_object ^I^I*out_obj;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: drivers/ata/libata-acpi.c:298:
+		ata_dev_printk(atadev, KERN_DEBUG,
+			"%s: ENTER: ap->id: %d, port#: %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#434: FILE: drivers/ata/libata-acpi.c:299:
+			__FUNCTION__, ap->id, ap->port_no);

WARNING:SPLIT_STRING: quoted string split across lines
#439: FILE: drivers/ata/libata-acpi.c:304:
+			ata_dev_printk(atadev, KERN_DEBUG, "%s: ERR: "
+				"ata_dev_present: %d, PORT_DISABLED: %lu\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#440: FILE: drivers/ata/libata-acpi.c:305:
+				__FUNCTION__, ata_dev_enabled(atadev),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#446: FILE: drivers/ata/libata-acpi.c:311:
+	 * _GTF is intended for known motherboard devices. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: drivers/ata/libata-acpi.c:317:
+				ata_dev_printk(atadev, KERN_DEBUG,
+					"%s: pata_get_dev_handle failed (%d)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#453: FILE: drivers/ata/libata-acpi.c:318:
+					__FUNCTION__, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: drivers/ata/libata-acpi.c:326:
+				ata_dev_printk(atadev, KERN_DEBUG,
+					"%s: sata_get_dev_handle failed (%d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#462: FILE: drivers/ata/libata-acpi.c:327:
+					__FUNCTION__, err);

ERROR:CODE_INDENT: code indent should use tabs where possible
#471: FILE: drivers/ata/libata-acpi.c:336:
+^I ^I^I * + _their_ children == drive objects */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#471: FILE: drivers/ata/libata-acpi.c:336:
+^I ^I^I * + _their_ children == drive objects */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#471: FILE: drivers/ata/libata-acpi.c:336:
+	 		 * + _their_ children == drive objects */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: drivers/ata/libata-acpi.c:339:
+			chan_handle = acpi_get_child(dev_handle,
+						ap->port_no);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: drivers/ata/libata-acpi.c:342:
+				ata_dev_printk(atadev, KERN_DEBUG,
+					"%s: chan adr=%d: chan_handle=0x%p\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#478: FILE: drivers/ata/libata-acpi.c:343:
+					__FUNCTION__, ap->port_no,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: drivers/ata/libata-acpi.c:360:
+			err = get_sata_adr(dev, dev_handle, pcidevfn, 0,
+					ap, atadev, &dev_adr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: drivers/ata/libata-acpi.c:366:
+				ata_dev_printk(atadev, KERN_DEBUG,
+					"%s: get_sata/pata_adr failed: "

WARNING:SPLIT_STRING: quoted string split across lines
#502: FILE: drivers/ata/libata-acpi.c:367:
+					"%s: get_sata/pata_adr failed: "
+					"err=%d, dev_adr=%u, obj_handle=0x%p\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#503: FILE: drivers/ata/libata-acpi.c:368:
+					__FUNCTION__, err, dev_adr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: drivers/ata/libata-acpi.c:381:
+	status = acpi_evaluate_object(atadev->obj_handle, "_GTF",
+					NULL, &output);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: drivers/ata/libata-acpi.c:385:
+			ata_dev_printk(atadev, KERN_DEBUG,
+				"%s: Run _GTF error: status = 0x%x\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#521: FILE: drivers/ata/libata-acpi.c:386:
+				__FUNCTION__, status);

WARNING:SPLIT_STRING: quoted string split across lines
#528: FILE: drivers/ata/libata-acpi.c:393:
+			ata_dev_printk(atadev, KERN_DEBUG, "%s: Run _GTF: "
+				"length or ptr is NULL (0x%llx, 0x%p)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#529: FILE: drivers/ata/libata-acpi.c:394:
+				__FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#541: FILE: drivers/ata/libata-acpi.c:406:
+			ata_dev_printk(atadev, KERN_DEBUG, "%s: Run _GTF: "
+				"error: expected object type of "

WARNING:SPLIT_STRING: quoted string split across lines
#542: FILE: drivers/ata/libata-acpi.c:407:
+				"error: expected object type of "
+				" ACPI_TYPE_BUFFER, got 0x%x\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#543: FILE: drivers/ata/libata-acpi.c:408:
+				__FUNCTION__, out_obj->type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: drivers/ata/libata-acpi.c:417:
+			ata_dev_printk(atadev, KERN_ERR,
+				"%s: unexpected GTF length (%d) or addr (0x%p)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#553: FILE: drivers/ata/libata-acpi.c:418:
+				__FUNCTION__, out_obj->buffer.length,

WARNING:SPLIT_STRING: quoted string split across lines
#564: FILE: drivers/ata/libata-acpi.c:429:
+		ata_dev_printk(atadev, KERN_DEBUG, "%s: returning "
+			"gtf_length=%d, gtf_address=0x%lx, obj_loc=0x%lx\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#565: FILE: drivers/ata/libata-acpi.c:430:
+			__FUNCTION__, *gtf_length, *gtf_address, *obj_loc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: drivers/ata/libata-acpi.c:456:
+static void taskfile_load_raw(struct ata_port *ap,
+				struct ata_device *atadev,

WARNING:SPLIT_STRING: quoted string split across lines
#596: FILE: drivers/ata/libata-acpi.c:461:
+		ata_dev_printk(atadev, KERN_DEBUG, "%s: (0x1f1-1f7): hex: "
+			"%02x %02x %02x %02x %02x %02x %02x\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#597: FILE: drivers/ata/libata-acpi.c:462:
+			__FUNCTION__,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tfa[0] == 0'
#601: FILE: drivers/ata/libata-acpi.c:466:
+	if ((gtf->tfa[0] == 0) && (gtf->tfa[1] == 0) && (gtf->tfa[2] == 0)
+	    && (gtf->tfa[3] == 0) && (gtf->tfa[4] == 0) && (gtf->tfa[5] == 0)
+	    && (gtf->tfa[6] == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tfa[1] == 0'
#601: FILE: drivers/ata/libata-acpi.c:466:
+	if ((gtf->tfa[0] == 0) && (gtf->tfa[1] == 0) && (gtf->tfa[2] == 0)
+	    && (gtf->tfa[3] == 0) && (gtf->tfa[4] == 0) && (gtf->tfa[5] == 0)
+	    && (gtf->tfa[6] == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tfa[2] == 0'
#601: FILE: drivers/ata/libata-acpi.c:466:
+	if ((gtf->tfa[0] == 0) && (gtf->tfa[1] == 0) && (gtf->tfa[2] == 0)
+	    && (gtf->tfa[3] == 0) && (gtf->tfa[4] == 0) && (gtf->tfa[5] == 0)
+	    && (gtf->tfa[6] == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tfa[3] == 0'
#601: FILE: drivers/ata/libata-acpi.c:466:
+	if ((gtf->tfa[0] == 0) && (gtf->tfa[1] == 0) && (gtf->tfa[2] == 0)
+	    && (gtf->tfa[3] == 0) && (gtf->tfa[4] == 0) && (gtf->tfa[5] == 0)
+	    && (gtf->tfa[6] == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tfa[4] == 0'
#601: FILE: drivers/ata/libata-acpi.c:466:
+	if ((gtf->tfa[0] == 0) && (gtf->tfa[1] == 0) && (gtf->tfa[2] == 0)
+	    && (gtf->tfa[3] == 0) && (gtf->tfa[4] == 0) && (gtf->tfa[5] == 0)
+	    && (gtf->tfa[6] == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tfa[5] == 0'
#601: FILE: drivers/ata/libata-acpi.c:466:
+	if ((gtf->tfa[0] == 0) && (gtf->tfa[1] == 0) && (gtf->tfa[2] == 0)
+	    && (gtf->tfa[3] == 0) && (gtf->tfa[4] == 0) && (gtf->tfa[5] == 0)
+	    && (gtf->tfa[6] == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gtf->tfa[6] == 0'
#601: FILE: drivers/ata/libata-acpi.c:466:
+	if ((gtf->tfa[0] == 0) && (gtf->tfa[1] == 0) && (gtf->tfa[2] == 0)
+	    && (gtf->tfa[3] == 0) && (gtf->tfa[4] == 0) && (gtf->tfa[5] == 0)
+	    && (gtf->tfa[6] == 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#602: FILE: drivers/ata/libata-acpi.c:467:
+	if ((gtf->tfa[0] == 0) && (gtf->tfa[1] == 0) && (gtf->tfa[2] == 0)
+	    && (gtf->tfa[3] == 0) && (gtf->tfa[4] == 0) && (gtf->tfa[5] == 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#603: FILE: drivers/ata/libata-acpi.c:468:
+	    && (gtf->tfa[3] == 0) && (gtf->tfa[4] == 0) && (gtf->tfa[5] == 0)
+	    && (gtf->tfa[6] == 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: drivers/ata/libata-acpi.c:492:
+			ata_dev_printk(atadev, KERN_ERR,
+				"%s: ata_exec_internal failed: %u\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#628: FILE: drivers/ata/libata-acpi.c:493:
+				__FUNCTION__, err);

CHECK:BRACES: Unbalanced braces around else statement
#629: FILE: drivers/ata/libata-acpi.c:494:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: drivers/ata/libata-acpi.c:497:
+			ata_dev_printk(atadev, KERN_WARNING,
+				"%s: SATA driver is missing qc_issue function"

WARNING:SPLIT_STRING: quoted string split across lines
#633: FILE: drivers/ata/libata-acpi.c:498:
+				"%s: SATA driver is missing qc_issue function"
+				" entry points\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#634: FILE: drivers/ata/libata-acpi.c:499:
+				__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: drivers/ata/libata-acpi.c:515:
+static int do_drive_set_taskfiles(struct ata_port *ap,
+		struct ata_device *atadev, unsigned int gtf_length,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: drivers/ata/libata-acpi.c:525:
+		ata_dev_printk(atadev, KERN_DEBUG,
+			"%s: ENTER: ap->id: %d, port#: %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#661: FILE: drivers/ata/libata-acpi.c:526:
+			__FUNCTION__, ap->id, ap->port_no);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: drivers/ata/libata-acpi.c:539:
+			ata_dev_printk(atadev, KERN_ERR,
+				"%s: unexpected GTF length (%d)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#675: FILE: drivers/ata/libata-acpi.c:540:
+				__FUNCTION__, gtf_length);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#701: FILE: drivers/ata/libata-acpi.c:566:
+	int		ret =0;
 	   		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: drivers/ata/libata-acpi.c:579:
+		ret = do_drive_get_GTF(ap, ix,
+				&gtf_length, &gtf_address, &obj_loc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#718: FILE: drivers/ata/libata-acpi.c:583:
+				ata_port_printk(ap, KERN_DEBUG,
+					"%s: get_GTF error (%d)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#719: FILE: drivers/ata/libata-acpi.c:584:
+					__FUNCTION__, ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: drivers/ata/libata-acpi.c:589:
+		ret = do_drive_set_taskfiles(ap, &ap->device[ix],
+				gtf_length, gtf_address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#729: FILE: drivers/ata/libata-acpi.c:594:
+				ata_port_printk(ap, KERN_DEBUG,
+					"%s: set_taskfiles error (%d)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#730: FILE: drivers/ata/libata-acpi.c:595:
+					__FUNCTION__, ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#766: FILE: drivers/ata/libata-acpi.c:631:
+		ata_dev_printk(atadev, KERN_DEBUG,
+			"%s: ap->id: %d, ix = %d, port#: %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#767: FILE: drivers/ata/libata-acpi.c:632:
+			__FUNCTION__, ap->id, ix, ap->port_no);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#773: FILE: drivers/ata/libata-acpi.c:638:
+			ata_dev_printk(atadev, KERN_DEBUG,
+				"%s: Not a SATA device\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#773: FILE: drivers/ata/libata-acpi.c:638:
+				"%s: Not a SATA device\n", __FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#778: FILE: drivers/ata/libata-acpi.c:643:
+	 * _SDD is intended for known motherboard devices. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: drivers/ata/libata-acpi.c:648:
+			ata_dev_printk(atadev, KERN_DEBUG,
+				"%s: sata_get_dev_handle failed (%d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#784: FILE: drivers/ata/libata-acpi.c:649:
+				__FUNCTION__, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: drivers/ata/libata-acpi.c:657:
+		err = get_sata_adr(dev, handle, pcidevfn, ix, ap, atadev,
+					&dev_adr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: drivers/ata/libata-acpi.c:659:
+		if (err < 0 || dev_adr == SATA_ADR_RSVD ||
+			!atadev->obj_handle) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#797: FILE: drivers/ata/libata-acpi.c:662:
+				ata_dev_printk(atadev, KERN_DEBUG,
+					"%s: get_sata_adr failed: "

WARNING:SPLIT_STRING: quoted string split across lines
#798: FILE: drivers/ata/libata-acpi.c:663:
+					"%s: get_sata_adr failed: "
+					"err=%d, dev_adr=%u, obj_handle=0x%p\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#799: FILE: drivers/ata/libata-acpi.c:664:
+					__FUNCTION__, err, dev_adr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#823: FILE: drivers/ata/libata-acpi.c:688:
+			ata_dev_printk(atadev, KERN_DEBUG,
+				"ata%u(%u): %s _SDD error: status = 0x%x\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#825: FILE: drivers/ata/libata-acpi.c:690:
+				__FUNCTION__, status);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#833: FILE: drivers/ata/libata-acpi.c:698:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: drivers/ata/libata-core.c:1575:
+		ata_dev_printk(dev, KERN_WARNING, "failed to set _SDD(%d)\n",
+			rc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#884: FILE: drivers/ata/libata.h:93:
+extern int ata_acpi_exec_tfs(struct ata_port *ap);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#885: FILE: drivers/ata/libata.h:94:
+extern int ata_acpi_push_id(struct ata_port *ap, unsigned int ix);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#891: FILE: drivers/ata/libata.h:100:
+}
+static inline int ata_acpi_push_id(struct ata_port *ap, unsigned int ix)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000466166.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 46 warnings, 55 checks, 809 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000466166.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
