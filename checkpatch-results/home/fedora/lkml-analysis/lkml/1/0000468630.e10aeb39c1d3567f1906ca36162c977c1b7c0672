WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#72: FILE: fs/nfsd/export.c:201:
+	for (i=0; i < key_len(ek->ek_fsidtype)/4; i++)
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#72: FILE: fs/nfsd/export.c:201:
+	for (i=0; i < key_len(ek->ek_fsidtype)/4; i++)
 	                                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uuid"
#110: FILE: fs/nfsd/export.c:382:
+	    uuid == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#141: FILE: fs/nfsd/export.c:543:
+			if (strcmp(buf, "fsloc") == 0)
[...]
+			else if (strcmp(buf, "uuid") == 0) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#146: FILE: fs/nfsd/export.c:548:
+				if (len != 16)
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#148: FILE: fs/nfsd/export.c:550:
+				else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!exp.ex_uuid"
#151: FILE: fs/nfsd/export.c:553:
+					if (exp.ex_uuid == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#154: FILE: fs/nfsd/export.c:556:
+			} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#167: FILE: fs/nfsd/export.c:566:
+		err = check_export(nd.dentry->d_inode, exp.ex_flags,
 		                   ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#169: FILE: fs/nfsd/export.c:568:
+		if (err) goto out;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LINE_SPACING: Missing a blank line after declarations
#192: FILE: fs/nfsd/export.c:618:
+			int i;
+			seq_puts(m, ",uuid=");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#193: FILE: fs/nfsd/export.c:619:
+			for (i=0; i<16; i++) {
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#193: FILE: fs/nfsd/export.c:619:
+			for (i=0; i<16; i++) {
 			           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#194: FILE: fs/nfsd/export.c:620:
+				if ((i&3) == 0 && i)
 				      ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#272: FILE: fs/nfsd/export.c:1011:
+	err = check_export(nd.dentry->d_inode, nxp->ex_flags, NULL);
 	                   ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LINE_SPACING: Missing a blank line after declarations
#299: FILE: fs/nfsd/nfs3xdr.c:155:
+	u64 f;
+	switch(fsid_source(fhp)) {

ERROR:SPACING: space required before the open parenthesis '('
#299: FILE: fs/nfsd/nfs3xdr.c:155:
+	switch(fsid_source(fhp)) {

CHECK:SPACING: No space is necessary after a cast
#306: FILE: fs/nfsd/nfs3xdr.c:162:
+		p = xdr_encode_hyper(p, (u64) fhp->fh_export->ex_fsid);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#309: FILE: fs/nfsd/nfs3xdr.c:165:
+		f = ((u64*)fhp->fh_export->ex_uuid)[0];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#310: FILE: fs/nfsd/nfs3xdr.c:166:
+		f ^= ((u64*)fhp->fh_export->ex_uuid)[1];

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:SPACING: space required before the open parenthesis '('
#353: FILE: fs/nfsd/nfs4xdr.c:1566:
+		} else switch(fsid_source(fhp)) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#353: FILE: fs/nfsd/nfs4xdr.c:1566:
+		} else switch(fsid_source(fhp)) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#394: FILE: fs/nfsd/nfsfh.c:147:
+				len = key_len(FSID_ENCODE_DEV)/4;
 				                              ^

ERROR:SPACING: space required before the open parenthesis '('
#505: FILE: fs/nfsd/nfsfh.c:522:
+	switch(fhp->fh_handle.fh_fsid_type) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#544: FILE: fs/nfsd/nfsxdr.c:183:
+		*p++ = htonl((u32) fhp->fh_export->ex_fsid);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#547: FILE: fs/nfsd/nfsxdr.c:186:
+		f = ((u32*)fhp->fh_export->ex_uuid)[0];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#548: FILE: fs/nfsd/nfsxdr.c:187:
+		f ^= ((u32*)fhp->fh_export->ex_uuid)[1];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#549: FILE: fs/nfsd/nfsxdr.c:188:
+		f ^= ((u32*)fhp->fh_export->ex_uuid)[2];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#550: FILE: fs/nfsd/nfsxdr.c:189:
+		f ^= ((u32*)fhp->fh_export->ex_uuid)[3];

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#565: FILE: include/linux/nfsd/export.h:77:
+	unsigned char *		ex_uuid; /* 16 byte fsid */

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#655: FILE: include/linux/nfsd/nfsfh.h:184:
+};
+extern enum fsid_source fsid_source(struct svc_fh *fhp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#655: FILE: include/linux/nfsd/nfsfh.h:184:
+extern enum fsid_source fsid_source(struct svc_fh *fhp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#657: FILE: include/linux/nfsd/nfsfh.h:186:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#665: FILE: include/linux/nfsd/nfsfh.h:194:
+	u32 *up;
+	switch(vers) {

ERROR:SPACING: space required before the open parenthesis '('
#665: FILE: include/linux/nfsd/nfsfh.h:194:
+	switch(vers) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#667: FILE: include/linux/nfsd/nfsfh.h:196:
+		fsidv[0] = htonl((MAJOR(dev)<<16) |
 		                            ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#687: FILE: include/linux/nfsd/nfsfh.h:216:
+		up = (u32*)uuid;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#694: FILE: include/linux/nfsd/nfsfh.h:223:
+		up = (u32*)uuid;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#706: FILE: include/linux/nfsd/nfsfh.h:235:
+		*(u64*)fsidv = (u64)ino;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#707: FILE: include/linux/nfsd/nfsfh.h:236:
+		memcpy(fsidv+2, uuid, 16);
 		            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#709: FILE: include/linux/nfsd/nfsfh.h:238:
+	default: BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#709: FILE: include/linux/nfsd/nfsfh.h:238:
+	default: BUG();

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#721: FILE: include/linux/nfsd/nfsfh.h:246:
+^Icase FSID_NUM: ^I^Ireturn 4;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 20 errors, 15 warnings, 16 checks, 618 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
