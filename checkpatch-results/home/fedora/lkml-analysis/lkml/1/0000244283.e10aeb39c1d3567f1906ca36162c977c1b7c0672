CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*de)...) over kmalloc(sizeof(struct dir_entry)...)
#72: FILE: init/initramfs.c:91:
+	struct dir_entry *de = kmalloc(sizeof(struct dir_entry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: init/initramfs.c:92:
+	struct dir_entry *de = kmalloc(sizeof(struct dir_entry), GFP_KERNEL);
+	INIT_LIST_HEAD(&de->list);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#82: FILE: init/initramfs.c:101:
+	struct list_head *e, *tmp;
+	list_for_each_safe(e, tmp, &dir_list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#84: FILE: init/initramfs.c:103:
+		struct dir_entry *de = list_entry(e, struct dir_entry, list);
+		list_del(e);

WARNING:MISPLACED_INIT: __initdata should be placed after mtime
#91: FILE: init/initramfs.c:110:
+static __initdata struct utimbuf mtime;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#102: FILE: init/initramfs.c:139:
+	mtime.actime = mtime.modtime = parsed[5];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: init/initramfs.c:367:
+static long __init sys_lutime(char __user * filename,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: init/initramfs.c:368:
+static long __init sys_lutime(char __user * filename,
+	struct utimbuf __user * times)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: init/initramfs.c:368:
+	struct utimbuf __user * times)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: init/initramfs.c:372:
+	struct inode * inode;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#172: FILE: init/initramfs.c:376:
+	if (error) return error;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#226: FILE: usr/Kconfig:48:
+config INITRAMFS_PRESERVE_MTIME
+	bool "Preserve mtimes from INITRAMFS image"
+	depends on BLK_DEV_INITRD
+	default n
+	help
+	  Preserve mtimes (last modified times) for all items stored in the
+	  initramfs image.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000244283.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 5 warnings, 3 checks, 176 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000244283.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
