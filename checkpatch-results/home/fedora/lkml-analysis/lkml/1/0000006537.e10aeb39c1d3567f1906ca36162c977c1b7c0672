WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-pat-for-linus

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*print_entry)...) over kzalloc(sizeof(struct memtype)...)
#452: FILE: arch/x86/mm/pat.c:755:
+	print_entry  = kzalloc(sizeof(struct memtype), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#472: FILE: arch/x86/mm/pat.c:765:
+		return print_entry;
+	} else {

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#480: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#485: FILE: arch/x86/mm/pat_internal.h:1:
+#ifndef __PAT_INTERNAL_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#491: FILE: arch/x86/mm/pat_internal.h:7:
+	do { if (pat_debug_enable) printk(KERN_INFO fmt, ##arg); } while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#513: FILE: arch/x86/mm/pat_internal.h:29:
+extern int rbt_memtype_check_insert(struct memtype *new,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: arch/x86/mm/pat_internal.h:30:
+extern int rbt_memtype_check_insert(struct memtype *new,
+					unsigned long *new_type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#515: FILE: arch/x86/mm/pat_internal.h:31:
+extern int rbt_memtype_erase(u64 start, u64 end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#516: FILE: arch/x86/mm/pat_internal.h:32:
+extern struct memtype *rbt_memtype_lookup(u64 addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#517: FILE: arch/x86/mm/pat_internal.h:33:
+extern int rbt_memtype_copy_nth_element(struct memtype *out, loff_t pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: arch/x86/mm/pat_internal.h:36:
+static inline int rbt_memtype_check_insert(struct memtype *new,
+					unsigned long *new_type)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#537: FILE: arch/x86/mm/pat_rbtree.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#555: FILE: arch/x86/mm/pat_rbtree.c:19:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:LINE_SPACING: Missing a blank line after declarations
#587: FILE: arch/x86/mm/pat_rbtree.c:51:
+	u64 ret = 0;
+	if (node) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#589: FILE: arch/x86/mm/pat_rbtree.c:53:
+		struct memtype *data = container_of(node, struct memtype, rb);
+		ret = data->subtree_max_end;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: arch/x86/mm/pat_rbtree.c:102:
+static struct memtype *memtype_rb_lowest_match(struct rb_root *root,
+				u64 start, u64 end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: arch/x86/mm/pat_rbtree.c:127:
+static struct memtype *memtype_rb_exact_match(struct rb_root *root,
+				u64 start, u64 end)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "match"
#668: FILE: arch/x86/mm/pat_rbtree.c:132:
+	while (match != NULL && match->start < end) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: arch/x86/mm/pat_rbtree.c:149:
+static int memtype_rb_check_conflict(struct rb_root *root,
+				u64 start, u64 end,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!match"
#693: FILE: arch/x86/mm/pat_rbtree.c:157:
+	if (match == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newtype"
#696: FILE: arch/x86/mm/pat_rbtree.c:160:
+	if (match->type != found_type && newtype == NULL)

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#699: FILE: arch/x86/mm/pat_rbtree.c:163:
+	dprintk("Overlap at 0x%Lx-0x%Lx\n", match->start, match->end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#723: FILE: arch/x86/mm/pat_rbtree.c:187:
+	printk(KERN_INFO "%s:%d conflicting memory types "

WARNING:SPLIT_STRING: quoted string split across lines
#724: FILE: arch/x86/mm/pat_rbtree.c:188:
+	printk(KERN_INFO "%s:%d conflicting memory types "
+		"%Lx-%Lx %s<->%s\n", current->comm, current->pid, start,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#724: FILE: arch/x86/mm/pat_rbtree.c:188:
+		"%Lx-%Lx %s<->%s\n", current->comm, current->pid, start,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around root->rb_node
#737: FILE: arch/x86/mm/pat_rbtree.c:201:
+	struct rb_node **node = &(root->rb_node);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#759: FILE: arch/x86/mm/pat_rbtree.c:223:
+	err = memtype_rb_check_conflict(&memtype_rbroot, new->start, new->end,
+						new->type, ret_type);

WARNING:LINE_SPACING: Missing a blank line after declarations
#783: FILE: arch/x86/mm/pat_rbtree.c:247:
+	struct memtype *data;
+	data = memtype_rb_lowest_match(&memtype_rbroot, addr, addr + PAGE_SIZE);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#825: FILE: include/linux/rbtree.h:133:
+#define RB_ROOT	(struct rb_root) { NULL, NULL, }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#826: FILE: include/linux/rbtree.h:134:
+#define RB_AUGMENT_ROOT(x)	(struct rb_root) { NULL, x}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000006537.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 13 warnings, 16 checks, 819 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000006537.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
