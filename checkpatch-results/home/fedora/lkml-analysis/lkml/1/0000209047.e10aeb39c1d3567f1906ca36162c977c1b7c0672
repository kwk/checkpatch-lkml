WARNING:REPEATED_WORD: Possible repeated word: 'the'
#60: 
output of /proc/net/arp truncates the the large MAC entries, which makes 

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: linux/if_arp.h:103:
+  sa_family_t     sa_family;      /* address family, AF_xxx       */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: linux/if_arp.h:104:
+  char            sa_data[30];    /* 30 bytes of HW address */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: linux/if_arp.h:110:
+  struct hwaddr^I^Iarp_ha;^I^I/* hardware address^I^I*/$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: linux/if_arp.h:111:
+  int^I^I^Iarp_flags;^I/* flags^I^I^I*/$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: linux/if_arp.h:112:
+  struct sockaddr       arp_netmask;    /* netmask (only for proxy arps) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: linux/if_arp.h:113:
+  char^I^I^Iarp_dev[16];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: linux/if_arp.h:117:
+  struct sockaddr^Iarp_pa;^I^I/* protocol address^I^I*/$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: linux/if_arp.h:122:
+  char^I^I^Iarp_ha_ext[16]; /* extended part of HW address */$

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#127: FILE: linux/if_arp.h:142:
+#define NOT_VALID_ARP_CTL(__dev, __r) ((__dev->addr_len > sizeof(((struct arpreq_user *)__r)->arp_ha.sa_data)) && \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__dev' - possible side-effects?
#127: FILE: linux/if_arp.h:142:
+#define NOT_VALID_ARP_CTL(__dev, __r) ((__dev->addr_len > sizeof(((struct arpreq_user *)__r)->arp_ha.sa_data)) && \
+	((__dev->addr_len > sizeof(__r->arp_ha.sa_data)) || !(__r->arp_flags & ATF_NEWARPCTL)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__dev' may be better as '(__dev)' to avoid precedence issues
#127: FILE: linux/if_arp.h:142:
+#define NOT_VALID_ARP_CTL(__dev, __r) ((__dev->addr_len > sizeof(((struct arpreq_user *)__r)->arp_ha.sa_data)) && \
+	((__dev->addr_len > sizeof(__r->arp_ha.sa_data)) || !(__r->arp_flags & ATF_NEWARPCTL)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__r' - possible side-effects?
#127: FILE: linux/if_arp.h:142:
+#define NOT_VALID_ARP_CTL(__dev, __r) ((__dev->addr_len > sizeof(((struct arpreq_user *)__r)->arp_ha.sa_data)) && \
+	((__dev->addr_len > sizeof(__r->arp_ha.sa_data)) || !(__r->arp_flags & ATF_NEWARPCTL)))

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: ipv4/arp.c:971:
+^I^Iif (!dev || NOT_VALID_ARP_CTL(dev, r)) /* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: ipv4/arp.c:972:
+^I^I^I^I^I^I^I if we managed to find an interface that should have $

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#140: FILE: ipv4/arp.c:972:
+							 if we managed to find an interface that should have 

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#140: FILE: ipv4/arp.c:972:
+		if (!dev || NOT_VALID_ARP_CTL(dev, r)) /* 
+							 if we managed to find an interface that should have 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: ipv4/arp.c:973:
+^I^I^I^I^I^I^I larger buffer for HW MAC than one that was supposedly supplied, $

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#141: FILE: ipv4/arp.c:973:
+							 larger buffer for HW MAC than one that was supposedly supplied, 

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#142: FILE: ipv4/arp.c:974:
+							 it is not our interface -- the NIC was matched by "junk"

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#143: FILE: ipv4/arp.c:975:
+							 extended data in r and not by  user supplied address

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: ipv4/arp.c:1012:
+^Iif(NOT_VALID_ARP_CTL(dev, r)) $

ERROR:SPACING: space required before the open parenthesis '('
#152: FILE: ipv4/arp.c:1012:
+	if(NOT_VALID_ARP_CTL(dev, r)) 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__in' - possible side-effects?
#162: FILE: ipv4/arp.c:1138:
+#define swap_arp_ioctl_structs(__in, __out) \
+do {\
+	__out.arp_pa = __in.arp_pa; \
+	__out.arp_ha.sa_family = __in.arp_ha.sa_family; \
+	memcpy(&__out.arp_ha.sa_data[0], &__in.arp_ha.sa_data[0], sizeof(__in.arp_ha.sa_data)); \
+	__out.arp_flags = __in.arp_flags; \
+	__out.arp_netmask = __in.arp_netmask; \
+	memcpy(&__out.arp_dev[0], &__in.arp_dev[0], sizeof(__in.arp_dev)); \
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__out' - possible side-effects?
#162: FILE: ipv4/arp.c:1138:
+#define swap_arp_ioctl_structs(__in, __out) \
+do {\
+	__out.arp_pa = __in.arp_pa; \
+	__out.arp_ha.sa_family = __in.arp_ha.sa_family; \
+	memcpy(&__out.arp_ha.sa_data[0], &__in.arp_ha.sa_data[0], sizeof(__in.arp_ha.sa_data)); \
+	__out.arp_flags = __in.arp_flags; \
+	__out.arp_netmask = __in.arp_netmask; \
+	memcpy(&__out.arp_dev[0], &__in.arp_dev[0], sizeof(__in.arp_dev)); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#170: FILE: ipv4/arp.c:1146:
+} while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: ipv4/arp.c:1147:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: ipv4/arp.c:1147:
+ $

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#187: FILE: ipv4/arp.c:1162:
+			err = copy_from_user(&user_r, arg, offsetof(struct arpreq_user,  arp_ha_ext));

ERROR:SPACING: space required before the open parenthesis '('
#191: FILE: ipv4/arp.c:1166:
+			if(user_r.arp_flags & ATF_NEWARPCTL) {

WARNING:LONG_LINE: line length of 192 exceeds 100 columns
#193: FILE: ipv4/arp.c:1168:
+				err =  copy_from_user(&r.arp_ha.sa_data[0] + sizeof(user_r.arp_ha.sa_data), (char *)arg + offsetof(struct arpreq_user,  arp_ha_ext), sizeof(user_r.arp_ha_ext));

WARNING:LONG_LINE_COMMENT: line length of 138 exceeds 100 columns
#204: FILE: ipv4/arp.c:1205:
+		/* Delete arp does not use the value of HW address, we do not have to check whether the supplied buffer is large enough */

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: ipv4/arp.c:1209:
+ ^I^I/* Our HW addr buffer may be not large enough */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#208: FILE: ipv4/arp.c:1209:
+ ^I^I/* Our HW addr buffer may be not large enough */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: ipv4/arp.c:1209:
+ ^I^I/* Our HW addr buffer may be not large enough */$

WARNING:LONG_LINE_COMMENT: line length of 126 exceeds 100 columns
#209: FILE: ipv4/arp.c:1210:
+ 		/* Check the case when the interface was found by a given name and let arp_req_set to check for other cases */

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: ipv4/arp.c:1210:
+ ^I^I/* Check the case when the interface was found by a given name and let arp_req_set to check for other cases */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#209: FILE: ipv4/arp.c:1210:
+ ^I^I/* Check the case when the interface was found by a given name and let arp_req_set to check for other cases */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: ipv4/arp.c:1210:
+ ^I^I/* Check the case when the interface was found by a given name and let arp_req_set to check for other cases */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: ipv4/arp.c:1211:
+ ^I^Iif(dev && NOT_VALID_ARP_CTL(dev, (&r))) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#210: FILE: ipv4/arp.c:1211:
+ ^I^Iif(dev && NOT_VALID_ARP_CTL(dev, (&r))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: ipv4/arp.c:1211:
+ ^I^Iif(dev && NOT_VALID_ARP_CTL(dev, (&r))) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&r'
#210: FILE: ipv4/arp.c:1211:
+ 		if(dev && NOT_VALID_ARP_CTL(dev, (&r))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#210: FILE: ipv4/arp.c:1211:
+ 		if(dev && NOT_VALID_ARP_CTL(dev, (&r))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: ipv4/arp.c:1212:
+ ^I^I^Ierr = -EINVAL; /* the user gave truncated HW address */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#211: FILE: ipv4/arp.c:1212:
+ ^I^I^Ierr = -EINVAL; /* the user gave truncated HW address */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: ipv4/arp.c:1212:
+ ^I^I^Ierr = -EINVAL; /* the user gave truncated HW address */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: ipv4/arp.c:1213:
+ ^I^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#212: FILE: ipv4/arp.c:1213:
+ ^I^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: ipv4/arp.c:1213:
+ ^I^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: ipv4/arp.c:1214:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#213: FILE: ipv4/arp.c:1214:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: ipv4/arp.c:1214:
+ ^I^I}$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&r'
#220: FILE: ipv4/arp.c:1218:
+		if(NOT_VALID_ARP_CTL(dev, (&r))) {

ERROR:SPACING: space required before the open parenthesis '('
#220: FILE: ipv4/arp.c:1218:
+		if(NOT_VALID_ARP_CTL(dev, (&r))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: ipv4/arp.c:1223:
+  ^I^Ierr = arp_req_get(&r, dev);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: ipv4/arp.c:1223:
+  ^I^Ierr = arp_req_get(&r, dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: ipv4/arp.c:1223:
+  ^I^Ierr = arp_req_get(&r, dev);$

ERROR:SPACING: space required before the open parenthesis '('
#228: FILE: ipv4/arp.c:1226:
+			if(is_newarpctl) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#228: FILE: ipv4/arp.c:1226:
+			if(is_newarpctl) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#229: FILE: ipv4/arp.c:1227:
+				memcpy(&user_r.arp_ha_ext[0], &r.arp_ha.sa_data[0]+sizeof(user_r.arp_ha.sa_data),  sizeof(user_r.arp_ha_ext));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#229: FILE: ipv4/arp.c:1227:
+				memcpy(&user_r.arp_ha_ext[0], &r.arp_ha.sa_data[0]+sizeof(user_r.arp_ha.sa_data),  sizeof(user_r.arp_ha_ext));
 				                                                  ^

CHECK:BRACES: Unbalanced braces around else statement
#231: FILE: ipv4/arp.c:1229:
+			} else

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#232: FILE: ipv4/arp.c:1230:
+				err = copy_to_user(arg, &user_r, offsetof(struct arpreq_user,  arp_ha_ext));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000209047.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 38 warnings, 10 checks, 145 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000209047.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
