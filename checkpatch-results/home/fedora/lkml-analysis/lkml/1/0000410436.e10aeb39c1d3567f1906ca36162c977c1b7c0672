CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#54: FILE: include/linux/memcontrol.h:29:
+extern void mem_container_move_lists(struct meta_page *mp, bool active);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: include/linux/memcontrol.h:30:
+extern unsigned long mem_container_isolate_pages(unsigned long nr_to_scan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#56: FILE: include/linux/memcontrol.h:31:
+extern unsigned long mem_container_isolate_pages(unsigned long nr_to_scan,
+					struct list_head *dst,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/swap.h:195:
+extern unsigned long try_to_free_mem_container_pages(struct mem_container *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: include/linux/swap.h:196:
+extern int __isolate_lru_page(struct page *page, int mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: mm/memcontrol.c:109:
+unsigned long mem_container_isolate_pages(unsigned long nr_to_scan,
+					struct list_head *dst,

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: mm/memcontrol.c:234:
+ ^I^I * try_to_free_mem_container_pages() might not give us a full$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#189: FILE: mm/memcontrol.c:234:
+ ^I^I * try_to_free_mem_container_pages() might not give us a full$

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: mm/memcontrol.c:235:
+ ^I^I * picture of reclaim. Some pages are reclaimed and might be$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: mm/memcontrol.c:235:
+ ^I^I * picture of reclaim. Some pages are reclaimed and might be$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: mm/memcontrol.c:236:
+ ^I^I * moved to swap cache or just unmapped from the container.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: mm/memcontrol.c:236:
+ ^I^I * moved to swap cache or just unmapped from the container.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: mm/memcontrol.c:237:
+ ^I^I * Check the limit again to see if the reclaim reduced the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: mm/memcontrol.c:237:
+ ^I^I * Check the limit again to see if the reclaim reduced the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: mm/memcontrol.c:238:
+ ^I^I * current usage of the container before giving up$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: mm/memcontrol.c:238:
+ ^I^I * current usage of the container before giving up$

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: mm/memcontrol.c:239:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: mm/memcontrol.c:239:
+ ^I^I */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: mm/vmscan.c:80:
+	unsigned long (*isolate_pages)(unsigned long nr, struct list_head *dst,
+			unsigned long *scanned, int order, int mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: mm/vmscan.c:752:
+static unsigned long isolate_pages_global(unsigned long nr,
+					struct list_head *dst,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#336: FILE: mm/vmscan.c:976:
+				mem_container_move_lists(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: mm/vmscan.c:983:
+			mem_container_move_lists(page_get_meta_page(page),
+							true);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: mm/vmscan.c:1163:
+unsigned long do_try_to_free_pages(struct zone **zones, gfp_t gfp_mask,
+					struct scan_control *sc)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sc->mem_container"
#403: FILE: mm/vmscan.c:1195:
+		if (sc->mem_container == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sc->mem_container"
#436: FILE: mm/vmscan.c:1225:
+	if (!sc->all_unreclaimable && sc->mem_container == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000410436.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 6 warnings, 13 checks, 442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000410436.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
