WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#89: FILE: fs/proc/base.c:198:
len, 0);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: fs/proc/base.c:640:
+static ssize_t environ_read(struct file * file, char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: fs/proc/base.c:640:
+static ssize_t environ_read(struct file * file, char __user * buf,

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: fs/proc/base.c:641:
+                       size_t count, loff_t *ppos)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: fs/proc/base.c:641:
+static ssize_t environ_read(struct file * file, char __user * buf,
+                       size_t count, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: fs/proc/base.c:641:
+                       size_t count, loff_t *ppos)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: fs/proc/base.c:643:
+       struct task_struct *task = get_proc_task(file->f_dentry->d_inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: fs/proc/base.c:644:
+       char *page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: fs/proc/base.c:645:
+       unsigned long src = *ppos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: fs/proc/base.c:646:
+       int ret = -ESRCH;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: fs/proc/base.c:647:
+       struct mm_struct *mm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: fs/proc/base.c:648:
+       size_t max_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: fs/proc/base.c:650:
+       if (!task)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#114: FILE: fs/proc/base.c:650:
+       if (!task)
+               goto out_no_task;

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: fs/proc/base.c:651:
+               goto out_no_task;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: fs/proc/base.c:651:
+               goto out_no_task;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: fs/proc/base.c:653:
+       if (!ptrace_may_attach(task))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#117: FILE: fs/proc/base.c:653:
+       if (!ptrace_may_attach(task))
+               goto out;

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: fs/proc/base.c:654:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: fs/proc/base.c:654:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: fs/proc/base.c:656:
+       ret = -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: fs/proc/base.c:657:
+       page = (char *)__get_free_page(GFP_USER);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: fs/proc/base.c:658:
+       if (!page)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#122: FILE: fs/proc/base.c:658:
+       if (!page)
+               goto out;

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: fs/proc/base.c:659:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: fs/proc/base.c:659:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: fs/proc/base.c:661:
+       ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: fs/proc/base.c:663:
+       mm = get_task_mm(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: fs/proc/base.c:664:
+       if (!mm)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#128: FILE: fs/proc/base.c:664:
+       if (!mm)
+               goto out_free;

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: fs/proc/base.c:665:
+               goto out_free;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: fs/proc/base.c:665:
+               goto out_free;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: fs/proc/base.c:667:
+       max_len = (count > PAGE_SIZE) ? PAGE_SIZE : count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: fs/proc/base.c:669:
+       while (count > 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#133: FILE: fs/proc/base.c:669:
+       while (count > 0) {
+               int this_len, retval;

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: fs/proc/base.c:670:
+               int this_len, retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: fs/proc/base.c:670:
+               int this_len, retval;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: fs/proc/base.c:672:
+               this_len = mm->env_end - (mm->env_start + src);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: fs/proc/base.c:672:
+               this_len = mm->env_end - (mm->env_start + src);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: fs/proc/base.c:674:
+               if (this_len <= 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: fs/proc/base.c:674:
+               if (this_len <= 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#138: FILE: fs/proc/base.c:674:
+               if (this_len <= 0) {
+                       break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#138: FILE: fs/proc/base.c:674:
+               if (this_len <= 0) {
+                       break;
+               }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: fs/proc/base.c:675:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: fs/proc/base.c:675:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: fs/proc/base.c:676:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: fs/proc/base.c:676:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: fs/proc/base.c:678:
+               if (this_len > max_len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: fs/proc/base.c:678:
+               if (this_len > max_len)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#142: FILE: fs/proc/base.c:678:
+               if (this_len > max_len)
+                       this_len = max_len;

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: fs/proc/base.c:679:
+                       this_len = max_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: fs/proc/base.c:679:
+                       this_len = max_len;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: fs/proc/base.c:681:
+               retval = access_process_vm(task, (mm->env_start + src), $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: fs/proc/base.c:681:
+               retval = access_process_vm(task, (mm->env_start + src), $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: fs/proc/base.c:681:
+               retval = access_process_vm(task, (mm->env_start + src), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: fs/proc/base.c:682:
+               retval = access_process_vm(task, (mm->env_start + src), 
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: fs/proc/base.c:683:
+               if (!ptrace_may_attach(task)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: fs/proc/base.c:683:
+               if (!ptrace_may_attach(task)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#148: FILE: fs/proc/base.c:683:
+               if (!ptrace_may_attach(task)) {
+                       ret = -ESRCH;

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: fs/proc/base.c:684:
+                       ret = -ESRCH;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: fs/proc/base.c:684:
+                       ret = -ESRCH;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: fs/proc/base.c:685:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: fs/proc/base.c:685:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: fs/proc/base.c:686:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: fs/proc/base.c:686:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: fs/proc/base.c:688:
+               if (retval <= 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: fs/proc/base.c:688:
+               if (retval <= 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#153: FILE: fs/proc/base.c:688:
+               if (retval <= 0) {
+                       ret = retval;

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: fs/proc/base.c:689:
+                       ret = retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: fs/proc/base.c:689:
+                       ret = retval;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: fs/proc/base.c:690:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: fs/proc/base.c:690:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: fs/proc/base.c:691:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: fs/proc/base.c:691:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: fs/proc/base.c:693:
+               if (copy_to_user(buf, page, retval)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: fs/proc/base.c:693:
+               if (copy_to_user(buf, page, retval)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#158: FILE: fs/proc/base.c:693:
+               if (copy_to_user(buf, page, retval)) {
+                       ret = -EFAULT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: fs/proc/base.c:694:
+                       ret = -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: fs/proc/base.c:694:
+                       ret = -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: fs/proc/base.c:695:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: fs/proc/base.c:695:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: fs/proc/base.c:696:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: fs/proc/base.c:696:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: fs/proc/base.c:698:
+               ret += retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: fs/proc/base.c:698:
+               ret += retval;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: fs/proc/base.c:699:
+               src += retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: fs/proc/base.c:699:
+               src += retval;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: fs/proc/base.c:700:
+               buf += retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: fs/proc/base.c:700:
+               buf += retval;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: fs/proc/base.c:701:
+               count -= retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: fs/proc/base.c:701:
+               count -= retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: fs/proc/base.c:702:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: fs/proc/base.c:703:
+       *ppos = src;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: fs/proc/base.c:705:
+       mmput(mm);$

CHECK:SPACING: No space is necessary after a cast
#172: FILE: fs/proc/base.c:707:
+       free_page((unsigned long) page);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: fs/proc/base.c:707:
+       free_page((unsigned long) page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: fs/proc/base.c:709:
+       put_task_struct(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: fs/proc/base.c:711:
+       return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: fs/proc/base.c:715:
+       .read           = environ_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: fs/proc/base.c:1896:
+       REG("environ",    S_IRUSR, environ),$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#191: FILE: fs/proc/base.c:1896:
+       REG("environ",    S_IRUSR, environ),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: fs/proc/base.c:2178:
+       REG("environ",   S_IRUSR, environ),$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#200: FILE: fs/proc/base.c:2178:
+       REG("environ",   S_IRUSR, environ),

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434542.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 33 errors, 68 warnings, 3 checks, 124 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434542.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
