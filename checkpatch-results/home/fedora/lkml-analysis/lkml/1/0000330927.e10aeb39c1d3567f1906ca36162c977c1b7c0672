WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: arch/x86/math-emu/errors.c:46:
+  if (FPU_CS == __USER_CS) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#80: FILE: arch/x86/math-emu/errors.c:46:
+  if (FPU_CS == __USER_CS) {
+      while (1) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: arch/x86/math-emu/errors.c:47:
+      while (1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#81: FILE: arch/x86/math-emu/errors.c:47:
+      while (1) {
 	  FPU_get_user(byte1, (u_char __user *) address);

WARNING:TABSTOP: Statements should start on a tabstop
#84: FILE: arch/x86/math-emu/errors.c:49:
+	  if ((byte1 & 0xf8) == 0xd8)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#84: FILE: arch/x86/math-emu/errors.c:49:
+	  if ((byte1 & 0xf8) == 0xd8)
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#85: FILE: arch/x86/math-emu/errors.c:50:
+	    break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: arch/x86/math-emu/errors.c:62:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#100: FILE: arch/x86/math-emu/errors.c:62:
+  else {
       printk("cs selector = %04x\n", FPU_CS);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#100: FILE: arch/x86/math-emu/errors.c:62:
+  else {
       printk("cs selector = %04x\n", FPU_CS);
     }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#100: FILE: arch/x86/math-emu/errors.c:62:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: arch/x86/math-emu/errors.c:80:
+  math_abort(FPU_info, SIGILL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: arch/x86/math-emu/errors.c:96:
+  if (FPU_CS == __USER_CS) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#131: FILE: arch/x86/math-emu/errors.c:96:
+  if (FPU_CS == __USER_CS) {
[...]
+      for (i = 0; i < MAX_PRINTED_BYTES; i++) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#131: FILE: arch/x86/math-emu/errors.c:96:
+  if (FPU_CS == __USER_CS) {
[...]
 	  if (FPU_modrm >= 0300)
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: arch/x86/math-emu/errors.c:98:
+      for (i = 0; i < MAX_PRINTED_BYTES; i++) {$

WARNING:TABSTOP: Statements should start on a tabstop
#139: FILE: arch/x86/math-emu/errors.c:100:
+	  if ((byte1 & 0xf8) == 0xd8) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#139: FILE: arch/x86/math-emu/errors.c:100:
+	  if ((byte1 & 0xf8) == 0xd8) {
 	      printk(" %02x", byte1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: arch/x86/math-emu/errors.c:107:
+      if (i == MAX_PRINTED_BYTES)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#147: FILE: arch/x86/math-emu/errors.c:107:
+      if (i == MAX_PRINTED_BYTES)
[...]
-      else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: arch/x86/math-emu/errors.c:109:
+      else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#151: FILE: arch/x86/math-emu/errors.c:109:
+      else {
 	  FPU_get_user(FPU_modrm, 1 + (u_char __user *) address);

CHECK:BRACES: Unbalanced braces around else statement
#151: FILE: arch/x86/math-emu/errors.c:109:
+      else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#155: FILE: arch/x86/math-emu/errors.c:112:
 	  if (FPU_modrm >= 0300)
+	    printk(" %02x (%02x+%d)\n", FPU_modrm, FPU_modrm & 0xf8,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#157: FILE: arch/x86/math-emu/errors.c:113:
+	    printk(" %02x (%02x+%d)\n", FPU_modrm, FPU_modrm & 0xf8,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: arch/x86/math-emu/errors.c:114:
+	    printk(" %02x (%02x+%d)\n", FPU_modrm, FPU_modrm & 0xf8,
+			FPU_modrm & 7);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#185: FILE: arch/x86/math-emu/errors.c:126:
+if (partial_status & SW_Backward)
+  printk("SW: backward compatibility\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: arch/x86/math-emu/errors.c:127:
+  printk("SW: backward compatibility\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#186: FILE: arch/x86/math-emu/errors.c:127:
+  printk("SW: backward compatibility\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#187: FILE: arch/x86/math-emu/errors.c:128:
+if (partial_status & SW_C3)
+  printk("SW: condition bit 3\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: arch/x86/math-emu/errors.c:129:
+  printk("SW: condition bit 3\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#188: FILE: arch/x86/math-emu/errors.c:129:
+  printk("SW: condition bit 3\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#189: FILE: arch/x86/math-emu/errors.c:130:
+if (partial_status & SW_C2)
+  printk("SW: condition bit 2\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: arch/x86/math-emu/errors.c:131:
+  printk("SW: condition bit 2\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#190: FILE: arch/x86/math-emu/errors.c:131:
+  printk("SW: condition bit 2\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#191: FILE: arch/x86/math-emu/errors.c:132:
+if (partial_status & SW_C1)
+  printk("SW: condition bit 1\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: arch/x86/math-emu/errors.c:133:
+  printk("SW: condition bit 1\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#192: FILE: arch/x86/math-emu/errors.c:133:
+  printk("SW: condition bit 1\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#193: FILE: arch/x86/math-emu/errors.c:134:
+if (partial_status & SW_C0)
+  printk("SW: condition bit 0\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: arch/x86/math-emu/errors.c:135:
+  printk("SW: condition bit 0\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#194: FILE: arch/x86/math-emu/errors.c:135:
+  printk("SW: condition bit 0\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#195: FILE: arch/x86/math-emu/errors.c:136:
+if (partial_status & SW_Summary)
+  printk("SW: exception summary\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: arch/x86/math-emu/errors.c:137:
+  printk("SW: exception summary\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#196: FILE: arch/x86/math-emu/errors.c:137:
+  printk("SW: exception summary\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#197: FILE: arch/x86/math-emu/errors.c:138:
+if (partial_status & SW_Stack_Fault)
+  printk("SW: stack fault\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: arch/x86/math-emu/errors.c:139:
+  printk("SW: stack fault\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#198: FILE: arch/x86/math-emu/errors.c:139:
+  printk("SW: stack fault\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#199: FILE: arch/x86/math-emu/errors.c:140:
+if (partial_status & SW_Precision)
+  printk("SW: loss of precision\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: arch/x86/math-emu/errors.c:141:
+  printk("SW: loss of precision\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#200: FILE: arch/x86/math-emu/errors.c:141:
+  printk("SW: loss of precision\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#201: FILE: arch/x86/math-emu/errors.c:142:
+if (partial_status & SW_Underflow)
+  printk("SW: underflow\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: arch/x86/math-emu/errors.c:143:
+  printk("SW: underflow\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#202: FILE: arch/x86/math-emu/errors.c:143:
+  printk("SW: underflow\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#203: FILE: arch/x86/math-emu/errors.c:144:
+if (partial_status & SW_Overflow)
+  printk("SW: overflow\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: arch/x86/math-emu/errors.c:145:
+  printk("SW: overflow\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#204: FILE: arch/x86/math-emu/errors.c:145:
+  printk("SW: overflow\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#205: FILE: arch/x86/math-emu/errors.c:146:
+if (partial_status & SW_Zero_Div)
+  printk("SW: divide by zero\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: arch/x86/math-emu/errors.c:147:
+  printk("SW: divide by zero\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#206: FILE: arch/x86/math-emu/errors.c:147:
+  printk("SW: divide by zero\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#207: FILE: arch/x86/math-emu/errors.c:148:
+if (partial_status & SW_Denorm_Op)
+  printk("SW: denormalized operand\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: arch/x86/math-emu/errors.c:149:
+  printk("SW: denormalized operand\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#208: FILE: arch/x86/math-emu/errors.c:149:
+  printk("SW: denormalized operand\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#209: FILE: arch/x86/math-emu/errors.c:150:
+if (partial_status & SW_Invalid)
+  printk("SW: invalid operation\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: arch/x86/math-emu/errors.c:151:
+  printk("SW: invalid operation\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#210: FILE: arch/x86/math-emu/errors.c:151:
+  printk("SW: invalid operation\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: arch/x86/math-emu/errors.c:174:
+  for (i = 0; i < 8; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#229: FILE: arch/x86/math-emu/errors.c:174:
+  for (i = 0; i < 8; i++) {
       FPU_REG *r = &st(i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: arch/x86/math-emu/errors.c:305:
+  if (n & EX_INTERNAL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#395: FILE: arch/x86/math-emu/errors.c:305:
+  if (n & EX_INTERNAL) {
       int_type = n - EX_INTERNAL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: arch/x86/math-emu/errors.c:311:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#403: FILE: arch/x86/math-emu/errors.c:311:
+  else {
[...]
       n &= (SW_Exc_Mask);

CHECK:BRACES: Unbalanced braces around else statement
#403: FILE: arch/x86/math-emu/errors.c:311:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: arch/x86/math-emu/errors.c:317:
+      if (partial_status & ~control_word & CW_Exceptions)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: arch/x86/math-emu/errors.c:319:
+      if (n & (SW_Stack_Fault | EX_Precision)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#415: FILE: arch/x86/math-emu/errors.c:319:
+      if (n & (SW_Stack_Fault | EX_Precision)) {
+	  if (!(n & SW_C1))

WARNING:TABSTOP: Statements should start on a tabstop
#416: FILE: arch/x86/math-emu/errors.c:320:
+	  if (!(n & SW_C1))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#416: FILE: arch/x86/math-emu/errors.c:320:
+	  if (!(n & SW_C1))
[...]
 	    partial_status &= ~SW_C1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: arch/x86/math-emu/errors.c:328:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#426: FILE: arch/x86/math-emu/errors.c:328:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL)) {
[...]
       printk(FPU_VERSION" "__DATE__" (C) W. Metzenthen.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n == EX_INTERNAL'
#426: FILE: arch/x86/math-emu/errors.c:328:
+  if ((~control_word & n & CW_Exceptions) || (n == EX_INTERNAL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: arch/x86/math-emu/errors.c:335:
+      for (i = 0; exception_names[i].type; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#437: FILE: arch/x86/math-emu/errors.c:336:
+	if ((exception_names[i].type & n) == exception_names[i].type)
 	  break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: arch/x86/math-emu/errors.c:339:
+      if (exception_names[i].type) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#443: FILE: arch/x86/math-emu/errors.c:339:
+      if (exception_names[i].type) {
[...]
 	  printk("FP Exception: %s!\n", exception_names[i].name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#443: FILE: arch/x86/math-emu/errors.c:339:
+      if (exception_names[i].type) {
[...]
       else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: arch/x86/math-emu/errors.c:347:
+      if (n == EX_INTERNAL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#454: FILE: arch/x86/math-emu/errors.c:347:
+      if (n == EX_INTERNAL) {
 	  printk("FPU emulator: Internal error type 0x%04x\n", int_type);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: arch/x86/math-emu/errors.c:365:
+  math_abort(FPU_info, SIGFPE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: arch/x86/math-emu/errors.c:383:
+  if (!signalling) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 14)
#477: FILE: arch/x86/math-emu/errors.c:383:
+  if (!signalling) {
+	      if (!isNaN) {

WARNING:TABSTOP: Statements should start on a tabstop
#478: FILE: arch/x86/math-emu/errors.c:384:
+	      if (!isNaN) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 10)
#478: FILE: arch/x86/math-emu/errors.c:384:
+	      if (!isNaN) {
[...]
+	  if (control_word & CW_Invalid) {

CHECK:CAMELCASE: Avoid CamelCase: <isNaN>
#478: FILE: arch/x86/math-emu/errors.c:384:
+	      if (!isNaN) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TABSTOP: Statements should start on a tabstop
#480: FILE: arch/x86/math-emu/errors.c:386:
+	  if (control_word & CW_Invalid) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#480: FILE: arch/x86/math-emu/errors.c:386:
+	  if (control_word & CW_Invalid) {
[...]
 	      reg_copy(&CONST_QNaN, a);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: arch/x86/math-emu/errors.c:396:
+  if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#490: FILE: arch/x86/math-emu/errors.c:396:
+  if (control_word & CW_Invalid) {
[...]
+      if (!(a->sigh & 0x80000000)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: arch/x86/math-emu/errors.c:398:
+      if (!(a->sigh & 0x80000000)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#494: FILE: arch/x86/math-emu/errors.c:398:
+      if (!(a->sigh & 0x80000000)) {
[...]
 	  reg_copy(&CONST_QNaN, a);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: arch/x86/math-emu/errors.c:424:
+  if (taga == TAG_Special)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#504: FILE: arch/x86/math-emu/errors.c:424:
+  if (taga == TAG_Special)
     taga = FPU_Special(a);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: arch/x86/math-emu/errors.c:426:
+  if (tagb == TAG_Special)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#507: FILE: arch/x86/math-emu/errors.c:426:
+  if (tagb == TAG_Special)
     tagb = FPU_Special(b);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: arch/x86/math-emu/errors.c:434:
+  if (unsupported) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#519: FILE: arch/x86/math-emu/errors.c:434:
+  if (unsupported) {
+      if (control_word & CW_Invalid) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: arch/x86/math-emu/errors.c:435:
+      if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#520: FILE: arch/x86/math-emu/errors.c:435:
+      if (control_word & CW_Invalid) {
[...]
 	  FPU_copy_to_regi(&CONST_QNaN, TAG_Special, deststnr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: arch/x86/math-emu/errors.c:443:
+  if (taga == TW_NaN) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#530: FILE: arch/x86/math-emu/errors.c:443:
+  if (taga == TW_NaN) {
       x = a;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: arch/x86/math-emu/errors.c:445:
+      if (tagb == TW_NaN) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#534: FILE: arch/x86/math-emu/errors.c:445:
+      if (tagb == TW_NaN) {
 	  signalling = !(a->sigh & b->sigh & 0x40000000);

WARNING:TABSTOP: Statements should start on a tabstop
#537: FILE: arch/x86/math-emu/errors.c:447:
+	  if (significand(b) > significand(a))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#537: FILE: arch/x86/math-emu/errors.c:447:
+	  if (significand(b) > significand(a))
 	    x = b;

CHECK:BRACES: braces {} should be used on all arms of this statement
#537: FILE: arch/x86/math-emu/errors.c:447:
+	  if (significand(b) > significand(a))
[...]
-	  else if ( significand(b) == significand(a) )
[...]

WARNING:TABSTOP: Statements should start on a tabstop
#541: FILE: arch/x86/math-emu/errors.c:449:
+	  else if (significand(b) == significand(a)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#541: FILE: arch/x86/math-emu/errors.c:449:
+	  else if (significand(b) == significand(a)) {
[...]
 	      x = defaultNaN;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: arch/x86/math-emu/errors.c:455:
+      else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#549: FILE: arch/x86/math-emu/errors.c:455:
+      else {
[...]
 	  signalling = !(a->sigh & 0x40000000);

CHECK:BRACES: Unbalanced braces around else statement
#549: FILE: arch/x86/math-emu/errors.c:455:
+      else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: arch/x86/math-emu/errors.c:469:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#559: FILE: arch/x86/math-emu/errors.c:469:
+  else {
       signalling = 0;

CHECK:BRACES: Unbalanced braces around else statement
#559: FILE: arch/x86/math-emu/errors.c:469:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: arch/x86/math-emu/errors.c:476:
+  if ((!signalling) || (control_word & CW_Invalid)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#569: FILE: arch/x86/math-emu/errors.c:476:
+  if ((!signalling) || (control_word & CW_Invalid)) {
+      if (!x)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!signalling'
#569: FILE: arch/x86/math-emu/errors.c:476:
+  if ((!signalling) || (control_word & CW_Invalid)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: arch/x86/math-emu/errors.c:477:
+      if (!x)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: arch/x86/math-emu/errors.c:480:
+      if (!(x->sigh & 0x80000000))  /* pseudo-NaN ? */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: arch/x86/math-emu/errors.c:485:
+      if (!signalling)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: arch/x86/math-emu/errors.c:505:
+  if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#592: FILE: arch/x86/math-emu/errors.c:505:
+  if (control_word & CW_Invalid) {
[...]
       FPU_copy_to_regi(&CONST_QNaN, TAG_Special, deststnr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: arch/x86/math-emu/errors.c:521:
+  if (control_word & CW_ZeroDiv) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#607: FILE: arch/x86/math-emu/errors.c:521:
+  if (control_word & CW_ZeroDiv) {
[...]
       FPU_copy_to_regi(&CONST_INF, TAG_Special, deststnr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: arch/x86/math-emu/errors.c:538:
+  if (control_word & CW_Precision) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#624: FILE: arch/x86/math-emu/errors.c:538:
+  if (control_word & CW_Precision) {
       partial_status &= ~(SW_C1 & flags);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: arch/x86/math-emu/errors.c:543:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#631: FILE: arch/x86/math-emu/errors.c:543:
+  else {
       EXCEPTION(flags);

CHECK:BRACES: Unbalanced braces around else statement
#631: FILE: arch/x86/math-emu/errors.c:543:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: arch/x86/math-emu/errors.c:553:
+  if (control_word & CW_Precision)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#640: FILE: arch/x86/math-emu/errors.c:553:
+  if (control_word & CW_Precision)
     partial_status |= (SW_Precision | SW_C1);   /* The masked response */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: arch/x86/math-emu/errors.c:563:
+  if (control_word & CW_Precision) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#650: FILE: arch/x86/math-emu/errors.c:563:
+  if (control_word & CW_Precision) {
[...]
       partial_status &= ~SW_C1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: arch/x86/math-emu/errors.c:575:
+  if (control_word & CW_Denormal) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#664: FILE: arch/x86/math-emu/errors.c:575:
+  if (control_word & CW_Denormal) {
[...]
       partial_status |= SW_Denorm_Op;

WARNING:TABSTOP: Statements should start on a tabstop
#671: FILE: arch/x86/math-emu/errors.c:580:
+	  else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 6)
#671: FILE: arch/x86/math-emu/errors.c:580:
+	  else {
       EXCEPTION(EX_Denormal);

CHECK:BRACES: Unbalanced braces around else statement
#671: FILE: arch/x86/math-emu/errors.c:580:
+	  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: arch/x86/math-emu/errors.c:591:
+  if (control_word & CW_Overflow) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#681: FILE: arch/x86/math-emu/errors.c:591:
+  if (control_word & CW_Overflow) {
[...]
       reg_copy(&CONST_INF, dest);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#689: FILE: arch/x86/math-emu/errors.c:597:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#689: FILE: arch/x86/math-emu/errors.c:597:
+  else {
[...]
       addexponent(dest, (-3 * (1 << 13)));

CHECK:BRACES: Unbalanced braces around else statement
#689: FILE: arch/x86/math-emu/errors.c:597:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#697: FILE: arch/x86/math-emu/errors.c:603:
+  if (control_word & CW_Overflow) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: arch/x86/math-emu/errors.c:621:
+  if (control_word & CW_Underflow) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#707: FILE: arch/x86/math-emu/errors.c:621:
+  if (control_word & CW_Underflow) {
[...]
+      if (exponent16(dest) <= EXP_UNDER - 63) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: arch/x86/math-emu/errors.c:623:
+      if (exponent16(dest) <= EXP_UNDER - 63) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#711: FILE: arch/x86/math-emu/errors.c:623:
+      if (exponent16(dest) <= EXP_UNDER - 63) {
 	  reg_copy(&CONST_Z, dest);

CHECK:BRACES: braces {} should be used on all arms of this statement
#711: FILE: arch/x86/math-emu/errors.c:623:
+      if (exponent16(dest) <= EXP_UNDER - 63) {
[...]
       else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: arch/x86/math-emu/errors.c:631:
+  else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#723: FILE: arch/x86/math-emu/errors.c:631:
+  else {
[...]
       addexponent(dest, (3 * (1 << 13)) + EXTENDED_Ebias);

CHECK:BRACES: Unbalanced braces around else statement
#723: FILE: arch/x86/math-emu/errors.c:631:
+  else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: arch/x86/math-emu/errors.c:637:
+  if (control_word & CW_Underflow) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#731: FILE: arch/x86/math-emu/errors.c:637:
+  if (control_word & CW_Underflow) {
[...]
       EXCEPTION(EX_Precision);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#736: FILE: arch/x86/math-emu/errors.c:641:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: arch/x86/math-emu/errors.c:651:
+ if (control_word & CW_Invalid) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#753: FILE: arch/x86/math-emu/errors.c:655:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: arch/x86/math-emu/errors.c:667:
+ if (control_word & CW_Invalid) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: arch/x86/math-emu/errors.c:670:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: arch/x86/math-emu/errors.c:682:
+ if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#779: FILE: arch/x86/math-emu/errors.c:682:
+ if (control_word & CW_Invalid) {
[...]
       FPU_copy_to_regi(&CONST_QNaN, TAG_Special, i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: arch/x86/math-emu/errors.c:685:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: arch/x86/math-emu/errors.c:697:
+ if (control_word & CW_Invalid) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 6)
#793: FILE: arch/x86/math-emu/errors.c:697:
+ if (control_word & CW_Invalid) {
[...]
       FPU_copy_to_regi(&CONST_QNaN, TAG_Special, i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: arch/x86/math-emu/errors.c:701:
+ }$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330927.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 155 warnings, 18 checks, 703 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330927.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
