WARNING:TYPO_SPELLING: 'progam' may be misspelled - perhaps 'program'?
#49: 
After patch, statistics perf show is following. Test progam is attached.
                                                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# Samples: 1331231315119

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# Overhead          Command             Shared Object  Symbol

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# ........  ...............  ........................  ......

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#90: 
sharing when it causes page fault in parallel. (Run after fork() is a typical

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: mm/mmap.c:193:
+	struct vm_area_struct *vma;
+	vma = container_of(head, struct vm_area_struct, rcuhead);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#281: FILE: mm/mmap.c:196:
+}
+/* Call this if vma was linked to rb-tree */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#286: FILE: mm/mmap.c:201:
+}
+/* called when vma is unlinked and wait for all racy access.*/

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#348: FILE: mm/mmap.c:1581:
+		return NULL;;

CHECK:BRACES: braces {} should be used on all arms of this statement
#356: FILE: mm/mmap.c:1589:
+		if (vma_tmp->vm_end > addr) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#361: FILE: mm/mmap.c:1594:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start <= addr'
#365: FILE: mm/mmap.c:1598:
+		if ((vma->vm_start <= addr) && (addr < vma->vm_end)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < vma->vm_end'
#365: FILE: mm/mmap.c:1598:
+		if ((vma->vm_start <= addr) && (addr < vma->vm_end)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#365: FILE: mm/mmap.c:1598:
+		if ((vma->vm_start <= addr) && (addr < vma->vm_end)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#368: FILE: mm/mmap.c:1601:
+		} else

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#378: FILE: mm/mmap.c:1611:
+	    waitqueue_active(&vma->wait_queue))

WARNING:RETURN_VOID: void function return statements are not generally useful
#381: FILE: mm/mmap.c:1614:
+	return;
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#422: FILE: include/linux/mm.h:1248:
+extern struct vm_area_struct *find_vma_speculative(struct mm_struct *mm,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: include/linux/mm.h:1249:
+extern struct vm_area_struct *find_vma_speculative(struct mm_struct *mm,
+	unsigned long addr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000030268.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 10 checks, 284 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000030268.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
