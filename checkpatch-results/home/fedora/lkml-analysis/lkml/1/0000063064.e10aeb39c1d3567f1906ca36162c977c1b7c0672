WARNING:REPEATED_WORD: Possible repeated word: 'the'
#56: 
are referring the the currently executing processor. In many cases we must

WARNING:TYPO_SPELLING: 'abitrary' may be misspelled - perhaps 'arbitrary'?
#69: 
abitrary scalars that are members of structures allocated with the new
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#110: 
per cpu operations. These atomic operations must provide both the relocation

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: include/linux/percpu.h:251:
+extern void __bad_size_call_parameter(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'variable' - possible side-effects?
#150: FILE: include/linux/percpu.h:253:
+#define __size_call_return(stem, variable)				\
+({	typeof(variable) ret__;						\
+	switch(sizeof(variable)) {					\
+	case 1: ret__ = stem##1(variable);break;			\
+	case 2: ret__ = stem##2(variable);break;			\
+	case 4: ret__ = stem##4(variable);break;			\
+	case 8: ret__ = stem##8(variable);break;			\
+	default:							\
+		__bad_size_call_parameter();break;			\
+	}								\
+	ret__;								\
+})

ERROR:SPACING: space required before the open parenthesis '('
#152: FILE: include/linux/percpu.h:255:
+	switch(sizeof(variable)) {					\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#153: FILE: include/linux/percpu.h:256:
+	case 1: ret__ = stem##1(variable);break;			\
 	                                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#153: FILE: include/linux/percpu.h:256:
+	case 1: ret__ = stem##1(variable);break;			\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ';' (ctx:VxV)
#154: FILE: include/linux/percpu.h:257:
+	case 2: ret__ = stem##2(variable);break;			\
 	                                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#154: FILE: include/linux/percpu.h:257:
+	case 2: ret__ = stem##2(variable);break;			\

ERROR:SPACING: space required after that ';' (ctx:VxV)
#155: FILE: include/linux/percpu.h:258:
+	case 4: ret__ = stem##4(variable);break;			\
 	                                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#155: FILE: include/linux/percpu.h:258:
+	case 4: ret__ = stem##4(variable);break;			\

ERROR:SPACING: space required after that ';' (ctx:VxV)
#156: FILE: include/linux/percpu.h:259:
+	case 8: ret__ = stem##8(variable);break;			\
 	                                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#156: FILE: include/linux/percpu.h:259:
+	case 8: ret__ = stem##8(variable);break;			\

ERROR:SPACING: space required after that ';' (ctx:VxV)
#158: FILE: include/linux/percpu.h:261:
+		__bad_size_call_parameter();break;			\
 		                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'variable' - possible side-effects?
#163: FILE: include/linux/percpu.h:266:
+#define __size_call(stem, variable, ...)				\
+do {									\
+	switch(sizeof(variable)) {					\
+		case 1: stem##1(variable, __VA_ARGS__);break;		\
+		case 2: stem##2(variable, __VA_ARGS__);break;		\
+		case 4: stem##4(variable, __VA_ARGS__);break;		\
+		case 8: stem##8(variable, __VA_ARGS__);break;		\
+		default: 						\
+			__bad_size_call_parameter();break;		\
+	}								\
+} while (0)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#165: FILE: include/linux/percpu.h:268:
+	switch(sizeof(variable)) {					\
+		case 1: stem##1(variable, __VA_ARGS__);break;		\
+		case 2: stem##2(variable, __VA_ARGS__);break;		\
+		case 4: stem##4(variable, __VA_ARGS__);break;		\
+		case 8: stem##8(variable, __VA_ARGS__);break;		\
+		default: 						\

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#165: FILE: include/linux/percpu.h:268:
+	switch(sizeof(variable)) {					\

ERROR:SPACING: space required after that ';' (ctx:VxV)
#166: FILE: include/linux/percpu.h:269:
+		case 1: stem##1(variable, __VA_ARGS__);break;		\
 		                                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#166: FILE: include/linux/percpu.h:269:
+		case 1: stem##1(variable, __VA_ARGS__);break;		\

ERROR:SPACING: space required after that ';' (ctx:VxV)
#167: FILE: include/linux/percpu.h:270:
+		case 2: stem##2(variable, __VA_ARGS__);break;		\
 		                                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#167: FILE: include/linux/percpu.h:270:
+		case 2: stem##2(variable, __VA_ARGS__);break;		\

ERROR:SPACING: space required after that ';' (ctx:VxV)
#168: FILE: include/linux/percpu.h:271:
+		case 4: stem##4(variable, __VA_ARGS__);break;		\
 		                                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#168: FILE: include/linux/percpu.h:271:
+		case 4: stem##4(variable, __VA_ARGS__);break;		\

ERROR:SPACING: space required after that ';' (ctx:VxV)
#169: FILE: include/linux/percpu.h:272:
+		case 8: stem##8(variable, __VA_ARGS__);break;		\
 		                                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#169: FILE: include/linux/percpu.h:272:
+		case 8: stem##8(variable, __VA_ARGS__);break;		\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#170: FILE: include/linux/percpu.h:273:
+^I^Idefault: ^I^I^I^I^I^I\$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#171: FILE: include/linux/percpu.h:274:
+			__bad_size_call_parameter();break;		\
 			                           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pcp' may be better as '(pcp)' to avoid precedence issues
#226: FILE: include/linux/percpu.h:329:
+#define _this_cpu_generic_to_op(pcp, val, op)				\
+do {									\
+	preempt_disable();						\
+	*__this_cpu_ptr(&pcp) op val;					\
+	preempt_enable();						\
+} while (0)

WARNING:TYPO_SPELLING: 'interupts' may be misspelled - perhaps 'interrupts'?
#334: FILE: include/linux/percpu.h:437:
+ * disabling interupts then one of these RMW operations can show unexpected
              ^^^^^^^^^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#355: FILE: include/linux/percpu.h:458:
+#define __this_cpu_generic_to_op(pcp, val, op)				\
+do {									\
+	*__this_cpu_ptr(&(pcp)) op val;					\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000063064.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 6 warnings, 4 checks, 421 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000063064.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
