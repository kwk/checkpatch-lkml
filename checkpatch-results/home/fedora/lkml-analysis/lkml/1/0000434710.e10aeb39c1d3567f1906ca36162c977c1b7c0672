WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#47: FILE: arch/arm/mach-ixp4xx/Kconfig:185:
+config IXP4XX_NPE
+	tristate "IXP4xx Network Processor Engine support"
+	select HOTPLUG
+	select FW_LOADER
+	help
+	  This driver supports IXP4xx built-in network coprocessors
+	  and is automatically selected by Ethernet and HSS drivers.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#68: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/delay.h> instead of <asm/delay.h>
#94: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:22:
+#include <asm/delay.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#95: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:23:
+#include <asm/io.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#195: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:123:
+	printk(pri "%s: " fmt, npe_name(npe), ## __VA_ARGS__)

ERROR:SPACING: space required after that close brace '}'
#206: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:134:
+}ecs_reset[] = {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#255: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:183:
+	/* Iintroduce extra read cycles after issuing read command to NPE
+	   so that we read the register after the NPE has updated it.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#256: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:184:
+	   This is to overcome race condition between XScale and NPE */

WARNING:LINE_SPACING: Missing a blank line after declarations
#265: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:193:
+	u32 val = npe_cmd_read(npe, reg, CMD_RD_ECS_REG);
+	npe_cmd_write(npe, reg, CMD_WR_ECS_REG, val & ~ECS_REG_0_ACTIVE);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#296: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:224:
+	/* set CCTXT at ECS DEBUG L3 to specify in which context to execute
+	   the instruction, and set SELCTXT at ECS DEBUG Level to specify

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#311: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:239:
+	/* we need this value later to wait for completion of NPE execution
+	   step */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#311: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:239:
+	   step */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'npe_debug_instr', this function's name, in a string
#324: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:252:
+	print_npe(KERN_ERR, npe, "reset: npe_debug_instr(): timeout\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#375: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:303:
+	/* ensure that IF and IE are on (temporarily), so that we don't end up
+	   stepping forever */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#375: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:303:
+	   stepping forever */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'npe_reset', this function's name, in a string
#385: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:313:
+		print_npe(KERN_DEBUG, npe, "npe_reset: read FIFO = 0x%X\n",

WARNING:TYPO_SPELLING: 'intruction' may be misspelled - perhaps 'instruction'?
#389: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:317:
+		/* step execution of the NPE intruction to read inFIFO using
 		                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#390: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:318:
+		/* step execution of the NPE intruction to read inFIFO using
+		   the Debug Executing Context stack */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#390: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:318:
+		   the Debug Executing Context stack */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#412: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:340:
+	/* Context 0 has no STARTPC. Instead, this value is used to set NextPC
+	   for Background ECS, to set where NPE starts executing code */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#412: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:340:
+	   for Background ECS, to set where NPE starts executing code */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#486: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:414:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#542: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:470:
+	switch(cnt) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#565: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:493:
+	if ((result = npe_send_message(npe, msg, what)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#567: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:495:
+	if ((result = npe_recv_message(npe, recv, what)) != 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'recv[0] != send[0]'
#570: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:498:
+	if ((recv[0] != send[0]) || (recv[1] != send[1])) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'recv[1] != send[1]'
#570: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:498:
+	if ((recv[0] != send[0]) || (recv[1] != send[1])) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#578: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:506:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#607: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:535:
+	if ((err = request_firmware(&fw_entry, name, dev)) != 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#615: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:543:
+	image = (struct dl_image*)fw_entry->data;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#645: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:573:
+		print_npe(KERN_INFO, npe, "IXP46x firmware ignored on "
+			  "IXP42x\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#651: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:579:
+		print_npe(KERN_INFO, npe, "unable to load firmware, NPE is "
+			  "already running\n");

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#655: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:583:
+#if 0

WARNING:SPLIT_STRING: quoted string split across lines
#661: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:589:
+	print_npe(KERN_INFO, npe, "firmware functionality 0x%X, "
+		  "revision 0x%X:%X\n", (image->id >> 16) & 0xFF,

WARNING:SPLIT_STRING: quoted string split across lines
#681: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:609:
+		print_npe(KERN_INFO, npe, "firmware EOF block marker not "
+			  "found\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#692: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:620:
+		if (blk->offset > image->size - sizeof(struct dl_codeblock) / 4
+		    || blk->offset < table_end) {

WARNING:SPLIT_STRING: quoted string split across lines
#694: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:622:
+			print_npe(KERN_INFO, npe, "invalid offset 0x%X of "
+				  "firmware block #%i\n", blk->offset, i);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#698: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:626:
+		cb = (struct dl_codeblock*)&image->data[blk->offset];

WARNING:SPLIT_STRING: quoted string split across lines
#709: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:637:
+			print_npe(KERN_INFO, npe, "invalid firmware block #%i "
+				  "type 0x%X\n", i, blk->type);

WARNING:SPLIT_STRING: quoted string split across lines
#714: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:642:
+			print_npe(KERN_INFO, npe, "firmware block #%i doesn't "
+				  "fit in firmware image: type %c, start 0x%X,"

WARNING:SPLIT_STRING: quoted string split across lines
#715: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:643:
+				  "fit in firmware image: type %c, start 0x%X,"
+				  " length 0x%X\n", i,

WARNING:SPLIT_STRING: quoted string split across lines
#733: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:661:
+	print_npe(KERN_INFO, npe, "firmware block #%i doesn't fit in NPE "
+		  "memory: type %c, start 0x%X, length 0x%X\n", i,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#741: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:669:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#756: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:684:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#759: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:687:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#764: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:692:
+		struct npe *npe = &npe_tab[i];
+		if (!(ixp4xx_read_fuses() & (IXP4XX_FUSE_RESET_NPEA << i)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#766: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:694:
+		if (!(npe->mem_res = request_mem_region(npe->regs_phys,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#781: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:709:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#802: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:730:
+EXPORT_SYMBOL(npe_names);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#803: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:731:
+EXPORT_SYMBOL(npe_running);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#804: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:732:
+EXPORT_SYMBOL(npe_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#805: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:733:
+EXPORT_SYMBOL(npe_release);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#806: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:734:
+EXPORT_SYMBOL(npe_load_firmware);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#807: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:735:
+EXPORT_SYMBOL(npe_send_message);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#808: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:736:
+EXPORT_SYMBOL(npe_recv_message);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#809: FILE: arch/arm/mach-ixp4xx/ixp4xx_npe.c:737:
+EXPORT_SYMBOL(npe_send_recv_message);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#816: FILE: include/asm-arm/arch-ixp4xx/npe.h:1:
+#ifndef __IXP4XX_NPE_H

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#821: FILE: include/asm-arm/arch-ixp4xx/npe.h:6:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#842: FILE: include/asm-arm/arch-ixp4xx/npe.h:27:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434710.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 41 warnings, 11 checks, 796 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434710.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
