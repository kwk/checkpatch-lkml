WARNING:TYPO_SPELLING: 'severly' may be misspelled - perhaps 'severely'?
#64: 
filesystem getting severly damaged, this patch adds a facility for
                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#102: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: fs/ext4/block_validity.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#108: FILE: fs/ext4/block_validity.c:2:
+ *  linux/fs/ext4/block_validity.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ext4_system_zone_cachep"
#142: FILE: fs/ext4/block_validity.c:36:
+	if (ext4_system_zone_cachep == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: fs/ext4/block_validity.c:47:
+static inline int can_merge(struct ext4_system_zone *entry1,
+		     struct ext4_system_zone *entry2)

CHECK:BRACES: braces {} should be used on all arms of this statement
#176: FILE: fs/ext4/block_validity.c:70:
+		if (start_blk < entry->start_blk)
[...]
+		else if (start_blk >= (entry->start_blk + entry->count))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#180: FILE: fs/ext4/block_validity.c:74:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: fs/ext4/block_validity.c:75:
+^I^I^Iif (start_blk + count > (entry->start_blk + $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: fs/ext4/block_validity.c:77:
+^I^I^I^Ientry->count = (start_blk + count - $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#236: FILE: fs/ext4/block_validity.c:130:
+	printk(KERN_INFO "System zones: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#240: FILE: fs/ext4/block_validity.c:134:
+		printk("%s%llu-%llu", first ? "" : ", ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#245: FILE: fs/ext4/block_validity.c:139:
+	printk("\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#265: FILE: fs/ext4/block_validity.c:159:
+	for (i=0; i < ngroups; i++) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i < 5'
#266: FILE: fs/ext4/block_validity.c:160:
+		if (ext4_bg_has_super(sb, i) &&
+		    ((i < 5) || ((i % flex_size) == 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: fs/ext4/block_validity.c:172:
+		ret = add_system_zone(sbi, ext4_inode_table(sb, gdp),
+				sbi->s_itb_per_group);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start_blk <= le32_to_cpu(sbi->s_es->s_first_data_block)'
#336: FILE: fs/ext4/block_validity.c:230:
+	if ((start_blk <= le32_to_cpu(sbi->s_es->s_first_data_block)) ||
+	    (start_blk + count > ext4_blocks_count(sbi->s_es)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#376: FILE: fs/ext4/ext4.h:1624:
+extern void ext4_release_system_zone(struct super_block *sb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#377: FILE: fs/ext4/ext4.h:1625:
+extern int ext4_setup_system_zone(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#378: FILE: fs/ext4/ext4.h:1626:
+extern int __init init_ext4_system_zone(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#379: FILE: fs/ext4/ext4.h:1627:
+extern void exit_ext4_system_zone(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#380: FILE: fs/ext4/ext4.h:1628:
+extern int ext4_data_block_valid(struct ext4_sb_info *sbi,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: fs/ext4/inode.c:382:
+^I^Iif (blk && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#448: FILE: fs/ext4/inode.c:383:
+^I^I    unlikely(!ext4_data_block_valid(EXT4_SB(inode->i_sb), $

WARNING:SPLIT_STRING: quoted string split across lines
#456: FILE: fs/ext4/inode.c:387:
+				   "invalid block reference %u "
+				   "in inode #%lu", blk, inode->i_ino);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#473: FILE: fs/ext4/inode.c:1135:
+			   "inode #%lu logical block %llu mapped to %llu "
+			   "(size %d)", inode->i_ino,

CHECK:SPACING: No space is necessary after a cast
#474: FILE: fs/ext4/inode.c:1136:
+			   (unsigned long long) logical,

CHECK:SPACING: No space is necessary after a cast
#475: FILE: fs/ext4/inode.c:1137:
+			   (unsigned long long) phys, len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: fs/ext4/inode.c:1190:
+^I^Iint ret = check_block_validity(inode, block, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#504: FILE: fs/ext4/inode.c:1272:
+^I^Iint ret = check_block_validity(inode, block, $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#531: FILE: fs/ext4/mballoc.c:2967:
+			   "fs metadata\n", block, block+len);
 			                                ^

WARNING:SPLIT_STRING: quoted string split across lines
#531: FILE: fs/ext4/mballoc.c:2967:
+			   "Allocating blocks %llu-%llu which overlap "
+			   "fs metadata\n", block, block+len);

CHECK:CAMELCASE: Avoid CamelCase: <Opt_block_validity>
#551: FILE: fs/ext4/super.c:1059:
+	Opt_block_validity, Opt_noblock_validity,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noblock_validity>
#551: FILE: fs/ext4/super.c:1059:
+	Opt_block_validity, Opt_noblock_validity,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#583: FILE: fs/ext4/super.c:2841:
+		printk(KERN_ERR "EXT4-fs: failed to initialize system "

WARNING:SPLIT_STRING: quoted string split across lines
#584: FILE: fs/ext4/super.c:2842:
+		printk(KERN_ERR "EXT4-fs: failed to initialize system "
+		       "zone (%d)\n", err);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113791.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 12 warnings, 17 checks, 510 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113791.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
