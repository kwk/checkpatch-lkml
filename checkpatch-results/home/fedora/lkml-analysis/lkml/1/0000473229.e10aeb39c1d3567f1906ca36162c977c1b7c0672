CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/akt.h:230:
+extern ssize_t show_tunable_min(struct auto_tune *, char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#86: FILE: include/linux/akt.h:230:
+extern ssize_t show_tunable_min(struct auto_tune *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#86: FILE: include/linux/akt.h:230:
+extern ssize_t show_tunable_min(struct auto_tune *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/linux/akt.h:231:
+extern ssize_t store_tunable_min(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#87: FILE: include/linux/akt.h:231:
+extern ssize_t store_tunable_min(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#87: FILE: include/linux/akt.h:231:
+extern ssize_t store_tunable_min(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#87: FILE: include/linux/akt.h:231:
+extern ssize_t store_tunable_min(struct auto_tune *, const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/akt.h:232:
+extern ssize_t show_tunable_max(struct auto_tune *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#88: FILE: include/linux/akt.h:232:
+extern ssize_t show_tunable_max(struct auto_tune *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#88: FILE: include/linux/akt.h:232:
+extern ssize_t show_tunable_max(struct auto_tune *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/linux/akt.h:233:
+extern ssize_t store_tunable_max(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#89: FILE: include/linux/akt.h:233:
+extern ssize_t store_tunable_max(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#89: FILE: include/linux/akt.h:233:
+extern ssize_t store_tunable_max(struct auto_tune *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#89: FILE: include/linux/akt.h:233:
+extern ssize_t store_tunable_max(struct auto_tune *, const char *, size_t);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#113: FILE: kernel/autotune/akt.c:214:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun_addr"
#130: FILE: kernel/autotune/akt.c:231:
+	if (tun_addr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#131: FILE: kernel/autotune/akt.c:232:
+		printk(KERN_ERR "AKT: tunable address is invalid\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#144: FILE: kernel/autotune/akt.c:245:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: kernel/autotune/akt.c:259:
+ssize_t store_tunable_min(struct auto_tune *tun_addr, const char *buf,
+			size_t count)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#163: FILE: kernel/autotune/akt.c:264:
+	if (sscanf(buf, "%lu", &new_value) != 1)
+		return -EINVAL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun_addr"
#166: FILE: kernel/autotune/akt.c:267:
+	if (tun_addr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#167: FILE: kernel/autotune/akt.c:268:
+		printk(KERN_ERR "AKT: tunable address is invalid\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#173: FILE: kernel/autotune/akt.c:274:
+	if (new_value >= tun_addr->min.abs_value &&
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: kernel/autotune/akt.c:275:
+	if (new_value >= tun_addr->min.abs_value &&
+					new_value < tun_addr->max.value) {

CHECK:BRACES: Unbalanced braces around else statement
#177: FILE: kernel/autotune/akt.c:278:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#185: FILE: kernel/autotune/akt.c:286:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun_addr"
#202: FILE: kernel/autotune/akt.c:303:
+	if (tun_addr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#203: FILE: kernel/autotune/akt.c:304:
+		printk(KERN_ERR "AKT: tunable address is invalid\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#216: FILE: kernel/autotune/akt.c:317:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: kernel/autotune/akt.c:331:
+ssize_t store_tunable_max(struct auto_tune *tun_addr, const char *buf,
+			size_t count)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#235: FILE: kernel/autotune/akt.c:336:
+	if (sscanf(buf, "%lu", &new_value) != 1)
+		return -EINVAL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun_addr"
#238: FILE: kernel/autotune/akt.c:339:
+	if (tun_addr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#239: FILE: kernel/autotune/akt.c:340:
+		printk(KERN_ERR "AKT: tunable address is invalid\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#245: FILE: kernel/autotune/akt.c:346:
+	if (new_value <= tun_addr->max.abs_value &&
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: kernel/autotune/akt.c:347:
+	if (new_value <= tun_addr->max.abs_value &&
+					new_value > tun_addr->min.value) {

CHECK:BRACES: Unbalanced braces around else statement
#249: FILE: kernel/autotune/akt.c:350:
+	} else

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#264: FILE: kernel/autotune/akt_sysfs.c:57:
+static TUNABLE_ATTR(min, S_IWUSR | S_IRUGO, show_tunable_min,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#267: FILE: kernel/autotune/akt_sysfs.c:60:
+static TUNABLE_ATTR(max, S_IWUSR | S_IRUGO, show_tunable_max,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473229.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 20 checks, 245 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473229.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
