WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#72: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: arch/x86/mm/fault.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#109: FILE: arch/x86/mm/fault.c:33:
+#include <asm/smp.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#122: FILE: arch/x86/mm/fault.c:46:
+#define PF_PROT		(1<<0)
                		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#122: FILE: arch/x86/mm/fault.c:46:
+#define PF_PROT		(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#123: FILE: arch/x86/mm/fault.c:47:
+#define PF_WRITE	(1<<1)
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#123: FILE: arch/x86/mm/fault.c:47:
+#define PF_WRITE	(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#124: FILE: arch/x86/mm/fault.c:48:
+#define PF_USER		(1<<2)
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#124: FILE: arch/x86/mm/fault.c:48:
+#define PF_USER		(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#125: FILE: arch/x86/mm/fault.c:49:
+#define PF_RSVD		(1<<3)
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#125: FILE: arch/x86/mm/fault.c:49:
+#define PF_RSVD		(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#126: FILE: arch/x86/mm/fault.c:50:
+#define PF_INSTR	(1<<4)
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#126: FILE: arch/x86/mm/fault.c:50:
+#define PF_INSTR	(1<<4)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#231: FILE: arch/x86/mm/fault.c:155:
+			scan_more = !instr_lo || (instr_lo>>1) == 1;
 			                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: arch/x86/mm/fault.c:175:
+static void force_sig_info_fault(int si_signo, int si_code,
+	unsigned long address, struct task_struct *tsk)

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: arch/x86/mm/fault.c:190:
+	unsigned long dummy;
+	return probe_kernel_address((unsigned long *)p, dummy);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#276: FILE: arch/x86/mm/fault.c:200:
+	page = ((__typeof__(page) *) __va(page))[address >> PGDIR_SHIFT];

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#278: FILE: arch/x86/mm/fault.c:202:
+	printk("*pdpt = %016Lx ", page);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#278: FILE: arch/x86/mm/fault.c:202:
+	printk("*pdpt = %016Lx ", page);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#280: FILE: arch/x86/mm/fault.c:204:
+	if ((page >> PAGE_SHIFT) < max_low_pfn
+	    && page & _PAGE_PRESENT) {

CHECK:SPACING: No space is necessary after a cast
#282: FILE: arch/x86/mm/fault.c:206:
+		page = ((__typeof__(page) *) __va(page))[(address >> PMD_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: arch/x86/mm/fault.c:207:
+^I^I                                         & (PTRS_PER_PMD - 1)];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#284: FILE: arch/x86/mm/fault.c:208:
+		printk(KERN_CONT "*pde = %016Lx ", page);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#284: FILE: arch/x86/mm/fault.c:208:
+		printk(KERN_CONT "*pde = %016Lx ", page);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#284: FILE: arch/x86/mm/fault.c:208:
+		printk(KERN_CONT "*pde = %016Lx ", page);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#288: FILE: arch/x86/mm/fault.c:212:
+	printk("*pde = %08lx ", page);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#298: FILE: arch/x86/mm/fault.c:222:
+	if ((page >> PAGE_SHIFT) < max_low_pfn
+	    && (page & _PAGE_PRESENT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#299: FILE: arch/x86/mm/fault.c:223:
+	    && (page & _PAGE_PRESENT)
+	    && !(page & _PAGE_PSE)) {

CHECK:SPACING: No space is necessary after a cast
#301: FILE: arch/x86/mm/fault.c:225:
+		page = ((__typeof__(page) *) __va(page))[(address >> PAGE_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: arch/x86/mm/fault.c:226:
+^I^I                                         & (PTRS_PER_PTE - 1)];$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#303: FILE: arch/x86/mm/fault.c:227:
+		printk("*pte = %0*Lx ", sizeof(page)*2, (u64)page);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#303: FILE: arch/x86/mm/fault.c:227:
+		printk("*pte = %0*Lx ", sizeof(page)*2, (u64)page);
 		                                    ^

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#303: FILE: arch/x86/mm/fault.c:227:
+		printk("*pte = %0*Lx ", sizeof(page)*2, (u64)page);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#306: FILE: arch/x86/mm/fault.c:230:
+	printk("\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#317: FILE: arch/x86/mm/fault.c:241:
+	if (bad_address(pgd)) goto bad;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#318: FILE: arch/x86/mm/fault.c:242:
+	printk("PGD %lx ", pgd_val(*pgd));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#319: FILE: arch/x86/mm/fault.c:243:
+	if (!pgd_present(*pgd)) goto ret;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#322: FILE: arch/x86/mm/fault.c:246:
+	if (bad_address(pud)) goto bad;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#323: FILE: arch/x86/mm/fault.c:247:
+	printk("PUD %lx ", pud_val(*pud));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#324: FILE: arch/x86/mm/fault.c:248:
+	if (!pud_present(*pud))	goto ret;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#327: FILE: arch/x86/mm/fault.c:251:
+	if (bad_address(pmd)) goto bad;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#328: FILE: arch/x86/mm/fault.c:252:
+	printk("PMD %lx ", pmd_val(*pmd));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#329: FILE: arch/x86/mm/fault.c:253:
+	if (!pmd_present(*pmd) || pmd_large(*pmd)) goto ret;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#332: FILE: arch/x86/mm/fault.c:256:
+	if (bad_address(pte)) goto bad;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#333: FILE: arch/x86/mm/fault.c:257:
+	printk("PTE %lx", pte_val(*pte));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#335: FILE: arch/x86/mm/fault.c:259:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#338: FILE: arch/x86/mm/fault.c:262:
+	printk("BAD\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#345: FILE: arch/x86/mm/fault.c:269:
+	unsigned index = pgd_index(address);

CHECK:BRACES: braces {} should be used on all arms of this statement
#371: FILE: arch/x86/mm/fault.c:295:
+	if (!pmd_present(*pmd)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#374: FILE: arch/x86/mm/fault.c:298:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#375: FILE: arch/x86/mm/fault.c:299:
+		BUG_ON(pmd_page(*pmd) != pmd_page(*pmd_k));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#389: FILE: arch/x86/mm/fault.c:313:
+/* Workaround for K8 erratum #93 & buggy BIOS.
+   BIOS SMM functions are required to use a specific workaround

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: arch/x86/mm/fault.c:325:
+	static int warned;
+	if (address != regs->ip)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#409: FILE: arch/x86/mm/fault.c:333:
+			printk(errata93_warning);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#428: FILE: arch/x86/mm/fault.c:352:
+	if ((regs->cs == __USER32_CS || (regs->cs & (1<<2))) &&
 	                                              ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#435: FILE: arch/x86/mm/fault.c:359:
+void do_invalid_op(struct pt_regs *, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#435: FILE: arch/x86/mm/fault.c:359:
+void do_invalid_op(struct pt_regs *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#435: FILE: arch/x86/mm/fault.c:359:
+void do_invalid_op(struct pt_regs *, unsigned long);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#469: FILE: arch/x86/mm/fault.c:393:
+			printk(KERN_CRIT "kernel tried to execute "

WARNING:SPLIT_STRING: quoted string split across lines
#470: FILE: arch/x86/mm/fault.c:394:
+			printk(KERN_CRIT "kernel tried to execute "
+				"NX-protected page - exploit attempt? "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#471: FILE: arch/x86/mm/fault.c:395:
+				"NX-protected page - exploit attempt? "
+				"(uid: %d)\n", current->uid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#474: FILE: arch/x86/mm/fault.c:398:
+	printk(KERN_ALERT "BUG: unable to handle kernel ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#476: FILE: arch/x86/mm/fault.c:400:
+		printk(KERN_CONT "NULL pointer dereference");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#476: FILE: arch/x86/mm/fault.c:400:
+		printk(KERN_CONT "NULL pointer dereference");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#478: FILE: arch/x86/mm/fault.c:402:
+		printk(KERN_CONT "paging request");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#478: FILE: arch/x86/mm/fault.c:402:
+		printk(KERN_CONT "paging request");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#479: FILE: arch/x86/mm/fault.c:403:
+	printk(KERN_CONT " at %08lx\n", address);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#479: FILE: arch/x86/mm/fault.c:403:
+	printk(KERN_CONT " at %08lx\n", address);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#481: FILE: arch/x86/mm/fault.c:405:
+	printk(KERN_ALERT "IP:");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#485: FILE: arch/x86/mm/fault.c:409:
+	printk(KERN_ALERT "BUG: unable to handle kernel ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#487: FILE: arch/x86/mm/fault.c:411:
+		printk(KERN_CONT "NULL pointer dereference");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#487: FILE: arch/x86/mm/fault.c:411:
+		printk(KERN_CONT "NULL pointer dereference");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#489: FILE: arch/x86/mm/fault.c:413:
+		printk(KERN_CONT "paging request");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#489: FILE: arch/x86/mm/fault.c:413:
+		printk(KERN_CONT "paging request");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#490: FILE: arch/x86/mm/fault.c:414:
+	printk(KERN_CONT " at %016lx\n", address);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#490: FILE: arch/x86/mm/fault.c:414:
+	printk(KERN_CONT " at %016lx\n", address);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#492: FILE: arch/x86/mm/fault.c:416:
+	printk(KERN_ALERT "IP:");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#505: FILE: arch/x86/mm/fault.c:429:
+	printk(KERN_ALERT "%s: Corrupted page table at address %lx\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#555: FILE: arch/x86/mm/fault.c:479:
+	/* Copy kernel mappings over when needed. This can also
+	   happen within a race in page table update. In the later

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#556: FILE: arch/x86/mm/fault.c:480:
+	   case just flush. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#565: FILE: arch/x86/mm/fault.c:489:
+		BUG_ON(pgd_page_vaddr(*pgd) != pgd_page_vaddr(*pgd_ref));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#568: FILE: arch/x86/mm/fault.c:492:
+	/* Below here mismatches are bugs because these lower tables
+	   are shared */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#568: FILE: arch/x86/mm/fault.c:492:
+	   are shared */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#575: FILE: arch/x86/mm/fault.c:499:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#581: FILE: arch/x86/mm/fault.c:505:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#587: FILE: arch/x86/mm/fault.c:511:
+	/* Don't use pte_page here, because the mappings can point
+	   outside mem_map, and the NUMA hash lookup cannot handle

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#588: FILE: arch/x86/mm/fault.c:512:
+	   that. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#590: FILE: arch/x86/mm/fault.c:514:
+		BUG();

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#649: FILE: arch/x86/mm/fault.c:573:
+		if (!(error_code & (PF_RSVD|PF_USER|PF_PROT)) &&
 		                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#649: FILE: arch/x86/mm/fault.c:573:
+		if (!(error_code & (PF_RSVD|PF_USER|PF_PROT)) &&
 		                                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#660: FILE: arch/x86/mm/fault.c:584:
+	/* It's safe to allow irq's after cr2 has been saved and the vmalloc
+	   fault has been handled. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#660: FILE: arch/x86/mm/fault.c:584:
+	   fault has been handled. */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#661: FILE: arch/x86/mm/fault.c:585:
+	if (regs->flags & (X86_EFLAGS_IF|VM_MASK))
 	                                ^

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#668: FILE: arch/x86/mm/fault.c:592:
+	if (in_atomic() || !mm)

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#677: FILE: arch/x86/mm/fault.c:601:
+		if (!(error_code & (PF_RSVD|PF_USER|PF_PROT)) &&
 		                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#677: FILE: arch/x86/mm/fault.c:601:
+		if (!(error_code & (PF_RSVD|PF_USER|PF_PROT)) &&
 		                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: arch/x86/mm/fault.c:602:
+		if (!(error_code & (PF_RSVD|PF_USER|PF_PROT)) &&
+		      ((address >= VMALLOC_START && address < VMALLOC_END))) {

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#698: FILE: arch/x86/mm/fault.c:622:
+	if (unlikely(in_atomic() || !mm))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#761: FILE: arch/x86/mm/fault.c:685:
+	switch (error_code & (PF_PROT|PF_WRITE)) {
 	                             ^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#763: FILE: arch/x86/mm/fault.c:687:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#790: FILE: arch/x86/mm/fault.c:714:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#803: FILE: arch/x86/mm/fault.c:727:
+		unsigned long bit = (address - 0xA0000) >> PAGE_SHIFT;
+		if (bit < 32)

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#836: FILE: arch/x86/mm/fault.c:760:
+		    printk_ratelimit()) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#837: FILE: arch/x86/mm/fault.c:761:
+			printk(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#837: FILE: arch/x86/mm/fault.c:761:
+			printk(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#847: FILE: arch/x86/mm/fault.c:771:
+			printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#907: FILE: arch/x86/mm/fault.c:831:
+	printk(KERN_EMERG "CR2: %016lx\n", address);

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#919: FILE: arch/x86/mm/fault.c:843:
+		yield();

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#925: FILE: arch/x86/mm/fault.c:849:
+		yield();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#929: FILE: arch/x86/mm/fault.c:853:
+	printk("VM: killing process %s\n", tsk->comm);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#982: FILE: arch/x86/mm/fault.c:906:
+				if (!vmalloc_sync_one(page_address(page),
+								address)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#983: FILE: arch/x86/mm/fault.c:907:
+					BUG_ON(page != pgd_list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1014: FILE: arch/x86/mm/fault.c:938:
+				pgd_t *pgd;
+				pgd = (pgd_t *)page_address(page) + pgd_index(address);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1018: FILE: arch/x86/mm/fault.c:942:
+					BUG_ON(pgd_page_vaddr(*pgd) != pgd_page_vaddr(*pgd_ref));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333154.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 73 warnings, 32 checks, 971 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333154.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
