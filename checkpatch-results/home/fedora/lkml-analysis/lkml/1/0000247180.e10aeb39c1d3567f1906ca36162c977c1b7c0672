WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
> I would suggest that if you guys are really serious about memory use, try 

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#102: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: include/linux/binalloc_def.h:1:
+#ifndef __LINUX_BINALLOC_DEF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#110: FILE: include/linux/binalloc_def.h:4:
+void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t flags, int node);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#171: FILE: init/Kconfig:777:
+config BINALLOC
+	depends on EMBEDDED
+	bool "BINALLOC"
+	help
+	   A best-fit general-purpose kernel memory allocator with binning
+	   that tries to be as memory efficient as possible.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#189: FILE: lib/Kconfig.debug:293:
+config BINALLOC_DEBUG
+	bool "Debug binalloc memory allocations"
+	default n
+	help
+	  Say Y here to have the memory allocator to do sanity checks for
+	  allocation and deallocation.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#217: FILE: mm/binalloc.c:1:
+/*

WARNING:TYPO_SPELLING: 'propery' may be misspelled - perhaps 'property'?
#271: FILE: mm/binalloc.c:55:
+ * also aligned propery, one byte of padding is added to the end of the object
                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#411: FILE: mm/binalloc.c:195:
+	void *p = rawptr_to_chunk((void *) chunk - chunk->tag.prev_size);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#413: FILE: mm/binalloc.c:197:
+	BUG_ON(!virt_addr_valid(p));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#437: FILE: mm/binalloc.c:221:
+	BUG_ON(size < MIN_CHUNK_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#438: FILE: mm/binalloc.c:222:
+	BUG_ON(size > PAGE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: mm/binalloc.c:240:
+	print_hex_dump(KERN_ERR, "kmem: ", DUMP_PREFIX_ADDRESS, 16, 1,
+		chunk, DUMP_BYTES, 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#462: FILE: mm/binalloc.c:246:
+		printk(KERN_ERR "kmem: bad chunk magic: %lx, expected: %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: mm/binalloc.c:247:
+		printk(KERN_ERR "kmem: bad chunk magic: %lx, expected: %lx\n",
+				chunk->tag.magic, magic);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: mm/binalloc.c:249:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: mm/binalloc.c:263:
+		BUG_ON(chunk_size(chunk) < MIN_CHUNK_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: mm/binalloc.c:264:
+		BUG_ON(virt_to_page(chunk) != page);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#536: FILE: mm/binalloc.c:320:
+	return (size-1) >> BIN_SHIFT;
 	            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#543: FILE: mm/binalloc.c:327:
+	BUG_ON(idx > NR_BINS);

WARNING:LINE_SPACING: Missing a blank line after declarations
#562: FILE: mm/binalloc.c:346:
+		struct kmem_chunk *this;
+		parent = *p;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageSlab>
#601: FILE: mm/binalloc.c:385:
+	__SetPageSlab(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#605: FILE: mm/binalloc.c:389:
+	__chunk_set_size(chunk, PAGE_SIZE - BOUNDARY_TAG_SIZE*2);
 	                                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#625: FILE: mm/binalloc.c:409:
+	BUG_ON(new_size < MIN_CHUNK_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#626: FILE: mm/binalloc.c:410:
+	BUG_ON(new_size > PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#631: FILE: mm/binalloc.c:415:
+	BUG_ON(size < new_size);

CHECK:SPACING: No space is necessary after a cast
#741: FILE: mm/binalloc.c:525:
+	BUG_ON(!IS_ALIGNED((unsigned long) p, align));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#741: FILE: mm/binalloc.c:525:
+	BUG_ON(!IS_ALIGNED((unsigned long) p, align));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#831: FILE: mm/binalloc.c:615:
+	if (unlikely(chunk_size(chunk) == PAGE_SIZE-BOUNDARY_TAG_SIZE*2)) {
 	                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#831: FILE: mm/binalloc.c:615:
+	if (unlikely(chunk_size(chunk) == PAGE_SIZE-BOUNDARY_TAG_SIZE*2)) {
 	                                                             ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#831: FILE: mm/binalloc.c:615:
+	if (unlikely(chunk_size(chunk) == PAGE_SIZE-BOUNDARY_TAG_SIZE*2)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageSlab>
#832: FILE: mm/binalloc.c:616:
+		__ClearPageSlab(page);

CHECK:BRACES: Unbalanced braces around else statement
#834: FILE: mm/binalloc.c:618:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#891: FILE: mm/binalloc.c:675:
+	BUG_ON(!p);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#909: FILE: mm/binalloc.c:693:
+	void (*ctor)(void *);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#919: FILE: mm/binalloc.c:703:
+	BUG_ON(size == 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#971: FILE: mm/binalloc.c:755:
+	if (unlikely(cache->gfpflags & SLAB_DESTROY_BY_RCU)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#978: FILE: mm/binalloc.c:762:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247180.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 24 warnings, 14 checks, 909 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247180.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
