WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
CONFIG_MODULE_SIG).  Turning on signature checking will also force the module's

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#229: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#273: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#472: FILE: init/Kconfig:562:
+config MODULE_SIG
+	bool "Module signature verification (EXPERIMENTAL)"
+	depends on MODULES && EXPERIMENTAL
+	select CRYPTO
+	select CRYPTO_SHA1
+	select CRYPTO_SIGNATURE
+	select MODULE_VERIFY_ELF
+	help
+	  Check modules for valid signatures upon load.  For more information
+	  see:
+
+	  Documentation/module-signing.txt
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#518: FILE: kernel/module-verify-sig.c:1:
+/* module-verify-sig.c: module signature checker

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#541: FILE: kernel/module-verify-sig.c:24:
+#define _debug(FMT, ...) printk(FMT, ##__VA_ARGS__)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#547: FILE: kernel/module-verify-sig.c:30:
+#define count_and_csum(C, __p,__n)			\
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'C' - possible side-effects?
#547: FILE: kernel/module-verify-sig.c:30:
+#define count_and_csum(C, __p,__n)			\
+do {							\
+	int __loop;					\
+	for (__loop = 0; __loop < __n; __loop++) {	\
+		(C)->csum += __p[__loop];		\
+		(C)->xcsum += __p[__loop];		\
+	}						\
+	(C)->signed_size += __n;			\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__p' - possible side-effects?
#547: FILE: kernel/module-verify-sig.c:30:
+#define count_and_csum(C, __p,__n)			\
+do {							\
+	int __loop;					\
+	for (__loop = 0; __loop < __n; __loop++) {	\
+		(C)->csum += __p[__loop];		\
+		(C)->xcsum += __p[__loop];		\
+	}						\
+	(C)->signed_size += __n;			\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__n' - possible side-effects?
#547: FILE: kernel/module-verify-sig.c:30:
+#define count_and_csum(C, __p,__n)			\
+do {							\
+	int __loop;					\
+	for (__loop = 0; __loop < __n; __loop++) {	\
+		(C)->csum += __p[__loop];		\
+		(C)->xcsum += __p[__loop];		\
+	}						\
+	(C)->signed_size += __n;			\
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__n' may be better as '(__n)' to avoid precedence issues
#547: FILE: kernel/module-verify-sig.c:30:
+#define count_and_csum(C, __p,__n)			\
+do {							\
+	int __loop;					\
+	for (__loop = 0; __loop < __n; __loop++) {	\
+		(C)->csum += __p[__loop];		\
+		(C)->xcsum += __p[__loop];		\
+	}						\
+	(C)->signed_size += __n;			\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#555: FILE: kernel/module-verify-sig.c:38:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#557: FILE: kernel/module-verify-sig.c:40:
+#define count_and_csum(C, __p,__n)		\
                              ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#557: FILE: kernel/module-verify-sig.c:40:
+#define count_and_csum(C, __p,__n)		\
+do {						\
+	(C)->signed_size += __n;		\
+} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#560: FILE: kernel/module-verify-sig.c:43:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#563: FILE: kernel/module-verify-sig.c:46:
+#define crypto_digest_update_data(C,PTR,N)			\
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#563: FILE: kernel/module-verify-sig.c:46:
+#define crypto_digest_update_data(C,PTR,N)			\
                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'C' - possible side-effects?
#563: FILE: kernel/module-verify-sig.c:46:
+#define crypto_digest_update_data(C,PTR,N)			\
+do {								\
+	size_t __n = (N);					\
+	uint8_t *__p = (uint8_t *)(PTR);			\
+	count_and_csum((C), __p, __n);				\
+	crypto_hash_update_kernel(&(C)->hash, __p, __n);	\
+} while(0)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#566: FILE: kernel/module-verify-sig.c:49:
+	uint8_t *__p = (uint8_t *)(PTR);			\

ERROR:SPACING: space required before the open parenthesis '('
#569: FILE: kernel/module-verify-sig.c:52:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#571: FILE: kernel/module-verify-sig.c:54:
+#define crypto_digest_update_val(C,VAL)				\
                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'C' - possible side-effects?
#571: FILE: kernel/module-verify-sig.c:54:
+#define crypto_digest_update_val(C,VAL)				\
+do {								\
+	size_t __n = sizeof(VAL);				\
+	uint8_t *__p = (uint8_t *)&(VAL);			\
+	count_and_csum((C), __p, __n);				\
+	crypto_hash_update_kernel(&(C)->hash, __p, __n);	\
+} while(0)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#574: FILE: kernel/module-verify-sig.c:57:
+	uint8_t *__p = (uint8_t *)&(VAL);			\

ERROR:SPACING: space required before the open parenthesis '('
#577: FILE: kernel/module-verify-sig.c:60:
+} while(0)

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Rela>
#583: FILE: kernel/module-verify-sig.c:66:
+			    const Elf_Rela *relatab, size_t nrels,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Rel>
#588: FILE: kernel/module-verify-sig.c:71:
+			   const Elf_Rel *reltab, size_t nrels,

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#602: FILE: kernel/module-verify-sig.c:85:
+__setup("enforcemodulesig", sign_setup);

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#610: FILE: kernel/module-verify-sig.c:93:
+	const Elf_Shdr *sechdrs = mvdata->sections;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#613: FILE: kernel/module-verify-sig.c:96:
+	unsigned sig_size;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#646: FILE: kernel/module-verify-sig.c:129:
+		printk("Couldn't load module - SHA1 transform unavailable\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#675: FILE: kernel/module-verify-sig.c:158:
+		 * added or removed */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#678: FILE: kernel/module-verify-sig.c:161:
+				uint32_t xsh_info = mvdata->canonmap[sh_info];

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#688: FILE: kernel/module-verify-sig.c:171:
+					ret = extract_elf_rela(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#694: FILE: kernel/module-verify-sig.c:177:
+					ret = extract_elf_rel(

WARNING:INDENTED_LABEL: labels should not be indented
#713: FILE: kernel/module-verify-sig.c:196:
+	include_section:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#740: FILE: kernel/module-verify-sig.c:223:
+		printk(KERN_ERR "Module signature verification failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#743: FILE: kernel/module-verify-sig.c:226:
+		printk(KERN_ERR "Module signed with unknown public key\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#753: FILE: kernel/module-verify-sig.c:236:
+	printk(KERN_ERR "Module format error encountered\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#758: FILE: kernel/module-verify-sig.c:241:
+ ^Iif (!signedonly)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#758: FILE: kernel/module-verify-sig.c:241:
+ ^Iif (!signedonly)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: kernel/module-verify-sig.c:241:
+ ^Iif (!signedonly)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#760: FILE: kernel/module-verify-sig.c:243:
+	printk(KERN_ERR "An attempt to load unsigned module was rejected\n");

ERROR:SPACING: space required before the open parenthesis '('
#813: FILE: kernel/module-verify-sig.c:296:
+	} while(changed);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#833: FILE: kernel/module-verify-sig.c:316:
+		uint32_t	r_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#834: FILE: kernel/module-verify-sig.c:317:
+		uint32_t	r_addend;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#835: FILE: kernel/module-verify-sig.c:318:
+		uint32_t	st_value;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#836: FILE: kernel/module-verify-sig.c:319:
+		uint32_t	st_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#837: FILE: kernel/module-verify-sig.c:320:
+		uint16_t	st_shndx;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#838: FILE: kernel/module-verify-sig.c:321:
+		uint8_t		r_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#839: FILE: kernel/module-verify-sig.c:322:
+		uint8_t		st_info;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#840: FILE: kernel/module-verify-sig.c:323:
+		uint8_t		st_other;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#842: FILE: kernel/module-verify-sig.c:325:
+		uint64_t	r_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#843: FILE: kernel/module-verify-sig.c:326:
+		uint64_t	r_addend;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#844: FILE: kernel/module-verify-sig.c:327:
+		uint64_t	st_value;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#845: FILE: kernel/module-verify-sig.c:328:
+		uint64_t	st_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#846: FILE: kernel/module-verify-sig.c:329:
+		uint32_t	r_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#847: FILE: kernel/module-verify-sig.c:330:
+		uint16_t	st_shndx;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#848: FILE: kernel/module-verify-sig.c:331:
+		uint8_t		st_info;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#849: FILE: kernel/module-verify-sig.c:332:
+		uint8_t		st_other;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#853: FILE: kernel/module-verify-sig.c:336:
+	} __attribute__((packed)) relocation;

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Sym>
#856: FILE: kernel/module-verify-sig.c:339:
+	const Elf_Sym *symbol;

WARNING:LINE_SPACING: Missing a blank line after declarations
#888: FILE: kernel/module-verify-sig.c:371:
+			const char *name = mvdata->strings + symbol->st_name;
+			crypto_digest_update_data(mvdata,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#911: FILE: kernel/module-verify-sig.c:394:
+		uint32_t	r_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#912: FILE: kernel/module-verify-sig.c:395:
+		uint32_t	st_value;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#913: FILE: kernel/module-verify-sig.c:396:
+		uint32_t	st_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#914: FILE: kernel/module-verify-sig.c:397:
+		uint16_t	st_shndx;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#915: FILE: kernel/module-verify-sig.c:398:
+		uint8_t		r_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#916: FILE: kernel/module-verify-sig.c:399:
+		uint8_t		st_info;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#917: FILE: kernel/module-verify-sig.c:400:
+		uint8_t		st_other;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#919: FILE: kernel/module-verify-sig.c:402:
+		uint64_t	r_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#920: FILE: kernel/module-verify-sig.c:403:
+		uint64_t	st_value;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#921: FILE: kernel/module-verify-sig.c:404:
+		uint64_t	st_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#922: FILE: kernel/module-verify-sig.c:405:
+		uint32_t	r_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#923: FILE: kernel/module-verify-sig.c:406:
+		uint16_t	st_shndx;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#924: FILE: kernel/module-verify-sig.c:407:
+		uint8_t		st_info;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#925: FILE: kernel/module-verify-sig.c:408:
+		uint8_t		st_other;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#929: FILE: kernel/module-verify-sig.c:412:
+	} __attribute__((packed)) relocation;

WARNING:LINE_SPACING: Missing a blank line after declarations
#963: FILE: kernel/module-verify-sig.c:446:
+			const char *name = mvdata->strings + symbol->st_name;
+			crypto_digest_update_data(mvdata,

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#984: FILE: kernel/module-verify.c:21:
+int module_verify(const Elf_Ehdr *hdr, size_t size, int *_gpgsig_ok)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1020: FILE: kernel/module-verify.h:41:
+extern int module_verify(const Elf_Ehdr *hdr, size_t size, int *_gpgsig_ok);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1032: FILE: kernel/module-verify.h:56:
+extern int module_verify_signature(struct module_verify_data *mvdata,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1081: FILE: kernel/module.c:2353:
+			printk("(U)");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1182: FILE: scripts/mod/mod-extract.c:1:
+/* mod-extract.c: module extractor for signing

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1205: FILE: scripts/mod/mod-extract.c:24:
+void extract_elf64(void *buffer, size_t size, Elf64_Ehdr *hdr);
                                                          ^

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Ehdr>
#1205: FILE: scripts/mod/mod-extract.c:24:
+void extract_elf64(void *buffer, size_t size, Elf64_Ehdr *hdr);

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Ehdr>
#1206: FILE: scripts/mod/mod-extract.c:25:
+void extract_elf32(void *buffer, size_t size, Elf32_Ehdr *hdr);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1206: FILE: scripts/mod/mod-extract.c:25:
+void extract_elf32(void *buffer, size_t size, Elf32_Ehdr *hdr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const uint16_t *' should also have an identifier name
#1209: FILE: scripts/mod/mod-extract.c:28:
+	uint16_t (*get16)(const uint16_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const uint32_t *' should also have an identifier name
#1210: FILE: scripts/mod/mod-extract.c:29:
+	uint32_t (*get32)(const uint32_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const uint64_t *' should also have an identifier name
#1211: FILE: scripts/mod/mod-extract.c:30:
+	uint64_t (*get64)(const uint64_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint16_t *' should also have an identifier name
#1212: FILE: scripts/mod/mod-extract.c:31:
+	void (*set16)(uint16_t *, uint16_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint16_t' should also have an identifier name
#1212: FILE: scripts/mod/mod-extract.c:31:
+	void (*set16)(uint16_t *, uint16_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t *' should also have an identifier name
#1213: FILE: scripts/mod/mod-extract.c:32:
+	void (*set32)(uint32_t *, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t' should also have an identifier name
#1213: FILE: scripts/mod/mod-extract.c:32:
+	void (*set32)(uint32_t *, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint64_t *' should also have an identifier name
#1214: FILE: scripts/mod/mod-extract.c:33:
+	void (*set64)(uint64_t *, uint64_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint64_t' should also have an identifier name
#1214: FILE: scripts/mod/mod-extract.c:33:
+	void (*set64)(uint64_t *, uint64_t);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1224: FILE: scripts/mod/mod-extract.c:43:
+void set16_le(uint16_t *p, uint16_t n) { *p = __cpu_to_le16(n); }

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1225: FILE: scripts/mod/mod-extract.c:44:
+void set32_le(uint32_t *p, uint32_t n) { *p = __cpu_to_le32(n); }

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1226: FILE: scripts/mod/mod-extract.c:45:
+void set64_le(uint64_t *p, uint64_t n) { *p = __cpu_to_le64(n); }

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1227: FILE: scripts/mod/mod-extract.c:46:
+void set16_be(uint16_t *p, uint16_t n) { *p = __cpu_to_be16(n); }

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1228: FILE: scripts/mod/mod-extract.c:47:
+void set32_be(uint32_t *p, uint32_t n) { *p = __cpu_to_be32(n); }

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1229: FILE: scripts/mod/mod-extract.c:48:
+void set64_be(uint64_t *p, uint64_t n) { *p = __cpu_to_be64(n); }

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1235: FILE: scripts/mod/mod-extract.c:54:
+};
+const struct byteorder byteorder_be = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1239: FILE: scripts/mod/mod-extract.c:58:
+};
+const struct byteorder *order;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1244: FILE: scripts/mod/mod-extract.c:63:
+void set16(uint16_t *p, uint16_t n) { order->set16(p, n); }

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1245: FILE: scripts/mod/mod-extract.c:64:
+void set32(uint32_t *p, uint32_t n) { order->set32(p, n); }

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1246: FILE: scripts/mod/mod-extract.c:65:
+void set64(uint64_t *p, uint64_t n) { order->set64(p, n); }

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1249: FILE: scripts/mod/mod-extract.c:68:
+uint8_t csum, xcsum;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1253: FILE: scripts/mod/mod-extract.c:72:
+	const uint8_t *p = data;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1271: FILE: scripts/mod/mod-extract.c:90:
+void verbose(const char *fmt, ...) __attribute__((format(printf,1,2)));
                                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1271: FILE: scripts/mod/mod-extract.c:90:
+void verbose(const char *fmt, ...) __attribute__((format(printf,1,2)));
                                                                  ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1,2) over __attribute__((format(printf,1,2)))
#1271: FILE: scripts/mod/mod-extract.c:90:
+void verbose(const char *fmt, ...) __attribute__((format(printf,1,2)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#1283: FILE: scripts/mod/mod-extract.c:102:
+void usage(void) __attribute__((noreturn));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1325: FILE: scripts/mod/mod-extract.c:144:
+	buffer = mmap(NULL, len, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);
 	                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1367: FILE: scripts/mod/mod-extract.c:186:
+ ^I^Iextract_elf64(buffer, len, hdr64);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1367: FILE: scripts/mod/mod-extract.c:186:
+ ^I^Iextract_elf64(buffer, len, hdr64);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: scripts/mod/mod-extract.c:186:
+ ^I^Iextract_elf64(buffer, len, hdr64);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1369: FILE: scripts/mod/mod-extract.c:188:
+ ^I^Iextract_elf32(buffer, len, hdr32);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1369: FILE: scripts/mod/mod-extract.c:188:
+ ^I^Iextract_elf32(buffer, len, hdr32);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1369: FILE: scripts/mod/mod-extract.c:188:
+ ^I^Iextract_elf32(buffer, len, hdr32);$

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Rela>
#1386: FILE: scripts/mod/mod-extract.c:205:
+			const Elf64_Rela *relatab, size_t nrels,

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Sym>
#1387: FILE: scripts/mod/mod-extract.c:206:
+			const Elf64_Sym *symbols, size_t nsyms,

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Shdr>
#1388: FILE: scripts/mod/mod-extract.c:207:
+			const Elf64_Shdr *sections, size_t nsects, int *canonmap,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1393: FILE: scripts/mod/mod-extract.c:212:
+		uint64_t	r_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1394: FILE: scripts/mod/mod-extract.c:213:
+		uint64_t	r_addend;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1395: FILE: scripts/mod/mod-extract.c:214:
+		uint64_t	st_value;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1396: FILE: scripts/mod/mod-extract.c:215:
+		uint64_t	st_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1397: FILE: scripts/mod/mod-extract.c:216:
+		uint32_t	r_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1398: FILE: scripts/mod/mod-extract.c:217:
+		uint16_t	st_shndx;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1399: FILE: scripts/mod/mod-extract.c:218:
+		uint8_t		st_info;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1400: FILE: scripts/mod/mod-extract.c:219:
+		uint8_t		st_other;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1402: FILE: scripts/mod/mod-extract.c:221:
+	} __attribute__((packed)) relocation;

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Section>
#1409: FILE: scripts/mod/mod-extract.c:228:
+		Elf64_Section st_shndx;

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Xword>
#1410: FILE: scripts/mod/mod-extract.c:229:
+		Elf64_Xword r_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1442: FILE: scripts/mod/mod-extract.c:261:
+			const char *name = strings + get32(&symbol->st_name);
+			write_out(name, strlen(name) + 1);

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Rel>
#1455: FILE: scripts/mod/mod-extract.c:274:
+		       const Elf64_Rel *relatab, size_t nrels,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1462: FILE: scripts/mod/mod-extract.c:281:
+		uint64_t	r_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1463: FILE: scripts/mod/mod-extract.c:282:
+		uint64_t	st_value;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1464: FILE: scripts/mod/mod-extract.c:283:
+		uint64_t	st_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1465: FILE: scripts/mod/mod-extract.c:284:
+		uint32_t	r_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1466: FILE: scripts/mod/mod-extract.c:285:
+		uint16_t	st_shndx;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1467: FILE: scripts/mod/mod-extract.c:286:
+		uint8_t		st_info;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1468: FILE: scripts/mod/mod-extract.c:287:
+		uint8_t		st_other;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1470: FILE: scripts/mod/mod-extract.c:289:
+	} __attribute__((packed)) relocation;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1509: FILE: scripts/mod/mod-extract.c:328:
+			const char *name = strings + get32(&symbol->st_name);
+			write_out(name, strlen(name) + 1);

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Word>
#1550: FILE: scripts/mod/mod-extract.c:369:
+		Elf64_Word  sh_type	= get32(&sections[loop].sh_type);

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Off>
#1553: FILE: scripts/mod/mod-extract.c:372:
+		Elf64_Off   sh_offset	= get64(&sections[loop].sh_offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1604: FILE: scripts/mod/mod-extract.c:423:
+			const char *y = secstrings + get32(&sections[canonlist[loop + 1]].sh_name);
+			if (strcmp(x, y) > 0) {

ERROR:SPACING: space required before the open parenthesis '('
#1612: FILE: scripts/mod/mod-extract.c:431:
+	} while(changed);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1621: FILE: scripts/mod/mod-extract.c:440:
+			const char *x = secstrings + get32(&sections[loop].sh_name);
+			printf("%4d %s\n", canonmap[loop], x);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1627: FILE: scripts/mod/mod-extract.c:446:
+			const char *x = secstrings + get32(&sections[canonlist[loop]].sh_name);
+			printf("%4d %s\n", canonlist[loop], x);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1634: FILE: scripts/mod/mod-extract.c:453:
+	 * contribute to the signature */

WARNING:SPLIT_STRING: quoted string split across lines
#1655: FILE: scripts/mod/mod-extract.c:474:
+					"Invalid ELF - REL/RELA sh_info does"
+					" not refer to a valid section\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Word>
#1660: FILE: scripts/mod/mod-extract.c:479:
+				Elf32_Word xsh_info;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1667: FILE: scripts/mod/mod-extract.c:486:
+				 * header */

WARNING:INDENTED_LABEL: labels should not be indented
#1701: FILE: scripts/mod/mod-extract.c:520:
+	include_section:

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Rela>
#1730: FILE: scripts/mod/mod-extract.c:549:
+			const Elf32_Rela *relatab, size_t nrels,

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Sym>
#1731: FILE: scripts/mod/mod-extract.c:550:
+			const Elf32_Sym *symbols, size_t nsyms,

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Shdr>
#1732: FILE: scripts/mod/mod-extract.c:551:
+			const Elf32_Shdr *sections, size_t nsects, int *canonmap,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1737: FILE: scripts/mod/mod-extract.c:556:
+		uint32_t	r_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1738: FILE: scripts/mod/mod-extract.c:557:
+		uint32_t	r_addend;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1739: FILE: scripts/mod/mod-extract.c:558:
+		uint32_t	st_value;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1740: FILE: scripts/mod/mod-extract.c:559:
+		uint32_t	st_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1741: FILE: scripts/mod/mod-extract.c:560:
+		uint16_t	st_shndx;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1742: FILE: scripts/mod/mod-extract.c:561:
+		uint8_t		r_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1743: FILE: scripts/mod/mod-extract.c:562:
+		uint8_t		st_info;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1744: FILE: scripts/mod/mod-extract.c:563:
+		uint8_t		st_other;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1746: FILE: scripts/mod/mod-extract.c:565:
+	} __attribute__((packed)) relocation;

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Section>
#1753: FILE: scripts/mod/mod-extract.c:572:
+		Elf32_Section st_shndx;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1786: FILE: scripts/mod/mod-extract.c:605:
+			const char *name = strings + get32(&symbol->st_name);
+			write_out(name, strlen(name) + 1);

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Rel>
#1799: FILE: scripts/mod/mod-extract.c:618:
+		       const Elf32_Rel *relatab, size_t nrels,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1806: FILE: scripts/mod/mod-extract.c:625:
+		uint32_t	r_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1807: FILE: scripts/mod/mod-extract.c:626:
+		uint32_t	st_value;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1808: FILE: scripts/mod/mod-extract.c:627:
+		uint32_t	st_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1809: FILE: scripts/mod/mod-extract.c:628:
+		uint16_t	st_shndx;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1810: FILE: scripts/mod/mod-extract.c:629:
+		uint8_t		r_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1811: FILE: scripts/mod/mod-extract.c:630:
+		uint8_t		st_info;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1812: FILE: scripts/mod/mod-extract.c:631:
+		uint8_t		st_other;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1814: FILE: scripts/mod/mod-extract.c:633:
+	} __attribute__((packed)) relocation;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1853: FILE: scripts/mod/mod-extract.c:672:
+			const char *name = strings + get32(&symbol->st_name);
+			write_out(name, strlen(name) + 1);

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Xword>
#1895: FILE: scripts/mod/mod-extract.c:714:
+		Elf32_Xword sh_size	= get32(&sections[loop].sh_size);

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Off>
#1897: FILE: scripts/mod/mod-extract.c:716:
+		Elf32_Off   sh_offset	= get32(&sections[loop].sh_offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1948: FILE: scripts/mod/mod-extract.c:767:
+			const char *y = secstrings + get32(&sections[canonlist[loop + 1]].sh_name);
+			if (strcmp(x, y) > 0) {

ERROR:SPACING: space required before the open parenthesis '('
#1956: FILE: scripts/mod/mod-extract.c:775:
+	} while(changed);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1965: FILE: scripts/mod/mod-extract.c:784:
+			const char *x = secstrings + get32(&sections[loop].sh_name);
+			printf("%4d %s\n", canonmap[loop], x);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1971: FILE: scripts/mod/mod-extract.c:790:
+			const char *x = secstrings + get32(&sections[canonlist[loop]].sh_name);
+			printf("%4d %s\n", canonlist[loop], x);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1978: FILE: scripts/mod/mod-extract.c:797:
+	 * contribute to the signature */

WARNING:SPLIT_STRING: quoted string split across lines
#2005: FILE: scripts/mod/mod-extract.c:824:
+					"Invalid ELF - REL/RELA sh_info does"
+					" not refer to a valid section\n");

WARNING:INDENTED_LABEL: labels should not be indented
#2050: FILE: scripts/mod/mod-extract.c:869:
+	include_section:

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000467570.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 60 warnings, 112 checks, 1740 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000467570.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
