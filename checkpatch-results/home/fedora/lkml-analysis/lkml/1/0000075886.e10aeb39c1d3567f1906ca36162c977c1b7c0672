WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
how to get rid of \r\n. For convenience I attach also the raw patch with \n=

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#69: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#80: FILE: Documentation/hwmon/amc6821:6:
0x4d, 0x4e

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#236: FILE: drivers/hwmon/amc6821.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#237: FILE: drivers/hwmon/amc6821.c:2:
+/*
+	amc6821.c - Part of lm_sensors, Linux kernel modules for=20

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#257: FILE: drivers/hwmon/amc6821.c:17:
+^Ialong with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#258: FILE: drivers/hwmon/amc6821.c:18:
+^IFoundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#261: FILE: drivers/hwmon/amc6821.c:21:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: drivers/hwmon/amc6821.c:33:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#278: FILE: drivers/hwmon/amc6821.c:38:
+static const unsigned short normal_i2c[] =3D {0x18, 0x19, 0x1a, 0x2c, 0x2d=
                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#278: FILE: drivers/hwmon/amc6821.c:38:
+static const unsigned short normal_i2c[] =3D {0x18, 0x19, 0x1a, 0x2c, 0x2d=
                                                                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#283: FILE: drivers/hwmon/amc6821.c:41:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#289: FILE: drivers/hwmon/amc6821.c:47:
+static int pwminv =3D 0;	/*Inverted PWM output. */
                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#290: FILE: drivers/hwmon/amc6821.c:48:
+module_param(pwminv, int, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#292: FILE: drivers/hwmon/amc6821.c:50:
+static int init =3D 1; /*Power-on initialization.*/
                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#293: FILE: drivers/hwmon/amc6821.c:51:
+module_param(init, int, S_IRUGO);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#295: FILE: drivers/hwmon/amc6821.c:53:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#368: FILE: drivers/hwmon/amc6821.c:126:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#369: FILE: drivers/hwmon/amc6821.c:127:
+static int amc6821_probe(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#372: FILE: drivers/hwmon/amc6821.c:130:
+static int amc6821_detect(

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#384: FILE: drivers/hwmon/amc6821.c:142:
+static const struct i2c_device_id amc6821_id[] =3D {
                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#391: FILE: drivers/hwmon/amc6821.c:149:
+static struct i2c_driver amc6821_driver =3D {
                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#392: FILE: drivers/hwmon/amc6821.c:150:
+	.class =3D I2C_CLASS_HWMON,
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#393: FILE: drivers/hwmon/amc6821.c:151:
+	.driver =3D {
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#394: FILE: drivers/hwmon/amc6821.c:152:
+		.name	=3D "amc6821",
 		     	^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#396: FILE: drivers/hwmon/amc6821.c:154:
+	.probe =3D amc6821_probe,
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#397: FILE: drivers/hwmon/amc6821.c:155:
+	.remove =3D amc6821_remove,
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#398: FILE: drivers/hwmon/amc6821.c:156:
+	.id_table =3D amc6821_id,
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#399: FILE: drivers/hwmon/amc6821.c:157:
+	.detect =3D amc6821_detect,
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#400: FILE: drivers/hwmon/amc6821.c:158:
+	.address_data =3D &addr_data,
 	              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#400: FILE: drivers/hwmon/amc6821.c:158:
+	.address_data =3D &addr_data,
 	                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#403: FILE: drivers/hwmon/amc6821.c:161:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#406: FILE: drivers/hwmon/amc6821.c:164:
+ * Client data (each client gets its own)
+  */

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#410: FILE: drivers/hwmon/amc6821.c:168:
+	struct mutex update_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#441: FILE: drivers/hwmon/amc6821.c:199:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#442: FILE: drivers/hwmon/amc6821.c:200:
+#define get_temp_para(name) \
+static ssize_t get_##name(\
+		struct device *dev,\
+		struct device_attribute *devattr,\
+		char *buf)\
+{\
+	struct amc6821_data *data =3D amc6821_update_device(dev);\
+	return sprintf(buf, "%d\n", data->name * 1000);\
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#448: FILE: drivers/hwmon/amc6821.c:206:
+	struct amc6821_data *data =3D amc6821_update_device(dev);\
 	                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#461: FILE: drivers/hwmon/amc6821.c:219:
+#define set_temp_para(name, reg)\
+static ssize_t set_##name(\
+		struct device *dev,\
+		struct device_attribute *attr,\
+		const char *buf,\
+		size_t count)\
+{ \
+	struct i2c_client *client =3D to_i2c_client(dev); \
+	struct amc6821_data *data =3D i2c_get_clientdata(client); \
+	int val =3D simple_strtol(buf, NULL, 10); \
+	\
+	mutex_lock(&data->update_lock); \
+	data->name =3D SENSORS_LIMIT(val / 1000, -128, 127); \
+	if (i2c_smbus_write_byte_data(client, reg, data->name)) {\
+		dev_err(&client->dev, "Register write error, aborting.\n");\
+		count =3D -EIO;\
+	} \
+	mutex_unlock(&data->update_lock); \
+	return count; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#461: FILE: drivers/hwmon/amc6821.c:219:
+#define set_temp_para(name, reg)\
+static ssize_t set_##name(\
+		struct device *dev,\
+		struct device_attribute *attr,\
+		const char *buf,\
+		size_t count)\
+{ \
+	struct i2c_client *client =3D to_i2c_client(dev); \
+	struct amc6821_data *data =3D i2c_get_clientdata(client); \
+	int val =3D simple_strtol(buf, NULL, 10); \
+	\
+	mutex_lock(&data->update_lock); \
+	data->name =3D SENSORS_LIMIT(val / 1000, -128, 127); \
+	if (i2c_smbus_write_byte_data(client, reg, data->name)) {\
+		dev_err(&client->dev, "Register write error, aborting.\n");\
+		count =3D -EIO;\
+	} \
+	mutex_unlock(&data->update_lock); \
+	return count; \
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#468: FILE: drivers/hwmon/amc6821.c:226:
+	struct i2c_client *client =3D to_i2c_client(dev); \
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#469: FILE: drivers/hwmon/amc6821.c:227:
+	struct amc6821_data *data =3D i2c_get_clientdata(client); \
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#470: FILE: drivers/hwmon/amc6821.c:228:
+	int val =3D simple_strtol(buf, NULL, 10); \
 	        ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#470: FILE: drivers/hwmon/amc6821.c:228:
+	int val =3D simple_strtol(buf, NULL, 10); \

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#473: FILE: drivers/hwmon/amc6821.c:231:
+	data->name =3D SENSORS_LIMIT(val / 1000, -128, 127); \
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#476: FILE: drivers/hwmon/amc6821.c:234:
+		count =3D -EIO;\
 		      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#476: FILE: drivers/hwmon/amc6821.c:234:
+		count =3D -EIO;\
 		          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#489: FILE: drivers/hwmon/amc6821.c:247:
+#define get_temp_alarm(name, reg, mask)\
+static ssize_t get_##name(\
+	struct device *dev, \
+	struct device_attribute *devattr,\
+	char *buf)\
+{\
+	struct amc6821_data *data =3D amc6821_update_device(dev);\
+	if (data->reg &  mask)\
+		return sprintf(buf, "1");\
+	else	\
+		return sprintf(buf, "0");\
+} \
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mask' may be better as '(mask)' to avoid precedence issues
#489: FILE: drivers/hwmon/amc6821.c:247:
+#define get_temp_alarm(name, reg, mask)\
+static ssize_t get_##name(\
+	struct device *dev, \
+	struct device_attribute *devattr,\
+	char *buf)\
+{\
+	struct amc6821_data *data =3D amc6821_update_device(dev);\
+	if (data->reg &  mask)\
+		return sprintf(buf, "1");\
+	else	\
+		return sprintf(buf, "0");\
+} \
+

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#495: FILE: drivers/hwmon/amc6821.c:253:
+	struct amc6821_data *data =3D amc6821_update_device(dev);\
 	                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#509: FILE: drivers/hwmon/amc6821.c:267:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#510: FILE: drivers/hwmon/amc6821.c:268:
+static ssize_t get_temp2_fault(

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#515: FILE: drivers/hwmon/amc6821.c:273:
+	struct amc6821_data *data =3D amc6821_update_device(dev);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#516: FILE: drivers/hwmon/amc6821.c:274:
+	struct amc6821_data *data =3D amc6821_update_device(dev);
+	if (data->stat1 & AMC6821_STAT1_RTF)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#522: FILE: drivers/hwmon/amc6821.c:280:
+static ssize_t get_pwm1(

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#527: FILE: drivers/hwmon/amc6821.c:285:
+	struct amc6821_data *data =3D amc6821_update_device(dev);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#528: FILE: drivers/hwmon/amc6821.c:286:
+	struct amc6821_data *data =3D amc6821_update_device(dev);
+	return sprintf(buf, "%d\n", data->pwm1);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#531: FILE: drivers/hwmon/amc6821.c:289:
+static ssize_t set_pwm1(

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#537: FILE: drivers/hwmon/amc6821.c:295:
+	struct i2c_client *client =3D to_i2c_client(dev);
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#538: FILE: drivers/hwmon/amc6821.c:296:
+	struct amc6821_data *data =3D i2c_get_clientdata(client);
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#539: FILE: drivers/hwmon/amc6821.c:297:
+	int val =3D simple_strtol(buf, NULL, 10);
 	        ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#539: FILE: drivers/hwmon/amc6821.c:297:
+	int val =3D simple_strtol(buf, NULL, 10);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#542: FILE: drivers/hwmon/amc6821.c:300:
+	data->pwm1 =3D SENSORS_LIMIT(val , 0, 255);
 	           ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#542: FILE: drivers/hwmon/amc6821.c:300:
+	data->pwm1 =3D SENSORS_LIMIT(val , 0, 255);
 	                                 ^

CHECK:SPACING: space preferred before that '-' (ctx:VxE)
#543: FILE: drivers/hwmon/amc6821.c:301:
+	i2c_smbus_write_byte_data(client, AMC6821_REG_DCY, data-
 	                                                       ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#549: FILE: drivers/hwmon/amc6821.c:306:
+static ssize_t get_pwm1_enable(

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#554: FILE: drivers/hwmon/amc6821.c:311:
+	struct amc6821_data *data =3D amc6821_update_device(dev);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#555: FILE: drivers/hwmon/amc6821.c:312:
+	struct amc6821_data *data =3D amc6821_update_device(dev);
+	return sprintf(buf, "%d\n", data->pwm1_enable);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#558: FILE: drivers/hwmon/amc6821.c:315:
+static ssize_t set_pwm1_enable(

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#564: FILE: drivers/hwmon/amc6821.c:321:
+	struct i2c_client *client =3D to_i2c_client(dev);
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#565: FILE: drivers/hwmon/amc6821.c:322:
+	struct amc6821_data *data =3D i2c_get_clientdata(client);
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#566: FILE: drivers/hwmon/amc6821.c:323:
+	int val =3D simple_strtol(buf, NULL, 10);
 	        ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#566: FILE: drivers/hwmon/amc6821.c:323:
+	int val =3D simple_strtol(buf, NULL, 10);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#568: FILE: drivers/hwmon/amc6821.c:325:
+	int config =3D i2c_smbus_read_byte_data(client, AMC6821_REG_
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#570: FILE: drivers/hwmon/amc6821.c:326:
+	int config =3D i2c_smbus_read_byte_data(client, AMC6821_REG_
+	if (config < 0) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#570: FILE: drivers/hwmon/amc6821.c:326:
+	if (config < 0) {
+			dev_err(&client->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: drivers/hwmon/amc6821.c:328:
+			dev_err(&client->dev,
+			"Error reading configuration register, aborting.\n")

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: drivers/hwmon/amc6821.c:328:
+			dev_err(&client->dev,
;

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#579: FILE: drivers/hwmon/amc6821.c:334:
+		config &=3D ~AMC6821_CONF1_FDRC0;
 		       ^

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#580: FILE: drivers/hwmon/amc6821.c:335:
+		config &=3D ~AMC6821_CONF1_FDRC1;
 		       ^

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#583: FILE: drivers/hwmon/amc6821.c:338:
+		config &=3D ~AMC6821_CONF1_FDRC0;
 		       ^

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#584: FILE: drivers/hwmon/amc6821.c:339:
+		config |=3D AMC6821_CONF1_FDRC1;
 		       ^

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#587: FILE: drivers/hwmon/amc6821.c:342:
+		config |=3D AMC6821_CONF1_FDRC0;
 		       ^

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#588: FILE: drivers/hwmon/amc6821.c:343:
+		config |=3D AMC6821_CONF1_FDRC1;
 		       ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#594: FILE: drivers/hwmon/amc6821.c:349:
+	if (i2c_smbus_write_byte_data(client, AMC6821_REG_CONF1,=20
[...]
+			dev_err(&client->dev,

ERROR:SPACING: space required after that ',' (ctx:VxO)
#594: FILE: drivers/hwmon/amc6821.c:349:
+	if (i2c_smbus_write_byte_data(client, AMC6821_REG_CONF1,=20
 	                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#594: FILE: drivers/hwmon/amc6821.c:349:
+	if (i2c_smbus_write_byte_data(client, AMC6821_REG_CONF1,=20
 	                                                        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#594: FILE: drivers/hwmon/amc6821.c:349:
+	if (i2c_smbus_write_byte_data(client, AMC6821_REG_CONF1,=20

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: drivers/hwmon/amc6821.c:351:
+			dev_err(&client->dev,
+			"Configuration register write error, aborting.\n");

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#598: FILE: drivers/hwmon/amc6821.c:352:
+			count =3D -EIO;
 			      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#598: FILE: drivers/hwmon/amc6821.c:352:
+			count =3D -EIO;
 			          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#604: FILE: drivers/hwmon/amc6821.c:358:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#605: FILE: drivers/hwmon/amc6821.c:359:
+static ssize_t get_pwm1_auto_channels_temp(

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#610: FILE: drivers/hwmon/amc6821.c:364:
+	struct amc6821_data *data =3D amc6821_update_device(dev);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#611: FILE: drivers/hwmon/amc6821.c:365:
+	struct amc6821_data *data =3D amc6821_update_device(dev);
+	return sprintf(buf, "%d\n", data->pwm1_auto_channels_temp);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#614: FILE: drivers/hwmon/amc6821.c:368:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#615: FILE: drivers/hwmon/amc6821.c:369:
+#define get_auto_point(name)\
+static ssize_t get_##name(\
+		struct device *dev,\
+		struct device_attribute *devattr,\
+		char *buf)\
+{\
+	int nr =3D to_sensor_dev_attr(devattr)->index;\
+	struct amc6821_data *data =3D amc6821_update_device(dev);\
+	return sprintf(buf, "%d\n", data->name[nr] * 1000);\
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#621: FILE: drivers/hwmon/amc6821.c:375:
+	int nr =3D to_sensor_dev_attr(devattr)->index;\
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#622: FILE: drivers/hwmon/amc6821.c:376:
+	struct amc6821_data *data =3D amc6821_update_device(dev);\
 	                          ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#629: FILE: drivers/hwmon/amc6821.c:383:
+static ssize_t get_pwm1_auto_point_pwm(

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#634: FILE: drivers/hwmon/amc6821.c:388:
+	int nr =3D to_sensor_dev_attr(devattr)->index;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#635: FILE: drivers/hwmon/amc6821.c:389:
+	struct amc6821_data *data =3D amc6821_update_device(dev);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#636: FILE: drivers/hwmon/amc6821.c:390:
+	struct amc6821_data *data =3D amc6821_update_device(dev);
+	return sprintf(buf, "%d\n", data->pwm1_auto_point_pwm[nr]);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#639: FILE: drivers/hwmon/amc6821.c:393:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#640: FILE: drivers/hwmon/amc6821.c:394:
+#define set_temp_auto_point_temp(name, reg)\
+static ssize_t set_##name(\
+		struct device *dev,\
+		struct device_attribute *attr,\
+		const char *buf,\
+		size_t count)\
+{ \
+	struct i2c_client *client =3D to_i2c_client(dev); \
+	struct amc6821_data *data =3D amc6821_update_device(dev);\
+	int nr =3D to_sensor_dev_attr(attr)->index;\
+	int val =3D simple_strtol(buf, NULL, 10); \
+	u8 tmp;\
+	int dt;\
+	int dpwm;\
+	\
+	mutex_lock(&data->update_lock); \
+	switch (nr) {\
+	case 0:\
+		data->name[0] =3D SENSORS_LIMIT(val / 1000, 0,\
+				data->temp1_auto_point_temp[1]);\
+		data->name[0] =3D SENSORS_LIMIT(data->name[0], 0,\
+				data->temp2_auto_point_temp[1]);\
+		data->name[0] =3D SENSORS_LIMIT(data->name[0], 0, 63); \
+		data->valid =3D 0;\
+		if (i2c_smbus_write_byte_data(\
+					client,\
+					AMC6821_REG_PSV_TEMP,\
+					data->name[0])) {\
+				dev_err(&client->dev,\
+					"Register write error, aborting.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#640: FILE: drivers/hwmon/amc6821.c:394:
+#define set_temp_auto_point_temp(name, reg)\
+static ssize_t set_##name(\
+		struct device *dev,\
+		struct device_attribute *attr,\
+		const char *buf,\
+		size_t count)\
+{ \
+	struct i2c_client *client =3D to_i2c_client(dev); \
+	struct amc6821_data *data =3D amc6821_update_device(dev);\
+	int nr =3D to_sensor_dev_attr(attr)->index;\
+	int val =3D simple_strtol(buf, NULL, 10); \
+	u8 tmp;\
+	int dt;\
+	int dpwm;\
+	\
+	mutex_lock(&data->update_lock); \
+	switch (nr) {\
+	case 0:\
+		data->name[0] =3D SENSORS_LIMIT(val / 1000, 0,\
+				data->temp1_auto_point_temp[1]);\
+		data->name[0] =3D SENSORS_LIMIT(data->name[0], 0,\
+				data->temp2_auto_point_temp[1]);\
+		data->name[0] =3D SENSORS_LIMIT(data->name[0], 0, 63); \
+		data->valid =3D 0;\
+		if (i2c_smbus_write_byte_data(\
+					client,\
+					AMC6821_REG_PSV_TEMP,\
+					data->name[0])) {\
+				dev_err(&client->dev,\
+					"Register write error, aborting.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#647: FILE: drivers/hwmon/amc6821.c:401:
+	struct i2c_client *client =3D to_i2c_client(dev); \
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#648: FILE: drivers/hwmon/amc6821.c:402:
+	struct amc6821_data *data =3D amc6821_update_device(dev);\
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#649: FILE: drivers/hwmon/amc6821.c:403:
+	int nr =3D to_sensor_dev_attr(attr)->index;\
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#650: FILE: drivers/hwmon/amc6821.c:404:
+	int val =3D simple_strtol(buf, NULL, 10); \
 	        ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#650: FILE: drivers/hwmon/amc6821.c:404:
+	int val =3D simple_strtol(buf, NULL, 10); \

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#658: FILE: drivers/hwmon/amc6821.c:412:
+		data->name[0] =3D SENSORS_LIMIT(val / 1000, 0,\
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#660: FILE: drivers/hwmon/amc6821.c:414:
+		data->name[0] =3D SENSORS_LIMIT(data->name[0], 0,\
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#662: FILE: drivers/hwmon/amc6821.c:416:
+		data->name[0] =3D SENSORS_LIMIT(data->name[0], 0, 63); \
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#663: FILE: drivers/hwmon/amc6821.c:417:
+		data->valid =3D 0;\
 		            ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#664: FILE: drivers/hwmon/amc6821.c:418:
+		if (i2c_smbus_write_byte_data(\
[...]
+				dev_err(&client->dev,\

CHECK:CAMELCASE: Avoid CamelCase: <Register>
#702: FILE: drivers/hwmon/amc6821.c:453:
+		dev_err(&client->dev, "Register write error, aborting.\n");\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please don't use multiple blank lines
#770: FILE: drivers/hwmon/amc6821.c:515:
+
+

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#779: FILE: drivers/hwmon/amc6821.c:524:
+	return sprintf(buf, "%d\n", (int)(6000000 / data->name)); \
 	                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#798: FILE: drivers/hwmon/amc6821.c:543:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#824: FILE: drivers/hwmon/amc6821.c:569:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#828: FILE: drivers/hwmon/amc6821.c:573:
+
+

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#835: FILE: drivers/hwmon/amc6821.c:580:
+	return sprintf(buf, "%d\n", data->fan1_div);
 	                     ^

CHECK:CAMELCASE: Avoid CamelCase: <Error>
#851: FILE: drivers/hwmon/amc6821.c:595:
+			"Error reading configuration register, aborting.\n")

CHECK:CAMELCASE: Avoid CamelCase: <Configuration>
#872: FILE: drivers/hwmon/amc6821.c:614:
+			"Configuration register write error, aborting.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#879: FILE: drivers/hwmon/amc6821.c:621:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#960: FILE: drivers/hwmon/amc6821.c:686:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1002: FILE: drivers/hwmon/amc6821.c:728:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1013: FILE: drivers/hwmon/amc6821.c:739:
+	dev_dbg(&adapter->dev, "amc6821_detect called, kind =3D %d\n",=20
 	                                                    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1013: FILE: drivers/hwmon/amc6821.c:739:
+	dev_dbg(&adapter->dev, "amc6821_detect called, kind =3D %d\n",=20
 	                                                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1057: FILE: drivers/hwmon/amc6821.c:776:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1096: FILE: drivers/hwmon/amc6821.c:815:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1191: FILE: drivers/hwmon/amc6821.c:900:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1314: FILE: drivers/hwmon/amc6821.c:1019:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1328: FILE: drivers/hwmon/amc6821.c:1033:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000075886.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 60 errors, 20 warnings, 54 checks, 1245 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000075886.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
