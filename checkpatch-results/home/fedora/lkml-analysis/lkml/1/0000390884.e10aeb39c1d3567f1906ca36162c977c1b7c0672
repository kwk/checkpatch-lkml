CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#132: FILE: arch/um/drivers/mconsole_kern.c:78:
+			if (new == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#165: FILE: arch/um/drivers/mconsole_kern.c:111:
+	printk(KERN_WARNING "%.*s", len, ptr);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#174: FILE: arch/um/drivers/mconsole_kern.c:130:
+	while (isspace(*ptr)) ptr++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc"
#178: FILE: arch/um/drivers/mconsole_kern.c:133:
+	if (proc == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!super"
#186: FILE: arch/um/drivers/mconsole_kern.c:140:
+	if (super == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#210: FILE: arch/um/drivers/mconsole_kern.c:168:
+	if (buf == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_op != NULL'
#216: FILE: arch/um/drivers/mconsole_kern.c:173:
+	if ((file->f_op != NULL) && (file->f_op->read != NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_op->read != NULL'
#216: FILE: arch/um/drivers/mconsole_kern.c:173:
+	if ((file->f_op != NULL) && (file->f_op->read != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file->f_op"
#216: FILE: arch/um/drivers/mconsole_kern.c:173:
+	if ((file->f_op != NULL) && (file->f_op->read != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file->f_op->read"
#216: FILE: arch/um/drivers/mconsole_kern.c:173:
+	if ((file->f_op != NULL) && (file->f_op->read != NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#247: FILE: arch/um/drivers/mconsole_kern.c:217:
+		printk(KERN_ERR "open %s: %d\n",path,fd);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: arch/um/drivers/mconsole_kern.c:217:
+		printk(KERN_ERR "open %s: %d\n",path,fd);
 		                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: arch/um/drivers/mconsole_kern.c:217:
+		printk(KERN_ERR "open %s: %d\n",path,fd);
 		                                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#253: FILE: arch/um/drivers/mconsole_kern.c:222:
+	if (buf == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#338: FILE: arch/um/drivers/mconsole_kern.c:423:
+			if (page == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#355: FILE: arch/um/drivers/mconsole_kern.c:440:
+					printk(KERN_ERR "Failed to release "

WARNING:SPLIT_STRING: quoted string split across lines
#356: FILE: arch/um/drivers/mconsole_kern.c:441:
+					printk(KERN_ERR "Failed to release "
+					       "memory - errno = %d\n", err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#369: FILE: arch/um/drivers/mconsole_kern.c:497:
+	else printk(KERN_ERR "Can't release memory to the host - memory "

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#369: FILE: arch/um/drivers/mconsole_kern.c:497:
+	else printk(KERN_ERR "Can't release memory to the host - memory "

WARNING:SPLIT_STRING: quoted string split across lines
#370: FILE: arch/um/drivers/mconsole_kern.c:498:
+	else printk(KERN_ERR "Can't release memory to the host - memory "
+		    "hotplug won't be supported\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!get_config"
#379: FILE: arch/um/drivers/mconsole_kern.c:513:
+	if (get_config == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "error"
#391: FILE: arch/um/drivers/mconsole_kern.c:524:
+		if (error != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#409: FILE: arch/um/drivers/mconsole_kern.c:539:
+		if (buf == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#429: FILE: arch/um/drivers/mconsole_kern.c:559:
+	if (dev == NULL) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#450: FILE: arch/um/drivers/mconsole_kern.c:584:
+	while (isspace(*ptr)) ptr++;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#453: FILE: arch/um/drivers/mconsole_kern.c:586:
+	if (dev == NULL) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#467: FILE: arch/um/drivers/mconsole_kern.c:599:
 	}
+	else if ((n < start) || (n > end)) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#476: FILE: arch/um/drivers/mconsole_kern.c:608:
+	switch(err) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!err_msg"
#482: FILE: arch/um/drivers/mconsole_kern.c:613:
+		if (err_msg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!err_msg"
#487: FILE: arch/um/drivers/mconsole_kern.c:617:
+		if (err_msg == NULL)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#520: FILE: arch/um/drivers/mconsole_kern.c:713:
+	while (isspace(*ptr)) ptr++;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#564: FILE: arch/um/drivers/mconsole_kern.c:766:
+	if (sscanf(ptr, "%d", &pid_requested) == 0) {
 		mconsole_reply(req, "Please specify a pid", 1, 0);
 		return;
 	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'to == NULL'
#573: FILE: arch/um/drivers/mconsole_kern.c:774:
+	if ((to == NULL) || (pid_requested == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pid_requested == 0'
#573: FILE: arch/um/drivers/mconsole_kern.c:774:
+	if ((to == NULL) || (pid_requested == 0)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!to"
#573: FILE: arch/um/drivers/mconsole_kern.c:774:
+	if ((to == NULL) || (pid_requested == 0)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#600: FILE: arch/um/drivers/mconsole_kern.c:800:
+		printk(KERN_ERR "Failed to initialize management console\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#613: FILE: arch/um/drivers/mconsole_kern.c:810:
+		printk(KERN_ERR "Failed to get IRQ for management console\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "notify_socket"
#618: FILE: arch/um/drivers/mconsole_kern.c:814:
+	if (notify_socket != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "notify_socket"
#621: FILE: arch/um/drivers/mconsole_kern.c:816:
+		if (notify_socket != NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#630: FILE: arch/um/drivers/mconsole_kern.c:824:
+	printk(KERN_INFO "mconsole (version %d) initialized on %s\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#643: FILE: arch/um/drivers/mconsole_kern.c:837:
+	if (buf == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!notify_socket"
#664: FILE: arch/um/drivers/mconsole_kern.c:857:
+	if (notify_socket == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ent"
#671: FILE: arch/um/drivers/mconsole_kern.c:861:
+	if (ent == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#672: FILE: arch/um/drivers/mconsole_kern.c:862:
+		printk(KERN_INFO "create_proc_mconsole : create_proc_entry "

WARNING:SPLIT_STRING: quoted string split across lines
#673: FILE: arch/um/drivers/mconsole_kern.c:863:
+		printk(KERN_INFO "create_proc_mconsole : create_proc_entry "
+		       "failed\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#689: FILE: arch/um/drivers/mconsole_kern.c:890:
+	if (!strncmp(str, NOTIFY, strlen(NOTIFY))) {
[...]
 	else printk(KERN_ERR "mconsole_setup : Unknown option - '%s'\n", str);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!notify_socket"
#704: FILE: arch/um/drivers/mconsole_kern.c:913:
+	if (notify_socket == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#768: FILE: include/asm-um/a.out.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#783: FILE: include/asm-um/tlbflush.h:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#826: FILE: arch/um/include/um_uaccess.h:13:
+	 (((unsigned long) (addr) + (size)) < TASK_SIZE))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390884.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 14 warnings, 28 checks, 719 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390884.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
