WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> > > > > > > Do you really want to run other LSMs within a containerd kernel?  Is

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#195: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#200: FILE: include/linux/devcg.h:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#206: FILE: include/linux/devcg.h:7:
+#include <asm/uaccess.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#244: FILE: include/linux/devcg.h:45:
+	spinlock_t lock;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#247: FILE: include/linux/devcg.h:48:
+static inline struct dev_cgroup *cgroup_to_devcg(

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#261: FILE: init/Kconfig:301:
+config CGROUP_DEV
+	bool "Device controller for cgroups"
+	depends on CGROUPS && SECURITY && EXPERIMENTAL
+	help
+	  Provides a cgroup implementing whitelists for devices which
+	  a process in the cgroup can mknod or open.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#289: FILE: kernel/dev_cgroup.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: kernel/dev_cgroup.c:10:
+static int devcg_can_attach(struct cgroup_subsys *ss,
+		struct cgroup *new_cgroup, struct task_struct *task)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: kernel/dev_cgroup.c:63:
+void dev_whitelist_add(struct dev_cgroup *dev_cgroup,
+			struct dev_whitelist_item *wh)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: kernel/dev_cgroup.c:75:
+void dev_whitelist_rm(struct dev_cgroup *dev_cgroup,
+			struct dev_whitelist_item *wh)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent_cgroup"
#412: FILE: kernel/dev_cgroup.c:124:
+	if (parent_cgroup == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: kernel/dev_cgroup.c:126:
+		struct dev_whitelist_item *wh;
+		wh = kmalloc(sizeof(*wh), GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#415: FILE: kernel/dev_cgroup.c:127:
+		wh->minor = wh->major = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: kernel/dev_cgroup.c:134:
+		ret = dev_whitelist_copy(&dev_cgroup->whitelist,
+				&parent_dev_cgroup->whitelist);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: kernel/dev_cgroup.c:146:
+static void devcg_destroy(struct cgroup_subsys *ss,
+			struct cgroup *cgroup)

WARNING:LINE_SPACING: Missing a blank line after declarations
#453: FILE: kernel/dev_cgroup.c:165:
+	int idx = 0;
+	memset(acc, 0, 4);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#490: FILE: kernel/dev_cgroup.c:202:
+		printk(KERN_NOTICE

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hd' is unnecessary
#490: FILE: kernel/dev_cgroup.c:202:
+		printk(KERN_NOTICE
+			"%s (count%d): whtype %hd maj %u min %u acc %hd\n",
+			__FUNCTION__, count, wh->type, wh->major, wh->minor,
+			wh->access);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hd' is unnecessary
#490: FILE: kernel/dev_cgroup.c:202:
+		printk(KERN_NOTICE
+			"%s (count%d): whtype %hd maj %u min %u acc %hd\n",
+			__FUNCTION__, count, wh->type, wh->major, wh->minor,
+			wh->access);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#492: FILE: kernel/dev_cgroup.c:204:
+			__FUNCTION__, count, wh->type, wh->major, wh->minor,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#494: FILE: kernel/dev_cgroup.c:206:
+		ret = snprintf(s, 4095-(s-buf), "%c %u %u %s\n",
 		                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#494: FILE: kernel/dev_cgroup.c:206:
+		ret = snprintf(s, 4095-(s-buf), "%c %u %u %s\n",
 		                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: kernel/dev_cgroup.c:207:
+		ret = snprintf(s, 4095-(s-buf), "%c %u %u %s\n",
+			type_to_char(wh->type), wh->major, wh->minor, acc);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#496: FILE: kernel/dev_cgroup.c:208:
+		if (s+ret >= buf+4095) {
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#496: FILE: kernel/dev_cgroup.c:208:
+		if (s+ret >= buf+4095) {
 		                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: kernel/dev_cgroup.c:223:
+static ssize_t devcg_access_read(struct cgroup *cgroup,
+			struct cftype *cft, struct file *file,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#537: FILE: kernel/dev_cgroup.c:249:
+		case 'R': access |= ACC_READ; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#539: FILE: kernel/dev_cgroup.c:251:
+		case 'W': access |= ACC_WRITE; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#541: FILE: kernel/dev_cgroup.c:253:
+		case 'M': access |= ACC_MKNOD; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#542: FILE: kernel/dev_cgroup.c:254:
+		case '\n': break;

WARNING:LINE_SPACING: Missing a blank line after declarations
#555: FILE: kernel/dev_cgroup.c:267:
+	short type = 0;
+	switch (intype) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#556: FILE: kernel/dev_cgroup.c:268:
+	case 'a': type = DEV_ALL; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#557: FILE: kernel/dev_cgroup.c:269:
+	case 'c': type = DEV_CHAR; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#558: FILE: kernel/dev_cgroup.c:270:
+	case 'b': type = DEV_BLOCK; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#559: FILE: kernel/dev_cgroup.c:271:
+	default: type = -EACCES; break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: kernel/dev_cgroup.c:277:
+static ssize_t devcg_access_write(struct cgroup *cgroup, struct cftype *cft,
+				struct file *file, const char __user *userbuf,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#584: FILE: kernel/dev_cgroup.c:296:
+	buffer = kmalloc(nbytes+1, GFP_KERNEL);
 	                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#622: FILE: kernel/dev_cgroup.c:334:
+		printk(KERN_NOTICE

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#624: FILE: kernel/dev_cgroup.c:336:
+			__FUNCTION__, wh->type, wh->major, wh->minor,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: kernel/dev_cgroup.c:373:
+static int devcg_populate(struct cgroup_subsys *ss,
+				struct cgroup *cont)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#732: FILE: security/dev_cgroup.c:1:
+/*

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#743: FILE: security/dev_cgroup.c:12:
+				    struct nameidata *nd)
 				                      ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: security/dev_cgroup.c:12:
+static int devcgroup_inode_permission(struct inode *inode, int mask,
+				    struct nameidata *nd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#750: FILE: security/dev_cgroup.c:19:
+	dev_t device = inode->i_rdev;
+	if (!device)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#787: FILE: security/dev_cgroup.c:56:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#808: FILE: security/dev_cgroup.c:77:
+	printk(KERN_NOTICE "%s: %d denied %d access to (%d %d)\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#808: FILE: security/dev_cgroup.c:77:
+	printk(KERN_NOTICE "%s: %d denied %d access to (%d %d)\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: security/dev_cgroup.c:78:
+	printk(KERN_NOTICE "%s: %d denied %d access to (%d %d)\n", __FUNCTION__,
+		current->pid, mode, MAJOR(dev), MINOR(dev));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#818: FILE: security/dev_cgroup.c:87:
+^I.inode_mknod = ^I^I^Idevcgroup_inode_mknod,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#819: FILE: security/dev_cgroup.c:88:
+^I.inode_permission = ^I^Idevcgroup_inode_permission,$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#852: FILE: security/dev_cgroup.c:121:
+static int __init dev_cgroup_security_init (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#855: FILE: security/dev_cgroup.c:124:
+	if (register_security (&devcgroup_security_ops)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&devcgroup_security_ops'
#855: FILE: security/dev_cgroup.c:124:
+	if (register_security (&devcgroup_security_ops)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#856: FILE: security/dev_cgroup.c:125:
+		printk (KERN_INFO "Failure registering device cgroup lsm\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#856: FILE: security/dev_cgroup.c:125:
+		printk (KERN_INFO "Failure registering device cgroup lsm\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#859: FILE: security/dev_cgroup.c:128:
+	printk (KERN_INFO "Device cgroup LSM initialized\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#859: FILE: security/dev_cgroup.c:128:
+	printk (KERN_INFO "Device cgroup LSM initialized\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#863: FILE: security/dev_cgroup.c:132:
+security_initcall (dev_cgroup_security_init);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000309134.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 29 warnings, 21 checks, 658 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000309134.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
