WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> - NORMAL->NORMAL->....->DMA->DMA->DMA order (new ordering) is now default.

WARNING:TYPO_SPELLING: 'addes' may be misspelled - perhaps 'adds'?
#35: 
> - addes boot opttion to set relaxed_zone_order. ia64 is supported now.
    ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#89: 
Signed-off-by:  Lee Schermerhorn <lee.schermerhorn@hp.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#122: FILE: mm/page_alloc.c:2115:
+static int zonelist_order = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: mm/page_alloc.c:2129:
+		strncpy(numa_zonelist_order, "default",
+					NUMA_ZONELIST_ORDER_LEN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: mm/page_alloc.c:2133:
+		strncpy(numa_zonelist_order, "node",
+					NUMA_ZONELIST_ORDER_LEN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: mm/page_alloc.c:2137:
+		strncpy(numa_zonelist_order, "zone",
+					NUMA_ZONELIST_ORDER_LEN);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#147: FILE: mm/page_alloc.c:2140:
+		printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#149: FILE: mm/page_alloc.c:2142:
+			"Ignoring invalid numa_zonelist_order value:  "
+			"%s\n", s);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#161: FILE: mm/page_alloc.c:2154:
+}
+early_param("numa_zonelist_order", setup_numa_zonelist_order);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#183: FILE: mm/page_alloc.c:2169:
+		for (j = 0; zonelist->zones[j] != NULL; j++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zonelist->zones[j]"
#183: FILE: mm/page_alloc.c:2169:
+		for (j = 0; zonelist->zones[j] != NULL; j++);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: mm/page_alloc.c:2171:
+ ^I^Ij = build_zonelists_node(NODE_DATA(node), zonelist, j, i);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: mm/page_alloc.c:2171:
+ ^I^Ij = build_zonelists_node(NODE_DATA(node), zonelist, j, i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: mm/page_alloc.c:2171:
+ ^I^Ij = build_zonelists_node(NODE_DATA(node), zonelist, j, i);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: mm/page_alloc.c:2284:
+int numa_zonelist_order_handler(ctl_table *table, int write,
+		struct file *file, void __user *buffer, size_t *length,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#369: FILE: mm/page_alloc.c:2291:
+		strncpy(saved_string, (char*)table->data,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: mm/page_alloc.c:2298:
+		int oldval = zonelist_order;
+		if (__parse_numa_zonelist_order((char*)table->data)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#376: FILE: mm/page_alloc.c:2298:
+		if (__parse_numa_zonelist_order((char*)table->data)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#376: FILE: mm/page_alloc.c:2298:
+		if (__parse_numa_zonelist_order((char*)table->data)) {
[...]
+		} else if (oldval != zonelist_order)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#380: FILE: mm/page_alloc.c:2302:
+			strncpy((char*)table->data, saved_string,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#431: FILE: include/linux/mmzone.h:611:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ctl_table *' should also have an identifier name
#431: FILE: include/linux/mmzone.h:611:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#431: FILE: include/linux/mmzone.h:611:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#431: FILE: include/linux/mmzone.h:611:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#431: FILE: include/linux/mmzone.h:611:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#431: FILE: include/linux/mmzone.h:611:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#431: FILE: include/linux/mmzone.h:611:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: include/linux/mmzone.h:612:
+extern int numa_zonelist_order_handler(struct ctl_table *, int,
 			struct file *, void __user *, size_t *, loff_t *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440306.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 14 warnings, 9 checks, 399 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440306.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
