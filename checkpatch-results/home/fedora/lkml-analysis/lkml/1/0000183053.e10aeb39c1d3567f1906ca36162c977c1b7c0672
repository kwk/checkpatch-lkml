WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: include/linux/btree.h:1:
+#ifndef _LINUX_BTREE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#104: FILE: include/linux/btree.h:18:
+#define BTREE_ITEM_HALF (BTREE_ITEM_MAX/2)
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct btree_vec *' should also have an identifier name
#134: FILE: include/linux/btree.h:48:
+	void (*flush)(struct btree_vec *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LINE_SPACING: Missing a blank line after declarations
#146: FILE: include/linux/btree.h:60:
+	void *ptr = rcu_dereference(itemp->data);
+	__clear_bit(0, (void *)&ptr);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/btree.h:74:
+extern struct btree_item *btree_search_next(struct btree_root *root,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: include/linux/btree.h:75:
+extern struct btree_item *btree_search_next(struct btree_root *root,
+		unsigned long index, struct btree_item **nextp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: include/linux/btree.h:89:
+static inline void *btree_lookup_next(struct btree_root *root,
+		unsigned long index, void **nextp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: include/linux/btree.h:114:
+static inline void *btree_stab_next(struct btree_root *root,
+		unsigned long index, void **nextp)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#213: FILE: include/linux/btree.h:127:
+extern int btree_preload(struct btree_root *, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: include/linux/btree.h:128:
+extern int btree_insert(struct btree_root *, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct btree_root *' should also have an identifier name
#214: FILE: include/linux/btree.h:128:
+extern int btree_insert(struct btree_root *, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#214: FILE: include/linux/btree.h:128:
+extern int btree_insert(struct btree_root *, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#214: FILE: include/linux/btree.h:128:
+extern int btree_insert(struct btree_root *, unsigned long, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#215: FILE: include/linux/btree.h:129:
+extern int btree_update(struct btree_root *, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct btree_root *' should also have an identifier name
#215: FILE: include/linux/btree.h:129:
+extern int btree_update(struct btree_root *, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#215: FILE: include/linux/btree.h:129:
+extern int btree_update(struct btree_root *, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#215: FILE: include/linux/btree.h:129:
+extern int btree_update(struct btree_root *, unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: include/linux/btree.h:130:
+extern void *btree_remove(struct btree_root *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct btree_root *' should also have an identifier name
#216: FILE: include/linux/btree.h:130:
+extern void *btree_remove(struct btree_root *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#216: FILE: include/linux/btree.h:130:
+extern void *btree_remove(struct btree_root *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: include/linux/btree.h:132:
+extern void btree_root_init(struct btree_root *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct btree_root *' should also have an identifier name
#218: FILE: include/linux/btree.h:132:
+extern void btree_root_init(struct btree_root *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#218: FILE: include/linux/btree.h:132:
+extern void btree_root_init(struct btree_root *, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: include/linux/btree.h:133:
+extern void btree_root_destroy(struct btree_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct btree_root *' should also have an identifier name
#219: FILE: include/linux/btree.h:133:
+extern void btree_root_destroy(struct btree_root *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: include/linux/btree.h:135:
+extern void btree_vec_flush(struct btree_vec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct btree_vec *' should also have an identifier name
#221: FILE: include/linux/btree.h:135:
+extern void btree_vec_flush(struct btree_vec *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: include/linux/btree.h:137:
+#define BTREE_INIT_FLUSH(gfp, f) (struct btree_root){ ^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#223: FILE: include/linux/btree.h:137:
+#define BTREE_INIT_FLUSH(gfp, f) (struct btree_root){ 	\
+	.root = NULL, 					\
+	.height = 0,					\
+	.allocvec = NULL,				\
+	.freevec = NULL,				\
+	.gfp_mask = (gfp),				\
+	.flush = (f),					\
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: include/linux/btree.h:138:
+^I.root = NULL, ^I^I^I^I^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#234: FILE: include/linux/btree.h:148:
+extern void __init btree_init(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#256: FILE: lib/btree.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: lib/btree.c:46:
+static inline void btree_ptr_flip(struct btree_root *root,
+		void **nodep, void *new)

WARNING:LINE_SPACING: Missing a blank line after declarations
#304: FILE: lib/btree.c:49:
+	void *old = rcu_dereference(*nodep);
+	rcu_assign_pointer(*nodep, new);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: lib/btree.c:69:
+static inline void btree_item_key_set(struct btree_item *itemp,
+		unsigned long index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: lib/btree.c:79:
+static void btree_item_flip(struct btree_root *root,
+		struct btree_item *itemp, struct btree_node *new)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#348: FILE: lib/btree.c:93:
+	memcpy(dst, src, nr*sizeof(struct btree_item));
 	                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: lib/btree.c:101:
+	for (j = 0; j < BTREE_ITEM_MAX &&
+			node->item[j].data ; j++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#367: FILE: lib/btree.c:112:
+	BUG_ON(pos < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#371: FILE: lib/btree.c:116:
+	BUG_ON(!node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: lib/btree.c:122:
+static inline void btree_item_free(struct btree_root *root,
+		struct btree_item *itemp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: lib/btree.c:130:
+	BUG_ON(nr < 0 || nr > BTREE_NODE_REPLACE);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*root->allocvec)...) over kzalloc(sizeof(struct btree_vec)...)
#410: FILE: lib/btree.c:155:
+		root->allocvec = kzalloc(sizeof(struct btree_vec), gfp_mask);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*root->freevec)...) over kzalloc(sizeof(struct btree_vec)...)
#416: FILE: lib/btree.c:161:
+		root->freevec = kzalloc(sizeof(struct btree_vec), gfp_mask);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#421: FILE: lib/btree.c:166:
+	ret = btree_vec_alloc(root->allocvec, 1+2*root->height, gfp_mask);
 	                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#421: FILE: lib/btree.c:166:
+	ret = btree_vec_alloc(root->allocvec, 1+2*root->height, gfp_mask);
 	                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: lib/btree.c:177:
+static int btree_mod_finish(struct btree_root *root, unsigned long index,
+		char *op)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#437: FILE: lib/btree.c:182:
+		printk(KERN_DEBUG "modified(%s): %lu\n", op, index);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#439: FILE: lib/btree.c:184:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: lib/btree.c:212:
+static inline void btree_stack_push(struct btree_stack *stack,
+		struct btree_node *node, int offset)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#473: FILE: lib/btree.c:218:
+	BUG_ON(stack->p > ARRAY_SIZE(stack->path));

WARNING:TYPO_SPELLING: 'offsetp' may be misspelled - perhaps 'offset'?
#477: FILE: lib/btree.c:222:
+		struct btree_node **nodep, int *offsetp)
 		                                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: lib/btree.c:222:
+static inline void btree_stack_pop(struct btree_stack *stack,
+		struct btree_node **nodep, int *offsetp)

WARNING:TYPO_SPELLING: 'offsetp' may be misspelled - perhaps 'offset'?
#481: FILE: lib/btree.c:226:
+	*offsetp = stack->path[stack->p].offset;
 	 ^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#483: FILE: lib/btree.c:228:
+	BUG_ON(stack->p < 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: lib/btree.c:297:
+int __btree_item_search(struct btree_root *root,
+		struct btree_node *node, unsigned long index)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->item[i].data"
#557: FILE: lib/btree.c:302:
+		if (node->item[i].data == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#558: FILE: lib/btree.c:303:
+		if (node->item[i].data == NULL ||
+				index < btree_item_key(&node->item[i]))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: lib/btree.c:313:
+static struct btree_item *__btree_search(struct btree_root *root,
+		struct btree_stack *stack, unsigned long index)

CHECK:BRACES: braces {} should be used on all arms of this statement
#584: FILE: lib/btree.c:329:
+		if (unlikely(btree_item_key(&node->item[0]) > index)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#596: FILE: lib/btree.c:341:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: lib/btree.c:360:
+static struct btree_item *__btree_find_first(struct btree_root *root,
+		struct btree_stack *stack, struct btree_node *node, int offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: lib/btree.c:383:
+struct btree_item *btree_search_next(struct btree_root *root,
+		unsigned long index, struct btree_item **nextp)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#651: FILE: lib/btree.c:396:
+				offset == BTREE_ITEM_MAX-1);
 				                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#653: FILE: lib/btree.c:398:
+		if (offset != BTREE_ITEM_MAX-1) {
 		                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#653: FILE: lib/btree.c:398:
+		if (offset != BTREE_ITEM_MAX-1) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#656: FILE: lib/btree.c:401:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: lib/btree.c:424:
+int btree_insert(struct btree_root *root,
+		unsigned long index, void *data)

CHECK:BRACES: braces {} should be used on all arms of this statement
#705: FILE: lib/btree.c:450:
+		if (!root->root) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#709: FILE: lib/btree.c:454:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#725: FILE: lib/btree.c:470:
+				BUG_ON(btree_item_deref(item) != old_node);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#746: FILE: lib/btree.c:491:
+				update->item[i-1] = (struct btree_item){
 				              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#754: FILE: lib/btree.c:499:
+				btree_item_free(root, &node->item[i-1]);
 				                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#771: FILE: lib/btree.c:516:
+				update->item[i+1] = (struct btree_item){
 				              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#776: FILE: lib/btree.c:521:
+				btree_item_free(root, &node->item[i+1]);
 				                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#784: FILE: lib/btree.c:529:
+			BUG_ON(left || right);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#789: FILE: lib/btree.c:534:
+		if (btree_item_deref(item) &&
+				btree_item_key(item) < nitem.key)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#797: FILE: lib/btree.c:542:
+		if (node->item[BTREE_ITEM_MAX-1].data == NULL) {
 		                             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->item[BTREE_ITEM_MAX-1].data"
#797: FILE: lib/btree.c:542:
+		if (node->item[BTREE_ITEM_MAX-1].data == NULL) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#804: FILE: lib/btree.c:549:
+				btree_item_flip(root, &new->item[i-1], update);
 				                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#813: FILE: lib/btree.c:558:
+		if (uleft && uleft->item[BTREE_ITEM_MAX-1].data == NULL) {
 		                                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uleft->item[BTREE_ITEM_MAX-1].data"
#813: FILE: lib/btree.c:558:
+		if (uleft && uleft->item[BTREE_ITEM_MAX-1].data == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#814: FILE: lib/btree.c:559:
+		if (uleft && uleft->item[BTREE_ITEM_MAX-1].data == NULL) {
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#816: FILE: lib/btree.c:561:
+			n = (BTREE_ITEM_MAX - j + 1)/2;
 			                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#828: FILE: lib/btree.c:573:
+				btree_item_copy(left->item+j, node->item, i);
 				                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#829: FILE: lib/btree.c:574:
+				left->item[j+i] = nitem;
 				            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#830: FILE: lib/btree.c:575:
+				btree_item_copy(left->item+j+i+1, node->item+i,
 				                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#830: FILE: lib/btree.c:575:
+				btree_item_copy(left->item+j+i+1, node->item+i,
 				                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#830: FILE: lib/btree.c:575:
+				btree_item_copy(left->item+j+i+1, node->item+i,
 				                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#830: FILE: lib/btree.c:575:
+				btree_item_copy(left->item+j+i+1, node->item+i,
 				                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#831: FILE: lib/btree.c:576:
+						n-i-1);
 						 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#831: FILE: lib/btree.c:576:
+						n-i-1);
 						   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#832: FILE: lib/btree.c:577:
+				btree_item_copy(new->item, node->item+n-1,
 				                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#832: FILE: lib/btree.c:577:
+				btree_item_copy(new->item, node->item+n-1,
 				                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#833: FILE: lib/btree.c:578:
+						BTREE_ITEM_MAX-n+1);
 						              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#833: FILE: lib/btree.c:578:
+						BTREE_ITEM_MAX-n+1);
 						                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#835: FILE: lib/btree.c:580:
+				btree_item_copy(left->item+j, node->item, n);
 				                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#836: FILE: lib/btree.c:581:
+				btree_item_copy(new->item, node->item+n, i-n);
 				                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#836: FILE: lib/btree.c:581:
+				btree_item_copy(new->item, node->item+n, i-n);
 				                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#837: FILE: lib/btree.c:582:
+				new->item[i-n] = nitem;
 				           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#838: FILE: lib/btree.c:583:
+				btree_item_copy(new->item+i-n+1, node->item+i,
 				                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#838: FILE: lib/btree.c:583:
+				btree_item_copy(new->item+i-n+1, node->item+i,
 				                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#838: FILE: lib/btree.c:583:
+				btree_item_copy(new->item+i-n+1, node->item+i,
 				                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#838: FILE: lib/btree.c:583:
+				btree_item_copy(new->item+i-n+1, node->item+i,
 				                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#839: FILE: lib/btree.c:584:
+						BTREE_ITEM_MAX-i+n-1);
 						              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#839: FILE: lib/btree.c:584:
+						BTREE_ITEM_MAX-i+n-1);
 						                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#839: FILE: lib/btree.c:584:
+						BTREE_ITEM_MAX-i+n-1);
 						                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#843: FILE: lib/btree.c:588:
+				if (i-1 < n) {
 				     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#845: FILE: lib/btree.c:590:
+							&left->item[j+i-1],
 							             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#845: FILE: lib/btree.c:590:
+							&left->item[j+i-1],
 							               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#848: FILE: lib/btree.c:593:
+					btree_item_flip(root, &new->item[i-n-1],
 					                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#848: FILE: lib/btree.c:593:
+					btree_item_flip(root, &new->item[i-n-1],
 					                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#858: FILE: lib/btree.c:603:
+		if (uright && uright->item[BTREE_ITEM_MAX-1].data == NULL) {
 		                                         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uright->item[BTREE_ITEM_MAX-1].data"
#858: FILE: lib/btree.c:603:
+		if (uright && uright->item[BTREE_ITEM_MAX-1].data == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#859: FILE: lib/btree.c:604:
+		if (uright && uright->item[BTREE_ITEM_MAX-1].data == NULL) {
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#861: FILE: lib/btree.c:606:
+			n = (BTREE_ITEM_MAX - j + 1)/2;
 			                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#871: FILE: lib/btree.c:616:
+			if (i <= BTREE_ITEM_MAX-n) {
 			                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#874: FILE: lib/btree.c:619:
+				btree_item_copy(new->item+i+1, node->item+i,
 				                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#874: FILE: lib/btree.c:619:
+				btree_item_copy(new->item+i+1, node->item+i,
 				                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#874: FILE: lib/btree.c:619:
+				btree_item_copy(new->item+i+1, node->item+i,
 				                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#875: FILE: lib/btree.c:620:
+						BTREE_ITEM_MAX-n-i);
 						              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#875: FILE: lib/btree.c:620:
+						BTREE_ITEM_MAX-n-i);
 						                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#877: FILE: lib/btree.c:622:
+						node->item+BTREE_ITEM_MAX-n, n);
 						          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#877: FILE: lib/btree.c:622:
+						node->item+BTREE_ITEM_MAX-n, n);
 						                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#878: FILE: lib/btree.c:623:
+				btree_item_copy(right->item+n, uright->item, j);
 				                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#881: FILE: lib/btree.c:626:
+						BTREE_ITEM_MAX-n);
 						              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#884: FILE: lib/btree.c:629:
+						node->item+(BTREE_ITEM_MAX-n),
 						          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#884: FILE: lib/btree.c:629:
+						node->item+(BTREE_ITEM_MAX-n),
 						                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#885: FILE: lib/btree.c:630:
+						i-(BTREE_ITEM_MAX-n));
 						 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#885: FILE: lib/btree.c:630:
+						i-(BTREE_ITEM_MAX-n));
 						                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#886: FILE: lib/btree.c:631:
+				right->item[i-(BTREE_ITEM_MAX-n)] = nitem;
 				             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#886: FILE: lib/btree.c:631:
+				right->item[i-(BTREE_ITEM_MAX-n)] = nitem;
 				                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#887: FILE: lib/btree.c:632:
+				btree_item_copy(right->item+i-(BTREE_ITEM_MAX-n)+1,
 				                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#887: FILE: lib/btree.c:632:
+				btree_item_copy(right->item+i-(BTREE_ITEM_MAX-n)+1,
 				                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#887: FILE: lib/btree.c:632:
+				btree_item_copy(right->item+i-(BTREE_ITEM_MAX-n)+1,
 				                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#887: FILE: lib/btree.c:632:
+				btree_item_copy(right->item+i-(BTREE_ITEM_MAX-n)+1,
 				                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#888: FILE: lib/btree.c:633:
+						node->item+i, BTREE_ITEM_MAX-i);
 						          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#888: FILE: lib/btree.c:633:
+						node->item+i, BTREE_ITEM_MAX-i);
 						                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#889: FILE: lib/btree.c:634:
+				btree_item_copy(right->item+n+1, uright->item,
 				                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#889: FILE: lib/btree.c:634:
+				btree_item_copy(right->item+n+1, uright->item,
 				                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#894: FILE: lib/btree.c:639:
+				if (i-1 <= BTREE_ITEM_MAX-n) {
 				     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#894: FILE: lib/btree.c:639:
+				if (i-1 <= BTREE_ITEM_MAX-n) {
 				                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#895: FILE: lib/btree.c:640:
+					btree_item_flip(root, &new->item[i-1],
 					                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: lib/btree.c:644:
+					btree_item_flip(root,
+						&right->item[i-1-BTREE_ITEM_MAX-n],

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#899: FILE: lib/btree.c:644:
+						&right->item[i-1-BTREE_ITEM_MAX-n],
 						              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#899: FILE: lib/btree.c:644:
+						&right->item[i-1-BTREE_ITEM_MAX-n],
 						                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#899: FILE: lib/btree.c:644:
+						&right->item[i-1-BTREE_ITEM_MAX-n],
 						                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#930: FILE: lib/btree.c:675:
+			if (i-1 < BTREE_ITEM_HALF)
 			     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#931: FILE: lib/btree.c:676:
+				btree_item_flip(root, &new->item[i-1], update);
 				                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: lib/btree.c:679:
+				btree_item_flip(root,
+					&split->item[i-1-BTREE_ITEM_HALF],

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#934: FILE: lib/btree.c:679:
+					&split->item[i-1-BTREE_ITEM_HALF],
 					              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#934: FILE: lib/btree.c:679:
+					&split->item[i-1-BTREE_ITEM_HALF],
 					                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#977: FILE: lib/btree.c:722:
+int btree_update(struct btree_root *root,
+		unsigned long index, unsigned long new_index)

CHECK:BRACES: braces {} should be used on all arms of this statement
#997: FILE: lib/btree.c:742:
+		if (btree_item_node(item)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1002: FILE: lib/btree.c:747:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1027: FILE: lib/btree.c:772:
+		printk(KERN_DEBUG "btree_update: index: %lu new_index: %lu\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'btree_update', this function's name, in a string
#1027: FILE: lib/btree.c:772:
+		printk(KERN_DEBUG "btree_update: index: %lu new_index: %lu\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: lib/btree.c:773:
+		printk(KERN_DEBUG "btree_update: index: %lu new_index: %lu\n",
+				index, new_index);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1030: FILE: lib/btree.c:775:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: lib/btree.c:784:
+void *btree_replace(struct btree_root *root,
+		unsigned long index, void *new_data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1047: FILE: lib/btree.c:792:
+		void *data = btree_item_deref(item);
+		rcu_assign_pointer(item->data, new_data);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1084: FILE: lib/btree.c:829:
+	if (!item || btree_item_key(item) != index) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1087: FILE: lib/btree.c:832:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1099: FILE: lib/btree.c:844:
+				BUG_ON(btree_item_deref(item) != old_node);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1120: FILE: lib/btree.c:865:
+				update->item[i-1] = (struct btree_item){
 				              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1128: FILE: lib/btree.c:873:
+				btree_item_free(root, &node->item[i-1]);
 				                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1145: FILE: lib/btree.c:890:
+				update->item[i+1] = (struct btree_item){
 				              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1150: FILE: lib/btree.c:895:
+				btree_item_free(root, &node->item[i+1]);
 				                                   ^

CHECK:BRACES: Unbalanced braces around else statement
#1166: FILE: lib/btree.c:911:
+			else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1167: FILE: lib/btree.c:912:
+				printk(KERN_ERR "%p %p %p\n", left, new, right);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1168: FILE: lib/btree.c:913:
+				BUG();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1183: FILE: lib/btree.c:928:
+			btree_item_copy(new->item+i, node->item+i+1,
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1183: FILE: lib/btree.c:928:
+			btree_item_copy(new->item+i, node->item+i+1,
 			                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1183: FILE: lib/btree.c:928:
+			btree_item_copy(new->item+i, node->item+i+1,
 			                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1184: FILE: lib/btree.c:929:
+					BTREE_ITEM_MAX-i-1);
 					              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1184: FILE: lib/btree.c:929:
+					BTREE_ITEM_MAX-i-1);
 					                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1187: FILE: lib/btree.c:932:
+				btree_item_flip(root, &new->item[i-1], update);
 				                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1201: FILE: lib/btree.c:946:
+			n = (j-BTREE_ITEM_HALF+1)/2;
 			      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1201: FILE: lib/btree.c:946:
+			n = (j-BTREE_ITEM_HALF+1)/2;
 			                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1201: FILE: lib/btree.c:946:
+			n = (j-BTREE_ITEM_HALF+1)/2;
 			                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1207: FILE: lib/btree.c:952:
+			btree_item_copy(left->item, uleft->item, (j-n));
 			                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1208: FILE: lib/btree.c:953:
+			btree_item_copy(new->item, uleft->item+(j-n), n);
 			                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1208: FILE: lib/btree.c:953:
+			btree_item_copy(new->item, uleft->item+(j-n), n);
 			                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1209: FILE: lib/btree.c:954:
+			btree_item_copy(new->item+n, node->item, i);
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1210: FILE: lib/btree.c:955:
+			btree_item_copy(new->item+n+i, node->item+i+1,
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1210: FILE: lib/btree.c:955:
+			btree_item_copy(new->item+n+i, node->item+i+1,
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1210: FILE: lib/btree.c:955:
+			btree_item_copy(new->item+n+i, node->item+i+1,
 			                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1210: FILE: lib/btree.c:955:
+			btree_item_copy(new->item+n+i, node->item+i+1,
 			                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1211: FILE: lib/btree.c:956:
+					BTREE_ITEM_HALF-i);
 					               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1214: FILE: lib/btree.c:959:
+				btree_item_flip(root, &new->item[n+i-1],
 				                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1214: FILE: lib/btree.c:959:
+				btree_item_flip(root, &new->item[n+i-1],
 				                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1228: FILE: lib/btree.c:973:
+			n = (j-BTREE_ITEM_HALF+1)/2;
 			      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1228: FILE: lib/btree.c:973:
+			n = (j-BTREE_ITEM_HALF+1)/2;
 			                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1228: FILE: lib/btree.c:973:
+			n = (j-BTREE_ITEM_HALF+1)/2;
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1235: FILE: lib/btree.c:980:
+			btree_item_copy(new->item+i, node->item+i+1,
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1235: FILE: lib/btree.c:980:
+			btree_item_copy(new->item+i, node->item+i+1,
 			                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1235: FILE: lib/btree.c:980:
+			btree_item_copy(new->item+i, node->item+i+1,
 			                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1236: FILE: lib/btree.c:981:
+					BTREE_ITEM_HALF-i-1);
 					               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1236: FILE: lib/btree.c:981:
+					BTREE_ITEM_HALF-i-1);
 					                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1237: FILE: lib/btree.c:982:
+			btree_item_copy(new->item+BTREE_ITEM_HALF-1,
 			                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1237: FILE: lib/btree.c:982:
+			btree_item_copy(new->item+BTREE_ITEM_HALF-1,
 			                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1239: FILE: lib/btree.c:984:
+			btree_item_copy(right->item, uright->item+n,
 			                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1240: FILE: lib/btree.c:985:
+					BTREE_ITEM_MAX-n);
 					              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1243: FILE: lib/btree.c:988:
+				btree_item_flip(root, &new->item[i-1], update);
 				                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1258: FILE: lib/btree.c:1003:
+			btree_item_copy(new->item+BTREE_ITEM_HALF,
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1260: FILE: lib/btree.c:1005:
+			btree_item_copy(new->item+BTREE_ITEM_HALF+i,
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1260: FILE: lib/btree.c:1005:
+			btree_item_copy(new->item+BTREE_ITEM_HALF+i,
 			                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1261: FILE: lib/btree.c:1006:
+					node->item+i+1, BTREE_ITEM_HALF-i-1);
 					          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1261: FILE: lib/btree.c:1006:
+					node->item+i+1, BTREE_ITEM_HALF-i-1);
 					            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1261: FILE: lib/btree.c:1006:
+					node->item+i+1, BTREE_ITEM_HALF-i-1);
 					                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1261: FILE: lib/btree.c:1006:
+					node->item+i+1, BTREE_ITEM_HALF-i-1);
 					                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1265: FILE: lib/btree.c:1010:
+						&new->item[BTREE_ITEM_HALF+i-1],
 						                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1265: FILE: lib/btree.c:1010:
+						&new->item[BTREE_ITEM_HALF+i-1],
 						                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1282: FILE: lib/btree.c:1027:
+			btree_item_copy(new->item+i, node->item+i+1,
 			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1282: FILE: lib/btree.c:1027:
+			btree_item_copy(new->item+i, node->item+i+1,
 			                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1282: FILE: lib/btree.c:1027:
+			btree_item_copy(new->item+i, node->item+i+1,
 			                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1283: FILE: lib/btree.c:1028:
+					BTREE_ITEM_HALF-i-1);
 					               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1283: FILE: lib/btree.c:1028:
+					BTREE_ITEM_HALF-i-1);
 					                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1284: FILE: lib/btree.c:1029:
+			btree_item_copy(new->item+BTREE_ITEM_HALF-1,
 			                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1284: FILE: lib/btree.c:1029:
+			btree_item_copy(new->item+BTREE_ITEM_HALF-1,
 			                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1288: FILE: lib/btree.c:1033:
+				btree_item_flip(root, &new->item[i-1], update);
 				                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1302: FILE: lib/btree.c:1047:
+		BUG_ON(root->root != node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1307: FILE: lib/btree.c:1052:
+	BUG_ON(left || right);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1313: FILE: lib/btree.c:1058:
+	if (!root->root->item[1].data &&
+			btree_item_node(&root->root->item[0])) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1315: FILE: lib/btree.c:1060:
+		btree_ptr_flip(root, (void **)&root->root,
+				btree_item_deref(&root->root->item[0]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1339: FILE: lib/btree.c:1084:
+	int i;
+	for (i = 0; i < freevec->pos; i++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1347: FILE: lib/btree.c:1092:
+	BUG_ON(root->height);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1348: FILE: lib/btree.c:1093:
+	BUG_ON(root->freevec);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1360: FILE: lib/btree.c:1105:
+static void __btree_node_print(struct btree_root *root,
+		struct btree_node *node, int recurse)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1363: FILE: lib/btree.c:1108:
+	int i, j;
+	for (i = 0; i < BTREE_ITEM_MAX; i++) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1365: FILE: lib/btree.c:1110:
+			printk(KERN_DEBUG);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1367: FILE: lib/btree.c:1112:
+				printk(" ");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 8)
#1368: FILE: lib/btree.c:1113:
+			if (!btree_item_node(&node->item[i])) {
[...]
+	printk(KERN_DEBUG "-> leaf: %p, item: %d, key: %lu, data: %p\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1369: FILE: lib/btree.c:1114:
+			if (!btree_item_node(&node->item[i])) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1370: FILE: lib/btree.c:1115:
+	printk(KERN_DEBUG "-> leaf: %p, item: %d, key: %lu, data: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1371: FILE: lib/btree.c:1116:
+	printk(KERN_DEBUG "-> leaf: %p, item: %d, key: %lu, data: %p\n",
+		node, i, node->item[i].key, node->item[i].data);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 8)
#1373: FILE: lib/btree.c:1118:
+			} else {
[...]
+	printk(KERN_DEBUG "node: %p, item: %d, key: %lu, child: %p\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1374: FILE: lib/btree.c:1119:
+			} else {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1375: FILE: lib/btree.c:1120:
+	printk(KERN_DEBUG "node: %p, item: %d, key: %lu, child: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1376: FILE: lib/btree.c:1121:
+	printk(KERN_DEBUG "node: %p, item: %d, key: %lu, child: %p\n",
+		node, i, node->item[i].key, btree_item_deref(&node->item[i]));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 8)
#1377: FILE: lib/btree.c:1122:
+				if (recurse)
+	__btree_node_print(root, btree_item_deref(&node->item[i]), recurse+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1378: FILE: lib/btree.c:1123:
+	__btree_node_print(root, btree_item_deref(&node->item[i]), recurse+1);
 	                                                                  ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1380: FILE: lib/btree.c:1125:
+
+			}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1387: FILE: lib/btree.c:1132:
+	printk(KERN_DEBUG "node: %p\n", node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1393: FILE: lib/btree.c:1138:
+	printk(KERN_DEBUG "[%p] root: %p, height: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1394: FILE: lib/btree.c:1139:
+	printk(KERN_DEBUG "[%p] root: %p, height: %d\n",
+			root, root->root, root->height);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1400: FILE: lib/btree.c:1145:
+static unsigned long __btree_key(struct btree_root *root,
+		struct btree_node *node, int height)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1409: FILE: lib/btree.c:1154:
+static int __btree_validate(struct btree_root *root, struct btree_node *node,
+		unsigned long *pindex, int height)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1422: FILE: lib/btree.c:1167:
+		struct btree_node *child = btree_item_deref(&node->item[i]);
+		if (!child)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1429: FILE: lib/btree.c:1174:
+		if (key < parent_key || (!i && key != parent_key) ||
+				(i && key == parent_key)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1430: FILE: lib/btree.c:1175:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1437: FILE: lib/btree.c:1182:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1445: FILE: lib/btree.c:1190:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1461: FILE: lib/btree.c:1206:
+		printk(KERN_DEBUG "node short\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1466: FILE: lib/btree.c:1211:
+		printk(KERN_DEBUG "bug in node: %p\n", node);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000183053.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 58 warnings, 196 checks, 1401 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000183053.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
