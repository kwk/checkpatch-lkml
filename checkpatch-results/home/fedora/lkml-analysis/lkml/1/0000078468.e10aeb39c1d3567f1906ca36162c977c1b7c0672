WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
o Reads of iocg->group_data are not always iocg->lock; so all the operations

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: block/elevator-fq.c:797:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#212: FILE: block/elevator-fq.c:960:
+	for (; cgroup != NULL; cgroup = cgroup->parent) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#216: FILE: block/elevator-fq.c:964:
+		if (iog != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!leaf"
#243: FILE: block/elevator-fq.c:991:
+		if (leaf == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#261: FILE: block/elevator-fq.c:1009:
+	while (leaf != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#280: FILE: block/elevator-fq.c:1028:
+	for (; cgroup != NULL && leaf != NULL; cgroup = cgroup->parent) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#280: FILE: block/elevator-fq.c:1028:
+	for (; cgroup != NULL && leaf != NULL; cgroup = cgroup->parent) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#285: FILE: block/elevator-fq.c:1033:
+		BUG_ON(iog != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#285: FILE: block/elevator-fq.c:1033:
+		BUG_ON(iog != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#299: FILE: block/elevator-fq.c:1047:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgroup"
#299: FILE: block/elevator-fq.c:1047:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#299: FILE: block/elevator-fq.c:1047:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#305: FILE: block/elevator-fq.c:1053:
+	if (cgroup != NULL && prev != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#305: FILE: block/elevator-fq.c:1053:
+	if (cgroup != NULL && prev != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: block/elevator-fq.c:1061:
+static struct io_group *io_find_alloc_group(struct request_queue *q,
+			struct cgroup *cgroup, struct elv_fq_data *efqd,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#330: FILE: block/elevator-fq.c:1078:
+	if (iog != NULL || !create)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog"
#334: FILE: block/elevator-fq.c:1082:
+	if (iog != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#438: FILE: block/elevator-fq.c:1185:
+	BUG_ON(iog->sched_data.active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iog->sched_data.active_entity"
#438: FILE: block/elevator-fq.c:1185:
+	BUG_ON(iog->sched_data.active_entity != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#442: FILE: block/elevator-fq.c:1189:
+		BUG_ON(!RB_EMPTY_ROOT(&st->active));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#443: FILE: block/elevator-fq.c:1190:
+		BUG_ON(st->active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "st->active_entity"
#443: FILE: block/elevator-fq.c:1190:
+		BUG_ON(st->active_entity != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#459: FILE: block/elevator-fq.c:1206:
+	BUG_ON(atomic_read(&iog->ref) <= 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#498: FILE: block/elevator-fq.c:1245:
+	struct elv_fq_data *efqd;
+	unsigned long uninitialized_var(flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#498: FILE: block/elevator-fq.c:1245:
+	unsigned long uninitialized_var(flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'flags' should also have an identifier name
#498: FILE: block/elevator-fq.c:1245:
+	unsigned long uninitialized_var(flags);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#540: FILE: block/elevator-fq.c:1287:
+	BUG_ON(!hlist_empty(&iocg->group_data));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: block/elevator-fq.c:1331:
+	hlist_for_each_entry_safe(iog, pos, n, &efqd->group_list,
+					elv_data_node) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#606: FILE: block/elevator-fq.c:1353:
+		 * group has not been setup yet. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#631: FILE: block/elevator-fq.c:1445:
+		struct io_group *iog = ioq_to_io_group(ioq);
+		elv_log_ioq(efqd, ioq, "set_active, busy=%d class=%hu prio=%hu"

WARNING:SPLIT_STRING: quoted string split across lines
#632: FILE: block/elevator-fq.c:1446:
+		elv_log_ioq(efqd, ioq, "set_active, busy=%d class=%hu prio=%hu"
+				" weight=%u group_weight=%u qued=%d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#745: FILE: block/elevator-fq.h:325:
+extern int elv_io_group_allow_merge(struct request *rq, struct bio *bio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#746: FILE: block/elevator-fq.h:326:
+extern void elv_put_iog(struct io_group *iog);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#747: FILE: block/elevator-fq.h:327:
+extern struct io_group *elv_io_get_io_group(struct request_queue *q,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: block/elevator-fq.h:328:
+extern struct io_group *elv_io_get_io_group(struct request_queue *q,
+						int create);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078468.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 22 checks, 681 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078468.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
