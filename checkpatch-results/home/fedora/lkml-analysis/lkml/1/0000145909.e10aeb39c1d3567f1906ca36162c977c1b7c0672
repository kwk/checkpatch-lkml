CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#33: 
Ingo Molnar a écrit :
              ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#36: 
>> Jeremy Fitzhardinge a écrit :
                         ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
>>>> While playing with new percpu_{read|write|add|sub} stuff in network tree,

WARNING:TYPO_SPELLING: 'litle' may be misspelled - perhaps 'little'?
#39: 
>>>> I found x86 asm was a litle bit optimistic.
                           ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#define percpu_add(var, val)   percpu_to_op("add", per_cpu__##var, val)

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#define dyn_percpu_add(var, val)   percpu_to_op("add", var, val)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#103: FILE: arch/x86/include/asm/percpu.h:106:
+#define percpu_to_op0(op, var)				\
+do {							\
+	switch (sizeof(var)) {				\
+	case 1:						\
+		asm(op "b "__percpu_arg(0)		\
+		    : "+m" (var));			\
+		break;					\
+	case 2:						\
+		asm(op "w "__percpu_arg(0)		\
+		    : "+m" (var));			\
+		break;					\
+	case 4:						\
+		asm(op "l "__percpu_arg(0)		\
+		    : "+m" (var));			\
+		break;					\
+	case 8:						\
+		asm(op "q "__percpu_arg(0)		\
+		    : "+m" (var));			\
+		break;					\
+	default: __bad_percpu_size();			\
+	}						\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#103: FILE: arch/x86/include/asm/percpu.h:106:
+#define percpu_to_op0(op, var)				\
+do {							\
+	switch (sizeof(var)) {				\
+	case 1:						\
+		asm(op "b "__percpu_arg(0)		\
+		    : "+m" (var));			\
+		break;					\
+	case 2:						\
+		asm(op "w "__percpu_arg(0)		\
+		    : "+m" (var));			\
+		break;					\
+	case 4:						\
+		asm(op "l "__percpu_arg(0)		\
+		    : "+m" (var));			\
+		break;					\
+	case 8:						\
+		asm(op "q "__percpu_arg(0)		\
+		    : "+m" (var));			\
+		break;					\
+	default: __bad_percpu_size();			\
+	}						\
+} while (0)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#107: FILE: arch/x86/include/asm/percpu.h:110:
+		asm(op "b "__percpu_arg(0)		\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#111: FILE: arch/x86/include/asm/percpu.h:114:
+		asm(op "w "__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#115: FILE: arch/x86/include/asm/percpu.h:118:
+		asm(op "l "__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#119: FILE: arch/x86/include/asm/percpu.h:122:
+		asm(op "q "__percpu_arg(0)		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#122: FILE: arch/x86/include/asm/percpu.h:125:
+	default: __bad_percpu_size();			\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#147: FILE: include/asm-generic/percpu.h:124:
+# define percpu_inc(var)			do { percpu_add(var, 1); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#151: FILE: include/asm-generic/percpu.h:128:
+# define percpu_dec(var)			do { percpu_sub(var, 1); } while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000145909.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 6 warnings, 8 checks, 51 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000145909.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
