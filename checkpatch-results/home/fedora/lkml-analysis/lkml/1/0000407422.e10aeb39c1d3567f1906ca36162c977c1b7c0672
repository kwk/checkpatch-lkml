CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/rcupreempt_trace.h:80:
+extern void rcupreempt_trace_try_flip_1(struct rcupreempt_trace *trace);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/rcupreempt_trace.h:82:
+extern void rcupreempt_trace_try_flip_i1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/linux/rcupreempt_trace.h:83:
+extern void rcupreempt_trace_try_flip_ie1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: include/linux/rcupreempt_trace.h:84:
+extern void rcupreempt_trace_try_flip_g1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: include/linux/rcupreempt_trace.h:85:
+extern void rcupreempt_trace_try_flip_a1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/linux/rcupreempt_trace.h:86:
+extern void rcupreempt_trace_try_flip_ae1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/rcupreempt_trace.h:87:
+extern void rcupreempt_trace_try_flip_a2(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/rcupreempt_trace.h:88:
+extern void rcupreempt_trace_try_flip_z1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/rcupreempt_trace.h:89:
+extern void rcupreempt_trace_try_flip_ze1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/rcupreempt_trace.h:90:
+extern void rcupreempt_trace_try_flip_z2(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/rcupreempt_trace.h:91:
+extern void rcupreempt_trace_try_flip_m1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/rcupreempt_trace.h:92:
+extern void rcupreempt_trace_try_flip_me1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/rcupreempt_trace.h:93:
+extern void rcupreempt_trace_try_flip_m2(struct rcupreempt_trace *trace);

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: include/linux/sched.h:1037:
+        int rcu_flipctr_idx;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: include/linux/sched.h:1037:
+        int rcu_flipctr_idx;$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#175: FILE: kernel/rcupreempt.c:15:
  * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#176: FILE: kernel/rcupreempt.c:16:
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#214: FILE: kernel/rcupreempt.c:79:
 };
+static DEFINE_PER_CPU(struct rcu_data, rcu_data);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#221: FILE: kernel/rcupreempt.c:84:
 };
+static DEFINE_PER_CPU(int [2], rcu_flipctr) = { 0, 0 };

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: kernel/rcupreempt.c:92:
+^Ircu_try_flip_waitack_state, ^I/* "A" */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#233: FILE: kernel/rcupreempt.c:96:
+};
+static enum rcu_try_flip_states rcu_try_flip_state = rcu_try_flip_idle_state;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#236: FILE: kernel/rcupreempt.c:99:
+static char *rcu_try_flip_state_names[] =
+	{ "idle", "waitack", "waitzero", "waitmb" };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#250: FILE: kernel/rcupreempt.c:113:
+};
+static DEFINE_PER_CPU(enum rcu_flip_flag_values, rcu_flip_flag) = rcu_flip_seen;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#264: FILE: kernel/rcupreempt.c:127:
+};
+static DEFINE_PER_CPU(enum rcu_mb_flag_values, rcu_mb_flag) = rcu_mb_done;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#272: FILE: kernel/rcupreempt.c:135:
+#define ORDERED_WRT_IRQ(x) (*(volatile typeof(x) *)&(x))

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#287: FILE: kernel/rcupreempt.c:150:
+#define RCU_TRACE_CPU(f, cpu) RCU_TRACE(f, &(RCU_DATA_CPU(cpu)->trace));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#293: FILE: kernel/rcupreempt.c:156:
+#define RCU_TRACE_ME(f) RCU_TRACE(f, &(RCU_DATA_ME()->trace));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#299: FILE: kernel/rcupreempt.c:162:
+#define RCU_TRACE_RDP(f, rdp) RCU_TRACE(f, &((rdp)->trace));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#316: FILE: kernel/rcupreempt.c:181:
+	if (nesting != 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'coutner' may be misspelled - perhaps 'counter'?
#473: FILE: kernel/rcupreempt.c:291:
+		 * will thus start incrementing the per-CPU coutner on
 		                                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->waitlist[GP_STAGES - 1]"
#501: FILE: kernel/rcupreempt.c:313:
+		if (rdp->waitlist[GP_STAGES - 1] != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->waitlist[i]"
#507: FILE: kernel/rcupreempt.c:319:
+			if (rdp->waitlist[i] != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextlist"
#523: FILE: kernel/rcupreempt.c:329:
+		if (rdp->nextlist != NULL) {

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#551: FILE: kernel/rcupreempt.c:355:
+			   /*  seen -after- acknowledgement. */
 			                    ^^^^^^^^^^^^^^^

WARNING:MEMORY_BARRIER: memory barrier without comment
#589: FILE: kernel/rcupreempt.c:393:
+	smp_mb();

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#591: FILE: kernel/rcupreempt.c:395:
+	/* Now ask each CPU for acknowledgement of the flip. */
 	                        ^^^^^^^^^^^^^^^

WARNING:MEMORY_BARRIER: memory barrier without comment
#621: FILE: kernel/rcupreempt.c:424:
+	smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#650: FILE: kernel/rcupreempt.c:453:
+	smp_mb();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#780: FILE: kernel/rcupreempt.c:550:
+	if (rcu_ctrlblk.completed == rdp->completed) {
 		rcu_try_flip();
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rdp->donelist"
#794: FILE: kernel/rcupreempt.c:556:
+	if (rdp->donelist == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#812: FILE: kernel/rcupreempt.c:575:
+		if (rcu_ctrlblk.completed == rdp->completed) {
 			return;
 		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#822: FILE: kernel/rcupreempt.c:581:
+^I__rcu_advance_callbacks(rdp); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->donelist"
#913: FILE: kernel/rcupreempt.c:662:
+	return (rdp->donelist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextlist"
#915: FILE: kernel/rcupreempt.c:664:
+		rdp->nextlist != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->donelist"
#927: FILE: kernel/rcupreempt.c:673:
+	if (rdp->donelist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextlist"
#929: FILE: kernel/rcupreempt.c:675:
+	    rdp->nextlist != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#930: FILE: kernel/rcupreempt.c:676:
+^I    ^Ireturn 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#930: FILE: kernel/rcupreempt.c:676:
+^I    ^Ireturn 1;$

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#932: FILE: kernel/rcupreempt.c:678:
+	/* The RCU core needs an acknowledgement from this CPU. */
 	                         ^^^^^^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#936: FILE: kernel/rcupreempt.c:682:
+^I    ^Ireturn 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#936: FILE: kernel/rcupreempt.c:682:
+^I    ^Ireturn 1;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#963: FILE: kernel/rcupreempt.c:700:
+/*&&&&*/printk("WARNING: experimental non-atomic RCU implementation.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#979: FILE: kernel/rcupreempt.c:716:
+/*&&&&*/printk("experimental non-atomic RCU implementation: init done\n");

WARNING:IF_1: Consider removing the #if 1 and its #endif
#987: FILE: kernel/rcupreempt.c:727:
+#if 1

WARNING:LINE_SPACING: Missing a blank line after declarations
#1045: FILE: kernel/rcupreempt.c:735:
+	struct rcu_data *rdp = RCU_DATA_CPU(raw_smp_processor_id());
+	void rcu_preempt_trace_dump_stats_sum(struct rcupreempt_trace *sum,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1045: FILE: kernel/rcupreempt.c:735:
+	void rcu_preempt_trace_dump_stats_sum(struct rcupreempt_trace *sum,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1047: FILE: kernel/rcupreempt.c:737:
+	int rcu_preempt_trace_dump_stats_trace(char *page,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1048: FILE: kernel/rcupreempt.c:738:
+^I                                       struct rcupreempt_trace *trace);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1089: FILE: kernel/rcupreempt_trace.c:58:
 }
+void rcupreempt_trace_try_flip_1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1099: FILE: kernel/rcupreempt_trace.c:66:
 }
+void rcupreempt_trace_try_flip_i1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1105: FILE: kernel/rcupreempt_trace.c:70:
 }
+void rcupreempt_trace_try_flip_ie1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1111: FILE: kernel/rcupreempt_trace.c:74:
 }
+void rcupreempt_trace_try_flip_g1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1117: FILE: kernel/rcupreempt_trace.c:78:
 }
+void rcupreempt_trace_try_flip_a1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1122: FILE: kernel/rcupreempt_trace.c:82:
+}
+void rcupreempt_trace_try_flip_ae1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1126: FILE: kernel/rcupreempt_trace.c:86:
+}
+void rcupreempt_trace_try_flip_a2(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1130: FILE: kernel/rcupreempt_trace.c:90:
+}
+void rcupreempt_trace_try_flip_z1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1134: FILE: kernel/rcupreempt_trace.c:94:
+}
+void rcupreempt_trace_try_flip_ze1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1138: FILE: kernel/rcupreempt_trace.c:98:
+}
+void rcupreempt_trace_try_flip_z2(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1142: FILE: kernel/rcupreempt_trace.c:102:
+}
+void rcupreempt_trace_try_flip_m1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1146: FILE: kernel/rcupreempt_trace.c:106:
+}
+void rcupreempt_trace_try_flip_me1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1150: FILE: kernel/rcupreempt_trace.c:110:
+}
+void rcupreempt_trace_try_flip_m2(struct rcupreempt_trace *trace)

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1161: FILE: kernel/rcupreempt_trace.c:133:
+#if 1

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1233: FILE: kernel/rcupreempt_trace.c:205:
+
+}

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1242: FILE: kernel/rcutorture.c:261:
+#if 1

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1245: FILE: kernel/rcutorture.c:264:
+	int rcu_preempt_trace_dump_stats(char *page);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1258: FILE: kernel/rcutorture.c:279:
+#if 1

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000407422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 27 warnings, 41 checks, 1156 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000407422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
