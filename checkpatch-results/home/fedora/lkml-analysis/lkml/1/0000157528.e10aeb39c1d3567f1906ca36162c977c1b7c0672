CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#106: FILE: arch/avr32/include/asm/tlb.h:11:
+#define tlb_start_vma(tlb, vma, range_start, range_end) \
 	flush_cache_range(vma, vma->vm_start, vma->vm_end)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#110: FILE: arch/avr32/include/asm/tlb.h:14:
+#define tlb_end_vma(tlb, vma, range_start, range_end) \
 	flush_tlb_range(vma, vma->vm_start, vma->vm_end)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: arch/mips/include/asm/tlb.h:8:
+#define tlb_start_vma(tlb, vma, range_start, range_end) ^I\$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tlb' may be better as '(tlb)' to avoid precedence issues
#200: FILE: arch/mips/include/asm/tlb.h:8:
+#define tlb_start_vma(tlb, vma, range_start, range_end) 	\
 	do {							\
 		if (!tlb->fullmm)				\
 			flush_cache_range(vma, vma->vm_start, vma->vm_end); \
 	}  while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#200: FILE: arch/mips/include/asm/tlb.h:8:
+#define tlb_start_vma(tlb, vma, range_start, range_end) 	\
 	do {							\
 		if (!tlb->fullmm)				\
 			flush_cache_range(vma, vma->vm_start, vma->vm_end); \
 	}  while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#219: FILE: arch/parisc/include/asm/tlb.h:9:
+#define tlb_start_vma(tlb, vma, range_start, range_end) \
 do {	if (!(tlb)->fullmm)	\
 		flush_cache_range(vma, vma->vm_start, vma->vm_end); \
 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#225: FILE: arch/parisc/include/asm/tlb.h:14:
+#define tlb_end_vma(tlb, vma, range_start, range_end)	\
 do {	if (!(tlb)->fullmm)	\
 		flush_tlb_range(vma, vma->vm_start, vma->vm_end); \
 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#268: FILE: arch/sh/include/asm/tlb.h:10:
+#define tlb_start_vma(tlb, vma, range_start, range_end) \
 	flush_cache_range(vma, vma->vm_start, vma->vm_end)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#272: FILE: arch/sh/include/asm/tlb.h:13:
+#define tlb_end_vma(tlb, vma, range_start, range_end)	\
 	flush_tlb_range(vma, vma->vm_start, vma->vm_end)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#285: FILE: arch/sparc/include/asm/tlb_32.h:4:
+#define tlb_start_vma(tlb, vma, range_start, range_end) \
 do {								\
 	flush_cache_range(vma, vma->vm_start, vma->vm_end);	\
 } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#285: FILE: arch/sparc/include/asm/tlb_32.h:4:
+#define tlb_start_vma(tlb, vma, range_start, range_end) \
 do {								\
 	flush_cache_range(vma, vma->vm_start, vma->vm_end);	\
 } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#291: FILE: arch/sparc/include/asm/tlb_32.h:9:
+#define tlb_end_vma(tlb, vma, range_start, range_end) \
 do {								\
 	flush_tlb_range(vma, vma->vm_start, vma->vm_end);	\
 } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#291: FILE: arch/sparc/include/asm/tlb_32.h:9:
+#define tlb_end_vma(tlb, vma, range_start, range_end) \
 do {								\
 	flush_tlb_range(vma, vma->vm_start, vma->vm_end);	\
 } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tlb' may be better as '(tlb)' to avoid precedence issues
#355: FILE: arch/xtensa/include/asm/tlb.h:26:
+# define tlb_start_vma(tlb, vma, range_start, range_end)		      \
 	do {								      \
 		if (!tlb->fullmm)					      \
 			flush_cache_range(vma, vma->vm_start, vma->vm_end);   \
 	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#355: FILE: arch/xtensa/include/asm/tlb.h:26:
+# define tlb_start_vma(tlb, vma, range_start, range_end)		      \
 	do {								      \
 		if (!tlb->fullmm)					      \
 			flush_cache_range(vma, vma->vm_start, vma->vm_end);   \
 	} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tlb' may be better as '(tlb)' to avoid precedence issues
#362: FILE: arch/xtensa/include/asm/tlb.h:32:
+# define tlb_end_vma(tlb, vma, range_start, range_end)			      \
 	do {								      \
 		if (!tlb->fullmm)					      \
 			flush_tlb_range(vma, vma->vm_start, vma->vm_end);     \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#362: FILE: arch/xtensa/include/asm/tlb.h:32:
+# define tlb_end_vma(tlb, vma, range_start, range_end)			      \
 	do {								      \
 		if (!tlb->fullmm)					      \
 			flush_tlb_range(vma, vma->vm_start, vma->vm_end);     \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#433: FILE: mm/memory.c:911:
+	BUG_ON(*zap_work <= 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 14 checks, 282 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157528.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
