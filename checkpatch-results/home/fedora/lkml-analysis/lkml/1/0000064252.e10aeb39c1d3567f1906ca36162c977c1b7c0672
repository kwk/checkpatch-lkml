WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
tomoyo_read_lock()/tomoyo_read_unlock() protects the data against the garbage

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: security/tomoyo/policy_io.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#60: FILE: security/tomoyo/policy_io.c:2:
+ * security/tomoyo/policy_io.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#75: FILE: security/tomoyo/policy_io.c:17:
+	.preference.audit_max_reject_log
+	= CONFIG_SECURITY_TOMOYO_MAX_REJECT_LOG,

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#82: FILE: security/tomoyo/policy_io.c:24:
+	.preference.learning_max_entry
+	= CONFIG_SECURITY_TOMOYO_MAX_ACCEPT_ENTRY,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#106: FILE: security/tomoyo/policy_io.c:48:
+	[TOMOYO_MAC_FILE_EXECUTE]
+	= "file::execute",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#108: FILE: security/tomoyo/policy_io.c:50:
+	[TOMOYO_MAC_FILE_OPEN]
+	= "file::open",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#110: FILE: security/tomoyo/policy_io.c:52:
+	[TOMOYO_MAC_FILE_CREATE]
+	= "file::create",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#112: FILE: security/tomoyo/policy_io.c:54:
+	[TOMOYO_MAC_FILE_UNLINK]
+	= "file::unlink",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#114: FILE: security/tomoyo/policy_io.c:56:
+	[TOMOYO_MAC_FILE_MKDIR]
+	= "file::mkdir",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#116: FILE: security/tomoyo/policy_io.c:58:
+	[TOMOYO_MAC_FILE_RMDIR]
+	= "file::rmdir",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#118: FILE: security/tomoyo/policy_io.c:60:
+	[TOMOYO_MAC_FILE_MKFIFO]
+	= "file::mkfifo",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#120: FILE: security/tomoyo/policy_io.c:62:
+	[TOMOYO_MAC_FILE_MKSOCK]
+	= "file::mksock",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#122: FILE: security/tomoyo/policy_io.c:64:
+	[TOMOYO_MAC_FILE_TRUNCATE]
+	= "file::truncate",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#124: FILE: security/tomoyo/policy_io.c:66:
+	[TOMOYO_MAC_FILE_SYMLINK]
+	= "file::symlink",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#126: FILE: security/tomoyo/policy_io.c:68:
+	[TOMOYO_MAC_FILE_REWRITE]
+	= "file::rewrite",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#128: FILE: security/tomoyo/policy_io.c:70:
+	[TOMOYO_MAC_FILE_MKBLOCK]
+	= "file::mkblock",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#130: FILE: security/tomoyo/policy_io.c:72:
+	[TOMOYO_MAC_FILE_MKCHAR]
+	= "file::mkchar",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#132: FILE: security/tomoyo/policy_io.c:74:
+	[TOMOYO_MAC_FILE_LINK]
+	= "file::link",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#134: FILE: security/tomoyo/policy_io.c:76:
+	[TOMOYO_MAC_FILE_RENAME]
+	= "file::rename",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#136: FILE: security/tomoyo/policy_io.c:78:
+	[TOMOYO_MAC_FILE_CHMOD]
+	= "file::chmod",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#138: FILE: security/tomoyo/policy_io.c:80:
+	[TOMOYO_MAC_FILE_CHOWN]
+	= "file::chown",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#140: FILE: security/tomoyo/policy_io.c:82:
+	[TOMOYO_MAC_FILE_CHGRP]
+	= "file::chgrp",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#142: FILE: security/tomoyo/policy_io.c:84:
+	[TOMOYO_MAC_FILE_IOCTL]
+	= "file::ioctl",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#144: FILE: security/tomoyo/policy_io.c:86:
+	[TOMOYO_MAC_FILE_CHROOT]
+	= "file::chroot",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#146: FILE: security/tomoyo/policy_io.c:88:
+	[TOMOYO_MAC_FILE_MOUNT]
+	= "file::mount",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#148: FILE: security/tomoyo/policy_io.c:90:
+	[TOMOYO_MAC_FILE_UMOUNT]
+	= "file::umount",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#150: FILE: security/tomoyo/policy_io.c:92:
+	[TOMOYO_MAC_FILE_PIVOT_ROOT]
+	= "file::pivot_root",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#152: FILE: security/tomoyo/policy_io.c:94:
+	[TOMOYO_MAC_ENVIRON]
+	= "misc::env",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#154: FILE: security/tomoyo/policy_io.c:96:
+	[TOMOYO_MAC_NETWORK_UDP_BIND]
+	= "network::inet_udp_bind",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#156: FILE: security/tomoyo/policy_io.c:98:
+	[TOMOYO_MAC_NETWORK_UDP_CONNECT]
+	= "network::inet_udp_connect",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#158: FILE: security/tomoyo/policy_io.c:100:
+	[TOMOYO_MAC_NETWORK_TCP_BIND]
+	= "network::inet_tcp_bind",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#160: FILE: security/tomoyo/policy_io.c:102:
+	[TOMOYO_MAC_NETWORK_TCP_LISTEN]
+	= "network::inet_tcp_listen",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#162: FILE: security/tomoyo/policy_io.c:104:
+	[TOMOYO_MAC_NETWORK_TCP_CONNECT]
+	= "network::inet_tcp_connect",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#164: FILE: security/tomoyo/policy_io.c:106:
+	[TOMOYO_MAC_NETWORK_TCP_ACCEPT]
+	= "network::inet_tcp_accept",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#166: FILE: security/tomoyo/policy_io.c:108:
+	[TOMOYO_MAC_NETWORK_RAW_BIND]
+	= "network::inet_raw_bind",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#168: FILE: security/tomoyo/policy_io.c:110:
+	[TOMOYO_MAC_NETWORK_RAW_CONNECT]
+	= "network::inet_raw_connect",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#170: FILE: security/tomoyo/policy_io.c:112:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_INET_STREAM_SOCKET_CREATE]
+	= "capability::inet_tcp_create",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#172: FILE: security/tomoyo/policy_io.c:114:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_INET_STREAM_SOCKET_LISTEN]
+	= "capability::inet_tcp_listen",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#174: FILE: security/tomoyo/policy_io.c:116:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_INET_STREAM_SOCKET_CONNECT]
+	= "capability::inet_tcp_connect",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#176: FILE: security/tomoyo/policy_io.c:118:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_USE_INET_DGRAM_SOCKET]
+	= "capability::use_inet_udp",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#178: FILE: security/tomoyo/policy_io.c:120:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_USE_INET_RAW_SOCKET]
+	= "capability::use_inet_ip",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#180: FILE: security/tomoyo/policy_io.c:122:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_USE_ROUTE_SOCKET]
+	= "capability::use_route",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#182: FILE: security/tomoyo/policy_io.c:124:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_USE_PACKET_SOCKET]
+	= "capability::use_packet",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#184: FILE: security/tomoyo/policy_io.c:126:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_SYS_MOUNT]
+	= "capability::SYS_MOUNT",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#186: FILE: security/tomoyo/policy_io.c:128:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_SYS_UMOUNT]
+	= "capability::SYS_UMOUNT",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#188: FILE: security/tomoyo/policy_io.c:130:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_SYS_CHROOT]
+	= "capability::SYS_CHROOT",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#190: FILE: security/tomoyo/policy_io.c:132:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_CREATE_FIFO]
+	= "capability::create_fifo",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#192: FILE: security/tomoyo/policy_io.c:134:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_CREATE_BLOCK_DEV]
+	= "capability::create_block_dev",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#194: FILE: security/tomoyo/policy_io.c:136:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_CREATE_CHAR_DEV]
+	= "capability::create_char_dev",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#196: FILE: security/tomoyo/policy_io.c:138:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_CREATE_UNIX_SOCKET]
+	= "capability::create_unix_socket",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#198: FILE: security/tomoyo/policy_io.c:140:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_SYS_LINK]
+	= "capability::SYS_LINK",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#200: FILE: security/tomoyo/policy_io.c:142:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_SYS_SYMLINK]
+	= "capability::SYS_SYMLINK",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#202: FILE: security/tomoyo/policy_io.c:144:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_SYS_RENAME]
+	= "capability::SYS_RENAME",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#204: FILE: security/tomoyo/policy_io.c:146:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_SYS_UNLINK]
+	= "capability::SYS_UNLINK",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#206: FILE: security/tomoyo/policy_io.c:148:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_SYS_CHMOD]
+	= "capability::SYS_CHMOD",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#208: FILE: security/tomoyo/policy_io.c:150:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_SYS_CHOWN]
+	= "capability::SYS_CHOWN",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#210: FILE: security/tomoyo/policy_io.c:152:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_SYS_IOCTL]
+	= "capability::SYS_IOCTL",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#212: FILE: security/tomoyo/policy_io.c:154:
+	[TOMOYO_MAX_MAC_INDEX + TOMOYO_SYS_PIVOT_ROOT]
+	= "capability::SYS_PIVOT_ROOT",

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: security/tomoyo/policy_io.c:208:
+	int size = head->readbuf_size - pos;
+	if (size <= 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: security/tomoyo/policy_io.c:231:
+	struct tomoyo_profile *entry;
+	if (profile >= TOMOYO_MAX_PROFILES)

WARNING:LINE_SPACING: Missing a blank line after declarations
#323: FILE: security/tomoyo/policy_io.c:265:
+	struct tomoyo_domain_info *domain;
+	tomoyo_policy_loaded = true;

WARNING:LINE_SPACING: Missing a blank line after declarations
#326: FILE: security/tomoyo/policy_io.c:268:
+		const u8 profile = domain->profile;
+		if (tomoyo_profile_ptr[profile])

WARNING:LINE_SPACING: Missing a blank line after declarations
#343: FILE: security/tomoyo/policy_io.c:285:
+	struct tomoyo_profile *ptr = tomoyo_profile_ptr[profile];
+	if (!tomoyo_policy_loaded)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#345: FILE: security/tomoyo/policy_io.c:287:
+	BUG_ON(!ptr);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#366: FILE: security/tomoyo/policy_io.c:308:
+	struct tomoyo_profile *profile;
+	i = simple_strtoul(data, &cp, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#366: FILE: security/tomoyo/policy_io.c:308:
+	i = simple_strtoul(data, &cp, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strstr"
#382: FILE: security/tomoyo/policy_io.c:324:
+		use_default = strstr(cp, "use_default") != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: security/tomoyo/policy_io.c:362:
+		char *cp2;
+		if (use_default) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#422: FILE: security/tomoyo/policy_io.c:364:
+			profile->enforcing
+				= &tomoyo_default_profile.preference;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#437: FILE: security/tomoyo/policy_io.c:379:
+			profile->permissive
+				= &tomoyo_default_profile.preference;

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: security/tomoyo/policy_io.c:389:
+		char *cp2;
+		if (use_default) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#476: FILE: security/tomoyo/policy_io.c:418:
+		const struct tomoyo_path_info *new_comment
+			= tomoyo_get_name(cp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#545: FILE: security/tomoyo/policy_io.c:487:
+	int index;
+	if (head->read_eof)

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tomoyo_default_profile.preference.audit_max_reject_log'
#558: FILE: security/tomoyo/policy_io.c:500:
+			 tomoyo_default_profile.preference.
+			 audit_max_reject_log,

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tomoyo_default_profile.preference.audit_task_info'
#561: FILE: security/tomoyo/policy_io.c:503:
+			 tomoyo_yesno(tomoyo_default_profile.preference.
+				      audit_task_info),

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tomoyo_default_profile.preference.audit_path_info'
#563: FILE: security/tomoyo/policy_io.c:505:
+			 tomoyo_yesno(tomoyo_default_profile.preference.
+				      audit_path_info));

WARNING:SPLIT_STRING: quoted string split across lines
#565: FILE: security/tomoyo/policy_io.c:507:
+	tomoyo_io_printf(head, "PREFERENCE::learning={ verbose=%s "
+			 "max_entry=%u exec.realpath=%s exec.argv0=%s "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#566: FILE: security/tomoyo/policy_io.c:508:
+			 "max_entry=%u exec.realpath=%s exec.argv0=%s "
+			 "symlink.target=%s }\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tomoyo_default_profile.preference.learning_verbose'
#568: FILE: security/tomoyo/policy_io.c:510:
+			 tomoyo_yesno(tomoyo_default_profile.preference.
+				      learning_verbose),

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tomoyo_default_profile.preference.learning_exec_realpath'
#571: FILE: security/tomoyo/policy_io.c:513:
+			 tomoyo_yesno(tomoyo_default_profile.preference.
+				      learning_exec_realpath),

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tomoyo_default_profile.preference.learning_exec_argv0'
#573: FILE: security/tomoyo/policy_io.c:515:
+			 tomoyo_yesno(tomoyo_default_profile.preference.
+				      learning_exec_argv0),

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tomoyo_default_profile.preference.learning_symlink_target'
#575: FILE: security/tomoyo/policy_io.c:517:
+			 tomoyo_yesno(tomoyo_default_profile.preference.
+				      learning_symlink_target));

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tomoyo_default_profile.preference.permissive_verbose'
#578: FILE: security/tomoyo/policy_io.c:520:
+			 tomoyo_yesno(tomoyo_default_profile.preference.
+				      permissive_verbose));

WARNING:SPLIT_STRING: quoted string split across lines
#580: FILE: security/tomoyo/policy_io.c:522:
+	tomoyo_io_printf(head, "PREFERENCE::enforcing={ verbose=%s penalty=%u "
+			 "}\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tomoyo_default_profile.preference.enforcing_verbose'
#582: FILE: security/tomoyo/policy_io.c:524:
+			 tomoyo_yesno(tomoyo_default_profile.preference.
+				      enforcing_verbose),

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#592: FILE: security/tomoyo/policy_io.c:534:
+		const struct tomoyo_profile *profile
+			= tomoyo_profile_ptr[index];

WARNING:SPLIT_STRING: quoted string split across lines
#607: FILE: security/tomoyo/policy_io.c:549:
+		if (!tomoyo_io_printf(head, "%u-CONFIG={ mode=%s grant_log=%s "
+				      "reject_log=%s }\n", index,

WARNING:SPLIT_STRING: quoted string split across lines
#635: FILE: security/tomoyo/policy_io.c:577:
+			if (!tomoyo_io_printf(head, "%u-CONFIG::%s={ mode=%s "
+					      "grant_log=%s reject_log=%s }\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'profile->preference.audit_task_info'
#658: FILE: security/tomoyo/policy_io.c:600:
+				      tomoyo_yesno(profile->preference.
+						   audit_task_info),

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'profile->preference.audit_path_info'
#660: FILE: security/tomoyo/policy_io.c:602:
+				      tomoyo_yesno(profile->preference.
+						   audit_path_info)))

WARNING:SPLIT_STRING: quoted string split across lines
#665: FILE: security/tomoyo/policy_io.c:607:
+				      "verbose=%s max_entry=%u "
+				      "exec.realpath=%s exec.argv0=%s "

WARNING:SPLIT_STRING: quoted string split across lines
#666: FILE: security/tomoyo/policy_io.c:608:
+				      "exec.realpath=%s exec.argv0=%s "
+				      "symlink.target=%s }\n", index,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'profile->preference.learning_verbose'
#668: FILE: security/tomoyo/policy_io.c:610:
+				      tomoyo_yesno(profile->preference.
+						   learning_verbose),

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'profile->preference.learning_exec_realpath'
#671: FILE: security/tomoyo/policy_io.c:613:
+				      tomoyo_yesno(profile->preference.
+						   learning_exec_realpath),

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'profile->preference.learning_exec_argv0'
#673: FILE: security/tomoyo/policy_io.c:615:
+				      tomoyo_yesno(profile->preference.
+						   learning_exec_argv0),

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'profile->preference.learning_symlink_target'
#675: FILE: security/tomoyo/policy_io.c:617:
+				      tomoyo_yesno(profile->preference.
+						   learning_symlink_target)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#678: FILE: security/tomoyo/policy_io.c:620:
+		if (profile->permissive != &tomoyo_default_profile.preference
+		    && !tomoyo_io_printf(head, "%u-PREFERENCE::permissive={ "

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'profile->preference.permissive_verbose'
#681: FILE: security/tomoyo/policy_io.c:623:
+					 tomoyo_yesno(profile->preference.
+						      permissive_verbose)))

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'profile->preference.enforcing_verbose'
#687: FILE: security/tomoyo/policy_io.c:629:
+				      tomoyo_yesno(profile->preference.
+						   enforcing_verbose),

WARNING:LINE_SPACING: Missing a blank line after declarations
#746: FILE: security/tomoyo/policy_io.c:688:
+	int error = is_delete ? -ENOENT : -ENOMEM;
+	if (tomoyo_is_domain_def(manager)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#789: FILE: security/tomoyo/policy_io.c:731:
+	bool is_delete = tomoyo_str_starts(&data, TOMOYO_KEYWORD_DELETE);
+	if (!strcmp(data, "manage_by_non_root")) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#806: FILE: security/tomoyo/policy_io.c:748:
+	struct list_head *pos;
+	if (head->read_eof)

WARNING:LINE_SPACING: Missing a blank line after declarations
#811: FILE: security/tomoyo/policy_io.c:753:
+		struct tomoyo_policy_manager_entry *ptr;
+		ptr = list_entry(pos, struct tomoyo_policy_manager_entry,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#835: FILE: security/tomoyo/policy_io.c:777:
+	const struct tomoyo_path_info *domainname
+		= tomoyo_current_domain()->domainname;

WARNING:LINE_SPACING: Missing a blank line after declarations
#837: FILE: security/tomoyo/policy_io.c:779:
+	bool found = false;
+	if (!tomoyo_policy_loaded)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#845: FILE: security/tomoyo/policy_io.c:787:
+		if (!ptr->is_deleted && ptr->is_domain
+		    && !tomoyo_pathcmp(domainname, ptr->manager)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#856: FILE: security/tomoyo/policy_io.c:798:
+		if (!ptr->is_deleted && !ptr->is_domain
+		    && !strcmp(exe, ptr->manager->name)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#866: FILE: security/tomoyo/policy_io.c:808:
+		const pid_t pid = current->pid;
+		if (tomoyo_last_pid != pid) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#867: FILE: security/tomoyo/policy_io.c:809:
+			printk(KERN_WARNING "%s ( %s ) is not permitted to "

WARNING:SPLIT_STRING: quoted string split across lines
#868: FILE: security/tomoyo/policy_io.c:810:
+			printk(KERN_WARNING "%s ( %s ) is not permitted to "
+			       "update policies.\n", domainname->name, exe);

WARNING:LINE_SPACING: Missing a blank line after declarations
#887: FILE: security/tomoyo/policy_io.c:829:
+	char *cp = strstr(data, " if ");
+	if (cp) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#890: FILE: security/tomoyo/policy_io.c:832:
+			char *cp2 = strstr(cp + 3, " if ");
+			if (!cp2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#919: FILE: security/tomoyo/policy_io.c:861:
+	bool global_pid = false;
+	if (!strcmp(data, "allow_execute")) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#923: FILE: security/tomoyo/policy_io.c:865:
+	if (sscanf(data, "pid=%u", &pid) == 1 ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#923: FILE: security/tomoyo/policy_io.c:865:
+	if (sscanf(data, "pid=%u", &pid) == 1 ||
[...]
+	} else if (!strncmp(data, "domain=", 7)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#926: FILE: security/tomoyo/policy_io.c:868:
+		struct task_struct *p;
+		read_lock(&tasklist_lock);

CHECK:BRACES: Unbalanced braces around else statement
#937: FILE: security/tomoyo/policy_io.c:879:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#949: FILE: security/tomoyo/policy_io.c:891:
+		struct tomoyo_domain_info *d;
+		head->read_var1 = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1001: FILE: security/tomoyo/policy_io.c:943:
+	int error;
+	if (tomoyo_str_starts(&data, TOMOYO_KEYWORD_DELETE))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1025: FILE: security/tomoyo/policy_io.c:967:
+	if (sscanf(data, TOMOYO_KEYWORD_USE_PROFILE "%u", &profile) == 1
+	    && profile < TOMOYO_MAX_PROFILES) {

CHECK:SPACING: No space is necessary after a cast
#1026: FILE: security/tomoyo/policy_io.c:968:
+		if (!tomoyo_policy_loaded || tomoyo_profile_ptr[(u8) profile])

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1027: FILE: security/tomoyo/policy_io.c:969:
+			domain->profile = (u8) profile;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1062: FILE: security/tomoyo/policy_io.c:1004:
+	int pos = head->read_avail;
+	if (pos && head->read_buf[pos - 1] == ' ')

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1098: FILE: security/tomoyo/policy_io.c:1040:
+ const bool need_space)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1104: FILE: security/tomoyo/policy_io.c:1046:
+	u8 max_type;
+	if (need_space && !tomoyo_io_printf(head, " "))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1187: FILE: security/tomoyo/policy_io.c:1129:
+	char buffer[32];
+	if (!cond)

CHECK:SPACING: No space is necessary after a cast
#1190: FILE: security/tomoyo/policy_io.c:1132:
+	condp = (const struct tomoyo_condition_element *) (cond + 1);

CHECK:SPACING: No space is necessary after a cast
#1191: FILE: security/tomoyo/policy_io.c:1133:
+	numbers_p = (const struct tomoyo_number_union *) (condp + condc);

CHECK:SPACING: No space is necessary after a cast
#1194: FILE: security/tomoyo/policy_io.c:1136:
+	argv = (const struct tomoyo_argv_entry *) (names_p + cond->names_count);

CHECK:SPACING: No space is necessary after a cast
#1195: FILE: security/tomoyo/policy_io.c:1137:
+	envp = (const struct tomoyo_envp_entry *) (argv + cond->argc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1203: FILE: security/tomoyo/policy_io.c:1145:
+		const u8 right = condp->right;
+		condp++;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1295: FILE: security/tomoyo/policy_io.c:1237:
+	const u16 perm = ptr->perm;
+	for (bit = head->read_bit; bit < TOMOYO_MAX_PATH_OPERATION; bit++) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1302: FILE: security/tomoyo/policy_io.c:1244:
+		if ((bit == TOMOYO_TYPE_READ || bit == TOMOYO_TYPE_WRITE)
+		    && (perm & (1 << TOMOYO_TYPE_READ_WRITE)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1334: FILE: security/tomoyo/policy_io.c:1276:
+	const u16 perm = ptr->perm;
+	for (bit = head->read_bit; bit < TOMOYO_MAX_PATH_NUMBER3_OPERATION;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1371: FILE: security/tomoyo/policy_io.c:1313:
+	const u8 perm = ptr->perm;
+	for (bit = head->read_bit; bit < TOMOYO_MAX_PATH2_OPERATION; bit++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1405: FILE: security/tomoyo/policy_io.c:1347:
+	const u8 perm = ptr->perm;
+	for (bit = head->read_bit; bit < TOMOYO_MAX_PATH_NUMBER_OPERATION;

WARNING:TYPO_SPELLING: 'evironment' may be misspelled - perhaps 'environment'?
#1425: FILE: security/tomoyo/policy_io.c:1367:
+ * tomoyo_print_env_acl - Print an evironment variable name's ACL entry.
                                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1438: FILE: security/tomoyo/policy_io.c:1380:
+	const int pos = head->read_avail;
+	if (!tomoyo_io_printf(head, TOMOYO_KEYWORD_ALLOW_ENV "%s",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1461: FILE: security/tomoyo/policy_io.c:1403:
+	const int pos = head->read_avail;
+	if (!tomoyo_io_printf(head, TOMOYO_KEYWORD_ALLOW_CAPABILITY "%s",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1483: FILE: security/tomoyo/policy_io.c:1425:
+	const u32 max_address = ptr->address.ipv4.max;
+	if (!tomoyo_io_printf(head, "%u.%u.%u.%u", HIPQUAD(min_address)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1486: FILE: security/tomoyo/policy_io.c:1428:
+	if (min_address != max_address
+	    && !tomoyo_io_printf(head, "-%u.%u.%u.%u", HIPQUAD(max_address)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1505: FILE: security/tomoyo/policy_io.c:1447:
+	const struct in6_addr *max_address = ptr->address.ipv6.max;
+	tomoyo_print_ipv6(buf, sizeof(buf), min_address);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1532: FILE: security/tomoyo/policy_io.c:1474:
+	const u16 perm = ptr->perm;
+	for (bit = head->read_bit; bit < TOMOYO_MAX_NETWORK_OPERATION; bit++) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ptr->address.group->group_name->name'
#1542: FILE: security/tomoyo/policy_io.c:1484:
+			if (!tomoyo_io_printf(head, "@%s", ptr->address.group->
+					      group_name->name))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1577: FILE: security/tomoyo/policy_io.c:1519:
+ struct tomoyo_execute_handler_record *ptr)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1596: FILE: security/tomoyo/policy_io.c:1538:
+	const int pos = head->read_avail;
+	if (!tomoyo_io_printf(head, TOMOYO_KEYWORD_ALLOW_MOUNT) ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#1621: FILE: security/tomoyo/policy_io.c:1563:
+	const u8 acl_type = ptr->type;
+	if (ptr->is_deleted)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1625: FILE: security/tomoyo/policy_io.c:1567:
+		struct tomoyo_path_acl *acl
+			= container_of(ptr, struct tomoyo_path_acl, head);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1630: FILE: security/tomoyo/policy_io.c:1572:
+		struct tomoyo_execute_handler_record *acl
+			= container_of(ptr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1634: FILE: security/tomoyo/policy_io.c:1576:
+		const char *keyword = TOMOYO_KEYWORD_EXECUTE_HANDLER;
+		return tomoyo_print_execute_handler_record(head, keyword, acl);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1638: FILE: security/tomoyo/policy_io.c:1580:
+		struct tomoyo_execute_handler_record *acl
+			= container_of(ptr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1642: FILE: security/tomoyo/policy_io.c:1584:
+		const char *keyword = TOMOYO_KEYWORD_DENIED_EXECUTE_HANDLER;
+		return tomoyo_print_execute_handler_record(head, keyword, acl);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1648: FILE: security/tomoyo/policy_io.c:1590:
+		struct tomoyo_path_number3_acl *acl
+			= container_of(ptr, struct tomoyo_path_number3_acl,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1654: FILE: security/tomoyo/policy_io.c:1596:
+		struct tomoyo_path2_acl *acl
+			= container_of(ptr, struct tomoyo_path2_acl,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1660: FILE: security/tomoyo/policy_io.c:1602:
+		struct tomoyo_path_number_acl *acl
+			= container_of(ptr, struct tomoyo_path_number_acl,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1666: FILE: security/tomoyo/policy_io.c:1608:
+		struct tomoyo_env_acl *acl
+			= container_of(ptr, struct tomoyo_env_acl, head);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1671: FILE: security/tomoyo/policy_io.c:1613:
+		struct tomoyo_capability_acl *acl
+			= container_of(ptr, struct tomoyo_capability_acl,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1677: FILE: security/tomoyo/policy_io.c:1619:
+		struct tomoyo_ip_network_acl *acl
+			= container_of(ptr, struct tomoyo_ip_network_acl,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1683: FILE: security/tomoyo/policy_io.c:1625:
+		struct tomoyo_mount_acl *acl
+			= container_of(ptr, struct tomoyo_mount_acl, head);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1686: FILE: security/tomoyo/policy_io.c:1628:
+	BUG(); /* This must not happen. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1701: FILE: security/tomoyo/policy_io.c:1643:
+	struct list_head *apos;
+	if (head->read_eof)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1711: FILE: security/tomoyo/policy_io.c:1653:
+		const char *ignore_global_allow_env = "";
+		domain = list_entry(dpos, struct tomoyo_domain_info, list);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1723: FILE: security/tomoyo/policy_io.c:1665:
+			ignore_global_allow_read
+				= TOMOYO_KEYWORD_IGNORE_GLOBAL_ALLOW_READ "\n";

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1726: FILE: security/tomoyo/policy_io.c:1668:
+			ignore_global_allow_env
+				= TOMOYO_KEYWORD_IGNORE_GLOBAL_ALLOW_ENV "\n";

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1743: FILE: security/tomoyo/policy_io.c:1685:
+			struct tomoyo_acl_info *ptr
+				= list_entry(apos, struct tomoyo_acl_info,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1779: FILE: security/tomoyo/policy_io.c:1721:
+	unsigned int profile;
+	if (!cp)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1782: FILE: security/tomoyo/policy_io.c:1724:
+	profile = simple_strtoul(data, NULL, 10);

CHECK:SPACING: No space is necessary after a cast
#1787: FILE: security/tomoyo/policy_io.c:1729:
+		       tomoyo_profile_ptr[(u8) profile]))

CHECK:SPACING: No space is necessary after a cast
#1788: FILE: security/tomoyo/policy_io.c:1730:
+		domain->profile = (u8) profile;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1809: FILE: security/tomoyo/policy_io.c:1751:
+	struct list_head *pos;
+	if (head->read_eof)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1813: FILE: security/tomoyo/policy_io.c:1755:
+		struct tomoyo_domain_info *domain;
+		domain = list_entry(pos, struct tomoyo_domain_info, list);

CHECK:SPACING: No space is necessary after a cast
#1866: FILE: security/tomoyo/policy_io.c:1808:
+	pid = (unsigned int) simple_strtoul(buf, NULL, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1866: FILE: security/tomoyo/policy_io.c:1808:
+	pid = (unsigned int) simple_strtoul(buf, NULL, 10);

WARNING:SPLIT_STRING: quoted string split across lines
#1884: FILE: security/tomoyo/policy_io.c:1826:
+		tomoyo_io_printf(head, "%u manager=%s execute_handler=%s "
+				 "state[0]=%u state[1]=%u state[2]=%u", pid,

CHECK:SPACING: No space is necessary after a cast
#1889: FILE: security/tomoyo/policy_io.c:1831:
+				 (u8) (tomoyo_flags >> 24),

CHECK:SPACING: No space is necessary after a cast
#1890: FILE: security/tomoyo/policy_io.c:1832:
+				 (u8) (tomoyo_flags >> 16),

CHECK:SPACING: No space is necessary after a cast
#1891: FILE: security/tomoyo/policy_io.c:1833:
+				 (u8) (tomoyo_flags >> 8));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1905: FILE: security/tomoyo/policy_io.c:1847:
+	bool is_delete = tomoyo_str_starts(&data, TOMOYO_KEYWORD_DELETE);
+	if (tomoyo_str_starts(&data, TOMOYO_KEYWORD_KEEP_DOMAIN))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2022: FILE: security/tomoyo/policy_io.c:1964:
+	bool done = false;
+	if (!bprm->argc)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2032: FILE: security/tomoyo/policy_io.c:1974:
+			const unsigned char c = kaddr[offset++];
+			if (c && arg_len < TOMOYO_EXEC_TMPSIZE - 10) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2042: FILE: security/tomoyo/policy_io.c:1984:
+					arg_ptr[arg_len++]
+						= ((c >> 3) & 7) + '0';

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2076: FILE: security/tomoyo/policy_io.c:2018:
+	const struct tomoyo_profile *profile
+		= tomoyo_profile(ee->r.domain->profile);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2079: FILE: security/tomoyo/policy_io.c:2021:
+		struct file *file = ee->bprm->file;
+		realpath = tomoyo_realpath_from_path(&file->f_path);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2097: FILE: security/tomoyo/policy_io.c:2039:
+		const int pos = strlen(buf);
+		snprintf(buf + pos, len - pos - 1,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2102: FILE: security/tomoyo/policy_io.c:2044:
+		const int pos = strlen(buf);
+		snprintf(buf + pos, len - pos - 1, " exec.realpath=\"%s\"",

WARNING:LINE_SPACING: Missing a blank line after declarations
#2108: FILE: security/tomoyo/policy_io.c:2050:
+		const int pos = strlen(buf);
+		snprintf(buf + pos, len - pos - 1, " exec.argv[0]=\"%s\"",

WARNING:LINE_SPACING: Missing a blank line after declarations
#2131: FILE: security/tomoyo/policy_io.c:2073:
+	const struct tomoyo_profile *profile = tomoyo_profile(r->profile);
+	if (profile->learning->learning_symlink_target) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2141: FILE: security/tomoyo/policy_io.c:2083:
+		const int pos = strlen(buf);
+		snprintf(buf + pos, len - pos - 1,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2146: FILE: security/tomoyo/policy_io.c:2088:
+		const int pos = strlen(buf);
+		snprintf(buf + pos, len - pos - 1, " symlink.target=\"%s\"",

WARNING:LINE_SPACING: Missing a blank line after declarations
#2197: FILE: security/tomoyo/policy_io.c:2139:
+	char *header;
+	if (!r->domain)

CHECK:SPACING: No space is necessary after a cast
#2206: FILE: security/tomoyo/policy_io.c:2148:
+		len = vsnprintf((char *) &pos, sizeof(pos) - 1, fmt, args) + 4;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2215: FILE: security/tomoyo/policy_io.c:2157:
+		if (r->ee && !strncmp(buffer, "allow_execute ", 14))
[...]
+		else if (r->obj && r->obj->symlink_target)
[...]
+		else if ((current->tomoyo_flags &
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2222: FILE: security/tomoyo/policy_io.c:2164:
+			char str[] = "if task.type=execute_handler";
+			cond = tomoyo_get_condition(str);

CHECK:BRACES: Unbalanced braces around else statement
#2223: FILE: security/tomoyo/policy_io.c:2165:
+		} else

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2228: FILE: security/tomoyo/policy_io.c:2170:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:LINE_SPACING: Missing a blank line after declarations
#2234: FILE: security/tomoyo/policy_io.c:2176:
+		int i;
+		if (current->tomoyo_flags & TOMOYO_DONT_SLEEP_ON_ENFORCE_ERROR)

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'enforcing->enforcing_penalty'
#2237: FILE: security/tomoyo/policy_io.c:2179:
+		for (i = 0; i < tomoyo_profile(r->domain->profile)->enforcing->
+			     enforcing_penalty; i++) {

CHECK:SPACING: No space is necessary after a cast
#2244: FILE: security/tomoyo/policy_io.c:2186:
+	len = vsnprintf((char *) &pos, sizeof(pos) - 1, fmt, args) + 32;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2333: FILE: security/tomoyo/policy_io.c:2275:
+	u8 i;
+	for (i = 0; i < 2; i++) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2337: FILE: security/tomoyo/policy_io.c:2279:
+			struct tomoyo_query_entry *ptr
+				= list_entry(tmp, struct tomoyo_query_entry,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2365: FILE: security/tomoyo/policy_io.c:2307:
+	char *buf;
+	if (head->read_avail)

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2368: FILE: security/tomoyo/policy_io.c:2310:
+	if (head->read_buf) {
+		kfree(head->read_buf);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2375: FILE: security/tomoyo/policy_io.c:2317:
+		struct tomoyo_query_entry *ptr
+			= list_entry(tmp, struct tomoyo_query_entry, list);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2395: FILE: security/tomoyo/policy_io.c:2337:
+		struct tomoyo_query_entry *ptr
+			= list_entry(tmp, struct tomoyo_query_entry, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2432: FILE: security/tomoyo/policy_io.c:2374:
+	unsigned int answer;
+	spin_lock(&tomoyo_query_list_lock);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2435: FILE: security/tomoyo/policy_io.c:2377:
+		struct tomoyo_query_entry *ptr
+			= list_entry(tmp, struct tomoyo_query_entry, list);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2444: FILE: security/tomoyo/policy_io.c:2386:
+		struct tomoyo_query_entry *ptr
+			= list_entry(tmp, struct tomoyo_query_entry, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2497: FILE: security/tomoyo/policy_io.c:2439:
+	struct tomoyo_io_buffer *head = kzalloc(sizeof(*head), GFP_KERNEL);
+	if (!head)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2538: FILE: security/tomoyo/policy_io.c:2480:
+		/* fall through */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2638: FILE: security/tomoyo/policy_io.c:2580:
+	struct tomoyo_io_buffer *head = file->private_data;
+	if (!head->poll)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2639: FILE: security/tomoyo/policy_io.c:2581:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:TYPO_SPELLING: 'Poiner' may be misspelled - perhaps 'Pointer'?
#2647: FILE: security/tomoyo/policy_io.c:2589:
+ * @buffer:     Poiner to buffer to write to.
                 ^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2658: FILE: security/tomoyo/policy_io.c:2600:
+	char *cp;
+	if (!head->read)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2659: FILE: security/tomoyo/policy_io.c:2601:
+		return -ENOSYS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2714: FILE: security/tomoyo/policy_io.c:2656:
+	char *cp0 = head->write_buf;
+	if (!head->write)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2715: FILE: security/tomoyo/policy_io.c:2657:
+		return -ENOSYS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2728: FILE: security/tomoyo/policy_io.c:2670:
+		char c;
+		if (head->write_avail >= head->writebuf_size - 1) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2731: FILE: security/tomoyo/policy_io.c:2673:
+			char *cp = kzalloc(len, GFP_KERNEL);
+			if (!cp) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "head->write_buf"
#2769: FILE: security/tomoyo/policy_io.c:2711:
+	const bool is_write = head->write_buf != NULL;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064252.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 112 warnings, 107 checks, 2734 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064252.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
