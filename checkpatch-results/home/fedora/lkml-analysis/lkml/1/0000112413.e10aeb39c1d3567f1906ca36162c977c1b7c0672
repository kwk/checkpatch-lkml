WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git futexes-for-linus

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#155: FILE: Documentation/futex-requeue-pi.txt:70:
+        /* the kernel acquired the the mutex for us */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#370: FILE: kernel/futex.c:594:
+	ret = lock_taken = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#537: FILE: kernel/futex.c:973:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'atomicly' may be misspelled - perhaps 'atomically'?
#597: FILE: kernel/futex.c:1033:
+ *  0 - failed to acquire the lock atomicly
                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: kernel/futex.c:1038:
+static int futex_proxy_trylock_atomic(u32 __user *pifutex,
+				 struct futex_hash_bucket *hb1,

WARNING:TYPO_SPELLING: 'unecessarily' may be misspelled - perhaps 'unnecessarily'?
#619: FILE: kernel/futex.c:1055:
+	 * the bit unecessarily as it will force the subsequent unlock to enter
 	           ^^^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#648: FILE: kernel/futex.c:1084:
+ * ^I^Ipi futex (pi to pi requeue is not supported)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pi_state"
#693: FILE: kernel/futex.c:1127:
+	if (pi_state != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pi_state"
#836: FILE: kernel/futex.c:1287:
+	if (pi_state != NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#944: FILE: kernel/futex.c:1575:
+		printk(KERN_ERR "fixup_owner: ret = %d pi-mutex: %p "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fixup_owner', this function's name, in a string
#944: FILE: kernel/futex.c:1575:
+		printk(KERN_ERR "fixup_owner: ret = %d pi-mutex: %p "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#945: FILE: kernel/futex.c:1576:
+		printk(KERN_ERR "fixup_owner: ret = %d pi-mutex: %p "
+				"pi-state %p\n", ret,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: kernel/futex.c:1646:
+static int futex_wait_setup(u32 __user *uaddr, u32 val, int fshared,
+			   struct futex_q *q, struct futex_hash_bucket **hb)

WARNING:TYPO_SPELLING: 'proprogate' may be misspelled - perhaps 'propagate'?
#1416: FILE: kernel/futex.c:1883:
+	 * If fixup_owner() returned an error, proprogate that.  If it acquired
 	                                       ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'initialyl' may be misspelled - perhaps 'initially'?
#1511: FILE: kernel/futex.c:2082:
+ * @uaddr:	the futex we initialyl wait on (non-pi)
           	             ^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1513: FILE: kernel/futex.c:2084:
+ * ^I^Ithe same type, no requeueing from private to shared, etc.$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q.pi_state->owner != current'
#1617: FILE: kernel/futex.c:2188:
+		if (q.pi_state && (q.pi_state->owner != current)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'proprogate' may be misspelled - perhaps 'propagate'?
#1641: FILE: kernel/futex.c:2212:
+		 * If fixup_owner() returned an error, proprogate that.  If it
 		                                       ^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1875: FILE: kernel/rtmutex.c:614:
+ * ^I^I^I or TASK_UNINTERRUPTIBLE)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2035: FILE: kernel/rtmutex.c:1051:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2065: FILE: kernel/rtmutex.c:1092:
+ * ^I^I^Ibeen started.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2122: FILE: kernel/rtmutex_common.h:123:
+extern int rt_mutex_start_proxy_lock(struct rt_mutex *lock,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2126: FILE: kernel/rtmutex_common.h:127:
+extern int rt_mutex_finish_proxy_lock(struct rt_mutex *lock,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 10 checks, 1977 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
