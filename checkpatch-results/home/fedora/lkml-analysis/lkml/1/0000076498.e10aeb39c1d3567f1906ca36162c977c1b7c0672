WARNING:TYPO_SPELLING: 'specfication' may be misspelled - perhaps 'specification'?
#35: 
'version': Intel(R) QuickData specfication revision
                              ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#95: FILE: drivers/dma/ioat/dma.c:1092:
+}
+static struct ioat_sysfs_entry ring_size_attr = __ATTR_RO(ring_size);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#103: FILE: drivers/dma/ioat/dma.c:1100:
+}
+static struct ioat_sysfs_entry ring_active_attr = __ATTR_RO(ring_active);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#117: FILE: drivers/dma/ioat/dma.c:1114:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#118: FILE: drivers/dma/ioat/dma.c:1115:
+}
+struct ioat_sysfs_entry ioat_cap_attr = __ATTR_RO(cap);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#128: FILE: drivers/dma/ioat/dma.c:1125:
+}
+struct ioat_sysfs_entry ioat_version_attr = __ATTR_RO(version);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#152: FILE: drivers/dma/ioat/dma.c:1149:
+struct sysfs_ops ioat_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#196: FILE: drivers/dma/ioat/dma.c:1193:
 int __devinit ioat1_dma_probe(struct ioatdma_device *device, int dca)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dma_chan *' should also have an identifier name
#238: FILE: drivers/dma/ioat/dma.h:109:
+	ssize_t (*show)(struct dma_chan *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#238: FILE: drivers/dma/ioat/dma.h:109:
+	ssize_t (*show)(struct dma_chan *, char *);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#257: FILE: drivers/dma/ioat/dma.h:332:
+extern struct sysfs_ops ioat_sysfs_ops;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#275: FILE: drivers/dma/ioat/dma_v2.c:805:
+}
+static struct ioat_sysfs_entry ring_size_attr = __ATTR_RO(ring_size);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#284: FILE: drivers/dma/ioat/dma_v2.c:814:
+}
+static struct ioat_sysfs_entry ring_active_attr = __ATTR_RO(ring_active);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#299: FILE: drivers/dma/ioat/dma_v2.c:829:
 int __devinit ioat2_dma_probe(struct ioatdma_device *device, int dca)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076498.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 7 checks, 261 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076498.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
