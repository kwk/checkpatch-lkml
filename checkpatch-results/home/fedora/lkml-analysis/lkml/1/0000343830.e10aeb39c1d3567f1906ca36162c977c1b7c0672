CHECK:CAMELCASE: Avoid CamelCase: <stdIdent>
#86: FILE: fs/udf/super.c:569:
+		} else if (!strncmp(vsd->stdIdent, VSD_STD_ID_CD001,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPLIT_STRING: quoted string split across lines
#97: FILE: fs/udf/super.c:578:
+				udf_debug("ISO9660 Primary Volume Descriptor "
+					  "found\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#103: FILE: fs/udf/super.c:582:
+				udf_debug("ISO9660 Supplementary Volume "
+					  "Descriptor found\n");

WARNING:SPLIT_STRING: quoted string split across lines
#109: FILE: fs/udf/super.c:586:
+				udf_debug("ISO9660 Volume Partition Descriptor "
+					  "found\n");

WARNING:SPLIT_STRING: quoted string split across lines
#115: FILE: fs/udf/super.c:590:
+				udf_debug("ISO9660 Volume Descriptor Set "
+					  "Terminator found\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/udf/super.c:601:
+		else if (!strncmp(vsd->stdIdent, VSD_STD_ID_TEA01,
+				    VSD_STD_ID_LEN)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: fs/udf/super.c:608:
+		else if (!strncmp(vsd->stdIdent, VSD_STD_ID_NSR03,
+				    VSD_STD_ID_LEN))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#153: FILE: fs/udf/super.c:666:
+			ident = location = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: fs/udf/super.c:671:
+					tag *t = (tag *)bh->b_data;
+					ident = le16_to_cpu(t->tagIdent);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <tagIdent>
#158: FILE: fs/udf/super.c:671:
+					ident = le16_to_cpu(t->tagIdent);

CHECK:CAMELCASE: Avoid CamelCase: <tagLocation>
#159: FILE: fs/udf/super.c:672:
+					location = le32_to_cpu(t->tagLocation);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#174: FILE: fs/udf/super.c:684:
+					lastblock = udf_variable_to_fixed(last[i]) - UDF_SB_SESSION(sb);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#189: FILE: fs/udf/super.c:695:
+				ident = location = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: fs/udf/super.c:700:
+						tag *t = (tag *)bh->b_data;
+						ident = le16_to_cpu(t->tagIdent);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#212: FILE: fs/udf/super.c:711:
+					ident = location = 0;

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#214: FILE: fs/udf/super.c:713:
+						bh = sb_bread(sb, last[i] - 312 - UDF_SB_SESSION(sb));

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#215: FILE: fs/udf/super.c:714:
+						if (bh) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LINE_SPACING: Missing a blank line after declarations
#217: FILE: fs/udf/super.c:716:
+							tag *t = (tag *)bh->b_data;
+							ident = le16_to_cpu(t->tagIdent);

WARNING:LINE_SPACING: Missing a blank line after declarations
#236: FILE: fs/udf/super.c:738:
+			tag *t = (tag *)bh->b_data;
+			ident = le16_to_cpu(t->tagIdent);

CHECK:BRACES: braces {} should be used on all arms of this statement
#249: FILE: fs/udf/super.c:751:
+			if (!bh)
[...]
-			} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#252: FILE: fs/udf/super.c:753:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: fs/udf/super.c:799:
+			lastblock = UDF_SB_PARTLEN(sb,
+					newfileset.partitionReferenceNum);

CHECK:CAMELCASE: Avoid CamelCase: <partitionReferenceNum>
#289: FILE: fs/udf/super.c:799:
+					newfileset.partitionReferenceNum);

WARNING:SPLIT_STRING: quoted string split across lines
#305: FILE: fs/udf/super.c:866:
+		udf_debug("recording time %ld/%ld, %04u/%02u/%02u"
+			  " %02u:%02u (%x)\n",

CHECK:CAMELCASE: Avoid CamelCase: <partitionLength>
#315: FILE: fs/udf/super.c:914:
+			UDF_SB_PARTLEN(sb, i) = le32_to_cpu(p->partitionLength); /* blocks */

CHECK:CAMELCASE: Avoid CamelCase: <partitionStartingLocation>
#316: FILE: fs/udf/super.c:915:
+			UDF_SB_PARTROOT(sb, i) = le32_to_cpu(p->partitionStartingLocation);

CHECK:CAMELCASE: Avoid CamelCase: <partitionContents>
#332: FILE: fs/udf/super.c:925:
+			if (!strcmp(p->partitionContents.ident,

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#353: FILE: fs/udf/super.c:955:
+						UDF_SB_PARTFLAGS(sb, i) |= UDF_PART_FLAG_UNALLOC_BITMAP;

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#371: FILE: fs/udf/super.c:985:
+						UDF_SB_PARTFLAGS(sb, i) |= UDF_PART_FLAG_FREED_BITMAP;

WARNING:SPLIT_STRING: quoted string split across lines
#383: FILE: fs/udf/super.c:999:
+		udf_debug("Partition (%d:%d type %x) starts at physical %d, "
+			  "block length %d\n",

CHECK:CAMELCASE: Avoid CamelCase: <partitionNumber>
#384: FILE: fs/udf/super.c:1000:
+			  le16_to_cpu(p->partitionNumber), i,

CHECK:CAMELCASE: Avoid CamelCase: <volSeqNum>
#399: FILE: fs/udf/super.c:1025:
+			UDF_SB_PARTVSN(sb, i) = le16_to_cpu(gpm1->volSeqNum);

CHECK:CAMELCASE: Avoid CamelCase: <partitionNum>
#400: FILE: fs/udf/super.c:1026:
+			UDF_SB_PARTNUM(sb, i) = le16_to_cpu(gpm1->partitionNum);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#425: FILE: fs/udf/super.c:1045:
+				UDF_SB_TYPESPAR(sb, i).s_packet_len = le16_to_cpu(spm->packetLength);

CHECK:CAMELCASE: Avoid CamelCase: <packetLength>
#425: FILE: fs/udf/super.c:1045:
+				UDF_SB_TYPESPAR(sb, i).s_packet_len = le16_to_cpu(spm->packetLength);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s_spar_map[j]"
#433: FILE: fs/udf/super.c:1050:
+					if (UDF_SB_TYPESPAR(sb, i).s_spar_map[j] != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#434: FILE: fs/udf/super.c:1051:
+						st = (struct sparingTable *)UDF_SB_TYPESPAR(sb, i).s_spar_map[j]->b_data;

CHECK:CAMELCASE: Avoid CamelCase: <sparingTable>
#434: FILE: fs/udf/super.c:1051:
+						st = (struct sparingTable *)UDF_SB_TYPESPAR(sb, i).s_spar_map[j]->b_data;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#439: FILE: fs/udf/super.c:1054:
+							brelse(UDF_SB_TYPESPAR(sb, i).s_spar_map[j]);

CHECK:CAMELCASE: Avoid CamelCase: <partIdent>
#449: FILE: fs/udf/super.c:1062:
+					  upm2->partIdent.ident);

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlockNum>
#470: FILE: fs/udf/super.c:1078:
+			  "partition=%d\n", fileset->logicalBlockNum,

WARNING:SPLIT_STRING: quoted string split across lines
#470: FILE: fs/udf/super.c:1078:
+		udf_debug("FileSet found in LogicalVolDesc at block=%d, "
+			  "partition=%d\n", fileset->logicalBlockNum,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: fs/udf/super.c:1104:
+			udf_load_logicalvolint(sb,
+				leea_to_cpu(UDF_SB_LVID(sb)->nextIntegrityExt));

CHECK:CAMELCASE: Avoid CamelCase: <nextIntegrityExt>
#480: FILE: fs/udf/super.c:1104:
+				leea_to_cpu(UDF_SB_LVID(sb)->nextIntegrityExt));

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#517: FILE: fs/udf/super.c:1230:
+						if (udf_load_partdesc(sb,

CHECK:BRACES: Unbalanced braces around else statement
#534: FILE: fs/udf/super.c:1259:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#536: FILE: fs/udf/super.c:1261:
+		if (block == -1) {
[...]
+		} else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#538: FILE: fs/udf/super.c:1263:
+			udf_debug("Failed to read byte 32768. Assuming open "
+				  "disc. Skipping validity check\n");

CHECK:BRACES: Unbalanced braces around else statement
#542: FILE: fs/udf/super.c:1267:
+		} else

CHECK:CAMELCASE: Avoid CamelCase: <mainVolDescSeqExt>
#552: FILE: fs/udf/super.c:1291:
+			main_e = le32_to_cpu(anchor->mainVolDescSeqExt.extLength);

CHECK:CAMELCASE: Avoid CamelCase: <extLength>
#552: FILE: fs/udf/super.c:1291:
+			main_e = le32_to_cpu(anchor->mainVolDescSeqExt.extLength);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#585: FILE: fs/udf/super.c:1522:
+		printk(KERN_WARNING "UDF-fs: No VRS found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#594: FILE: fs/udf/super.c:1536:
+		printk(KERN_WARNING "UDF-fs: No partition found (1)\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#603: FILE: fs/udf/super.c:1548:
+			printk(KERN_ERR "UDF-fs: minUDFReadRev=%x (max is %x)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#612: FILE: fs/udf/super.c:1565:
+		printk(KERN_WARNING "UDF-fs: No partition found (2)\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#618: FILE: fs/udf/super.c:1570:
+		printk(KERN_NOTICE "UDF-fs: Partition marked readonly; forcing readonly mount\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#624: FILE: fs/udf/super.c:1575:
+		printk(KERN_WARNING "UDF-fs: No fileset found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#633: FILE: fs/udf/super.c:1596:
+		printk(KERN_ERR "UDF-fs: Error in udf_iget, block=%d, partition=%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#642: FILE: fs/udf/super.c:1604:
+		printk(KERN_ERR "UDF-fs: Couldn't allocate root dentry\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#663: FILE: fs/udf/super.c:1654:
+	printk(KERN_CRIT "UDF-fs error (device %s): %s: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: fs/udf/super.c:1655:
+	printk(KERN_CRIT "UDF-fs error (device %s): %s: %s\n",
 		sb->s_id, function, error_buf);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000343830.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 30 warnings, 31 checks, 624 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000343830.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
