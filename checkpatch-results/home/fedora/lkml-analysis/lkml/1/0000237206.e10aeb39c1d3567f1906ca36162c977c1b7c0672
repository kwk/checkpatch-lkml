WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#42: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: fs/axfs/axfs_inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#79: FILE: fs/axfs/axfs_inode.c:33:
+void axfs_kill_super(struct super_block *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#79: FILE: fs/axfs/axfs_inode.c:33:
+void axfs_kill_super(struct super_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#80: FILE: fs/axfs/axfs_inode.c:34:
+void axfs_profiling_add(struct axfs_super *, unsigned long, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct axfs_super *' should also have an identifier name
#80: FILE: fs/axfs/axfs_inode.c:34:
+void axfs_profiling_add(struct axfs_super *, unsigned long, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#80: FILE: fs/axfs/axfs_inode.c:34:
+void axfs_profiling_add(struct axfs_super *, unsigned long, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#80: FILE: fs/axfs/axfs_inode.c:34:
+void axfs_profiling_add(struct axfs_super *, unsigned long, unsigned int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#81: FILE: fs/axfs/axfs_inode.c:35:
+int axfs_copy_mtd(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#81: FILE: fs/axfs/axfs_inode.c:35:
+int axfs_copy_mtd(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#81: FILE: fs/axfs/axfs_inode.c:35:
+int axfs_copy_mtd(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#81: FILE: fs/axfs/axfs_inode.c:35:
+int axfs_copy_mtd(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#81: FILE: fs/axfs/axfs_inode.c:35:
+int axfs_copy_mtd(struct super_block *, void *, u64, u64);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#82: FILE: fs/axfs/axfs_inode.c:36:
+int axfs_copy_block(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#82: FILE: fs/axfs/axfs_inode.c:36:
+int axfs_copy_block(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#82: FILE: fs/axfs/axfs_inode.c:36:
+int axfs_copy_block(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#82: FILE: fs/axfs/axfs_inode.c:36:
+int axfs_copy_block(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#82: FILE: fs/axfs/axfs_inode.c:36:
+int axfs_copy_block(struct super_block *, void *, u64, u64);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#96: FILE: fs/axfs/axfs_inode.c:50:
+static struct file_operations axfs_directory_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#102: FILE: fs/axfs/axfs_inode.c:56:
+static struct file_operations axfs_fops = {

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#108: FILE: fs/axfs/axfs_inode.c:62:
+static struct address_space_operations axfs_aops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#113: FILE: fs/axfs/axfs_inode.c:67:
+static struct inode_operations axfs_dir_inode_operations = {

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#117: FILE: fs/axfs/axfs_inode.c:71:
+static struct vm_operations_struct axfs_vm_ops = {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#136: FILE: fs/axfs/axfs_inode.c:90:
+		if (sbi->mmap_size >= end) {
[...]
+		} else if (sbi->mmap_size > begin) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#154: FILE: fs/axfs/axfs_inode.c:108:
+	if (AXFS_HAS_BDEV(sb)) {
[...]
+	} else if (AXFS_HAS_MTD(sb)) {
[...]
+	} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#165: FILE: fs/axfs/axfs_inode.c:119:
+	u64 *inode_number = (u64 *) opaque;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_sb"
#167: FILE: fs/axfs/axfs_inode.c:121:
+	if (inode->i_sb == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#168: FILE: fs/axfs/axfs_inode.c:122:
+		printk(KERN_ERR "axfs_iget5_test:"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'axfs_iget5_test', this function's name, in a string
#168: FILE: fs/axfs/axfs_inode.c:122:
+		printk(KERN_ERR "axfs_iget5_test:"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#169: FILE: fs/axfs/axfs_inode.c:123:
+		printk(KERN_ERR "axfs_iget5_test:"
+		       " the super block is set to null\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#179: FILE: fs/axfs/axfs_inode.c:133:
+	u64 *inode_number = (u64 *) opaque;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_sb"
#181: FILE: fs/axfs/axfs_inode.c:135:
+	if (inode->i_sb == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#182: FILE: fs/axfs/axfs_inode.c:136:
+		printk(KERN_ERR "axfs_iget5_set:"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'axfs_iget5_set', this function's name, in a string
#182: FILE: fs/axfs/axfs_inode.c:136:
+		printk(KERN_ERR "axfs_iget5_set:"

WARNING:SPLIT_STRING: quoted string split across lines
#183: FILE: fs/axfs/axfs_inode.c:137:
+		printk(KERN_ERR "axfs_iget5_set:"
+		       " the super block is set to null \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#183: FILE: fs/axfs/axfs_inode.c:137:
+		       " the super block is set to null \n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#208: FILE: fs/axfs/axfs_inode.c:162:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = sbi->timestamp;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#231: FILE: fs/axfs/axfs_inode.c:185:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#234: FILE: fs/axfs/axfs_inode.c:188:
+{
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#245: FILE: fs/axfs/axfs_inode.c:199:
+				  struct nameidata *nd)
 				                    ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#287: FILE: fs/axfs/axfs_inode.c:241:
+
+	}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#294: FILE: fs/axfs/axfs_inode.c:248:
+static int axfs_readdir(struct file *filp, void *dirent, filldir_t filldir)
                                      ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#307: FILE: fs/axfs/axfs_inode.c:261:
+	/* Get the current index into the directory and verify it is not beyond
+	   the end of the list */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#307: FILE: fs/axfs/axfs_inode.c:261:
+	   the end of the list */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#369: FILE: fs/axfs/axfs_inode.c:323:
+	/* if that pages are marked for write they will probably end up in RAM
+	   therefore we don't want their counts for being XIP'd */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#369: FILE: fs/axfs/axfs_inode.c:323:
+	   therefore we don't want their counts for being XIP'd */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#374: FILE: fs/axfs/axfs_inode.c:328:
+	/* figure out if the node is XIP or compressed and call the
+	   appropriate function

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#380: FILE: fs/axfs/axfs_inode.c:334:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#382: FILE: fs/axfs/axfs_inode.c:336:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#393: FILE: fs/axfs/axfs_inode.c:347:
+ *    (IN) filp -  file to be read
            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#405: FILE: fs/axfs/axfs_inode.c:359:
+static ssize_t axfs_file_read(struct file *filp, char __user *buf, size_t len,
                                            ^^^^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#425: FILE: fs/axfs/axfs_inode.c:379:
+		if (AXFS_IS_NODE_XIP(sbi, array_index)) {
[...]
+		} else {
[...]

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#426: FILE: fs/axfs/axfs_inode.c:380:
+			read = xip_file_read(filp, buf, readlength, ppos);
 			                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#428: FILE: fs/axfs/axfs_inode.c:382:
+			read = do_sync_read(filp, buf, readlength, ppos);
 			                    ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'total_read != len'
#433: FILE: fs/axfs/axfs_inode.c:387:
+		if ((len - total_read < PAGE_SIZE) && (total_read != len))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <Compressed>
#468: FILE: fs/axfs/axfs_inode.c:422:
+	if (node_type == Compressed) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sbi->compressed
#478: FILE: fs/axfs/axfs_inode.c:432:
+			axfs_copy_data(sb, cblk1, &(sbi->compressed), ofs, len);

CHECK:CAMELCASE: Avoid CamelCase: <Byte_Aligned>
#488: FILE: fs/axfs/axfs_inode.c:442:
+	} else if (node_type == Byte_Aligned) {

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#489: FILE: fs/axfs/axfs_inode.c:443:
+		/* node is in BA region */
 		              ^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sbi->byte_aligned
#493: FILE: fs/axfs/axfs_inode.c:447:
+		axfs_copy_data(sb, pgdata, &(sbi->byte_aligned), ofs, len);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sbi->xip
#498: FILE: fs/axfs/axfs_inode.c:452:
+		axfs_copy_data(sb, pgdata, &(sbi->xip), ofs, len);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237206.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 45 warnings, 16 checks, 488 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237206.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
