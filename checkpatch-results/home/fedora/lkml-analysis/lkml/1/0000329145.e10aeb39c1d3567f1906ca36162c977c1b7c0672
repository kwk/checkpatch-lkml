WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: lib/tracing/trace_events.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prio' - possible side-effects?
#135: FILE: lib/tracing/trace_events.c:76:
+#define __PRIO(prio) \
+	((prio) <= 99 ? 199 - (prio) : (prio) - 120)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#184: FILE: lib/tracing/trace_events.c:125:
+#define getarg(arg, ap) arg = va_arg(ap, typeof(arg))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#482: FILE: lib/tracing/trace_events.c:423:
+static struct trace_types_struct event_trace __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#522: FILE: lib/tracing/trace_events.c:463:
+	for (probe = event_probes; probe->name; probe++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#529: FILE: lib/tracing/trace_events.c:470:
+			pr_info("event trace: Couldn't add marker"
+				" probe to %s\n", probe->name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#546: FILE: lib/tracing/Kconfig:31:
+config EVENT_TRACER
+	bool "trace kernel events"
+	depends on DEBUG_KERNEL
+	select TRACING
+	select CONTEXT_SWITCH_TRACER
+	select MARKERS
+	help
+	  This option activates the event tracer of the latency_tracer.
+	  It activates markers through out the kernel for tracing.
+	  This option has a fairly low overhead when enabled.
+
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#826: FILE: lib/tracing/tracer.c:839:
+		seq_printf(m, "(%13Lx %lx)",

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#993: FILE: lib/tracing/tracer.h:184:
+extern int trace_event_enabled(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#994: FILE: lib/tracing/tracer.h:185:
+extern void trace_event_wakeup(unsigned long ip,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#997: FILE: lib/tracing/tracer.h:188:
+extern void trace_event_register(struct tracing_trace *tr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#998: FILE: lib/tracing/tracer.h:189:
+extern void trace_event_unregister(struct tracing_trace *tr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#999: FILE: lib/tracing/tracer.h:190:
+extern void trace_start_events(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1000: FILE: lib/tracing/tracer.h:191:
+extern void trace_stop_events(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000329145.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 4 warnings, 8 checks, 942 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000329145.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
