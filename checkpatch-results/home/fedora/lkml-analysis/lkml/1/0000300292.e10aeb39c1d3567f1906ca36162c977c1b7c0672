CHECK:CAMELCASE: Avoid CamelCase: <Dl_spinlock>
#67: FILE: drivers/char/ip2/i2ellis.c:56:
+static DEFINE_RWLOCK(Dl_spinlock);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <pB>
#106: FILE: drivers/char/ip2/i2ellis.c:182:
+	outb(0, pB->i2eBase + FIFO_RESET);  /* Any data will do */

CHECK:CAMELCASE: Avoid CamelCase: <i2eBase>
#106: FILE: drivers/char/ip2/i2ellis.c:182:
+	outb(0, pB->i2eBase + FIFO_RESET);  /* Any data will do */

CHECK:CAMELCASE: Avoid CamelCase: <i2eUsingIrq>
#118: FILE: drivers/char/ip2/i2ellis.c:205:
+	pB->i2eUsingIrq = I2_IRQ_UNDEFINED; /* to not use an interrupt so far */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#177: FILE: drivers/char/ip2/i2ellis.c:298:
+		pB->i2ePom.c[itemp] = c = inb(pB->i2eData);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <i2ePom>
#177: FILE: drivers/char/ip2/i2ellis.c:298:
+		pB->i2ePom.c[itemp] = c = inb(pB->i2eData);

CHECK:CAMELCASE: Avoid CamelCase: <i2eData>
#177: FILE: drivers/char/ip2/i2ellis.c:298:
+		pB->i2ePom.c[itemp] = c = inb(pB->i2eData);

CHECK:CAMELCASE: Avoid CamelCase: <i2eDataWidth16>
#213: FILE: drivers/char/ip2/i2ellis.c:333:
+		pB->i2eDataWidth16 = false;

CHECK:CAMELCASE: Avoid CamelCase: <ii2Safe>
#327: FILE: drivers/char/ip2/i2ellis.c:656:
+			inb(ii2Safe);

CHECK:CAMELCASE: Avoid CamelCase: <i2ePointer>
#440: FILE: drivers/char/ip2/i2ellis.c:938:
+		outb(SEL_COMMAND, pB->i2ePointer);

CHECK:CAMELCASE: Avoid CamelCase: <i2eStatus>
#444: FILE: drivers/char/ip2/i2ellis.c:941:
+		itemp = inb(pB->i2eStatus);

CHECK:CAMELCASE: Avoid CamelCase: <i2eXMail>
#547: FILE: drivers/char/ip2/i2ellis.c:1112:
+	outb(mail, pB->i2eXMail);

CHECK:CAMELCASE: Avoid CamelCase: <i2eXMask>
#595: FILE: drivers/char/ip2/i2ellis.c:1200:
+	outb(MX_IN_MAIL, pB->i2eXMask);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#666: FILE: drivers/char/ip2/i2ellis.h:488:
+					 * ever promote to this! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pB' may be better as '(pB)' to avoid precedence issues
#698: FILE: drivers/char/ip2/i2ellis.h:497:
+#define I2_HAS_INPUT(pB)	!(inb(pB->i2eStatus) & ST_IN_EMPTY)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pB' may be better as '(pB)' to avoid precedence issues
#704: FILE: drivers/char/ip2/i2ellis.h:502:
+#define I2_HAS_MAIL(pB)		(inb(pB->i2eStatus) & ST_IN_MAIL)

CHECK:CAMELCASE: Avoid CamelCase: <i2eFifoRemains>
#711: FILE: drivers/char/ip2/i2ellis.h:504:
+#define I2_UPDATE_FIFO_ROOM(pB)	((pB)->i2eFifoRemains = (pB)->i2eFifoSize)

CHECK:CAMELCASE: Avoid CamelCase: <i2eFifoSize>
#711: FILE: drivers/char/ip2/i2ellis.h:504:
+#define I2_UPDATE_FIFO_ROOM(pB)	((pB)->i2eFifoRemains = (pB)->i2eFifoSize)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pB' - possible side-effects?
#711: FILE: drivers/char/ip2/i2ellis.h:504:
+#define I2_UPDATE_FIFO_ROOM(pB)	((pB)->i2eFifoRemains = (pB)->i2eFifoSize)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#733: FILE: drivers/char/ip2/i2ellis.h:563:
+#define I2_COMPLETE(pB,code) do { \
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pB' may be better as '(pB)' to avoid precedence issues
#733: FILE: drivers/char/ip2/i2ellis.h:563:
+#define I2_COMPLETE(pB,code) do { \
 		 pB->i2eError = code; \
 		 return (code == I2EE_GOOD);\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'code' - possible side-effects?
#733: FILE: drivers/char/ip2/i2ellis.h:563:
+#define I2_COMPLETE(pB,code) do { \
 		 pB->i2eError = code; \
 		 return (code == I2EE_GOOD);\
 	} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#733: FILE: drivers/char/ip2/i2ellis.h:563:
+#define I2_COMPLETE(pB,code) do { \
 		 pB->i2eError = code; \
 		 return (code == I2EE_GOOD);\
 	} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#753: FILE: drivers/char/ip2/i2hw.h:646:
+#define I2_OUTSW(port, addr, count)	outsw((port), (addr), (((count)+1)/2))
                                    	                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#753: FILE: drivers/char/ip2/i2hw.h:646:
+#define I2_OUTSW(port, addr, count)	outsw((port), (addr), (((count)+1)/2))
                                    	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#754: FILE: drivers/char/ip2/i2hw.h:647:
+#define I2_OUTSB(port, addr, count)	outsb((port), (addr), (((count)+1))&-2)
                                    	                               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#754: FILE: drivers/char/ip2/i2hw.h:647:
+#define I2_OUTSB(port, addr, count)	outsb((port), (addr), (((count)+1))&-2)
                                    	                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#755: FILE: drivers/char/ip2/i2hw.h:648:
+#define I2_INSW(port, addr, count)	insw((port), (addr), (((count)+1)/2))
                                   	                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#755: FILE: drivers/char/ip2/i2hw.h:648:
+#define I2_INSW(port, addr, count)	insw((port), (addr), (((count)+1)/2))
                                   	                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#756: FILE: drivers/char/ip2/i2hw.h:649:
+#define I2_INSB(port, addr, count)	insb((port), (addr), (((count)+1))&-2)
                                   	                              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#756: FILE: drivers/char/ip2/i2hw.h:649:
+#define I2_INSB(port, addr, count)	insb((port), (addr), (((count)+1))&-2)
                                   	                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <Dbuf_spinlock>
#783: FILE: drivers/char/ip2/i2lib.c:238:
+	rwlock_init(&pB->Dbuf_spinlock);

CHECK:CAMELCASE: Avoid CamelCase: <Bbuf_spinlock>
#784: FILE: drivers/char/ip2/i2lib.c:239:
+	rwlock_init(&pB->Bbuf_spinlock);

CHECK:CAMELCASE: Avoid CamelCase: <Fbuf_spinlock>
#785: FILE: drivers/char/ip2/i2lib.c:240:
+	rwlock_init(&pB->Fbuf_spinlock);

CHECK:CAMELCASE: Avoid CamelCase: <pCh>
#797: FILE: drivers/char/ip2/i2lib.c:262:
+		rwlock_init(&pCh->Ibuf_spinlock);

CHECK:CAMELCASE: Avoid CamelCase: <Ibuf_spinlock>
#797: FILE: drivers/char/ip2/i2lib.c:262:
+		rwlock_init(&pCh->Ibuf_spinlock);

CHECK:CAMELCASE: Avoid CamelCase: <Obuf_spinlock>
#798: FILE: drivers/char/ip2/i2lib.c:263:
+		rwlock_init(&pCh->Obuf_spinlock);

CHECK:CAMELCASE: Avoid CamelCase: <Cbuf_spinlock>
#799: FILE: drivers/char/ip2/i2lib.c:264:
+		rwlock_init(&pCh->Cbuf_spinlock);

CHECK:CAMELCASE: Avoid CamelCase: <Pbuf_spinlock>
#800: FILE: drivers/char/ip2/i2lib.c:265:
+		rwlock_init(&pCh->Pbuf_spinlock);

CHECK:CAMELCASE: Avoid CamelCase: <i2eValid>
#914: FILE: drivers/char/ip2/i2lib.c:565:
+	if (pB->i2eValid != I2E_MAGIC || pB->i2eUsingIrq == I2_IRQ_UNDEFINED)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1090: FILE: drivers/char/ip2/i2lib.c:1493:
+				write_unlock_irqrestore(&pB->read_fifo_spinlock,
+						bflags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1100: FILE: drivers/char/ip2/i2lib.c:1502:
+				write_unlock_irqrestore(&pB->read_fifo_spinlock,
+						bflags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1110: FILE: drivers/char/ip2/i2lib.c:1517:
+				write_unlock_irqrestore(&pB->read_fifo_spinlock,
+						bflags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1130: FILE: drivers/char/ip2/i2lib.c:1569:
+			write_unlock_irqrestore(&pB->read_fifo_spinlock,
+					bflags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1140: FILE: drivers/char/ip2/i2lib.c:1592:
+			write_unlock_irqrestore(&pB->read_fifo_spinlock,
+					bflags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1150: FILE: drivers/char/ip2/i2lib.c:1838:
+			write_unlock_irqrestore(&pB->read_fifo_spinlock,
 					bflags);

CHECK:CAMELCASE: Avoid CamelCase: <paddedSize>
#1191: FILE: drivers/char/ip2/i2lib.c:1913:
+			paddedSize = roundup(packetSize, 2);

CHECK:CAMELCASE: Avoid CamelCase: <packetSize>
#1191: FILE: drivers/char/ip2/i2lib.c:1913:
+			paddedSize = roundup(packetSize, 2);

CHECK:CAMELCASE: Avoid CamelCase: <flowIn>
#1209: FILE: drivers/char/ip2/i2lib.c:1961:
+	unsigned short paddedSize = roundup(sizeof(flowIn), 2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1250: FILE: drivers/char/ip2/i2lib.c:2201:
+			write_unlock_irqrestore(&pB->write_fifo_spinlock,
+					flags);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1255: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1592: FILE: drivers/char/ip2/ip2main.c:2877:
+				rc = put_user(inb(pB->i2eStatus),
 					(ULONG __user *)(arg + (ULONG)(&pB->i2eStatus) - (ULONG)pB ) );

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000300292.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 3 warnings, 48 checks, 1276 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000300292.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
