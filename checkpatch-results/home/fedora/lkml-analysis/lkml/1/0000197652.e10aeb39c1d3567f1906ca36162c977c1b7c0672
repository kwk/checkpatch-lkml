WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#71: FILE: drivers/industrialio/Kconfig:13:
+config IIO_RING_BUFFER
+       bool "Enable ring buffer support within iio"
+	  depends on INDUSTRIALIO
+	  help
+	    Provide support for various ring buffer based data
+	    acquisition methods.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#88: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: drivers/industrialio/industrialio-ring.c:1:
+/* The industrial I/O core

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: drivers/industrialio/industrialio-ring.c:32:
+int iio_push_ring_event(struct iio_ring_buffer *ring_buf,
+		       int event_code,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: drivers/industrialio/industrialio-ring.c:43:
+int iio_push_or_escallate_ring_event(struct iio_ring_buffer *ring_buf,
+				    int event_code,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#156: FILE: drivers/industrialio/industrialio-ring.c:64:
+int iio_ring_open(struct inode *inode, struct file *filp)
                                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#174: FILE: drivers/industrialio/industrialio-ring.c:82:
+int iio_ring_release(struct inode *inode, struct file *filp)
                                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#193: FILE: drivers/industrialio/industrialio-ring.c:101:
+ssize_t iio_ring_rip_outer(struct file *filp,
                                         ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#215: FILE: drivers/industrialio/industrialio-ring.c:123:
+	 * When such a design exists I'll add this to ring access funcs. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf->event_minor_name"
#248: FILE: drivers/industrialio/industrialio-ring.c:156:
+	if (buf->event_minor_name == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around buf->ev_int
#253: FILE: drivers/industrialio/industrialio-ring.c:161:
+	ret = iio_setup_ev_int(&(buf->ev_int),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around buf->ev_int
#272: FILE: drivers/industrialio/industrialio-ring.c:180:
+	iio_free_ev_int(&(buf->ev_int), dev);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf->access_minor_name"
#287: FILE: drivers/industrialio/industrialio-ring.c:195:
+	if (buf->access_minor_name == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: drivers/industrialio/industrialio-ring.c:208:
+	__init_iio_chrdev_minor_attr(&buf->access_minor_attr,
+				   (const char *)(buf->access_minor_name),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around buf->access_minor_attr.dev_attr.attr
#305: FILE: drivers/industrialio/industrialio-ring.c:213:
+				&(buf->access_minor_attr.dev_attr.attr));

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: drivers/industrialio/industrialio-ring.c:243:
+	struct iio_ring_buffer *rb;
+	ret = dev_info->ring_access._create(&dev_info->ring);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#375: FILE: drivers/industrialio/industrialio-ring.c:283:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: drivers/industrialio/industrialio-ring.c:304:
+static ssize_t iio_write_ring_length(struct device *dev,
+					      struct device_attribute *attr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#404: FILE: drivers/industrialio/industrialio-ring.c:312:
+	struct iio_ring_access_funcs *ra = &dev_info->ring_access;
+	ret = strict_strtoul(buf, 10, &val);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#404: FILE: drivers/industrialio/industrialio-ring.c:312:
+	ret = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: drivers/industrialio/industrialio-ring.c:330:
+static ssize_t iio_read_ring_bps(struct device *dev,
+					  struct device_attribute *attr,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'iio_read_ring_length' to 'length_show' 'iio_write_ring_length' to 'length_store'
#434: FILE: drivers/industrialio/industrialio-ring.c:342:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

CHECK:LINE_SPACING: Please don't use multiple blank lines
#436: FILE: drivers/industrialio/industrialio-ring.c:344:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#437: FILE: drivers/industrialio/industrialio-ring.c:345:
+static DEVICE_ATTR(length, S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'iio_read_ring_bps' to 'bps_show'
#444: FILE: drivers/industrialio/industrialio-ring.c:352:
+static DEVICE_ATTR(bps, S_IRUGO, iio_read_ring_bps, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#444: FILE: drivers/industrialio/industrialio-ring.c:352:
+static DEVICE_ATTR(bps, S_IRUGO, iio_read_ring_bps, NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#475: FILE: drivers/industrialio/industrialio-ring.c:383:
+		if (dev_info->modes & INDIO_RING_TRIGGERED)
[...]
+		else if (dev_info->modes & INDIO_RING_HARDWARE_BUFFER)
[...]
+		else { /* should never be reached */
[...]

CHECK:BRACES: Unbalanced braces around else statement
#479: FILE: drivers/industrialio/industrialio-ring.c:387:
+		else { /* should never be reached */

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'iio_show_ring_enable' to 'ring_enable_show' 'iio_store_ring_enable' to 'ring_enable_store'
#521: FILE: drivers/industrialio/industrialio-ring.c:429:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#523: FILE: drivers/industrialio/industrialio-ring.c:431:
+DEVICE_ATTR(ring_enable, S_IRUGO | S_IWUSR,

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#573: FILE: drivers/industrialio/industrialio-ring.c:481:
+	struct iio_ring_buffer *rb = dev_info->ring;;

WARNING:LINE_SPACING: Missing a blank line after declarations
#574: FILE: drivers/industrialio/industrialio-ring.c:482:
+	struct iio_ring_buffer *rb = dev_info->ring;;
+	if (dev_info->ring) {

WARNING:TYPO_SPELLING: 'indentification' may be misspelled - perhaps 'identification'?
#596: FILE: include/linux/industrialio/ring_generic.h:22:
+ * @event_code:		event indentification code
                		      ^^^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#605: FILE: include/linux/industrialio/ring_generic.h:31:
+ * Typical usecase is to escallate a 50% ring full to 75% full if noone has yet
                                                                   ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#705: FILE: include/linux/industrialio/ring_generic.h:131:
+static inline void __iio_init_ring_buffer(struct iio_ring_buffer *ring,
+				 int bytes_per_datum, int length)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197652.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 15 checks, 634 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000197652.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
