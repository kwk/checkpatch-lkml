WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This patch extends this ability, allowing the core_pattern to contain arguments

WARNING:LINE_SPACING: Missing a blank line after declarations
#66: FILE: fs/exec.c:1455:
+	int i;
+	if (argv != NULL) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "argv"
#66: FILE: fs/exec.c:1455:
+	if (argv != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "argv[i]"
#67: FILE: fs/exec.c:1456:
+		for (i = 0; argv[i] != NULL; i++)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#72: FILE: fs/exec.c:1461:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: fs/exec.c:1464:
+ * format_corename_argv will inspect the corename string, ^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#75: FILE: fs/exec.c:1464:
+ * format_corename_argv will inspect the corename string, ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: fs/exec.c:1467:
+ * in the argv array, that can then be passed to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: fs/exec.c:1481:
+^I */^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#93: FILE: fs/exec.c:1482:
+	argv_ptr = kmalloc(sizeof(char **)*i, GFP_KERNEL);
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#93: FILE: fs/exec.c:1482:
+	argv_ptr = kmalloc(sizeof(char **)*i, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:TYPO_SPELLING: 'trucates' may be misspelled - perhaps 'truncates'?
#102: FILE: fs/exec.c:1491:
+	/* This trucates the string command line for use in exec */
 	        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: fs/exec.c:1492:
+^Iif (fptr != NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fptr"
#103: FILE: fs/exec.c:1492:
+	if (fptr != NULL) 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!argv_ptr[0]"
#108: FILE: fs/exec.c:1497:
+	if (argv_ptr[0] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fptr"
#116: FILE: fs/exec.c:1505:
+	if (fptr == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#123: FILE: fs/exec.c:1512:
+	for(;;) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#129: FILE: fs/exec.c:1518:
+		argv_ptr = krealloc(argv_ptr, (sizeof(char **)*(i+1)), GFP_KERNEL);
 		                                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#129: FILE: fs/exec.c:1518:
+		argv_ptr = krealloc(argv_ptr, (sizeof(char **)*(i+1)), GFP_KERNEL);
 		                                                 ^

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#129: FILE: fs/exec.c:1518:
+		argv_ptr = krealloc(argv_ptr, (sizeof(char **)*(i+1)), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fptr"
#134: FILE: fs/exec.c:1523:
+		if (fptr != NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#137: FILE: fs/exec.c:1526:
+		argv_ptr[i-1] = kmalloc(strlen(nptr), GFP_KERNEL);
 		          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#138: FILE: fs/exec.c:1527:
+		if (argv_ptr[i-1] == NULL)
 		              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!argv_ptr[i-1]"
#138: FILE: fs/exec.c:1527:
+		if (argv_ptr[i-1] == NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#144: FILE: fs/exec.c:1533:
+		strcpy(argv_ptr[i-1],nptr);
 		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#144: FILE: fs/exec.c:1533:
+		strcpy(argv_ptr[i-1],nptr);
 		                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fptr"
#145: FILE: fs/exec.c:1534:
+		if (fptr == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#151: FILE: fs/exec.c:1540:
+
+

ERROR:SPACING: space required after that ';' (ctx:VxV)
#158: FILE: fs/exec.c:1547:
+	for (i = 0;orig_argv[i] != NULL; i++)
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "orig_argv[i]"
#158: FILE: fs/exec.c:1547:
+	for (i = 0;orig_argv[i] != NULL; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: fs/exec.c:1653:
+^I^I^I^I^I      "%lu", current->signal->rlim[RLIMIT_CORE].rlim_cur); $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ispipe'
#198: FILE: fs/exec.c:1891:
+	if ((!ispipe) && (core_limit < binfmt->min_coredump))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'core_limit < binfmt->min_coredump'
#198: FILE: fs/exec.c:1891:
+	if ((!ispipe) && (core_limit < binfmt->min_coredump))

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: fs/exec.c:1898:
+ ^I^Iif(call_usermodehelper_pipe(corename+1, helper_argv, NULL, &file)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#206: FILE: fs/exec.c:1898:
+ ^I^Iif(call_usermodehelper_pipe(corename+1, helper_argv, NULL, &file)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: fs/exec.c:1898:
+ ^I^Iif(call_usermodehelper_pipe(corename+1, helper_argv, NULL, &file)) {$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#206: FILE: fs/exec.c:1898:
+ 		if(call_usermodehelper_pipe(corename+1, helper_argv, NULL, &file)) {
  		                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#206: FILE: fs/exec.c:1898:
+ 		if(call_usermodehelper_pipe(corename+1, helper_argv, NULL, &file)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000400121.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 8 warnings, 20 checks, 163 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000400121.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
