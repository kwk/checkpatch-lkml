WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#45: FILE: drivers/md/Kconfig:279:
+config DM_BAND
+	tristate "I/O band width control "
+	depends on BLK_DEV_DM
+	---help---
+	Any processes or cgroups can use the same storage
+	with its band-width fairly shared.
+
+	If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: drivers/md/dm-band-policy.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#97: FILE: drivers/md/dm-band-policy.c:20:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#108: FILE: drivers/md/dm-band-policy.c:31:
+#if 0	/* this will also work correct */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: drivers/md/dm-band-policy.c:37:
+	dprintk(KERN_ERR "proceed_epoch %d --> %d\n",
+						bs->g_epoch-1, bs->g_epoch);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#114: FILE: drivers/md/dm-band-policy.c:37:
+						bs->g_epoch-1, bs->g_epoch);
 						           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#134: FILE: drivers/md/dm-band-policy.c:57:
+	iopri = bw->c_token*BAND_IOPRIO_BASE/bw->c_token_init_value + 1;
 	                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#134: FILE: drivers/md/dm-band-policy.c:57:
+	iopri = bw->c_token*BAND_IOPRIO_BASE/bw->c_token_init_value + 1;
 	                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#138: FILE: drivers/md/dm-band-policy.c:61:
+		iopri += BAND_IOPRIO_BASE*2;
 		                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: drivers/md/dm-band-policy.c:74:
+		dprintk(KERN_ERR "refill token: bw:%p token:%d\n",
+							bw, bw->c_token);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#172: FILE: drivers/md/dm-band-policy.c:95:
+		p->c_token = p->c_token_init_value =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#173: FILE: drivers/md/dm-band-policy.c:96:
+		   bs->g_token_base*p->c_weight/bs->g_weight_total + 1;
 		                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#173: FILE: drivers/md/dm-band-policy.c:96:
+		   bs->g_token_base*p->c_weight/bs->g_weight_total + 1;
 		                               ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#195: FILE: drivers/md/dm-band-policy.c:118:
+	int val = simple_strtol(value, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#204: FILE: drivers/md/dm-band-policy.c:127:
+		if (val > 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#207: FILE: drivers/md/dm-band-policy.c:130:
+		} else

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#219: FILE: drivers/md/dm-band-policy.c:142:
+ * ^I^I    The larger return value the higher priority to submit.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#220: FILE: drivers/md/dm-band-policy.c:143:
+ * ^I^I    Zero means it has no right.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: drivers/md/dm-band-policy.c:146:
+ * ^I^I    can't be submitted now.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: drivers/md/dm-band-policy.c:148:
+ * ^I^I    Returns 0 if it has become able to submit them now.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: drivers/md/dm-band-policy.c:149:
+ * ^I^I    Otherwise, returns 1 and this policy module has to restart$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: drivers/md/dm-band-policy.c:152:
+ * ^I^I    The default function is used when this method is undefined.$

WARNING:TYPO_SPELLING: 'initalize' may be misspelled - perhaps 'initialize'?
#231: FILE: drivers/md/dm-band-policy.c:154:
+ * g_group_ctr    : To initalize the policy own members of struct bandgroup.
                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#234: FILE: drivers/md/dm-band-policy.c:157:
+ * ^I^I    The parameters can be passed through "dmsetup message"$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#250: FILE: drivers/md/dm-band-policy.c:173:
+}
+/* weight balancing policy. --- End --- */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#252: FILE: drivers/md/dm-band-policy.c:175:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#267: FILE: drivers/md/dm-band-type.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#340: FILE: drivers/md/dm-band.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#364: FILE: drivers/md/dm-band.h:25:
+	spinlock_t	g_lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bandgroup *' should also have an identifier name
#373: FILE: drivers/md/dm-band.h:34:
+	int	(*g_can_submit)(struct bandgroup *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bandgroup *' should also have an identifier name
#374: FILE: drivers/md/dm-band.h:35:
+	void	(*g_prepare_bio)(struct bandgroup *, struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#374: FILE: drivers/md/dm-band.h:35:
+	void	(*g_prepare_bio)(struct bandgroup *, struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct banddevice *' should also have an identifier name
#375: FILE: drivers/md/dm-band.h:36:
+	int	(*g_restart_bios)(struct banddevice *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bandgroup *' should also have an identifier name
#376: FILE: drivers/md/dm-band.h:37:
+	void	(*g_hold_bio)(struct bandgroup *, struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#376: FILE: drivers/md/dm-band.h:37:
+	void	(*g_hold_bio)(struct bandgroup *, struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bandgroup *' should also have an identifier name
#377: FILE: drivers/md/dm-band.h:38:
+	struct bio * (*g_pop_bio)(struct bandgroup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bandgroup *' should also have an identifier name
#378: FILE: drivers/md/dm-band.h:39:
+	int	(*g_group_ctr)(struct bandgroup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bandgroup *' should also have an identifier name
#379: FILE: drivers/md/dm-band.h:40:
+	void	(*g_group_dtr)(struct bandgroup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bandgroup *' should also have an identifier name
#380: FILE: drivers/md/dm-band.h:41:
+	int	(*g_set_param)(struct bandgroup *, char *cmd, char *value);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#409: FILE: drivers/md/dm-band.h:70:
+	int	(*c_getid)(struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct banddevice *' should also have an identifier name
#423: FILE: drivers/md/dm-band.h:84:
+	void	  (*p_policy_init)(struct banddevice *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#430: FILE: drivers/md/dm-band.h:91:
+	int	  (*t_getid)(struct bio *);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#437: FILE: drivers/md/dm-band.h:98:
+#define dprintk(format, a...) \
+	if (band_debug > 0) band_debug--, printk(format, ##a)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#438: FILE: drivers/md/dm-band.h:99:
+	if (band_debug > 0) band_debug--, printk(format, ##a)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#438: FILE: drivers/md/dm-band.h:99:
+	if (band_debug > 0) band_debug--, printk(format, ##a)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#443: FILE: drivers/md/dm-bandctl.c:1:
+/*

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#470: FILE: drivers/md/dm-bandctl.c:28:
+int band_debug = 0;	/* just for debugging */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#475: FILE: drivers/md/dm-bandctl.c:33:
+	struct policy_type *p;
+	for (p = band_policy_type; (p->p_name); p++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: drivers/md/dm-bandctl.c:46:
+static struct banddevice *alloc_banddevice(int devgroup_id, char *name,
+				int io_throttle, int io_limit)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*new)...) over kzalloc(sizeof(struct banddevice)...)
#495: FILE: drivers/md/dm-bandctl.c:53:
+	new = kzalloc(sizeof(struct banddevice), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: drivers/md/dm-bandctl.c:136:
+static int bandgroup_init(struct bandgroup *bw,
+		struct bandgroup *parent, struct banddevice *bs, int id)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*bw)...) over kzalloc(sizeof(struct bandgroup)...)
#699: FILE: drivers/md/dm-bandctl.c:257:
+	bw = kzalloc(sizeof(struct bandgroup), GFP_KERNEL);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#705: FILE: drivers/md/dm-bandctl.c:263:
+	val = simple_strtol(argv[1], NULL, 0);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'band_ctr', this function's name, in a string
#712: FILE: drivers/md/dm-bandctl.c:270:
+	dprintk(KERN_ERR "band_ctr device group id:%d\n", val);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#715: FILE: drivers/md/dm-bandctl.c:273:
+		val = simple_strtol(argv[2], NULL, 0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#716: FILE: drivers/md/dm-bandctl.c:274:
+		if (val > 0) io_throttle = val;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'band_ctr', this function's name, in a string
#717: FILE: drivers/md/dm-bandctl.c:275:
+		dprintk(KERN_ERR "band_ctr ioqueue_low:%d\n", io_throttle);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#720: FILE: drivers/md/dm-bandctl.c:278:
+		val = simple_strtol(argv[3], NULL, 0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#721: FILE: drivers/md/dm-bandctl.c:279:
+		if (val > 0) io_limit = val;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'band_ctr', this function's name, in a string
#722: FILE: drivers/md/dm-bandctl.c:280:
+		dprintk(KERN_ERR "band_ctr ioqueue_high:%d\n", io_limit);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#743: FILE: drivers/md/dm-bandctl.c:301:
+	strlcpy(bw->c_name, band_group_type[0].t_name, sizeof(bw->c_name));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#817: FILE: drivers/md/dm-bandctl.c:375:
+#if 0

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#818: FILE: drivers/md/dm-bandctl.c:376:
+		if (bs->g_blocked == bs->g_io_limit*2)
 		                                   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#830: FILE: drivers/md/dm-bandctl.c:388:
+static inline struct bandgroup *bandgroup_get(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#850: FILE: drivers/md/dm-bandctl.c:408:
+static int band_map(struct dm_target *ti, struct bio *bio,
+		     union map_info *map_context)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#857: FILE: drivers/md/dm-bandctl.c:415:
+#if 0	/* not supported yet */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#870: FILE: drivers/md/dm-bandctl.c:428:
+#if 0

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#872: FILE: drivers/md/dm-bandctl.c:430:
+	wait_event_lock_irq(&bs->waitq_io, bs->g_blocked < bs->g_io_limit*2,
 	                                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#873: FILE: drivers/md/dm-bandctl.c:431:
+	wait_event_lock_irq(&bs->waitq_io, bs->g_blocked < bs->g_io_limit*2,
+						bs->g_lock, do_nothing);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'band_map', this function's name, in a string
#886: FILE: drivers/md/dm-bandctl.c:444:
+			dprintk(KERN_ERR "band_map: token expired "

WARNING:SPLIT_STRING: quoted string split across lines
#887: FILE: drivers/md/dm-bandctl.c:445:
+			dprintk(KERN_ERR "band_map: token expired "
+						"bw:%p bio:%p\n", bw, bio);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'band_conduct', this function's name, in a string
#945: FILE: drivers/md/dm-bandctl.c:503:
+		dprintk(KERN_ERR "band_conduct: token expired bw:%p\n", bw);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#957: FILE: drivers/md/dm-bandctl.c:515:
+static int band_end_io(struct dm_target *ti, struct bio *bio,
+		    int error, union map_info *map_context)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#972: FILE: drivers/md/dm-bandctl.c:530:
+^I * ^I not to kick the workqueues so often.$

WARNING:LINE_SPACING: Missing a blank line after declarations
#983: FILE: drivers/md/dm-bandctl.c:541:
+	struct bandgroup *bw = ti->private;
+	bandgroup_stop_all(bw);

WARNING:LINE_SPACING: Missing a blank line after declarations
#989: FILE: drivers/md/dm-bandctl.c:547:
+	struct bandgroup *bw = ti->private;
+	bandgroup_resume_all(bw);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#992: FILE: drivers/md/dm-bandctl.c:550:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: drivers/md/dm-bandctl.c:552:
+static void bandgroup_status(struct bandgroup *bw, int *szp, char *result,
+				unsigned int maxlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1008: FILE: drivers/md/dm-bandctl.c:566:
+		DMEMIT(" %lu %lu %lu",
+			bws->immediate + bws->deferred, bws->deferred,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: drivers/md/dm-bandctl.c:573:
+static int band_status(struct dm_target *ti, status_type_t type,
+			char *result, unsigned int maxlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1026: FILE: drivers/md/dm-bandctl.c:584:
+		DMEMIT("devgrp=%u # read-req delay sect write-req delay sect",
+							bs->g_devgroup);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1035: FILE: drivers/md/dm-bandctl.c:593:
+		DMEMIT("%s devgrp=%u io_throttle=%u io_limit=%u",
+					bw->c_dev->name, bs->g_devgroup,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1038: FILE: drivers/md/dm-bandctl.c:596:
+		DMEMIT("\n id=default type=%s weight=%u token=%u",
+			bw->c_name, bw->c_weight, bw->c_token_init_value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1041: FILE: drivers/md/dm-bandctl.c:599:
+			DMEMIT("\n id=%d weight=%u token=%u",
+				p->c_id, p->c_weight, p->c_token_init_value);

WARNING:TYPO_SPELLING: 'tyep' may be misspelled - perhaps 'type'?
#1059: FILE: drivers/md/dm-bandctl.c:617:
+		DMWARN("band tyep select: %s isn't supported.\n", name);
 		             ^^^^

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1068: FILE: drivers/md/dm-bandctl.c:626:
+	strlcpy(bw->c_name, t->t_name, sizeof(bw->c_name));

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1084: FILE: drivers/md/dm-bandctl.c:642:
+		id = simple_strtol(p, NULL, 0);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'band_set_param', this function's name, in a string
#1105: FILE: drivers/md/dm-bandctl.c:663:
+			DMWARN("band_set_param: id=%d not found.\n", id);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'band_group_attach', this function's name, in a string
#1121: FILE: drivers/md/dm-bandctl.c:679:
+		DMWARN("band_group_attach: invalid id:%d\n", id);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sub_bw)...) over kzalloc(sizeof(struct bandgroup)...)
#1124: FILE: drivers/md/dm-bandctl.c:682:
+	sub_bw = kzalloc(sizeof(struct bandgroup), GFP_KERNEL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'band_group_detach', this function's name, in a string
#1143: FILE: drivers/md/dm-bandctl.c:701:
+		DMWARN("band_group_detach: invalid id:%d\n", id);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'band_group_detach', this function's name, in a string
#1150: FILE: drivers/md/dm-bandctl.c:708:
+		DMWARN("band_group_detach: invalid id:%d\n", id);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1166: FILE: drivers/md/dm-bandctl.c:724:
+ * ^I"io_throttle" <value>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1167: FILE: drivers/md/dm-bandctl.c:725:
+ * ^I"io_limit"    <value>$

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1197: FILE: drivers/md/dm-bandctl.c:755:
+		band_debug = simple_strtol(argv[1], NULL, 0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1198: FILE: drivers/md/dm-bandctl.c:756:
+		if (band_debug < 0) band_debug = 0;

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1201: FILE: drivers/md/dm-bandctl.c:759:
+		val = simple_strtol(argv[1], NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1208: FILE: drivers/md/dm-bandctl.c:766:
+		val = simple_strtol(argv[1], NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1218: FILE: drivers/md/dm-bandctl.c:776:
+		int id = simple_strtol(argv[1], NULL, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1219: FILE: drivers/md/dm-bandctl.c:777:
+		int id = simple_strtol(argv[1], NULL, 0);
+		return band_group_attach(bw, id);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1222: FILE: drivers/md/dm-bandctl.c:780:
+		int id = simple_strtol(argv[1], NULL, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1223: FILE: drivers/md/dm-bandctl.c:781:
+		int id = simple_strtol(argv[1], NULL, 0);
+		return band_group_detach(bw, id);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1224: FILE: drivers/md/dm-bandctl.c:782:
+		return band_group_detach(bw, id);
+	} else {

WARNING:SPLIT_STRING: quoted string split across lines
#1274: FILE: drivers/md/dm-bandctl.c:832:
+MODULE_AUTHOR("Hirokazu Takahashi <taka@valinux.co.jp>, "
+	      "Ryo Tsuruta <ryov@valinux.co.jp");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000332972.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 64 warnings, 34 checks, 1213 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000332972.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
