WARNING:TYPO_SPELLING: 'orignal' may be misspelled - perhaps 'original'?
#41: 
(That ia64 is a host which orignal bug report used.)
                           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
Maybe this is bigger patch than expected, but NODEMASK_ALLOC() will be a way

WARNING:TYPO_SPELLING: 'shoudl' may be misspelled - perhaps 'should'?
#61: 
NODEMASK_ALLOC/FREE shoudl be there.
                    ^^^^^^

WARNING:TYPO_SPELLING: 'scrach' may be misspelled - perhaps 'scratch'?
#93: FILE: include/linux/nodemask.h:484:
+ * For nodemask scrach area.(See CPUMASK_ALLOC() in cpumask.h)
                 ^^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#97: FILE: include/linux/nodemask.h:488:
+#define NODEMASK_ALLOC(x, m) struct x *m = kmalloc(sizeof(*m), GFP_KERNEL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#97: FILE: include/linux/nodemask.h:488:
+#define NODEMASK_ALLOC(x, m) struct x *m = kmalloc(sizeof(*m), GFP_KERNEL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#97: FILE: include/linux/nodemask.h:488:
+#define NODEMASK_ALLOC(x, m) struct x *m = kmalloc(sizeof(*m), GFP_KERNEL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#100: FILE: include/linux/nodemask.h:491:
+#define NODEMASK_ALLOC(x, m) struct x _m, *m = &_m

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around m->v
#104: FILE: include/linux/nodemask.h:495:
+#define NODEMASK_POINTER(v, m) nodemask_t *v = &(m->v)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#104: FILE: include/linux/nodemask.h:495:
+#define NODEMASK_POINTER(v, m) nodemask_t *v = &(m->v)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#104: FILE: include/linux/nodemask.h:495:
+#define NODEMASK_POINTER(v, m) nodemask_t *v = &(m->v)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#104: FILE: include/linux/nodemask.h:495:
+#define NODEMASK_POINTER(v, m) nodemask_t *v = &(m->v)

WARNING:TYPO_SPELLING: 'struture' may be misspelled - perhaps 'structure'?
#106: FILE: include/linux/nodemask.h:497:
+/* A example struture for using NODEMASK_ALLOC, used in mempolicy. */
              ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#115: FILE: include/linux/nodemask.h:506:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: mm/mempolicy.c:195:
+static int mpol_set_nodemask(struct mempolicy *pol,
+		     const nodemask_t *nodes, struct nodemask_scratch *nsc)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#146: FILE: mm/mempolicy.c:211:
+			mpol_relative_nodemask(&nsc->mask2, nodes,&nsc->mask1);
 			                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#146: FILE: mm/mempolicy.c:211:
+			mpol_relative_nodemask(&nsc->mask2, nodes,&nsc->mask1);
 			                                          ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#227: FILE: mm/mempolicy.c:1031:
+		if (scratch) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#232: FILE: mm/mempolicy.c:1036:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#295: FILE: mm/mempolicy.c:2169:
+		if (scratch) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#299: FILE: mm/mempolicy.c:2173:
+		} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000091814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 5 warnings, 14 checks, 220 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000091814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
