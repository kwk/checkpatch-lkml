WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#68: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: fs/exofs/dir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#102: FILE: fs/exofs/dir.c:30:
+ * along with exofs; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#103: FILE: fs/exofs/dir.c:31:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#112: FILE: fs/exofs/dir.c:40:
+static inline unsigned exofs_chunk_size(struct inode *inode)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#125: FILE: fs/exofs/dir.c:53:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#125: FILE: fs/exofs/dir.c:53:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#125: FILE: fs/exofs/dir.c:53:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                                        ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#128: FILE: fs/exofs/dir.c:56:
+static unsigned exofs_last_byte(struct inode *inode, unsigned long page_nr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#130: FILE: fs/exofs/dir.c:58:
+	unsigned last_byte = inode->i_size;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#138: FILE: fs/exofs/dir.c:66:
+static int exofs_commit_chunk(struct page *page, loff_t pos, unsigned len)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#149: FILE: fs/exofs/dir.c:77:
+	if (pos+len > dir->i_size) {
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#150: FILE: fs/exofs/dir.c:78:
+		i_size_write(dir, pos+len);
 		                     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#166: FILE: fs/exofs/dir.c:94:
+	unsigned chunk_size = exofs_chunk_size(dir);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#168: FILE: fs/exofs/dir.c:96:
+	unsigned offs, rec_len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#169: FILE: fs/exofs/dir.c:97:
+	unsigned limit = PAGE_CACHE_SIZE;

CHECK:CAMELCASE: Avoid CamelCase: <Ebadsize>
#177: FILE: fs/exofs/dir.c:105:
+			goto Ebadsize;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Eshort>
#186: FILE: fs/exofs/dir.c:114:
+			goto Eshort;

CHECK:CAMELCASE: Avoid CamelCase: <Ealign>
#188: FILE: fs/exofs/dir.c:116:
+			goto Ealign;

CHECK:CAMELCASE: Avoid CamelCase: <Enamelen>
#190: FILE: fs/exofs/dir.c:118:
+			goto Enamelen;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#191: FILE: fs/exofs/dir.c:119:
+		if (((offs + rec_len - 1) ^ offs) & ~(chunk_size-1))
 		                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <Espan>
#192: FILE: fs/exofs/dir.c:120:
+			goto Espan;

CHECK:CAMELCASE: Avoid CamelCase: <Eend>
#195: FILE: fs/exofs/dir.c:123:
+		goto Eend;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#201: FILE: fs/exofs/dir.c:129:
+	printk(KERN_ERR "ERROR [exofs_check_page]: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_check_page', this function's name, in a string
#201: FILE: fs/exofs/dir.c:129:
+	printk(KERN_ERR "ERROR [exofs_check_page]: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#202: FILE: fs/exofs/dir.c:130:
+	printk(KERN_ERR "ERROR [exofs_check_page]: "
+		"size of directory #%lu is not a multiple of chunk size",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#219: FILE: fs/exofs/dir.c:147:
+	printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_check_page', this function's name, in a string
#220: FILE: fs/exofs/dir.c:148:
+		"ERROR [exofs_check_page]: bad entry in directory #%lu: %s - "

WARNING:SPLIT_STRING: quoted string split across lines
#221: FILE: fs/exofs/dir.c:149:
+		"ERROR [exofs_check_page]: bad entry in directory #%lu: %s - "
+		"offset=%lu, inode=%lu, rec_len=%d, name_len=%d",

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#222: FILE: fs/exofs/dir.c:150:
+		dir->i_ino, error, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#222: FILE: fs/exofs/dir.c:150:
+		dir->i_ino, error, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                                                  ^

CHECK:SPACING: No space is necessary after a cast
#223: FILE: fs/exofs/dir.c:151:
+		(unsigned long) le32_to_cpu(p->inode),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#228: FILE: fs/exofs/dir.c:156:
+	printk(KERN_ERR "ERROR [exofs_check_page]: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_check_page', this function's name, in a string
#228: FILE: fs/exofs/dir.c:156:
+	printk(KERN_ERR "ERROR [exofs_check_page]: "

WARNING:SPLIT_STRING: quoted string split across lines
#229: FILE: fs/exofs/dir.c:157:
+	printk(KERN_ERR "ERROR [exofs_check_page]: "
+		"entry in directory #%lu spans the page boundary"

WARNING:SPLIT_STRING: quoted string split across lines
#230: FILE: fs/exofs/dir.c:158:
+		"entry in directory #%lu spans the page boundary"
+		"offset=%lu, inode=%lu",

WARNING:MISSING_SPACE: break quoted strings at a space character
#230: FILE: fs/exofs/dir.c:158:
+		"entry in directory #%lu spans the page boundary"
+		"offset=%lu, inode=%lu",

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#231: FILE: fs/exofs/dir.c:159:
+		dir->i_ino, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#231: FILE: fs/exofs/dir.c:159:
+		dir->i_ino, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                                           ^

CHECK:SPACING: No space is necessary after a cast
#232: FILE: fs/exofs/dir.c:160:
+		(unsigned long) le32_to_cpu(p->inode));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: fs/exofs/dir.c:189:
+static inline int exofs_match(int len, const unsigned char *name,
+					struct exofs_dir_entry *de)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: fs/exofs/dir.c:205:
+exofs_validate_entry(char *base, unsigned offset, unsigned mask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: fs/exofs/dir.c:205:
+exofs_validate_entry(char *base, unsigned offset, unsigned mask)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#281: FILE: fs/exofs/dir.c:209:
+			(struct exofs_dir_entry *)(base + (offset&mask));
 			                                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#316: FILE: fs/exofs/dir.c:244:
+	mode_t mode = inode->i_mode;
+	de->file_type = exofs_type_by_mode[(mode & S_IFMT)>>S_SHIFT];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#316: FILE: fs/exofs/dir.c:244:
+	de->file_type = exofs_type_by_mode[(mode & S_IFMT)>>S_SHIFT];
 	                                                  ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#320: FILE: fs/exofs/dir.c:248:
+exofs_readdir(struct file *filp, void *dirent, filldir_t filldir)
                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#327: FILE: fs/exofs/dir.c:255:
+	unsigned chunk_mask = ~(exofs_chunk_size(inode)-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#327: FILE: fs/exofs/dir.c:255:
+	unsigned chunk_mask = ~(exofs_chunk_size(inode)-1);
 	                                               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#343: FILE: fs/exofs/dir.c:271:
+			printk(KERN_ERR "ERROR: "

WARNING:SPLIT_STRING: quoted string split across lines
#344: FILE: fs/exofs/dir.c:272:
+			printk(KERN_ERR "ERROR: "
+				   "bad page in #%lu",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#355: FILE: fs/exofs/dir.c:283:
+		de = (struct exofs_dir_entry *)(kaddr+offset);
 		                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#359: FILE: fs/exofs/dir.c:287:
+				printk(KERN_ERR "ERROR: "

WARNING:SPLIT_STRING: quoted string split across lines
#360: FILE: fs/exofs/dir.c:288:
+				printk(KERN_ERR "ERROR: "
+					"zero-length directory entry");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: fs/exofs/dir.c:302:
+				over = filldir(dirent, de->name, de->name_len,
+						(n<<PAGE_CACHE_SHIFT) | offset,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#374: FILE: fs/exofs/dir.c:302:
+						(n<<PAGE_CACHE_SHIFT) | offset,
 						  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: fs/exofs/dir.c:322:
+struct exofs_dir_entry *exofs_find_entry(struct inode *dir,
+			struct dentry *dentry, struct page **res_page)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#398: FILE: fs/exofs/dir.c:326:
+	unsigned reclen = EXOFS_DIR_REC_LEN(namelen);

WARNING:LINE_SPACING: Missing a blank line after declarations
#416: FILE: fs/exofs/dir.c:344:
+		char *kaddr;
+		page = exofs_get_page(dir, n);

CHECK:SPACING: No space is necessary after a cast
#419: FILE: fs/exofs/dir.c:347:
+			de = (struct exofs_dir_entry *) kaddr;

CHECK:SPACING: No space is necessary after a cast
#421: FILE: fs/exofs/dir.c:349:
+			while ((char *) de <= kaddr) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#423: FILE: fs/exofs/dir.c:351:
+					printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_find_entry', this function's name, in a string
#424: FILE: fs/exofs/dir.c:352:
+						"ERROR: exofs_find_entry: "

WARNING:SPLIT_STRING: quoted string split across lines
#425: FILE: fs/exofs/dir.c:353:
+						"ERROR: exofs_find_entry: "
+						"zero-length directory entry");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#453: FILE: fs/exofs/dir.c:381:
+		de = exofs_next_entry(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: fs/exofs/dir.c:404:
+void exofs_set_link(struct inode *dir, struct exofs_dir_entry *de,
+			struct page *page, struct inode *inode)

CHECK:SPACING: No space is necessary after a cast
#479: FILE: fs/exofs/dir.c:407:
+			(char *) de - (char *) page_address(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#480: FILE: fs/exofs/dir.c:408:
+	unsigned len = le16_to_cpu(de->rec_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#486: FILE: fs/exofs/dir.c:414:
+	BUG_ON(err);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#491: FILE: fs/exofs/dir.c:419:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#500: FILE: fs/exofs/dir.c:428:
+	unsigned chunk_size = exofs_chunk_size(dir);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#501: FILE: fs/exofs/dir.c:429:
+	unsigned reclen = EXOFS_DIR_REC_LEN(namelen);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#533: FILE: fs/exofs/dir.c:461:
+				printk(KERN_ERR "ERROR: exofs_add_link: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_add_link', this function's name, in a string
#533: FILE: fs/exofs/dir.c:461:
+				printk(KERN_ERR "ERROR: exofs_add_link: "

WARNING:SPLIT_STRING: quoted string split across lines
#534: FILE: fs/exofs/dir.c:462:
+				printk(KERN_ERR "ERROR: exofs_add_link: "
+					"zero-length directory entry");

CHECK:SPACING: No space is necessary after a cast
#547: FILE: fs/exofs/dir.c:475:
+			de = (struct exofs_dir_entry *) ((char *) de + rec_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#552: FILE: fs/exofs/dir.c:480:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: fs/exofs/dir.c:487:
+	err = exofs_write_begin(NULL, page->mapping, pos, rec_len, 0,
+							&page, NULL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#574: FILE: fs/exofs/dir.c:502:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#593: FILE: fs/exofs/dir.c:521:
+	unsigned from = ((char *)dir - kaddr) & ~(exofs_chunk_size(inode)-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#593: FILE: fs/exofs/dir.c:521:
+	unsigned from = ((char *)dir - kaddr) & ~(exofs_chunk_size(inode)-1);
 	                                                                 ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#594: FILE: fs/exofs/dir.c:522:
+	unsigned to = ((char *)dir - kaddr) + dir->rec_len;

CHECK:SPACING: No space is necessary after a cast
#597: FILE: fs/exofs/dir.c:525:
+	struct exofs_dir_entry *de = (struct exofs_dir_entry *) (kaddr + from);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#602: FILE: fs/exofs/dir.c:530:
+			printk(KERN_ERR "ERROR: exofs_delete_entry:"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_delete_entry', this function's name, in a string
#602: FILE: fs/exofs/dir.c:530:
+			printk(KERN_ERR "ERROR: exofs_delete_entry:"

WARNING:SPLIT_STRING: quoted string split across lines
#603: FILE: fs/exofs/dir.c:531:
+			printk(KERN_ERR "ERROR: exofs_delete_entry:"
+				"zero-length directory entry");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: fs/exofs/dir.c:543:
+	err = exofs_write_begin(NULL, page->mapping, pos, to - from, 0,
+							&page, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#616: FILE: fs/exofs/dir.c:544:
+	BUG_ON(err);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#621: FILE: fs/exofs/dir.c:549:
+	inode->i_ctime = inode->i_mtime = CURRENT_TIME;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#633: FILE: fs/exofs/dir.c:561:
+	unsigned chunk_size = exofs_chunk_size(inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: fs/exofs/dir.c:570:
+	err = exofs_write_begin(NULL, page->mapping, 0, chunk_size, 0,
+							&page, NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#677: FILE: fs/exofs/dir.c:605:
+		struct exofs_dir_entry *de;
+		page = exofs_get_page(inode, i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#688: FILE: fs/exofs/dir.c:616:
+				printk(KERN_ERR "ERROR: exofs_empty_dir: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_empty_dir', this function's name, in a string
#688: FILE: fs/exofs/dir.c:616:
+				printk(KERN_ERR "ERROR: exofs_empty_dir: "

WARNING:SPLIT_STRING: quoted string split across lines
#689: FILE: fs/exofs/dir.c:617:
+				printk(KERN_ERR "ERROR: exofs_empty_dir: "
+					"zero-length directory entry");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#690: FILE: fs/exofs/dir.c:618:
+				printk("kaddr=%p, de=%p\n", kaddr, de);

CHECK:BRACES: braces {} should be used on all arms of this statement
#699: FILE: fs/exofs/dir.c:627:
+				if (de->name_len < 2) {
[...]
+				} else if (de->name[1] != '.')
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#717: FILE: fs/exofs/dir.c:645:
+struct file_operations exofs_dir_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#742: FILE: fs/exofs/exofs.h:190:
+extern struct inode *exofs_iget(struct super_block *, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#742: FILE: fs/exofs/exofs.h:190:
+extern struct inode *exofs_iget(struct super_block *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#742: FILE: fs/exofs/exofs.h:190:
+extern struct inode *exofs_iget(struct super_block *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#743: FILE: fs/exofs/exofs.h:191:
+struct inode *exofs_new_inode(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#743: FILE: fs/exofs/exofs.h:191:
+struct inode *exofs_new_inode(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#750: FILE: fs/exofs/exofs.h:198:
+int exofs_add_link(struct dentry *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#750: FILE: fs/exofs/exofs.h:198:
+int exofs_add_link(struct dentry *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#751: FILE: fs/exofs/exofs.h:199:
+ino_t exofs_inode_by_name(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#751: FILE: fs/exofs/exofs.h:199:
+ino_t exofs_inode_by_name(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct exofs_dir_entry *' should also have an identifier name
#752: FILE: fs/exofs/exofs.h:200:
+int exofs_delete_entry(struct exofs_dir_entry *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#752: FILE: fs/exofs/exofs.h:200:
+int exofs_delete_entry(struct exofs_dir_entry *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#753: FILE: fs/exofs/exofs.h:201:
+int exofs_make_empty(struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#753: FILE: fs/exofs/exofs.h:201:
+int exofs_make_empty(struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#754: FILE: fs/exofs/exofs.h:202:
+struct exofs_dir_entry *exofs_find_entry(struct inode *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#754: FILE: fs/exofs/exofs.h:202:
+struct exofs_dir_entry *exofs_find_entry(struct inode *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#754: FILE: fs/exofs/exofs.h:202:
+struct exofs_dir_entry *exofs_find_entry(struct inode *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#756: FILE: fs/exofs/exofs.h:204:
+int exofs_empty_dir(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#757: FILE: fs/exofs/exofs.h:205:
+struct exofs_dir_entry *exofs_dotdot(struct inode *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#757: FILE: fs/exofs/exofs.h:205:
+struct exofs_dir_entry *exofs_dotdot(struct inode *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#758: FILE: fs/exofs/exofs.h:206:
+void exofs_set_link(struct inode *, struct exofs_dir_entry *, struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct exofs_dir_entry *' should also have an identifier name
#758: FILE: fs/exofs/exofs.h:206:
+void exofs_set_link(struct inode *, struct exofs_dir_entry *, struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#758: FILE: fs/exofs/exofs.h:206:
+void exofs_set_link(struct inode *, struct exofs_dir_entry *, struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#758: FILE: fs/exofs/exofs.h:206:
+void exofs_set_link(struct inode *, struct exofs_dir_entry *, struct page *,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#765: FILE: fs/exofs/exofs.h:213:
+extern struct file_operations exofs_dir_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#775: FILE: fs/exofs/exofs.h:223:
+extern struct inode_operations exofs_dir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#776: FILE: fs/exofs/exofs.h:224:
+extern struct inode_operations exofs_special_inode_operations;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#798: FILE: fs/exofs/inode.c:451:
+	uint32_t page;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#799: FILE: fs/exofs/inode.c:452:
+	uint32_t attr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#800: FILE: fs/exofs/inode.c:453:
+	uint16_t expected;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#801: FILE: fs/exofs/inode.c:454:
+	uint8_t *buf;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#802: FILE: fs/exofs/inode.c:455:
+	uint64_t o_id;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#811: FILE: fs/exofs/inode.c:464:
+		printk(KERN_ERR "ERROR: prepare get_attr failed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#837: FILE: fs/exofs/inode.c:490:
+		printk(KERN_ERR "ERROR: extract attr from req failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#848: FILE: fs/exofs/inode.c:501:
+		printk(KERN_ERR "ERROR: extract attr from req failed\n");

CHECK:SPACING: No space is necessary after a cast
#851: FILE: fs/exofs/inode.c:504:
+	*sanity = be64_to_cpu(*((uint64_t *) buf));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#867: FILE: fs/exofs/inode.c:520:
+	uint64_t sanity;

CHECK:CAMELCASE: Avoid CamelCase: <SetObjCreated>
#884: FILE: fs/exofs/inode.c:537:
+	SetObjCreated(oi);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#894: FILE: fs/exofs/inode.c:547:
+	inode->i_atime.tv_nsec = inode->i_mtime.tv_nsec =

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_size != sanity'
#901: FILE: fs/exofs/inode.c:554:
+	if ((inode->i_size != sanity) &&
+		(!exofs_inode_is_fast_symlink(inode))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#902: FILE: fs/exofs/inode.c:555:
+	if ((inode->i_size != sanity) &&
+		(!exofs_inode_is_fast_symlink(inode))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#903: FILE: fs/exofs/inode.c:556:
+		printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#905: FILE: fs/exofs/inode.c:558:
+		       "WARNING: Size of object from inode and "
+		       "attributes differ (%lld != %llu)\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_nlink == 0'
#912: FILE: fs/exofs/inode.c:565:
+	if ((inode->i_nlink == 0) && (inode->i_mode == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_mode == 0'
#912: FILE: fs/exofs/inode.c:565:
+	if ((inode->i_nlink == 0) && (inode->i_mode == 0)) {

CHECK:BRACES: Unbalanced braces around else statement
#922: FILE: fs/exofs/inode.c:575:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#935: FILE: fs/exofs/inode.c:588:
+		if (exofs_inode_is_fast_symlink(inode))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#937: FILE: fs/exofs/inode.c:590:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#945: FILE: fs/exofs/inode.c:598:
+			init_special_inode(inode, inode->i_mode,
+			   old_decode_dev(le32_to_cpu(fcb.i_data[0])));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#948: FILE: fs/exofs/inode.c:601:
+			init_special_inode(inode, inode->i_mode,
+			   new_decode_dev(le32_to_cpu(fcb.i_data[1])));

CHECK:CAMELCASE: Avoid CamelCase: <SetObj2BCreated>
#1012: FILE: fs/exofs/inode.c:672:
+	SetObj2BCreated(oi);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1018: FILE: fs/exofs/inode.c:678:
+	if (dir->i_mode & S_ISGID) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1022: FILE: fs/exofs/inode.c:682:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1028: FILE: fs/exofs/inode.c:688:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1029: FILE: fs/exofs/inode.c:689:
+	oi->i_commit_size = inode->i_size = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1038: FILE: fs/exofs/inode.c:698:
+	req = prepare_osd_create(sbi->s_dev, sbi->s_pid,
+			       inode->i_ino + EXOFS_OBJ_OFF);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1040: FILE: fs/exofs/inode.c:700:
+		printk(KERN_ERR "ERROR: prepare_osd_create failed\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1068: FILE: fs/exofs/namei.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1097: FILE: fs/exofs/namei.c:30:
+ * along with exofs; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1098: FILE: fs/exofs/namei.c:31:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1118: FILE: fs/exofs/namei.c:51:
+	int err = exofs_add_link(dentry, inode);
+	if (!err) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1123: FILE: fs/exofs/namei.c:56:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1128: FILE: fs/exofs/namei.c:61:
+				   struct nameidata *nd)
 				                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1150: FILE: fs/exofs/namei.c:83:
+			 struct nameidata *nd)
 			                   ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1150: FILE: fs/exofs/namei.c:83:
+static int exofs_create(struct inode *dir, struct dentry *dentry, int mode,
+			 struct nameidata *nd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1154: FILE: fs/exofs/namei.c:87:
+	int err = PTR_ERR(inode);
+	if (!IS_ERR(inode)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1184: FILE: fs/exofs/namei.c:117:
+static int exofs_symlink(struct inode *dir, struct dentry *dentry,
+			  const char *symname)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1188: FILE: fs/exofs/namei.c:121:
+	unsigned l = strlen(symname)+1;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1188: FILE: fs/exofs/namei.c:121:
+	unsigned l = strlen(symname)+1;
 	                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1195: FILE: fs/exofs/namei.c:128:
+	inode = exofs_new_inode(dir, S_IFLNK | S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1214: FILE: fs/exofs/namei.c:147:
+		inode->i_size = l-1;
 		                 ^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1224: FILE: fs/exofs/namei.c:157:
+	iput(inode);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1229: FILE: fs/exofs/namei.c:162:
+static int exofs_link(struct dentry *old_dentry, struct inode *dir,
+		struct dentry *dentry)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1279: FILE: fs/exofs/namei.c:212:
+	iput(inode);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1324: FILE: fs/exofs/namei.c:257:
+static int exofs_rename(struct inode *old_dir, struct dentry *old_dentry,
+		struct inode *new_dir, struct dentry *new_dentry)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1390: FILE: fs/exofs/namei.c:323:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1403: FILE: fs/exofs/namei.c:336:
+struct inode_operations exofs_dir_inode_operations = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1404: FILE: fs/exofs/namei.c:337:
+^I.create ^I= exofs_create,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1405: FILE: fs/exofs/namei.c:338:
+^I.lookup ^I= exofs_lookup,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1406: FILE: fs/exofs/namei.c:339:
+^I.link   ^I= exofs_link,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1407: FILE: fs/exofs/namei.c:340:
+^I.unlink ^I= exofs_unlink,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1409: FILE: fs/exofs/namei.c:342:
+^I.mkdir  ^I= exofs_mkdir,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1410: FILE: fs/exofs/namei.c:343:
+^I.rmdir  ^I= exofs_rmdir,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1411: FILE: fs/exofs/namei.c:344:
+^I.mknod  ^I= exofs_mknod,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1412: FILE: fs/exofs/namei.c:345:
+^I.rename ^I= exofs_rename,$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1416: FILE: fs/exofs/namei.c:349:
+struct inode_operations exofs_special_inode_operations = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000192057.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 106 warnings, 73 checks, 1333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000192057.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
