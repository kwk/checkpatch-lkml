ERROR:SPACING: space required before the open parenthesis '('
#67: FILE: arch/x86_64/kernel/crash.c:42:
+	for(;;)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void wait_other_cpus() should probably be void wait_other_cpus(void)
#142: FILE: arch/x86_64/kernel/crash.c:130:
+static void wait_other_cpus() {}

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:SPACING: space required before the open parenthesis '('
#164: FILE: arch/x86_64/kernel/crash.c:172:
+	if(cpu_has_apic)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: include/linux/kdbprivate.h:165:
+#define KDB_STATE_KEXEC   ^I0x00040000^I/* kexec issued */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: include/linux/reboot.h:56:
+extern void machine_crash_shutdown(struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#213: FILE: include/linux/reboot.h:57:
+extern void machine_crash_shutdown_begin(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: include/linux/reboot.h:58:
+extern void machine_crash_shutdown_other_cpu(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#215: FILE: include/linux/reboot.h:59:
+extern void machine_crash_shutdown_end(struct pt_regs *regs);

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: kdb/kdbmain.c:1137:
+	struct pt_regs r;
+	if (regs == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regs"
#237: FILE: kdb/kdbmain.c:1137:
+	if (regs == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: kdb/kdbmain.c:1141:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#242: FILE: kdb/kdbmain.c:1142:
+	for (i = 1; i < NR_CPUS; ++i) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: kdb/kdbmain.c:1157:
+^I^I/* If the call above returned then something $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#258: FILE: kdb/kdbmain.c:1158:
+		/* If the call above returned then something 
+		   didn't work */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#258: FILE: kdb/kdbmain.c:1158:
+		   didn't work */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: kdb/kdbmain.c:1163:
+static int $

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#266: FILE: kdb/kdbmain.c:1166:
+	const char *cpu_argv[] = {NULL, "0", NULL};

WARNING:BRACES: braces {} are not necessary for single statement blocks
#271: FILE: kdb/kdbmain.c:1171:
+	if (ret != KDB_CMD_CPU) {
+		kdb_kexec_state = -1;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#278: FILE: kdb/kdbmain.c:1178:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#357: FILE: kdb/kdbmain.c:1672:
+				struct pt_regs r;
+				if (regs == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regs"
#357: FILE: kdb/kdbmain.c:1672:
+				if (regs == NULL)

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#373: FILE: kdb/kdbmain.c:3948:
+	kdb_register_repeat("kexec", kdb_kexec, "",    "Calls kexec in crash mode", 0, KDB_REPEAT_NONE);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: kernel/kexec.c:1056:
+^I * If we enabled KDB, we don't want to automatically $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: kernel/kexec.c:1057:
+^I * perform a kdump since KDB will be responsible for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: kernel/kexec.c:1094:
+^I^Iif (kdump) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: kernel/kexec.c:1096:
+^I^Ielse $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#446: FILE: kernel/kexec.c:1108:
+		BUG_ON(!locked);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427268.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 10 warnings, 7 checks, 364 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427268.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
