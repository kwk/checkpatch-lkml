WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
> > Could you tell me if issues with pressure reporting mentioned in bugzilla

WARNING:TYPO_SPELLING: 'teh' may be misspelled - perhaps 'the'?
#75: 
changes) and the patch to teh Synaptics X driver (against recent git
                          ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: src/eventcomm.c:80:
+    unsigned long evbits[NBITS(EV_MAX)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: src/eventcomm.c:81:
+    unsigned long absbits[NBITS(ABS_MAX)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: src/eventcomm.c:82:
+    unsigned long keybits[NBITS(KEY_MAX)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: src/eventcomm.c:94:
+    SYSCALL(ret = ioctl(fd, EVIOCGBIT(EV_ABS, sizeof(absbits)), absbits));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: src/eventcomm.c:97:
+    if (!TEST_BIT(ABS_X, absbits) ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: src/eventcomm.c:101:
+    SYSCALL(ret = ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(keybits)), keybits));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: src/eventcomm.c:106:
+    if (!TEST_BIT(ABS_PRESSURE, absbits) && !TEST_BIT(BTN_TOUCH, keybits))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: src/eventcomm.c:109:
+    if (!TEST_BIT(BTN_TOOL_FINGER, keybits))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: src/eventcomm.c:111:
+    if (TEST_BIT(BTN_TOOL_PEN, keybits))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: src/eventcomm.c:123:
+    unsigned long absbits[NBITS(ABS_MAX)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: src/eventcomm.c:124:
+    unsigned long keybits[NBITS(KEY_MAX)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: src/eventcomm.c:129:
+    if (rc >= 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: src/eventcomm.c:140:
+    if (rc >= 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: src/eventcomm.c:150:
+    priv->has_pressure = FALSE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: src/eventcomm.c:151:
+    SYSCALL(rc = ioctl(local->fd, EVIOCGBIT(EV_ABS, sizeof(absbits)), absbits));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: src/eventcomm.c:152:
+    if (rc >= 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: src/eventcomm.c:154:
+    else$

CHECK:CAMELCASE: Avoid CamelCase: <xf86Msg>
#181: FILE: src/eventcomm.c:155:
+	xf86Msg(X_ERROR, "%s: failed to query ABS bits (%s)\n", local->name,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: src/eventcomm.c:158:
+    if (priv->has_pressure)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#192: FILE: src/eventcomm.c:161:
+	if (rc >= 0)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#192: FILE: src/eventcomm.c:161:
+	if (rc >= 0)
+	{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: src/eventcomm.c:168:
+    } else$

CHECK:BRACES: Unbalanced braces around else statement
#199: FILE: src/eventcomm.c:168:
+    } else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: src/eventcomm.c:174:
+    if (rc >= 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: src/eventcomm.c:182:
+    SYSCALL(rc = ioctl(local->fd, EVIOCGBIT(EV_KEY, sizeof(keybits)), keybits));$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#220: FILE: src/eventcomm.c:186:
+	if ((priv->has_left = TEST_BIT(BTN_LEFT, keybits)))
 	   strcat(buf, " left");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#220: FILE: src/eventcomm.c:186:
+	if ((priv->has_left = TEST_BIT(BTN_LEFT, keybits)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#223: FILE: src/eventcomm.c:188:
+	if ((priv->has_right = TEST_BIT(BTN_RIGHT, keybits)))
 	   strcat(buf, " right");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#223: FILE: src/eventcomm.c:188:
+	if ((priv->has_right = TEST_BIT(BTN_RIGHT, keybits)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#226: FILE: src/eventcomm.c:190:
+	if ((priv->has_middle = TEST_BIT(BTN_MIDDLE, keybits)))
 	   strcat(buf, " middle");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#226: FILE: src/eventcomm.c:190:
+	if ((priv->has_middle = TEST_BIT(BTN_MIDDLE, keybits)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#229: FILE: src/eventcomm.c:192:
+	if ((priv->has_double = TEST_BIT(BTN_TOOL_DOUBLETAP, keybits)))
 	   strcat(buf, " double");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#229: FILE: src/eventcomm.c:192:
+	if ((priv->has_double = TEST_BIT(BTN_TOOL_DOUBLETAP, keybits)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#232: FILE: src/eventcomm.c:194:
+	if ((priv->has_triple = TEST_BIT(BTN_TOOL_TRIPLETAP, keybits)))
 	   strcat(buf, " triple");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#232: FILE: src/eventcomm.c:194:
+	if ((priv->has_triple = TEST_BIT(BTN_TOOL_TRIPLETAP, keybits)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: src/eventcomm.c:253:
+    SynapticsPrivate *priv = (SynapticsPrivate *)local->private;$

CHECK:CAMELCASE: Avoid CamelCase: <SynapticsPrivate>
#240: FILE: src/eventcomm.c:253:
+    SynapticsPrivate *priv = (SynapticsPrivate *)local->private;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: src/eventcomm.c:254:
+    SynapticsSHM *para = priv->synpara;$

CHECK:CAMELCASE: Avoid CamelCase: <SynapticsSHM>
#241: FILE: src/eventcomm.c:254:
+    SynapticsSHM *para = priv->synpara;

WARNING:TABSTOP: Statements should start on a tabstop
#249: FILE: src/eventcomm.c:330:
+	    case BTN_TOUCH:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: src/synapticsstr.h:148:
+    Bool has_pressure;^I^I^I/* device reports pressure */$

CHECK:CAMELCASE: Avoid CamelCase: <Bool>
#264: FILE: src/synapticsstr.h:148:
+    Bool has_pressure;			/* device reports pressure */

WARNING:BAD_SIGN_OFF: Duplicate signature
#287: 
Signed-off-by: Dmitry Torokhov <dtor@mail.ru>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#304: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#775: FILE: drivers/input/mouse/elantech.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#798: FILE: drivers/input/mouse/elantech.c:24:
+			printk(KERN_DEBUG format, ##arg);	\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: drivers/input/mouse/elantech.c:31:
+static int synaptics_send_cmd(struct psmouse *psmouse, unsigned char c,
+				unsigned char *param)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synaptics_send_cmd', this function's name, in a string
#809: FILE: drivers/input/mouse/elantech.c:35:
+		pr_err("elantech.c: synaptics_send_cmd query 0x%02x failed.\n", c);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: drivers/input/mouse/elantech.c:59:
+		elantech_debug("elantech.c: retrying ps2 command 0x%02x (%d).\n",
+			command, tries);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#847: FILE: drivers/input/mouse/elantech.c:73:
+static int elantech_read_reg(struct psmouse *psmouse, unsigned char reg,
+				unsigned char *val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#891: FILE: drivers/input/mouse/elantech.c:117:
+static int elantech_write_reg(struct psmouse *psmouse, unsigned char reg,
+				unsigned char val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#927: FILE: drivers/input/mouse/elantech.c:153:
+		pr_err("elantech.c: failed to write register 0x%02x with value 0x%02x.\n",
+			reg, val);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#939: FILE: drivers/input/mouse/elantech.c:165:
+	printk(KERN_DEBUG "elantech.c: PS/2 packet [");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#941: FILE: drivers/input/mouse/elantech.c:167:
+		printk("%s0x%02x ", (i) ? ", " : " ", packet[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#942: FILE: drivers/input/mouse/elantech.c:168:
+	printk("]\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#958: FILE: drivers/input/mouse/elantech.c:184:
+		/* byte 0:  D   U  p1  p2   1  p3   R   L
+		   byte 1:  f   0  th  tw  x9  x8  y9  y8 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#958: FILE: drivers/input/mouse/elantech.c:184:
+		   byte 1:  f   0  th  tw  x9  x8  y9  y8 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#963: FILE: drivers/input/mouse/elantech.c:189:
+		/* byte 0: n1  n0  p2  p1   1  p3   R   L
+		   byte 1:  0   0   0   0  x9  x8  y9  y8 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#963: FILE: drivers/input/mouse/elantech.c:189:
+		   byte 1:  0   0   0   0  x9  x8  y9  y8 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#970: FILE: drivers/input/mouse/elantech.c:196:
+	/* byte 2: x7  x6  x5  x4  x3  x2  x1  x0
+	   byte 3: y7  y6  y5  y4  y3  y2  y1  y0 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#970: FILE: drivers/input/mouse/elantech.c:196:
+	   byte 3: y7  y6  y5  y4  y3  y2  y1  y0 */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#973: FILE: drivers/input/mouse/elantech.c:199:
+		input_report_abs(dev, ABS_X,
+			((packet[1] & 0x0c) << 6) | packet[2]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etd->fw_version_maj == 0x01'
#984: FILE: drivers/input/mouse/elantech.c:210:
+	if ((etd->fw_version_maj == 0x01) &&
+	    (etd->capabilities & ETP_CAP_HAS_ROCKER)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1012: FILE: drivers/input/mouse/elantech.c:238:
+		/* byte 1: x15 x14 x13 x12 x11 x10 x9  x8
+		   byte 2: x7  x6  x5  x4  x4  x2  x1  x0 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1012: FILE: drivers/input/mouse/elantech.c:238:
+		   byte 2: x7  x6  x5  x4  x4  x2  x1  x0 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1015: FILE: drivers/input/mouse/elantech.c:241:
+		/* byte 4: y15 y14 y13 y12 y11 y10 y8  y8
+		   byte 5: y7  y6  y5  y4  y3  y2  y1  y0 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1015: FILE: drivers/input/mouse/elantech.c:241:
+		   byte 5: y7  y6  y5  y4  y3  y2  y1  y0 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1022: FILE: drivers/input/mouse/elantech.c:248:
+		/* The coordinate of each finger is reported separately with
+		   a lower resolution for two finger touches */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1022: FILE: drivers/input/mouse/elantech.c:248:
+		   a lower resolution for two finger touches */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1024: FILE: drivers/input/mouse/elantech.c:250:
+		/* byte 0:  .   .  ay8 ax8  .   .   .   .
+		   byte 1: ax7 ax6 ax5 ax4 ax3 ax2 ax1 ax0 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1024: FILE: drivers/input/mouse/elantech.c:250:
+		   byte 1: ax7 ax6 ax5 ax4 ax3 ax2 ax1 ax0 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1029: FILE: drivers/input/mouse/elantech.c:255:
+		/* byte 3:  .   .  by8 bx8  .   .   .   .
+		   byte 4: bx7 bx6 bx5 bx4 bx3 bx2 bx1 bx0 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1029: FILE: drivers/input/mouse/elantech.c:255:
+		   byte 4: bx7 bx6 bx5 bx4 bx3 bx2 bx1 bx0 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1034: FILE: drivers/input/mouse/elantech.c:260:
+		/* For compatibility with the X Synaptics driver scale up one
+		   coordinate and report as ordinary mouse movent */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1034: FILE: drivers/input/mouse/elantech.c:260:
+		   coordinate and report as ordinary mouse movent */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1038: FILE: drivers/input/mouse/elantech.c:264:
+		/* For compatibility with the proprietary X Elantech driver
+		   report both coordinates as hat coordinates */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1038: FILE: drivers/input/mouse/elantech.c:264:
+		   report both coordinates as hat coordinates */

WARNING:TYPO_SPELLING: 'initalising' may be misspelled - perhaps 'initialising'?
#1141: FILE: drivers/input/mouse/elantech.c:367:
+		 * Read back reg 0x10. The touchpad is probably initalising
 		                                                ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1150: FILE: drivers/input/mouse/elantech.c:376:
+			elantech_debug("elantech.c: retrying read (%d).\n",
+				tries);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etd->fw_version_maj == 0x01'
#1186: FILE: drivers/input/mouse/elantech.c:412:
+		if ((etd->fw_version_maj == 0x01) &&
+		    (etd->capabilities & ETP_CAP_HAS_ROCKER)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1215: FILE: drivers/input/mouse/elantech.c:441:
+static ssize_t elantech_show_int_attr(struct psmouse *psmouse, void *data,
+					char *buf)

CHECK:SPACING: No space is necessary after a cast
#1219: FILE: drivers/input/mouse/elantech.c:445:
+	unsigned char *reg = (unsigned char *) etd + attr->field_offset;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1236: FILE: drivers/input/mouse/elantech.c:462:
+	unsigned char *reg = (unsigned char *) etd + attr->field_offset;

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1240: FILE: drivers/input/mouse/elantech.c:466:
+	err = strict_strtoul(buf, 16, &value);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#1263: FILE: drivers/input/mouse/elantech.c:489:
+#define ELANTECH_INT_ATTR(_name, _register)				\
+	static struct elantech_attr_data elantech_attr_##_name = {	\
+		.field_offset = offsetof(struct elantech_data, _name),	\
+		.reg = _register,					\
+	};								\
+	PSMOUSE_DEFINE_ATTR(_name, S_IWUSR | S_IRUGO,			\
+			    &elantech_attr_##_name,			\
+			    elantech_show_int_attr,			\
+			    elantech_set_int_attr)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#1268: FILE: drivers/input/mouse/elantech.c:494:
+	PSMOUSE_DEFINE_ATTR(_name, S_IWUSR | S_IRUGO,			\

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*etd)...) over kzalloc(sizeof(struct elantech_data)...)
#1377: FILE: drivers/input/mouse/elantech.c:603:
+	etd = kzalloc(sizeof(struct elantech_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etd->fw_version_maj >= 0x02'
#1402: FILE: drivers/input/mouse/elantech.c:628:
+	if ((etd->fw_version_maj >= 0x02) && (etd->fw_version_min >= 0x30)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'etd->fw_version_min >= 0x30'
#1402: FILE: drivers/input/mouse/elantech.c:628:
+	if ((etd->fw_version_maj >= 0x02) && (etd->fw_version_min >= 0x30)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1434: FILE: drivers/input/mouse/elantech.c:660:
+		pr_err("elantech.c: failed to create sysfs attributes, error: %d.\n",
+			error);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1455: FILE: drivers/input/mouse/elantech.h:1:
+/*

WARNING:TYPO_SPELLING: 'harware' may be misspelled - perhaps 'hardware'?
#1512: FILE: drivers/input/mouse/elantech.h:58:
+ * and Y axis range is 0 to 384 for harware version 1.
                                     ^^^^^^^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1517: FILE: drivers/input/mouse/elantech.h:63:
+#define ETP_XMIN_V1			(  0 + ETP_EDGE_FUZZ_V1)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1519: FILE: drivers/input/mouse/elantech.h:65:
+#define ETP_YMIN_V1			(  0 + ETP_EDGE_FUZZ_V1)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1529: FILE: drivers/input/mouse/elantech.h:75:
+#define ETP_XMIN_V2			(   0 + ETP_EDGE_FUZZ_V2)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1531: FILE: drivers/input/mouse/elantech.h:77:
+#define ETP_YMIN_V2			(   0 + ETP_EDGE_FUZZ_V2)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1532: FILE: drivers/input/mouse/elantech.h:78:
+#define ETP_YMAX_V2			( 768 - ETP_EDGE_FUZZ_V2)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1540: FILE: drivers/input/mouse/elantech.h:86:
+#define ETP_2FT_XMIN			(  0 + ETP_2FT_FUZZ)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1542: FILE: drivers/input/mouse/elantech.h:88:
+#define ETP_2FT_YMIN			(  0 + ETP_2FT_FUZZ)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1570: FILE: drivers/input/mouse/elantech.h:116:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1572: FILE: drivers/input/mouse/elantech.h:118:
+}
+static inline int elantech_init(struct psmouse *psmouse)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1574: FILE: drivers/input/mouse/elantech.h:120:
+	return -ENOSYS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1598: FILE: drivers/input/mouse/psmouse-base.c:657:
+^Iif (max_proto > PSMOUSE_IMEX && $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1599: FILE: drivers/input/mouse/psmouse-base.c:658:
+	if (max_proto > PSMOUSE_IMEX && 
+			elantech_detect(psmouse, set_properties) == 0) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216548.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 68 warnings, 24 checks, 1448 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216548.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
