WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#52: FILE: drivers/hwmon/Kconfig:1020:
+config SENSORS_GP2AP002
+	tristate "GP2AP002 series Proximity/Ambient Sensor"
+	depends on HWMON && I2C
+	help
+	  This driver provides support for Proximity/Ambient Sensor.
+
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#75: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/hwmon/gp2ap002.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#116: FILE: drivers/hwmon/gp2ap002.c:37:
+#define PROX_VO_DETECT		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#119: FILE: drivers/hwmon/gp2ap002.c:40:
+#define GAIN_LED0_LARGE		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#121: FILE: drivers/hwmon/gp2ap002.c:42:
+#define HYS_HYSD		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#122: FILE: drivers/hwmon/gp2ap002.c:43:
+#define HYS_HYSC1		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#123: FILE: drivers/hwmon/gp2ap002.c:44:
+#define HYS_HYSC0		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#124: FILE: drivers/hwmon/gp2ap002.c:45:
+#define HYS_HYSF3		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#125: FILE: drivers/hwmon/gp2ap002.c:46:
+#define HYS_HYSF2		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#126: FILE: drivers/hwmon/gp2ap002.c:47:
+#define HYS_HYSF1		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#127: FILE: drivers/hwmon/gp2ap002.c:48:
+#define HYS_HYSF0		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#130: FILE: drivers/hwmon/gp2ap002.c:51:
+#define OPMOD_SSD_OPERATING	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#132: FILE: drivers/hwmon/gp2ap002.c:53:
+#define OPMOD_VCON_IRQ		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#134: FILE: drivers/hwmon/gp2ap002.c:55:
+#define CON_OCON1		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#135: FILE: drivers/hwmon/gp2ap002.c:56:
+#define CON_OCON0		(1 << 3)

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#148: FILE: drivers/hwmon/gp2ap002.c:69:
+	struct mutex		lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: drivers/hwmon/gp2ap002.c:112:
+		chip->vo = gp2ap002_read_reg(chip->client,
+				GP2AP002_PROX) & PROX_VO_DETECT;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: drivers/hwmon/gp2ap002.c:150:
+		gp2ap002_write_reg(chip->client, GP2AP002_OPMOD,
+				OPMOD_SSD_OPERATING | chip->mode);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#277: FILE: drivers/hwmon/gp2ap002.c:198:
+#define GP2AP002_OUTPUT(name, field)					\
+static ssize_t gp2ap002_show_##name(struct device *dev,			\
+		struct device_attribute *attr, char *buf)		\
+{									\
+	struct gp2ap002_chip *chip = dev_get_drvdata(dev);		\
+	gp2ap002_get_##name(chip);					\
+	return sprintf(buf, "%d\n", chip->field);			\
+}									\
+static SENSOR_DEVICE_ATTR(name, S_IRUGO, gp2ap002_show_##name, NULL, 0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#277: FILE: drivers/hwmon/gp2ap002.c:198:
+#define GP2AP002_OUTPUT(name, field)					\
+static ssize_t gp2ap002_show_##name(struct device *dev,			\
+		struct device_attribute *attr, char *buf)		\
+{									\
+	struct gp2ap002_chip *chip = dev_get_drvdata(dev);		\
+	gp2ap002_get_##name(chip);					\
+	return sprintf(buf, "%d\n", chip->field);			\
+}									\
+static SENSOR_DEVICE_ATTR(name, S_IRUGO, gp2ap002_show_##name, NULL, 0);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#285: FILE: drivers/hwmon/gp2ap002.c:206:
+static SENSOR_DEVICE_ATTR(name, S_IRUGO, gp2ap002_show_##name, NULL, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#287: FILE: drivers/hwmon/gp2ap002.c:208:
+#define GP2AP002_INPUT(name, field)					\
+static ssize_t gp2ap002_store_##name(struct device *dev,		\
+	struct device_attribute *attr, const char *buf, size_t count)	\
+{									\
+	struct gp2ap002_chip *chip = dev_get_drvdata(dev);		\
+	if (!count)							\
+		return -EINVAL;						\
+	gp2ap002_set_##name(chip, buf);					\
+	return count;							\
+}									\
+static ssize_t gp2ap002_show_##name(struct device *dev,			\
+		struct device_attribute *attr, char *buf)		\
+{									\
+	struct gp2ap002_chip *chip = dev_get_drvdata(dev);		\
+	return sprintf(buf, "%d\n", chip->field);			\
+}									\
+static SENSOR_DEVICE_ATTR(name, S_IRUGO | S_IWUSR,			\
+		gp2ap002_show_##name, gp2ap002_store_##name, 0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#287: FILE: drivers/hwmon/gp2ap002.c:208:
+#define GP2AP002_INPUT(name, field)					\
+static ssize_t gp2ap002_store_##name(struct device *dev,		\
+	struct device_attribute *attr, const char *buf, size_t count)	\
+{									\
+	struct gp2ap002_chip *chip = dev_get_drvdata(dev);		\
+	if (!count)							\
+		return -EINVAL;						\
+	gp2ap002_set_##name(chip, buf);					\
+	return count;							\
+}									\
+static ssize_t gp2ap002_show_##name(struct device *dev,			\
+		struct device_attribute *attr, char *buf)		\
+{									\
+	struct gp2ap002_chip *chip = dev_get_drvdata(dev);		\
+	return sprintf(buf, "%d\n", chip->field);			\
+}									\
+static SENSOR_DEVICE_ATTR(name, S_IRUGO | S_IWUSR,			\
+		gp2ap002_show_##name, gp2ap002_store_##name, 0);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#303: FILE: drivers/hwmon/gp2ap002.c:224:
+static SENSOR_DEVICE_ATTR(name, S_IRUGO | S_IWUSR,			\

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#350: FILE: drivers/hwmon/gp2ap002.c:271:
+	idev = chip->idev = input_allocate_device();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: drivers/hwmon/gp2ap002.c:302:
+		ret = request_irq(client->irq, gp2ap002_irq, irq_flag,
+				"GP2AP002 OpticalSensor", chip);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: drivers/hwmon/gp2ap002.c:305:
+			dev_err(&client->dev, "can't get IRQ %d, ret %d\n",
+					client->irq, ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#399: FILE: drivers/hwmon/gp2ap002.c:320:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*chip)...) over kzalloc(sizeof(struct gp2ap002_chip)...)
#411: FILE: drivers/hwmon/gp2ap002.c:332:
+	chip = kzalloc(sizeof(struct gp2ap002_chip), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: drivers/hwmon/gp2ap002.c:344:
+		dev_err(&client->dev,
+				"Registering to hwmon device is failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: drivers/hwmon/gp2ap002.c:352:
+		dev_err(&client->dev,
+				"Creating proximity attribute group failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: drivers/hwmon/gp2ap002.c:359:
+		dev_err(&client->dev,
+				"Creating light attribute group failed\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: drivers/hwmon/gp2ap002.c:420:
+	struct gp2ap002_chip *chip = i2c_get_clientdata(client);
+	gp2ap002_set_mode(chip, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#507: FILE: drivers/hwmon/gp2ap002.c:428:
+	struct gp2ap002_chip *chip = i2c_get_clientdata(client);
+	gp2ap002_set_mode(chip, 1);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#557: FILE: include/linux/gp2ap002.h:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#571: FILE: include/linux/gp2ap002.h:15:
+	void (*power_enable)(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104261.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 26 checks, 512 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104261.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
