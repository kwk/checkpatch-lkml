CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#37: 
Micha³ Miros³aw
     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: cb710.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#44: FILE: cb710.h:2:
+ *  cb710/cb710.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#46: FILE: cb710.h:4:
+ *  Copyleft by Micha³ Miros³aw, 2008
                      ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cb710_slot *' should also have an identifier name
#66: FILE: cb710.h:24:
+	int (*irq_handler)(struct cb710_slot *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#74: FILE: cb710.h:32:
+	spinlock_t irq_lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#75: FILE: cb710.h:33:
+	unsigned irq_enabled;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#76: FILE: cb710.h:34:
+	unsigned platform_id;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#78: FILE: cb710.h:36:
+	unsigned slots;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#93: FILE: cb710.h:51:
+#define UPDPORT(t, p, v, m) \
+	do { \
+		iowrite##t( \
+			(ioread##t(chip->iobase + (p)) & ~(m)) | (v), \
+			chip->iobase + (p)); \
+		(void)ioread8(chip->iobase + 0x13); \
+	} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#108: FILE: cb710.h:66:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: cb710.h:68:
+void __cb710_pci_update_config_reg(struct pci_dev *pdev,
+	int reg, uint32_t mask, uint32_t xor);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#117: FILE: cb710.h:75:
+	uint8_t bounce_buffer[CB710_SG_BUFFER_BLOCK];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#124: FILE: cb710.h:82:
+	unsigned page_no;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#125: FILE: cb710.h:83:
+	unsigned page_offset;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#126: FILE: cb710.h:84:
+	unsigned page_left;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: cb710.h:90:
+void cb710_sg_init(struct cb710_sg_chain *buf,
+	struct scatterlist *sg, size_t nelem);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: cb710.h:92:
+int cb710_sg_next_buf(struct cb710_sg_chain *buf,
+	void **dataptr, size_t *len, int to_sg);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#152: FILE: cb710.h:110:
+	spinlock_t serialization_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: cb710.h:131:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#203: FILE: cb710.h:161:
+#define     CB710_MMC_RSP_PRESENT		(1 << 3)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#207: FILE: cb710.h:165:
+#define     CB710_MMC_CMD_BCR			(1 << 5)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#222: FILE: cb710.h:180:
+void cb710_dump_regs(struct cb710_chip *chip, unsigned dump);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#233: FILE: core.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#234: FILE: core.c:2:
+ *  cb710/core.c

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#236: FILE: core.c:4:
+ *  Copyleft by Micha³ Miros³aw, 2008
                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: core.c:21:
+void __cb710_pci_update_config_reg(struct pci_dev *pdev,
+	int reg, uint32_t mask, uint32_t xor)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#263: FILE: core.c:31:
+void cb710_dump_regs(struct cb710_chip *chip, unsigned select)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#265: FILE: core.c:33:
+	const unsigned allow[8] = {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#269: FILE: core.c:37:
+	const char *const prefix[sizeof(allow)/sizeof(*allow)] = {
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#273: FILE: core.c:41:
+	u32 regs[sizeof(allow)/sizeof(*allow) << 2];
 	                      ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#283: FILE: core.c:51:
+#define reg(b, i) \
+	(((u##b*)regs)[(i) / (b/8)])

CHECK:SPACING: spaces preferred around that '*' (ctx:VxB)
#284: FILE: core.c:52:
+	(((u##b*)regs)[(i) / (b/8)])
 	       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#284: FILE: core.c:52:
+	(((u##b*)regs)[(i) / (b/8)])
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#285: FILE: core.c:53:
+#define allowed(b, i, j) \
+	(((allow[i >> 4] >> j) & ((1 << b/8)-1)) == ((1 << b/8)-1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#285: FILE: core.c:53:
+#define allowed(b, i, j) \
+	(((allow[i >> 4] >> j) & ((1 << b/8)-1)) == ((1 << b/8)-1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#285: FILE: core.c:53:
+#define allowed(b, i, j) \
+	(((allow[i >> 4] >> j) & ((1 << b/8)-1)) == ((1 << b/8)-1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'j' may be better as '(j)' to avoid precedence issues
#285: FILE: core.c:53:
+#define allowed(b, i, j) \
+	(((allow[i >> 4] >> j) & ((1 << b/8)-1)) == ((1 << b/8)-1))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#286: FILE: core.c:54:
+	(((allow[i >> 4] >> j) & ((1 << b/8)-1)) == ((1 << b/8)-1))
 	                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#286: FILE: core.c:54:
+	(((allow[i >> 4] >> j) & ((1 << b/8)-1)) == ((1 << b/8)-1))
 	                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#286: FILE: core.c:54:
+	(((allow[i >> 4] >> j) & ((1 << b/8)-1)) == ((1 << b/8)-1))
 	                                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#286: FILE: core.c:54:
+	(((allow[i >> 4] >> j) & ((1 << b/8)-1)) == ((1 << b/8)-1))
 	                                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#287: FILE: core.c:55:
+#define dumpregs(b, f, x) { \
+	for (i = 0; i < (sizeof(allow)/sizeof(*allow) << 4); i += 0x10) { \
+		if (!(select & (1 << (i >> 4)))) \
+			continue; \
+		for (j = 0; j < 0x10; j += b/8) { \
+			if (allowed(b, i, j)) \
+				reg(b, i + j) = RDPORT(b, i + j); \
+		}; \
+	} \
+	for (i = 0; i < (sizeof(allow)/sizeof(*allow) << 4); i += 0x10) { \
+		if (!(select & (1 << (i >> 4)))) \
+			continue; \
+		p = msg; \
+		for (j = 0; j < 0x10; j += b/8) { \
+			if (allowed(b, i, j)) \
+				p += sprintf(p, " %s" f, (j == 8 ? " " : ""), \
+					reg(b, i + j)); \
+			else \
+				p += sprintf(p, " %s" x, (j == 8 ? " " : "")); \
+			udelay(1); \
+		} \
+		\
+		printk(KERN_INFO CB710_DRIVER_NAME ": %s 0x%02X %s\n", \
+			prefix[i >> 4], i, msg); \
+	} \
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#287: FILE: core.c:55:
+#define dumpregs(b, f, x) { \
+	for (i = 0; i < (sizeof(allow)/sizeof(*allow) << 4); i += 0x10) { \
+		if (!(select & (1 << (i >> 4)))) \
+			continue; \
+		for (j = 0; j < 0x10; j += b/8) { \
+			if (allowed(b, i, j)) \
+				reg(b, i + j) = RDPORT(b, i + j); \
+		}; \
+	} \
+	for (i = 0; i < (sizeof(allow)/sizeof(*allow) << 4); i += 0x10) { \
+		if (!(select & (1 << (i >> 4)))) \
+			continue; \
+		p = msg; \
+		for (j = 0; j < 0x10; j += b/8) { \
+			if (allowed(b, i, j)) \
+				p += sprintf(p, " %s" f, (j == 8 ? " " : ""), \
+					reg(b, i + j)); \
+			else \
+				p += sprintf(p, " %s" x, (j == 8 ? " " : "")); \
+			udelay(1); \
+		} \
+		\
+		printk(KERN_INFO CB710_DRIVER_NAME ": %s 0x%02X %s\n", \
+			prefix[i >> 4], i, msg); \
+	} \
+	}

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#288: FILE: core.c:56:
+	for (i = 0; i < (sizeof(allow)/sizeof(*allow) << 4); i += 0x10) { \
 	                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#291: FILE: core.c:59:
+		for (j = 0; j < 0x10; j += b/8) { \
 		                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#296: FILE: core.c:64:
+	for (i = 0; i < (sizeof(allow)/sizeof(*allow) << 4); i += 0x10) { \
 	                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#300: FILE: core.c:68:
+		for (j = 0; j < 0x10; j += b/8) { \
 		                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#309: FILE: core.c:77:
+		printk(KERN_INFO CB710_DRIVER_NAME ": %s 0x%02X %s\n", \

ERROR:SPACING: space prohibited after that open parenthesis '('
#319: FILE: core.c:87:
+		dumpregs( 8, "%02X", "xx");

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#328: FILE: core.c:96:
+static int __devinit cb710_pci_configure(struct pci_dev *pdev)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#344: FILE: core.c:112:
+	if (pdev0->vendor == PCI_VENDOR_ID_ENE
+	    && pdev0->device == PCI_DEVICE_ID_ENE_720) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#361: FILE: core.c:129:
+	unsigned flags;

WARNING:LINE_SPACING: Missing a blank line after declarations
#369: FILE: core.c:137:
+		struct cb710_slot *slot = &chip->slot[nr];
+		if (slot->irq_handler && slot->irq_handler(slot))

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#378: FILE: core.c:146:
+static int __devinit cb710_register_slot(struct cb710_chip *chip,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: core.c:147:
+static int __devinit cb710_register_slot(struct cb710_chip *chip,
+	unsigned slot_mask, unsigned io_offset, const char *name)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#379: FILE: core.c:147:
+	unsigned slot_mask, unsigned io_offset, const char *name)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#379: FILE: core.c:147:
+	unsigned slot_mask, unsigned io_offset, const char *name)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#391: FILE: core.c:159:
+	printk(KERN_INFO CB710_DRIVER_NAME ": register: %s.%d; slot %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: core.c:160:
+	printk(KERN_INFO CB710_DRIVER_NAME ": register: %s.%d; slot %d\n",
+		name, chip->platform_id, slot_mask);

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#399: FILE: core.c:167:
+		|(chip->slots & CB710_SLOT_MASK)|slot_mask;
 		^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#399: FILE: core.c:167:
+		|(chip->slots & CB710_SLOT_MASK)|slot_mask;
 		                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: core.c:175:
+static void cb710_unregister_slot(struct cb710_chip *chip,
+	unsigned slot)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#407: FILE: core.c:175:
+	unsigned slot)

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#419: FILE: core.c:187:
+		|(chip->slots & CB710_SLOT_MASK & ~slot);
 		^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#426: FILE: core.c:194:
+static int __devinit cb710_probe(struct pci_dev *pdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: core.c:195:
+static int __devinit cb710_probe(struct pci_dev *pdev,
+	const struct pci_device_id *ent)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#441: FILE: core.c:209:
+		pci_write_config_dword(pdev, 0x48, val|0x71000000);
 		                                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#445: FILE: core.c:213:
+	printk(KERN_INFO CB710_DRIVER_NAME

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: core.c:235:
+	chip = devm_kzalloc(&pdev->dev,
+		sizeof(*chip) + n * sizeof(*chip->slot), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: core.c:254:
+	err = devm_request_irq(&pdev->dev, pdev->irq,
+		cb710_irq_handler, IRQF_SHARED, "cb710", chip);

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#499: FILE: core.c:267:
+	dev_printk(KERN_INFO CB710_DRIVER_NAME ": ", &pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: core.c:268:
+	dev_printk(KERN_INFO CB710_DRIVER_NAME ": ", &pdev->dev,
+		"id %d, IO 0x%p, IRQ %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: core.c:273:
+		err = cb710_register_slot(chip,
+			CB710_SLOT_MMC, 0x00, "cb710-mmc");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: core.c:280:
+		err = cb710_register_slot(chip,
+			CB710_SLOT_MS, 0x40, "cb710-ms");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: core.c:287:
+		err = cb710_register_slot(chip,
+			CB710_SLOT_SM, 0x60, "cb710-sm");

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#532: FILE: core.c:300:
+static void __devexit cb710_remove_one(struct pci_dev *pdev)

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#571: FILE: core.c:339:
+MODULE_AUTHOR("Micha³ Miros³aw <mirq-linux@rere.qmqm.pl>");
                     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#607: FILE: mmc.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#608: FILE: mmc.c:2:
+ *  cb710/mmc.c

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#610: FILE: mmc.c:4:
+ *  Copyleft by Micha³ Miros³aw, 2008
                      ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#628: FILE: mmc.c:22:
+};
+#define CB710_MMC_MAX_DIVIDER_LOG2 9

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: mmc.c:30:
+static void verify_serialization(struct cb710_mmc_reader *reader,
+	unsigned char *counter, int inc)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#652: FILE: mmc.c:46:
+	printk(KERN_INFO CB710_DRIVER_NAME ": %s driver;"

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#667: FILE: mmc.c:61:
+	 * MMC card with cables connected to bus signals */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#684: FILE: mmc.c:78:
+	printk(KERN_INFO CB710_DRIVER_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#726: FILE: mmc.c:120:
+	printk(KERN_INFO CB710_DRIVER_NAME

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#736: FILE: mmc.c:130:
+	uint8_t status1, status2;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#739: FILE: mmc.c:133:
+	BUG_ON(what < 2 || what > 4);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#745: FILE: mmc.c:139:
+		printk(KERN_INFO CB710_DRIVER_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#753: FILE: mmc.c:147:
+		printk(KERN_INFO CB710_DRIVER_NAME

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#784: FILE: mmc.c:178:
+	unsigned limit = 2000000;	/* FIXME: real timeout */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#796: FILE: mmc.c:190:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#797: FILE: mmc.c:191:
+	printk(KERN_INFO CB710_DRIVER_NAME ": waited %d loops, "

WARNING:SPLIT_STRING: quoted string split across lines
#798: FILE: mmc.c:192:
+	printk(KERN_INFO CB710_DRIVER_NAME ": waited %d loops, "
+		"WAIT10: what %d, entry val %08X, exit val %08X\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#804: FILE: mmc.c:198:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#807: FILE: mmc.c:201:
+	unsigned limit = 500000;	/* FIXME: real timeout */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#820: FILE: mmc.c:214:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#821: FILE: mmc.c:215:
+	printk(KERN_INFO CB710_DRIVER_NAME ": waited %d loops, "

WARNING:SPLIT_STRING: quoted string split across lines
#822: FILE: mmc.c:216:
+	printk(KERN_INFO CB710_DRIVER_NAME ": waited %d loops, "
+		"WAIT12: mask %02X, entry val %08X, exit val %08X\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#829: FILE: mmc.c:223:
+static void cb710_mmc_set_transfer_size(struct cb710_chip *chip,
+	size_t count, size_t blocksize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: mmc.c:227:
+	WRPORT(32, CB710_MMC_TRANSFER_SIZE_PORT,
+		((count - 1) << 16)|(blocksize - 1));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#833: FILE: mmc.c:227:
+		((count - 1) << 16)|(blocksize - 1));
 		                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#835: FILE: mmc.c:229:
+	printk(KERN_INFO CB710_DRIVER_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#853: FILE: mmc.c:247:
+	printk(KERN_INFO CB710_DRIVER_NAME ": FIFO-read-hack: "

WARNING:SPLIT_STRING: quoted string split across lines
#854: FILE: mmc.c:248:
+	printk(KERN_INFO CB710_DRIVER_NAME ": FIFO-read-hack: "
+		"expected STATUS0 bit was %s dwords ignored: %08X %08X\n",

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#861: FILE: mmc.c:255:
+	uint32_t *databuf;

WARNING:LINE_SPACING: Missing a blank line after declarations
#877: FILE: mmc.c:271:
+			int err = cb710_wait(chip, 2);
+			if (err) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#888: FILE: mmc.c:282:
+		if (!len && !cb710_sg_write_next(&sgc,
+				(void **)&databuf, &len))

WARNING:LINE_SPACING: Missing a blank line after declarations
#897: FILE: mmc.c:291:
+		int err = cb710_wait(chip, 2);
+		if (err) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#907: FILE: mmc.c:301:
+		BUG();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#915: FILE: mmc.c:309:
+	const uint32_t *databuf;

WARNING:LINE_SPACING: Missing a blank line after declarations
#928: FILE: mmc.c:322:
+				int err = cb710_wait(chip, 2);
+				if (err) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#942: FILE: mmc.c:336:
+static u16 cb710_encode_cmd_flags(struct cb710_mmc_reader *reader,
+	struct mmc_command *cmd)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#954: FILE: mmc.c:348:
+	case MMC_CMD_AC:	cb_flags = CB710_MMC_CMD_AC;	break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#955: FILE: mmc.c:349:
+	case MMC_CMD_ADTC:	cb_flags = CB710_MMC_CMD_ADTC;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#956: FILE: mmc.c:350:
+	case MMC_CMD_BC:	cb_flags = CB710_MMC_CMD_BC;	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#957: FILE: mmc.c:351:
+	case MMC_CMD_BCR:	cb_flags = CB710_MMC_CMD_BCR;	break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1004: FILE: mmc.c:398:
+static void cb710_receive_response(struct cb710_chip *chip,
+	struct mmc_command *cmd)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1006: FILE: mmc.c:400:
+	unsigned rsp_opcode;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1018: FILE: mmc.c:412:
+		cmd->resp[0] = (resp[0] << 8)|(resp[1] >> 24);
 		                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1019: FILE: mmc.c:413:
+		cmd->resp[1] = (resp[1] << 8)|(resp[2] >> 24);
 		                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1020: FILE: mmc.c:414:
+		cmd->resp[2] = (resp[2] << 8)|(resp[3] >> 24);
 		                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1032: FILE: mmc.c:426:
+static int cb710_mmc_transfer_data(struct cb710_chip *chip,
+	struct mmc_data *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1057: FILE: mmc.c:451:
+	u16 cb_cmd = cb710_encode_cmd_flags(reader, cmd);
+	printk(KERN_INFO CB710_DRIVER_NAME ": %s: cmd request: 0x%04X\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1057: FILE: mmc.c:451:
+	printk(KERN_INFO CB710_DRIVER_NAME ": %s: cmd request: 0x%04X\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1058: FILE: mmc.c:452:
+	printk(KERN_INFO CB710_DRIVER_NAME ": %s: cmd request: 0x%04X\n",
+		mmc_hostname(mmc), cb_cmd);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "reader->mrq"
#1095: FILE: mmc.c:489:
+	WARN_ON(reader->mrq != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1114: FILE: mmc.c:508:
+static void cb710_mmc_powerup(struct cb710_chip *chip,
+	struct cb710_mmc_reader *reader)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1117: FILE: mmc.c:511:
+	printk(KERN_INFO CB710_DRIVER_NAME ": powerup\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1124: FILE: mmc.c:518:
+	printk(KERN_INFO CB710_DRIVER_NAME ": after delay 1\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1130: FILE: mmc.c:524:
+	printk(KERN_INFO CB710_DRIVER_NAME ": after delay 2\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1136: FILE: mmc.c:530:
+	printk(KERN_INFO CB710_DRIVER_NAME ": after delay 3\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1148: FILE: mmc.c:542:
+	printk(KERN_INFO CB710_DRIVER_NAME ": finished\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1154: FILE: mmc.c:548:
+static void cb710_mmc_powerdown(struct cb710_chip *chip,
+	struct cb710_mmc_reader *reader)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1171: FILE: mmc.c:565:
+		printk(KERN_INFO CB710_DRIVER_NAME

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1176: FILE: mmc.c:570:
+	if (ios->power_mode != reader->last_power_mode)
+	switch (ios->power_mode) {

WARNING:DEFAULT_NO_BREAK: switch default: should use break
#1186: FILE: mmc.c:580:
+	case MMC_POWER_UP:
+	default:
+		/* ignore */;

switch default case is sometimes written as "default:;".  This can
cause new cases added below default to be defective.

A "break;" should be added after empty default statement to avoid
unwanted fallthrough.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1210: FILE: mmc.c:604:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1218: FILE: mmc.c:612:
+	printk(KERN_INFO CB710_DRIVER_NAME ": interrupt; status: %08X, "

WARNING:SPLIT_STRING: quoted string split across lines
#1219: FILE: mmc.c:613:
+	printk(KERN_INFO CB710_DRIVER_NAME ": interrupt; status: %08X, "
+		"ie: %08X, c2: %08X, c3: %08X\n",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1224: FILE: mmc.c:618:
+		mmc_detect_change(cb710_slot_to_mmc(slot), HZ/2);
 		                                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1226: FILE: mmc.c:620:
+		printk(KERN_INFO CB710_DRIVER_NAME ": unknown interrupt\n");

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1251: FILE: mmc.c:645:
+static int __devinit cb710_mmc_init(struct platform_device *pdev)

CHECK:CAMELCASE: Avoid CamelCase: <xF>
#1269: FILE: mmc.c:663:
+	val = cb710_src_freq_mhz[(val >> 16) & 0xF];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1270: FILE: mmc.c:664:
+	printk(KERN_INFO CB710_DRIVER_NAME ": %s: source frequency: %dMHz\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1271: FILE: mmc.c:665:
+	printk(KERN_INFO CB710_DRIVER_NAME ": %s: source frequency: %dMHz\n",
+		mmc_hostname(mmc), val

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1278: FILE: mmc.c:672:
+	mmc->ocr_avail = MMC_VDD_32_33|MMC_VDD_33_34|MMC_VDD_34_35;
 	                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1278: FILE: mmc.c:672:
+	mmc->ocr_avail = MMC_VDD_32_33|MMC_VDD_33_34|MMC_VDD_34_35;
 	                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1284: FILE: mmc.c:678:
+	tasklet_init(&reader->finish_req_tasklet,
+		cb710_mmc_finish_request_tasklet, (unsigned long)mmc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1297: FILE: mmc.c:691:
+	printk(KERN_INFO CB710_DRIVER_NAME ": %s: add_host failed: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1298: FILE: mmc.c:692:
+	printk(KERN_INFO CB710_DRIVER_NAME ": %s: add_host failed: %d\n",
+		mmc_hostname(mmc), err);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1304: FILE: mmc.c:698:
+static int __devexit cb710_mmc_exit(struct platform_device *pdev)

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#1349: FILE: mmc.c:743:
+MODULE_AUTHOR("Micha³ Miros³aw <mirq-linux@rere.qmqm.pl>");
                     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1357: FILE: sgbuf.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1358: FILE: sgbuf.c:2:
+ *  cb710/sgbuf.c

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#1360: FILE: sgbuf.c:4:
+ *  Copyleft by Micha³ Miros³aw, 2008
                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1381: FILE: sgbuf.c:25:
+	printk(KERN_INFO "sg: moved to new scatterlist entry: "

WARNING:SPLIT_STRING: quoted string split across lines
#1382: FILE: sgbuf.c:26:
+	printk(KERN_INFO "sg: moved to new scatterlist entry: "
+		"first page +%d, poffs=%d, len=%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1388: FILE: sgbuf.c:32:
+	printk(KERN_INFO "sg: unmapping %s page\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1389: FILE: sgbuf.c:33:
+	printk(KERN_INFO "sg: unmapping %s page\n",
+		to_sg ? "written" : "read");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1400: FILE: sgbuf.c:44:
+	unsigned page_end;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1406: FILE: sgbuf.c:50:
+	printk(KERN_INFO "sg: advanced %d bytes; "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1437: FILE: sgbuf.c:81:
+		printk(KERN_INFO "sg: mapped new page: +%d @0x%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1438: FILE: sgbuf.c:82:
+		printk(KERN_INFO "sg: mapped new page: +%d @0x%p\n",
+			buf->page_no, buf->mapped_page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1445: FILE: sgbuf.c:89:
+void cb710_sg_init(struct cb710_sg_chain *buf,
+	struct scatterlist *sg, size_t nelem)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1447: FILE: sgbuf.c:91:
+	printk(KERN_INFO "sg: init: %d elements\n", nelem);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1448: FILE: sgbuf.c:92:
+	BUG_ON(!nelem);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1470: FILE: sgbuf.c:114:
+			memcpy(buf->mapped_page + buf->page_offset,
+				buf->bounce_buffer + bounce_offset, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1473: FILE: sgbuf.c:117:
+			memcpy(buf->bounce_buffer + bounce_offset,
+				buf->mapped_page + buf->page_offset, len);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1477: FILE: sgbuf.c:121:
+	} while (cb710_sg_advance(buf, len, to_sg)
+		&& bounce_offset < CB710_SG_BUFFER_BLOCK);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1479: FILE: sgbuf.c:123:
+	printk(KERN_INFO "sg: %d bytes %s sg via bounce_buffer\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1480: FILE: sgbuf.c:124:
+	printk(KERN_INFO "sg: %d bytes %s sg via bounce_buffer\n",
+		bounce_offset, to_sg ? "written to" : "to read from");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1487: FILE: sgbuf.c:131:
+	unsigned i;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1505: FILE: sgbuf.c:149:
+int cb710_sg_next_buf(struct cb710_sg_chain *buf,
+	void **dataptr, size_t *len, int to_sg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1507: FILE: sgbuf.c:151:
+	printk(KERN_INFO "sg: next buffer to %s\n", to_sg ? "write" : "read");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1520: FILE: sgbuf.c:164:
+		BUG_ON(!buf->mapped_page);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1526: FILE: sgbuf.c:170:
+		printk(KERN_INFO "sg: %d bytes mapped directly\n", *len);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1536: FILE: sgbuf.c:180:
+	if (to_sg) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1538: FILE: sgbuf.c:182:
+		printk(KERN_INFO "sg: "

WARNING:SPLIT_STRING: quoted string split across lines
#1539: FILE: sgbuf.c:183:
+		printk(KERN_INFO "sg: "
+			"using bounce_buffer for writing %d bytes\n", *len);

CHECK:BRACES: Unbalanced braces around else statement
#1541: FILE: sgbuf.c:185:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1550: FILE: sgbuf.c:194:
+	printk(KERN_INFO "sg: aborting\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228490.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 88 warnings, 90 checks, 1498 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228490.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
