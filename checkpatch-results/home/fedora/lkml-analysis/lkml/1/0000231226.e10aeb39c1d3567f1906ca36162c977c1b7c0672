WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#41: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#47: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:2:
+ * File:         sound/soc/blackfin/bf5xx-ac97-pcm.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#71: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:26:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:48:
+static void bf5xx_mmap_copy(struct snd_pcm_substream *substream,
+	 snd_pcm_uframes_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#97: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:52:
+	struct sport_device *sport = runtime->private_data;
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#98: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:53:
+		bf5xx_pcm_to_ac97(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#105: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:60:
+		bf5xx_ac97_to_pcm(

WARNING:LINE_SPACING: Missing a blank line after declarations
#120: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:75:
+	struct snd_pcm_runtime *runtime = pcm->runtime;
+	bf5xx_mmap_copy(pcm, runtime->period_size);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#144: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:99:
+	.periods_max		= PAGE_SIZE/32,
 	            		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:105:
+static int bf5xx_pcm_hw_params(struct snd_pcm_substream *substream,
+	struct snd_pcm_hw_params *params)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:137:
+		sport_config_tx_dma(sport, sport->tx_dma_buf, runtime->periods,
+			runtime->period_size * sizeof(struct ac97_frame));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:142:
+		sport_config_rx_dma(sport, sport->rx_dma_buf, runtime->periods,
+			runtime->period_size * sizeof(struct ac97_frame));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:148:
+		sport_config_tx_dma(sport, runtime->dma_area, runtime->periods,
+			runtime->period_size * sizeof(struct ac97_frame));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:152:
+		sport_config_rx_dma(sport, runtime->dma_area, runtime->periods,
+			runtime->period_size * sizeof(struct ac97_frame));

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#209: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:164:
+	pr_debug("%s enter\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#265: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:220:
+	pr_debug("%s enter\n", __func__);

CHECK:BRACES: braces {} should be used on all arms of this statement
#272: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:227:
+	if (sport_handle != NULL)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sport_handle"
#272: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:227:
+	if (sport_handle != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#274: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:229:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:241:
+static int bf5xx_pcm_mmap(struct snd_pcm_substream *substream,
+	struct vm_area_struct *vma)

WARNING:LINE_SPACING: Missing a blank line after declarations
#290: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:245:
+	size_t size = vma->vm_end - vma->vm_start;
+	vma->vm_start = (unsigned long)runtime->dma_area;

WARNING:SPACING: space prohibited before semicolon
#293: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:248:
+	return 0 ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:252:
+static	int bf5xx_pcm_copy(struct snd_pcm_substream *substream, int channel,
+		    snd_pcm_uframes_t pos,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:258:
+	pr_debug("%s copy pos:0x%lx count:0x%lx\n",
+			substream->stream?"Capture":"Playback", pos, count);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#303: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:258:
+			substream->stream?"Capture":"Playback", pos, count);
 			                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#303: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:258:
+			substream->stream?"Capture":"Playback", pos, count);
 			                           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#306: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:261:
+		bf5xx_pcm_to_ac97(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#310: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:265:
+		bf5xx_ac97_to_pcm(

WARNING:CONST_STRUCT: struct snd_pcm_ops should normally be const
#317: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:272:
+struct snd_pcm_ops bf5xx_pcm_ac97_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:298:
+	buf->area = dma_alloc_coherent(pcm->card->dev, size,
+			&buf->addr, GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#345: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:300:
+	if (!buf->area) {
+		pr_err("Failed to allocate dma memory\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:307:
+	pr_debug("%s, area:%p, size:0x%08lx\n", __func__,
+			buf->area, buf->bytes);

CHECK:BRACES: braces {} should be used on all arms of this statement
#365: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:320:
+		if (!sport_handle->tx_dma_buf) {
[...]
+		} else
[...]

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#366: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:321:
+			sport_handle->tx_dma_buf = dma_alloc_coherent(NULL, \

CHECK:BRACES: braces {} should be used on all arms of this statement
#368: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:323:
+			if (!sport_handle->tx_dma_buf) {
[...]
+			} else
[...]

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#369: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:324:
+				pr_err("Failed to allocate memory for tx dma \

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#369: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:324:
+			if (!sport_handle->tx_dma_buf) {
+				pr_err("Failed to allocate memory for tx dma \

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#373: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:328:
+				return -ENOMEM;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#373: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:328:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#375: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:330:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#378: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:333:
+		if (!sport_handle->rx_dma_buf) {
[...]
+		} else
[...]

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#379: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:334:
+			sport_handle->rx_dma_buf = dma_alloc_coherent(NULL, \

CHECK:BRACES: braces {} should be used on all arms of this statement
#381: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:336:
+			if (!sport_handle->rx_dma_buf) {
[...]
+			} else
[...]

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#382: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:337:
+				pr_err("Failed to allocate memory for rx dma \

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#382: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:337:
+			if (!sport_handle->rx_dma_buf) {
+				pr_err("Failed to allocate memory for rx dma \

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#386: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:341:
+				return -ENOMEM;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#386: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:341:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#388: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:343:
+		} else

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#417: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:372:
+			dma_free_coherent(NULL, size, \

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#421: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:376:
+	} else {
+

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#423: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:378:
+			dma_free_coherent(NULL, size, \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:391:
+int bf5xx_pcm_ac97_new(struct snd_card *card, struct snd_soc_dai *dai,
+	struct snd_pcm *pcm)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#440: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:395:
+	pr_debug("%s enter\n", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:403:
+		ret = bf5xx_pcm_preallocate_dma_buffer(pcm,
+			SNDRV_PCM_STREAM_PLAYBACK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#455: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:410:
+		ret = bf5xx_pcm_preallocate_dma_buffer(pcm,
+			SNDRV_PCM_STREAM_CAPTURE);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#465: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.c:420:
+^I.pcm_ops ^I= &bf5xx_pcm_ac97_ops,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#480: FILE: sound/soc/blackfin/bf5xx-ac97-pcm.h:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000231226.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 24 warnings, 33 checks, 457 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000231226.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
