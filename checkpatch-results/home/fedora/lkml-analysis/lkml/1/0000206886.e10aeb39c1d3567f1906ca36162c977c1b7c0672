CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#126: FILE: arch/x86/kernel/ftrace.c:23:
+#include <asm/nmi.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#219: FILE: arch/x86/kernel/ftrace.c:108:
+	asm volatile(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#249: FILE: arch/x86/kernel/ftrace.c:138:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#277: FILE: arch/x86/kernel/ftrace.c:166:
+	asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#294: FILE: arch/x86/kernel/ftrace.c:183:
+	asm volatile (

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#328: FILE: arch/x86/kernel/ftrace.c:217:
+	ftrace_return_state.trampoline = kmalloc(

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#338: FILE: arch/x86/kernel/ftrace.c:227:
+	ftrace_return_state.func_table = kmalloc(FTRACE_TRAMPOLINE_SIZE *
+					 sizeof(struct ftrace_retfunc),
+					 GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#350: FILE: arch/x86/kernel/ftrace.c:239:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#360: FILE: arch/x86/kernel/ftrace.c:249:
+	} __attribute__((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#369: FILE: arch/x86/kernel/ftrace.c:393:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#404: FILE: include/linux/ftrace.h:280:
+extern void ftrace_return_stub(struct ftrace_retfunc *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_retfunc *' should also have an identifier name
#404: FILE: include/linux/ftrace.h:280:
+extern void ftrace_return_stub(struct ftrace_retfunc *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#405: FILE: include/linux/ftrace.h:281:
+extern void register_ftrace_return(void (*func)(struct ftrace_retfunc *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_retfunc *' should also have an identifier name
#406: FILE: include/linux/ftrace.h:282:
+extern void (*ftrace_function_return)(struct ftrace_retfunc *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#407: FILE: include/linux/ftrace.h:283:
+extern void unregister_ftrace_return(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000206886.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 11 checks, 368 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000206886.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
