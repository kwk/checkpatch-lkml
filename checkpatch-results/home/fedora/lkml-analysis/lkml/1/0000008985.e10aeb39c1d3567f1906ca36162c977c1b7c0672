WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Cleanup kernel.h extern declarations, move printk/panic/string stuff to their

WARNING:TYPO_SPELLING: 'convinience' may be misspelled - perhaps 'convenience'?
#38: 
for convinience. At least it can be thought as the first step to do the full
    ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/linux/printk.h:1:
+#ifndef _PRINTK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#110: FILE: include/linux/printk.h:59:
+	__attribute__ ((format (printf, 1, 0)));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: include/linux/printk.h:60:
+asmlinkage int printk(const char * fmt, ...)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#111: FILE: include/linux/printk.h:60:
+asmlinkage int printk(const char * fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#112: FILE: include/linux/printk.h:61:
+	__attribute__ ((format (printf, 1, 2))) __cold;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/printk.h:63:
+extern int __printk_ratelimit(const char *func);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#115: FILE: include/linux/printk.h:64:
+#define printk_ratelimit() __printk_ratelimit(__func__)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/printk.h:65:
+extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#129: FILE: include/linux/printk.h:78:
+		printk(x);			\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#136: FILE: include/linux/printk.h:85:
+	__attribute__ ((format (printf, 1, 0)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#138: FILE: include/linux/printk.h:87:
+static inline int printk(const char *s, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#139: FILE: include/linux/printk.h:88:
+	__attribute__ ((format (printf, 1, 2)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#140: FILE: include/linux/printk.h:89:
+static inline int __cold printk(const char *s, ...) { return 0; }

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#141: FILE: include/linux/printk.h:90:
+static inline int printk_ratelimit(void) { return 0; }

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#142: FILE: include/linux/printk.h:91:
+static inline bool printk_timed_ratelimit(unsigned long *caller_jiffies, \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#147: FILE: include/linux/printk.h:96:
+#define printk_once(x...) printk(x)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/printk.h:103:
+extern int printk_needs_cpu(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/printk.h:104:
+extern void printk_tick(void);

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'void'
#157: FILE: include/linux/printk.h:106:
+extern void asmlinkage __attribute__((format(printf, 1, 2)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#157: FILE: include/linux/printk.h:106:
+extern void asmlinkage __attribute__((format(printf, 1, 2)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: include/linux/printk.h:125:
+        printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: include/linux/printk.h:125:
+        printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#176: FILE: include/linux/printk.h:125:
+        printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: include/linux/printk.h:127:
+        printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: include/linux/printk.h:127:
+        printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#178: FILE: include/linux/printk.h:127:
+        printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: include/linux/printk.h:129:
+        printk(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: include/linux/printk.h:129:
+        printk(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#180: FILE: include/linux/printk.h:129:
+        printk(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: include/linux/printk.h:131:
+        printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: include/linux/printk.h:131:
+        printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#182: FILE: include/linux/printk.h:131:
+        printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: include/linux/printk.h:133:
+        printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: include/linux/printk.h:133:
+        printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#184: FILE: include/linux/printk.h:133:
+        printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: include/linux/printk.h:135:
+        printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: include/linux/printk.h:135:
+        printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#186: FILE: include/linux/printk.h:135:
+        printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: include/linux/printk.h:137:
+        printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: include/linux/printk.h:137:
+        printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#188: FILE: include/linux/printk.h:137:
+        printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#189: FILE: include/linux/printk.h:138:
+#define pr_cont(fmt, ...) \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#190: FILE: include/linux/printk.h:139:
+	printk(KERN_CONT fmt, ##__VA_ARGS__)

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#190: FILE: include/linux/printk.h:139:
+	printk(KERN_CONT fmt, ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#195: FILE: include/linux/printk.h:144:
+	printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#198: FILE: include/linux/printk.h:147:
+	({ if (0) printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__); 0; })

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#204: FILE: include/linux/printk.h:153:
+	printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#211: FILE: include/linux/printk.h:160:
+	({ if (0) printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__); 0; })

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#226: FILE: include/linux/printk.h:175:
+		printk(fmt, ##__VA_ARGS__);		\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg_ratelimited([subsystem]dev, ... then dev_emerg_ratelimited(dev, ... then pr_emerg_ratelimited(...  to printk_ratelimited(KERN_EMERG ...
#234: FILE: include/linux/printk.h:183:
+	printk_ratelimited(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert_ratelimited([subsystem]dev, ... then dev_alert_ratelimited(dev, ... then pr_alert_ratelimited(...  to printk_ratelimited(KERN_ALERT ...
#236: FILE: include/linux/printk.h:185:
+	printk_ratelimited(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit_ratelimited([subsystem]dev, ... then dev_crit_ratelimited(dev, ... then pr_crit_ratelimited(...  to printk_ratelimited(KERN_CRIT ...
#238: FILE: include/linux/printk.h:187:
+	printk_ratelimited(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err_ratelimited([subsystem]dev, ... then dev_err_ratelimited(dev, ... then pr_err_ratelimited(...  to printk_ratelimited(KERN_ERR ...
#240: FILE: include/linux/printk.h:189:
+	printk_ratelimited(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn_ratelimited([subsystem]dev, ... then dev_warn_ratelimited(dev, ... then pr_warn_ratelimited(...  to printk_ratelimited(KERN_WARNING ...
#242: FILE: include/linux/printk.h:191:
+	printk_ratelimited(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice_ratelimited([subsystem]dev, ... then dev_notice_ratelimited(dev, ... then pr_notice_ratelimited(...  to printk_ratelimited(KERN_NOTICE ...
#244: FILE: include/linux/printk.h:193:
+	printk_ratelimited(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info_ratelimited([subsystem]dev, ... then dev_info_ratelimited(dev, ... then pr_info_ratelimited(...  to printk_ratelimited(KERN_INFO ...
#246: FILE: include/linux/printk.h:195:
+	printk_ratelimited(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg_ratelimited([subsystem]dev, ... then dev_dbg_ratelimited(dev, ... then pr_debug_ratelimited(...  to printk_ratelimited(KERN_DEBUG ...
#251: FILE: include/linux/printk.h:200:
+	printk_ratelimited(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg_ratelimited([subsystem]dev, ... then dev_dbg_ratelimited(dev, ... then pr_debug_ratelimited(...  to printk_ratelimited(KERN_DEBUG ...
#254: FILE: include/linux/printk.h:203:
+	({ if (0) printk_ratelimited(KERN_DEBUG pr_fmt(fmt), \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/linux/printk.h:207:
+extern void wake_up_klogd(void);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#264: FILE: include/linux/printk.h:213:
+#define NIPQUAD(addr) \
+	((unsigned char *)&addr)[0], \
+	((unsigned char *)&addr)[1], \
+	((unsigned char *)&addr)[2], \
+	((unsigned char *)&addr)[3]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#264: FILE: include/linux/printk.h:213:
+#define NIPQUAD(addr) \
+	((unsigned char *)&addr)[0], \
+	((unsigned char *)&addr)[1], \
+	((unsigned char *)&addr)[2], \
+	((unsigned char *)&addr)[3]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#264: FILE: include/linux/printk.h:213:
+#define NIPQUAD(addr) \
+	((unsigned char *)&addr)[0], \
+	((unsigned char *)&addr)[1], \
+	((unsigned char *)&addr)[2], \
+	((unsigned char *)&addr)[3]

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#763: FILE: include/linux/panic.h:1:
+#ifndef _PANIC_H

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#780: FILE: include/linux/panic.h:18:
+NORET_TYPE void panic(const char * fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#781: FILE: include/linux/panic.h:19:
+	__attribute__ ((NORET_AND format (printf, 1, 2))) __cold;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#782: FILE: include/linux/panic.h:20:
+extern void oops_enter(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#783: FILE: include/linux/panic.h:21:
+extern void oops_exit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#784: FILE: include/linux/panic.h:22:
+extern int oops_may_print(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#785: FILE: include/linux/panic.h:23:
+extern const char *print_tainted(void);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#786: FILE: include/linux/panic.h:24:
+extern void add_taint(unsigned flag);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#786: FILE: include/linux/panic.h:24:
+extern void add_taint(unsigned flag);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#787: FILE: include/linux/panic.h:25:
+extern int test_taint(unsigned flag);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#787: FILE: include/linux/panic.h:25:
+extern int test_taint(unsigned flag);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#788: FILE: include/linux/panic.h:26:
+extern unsigned long get_taint(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#790: FILE: include/linux/panic.h:28:
+/* If oops_in_progress is set,
+an oops, panic(), BUG() or die() is in progress */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#790: FILE: include/linux/panic.h:28:
+an oops, panic(), BUG() or die() is in progress */

ERROR:SPACING: space required after that ',' (ctx:OxV)
#805: FILE: include/linux/string.h:146:
+extern unsigned long simple_strtoul(const char *,char **,unsigned int);
                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:OxV)
#805: FILE: include/linux/string.h:146:
+extern unsigned long simple_strtoul(const char *,char **,unsigned int);
                                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#805: FILE: include/linux/string.h:146:
+extern unsigned long simple_strtoul(const char *,char **,unsigned int);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#805: FILE: include/linux/string.h:146:
+extern unsigned long simple_strtoul(const char *,char **,unsigned int);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: space required after that ',' (ctx:OxV)
#806: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *,char **,unsigned int);
                                       ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#806: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *,char **,unsigned int);
                                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#806: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *,char **,unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#806: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *,char **,unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#806: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *,char **,unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#806: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *,char **,unsigned int);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#806: FILE: include/linux/string.h:147:
+extern long simple_strtol(const char *,char **,unsigned int);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#807: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#807: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
                                                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#807: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *,char **,unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#807: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *,char **,unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#807: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *,char **,unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#807: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *,char **,unsigned int);

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#807: FILE: include/linux/string.h:148:
+extern unsigned long long simple_strtoull(const char *,char **,unsigned int);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#808: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *,char **,unsigned int);
                                             ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#808: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *,char **,unsigned int);
                                                     ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#808: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *,char **,unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#808: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *,char **,unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#808: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *,char **,unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#808: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *,char **,unsigned int);

WARNING:CONSIDER_KSTRTO: simple_strtoll is obsolete, use kstrtoll instead
#808: FILE: include/linux/string.h:149:
+extern long long simple_strtoll(const char *,char **,unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#809: FILE: include/linux/string.h:150:
+extern int strict_strtoul(const char *, unsigned int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#809: FILE: include/linux/string.h:150:
+extern int strict_strtoul(const char *, unsigned int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#809: FILE: include/linux/string.h:150:
+extern int strict_strtoul(const char *, unsigned int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#809: FILE: include/linux/string.h:150:
+extern int strict_strtoul(const char *, unsigned int, unsigned long *);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#809: FILE: include/linux/string.h:150:
+extern int strict_strtoul(const char *, unsigned int, unsigned long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#810: FILE: include/linux/string.h:151:
+extern int strict_strtol(const char *, unsigned int, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#810: FILE: include/linux/string.h:151:
+extern int strict_strtol(const char *, unsigned int, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#810: FILE: include/linux/string.h:151:
+extern int strict_strtol(const char *, unsigned int, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long *' should also have an identifier name
#810: FILE: include/linux/string.h:151:
+extern int strict_strtol(const char *, unsigned int, long *);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#810: FILE: include/linux/string.h:151:
+extern int strict_strtol(const char *, unsigned int, long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#811: FILE: include/linux/string.h:152:
+extern int strict_strtoull(const char *, unsigned int, unsigned long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#811: FILE: include/linux/string.h:152:
+extern int strict_strtoull(const char *, unsigned int, unsigned long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#811: FILE: include/linux/string.h:152:
+extern int strict_strtoull(const char *, unsigned int, unsigned long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long *' should also have an identifier name
#811: FILE: include/linux/string.h:152:
+extern int strict_strtoull(const char *, unsigned int, unsigned long long *);

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#811: FILE: include/linux/string.h:152:
+extern int strict_strtoull(const char *, unsigned int, unsigned long long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#812: FILE: include/linux/string.h:153:
+extern int strict_strtoll(const char *, unsigned int, long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#812: FILE: include/linux/string.h:153:
+extern int strict_strtoll(const char *, unsigned int, long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#812: FILE: include/linux/string.h:153:
+extern int strict_strtoll(const char *, unsigned int, long long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long long *' should also have an identifier name
#812: FILE: include/linux/string.h:153:
+extern int strict_strtoll(const char *, unsigned int, long long *);

WARNING:CONSIDER_KSTRTO: strict_strtoll is obsolete, use kstrtoll instead
#812: FILE: include/linux/string.h:153:
+extern int strict_strtoll(const char *, unsigned int, long long *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#813: FILE: include/linux/string.h:154:
+extern int sprintf(char * buf, const char * fmt, ...)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#813: FILE: include/linux/string.h:154:
+extern int sprintf(char * buf, const char * fmt, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#813: FILE: include/linux/string.h:154:
+extern int sprintf(char * buf, const char * fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#814: FILE: include/linux/string.h:155:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#815: FILE: include/linux/string.h:156:
+extern int vsprintf(char *buf, const char *, va_list)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#815: FILE: include/linux/string.h:156:
+extern int vsprintf(char *buf, const char *, va_list)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'va_list' should also have an identifier name
#815: FILE: include/linux/string.h:156:
+extern int vsprintf(char *buf, const char *, va_list)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#816: FILE: include/linux/string.h:157:
+	__attribute__ ((format (printf, 2, 0)));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#817: FILE: include/linux/string.h:158:
+extern int snprintf(char * buf, size_t size, const char * fmt, ...)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#817: FILE: include/linux/string.h:158:
+extern int snprintf(char * buf, size_t size, const char * fmt, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#817: FILE: include/linux/string.h:158:
+extern int snprintf(char * buf, size_t size, const char * fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#818: FILE: include/linux/string.h:159:
+	__attribute__ ((format (printf, 3, 4)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#819: FILE: include/linux/string.h:160:
+extern int vsnprintf(char *buf, size_t size, const char *fmt, va_list args)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 0) over __attribute__((format(printf, 3, 0)))
#820: FILE: include/linux/string.h:161:
+	__attribute__ ((format (printf, 3, 0)));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#821: FILE: include/linux/string.h:162:
+extern int scnprintf(char * buf, size_t size, const char * fmt, ...)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#821: FILE: include/linux/string.h:162:
+extern int scnprintf(char * buf, size_t size, const char * fmt, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#821: FILE: include/linux/string.h:162:
+extern int scnprintf(char * buf, size_t size, const char * fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#822: FILE: include/linux/string.h:163:
+	__attribute__ ((format (printf, 3, 4)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#823: FILE: include/linux/string.h:164:
+extern int vscnprintf(char *buf, size_t size, const char *fmt, va_list args)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 0) over __attribute__((format(printf, 3, 0)))
#824: FILE: include/linux/string.h:165:
+	__attribute__ ((format (printf, 3, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#825: FILE: include/linux/string.h:166:
+extern char *kasprintf(gfp_t gfp, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#826: FILE: include/linux/string.h:167:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#827: FILE: include/linux/string.h:168:
+extern char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#829: FILE: include/linux/string.h:170:
+extern int sscanf(const char *, const char *, ...)
+	__attribute__ ((format (scanf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#829: FILE: include/linux/string.h:170:
+extern int sscanf(const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#829: FILE: include/linux/string.h:170:
+extern int sscanf(const char *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#829: FILE: include/linux/string.h:170:
+extern int sscanf(const char *, const char *, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __scanf(2, 3) over __attribute__((format(scanf, 2, 3)))
#830: FILE: include/linux/string.h:171:
+	__attribute__ ((format (scanf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#831: FILE: include/linux/string.h:172:
+extern int vsscanf(const char *, const char *, va_list)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#831: FILE: include/linux/string.h:172:
+extern int vsscanf(const char *, const char *, va_list)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#831: FILE: include/linux/string.h:172:
+extern int vsscanf(const char *, const char *, va_list)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'va_list' should also have an identifier name
#831: FILE: include/linux/string.h:172:
+extern int vsscanf(const char *, const char *, va_list)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __scanf(2, 0) over __attribute__((format(scanf, 2, 0)))
#832: FILE: include/linux/string.h:173:
+	__attribute__ ((format (scanf, 2, 0)));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008985.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 100 warnings, 32 checks, 771 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008985.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
