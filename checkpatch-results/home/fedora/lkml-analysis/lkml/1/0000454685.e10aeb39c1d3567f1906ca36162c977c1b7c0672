WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
With this feature, we can measure the real I/O time in MTD and JFFS2 behavior

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# blktrace -d /dev/mtdblock4 ... 

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# mount -t jffs2 /dev/mtdblock4 /mnt/jffs2

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# do somethings

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#82: FILE: fs/Kconfig:1248:
+config JFFS2_BLKTRACE
+	bool "JFFS2 Block Trace Support (EXPERIMENTAL)"
+	depends on JFFS2_FS && BLK_DEV_IO_TRACE && EXPERIMENTAL
+	default n
+	help
+	  This feature makes it possible to use block trace.
+
+	  If unsure, say 'N'.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#99: FILE: fs/jffs2/Makefile:10:
gc.o

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#108: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#113: FILE: fs/jffs2/blktrace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: fs/jffs2/blktrace.c:24:
+#define SECTOR_ROUNDUP(x)^I((((x) + (512 - 1)) >> 9) << 9) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: fs/jffs2/blktrace.c:35:
+static inline void blk_add_trace_jffs2(struct mtd_info *mtd,
+		loff_t off, size_t len, int rw, u32 what)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: fs/jffs2/blktrace.c:54:
+int jffs2_mtd_read(struct mtd_info *mtd, loff_t from, size_t len,
+				size_t *retlen, u_char *buf)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: fs/jffs2/blktrace.c:65:
+int jffs2_mtd_read_oob(struct mtd_info *mtd, loff_t from, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: fs/jffs2/blktrace.c:66:
+int jffs2_mtd_read_oob(struct mtd_info *mtd, loff_t from, 
+				struct mtd_oob_ops *ops)

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: fs/jffs2/blktrace.c:78:
+^I^I^I        size_t *retlen, const u_char *buf)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: fs/jffs2/blktrace.c:78:
+int jffs2_mtd_write(struct mtd_info *mtd, loff_t to, size_t len,
+			        size_t *retlen, const u_char *buf)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: fs/jffs2/blktrace.c:80:
+^Iint ret; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: fs/jffs2/blktrace.c:89:
+int jffs2_mtd_write_oob(struct mtd_info *mtd, loff_t to, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: fs/jffs2/blktrace.c:90:
+int jffs2_mtd_write_oob(struct mtd_info *mtd, loff_t to, 
+				struct mtd_oob_ops *ops)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: fs/jffs2/blktrace.c:102:
+int jffs2_mtd_writev(struct mtd_info *mtd, const struct kvec *vecs,
+				unsigned long count, loff_t to, size_t *retlen)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: fs/jffs2/blktrace.c:107:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#246: FILE: fs/jffs2/blktrace.h:1:
+#ifndef __JFFS2_BLKTRACE_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: fs/jffs2/blktrace.h:6:
+extern int jffs2_mtd_read(struct mtd_info *mtd, loff_t from, size_t len,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: fs/jffs2/blktrace.h:7:
+                                size_t *retlen, u_char *buf);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: fs/jffs2/blktrace.h:7:
+extern int jffs2_mtd_read(struct mtd_info *mtd, loff_t from, size_t len,
+                                size_t *retlen, u_char *buf);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: fs/jffs2/blktrace.h:7:
+                                size_t *retlen, u_char *buf);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#253: FILE: fs/jffs2/blktrace.h:8:
+extern int jffs2_mtd_read_oob(struct mtd_info *mtd, loff_t from,

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: fs/jffs2/blktrace.h:9:
+                                struct mtd_oob_ops *ops);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: fs/jffs2/blktrace.h:9:
+extern int jffs2_mtd_read_oob(struct mtd_info *mtd, loff_t from,
+                                struct mtd_oob_ops *ops);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: fs/jffs2/blktrace.h:9:
+                                struct mtd_oob_ops *ops);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: fs/jffs2/blktrace.h:10:
+extern int jffs2_mtd_write(struct mtd_info *mtd, loff_t to, size_t len,

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: fs/jffs2/blktrace.h:11:
+                                size_t *retlen, const u_char *buf);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: fs/jffs2/blktrace.h:11:
+extern int jffs2_mtd_write(struct mtd_info *mtd, loff_t to, size_t len,
+                                size_t *retlen, const u_char *buf);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: fs/jffs2/blktrace.h:11:
+                                size_t *retlen, const u_char *buf);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: fs/jffs2/blktrace.h:12:
+extern int jffs2_mtd_write_oob(struct mtd_info *mtd, loff_t to,

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: fs/jffs2/blktrace.h:13:
+                                struct mtd_oob_ops *ops);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: fs/jffs2/blktrace.h:13:
+extern int jffs2_mtd_write_oob(struct mtd_info *mtd, loff_t to,
+                                struct mtd_oob_ops *ops);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: fs/jffs2/blktrace.h:13:
+                                struct mtd_oob_ops *ops);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: fs/jffs2/blktrace.h:14:
+extern int jffs2_mtd_writev(struct mtd_info *mtd, const struct kvec *vecs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: fs/jffs2/blktrace.h:15:
+extern int jffs2_mtd_writev(struct mtd_info *mtd, const struct kvec *vecs,
+				unsigned long count, loff_t to, size_t *retlen);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: fs/jffs2/blktrace.h:16:
+extern int jffs2_mtd_erase(struct mtd_info *mtd, struct erase_info *instr);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mtd' - possible side-effects?
#263: FILE: fs/jffs2/blktrace.h:18:
+#define jffs2_mtd_read(mtd, from, len, retlen, buf)                     \
+	(mtd->read(mtd, from, len, retlen, buf))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mtd' may be better as '(mtd)' to avoid precedence issues
#263: FILE: fs/jffs2/blktrace.h:18:
+#define jffs2_mtd_read(mtd, from, len, retlen, buf)                     \
+	(mtd->read(mtd, from, len, retlen, buf))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mtd' - possible side-effects?
#265: FILE: fs/jffs2/blktrace.h:20:
+#define jffs2_mtd_read_oob(mtd, from, ops)                              \
+	(mtd->read_oob(mtd, from, ops))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mtd' may be better as '(mtd)' to avoid precedence issues
#265: FILE: fs/jffs2/blktrace.h:20:
+#define jffs2_mtd_read_oob(mtd, from, ops)                              \
+	(mtd->read_oob(mtd, from, ops))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mtd' - possible side-effects?
#267: FILE: fs/jffs2/blktrace.h:22:
+#define jffs2_mtd_write(mtd, to, len, retlen, buf)                      \
+	(mtd->write(mtd, to, len, retlen, buf))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mtd' may be better as '(mtd)' to avoid precedence issues
#267: FILE: fs/jffs2/blktrace.h:22:
+#define jffs2_mtd_write(mtd, to, len, retlen, buf)                      \
+	(mtd->write(mtd, to, len, retlen, buf))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mtd' - possible side-effects?
#269: FILE: fs/jffs2/blktrace.h:24:
+#define jffs2_mtd_write_oob(mtd, to, ops)                               \
+	(mtd->write_oob(mtd, to, ops))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mtd' may be better as '(mtd)' to avoid precedence issues
#269: FILE: fs/jffs2/blktrace.h:24:
+#define jffs2_mtd_write_oob(mtd, to, ops)                               \
+	(mtd->write_oob(mtd, to, ops))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mtd' - possible side-effects?
#271: FILE: fs/jffs2/blktrace.h:26:
+#define jffs2_mtd_writev(mtd, vecs, count, to retlen)			\
+	(mtd->writev(mtd, vecs, count, to, retlen));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mtd' may be better as '(mtd)' to avoid precedence issues
#271: FILE: fs/jffs2/blktrace.h:26:
+#define jffs2_mtd_writev(mtd, vecs, count, to retlen)			\
+	(mtd->writev(mtd, vecs, count, to, retlen));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#271: FILE: fs/jffs2/blktrace.h:26:
+#define jffs2_mtd_writev(mtd, vecs, count, to retlen)			\
+	(mtd->writev(mtd, vecs, count, to, retlen));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mtd' - possible side-effects?
#273: FILE: fs/jffs2/blktrace.h:28:
+#define jffs2_mtd_erase(mtd, instr)					\
+	(mtd->erase(mtd, instr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mtd' may be better as '(mtd)' to avoid precedence issues
#273: FILE: fs/jffs2/blktrace.h:28:
+#define jffs2_mtd_erase(mtd, instr)					\
+	(mtd->erase(mtd, instr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#311: FILE: fs/jffs2/os-linux.h:85:
+#define jffs2_flash_read(c, ofs, len, retlen, buf) (jffs2_mtd_read((c)->mtd,

CHECK:SPACING: space preferred before that '-' (ctx:VxE)
#327: FILE: fs/jffs2/os-linux.h:115:
+#define jffs2_flash_read_oob(c, ofs, len, retlen, buf) (jffs2_mtd_read_oob((c)-
                                                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#327: FILE: fs/jffs2/os-linux.h:115:
+#define jffs2_flash_read_oob(c, ofs, len, retlen, buf) (jffs2_mtd_read_oob((c)-

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: fs/jffs2/wbuf.c:303:
+		ret = jffs2_mtd_read(c->mtd, start, c->wbuf_ofs - start,
 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: fs/jffs2/wbuf.c:376:
+			jffs2_mtd_write(c->mtd, ofs, towrite, &retlen,
 			ret = -EIO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: fs/jffs2/wbuf.c:380:
+			ret = jffs2_mtd_write(c->mtd, ofs, towrite, &retlen,
 					    rewrite_buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: fs/jffs2/wbuf.c:582:
+		jffs2_mtd_write(c->mtd, c->wbuf_ofs, c->wbuf_pagesize, &retlen,
 			      brokenbuf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: fs/jffs2/wbuf.c:588:
+		ret = jffs2_mtd_write(c->mtd, c->wbuf_ofs, c->wbuf_pagesize,
 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: fs/jffs2/wbuf.c:823:
+			ret = jffs2_mtd_write(c->mtd, outvec_to, PAGE_DIV(vlen),
 					    &wbuf_retlen, v);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: fs/jffs2/writev.c:33:
+		ret = jffs2_mtd_write(mtd, to, vecs[i].iov_len, &thislen,
 		totlen += thislen;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000454685.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 13 warnings, 37 checks, 359 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000454685.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
