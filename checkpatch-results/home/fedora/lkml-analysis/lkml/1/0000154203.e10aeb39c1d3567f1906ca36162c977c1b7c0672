WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#49: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#67: FILE: fs/aufs/Kconfig:14:
+choice
+	prompt "Maximum number of branches"
+	default AUFS_BRANCH_MAX_127
+	help
+	Specifies the maximum number of branches (or member directories)
+	in a single aufs. The larger value consumes more system
+	resources and has a minor impact to performance.

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#74: FILE: fs/aufs/Kconfig:21:
+config AUFS_BRANCH_MAX_127
+	bool "127"
+	help
+	Specifies the maximum number of branches (or member directories)
+	in a single aufs. The larger value consumes more system
+	resources and has a minor impact to performance.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: fs/aufs/Kconfig:27:
+config AUFS_BRANCH_MAX_511
+	bool "511"
+	help
+	Specifies the maximum number of branches (or member directories)
+	in a single aufs. The larger value consumes more system
+	resources and has a minor impact to performance.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#86: FILE: fs/aufs/Kconfig:33:
+config AUFS_BRANCH_MAX_1023
+	bool "1023"
+	help
+	Specifies the maximum number of branches (or member directories)
+	in a single aufs. The larger value consumes more system
+	resources and has a minor impact to performance.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#92: FILE: fs/aufs/Kconfig:39:
+config AUFS_BRANCH_MAX_32767
+	bool "32767"
+	help
+	Specifies the maximum number of branches (or member directories)
+	in a single aufs. The larger value consumes more system
+	resources and has a minor impact to performance.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#110: FILE: fs/aufs/Kconfig:57:
+config AUFS_DEBUG
+	bool "Debug aufs"
+	help
+	Enable this to compile aufs internal debug code.
+	It will have a negative impact to the performance.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#163: FILE: fs/aufs/aufs.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#212: FILE: fs/aufs/module.c:1:
+/*

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#234: FILE: fs/aufs/module.c:23:
+	p = krealloc(p, new_sz, gfp);

CHECK:CAMELCASE: Avoid CamelCase: <AuCache_Last>
#245: FILE: fs/aufs/module.c:34:
+struct kmem_cache *au_cachep[AuCache_Last];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuCache_DINFO>
#248: FILE: fs/aufs/module.c:37:
+	au_cachep[AuCache_DINFO] = AuCache(au_dinfo);

CHECK:CAMELCASE: Avoid CamelCase: <AuCache>
#248: FILE: fs/aufs/module.c:37:
+	au_cachep[AuCache_DINFO] = AuCache(au_dinfo);

CHECK:CAMELCASE: Avoid CamelCase: <AuCache_ICNTNR>
#250: FILE: fs/aufs/module.c:39:
+		au_cachep[AuCache_ICNTNR] = AuCache(au_icntnr);

CHECK:CAMELCASE: Avoid CamelCase: <AuCache_FINFO>
#252: FILE: fs/aufs/module.c:41:
+		au_cachep[AuCache_FINFO] = AuCache(au_finfo);

CHECK:CAMELCASE: Avoid CamelCase: <AuCache_VDIR>
#254: FILE: fs/aufs/module.c:43:
+		au_cachep[AuCache_VDIR] = AuCache(au_vdir);

CHECK:CAMELCASE: Avoid CamelCase: <AuCache_DEHSTR>
#256: FILE: fs/aufs/module.c:45:
+		au_cachep[AuCache_DEHSTR] = AuCache(au_vdir_dehstr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: fs/aufs/module.c:55:
+	int i;
+	for (i = 0; i < AuCache_Last; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#268: FILE: fs/aufs/module.c:57:
+		if (au_cachep[i]) {
+			kmem_cache_destroy(au_cachep[i]);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#290: FILE: fs/aufs/module.c:79:
+module_param_named(nwkq, aufs_nwkq, short, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#295: FILE: fs/aufs/module.c:84:
+module_param_named(brs, sysaufs_brs, int, S_IRUGO);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#382: FILE: fs/aufs/module.h:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <AuCache_HINOTIFY>
#423: FILE: fs/aufs/module.h:42:
+	AuCache_HINOTIFY,

CHECK:CAMELCASE: Avoid CamelCase: <AuCacheFuncs>
#432: FILE: fs/aufs/module.h:51:
+#define AuCacheFuncs(name, index) \

CHECK:CAMELCASE: Avoid CamelCase: <AuCache_##index>
#434: FILE: fs/aufs/module.h:53:
+{ return kmem_cache_alloc(au_cachep[AuCache_##index], GFP_NOFS); } \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#454: FILE: fs/aufs/rwsem.h:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#474: FILE: fs/aufs/rwsem.h:21:
+#define au_rwsem_destroy(rw)	AuDebugOn(rwsem_is_locked(rw))

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustNoWaiters>
#475: FILE: fs/aufs/rwsem.h:22:
+#define AuRwMustNoWaiters(rw)	AuDebugOn(!list_empty(&(rw)->wait_list))

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleLockRwsemFuncs>
#477: FILE: fs/aufs/rwsem.h:24:
+#define AuSimpleLockRwsemFuncs(prefix, param, rwsem) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'param' - possible side-effects?
#477: FILE: fs/aufs/rwsem.h:24:
+#define AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+static inline void prefix##_read_lock(param) \
+{ down_read(rwsem); } \
+static inline void prefix##_write_lock(param) \
+{ down_write(rwsem); } \
+static inline int prefix##_read_trylock(param) \
+{ return down_read_trylock(rwsem); } \
+static inline int prefix##_write_trylock(param) \
+{ return down_write_trylock(rwsem); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rwsem' - possible side-effects?
#477: FILE: fs/aufs/rwsem.h:24:
+#define AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+static inline void prefix##_read_lock(param) \
+{ down_read(rwsem); } \
+static inline void prefix##_write_lock(param) \
+{ down_write(rwsem); } \
+static inline int prefix##_read_trylock(param) \
+{ return down_read_trylock(rwsem); } \
+static inline int prefix##_write_trylock(param) \
+{ return down_write_trylock(rwsem); }

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#488: FILE: fs/aufs/rwsem.h:35:
+/* static inline void prefix##_read_trylock_nested(param, lsc)
+{ down_write_trylock_nested(rwsem, lsc)); }

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#490: FILE: fs/aufs/rwsem.h:37:
+{ down_write_trylock_nested(rwsem, lsc); } */

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleUnlockRwsemFuncs>
#492: FILE: fs/aufs/rwsem.h:39:
+#define AuSimpleUnlockRwsemFuncs(prefix, param, rwsem) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'param' - possible side-effects?
#492: FILE: fs/aufs/rwsem.h:39:
+#define AuSimpleUnlockRwsemFuncs(prefix, param, rwsem) \
+static inline void prefix##_read_unlock(param) \
+{ up_read(rwsem); } \
+static inline void prefix##_write_unlock(param) \
+{ up_write(rwsem); } \
+static inline void prefix##_downgrade_lock(param) \
+{ downgrade_write(rwsem); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rwsem' - possible side-effects?
#492: FILE: fs/aufs/rwsem.h:39:
+#define AuSimpleUnlockRwsemFuncs(prefix, param, rwsem) \
+static inline void prefix##_read_unlock(param) \
+{ up_read(rwsem); } \
+static inline void prefix##_write_unlock(param) \
+{ up_write(rwsem); } \
+static inline void prefix##_downgrade_lock(param) \
+{ downgrade_write(rwsem); }

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleRwsemFuncs>
#500: FILE: fs/aufs/rwsem.h:47:
+#define AuSimpleRwsemFuncs(prefix, param, rwsem) \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#500: FILE: fs/aufs/rwsem.h:47:
+#define AuSimpleRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleUnlockRwsemFuncs(prefix, param, rwsem)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prefix' - possible side-effects?
#500: FILE: fs/aufs/rwsem.h:47:
+#define AuSimpleRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleUnlockRwsemFuncs(prefix, param, rwsem)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'param' - possible side-effects?
#500: FILE: fs/aufs/rwsem.h:47:
+#define AuSimpleRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleUnlockRwsemFuncs(prefix, param, rwsem)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rwsem' - possible side-effects?
#500: FILE: fs/aufs/rwsem.h:47:
+#define AuSimpleRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleUnlockRwsemFuncs(prefix, param, rwsem)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#512: FILE: fs/aufs/spl.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#533: FILE: fs/aufs/spl.h:22:
+	spinlock_t		spin;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154203.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 19 warnings, 23 checks, 469 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154203.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
