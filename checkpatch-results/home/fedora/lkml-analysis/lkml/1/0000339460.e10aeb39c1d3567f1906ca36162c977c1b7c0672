WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Replace the epitem rbtree with a dynamic array to get the constant insertion/deletion/modification time of the file descriptors. Reuse the size argument of epoll_create, however the size must be smaller than the max file descriptor number: ether the resource limitation or the compiling time limitation.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#132: FILE: fs/eventpoll.c:381:
+	if (epi->ffd.fd < ep->epi_array_size
+			&& ep->epi_array[epi->ffd.fd] == epi)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#143: FILE: fs/eventpoll.c:400:
+	if (ep->epi_array_size < PAGE_SIZE / sizeof(struct epitem*))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#165: FILE: fs/eventpoll.c:428:
+	for (i = 0; i < ep->epi_array_size; i ++) {
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "epi"
#167: FILE: fs/eventpoll.c:430:
+		if (epi != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#179: FILE: fs/eventpoll.c:440:
+	for (i = 0; i < ep->epi_array_size; i ++) {
 	                                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "epi"
#181: FILE: fs/eventpoll.c:442:
+		if (epi != NULL)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#199: FILE: fs/eventpoll.c:533:
+	int msize = sizeof(struct epitem*) * size;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#204: FILE: fs/eventpoll.c:538:
+	if (size < PAGE_SIZE / sizeof(struct epitem*)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#210: FILE: fs/eventpoll.c:544:
+		ep->epi_array_size = msize / sizeof(struct epitem*);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep->epi_array"
#212: FILE: fs/eventpoll.c:546:
+	if (ep->epi_array == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_alloc', this function's name, in a string
#230: FILE: fs/eventpoll.c:561:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: ep_alloc(%d) ep=%p\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ep->epi_array[fd]"
#266: FILE: fs/eventpoll.c:573:
+	if (fd < ep->epi_array_size && ep->epi_array[fd] != NULL

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#267: FILE: fs/eventpoll.c:574:
+	if (fd < ep->epi_array_size && ep->epi_array[fd] != NULL
+			&& ep->epi_array[fd]->ffd.file == file)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#294: FILE: fs/eventpoll.c:673:
+	int msize = size * sizeof(struct epitem*);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#295: FILE: fs/eventpoll.c:674:
+	int msize_old = (ep->epi_array_size) * sizeof(struct epitem*);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#297: FILE: fs/eventpoll.c:676:
+	if (size < PAGE_SIZE / sizeof(struct epitem*)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!epi_array_new"
#299: FILE: fs/eventpoll.c:678:
+		if (epi_array_new == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!epi_array_new"
#306: FILE: fs/eventpoll.c:685:
+		if (epi_array_new == NULL)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#311: FILE: fs/eventpoll.c:690:
+		ep->epi_array_size = msize / sizeof(struct epitem*);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#325: FILE: fs/eventpoll.c:702:
+		if ((retval = ep_array_expand(ep, epi->ffd.fd + 1)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#347: FILE: fs/eventpoll.c:753:
+	if (epi->nwait < 0 || ((error = ep_array_insert(ep, epi)) != 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#386: FILE: fs/eventpoll.c:1077:
+	if (size > current->signal->rlim[RLIMIT_NOFILE].rlim_cur
+				|| size > NR_OPEN) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#391: FILE: fs/eventpoll.c:1082:
+	if ((error = ep_alloc(&ep, size)) != 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000339460.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 2 warnings, 9 checks, 347 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000339460.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
