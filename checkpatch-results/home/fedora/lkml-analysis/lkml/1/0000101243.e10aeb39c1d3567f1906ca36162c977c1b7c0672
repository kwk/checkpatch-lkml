WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#66: FILE: drivers/iio/Kconfig:13:
+config IIO_RING_BUFFER
+	depends on IIO
+	bool "Enable ring buffer support within IIO"
+	help
+	  Provide core support for various ring buffer based data
+	  acquisition methods.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#89: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#94: FILE: drivers/iio/industrialio-ring.c:1:
+/* The industrial I/O core

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: drivers/iio/industrialio-ring.c:34:
+int iio_push_ring_event(struct iio_ring_buffer *ring_buf,
+		       int event_code,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: drivers/iio/industrialio-ring.c:45:
+int iio_push_or_escallate_ring_event(struct iio_ring_buffer *ring_buf,
+				    int event_code,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#159: FILE: drivers/iio/industrialio-ring.c:66:
+int iio_ring_open(struct inode *inode, struct file *filp)
                                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#162: FILE: drivers/iio/industrialio-ring.c:69:
+	struct iio_handler *hand
+		= container_of(inode->i_cdev, struct iio_handler, chrdev);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#178: FILE: drivers/iio/industrialio-ring.c:85:
+int iio_ring_release(struct inode *inode, struct file *filp)
                                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#197: FILE: drivers/iio/industrialio-ring.c:104:
+ssize_t iio_ring_rip_outer(struct file *filp,
                                         ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#251: FILE: drivers/iio/industrialio-ring.c:158:
+	int ret;
+	ret = iio_get_new_idr_val(&iio_ring_event_idr);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around buf->ev_int
#260: FILE: drivers/iio/industrialio-ring.c:167:
+	ret = iio_setup_ev_int(&(buf->ev_int),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around buf->ev_int
#277: FILE: drivers/iio/industrialio-ring.c:184:
+	iio_free_ev_int(&(buf->ev_int));

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#284: FILE: drivers/iio/industrialio-ring.c:191:
+	struct iio_ring_buffer *buf
+		= access_dev_to_iio_ring_buffer(dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#322: FILE: drivers/iio/industrialio-ring.c:229:
+		printk(KERN_ERR "failed to add the ring access dev\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#331: FILE: drivers/iio/industrialio-ring.c:238:
+		printk(KERN_ERR "failed to allocate ring access chrdev\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: drivers/iio/industrialio-ring.c:272:
+	int ret;
+	ret = iio_get_new_idr_val(&iio_ring_idr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: drivers/iio/industrialio-ring.c:333:
+ ssize_t iio_write_ring_length(struct device *dev,$

WARNING:LINE_SPACING: Missing a blank line after declarations
#434: FILE: drivers/iio/industrialio-ring.c:341:
+	struct iio_ring_buffer *ring = dev_get_drvdata(dev);
+	ret = strict_strtoul(buf, 10, &val);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#434: FILE: drivers/iio/industrialio-ring.c:341:
+	ret = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#483: FILE: drivers/iio/industrialio-ring.c:390:
+		printk(KERN_INFO "iio-ring, current state requested again\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#490: FILE: drivers/iio/industrialio-ring.c:397:
+				printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#492: FILE: drivers/iio/industrialio-ring.c:399:
+				       "Buffer not started:"
+				       "ring preenable failed\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#499: FILE: drivers/iio/industrialio-ring.c:406:
+				printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#501: FILE: drivers/iio/industrialio-ring.c:408:
+				       "Buffer not started:"
+				       "ring parameter update failed\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#508: FILE: drivers/iio/industrialio-ring.c:415:
+		if (dev_info->modes & INDIO_RING_TRIGGERED) {
[...]
+		} else if (dev_info->modes & INDIO_RING_HARDWARE_BUFFER)
[...]
+		else { /* should never be reached */
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#510: FILE: drivers/iio/industrialio-ring.c:417:
+				printk(KERN_INFO

CHECK:BRACES: Unbalanced braces around else statement
#520: FILE: drivers/iio/industrialio-ring.c:427:
+		else { /* should never be reached */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#526: FILE: drivers/iio/industrialio-ring.c:433:
+		if (ring->postenable) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#529: FILE: drivers/iio/industrialio-ring.c:436:
+				printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#531: FILE: drivers/iio/industrialio-ring.c:438:
+				       "Buffer not started:"
+				       "postenable failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: drivers/iio/industrialio-ring.c:472:
+ssize_t iio_show_ring_enable(struct device *dev,
+				    struct device_attribute *attr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#569: FILE: drivers/iio/industrialio-ring.c:476:
+	struct iio_ring_buffer *ring = dev_get_drvdata(dev);
+	return sprintf(buf, "%d\n", !!(ring->indio_dev->currentmode

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#626: FILE: drivers/iio/industrialio-ring.c:533:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#634: FILE: drivers/iio/industrialio-ring.c:541:
+	struct iio_dev *indio_dev = dev_get_drvdata(dev);
+	return sprintf(buf, "%d\n", indio_dev->scan_timestamp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#646: FILE: drivers/iio/industrialio-ring.c:553:
+	bool state;
+	state = !(buf[0] == '0');

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#666: FILE: include/linux/iio/ring_generic.h:1:
+/* The industrial I/O core - generic ring buffer interfaces.

WARNING:TYPO_SPELLING: 'indentification' may be misspelled - perhaps 'identification'?
#686: FILE: include/linux/iio/ring_generic.h:21:
+ * @event_code:		event indentification code
                		      ^^^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#695: FILE: include/linux/iio/ring_generic.h:30:
+ * Typical usecase is to escallate a 50% ring full to 75% full if noone has yet
                                                                   ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#776: FILE: include/linux/iio/ring_generic.h:111:
+ * @ring_postdisable:	[DRIVER] function to run after marking ring disabled
+  **/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#791: FILE: include/linux/iio/ring_generic.h:126:
+	int				(*preenable)(struct iio_dev *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#792: FILE: include/linux/iio/ring_generic.h:127:
+	int				(*postenable)(struct iio_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#793: FILE: include/linux/iio/ring_generic.h:128:
+	int				(*predisable)(struct iio_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#794: FILE: include/linux/iio/ring_generic.h:129:
+	int				(*postdisable)(struct iio_dev *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#797: FILE: include/linux/iio/ring_generic.h:132:
+};
+void iio_ring_buffer_init(struct iio_ring_buffer *ring,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: include/linux/iio/ring_generic.h:139:
+static inline void __iio_init_ring_buffer(struct iio_ring_buffer *ring,
+				 int bytes_per_datum, int length)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#835: FILE: include/linux/iio/ring_generic.h:170:
+#define to_iio_scan_el(_dev_attr)				\
+	container_of(_dev_attr, struct iio_scan_el, dev_attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:REPEATED_WORD: Possible repeated word: 'is'
#852: FILE: include/linux/iio/ring_generic.h:187:
+ * iio_scal_el_show() -	sysfs interface to query whether a scan element is
+ *			is enabled or not.

WARNING:TYPO_SPELLING: 'indentification' may be misspelled - perhaps 'identification'?
#863: FILE: include/linux/iio/ring_generic.h:198:
+ * @_label:	indentification variable used by drivers.  Often a reg address.
            	^^^^^^^^^^^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_number' may be better as '(_number)' to avoid precedence issues
#865: FILE: include/linux/iio/ring_generic.h:200:
+#define IIO_SCAN_EL(_name, _number, _bits, _label)			\
+	struct iio_scan_el iio_scan_el_##_name = {			\
+		.dev_attr = __ATTR(scan_en_##_name,			\
+				   S_IRUGO | S_IWUSR,			\
+				   iio_scan_el_show,			\
+				   iio_scan_el_store),			\
+		.mask = (1 << _number),					\
+		.bit_count = _bits,					\
+		.label = _label,					\
+	}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#868: FILE: include/linux/iio/ring_generic.h:203:
+				   S_IRUGO | S_IWUSR,			\

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#889: FILE: include/linux/iio/ring_generic.h:224:
+				   S_IRUGO | S_IWUSR,			\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#905: FILE: include/linux/iio/ring_generic.h:240:
+				   S_IRUGO | S_IWUSR,		\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#939: FILE: include/linux/iio/ring_generic.h:274:
+#define IIO_RING_LENGTH_ATTR DEVICE_ATTR(length, S_IRUGO | S_IWUSR,	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#942: FILE: include/linux/iio/ring_generic.h:277:
+#define IIO_RING_BPS_ATTR DEVICE_ATTR(bps, S_IRUGO | S_IWUSR,	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#944: FILE: include/linux/iio/ring_generic.h:279:
+#define IIO_RING_ENABLE_ATTR DEVICE_ATTR(ring_enable, S_IRUGO | S_IWUSR, \

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 42 warnings, 14 checks, 869 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
