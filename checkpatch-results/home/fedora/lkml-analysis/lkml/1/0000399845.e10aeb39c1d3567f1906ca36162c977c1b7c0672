WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#48: 
it must be clean, uptodate, not under writeback, and not have an elevated
                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
This descriptor (struct pcache_desc) has another radix-tree which is keyed by

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#268: FILE: mm/filemap.c:1345:
+			page = find_lock_page_write(mapping, vmf->pgoff, vmf->flags & FAULT_FLAG_WRITE);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: mm/internal.h:42:
+extern int reclaim_replicated_page(struct address_space *mapping,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: mm/internal.h:43:
+extern int reclaim_replicated_page(struct address_space *mapping,
+		struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#300: FILE: mm/internal.h:44:
+extern struct page *get_unreplicated_page(struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: mm/internal.h:45:
+extern struct page *get_unreplicated_page(struct address_space *mapping,
+				unsigned long offset, struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#302: FILE: mm/internal.h:46:
+extern void get_unreplicated_pages(struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: mm/internal.h:47:
+extern void get_unreplicated_pages(struct address_space *mapping,
+				struct page **pages, int nr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: mm/internal.h:48:
+extern struct page *find_get_page_readonly(struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: mm/internal.h:49:
+extern struct page *find_get_page_readonly(struct address_space *mapping,
+						unsigned long offset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: mm/internal.h:50:
+extern struct page *find_lock_page_readonly(struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: mm/internal.h:51:
+extern struct page *find_lock_page_readonly(struct address_space *mapping,
+						unsigned long offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: mm/internal.h:56:
+static inline int reclaim_replicated_page(struct address_space *mapping,
+		struct page *page)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#314: FILE: mm/internal.h:58:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: mm/internal.h:63:
+static inline struct page *get_unreplicated_page(struct address_space *mapping,
+				unsigned long offset, struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: mm/internal.h:72:
+static inline void get_unreplicated_pages(struct address_space *mapping,
+				struct page **pages, int nr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#331: FILE: mm/internal.h:75:
+	int i;
+	for (i = 0; i < nr; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: mm/internal.h:81:
+static inline struct page *find_get_page_readonly(struct address_space *mapping,
+						unsigned long offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: mm/internal.h:87:
+static inline struct page *find_lock_page_readonly(struct address_space *mapping,
+						unsigned long offset)

CHECK:BRACES: braces {} should be used on all arms of this statement
#373: FILE: mm/vmscan.c:413:
+	if (PageReplicated(page)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#376: FILE: mm/vmscan.c:416:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#390: FILE: include/linux/mm.h:1051:
+extern void replication_init(void);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#461: FILE: mm/Kconfig:158:
+config REPLICATION
+	bool "Pagecache replication"
+	def_bool n
+	depends on NUMA
+	help
+	  Enables NUMA pagecache page replication
+
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#487: FILE: mm/replication.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#488: FILE: mm/replication.c:2:
+ *	linux/mm/replication.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: mm/replication.c:28:
+	pcache_desc_cachep = kmem_cache_create("pcache_desc",
+			sizeof(struct pcache_desc), 0, SLAB_PANIC, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#552: FILE: mm/replication.c:66:
+		BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#554: FILE: mm/replication.c:68:
+			BUG_ON(PageDirty(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#555: FILE: mm/replication.c:69:
+			BUG_ON(!PageUptodate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#556: FILE: mm/replication.c:70:
+			BUG_ON(!PageReplicated(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#557: FILE: mm/replication.c:71:
+			BUG_ON(PagePrivate(page));

WARNING:LINE_SPACING: Missing a blank line after declarations
#571: FILE: mm/replication.c:85:
+		void *ptr;
+		BUG_ON(radix_tree_gang_lookup(&pcd->page_tree, &ptr, 0, 1) != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#571: FILE: mm/replication.c:85:
+		BUG_ON(radix_tree_gang_lookup(&pcd->page_tree, &ptr, 0, 1) != 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#592: FILE: mm/replication.c:106:
+		struct pcache_desc *pcd;
+		pcd = (struct pcache_desc *)((unsigned long)ptr & ~PCACHE_DESC_BIT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#593: FILE: mm/replication.c:107:
+		BUG_ON(!PageReplicated(pcd->master));

WARNING:LINE_SPACING: Missing a blank line after declarations
#596: FILE: mm/replication.c:110:
+		struct page *page = ptr;
+		BUG_ON(PageReplicated(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#596: FILE: mm/replication.c:110:
+		BUG_ON(PageReplicated(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#603: FILE: mm/replication.c:117:
+	BUG_ON(!__is_pcache_desc(ptr));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#609: FILE: mm/replication.c:123:
+	BUG_ON(__is_pcache_desc(pcd));

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#617: FILE: mm/replication.c:131:
+static int should_replicate_pcache(struct page *page, struct address_space *mapping, unsigned long offset, int nid)

WARNING:MEMORY_BARRIER: memory barrier without comment
#629: FILE: mm/replication.c:143:
+	smp_rmb();

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#650: FILE: mm/replication.c:164:
+static int try_to_replicate_pcache(struct page *page, struct address_space *mapping, unsigned long offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: mm/replication.c:195:
+	if (unlikely(!should_replicate_pcache(page, mapping, offset,
+							numa_node_id())))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#690: FILE: mm/replication.c:204:
+	BUG_ON(!pslot);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#691: FILE: mm/replication.c:205:
+	BUG_ON(PageReplicated(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#692: FILE: mm/replication.c:206:
+	BUG_ON(page != radix_tree_deref_slot(pslot));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#693: FILE: mm/replication.c:207:
+	BUG_ON(is_pcache_desc(radix_tree_deref_slot(pslot)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#720: FILE: mm/replication.c:234:
+	BUG_ON(PageDirty(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#721: FILE: mm/replication.c:235:
+	BUG_ON(!PageUptodate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#722: FILE: mm/replication.c:236:
+	BUG_ON(!PageReplicated(page));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#738: FILE: mm/replication.c:252:
+		unmap_mapping_range(mapping, (loff_t)offset<<PAGE_CACHE_SHIFT,
 		                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#739: FILE: mm/replication.c:253:
+		unmap_mapping_range(mapping, (loff_t)offset<<PAGE_CACHE_SHIFT,
+					PAGE_CACHE_SIZE, 0);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#777: FILE: mm/replication.c:291:
+static int insert_replicated_page(struct page *page, struct address_space *mapping, unsigned long offset, int nid)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#782: FILE: mm/replication.c:296:
+	BUG_ON(PageReplicated(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#783: FILE: mm/replication.c:297:
+	BUG_ON(!PageUptodate(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#827: FILE: mm/replication.c:341:
+static void __remove_replicated_page(struct pcache_desc *pcd, struct page *page,
+			struct address_space *mapping, unsigned long offset)

WARNING:LINE_SPACING: Missing a blank line after declarations
#830: FILE: mm/replication.c:344:
+	int nid = page_to_nid(page);
+	BUG_ON(page == pcd->master);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#830: FILE: mm/replication.c:344:
+	BUG_ON(page == pcd->master);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#831: FILE: mm/replication.c:345:
+	BUG_ON(!node_isset(nid, pcd->nodes_present));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#832: FILE: mm/replication.c:346:
+	BUG_ON(radix_tree_delete(&pcd->page_tree, nid) != page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#834: FILE: mm/replication.c:348:
+	BUG_ON(!PageReplicated(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#853: FILE: mm/replication.c:367:
+	BUG_ON(PagePrivate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#854: FILE: mm/replication.c:368:
+	BUG_ON(!PageReplicated(page));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#861: FILE: mm/replication.c:375:
+			return 1;
+		} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#870: FILE: mm/replication.c:384:
+			BUG_ON(new_nid == nid);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#872: FILE: mm/replication.c:386:
+			BUG_ON(!new_master);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#873: FILE: mm/replication.c:387:
+			BUG_ON(new_master == page);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#883: FILE: mm/replication.c:397:
+			/* now fall through and remove the old master */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: mm/replication.c:411:
+static struct page *try_to_create_replica(struct address_space *mapping,
+			unsigned long offset, struct page *page, int nid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#927: FILE: mm/replication.c:441:
+struct page *find_get_page_readonly(struct address_space *mapping,
+						unsigned long offset)

WARNING:LINE_SPACING: Missing a blank line after declarations
#941: FILE: mm/replication.c:455:
+		struct pcache_desc *pcd;
+		pcd = ptr_to_pcache_desc(page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#950: FILE: mm/replication.c:464:
+			BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#964: FILE: mm/replication.c:478:
+		BUG_ON(!page);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#967: FILE: mm/replication.c:481:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#986: FILE: mm/replication.c:500:
+struct page *find_lock_page_readonly(struct address_space *mapping,
+						unsigned long offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: mm/replication.c:523:
+struct page *get_unreplicated_page(struct address_space *mapping,
+				unsigned long offset, struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1034: FILE: mm/replication.c:548:
+void get_unreplicated_pages(struct address_space *mapping, struct page **pages,
+					int nr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1042: FILE: mm/replication.c:556:
+	BUG_ON(nr > PAGEVEC_SIZE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1050: FILE: mm/replication.c:564:
+			struct pcache_desc *pcd;
+			pcd = ptr_to_pcache_desc(page);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#1135: FILE: mm/memory.c:1691:
+			if (vma->vm_ops && vma->vm_ops->page_mkwrite)
[...]
 			if (vma->vm_ops->page_mkwrite(vma, old_page) < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1148: FILE: mm/memory.c:1711:
+^I ^I * This extra ref also holds off replication after the mapcount$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1148: FILE: mm/memory.c:1711:
+^I ^I * This extra ref also holds off replication after the mapcount$

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1201: FILE: include/linux/page-flags.h:149:
+#define SetPageDirty(page)	do { BUG_ON(PageReplicated(page)); set_bit(PG_dirty, &(page)->flags); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1201: FILE: include/linux/page-flags.h:149:
+#define SetPageDirty(page)	do { BUG_ON(PageReplicated(page)); set_bit(PG_dirty, &(page)->flags); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1201: FILE: include/linux/page-flags.h:149:
+#define SetPageDirty(page)	do { BUG_ON(PageReplicated(page)); set_bit(PG_dirty, &(page)->flags); } while (0)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1202: FILE: include/linux/page-flags.h:150:
+#define TestSetPageDirty(page)	({ BUG_ON(PageReplicated(page)); test_and_set_bit(PG_dirty, &(page)->flags); })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1202: FILE: include/linux/page-flags.h:150:
+#define TestSetPageDirty(page)	({ BUG_ON(PageReplicated(page)); test_and_set_bit(PG_dirty, &(page)->flags); })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1202: FILE: include/linux/page-flags.h:150:
+#define TestSetPageDirty(page)	({ BUG_ON(PageReplicated(page)); test_and_set_bit(PG_dirty, &(page)->flags); })

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#1214: FILE: include/linux/page-flags.h:199:
+#define TestSetPageWriteback(page) ({ BUG_ON(PageReplicated(page)); test_and_set_bit(PG_writeback, &(page)->flags); })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1214: FILE: include/linux/page-flags.h:199:
+#define TestSetPageWriteback(page) ({ BUG_ON(PageReplicated(page)); test_and_set_bit(PG_writeback, &(page)->flags); })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1214: FILE: include/linux/page-flags.h:199:
+#define TestSetPageWriteback(page) ({ BUG_ON(PageReplicated(page)); test_and_set_bit(PG_writeback, &(page)->flags); })

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#1224: FILE: include/linux/page-flags.h:209:
+#define __SetPageReplicated(page) do { BUG_ON(PageDirty(page) || PageWriteback(page)); __set_bit(PG_replicated, &(page)->flags); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1224: FILE: include/linux/page-flags.h:209:
+#define __SetPageReplicated(page) do { BUG_ON(PageDirty(page) || PageWriteback(page)); __set_bit(PG_replicated, &(page)->flags); } while (0)

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageReplicated>
#1224: FILE: include/linux/page-flags.h:209:
+#define __SetPageReplicated(page) do { BUG_ON(PageDirty(page) || PageWriteback(page)); __set_bit(PG_replicated, &(page)->flags); } while (0)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1224: FILE: include/linux/page-flags.h:209:
+#define __SetPageReplicated(page) do { BUG_ON(PageDirty(page) || PageWriteback(page)); __set_bit(PG_replicated, &(page)->flags); } while (0)

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#1225: FILE: include/linux/page-flags.h:210:
+#define SetPageReplicated(page)	do { BUG_ON(PageDirty(page) || PageWriteback(page)); set_bit(PG_replicated, &(page)->flags); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1225: FILE: include/linux/page-flags.h:210:
+#define SetPageReplicated(page)	do { BUG_ON(PageDirty(page) || PageWriteback(page)); set_bit(PG_replicated, &(page)->flags); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1225: FILE: include/linux/page-flags.h:210:
+#define SetPageReplicated(page)	do { BUG_ON(PageDirty(page) || PageWriteback(page)); set_bit(PG_replicated, &(page)->flags); } while (0)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1244: FILE: mm/page_alloc.c:219:
+			1 << PG_replicated );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1264: FILE: mm/page_alloc.c:606:
+			1 << PG_replicated ))))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000399845.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 63 warnings, 35 checks, 1131 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000399845.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
