WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: include/linux/pagecache_acct.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#69: FILE: include/linux/pagecache_acct.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#70: FILE: include/linux/pagecache_acct.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/pagecache_acct.h:30:
+extern void pagecache_acct_init_page_ptr(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: include/linux/pagecache_acct.h:31:
+extern void pagecache_acct_charge(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/pagecache_acct.h:32:
+extern void pagecache_acct_uncharge(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/linux/pagecache_acct.h:33:
+extern int pagecache_acct_page_overlimit(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/pagecache_acct.h:34:
+extern int pagecache_acct_mapping_overlimit(struct address_space *mapping);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/linux/pagecache_acct.h:35:
+extern int pagecache_acct_cont_overlimit(struct container *cont);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/pagecache_acct.h:36:
+extern int pagecache_acct_shrink_used(unsigned long nr_pages);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#95: FILE: include/linux/pagecache_acct.h:41:
+static inline int pagecache_acct_page_overlimit(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#97: FILE: include/linux/pagecache_acct.h:43:
+static inline int pagecache_acct_mapping_overlimit(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#99: FILE: include/linux/pagecache_acct.h:45:
+static inline int pagecache_acct_cont_overlimit(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#101: FILE: include/linux/pagecache_acct.h:47:
+static inline int pagecache_acct_shrink_used(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: include/linux/pagecache_acct.h:53:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#114: FILE: init/Kconfig:316:
+config CONTAINER_PAGECACHE_ACCT
+	bool "Simple PageCache accounting & control container subsystem"
+	select CONTAINERS
+	help
+	  Provides a simple Resource Controller for monitoring the
+	  total pagecache memory consumed by the tasks in a container
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#134: FILE: mm/pagecache_acct.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#148: FILE: mm/pagecache_acct.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#149: FILE: mm/pagecache_acct.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#173: FILE: mm/pagecache_acct.c:40:
+#define K_to_pages(x) ((x) >> (PAGE_SHIFT -10))
                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: mm/pagecache_acct.c:44:
+#define MAX_LIMIT_STRING ^I25$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#185: FILE: mm/pagecache_acct.c:52:
+	spinlock_t lock;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#200: FILE: mm/pagecache_acct.c:67:
+	return container_of(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: mm/pagecache_acct.c:73:
+static int pagecache_acct_create(struct container_subsys *ss,
+				struct container *cont)

WARNING:LINE_SPACING: Missing a blank line after declarations
#209: FILE: mm/pagecache_acct.c:76:
+	struct pagecache_acct *pca = kzalloc(sizeof(*pca), GFP_KERNEL);
+	if (!pca)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: mm/pagecache_acct.c:84:
+static void pagecache_acct_destroy(struct container_subsys *ss,
+					struct container *cont)

CHECK:SPACING: No space is necessary after a cast
#226: FILE: mm/pagecache_acct.c:93:
+	count = (unsigned int) atomic_read(&pca->count);

CHECK:SPACING: No space is necessary after a cast
#227: FILE: mm/pagecache_acct.c:94:
+	removed_count = (unsigned int) atomic_read(&pca->removed_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: mm/pagecache_acct.c:108:
+static ssize_t pagecache_usage_read(struct container *cont,
+

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#251: FILE: mm/pagecache_acct.c:118:
+	s += sprintf(s, "%u kB \n", pagecache_get_usage(pca));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: mm/pagecache_acct.c:124:
+static ssize_t pagecache_debug_read(struct container *cont,
+			     struct cftype *cft,

CHECK:SPACING: No space is necessary after a cast
#268: FILE: mm/pagecache_acct.c:135:
+				(unsigned int) atomic_read(&pca->count),

CHECK:SPACING: No space is necessary after a cast
#269: FILE: mm/pagecache_acct.c:136:
+				(unsigned int) atomic_read(&pca->removed_count),

CHECK:SPACING: No space is necessary after a cast
#270: FILE: mm/pagecache_acct.c:137:
+				(unsigned int) atomic_read(&failed_count),

CHECK:SPACING: No space is necessary after a cast
#271: FILE: mm/pagecache_acct.c:138:
+				(unsigned int) atomic_read(&failed_removed_count),

CHECK:SPACING: No space is necessary after a cast
#272: FILE: mm/pagecache_acct.c:139:
+				(unsigned int) atomic_read(&reclaim_count));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: mm/pagecache_acct.c:146:
+static ssize_t pagecache_limit_read(struct container *cont,
+			     struct cftype *cft,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: mm/pagecache_acct.c:162:
+static ssize_t pagecache_limit_write(struct container *cont,
+			     struct cftype *cft,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#305: FILE: mm/pagecache_acct.c:172:
+	if( nbytes > (MAX_LIMIT_STRING-1) || nbytes < 1 )
 	                              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#305: FILE: mm/pagecache_acct.c:172:
+	if( nbytes > (MAX_LIMIT_STRING-1) || nbytes < 1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#305: FILE: mm/pagecache_acct.c:172:
+	if( nbytes > (MAX_LIMIT_STRING-1) || nbytes < 1 )

ERROR:SPACING: space required before the open parenthesis '('
#305: FILE: mm/pagecache_acct.c:172:
+	if( nbytes > (MAX_LIMIT_STRING-1) || nbytes < 1 )

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#312: FILE: mm/pagecache_acct.c:179:
+	limit = simple_strtoul(buffer, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#321: FILE: mm/pagecache_acct.c:188:
+	if ((nr_pages = pagecache_acct_cont_overlimit(cont))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#321: FILE: mm/pagecache_acct.c:188:
+	if ((nr_pages = pagecache_acct_cont_overlimit(cont))) {
+		pagecache_acct_shrink_used(nr_pages);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: mm/pagecache_acct.c:211:
+static int pagecache_acct_populate(struct container_subsys *ss,
+					struct container *cont)

WARNING:LINE_SPACING: Missing a blank line after declarations
#347: FILE: mm/pagecache_acct.c:214:
+	int rc;
+	rc = container_add_file(cont, &cft_usage);

CHECK:SPACING: No space is necessary after a cast
#360: FILE: mm/pagecache_acct.c:227:
+	if ((unsigned long) mapping & PAGE_MAPPING_ANON)

ERROR:SPACING: space required before the open parenthesis '('
#362: FILE: mm/pagecache_acct.c:229:
+	if(!mapping)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#364: FILE: mm/pagecache_acct.c:231:
+	if (!mapping->container) {
+		printk( KERN_DEBUG "Null Container in mapping: %p\n", mapping);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#365: FILE: mm/pagecache_acct.c:232:
+		printk( KERN_DEBUG "Null Container in mapping: %p\n", mapping);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#365: FILE: mm/pagecache_acct.c:232:
+		printk( KERN_DEBUG "Null Container in mapping: %p\n", mapping);

ERROR:SPACING: space prohibited after that open parenthesis '('
#365: FILE: mm/pagecache_acct.c:232:
+		printk( KERN_DEBUG "Null Container in mapping: %p\n", mapping);

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: mm/pagecache_acct.c:245:
+	struct address_space *mapping;
+	mapping = page->mapping;

CHECK:SPACING: No space is necessary after a cast
#379: FILE: mm/pagecache_acct.c:246:
+	if ((unsigned long) mapping & PAGE_MAPPING_ANON)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#381: FILE: mm/pagecache_acct.c:248:
+	BUG_ON(!mapping);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#382: FILE: mm/pagecache_acct.c:249:
+	if (current) {
[...]
+	} else
[...]

ERROR:SPACING: space required before the open parenthesis '('
#383: FILE: mm/pagecache_acct.c:250:
+		if(!mapping->container)

CHECK:BRACES: Unbalanced braces around else statement
#385: FILE: mm/pagecache_acct.c:252:
+	} else

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#395: FILE: mm/pagecache_acct.c:262:
+	if (pagecache_acct_subsys.subsys_id < 0) return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#399: FILE: mm/pagecache_acct.c:266:
+		BUG_ON(!pca);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#403: FILE: mm/pagecache_acct.c:270:
+		printk(KERN_WARNING "pca_charge:page_container null\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#407: FILE: mm/pagecache_acct.c:274:
+	if ((nr_pages = pagecache_acct_page_overlimit(page))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#407: FILE: mm/pagecache_acct.c:274:
+	if ((nr_pages = pagecache_acct_page_overlimit(page))) {
+		pagecache_acct_shrink_used(nr_pages);
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#412: FILE: mm/pagecache_acct.c:279:
+void pagecache_acct_uncharge(struct page * page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#417: FILE: mm/pagecache_acct.c:284:
+	if (pagecache_acct_subsys.subsys_id < 0) return;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#421: FILE: mm/pagecache_acct.c:288:
+		BUG_ON(!pca);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#425: FILE: mm/pagecache_acct.c:292:
+		printk(KERN_WARNING "pca_uncharge:page_container null\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#467: FILE: mm/pagecache_acct.c:334:
+	if( limit && (used > limit) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#467: FILE: mm/pagecache_acct.c:334:
+	if( limit && (used > limit) )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'used > limit'
#467: FILE: mm/pagecache_acct.c:334:
+	if( limit && (used > limit) )

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#467: FILE: mm/pagecache_acct.c:334:
+	if( limit && (used > limit) )

WARNING:LINE_SPACING: Missing a blank line after declarations
#478: FILE: mm/pagecache_acct.c:345:
+	unsigned long ret = 0;
+	atomic_inc(&reclaim_count);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#500: FILE: mm/pagecache_acct.c:367:
+__initcall(init_pagecache_acct);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000460139.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 21 warnings, 35 checks, 438 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000460139.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
