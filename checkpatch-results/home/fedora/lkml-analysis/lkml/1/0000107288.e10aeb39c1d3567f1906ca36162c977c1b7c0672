WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#90: 
v2: Fix anon vma unlock crash (noticed by Johannes Weiner <hannes@cmpxchg.org>)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#173: FILE: mm/memory-failure.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#174: FILE: mm/memory-failure.c:2:
+ * linux/mm/memory-failure.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#246: FILE: mm/memory-failure.c:74:
+	printk(KERN_ERR

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#261: FILE: mm/memory-failure.c:89:
+	 * to SIG_IGN, but hopefully noone will do that?
 	                             ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#265: FILE: mm/memory-failure.c:93:
+		printk(KERN_INFO "MCE: Error sending signal to %s:%d: %d\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#293: FILE: mm/memory-failure.c:121:
+	struct list_head nd;
 	                 ^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tk)...) over kmalloc(sizeof(struct to_kill)...)
#318: FILE: mm/memory-failure.c:146:
+		tk = kmalloc(sizeof(struct to_kill), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#320: FILE: mm/memory-failure.c:148:
+			printk(KERN_ERR

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#320: FILE: mm/memory-failure.c:148:
+		if (!tk) {
+			printk(KERN_ERR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: mm/memory-failure.c:164:
+		pr_debug("MCE: Unable to find user space address %lx in %s\n",
+			page_to_pfn(p), tsk->comm);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#341: FILE: mm/memory-failure.c:169:
+	list_add_tail(&tk->nd, to_kill);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#357: FILE: mm/memory-failure.c:185:
+	list_for_each_entry_safe (tk, next, to_kill, nd) {
 	                                             ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#357: FILE: mm/memory-failure.c:185:
+	list_for_each_entry_safe (tk, next, to_kill, nd) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#366: FILE: mm/memory-failure.c:194:
+				printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#380: FILE: mm/memory-failure.c:208:
+				printk(KERN_ERR

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!av"
#402: FILE: mm/memory-failure.c:230:
+	if (av == NULL)	/* Not actually mapped anymore */

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#405: FILE: mm/memory-failure.c:233:
+	for_each_process (tsk) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#408: FILE: mm/memory-failure.c:236:
+		list_for_each_entry (vma, &av->head, anon_vma_node) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tk)...) over kmalloc(sizeof(struct to_kill)...)
#481: FILE: mm/memory-failure.c:309:
+	tk = kmalloc(sizeof(struct to_kill), GFP_NOIO);

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#501: FILE: mm/memory-failure.c:329:
+static const char *action_name[] = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#531: FILE: mm/memory-failure.c:359:
+	printk(KERN_ERR "MCE %#lx: Unknown page state\n", pfn);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping"
#554: FILE: mm/memory-failure.c:382:
+	if (mapping == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#562: FILE: mm/memory-failure.c:390:
+		printk(KERN_ERR

WARNING:REPEATED_WORD: Possible repeated word: 'page'
#570: FILE: mm/memory-failure.c:398:
+ * Dirty cache page page

WARNING:TYPO_SPELLING: 'inbetween' may be misspelled - perhaps 'between'?
#603: FILE: mm/memory-failure.c:431:
+		 * and the page is dropped inbetween then the error
 		                           ^^^^^^^^^

WARNING:TYPO_SPELLING: 'extremly' may be misspelled - perhaps 'extremely'?
#685: FILE: mm/memory-failure.c:513:
+ * in its live cycle, so all accesses have to be extremly careful.
                                                  ^^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#691: FILE: mm/memory-failure.c:519:
+#define dirty		(1UL << PG_dirty)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#692: FILE: mm/memory-failure.c:520:
+#define sc		(1UL << PG_swapcache)

CHECK:BIT_MACRO: Prefer using the BIT macro
#693: FILE: mm/memory-failure.c:521:
+#define unevict		(1UL << PG_unevictable)

CHECK:BIT_MACRO: Prefer using the BIT macro
#694: FILE: mm/memory-failure.c:522:
+#define mlock		(1UL << PG_mlocked)

CHECK:BIT_MACRO: Prefer using the BIT macro
#695: FILE: mm/memory-failure.c:523:
+#define writeback	(1UL << PG_writeback)

CHECK:BIT_MACRO: Prefer using the BIT macro
#696: FILE: mm/memory-failure.c:524:
+#define lru		(1UL << PG_lru)

CHECK:BIT_MACRO: Prefer using the BIT macro
#697: FILE: mm/memory-failure.c:525:
+#define swapbacked	(1UL << PG_swapbacked)

CHECK:BIT_MACRO: Prefer using the BIT macro
#698: FILE: mm/memory-failure.c:526:
+#define head		(1UL << PG_head)

CHECK:BIT_MACRO: Prefer using the BIT macro
#699: FILE: mm/memory-failure.c:527:
+#define tail		(1UL << PG_tail)

CHECK:BIT_MACRO: Prefer using the BIT macro
#700: FILE: mm/memory-failure.c:528:
+#define compound	(1UL << PG_compound)

CHECK:BIT_MACRO: Prefer using the BIT macro
#701: FILE: mm/memory-failure.c:529:
+#define slab		(1UL << PG_slab)

CHECK:BIT_MACRO: Prefer using the BIT macro
#702: FILE: mm/memory-failure.c:530:
+#define buddy		(1UL << PG_buddy)

CHECK:BIT_MACRO: Prefer using the BIT macro
#703: FILE: mm/memory-failure.c:531:
+#define reserved	(1UL << PG_reserved)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#728: FILE: mm/memory-failure.c:556:
+	{ sc|dirty,	sc|dirty,	"swapcache",	me_swapcache_dirty },
 	    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#728: FILE: mm/memory-failure.c:556:
+	{ sc|dirty,	sc|dirty,	"swapcache",	me_swapcache_dirty },
 	           	  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#729: FILE: mm/memory-failure.c:557:
+	{ sc|dirty,	sc,		"swapcache",	me_swapcache_clean },
 	    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#732: FILE: mm/memory-failure.c:560:
+	{ unevict|dirty, unevict|dirty,	"unevictable LRU", me_pagecache_dirty},
 	         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#732: FILE: mm/memory-failure.c:560:
+	{ unevict|dirty, unevict|dirty,	"unevictable LRU", me_pagecache_dirty},
 	                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#737: FILE: mm/memory-failure.c:565:
+	{ mlock|dirty,	mlock|dirty,	"mlocked LRU",	me_pagecache_dirty },
 	       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#737: FILE: mm/memory-failure.c:565:
+	{ mlock|dirty,	mlock|dirty,	"mlocked LRU",	me_pagecache_dirty },
 	              	     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#741: FILE: mm/memory-failure.c:569:
+	{ lru|dirty,	lru|dirty,	"LRU",		me_pagecache_dirty },
 	     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#741: FILE: mm/memory-failure.c:569:
+	{ lru|dirty,	lru|dirty,	"LRU",		me_pagecache_dirty },
 	            	   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#742: FILE: mm/memory-failure.c:570:
+	{ lru|dirty,	lru,		"clean LRU",	me_pagecache_clean },
 	     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#753: FILE: mm/memory-failure.c:581:
+	printk(KERN_ERR "MCE %#lx: %s%s page recovery: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#754: FILE: mm/memory-failure.c:582:
+	printk(KERN_ERR "MCE %#lx: %s%s page recovery: %s\n",
+		pfn, PageDirty(pfn_to_page(pfn)) ? "dirty " : "",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#766: FILE: mm/memory-failure.c:594:
+		printk(KERN_ERR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#782: FILE: mm/memory-failure.c:610:
+static void hwpoison_user_mappings(struct page *p, unsigned long pfn,
+				  int trapno)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#805: FILE: mm/memory-failure.c:633:
+		printk(KERN_ERR

CHECK:BRACES: braces {} should be used on all arms of this statement
#816: FILE: mm/memory-failure.c:644:
+		if (page_mkclean(p))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#818: FILE: mm/memory-failure.c:646:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#821: FILE: mm/memory-failure.c:649:
+			printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#850: FILE: mm/memory-failure.c:678:
+		printk(KERN_ERR "MCE %#lx: failed to unmap page (mapcount=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: mm/memory-failure.c:679:
+		printk(KERN_ERR "MCE %#lx: failed to unmap page (mapcount=%d)\n",
+				pfn, page_mapcount(p));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#889: FILE: mm/memory-failure.c:717:
+		printk(KERN_ERR

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->mapping"
#935: FILE: mm/memory-failure.c:763:
+	if (PageLRU(p) && !PageSwapCache(p) && p->mapping == NULL) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#965: FILE: include/linux/mm.h:1331:
+extern void memory_failure(unsigned long pfn, int trapno);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:ExV)
#990: FILE: fs/proc/meminfo.c:148:
+		,atomic_long_read(&mce_bad_pages) << (PAGE_SHIFT - 10)
 		^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107288.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 28 warnings, 35 checks, 899 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107288.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
