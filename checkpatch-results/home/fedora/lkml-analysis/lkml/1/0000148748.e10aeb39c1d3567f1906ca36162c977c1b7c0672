WARNING:TYPO_SPELLING: 'architecure' may be misspelled - perhaps 'architecture'?
#16: 
Subject: Re: [PATCH 6/13] score - New architecure port to SunplusCT S+CORE
                                      ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'lastest' may be misspelled - perhaps 'latest'?
#29: 
linux/score lastest patch place at 
            ^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
http://www.sunplusct.com/images/linux-score-patch/linux-score-20090324.patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: arch/score/include/asm/thread_info.h:1:
+#ifndef _ASM_THREAD_INFO_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#51: FILE: arch/score/include/asm/thread_info.h:12:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: arch/score/include/asm/thread_info.h:18:
+ * - if the contents of this structure are changed, the assembly $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#58: FILE: arch/score/include/asm/thread_info.h:18:
constants

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: arch/score/include/asm/thread_info.h:22:
+       struct task_struct      *task;          /* main task structure */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: arch/score/include/asm/thread_info.h:23:
+       struct exec_domain      *exec_domain;   /* execution domain */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: arch/score/include/asm/thread_info.h:24:
+       unsigned long           flags;          /* low level flags */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: arch/score/include/asm/thread_info.h:25:
+       unsigned long           tp_value;       /* thread pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: arch/score/include/asm/thread_info.h:26:
+       __u32                   cpu;            /* current CPU */$

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#67: FILE: arch/score/include/asm/thread_info.h:27:
+       int                     preempt_count;  /* 0 => preemptable, <0 => 
                                                        ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#67: FILE: arch/score/include/asm/thread_info.h:27:
+       int                     preempt_count;  /* 0 => preemptable, <0 => $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: arch/score/include/asm/thread_info.h:27:
+       int                     preempt_count;  /* 0 => preemptable, <0 => $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#69: FILE: arch/score/include/asm/thread_info.h:28:
+       int                     preempt_count;  /* 0 => preemptable, <0 => 
+       mm_segment_t            addr_limit;     /* thread address space:

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: arch/score/include/asm/thread_info.h:29:
+                                                  0-0xBFFFFFFF for $

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: arch/score/include/asm/thread_info.h:29:
+                                                  0-0xBFFFFFFF for $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#70: FILE: arch/score/include/asm/thread_info.h:29:
+       mm_segment_t            addr_limit;     /* thread address space:
+                                                  0-0xBFFFFFFF for 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: arch/score/include/asm/thread_info.h:30:
+                                                  0-0xFFFFFFFF for $

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: arch/score/include/asm/thread_info.h:30:
+                                                  0-0xFFFFFFFF for $

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: arch/score/include/asm/thread_info.h:31:
+                                               */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: arch/score/include/asm/thread_info.h:32:
+       struct restart_block    restart_block;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: arch/score/include/asm/thread_info.h:33:
+       struct pt_regs          *regs;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: arch/score/include/asm/thread_info.h:37:
+ * macros/functions for gaining access to the thread information $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: arch/score/include/asm/thread_info.h:39:
+ * preempt_count needs to be 1 initially, until the scheduler is $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#86: FILE: arch/score/include/asm/thread_info.h:41:
+#define INIT_THREAD_INFO(tsk)                  \
+{                                              \
+       .task           = &tsk,                 \
+       .exec_domain    = &default_exec_domain, \
+       .cpu            = 0,                    \
+       .preempt_count  = 1,                    \
+       .addr_limit     = KERNEL_DS,            \
+       .restart_block  = {                     \
+               .fn = do_no_restart_syscall,    \
+       },                                      \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: arch/score/include/asm/thread_info.h:43:
+       .task           = &tsk,                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: arch/score/include/asm/thread_info.h:44:
+       .exec_domain    = &default_exec_domain, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: arch/score/include/asm/thread_info.h:45:
+       .cpu            = 0,                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: arch/score/include/asm/thread_info.h:46:
+       .preempt_count  = 1,                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: arch/score/include/asm/thread_info.h:47:
+       .addr_limit     = KERNEL_DS,            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: arch/score/include/asm/thread_info.h:48:
+       .restart_block  = {                     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: arch/score/include/asm/thread_info.h:49:
+               .fn = do_no_restart_syscall,    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: arch/score/include/asm/thread_info.h:49:
+               .fn = do_no_restart_syscall,    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: arch/score/include/asm/thread_info.h:50:
+       },                                      \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: arch/score/include/asm/thread_info.h:75:
+ * - these are process state flags that various assembly files may need $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: arch/score/include/asm/thread_info.h:83:
+#define TIF_RESTORE_SIGMASK    9       /* restore signal mask in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: arch/score/include/asm/thread_info.h:84:
+#define TIF_POLLING_NRFLAG     17      /* true if poll_idle() is polling $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#131: FILE: arch/score/include/asm/thread_info.h:84:
+#define TIF_RESTORE_SIGMASK    9       /* restore signal mask in 
+#define TIF_POLLING_NRFLAG     17      /* true if poll_idle() is polling 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#133: FILE: arch/score/include/asm/thread_info.h:85:
+#define TIF_POLLING_NRFLAG     17      /* true if poll_idle() is polling 
+#define TIF_MEMDIE             18

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#154: FILE: arch/score/include/asm/timex.h:1:
+#ifndef _ASM_TIMEX_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#178: FILE: arch/score/include/asm/timex.h:25:
+typedef unsigned int cycles_t;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: arch/score/include/asm/timex.h:29:
+       return 0;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#196: FILE: arch/score/include/asm/tlbflush.h:1:
+#ifndef __ASM_TLBFLUSH_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: arch/score/include/asm/tlbflush.h:15:
+extern void local_flush_tlb_all(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: arch/score/include/asm/tlbflush.h:16:
+extern void local_flush_tlb_mm(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: arch/score/include/asm/tlbflush.h:17:
+extern void local_flush_tlb_range(struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: arch/score/include/asm/tlbflush.h:18:
+extern void local_flush_tlb_range(struct vm_area_struct *vma,
+       unsigned long start, unsigned long end);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: arch/score/include/asm/tlbflush.h:18:
+       unsigned long start, unsigned long end);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: arch/score/include/asm/tlbflush.h:19:
+extern void local_flush_tlb_kernel_range(unsigned long start,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: arch/score/include/asm/tlbflush.h:20:
+extern void local_flush_tlb_kernel_range(unsigned long start,
+       unsigned long end);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: arch/score/include/asm/tlbflush.h:20:
+       unsigned long end);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: arch/score/include/asm/tlbflush.h:21:
+extern void local_flush_tlb_page(struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: arch/score/include/asm/tlbflush.h:22:
+extern void local_flush_tlb_page(struct vm_area_struct *vma,
+       unsigned long page);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: arch/score/include/asm/tlbflush.h:22:
+       unsigned long page);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: arch/score/include/asm/tlbflush.h:23:
+extern void local_flush_tlb_one(unsigned long vaddr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: arch/score/include/asm/tlbflush.h:28:
+       local_flush_tlb_range(vma, vmaddr, end)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: arch/score/include/asm/tlbflush.h:29:
+#define flush_tlb_kernel_range(vmaddr,end) \
                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: arch/score/include/asm/tlbflush.h:30:
+       local_flush_tlb_kernel_range(vmaddr, end)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: arch/score/include/asm/tlbflush.h:38:
+       unsigned long val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: arch/score/include/asm/tlbflush.h:40:
+       __asm__ __volatile__($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#235: FILE: arch/score/include/asm/tlbflush.h:40:
+       __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: arch/score/include/asm/tlbflush.h:41:
+               "mfcr %0, cr11\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: arch/score/include/asm/tlbflush.h:41:
+               "mfcr %0, cr11\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: arch/score/include/asm/tlbflush.h:42:
+               "nop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: arch/score/include/asm/tlbflush.h:42:
+               "nop\nnop\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: arch/score/include/asm/tlbflush.h:43:
+               : "=r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: arch/score/include/asm/tlbflush.h:43:
+               : "=r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: arch/score/include/asm/tlbflush.h:45:
+       return val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: arch/score/include/asm/tlbflush.h:50:
+       __asm__ __volatile__($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#245: FILE: arch/score/include/asm/tlbflush.h:50:
+       __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: arch/score/include/asm/tlbflush.h:51:
+               "mtcr %0, cr11\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: arch/score/include/asm/tlbflush.h:51:
+               "mtcr %0, cr11\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: arch/score/include/asm/tlbflush.h:52:
+               "nop\nnop\nnop\nnop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: arch/score/include/asm/tlbflush.h:52:
+               "nop\nnop\nnop\nnop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: arch/score/include/asm/tlbflush.h:53:
+       : : "r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: arch/score/include/asm/tlbflush.h:58:
+       __asm__ __volatile__($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#253: FILE: arch/score/include/asm/tlbflush.h:58:
+       __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: arch/score/include/asm/tlbflush.h:59:
+               "mtcr %0, cr12\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: arch/score/include/asm/tlbflush.h:59:
+               "mtcr %0, cr12\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: arch/score/include/asm/tlbflush.h:60:
+               "nop\nnop\nnop\nnop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: arch/score/include/asm/tlbflush.h:60:
+               "nop\nnop\nnop\nnop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: arch/score/include/asm/tlbflush.h:61:
+       :: "r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: arch/score/include/asm/tlbflush.h:66:
+       unsigned long val;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#262: FILE: arch/score/include/asm/tlbflush.h:67:
+       unsigned long val;
+       __asm__ __volatile__(

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: arch/score/include/asm/tlbflush.h:67:
+       __asm__ __volatile__($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#262: FILE: arch/score/include/asm/tlbflush.h:67:
+       __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: arch/score/include/asm/tlbflush.h:68:
+               "mfcr %0, cr12\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: arch/score/include/asm/tlbflush.h:68:
+               "mfcr %0, cr12\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: arch/score/include/asm/tlbflush.h:69:
+               "nop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: arch/score/include/asm/tlbflush.h:69:
+               "nop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: arch/score/include/asm/tlbflush.h:70:
+       : "=r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: arch/score/include/asm/tlbflush.h:71:
+       return val;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#268: FILE: arch/score/include/asm/tlbflush.h:73:
+}
+static inline unsigned long get_TLBLOCK(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: arch/score/include/asm/tlbflush.h:75:
+       unsigned long val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: arch/score/include/asm/tlbflush.h:77:
+       __asm__ __volatile__($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#272: FILE: arch/score/include/asm/tlbflush.h:77:
+       __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: arch/score/include/asm/tlbflush.h:78:
+               "mfcr %0, cr7\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: arch/score/include/asm/tlbflush.h:78:
+               "mfcr %0, cr7\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: arch/score/include/asm/tlbflush.h:79:
+               "nop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: arch/score/include/asm/tlbflush.h:79:
+               "nop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: arch/score/include/asm/tlbflush.h:80:
+       : "=r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: arch/score/include/asm/tlbflush.h:81:
+       return val;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#278: FILE: arch/score/include/asm/tlbflush.h:83:
+}
+static inline void set_TLBLOCK(unsigned long val)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: arch/score/include/asm/tlbflush.h:85:
+       __asm__ __volatile__($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#280: FILE: arch/score/include/asm/tlbflush.h:85:
+       __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: arch/score/include/asm/tlbflush.h:86:
+               "mtcr %0, cr7\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: arch/score/include/asm/tlbflush.h:86:
+               "mtcr %0, cr7\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: arch/score/include/asm/tlbflush.h:87:
+               "nop\nnop\nnop\nnop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: arch/score/include/asm/tlbflush.h:87:
+               "nop\nnop\nnop\nnop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: arch/score/include/asm/tlbflush.h:88:
+       : : "r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: arch/score/include/asm/tlbflush.h:93:
+       __asm__ __volatile__($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#288: FILE: arch/score/include/asm/tlbflush.h:93:
+       __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: arch/score/include/asm/tlbflush.h:94:
+               "mtcr %0, cr8\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: arch/score/include/asm/tlbflush.h:94:
+               "mtcr %0, cr8\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: arch/score/include/asm/tlbflush.h:95:
+               "nop\nnop\nnop\nnop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: arch/score/include/asm/tlbflush.h:95:
+               "nop\nnop\nnop\nnop\nnop\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: arch/score/include/asm/tlbflush.h:96:
+               :: "r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: arch/score/include/asm/tlbflush.h:96:
+               :: "r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: arch/score/include/asm/tlbflush.h:101:
+       long val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: arch/score/include/asm/tlbflush.h:103:
+       __asm__ __volatile__($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#298: FILE: arch/score/include/asm/tlbflush.h:103:
+       __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: arch/score/include/asm/tlbflush.h:104:
+               "mfcr %0, cr8\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: arch/score/include/asm/tlbflush.h:104:
+               "mfcr %0, cr8\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: arch/score/include/asm/tlbflush.h:105:
+               "nop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: arch/score/include/asm/tlbflush.h:105:
+               "nop\nnop\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: arch/score/include/asm/tlbflush.h:106:
+               : "=r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: arch/score/include/asm/tlbflush.h:106:
+               : "=r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: arch/score/include/asm/tlbflush.h:108:
+       return val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: arch/score/include/asm/tlbflush.h:113:
+       __asm__ __volatile__($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#308: FILE: arch/score/include/asm/tlbflush.h:113:
+       __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: arch/score/include/asm/tlbflush.h:114:
+               "mtcr %0, cr9\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: arch/score/include/asm/tlbflush.h:114:
+               "mtcr %0, cr9\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#310: FILE: arch/score/include/asm/tlbflush.h:115:
+               "nop\nnop\nnop\nnop\nnop\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: arch/score/include/asm/tlbflush.h:115:
+               "nop\nnop\nnop\nnop\nnop\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: arch/score/include/asm/tlbflush.h:116:
+               :: "r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: arch/score/include/asm/tlbflush.h:116:
+               :: "r" (val));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: arch/score/include/asm/tlbflush.h:122:
+       __asm__ __volatile__("stlb;nop;nop;nop;nop;nop");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: arch/score/include/asm/tlbflush.h:127:
+       __asm__ __volatile__("mftlb;nop;nop;nop;nop;nop");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: arch/score/include/asm/tlbflush.h:132:
+       __asm__ __volatile__("mtptlb;nop;nop;nop;nop;nop");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: arch/score/include/asm/tlbflush.h:137:
+       __asm__ __volatile__("mtrtlb;nop;nop;nop;nop;nop");$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#346: FILE: arch/score/include/asm/tlb.h:1:
+#ifndef __ASM_TLB_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#369: FILE: arch/score/include/asm/topology.h:1:
+#ifndef __ASM_TOPOLOGY_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#383: FILE: arch/score/include/asm/types.h:1:
+#ifndef _ASM_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#389: FILE: arch/score/include/asm/types.h:7:
+typedef unsigned short umode_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#402: FILE: arch/score/include/asm/types.h:20:
+typedef unsigned long phys_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#415: FILE: arch/score/include/asm/uaccess.h:1:
+#ifndef _ASM_UACCESS_H

WARNING:TYPO_SPELLING: 'straighforward' may be misspelled - perhaps 'straightforward'?
#436: FILE: arch/score/include/asm/uaccess.h:22:
+ * Is a address valid? This does a straighforward calculation rather
                                    ^^^^^^^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#448: FILE: arch/score/include/asm/uaccess.h:34:
+#define __ua_size(size) \
+       ((__builtin_constant_p(size) && (signed long) (size) > 0) ? 0 : 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: arch/score/include/asm/uaccess.h:35:
+       ((__builtin_constant_p(size) && (signed long) (size) > 0) ? 0 : $

CHECK:SPACING: No space is necessary after a cast
#449: FILE: arch/score/include/asm/uaccess.h:35:
+       ((__builtin_constant_p(size) && (signed long) (size) > 0) ? 0 : 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: arch/score/include/asm/uaccess.h:35:
+       ((__builtin_constant_p(size) && (signed long) (size) > 0) ? 0 : $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#474: FILE: arch/score/include/asm/uaccess.h:59:
+#define __access_ok(addr, size, mask)                                  \
+       (((signed long)((mask) & ((addr) | ((addr) + (size)) | 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#474: FILE: arch/score/include/asm/uaccess.h:59:
+#define __access_ok(addr, size, mask)                                  \
+       (((signed long)((mask) & ((addr) | ((addr) + (size)) | 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: arch/score/include/asm/uaccess.h:60:
+       (((signed long)((mask) & ((addr) | ((addr) + (size)) | $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: arch/score/include/asm/uaccess.h:60:
+       (((signed long)((mask) & ((addr) | ((addr) + (size)) | $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: arch/score/include/asm/uaccess.h:63:
+       likely(__access_ok((unsigned long)(addr), (size), __access_mask))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: arch/score/include/asm/uaccess.h:76:
+ * @ptr must have pointer-to-simple-variable type, and @x must be $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#498: FILE: arch/score/include/asm/uaccess.h:81:
+#define put_user(x,ptr) __put_user_check((x), (ptr), sizeof(*(ptr)))
                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#498: FILE: arch/score/include/asm/uaccess.h:81:
+#define put_user(x,ptr) __put_user_check((x), (ptr), sizeof(*(ptr)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#517: FILE: arch/score/include/asm/uaccess.h:100:
+#define get_user(x,ptr) __get_user_check((x), (ptr), sizeof(*(ptr)))
                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#517: FILE: arch/score/include/asm/uaccess.h:100:
+#define get_user(x,ptr) __get_user_check((x), (ptr), sizeof(*(ptr)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: arch/score/include/asm/uaccess.h:103:
+ * __put_user: - Write a simple value into user space, with less $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#531: FILE: arch/score/include/asm/uaccess.h:113:
+ * @ptr must have pointer-to-simple-variable type, and @x must be $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#540: FILE: arch/score/include/asm/uaccess.h:121:
+#define __put_user(x,ptr) __put_user_nocheck((x), (ptr), sizeof(*(ptr)))
                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#540: FILE: arch/score/include/asm/uaccess.h:121:
+#define __put_user(x,ptr) __put_user_nocheck((x), (ptr), sizeof(*(ptr)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: arch/score/include/asm/uaccess.h:124:
+ * __get_user: - Get a simple variable from user space, with less $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#563: FILE: arch/score/include/asm/uaccess.h:143:
+#define __get_user(x,ptr) __get_user_nocheck((x), (ptr), sizeof(*(ptr)))
                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#563: FILE: arch/score/include/asm/uaccess.h:143:
+#define __get_user(x,ptr) __get_user_nocheck((x), (ptr), sizeof(*(ptr)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#572: FILE: arch/score/include/asm/uaccess.h:152:
+extern void __get_user_unknown(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#574: FILE: arch/score/include/asm/uaccess.h:154:
+#define __get_user_common(val, size, ptr)                              \
+do {                                                                   \
+       switch (size) {                                                 \
+       case 1: __get_user_asm(val, "lb", ptr); break;                  \
+       case 2: __get_user_asm(val, "lh", ptr); break;                  \
+       case 4: __get_user_asm(val, "lw", ptr); break;                  \
+       case 8:                                                         \
+               if((copy_from_user((void *)&val, ptr, 8)) == 0)         \
+                       __gu_err = 0;                                   \
+               else                                                    \
+                       __gu_err = -EFAULT;                             \
+               break;                                                  \
+       default: __get_user_unknown(); break;                           \
+       }                                                               \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#574: FILE: arch/score/include/asm/uaccess.h:154:
+#define __get_user_common(val, size, ptr)                              \
+do {                                                                   \
+       switch (size) {                                                 \
+       case 1: __get_user_asm(val, "lb", ptr); break;                  \
+       case 2: __get_user_asm(val, "lh", ptr); break;                  \
+       case 4: __get_user_asm(val, "lw", ptr); break;                  \
+       case 8:                                                         \
+               if((copy_from_user((void *)&val, ptr, 8)) == 0)         \
+                       __gu_err = 0;                                   \
+               else                                                    \
+                       __gu_err = -EFAULT;                             \
+               break;                                                  \
+       default: __get_user_unknown(); break;                           \
+       }                                                               \
+} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 7)
#575: FILE: arch/score/include/asm/uaccess.h:155:
+do {                                                                   \
+       switch (size) {                                                 \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: arch/score/include/asm/uaccess.h:156:
+       switch (size) {                                                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: arch/score/include/asm/uaccess.h:157:
+       case 1: __get_user_asm(val, "lb", ptr); break;                  \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#577: FILE: arch/score/include/asm/uaccess.h:157:
+       case 1: __get_user_asm(val, "lb", ptr); break;                  \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: arch/score/include/asm/uaccess.h:158:
+       case 2: __get_user_asm(val, "lh", ptr); break;                  \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#578: FILE: arch/score/include/asm/uaccess.h:158:
+       case 2: __get_user_asm(val, "lh", ptr); break;                  \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: arch/score/include/asm/uaccess.h:159:
+       case 4: __get_user_asm(val, "lw", ptr); break;                  \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#579: FILE: arch/score/include/asm/uaccess.h:159:
+       case 4: __get_user_asm(val, "lw", ptr); break;                  \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: arch/score/include/asm/uaccess.h:160:
+       case 8:                                                         \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#581: FILE: arch/score/include/asm/uaccess.h:161:
+               if((copy_from_user((void *)&val, ptr, 8)) == 0)         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: arch/score/include/asm/uaccess.h:161:
+               if((copy_from_user((void *)&val, ptr, 8)) == 0)         \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#581: FILE: arch/score/include/asm/uaccess.h:161:
+               if((copy_from_user((void *)&val, ptr, 8)) == 0)         \
+                       __gu_err = 0;                                   \

ERROR:SPACING: space required before the open parenthesis '('
#581: FILE: arch/score/include/asm/uaccess.h:161:
+               if((copy_from_user((void *)&val, ptr, 8)) == 0)         \

ERROR:CODE_INDENT: code indent should use tabs where possible
#582: FILE: arch/score/include/asm/uaccess.h:162:
+                       __gu_err = 0;                                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: arch/score/include/asm/uaccess.h:162:
+                       __gu_err = 0;                                   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#583: FILE: arch/score/include/asm/uaccess.h:163:
+               else                                                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: arch/score/include/asm/uaccess.h:163:
+               else                                                    \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#583: FILE: arch/score/include/asm/uaccess.h:163:
+               else                                                    \
+                       __gu_err = -EFAULT;                             \

ERROR:CODE_INDENT: code indent should use tabs where possible
#584: FILE: arch/score/include/asm/uaccess.h:164:
+                       __gu_err = -EFAULT;                             \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: arch/score/include/asm/uaccess.h:164:
+                       __gu_err = -EFAULT;                             \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#585: FILE: arch/score/include/asm/uaccess.h:165:
+               break;                                                  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: arch/score/include/asm/uaccess.h:165:
+               break;                                                  \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#586: FILE: arch/score/include/asm/uaccess.h:166:
+       default: __get_user_unknown(); break;                           \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#587: FILE: arch/score/include/asm/uaccess.h:167:
+       }                                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: arch/score/include/asm/uaccess.h:172:
+       long __gu_err = 0;                                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: arch/score/include/asm/uaccess.h:173:
+       __get_user_common((x), size, ptr);                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: arch/score/include/asm/uaccess.h:174:
+       __gu_err;                                                       \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#597: FILE: arch/score/include/asm/uaccess.h:177:
+#define __get_user_check(x, ptr, size)                                 \
+({                                                                     \
+       long __gu_err = -EFAULT;                                        \
+       const __typeof__(*(ptr)) __user *__gu_ptr = (ptr);              \
+                                                                       \
+       if (likely(access_ok(VERIFY_READ, __gu_ptr, size)))             \
+               __get_user_common((x), size, __gu_ptr);                 \
+                                                                       \
+       __gu_err;                                                       \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#597: FILE: arch/score/include/asm/uaccess.h:177:
+#define __get_user_check(x, ptr, size)                                 \
+({                                                                     \
+       long __gu_err = -EFAULT;                                        \
+       const __typeof__(*(ptr)) __user *__gu_ptr = (ptr);              \
+                                                                       \
+       if (likely(access_ok(VERIFY_READ, __gu_ptr, size)))             \
+               __get_user_common((x), size, __gu_ptr);                 \
+                                                                       \
+       __gu_err;                                                       \
+})

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: arch/score/include/asm/uaccess.h:179:
+       long __gu_err = -EFAULT;                                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: arch/score/include/asm/uaccess.h:180:
+       const __typeof__(*(ptr)) __user *__gu_ptr = (ptr);              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#601: FILE: arch/score/include/asm/uaccess.h:181:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: arch/score/include/asm/uaccess.h:181:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: arch/score/include/asm/uaccess.h:182:
+       if (likely(access_ok(VERIFY_READ, __gu_ptr, size)))             \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#602: FILE: arch/score/include/asm/uaccess.h:182:
+       if (likely(access_ok(VERIFY_READ, __gu_ptr, size)))             \
+               __get_user_common((x), size, __gu_ptr);                 \

ERROR:CODE_INDENT: code indent should use tabs where possible
#603: FILE: arch/score/include/asm/uaccess.h:183:
+               __get_user_common((x), size, __gu_ptr);                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: arch/score/include/asm/uaccess.h:183:
+               __get_user_common((x), size, __gu_ptr);                 \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#604: FILE: arch/score/include/asm/uaccess.h:184:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: arch/score/include/asm/uaccess.h:184:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: arch/score/include/asm/uaccess.h:185:
+       __gu_err;                                                       \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#608: FILE: arch/score/include/asm/uaccess.h:188:
+#define __get_user_asm(val, insn, addr) \
+{                                                                      \
+       long __gu_tmp;                                                  \
+                                                                       \
+       __asm__ __volatile__(                                           \
+               "1:" insn " %1, %3\n"                                   \
+               "2:\n"                                                  \
+               ".section .fixup,\"ax\"\n"                              \
+               "3:li   %0, %4\n"                                       \
+               "j      2b\n"                                           \
+               ".previous\n"                                           \
+               ".section __ex_table,\"a\"\n"                           \
+               ".word  1b, 3b\n"                                       \
+               ".previous\n"                                           \
+               : "=r" (__gu_err), "=r" (__gu_tmp)                      \
+               : "0" (0), "o" (__m(addr)), "i" (-EFAULT));             \
+                                                                       \
+               (val) = (__typeof__(*(addr))) __gu_tmp;                 \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: arch/score/include/asm/uaccess.h:190:
+       long __gu_tmp;                                                  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#611: FILE: arch/score/include/asm/uaccess.h:191:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#611: FILE: arch/score/include/asm/uaccess.h:191:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: arch/score/include/asm/uaccess.h:192:
+       __asm__ __volatile__(                                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#613: FILE: arch/score/include/asm/uaccess.h:193:
+               "1:" insn " %1, %3\n"                                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#613: FILE: arch/score/include/asm/uaccess.h:193:
+               "1:" insn " %1, %3\n"                                   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#614: FILE: arch/score/include/asm/uaccess.h:194:
+               "2:\n"                                                  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: arch/score/include/asm/uaccess.h:194:
+               "2:\n"                                                  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#615: FILE: arch/score/include/asm/uaccess.h:195:
+               ".section .fixup,\"ax\"\n"                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: arch/score/include/asm/uaccess.h:195:
+               ".section .fixup,\"ax\"\n"                              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#616: FILE: arch/score/include/asm/uaccess.h:196:
+               "3:li   %0, %4\n"                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: arch/score/include/asm/uaccess.h:196:
+               "3:li   %0, %4\n"                                       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#617: FILE: arch/score/include/asm/uaccess.h:197:
+               "j      2b\n"                                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: arch/score/include/asm/uaccess.h:197:
+               "j      2b\n"                                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#618: FILE: arch/score/include/asm/uaccess.h:198:
+               ".previous\n"                                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: arch/score/include/asm/uaccess.h:198:
+               ".previous\n"                                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: arch/score/include/asm/uaccess.h:199:
+               ".section __ex_table,\"a\"\n"                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: arch/score/include/asm/uaccess.h:199:
+               ".section __ex_table,\"a\"\n"                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#620: FILE: arch/score/include/asm/uaccess.h:200:
+               ".word  1b, 3b\n"                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: arch/score/include/asm/uaccess.h:200:
+               ".word  1b, 3b\n"                                       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#621: FILE: arch/score/include/asm/uaccess.h:201:
+               ".previous\n"                                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: arch/score/include/asm/uaccess.h:201:
+               ".previous\n"                                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#622: FILE: arch/score/include/asm/uaccess.h:202:
+               : "=r" (__gu_err), "=r" (__gu_tmp)                      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: arch/score/include/asm/uaccess.h:202:
+               : "=r" (__gu_err), "=r" (__gu_tmp)                      \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: arch/score/include/asm/uaccess.h:203:
+               : "0" (0), "o" (__m(addr)), "i" (-EFAULT));             \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: arch/score/include/asm/uaccess.h:203:
+               : "0" (0), "o" (__m(addr)), "i" (-EFAULT));             \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#624: FILE: arch/score/include/asm/uaccess.h:204:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: arch/score/include/asm/uaccess.h:204:
+                                                                       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: arch/score/include/asm/uaccess.h:205:
+               (val) = (__typeof__(*(addr))) __gu_tmp;                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: arch/score/include/asm/uaccess.h:205:
+               (val) = (__typeof__(*(addr))) __gu_tmp;                 \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#632: FILE: arch/score/include/asm/uaccess.h:212:
+#define __put_user_nocheck(val, ptr, size)                             \
+({                                                                     \
+       __typeof__(*(ptr)) __pu_val;                                    \
+       long __pu_err = 0;                                              \
+                                                                       \
+       __pu_val = (val);                                               \
+       switch (size) {                                                 \
+       case 1: __put_user_asm("sb", ptr); break;                       \
+       case 2: __put_user_asm("sh", ptr); break;                       \
+       case 4: __put_user_asm("sw", ptr); break;                       \
+       case 8:                                                         \
+               if((__copy_to_user((void *)ptr, &__pu_val, 8)) == 0)    \
+                       __pu_err = 0;                                   \
+               else                                                    \
+                       __pu_err = -EFAULT;                             \
+               break;                                                  \
+       default: __put_user_unknown(); break;                           \
+       }                                                               \
+       __pu_err;                                                       \
+})

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: arch/score/include/asm/uaccess.h:214:
+       __typeof__(*(ptr)) __pu_val;                                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: arch/score/include/asm/uaccess.h:215:
+       long __pu_err = 0;                                              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: arch/score/include/asm/uaccess.h:216:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: arch/score/include/asm/uaccess.h:216:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: arch/score/include/asm/uaccess.h:217:
+       __pu_val = (val);                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: arch/score/include/asm/uaccess.h:218:
+       switch (size) {                                                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: arch/score/include/asm/uaccess.h:219:
+       case 1: __put_user_asm("sb", ptr); break;                       \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#639: FILE: arch/score/include/asm/uaccess.h:219:
+       case 1: __put_user_asm("sb", ptr); break;                       \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: arch/score/include/asm/uaccess.h:220:
+       case 2: __put_user_asm("sh", ptr); break;                       \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#640: FILE: arch/score/include/asm/uaccess.h:220:
+       case 2: __put_user_asm("sh", ptr); break;                       \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: arch/score/include/asm/uaccess.h:221:
+       case 4: __put_user_asm("sw", ptr); break;                       \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#641: FILE: arch/score/include/asm/uaccess.h:221:
+       case 4: __put_user_asm("sw", ptr); break;                       \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: arch/score/include/asm/uaccess.h:222:
+       case 8:                                                         \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#643: FILE: arch/score/include/asm/uaccess.h:223:
+               if((__copy_to_user((void *)ptr, &__pu_val, 8)) == 0)    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: arch/score/include/asm/uaccess.h:223:
+               if((__copy_to_user((void *)ptr, &__pu_val, 8)) == 0)    \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#643: FILE: arch/score/include/asm/uaccess.h:223:
+               if((__copy_to_user((void *)ptr, &__pu_val, 8)) == 0)    \
+                       __pu_err = 0;                                   \

ERROR:SPACING: space required before the open parenthesis '('
#643: FILE: arch/score/include/asm/uaccess.h:223:
+               if((__copy_to_user((void *)ptr, &__pu_val, 8)) == 0)    \

ERROR:CODE_INDENT: code indent should use tabs where possible
#644: FILE: arch/score/include/asm/uaccess.h:224:
+                       __pu_err = 0;                                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: arch/score/include/asm/uaccess.h:224:
+                       __pu_err = 0;                                   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#645: FILE: arch/score/include/asm/uaccess.h:225:
+               else                                                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: arch/score/include/asm/uaccess.h:225:
+               else                                                    \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#645: FILE: arch/score/include/asm/uaccess.h:225:
+               else                                                    \
+                       __pu_err = -EFAULT;                             \

ERROR:CODE_INDENT: code indent should use tabs where possible
#646: FILE: arch/score/include/asm/uaccess.h:226:
+                       __pu_err = -EFAULT;                             \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: arch/score/include/asm/uaccess.h:226:
+                       __pu_err = -EFAULT;                             \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#647: FILE: arch/score/include/asm/uaccess.h:227:
+               break;                                                  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: arch/score/include/asm/uaccess.h:227:
+               break;                                                  \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#648: FILE: arch/score/include/asm/uaccess.h:228:
+       default: __put_user_unknown(); break;                           \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: arch/score/include/asm/uaccess.h:229:
+       }                                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: arch/score/include/asm/uaccess.h:230:
+       __pu_err;                                                       \$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#653: FILE: arch/score/include/asm/uaccess.h:233:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#654: FILE: arch/score/include/asm/uaccess.h:234:
+#define __put_user_check(val, ptr, size)                               \
+({                                                                     \
+       __typeof__(*(ptr)) __user *__pu_addr = (ptr);                   \
+       __typeof__(*(ptr)) __pu_val = (val);                            \
+       long __pu_err = -EFAULT;                                        \
+                                                                       \
+       if (likely(access_ok(VERIFY_WRITE, __pu_addr, size))) { \
+               switch (size) {                                         \
+               case 1: __put_user_asm("sb", __pu_addr); break;         \
+               case 2: __put_user_asm("sh", __pu_addr); break;         \
+               case 4: __put_user_asm("sw", __pu_addr); break;         \
+               case 8:                                                 \
+                       if ((__copy_to_user((void *)__pu_addr, &__pu_val, 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#654: FILE: arch/score/include/asm/uaccess.h:234:
+#define __put_user_check(val, ptr, size)                               \
+({                                                                     \
+       __typeof__(*(ptr)) __user *__pu_addr = (ptr);                   \
+       __typeof__(*(ptr)) __pu_val = (val);                            \
+       long __pu_err = -EFAULT;                                        \
+                                                                       \
+       if (likely(access_ok(VERIFY_WRITE, __pu_addr, size))) { \
+               switch (size) {                                         \
+               case 1: __put_user_asm("sb", __pu_addr); break;         \
+               case 2: __put_user_asm("sh", __pu_addr); break;         \
+               case 4: __put_user_asm("sw", __pu_addr); break;         \
+               case 8:                                                 \
+                       if ((__copy_to_user((void *)__pu_addr, &__pu_val, 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: arch/score/include/asm/uaccess.h:236:
+       __typeof__(*(ptr)) __user *__pu_addr = (ptr);                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: arch/score/include/asm/uaccess.h:237:
+       __typeof__(*(ptr)) __pu_val = (val);                            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: arch/score/include/asm/uaccess.h:238:
+       long __pu_err = -EFAULT;                                        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#659: FILE: arch/score/include/asm/uaccess.h:239:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: arch/score/include/asm/uaccess.h:239:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: arch/score/include/asm/uaccess.h:240:
+       if (likely(access_ok(VERIFY_WRITE, __pu_addr, size))) { \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#660: FILE: arch/score/include/asm/uaccess.h:240:
+       if (likely(access_ok(VERIFY_WRITE, __pu_addr, size))) { \
+               switch (size) {                                         \

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: arch/score/include/asm/uaccess.h:241:
+               switch (size) {                                         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: arch/score/include/asm/uaccess.h:241:
+               switch (size) {                                         \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: arch/score/include/asm/uaccess.h:242:
+               case 1: __put_user_asm("sb", __pu_addr); break;         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: arch/score/include/asm/uaccess.h:242:
+               case 1: __put_user_asm("sb", __pu_addr); break;         \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#662: FILE: arch/score/include/asm/uaccess.h:242:
+               case 1: __put_user_asm("sb", __pu_addr); break;         \

ERROR:CODE_INDENT: code indent should use tabs where possible
#663: FILE: arch/score/include/asm/uaccess.h:243:
+               case 2: __put_user_asm("sh", __pu_addr); break;         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: arch/score/include/asm/uaccess.h:243:
+               case 2: __put_user_asm("sh", __pu_addr); break;         \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#663: FILE: arch/score/include/asm/uaccess.h:243:
+               case 2: __put_user_asm("sh", __pu_addr); break;         \

ERROR:CODE_INDENT: code indent should use tabs where possible
#664: FILE: arch/score/include/asm/uaccess.h:244:
+               case 4: __put_user_asm("sw", __pu_addr); break;         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: arch/score/include/asm/uaccess.h:244:
+               case 4: __put_user_asm("sw", __pu_addr); break;         \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#664: FILE: arch/score/include/asm/uaccess.h:244:
+               case 4: __put_user_asm("sw", __pu_addr); break;         \

ERROR:CODE_INDENT: code indent should use tabs where possible
#665: FILE: arch/score/include/asm/uaccess.h:245:
+               case 8:                                                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: arch/score/include/asm/uaccess.h:245:
+               case 8:                                                 \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#666: FILE: arch/score/include/asm/uaccess.h:246:
+                       if ((__copy_to_user((void *)__pu_addr, &__pu_val, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#666: FILE: arch/score/include/asm/uaccess.h:246:
+                       if ((__copy_to_user((void *)__pu_addr, &__pu_val, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: arch/score/include/asm/uaccess.h:246:
+                       if ((__copy_to_user((void *)__pu_addr, &__pu_val, $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#666: FILE: arch/score/include/asm/uaccess.h:246:
+                       if ((__copy_to_user((void *)__pu_addr, &__pu_val, 
[...]
+                               __pu_err = 0;                           \

ERROR:CODE_INDENT: code indent should use tabs where possible
#668: FILE: arch/score/include/asm/uaccess.h:247:
+                               __pu_err = 0;                           \$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: arch/score/include/asm/uaccess.h:247:
+                       if ((__copy_to_user((void *)__pu_addr, &__pu_val, 
+                               __pu_err = 0;                           \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: arch/score/include/asm/uaccess.h:247:
+                               __pu_err = 0;                           \$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#668: FILE: arch/score/include/asm/uaccess.h:247:
+                               __pu_err = 0;                           \

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: arch/score/include/asm/uaccess.h:248:
+                       else                                            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: arch/score/include/asm/uaccess.h:248:
+                       else                                            \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#669: FILE: arch/score/include/asm/uaccess.h:248:
+                       else                                            \
+                               __pu_err = -EFAULT;                     \

ERROR:CODE_INDENT: code indent should use tabs where possible
#670: FILE: arch/score/include/asm/uaccess.h:249:
+                               __pu_err = -EFAULT;                     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: arch/score/include/asm/uaccess.h:249:
+                               __pu_err = -EFAULT;                     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#671: FILE: arch/score/include/asm/uaccess.h:250:
+                       break;                                          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: arch/score/include/asm/uaccess.h:250:
+                       break;                                          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#672: FILE: arch/score/include/asm/uaccess.h:251:
+               default: __put_user_unknown(); break;                   \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#672: FILE: arch/score/include/asm/uaccess.h:251:
+               default: __put_user_unknown(); break;                   \

ERROR:CODE_INDENT: code indent should use tabs where possible
#673: FILE: arch/score/include/asm/uaccess.h:252:
+               }                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: arch/score/include/asm/uaccess.h:252:
+               }                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: arch/score/include/asm/uaccess.h:253:
+       }                                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: arch/score/include/asm/uaccess.h:254:
+       __pu_err;                                                       \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#678: FILE: arch/score/include/asm/uaccess.h:257:
+#define __put_user_asm(insn,ptr)                                       \
                            ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#678: FILE: arch/score/include/asm/uaccess.h:257:
+#define __put_user_asm(insn,ptr)                                       \
+       __asm__ __volatile__(                                           \
+               "1:" insn " %2, %3\n"                                   \
+               "2:\n"                                                  \
+               ".section .fixup,\"ax\"\n"                              \
+               "3:li %0, %4\n"                                         \
+               "j 2b\n"                                                \
+               ".previous\n"                                           \
+               ".section __ex_table,\"a\"\n"                           \
+               ".word 1b, 3b\n"                                        \
+               ".previous\n"                                           \
+               : "=r" (__pu_err)                                       \
+               : "0" (0), "r" (__pu_val), "o" (__m(ptr)),              \
+                 "i" (-EFAULT));

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#678: FILE: arch/score/include/asm/uaccess.h:257:
+#define __put_user_asm(insn,ptr)                                       \
+       __asm__ __volatile__(                                           \
+               "1:" insn " %2, %3\n"                                   \
+               "2:\n"                                                  \
+               ".section .fixup,\"ax\"\n"                              \
+               "3:li %0, %4\n"                                         \
+               "j 2b\n"                                                \
+               ".previous\n"                                           \
+               ".section __ex_table,\"a\"\n"                           \
+               ".word 1b, 3b\n"                                        \
+               ".previous\n"                                           \
+               : "=r" (__pu_err)                                       \
+               : "0" (0), "r" (__pu_val), "o" (__m(ptr)),              \
+                 "i" (-EFAULT));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: arch/score/include/asm/uaccess.h:258:
+       __asm__ __volatile__(                                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#680: FILE: arch/score/include/asm/uaccess.h:259:
+               "1:" insn " %2, %3\n"                                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: arch/score/include/asm/uaccess.h:259:
+               "1:" insn " %2, %3\n"                                   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#681: FILE: arch/score/include/asm/uaccess.h:260:
+               "2:\n"                                                  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: arch/score/include/asm/uaccess.h:260:
+               "2:\n"                                                  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#682: FILE: arch/score/include/asm/uaccess.h:261:
+               ".section .fixup,\"ax\"\n"                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#682: FILE: arch/score/include/asm/uaccess.h:261:
+               ".section .fixup,\"ax\"\n"                              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#683: FILE: arch/score/include/asm/uaccess.h:262:
+               "3:li %0, %4\n"                                         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: arch/score/include/asm/uaccess.h:262:
+               "3:li %0, %4\n"                                         \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#684: FILE: arch/score/include/asm/uaccess.h:263:
+               "j 2b\n"                                                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: arch/score/include/asm/uaccess.h:263:
+               "j 2b\n"                                                \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#685: FILE: arch/score/include/asm/uaccess.h:264:
+               ".previous\n"                                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: arch/score/include/asm/uaccess.h:264:
+               ".previous\n"                                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#686: FILE: arch/score/include/asm/uaccess.h:265:
+               ".section __ex_table,\"a\"\n"                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: arch/score/include/asm/uaccess.h:265:
+               ".section __ex_table,\"a\"\n"                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: arch/score/include/asm/uaccess.h:266:
+               ".word 1b, 3b\n"                                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: arch/score/include/asm/uaccess.h:266:
+               ".word 1b, 3b\n"                                        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#688: FILE: arch/score/include/asm/uaccess.h:267:
+               ".previous\n"                                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: arch/score/include/asm/uaccess.h:267:
+               ".previous\n"                                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#689: FILE: arch/score/include/asm/uaccess.h:268:
+               : "=r" (__pu_err)                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#689: FILE: arch/score/include/asm/uaccess.h:268:
+               : "=r" (__pu_err)                                       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#690: FILE: arch/score/include/asm/uaccess.h:269:
+               : "0" (0), "r" (__pu_val), "o" (__m(ptr)),              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: arch/score/include/asm/uaccess.h:269:
+               : "0" (0), "r" (__pu_val), "o" (__m(ptr)),              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#691: FILE: arch/score/include/asm/uaccess.h:270:
+                 "i" (-EFAULT));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#691: FILE: arch/score/include/asm/uaccess.h:270:
+                 "i" (-EFAULT));$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#693: FILE: arch/score/include/asm/uaccess.h:272:
+extern void __put_user_unknown(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#695: FILE: arch/score/include/asm/uaccess.h:274:
+extern int __copy_tofrom_user(void *to, const void *from, unsigned long $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#695: FILE: arch/score/include/asm/uaccess.h:274:
+extern int __copy_tofrom_user(void *to, const void *from, unsigned long 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: arch/score/include/asm/uaccess.h:276:
+static inline unsigned long copy_from_user(void *to, const void *from, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: arch/score/include/asm/uaccess.h:277:
+static inline unsigned long copy_from_user(void *to, const void *from, 
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#701: FILE: arch/score/include/asm/uaccess.h:278:
+       unsigned long over;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#702: FILE: arch/score/include/asm/uaccess.h:279:
+       unsigned long over;
+       if(access_ok(VERIFY_READ, from, len))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#702: FILE: arch/score/include/asm/uaccess.h:279:
+       if(access_ok(VERIFY_READ, from, len))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#702: FILE: arch/score/include/asm/uaccess.h:279:
+       if(access_ok(VERIFY_READ, from, len))
+               return __copy_tofrom_user(to, from, len);

ERROR:SPACING: space required before the open parenthesis '('
#702: FILE: arch/score/include/asm/uaccess.h:279:
+       if(access_ok(VERIFY_READ, from, len))

ERROR:CODE_INDENT: code indent should use tabs where possible
#703: FILE: arch/score/include/asm/uaccess.h:280:
+               return __copy_tofrom_user(to, from, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#703: FILE: arch/score/include/asm/uaccess.h:280:
+               return __copy_tofrom_user(to, from, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#704: FILE: arch/score/include/asm/uaccess.h:281:
+       if ((unsigned long)from < TASK_SIZE) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#704: FILE: arch/score/include/asm/uaccess.h:281:
+       if ((unsigned long)from < TASK_SIZE) {
+               over = (unsigned long)from + len - TASK_SIZE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#705: FILE: arch/score/include/asm/uaccess.h:282:
+               over = (unsigned long)from + len - TASK_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#705: FILE: arch/score/include/asm/uaccess.h:282:
+               over = (unsigned long)from + len - TASK_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#706: FILE: arch/score/include/asm/uaccess.h:283:
+               return __copy_tofrom_user(to, from, len - over) + over;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: arch/score/include/asm/uaccess.h:283:
+               return __copy_tofrom_user(to, from, len - over) + over;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: arch/score/include/asm/uaccess.h:284:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: arch/score/include/asm/uaccess.h:285:
+       return len;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#711: FILE: arch/score/include/asm/uaccess.h:288:
+static inline unsigned long copy_to_user(void *to, const void *from, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: arch/score/include/asm/uaccess.h:289:
+static inline unsigned long copy_to_user(void *to, const void *from, 
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: arch/score/include/asm/uaccess.h:290:
+       unsigned long over;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: arch/score/include/asm/uaccess.h:292:
+       if (access_ok(VERIFY_WRITE, to, len))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#716: FILE: arch/score/include/asm/uaccess.h:292:
+       if (access_ok(VERIFY_WRITE, to, len))
+               return __copy_tofrom_user(to, from, len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#717: FILE: arch/score/include/asm/uaccess.h:293:
+               return __copy_tofrom_user(to, from, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: arch/score/include/asm/uaccess.h:293:
+               return __copy_tofrom_user(to, from, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: arch/score/include/asm/uaccess.h:294:
+       if ((unsigned long)to < TASK_SIZE) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#718: FILE: arch/score/include/asm/uaccess.h:294:
+       if ((unsigned long)to < TASK_SIZE) {
+               over = (unsigned long)to + len - TASK_SIZE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#719: FILE: arch/score/include/asm/uaccess.h:295:
+               over = (unsigned long)to + len - TASK_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: arch/score/include/asm/uaccess.h:295:
+               over = (unsigned long)to + len - TASK_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#720: FILE: arch/score/include/asm/uaccess.h:296:
+               return __copy_tofrom_user(to, from, len - over) + over;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: arch/score/include/asm/uaccess.h:296:
+               return __copy_tofrom_user(to, from, len - over) + over;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: arch/score/include/asm/uaccess.h:297:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: arch/score/include/asm/uaccess.h:298:
+       return len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#726: FILE: arch/score/include/asm/uaccess.h:302:
+               __copy_tofrom_user((to), (from), (len))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: arch/score/include/asm/uaccess.h:302:
+               __copy_tofrom_user((to), (from), (len))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#729: FILE: arch/score/include/asm/uaccess.h:305:
+               __copy_tofrom_user((to), (from), (len))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: arch/score/include/asm/uaccess.h:305:
+               __copy_tofrom_user((to), (from), (len))$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#731: FILE: arch/score/include/asm/uaccess.h:307:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: arch/score/include/asm/uaccess.h:311:
+       return __copy_to_user(to, from, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: arch/score/include/asm/uaccess.h:317:
+       return __copy_from_user(to, from, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: arch/score/include/asm/uaccess.h:325:
+       if (access_ok(VERIFY_READ, from, len) &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#749: FILE: arch/score/include/asm/uaccess.h:325:
+       if (access_ok(VERIFY_READ, from, len) &&
[...]
+               return copy_from_user(to, from, len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#750: FILE: arch/score/include/asm/uaccess.h:326:
+                     access_ok(VERFITY_WRITE, to, len))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: arch/score/include/asm/uaccess.h:326:
+       if (access_ok(VERIFY_READ, from, len) &&
+                     access_ok(VERFITY_WRITE, to, len))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: arch/score/include/asm/uaccess.h:326:
+                     access_ok(VERFITY_WRITE, to, len))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: arch/score/include/asm/uaccess.h:327:
+               return copy_from_user(to, from, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: arch/score/include/asm/uaccess.h:327:
+               return copy_from_user(to, from, len);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: arch/score/include/asm/uaccess.h:331:
+ * __clear_user: - Zero a block of memory in user space, with less $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#766: FILE: arch/score/include/asm/uaccess.h:341:
+extern unsigned long __clear_user(char *src, unsigned long size);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: arch/score/include/asm/uaccess.h:345:
+       if (access_ok(VERIFY_WRITE, src, size))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#770: FILE: arch/score/include/asm/uaccess.h:345:
+       if (access_ok(VERIFY_WRITE, src, size))
+               return __clear_user(src, size);

ERROR:CODE_INDENT: code indent should use tabs where possible
#771: FILE: arch/score/include/asm/uaccess.h:346:
+               return __clear_user(src, size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: arch/score/include/asm/uaccess.h:346:
+               return __clear_user(src, size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: arch/score/include/asm/uaccess.h:347:
+       return -EFAULT;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#775: FILE: arch/score/include/asm/uaccess.h:350:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#777: FILE: arch/score/include/asm/uaccess.h:352:
+ * __strncpy_from_user: - Copy a NUL terminated string from userspace, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#788: FILE: arch/score/include/asm/uaccess.h:362:
+ * On success, returns the length of the string (not including the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: arch/score/include/asm/uaccess.h:368:
+ * If @count is smaller than the length of the string, copies @count $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#799: FILE: arch/score/include/asm/uaccess.h:371:
+extern int __strncpy_from_user(char *dst, const char *src, long len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: arch/score/include/asm/uaccess.h:375:
+       if (access_ok(VERIFY_READ, src, 1))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#803: FILE: arch/score/include/asm/uaccess.h:375:
+       if (access_ok(VERIFY_READ, src, 1))
+               return __strncpy_from_user(dst, src, len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#804: FILE: arch/score/include/asm/uaccess.h:376:
+               return __strncpy_from_user(dst, src, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#804: FILE: arch/score/include/asm/uaccess.h:376:
+               return __strncpy_from_user(dst, src, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: arch/score/include/asm/uaccess.h:377:
+       return -EFAULT;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#808: FILE: arch/score/include/asm/uaccess.h:380:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#809: FILE: arch/score/include/asm/uaccess.h:381:
+extern int __strlen_user(const char *src);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: arch/score/include/asm/uaccess.h:384:
+       return __strlen_user(src);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#815: FILE: arch/score/include/asm/uaccess.h:387:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#816: FILE: arch/score/include/asm/uaccess.h:388:
+extern int __strnlen_user(const char *str, long len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: arch/score/include/asm/uaccess.h:391:
+       if (access_ok(VERIFY_READ, str, len));$

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#819: FILE: arch/score/include/asm/uaccess.h:391:
+       if (access_ok(VERIFY_READ, str, len));
+               return __strnlen_user(str, len);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#819: FILE: arch/score/include/asm/uaccess.h:391:
+       if (access_ok(VERIFY_READ, str, len));

ERROR:CODE_INDENT: code indent should use tabs where possible
#820: FILE: arch/score/include/asm/uaccess.h:392:
+               return __strnlen_user(str, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: arch/score/include/asm/uaccess.h:392:
+               return __strnlen_user(str, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: arch/score/include/asm/uaccess.h:393:
+       return -EFAULT;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#825: FILE: arch/score/include/asm/uaccess.h:397:
+struct exception_table_entry
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#826: FILE: arch/score/include/asm/uaccess.h:398:
+       unsigned long insn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: arch/score/include/asm/uaccess.h:399:
+       unsigned long nextinsn;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#830: FILE: arch/score/include/asm/uaccess.h:402:
+extern int fixup_exception(struct pt_regs *regs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#842: FILE: arch/score/include/asm/ucontext.h:1:
+#ifndef _ASM_UCONTEXT_H

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#846: FILE: arch/score/include/asm/ucontext.h:5:
+       unsigned long   uc_flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#847: FILE: arch/score/include/asm/ucontext.h:6:
+       struct ucontext *uc_link;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: arch/score/include/asm/ucontext.h:7:
+       stack_t         uc_stack;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: arch/score/include/asm/ucontext.h:8:
+       struct sigcontext uc_mcontext;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#850: FILE: arch/score/include/asm/ucontext.h:9:
+       sigset_t        uc_sigmask;     /* mask last for extensibility */$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#862: FILE: arch/score/include/asm/unaligned.h:1:
+#ifndef _ASM_SCORE_UNALIGNED_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148748.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 142 errors, 239 warnings, 53 checks, 779 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148748.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
