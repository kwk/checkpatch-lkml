WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#71: FILE: arch/Kconfig:47:
+config OPTPROBES
+	bool "Kprobes jump optimization support (EXPERIMENTAL)"
+	depends on KPROBES
+	depends on !PREEMPT
+	depends on HAVE_OPTPROBES
+	help
+	  This option will allow kprobes to optimize breakpoint to
+	  a jump for reducing its overhead.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/kprobes.h:274:
+extern int arch_prepared_optinsn(struct arch_optimized_insn *optinsn);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/kprobes.h:275:
+extern int arch_check_optimized_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/kprobes.h:276:
+extern int arch_prepare_optimized_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/kprobes.h:277:
+extern void arch_remove_optimized_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/kprobes.h:278:
+extern int  arch_optimize_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/kprobes.h:279:
+extern void arch_unoptimize_kprobe(struct optimized_kprobe *op);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/kprobes.h:280:
+extern int arch_detour_optimized_kprobe(struct optimized_kprobe *op,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/kprobes.h:282:
+extern kprobe_opcode_t *get_optinsn_slot(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/kprobes.h:283:
+extern void free_optinsn_slot(kprobe_opcode_t *slot, int dirty);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/linux/kprobes.h:284:
+extern int arch_within_optimized_kprobe(struct optimized_kprobe *op,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/linux/kprobes.h:287:
+extern void opt_pre_handler(struct kprobe *p, struct pt_regs *regs);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#163: FILE: kernel/kprobes.c:301:
 }
+#ifdef CONFIG_OPTPROBES

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#171: FILE: kernel/kprobes.c:309:
+};
+/* Get a slot for optimized_kprobe buffer */

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: kernel/kprobes.c:313:
+	kprobe_opcode_t *ret = NULL;
+	mutex_lock(&kprobe_optinsn_mutex);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: kernel/kprobes.c:319:
+void __kprobes free_optinsn_slot(kprobe_opcode_t * slot, int dirty)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#235: FILE: kernel/kprobes.c:399:
+	struct optimized_kprobe *op;
+	if (p->flags & KPROBE_FLAG_OPTIMIZED) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#239: FILE: kernel/kprobes.c:403:
+		return arch_detour_optimized_kprobe(op, regs);
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#239: FILE: kernel/kprobes.c:403:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#248: FILE: kernel/kprobes.c:412:
+	struct optimized_kprobe *op;
+	if (kprobe_aggrprobe(p)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#261: FILE: kernel/kprobes.c:425:
+	struct optimized_kprobe *op;
+	for (i = 0; !p && i < MAX_OPTIMIZED_LENGTH; i++)

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#291: FILE: kernel/kprobes.c:455:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: kernel/kprobes.c:499:
+	struct optimized_kprobe *op;
+	if ((p->flags & KPROBE_FLAG_OPTIMIZED) && kprobe_aggrprobe(p)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#351: FILE: kernel/kprobes.c:515:
+	struct optimized_kprobe *op;
+	op = container_of(p, struct optimized_kprobe, kp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: kernel/kprobes.c:529:
+	struct optimized_kprobe *op;
+	op = container_of(p, struct optimized_kprobe, kp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#373: FILE: kernel/kprobes.c:537:
+	struct optimized_kprobe *op;
+	op = container_of(p, struct optimized_kprobe, kp);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*op)...) over kzalloc(sizeof(struct optimized_kprobe)...)
#383: FILE: kernel/kprobes.c:547:
+	op = kzalloc(sizeof(struct optimized_kprobe), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:RETURN_VOID: void function return statements are not generally useful
#418: FILE: kernel/kprobes.c:582:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: kernel/kprobes.c:1595:
+		seq_printf(pi, "%p  %s  %s+0x%x  %s ",
 			p->addr, kprobe_type, sym, offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#716: FILE: kernel/kprobes.c:1599:
+		seq_printf(pi, "%p  %s  %p ",
+			p->addr, kprobe_type, p->addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: kernel/kprobes.c:1604:
+	seq_printf(pi, "%s%s%s\n",
+		(kprobe_gone(p) ? "[GONE]" : ""),

CHECK:BRACES: braces {} should be used on all arms of this statement
#732: FILE: kernel/kprobes.c:1642:
+		if (kprobe_aggrprobe(p)) {
[...]
+				report_probe(pi, kp, sym, offset, modname, p);
[...]

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110925.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 19 checks, 655 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110925.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
