WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
This is of course very useful to understand what your current smack policy does.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: security/smack/smack.h:257:
+void smack_log(char *subject_label, char *object_label,
+		int request,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: security/smack/smack.h:261:
+int smk_access_log(char *subjectlabel, char *olabel, int access,
+			 struct common_audit_data *a);

WARNING:TYPO_SPELLING: 'overwriten' may be misspelled - perhaps 'overwritten'?
#120: FILE: security/smack/smack_access.c:64:
+ * can be overwriten at run-time by /smack/logging
           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#144: FILE: security/smack/smack_access.c:207:
+	int i = 0;
+	if (access & MAY_READ)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: security/smack/smack_access.c:230:
+	audit_log_format(ab, "SMACK[%s]: action=%s", ad->function,
+			ad->smack_info.result ? "denied" : "granted");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: security/smack/smack_access.c:251:
+void smack_log(char *subject_label, char *object_label, int request,
+		int result, struct common_audit_data *a)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!a->function"
#207: FILE: security/smack/smack_access.c:270:
+	if (a->function == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#234: FILE: security/smack/smack_access.c:297:
+	int rc;
+	rc = smk_curacc(olabel, access);

WARNING:TYPO_SPELLING: 'subjet' may be misspelled - perhaps 'subject'?
#241: FILE: security/smack/smack_access.c:304:
+ * @slabel : subjet label
              ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: security/smack/smack_access.c:312:
+int smk_access_log(char *slabel, char *olabel, int access,
+		struct common_audit_data *a)

WARNING:LINE_SPACING: Missing a blank line after declarations
#252: FILE: security/smack/smack_access.c:315:
+	int rc;
+	rc = smk_access(slabel, olabel, access);

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#286: FILE: security/smack/smack_lsm.c:114:
+	/* we won't log here, because rc can be overriden */
 	                                        ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: security/smack/smack_lsm.c:120:
+	smack_log(current_security(), task_security(ctp),
+			 MAY_READWRITE, rc, &ad);

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#310: FILE: security/smack/smack_lsm.c:143:
+	/* we won't log here, because rc can be overriden */
 	                                        ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: security/smack/smack_lsm.c:149:
+	smack_log(task_security(ptp), current_security(),
+			 MAY_READWRITE, rc, &ad);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: security/smack/smack_lsm.c:610:
+ }$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: security/smack/smack_lsm.c:682:
+		rc = smk_curacc_log(smk_of_inode(dentry->d_inode),
+					 MAY_WRITE, &ad);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: security/smack/smack_lsm.c:770:
+		rc = smk_curacc_log(smk_of_inode(dentry->d_inode),
+					 MAY_WRITE, &ad);

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#655: FILE: security/smack/smack_lsm.c:1035:
+	/* we don't log here as rc can be overriden */
 	                                  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#823: FILE: security/smack/smack_lsm.c:1339:
+	/* we don't log here, we can be overriden */
 	                                ^^^^^^^^^

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#837: FILE: security/smack/smack_lsm.c:1356:
+	/* we log only if we didn't get overriden */
 	                                ^^^^^^^^^

WARNING:TYPO_SPELLING: 'iif' may be misspelled - perhaps 'if'?
#1138: FILE: security/smack/smack_lsm.c:2564:
+	ad.u.net.netif = skb->iif;
 	                      ^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1190: FILE: security/smack/smackfs.c:1197:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1197: FILE: security/smack/smackfs.c:1204:
+static ssize_t smk_read_logging(struct file *filp, char __user *buf,
                                              ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1207: FILE: security/smack/smackfs.c:1214:
+	sprintf(temp, "%d\n",
+		 log_policy.log_denied + log_policy.log_accepted*2);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1207: FILE: security/smack/smackfs.c:1214:
+		 log_policy.log_denied + log_policy.log_accepted*2);
 		                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1222: FILE: security/smack/smackfs.c:1229:
+static ssize_t smk_write_logging(struct file *file, const char __user *buf,
+				size_t count, loff_t *ppos)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1238: FILE: security/smack/smackfs.c:1245:
+	if (sscanf(temp, "%d", &i) != 1)
+		return -EINVAL;

WARNING:SPACING: space prohibited before semicolon
#1243: FILE: security/smack/smackfs.c:1250:
+	log_policy.log_accepted = (i & 2) >> 1 ;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1247: FILE: security/smack/smackfs.c:1254:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1253: FILE: security/smack/smackfs.c:1260:
+};
+/**

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1262: FILE: security/smack/smackfs.c:1291:
+		[SMK_LOGGING]	=
+			{"logging", &smk_logging_ops, S_IRUGO|S_IWUSR},

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1262: FILE: security/smack/smackfs.c:1291:
+			{"logging", &smk_logging_ops, S_IRUGO|S_IWUSR},
 			                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1262: FILE: security/smack/smackfs.c:1291:
+			{"logging", &smk_logging_ops, S_IRUGO|S_IWUSR},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144061.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 18 warnings, 16 checks, 1129 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144061.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
