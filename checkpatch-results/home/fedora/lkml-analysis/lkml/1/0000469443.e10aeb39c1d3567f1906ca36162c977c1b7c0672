WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: arch/i386/lguest/lguest.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#66: FILE: arch/i386/lguest/lguest.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#67: FILE: arch/i386/lguest/lguest.c:19:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#82: FILE: arch/i386/lguest/lguest.c:34:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#92: FILE: arch/i386/lguest/lguest.c:44:
+static __initdata const struct lguest_boot_info *boot = __va(0);

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

WARNING:MEMORY_BARRIER: memory barrier without comment
#110: FILE: arch/i386/lguest/lguest.c:62:
+		wmb();

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#118: FILE: arch/i386/lguest/lguest.c:70:
+#ifdef PARAVIRT_LAZY_NONE ^I/* Not in 2.6.20. */$

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#164: FILE: arch/i386/lguest/lguest.c:116:
+static void fastcall lguest_load_gdt(const struct Xgt_desc_struct *desc)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: arch/i386/lguest/lguest.c:118:
+	BUG_ON((desc->size+1)/8 != GDT_ENTRIES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#166: FILE: arch/i386/lguest/lguest.c:118:
+	BUG_ON((desc->size+1)/8 != GDT_ENTRIES);
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#166: FILE: arch/i386/lguest/lguest.c:118:
+	BUG_ON((desc->size+1)/8 != GDT_ENTRIES);
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#175: FILE: arch/i386/lguest/lguest.c:127:
+	for (i = 0; i < (desc->size+1)/8; i++)
 	                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#175: FILE: arch/i386/lguest/lguest.c:127:
+	for (i = 0; i < (desc->size+1)/8; i++)
 	                              ^

WARNING:TYPO_SPELLING: 'paniced' may be misspelled - perhaps 'panicked'?
#185: FILE: arch/i386/lguest/lguest.c:137:
+static struct notifier_block paniced = {
                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'paniced' may be misspelled - perhaps 'panicked'?
#209: FILE: arch/i386/lguest/lguest.c:161:
+	atomic_notifier_chain_register(&panic_notifier_list, &paniced);
 	                                                      ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: arch/i386/lguest/lguest.c:171:
+static fastcall void lguest_cpuid(unsigned int *eax, unsigned int *ebx,
+				 unsigned int *ecx, unsigned int *edx)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#284: FILE: arch/i386/lguest/lguest.c:236:
+	lazy_hcall(LHCALL_SET_PUD, __pa(pmdp)&PAGE_MASK,
 	                                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#285: FILE: arch/i386/lguest/lguest.c:237:
+		   (__pa(pmdp)&(PAGE_SIZE-1))/4, 0);
 		              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#285: FILE: arch/i386/lguest/lguest.c:237:
+		   (__pa(pmdp)&(PAGE_SIZE-1))/4, 0);
 		                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#285: FILE: arch/i386/lguest/lguest.c:237:
+		   (__pa(pmdp)&(PAGE_SIZE-1))/4, 0);
 		                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#304: FILE: arch/i386/lguest/lguest.c:256:
+/* We move eflags word to lguest_data.irq_enabled to restore interrupt
+   state.  For page faults, gpfs and virtual interrupts, the

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#309: FILE: arch/i386/lguest/lguest.c:261:
+   unconditionally here is OK. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: arch/i386/lguest/lguest.c:263:
+    " pushl^I%eax;"$

WARNING:SPLIT_STRING: quoted string split across lines
#311: FILE: arch/i386/lguest/lguest.c:263:
+asm("lguest_iret:"
+    " pushl	%eax;"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: arch/i386/lguest/lguest.c:264:
+    " movl^I12(%esp), %eax;"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: arch/i386/lguest/lguest.c:265:
+    "lguest_noirq_start:;"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: arch/i386/lguest/lguest.c:266:
+    " movl^I%eax,%ss:lguest_data+"__stringify(LGUEST_DATA_irq_enabled)";"$

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#314: FILE: arch/i386/lguest/lguest.c:266:
+    " movl	%eax,%ss:lguest_data+"__stringify(LGUEST_DATA_irq_enabled)";"

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: arch/i386/lguest/lguest.c:267:
+    " popl^I%eax;"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: arch/i386/lguest/lguest.c:268:
+    " iret;"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: arch/i386/lguest/lguest.c:269:
+    "lguest_noirq_end:");$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#318: FILE: arch/i386/lguest/lguest.c:270:
+extern void fastcall lguest_iret(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#319: FILE: arch/i386/lguest/lguest.c:271:
+extern char lguest_noirq_start[], lguest_noirq_end[];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: arch/i386/lguest/lguest.c:274:
+static void fastcall lguest_load_esp0(struct tss_struct *tss,
+				     struct thread_struct *thread)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#324: FILE: arch/i386/lguest/lguest.c:276:
+	lazy_hcall(LHCALL_SET_STACK, __KERNEL_DS|0x1, thread->esp0,
 	                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#325: FILE: arch/i386/lguest/lguest.c:277:
+		   THREAD_SIZE/PAGE_SIZE);
 		              ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#332: FILE: arch/i386/lguest/lguest.c:284:
+static fastcall void lguest_set_ldt(const void *addr, unsigned entries)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#335: FILE: arch/i386/lguest/lguest.c:287:
+	BUG_ON(entries);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: arch/i386/lguest/lguest.c:365:
+	hcall(LHCALL_TIMER_START,HZ,0,0);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: arch/i386/lguest/lguest.c:365:
+	hcall(LHCALL_TIMER_START,HZ,0,0);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: arch/i386/lguest/lguest.c:365:
+	hcall(LHCALL_TIMER_START,HZ,0,0);
 	                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#422: FILE: arch/i386/lguest/lguest.c:374:
+		int vector = FIRST_EXTERNAL_VECTOR + i;
+		if (i >= NR_IRQS)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#435: FILE: arch/i386/lguest/lguest.c:387:
+	u32 *lp = (u32 *)((char *)dt + entry*8);
 	                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#436: FILE: arch/i386/lguest/lguest.c:388:
+	u32 *lp = (u32 *)((char *)dt + entry*8);
+	lp[0] = entry_low;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#443: FILE: arch/i386/lguest/lguest.c:395:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: arch/i386/lguest/lguest.c:399:
+static fastcall void lguest_write_gdt_entry(void *dt, int entrynum,
+					   u32 low, u32 high)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: arch/i386/lguest/lguest.c:406:
+static fastcall void lguest_write_idt_entry(void *dt, int entrynum,
+					   u32 low, u32 high)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#460: FILE: arch/i386/lguest/lguest.c:412:
+#define LGUEST_IRQ "lguest_data+"__stringify(LGUEST_DATA_irq_enabled)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#462: FILE: arch/i386/lguest/lguest.c:414:
+	extern const char start_##name[], end_##name[];		\

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#482: FILE: arch/i386/lguest/lguest.c:434:
+};
+static unsigned lguest_patch(u8 type, u16 clobber, void *insns, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#482: FILE: arch/i386/lguest/lguest.c:434:
+static unsigned lguest_patch(u8 type, u16 clobber, void *insns, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#482: FILE: arch/i386/lguest/lguest.c:434:
+static unsigned lguest_patch(u8 type, u16 clobber, void *insns, unsigned len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#500: FILE: arch/i386/lguest/lguest.c:452:
+		u32 off = (u32)lguest_iret - ((u32)insns + insn_len);
+		memcpy(insns+1, &off, sizeof(off));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#500: FILE: arch/i386/lguest/lguest.c:452:
+		memcpy(insns+1, &off, sizeof(off));
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#571: FILE: arch/i386/lguest/lguest.c:523:
+	memset(lguest_data.hcall_status,0xFF,sizeof(lguest_data.hcall_status));
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#571: FILE: arch/i386/lguest/lguest.c:523:
+	memset(lguest_data.hcall_status,0xFF,sizeof(lguest_data.hcall_status));
 	                                    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#583: FILE: arch/i386/lguest/lguest.c:535:
+			(unsigned)&boot_pda, sizeof(boot_pda)-1,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#583: FILE: arch/i386/lguest/lguest.c:535:
+			(unsigned)&boot_pda, sizeof(boot_pda)-1,
 			                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <orig_video_isVGA>
#598: FILE: arch/i386/lguest/lguest.c:550:
+	SCREEN_INFO.orig_video_isVGA = VIDEO_TYPE_VLFB;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#612: FILE: arch/i386/lguest/lguest.c:564:
+		INITRD_START = boot->max_pfn*PAGE_SIZE - boot->initrd_size;
 		                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: arch/i386/lguest/lguest.c:574:
+    "^Icmpl $"__stringify(LGUEST_MAGIC_EBP)", %ebp\n"$

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#622: FILE: arch/i386/lguest/lguest.c:574:
+    "	cmpl $"__stringify(LGUEST_MAGIC_EBP)", %ebp\n"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: arch/i386/lguest/lguest.c:575:
+    "^Ijne 1f\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: arch/i386/lguest/lguest.c:576:
+    "^Icmpl $"__stringify(LGUEST_MAGIC_EDI)", %edi\n"$

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#624: FILE: arch/i386/lguest/lguest.c:576:
+    "	cmpl $"__stringify(LGUEST_MAGIC_EDI)", %edi\n"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: arch/i386/lguest/lguest.c:577:
+    "^Ijne 1f\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: arch/i386/lguest/lguest.c:578:
+    "^Icmpl $"__stringify(LGUEST_MAGIC_ESI)", %esi\n"$

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#626: FILE: arch/i386/lguest/lguest.c:578:
+    "	cmpl $"__stringify(LGUEST_MAGIC_ESI)", %esi\n"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: arch/i386/lguest/lguest.c:579:
+    "^Ije lguest_init\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: arch/i386/lguest/lguest.c:580:
+    "1: ret");$

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'void'
#629: FILE: arch/i386/lguest/lguest.c:581:
+extern void asmlinkage lguest_maybe_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#629: FILE: arch/i386/lguest/lguest.c:581:
+extern void asmlinkage lguest_maybe_init(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#635: FILE: arch/i386/lguest/lguest_bus.c:1:
+#include <linux/init.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#639: FILE: arch/i386/lguest/lguest_bus.c:5:
+#include <asm/io.h>

ERROR:CODE_INDENT: code indent should use tabs where possible
#642: FILE: arch/i386/lguest/lguest_bus.c:8:
+                         struct device_attribute *attr, char *buf)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: arch/i386/lguest/lguest_bus.c:8:
+                         struct device_attribute *attr, char *buf)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#644: FILE: arch/i386/lguest/lguest_bus.c:10:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#644: FILE: arch/i386/lguest/lguest_bus.c:10:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#645: FILE: arch/i386/lguest/lguest_bus.c:11:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
+	return sprintf(buf, "%hu", lguest_devices[dev->index].type);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#647: FILE: arch/i386/lguest/lguest_bus.c:13:
+}
+static ssize_t features_show(struct device *_dev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#648: FILE: arch/i386/lguest/lguest_bus.c:14:
+                             struct device_attribute *attr, char *buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: arch/i386/lguest/lguest_bus.c:14:
+                             struct device_attribute *attr, char *buf)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#650: FILE: arch/i386/lguest/lguest_bus.c:16:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#650: FILE: arch/i386/lguest/lguest_bus.c:16:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#651: FILE: arch/i386/lguest/lguest_bus.c:17:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
+	return sprintf(buf, "%hx", lguest_devices[dev->index].features);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#653: FILE: arch/i386/lguest/lguest_bus.c:19:
+}
+static ssize_t pfn_show(struct device *_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: arch/i386/lguest/lguest_bus.c:20:
+static ssize_t pfn_show(struct device *_dev,
+			 struct device_attribute *attr, char *buf)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#656: FILE: arch/i386/lguest/lguest_bus.c:22:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#656: FILE: arch/i386/lguest/lguest_bus.c:22:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#657: FILE: arch/i386/lguest/lguest_bus.c:23:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
+	return sprintf(buf, "%u", lguest_devices[dev->index].pfn);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#659: FILE: arch/i386/lguest/lguest_bus.c:25:
+}
+static ssize_t status_show(struct device *_dev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: arch/i386/lguest/lguest_bus.c:26:
+                           struct device_attribute *attr, char *buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: arch/i386/lguest/lguest_bus.c:26:
+                           struct device_attribute *attr, char *buf)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#662: FILE: arch/i386/lguest/lguest_bus.c:28:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#662: FILE: arch/i386/lguest/lguest_bus.c:28:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#663: FILE: arch/i386/lguest/lguest_bus.c:29:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
+	return sprintf(buf, "%hx", lguest_devices[dev->index].status);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#665: FILE: arch/i386/lguest/lguest_bus.c:31:
+}
+static ssize_t status_store(struct device *_dev, struct device_attribute *attr,

ERROR:CODE_INDENT: code indent should use tabs where possible
#666: FILE: arch/i386/lguest/lguest_bus.c:32:
+                            const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: arch/i386/lguest/lguest_bus.c:32:
+                            const char *buf, size_t count)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#668: FILE: arch/i386/lguest/lguest_bus.c:34:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#668: FILE: arch/i386/lguest/lguest_bus.c:34:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#669: FILE: arch/i386/lguest/lguest_bus.c:35:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
+	if (sscanf(buf, "%hi", &lguest_devices[dev->index].status) != 1)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#669: FILE: arch/i386/lguest/lguest_bus.c:35:
+	if (sscanf(buf, "%hi", &lguest_devices[dev->index].status) != 1)
+		return -EINVAL;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#673: FILE: arch/i386/lguest/lguest_bus.c:39:
+}
+static struct device_attribute lguest_dev_attrs[] = {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#683: FILE: arch/i386/lguest/lguest_bus.c:49:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#683: FILE: arch/i386/lguest/lguest_bus.c:49:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#684: FILE: arch/i386/lguest/lguest_bus.c:50:
+	struct lguest_driver *drv = container_of(_drv,struct lguest_driver,drv);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#684: FILE: arch/i386/lguest/lguest_bus.c:50:
+	struct lguest_driver *drv = container_of(_drv,struct lguest_driver,drv);
 	                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#709: FILE: arch/i386/lguest/lguest_bus.c:75:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#709: FILE: arch/i386/lguest/lguest_bus.c:75:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#722: FILE: arch/i386/lguest/lguest_bus.c:88:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#722: FILE: arch/i386/lguest/lguest_bus.c:88:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#736: FILE: arch/i386/lguest/lguest_bus.c:102:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#758: FILE: arch/i386/lguest/lguest_bus.c:124:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#758: FILE: arch/i386/lguest/lguest_bus.c:124:
+	struct lguest_device *dev = container_of(_dev,struct lguest_device,dev);
 	                                                                  ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new)...) over kmalloc(sizeof(struct lguest_device)...)
#769: FILE: arch/i386/lguest/lguest_bus.c:135:
+	new = kmalloc(sizeof(struct lguest_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#771: FILE: arch/i386/lguest/lguest_bus.c:137:
+		printk(KERN_EMERG "Cannot allocate lguest device %u\n", index);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#784: FILE: arch/i386/lguest/lguest_bus.c:150:
+		printk(KERN_EMERG "Cannot register lguest device %u\n", index);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#808: FILE: arch/i386/lguest/lguest_bus.c:174:
+	if (bus_register(&lguest_bus.bus) != 0
+	    || device_register(&lguest_bus.dev) != 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469443.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 33 errors, 50 warnings, 36 checks, 767 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469443.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
