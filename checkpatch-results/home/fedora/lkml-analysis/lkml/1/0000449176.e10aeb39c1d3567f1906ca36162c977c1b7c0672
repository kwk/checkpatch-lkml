WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:LINE_SPACING: Missing a blank line after declarations
#51: FILE: fs/proc/task_mmu.c:121:
+		struct mm_struct *mm = vma->vm_mm;
+		up_read(&mm->mmap_sem);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#86: FILE: fs/proc/task_mmu.c:156:
+	priv->tail_vma = tail_vma = get_gate_vma(priv->task);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#90: FILE: fs/proc/task_mmu.c:160:
+	if (last_addr && (vma = find_vma(mm, last_addr))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#115: FILE: fs/proc/task_mmu.c:185:
+	m->version = (tail_vma != NULL)? 0: -1UL;
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#115: FILE: fs/proc/task_mmu.c:185:
+	m->version = (tail_vma != NULL)? 0: -1UL;
 	                                  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tail_vma"
#115: FILE: fs/proc/task_mmu.c:185:
+	m->version = (tail_vma != NULL)? 0: -1UL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma != tail_vma'
#128: FILE: fs/proc/task_mmu.c:198:
+	if (vma && (vma != tail_vma) && vma->vm_next)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#131: FILE: fs/proc/task_mmu.c:201:
+	return (vma != tail_vma)? tail_vma: NULL;
 	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#131: FILE: fs/proc/task_mmu.c:201:
+	return (vma != tail_vma)? tail_vma: NULL;
 	                                  ^

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#145: FILE: fs/proc/task_mmu.c:215:
+			struct seq_operations *ops)

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#149: FILE: fs/proc/task_mmu.c:219:
+	int ret = -ENOMEM;
+	priv = kzalloc(sizeof(*priv), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#155: FILE: fs/proc/task_mmu.c:225:
+			struct seq_file *m = file->private_data;
+			m->private = priv;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#169: FILE: fs/proc/task_mmu.c:298:
+static struct seq_operations proc_pid_maps_op = {

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#189: FILE: fs/proc/task_mmu.c:318:
+struct mem_size_stats
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#240: FILE: fs/proc/task_mmu.c:404:
+static struct seq_operations proc_pid_smaps_op = {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#264: FILE: fs/proc/task_mmu.c:428:
+	spinlock_t *ptl;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449176.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 7 warnings, 4 checks, 402 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449176.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
