CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#77: FILE: block/blk-softirq.c:21:
 };
+static DEFINE_PER_CPU(struct blk_comp, blk_irq_data);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#109: FILE: block/blk-softirq.c:53:
+		smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#117: FILE: block/blk-softirq.c:61:
+		smp_mb();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#123: FILE: block/blk-softirq.c:67:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#145: FILE: block/blk-softirq.c:89:
+		printk("block: irq thread creation failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#166: FILE: block/blk-softirq.c:110:
+			printk("blk: task for %d already there\n", cpu);

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#179: FILE: block/blk-softirq.c:123:
+		if (!bc->task);
+			break;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#179: FILE: block/blk-softirq.c:123:
+		if (!bc->task);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after blk_cpu_notifier
#224: FILE: block/blk-softirq.c:156:
+static struct notifier_block __cpuinitdata blk_cpu_notifier = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:SPACING: No space is necessary after a cast
#301: FILE: block/blk-softirq.c:224:
+		cpu = (void *) (long) i;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#303: FILE: block/blk-softirq.c:226:
+		BUG_ON(err == NOTIFY_BAD);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000325334.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 7 warnings, 3 checks, 246 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000325334.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
