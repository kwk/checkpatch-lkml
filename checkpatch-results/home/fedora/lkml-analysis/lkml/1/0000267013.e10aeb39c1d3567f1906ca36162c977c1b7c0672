ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Renzo Davoli'
#44: 
Signed-off-by: Renzo Davoli

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#113: FILE: arch/um/kernel/process.c:410:
+static int proc_read_sysptmulti(char *buf, char **start, off_t offset, int size,int *eof, void *data)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: arch/um/kernel/process.c:410:
+static int proc_read_sysptmulti(char *buf, char **start, off_t offset, int size,int *eof, void *data)
                                                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#122: FILE: arch/um/kernel/process.c:419:
+static int proc_write_sysptmulti(struct file *file,const char __user *buf, unsigned long count,void *data)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: arch/um/kernel/process.c:419:
+static int proc_write_sysptmulti(struct file *file,const char __user *buf, unsigned long count,void *data)
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: arch/um/kernel/process.c:419:
+static int proc_write_sysptmulti(struct file *file,const char __user *buf, unsigned long count,void *data)
                                                                                               ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#145: FILE: arch/um/kernel/process.c:462:
+		if (ent == NULL)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ent"
#145: FILE: arch/um/kernel/process.c:462:
+		if (ent == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#147: FILE: arch/um/kernel/process.c:464:
+			printk(KERN_WARNING "Failed to register /proc/sysptmulti\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#176: FILE: arch/um/os-Linux/skas/mem.c:76:
+		err=ptrace(PTRACE_MULTI,pid,req,2);
 		   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: arch/um/os-Linux/skas/mem.c:76:
+		err=ptrace(PTRACE_MULTI,pid,req,2);
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: arch/um/os-Linux/skas/mem.c:76:
+		err=ptrace(PTRACE_MULTI,pid,req,2);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: arch/um/os-Linux/skas/mem.c:76:
+		err=ptrace(PTRACE_MULTI,pid,req,2);
 		                               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#177: FILE: arch/um/os-Linux/skas/mem.c:77:
+		if (err<0) {
 		       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: arch/um/os-Linux/skas/mem.c:79:
+			printk(UM_KERN_ERR "do_syscall_stub: failed ptrace_multi "

WARNING:SPLIT_STRING: quoted string split across lines
#180: FILE: arch/um/os-Linux/skas/mem.c:80:
+			printk(UM_KERN_ERR "do_syscall_stub: failed ptrace_multi "
+					"failed, pid = %d, errno = %d\n", pid, -err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#186: FILE: arch/um/os-Linux/skas/mem.c:86:
+			printk(UM_KERN_ERR "Registers - \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#186: FILE: arch/um/os-Linux/skas/mem.c:86:
+			printk(UM_KERN_ERR "Registers - \n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#188: FILE: arch/um/os-Linux/skas/mem.c:88:
+				printk(UM_KERN_ERR "\t%d\t0x%lx\n", i, syscall_regs[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: arch/um/os-Linux/skas/mem.c:90:
+			panic("do_syscall_stub : PTRACE_SETREGS failed, errno = %d\n",
+					-n);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: arch/um/os-Linux/skas/mem.c:96:
+			panic("Failed to continue stub, pid = %d, errno = %d\n", pid,
+					errno);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#248: FILE: arch/um/os-Linux/skas/process.c:379:
+			if (ptrace(PTRACE_MULTI,pid,req,2)) {
 			                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#248: FILE: arch/um/os-Linux/skas/process.c:379:
+			if (ptrace(PTRACE_MULTI,pid,req,2)) {
 			                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#248: FILE: arch/um/os-Linux/skas/process.c:379:
+			if (ptrace(PTRACE_MULTI,pid,req,2)) {
 			                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#249: FILE: arch/um/os-Linux/skas/process.c:380:
+				printk(UM_KERN_ERR "userspace - ptrace multi continue "

WARNING:SPLIT_STRING: quoted string split across lines
#250: FILE: arch/um/os-Linux/skas/process.c:381:
+				printk(UM_KERN_ERR "userspace - ptrace multi continue "
+						"failed, op = %d, errno = %d\n", op, errno);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#266: FILE: arch/um/os-Linux/skas/process.c:397:
+				printk(UM_KERN_ERR "userspace - ptrace continue "

WARNING:SPLIT_STRING: quoted string split across lines
#267: FILE: arch/um/os-Linux/skas/process.c:398:
+				printk(UM_KERN_ERR "userspace - ptrace continue "
+						"failed, op = %d, errno = %d\n", op, errno);

WARNING:SPLIT_STRING: quoted string split across lines
#276: FILE: arch/um/os-Linux/skas/process.c:406:
 			printk(UM_KERN_ERR "userspace - wait failed, "
+					"errno = %d\n", errno);

WARNING:SPLIT_STRING: quoted string split across lines
#284: FILE: arch/um/os-Linux/skas/process.c:413:
 			printk(UM_KERN_ERR "userspace - PTRACE_GETREGS failed, "
+					"errno = %d\n", errno);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#317: FILE: arch/um/os-Linux/skas/process.c:520:
+		err=ptrace(PTRACE_MULTI,pid,req,2);
 		   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#317: FILE: arch/um/os-Linux/skas/process.c:520:
+		err=ptrace(PTRACE_MULTI,pid,req,2);
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#317: FILE: arch/um/os-Linux/skas/process.c:520:
+		err=ptrace(PTRACE_MULTI,pid,req,2);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#317: FILE: arch/um/os-Linux/skas/process.c:520:
+		err=ptrace(PTRACE_MULTI,pid,req,2);
 		                               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#318: FILE: arch/um/os-Linux/skas/process.c:521:
+		if (err<0) {
 		       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#320: FILE: arch/um/os-Linux/skas/process.c:523:
+			printk(UM_KERN_ERR "copy_context_skas0: failed ptrace_multi "

WARNING:SPLIT_STRING: quoted string split across lines
#321: FILE: arch/um/os-Linux/skas/process.c:524:
+			printk(UM_KERN_ERR "copy_context_skas0: failed ptrace_multi "
+					 "failed, pid = %d, errno = %d\n", pid, -err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#328: FILE: arch/um/os-Linux/skas/process.c:531:
+			printk(UM_KERN_ERR "copy_context_skas0 : PTRACE_SETREGS "

WARNING:SPLIT_STRING: quoted string split across lines
#329: FILE: arch/um/os-Linux/skas/process.c:532:
+			printk(UM_KERN_ERR "copy_context_skas0 : PTRACE_SETREGS "
+					"failed, pid = %d, errno = %d\n", pid, -err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#340: FILE: arch/um/os-Linux/skas/process.c:543:
+			printk(UM_KERN_ERR "Failed to continue new process, pid = %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#341: FILE: arch/um/os-Linux/skas/process.c:544:
+			printk(UM_KERN_ERR "Failed to continue new process, pid = %d, "
+					"errno = %d\n", pid, errno);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#354: FILE: arch/um/os-Linux/start_up.c:228:
+static int force_sysptmulti_disabled = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#356: FILE: arch/um/os-Linux/start_up.c:230:
+static int __init nosysptmulti_cmd_param(char *str, int* add)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#359: FILE: arch/um/os-Linux/start_up.c:233:
+		  return 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: arch/um/os-Linux/start_up.c:237:
+__uml_setup("nosysptmulti", nosysptmulti_cmd_param,
+		"nosysptmulti\n"

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#385: FILE: arch/um/os-Linux/start_up.c:370:
+static int __init test_ptrace_sysptvm_and_ptmulti(void) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#403: FILE: arch/um/os-Linux/start_up.c:413:
+	int feature=test_ptrace_sysptvm_and_ptmulti();
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#404: FILE: arch/um/os-Linux/start_up.c:414:
+	int rv=0;
 	      ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#408: FILE: arch/um/os-Linux/start_up.c:417:
+	if ((feature & ~PTRACE_SUPPORTS_PTMULTI)==PTRACE_SYSCALL_SKIPCALL) {
 	                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#417: FILE: arch/um/os-Linux/start_up.c:425:
+		rv=1;
 		  ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#422: FILE: arch/um/os-Linux/start_up.c:429:
+	if (feature & PTRACE_SUPPORTS_PTMULTI) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#423: FILE: arch/um/os-Linux/start_up.c:430:
+		sysptmulti_supported=1;
 		                    ^

CHECK:BRACES: Unbalanced braces around else statement
#430: FILE: arch/um/os-Linux/start_up.c:437:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000267013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 26 errors, 21 warnings, 6 checks, 359 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000267013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
