WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#54: FILE: include/linux/fs.h:453:
+	int (*write_begin)(struct file *, struct address_space *mapping,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#55: FILE: include/linux/fs.h:454:
+	int (*write_begin)(struct file *, struct address_space *mapping,
+				loff_t pos, unsigned len, int intr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#55: FILE: include/linux/fs.h:454:
+				loff_t pos, unsigned len, int intr,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#57: FILE: include/linux/fs.h:456:
+	int (*write_end)(struct file *, struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#58: FILE: include/linux/fs.h:457:
+	int (*write_end)(struct file *, struct address_space *mapping,
+				loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#58: FILE: include/linux/fs.h:457:
+				loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#58: FILE: include/linux/fs.h:457:
+				loff_t pos, unsigned len, unsigned copied,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#61: FILE: include/linux/fs.h:460:
+	int (*perform_write)(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#61: FILE: include/linux/fs.h:460:
+	int (*perform_write)(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iov_iter *' should also have an identifier name
#61: FILE: include/linux/fs.h:460:
+	int (*perform_write)(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#61: FILE: include/linux/fs.h:460:
+	int (*perform_write)(struct file *, struct address_space *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#62: FILE: include/linux/fs.h:461:
+	int (*perform_write)(struct file *, struct address_space *,
+				struct iov_iter *, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#75: FILE: include/linux/fs.h:481:
+int pagecache_write_begin(struct file *, struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: include/linux/fs.h:482:
+int pagecache_write_begin(struct file *, struct address_space *mapping,
+				loff_t pos, unsigned len, int intr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#76: FILE: include/linux/fs.h:482:
+				loff_t pos, unsigned len, int intr,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#79: FILE: include/linux/fs.h:485:
+int pagecache_write_end(struct file *, struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: include/linux/fs.h:486:
+int pagecache_write_end(struct file *, struct address_space *mapping,
+				loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#80: FILE: include/linux/fs.h:486:
+				loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#80: FILE: include/linux/fs.h:486:
+				loff_t pos, unsigned len, unsigned copied,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/fs.h:1928:
+extern int simple_write_begin(struct file *file, struct address_space *mapping,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: include/linux/fs.h:1929:
+extern int simple_write_begin(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, int intr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#91: FILE: include/linux/fs.h:1929:
+			loff_t pos, unsigned len, int intr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#93: FILE: include/linux/fs.h:1931:
+extern int simple_write_end(struct file *file, struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: include/linux/fs.h:1932:
+extern int simple_write_end(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#94: FILE: include/linux/fs.h:1932:
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#94: FILE: include/linux/fs.h:1932:
+			loff_t pos, unsigned len, unsigned copied,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: mm/filemap.c:2053:
+int pagecache_write_begin(struct file *file, struct address_space *mapping,
+				loff_t pos, unsigned len, int intr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#108: FILE: mm/filemap.c:2053:
+				loff_t pos, unsigned len, int intr,

CHECK:BRACES: braces {} should be used on all arms of this statement
#113: FILE: mm/filemap.c:2058:
+	if (aops->write_begin)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#115: FILE: mm/filemap.c:2060:
+		return aops->write_begin(file, mapping, pos, len, intr, pagep, fsdata);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#115: FILE: mm/filemap.c:2060:
+	else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#118: FILE: mm/filemap.c:2063:
+		unsigned offset = pos & (PAGE_CACHE_SIZE - 1);

WARNING:TYPO_SPELLING: 'Uptodate' may be misspelled - perhaps 'Up-to-date'?
#130: FILE: mm/filemap.c:2075:
+			 * for a !Uptodate page (except by double copying in
 			          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#133: FILE: mm/filemap.c:2078:
+			 * Instead, we have to bring it uptodate here.
 			                                ^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#145: FILE: mm/filemap.c:2090:
+		ret = aops->prepare_write(file, page, offset, offset+len);
 		                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: mm/filemap.c:2106:
+int pagecache_write_end(struct file *file, struct address_space *mapping,
+				loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#161: FILE: mm/filemap.c:2106:
+				loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#161: FILE: mm/filemap.c:2106:
+				loff_t pos, unsigned len, unsigned copied,

CHECK:BRACES: braces {} should be used on all arms of this statement
#167: FILE: mm/filemap.c:2112:
+	if (aops->write_begin)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#169: FILE: mm/filemap.c:2114:
+	else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#171: FILE: mm/filemap.c:2116:
+		unsigned offset = pos & (PAGE_CACHE_SIZE - 1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#175: FILE: mm/filemap.c:2120:
+		ret = aops->commit_write(file, page, offset, offset+len);
 		                                                   ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#176: FILE: mm/filemap.c:2121:
+		if (ret < 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#181: FILE: mm/filemap.c:2126:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: mm/filemap.c:2200:
+static ssize_t generic_perform_write_2copy(struct file *file,
+				struct iov_iter *i, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: mm/filemap.c:2269:
+			copied = iov_iter_copy_from_user(src_page, i,
 								offset, bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: mm/filemap.c:2365:
+static ssize_t generic_perform_write(struct file *file,
+				struct iov_iter *i, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: mm/filemap.c:2383:
+		bytes = min_t(unsigned long, PAGE_CACHE_SIZE - offset,
+						iov_iter_count(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: mm/filemap.c:2430:
+			bytes = min_t(unsigned long, PAGE_CACHE_SIZE - offset,
+						iov_iter_single_seg_count(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: mm/filemap.c:2446:
+generic_file_buffered_write(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t pos, loff_t *ppos,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#374: FILE: mm/filemap.c:2452:
+^Istruct inode ^I*inode = mapping->host;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#420: FILE: fs/buffer.c:1855:
+void page_zero_new_buffers(struct page *page, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#420: FILE: fs/buffer.c:1855:
+void page_zero_new_buffers(struct page *page, unsigned from, unsigned to)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#425: FILE: fs/buffer.c:1860:
+	BUG_ON(!PageLocked(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#429: FILE: fs/buffer.c:1864:
+	bh = head = page_buffers(page);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#443: FILE: fs/buffer.c:1872:
+					unsigned start, end;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#450: FILE: fs/buffer.c:1879:
+					memset(kaddr+start, 0, block_end-end);
 					            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#450: FILE: fs/buffer.c:1879:
+					memset(kaddr+start, 0, block_end-end);
 					                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: fs/buffer.c:1931:
+int block_write_begin(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, int intr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#489: FILE: fs/buffer.c:1931:
+			loff_t pos, unsigned len, int intr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#497: FILE: fs/buffer.c:1939:
+	unsigned start, end;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#504: FILE: fs/buffer.c:1946:
+	if (page == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: fs/buffer.c:1977:
+int block_write_end(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#535: FILE: fs/buffer.c:1977:
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#535: FILE: fs/buffer.c:1977:
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#539: FILE: fs/buffer.c:1981:
+	unsigned start;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#544: FILE: fs/buffer.c:1986:
+		page_zero_new_buffers(page, start+copied, start+len);
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#544: FILE: fs/buffer.c:1986:
+		page_zero_new_buffers(page, start+copied, start+len);
 		                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#548: FILE: fs/buffer.c:1990:
+	__block_commit_write(inode, page, start, start+copied);
 	                                              ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#551: FILE: fs/buffer.c:1993:
+	 * The buffers that were written will now be uptodate, so we don't
 	                                             ^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#567: FILE: fs/buffer.c:2009:
+	if (pos+copied > inode->i_size) {
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#568: FILE: fs/buffer.c:2010:
+		i_size_write(inode, pos+copied);
 		                       ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#586: FILE: include/linux/buffer_head.h:205:
+int block_write_begin(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#586: FILE: include/linux/buffer_head.h:205:
+int block_write_begin(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#586: FILE: include/linux/buffer_head.h:205:
+int block_write_begin(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#586: FILE: include/linux/buffer_head.h:205:
+int block_write_begin(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#586: FILE: include/linux/buffer_head.h:205:
+int block_write_begin(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#586: FILE: include/linux/buffer_head.h:205:
+int block_write_begin(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#586: FILE: include/linux/buffer_head.h:205:
+int block_write_begin(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t*' should also have an identifier name
#586: FILE: include/linux/buffer_head.h:205:
+int block_write_begin(struct file *, struct address_space *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: include/linux/buffer_head.h:206:
+int block_write_begin(struct file *, struct address_space *,
+				loff_t, unsigned, int,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#587: FILE: include/linux/buffer_head.h:206:
+				loff_t, unsigned, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#589: FILE: include/linux/buffer_head.h:208:
+int block_write_end(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#589: FILE: include/linux/buffer_head.h:208:
+int block_write_end(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#589: FILE: include/linux/buffer_head.h:208:
+int block_write_end(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#589: FILE: include/linux/buffer_head.h:208:
+int block_write_end(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#589: FILE: include/linux/buffer_head.h:208:
+int block_write_end(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#589: FILE: include/linux/buffer_head.h:208:
+int block_write_end(struct file *, struct address_space *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#589: FILE: include/linux/buffer_head.h:208:
+int block_write_end(struct file *, struct address_space *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: include/linux/buffer_head.h:209:
+int block_write_end(struct file *, struct address_space *,
+				loff_t, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#590: FILE: include/linux/buffer_head.h:209:
+				loff_t, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#590: FILE: include/linux/buffer_head.h:209:
+				loff_t, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#592: FILE: include/linux/buffer_head.h:211:
+void page_zero_new_buffers(struct page *page, unsigned from, unsigned to);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#592: FILE: include/linux/buffer_head.h:211:
+void page_zero_new_buffers(struct page *page, unsigned from, unsigned to);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: fs/libfs.c:346:
+int simple_write_begin(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, int intr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#618: FILE: fs/libfs.c:346:
+			loff_t pos, unsigned len, int intr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#623: FILE: fs/libfs.c:351:
+	unsigned from;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#632: FILE: fs/libfs.c:360:
+	return simple_prepare_write(file, page, from, from+len);
 	                                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: fs/libfs.c:382:
+int simple_write_end(struct file *file, struct address_space *mapping,
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#643: FILE: fs/libfs.c:382:
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#643: FILE: fs/libfs.c:382:
+			loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#646: FILE: fs/libfs.c:385:
+	unsigned from = pos & (PAGE_CACHE_SIZE - 1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#651: FILE: fs/libfs.c:390:
+		void *kaddr = kmap_atomic(page, KM_USER0);
+		memset(kaddr + from + copied, 0, len - copied);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#656: FILE: fs/libfs.c:395:
+	simple_commit_write(file, page, from, from+copied);
 	                                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#689: FILE: drivers/block/loop.c:224:
+		unsigned size, copied;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: drivers/block/loop.c:235:
+		ret = pagecache_write_begin(file, mapping, pos, size, 1,
+							&page, &fsdata);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: drivers/block/loop.c:246:
+		ret = pagecache_write_end(file, mapping, pos, size, copied,
+							page, fsdata);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: fs/namei.c:2697:
+	err = pagecache_write_begin(NULL, mapping, 0, PAGE_CACHE_SIZE, 0,
+							&page, &fsdata);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#805: FILE: fs/namei.c:2703:
+	memset(kaddr+len-1, 0, PAGE_CACHE_SIZE-(len-1));
 	            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#805: FILE: fs/namei.c:2703:
+	memset(kaddr+len-1, 0, PAGE_CACHE_SIZE-(len-1));
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#805: FILE: fs/namei.c:2703:
+	memset(kaddr+len-1, 0, PAGE_CACHE_SIZE-(len-1));
 	                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#805: FILE: fs/namei.c:2703:
+	memset(kaddr+len-1, 0, PAGE_CACHE_SIZE-(len-1));
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#831: FILE: fs/namei.c:2707:
+	err = pagecache_write_end(NULL, mapping, 0, PAGE_CACHE_SIZE, PAGE_CACHE_SIZE,
+							page, fsdata);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#869: FILE: fs/splice.c:578:
+#if 0

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 8)
#876: FILE: fs/splice.c:589:
 		if (buf->ops->steal(pipe, buf))
[...]
+	ret = pagecache_write_begin(file, mapping, sd->pos, sd->len, 0, &page, &fsdata);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000456244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 65 warnings, 50 checks, 959 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000456244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
