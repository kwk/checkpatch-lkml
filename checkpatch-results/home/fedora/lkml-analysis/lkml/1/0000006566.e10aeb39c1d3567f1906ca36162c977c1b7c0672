WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git core-rcu-for-linus

WARNING:TYPO_SPELLING: 'resizeable' may be misspelled - perhaps 'resizable'?
#226: FILE: Documentation/RCU/RTFP.txt:162:
+The problem of resizeable RCU-protected hash tables may now be on a path
                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#479: FILE: Documentation/RCU/checklist.txt:191:
+	If the updater uses synchronize_srcu(), the the corresponding

ERROR:TRAILING_WHITESPACE: trailing whitespace
#785: FILE: Documentation/RCU/stallwarn.txt:31:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_dereference_raw"
#958: FILE: fs/file.c:481:
+	if (rcu_dereference_raw(fdt->fd[fd]) != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1002: FILE: include/linux/cgroup.h:31:
+extern int cgroup_lock_is_held(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#1025: FILE: include/linux/cpumask.h:146:
+#define for_each_cpu_not(cpu, mask)		\
+	for ((cpu) = 0; (cpu) < 1; (cpu)++, (void)mask)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#1040: FILE: include/linux/cpumask.h:214:
+#define for_each_cpu_not(cpu, mask)				\
+	for ((cpu) = -1;					\
+		(cpu) = cpumask_next_zero((cpu), (mask)),	\
+		(cpu) < nr_cpu_ids;)

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#1058: FILE: include/linux/cred.h:283:
+	((const struct cred *)(rcu_dereference_check((task)->real_cred, rcu_read_lock_held() || lockdep_is_held(&tasklist_lock))))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'files' - possible side-effects?
#1071: FILE: include/linux/fdtable.h:60:
+#define rcu_dereference_check_fdtable(files, fdtfd) \
+	(rcu_dereference_check((fdtfd), \
+			       rcu_read_lock_held() || \
+			       lockdep_is_held(&(files)->file_lock) || \
+			       atomic_read(&(files)->count) == 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'files' - possible side-effects?
#1077: FILE: include/linux/fdtable.h:66:
+#define files_fdtable(files) \
+		(rcu_dereference_check_fdtable((files), (files)->fdt))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1100: FILE: include/linux/lockdep.h:538:
+extern void lockdep_rcu_dereference(const char *file, const int line);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1180: FILE: include/linux/rcupdate.h:66:
+extern void rcu_scheduler_starting(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1452: FILE: include/linux/rcutree.h:101:
+extern void rcu_force_quiescent_state(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1453: FILE: include/linux/rcutree.h:102:
+extern void rcu_bh_force_quiescent_state(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1454: FILE: include/linux/rcutree.h:103:
+extern void rcu_sched_force_quiescent_state(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1467: FILE: include/linux/rtnetlink.h:739:
+extern int lockdep_rtnl_is_held(void);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1673: FILE: kernel/cgroup.c:182:
+EXPORT_SYMBOL_GPL(cgroup_lock_is_held);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1698: FILE: kernel/exit.c:175:
+	 * can't be modifying its own credentials. But shut RCU-lockdep up */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1758: FILE: kernel/lockdep.c:3819:
+	printk("\n===================================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1759: FILE: kernel/lockdep.c:3820:
+	printk(  "[ INFO: suspicious rcu_dereference_check() usage. ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1759: FILE: kernel/lockdep.c:3820:
+	printk(  "[ INFO: suspicious rcu_dereference_check() usage. ]\n");

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1760: FILE: kernel/lockdep.c:3821:
+	printk(  "---------------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1760: FILE: kernel/lockdep.c:3821:
+	printk(  "---------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1761: FILE: kernel/lockdep.c:3822:
+	printk("%s:%d invoked rcu_dereference_check() without protection!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1762: FILE: kernel/lockdep.c:3823:
+	printk("%s:%d invoked rcu_dereference_check() without protection!\n",
+			file, line);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1763: FILE: kernel/lockdep.c:3824:
+	printk("\nother info that might help us debug this:\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1765: FILE: kernel/lockdep.c:3826:
+	printk("\nstack backtrace:\n");

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#1804: FILE: kernel/pid.c:370:
+		first = rcu_dereference_check(pid->tasks[type].first, rcu_read_lock_held() || lockdep_is_held(&tasklist_lock));

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1864: FILE: kernel/rcutorture.c:64:
+static int fqs_duration = 0;	/* Duration of bursts (us), 0 to disable. */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1865: FILE: kernel/rcutorture.c:65:
+static int fqs_holdoff = 0;	/* Hold time within burst (us). */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_fqs', this function's name, in a string
#1976: FILE: kernel/rcutorture.c:688:
+	VERBOSE_PRINTK_STRING("rcu_torture_fqs task started");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1979: FILE: kernel/rcutorture.c:691:
+		while (jiffies - fqs_resume_time > LONG_MAX) {
+			schedule_timeout_interruptible(1);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_fqs', this function's name, in a string
#1990: FILE: kernel/rcutorture.c:702:
+	VERBOSE_PRINTK_STRING("rcu_torture_fqs task stopping");

WARNING:SPLIT_STRING: quoted string split across lines
#2037: FILE: kernel/rcutorture.c:1092:
 		"stat_interval=%d verbose=%d test_no_idle_hz=%d "
+		"shuffle_interval=%d stutter=%d irqreader=%d "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#2038: FILE: kernel/rcutorture.c:1093:
+		"shuffle_interval=%d stutter=%d irqreader=%d "
+		"fqs_duration=%d fqs_holdoff=%d fqs_stutter=%d\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cur_ops->fqs"
#2063: FILE: kernel/rcutorture.c:1223:
+	if (cur_ops->fqs == NULL && fqs_duration != 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#2064: FILE: kernel/rcutorture.c:1224:
+		printk(KERN_ALERT "rcu-torture: ->fqs NULL and non-zero "

WARNING:SPLIT_STRING: quoted string split across lines
#2065: FILE: kernel/rcutorture.c:1225:
+		printk(KERN_ALERT "rcu-torture: ->fqs NULL and non-zero "
+				  "fqs_duration, fqs disabled.\n");

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#2768: FILE: kernel/rcutree.c:1802:
+	static char *buf[] = { "rcu_node_level_0",

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2777: FILE: kernel/rcutree.c:1811:
+	BUILD_BUG_ON(MAX_RCU_LVLS > ARRAY_SIZE(buf));  /* Fix buf[] init! */

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#3237: FILE: kernel/rcutree_plugin.h:816:
+ * Because preemptable RCU does not exist, we never have to check for
            ^^^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3569: FILE: lib/Kconfig.debug:502:
+config PROVE_RCU
+	bool "RCU debugging: prove RCU correctness"
+	depends on PROVE_LOCKING
+	default n
+	help
+	 This feature enables lockdep extensions that check for correct
+	 use of RCU APIs.  This is currently under development.  Say Y

Kconfig symbols should have a help text which fully describes
it.

ERROR:SPACING: space required before the open parenthesis '('
#3869: FILE: net/decnet/dn_route.c:1621:
+		for(rt = rcu_dereference_bh(dn_rt_hash_table[h].chain), idx = 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000006566.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 24 warnings, 14 checks, 3386 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000006566.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
