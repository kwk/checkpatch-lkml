WARNING:NEW_TYPEDEFS: do not add new typedefs
#71: FILE: include/linux/cpumask.h:504:
+typedef struct cpumask *cpumask_var_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#77: FILE: include/linux/cpumask.h:510:
+typedef struct cpumask cpumask_var_t[1];

CHECK:BRACES: braces {} should be used on all arms of this statement
#105: FILE: lib/cpumask.c:51:
+	if (likely(slab_is_available()))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#106: FILE: lib/cpumask.c:52:
+		*mask = kmalloc(BITS_TO_LONGS(nr_cpu_ids)*sizeof(long), flags);
 		                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#107: FILE: lib/cpumask.c:53:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#109: FILE: lib/cpumask.c:55:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_cpumask_var', this function's name, in a string
#110: FILE: lib/cpumask.c:56:
+			"=> alloc_cpumask_var: kmalloc not available!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#117: FILE: lib/cpumask.c:63:
+		printk(KERN_ERR "=> alloc_cpumask_var: failed!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_cpumask_var', this function's name, in a string
#117: FILE: lib/cpumask.c:63:
+		printk(KERN_ERR "=> alloc_cpumask_var: failed!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mask"
#121: FILE: lib/cpumask.c:67:
+	return *mask != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000214823.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 4 checks, 76 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000214823.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
