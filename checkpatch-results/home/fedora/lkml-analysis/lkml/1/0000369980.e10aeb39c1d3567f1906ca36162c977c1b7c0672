WARNING:BAD_SIGN_OFF: Duplicate signature
#55: 
Signed-off-by: Jason Wessel <jason.wessel@windriver.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#85: FILE: arch/x86/kernel/kgdb-jmp_32.S:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#86: FILE: arch/x86/kernel/kgdb-jmp_32.S:2:
+ * arch/x86/kernel/kgdb-jmp_32.S

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'PARMS' may be misspelled - perhaps 'PARAMS'?
#107: FILE: arch/x86/kernel/kgdb-jmp_32.S:23:
+#define PARMS		LINKAGE		/* no space for saved regs */
         ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'PARMS' may be misspelled - perhaps 'PARAMS'?
#108: FILE: arch/x86/kernel/kgdb-jmp_32.S:24:
+#define JMPBUF		PARMS
               		^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#162: FILE: arch/x86/kernel/kgdb_32.c:1:
+/*

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#185: FILE: arch/x86/kernel/kgdb_32.c:24:
+ *  Origianl kgdb, compatibility with 2.1.xx kernel by
     ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#210: FILE: arch/x86/kernel/kgdb_32.c:49:
+/* Likewise, the vector number here (since GDB only gets the signal
+   number through the usual means, and that's not very specific).  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#210: FILE: arch/x86/kernel/kgdb_32.c:49:
+   number through the usual means, and that's not very specific).  */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: arch/x86/kernel/kgdb_32.c:116:
+	unsigned enabled;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#278: FILE: arch/x86/kernel/kgdb_32.c:117:
+	unsigned type;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#279: FILE: arch/x86/kernel/kgdb_32.c:118:
+	unsigned len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#280: FILE: arch/x86/kernel/kgdb_32.c:119:
+	unsigned addr;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#291: FILE: arch/x86/kernel/kgdb_32.c:130:
+	asm volatile ("movl %0,%%db7": /* no output */ :"r" (0));
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#291: FILE: arch/x86/kernel/kgdb_32.c:130:
+	asm volatile ("movl %0,%%db7": /* no output */ :"r" (0));
 	                                               ^

CHECK:CAMELCASE: Avoid CamelCase: <newPC>
#315: FILE: arch/x86/kernel/kgdb_32.c:154:
+	int newPC;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#321: FILE: arch/x86/kernel/kgdb_32.c:160:
+		/* try to read optional parameter, pc unchanged if no parm */
 		                                                      ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: arch/x86/kernel/kgdb_32.c:175:
+			atomic_set(&cpu_doing_single_step,
+			raw_smp_processor_id());

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#339: FILE: arch/x86/kernel/kgdb_32.c:178:
+		asm volatile ("movl %%db6, %0\n":"=r" (dr6));
 		                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#342: FILE: arch/x86/kernel/kgdb_32.c:181:
+			long breakno;
+			for (breakno = 0; breakno < 4; ++breakno) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#353: FILE: arch/x86/kernel/kgdb_32.c:192:
+		return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: arch/x86/kernel/kgdb_32.c:199:
+static inline int single_step_cont(struct pt_regs *regs,
+			struct die_args *args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#365: FILE: arch/x86/kernel/kgdb_32.c:204:
+	printk(KERN_ERR "KGDB: trap/step from kernel to user space,"

WARNING:SPLIT_STRING: quoted string split across lines
#366: FILE: arch/x86/kernel/kgdb_32.c:205:
+	printk(KERN_ERR "KGDB: trap/step from kernel to user space,"
+			" resuming...\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: arch/x86/kernel/kgdb_32.c:207:
+	kgdb_arch_handle_exception(args->trapnr, args->signr,
+			args->err, "c", "", regs);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#408: FILE: arch/x86/kernel/kgdb_32.c:247:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: arch/x86/kernel/kgdb_32.c:259:
+	if (kgdb_handle_exception(args->trapnr, args->signr,
+	   args->err, regs))

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#459: FILE: arch/x86/kernel/kgdb_32.c:298:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#468: FILE: arch/x86/kernel/setup_32.c:116:
+extern void early_trap_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#495: FILE: arch/x86/kernel/traps_32.c:1165:
+void __init early_trap_init(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: arch/x86/mm/fault_32.c:521:
+	if (notify_die(DIE_PAGE_FAULT_NO_CONTEXT, "no context", regs,
+				error_code, 14, SIGSEGV) == NOTIFY_STOP)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#549: FILE: include/asm-x86/kgdb_32.h:1:
+#ifdef __KERNEL__

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#595: FILE: include/asm-x86/kgdb_32.h:47:
+#define BREAKPOINT()		asm("   int $3");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369980.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 22 warnings, 7 checks, 508 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369980.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
