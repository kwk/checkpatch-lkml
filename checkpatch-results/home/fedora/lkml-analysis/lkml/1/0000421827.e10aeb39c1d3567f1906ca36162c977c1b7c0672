WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: drivers/pci/iova.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#70: FILE: drivers/pci/iova.c:19:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iovad->cached32_node == NULL'
#75: FILE: drivers/pci/iova.c:24:
+	if ((*limit_pfn != DMA_32BIT_PFN) ||
+		(iovad->cached32_node == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: drivers/pci/iova.c:25:
+	if ((*limit_pfn != DMA_32BIT_PFN) ||
+		(iovad->cached32_node == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iovad->cached32_node"
#76: FILE: drivers/pci/iova.c:25:
+		(iovad->cached32_node == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#78: FILE: drivers/pci/iova.c:27:
+		return rb_last(&iovad->rbroot);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#78: FILE: drivers/pci/iova.c:27:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: drivers/pci/iova.c:38:
+__cached_rbnode_insert_update(struct iova_domain *iovad,
+	unsigned long limit_pfn, struct iova *new)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: drivers/pci/iova.c:61:
+static inline int __alloc_iova_range(struct iova_domain *iovad,
+	unsigned long size, unsigned long limit_pfn, struct iova *new)

WARNING:LINE_SPACING: Missing a blank line after declarations
#124: FILE: drivers/pci/iova.c:73:
+		struct iova *curr_iova = container_of(curr, struct iova, node);
+		if (limit_pfn < curr_iova->pfn_lo)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!curr'
#136: FILE: drivers/pci/iova.c:85:
+	if ((!curr) && !(IOVA_START_PFN + size <= limit_pfn)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around root->rb_node
#150: FILE: drivers/pci/iova.c:99:
+	struct rb_node **new = &(root->rb_node), *parent = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#154: FILE: drivers/pci/iova.c:103:
+		struct iova *this = container_of(*new, struct iova, node);
+		parent = *new;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#161: FILE: drivers/pci/iova.c:110:
+			BUG(); /* this should not happen */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#180: FILE: drivers/pci/iova.c:129:
+	unsigned long flags,flags1;
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn >= iova->pfn_lo'
#226: FILE: drivers/pci/iova.c:175:
+		if ((pfn >= iova->pfn_lo) && (pfn <= iova->pfn_hi)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn <= iova->pfn_hi'
#226: FILE: drivers/pci/iova.c:175:
+		if ((pfn >= iova->pfn_lo) && (pfn <= iova->pfn_hi)) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#260: FILE: drivers/pci/iova.c:209:
+}
+/**

WARNING:LINE_SPACING: Missing a blank line after declarations
#272: FILE: drivers/pci/iova.c:221:
+	struct iova *iova = find_iova(iovad, pfn);
+	__free_iova(iovad, iova);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#274: FILE: drivers/pci/iova.c:223:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: drivers/pci/iova.c:238:
+		struct iova *iova = container_of(node, struct iova, node);
+		rb_erase(node, &iovad->rbroot);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: drivers/pci/iova.c:247:
+	struct iova * iova = container_of(node, struct iova, node);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn_lo <= iova->pfn_hi'
#300: FILE: drivers/pci/iova.c:249:
+	if ((pfn_lo <= iova->pfn_hi) && (pfn_hi >= iova->pfn_lo))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn_hi >= iova->pfn_lo'
#300: FILE: drivers/pci/iova.c:249:
+	if ((pfn_lo <= iova->pfn_hi) && (pfn_hi >= iova->pfn_lo))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: drivers/pci/iova.c:265:
+	iova_insert_rbtree(&iovad->rbroot,iova);
 	                                 ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#348: FILE: drivers/pci/iova.c:297:
+		if (__is_range_overlap(node, pfn_lo, pfn_hi)) {
[...]
+		} else if (overlap)
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn_lo >= iova->pfn_lo'
#351: FILE: drivers/pci/iova.c:300:
+			if ((pfn_lo >= iova->pfn_lo) &&
+				(pfn_hi <= iova->pfn_hi))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn_hi <= iova->pfn_hi'
#351: FILE: drivers/pci/iova.c:300:
+			if ((pfn_lo >= iova->pfn_lo) &&
+				(pfn_hi <= iova->pfn_hi))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: drivers/pci/iova.c:301:
+			if ((pfn_lo >= iova->pfn_lo) &&
+				(pfn_hi <= iova->pfn_hi))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#356: FILE: drivers/pci/iova.c:305:
+		} else if (overlap)
+				break;

WARNING:TYPO_SPELLING: 'becasue' may be misspelled - perhaps 'because'?
#360: FILE: drivers/pci/iova.c:309:
+	/* We are here either becasue this is the first reserver node
 	                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#383: FILE: drivers/pci/iova.c:332:
+	struct rb_node *node;
+	spin_lock_irqsave(&from->iova_alloc_lock, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#388: FILE: drivers/pci/iova.c:337:
+		struct iova *new_iova;
+		new_iova = reserve_iova(to, iova->pfn_lo, iova->pfn_hi);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#390: FILE: drivers/pci/iova.c:339:
+			printk(KERN_ERR "Reserve iova range %lx@%lx failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: drivers/pci/iova.c:340:
+			printk(KERN_ERR "Reserve iova range %lx@%lx failed\n",
+				iova->pfn_lo, iova->pfn_lo);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#401: FILE: drivers/pci/iova.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#418: FILE: drivers/pci/iova.h:18:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#420: FILE: drivers/pci/iova.h:20:
+#define PAGE_SIZE_4K		(1UL << PAGE_SHIFT_4K)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#443: FILE: drivers/pci/iova.h:43:
+	struct rb_node	*cached32_node; /* Save last alloced node to optimize alloc */
 	              	                             ^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#450: FILE: drivers/pci/iova.h:50:
+struct iova * alloc_iova(struct iova_domain *iovad, unsigned long size, unsigned long limit_pfn);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#451: FILE: drivers/pci/iova.h:51:
+struct iova * reserve_iova(struct iova_domain *iovad, unsigned long pfn_lo, unsigned long pfn_hi);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#454: FILE: drivers/pci/iova.h:54:
+struct iova * find_iova(struct iova_domain *iovad, unsigned long pfn);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421827.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 14 warnings, 22 checks, 401 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421827.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
