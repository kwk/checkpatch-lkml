WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
and non-sequential file descriptor allocations. It consolidates all scattered

WARNING:TYPO_SPELLING: 'availble' may be misspelled - perhaps 'available'?
#41: 
availble here (verified and tested on a P4 HT and a dual Opteron):
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BIT_MACRO: Prefer using the BIT macro
#79: FILE: include/linux/file.h:24:
+#define FDMAP_NONSEQ_BASE	(1U << 28)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/file.h:77:
+extern void __put_unused_fd(unsigned int fd);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/file.h:81:
+extern void init_files_struct(struct files_struct *newf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/file.h:82:
+extern struct fd_map *files_fdmap_alloc(struct files_struct *files,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/file.h:85:
+extern int __alloc_nonseq_fd(struct files_struct *files, unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/linux/file.h:86:
+extern int alloc_nonseq_fd(struct files_struct *files, unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/file.h:87:
+extern unsigned int gen_nonseqfd_base(void);

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#164: FILE: include/linux/file.h:91:
+ *                      the creation the the non-sequential file descriptor map,

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: include/linux/file.h:101:
+	struct fd_map *fmap = files->fmap;
+	if (unlikely(!fmap))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: include/linux/file.h:126:
+	struct fd_map *fmap;
+	fmap = rcu_dereference(files->lfmap);

CHECK:BRACES: braces {} should be used on all arms of this statement
#206: FILE: include/linux/file.h:127:
+	if (fdmap_fdof(fmap, fd))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#208: FILE: include/linux/file.h:129:
+	else {

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#244: FILE: fs/fcntl.c:35:
+	fdmap_set_fdflags(fmap, fd, flag ? 0: FDMAP_F_CLOEXEC,
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#245: FILE: fs/fcntl.c:36:
+			  flag ? FDMAP_F_CLOEXEC: 0);
 			                        ^

CHECK:SPACING: No space is necessary after a cast
#328: FILE: fs/fcntl.c:72:
+		size = 2 * min(size, (unsigned int) NR_OPEN / 2);

CHECK:BRACES: braces {} should be used on all arms of this statement
#389: FILE: fs/fcntl.c:114:
+	if (newfd < current->signal->rlim[RLIMIT_NOFILE].rlim_cur) {
[...]
+	} else if (files->fmap && fdmap_fdof(files->fmap, newfd)) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'temporarly' may be misspelled - perhaps 'temporarily'?
#392: FILE: fs/fcntl.c:117:
+		 * may temporarly release the lock.
 		       ^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#397: FILE: fs/fcntl.c:122:
+				       (unsigned int) NR_OPEN / 2);

CHECK:SPACING: No space is necessary after a cast
#404: FILE: fs/fcntl.c:129:
+		if (err != (int) newfd) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#404: FILE: fs/fcntl.c:129:
+		if (err != (int) newfd) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#412: FILE: fs/fcntl.c:137:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#421: FILE: fs/fcntl.c:146:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#501: FILE: fs/exec.c:807:
+static void flush_old_files(struct files_struct * files)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#526: FILE: kernel/exit.c:422:
+	filp_close(file, (struct files_struct *) priv);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#555: FILE: kernel/exit.c:427:
+static void close_files(struct files_struct * files)

WARNING:LINE_SPACING: Missing a blank line after declarations
#696: FILE: fs/open.c:891:
+	struct files_struct *files = current->files;
+	if (fdmap_fdof(files->lfmap, fd))

WARNING:TYPO_SPELLING: 'temporarly' may be misspelled - perhaps 'temporarily'?
#724: FILE: fs/open.c:918:
+ * descriptor map should be resized, the held lock will be temporarly released
                                                            ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#812: FILE: fs/open.c:1102:
+	struct file *filp = NULL;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#823: FILE: fs/open.c:1108:
+		filp = fdmap_file_get(files->lfmap, fd);
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#825: FILE: fs/open.c:1110:
+		filp = fdmap_file_get(files->fmap, fd);
 		^^^^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#918: FILE: kernel/fork.c:663:
+	return fmap || !ofmap ? 0: -ENOMEM;
 	                         ^

CHECK:BRACES: Unbalanced braces around else statement
#957: FILE: kernel/fork.c:685:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1082: FILE: kernel/kmod.c:155:
+		BUG_ON(fd < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#1356: FILE: fs/file.c:56:
+	if (ofmap) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#1357: FILE: fs/file.c:57:
+		nsize = 2 * min(ofmap->size, (unsigned int) NR_OPEN / 2);

CHECK:BRACES: Unbalanced braces around else statement
#1360: FILE: fs/file.c:60:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1362: FILE: fs/file.c:62:
+	msize = min(msize, (unsigned int) NR_OPEN);

WARNING:MINMAX: min() should probably be min_t(unsigned int, msize, NR_OPEN)
#1362: FILE: fs/file.c:62:
+	msize = min(msize, (unsigned int) NR_OPEN);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1387: FILE: fs/file.c:68:
+		if (nfmap) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1398: FILE: fs/file.c:79:
+		} else

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1479: FILE: fs/proc/array.c:189:
+		fmap ? fdmap_topfd(fmap): 0);
 		                        ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1691: FILE: drivers/char/tty_io.c:3436:
+static int tty_fdmap_SAK_helper(void *priv, struct file *filp, int fd)
                                                          ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1697: FILE: drivers/char/tty_io.c:3442:
+		printk(KERN_NOTICE "SAK: killed process %d"

WARNING:SPLIT_STRING: quoted string split across lines
#1698: FILE: drivers/char/tty_io.c:3443:
+		printk(KERN_NOTICE "SAK: killed process %d"
+		       " (%s): fd#%d opened to the tty\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#1810: FILE: arch/mips/kernel/kspd.c:299:
+	filp_close(file, (struct files_struct *) priv);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1863: FILE: arch/powerpc/platforms/cell/spufs/coredump.c:142:
+		int rval = spufs_add_one_context(file, fd);
+		if (rval < 0)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1919: FILE: arch/sparc64/solaris/ioctl.c:301:
+	if (! file ||
 	    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1919: FILE: arch/sparc64/solaris/ioctl.c:301:
+	if (! file ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space prohibited after that '!' (ctx:ExW)
#1920: FILE: arch/sparc64/solaris/ioctl.c:302:
+	    ! file->f_path.dentry ||
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:ExW)
#1921: FILE: arch/sparc64/solaris/ioctl.c:303:
+	    ! (ino = file->f_path.dentry->d_inode) ||
 	    ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1988: FILE: arch/sparc64/solaris/timod.c:361:
+	filp = fcheck_files(current->files, fd);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2006: FILE: arch/sparc64/solaris/timod.c:642:
+	filp = fcheck_files(current->files, fd);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2022: FILE: arch/sparc64/solaris/timod.c:859:
+	filp = fcheck_files(current->files, fd);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2038: FILE: arch/sparc64/solaris/timod.c:925:
+	filp = fcheck_files(current->files, fd);
 	^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421728.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 21 warnings, 25 checks, 1843 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421728.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
