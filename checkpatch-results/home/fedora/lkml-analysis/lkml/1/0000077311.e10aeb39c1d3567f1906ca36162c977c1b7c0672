WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2499: FILE: tools/vm/slabinfo.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:REPEATED_WORD: Possible repeated word: 'slabinfo'
#2506: FILE: tools/vm/slabinfo.c:8:
+ * gcc -o slabinfo slabinfo.c

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2550: FILE: tools/vm/slabinfo.c:52:
+int slabs = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2551: FILE: tools/vm/slabinfo.c:53:
+int actual_slabs = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2552: FILE: tools/vm/slabinfo.c:54:
+int aliases = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2553: FILE: tools/vm/slabinfo.c:55:
+int alias_targets = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2554: FILE: tools/vm/slabinfo.c:56:
+int highest_node = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2558: FILE: tools/vm/slabinfo.c:60:
+int show_empty = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2559: FILE: tools/vm/slabinfo.c:61:
+int show_report = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2560: FILE: tools/vm/slabinfo.c:62:
+int show_alias = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2561: FILE: tools/vm/slabinfo.c:63:
+int show_slab = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2563: FILE: tools/vm/slabinfo.c:65:
+int show_numa = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2564: FILE: tools/vm/slabinfo.c:66:
+int show_track = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2565: FILE: tools/vm/slabinfo.c:67:
+int show_first_alias = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2566: FILE: tools/vm/slabinfo.c:68:
+int validate = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2567: FILE: tools/vm/slabinfo.c:69:
+int shrink = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2568: FILE: tools/vm/slabinfo.c:70:
+int show_inverted = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2569: FILE: tools/vm/slabinfo.c:71:
+int show_single_ref = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2570: FILE: tools/vm/slabinfo.c:72:
+int show_totals = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2571: FILE: tools/vm/slabinfo.c:73:
+int sort_size = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2572: FILE: tools/vm/slabinfo.c:74:
+int sort_active = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2573: FILE: tools/vm/slabinfo.c:75:
+int set_debug = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2574: FILE: tools/vm/slabinfo.c:76:
+int show_ops = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2575: FILE: tools/vm/slabinfo.c:77:
+int show_activity = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2578: FILE: tools/vm/slabinfo.c:80:
+int sanity = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2579: FILE: tools/vm/slabinfo.c:81:
+int redzone = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2580: FILE: tools/vm/slabinfo.c:82:
+int poison = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2581: FILE: tools/vm/slabinfo.c:83:
+int tracking = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2582: FILE: tools/vm/slabinfo.c:84:
+int tracing = 0;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usage', this function's name, in a string
#2608: FILE: tools/vm/slabinfo.c:110:
+		"-h|--help              Show usage information\n"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: braces {} should be used on all arms of this statement
#2636: FILE: tools/vm/slabinfo.c:138:
+	if (!f)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2638: FILE: tools/vm/slabinfo.c:140:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2648: FILE: tools/vm/slabinfo.c:150:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2712: FILE: tools/vm/slabinfo.c:214:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2734: FILE: tools/vm/slabinfo.c:236:
+	n = sprintf(buffer, "%ld",value);
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2742: FILE: tools/vm/slabinfo.c:244:
+		buffer[n-2] = '.';
 		        ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2789: FILE: tools/vm/slabinfo.c:291:
+int line = 0;

WARNING:SPLIT_STRING: quoted string split across lines
#2797: FILE: tools/vm/slabinfo.c:299:
+		printf("Name                   Objects Objsize    Space "
+			"Slabs/Part/Cpu  O/S O %%Fr %%Ef Flg\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2808: FILE: tools/vm/slabinfo.c:310:
+	for(a = aliasinfo;a < aliasinfo + aliases; a++) {
 	                 ^

ERROR:SPACING: space required before the open parenthesis '('
#2808: FILE: tools/vm/slabinfo.c:310:
+	for(a = aliasinfo;a < aliasinfo + aliases; a++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#2809: FILE: tools/vm/slabinfo.c:311:
+		if (a->slab == find &&
[...]
+				best = a;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2810: FILE: tools/vm/slabinfo.c:312:
+		if (a->slab == find &&
+			(!best || strlen(best->name) < strlen(a->name))) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2812: FILE: tools/vm/slabinfo.c:314:
+				if (strncmp(a->name,"kmall", 5) == 0)
 				                   ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2821: FILE: tools/vm/slabinfo.c:323:
+^Ireturn ^Is->slabs * (page_size << s->order);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2826: FILE: tools/vm/slabinfo.c:328:
+^Ireturn ^Is->alloc_fastpath + s->free_fastpath +$

ERROR:SPACING: space required before the open parenthesis '('
#2847: FILE: tools/vm/slabinfo.c:349:
+		for(node = 0; node <= highest_node; node++)

ERROR:SPACING: space required before the open parenthesis '('
#2850: FILE: tools/vm/slabinfo.c:352:
+		for(node = 0; node <= highest_node; node++)

ERROR:SPACING: space required before the open parenthesis '('
#2855: FILE: tools/vm/slabinfo.c:357:
+	for(node = 0; node <= highest_node; node++) {

ERROR:SPACING: space required before the open parenthesis '('
#2864: FILE: tools/vm/slabinfo.c:366:
+		for(node = 0; node <= highest_node; node++) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2891: FILE: tools/vm/slabinfo.c:393:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#2898: FILE: tools/vm/slabinfo.c:400:
+	if (read_slab_obj(s, "ops")) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2902: FILE: tools/vm/slabinfo.c:404:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2932: FILE: tools/vm/slabinfo.c:434:
+	printf("Fastpath             %8lu %8lu %3lu %3lu\n",
+		s->alloc_fastpath, s->free_fastpath,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2936: FILE: tools/vm/slabinfo.c:438:
+	printf("Slowpath             %8lu %8lu %3lu %3lu\n",
+		total_alloc - s->alloc_fastpath, s->free_slowpath,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2940: FILE: tools/vm/slabinfo.c:442:
+	printf("Page Alloc           %8lu %8lu %3lu %3lu\n",
+		s->alloc_slab, s->free_slab,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2944: FILE: tools/vm/slabinfo.c:446:
+	printf("Add partial          %8lu %8lu %3lu %3lu\n",
+		s->deactivate_to_head + s->deactivate_to_tail,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2949: FILE: tools/vm/slabinfo.c:451:
+	printf("Remove partial       %8lu %8lu %3lu %3lu\n",
+		s->alloc_from_partial, s->free_remove_partial,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2954: FILE: tools/vm/slabinfo.c:456:
+	printf("RemoteObj/SlabFrozen %8lu %8lu %3lu %3lu\n",
+		s->deactivate_remote_frees, s->free_frozen,

WARNING:SPLIT_STRING: quoted string split across lines
#2971: FILE: tools/vm/slabinfo.c:473:
+		printf("Deactivate Full=%lu(%lu%%) Empty=%lu(%lu%%) "
+			"ToHead=%lu(%lu%%) ToTail=%lu(%lu%%)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2984: FILE: tools/vm/slabinfo.c:486:
+	printf("\nSlabcache: %-20s  Aliases: %2d Order : %2d Objects: %lu\n",
+		s->name, s->aliases, s->order, s->objects);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2997: FILE: tools/vm/slabinfo.c:499:
+	printf("Object : %7d  Total  : %7ld   Sanity Checks : %s  Total: %7ld\n",
+			s->object_size, s->slabs, onoff(s->sanity_checks),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3000: FILE: tools/vm/slabinfo.c:502:
+	printf("SlabObj: %7d  Full   : %7ld   Redzoning     : %s  Used : %7ld\n",
+			s->slab_size, s->slabs - s->partial - s->cpu_slabs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3003: FILE: tools/vm/slabinfo.c:505:
+	printf("SlabSiz: %7d  Partial: %7ld   Poisoning     : %s  Loss : %7ld\n",
+			page_size << s->order, s->partial, onoff(s->poison),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3006: FILE: tools/vm/slabinfo.c:508:
+	printf("Loss   : %7d  CpuSlab: %7d   Tracking      : %s  Lalig: %7ld\n",
+			s->slab_size - s->object_size, s->cpu_slabs, onoff(s->store_user),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3009: FILE: tools/vm/slabinfo.c:511:
+	printf("Align  : %7d  Objects: %7d   Tracing       : %s  Lpadd: %7ld\n",
+			s->align, s->objs_per_slab, onoff(s->trace),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3042: FILE: tools/vm/slabinfo.c:544:
+	snprintf(dist_str, 40, "%lu/%lu/%d", s->slabs - s->cpu_slabs,
+						s->partial, s->cpu_slabs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3075: FILE: tools/vm/slabinfo.c:577:
+		printf("%-21s %8ld %10ld %10ld %3ld %3ld %5ld %1d\n",
+			s->name, s->objects,

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#3081: FILE: tools/vm/slabinfo.c:583:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3083: FILE: tools/vm/slabinfo.c:585:
+		printf("%-21s %8ld %7d %8s %14s %4d %1d %3ld %3ld %s\n",
+			s->name, s->objects, s->object_size, size_str, dist_str,

ERROR:CODE_INDENT: code indent should use tabs where possible
#3108: FILE: tools/vm/slabinfo.c:610:
+^I ^Iswitch (*opt) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3108: FILE: tools/vm/slabinfo.c:610:
+^I ^Iswitch (*opt) {$

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#3109: FILE: tools/vm/slabinfo.c:611:
+		case 'F' : case 'f':
 		         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#3114: FILE: tools/vm/slabinfo.c:616:
+		case 'P' : case 'p':
 		         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#3120: FILE: tools/vm/slabinfo.c:622:
+		case 'Z' : case 'z':
 		         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#3126: FILE: tools/vm/slabinfo.c:628:
+		case 'U' : case 'u':
 		         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#3132: FILE: tools/vm/slabinfo.c:634:
+		case 'T' : case 't':
 		         ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3163: FILE: tools/vm/slabinfo.c:665:
+	if (sanity && !s->sanity_checks) {
+		set_obj(s, "sanity", 1);
+	}

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#3212: FILE: tools/vm/slabinfo.c:714:
+			fprintf(stderr, "%s can only enable trace for one slab at a time\n", s->name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3273: FILE: tools/vm/slabinfo.c:775:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'object'
#3388: FILE: tools/vm/slabinfo.c:890:
+	/* Per object object sizes */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3397: FILE: tools/vm/slabinfo.c:899:
+	printf("Slabcaches : %3d      Aliases  : %3d->%-3d Active: %3d\n",
+			slabs, aliases, alias_targets, used_slabs);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3399: FILE: tools/vm/slabinfo.c:901:
+	store_size(b1, total_size);store_size(b2, total_waste);
 	                          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3403: FILE: tools/vm/slabinfo.c:905:
+	store_size(b1, total_objects);store_size(b2, total_partobj);
 	                             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3411: FILE: tools/vm/slabinfo.c:913:
+	store_size(b1, avg_objects);store_size(b2, min_objects);
 	                           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3412: FILE: tools/vm/slabinfo.c:914:
+	store_size(b3, max_objects);store_size(b4, total_objects);
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3414: FILE: tools/vm/slabinfo.c:916:
+	printf("#Objects  %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3416: FILE: tools/vm/slabinfo.c:918:
+	store_size(b1, avg_slabs);store_size(b2, min_slabs);
 	                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3417: FILE: tools/vm/slabinfo.c:919:
+	store_size(b3, max_slabs);store_size(b4, total_slabs);
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3419: FILE: tools/vm/slabinfo.c:921:
+	printf("#Slabs    %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3421: FILE: tools/vm/slabinfo.c:923:
+	store_size(b1, avg_partial);store_size(b2, min_partial);
 	                           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3422: FILE: tools/vm/slabinfo.c:924:
+	store_size(b3, max_partial);store_size(b4, total_partial);
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3424: FILE: tools/vm/slabinfo.c:926:
+	printf("#PartSlab %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3425: FILE: tools/vm/slabinfo.c:927:
+	store_size(b1, avg_ppart);store_size(b2, min_ppart);
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3429: FILE: tools/vm/slabinfo.c:931:
+	printf("%%PartSlab%10s%% %10s%% %10s%% %10s%%\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3431: FILE: tools/vm/slabinfo.c:933:
+	store_size(b1, avg_partobj);store_size(b2, min_partobj);
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3435: FILE: tools/vm/slabinfo.c:937:
+	printf("PartObjs  %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3437: FILE: tools/vm/slabinfo.c:939:
+	store_size(b1, avg_ppartobj);store_size(b2, min_ppartobj);
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3441: FILE: tools/vm/slabinfo.c:943:
+	printf("%% PartObj%10s%% %10s%% %10s%% %10s%%\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3443: FILE: tools/vm/slabinfo.c:945:
+	store_size(b1, avg_size);store_size(b2, min_size);
 	                        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3444: FILE: tools/vm/slabinfo.c:946:
+	store_size(b3, max_size);store_size(b4, total_size);
 	                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3446: FILE: tools/vm/slabinfo.c:948:
+	printf("Memory    %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3448: FILE: tools/vm/slabinfo.c:950:
+	store_size(b1, avg_used);store_size(b2, min_used);
 	                        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3449: FILE: tools/vm/slabinfo.c:951:
+	store_size(b3, max_used);store_size(b4, total_used);
 	                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3451: FILE: tools/vm/slabinfo.c:953:
+	printf("Used      %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3453: FILE: tools/vm/slabinfo.c:955:
+	store_size(b1, avg_waste);store_size(b2, min_waste);
 	                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3454: FILE: tools/vm/slabinfo.c:956:
+	store_size(b3, max_waste);store_size(b4, total_waste);
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3456: FILE: tools/vm/slabinfo.c:958:
+	printf("Loss      %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3462: FILE: tools/vm/slabinfo.c:964:
+	store_size(b1, avg_memobj);store_size(b2, min_memobj);
 	                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3465: FILE: tools/vm/slabinfo.c:967:
+	printf("Memory    %10s  %10s  %10s\n",
+			b1,	b2,	b3);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3466: FILE: tools/vm/slabinfo.c:968:
+	store_size(b1, avg_objsize);store_size(b2, min_objsize);
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3469: FILE: tools/vm/slabinfo.c:971:
+	printf("User      %10s  %10s  %10s\n",
+			b1,	b2,	b3);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#3471: FILE: tools/vm/slabinfo.c:973:
+	store_size(b1, avg_objwaste);store_size(b2, min_objwaste);
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3474: FILE: tools/vm/slabinfo.c:976:
+	printf("Loss      %10s  %10s  %10s\n",
+			b1,	b2,	b3);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#3479: FILE: tools/vm/slabinfo.c:981:
+	struct slabinfo *s1,*s2;
 	                   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#3479: FILE: tools/vm/slabinfo.c:981:
+	struct slabinfo *s1,*s2;
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#3508: FILE: tools/vm/slabinfo.c:1010:
+	struct aliasinfo *a1,*a2;
 	                    ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#3508: FILE: tools/vm/slabinfo.c:1010:
+	struct aliasinfo *a1,*a2;
 	                     ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3537: FILE: tools/vm/slabinfo.c:1039:
+	for (a = aliasinfo; a < aliasinfo + aliases; a++) {
+

ERROR:SPACING: space required before the open parenthesis '('
#3557: FILE: tools/vm/slabinfo.c:1059:
+	for(a = aliasinfo; a < aliasinfo + aliases; a++) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3558: FILE: tools/vm/slabinfo.c:1060:
+	for(a = aliasinfo; a < aliasinfo + aliases; a++) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#3562: FILE: tools/vm/slabinfo.c:1064:
+		if (!show_inverted) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#3572: FILE: tools/vm/slabinfo.c:1074:
+		}
+		else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3579: FILE: tools/vm/slabinfo.c:1081:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#3594: FILE: tools/vm/slabinfo.c:1096:
+		if (a)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3596: FILE: tools/vm/slabinfo.c:1098:
+		else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#3623: FILE: tools/vm/slabinfo.c:1125:
+		if (de->d_name[0] == '.' ||
[...]
+				continue;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3624: FILE: tools/vm/slabinfo.c:1126:
+		if (de->d_name[0] == '.' ||
+			(de->d_name[0] != ':' && slab_mismatch(de->d_name)))

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#3626: FILE: tools/vm/slabinfo.c:1128:
+		switch (de->d_type) {
+		   case DT_LNK:
[...]
+		   case DT_DIR:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TABSTOP: Statements should start on a tabstop
#3627: FILE: tools/vm/slabinfo.c:1129:
+		   case DT_LNK:

ERROR:CODE_INDENT: code indent should use tabs where possible
#3628: FILE: tools/vm/slabinfo.c:1130:
+^I^I   ^Ialias->name = strdup(de->d_name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3628: FILE: tools/vm/slabinfo.c:1130:
+^I^I   ^Ialias->name = strdup(de->d_name);$

WARNING:TABSTOP: Statements should start on a tabstop
#3641: FILE: tools/vm/slabinfo.c:1143:
+		   case DT_DIR:

ERROR:CODE_INDENT: code indent should use tabs where possible
#3644: FILE: tools/vm/slabinfo.c:1146:
+^I^I   ^Islab->name = strdup(de->d_name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3644: FILE: tools/vm/slabinfo.c:1146:
+^I^I   ^Islab->name = strdup(de->d_name);$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#3677: FILE: tools/vm/slabinfo.c:1179:
+			slab->free_frozen= get_obj("free_frozen");
 			                 ^

WARNING:TABSTOP: Statements should start on a tabstop
#3696: FILE: tools/vm/slabinfo.c:1198:
+		   default :

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#3696: FILE: tools/vm/slabinfo.c:1198:
+		   default :
 		           ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3715: FILE: tools/vm/slabinfo.c:1217:
+	for (slab = slabinfo; slab < slabinfo + slabs; slab++) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3719: FILE: tools/vm/slabinfo.c:1221:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3769: FILE: tools/vm/slabinfo.c:1271:
+	while ((c = getopt_long(argc, argv, "aAd::Defhil1noprstvzTS",
+						opts, NULL)) != -1)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3834: FILE: tools/vm/slabinfo.c:1336:
+
+	}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#3836: FILE: tools/vm/slabinfo.c:1338:
+	if (!show_slab && !show_alias && !show_track && !show_report
[...]
+			show_slab = 1;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3837: FILE: tools/vm/slabinfo.c:1339:
+	if (!show_slab && !show_alias && !show_track && !show_report
+		&& !validate && !shrink && !set_debug && !show_ops)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3845: FILE: tools/vm/slabinfo.c:1347:
+	err = regcomp(&pattern, pattern_source, REG_ICASE|REG_NOSUB);
 	                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3848: FILE: tools/vm/slabinfo.c:1350:
+		fatal("%s: Invalid pattern '%s' code %d\n",
+			argv[0], pattern_source, err);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3850: FILE: tools/vm/slabinfo.c:1352:
+	if (show_alias)
[...]
+	else
[...]
+	else {
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#3852: FILE: tools/vm/slabinfo.c:1354:
+	else
+	if (show_totals)

CHECK:BRACES: braces {} should be used on all arms of this statement
#3853: FILE: tools/vm/slabinfo.c:1355:
+	if (show_totals)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3855: FILE: tools/vm/slabinfo.c:1357:
+	else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3866: FILE: tools/vm/slqbinfo.c:1:
+/*

WARNING:REPEATED_WORD: Possible repeated word: 'slabinfo'
#3875: FILE: tools/vm/slqbinfo.c:10:
+ * gcc -o slabinfo slabinfo.c

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3911: FILE: tools/vm/slqbinfo.c:46:
+int slabs = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3912: FILE: tools/vm/slqbinfo.c:47:
+int actual_slabs = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3913: FILE: tools/vm/slqbinfo.c:48:
+int highest_node = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3917: FILE: tools/vm/slqbinfo.c:52:
+int show_empty = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3918: FILE: tools/vm/slqbinfo.c:53:
+int show_report = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3919: FILE: tools/vm/slqbinfo.c:54:
+int show_slab = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3921: FILE: tools/vm/slqbinfo.c:56:
+int show_numa = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3922: FILE: tools/vm/slqbinfo.c:57:
+int show_track = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3923: FILE: tools/vm/slqbinfo.c:58:
+int validate = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3924: FILE: tools/vm/slqbinfo.c:59:
+int shrink = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3925: FILE: tools/vm/slqbinfo.c:60:
+int show_inverted = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3926: FILE: tools/vm/slqbinfo.c:61:
+int show_totals = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3927: FILE: tools/vm/slqbinfo.c:62:
+int sort_size = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3928: FILE: tools/vm/slqbinfo.c:63:
+int sort_active = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3929: FILE: tools/vm/slqbinfo.c:64:
+int set_debug = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3930: FILE: tools/vm/slqbinfo.c:65:
+int show_ops = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3931: FILE: tools/vm/slqbinfo.c:66:
+int show_activity = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3934: FILE: tools/vm/slqbinfo.c:69:
+int sanity = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3935: FILE: tools/vm/slqbinfo.c:70:
+int redzone = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3936: FILE: tools/vm/slqbinfo.c:71:
+int poison = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3937: FILE: tools/vm/slqbinfo.c:72:
+int tracking = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#3938: FILE: tools/vm/slqbinfo.c:73:
+int tracing = 0;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usage', this function's name, in a string
#3962: FILE: tools/vm/slqbinfo.c:97:
+		"-h|--help              Show usage information\n"

CHECK:BRACES: braces {} should be used on all arms of this statement
#3989: FILE: tools/vm/slqbinfo.c:124:
+	if (!f)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3991: FILE: tools/vm/slqbinfo.c:126:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4001: FILE: tools/vm/slqbinfo.c:136:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4065: FILE: tools/vm/slqbinfo.c:200:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4087: FILE: tools/vm/slqbinfo.c:222:
+	n = sprintf(buffer, "%ld",value);
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4095: FILE: tools/vm/slqbinfo.c:230:
+		buffer[n-2] = '.';
 		        ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#4142: FILE: tools/vm/slqbinfo.c:277:
+int line = 0;

WARNING:SPLIT_STRING: quoted string split across lines
#4148: FILE: tools/vm/slqbinfo.c:283:
+		printf("Name                   Objects      Alloc       Free   %%Fill %%New  "
+			"FlushR %%FlushR FlushR_Objs O\n");

WARNING:SPLIT_STRING: quoted string split across lines
#4151: FILE: tools/vm/slqbinfo.c:286:
+		printf("Name                   Objects Objsize    Space "
+			" O/S O %%Ef Batch Flg\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4156: FILE: tools/vm/slqbinfo.c:291:
+^Ireturn ^Is->slabs * (page_size << s->order);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4161: FILE: tools/vm/slqbinfo.c:296:
+^Ireturn ^Is->alloc + s->free;$

ERROR:SPACING: space required before the open parenthesis '('
#4181: FILE: tools/vm/slqbinfo.c:316:
+		for(node = 0; node <= highest_node; node++)

ERROR:SPACING: space required before the open parenthesis '('
#4184: FILE: tools/vm/slqbinfo.c:319:
+		for(node = 0; node <= highest_node; node++)

ERROR:SPACING: space required before the open parenthesis '('
#4189: FILE: tools/vm/slqbinfo.c:324:
+	for(node = 0; node <= highest_node; node++) {

ERROR:SPACING: space required before the open parenthesis '('
#4198: FILE: tools/vm/slqbinfo.c:333:
+		for(node = 0; node <= highest_node; node++) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4225: FILE: tools/vm/slqbinfo.c:360:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#4232: FILE: tools/vm/slqbinfo.c:367:
+	if (read_slab_obj(s, "ops")) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4236: FILE: tools/vm/slqbinfo.c:371:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4262: FILE: tools/vm/slqbinfo.c:397:
+	printf("Alloc: %8lu, partial %8lu, page allocator %8lu\n",
+		total_alloc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4265: FILE: tools/vm/slqbinfo.c:400:
+	printf("Free:  %8lu, partial %8lu, page allocator %8lu, remote %5lu\n",
+		total_free,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4270: FILE: tools/vm/slqbinfo.c:405:
+	printf("Claim: %8lu, objects %8lu\n",
+		s->claim_remote_list,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4273: FILE: tools/vm/slqbinfo.c:408:
+	printf("Flush: %8lu, objects %8lu, remote: %8lu\n",
+		s->flush_free_list,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4277: FILE: tools/vm/slqbinfo.c:412:
+	printf("FlushR:%8lu, objects %8lu\n",
+		s->flush_rfree_list,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4287: FILE: tools/vm/slqbinfo.c:422:
+	printf("\nSlabcache: %-20s  Order : %2d Objects: %lu\n",
+		s->name, s->order, s->objects);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4300: FILE: tools/vm/slqbinfo.c:435:
+	printf("Object : %7d  Total  : %7ld   Sanity Checks : %s  Total: %7ld\n",
+			s->object_size, s->slabs, "N/A",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4303: FILE: tools/vm/slqbinfo.c:438:
+	printf("SlabObj: %7d  Full   : %7s   Redzoning     : %s  Used : %7ld\n",
+			s->slab_size, "N/A",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4306: FILE: tools/vm/slqbinfo.c:441:
+	printf("SlabSiz: %7d  Partial: %7s   Poisoning     : %s  Loss : %7ld\n",
+			page_size << s->order, "N/A", onoff(s->poison),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4309: FILE: tools/vm/slqbinfo.c:444:
+	printf("Loss   : %7d  CpuSlab: %7s   Tracking      : %s  Lalig: %7ld\n",
+			s->slab_size - s->object_size, "N/A", onoff(s->store_user),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4312: FILE: tools/vm/slqbinfo.c:447:
+	printf("Align  : %7d  Objects: %7d   Tracing       : %s  Lpadd: %7ld\n",
+			s->align, s->objs_per_slab, "N/A",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4369: FILE: tools/vm/slqbinfo.c:504:
+		printf("%-21s %8ld %10ld %10ld %5ld %5ld %7ld %5ld %7ld %8d\n",
+			s->name, s->objects,

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#4378: FILE: tools/vm/slqbinfo.c:513:
+	}
+	else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4380: FILE: tools/vm/slqbinfo.c:515:
+		printf("%-21s %8ld %7d %8s %4d %1d %3ld %4d %s\n",
+			s->name, s->objects, s->object_size, size_str,

ERROR:CODE_INDENT: code indent should use tabs where possible
#4404: FILE: tools/vm/slqbinfo.c:539:
+^I ^Iswitch (*opt) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4404: FILE: tools/vm/slqbinfo.c:539:
+^I ^Iswitch (*opt) {$

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#4405: FILE: tools/vm/slqbinfo.c:540:
+		case 'F' : case 'f':
 		         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#4410: FILE: tools/vm/slqbinfo.c:545:
+		case 'P' : case 'p':
 		         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#4416: FILE: tools/vm/slqbinfo.c:551:
+		case 'Z' : case 'z':
 		         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#4422: FILE: tools/vm/slqbinfo.c:557:
+		case 'U' : case 'u':
 		         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#4428: FILE: tools/vm/slqbinfo.c:563:
+		case 'T' : case 't':
 		         ^

WARNING:REPEATED_WORD: Possible repeated word: 'object'
#4614: FILE: tools/vm/slqbinfo.c:749:
+	/* Per object object sizes */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4622: FILE: tools/vm/slqbinfo.c:757:
+	printf("Slabcaches : %3d      Active: %3d\n",
+			slabs, used_slabs);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4624: FILE: tools/vm/slqbinfo.c:759:
+	store_size(b1, total_size);store_size(b2, total_waste);
 	                          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4635: FILE: tools/vm/slqbinfo.c:770:
+	store_size(b1, avg_objects);store_size(b2, min_objects);
 	                           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4636: FILE: tools/vm/slqbinfo.c:771:
+	store_size(b3, max_objects);store_size(b4, total_objects);
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4638: FILE: tools/vm/slqbinfo.c:773:
+	printf("#Objects  %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4640: FILE: tools/vm/slqbinfo.c:775:
+	store_size(b1, avg_slabs);store_size(b2, min_slabs);
 	                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4641: FILE: tools/vm/slqbinfo.c:776:
+	store_size(b3, max_slabs);store_size(b4, total_slabs);
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4643: FILE: tools/vm/slqbinfo.c:778:
+	printf("#Slabs    %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4645: FILE: tools/vm/slqbinfo.c:780:
+	store_size(b1, avg_size);store_size(b2, min_size);
 	                        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4646: FILE: tools/vm/slqbinfo.c:781:
+	store_size(b3, max_size);store_size(b4, total_size);
 	                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4648: FILE: tools/vm/slqbinfo.c:783:
+	printf("Memory    %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4650: FILE: tools/vm/slqbinfo.c:785:
+	store_size(b1, avg_used);store_size(b2, min_used);
 	                        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4651: FILE: tools/vm/slqbinfo.c:786:
+	store_size(b3, max_used);store_size(b4, total_used);
 	                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4653: FILE: tools/vm/slqbinfo.c:788:
+	printf("Used      %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4655: FILE: tools/vm/slqbinfo.c:790:
+	store_size(b1, avg_waste);store_size(b2, min_waste);
 	                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4656: FILE: tools/vm/slqbinfo.c:791:
+	store_size(b3, max_waste);store_size(b4, total_waste);
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4658: FILE: tools/vm/slqbinfo.c:793:
+	printf("Loss      %10s  %10s  %10s  %10s\n",
+			b1,	b2,	b3,	b4);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4664: FILE: tools/vm/slqbinfo.c:799:
+	store_size(b1, avg_memobj);store_size(b2, min_memobj);
 	                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4667: FILE: tools/vm/slqbinfo.c:802:
+	printf("Memory    %10s  %10s  %10s\n",
+			b1,	b2,	b3);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4668: FILE: tools/vm/slqbinfo.c:803:
+	store_size(b1, avg_objsize);store_size(b2, min_objsize);
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4671: FILE: tools/vm/slqbinfo.c:806:
+	printf("User      %10s  %10s  %10s\n",
+			b1,	b2,	b3);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#4673: FILE: tools/vm/slqbinfo.c:808:
+	store_size(b1, avg_objwaste);store_size(b2, min_objwaste);
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4676: FILE: tools/vm/slqbinfo.c:811:
+	printf("Loss      %10s  %10s  %10s\n",
+			b1,	b2,	b3);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#4681: FILE: tools/vm/slqbinfo.c:816:
+	struct slabinfo *s1,*s2;
 	                   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#4681: FILE: tools/vm/slqbinfo.c:816:
+	struct slabinfo *s1,*s2;
 	                    ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#4725: FILE: tools/vm/slqbinfo.c:860:
+		if (de->d_name[0] == '.' ||
[...]
+				continue;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4726: FILE: tools/vm/slqbinfo.c:861:
+		if (de->d_name[0] == '.' ||
+			(de->d_name[0] != ':' && slab_mismatch(de->d_name)))

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#4728: FILE: tools/vm/slqbinfo.c:863:
+		switch (de->d_type) {
+		   case DT_DIR:

WARNING:TABSTOP: Statements should start on a tabstop
#4729: FILE: tools/vm/slqbinfo.c:864:
+		   case DT_DIR:

ERROR:CODE_INDENT: code indent should use tabs where possible
#4732: FILE: tools/vm/slqbinfo.c:867:
+^I^I   ^Islab->name = strdup(de->d_name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4732: FILE: tools/vm/slqbinfo.c:867:
+^I^I   ^Islab->name = strdup(de->d_name);$

WARNING:TABSTOP: Statements should start on a tabstop
#4769: FILE: tools/vm/slqbinfo.c:904:
+		   default :

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#4769: FILE: tools/vm/slqbinfo.c:904:
+		   default :
 		           ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4785: FILE: tools/vm/slqbinfo.c:920:
+	for (slab = slabinfo; slab < slabinfo + slabs; slab++) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4833: FILE: tools/vm/slqbinfo.c:968:
+	while ((c = getopt_long(argc, argv, "Ad::Dehil1noprstvzTS",
+						opts, NULL)) != -1)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4889: FILE: tools/vm/slqbinfo.c:1024:
+
+	}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#4891: FILE: tools/vm/slqbinfo.c:1026:
+	if (!show_slab && !show_track && !show_report
[...]
+			show_slab = 1;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4892: FILE: tools/vm/slqbinfo.c:1027:
+	if (!show_slab && !show_track && !show_report
+		&& !validate && !shrink && !set_debug && !show_ops)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4900: FILE: tools/vm/slqbinfo.c:1035:
+	err = regcomp(&pattern, pattern_source, REG_ICASE|REG_NOSUB);
 	                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4903: FILE: tools/vm/slqbinfo.c:1038:
+		fatal("%s: Invalid pattern '%s' code %d\n",
+			argv[0], pattern_source, err);

CHECK:BRACES: braces {} should be used on all arms of this statement
#4905: FILE: tools/vm/slqbinfo.c:1040:
+	if (show_totals)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4907: FILE: tools/vm/slqbinfo.c:1042:
+	else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000077311.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 128 errors, 34 warnings, 94 checks, 2428 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000077311.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
