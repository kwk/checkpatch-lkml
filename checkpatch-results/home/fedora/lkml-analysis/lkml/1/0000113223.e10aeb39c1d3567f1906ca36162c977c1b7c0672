WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#47: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/linux/rational.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#65: FILE: include/linux/rational.h:14:
+void rational_best_approximation(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: lib/rational.c:1:
+/*

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#130: FILE: lib/rational.c:28:
+void rational_best_approximation(

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: lib/rational.c:34:
+	unsigned long n, d, n0, d0, n1, d1;
+	n = given_numerator;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#138: FILE: lib/rational.c:36:
+	n0 = d1 = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#139: FILE: lib/rational.c:37:
+	n1 = d0 = 1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#142: FILE: lib/rational.c:40:
+		unsigned long t, a;
+		if ((n1 > max_numerator) || (d1 > max_denominator)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n1 > max_numerator'
#142: FILE: lib/rational.c:40:
+		if ((n1 > max_numerator) || (d1 > max_denominator)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'd1 > max_denominator'
#142: FILE: lib/rational.c:40:
+		if ((n1 > max_numerator) || (d1 > max_denominator)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113223.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 6 checks, 95 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113223.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
