WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git core/percpu

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__p' - possible side-effects?
#104: FILE: include/asm-generic/percpu.h:49:
+#  define SHIFT_PERCPU_PTR(__p, __offset) \
+	((__typeof(__p))(((void *)(__p)) + (__offset)))

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#156: FILE: include/asm-generic/vmlinux.lds.h:350:
+	percpu : { } :percpu						\
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#160: FILE: include/asm-generic/vmlinux.lds.h:354:
+		*(.data.percpu.shared_aligned)				\
 		^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#161: FILE: include/asm-generic/vmlinux.lds.h:355:
+		*(.data.percpu)						\
 		^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#162: FILE: include/asm-generic/vmlinux.lds.h:356:
+		*(.data.percpu.page_aligned)				\
 		^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#166: FILE: include/asm-generic/vmlinux.lds.h:360:
+	data : { } :data
 	           ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#187: FILE: include/asm-x86/percpu.h:112:
+		asm(op "q %1,"__percpu_seg"%0"		\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#199: FILE: include/asm-x86/percpu.h:140:
+		asm(op "q "__percpu_seg"%1,%0"		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#213: FILE: include/asm-x86/percpu.h:149:
+#define percpu_addr_op(op, var)				\
+({							\
+	switch (sizeof(var)) {				\
+	case 1:						\
+		asm(op "b "__percpu_seg"%0"		\
+				: : "m"(var));		\
+		break;					\
+	case 2:						\
+		asm(op "w "__percpu_seg"%0"		\
+				: : "m"(var));		\
+		break;					\
+	case 4:						\
+		asm(op "l "__percpu_seg"%0"		\
+				: : "m"(var));		\
+		break;					\
+	case 8:						\
+		asm(op "q "__percpu_seg"%0"		\
+				: : "m"(var));		\
+		break;					\
+	default: __bad_percpu_size();			\
+	}						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#213: FILE: include/asm-x86/percpu.h:149:
+#define percpu_addr_op(op, var)				\
+({							\
+	switch (sizeof(var)) {				\
+	case 1:						\
+		asm(op "b "__percpu_seg"%0"		\
+				: : "m"(var));		\
+		break;					\
+	case 2:						\
+		asm(op "w "__percpu_seg"%0"		\
+				: : "m"(var));		\
+		break;					\
+	case 4:						\
+		asm(op "l "__percpu_seg"%0"		\
+				: : "m"(var));		\
+		break;					\
+	case 8:						\
+		asm(op "q "__percpu_seg"%0"		\
+				: : "m"(var));		\
+		break;					\
+	default: __bad_percpu_size();			\
+	}						\
+})

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#217: FILE: include/asm-x86/percpu.h:153:
+		asm(op "b "__percpu_seg"%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#221: FILE: include/asm-x86/percpu.h:157:
+		asm(op "w "__percpu_seg"%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#225: FILE: include/asm-x86/percpu.h:161:
+		asm(op "l "__percpu_seg"%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#229: FILE: include/asm-x86/percpu.h:165:
+		asm(op "q "__percpu_seg"%0"		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#232: FILE: include/asm-x86/percpu.h:168:
+	default: __bad_percpu_size();			\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#236: FILE: include/asm-x86/percpu.h:172:
+#define percpu_cmpxchg_op(var, old, new)				\
+({									\
+	typeof(var) prev;						\
+	switch (sizeof(var)) {						\
+	case 1:								\
+		asm("cmpxchgb %b1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "q"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 2:								\
+		asm("cmpxchgw %w1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 4:								\
+		asm("cmpxchgl %k1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 8:								\
+		asm("cmpxchgq %1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	default:							\
+		__bad_percpu_size();					\
+	}								\
+	return prev;							\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'old' - possible side-effects?
#236: FILE: include/asm-x86/percpu.h:172:
+#define percpu_cmpxchg_op(var, old, new)				\
+({									\
+	typeof(var) prev;						\
+	switch (sizeof(var)) {						\
+	case 1:								\
+		asm("cmpxchgb %b1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "q"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 2:								\
+		asm("cmpxchgw %w1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 4:								\
+		asm("cmpxchgl %k1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 8:								\
+		asm("cmpxchgq %1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	default:							\
+		__bad_percpu_size();					\
+	}								\
+	return prev;							\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'new' - possible side-effects?
#236: FILE: include/asm-x86/percpu.h:172:
+#define percpu_cmpxchg_op(var, old, new)				\
+({									\
+	typeof(var) prev;						\
+	switch (sizeof(var)) {						\
+	case 1:								\
+		asm("cmpxchgb %b1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "q"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 2:								\
+		asm("cmpxchgw %w1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 4:								\
+		asm("cmpxchgl %k1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 8:								\
+		asm("cmpxchgq %1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	default:							\
+		__bad_percpu_size();					\
+	}								\
+	return prev;							\
+})

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#236: FILE: include/asm-x86/percpu.h:172:
+#define percpu_cmpxchg_op(var, old, new)				\
+({									\
+	typeof(var) prev;						\
+	switch (sizeof(var)) {						\
+	case 1:								\
+		asm("cmpxchgb %b1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "q"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 2:								\
+		asm("cmpxchgw %w1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 4:								\
+		asm("cmpxchgl %k1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	case 8:								\
+		asm("cmpxchgq %1, "__percpu_seg"%2"			\
+				     : "=a"(prev)			\
+				     : "r"(new), "m"(var), "0"(old)	\
+				     : "memory");			\
+		break;							\
+	default:							\
+		__bad_percpu_size();					\
+	}								\
+	return prev;							\
+})

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#241: FILE: include/asm-x86/percpu.h:177:
+		asm("cmpxchgb %b1, "__percpu_seg"%2"			\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#247: FILE: include/asm-x86/percpu.h:183:
+		asm("cmpxchgw %w1, "__percpu_seg"%2"			\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#253: FILE: include/asm-x86/percpu.h:189:
+		asm("cmpxchgl %k1, "__percpu_seg"%2"			\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#259: FILE: include/asm-x86/percpu.h:195:
+		asm("cmpxchgq %1, "__percpu_seg"%2"			\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#293: FILE: include/linux/percpu.h:27:
+#define DEFINE_PER_CPU_PAGE_ALIGNED(type, name)			\
+	__attribute__((__section__(".data.percpu.page_aligned")))	\
+	PER_CPU_ATTRIBUTES __typeof__(type) per_cpu__##name

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu.page_aligned") over __attribute__((__section__(".data.percpu.page_aligned")))
#294: FILE: include/linux/percpu.h:28:
+	__attribute__((__section__(".data.percpu.page_aligned")))	\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#298: FILE: include/linux/percpu.h:32:
+#define DEFINE_PER_CPU_FIRST(type, name)				\
+	__attribute__((__section__(".data.percpu.first")))		\
+	PER_CPU_ATTRIBUTES __typeof__(type) per_cpu__##name

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu.first") over __attribute__((__section__(".data.percpu.first")))
#299: FILE: include/linux/percpu.h:33:
+	__attribute__((__section__(".data.percpu.first")))		\

CHECK:SPACING: No space is necessary after a cast
#335: FILE: kernel/lockdep.c:612:
+		start = (unsigned long) __per_cpu_start + per_cpu_offset(i);

CHECK:SPACING: No space is necessary after a cast
#336: FILE: kernel/lockdep.c:613:
+		end   = (unsigned long) __per_cpu_start + PERCPU_ENOUGH_ROOM

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000255039.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 4 warnings, 21 checks, 260 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000255039.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
