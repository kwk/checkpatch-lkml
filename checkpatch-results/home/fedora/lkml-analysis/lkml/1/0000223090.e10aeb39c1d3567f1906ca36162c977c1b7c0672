WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#233: FILE: include/linux/ring_buffer.h:1:
+#ifndef _LINUX_RING_BUFFER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#283: FILE: include/linux/ring_buffer.h:51:
+unsigned ring_buffer_event_length(struct ring_buffer_event *event);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#305: FILE: include/linux/ring_buffer.h:73:
+ring_buffer_alloc(unsigned long size, unsigned flags);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#368: FILE: kernel/trace/ring_buffer.c:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#404: FILE: kernel/trace/ring_buffer.c:37:
+#define RB_ALIGNMENT		(1 << RB_ALIGNMENT_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#416: FILE: kernel/trace/ring_buffer.c:49:
+	unsigned length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#436: FILE: kernel/trace/ring_buffer.c:69:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#446: FILE: kernel/trace/ring_buffer.c:79:
+unsigned ring_buffer_event_length(struct ring_buffer_event *event)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#455: FILE: kernel/trace/ring_buffer.c:88:
+	BUG_ON(event->type != RINGBUF_TYPE_DATA);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buffer' may be better as '(buffer)' to avoid precedence issues
#472: FILE: kernel/trace/ring_buffer.c:105:
+#define for_each_buffer_cpu(buffer, cpu)		\
+	for_each_cpu_mask(cpu, buffer->cpumask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#490: FILE: kernel/trace/ring_buffer.c:123:
+			unsigned	 size;		/* size of page data */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#515: FILE: kernel/trace/ring_buffer.c:148:
+	spinlock_t			lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#531: FILE: kernel/trace/ring_buffer.c:164:
+	unsigned			pages;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#532: FILE: kernel/trace/ring_buffer.c:165:
+	unsigned			flags;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#537: FILE: kernel/trace/ring_buffer.c:170:
+	struct mutex			mutex;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#549: FILE: kernel/trace/ring_buffer.c:182:
+#define RB_WARN_ON(buffer, cond)			\
+	if (unlikely(cond)) {				\
+		atomic_inc(&buffer->record_disabled);	\
+		WARN_ON(1);				\
+		return -1;				\
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buffer' may be better as '(buffer)' to avoid precedence issues
#549: FILE: kernel/trace/ring_buffer.c:182:
+#define RB_WARN_ON(buffer, cond)			\
+	if (unlikely(cond)) {				\
+		atomic_inc(&buffer->record_disabled);	\
+		WARN_ON(1);				\
+		return -1;				\
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#549: FILE: kernel/trace/ring_buffer.c:182:
+#define RB_WARN_ON(buffer, cond)			\
+	if (unlikely(cond)) {				\
+		atomic_inc(&buffer->record_disabled);	\
+		WARN_ON(1);				\
+		return -1;				\
+	}

WARNING:TYPO_SPELLING: 'safty' may be misspelled - perhaps 'safety'?
#560: FILE: kernel/trace/ring_buffer.c:193:
+ * As a safty measure we check to make sure the data pages have not
         ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#579: FILE: kernel/trace/ring_buffer.c:212:
+static unsigned rb_head_size(struct ring_buffer_per_cpu *cpu_buffer)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#585: FILE: kernel/trace/ring_buffer.c:218:
+			     unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#591: FILE: kernel/trace/ring_buffer.c:224:
+	unsigned i;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#636: FILE: kernel/trace/ring_buffer.c:269:
+	cpu_buffer->head_page
+		= list_entry(cpu_buffer->pages.next, struct buffer_page, list);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#638: FILE: kernel/trace/ring_buffer.c:271:
+	cpu_buffer->tail_page
+		= list_entry(cpu_buffer->pages.next, struct buffer_page, list);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#669: FILE: kernel/trace/ring_buffer.c:302:
+struct ring_buffer *ring_buffer_alloc(unsigned long size, unsigned flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#738: FILE: kernel/trace/ring_buffer.c:371:
+rb_remove_pages(struct ring_buffer_per_cpu *cpu_buffer, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#742: FILE: kernel/trace/ring_buffer.c:375:
+	unsigned i;

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#745: FILE: kernel/trace/ring_buffer.c:378:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#748: FILE: kernel/trace/ring_buffer.c:381:
+		BUG_ON(list_empty(&cpu_buffer->pages));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#754: FILE: kernel/trace/ring_buffer.c:387:
+	BUG_ON(list_empty(&cpu_buffer->pages));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#762: FILE: kernel/trace/ring_buffer.c:395:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#766: FILE: kernel/trace/ring_buffer.c:399:
+		struct list_head *pages, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#770: FILE: kernel/trace/ring_buffer.c:403:
+	unsigned i;

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#773: FILE: kernel/trace/ring_buffer.c:406:
+	synchronize_sched();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#776: FILE: kernel/trace/ring_buffer.c:409:
+		BUG_ON(list_empty(pages));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#806: FILE: kernel/trace/ring_buffer.c:439:
+	unsigned nr_pages, rm_pages, new_pages;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#829: FILE: kernel/trace/ring_buffer.c:462:
+	if (size < buffer_size) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#831: FILE: kernel/trace/ring_buffer.c:464:
+		BUG_ON(nr_pages >= buffer->pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#850: FILE: kernel/trace/ring_buffer.c:483:
+	BUG_ON(nr_pages <= buffer->pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#868: FILE: kernel/trace/ring_buffer.c:501:
+	BUG_ON(!list_empty(&pages));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#895: FILE: kernel/trace/ring_buffer.c:528:
+static inline void *rb_page_index(struct buffer_page *page, unsigned index)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#929: FILE: kernel/trace/ring_buffer.c:562:
+	     head += rb_event_length(event)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#931: FILE: kernel/trace/ring_buffer.c:564:
+		BUG_ON(rb_null_event(event));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#984: FILE: kernel/trace/ring_buffer.c:617:
+rb_update_event(struct ring_buffer_event *event,
+			 unsigned type, unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#984: FILE: kernel/trace/ring_buffer.c:617:
+			 unsigned type, unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#984: FILE: kernel/trace/ring_buffer.c:617:
+			 unsigned type, unsigned length)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#989: FILE: kernel/trace/ring_buffer.c:622:
+	switch (type) {
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#995: FILE: kernel/trace/ring_buffer.c:628:
+			(RB_LEN_TIME_EXTEND + (RB_ALIGNMENT-1))
 			                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1001: FILE: kernel/trace/ring_buffer.c:634:
+			(RB_LEN_TIME_STAMP + (RB_ALIGNMENT-1))
 			                                  ^

CHECK:BRACES: Unbalanced braces around else statement
#1010: FILE: kernel/trace/ring_buffer.c:643:
+		} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1012: FILE: kernel/trace/ring_buffer.c:645:
+				(length + (RB_ALIGNMENT-1))
 				                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1016: FILE: kernel/trace/ring_buffer.c:649:
+		BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1020: FILE: kernel/trace/ring_buffer.c:653:
+static inline unsigned rb_calculate_event_length(unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1020: FILE: kernel/trace/ring_buffer.c:653:
+static inline unsigned rb_calculate_event_length(unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1039: FILE: kernel/trace/ring_buffer.c:672:
+		  unsigned type, unsigned long length, u64 *ts)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1082: FILE: kernel/trace/ring_buffer.c:715:
+	BUG_ON(tail + length > BUF_PAGE_SIZE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1098: FILE: kernel/trace/ring_buffer.c:731:
+		printk(KERN_WARNING "Delta way too big! %llu"

WARNING:SPLIT_STRING: quoted string split across lines
#1099: FILE: kernel/trace/ring_buffer.c:732:
+		printk(KERN_WARNING "Delta way too big! %llu"
+		       " ts=%llu write stamp = %llu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1132: FILE: kernel/trace/ring_buffer.c:765:
+		      unsigned type, unsigned long length)

WARNING:TYPO_SPELLING: 'reseverd' may be misspelled - perhaps 'reserved'?
#1173: FILE: kernel/trace/ring_buffer.c:806:
+ * Returns a reseverd event on the ring buffer to copy directly to.
              ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1276: FILE: kernel/trace/ring_buffer.c:909:
+int ring_buffer_write(struct ring_buffer *buffer,
+			unsigned long length,

WARNING:TYPO_SPELLING: 'truely' may be misspelled - perhaps 'truly'?
#1383: FILE: kernel/trace/ring_buffer.c:1016:
+ * to truely enable the writing (much like preempt_disable).
       ^^^^^^

WARNING:TYPO_SPELLING: 'truely' may be misspelled - perhaps 'truly'?
#1417: FILE: kernel/trace/ring_buffer.c:1050:
+ * to truely enable the writing (much like preempt_disable).
       ^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1562: FILE: kernel/trace/ring_buffer.c:1195:
+		BUG();

WARNING:RETURN_VOID: void function return statements are not generally useful
#1565: FILE: kernel/trace/ring_buffer.c:1198:
+	return;
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1593: FILE: kernel/trace/ring_buffer.c:1226:
+		BUG();

WARNING:RETURN_VOID: void function return statements are not generally useful
#1596: FILE: kernel/trace/ring_buffer.c:1229:
+	return;
+}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1601: FILE: kernel/trace/ring_buffer.c:1234:
+	unsigned length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1607: FILE: kernel/trace/ring_buffer.c:1240:
+		BUG_ON(cpu_buffer->head_page == cpu_buffer->tail_page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1624: FILE: kernel/trace/ring_buffer.c:1257:
+	BUG_ON((cpu_buffer->head_page == cpu_buffer->tail_page) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_buffer->head >= cpu_buffer->head_page->size'
#1632: FILE: kernel/trace/ring_buffer.c:1265:
+	if ((cpu_buffer->head >= cpu_buffer->head_page->size) &&
+	    (cpu_buffer->head_page != cpu_buffer->tail_page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_buffer->head_page != cpu_buffer->tail_page'
#1632: FILE: kernel/trace/ring_buffer.c:1265:
+	if ((cpu_buffer->head >= cpu_buffer->head_page->size) &&
+	    (cpu_buffer->head_page != cpu_buffer->tail_page))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1642: FILE: kernel/trace/ring_buffer.c:1275:
+	unsigned length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1651: FILE: kernel/trace/ring_buffer.c:1284:
+		BUG_ON(iter->head_page == cpu_buffer->tail_page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1665: FILE: kernel/trace/ring_buffer.c:1298:
+	BUG_ON((iter->head_page == cpu_buffer->tail_page) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iter->head >= iter->head_page->size'
#1673: FILE: kernel/trace/ring_buffer.c:1306:
+	if ((iter->head >= iter->head_page->size) &&
+	    (iter->head_page != cpu_buffer->tail_page))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iter->head_page != cpu_buffer->tail_page'
#1673: FILE: kernel/trace/ring_buffer.c:1306:
+	if ((iter->head >= iter->head_page->size) &&
+	    (iter->head_page != cpu_buffer->tail_page))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1728: FILE: kernel/trace/ring_buffer.c:1361:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1785: FILE: kernel/trace/ring_buffer.c:1418:
+		BUG();

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#1848: FILE: kernel/trace/ring_buffer.c:1481:
+	synchronize_sched();

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1909: FILE: kernel/trace/ring_buffer.c:1542:
+	cpu_buffer->head_page
+		= list_entry(cpu_buffer->pages.next, struct buffer_page, list);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1911: FILE: kernel/trace/ring_buffer.c:1544:
+	cpu_buffer->tail_page
+		= list_entry(cpu_buffer->pages.next, struct buffer_page, list);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1913: FILE: kernel/trace/ring_buffer.c:1546:
+	cpu_buffer->head = cpu_buffer->tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223090.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 58 warnings, 24 checks, 1823 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223090.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
