WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
This patch introduces the ridr_get_new_above() routine, and some common code

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ridr *' should also have an identifier name
#49: FILE: include/linux/ridr.h:47:
+int ridr_get_new_above(struct ridr *, void *, int, int *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#49: FILE: include/linux/ridr.h:47:
+int ridr_get_new_above(struct ridr *, void *, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#49: FILE: include/linux/ridr.h:47:
+int ridr_get_new_above(struct ridr *, void *, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#49: FILE: include/linux/ridr.h:47:
+int ridr_get_new_above(struct ridr *, void *, int, int *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: include/linux/idr.h:84:
+static inline void _idr_set_new_slot(struct idr_layer *new,
+						struct idr_layer *p)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#80: FILE: include/linux/idr.h:93:
+int _idr_sub_alloc(int *, int *, struct idr_layer **, struct idr_layer **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#80: FILE: include/linux/idr.h:93:
+int _idr_sub_alloc(int *, int *, struct idr_layer **, struct idr_layer **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct idr_layer **' should also have an identifier name
#80: FILE: include/linux/idr.h:93:
+int _idr_sub_alloc(int *, int *, struct idr_layer **, struct idr_layer **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct idr_layer **' should also have an identifier name
#80: FILE: include/linux/idr.h:93:
+int _idr_sub_alloc(int *, int *, struct idr_layer **, struct idr_layer **);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: lib/idr.c:119:
+int _idr_sub_alloc(int *cur_id, int *layer, struct idr_layer **cur_ptr,
+	struct idr_layer **pa)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id >= MAX_ID_BIT'
#150: FILE: lib/idr.c:163:
+	if ((id >= MAX_ID_BIT) || (id < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id < 0'
#150: FILE: lib/idr.c:163:
+	if ((id >= MAX_ID_BIT) || (id < 0))

WARNING:LINE_SPACING: Missing a blank line after declarations
#209: FILE: lib/idr.c:194:
+		int action = _idr_sub_alloc(&id, &l, &p, pa);
+		switch (action) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#224: FILE: lib/idr.c:209:
+		BUG_ON(m < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#334: FILE: lib/ridr.c:21:
+	if ((q = idp->id_free)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#341: FILE: lib/ridr.c:28:
+	return(q);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: lib/ridr.c:78:
+static int sub_alloc(struct ridr *idp, int *starting_id,
+			struct ridr_layer **rpa, struct idr_layer **pa)

WARNING:LINE_SPACING: Missing a blank line after declarations
#371: FILE: lib/ridr.c:97:
+		int action = _idr_sub_alloc(&id, &l, &p, pa);
+		switch (action) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#386: FILE: lib/ridr.c:112:
+		BUG_ON(m < 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: lib/ridr.c:135:
+static int ridr_get_empty_slot(struct ridr *idp, int starting_id,
+			      struct ridr_layer **rpa, struct idr_layer **pa)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#443: FILE: lib/ridr.c:169:
+				rnew->idr.bitmap = rnew->idr.count = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#457: FILE: lib/ridr.c:183:
+	return(v);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: lib/ridr.c:199:
+		rcu_assign_pointer(pa[0]->ary[id & IDR_MASK],
+				(struct ridr_layer *)ptr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000288450.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 13 warnings, 8 checks, 441 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000288450.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
