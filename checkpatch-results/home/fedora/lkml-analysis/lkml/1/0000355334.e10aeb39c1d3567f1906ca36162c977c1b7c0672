WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
Content-Disposition: attachment; filename*0=0001-Reuseable-SOC-core-code-suitable-for-multifunction-c.pat; filename*1=ch

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#57: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: drivers/mfd/soc-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#91: FILE: drivers/mfd/soc-core.c:30:
+		struct resource *res = dev->resource;
+		platform_device_unregister(dev++);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#98: FILE: drivers/mfd/soc-core.c:37:
+#define SIGNED_SHIFT(val, shift) ((shift) >= 0 ? ((val) << (shift)) : ((val) >> -(shift)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'shift' - possible side-effects?
#98: FILE: drivers/mfd/soc-core.c:37:
+#define SIGNED_SHIFT(val, shift) ((shift) >= 0 ? ((val) << (shift)) : ((val) >> -(shift)))

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#108: FILE: drivers/mfd/soc-core.c:47:
+	devices = kzalloc(nr_devs * sizeof(struct platform_device), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#125: FILE: drivers/mfd/soc-core.c:64:
+		res = kzalloc(blk->num_resources * sizeof (struct resource), GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#125: FILE: drivers/mfd/soc-core.c:64:
+		res = kzalloc(blk->num_resources * sizeof (struct resource), GFP_KERNEL);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#144: FILE: drivers/mfd/soc-core.c:83:
+				res[r].start = base + SIGNED_SHIFT(blk->res[r].start, relative_addr_shift);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#145: FILE: drivers/mfd/soc-core.c:84:
+				res[r].end   = base + SIGNED_SHIFT(blk->res[r].end,   relative_addr_shift);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#159: FILE: drivers/mfd/soc-core.c:98:
+		printk(KERN_INFO "SoC: registering %s\n", blk->name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#174: FILE: drivers/mfd/soc-core.h:1:
+/*

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#213: FILE: include/linux/ioport.h:61:
+#define IORESOURCE_IRQ_SOC_SUBDEVICE    (1<<5)
                                           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#213: FILE: include/linux/ioport.h:61:
+#define IORESOURCE_IRQ_SOC_SUBDEVICE    (1<<5)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000355334.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 4 checks, 145 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000355334.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
