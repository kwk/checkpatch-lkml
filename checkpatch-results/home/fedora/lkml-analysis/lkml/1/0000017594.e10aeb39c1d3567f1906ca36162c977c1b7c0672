CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: tools/perf/bench/bench.h:7:
+extern int bench_mem_memmove(int argc, const char **argv,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: tools/perf/bench/bench.h:9:
+extern int bench_mem_memset(int argc, const char **argv,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#73: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#277: FILE: tools/perf/bench/mem.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: tools/perf/bench/mem.c:44:
+	OPT_STRING('l', "length", &length_str, "1MB",
+		    "Specify length of memory to copy. "

WARNING:SPLIT_STRING: quoted string split across lines
#321: FILE: tools/perf/bench/mem.c:45:
+		    "Specify length of memory to copy. "
+		    "available unit: B, MB, GB (upper and lower)"),

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: tools/perf/bench/mem.c:47:
+	OPT_STRING('r', "routine", &routine, "default",
+		    "Specify routine to test"),

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#363: FILE: tools/perf/bench/mem.c:87:
+	if (clock_fd < 0 && errno == ENOSYS)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#366: FILE: tools/perf/bench/mem.c:90:
+		BUG_ON(clock_fd < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#375: FILE: tools/perf/bench/mem.c:99:
+	BUG_ON(ret != sizeof(u64));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#386: FILE: tools/perf/bench/mem.c:110:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#423: FILE: tools/perf/bench/mem.c:147:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#432: FILE: tools/perf/bench/mem.c:156:
+			if (bps < K)
[...]
+			else if (bps < K * K)
[...]
+			else if (bps < K * K * K)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#438: FILE: tools/perf/bench/mem.c:162:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#445: FILE: tools/perf/bench/mem.c:169:
+		if (use_clock) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#448: FILE: tools/perf/bench/mem.c:172:
+		} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#457: FILE: tools/perf/bench/mem.c:181:
+	return;
+}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#469: FILE: tools/perf/bench/mem.c:193:
+	clock_start = clock_end = clock_diff = 0ULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#503: FILE: tools/perf/bench/mem.c:227:
+	if (use_clock) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#506: FILE: tools/perf/bench/mem.c:230:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#507: FILE: tools/perf/bench/mem.c:231:
+		BUG_ON(gettimeofday(&tv_start, NULL));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#516: FILE: tools/perf/bench/mem.c:240:
+		BUG_ON(gettimeofday(&tv_end, NULL));

CHECK:BRACES: braces {} should be used on all arms of this statement
#578: FILE: tools/perf/bench/mem.c:302:
+	if (use_clock) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#581: FILE: tools/perf/bench/mem.c:305:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#582: FILE: tools/perf/bench/mem.c:306:
+		BUG_ON(gettimeofday(&tv_start, NULL));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#591: FILE: tools/perf/bench/mem.c:315:
+		BUG_ON(gettimeofday(&tv_end, NULL));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000017594.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 15 checks, 354 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000017594.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
