WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
for constructing (or how not to construct) a poll-driven shared-memory driver

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: net/9p/Kconfig:41:
+config NET_9P_SHM
+	depends on NET_9P
+	tristate "9p Shared Memory Transport (Experimental)"
+	help
+	  This builds support for a shared memory transport which
+	  can be used on XenPPC to mount 9p between DomU and Dom0.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#84: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#89: FILE: net/9p/trans_shm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#121: FILE: net/9p/trans_shm.c:33:
+ *  51 Franklin Street, Fifth Floor$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#141: FILE: net/9p/trans_shm.c:53:
+enum
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Shm_Idle>
#142: FILE: net/9p/trans_shm.c:54:
+	Shm_Idle =		0,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#143: FILE: net/9p/trans_shm.c:55:
+^IShm_Announcing = ^I1,$

CHECK:CAMELCASE: Avoid CamelCase: <Shm_Announcing>
#143: FILE: net/9p/trans_shm.c:55:
+	Shm_Announcing = 	1,

CHECK:CAMELCASE: Avoid CamelCase: <Shm_Announced>
#144: FILE: net/9p/trans_shm.c:56:
+	Shm_Announced =		2,

CHECK:CAMELCASE: Avoid CamelCase: <Shm_Connecting>
#145: FILE: net/9p/trans_shm.c:57:
+	Shm_Connecting =	3,

CHECK:CAMELCASE: Avoid CamelCase: <Shm_Connected>
#146: FILE: net/9p/trans_shm.c:58:
+	Shm_Connected =		4,

CHECK:CAMELCASE: Avoid CamelCase: <Shm_Hungup>
#147: FILE: net/9p/trans_shm.c:59:
+	Shm_Hungup =		5,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#149: FILE: net/9p/trans_shm.c:61:
+^IShmaddrlen = ^I^I255,$

CHECK:CAMELCASE: Avoid CamelCase: <Shmaddrlen>
#149: FILE: net/9p/trans_shm.c:61:
+	Shmaddrlen = 		255,

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#153: FILE: net/9p/trans_shm.c:65:
+enum
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: net/9p/trans_shm.c:74:
+^IHANDSHAKE_POLL = ^I100000000$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#166: FILE: net/9p/trans_shm.c:78:
+struct chan
+{

CHECK:CAMELCASE: Avoid CamelCase: <Chan_listen>
#174: FILE: net/9p/trans_shm.c:86:
+	Chan_listen,

CHECK:CAMELCASE: Avoid CamelCase: <Chan_connected>
#175: FILE: net/9p/trans_shm.c:87:
+	Chan_connected,

CHECK:CAMELCASE: Avoid CamelCase: <Chan_hungup>
#176: FILE: net/9p/trans_shm.c:88:
+	Chan_hungup

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#181: FILE: net/9p/trans_shm.c:93:
+struct chan_pipe
+{

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#190: FILE: net/9p/trans_shm.c:102:
+#define CHUNK_SIZE	(64<<20)
                   	   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#195: FILE: net/9p/trans_shm.c:107:
+/*
+ * UGLY HACK: static buffer just like in libOS so we can easily

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#200: FILE: net/9p/trans_shm.c:112:
+#define BIG_UGLY_BUFFER_SZ 8*1024
                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#200: FILE: net/9p/trans_shm.c:112:
+#define BIG_UGLY_BUFFER_SZ 8*1024

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#201: FILE: net/9p/trans_shm.c:113:
+static char big_ugly_buffer[sizeof(struct chan_pipe)+(BIG_UGLY_BUFFER_SZ*2)];
                                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#201: FILE: net/9p/trans_shm.c:113:
+static char big_ugly_buffer[sizeof(struct chan_pipe)+(BIG_UGLY_BUFFER_SZ*2)];
                                                                         ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#204: FILE: net/9p/trans_shm.c:116:
+/*
+ * (expr) may be as much as (limit) "below" zero (in an unsigned sense).

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'limit' - possible side-effects?
#208: FILE: net/9p/trans_shm.c:120:
+#define CIRCULAR(expr, limit) (((expr) + (limit)) % (limit))

CHECK:CAMELCASE: Avoid CamelCase: <Disconnected>
#273: FILE: net/9p/trans_shm.c:185:
+	if (trans && trans->status != Disconnected)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->magic == 0xDEADDEAD'
#282: FILE: net/9p/trans_shm.c:194:
+		if ((p->magic == 0xDEADDEAD) || (p->state == Shm_Hungup)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->state == Shm_Hungup'
#282: FILE: net/9p/trans_shm.c:194:
+		if ((p->magic == 0xDEADDEAD) || (p->state == Shm_Hungup)) {

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#286: FILE: net/9p/trans_shm.c:198:
+		yield();

WARNING:LINE_SPACING: Missing a blank line after declarations
#292: FILE: net/9p/trans_shm.c:204:
+		const char *src;
+		src = get_read_chunk(c, p->buffers+p->buflen, p->buflen,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#292: FILE: net/9p/trans_shm.c:204:
+		src = get_read_chunk(c, p->buffers+p->buflen, p->buflen,
 		                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: net/9p/trans_shm.c:205:
+		src = get_read_chunk(c, p->buffers+p->buflen, p->buflen,
+								&thislen);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->magic == 0xDEADDEAD'
#295: FILE: net/9p/trans_shm.c:207:
+			if ((p->magic == 0xDEADDEAD) ||
+						(p->state == Shm_Hungup)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->state == Shm_Hungup'
#295: FILE: net/9p/trans_shm.c:207:
+			if ((p->magic == 0xDEADDEAD) ||
+						(p->state == Shm_Hungup)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: net/9p/trans_shm.c:208:
+			if ((p->magic == 0xDEADDEAD) ||
+						(p->state == Shm_Hungup)) {

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#300: FILE: net/9p/trans_shm.c:212:
+			yield();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#339: FILE: net/9p/trans_shm.c:251:
+	while (!check_write_buffer(c, p->buflen)) {
+		yield();		/* TODO: Something more friendly */
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#340: FILE: net/9p/trans_shm.c:252:
+		yield();		/* TODO: Something more friendly */

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#348: FILE: net/9p/trans_shm.c:260:
+			yield();

CHECK:SPACING: No space is necessary after a cast
#376: FILE: net/9p/trans_shm.c:288:
+	if (trans && trans->status == (int) Shm_Connected)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#411: FILE: net/9p/trans_shm.c:323:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct p9_trans)...)
#417: FILE: net/9p/trans_shm.c:329:
+	trans = kmalloc(sizeof(struct p9_trans), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#426: FILE: net/9p/trans_shm.c:338:
+	chan = (struct chan_pipe *) big_ugly_buffer;

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#429: FILE: net/9p/trans_shm.c:341:
+		yield();

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#432: FILE: net/9p/trans_shm.c:344:
+		yield();

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#436: FILE: net/9p/trans_shm.c:348:
+		yield();

CHECK:SPACING: No space is necessary after a cast
#439: FILE: net/9p/trans_shm.c:351:
+	trans->priv = (void *) chan;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#457: FILE: net/9p/trans_shm.c:369:
+static void __exit p9_trans_shm_exit(void) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#458: FILE: net/9p/trans_shm.c:370:
+	printk(KERN_ERR "Removal of 9p transports not implemented\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#459: FILE: net/9p/trans_shm.c:371:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385946.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 20 warnings, 28 checks, 404 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385946.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
