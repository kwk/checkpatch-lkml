ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0l
#52: FILE: mm/page_alloc.c:104:
+unsigned long __meminitdata nr_kernel_pages = 0l;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0l
#53: FILE: mm/page_alloc.c:105:
+unsigned long __meminitdata nr_all_pages = 0l;

ERROR:INITIALISED_STATIC: do not initialise statics to 0l
#54: FILE: mm/page_alloc.c:106:
+static unsigned long __initdata dma_reserve = 0l;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:MISPLACED_INIT: __initdata should be placed after dma_reserve
#54: FILE: mm/page_alloc.c:106:
+static unsigned long __initdata dma_reserve = 0l;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: mm/page_alloc.c:129:
+  struct node_active_region __initdata early_node_map[MAX_ACTIVE_REGIONS] = {{0}};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: mm/page_alloc.c:130:
+  int __initdata nr_nodemap_entries = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: mm/page_alloc.c:131:
+  unsigned long __initdata arch_zone_lowest_possible_pfn[MAX_NR_ZONES] = {0};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: mm/page_alloc.c:132:
+  unsigned long __initdata arch_zone_highest_possible_pfn[MAX_NR_ZONES] = {0};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: mm/page_alloc.c:134:
+  unsigned long __initdata node_boundary_start_pfn[MAX_NUMNODES] = {0};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: mm/page_alloc.c:135:
+  unsigned long __initdata node_boundary_end_pfn[MAX_NUMNODES] = {0};$

WARNING:MISPLACED_INIT: __meminitdata should be placed after node_load[MAX_NUMNODES]
#83: FILE: mm/page_alloc.c:1779:
+static int __meminitdata node_load[MAX_NUMNODES] = {0};

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469428.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 8 warnings, 0 checks, 47 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469428.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
