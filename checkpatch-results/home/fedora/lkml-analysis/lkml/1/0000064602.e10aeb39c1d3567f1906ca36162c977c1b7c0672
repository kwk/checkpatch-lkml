WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
Can you or others give a hint of what might be going wrong or what I can do?

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '457533a7d3402d1d91fbc125c8bd1bd16dcd3cd4', maybe rebased or not pulled?
#88: 
commit 457533a7d3402d1d91fbc125c8bd1bd16dcd3cd4

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#104: 
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#105: 
    Cc: Hidetoshi Seto <seto.hidetoshi@jp.fujitsu.com>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#106: 
    Cc: Tony Luck <tony.luck@intel.com>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#107: 
    Cc: Jeremy Fitzhardinge <jeremy@xensource.com>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#108: 
    Cc: Chris Wright <chrisw@sous-sol.org>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#109: 
    Cc: Michael Neuling <mikey@neuling.org>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Acked-by:
#110: 
    Acked-by: Paul Mackerras <paulus@samba.org>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#111: 
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#230: FILE: include/linux/kernel_stat.h:55:
+extern void account_user_time(struct task_struct *, cputime_t, cputime_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/kernel_stat.h:56:
+extern void account_system_time(struct task_struct *, int, cputime_t, cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#231: FILE: include/linux/kernel_stat.h:56:
+extern void account_system_time(struct task_struct *, int, cputime_t, cputime_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#231: FILE: include/linux/kernel_stat.h:56:
+extern void account_system_time(struct task_struct *, int, cputime_t, cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#231: FILE: include/linux/kernel_stat.h:56:
+extern void account_system_time(struct task_struct *, int, cputime_t, cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#231: FILE: include/linux/kernel_stat.h:56:
+extern void account_system_time(struct task_struct *, int, cputime_t, cputime_t);

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#420: 
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#420: 
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#548: FILE: arch/x86/xen/time.c:137:
+	   including any left-overs from last time. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#562: FILE: arch/x86/xen/time.c:148:
+	   including any left-overs from last time. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#583: FILE: include/linux/kernel_stat.h:57:
+extern void account_steal_time(cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#583: FILE: include/linux/kernel_stat.h:57:
+extern void account_steal_time(cputime_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#584: FILE: include/linux/kernel_stat.h:58:
+extern void account_idle_time(cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#584: FILE: include/linux/kernel_stat.h:58:
+extern void account_idle_time(cputime_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#586: FILE: include/linux/kernel_stat.h:60:
+extern void account_process_tick(struct task_struct *, int user);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#586: FILE: include/linux/kernel_stat.h:60:
+extern void account_process_tick(struct task_struct *, int user);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#587: FILE: include/linux/kernel_stat.h:61:
+extern void account_steal_ticks(unsigned long ticks);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#588: FILE: include/linux/kernel_stat.h:62:
+extern void account_idle_ticks(unsigned long ticks);

WARNING:BAD_SIGN_OFF: Do not use whitespace before Reported-by:
#809: 
    Reported-by: Andrew Gallatin <gallatin@myri.com>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Re-reported-by:
#810: 
    Re-reported-by: Andrew Morton <akpm@linux-foundation.org>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#811: 
    Signed-off-by: Eric Dumazet <dada1@cosmosbay.com>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Acked-by:
#812: 
    Acked-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#813: 
    Cc: rick.jones2@hp.com

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#814: 
    Cc: brice@myri.com

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#815: 
    Cc: Paul Mackerras <paulus@samba.org>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#816: 
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>

WARNING:BAD_SIGN_OFF: Duplicate signature
#816: 
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#818: 
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1040: FILE: include/linux/sched.h:246:
+extern int grunqueue_is_locked(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1263: FILE: include/linux/sched.h:1606:
+extern void sched_exit(struct task_struct *p);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1340: FILE: init/main.c:803:
+	printk(KERN_INFO"Running BFS CPU scheduler v0.300 by Con Kolivas.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1340: FILE: init/main.c:803:
+	printk(KERN_INFO"Running BFS CPU scheduler v0.300 by Con Kolivas.\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1482: FILE: kernel/posix-cpu-timers.c:1023:
+		    tsk->rt_timeout > DIV_ROUND_UP(hard, USEC_PER_SEC/HZ)) {
 		                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1491: FILE: kernel/posix-cpu-timers.c:1031:
+		if (tsk->rt_timeout > DIV_ROUND_UP(*soft, USEC_PER_SEC/HZ)) {
 		                                                      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1526: FILE: kernel/sched_bfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1527: FILE: kernel/sched_bfs.c:2:
+ *  kernel/sched_bfs.c, was sched.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1560: FILE: kernel/sched_bfs.c:35:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#1563: FILE: kernel/sched_bfs.c:38:
+#include <asm/mmu_context.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'policy' - possible side-effects?
#1602: FILE: kernel/sched_bfs.c:77:
+#define is_rt_policy(policy)	((policy) == SCHED_FIFO || \
+					(policy) == SCHED_RR)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1624: FILE: kernel/sched_bfs.c:99:
+#define USER_PRIO(p)		((p)-MAX_RT_PRIO)
                     		    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1627: FILE: kernel/sched_bfs.c:102:
+#define SCHED_PRIO(p)		((p)+MAX_RT_PRIO)
                      		    ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1688: FILE: kernel/sched_bfs.c:163:
+	spinlock_t lock;

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__sd' - possible side-effects?
#1818: FILE: kernel/sched_bfs.c:293:
+#define for_each_domain(cpu, __sd) \
+	for (__sd = rcu_dereference(cpu_rq(cpu)->sd); __sd; __sd = __sd->parent)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1906: FILE: kernel/sched_bfs.c:381:
+	struct rq *rq = task_grq_lock(p, flags);
+	update_rq_clock(rq);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1923: FILE: kernel/sched_bfs.c:398:
+	struct rq *rq = task_grq_lock_irq(p);
+	update_rq_clock(rq);

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1948: FILE: kernel/sched_bfs.c:423:
+	return spin_is_locked(&grq.lock);

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:MEMORY_BARRIER: memory barrier without comment
#2005: FILE: kernel/sched_bfs.c:480:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2058: FILE: kernel/sched_bfs.c:533:
+		if ((idleprio_task(p) && idleprio_suitable(p)) ||
+		   (iso_task(p) && isoprio_suitable()))

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2124: FILE: kernel/sched_bfs.c:599:
+	return (cpus_intersects(p->cpus_allowed, grq.cpu_idle_map));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:TYPO_SPELLING: 'successfuly' may be misspelled - perhaps 'successfully'?
#2275: FILE: kernel/sched_bfs.c:750:
+	 * successfuly executed on another CPU. We must ensure that updates of
 	   ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#2300: FILE: kernel/sched_bfs.c:775:
+	if (deactivate)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2302: FILE: kernel/sched_bfs.c:777:
+	else {

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#2487: FILE: kernel/sched_bfs.c:962:
+ * NOTE: this function doesnt have to take the runqueue lock,
                        ^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu != smp_processor_id()'
#2499: FILE: kernel/sched_bfs.c:974:
+	if ((cpu != smp_processor_id()) && task_curr(p))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2522: FILE: kernel/sched_bfs.c:997:
+		if ((p->prio == rq->rq_prio &&
+		    time_before(p_deadline, rq->rq_deadline)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#2541: FILE: kernel/sched_bfs.c:1016:
+	if (likely(cpu_isset(this_rq->cpu, tmp))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2546: FILE: kernel/sched_bfs.c:1021:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2565: FILE: kernel/sched_bfs.c:1040:
+		if (rq_prio > highest_prio || (rq_prio == highest_prio &&
+		    time_after(rq->rq_deadline, latest_deadline))) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#2577: FILE: kernel/sched_bfs.c:1052:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2628: FILE: kernel/sched_bfs.c:1103:
+	trace_mark(kernel_sched_wakeup,
+		"pid %d state %ld ## rq %p task %p rq->curr %p",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2680: FILE: kernel/sched_bfs.c:1155:
+	p->sched_time = p->stime_pc = p->utime_pc = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACING: space prohibited before semicolon
#2736: FILE: kernel/sched_bfs.c:1211:
+	rq = task_grq_lock(p, &flags); ;

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#2736: FILE: kernel/sched_bfs.c:1211:
+	rq = task_grq_lock(p, &flags); ;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2738: FILE: kernel/sched_bfs.c:1213:
+	BUG_ON(p->state != TASK_RUNNING);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2742: FILE: kernel/sched_bfs.c:1217:
+	trace_mark(kernel_sched_wakeup_new,
+		"pid %d state %ld ## rq %p task %p rq->curr %p",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#2744: FILE: kernel/sched_bfs.c:1219:
+	if (!(clone_flags & CLONE_VM) && rq->curr == parent &&
[...]
+			resched_task(parent);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2744: FILE: kernel/sched_bfs.c:1219:
+	if (!(clone_flags & CLONE_VM) && rq->curr == parent &&
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2745: FILE: kernel/sched_bfs.c:1220:
+	if (!(clone_flags & CLONE_VM) && rq->curr == parent &&
+		!suitable_idle_cpus(p)) {

CHECK:BRACES: Unbalanced braces around else statement
#2752: FILE: kernel/sched_bfs.c:1227:
+	} else

WARNING:REPEATED_WORD: Possible repeated word: 'being'
#2796: FILE: kernel/sched_bfs.c:1271:
+ * preempt_notifier_register - tell me when current is being being preempted & rescheduled

ERROR:CODE_INDENT: code indent should use tabs where possible
#2917: FILE: kernel/sched_bfs.c:1392:
+^I ^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2917: FILE: kernel/sched_bfs.c:1392:
+^I ^I */$

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#2934: FILE: kernel/sched_bfs.c:1409:
+	/* In this case, finish_task_switch does not reenable preemption */
 	                                             ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2953: FILE: kernel/sched_bfs.c:1428:
+	trace_mark(kernel_sched_schedule,
+		"prev_pid %d next_pid %d prev_state %ld "

WARNING:SPLIT_STRING: quoted string split across lines
#2954: FILE: kernel/sched_bfs.c:1429:
+		"prev_pid %d next_pid %d prev_state %ld "
+		"## rq %p prev %p next %p",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#2966: FILE: kernel/sched_bfs.c:1441:
+	if (unlikely(!mm)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2970: FILE: kernel/sched_bfs.c:1445:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#3099: FILE: kernel/sched_bfs.c:1574:
+	if (hardirq_count() - hardirq_offset)
[...]
+	else if (softirq_count()) {
[...]
+	} else {
[...]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'NS' may be better as '(NS)' to avoid precedence issues
#3149: FILE: kernel/sched_bfs.c:1624:
+#define NS_TO_PC(NS)	(NS * 100 / JIFFIES_TO_NS(1))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3205: FILE: kernel/sched_bfs.c:1680:
+	rq->rq_last_ran = rq->timekeep_clock = rq->clock;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3277: FILE: kernel/sched_bfs.c:1752:
+{
+

WARNING:TYPO_SPELLING: 'alloted' may be misspelled - perhaps 'allotted'?
#3355: FILE: kernel/sched_bfs.c:1830:
+ * Test if SCHED_ISO tasks have run longer than their alloted period as RT
                                                       ^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#3403: FILE: kernel/sched_bfs.c:1878:
+	if ((rt_queue(rq) || (iso_queue(rq) && !grq.iso_refractory))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3406: FILE: kernel/sched_bfs.c:1881:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val < PREEMPT_MASK'
#3501: FILE: kernel/sched_bfs.c:1976:
+	if (DEBUG_LOCKS_WARN_ON((val < PREEMPT_MASK) &&
+			!(preempt_count() & PREEMPT_MASK)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3502: FILE: kernel/sched_bfs.c:1977:
+	if (DEBUG_LOCKS_WARN_ON((val < PREEMPT_MASK) &&
+			!(preempt_count() & PREEMPT_MASK)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3628: FILE: kernel/sched_bfs.c:2103:
+	printk(KERN_ERR "BUG: scheduling while atomic: %s/%d/0x%08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3629: FILE: kernel/sched_bfs.c:2104:
+	printk(KERN_ERR "BUG: scheduling while atomic: %s/%d/0x%08x\n",
+		prev->comm, prev->pid, preempt_count());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3732: FILE: kernel/sched_bfs.c:2207:
+		if (unlikely(!cpus_intersects(prev->cpus_allowed,
+		    cpumask_of_cpu(cpu))))

ERROR:CODE_INDENT: code indent should use tabs where possible
#3733: FILE: kernel/sched_bfs.c:2208:
+^I^I    ^Iresched_suitable_idle(prev);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3733: FILE: kernel/sched_bfs.c:2208:
+^I^I    ^Iresched_suitable_idle(prev);$

CHECK:BRACES: braces {} should be used on all arms of this statement
#3753: FILE: kernel/sched_bfs.c:2228:
+	if (likely(prev != next)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3771: FILE: kernel/sched_bfs.c:2246:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#3778: FILE: kernel/sched_bfs.c:2253:
+ ^I^Igoto need_resched;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3778: FILE: kernel/sched_bfs.c:2253:
+ ^I^Igoto need_resched;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3778: FILE: kernel/sched_bfs.c:2253:
+ ^I^Igoto need_resched;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3824: FILE: kernel/sched_bfs.c:2299:
+	BUG_ON(ti->preempt_count || !irqs_disabled());

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3843: FILE: kernel/sched_bfs.c:2318:
+int default_wake_function(wait_queue_t *curr, unsigned mode, int sync,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3860: FILE: kernel/sched_bfs.c:2335:
+void __wake_up_common(wait_queue_head_t *q, unsigned int mode,
+			     int nr_exclusive, int sync, void *key)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3866: FILE: kernel/sched_bfs.c:2341:
+		unsigned flags = curr->flags;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3869: FILE: kernel/sched_bfs.c:2344:
+		if (curr->func(curr, mode, sync, key) &&
+				(flags & WQ_FLAG_EXCLUSIVE) && !--nr_exclusive)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3885: FILE: kernel/sched_bfs.c:2360:
+void __wake_up(wait_queue_head_t *q, unsigned int mode,
+			int nr_exclusive, void *key)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#3949: FILE: kernel/sched_bfs.c:2424:
+	x->done += UINT_MAX/2;
 	                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#4011: FILE: kernel/sched_bfs.c:2486:
+	long t = wait_for_common(x, MAX_SCHEDULE_TIMEOUT, TASK_INTERRUPTIBLE);
+	if (t == -ERESTARTSYS)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4028: FILE: kernel/sched_bfs.c:2503:
+	long t = wait_for_common(x, MAX_SCHEDULE_TIMEOUT, TASK_KILLABLE);
+	if (t == -ERESTARTSYS)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4144: FILE: kernel/sched_bfs.c:2619:
+	BUG_ON(prio < 0 || prio > MAX_PRIO);

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#4192: FILE: kernel/sched_bfs.c:2667:
+	 * it wont have any effect on scheduling until the task is
 	      ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4347: FILE: kernel/sched_bfs.c:2822:
+	BUG_ON(task_queued(p));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4365: FILE: kernel/sched_bfs.c:2840:
+static int __sched_setscheduler(struct task_struct *p, int policy,
+		       struct sched_param *param, bool user)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4373: FILE: kernel/sched_bfs.c:2848:
+	BUG_ON(in_interrupt());

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4395: FILE: kernel/sched_bfs.c:2870:
+		policy = oldpolicy = p->policy;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4404: FILE: kernel/sched_bfs.c:2879:
+	    (p->mm && param->sched_priority > MAX_USER_RT_PRIO-1) ||
 	                                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4405: FILE: kernel/sched_bfs.c:2880:
+	    (!p->mm && param->sched_priority > MAX_RT_PRIO-1))
 	                                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'param->sched_priority != 0'
#4407: FILE: kernel/sched_bfs.c:2882:
+	if (is_rt_policy(policy) != (param->sched_priority != 0))

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#4424: FILE: kernel/sched_bfs.c:2899:
+			switch (p->policy) {
[...]
+				case SCHED_ISO:
[...]
+				case SCHED_BATCH:
[...]
+				case SCHED_IDLEPRIO:
[...]
+				default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#4439: FILE: kernel/sched_bfs.c:2914:
+^I^I^I^I^I    ^Ireturn -EPERM;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4439: FILE: kernel/sched_bfs.c:2914:
+^I^I^I^I^I    ^Ireturn -EPERM;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != p->euid'
#4451: FILE: kernel/sched_bfs.c:2926:
+		if ((current->euid != p->euid) &&
+		    (current->euid != p->uid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != p->uid'
#4451: FILE: kernel/sched_bfs.c:2926:
+		if ((current->euid != p->euid) &&
+		    (current->euid != p->uid))

WARNING:TYPO_SPELLING: 'apropriate' may be misspelled - perhaps 'appropriate'?
#4465: FILE: kernel/sched_bfs.c:2940:
+	 * To be able to change p->policy safely, the apropriate
 	                                              ^^^^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4473: FILE: kernel/sched_bfs.c:2948:
+		policy = oldpolicy = -1;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#4508: FILE: kernel/sched_bfs.c:2983:
+EXPORT_SYMBOL_GPL(sched_setscheduler);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#4511: FILE: kernel/sched_bfs.c:2986:
+ * sched_setscheduler_nocheck - change the scheduling policy and/or RT priority of a thread from kernelspace.

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#4542: FILE: kernel/sched_bfs.c:3017:
+	if (p != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != p->euid'
#4667: FILE: kernel/sched_bfs.c:3142:
+	if ((current->euid != p->euid) && (current->euid != p->uid) &&
+			!capable(CAP_SYS_NICE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != p->uid'
#4667: FILE: kernel/sched_bfs.c:3142:
+	if ((current->euid != p->euid) && (current->euid != p->uid) &&
+			!capable(CAP_SYS_NICE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4668: FILE: kernel/sched_bfs.c:3143:
+	if ((current->euid != p->euid) && (current->euid != p->uid) &&
+			!capable(CAP_SYS_NICE))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4698: FILE: kernel/sched_bfs.c:3173:
+static int get_user_cpu_mask(unsigned long __user *user_mask_ptr, unsigned len,

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#4701: FILE: kernel/sched_bfs.c:3176:
+	if (len < sizeof(cpumask_t)) {
[...]
+	} else if (len > sizeof(cpumask_t)) {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4831: FILE: kernel/sched_bfs.c:3306:
+	if (need_resched() && !(preempt_count() & PREEMPT_ACTIVE) &&
+					system_state == SYSTEM_RUNNING) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4867: FILE: kernel/sched_bfs.c:3342:
+	BUG_ON(!in_softirq());

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4938: FILE: kernel/sched_bfs.c:3413:
+		ret = MAX_USER_RT_PRIO-1;
 		                      ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5020: FILE: kernel/sched_bfs.c:3495:
+	unsigned state;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5023: FILE: kernel/sched_bfs.c:3498:
+	printk(KERN_INFO "%-13.13s %c", p->comm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5024: FILE: kernel/sched_bfs.c:3499:
+	printk(KERN_INFO "%-13.13s %c", p->comm,
+		state < sizeof(stat_nam) - 1 ? stat_nam[state] : '?');

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5027: FILE: kernel/sched_bfs.c:3502:
+		printk(KERN_CONT " running  ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5027: FILE: kernel/sched_bfs.c:3502:
+		printk(KERN_CONT " running  ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5029: FILE: kernel/sched_bfs.c:3504:
+		printk(KERN_CONT " %08lx ", thread_saved_pc(p));

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5029: FILE: kernel/sched_bfs.c:3504:
+		printk(KERN_CONT " %08lx ", thread_saved_pc(p));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5032: FILE: kernel/sched_bfs.c:3507:
+		printk(KERN_CONT "  running task    ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5032: FILE: kernel/sched_bfs.c:3507:
+		printk(KERN_CONT "  running task    ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5034: FILE: kernel/sched_bfs.c:3509:
+		printk(KERN_CONT " %016lx ", thread_saved_pc(p));

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5034: FILE: kernel/sched_bfs.c:3509:
+		printk(KERN_CONT " %016lx ", thread_saved_pc(p));

WARNING:LINE_SPACING: Missing a blank line after declarations
#5039: FILE: kernel/sched_bfs.c:3514:
+		unsigned long *n = end_of_stack(p);
+		while (!*n)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5044: FILE: kernel/sched_bfs.c:3519:
+	printk(KERN_CONT "%5lu %5d %6d\n", free,

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5044: FILE: kernel/sched_bfs.c:3519:
+	printk(KERN_CONT "%5lu %5d %6d\n", free,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5045: FILE: kernel/sched_bfs.c:3520:
+	printk(KERN_CONT "%5lu %5d %6d\n", free,
+		task_pid_nr(p), task_pid_nr(p->real_parent));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5055: FILE: kernel/sched_bfs.c:3530:
+	printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5058: FILE: kernel/sched_bfs.c:3533:
+	printk(KERN_INFO

WARNING:TYPO_SPELLING: 'alot' may be misspelled - perhaps 'a lot'?
#5065: FILE: kernel/sched_bfs.c:3540:
+		 * console might take alot of time:
 		                      ^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5103: FILE: kernel/sched_bfs.c:3578:
+	rq->curr = rq->idle = idle;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5172: FILE: kernel/sched_bfs.c:3647:
+				BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#5183: FILE: kernel/sched_bfs.c:3658:
+		if (atomic_read(&nohz.load_balancer) == -1) {
[...]
+		} else if (atomic_read(&nohz.load_balancer) == cpu)
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5197: FILE: kernel/sched_bfs.c:3672:
+				BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#5285: FILE: kernel/sched_bfs.c:3760:
+	if (task_running(p)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5289: FILE: kernel/sched_bfs.c:3764:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5317: FILE: kernel/sched_bfs.c:3792:
+	BUG_ON(cpu_online(this_cpu));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5341: FILE: kernel/sched_bfs.c:3816:
+	BUG_ON(cpu_online(smp_processor_id()));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry->proc_handler"
#5391: FILE: kernel/sched_bfs.c:3866:
+		if (entry->proc_handler == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!table"
#5416: FILE: kernel/sched_bfs.c:3891:
+	if (table == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5420: FILE: kernel/sched_bfs.c:3895:
+	set_table_entry(&table[0], "min_interval", &sd->min_interval,
+		sizeof(long), 0644, proc_doulongvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5422: FILE: kernel/sched_bfs.c:3897:
+	set_table_entry(&table[1], "max_interval", &sd->max_interval,
+		sizeof(long), 0644, proc_doulongvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5424: FILE: kernel/sched_bfs.c:3899:
+	set_table_entry(&table[2], "busy_idx", &sd->busy_idx,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5426: FILE: kernel/sched_bfs.c:3901:
+	set_table_entry(&table[3], "idle_idx", &sd->idle_idx,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5428: FILE: kernel/sched_bfs.c:3903:
+	set_table_entry(&table[4], "newidle_idx", &sd->newidle_idx,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5430: FILE: kernel/sched_bfs.c:3905:
+	set_table_entry(&table[5], "wake_idx", &sd->wake_idx,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5432: FILE: kernel/sched_bfs.c:3907:
+	set_table_entry(&table[6], "forkexec_idx", &sd->forkexec_idx,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5434: FILE: kernel/sched_bfs.c:3909:
+	set_table_entry(&table[7], "busy_factor", &sd->busy_factor,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5436: FILE: kernel/sched_bfs.c:3911:
+	set_table_entry(&table[8], "imbalance_pct", &sd->imbalance_pct,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5438: FILE: kernel/sched_bfs.c:3913:
+	set_table_entry(&table[9], "cache_nice_tries",
+		&sd->cache_nice_tries,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5441: FILE: kernel/sched_bfs.c:3916:
+	set_table_entry(&table[10], "flags", &sd->flags,
+		sizeof(int), 0644, proc_dointvec_minmax);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5456: FILE: kernel/sched_bfs.c:3931:
+	entry = table = sd_alloc_ctl_entry(domain_num + 1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!table"
#5457: FILE: kernel/sched_bfs.c:3932:
+	if (table == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#5482: FILE: kernel/sched_bfs.c:3957:
+	if (entry == NULL)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5510: FILE: kernel/sched_bfs.c:3985:
+}
+static void unregister_sched_domain_sysctl(void)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5610: FILE: kernel/sched_bfs.c:4085:
+	switch (action) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5621: FILE: kernel/sched_bfs.c:4096:
+			BUG_ON(!cpu_isset(cpu, rq->rd->span));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5657: FILE: kernel/sched_bfs.c:4132:
+			BUG_ON(!cpu_isset(cpu, rq->rd->span));

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after migration_notifier
#5670: FILE: kernel/sched_bfs.c:4145:
+static struct notifier_block __cpuinitdata migration_notifier = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5682: FILE: kernel/sched_bfs.c:4157:
+	BUG_ON(err == NOTIFY_BAD);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5719: FILE: kernel/sched_bfs.c:4194:
+
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5732: FILE: kernel/sched_bfs.c:4207:
+	printk(KERN_DEBUG "%*s domain %d: ", level, "", level);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5735: FILE: kernel/sched_bfs.c:4210:
+		printk("does not load-balance\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5737: FILE: kernel/sched_bfs.c:4212:
+			printk(KERN_ERR "ERROR: !SD_LOAD_BALANCE domain"

WARNING:SPLIT_STRING: quoted string split across lines
#5738: FILE: kernel/sched_bfs.c:4213:
+			printk(KERN_ERR "ERROR: !SD_LOAD_BALANCE domain"
+					" has parent");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5742: FILE: kernel/sched_bfs.c:4217:
+	printk(KERN_CONT "span %s level %s\n",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5742: FILE: kernel/sched_bfs.c:4217:
+	printk(KERN_CONT "span %s level %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5743: FILE: kernel/sched_bfs.c:4218:
+	printk(KERN_CONT "span %s level %s\n",
+		str, sd_level_to_string(sd->level));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5746: FILE: kernel/sched_bfs.c:4221:
+		printk(KERN_ERR "ERROR: domain->span does not contain "

WARNING:SPLIT_STRING: quoted string split across lines
#5747: FILE: kernel/sched_bfs.c:4222:
+		printk(KERN_ERR "ERROR: domain->span does not contain "
+				"CPU%d\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5750: FILE: kernel/sched_bfs.c:4225:
+		printk(KERN_ERR "ERROR: domain->groups does not contain"

WARNING:SPLIT_STRING: quoted string split across lines
#5751: FILE: kernel/sched_bfs.c:4226:
+		printk(KERN_ERR "ERROR: domain->groups does not contain"
+				" CPU%d\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5754: FILE: kernel/sched_bfs.c:4229:
+	printk(KERN_DEBUG "%*s groups:", level + 1, "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5757: FILE: kernel/sched_bfs.c:4232:
+			printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5758: FILE: kernel/sched_bfs.c:4233:
+			printk(KERN_ERR "ERROR: group is NULL\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5763: FILE: kernel/sched_bfs.c:4238:
+			printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5763: FILE: kernel/sched_bfs.c:4238:
+			printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5764: FILE: kernel/sched_bfs.c:4239:
+			printk(KERN_ERR "ERROR: domain->cpu_power not "

WARNING:SPLIT_STRING: quoted string split across lines
#5765: FILE: kernel/sched_bfs.c:4240:
+			printk(KERN_ERR "ERROR: domain->cpu_power not "
+					"set\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5770: FILE: kernel/sched_bfs.c:4245:
+			printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5770: FILE: kernel/sched_bfs.c:4245:
+			printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5771: FILE: kernel/sched_bfs.c:4246:
+			printk(KERN_ERR "ERROR: empty group\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5776: FILE: kernel/sched_bfs.c:4251:
+			printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5776: FILE: kernel/sched_bfs.c:4251:
+			printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5777: FILE: kernel/sched_bfs.c:4252:
+			printk(KERN_ERR "ERROR: repeated CPUs\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5784: FILE: kernel/sched_bfs.c:4259:
+		printk(KERN_CONT " %s", str);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5784: FILE: kernel/sched_bfs.c:4259:
+		printk(KERN_CONT " %s", str);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5788: FILE: kernel/sched_bfs.c:4263:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5788: FILE: kernel/sched_bfs.c:4263:
+	printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5791: FILE: kernel/sched_bfs.c:4266:
+		printk(KERN_ERR "ERROR: groups don't span domain->span\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#5794: FILE: kernel/sched_bfs.c:4269:
+		printk(KERN_ERR "ERROR: parent span is not a superset "

WARNING:SPLIT_STRING: quoted string split across lines
#5795: FILE: kernel/sched_bfs.c:4270:
+		printk(KERN_ERR "ERROR: parent span is not a superset "
+			"of domain->span\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5805: FILE: kernel/sched_bfs.c:4280:
+		printk(KERN_DEBUG "CPU%d attaching NULL sched-domain.\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5809: FILE: kernel/sched_bfs.c:4284:
+	printk(KERN_DEBUG "CPU%d attaching sched-domain:\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5813: FILE: kernel/sched_bfs.c:4288:
+		printk(KERN_DEBUG "Cannot load-balance (out of memory)\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#5813: FILE: kernel/sched_bfs.c:4288:
+	if (!groupmask) {
+		printk(KERN_DEBUG "Cannot load-balance (out of memory)\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#5955: FILE: kernel/sched_bfs.c:4430:
+		struct sched_domain *parent = tmp->parent;
+		if (!parent)

WARNING:MISPLACED_INIT: __initdata should be placed after ints[NR_CPUS]
#5982: FILE: kernel/sched_bfs.c:4457:
+	static int __initdata ints[NR_CPUS];

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#5988: FILE: kernel/sched_bfs.c:4463:
+		if (ints[i] < NR_CPUS)

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#5993: FILE: kernel/sched_bfs.c:4468:
+__setup("isolcpus=", isolated_cpu_setup);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6100: FILE: kernel/sched_bfs.c:4575:
+	nodemask_t used_nodes;
+	node_to_cpumask_ptr(nodemask, node);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#6255: FILE: kernel/sched_bfs.c:4730:
+		struct sched_group **sched_group_nodes
+			= sched_group_nodes_bycpu[cpu];

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sg"
#6268: FILE: kernel/sched_bfs.c:4743:
+			if (sg == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#6356: FILE: kernel/sched_bfs.c:4831:
+ SD_INIT_FUNC(ALLNODES)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#6357: FILE: kernel/sched_bfs.c:4832:
+ SD_INIT_FUNC(NODE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#6360: FILE: kernel/sched_bfs.c:4835:
+ SD_INIT_FUNC(SIBLING)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#6363: FILE: kernel/sched_bfs.c:4838:
+ SD_INIT_FUNC(MC)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#6390: FILE: kernel/sched_bfs.c:4865:
+#define	SCHED_CPUMASK_DECLARE(v)	struct allmasks *v

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#6394: FILE: kernel/sched_bfs.c:4869:
+#define	SCHED_CPUMASK_DECLARE(v)	struct allmasks _v, *v = &_v

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6397: FILE: kernel/sched_bfs.c:4872:
+#define^ISCHED_CPUMASK_VAR(v, a) ^Icpumask_t *v = (cpumask_t *) \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#6397: FILE: kernel/sched_bfs.c:4872:
+#define	SCHED_CPUMASK_VAR(v, a) 	cpumask_t *v = (cpumask_t *) \
+			((unsigned long)(a) + offsetof(struct allmasks, v))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#6397: FILE: kernel/sched_bfs.c:4872:
+#define	SCHED_CPUMASK_VAR(v, a) 	cpumask_t *v = (cpumask_t *) \
+			((unsigned long)(a) + offsetof(struct allmasks, v))

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#6406: FILE: kernel/sched_bfs.c:4881:
+	val = simple_strtoul(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#6412: FILE: kernel/sched_bfs.c:4887:
+__setup("relax_domain_level=", setup_relax_domain_level);

CHECK:BRACES: braces {} should be used on all arms of this statement
#6419: FILE: kernel/sched_bfs.c:4894:
+	if (!attr || attr->relax_domain_level < 0) {
[...]
+	} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#6422: FILE: kernel/sched_bfs.c:4897:
+			return;
+		else

CHECK:BRACES: Unbalanced braces around else statement
#6424: FILE: kernel/sched_bfs.c:4899:
+	} else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#6428: FILE: kernel/sched_bfs.c:4903:
+		sd->flags &= ~(SD_WAKE_IDLE|SD_BALANCE_NEWIDLE);
 		                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#6431: FILE: kernel/sched_bfs.c:4906:
+		sd->flags |= (SD_WAKE_IDLE_FAR|SD_BALANCE_NEWIDLE);
 		                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#6444: FILE: kernel/sched_bfs.c:4919:
+	struct root_domain *rd;
+	SCHED_CPUMASK_DECLARE(allmasks);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6456: FILE: kernel/sched_bfs.c:4931:
+		printk(KERN_WARNING "Can not alloc sched group node list\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#6456: FILE: kernel/sched_bfs.c:4931:
+	if (!sched_group_nodes) {
+		printk(KERN_WARNING "Can not alloc sched group node list\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6463: FILE: kernel/sched_bfs.c:4938:
+		printk(KERN_WARNING "Cannot alloc root domain\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6474: FILE: kernel/sched_bfs.c:4949:
+		printk(KERN_WARNING "Cannot alloc cpumask array\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#6474: FILE: kernel/sched_bfs.c:4949:
+	if (!allmasks) {
+		printk(KERN_WARNING "Cannot alloc cpumask array\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6484: FILE: kernel/sched_bfs.c:4959:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#6494: FILE: kernel/sched_bfs.c:4969:
+		struct sched_domain *sd = NULL, *p;
+		SCHED_CPUMASK_VAR(nodemask, allmasks);

CHECK:BRACES: braces {} should be used on all arms of this statement
#6500: FILE: kernel/sched_bfs.c:4975:
+		if (cpus_weight(*cpu_map) >
[...]
+		} else
[...]

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6501: FILE: kernel/sched_bfs.c:4976:
+				SD_NODES_PER_DOMAIN*cpus_weight(*nodemask)) {
 				                   ^

CHECK:BRACES: Unbalanced braces around else statement
#6509: FILE: kernel/sched_bfs.c:4984:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#6619: FILE: kernel/sched_bfs.c:5094:
+		struct sched_group *sg, *prev;
+		SCHED_CPUMASK_VAR(nodemask, allmasks);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*sg)...) over kmalloc_node(sizeof(struct sched_group)...)
#6636: FILE: kernel/sched_bfs.c:5111:
+		sg = kmalloc_node(sizeof(struct sched_group), GFP_KERNEL, i);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6638: FILE: kernel/sched_bfs.c:5113:
+			printk(KERN_WARNING "Can not alloc domain group for "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#6638: FILE: kernel/sched_bfs.c:5113:
+		if (!sg) {
+			printk(KERN_WARNING "Can not alloc domain group for "

WARNING:SPLIT_STRING: quoted string split across lines
#6639: FILE: kernel/sched_bfs.c:5114:
+			printk(KERN_WARNING "Can not alloc domain group for "
+				"node %d\n", i);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6658: FILE: kernel/sched_bfs.c:5133:
+			int n = (i + j) % nr_node_ids;
+			node_to_cpumask_ptr(pnodemask, n);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*sg)...) over kmalloc_node(sizeof(struct sched_group)...)
#6670: FILE: kernel/sched_bfs.c:5145:
+			sg = kmalloc_node(sizeof(struct sched_group),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6673: FILE: kernel/sched_bfs.c:5148:
+				printk(KERN_WARNING

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#6673: FILE: kernel/sched_bfs.c:5148:
+			if (!sg) {
+				printk(KERN_WARNING

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6717: FILE: kernel/sched_bfs.c:5192:
+		cpu_to_allnodes_group(first_cpu(*cpu_map), cpu_map, &sg,
+								tmpmask);

WARNING:TYPO_SPELLING: 'attribues' may be misspelled - perhaps 'attributes'?
#6754: FILE: kernel/sched_bfs.c:5229:
+				/* attribues of custom domains in 'doms_cur' */
 				   ^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#6763: FILE: kernel/sched_bfs.c:5238:
+void __attribute__((weak)) arch_update_cpu_topology(void)

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#6808: FILE: kernel/sched_bfs.c:5283:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#6869: FILE: kernel/sched_bfs.c:5344:
+			if (cpus_equal(doms_cur[i], doms_new[j])
+			    && dattrs_equal(dattr_cur, i, dattr_new, j))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!doms_new"
#6878: FILE: kernel/sched_bfs.c:5353:
+	if (doms_new == NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#6889: FILE: kernel/sched_bfs.c:5364:
+			if (cpus_equal(doms_new[i], doms_cur[j])
+			    && dattrs_equal(dattr_new, i, dattr_cur, j))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6894: FILE: kernel/sched_bfs.c:5369:
+		__build_sched_domains(doms_new + i,
+					dattr_new ? dattr_new + i : NULL);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6949: FILE: kernel/sched_bfs.c:5424:
+}
+static ssize_t sched_mc_power_savings_store(struct sysdev_class *class,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6965: FILE: kernel/sched_bfs.c:5440:
+}
+static ssize_t sched_smt_power_savings_store(struct sysdev_class *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7016: FILE: kernel/sched_bfs.c:5491:
+static int update_runtime(struct notifier_block *nfb,
+				unsigned long action, void *hcpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7043: FILE: kernel/sched_bfs.c:5518:
+	sched_group_nodes_bycpu = kzalloc(nr_cpu_ids * sizeof(void **),
+								GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7044: FILE: kernel/sched_bfs.c:5519:
+	BUG_ON(sched_group_nodes_bycpu == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sched_group_nodes_bycpu"
#7044: FILE: kernel/sched_bfs.c:5519:
+	BUG_ON(sched_group_nodes_bycpu == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7065: FILE: kernel/sched_bfs.c:5540:
+		BUG();

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#7113: FILE: kernel/sched_bfs.c:5588:
+		(addr >= (unsigned long)__sched_text_start
+		&& addr < (unsigned long)__sched_text_end);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#7138: FILE: kernel/sched_bfs.c:5613:
+		rq->user_pc = rq->nice_pc = rq->softirq_pc = rq->system_pc =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#7139: FILE: kernel/sched_bfs.c:5614:
+			      rq->iowait_pc = rq->idle_pc = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#7150: FILE: kernel/sched_bfs.c:5625:
+	grq.iso_ticks = grq.nr_running = grq.nr_uninterruptible = 0;

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#7163: FILE: kernel/sched_bfs.c:5638:
+		rq->cpu_locality = kmalloc(nr_cpu_ids * sizeof(unsigned long), GFP_NOWAIT);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7207: FILE: kernel/sched_bfs.c:5682:
+		printk(KERN_ERR "BUG: sleeping function called from invalid"

WARNING:SPLIT_STRING: quoted string split across lines
#7208: FILE: kernel/sched_bfs.c:5683:
+		printk(KERN_ERR "BUG: sleeping function called from invalid"
+				" context at %s:%d\n", file, line);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#7209: FILE: kernel/sched_bfs.c:5684:
+		printk("in_atomic():%d, irqs_disabled():%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7210: FILE: kernel/sched_bfs.c:5685:
+		printk("in_atomic():%d, irqs_disabled():%d\n",
+			in_atomic(), irqs_disabled());

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#7368: FILE: kernel/sysctl.c:86:
+extern int rr_interval;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#7369: FILE: kernel/sysctl.c:87:
+extern int sched_iso_cpu;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#7515: FILE: kernel/sysctl.c:613:
+		.maxlen		= sizeof (int),

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'one', consider using the shared one in include/linux/sysctl.h
#7519: FILE: kernel/sysctl.c:617:
+		.extra1		= &one,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#7526: FILE: kernel/sysctl.c:624:
+		.maxlen		= sizeof (int),

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#7530: FILE: kernel/sysctl.c:628:
+		.extra1		= &zero,

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#7585: FILE: Makefile:4:
+EXTRAVERSION = .35-bfs300
 ^^^^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064602.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 171 warnings, 123 checks, 7165 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064602.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
