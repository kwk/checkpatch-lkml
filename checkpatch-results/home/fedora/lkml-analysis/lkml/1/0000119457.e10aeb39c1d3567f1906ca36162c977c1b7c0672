CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/checkpoint.h:148:
+extern int checkpoint_memory_contents(struct ckpt_ctx *ctx,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#205: FILE: include/linux/checkpoint_hdr.h:357:
+} __attribute__((aligned(8)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/linux/shm.h:127:
+extern int ipcshm_restore(struct ckpt_ctx *ctx, struct mm_struct *mm,

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#264: FILE: ipc/checkpoint.c:107:
+#if 0 /* NEXT FEW PATCHES */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#275: FILE: ipc/checkpoint.c:219:
+#if 0 /* NEXT FEW PATCHES */

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#280: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#285: FILE: ipc/checkpoint_shm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#342: FILE: ipc/checkpoint_shm.c:58:
+		h->mlock_uid = (unsigned int) -1;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#351: FILE: ipc/checkpoint_shm.c:67:
+		ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: ipc/checkpoint_shm.c:73:
+	ckpt_debug("shm: cprid %d lprid %d segsz %lld mlock %d\n",
+		 h->shm_cprid, h->shm_lprid, h->shm_segsz, h->mlock_uid);

CHECK:SPACING: No space is necessary after a cast
#365: FILE: ipc/checkpoint_shm.c:81:
+	struct ckpt_ctx *ctx = (struct ckpt_ctx *) data;

CHECK:SPACING: No space is necessary after a cast
#366: FILE: ipc/checkpoint_shm.c:82:
+	struct kern_ipc_perm *perm = (struct kern_ipc_perm *) p;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#379: FILE: ipc/checkpoint_shm.c:95:
+	BUG_ON(!first);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#417: FILE: ipc/checkpoint_shm.c:133:
+	struct dq_ipcshm_del *dq = (struct dq_ipcshm_del *) data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: ipc/checkpoint_shm.c:157:
+	ckpt_debug("shm: cprid %d lprid %d segsz %lld mlock %d\n",
+		 h->shm_cprid, h->shm_lprid, h->shm_segsz, h->mlock_uid);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#478: FILE: ipc/checkpoint_shm.c:194:
+	ret = -ENOSYS;

CHECK:SPACING: No space is necessary after a cast
#479: FILE: ipc/checkpoint_shm.c:195:
+	if (h->mlock_uid != (unsigned int) -1)	/* FIXME: support SHM_LOCK */

CHECK:SPACING: No space is necessary after a cast
#501: FILE: ipc/checkpoint_shm.c:217:
+				     (deferqueue_func_t) ipc_shm_delete,

CHECK:SPACING: No space is necessary after a cast
#502: FILE: ipc/checkpoint_shm.c:218:
+				     (deferqueue_func_t) put_ipc_ns);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: ipc/checkpoint_shm.c:225:
+	ckpt_debug("shm: do_shmget size %lld flag %#x id %d\n",
+		 h->shm_segsz, shmflag, h->perms.id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#519: FILE: ipc/checkpoint_shm.c:235:
+	BUG_ON(IS_ERR(perms));  /* ipc_ns is private to us */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: ipc/shm.c:317:
+	ino_objref = ckpt_obj_lookup_add(ctx, vma->vm_file->f_dentry->d_inode,
+				       CKPT_OBJ_INODE, &first);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#618: FILE: ipc/shm.c:365:
+		return -ENOSYS;

CHECK:SPACING: No space is necessary after a cast
#623: FILE: ipc/shm.c:370:
+	ret = do_shmat(shmid, (char __user *) start, shmflg, &addr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#626: FILE: ipc/shm.c:373:
+	BUG_ON(ret >= 0 && addr != h->vm_start);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#654: FILE: ipc/util.h:187:
+extern int checkpoint_ipc_shm(int id, void *p, void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#655: FILE: ipc/util.h:188:
+extern int restore_ipc_shm(struct ckpt_ctx *ctx);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119457.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 16 checks, 532 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119457.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
