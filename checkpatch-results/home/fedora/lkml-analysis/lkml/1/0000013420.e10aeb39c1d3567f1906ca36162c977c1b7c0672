WARNING:BAD_SIGN_OFF: Non-standard signature: 'Sigend-off-by:' - perhaps 'Signed-off-by:'?
#33: 
Sigend-off-by: Jeff Dike <jdike@c2.user-mode-linux.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#52: FILE: drivers/vhost/Kconfig:12:
+config VHOST_PASSTHRU
+	tristate "Zerocopy network driver (EXPERIMENTAL)"
+	depends on VHOST_NET
+	---help---
+	  zerocopy network I/O support

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#67: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#72: FILE: drivers/vhost/mpassthru.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#130: FILE: drivers/vhost/mpassthru.c:59:
+#define DBG  if (mp->debug) printk

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#131: FILE: drivers/vhost/mpassthru.c:60:
+#define DBG1 if (debug == 2) printk

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: drivers/vhost/mpassthru.c:76:
+^Iint ^I^I^Iw_len;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: drivers/vhost/mpassthru.c:77:
+^Iint ^I^I^Ir_len;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#149: FILE: drivers/vhost/mpassthru.c:78:
+^Ispinlock_t      ^Iread_lock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#149: FILE: drivers/vhost/mpassthru.c:78:
+	spinlock_t      	read_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#150: FILE: drivers/vhost/mpassthru.c:79:
+^Iatomic_t        ^Irefcnt;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#151: FILE: drivers/vhost/mpassthru.c:80:
+^Istruct kmem_cache   ^I*cache;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#152: FILE: drivers/vhost/mpassthru.c:81:
+^Istruct net_device   ^I*dev;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#154: FILE: drivers/vhost/mpassthru.c:83:
+^Ivoid ^I^I^I*sendctrl;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#155: FILE: drivers/vhost/mpassthru.c:84:
+^Ivoid ^I^I^I*recvctrl;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#159: FILE: drivers/vhost/mpassthru.c:88:
+^Istruct list_head    ^Ilist;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: drivers/vhost/mpassthru.c:89:
+^Iint         ^I^Iheader;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#164: FILE: drivers/vhost/mpassthru.c:93:
+^Iint         ^I^Itotal;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#165: FILE: drivers/vhost/mpassthru.c:94:
+^Iint         ^I^Ioffset;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: drivers/vhost/mpassthru.c:95:
+^Istruct page     ^I*pages[MAX_SKB_FRAGS+1];$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#166: FILE: drivers/vhost/mpassthru.c:95:
+	struct page     	*pages[MAX_SKB_FRAGS+1];
 	                	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: drivers/vhost/mpassthru.c:96:
+^Istruct skb_frag_struct ^Ifrag[MAX_SKB_FRAGS+1];$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#167: FILE: drivers/vhost/mpassthru.c:96:
+	struct skb_frag_struct 	frag[MAX_SKB_FRAGS+1];
 	                       	                  ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: drivers/vhost/mpassthru.c:97:
+^Istruct sk_buff      ^I*skb;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#169: FILE: drivers/vhost/mpassthru.c:98:
+^Istruct page_ctor   ^I*ctor;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: drivers/vhost/mpassthru.c:106:
+#define INFO_READ      ^I^I0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: drivers/vhost/mpassthru.c:107:
+#define INFO_WRITE     ^I^I1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: drivers/vhost/mpassthru.c:108:
+^Iunsigned        ^Iflags;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#179: FILE: drivers/vhost/mpassthru.c:108:
+	unsigned        	flags;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: drivers/vhost/mpassthru.c:109:
+^Iunsigned        ^Ipnum;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#180: FILE: drivers/vhost/mpassthru.c:109:
+	unsigned        	pnum;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: drivers/vhost/mpassthru.c:114:
+^Isize_t          ^Ilen;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: drivers/vhost/mpassthru.c:120:
+^Iunsigned int    ^Idesc_pos;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: drivers/vhost/mpassthru.c:121:
+^Iunsigned int ^I^Ilog;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: drivers/vhost/mpassthru.c:122:
+^Istruct iovec ^I^Ihdr[VHOST_NET_MAX_SG];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: drivers/vhost/mpassthru.c:123:
+^Istruct iovec ^I^Iiov[VHOST_NET_MAX_SG];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#195: FILE: drivers/vhost/mpassthru.c:124:
+^Ivoid ^I^I^I*ctl;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: drivers/vhost/mpassthru.c:128:
+^Istruct mp_file   ^I*mfile;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: drivers/vhost/mpassthru.c:145:
+^Istruct sock            ^Isk;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#217: FILE: drivers/vhost/mpassthru.c:146:
+^Istruct mp_struct       ^I*mp;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: drivers/vhost/mpassthru.c:151:
+static struct skb_user_page *page_ctor(struct netdev_page_ctor *page_ctor,
+		struct sk_buff *skb, int npages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: drivers/vhost/mpassthru.c:183:
+static struct vhost_notifier *create_vhost_notifier(struct vhost_virtqueue *vq,
+			struct page_info *info, int size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: drivers/vhost/mpassthru.c:192:
+		if (i <= skb_shinfo(info->skb)->nr_frags &&
+				info->flags == INFO_WRITE)

WARNING:RETURN_VOID: void function return statements are not generally useful
#278: FILE: drivers/vhost/mpassthru.c:207:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#341: FILE: drivers/vhost/mpassthru.c:270:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: drivers/vhost/mpassthru.c:293:
+	ctor->cache = kmem_cache_create("skb_page_info",
+			sizeof(struct page_info), 0,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#365: FILE: drivers/vhost/mpassthru.c:294:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL);
 			                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#402: FILE: drivers/vhost/mpassthru.c:331:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: drivers/vhost/mpassthru.c:334:
+       atomic_inc(&ctor->refcnt);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#418: FILE: drivers/vhost/mpassthru.c:347:
+	struct page_info *info = NULL;
+	spin_lock_irqsave(&ctor->read_lock, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: drivers/vhost/mpassthru.c:350:
+		info = list_first_entry(&ctor->readq,
+				struct page_info, list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: drivers/vhost/mpassthru.c:393:
+static struct page_info *alloc_small_page_info(struct page_ctor *ctor,
+		int total)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: drivers/vhost/mpassthru.c:417:
+static struct page_info *alloc_page_info(struct page_ctor *ctor,
+			struct iovec *iov, int count, struct frag *frags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: drivers/vhost/mpassthru.c:441:
+		rc = get_user_pages(current, current->mm, base, n,
+				npages ? 1 : 0, 0, &info->pages[j], NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/vhost/mpassthru.c:450:
+			frags[j].size = min_t(int, len,
+					PAGE_SIZE - frags[j].offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: drivers/vhost/mpassthru.c:503:
+		DBG(KERN_INFO "Device %s cannot do mediate passthru.\n",
+				ctor->dev->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: drivers/vhost/mpassthru.c:512:
+static int mp_sendmsg(struct kiocb *iocb, struct socket *sock,
+		struct msghdr *m, size_t total_len)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "info"
#652: FILE: drivers/vhost/mpassthru.c:581:
+	if (info != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#677: FILE: drivers/vhost/mpassthru.c:606:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: drivers/vhost/mpassthru.c:608:
+static struct vhost_notifier *create_vhost_notifier(struct vhost_virtqueue *vq,
+			struct page_info *info, int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#718: FILE: drivers/vhost/mpassthru.c:647:
+			info = container_of(skb_shinfo(skb)->destructor_arg,
+					struct page_info, user);

WARNING:SPLIT_STRING: quoted string split across lines
#723: FILE: drivers/vhost/mpassthru.c:652:
+				DBG(KERN_INFO "Discarded truncated rx packet: "
+					" len %d > %zd\n", skb->len, info->len);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: drivers/vhost/mpassthru.c:676:
+				memcpy(skb_shinfo(skb), &info->ushinfo,
+						sizeof(struct skb_shared_info));

WARNING:TYPO_SPELLING: 'sufficent' may be misspelled - perhaps 'sufficient'?
#751: FILE: drivers/vhost/mpassthru.c:680:
+			 * in case user space buffers are not sufficent.
 			                                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#763: FILE: drivers/vhost/mpassthru.c:692:
+				info = list_first_entry(&ctor->readq,
+						struct page_info, list);

WARNING:TYPO_SPELLING: 'avaliable' may be misspelled - perhaps 'available'?
#768: FILE: drivers/vhost/mpassthru.c:697:
+				DBG(KERN_INFO "No user buffer avaliable %p\n",
 				                              ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: drivers/vhost/mpassthru.c:698:
+				DBG(KERN_INFO "No user buffer avaliable %p\n",
+									skb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: drivers/vhost/mpassthru.c:700:
+				skb_queue_head(&sock->sk->sk_receive_queue,
+									skb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: drivers/vhost/mpassthru.c:721:
+			hdr.hdr_len = min_t(int, skb->len,
+						info->iov[1].iov_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#797: FILE: drivers/vhost/mpassthru.c:726:
+		len = memcpy_toiovec(info->hdr, (unsigned char *)&hdr,
+								 sizeof hdr);

WARNING:SIZEOF_PARENTHESIS: sizeof hdr should be sizeof(hdr)
#797: FILE: drivers/vhost/mpassthru.c:726:
+								 sizeof hdr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: drivers/vhost/mpassthru.c:734:
+		vnotify = create_vhost_notifier(vq, info,
+				skb->len + sizeof(hdr));

WARNING:RETURN_VOID: void function return statements are not generally useful
#820: FILE: drivers/vhost/mpassthru.c:749:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#823: FILE: drivers/vhost/mpassthru.c:752:
+static int mp_recvmsg(struct kiocb *iocb, struct socket *sock,
+		struct msghdr *m, size_t total_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: drivers/vhost/mpassthru.c:778:
+	if (count > 2 && iov[1].iov_len < ctor->ctor.hdr_len &&
+			mp->dev->features & NETIF_F_SG) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#944: FILE: drivers/vhost/mpassthru.c:873:
+static int mp_chr_open(struct inode *inode, struct file * file)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#947: FILE: drivers/vhost/mpassthru.c:876:
+	struct mp_file *mfile;
+	cycle_kernel_lock();

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mp_chr_open', this function's name, in a string
#948: FILE: drivers/vhost/mpassthru.c:877:
+	DBG1(KERN_INFO "mp: mp_chr_open\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#990: FILE: drivers/vhost/mpassthru.c:919:
+	struct mp_struct *mp = NULL;
+	if (atomic_inc_not_zero(&mfile->count))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1034: FILE: drivers/vhost/mpassthru.c:963:
+	struct mp_struct *mp = container_of(sk, struct mp_sock, sk)->mp;
+	kfree(mp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1067: FILE: drivers/vhost/mpassthru.c:996:
+static long mp_chr_ioctl(struct file *file, unsigned int cmd,
+		unsigned long arg)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1072: FILE: drivers/vhost/mpassthru.c:1001:
+	void __user* argp = (void __user *)arg;

WARNING:SIZEOF_PARENTHESIS: sizeof ifr should be sizeof(ifr)
#1082: FILE: drivers/vhost/mpassthru.c:1011:
+		if (copy_from_user(&ifr, argp, sizeof ifr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1085: FILE: drivers/vhost/mpassthru.c:1014:
+		ifr.ifr_name[IFNAMSIZ-1] = '\0';
 		                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1151: FILE: drivers/vhost/mpassthru.c:1080:
+static unsigned int mp_chr_poll(struct file *file, poll_table * wait)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: drivers/vhost/mpassthru.c:1098:
+	if (sock_writeable(sk) ||
+		(!test_and_set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags) &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#1215: FILE: drivers/vhost/mpassthru.c:1144:
+	int ret = 0;
+	ret = misc_register(&mp_miscdev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1217: FILE: drivers/vhost/mpassthru.c:1146:
+		printk(KERN_ERR "mp: Can't register misc device\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1229: FILE: drivers/vhost/mpassthru.c:1158:
+ * holding a reference to the file for as long as the socket is in use. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1268: FILE: include/linux/mpassthru.h:1:
+#ifndef __MPASSTHRU_H

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1282: FILE: include/linux/mpassthru.h:15:
+struct socket *mp_get_socket(struct file *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013420.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 54 warnings, 32 checks, 1214 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013420.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
