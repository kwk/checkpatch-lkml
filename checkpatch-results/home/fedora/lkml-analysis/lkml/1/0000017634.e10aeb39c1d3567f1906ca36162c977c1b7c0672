WARNING:TYPO_SPELLING: 'exmaple' may be misspelled - perhaps 'example'?
#39: 
           add a DMA usage exmaple
                           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
14.01.2010 Change the size field of the fifo structure into a mask field, which

WARNING:REPEATED_WORD: Possible repeated word: 'and'
#49: 
           passing of the data pointer and and the fifo size was to costly

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#123: 
#include "kfifo.h"

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#125: 
#define FIFO_SIZE	32

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#127: 
#define	DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#128: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#130: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#132: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#141: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#146: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#148: 
#endif

WARNING:TYPO_SPELLING: 'initalized' may be misspelled - perhaps 'initialized'?
#153: 
		printk("fifo is initalized\n");
		                ^^^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#186: 
#include "kfifo.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#188: 
#define FIFO_SIZE	128

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#190: 
#define	DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#191: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#194: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#198: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#210: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#215: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#217: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#250: 
#include "kfifo.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#252: 
#define FIFO_SIZE	32

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#255: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#257: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#259: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#270: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#275: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#277: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#315: 
#include "kfifo.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#317: 
#define FIFO_SIZE	32

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1452: FILE: include/linux/kfifo.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1468: FILE: include/linux/kfifo.h:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1469: FILE: include/linux/kfifo.h:18:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'datatype' may be better as '(datatype)' to avoid precedence issues
#1516: FILE: include/linux/kfifo.h:65:
+#define __STRUCT_KFIFO_COMMON(datatype, recsize, ptrtype) \
+	union { \
+		struct __kfifo	kfifo; \
+		datatype	*type; \
+		char		(*rectype)[recsize]; \
+		ptrtype		*ptr; \
+		const ptrtype	*ptr_const; \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptrtype' - possible side-effects?
#1516: FILE: include/linux/kfifo.h:65:
+#define __STRUCT_KFIFO_COMMON(datatype, recsize, ptrtype) \
+	union { \
+		struct __kfifo	kfifo; \
+		datatype	*type; \
+		char		(*rectype)[recsize]; \
+		ptrtype		*ptr; \
+		const ptrtype	*ptr_const; \
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptrtype' may be better as '(ptrtype)' to avoid precedence issues
#1516: FILE: include/linux/kfifo.h:65:
+#define __STRUCT_KFIFO_COMMON(datatype, recsize, ptrtype) \
+	union { \
+		struct __kfifo	kfifo; \
+		datatype	*type; \
+		char		(*rectype)[recsize]; \
+		ptrtype		*ptr; \
+		const ptrtype	*ptr_const; \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#1525: FILE: include/linux/kfifo.h:74:
+#define __STRUCT_KFIFO(type, size, recsize, ptrtype) \
+{ \
+	__STRUCT_KFIFO_COMMON(type, recsize, ptrtype); \
+	type		buf[((size < 2) || (size & (size - 1))) ? -1 : size]; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#1525: FILE: include/linux/kfifo.h:74:
+#define __STRUCT_KFIFO(type, size, recsize, ptrtype) \
+{ \
+	__STRUCT_KFIFO_COMMON(type, recsize, ptrtype); \
+	type		buf[((size < 2) || (size & (size - 1))) ? -1 : size]; \
+}

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#1546: FILE: include/linux/kfifo.h:95:
+struct kfifo __STRUCT_KFIFO_PTR(unsigned char, 0, void);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#1546: FILE: include/linux/kfifo.h:95:
+struct kfifo __STRUCT_KFIFO_PTR(unsigned char, 0, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#1557: FILE: include/linux/kfifo.h:106:
+struct kfifo_rec_ptr_1 __STRUCT_KFIFO_PTR(unsigned char, 1, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#1557: FILE: include/linux/kfifo.h:106:
+struct kfifo_rec_ptr_1 __STRUCT_KFIFO_PTR(unsigned char, 1, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#1558: FILE: include/linux/kfifo.h:107:
+struct kfifo_rec_ptr_2 __STRUCT_KFIFO_PTR(unsigned char, 2, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#1558: FILE: include/linux/kfifo.h:107:
+struct kfifo_rec_ptr_2 __STRUCT_KFIFO_PTR(unsigned char, 2, void);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1566: FILE: include/linux/kfifo.h:115:
+#define DECLARE_KFIFO_PTR(fifo, type)	STRUCT_KFIFO_PTR(type) fifo

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fifo' may be better as '(fifo)' to avoid precedence issues
#1569: FILE: include/linux/kfifo.h:118:
+#define	__is_kfifo_ptr(fifo)	(sizeof(*fifo) == sizeof(struct __kfifo))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1571: FILE: include/linux/kfifo.h:120:
+#define __kfifo_initializer(fifo) \
+	(typeof(fifo)) { \
+		{ \
+			{ \
+			.in	= 0, \
+			.out	= 0, \
+			.mask	= __is_kfifo_ptr(&fifo) ? \
+				0 : \
+				sizeof((fifo).buf)/sizeof(*(fifo).buf) - 1, \
+			.data	=  __is_kfifo_ptr(&fifo) ? \
+				0 : \
+				(fifo).buf, \
+			} \
+		} \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fifo' - possible side-effects?
#1571: FILE: include/linux/kfifo.h:120:
+#define __kfifo_initializer(fifo) \
+	(typeof(fifo)) { \
+		{ \
+			{ \
+			.in	= 0, \
+			.out	= 0, \
+			.mask	= __is_kfifo_ptr(&fifo) ? \
+				0 : \
+				sizeof((fifo).buf)/sizeof(*(fifo).buf) - 1, \
+			.data	=  __is_kfifo_ptr(&fifo) ? \
+				0 : \
+				(fifo).buf, \
+			} \
+		} \
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fifo' may be better as '(fifo)' to avoid precedence issues
#1571: FILE: include/linux/kfifo.h:120:
+#define __kfifo_initializer(fifo) \
+	(typeof(fifo)) { \
+		{ \
+			{ \
+			.in	= 0, \
+			.out	= 0, \
+			.mask	= __is_kfifo_ptr(&fifo) ? \
+				0 : \
+				sizeof((fifo).buf)/sizeof(*(fifo).buf) - 1, \
+			.data	=  __is_kfifo_ptr(&fifo) ? \
+				0 : \
+				(fifo).buf, \
+			} \
+		} \
+	}

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1579: FILE: include/linux/kfifo.h:128:
+				sizeof((fifo).buf)/sizeof(*(fifo).buf) - 1, \
 				                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1591: FILE: include/linux/kfifo.h:140:
+#define INIT_KFIFO(fifo)	fifo = __kfifo_initializer(fifo)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fifo' - possible side-effects?
#1591: FILE: include/linux/kfifo.h:140:
+#define INIT_KFIFO(fifo)	fifo = __kfifo_initializer(fifo)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1599: FILE: include/linux/kfifo.h:148:
+#define DECLARE_KFIFO(fifo, type, size)	STRUCT_KFIFO(type, size) fifo

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1609: FILE: include/linux/kfifo.h:158:
+#define DEFINE_KFIFO(fifo, type, size) \
+	DECLARE_KFIFO(fifo, type, size) = __kfifo_initializer(fifo)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fifo' - possible side-effects?
#1609: FILE: include/linux/kfifo.h:158:
+#define DEFINE_KFIFO(fifo, type, size) \
+	DECLARE_KFIFO(fifo, type, size) = __kfifo_initializer(fifo)

WARNING:TYPO_SPELLING: 'alway' may be misspelled - perhaps 'always'?
#1623: FILE: include/linux/kfifo.h:172:
+ * Note: for in place fifo's this macro returns alway true
                                                 ^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1653: FILE: include/linux/kfifo.h:202:
+#define kfifo_reset(fifo) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	__tmp->kfifo.in = __tmp->kfifo.out = 0; \
+})

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1656: FILE: include/linux/kfifo.h:205:
+	__tmp->kfifo.in = __tmp->kfifo.out = 0; \

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1667: FILE: include/linux/kfifo.h:216:
+#define kfifo_reset_out(fifo)	\
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	__tmp->kfifo.out = __tmp->kfifo.in; \
+})

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1721: FILE: include/linux/kfifo.h:270:
+#define	kfifo_skip(fifo) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	const size_t __recsize = sizeof(*__tmp->rectype); \
+	struct __kfifo *__kfifo = &__tmp->kfifo; \
+	if (__recsize) \
+		__kfifo_skip_rec(__kfifo, __recsize); \
+	else \
+		__kfifo->out++; \
+})

WARNING:TYPO_SPELLING: 'numer' may be misspelled - perhaps 'number'?
#1758: FILE: include/linux/kfifo.h:307:
+ * The numer of elements will be rounded-up to a power of 2.
        ^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1769: FILE: include/linux/kfifo.h:318:
+ ^I-EINVAL; \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1769: FILE: include/linux/kfifo.h:318:
+ ^I-EINVAL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1769: FILE: include/linux/kfifo.h:318:
+ ^I-EINVAL; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1798: FILE: include/linux/kfifo.h:347:
+ ^I-EINVAL; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1798: FILE: include/linux/kfifo.h:347:
+ ^I-EINVAL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1798: FILE: include/linux/kfifo.h:347:
+ ^I-EINVAL; \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1820: FILE: include/linux/kfifo.h:369:
+		typeof(__tmp->ptr_const) __dummy __attribute__ ((unused)); \

WARNING:MEMORY_BARRIER: memory barrier without comment
#1834: FILE: include/linux/kfifo.h:383:
+			smp_wmb(); \

WARNING:MEMORY_BARRIER: memory barrier without comment
#1871: FILE: include/linux/kfifo.h:420:
+			smp_wmb(); \

WARNING:MEMORY_BARRIER: memory barrier without comment
#1908: FILE: include/linux/kfifo.h:457:
+			smp_wmb(); \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1936: FILE: include/linux/kfifo.h:485:
+		typeof(__tmp->ptr_const) __dummy __attribute__ ((unused)); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1959: FILE: include/linux/kfifo.h:508:
+#define	kfifo_in_locked(fifo, buf, n, lock) \
+({ \
+	unsigned long __flags; \
+	unsigned int __ret; \
+	spin_lock_irqsave(lock, __flags); \
+	__ret = kfifo_in(fifo, buf, n); \
+	spin_unlock_irqrestore(lock, __flags); \
+	__ret; \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#2016: FILE: include/linux/kfifo.h:565:
+#define	kfifo_out_locked(fifo, buf, n, lock) \
+__kfifo_check( \
+({ \
+	unsigned long __flags; \
+	unsigned int __ret; \
+	spin_lock_irqsave(lock, __flags); \
+	__ret = kfifo_out(fifo, buf, n); \
+	spin_unlock_irqrestore(lock, __flags); \
+	__ret; \
+}) \
+)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2150: FILE: include/linux/kfifo.h:699:
+#define kfifo_dma_in_finish(fifo, len) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	unsigned int __len = (len); \
+	const size_t __recsize = sizeof(*__tmp->rectype); \
+	struct __kfifo *__kfifo = &__tmp->kfifo; \
+	if (__recsize) \
+		__kfifo_dma_in_finish_rec(__kfifo, __len, __recsize); \
+	else \
+		__kfifo->in += __len / sizeof(*__tmp->type); \
+})

WARNING:TYPO_SPELLING: 'transferd' may be misspelled - perhaps 'transferred'?
#2203: FILE: include/linux/kfifo.h:752:
+ * @len: number of bytes transferd.
                          ^^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2211: FILE: include/linux/kfifo.h:760:
+#define kfifo_dma_out_finish(fifo, len) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	unsigned int __len = (len); \
+	const size_t __recsize = sizeof(*__tmp->rectype); \
+	struct __kfifo *__kfifo = &__tmp->kfifo; \
+	if (__recsize) \
+		__kfifo_dma_out_finish_rec(__kfifo, __len, __recsize); \
+	else \
+		__kfifo->out += __len / sizeof(*__tmp->type); \
+})

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#2246: FILE: include/linux/kfifo.h:795:
+		typeof(__tmp->ptr) __dummy __attribute__ ((unused)) = 0; \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2260: FILE: include/linux/kfifo.h:809:
+extern int __kfifo_alloc(struct __kfifo *fifo, unsigned int size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2261: FILE: include/linux/kfifo.h:810:
+extern int __kfifo_alloc(struct __kfifo *fifo, unsigned int size,
+	size_t esize, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2263: FILE: include/linux/kfifo.h:812:
+extern void __kfifo_free(struct __kfifo *fifo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2265: FILE: include/linux/kfifo.h:814:
+extern int __kfifo_init(struct __kfifo *fifo, void *buffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2266: FILE: include/linux/kfifo.h:815:
+extern int __kfifo_init(struct __kfifo *fifo, void *buffer,
+	unsigned int size, size_t esize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2268: FILE: include/linux/kfifo.h:817:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2269: FILE: include/linux/kfifo.h:818:
+extern unsigned int __kfifo_in(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2270: FILE: include/linux/kfifo.h:819:
+extern unsigned int __kfifo_in(struct __kfifo *fifo,
+	size_t esize, const void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2272: FILE: include/linux/kfifo.h:821:
+extern unsigned int __kfifo_in_1(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2273: FILE: include/linux/kfifo.h:822:
+extern unsigned int __kfifo_in_1(struct __kfifo *fifo,
+	const void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2275: FILE: include/linux/kfifo.h:824:
+extern unsigned int __kfifo_in_rec(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2276: FILE: include/linux/kfifo.h:825:
+extern unsigned int __kfifo_in_rec(struct __kfifo *fifo,
+	const void *buf, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2278: FILE: include/linux/kfifo.h:827:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2279: FILE: include/linux/kfifo.h:828:
+extern unsigned int __kfifo_out(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2280: FILE: include/linux/kfifo.h:829:
+extern unsigned int __kfifo_out(struct __kfifo *fifo,
+	size_t esize, void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2282: FILE: include/linux/kfifo.h:831:
+extern unsigned int __kfifo_out_1(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2283: FILE: include/linux/kfifo.h:832:
+extern unsigned int __kfifo_out_1(struct __kfifo *fifo,
+	void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2285: FILE: include/linux/kfifo.h:834:
+extern unsigned int __kfifo_out_rec(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2286: FILE: include/linux/kfifo.h:835:
+extern unsigned int __kfifo_out_rec(struct __kfifo *fifo,
+	void *buf, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2288: FILE: include/linux/kfifo.h:837:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2289: FILE: include/linux/kfifo.h:838:
+extern int __kfifo_from_user(struct __kfifo *fifo, size_t esize,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2290: FILE: include/linux/kfifo.h:839:
+extern int __kfifo_from_user(struct __kfifo *fifo, size_t esize,
+	const void __user *from, unsigned long len, unsigned int *copied);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2292: FILE: include/linux/kfifo.h:841:
+extern int __kfifo_from_user_1(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2293: FILE: include/linux/kfifo.h:842:
+extern int __kfifo_from_user_1(struct __kfifo *fifo,
+	const void __user *from, unsigned long len, unsigned int *copied);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2295: FILE: include/linux/kfifo.h:844:
+extern int __kfifo_from_user_rec(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2296: FILE: include/linux/kfifo.h:845:
+extern int __kfifo_from_user_rec(struct __kfifo *fifo,
+	const void __user *from, unsigned long len, unsigned int *copied,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2299: FILE: include/linux/kfifo.h:848:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2300: FILE: include/linux/kfifo.h:849:
+extern int __kfifo_to_user(struct __kfifo *fifo, size_t esize,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2301: FILE: include/linux/kfifo.h:850:
+extern int __kfifo_to_user(struct __kfifo *fifo, size_t esize,
+	void __user *to, unsigned long len, unsigned int *copied);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2303: FILE: include/linux/kfifo.h:852:
+extern int __kfifo_to_user_1(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2304: FILE: include/linux/kfifo.h:853:
+extern int __kfifo_to_user_1(struct __kfifo *fifo,
+	void __user *to, unsigned long len, unsigned int *copied);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2306: FILE: include/linux/kfifo.h:855:
+extern int __kfifo_to_user_rec(struct __kfifo *fifo, void __user *to,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2307: FILE: include/linux/kfifo.h:856:
+extern int __kfifo_to_user_rec(struct __kfifo *fifo, void __user *to,
+	unsigned long len, unsigned int *copied, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2309: FILE: include/linux/kfifo.h:858:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2310: FILE: include/linux/kfifo.h:859:
+extern unsigned int __kfifo_dma_in_prepare(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2311: FILE: include/linux/kfifo.h:860:
+extern unsigned int __kfifo_dma_in_prepare(struct __kfifo *fifo,
+	size_t esize, struct scatterlist *sgl, int nents, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2313: FILE: include/linux/kfifo.h:862:
+extern unsigned int __kfifo_dma_in_prepare_1(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2314: FILE: include/linux/kfifo.h:863:
+extern unsigned int __kfifo_dma_in_prepare_1(struct __kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2316: FILE: include/linux/kfifo.h:865:
+extern unsigned int __kfifo_dma_in_prepare_rec(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2317: FILE: include/linux/kfifo.h:866:
+extern unsigned int __kfifo_dma_in_prepare_rec(struct __kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2319: FILE: include/linux/kfifo.h:868:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2320: FILE: include/linux/kfifo.h:869:
+extern void __kfifo_dma_in_finish_rec(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2321: FILE: include/linux/kfifo.h:870:
+extern void __kfifo_dma_in_finish_rec(struct __kfifo *fifo,
+	unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2323: FILE: include/linux/kfifo.h:872:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2324: FILE: include/linux/kfifo.h:873:
+extern unsigned int __kfifo_dma_out_prepare(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2325: FILE: include/linux/kfifo.h:874:
+extern unsigned int __kfifo_dma_out_prepare(struct __kfifo *fifo,
+	size_t esize, struct scatterlist *sgl, int nents, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2327: FILE: include/linux/kfifo.h:876:
+extern unsigned int __kfifo_dma_out_prepare_1(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2328: FILE: include/linux/kfifo.h:877:
+extern unsigned int __kfifo_dma_out_prepare_1(struct __kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2330: FILE: include/linux/kfifo.h:879:
+extern unsigned int __kfifo_dma_out_prepare_rec(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2331: FILE: include/linux/kfifo.h:880:
+extern unsigned int __kfifo_dma_out_prepare_rec(struct __kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2333: FILE: include/linux/kfifo.h:882:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2334: FILE: include/linux/kfifo.h:883:
+extern void __kfifo_dma_out_finish_rec(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2335: FILE: include/linux/kfifo.h:884:
+extern void __kfifo_dma_out_finish_rec(struct __kfifo *fifo,
+	unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2337: FILE: include/linux/kfifo.h:886:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2338: FILE: include/linux/kfifo.h:887:
+extern unsigned int __kfifo_peek_reclen(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2339: FILE: include/linux/kfifo.h:888:
+extern unsigned int __kfifo_peek_reclen(struct __kfifo *fifo,
+	size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2341: FILE: include/linux/kfifo.h:890:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2342: FILE: include/linux/kfifo.h:891:
+extern unsigned int __kfifo_out_peek(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2343: FILE: include/linux/kfifo.h:892:
+extern unsigned int __kfifo_out_peek(struct __kfifo *fifo,
+	size_t esize, void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2345: FILE: include/linux/kfifo.h:894:
+extern unsigned int __kfifo_out_peek_1(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2346: FILE: include/linux/kfifo.h:895:
+extern unsigned int __kfifo_out_peek_1(struct __kfifo *fifo,
+	void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2348: FILE: include/linux/kfifo.h:897:
+extern unsigned int __kfifo_out_peek_rec(struct __kfifo *fifo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2349: FILE: include/linux/kfifo.h:898:
+extern unsigned int __kfifo_out_peek_rec(struct __kfifo *fifo,
+	void *buf, unsigned int len, size_t recsize);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2357: FILE: kernel/kfifo.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2373: FILE: kernel/kfifo.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2374: FILE: kernel/kfifo.c:18:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#2386: FILE: kernel/kfifo.c:30:
+#define	roundup_diff(val, size)	(((val) + (size - 1)) / size)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#2386: FILE: kernel/kfifo.c:30:
+#define	roundup_diff(val, size)	(((val) + (size - 1)) / size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2389: FILE: kernel/kfifo.c:33:
+int __kfifo_alloc(struct __kfifo *fifo, unsigned int size,
+		size_t esize, gfp_t gfp_mask)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2401: FILE: kernel/kfifo.c:45:
+	fifo->in = fifo->out = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2419: FILE: kernel/kfifo.c:63:
+^Ififo->mask = 0; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2420: FILE: kernel/kfifo.c:64:
+	fifo->in = fifo->out = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2425: FILE: kernel/kfifo.c:69:
+int __kfifo_init(struct __kfifo *fifo, void *buffer,
+		unsigned int size, size_t esize)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2436: FILE: kernel/kfifo.c:80:
+	fifo->in = fifo->out = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2443: FILE: kernel/kfifo.c:87:
+unsigned int __kfifo_in(struct __kfifo *fifo, size_t esize,
+		const void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2460: FILE: kernel/kfifo.c:104:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2467: FILE: kernel/kfifo.c:111:
+unsigned int __kfifo_out(struct __kfifo *fifo,
+		size_t esize, void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2484: FILE: kernel/kfifo.c:128:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2491: FILE: kernel/kfifo.c:135:
+unsigned int __kfifo_out_peek(struct __kfifo *fifo,
+		size_t esize, void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2508: FILE: kernel/kfifo.c:152:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2514: FILE: kernel/kfifo.c:158:
+int __kfifo_from_user(struct __kfifo *fifo, size_t esize,
+	const void __user *from, unsigned long len, unsigned int *copied)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2545: FILE: kernel/kfifo.c:189:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2554: FILE: kernel/kfifo.c:198:
+int __kfifo_to_user(struct __kfifo *fifo, size_t esize, void __user *to,
+		unsigned long len, unsigned int *copied)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2585: FILE: kernel/kfifo.c:229:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2594: FILE: kernel/kfifo.c:238:
+static unsigned int setup_sgl(void *data, unsigned int size,
+	struct scatterlist *sgl, int nents, unsigned int len, unsigned int off)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2600: FILE: kernel/kfifo.c:244:
+		if (nents > 1) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2606: FILE: kernel/kfifo.c:250:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2616: FILE: kernel/kfifo.c:260:
+unsigned int __kfifo_dma_in_prepare(struct __kfifo *fifo, size_t esize,
+		struct scatterlist *sgl, int nents, unsigned int len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2624: FILE: kernel/kfifo.c:268:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2639: FILE: kernel/kfifo.c:283:
+unsigned int __kfifo_dma_out_prepare(struct __kfifo *fifo, size_t esize,
+		struct scatterlist *sgl, int nents, unsigned int len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2647: FILE: kernel/kfifo.c:291:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2664: FILE: kernel/kfifo.c:308:
+unsigned int __kfifo_in_1(struct __kfifo *fifo, const void *buf,
+		unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2681: FILE: kernel/kfifo.c:325:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#2704: FILE: kernel/kfifo.c:348:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2711: FILE: kernel/kfifo.c:355:
+unsigned int __kfifo_out_peek_1(struct __kfifo *fifo, void *buf,
+		unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2728: FILE: kernel/kfifo.c:372:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2734: FILE: kernel/kfifo.c:378:
+int __kfifo_from_user_1(struct __kfifo *fifo, const void __user *from,
+		unsigned long len, unsigned int *copied)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2762: FILE: kernel/kfifo.c:406:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2771: FILE: kernel/kfifo.c:415:
+int __kfifo_to_user_1(struct __kfifo *fifo, void __user *to,
+		unsigned long len, unsigned int *copied)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2798: FILE: kernel/kfifo.c:442:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2807: FILE: kernel/kfifo.c:451:
+unsigned int __kfifo_dma_in_prepare_1(struct __kfifo *fifo,
+		struct scatterlist *sgl, int nents, unsigned int len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2815: FILE: kernel/kfifo.c:459:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2830: FILE: kernel/kfifo.c:474:
+unsigned int __kfifo_dma_out_prepare_1(struct __kfifo *fifo,
+		struct scatterlist *sgl, int nents, unsigned int len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2838: FILE: kernel/kfifo.c:482:
+		BUG();

WARNING:TYPO_SPELLING: 'storeing' may be misspelled - perhaps 'storing'?
#2878: FILE: kernel/kfifo.c:522:
+ * __kfifo_poke_n internal helper function for storeing the length of
                                                ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2899: FILE: kernel/kfifo.c:543:
+unsigned int __kfifo_in_rec(struct __kfifo *fifo, const void *buf,
+		unsigned int len, size_t recsize)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2918: FILE: kernel/kfifo.c:562:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2925: FILE: kernel/kfifo.c:569:
+unsigned int __kfifo_out_rec(struct __kfifo *fifo, void *buf,
+		unsigned int len, size_t recsize)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2946: FILE: kernel/kfifo.c:590:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2953: FILE: kernel/kfifo.c:597:
+unsigned int __kfifo_out_peek_rec(struct __kfifo *fifo, void *buf,
+		unsigned int len, size_t recsize)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2974: FILE: kernel/kfifo.c:618:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2980: FILE: kernel/kfifo.c:624:
+int __kfifo_from_user_rec(struct __kfifo *fifo, const void __user *from,
+	unsigned long len, unsigned int *copied, size_t recsize)

WARNING:MEMORY_BARRIER: memory barrier without comment
#3008: FILE: kernel/kfifo.c:652:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3017: FILE: kernel/kfifo.c:661:
+int __kfifo_to_user_rec(struct __kfifo *fifo, void __user *to,
+	unsigned long len, unsigned int *copied, size_t recsize)

WARNING:MEMORY_BARRIER: memory barrier without comment
#3047: FILE: kernel/kfifo.c:691:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3056: FILE: kernel/kfifo.c:700:
+unsigned int __kfifo_dma_in_prepare_rec(struct __kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int len, size_t recsize)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3064: FILE: kernel/kfifo.c:708:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3087: FILE: kernel/kfifo.c:731:
+void __kfifo_dma_in_finish_rec(struct __kfifo *fifo,
+	unsigned int len, size_t recsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3097: FILE: kernel/kfifo.c:741:
+unsigned int __kfifo_dma_out_prepare_rec(struct __kfifo *fifo,
+	struct scatterlist *sgl, int nents, unsigned int len, size_t recsize)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3105: FILE: kernel/kfifo.c:749:
+		BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3127: FILE: kernel/kfifo.c:771:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3129: FILE: kernel/kfifo.c:773:
+void __kfifo_dma_out_finish_rec(struct __kfifo *fifo,
+	unsigned int len, size_t recsize)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000017634.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 75 warnings, 110 checks, 1682 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000017634.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
