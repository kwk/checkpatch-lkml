CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#78: FILE: drivers/usb/serial/usb-serial.c:82:
+static struct usb_serial *get_free_serial(struct usb_serial *serial,
+					int num_ports, unsigned int *minor)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#117: FILE: drivers/usb/serial/usb-serial.c:186:
+static int serial_open (struct tty_struct *tty, struct file *filp)
                                                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#117: FILE: drivers/usb/serial/usb-serial.c:186:
+static int serial_open (struct tty_struct *tty, struct file *filp)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#151: FILE: drivers/usb/serial/usb-serial.c:258:
+static void serial_close(struct tty_struct *tty, struct file *filp)
                                                               ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: drivers/usb/serial/usb-serial.c:298:
+static int serial_write(struct tty_struct *tty, const unsigned char *buf,
+								int count)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#179: FILE: drivers/usb/serial/usb-serial.c:309:
+	   drop to zero until after the last close completes */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: drivers/usb/serial/usb-serial.c:361:
+static int serial_ioctl(struct tty_struct *tty, struct file *file,
+					unsigned int cmd, unsigned long arg)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#235: FILE: drivers/usb/serial/usb-serial.c:371:
+	/* pass on to the driver specific version of this function
+	   if it is available */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#235: FILE: drivers/usb/serial/usb-serial.c:371:
+	   if it is available */

CHECK:BRACES: Unbalanced braces around else statement
#242: FILE: drivers/usb/serial/usb-serial.c:376:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#256: FILE: drivers/usb/serial/usb-serial.c:388:
+	/* pass on to the driver specific version of this function
+	   if it is available */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#256: FILE: drivers/usb/serial/usb-serial.c:388:
+	   if it is available */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#273: FILE: drivers/usb/serial/usb-serial.c:403:
+	/* pass on to the driver specific version of this function
+	   if it is available */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#273: FILE: drivers/usb/serial/usb-serial.c:403:
+	   if it is available */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: drivers/usb/serial/usb-serial.c:412:
+static int serial_read_proc(char *page, char **start, off_t off, int count,
+							int *eof, void *data)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#299: FILE: drivers/usb/serial/usb-serial.c:427:
+		length += sprintf(page+length, "%d:", i);
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#309: FILE: drivers/usb/serial/usb-serial.c:429:
+			length += sprintf(page+length, " module:%s",
 			                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#311: FILE: drivers/usb/serial/usb-serial.c:431:
+		length += sprintf(page+length, " name:\"%s\"",
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#313: FILE: drivers/usb/serial/usb-serial.c:433:
+		length += sprintf(page+length, " vendor:%04x product:%04x",
 		                      ^

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#314: FILE: drivers/usb/serial/usb-serial.c:434:
+			le16_to_cpu(serial->dev->descriptor.idVendor),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#315: FILE: drivers/usb/serial/usb-serial.c:435:
+			le16_to_cpu(serial->dev->descriptor.idProduct));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#316: FILE: drivers/usb/serial/usb-serial.c:436:
+		length += sprintf(page+length, " num_ports:%d",
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#318: FILE: drivers/usb/serial/usb-serial.c:438:
+		length += sprintf(page+length, " port:%d",
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#324: FILE: drivers/usb/serial/usb-serial.c:441:
+		length += sprintf(page+length, " path:%s", tmp);
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#326: FILE: drivers/usb/serial/usb-serial.c:443:
+		length += sprintf(page+length, "\n");
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#335: FILE: drivers/usb/serial/usb-serial.c:459:
+	return (count < begin+length-off) ? count : begin+length-off;
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#335: FILE: drivers/usb/serial/usb-serial.c:459:
+	return (count < begin+length-off) ? count : begin+length-off;
 	                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#335: FILE: drivers/usb/serial/usb-serial.c:459:
+	return (count < begin+length-off) ? count : begin+length-off;
 	                                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#335: FILE: drivers/usb/serial/usb-serial.c:459:
+	return (count < begin+length-off) ? count : begin+length-off;
 	                                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: drivers/usb/serial/usb-serial.c:475:
+static int serial_tiocmset(struct tty_struct *tty, struct file *file,
 			    unsigned int set, unsigned int clear)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#405: FILE: drivers/usb/serial/usb-serial.c:611:
+static struct usb_serial_driver *search_serial_device(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: drivers/usb/serial/usb-serial.c:768:
+			dev_err(&interface->dev,
+			    "Generic device with no bulk out, not allowed.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#503: FILE: drivers/usb/serial/usb-serial.c:803:
+	/* we don't use num_ports here because some devices have more
+	   endpoint pairs than ports */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#503: FILE: drivers/usb/serial/usb-serial.c:803:
+	   endpoint pairs than ports */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: drivers/usb/serial/usb-serial.c:812:
+	dbg("%s - setting up %d port structures for this device",
+						__func__, max_endpoints);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#534: FILE: drivers/usb/serial/usb-serial.c:838:
 		if (!port->bulk_in_buffer) {
+			dev_err(&interface->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: drivers/usb/serial/usb-serial.c:839:
+			dev_err(&interface->dev,
+					"Couldn't allocate bulk_in_buffer\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: drivers/usb/serial/usb-serial.c:843:
+		usb_fill_bulk_urb(port->read_urb, dev,
+				usb_rcvbulkpipe(dev,

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#546: FILE: drivers/usb/serial/usb-serial.c:844:
+						endpoint->bEndpointAddress),

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#560: FILE: drivers/usb/serial/usb-serial.c:862:
 		if (!port->bulk_out_buffer) {
+			dev_err(&interface->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: drivers/usb/serial/usb-serial.c:863:
+			dev_err(&interface->dev,
+					"Couldn't allocate bulk_out_buffer\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: drivers/usb/serial/usb-serial.c:867:
+		usb_fill_bulk_urb(port->write_urb, dev,
+				usb_sndbulkpipe(dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: drivers/usb/serial/usb-serial.c:868:
+				usb_sndbulkpipe(dev,
+					endpoint->bEndpointAddress),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: drivers/usb/serial/usb-serial.c:880:
+				dev_err(&interface->dev,
+						"No free urbs available\n");

CHECK:CAMELCASE: Avoid CamelCase: <interrupt_in_endpointAddress>
#590: FILE: drivers/usb/serial/usb-serial.c:884:
+			port->interrupt_in_endpointAddress =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: drivers/usb/serial/usb-serial.c:887:
+			port->interrupt_in_buffer = kmalloc(buffer_size,
+								GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: drivers/usb/serial/usb-serial.c:890:
+				dev_err(&interface->dev,
+				    "Couldn't allocate interrupt_in_buffer\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: drivers/usb/serial/usb-serial.c:894:
+			usb_fill_int_urb(port->interrupt_in_urb, dev,
+				usb_rcvintpipe(dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: drivers/usb/serial/usb-serial.c:895:
+				usb_rcvintpipe(dev,
+						endpoint->bEndpointAddress),

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#611: FILE: drivers/usb/serial/usb-serial.c:898:
+				endpoint->bInterval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: drivers/usb/serial/usb-serial.c:911:
+				dev_err(&interface->dev,
+						"No free urbs available\n");

CHECK:CAMELCASE: Avoid CamelCase: <interrupt_out_endpointAddress>
#633: FILE: drivers/usb/serial/usb-serial.c:916:
+			port->interrupt_out_endpointAddress =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: drivers/usb/serial/usb-serial.c:919:
+			port->interrupt_out_buffer = kmalloc(buffer_size,
+								GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: drivers/usb/serial/usb-serial.c:922:
+				dev_err(&interface->dev,
+				  "Couldn't allocate interrupt_out_buffer\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: drivers/usb/serial/usb-serial.c:926:
+			usb_fill_int_urb(port->interrupt_out_urb, dev,
+				usb_sndintpipe(dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#651: FILE: drivers/usb/serial/usb-serial.c:927:
+				usb_sndintpipe(dev,
+						  endpoint->bEndpointAddress),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: drivers/usb/serial/usb-serial.c:940:
+			dev_err(&interface->dev,
+					"module get failed, exiting\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#678: FILE: drivers/usb/serial/usb-serial.c:949:
+			/* quietly accept this device, but don't bind to a
+			   serial port as it's about to disappear */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#678: FILE: drivers/usb/serial/usb-serial.c:949:
+			   serial port as it's about to disappear */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!get_free_serial"
#684: FILE: drivers/usb/serial/usb-serial.c:954:
+	if (get_free_serial(serial, num_ports, &minor) == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: drivers/usb/serial/usb-serial.c:969:
+		snprintf(&port->dev.bus_id[0], sizeof(port->dev.bus_id),
+						"ttyUSB%d", port->number);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#733: FILE: drivers/usb/serial/usb-serial.c:1030:
+	dbg("%s", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: drivers/usb/serial/usb-serial.c:1227:
+		err("problem %d when registering driver %s",
+						retval, driver->description);

CHECK:BRACES: Unbalanced braces around else statement
#814: FILE: drivers/usb/serial/usb-serial.c:1229:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: drivers/usb/serial/usb-serial.c:1231:
+		info("USB Serial support registered for %s",
+						driver->description);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265206.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 48 checks, 755 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265206.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
