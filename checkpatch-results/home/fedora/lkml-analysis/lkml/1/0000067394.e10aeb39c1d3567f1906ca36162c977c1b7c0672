WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#114: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#119: FILE: tools/perf/builtin-kprobe.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#137: FILE: tools/perf/builtin-kprobe.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#138: FILE: tools/perf/builtin-kprobe.c:20:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#200: FILE: tools/perf/builtin-kprobe.c:82:
+	ptr = session.events[session.nr_probe] = strdup(str);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#205: FILE: tools/perf/builtin-kprobe.c:87:
+		semantic_error("You must specify 'p'(kprobe) or"
+				" 'r'(kretprobe) first.");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#211: FILE: tools/perf/builtin-kprobe.c:93:
+			debug("argv[%d]=%s\n", argc, ptr+1);
 			                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#263: FILE: tools/perf/builtin-kprobe.c:145:
+				semantic_error("You can't specify local"
+						" variable for kretprobe");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: tools/perf/builtin-kprobe.c:187:
+	OPT_STRING('k', "vmlinux", &session.vmlinux, "file",
+		"vmlinux/module pathname"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: tools/perf/builtin-kprobe.c:190:
+	OPT_CALLBACK('P', "probe", NULL,
+		"p|r:[GRP/]NAME,FUNC[+OFFS][@SRC]|@SRC:LINE,ARG[,ARG,...]",

WARNING:LINE_SPACING: Missing a blank line after declarations
#342: FILE: tools/perf/builtin-kprobe.c:224:
+	int i, len, ret;
+	pp->probes[0] = buf = (char *)calloc(MAX_CMDLEN, sizeof(char));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#342: FILE: tools/perf/builtin-kprobe.c:224:
+	pp->probes[0] = buf = (char *)calloc(MAX_CMDLEN, sizeof(char));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: tools/perf/builtin-kprobe.c:245:
+	argc = parse_options(argc, argv, options, kprobe_usage,
+		PARSE_OPT_STOP_AT_NON_OPTION);

WARNING:TYPO_SPELLING: 'Settng' may be misspelled - perhaps 'Setting'?
#407: FILE: tools/perf/builtin-kprobe.c:289:
+	/* Settng up probe points */
 	   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: tools/perf/builtin-kprobe.c:300:
+			snprintf(buf, MAX_CMDLEN, "%s %s\n",
+				session.events[j], pp->probes[0]);

CHECK:BRACES: Unbalanced braces around else statement
#420: FILE: tools/perf/builtin-kprobe.c:302:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: tools/perf/builtin-kprobe.c:305:
+				snprintf(buf, MAX_CMDLEN, "%s%d %s\n",
+					session.events[j], i, pp->probes[i]);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#439: FILE: tools/perf/builtin.h:28:
+extern int cmd_kprobe(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#462: FILE: tools/perf/util/probe-finder.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#478: FILE: tools/perf/util/probe-finder.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#479: FILE: tools/perf/util/probe-finder.c:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#497: FILE: tools/perf/util/probe-finder.c:36:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Die>
#501: FILE: tools/perf/util/probe-finder.c:40:
+	Dwarf_Die die;			/* Current die */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Debug>
#504: FILE: tools/perf/util/probe-finder.c:43:
+static Dwarf_Debug __dw_debug;

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Error>
#505: FILE: tools/perf/util/probe-finder.c:44:
+static Dwarf_Error __dw_error;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#520: FILE: tools/perf/util/probe-finder.c:59:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#580: FILE: tools/perf/util/probe-finder.c:119:
+	int i2 = strlen(s2);
+	while (--i1 > 0 && --i2 > 0) {

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Unsigned>
#588: FILE: tools/perf/util/probe-finder.c:127:
+static Dwarf_Unsigned die_get_fileno(Dwarf_Die cu_die, const char *fname)

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Signed>
#590: FILE: tools/perf/util/probe-finder.c:129:
+	Dwarf_Signed cnt, i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#619: FILE: tools/perf/util/probe-finder.c:158:
+	int ret;
+	ret = dwarf_diename(die, &name, &__dw_error);

CHECK:BRACES: braces {} should be used on all arms of this statement
#621: FILE: tools/perf/util/probe-finder.c:160:
+	if (ret == DW_DLV_OK) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#624: FILE: tools/perf/util/probe-finder.c:163:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Addr>
#630: FILE: tools/perf/util/probe-finder.c:169:
+static int die_within_subprogram(Dwarf_Die sp_die, Dwarf_Addr addr,

CHECK:BRACES: braces {} should be used on all arms of this statement
#643: FILE: tools/perf/util/probe-finder.c:182:
+	if (lopc <= addr && addr < hipc) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#646: FILE: tools/perf/util/probe-finder.c:185:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Bool>
#651: FILE: tools/perf/util/probe-finder.c:190:
+static Dwarf_Bool die_inlined_subprogram(Dwarf_Die die)

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Off>
#663: FILE: tools/perf/util/probe-finder.c:202:
+static Dwarf_Off die_get_abstract_origin(Dwarf_Die die)

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Attribute>
#665: FILE: tools/perf/util/probe-finder.c:204:
+	Dwarf_Attribute attr;

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Ranges>
#683: FILE: tools/perf/util/probe-finder.c:222:
+	Dwarf_Ranges *ranges;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: tools/perf/util/probe-finder.c:248:
+	ret = dwarf_get_ranges(__dw_debug, offs, &ranges, &cnt, NULL,
+				&__dw_error);

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Locdesc>
#775: FILE: tools/perf/util/probe-finder.c:314:
+static int attr_get_locdesc(Dwarf_Attribute attr, Dwarf_Locdesc *desc,

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Loc>
#790: FILE: tools/perf/util/probe-finder.c:329:
+				malloc(sizeof(Dwarf_Loc) * llbuf[i]->ld_cents);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc->ld_s"
#791: FILE: tools/perf/util/probe-finder.c:330:
+			ERR_IF(desc->ld_s == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#793: FILE: tools/perf/util/probe-finder.c:332:
+			memcpy(desc->ld_s, llbuf[i]->ld_s,
+				sizeof(Dwarf_Loc) * llbuf[i]->ld_cents);

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Small>
#816: FILE: tools/perf/util/probe-finder.c:355:
+	Dwarf_Small op;

CHECK:BRACES: braces {} should be used on all arms of this statement
#825: FILE: tools/perf/util/probe-finder.c:364:
+	if (op == DW_OP_fbreg) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#830: FILE: tools/perf/util/probe-finder.c:369:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#833: FILE: tools/perf/util/probe-finder.c:372:
+	if (op >= DW_OP_breg0 && op <= DW_OP_breg31) {
[...]
+	} else if (op >= DW_OP_reg0 && op <= DW_OP_reg31) {
[...]
+	} else if (op == DW_OP_bregx) {
[...]
+	} else if (op == DW_OP_regx) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#845: FILE: tools/perf/util/probe-finder.c:384:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#854: FILE: tools/perf/util/probe-finder.c:393:
+		ret = snprintf(pf->buf, pf->len,
+				 " %s=%+lld(%s)", pf->var, offs, regs);

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Half>
#882: FILE: tools/perf/util/probe-finder.c:421:
+	Dwarf_Half tag;

WARNING:SPACING: space prohibited before semicolon
#907: FILE: tools/perf/util/probe-finder.c:446:
+		return ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#951: FILE: tools/perf/util/probe-finder.c:490:
+		ret = snprintf(tmp, MAX_PROBE_BUFFER, "%s+%u", name,
+				(unsigned int)offs);

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Line>
#999: FILE: tools/perf/util/probe-finder.c:538:
+	Dwarf_Line *lines;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1054: FILE: tools/perf/util/probe-finder.c:593:
+				debug("inline definition offset %lld\n",
+					pf->inl_offs);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lk"
#1071: FILE: tools/perf/util/probe-finder.c:610:
+			for (lk = dlink->parent; lk != NULL; lk = lk->parent) {

WARNING:SPLIT_STRING: quoted string split across lines
#1108: FILE: tools/perf/util/probe-finder.c:647:
+		msg_exit(-1, "Failed to call dwarf_init(). "
+			 "Maybe, not a dwarf file?\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1114: FILE: tools/perf/util/probe-finder.c:653:
+		ret = dwarf_next_cu_header(__dw_debug, NULL, NULL, NULL,
+			&addr_size, &next_cuh, &__dw_error);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1152: FILE: tools/perf/util/probe-finder.h:1:
+#ifndef _PROBE_FINDER_H

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cnd' - possible side-effects?
#1165: FILE: tools/perf/util/probe-finder.h:14:
+#define ERR_IF(cnd)	\
+	do { if (cnd) {	\
+		fprintf(stderr, "Error (" __FILE__ ":" stringify(__LINE__) \
+			"): " stringify(cnd) "\n");			\
+		exit(1);						\
+	} } while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1198: FILE: tools/perf/util/probe-finder.h:47:
+extern int find_probepoint(int fd, struct probe_point *pp);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000067394.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 12 warnings, 45 checks, 1095 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000067394.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
